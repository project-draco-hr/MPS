{
  super(20);
  getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      updateCompletion();
    }
    public void removeUpdate(    DocumentEvent e){
      updateCompletion();
    }
    public void changedUpdate(    DocumentEvent e){
      updateCompletion();
    }
  }
);
  addCaretListener(new CaretListener(){
    public void caretUpdate(    CaretEvent e){
      if (isFocusOwner()) {
        updateCompletion();
      }
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiers() == 0 && myHint.isVisible()) {
        myHint.complete();
        e.consume();
      }
    }
  }
);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      myHint.up();
    }
  }
,KeyStroke.getKeyStroke("UP"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myHint.isVisible()) {
        myHint.down();
      }
 else {
        myHint.show();
        updateCompletion();
      }
    }
  }
,KeyStroke.getKeyStroke("DOWN"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      myHint.show();
      updateCompletion();
    }
  }
,KeyStroke.getKeyStroke("control SPACE"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ESCAPE && myHint.isVisible()) {
        myHint.hide();
        e.consume();
      }
    }
  }
);
  addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      myHint.hide();
    }
  }
);
}
