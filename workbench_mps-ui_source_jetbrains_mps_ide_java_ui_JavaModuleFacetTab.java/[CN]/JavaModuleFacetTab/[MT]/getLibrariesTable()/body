{
  myLibraryTableModel=new LibraryTableModel();
  final JBTable librariesTable=new JBTable(myLibraryTableModel);
  librariesTable.setTableHeader(null);
  librariesTable.setDefaultRenderer(String.class,new MyPathRenderer());
  librariesTable.setShowHorizontalLines(false);
  librariesTable.setShowVerticalLines(false);
  librariesTable.setAutoCreateRowSorter(false);
  librariesTable.setAutoscrolls(true);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(librariesTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<ModelRootDescriptor> modelRoots=new ArrayList<ModelRootDescriptor>(myJavaModuleFacet.getModule().getModuleDescriptor().getModelRootDescriptors());
      StubRootChooser stubRootChooser=new StubRootChooser(librariesTable,modelRoots,myJavaModuleFacet.getModule() instanceof Language);
      myLibraryTableModel.addAll(stubRootChooser.compute());
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(librariesTable);
      myLibraryTableModel.fireTableDataChanged();
    }
  }
);
  decorator.setToolbarBorder(IdeBorderFactory.createBorder());
  decorator.setPreferredSize(new Dimension(500,100));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createTitledBorder(PropertiesBundle.message("facet.java.libraries"),false));
  return table;
}
