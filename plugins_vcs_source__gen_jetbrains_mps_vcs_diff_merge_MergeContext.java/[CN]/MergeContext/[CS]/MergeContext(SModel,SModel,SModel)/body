{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      MergeConflictsBuilder conflictsBuilder=new MergeConflictsBuilder(base,mine,repository);
      myMineChangeSet=conflictsBuilder.myMineChangeSet;
      myRepositoryChangeSet=conflictsBuilder.myRepositoryChangeSet;
      myConflictingChanges=conflictsBuilder.myConflictingChanges;
      mySymmetricChanges=conflictsBuilder.mySymmetricChanges;
      fillRootToChangesMap();
      myResultModel=CopyUtil.copyModel(base);
      int pv=Sequence.fromIterable(Sequence.fromArray(new SModel[]{base,mine,repository})).<Integer>select(new ISelector<SModel,Integer>(){
        public Integer select(        SModel m){
          return m.getPersistenceVersion();
        }
      }
).sort(new ISelector<Integer,Comparable<?>>(){
        public Comparable<?> select(        Integer v){
          return v;
        }
      }
,false).first();
      myResultModel.setPersistenceVersion(pv);
      myNodeCopier=new NodeCopier(myResultModel);
    }
  }
);
}
