{
  beforeNodeRemovedRecursively(event.getChild());
  invalidateDeletedRoot(event);
  SNode baseParent=myMineChangeSet.getOldModel().getNodeById(event.getParent().getSNodeId());
  if (baseParent == null) {
    return;
  }
  List<SNode> baseChildren=baseParent.getChildren(event.getChildRole());
  final Map<SNodeId,SNode> baseChildrenMap=MapSequence.fromMap(new HashMap<SNodeId,SNode>());
  ListSequence.fromList(baseChildren).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode c){
      MapSequence.fromMap(baseChildrenMap).put(c.getSNodeId(),c);
    }
  }
);
  List<NodeGroupChange> relevantChanges=getRelevantNodeGroupChanges(event);
  if (ListSequence.fromList(relevantChanges).isEmpty()) {
    return;
  }
  SNode baseChild=MapSequence.fromMap(baseChildrenMap).get(event.getChild().getSNodeId());
  if (baseChild == null) {
    return;
  }
  final int index=SNodeOperations.getIndexInParent(baseChild);
  invalidateChanges(ListSequence.fromList(relevantChanges).where(new IWhereFilter<NodeGroupChange>(){
    public boolean accept(    NodeGroupChange ch){
      return ch.getBegin() <= index + 1 && index <= ch.getEnd();
    }
  }
).<ModelChange>select(new ISelector<NodeGroupChange,ModelChange>(){
    public ModelChange select(    NodeGroupChange ch){
      return (ModelChange)ch;
    }
  }
));
}
