{
  myEditorContext=editorContext;
  mySNode=node;
  String qualifiedName=node.getConcept().getQualifiedName();
  myConceptDescriptor=ConceptRegistry.getInstance().getConceptDescriptor(qualifiedName);
  if (myConceptDescriptor instanceof IllegalConceptDescriptor || !(mySNode instanceof jetbrains.mps.smodel.SNode) || new SNodeLegacy(mySNode).getConceptDeclarationNode() == null) {
    myNullConcept=true;
  }
  ConceptDescriptor baseConceptDescriptor=ConceptRegistry.getInstance().getConceptDescriptor(BASE_CONCEPT_FQ_NAME);
  if (!myNullConcept) {
    myPropertyNames=new ArrayList<String>(myConceptDescriptor.getPropertyNames());
    myReferencesNames=new ArrayList<String>(myConceptDescriptor.getReferenceNames());
    myChildrenNames=new ArrayList<String>(myConceptDescriptor.getChildrenNames());
  }
 else {
    myPropertyNames=new ArrayList<String>();
    for (    String name : mySNode.getPropertyNames()) {
      myPropertyNames.add(name);
    }
    myReferencesNames=new ArrayList<String>();
    for (    SReference ref : mySNode.getReferences()) {
      myReferencesNames.add(ref.getRole());
    }
    Set<String> rolesSet=new HashSet<String>();
    for (    SNode sNode : mySNode.getChildren()) {
      rolesSet.add(sNode.getRoleInParent());
    }
    myChildrenNames=new ArrayList<String>(rolesSet);
  }
  Set<String> basePropertyNames=baseConceptDescriptor.getPropertyNames();
  Set<String> baseRefNames=baseConceptDescriptor.getReferenceNames();
  Set<String> baseChildNames=baseConceptDescriptor.getChildrenNames();
  myPropertyNames.removeAll(basePropertyNames);
  myReferencesNames.removeAll(baseRefNames);
  myChildrenNames.removeAll(baseChildNames);
  cacheNameProperty();
}
