{
  final IConfigMonitor cmon=new IConfigMonitor.Stub(){
    public <T extends IOption>T relayQuery(    IQuery<T> query){
      return query.defaultOption();
    }
  }
;
  final IJobMonitor jmon=new IJobMonitor.Stub(){
    @Override public void reportFeedback(    IFeedback fdbk){
      new BuildMakeService.MessageFeedbackStrategy(messageHandler).reportFeedback(fdbk);
    }
  }
;
  final Wrappers._T<ProgressIndicator> pind=new Wrappers._T<ProgressIndicator>(new EmptyProgressIndicator());
  return new IScriptController(){
    public void runConfigWithMonitor(    _FunctionTypes._void_P1_E0<? super IConfigMonitor> code){
      code.invoke(cmon);
    }
    public void runJobWithMonitor(    final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
      IdeEventQueue.getInstance().flushQueue();
      ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
        public void run(        ProgressIndicator realInd){
          pind.value=new EmptyProgressIndicator();
          code.invoke(jmon);
        }
      }
,"Build",true,BuildMakeService.this.context.getProject());
    }
    public void setup(    IParametersPool pool){
      Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars=(Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>>)pool.parameters(new ITarget.Name("checkParameters"),Object.class);
      vars._0(BuildMakeService.this.context.getProject());
      vars._1(BuildMakeService.this.context);
      vars._2(true);
      vars._3(new _FunctionTypes._return_P0_E0<ProgressIndicator>(){
        public ProgressIndicator invoke(){
          return pind.value;
        }
      }
);
      if (ctl != null) {
        ctl.setup(pool);
      }
    }
  }
;
}
