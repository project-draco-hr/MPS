{
  SReference fieldRef=SNodeOperations.getReference(fieldRefOperation,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","fieldDeclaration"));
  if (!(fieldRef instanceof DynamicReference && "length".equals((((DynamicReference)(fieldRef)).getResolveInfo())))) {
    return;
  }
  SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRefOperation),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
  Iterable<SReference> operandRefs=SNodeOperations.getReferences(operand);
  if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return it instanceof DynamicReference;
    }
  }
)) {
    return;
  }
  if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(operand),"jetbrains.mps.baseLanguage.structure.ArrayType")) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(fieldRefOperation,"should be length operation","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2364881513287750350",null,errorTarget);
{
        BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.replaceNode_QuickFix",true);
        intentionProvider.putArgument("newNode;",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation",null));
        _reporter_2309309498.addIntentionProvider(intentionProvider);
      }
    }
  }
}
