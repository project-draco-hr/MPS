{
  IFile tmpDir=IFileUtils.createTmpDir();
  assertTrue("Temp dir does not exist",tmpDir.exists());
  assertTrue("Created temp directory is not directory",tmpDir.isDirectory());
  assertFalse("Could create file with the same name as the directory",tmpDir.createNewFile());
  assertTrue("Created temp directory is not empty",tmpDir.getChildren().isEmpty());
  IFile subSubDir=tmpDir.getDescendant(SUBSUBDIR);
  assertTrue(subSubDir.mkdirs());
  assertTrue(subSubDir.isDirectory());
  assertTrue(subSubDir.exists());
  IFile file1=tmpDir.getDescendant(SUBSUBDIR + File.separator + "file1");
  assertFalse(file1.exists());
  assertTrue(file1.getParent().equals(subSubDir));
  try {
    OutputStream os=file1.openOutputStream();
    for (int i=0; i < FILE_SIZE; i++) {
      os.write(i % 256);
    }
    os.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    fail();
  }
  assertTrue(file1.exists());
  assertEquals(file1.length(),FILE_SIZE);
  assertEquals(Arrays.asList(file1),subSubDir.getChildren());
  try {
    InputStream os=file1.openInputStream();
    for (int i=0; i < FILE_SIZE; i++) {
      assertEquals(os.read(),i % 256);
    }
    os.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
    fail();
  }
  assertTrue(tmpDir.delete());
  assertFalse(tmpDir.exists());
}
