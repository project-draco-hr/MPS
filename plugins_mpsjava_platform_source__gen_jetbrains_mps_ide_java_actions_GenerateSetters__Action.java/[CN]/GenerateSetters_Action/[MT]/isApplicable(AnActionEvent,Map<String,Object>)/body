{
  SNode classConcept=SNodeOperations.getAncestor(((SNode)((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  List<SNode> fields=SLinkOperations.getTargets(SNodeOperations.cast(classConcept,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"field",true);
  if (ListSequence.fromList(fields).isEmpty()) {
    return false;
  }
  boolean allSettersImplemented=true;
  Project project=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
  for (  SNode fieldDeclaration : fields) {
    final String setterName=GenerateGettersAndSettersUtil.getFieldSetterName(fieldDeclaration,project);
    boolean fieldHasSetter=false;
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode method){
        return setterName.equals(SPropertyOperations.getString(method,"name"));
      }
    }
)) {
      fieldHasSetter=true;
    }
    if (!(fieldHasSetter)) {
      allSettersImplemented=false;
    }
  }
  return !(allSettersImplemented);
}
