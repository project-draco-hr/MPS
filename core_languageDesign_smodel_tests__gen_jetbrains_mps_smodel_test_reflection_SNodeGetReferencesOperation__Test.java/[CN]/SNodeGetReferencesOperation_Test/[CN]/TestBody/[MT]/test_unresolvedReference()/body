{
  this.addNodeById("2906110183022219846");
  this.addNodeById("2906110183022219807");
  this.addNodeById("2906110183022219843");
  this.addNodeById("2906110183022354865");
  this.addNodeById("2906110183022432276");
  int initialSize=Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"),"jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"))).count();
  Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"),"jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return (SLinkOperations.getTargetNode(it) == null);
    }
  }
).isEmpty());
  SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById("2906110183022432277"),"jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"),"root",false).delete();
  Assert.assertEquals(initialSize,Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"),"jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"))).count());
  Iterable<SReference> brokenReferences=Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022432277"),"jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return it.getTargetNodeSilently() == null;
    }
  }
);
  Assert.assertEquals(1,Sequence.fromIterable(brokenReferences).count());
  SReference theReference=Sequence.fromIterable(brokenReferences).first();
  Assert.assertEquals(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer","root"),"role"),SLinkOperations.getRole(theReference));
  Assert.assertEquals(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer","root"),SLinkOperations.findLinkDeclaration(theReference));
  Assert.assertNotNull(SLinkOperations.getResolveInfo(theReference));
}
