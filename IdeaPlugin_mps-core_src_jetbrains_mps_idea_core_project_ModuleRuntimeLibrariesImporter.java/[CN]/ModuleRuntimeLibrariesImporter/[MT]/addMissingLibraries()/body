{
  Project project=getProject();
  Set<ModuleReference> alreadyImported=new HashSet<ModuleReference>();
  for (  OrderEntry entry : myModifiableRootModel.getOrderEntries()) {
    if (entry instanceof LibraryOrderEntry) {
      alreadyImported.addAll(SolutionLibrariesIndex.getInstance(getProject()).getModules(((LibraryOrderEntry)entry).getLibrary()));
    }
  }
  Collection<Library> projectLibs2Add=new HashSet<Library>();
  Map<ModuleReference,Collection<VirtualFile>> projectLibs2Create=new HashMap<ModuleReference,Collection<VirtualFile>>();
  for (  IModule usedModule : collectRuntimeModules(myAddedModules)) {
    if (!(usedModule instanceof Solution) || !usedModule.isPackaged() || BootstrapLanguages.JDK.equals(usedModule.getModuleReference())) {
      continue;
    }
    if (alreadyImported.contains(usedModule.getModuleReference())) {
      continue;
    }
    Library library=getAutoLibrary(usedModule.getModuleReference());
    if (library != null) {
      projectLibs2Add.add(library);
    }
 else {
      Set<VirtualFile> stubFiles=SolutionLibraryType.getSolutionJars((Solution)usedModule);
      projectLibs2Create.put(usedModule.getModuleReference(),stubFiles);
    }
  }
  for (  Library projectLibrary : projectLibs2Add) {
    myModifiableRootModel.addLibraryEntry(projectLibrary);
  }
  for (  ModuleReference moduleReference : projectLibs2Create.keySet()) {
    Collection<VirtualFile> libraryFiles=projectLibs2Create.get(moduleReference);
    Library projectLibrary=createProjectLibrary(moduleReference.getModuleFqName(),libraryFiles);
    SolutionLibrariesIndex.getInstance(project).addLibrary(projectLibrary,moduleReference);
    myModifiableRootModel.addLibraryEntry(projectLibrary);
  }
}
