{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractCellSelector_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AbstractPaddingStyleClassItem_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractStyledTextOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new ApplyStyleClass_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ApplyStyleClassCondition_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new AttributeStyleClassItem_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new BooleanStyleSheetItem_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new CaretPositionParameter_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellActionMapDeclaration_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellActionMapItem_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellIdReferenceSelector_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellKeyMapDeclaration_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellKeyMapItem_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellKeyMapKeystroke_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellLayout_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuComponent_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuComponentFeature_Link_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuComponentFeature_Property_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuDescriptor_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_Abstract_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ApplySideTransforms_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_CellMenuComponent_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_Generic_Group_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_Generic_Item_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_PropertyPostfixHints_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_PropertyValues_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReferentPrimary_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChildPrimary_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_CustomChildConcept_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_Group_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_Item_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceNode_CustomNodeConcept_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceNode_Group_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Alternation_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_AttributedLinkCell_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_AttributedNodeCell_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_AttributedPropertyCell_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Block_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_BlockEnd_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_BlockStart_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Collection_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Component_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Constant_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_ContextAssistant_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Custom_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Empty_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Error_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Image_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Indent_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_JComponent_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_ModelAccess_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_NextEditor_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_Property_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_ReadOnlyModelAccessor_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_RefCell_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_RefNode_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_RefNodeList_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_ReferencePresentation_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_TransactionalProperty_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new CellModel_URL_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new ColorStyleClassItem_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptEditorContextHints_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptEditorDeclaration_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclaration_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclarationReference_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclarationReferenceExpression_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new ContextExpression_TransformationMenu_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new ContextVariable_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultBaseLine_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultCaretPositionStyleClassItem_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new DominatesRecord_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorCellId_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorCellModel_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorComponentDeclaration_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorComponentDeclarationReference_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExplicitHintsSpecification_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new FloatStyleClassItem_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new FontSizeStyleClassItem_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new FontStyleStyleClassItem_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new HorizontalAlign_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new IdSelector_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineEditorComponent_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineStyleDeclaration_Editor());
}
break;
case 83:
if (true) {
return Collections.<ConceptEditor>singletonList(new LayoutConstraintStyleClassItem_Editor());
}
break;
case 84:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchingLabelStyleClassItem_Editor());
}
break;
case 85:
if (true) {
return Collections.<ConceptEditor>singletonList(new MaxWidthStyleClassItem_Editor());
}
break;
case 86:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModelAccessor_Editor());
}
break;
case 87:
if (true) {
return Collections.<ConceptEditor>singletonList(new NavigatableNodeStyleClassItem_Editor());
}
break;
case 88:
if (true) {
return Collections.<ConceptEditor>singletonList(new NavigatableReferenceStyleClassItem_Editor());
}
break;
case 89:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParametersInformationQuery_Editor());
}
break;
case 90:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParametersInformationStyleClassItem_Editor());
}
break;
case 91:
if (true) {
return Collections.<ConceptEditor>singletonList(new PositionChildrenStyleClassItem_Editor());
}
break;
case 92:
if (true) {
return Collections.<ConceptEditor>singletonList(new PositionStyleClassItem_Editor());
}
break;
case 93:
if (true) {
return Collections.<ConceptEditor>singletonList(new PreDefinedStyleClassItem_Editor());
}
break;
case 94:
if (true) {
return Collections.<ConceptEditor>singletonList(new PredefinedSelector_Editor());
}
break;
case 95:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyDeclarationCellSelector_Editor());
}
break;
case 96:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyExpressionCellSelector_Editor());
}
break;
case 97:
if (true) {
return Collections.<ConceptEditor>singletonList(new RGBColor_Editor());
}
break;
case 98:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReadOnlyModelAccessor_Editor());
}
break;
case 99:
if (true) {
return Collections.<ConceptEditor>singletonList(new RightTransformAnchorTagWrapper_Editor());
}
break;
case 100:
if (true) {
return Collections.<ConceptEditor>singletonList(new ScriptKindClassItem_Editor());
}
break;
case 101:
if (true) {
return Collections.<ConceptEditor>singletonList(new SelectInEditorOperation_Editor());
}
break;
case 102:
if (true) {
return Collections.<ConceptEditor>singletonList(new SelectPositionParameter_Editor());
}
break;
case 103:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTransformAnchorTagStyleClassItem_Editor());
}
break;
case 104:
if (true) {
return Collections.<ConceptEditor>singletonList(new StubEditorCellModel_Editor());
}
break;
case 105:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleAttributeDeclaration_Editor());
}
break;
case 106:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleAttributeReferenceExpression_Editor());
}
break;
case 107:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleClass_Editor());
}
break;
case 108:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleClassReference_Editor());
}
break;
case 109:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleClassReferenceList_Editor());
}
break;
case 110:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleKey_Editor());
}
break;
case 111:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleKeyPack_Editor());
}
break;
case 112:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleReference_Editor());
}
break;
case 113:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleSheet_Editor());
}
break;
case 114:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleSheetClass_Editor());
}
break;
case 115:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleSheetClassReference_Editor());
}
break;
case 116:
if (true) {
return Collections.<ConceptEditor>singletonList(new TableComponentStyleClassItem_Editor());
}
break;
case 117:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationFeature_Icon_Editor());
}
break;
case 118:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationFeature_Tooltip_Editor());
}
break;
case 119:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationLocation_Editor());
}
break;
case 120:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuContribution_Editor());
}
break;
case 121:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Editor());
}
break;
case 122:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Action_Editor());
}
break;
case 123:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Group_Editor());
}
break;
case 124:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_IncludeMenu_Editor());
}
break;
case 125:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_SubMenu_Editor());
}
break;
case 126:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Super_Editor());
}
break;
case 127:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuReference_Default_Editor());
}
break;
case 128:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuReference_Named_Editor());
}
break;
case 129:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenuSection_Editor());
}
break;
case 130:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenu_Default_Editor());
}
break;
case 131:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformationMenu_Named_Editor());
}
break;
case 132:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnapplyStyle_Editor());
}
break;
case 133:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnderlinedStyleClassItem_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
