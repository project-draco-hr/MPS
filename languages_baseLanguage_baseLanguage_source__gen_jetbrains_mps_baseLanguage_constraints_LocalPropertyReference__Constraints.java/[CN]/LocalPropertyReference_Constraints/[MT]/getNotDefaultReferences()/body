{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_pyukpt_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode classifier=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
            if (classifier == null) {
              return new EmptyScope();
            }
            final SNode enclosingProperty=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Property",false,false);
            SNode classifierType=_quotation_createNode_pyukpt_a0d0a0(classifier);
            return new NamedElementsScope(Sequence.fromIterable(IClassifierType_Behavior.call_getVisibleMembers_6145907390641297279(classifierType,_context.getContextNode())).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Property");
              }
            }
).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Property");
              }
            }
).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return enclosingProperty == null || neq_pyukpt_a0a0a0a0a0a0a4a0a1a0a0a1a0b0a1a3(it,enclosingProperty);
              }
            }
));
          }
        }
      }
;
    }
  }
);
  return references;
}
