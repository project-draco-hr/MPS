{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(_context.getEnclosingNode());
          if (classifier == null) {
            return null;
          }
          List<SNode> resultProperties=new ArrayList<SNode>();
          List<SNode> classifiers=new ClassifierAndSuperClassifiersScope(classifier).getClassifiers();
          for (          SNode cl : ListSequence.fromList(classifiers)) {
            if (SNodeOperations.isInstanceOf(cl,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
              for (              SNode property : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(cl,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"property",true))) {
                if (VisibilityUtil.isVisible(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),property)) {
                  ListSequence.fromList(resultProperties).addElement(property);
                }
              }
            }
          }
          return resultProperties;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_pyukpt_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
