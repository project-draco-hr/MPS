{
  this.myName=name;
  myComponent=new JPanel(new BorderLayout(0,0));
  if (name != null && name.length() > 0) {
    myTitleComponent=buildTitle(name);
    myTitleComponent.addMouseListener(new MouseAdapter(){
      @Override public void mouseClicked(      MouseEvent event){
        setCollapsed(!(isCollapsed()));
      }
    }
);
    myComponent.add(myTitleComponent,BorderLayout.NORTH);
  }
  myItemContainer=new JPanel(new GridLayout(0,1,0,1));
  if (viewType == ViewType.SYMBOLS) {
    myItemContainer.setLayout(new GridLayout(0,4,3,1){
      @Override public Dimension preferredLayoutSize(      Container container){
        updateColumnNumber(container);
        return super.preferredLayoutSize(container);
      }
      @Override public Dimension minimumLayoutSize(      Container container){
        updateColumnNumber(container);
        return super.minimumLayoutSize(container);
      }
      @Override public void layoutContainer(      Container container){
        updateColumnNumber(container);
        super.layoutContainer(container);
      }
      public void updateColumnNumber(      Container container){
        Container toolComponent=SwingUtilities.getAncestorOfClass(ToolComponent.class,myComponent);
        int maxWidth=toolComponent.getWidth();
        setColumns(1);
        while (super.preferredLayoutSize(container).width <= maxWidth && getColumns() < 100) {
          setColumns(getColumns() + 1);
        }
        setColumns(Math.max(1,getColumns() - 1));
      }
    }
);
  }
  myItemContainer.setBorder(BorderFactory.createEmptyBorder(6,3,12,3));
  myComponent.add(myItemContainer,BorderLayout.WEST);
  myComponent.setOpaque(false);
  myItemContainer.setOpaque(false);
  setCollapsed(wasCollapsed());
}
