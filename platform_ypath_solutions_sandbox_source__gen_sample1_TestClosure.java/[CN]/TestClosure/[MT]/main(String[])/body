{
  _void closure;
  _int_int fib=new _FunctionTypes._int_int(){
    public int invoke(    int n){
      return (n <= 1 ? n : this.invoke(n - 1) + this.invoke(n - 2));
    }
  }
;
  System.out.println("fib(8)=" + fib.invoke(8));
  System.out.println("fib(9)=" + new _FunctionTypes._int_int(){
    public int invoke(    int n){
      return (n <= 1 ? n : this.invoke(n - 1) + this.invoke(n - 2));
    }
  }
.invoke(9));
  int calc=new _FunctionTypes._int(){
    public int invoke(){
      return 2 + 2;
    }
  }
.invoke();
  System.out.println("2+2=" + calc);
  System.out.println("fact(5)=" + new _FunctionTypes._int_int(){
    public int invoke(    int n){
      int res=1;
      while (n > 1) {
        res=res * n;
        n=n - 1;
      }
      return res;
    }
  }
.invoke(5));
  _sequence1_Integer foo=new _FunctionTypes._sequence1_Integer(){
    public Iterable<Integer> invoke(){
      return new Iterable<Integer>(){
        public Iterator<Integer> iterator(){
          return new _FunctionTypes.YieldingIterator<Integer>(){
            private int __CP__=0;
            private int _1_bar;
            protected boolean moveToNext(){
              __loop__:               do {
switch (this.__CP__) {
case 0:
case 1:
                  this._1_bar=0;
case 2:
                if (!(this._1_bar < 10)) {
                  this.__CP__=6;
                  break;
                }
              this.__CP__=3;
            break;
case 3:
          this.__CP__=4;
        break;
case 5:
      this._1_bar=this._1_bar + 1;
    this.__CP__=2;
  break;
case 4:
this.__CP__=5;
this.yield((Integer)this._1_bar);
return true;
default :
break __loop__;
}
}
 while (true);
return false;
}
}
;
}
}
;
}
}
;
Iterable<Integer> seq=foo.invoke();
for (int i : seq) {
System.out.println("yielded: " + i);
}
}
