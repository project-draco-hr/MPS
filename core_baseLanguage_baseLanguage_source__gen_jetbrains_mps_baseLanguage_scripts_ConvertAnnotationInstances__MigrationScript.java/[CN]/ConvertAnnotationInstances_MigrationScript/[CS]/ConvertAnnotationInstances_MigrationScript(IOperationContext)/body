{
  super("Convert Deprecated Annotation Instances");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "convert deprecated annotation instances";
    }
    public String getAdditionalInfo(){
      return "convert deprecated annotation instances";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SLinkOperations.getTarget(node,"annotationInstance",true));
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
