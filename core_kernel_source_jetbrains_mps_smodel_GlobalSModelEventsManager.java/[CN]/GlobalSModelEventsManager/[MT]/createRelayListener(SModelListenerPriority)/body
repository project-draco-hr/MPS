{
  return (SModelListener)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{SModelListener.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String methodName=method.getName();
      if (methodName.equals("equals") && args.length == 1) {
        return proxy == args[0];
      }
 else       if (methodName.equals("hashCode") && args == null) {
        return this.hashCode();
      }
 else       if (methodName.equals("getPriority") && args == null) {
        return priority;
      }
      method.setAccessible(true);
      List<SModelListener> listeners=globalListeners(priority);
      for (      SModelListener listener : listeners) {
        try {
          checkListenerIsValid(listener);
          method.invoke(listener,args);
        }
 catch (        Throwable t) {
          LOG.error("Exception while invoking an SModelListener " + listener + " by reflection",t);
        }
      }
      return null;
    }
    /** 
 * Checks that listener's class loader is not disposed (in the case when the listener belongs to some module)
 */
    private void checkListenerIsValid(    SModelListener listener){
      ClassLoader classLoader=listener.getClass().getClassLoader();
      if (classLoader instanceof ModuleClassLoader && ((ModuleClassLoader)classLoader).isDisposed()) {
        LOG.error("SModelListener " + listener + " has a disposed ClassLoader. A possible reason: the listener was not properly unregistered. Removing the listener explicitly.",new IllegalStateException());
        GlobalSModelEventsManager.this.removeGlobalModelListener(listener);
      }
    }
  }
);
}
