{
  return (SModelListener)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{SModelListener.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (method.getName().equals("equals") && args.length == 1) {
        return proxy == args[0];
      }
      if (method.getName().equals("hashCode") && args == null) {
        return this.hashCode();
      }
      if (method.getName().equals("getPriority") && args == null) {
        return priority;
      }
      method.setAccessible(true);
      for (      SModelListener l : globalListeners(priority)) {
        try {
          method.invoke(l,args);
        }
 catch (        Throwable t) {
          LOG.error(t);
        }
      }
      return null;
    }
  }
);
}
