{
  List<EquationInfo> allEqInfos=new ArrayList<EquationInfo>(myAllInequations.keySet());
  Map<Integer,Set<EquationInfo>> prioritiesToIneqs=new HashMap<Integer,Set<EquationInfo>>();
  Map<Pair<String,String>,Set<EquationInfo>> ineqIdsToIneqs=new HashMap<Pair<String,String>,Set<EquationInfo>>();
  for (  EquationInfo equationInfo : allEqInfos) {
    Integer priority=equationInfo.getInequationPriority();
    Set<EquationInfo> equationInfos=prioritiesToIneqs.get(priority);
    if (equationInfos == null) {
      equationInfos=new HashSet<EquationInfo>();
      prioritiesToIneqs.put(priority,equationInfos);
    }
    equationInfos.add(equationInfo);
    Pair<String,String> id=new Pair<String,String>(equationInfo.getRuleModel(),equationInfo.getRuleId());
    equationInfos=ineqIdsToIneqs.get(id);
    if (equationInfos == null) {
      equationInfos=new HashSet<EquationInfo>();
      ineqIdsToIneqs.put(id,equationInfos);
    }
    equationInfos.add(equationInfo);
  }
  Map<EquationInfo,Set<EquationInfo>> references=new HashMap<EquationInfo,Set<EquationInfo>>();
  Map<EquationInfo,Set<EquationInfo>> backReferences=new HashMap<EquationInfo,Set<EquationInfo>>();
  for (  EquationInfo equationInfo : allEqInfos) {
    Set<EquationInfo> nextEquationsInfos=new HashSet<EquationInfo>();
    for (    Pair<String,String> ineqsAfter : equationInfo.getInequationIdsAfter()) {
      Set<EquationInfo> equationInfos=ineqIdsToIneqs.get(ineqsAfter);
      if (equationInfos != null) {
        nextEquationsInfos.addAll(equationInfos);
      }
    }
    Set<EquationInfo> prevEquationsInfos=new HashSet<EquationInfo>();
    for (    Pair<String,String> ineqsBefore : equationInfo.getInequationIdsBefore()) {
      Set<EquationInfo> equationInfos=ineqIdsToIneqs.get(ineqsBefore);
      if (equationInfos != null) {
        prevEquationsInfos.addAll(equationInfos);
      }
    }
    for (    EquationInfo nextInfo : nextEquationsInfos) {
      Set<EquationInfo> equationInfos=references.get(equationInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        references.put(equationInfo,equationInfos);
      }
      equationInfos.add(nextInfo);
      equationInfos=backReferences.get(nextInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        backReferences.put(nextInfo,equationInfos);
      }
      equationInfos.add(equationInfo);
    }
    for (    EquationInfo prevInfo : prevEquationsInfos) {
      Set<EquationInfo> equationInfos=references.get(prevInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        references.put(prevInfo,equationInfos);
      }
      equationInfos.add(equationInfo);
      equationInfos=backReferences.get(equationInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        backReferences.put(equationInfo,equationInfos);
      }
      equationInfos.add(prevInfo);
    }
  }
  Set<EquationInfo> firstLayer=new HashSet<EquationInfo>();
  for (  EquationInfo equationInfo : allEqInfos) {
    Set<EquationInfo> prevEquationInfos=backReferences.get(equationInfo);
    Set<EquationInfo> earlierEquationInfos=prioritiesToIneqs.get(equationInfo.getInequationPriority() - 1);
    if ((prevEquationInfos == null || prevEquationInfos.isEmpty()) && (earlierEquationInfos == null || earlierEquationInfos.isEmpty())) {
      firstLayer.add(equationInfo);
    }
  }
}
