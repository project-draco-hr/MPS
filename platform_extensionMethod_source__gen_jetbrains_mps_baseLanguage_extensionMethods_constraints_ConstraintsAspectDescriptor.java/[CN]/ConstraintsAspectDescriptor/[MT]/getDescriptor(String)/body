{
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TypeExtension_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodCall".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExtensionMethodCall_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExtensionMethodDeclaration_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ThisExtensionExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer"));
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer"));
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExtensionStaticFieldReference_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldDeclaration"));
  }
  if ("jetbrains.mps.baseLanguage.extensionMethods.structure.LocalExtendedMethodCall".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new LocalExtendedMethodCall_Constraints());
  }
  return null;
}
