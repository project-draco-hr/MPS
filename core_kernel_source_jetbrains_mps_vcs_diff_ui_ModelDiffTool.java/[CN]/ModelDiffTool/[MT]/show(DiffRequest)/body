{
  DiffContent[] contents=request.getContents();
  try {
    final SModel oldModel=readModel(contents[0],getFilePath(request));
    final SModel newModel=readModel(contents[1],getFilePath(request));
    final ModelDifferenceDialog d=ModelAccess.instance().runReadAction(new Computable<ModelDifferenceDialog>(){
      public ModelDifferenceDialog compute(){
        SModelDescriptor modelDescriptor=oldModel.getModelDescriptor();
        if (modelDescriptor == null) {
          modelDescriptor=newModel.getModelDescriptor();
          if (modelDescriptor == null) {
            modelDescriptor=SModelRepository.getInstance().getModelDescriptor(oldModel.getSModelFqName());
          }
        }
        IOperationContext context;
        if (modelDescriptor == null) {
          context=new GlobalOperationContext();
        }
 else {
          context=new ModuleContext(modelDescriptor.getModule(),request.getProject());
        }
        boolean modal=!request.getHints().contains(DiffTool.HINT_SHOW_FRAME);
        JFrame frame=WindowManager.getInstance().getFrame(request.getProject());
        return new ModelDifferenceDialog(context,frame,oldModel,newModel,request.getWindowTitle(),modal,request.getContentTitles());
      }
    }
);
    AnAction action=new AnAction("View As Text","View As Text",Icons.TEXT_ICON){
      public void actionPerformed(      AnActionEvent e){
        DiffTool ideaDiffTool=DiffManager.getInstance().getIdeaDiffTool();
        if (ideaDiffTool.canShow(request)) {
          d.dispose();
          ideaDiffTool.show(request);
        }
      }
    }
;
    d.addAction(action);
    d.showDialog();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ReadException e) {
    LOG.warning("Can't read models. Using text based merge...",e);
    DiffTool ideaDiffTool=DiffManager.getInstance().getIdeaDiffTool();
    if (ideaDiffTool.canShow(request)) {
      ideaDiffTool.show(request);
    }
  }
}
