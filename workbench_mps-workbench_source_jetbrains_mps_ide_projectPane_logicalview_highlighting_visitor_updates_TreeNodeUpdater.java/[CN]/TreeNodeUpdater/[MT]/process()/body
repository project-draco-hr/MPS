{
  if (!myGuard.tryAcquire()) {
    return;
  }
  try {
    do {
      int batchProcessMax=20;
      final ArrayList<Pair<MPSTreeNode,NodeUpdate>> updates=new ArrayList<Pair<MPSTreeNode,NodeUpdate>>(batchProcessMax);
      Pair<MPSTreeNode,NodeUpdate> u;
      while ((u=myUpdates.poll()) != null && --batchProcessMax >= 0) {
        updates.add(u);
      }
      if (updates.isEmpty()) {
        break;
      }
      myProject.getModelAccess().runReadInEDT(new Runnable(){
        @Override public void run(){
          final HashSet<MPSTreeNode> toRefresh=new HashSet<MPSTreeNode>();
          for (          Pair<MPSTreeNode,NodeUpdate> next : updates) {
            MPSTreeNode node=next.o1;
            if (node.getTree() == null) {
              continue;
            }
            next.o2.update(node);
            toRefresh.add(node);
          }
          for (          MPSTreeNode node : toRefresh) {
            node.updateNodePresentationInTree();
          }
        }
      }
);
    }
 while (!myUpdates.isEmpty());
    myTimer.suspend();
  }
  finally {
    myGuard.release();
  }
}
