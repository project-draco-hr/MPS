{
  int count=graph.length;
  List<int[]> result=new ArrayList<int[]>();
  if (count < 2) {
    if (count == 1) {
      result.add(new int[]{0});
    }
    return result.toArray(new int[result.size()][]);
  }
  int[] component=new int[count];
  int[] state=new int[count];
  Arrays.fill(state,0);
  Stack<Integer> stack=new Stack<Integer>();
  int nextVertex=0;
  while (nextVertex < count) {
    int componentSize=0;
    stack.add(nextVertex);
    state[nextVertex]=1;
    nextVertex++;
    while (!stack.isEmpty()) {
      int current=stack.pop();
      component[componentSize++]=current;
      for (      int target : graph[current]) {
        if (state[target] == 0) {
          state[target]=1;
          stack.push(target);
        }
      }
    }
    int[] res=new int[componentSize];
    System.arraycopy(component,0,res,0,componentSize);
    result.add(res);
    while (nextVertex < count && state[nextVertex] != 0) {
      nextVertex++;
    }
  }
  return result.toArray(new int[result.size()][]);
}
