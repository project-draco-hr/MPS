{
  Collection<SModule> visibleModules=new GlobalModuleDependenciesManager(myModel.getModule()).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
  String modelName=(stereotype != null ? longName + "@" + stereotype : longName);
  List<SNode> classifiers=new ArrayList<SNode>();
  for (  SModel m : Sequence.fromIterable(((Iterable<SModule>)visibleModules)).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).distinct()) {
    String name=m.getModelName();
    if (stereotype == null) {
      name=SModelStereotype.withoutStereotype(name);
    }
    if (!(name.equals(modelName))) {
      continue;
    }
    ListSequence.fromList(classifiers).addSequence(ListSequence.fromList(ClassifiersCache.getInstance(m).getClassifiersByRefName(nestedClassName)));
  }
  if (ListSequence.fromList(classifiers).isEmpty()) {
    return null;
  }
  if (ListSequence.fromList(classifiers).count() > 1) {
    for (    SNode cls : ListSequence.fromList(classifiers)) {
      if (SNodeOperations.getModel(cls) == myModel) {
        return cls;
      }
      if (check_x9ho2v_a0b0a0h0d5_0(myModel) == check_x9ho2v_a0b0a0h0d5(SNodeOperations.getModel(cls))) {
        return cls;
      }
    }
    Iterable<SNode> userClassifiers=ListSequence.fromList(classifiers).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SModelStereotype.isUserModel(SNodeOperations.getModel(it));
      }
    }
);
    if (Sequence.fromIterable(userClassifiers).count() == 1) {
      return Sequence.fromIterable(userClassifiers).first();
    }
    final StringBuilder warning=new StringBuilder();
    warning.append("reference can't be resolved: ");
    warning.append(nestedClassName);
    warning.append(" in ");
    warning.append(jetbrains.mps.util.SNodeOperations.getModelLongName(myModel));
    warning.append(" can reference nodes from models: ");
    ListSequence.fromList(classifiers).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        warning.append(SNodeOperations.getModel(it).getReference()).append("; ");
      }
    }
);
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn(warning.toString());
    }
    return null;
  }
  return ListSequence.fromList(classifiers).getElement(0);
}
