{
  String classname=referenceInfo;
  int dotIndex=classname.lastIndexOf(".");
  if (dotIndex >= 0 && targetModelReference == null) {
    List<SNode> localClassifiers=ClassifiersCache.getInstance(myModel).getClassifiersByRefName(classname);
    if (ListSequence.fromList(localClassifiers).count() >= 1) {
      return ListSequence.fromList(localClassifiers).first();
    }
    String package_=classname.substring(0,dotIndex);
    classname=classname.substring(dotIndex + 1);
    if (classname.indexOf('$') >= 0) {
      classname=classname.replace('$','.');
    }
    return resolveClass(package_,null,classname);
  }
  if (targetModelReference == null) {
    targetModelReference=myModel.getReference();
  }
  if (targetModelReference.getModelId() != null) {
    SModel targetModel=targetModelReference.resolve(MPSModuleRepository.getInstance());
    if (targetModel == null) {
      return null;
    }
    if (!(VisibilityUtil.isVisible(myModel,targetModel))) {
      return null;
    }
    return ListSequence.fromList(ClassifiersCache.getInstance(targetModel).getClassifiersByRefName(classname)).first();
  }
  String modelName=targetModelReference.getModelName();
  return resolveClass(SModelStereotype.withoutStereotype(modelName),SModelStereotype.getStereotype(modelName),classname);
}
