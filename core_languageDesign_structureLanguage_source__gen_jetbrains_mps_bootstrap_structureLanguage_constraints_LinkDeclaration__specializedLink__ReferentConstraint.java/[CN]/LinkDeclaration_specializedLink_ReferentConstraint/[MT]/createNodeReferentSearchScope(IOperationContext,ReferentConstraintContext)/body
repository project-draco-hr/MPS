{
  final boolean aggregation=SPropertyOperations.hasValue(_context.getReferenceNode(),"metaClass","aggregation","reference");
  List<SNode> result=new ArrayList<SNode>();
  SNode enclosingConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration",true,false);
  List<SNode> directSupers=SConceptOperations.getDirectSuperConcepts(enclosingConcept,false);
  for (  SNode concept : directSupers) {
    List<SNode> links=AbstractConceptDeclaration_Behavior.call_getLinkDeclarationsExcludingOverridden_1196820678380(concept);
    ListSequence.fromList(result).addSequence(ListSequence.fromList(links).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        if (aggregation) {
          return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
        }
        return SPropertyOperations.hasValue(it,"metaClass","reference","reference");
      }
    }
));
  }
  return new SimpleSearchScope(result);
}
