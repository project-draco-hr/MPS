{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.buildlanguage.structure.BooleanLiteral",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.buildlanguage.structure.BooleanLiteral",null);
        SPropertyOperations.set(result,"value","" + (true));
        return result;
      }
      public String getDescriptionText(      String pattern){
        return "true literal";
      }
      public String getMatchingText(      String pattern){
        throw new RuntimeException("NOT IMPLEMENTED");
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.buildlanguage.structure.BooleanLiteral",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.buildlanguage.structure.BooleanLiteral",null);
        SPropertyOperations.set(result,"value","" + (false));
        return result;
      }
      public String getDescriptionText(      String pattern){
        return "false literal";
      }
      public String getMatchingText(      String pattern){
        throw new RuntimeException("NOT IMPLEMENTED");
      }
    }
);
  }
  return result;
}
