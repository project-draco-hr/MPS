{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_parameterObject.getParentNode(),_parameterObject.getCurrentTargetNode(),_parameterObject.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode newNode=SConceptOperations.createNewNode("jetbrains.mps.buildlanguage.structure.IntLiteral",null);
        SPropertyOperations.set(newNode,"value","" + (Integer.parseInt(pattern)));
        return newNode;
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return _PrecompiledPatterns.REGEXP.matcher(pattern).matches();
      }
      public String getMatchingText(      String pattern){
        return pattern;
      }
    }
);
  }
  return result;
}
