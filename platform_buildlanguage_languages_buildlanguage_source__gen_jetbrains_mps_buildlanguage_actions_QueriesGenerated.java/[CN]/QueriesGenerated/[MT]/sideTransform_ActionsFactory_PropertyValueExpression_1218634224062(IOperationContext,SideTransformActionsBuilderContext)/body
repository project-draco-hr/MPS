{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromArray();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildlanguage.structure.PlusOperation");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode newNode=SConceptOperations.createNewNode("jetbrains.mps.buildlanguage.structure.PlusOperation",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),newNode);
        SLinkOperations.setTarget(newNode,"right",_context.getSourceNode(),true);
        return newNode;
      }
      public String getMatchingText(      String pattern){
        return "+";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "plus operation";
      }
    }
);
  }
  return result;
}
