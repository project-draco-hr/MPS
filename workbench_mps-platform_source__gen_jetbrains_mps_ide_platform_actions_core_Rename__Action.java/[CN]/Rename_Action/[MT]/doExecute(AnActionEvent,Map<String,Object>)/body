{
  try {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.rename");
    ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    final Wrappers._T<String> oldName=new Wrappers._T<String>();
    final Wrappers._boolean canBeRenamed=new Wrappers._boolean();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        canBeRenamed.value=RenameUtil.canBeRenamed(((SNode)MapSequence.fromMap(_params).get("target")));
        oldName.value=SPropertyOperations.getString(((SNode)MapSequence.fromMap(_params).get("target")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
      }
    }
);
    if (!(canBeRenamed.value)) {
      JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Nodes with getter for the \"name\" property can't be renamed","Node can't be renamed",JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    final String newName=RenameDialog.getNewName(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),oldName.value,"node");
    if (newName == null) {
      return;
    }
    modelAccess.runReadInEDT(new Runnable(){
      @Override public void run(){
        SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
        if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.Rename",Arrays.asList("newName"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "Rename",t);
    }
  }
}
