{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.rename");
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  final Wrappers._T<String> oldName=new Wrappers._T<String>();
  final Wrappers._boolean canBeRenamed=new Wrappers._boolean();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      canBeRenamed.value=RenameUtil.canBeRenamed(((SNode)MapSequence.fromMap(_params).get("target")));
      oldName.value=SPropertyOperations.getString(((SNode)MapSequence.fromMap(_params).get("target")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    }
  }
);
  if (!(canBeRenamed.value)) {
    JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Nodes with getter for the \"name\" property can't be renamed","Node can't be renamed",JOptionPane.INFORMATION_MESSAGE);
    return;
  }
  final String newName=RenameDialog.getNewName(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),oldName.value,"node");
  if (newName == null) {
    return;
  }
  modelAccess.runReadInEDT(new Runnable(){
    @Override public void run(){
      SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
      if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
        return;
      }
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.Rename",Arrays.asList("newName"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
    }
  }
);
}
