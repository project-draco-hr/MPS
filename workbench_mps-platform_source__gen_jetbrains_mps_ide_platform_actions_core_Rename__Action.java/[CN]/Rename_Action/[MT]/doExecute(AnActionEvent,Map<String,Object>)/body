{
  try {
    final Wrappers._T<String> oldName=new Wrappers._T<String>();
    final Wrappers._boolean canBeRenamed=new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        canBeRenamed.value=RenameUtil.canBeRenamed(((SNode)MapSequence.fromMap(_params).get("target")));
        oldName.value=SPropertyOperations.getString(((SNode)MapSequence.fromMap(_params).get("target")),"name");
      }
    }
);
    if (!(canBeRenamed.value)) {
      JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Nodes with getter for the \"name\" property can't be renamed","Node can't be renamed",JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    final String newName=RenameDialog.getNewName(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),oldName.value,"node");
    if (newName == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      public void run(){
        if (!(((SNode)((SNode)MapSequence.fromMap(_params).get("target"))).isRegistered()) || ((SNode)((SNode)MapSequence.fromMap(_params).get("target"))).isDisposed()) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.Rename",Arrays.asList("newName"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "Rename",t);
    }
  }
}
