{
  EditorComponent editorComponent=editorContext.getNodeEditorComponent();
  EditorHighlighter highlighter=check_ikrecr_a0b0e(editorContext.getOperationContext().getComponent(EditorHighlighterFactory.class),editorComponent);
  final ChangeStripsPainter painter=check_ikrecr_a0c0e(highlighter);
  final List<ModelChange> changes=check_ikrecr_a0d0e(check_ikrecr_a0a3a4(painter));
  if (changes == null) {
    return;
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      final SModel model=ListSequence.fromList(changes).first().getChangeSet().getNewModel();
      final NodeCopier nc=new NodeCopier(model);
      Iterable<ModelChange> oppositeChanges=ListSequence.fromList(changes).select(new ISelector<ModelChange,ModelChange>(){
        public ModelChange select(        ModelChange ch){
          return ch.getOppositeChange();
        }
      }
);
      for (      ModelChange ch : Sequence.fromIterable(oppositeChanges)) {
        if (ch instanceof NodeGroupChange) {
          ((NodeGroupChange)ch).prepare();
        }
      }
      Sequence.fromIterable(oppositeChanges).visitAll(new IVisitor<ModelChange>(){
        public void visit(        ModelChange ch){
          ch.apply(model,nc);
        }
      }
);
      nc.restoreIds(true);
      painter.showPopupForGroup(null);
    }
  }
);
}
