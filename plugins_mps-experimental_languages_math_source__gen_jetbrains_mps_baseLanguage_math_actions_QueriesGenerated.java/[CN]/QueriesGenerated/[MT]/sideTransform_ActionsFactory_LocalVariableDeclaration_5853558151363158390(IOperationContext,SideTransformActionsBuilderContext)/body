{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode lso=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation",null);
{
        SNode matchedNode_fo7if3_b0a0a0=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
{
          boolean matches_fo7if3_a1a0a0a=false;
{
            SNode matchingNode_fo7if3_a1a0a0a=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
            if (matchingNode_fo7if3_a1a0a0a != null) {
              matches_fo7if3_a1a0a0a=SModelUtil_new.isAssignableConcept(matchingNode_fo7if3_a1a0a0a.getConcept().getConceptId(),"jetbrains.mps.baseLanguage.math.structure.MatrixType");
            }
          }
          if (matches_fo7if3_a1a0a0a) {
            SLinkOperations.setTarget(lso,"type",SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"type",true),"jetbrains.mps.baseLanguage.math.structure.MatrixType"),true);
          }
 else {
            boolean matches_fo7if3_b1a0a0a=false;
{
              SNode matchingNode_fo7if3_b1a0a0a=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
              if (matchingNode_fo7if3_b1a0a0a != null) {
                matches_fo7if3_b1a0a0a=SModelUtil_new.isAssignableConcept(matchingNode_fo7if3_b1a0a0a.getConcept().getConceptId(),"jetbrains.mps.baseLanguage.math.structure.VectorType");
              }
            }
            if (matches_fo7if3_b1a0a0a) {
              SLinkOperations.setTarget(lso,"type",SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"type",true),"jetbrains.mps.baseLanguage.math.structure.VectorType"),true);
            }
          }
        }
      }
      SPropertyOperations.set(lso,"name",SPropertyOperations.getString(_context.getSourceNode(),"name"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),lso);
      return SLinkOperations.getTarget(lso,"matrix",true);
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "Initialize as a vector satisfying linear equation";
    }
  }
);
  return result;
}
