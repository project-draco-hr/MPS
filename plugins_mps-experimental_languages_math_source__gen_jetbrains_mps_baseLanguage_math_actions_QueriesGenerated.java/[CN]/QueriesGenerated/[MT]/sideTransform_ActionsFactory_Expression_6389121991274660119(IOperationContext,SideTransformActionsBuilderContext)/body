{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression",null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"expression",_context.getSourceNode(),true);
      return SLinkOperations.getTarget(result,"rowIndex",true);
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "Matrix element access";
    }
  }
);
  return result;
}
