{
  for (  SNode downcast : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel",false,new String[]{}))) {
    SNodeOperations.replaceWithAnother(downcast,SLinkOperations.getTarget(downcast,"expression",true));
  }
  normalizeAllDotExpressions(myWhatToEvaluate);
  for (  SNode node : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,null,false,new String[]{}))) {
    AttributeOperations.createAndSetAttrbiute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation")),"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation");
  }
  for (  SNode binaryOperation : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{}))) {
    SNode ltype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true));
    SNode rtype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true));
    binaryOperation.addChild(Transformator.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(ltype)));
    binaryOperation.addChild(Transformator.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(rtype)));
  }
  for (  SNode arrayAccess : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression",false,new String[]{}))) {
    SNode ltype=TypeChecker.getInstance().getTypeOf(arrayAccess);
    arrayAccess.addChild(Transformator.LTYPE,SNodeOperations.copyNode(ltype));
  }
  for (  SNode baseAssignment : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.AssignmentExpression"));
    }
  }
)) {
    baseAssignment.addChild(Transformator.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(baseAssignment,"lValue",true)))));
    baseAssignment.addChild(Transformator.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(baseAssignment,"rValue",true)))));
  }
  for (  SNode ternaryOperator : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",false,new String[]{}))) {
    ternaryOperator.addChild(Transformator.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,"ifTrue",true)))));
    ternaryOperator.addChild(Transformator.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,"ifFalse",true)))));
    ternaryOperator.addChild(Transformator.CTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,"condition",true)))));
  }
}
