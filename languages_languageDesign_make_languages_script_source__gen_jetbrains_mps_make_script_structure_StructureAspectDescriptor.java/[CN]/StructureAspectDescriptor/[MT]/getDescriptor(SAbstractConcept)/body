{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0db.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAdvanceWorkStatement;
      }
    break;
case 1:
  if (true) {
    return myConceptAllWorkLeftExpression;
  }
break;
case 2:
if (true) {
return myConceptBeginWorkStatement;
}
break;
case 3:
if (true) {
return myConceptConceptFunctionParameter_progressMonitor;
}
break;
case 4:
if (true) {
return myConceptConfigDefinition;
}
break;
case 5:
if (true) {
return myConceptExpected;
}
break;
case 6:
if (true) {
return myConceptExpectedInput;
}
break;
case 7:
if (true) {
return myConceptExpectedOption;
}
break;
case 8:
if (true) {
return myConceptFinishWorkStatement;
}
break;
case 9:
if (true) {
return myConceptIExpected;
}
break;
case 10:
if (true) {
return myConceptInputResourcesParameter;
}
break;
case 11:
if (true) {
return myConceptJobDeclaration;
}
break;
case 12:
if (true) {
return myConceptJobDefinition;
}
break;
case 13:
if (true) {
return myConceptOption;
}
break;
case 14:
if (true) {
return myConceptOptionExpression;
}
break;
case 15:
if (true) {
return myConceptOptionType;
}
break;
case 16:
if (true) {
return myConceptOutputResources;
}
break;
case 17:
if (true) {
return myConceptPropertiesAccessorParameter;
}
break;
case 18:
if (true) {
return myConceptQueryDefinition;
}
break;
case 19:
if (true) {
return myConceptQueryParameterDeclaration;
}
break;
case 20:
if (true) {
return myConceptRelayQueryExpression;
}
break;
case 21:
if (true) {
return myConceptReportFeedbackStatement;
}
break;
case 22:
if (true) {
return myConceptResourceType;
}
break;
case 23:
if (true) {
return myConceptResultStatement;
}
break;
case 24:
if (true) {
return myConceptText;
}
break;
default :
}
}
return null;
}
