{
  Deque<SNode> stack=DequeSequence.fromDeque(new LinkedList<SNode>());
  DequeSequence.fromDeque(stack).addSequence(Sequence.fromIterable(nodes));
  while (DequeSequence.fromDeque(stack).isNotEmpty()) {
    SNode node=DequeSequence.fromDeque(stack).popElement();
    SModel ourModel=node.getModel();
    DequeSequence.fromDeque(stack).addSequence(ListSequence.fromList(SNodeOperations.getChildren(node)));
    Iterable<SReference> refs=node.getReferences();
    for (    SReference ref : Sequence.fromIterable(refs)) {
      if (!(ref instanceof DynamicReference)) {
        continue;
      }
      if (ref.getRole().equals("baseMethodDeclaration")) {
        continue;
      }
      if (ref.getRole().equals("fieldDeclaration")) {
        continue;
      }
      SNode target=ref.getTargetNode();
      if (target == null) {
        continue;
      }
      node.setReferenceTarget(ref.getRole(),target);
      SModel targetModel=target.getModel();
      if (targetModel != null) {
        ourModel.addModelImport(targetModel.getSModelReference(),true);
      }
    }
  }
}
