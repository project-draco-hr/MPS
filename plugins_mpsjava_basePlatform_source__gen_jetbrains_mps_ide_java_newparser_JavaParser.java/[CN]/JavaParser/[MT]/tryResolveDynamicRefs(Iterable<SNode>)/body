{
  Deque<SNode> stack=DequeSequence.fromDequeNew(new LinkedList<SNode>());
  DequeSequence.fromDequeNew(stack).addSequence(Sequence.fromIterable(nodes));
  while (DequeSequence.fromDequeNew(stack).isNotEmpty()) {
    SNode node=DequeSequence.fromDequeNew(stack).popElement();
    SModel ourModel=node.getModel();
    DequeSequence.fromDequeNew(stack).addSequence(ListSequence.fromList(SNodeOperations.getChildren(node)));
    Iterable<? extends SReference> refs=node.getReferences();
    for (    SReference ref : Sequence.fromIterable(refs)) {
      if (!(ref instanceof DynamicReference)) {
        continue;
      }
      SNode target=ref.getTargetNode();
      if (target == null) {
        continue;
      }
      node.setReferenceTarget(ref.getRole(),target);
      SModel targetModel=target.getModel();
      if (targetModel != null && !(ourModel.getReference().equals(targetModel.getReference()))) {
        ((SModelInternal)ourModel).addModelImport(targetModel.getReference(),true);
      }
    }
  }
}
