{
  for (  SNode node : Sequence.fromIterable(roots)) {
    List<SNode> unknowns=SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x70ea1dc4c5721865L,"jetbrains.mps.baseLanguage.structure.IYetUnresolved"),false,new SAbstractConcept[]{});
    for (    SNode unk : ListSequence.fromList(unknowns)) {
      final SNode unkNode=unk;
      final _FunctionTypes._return_P0_E0<? extends SNode> subst=((_FunctionTypes._return_P0_E0<? extends SNode>)BHReflection.invoke(unk,SMethodTrimmedId.create("evaluateSubst",null,"73E7sj5sxxG")));
      if (subst == null) {
        continue;
      }
      final SNode theRightNode=subst.invoke();
      SNodeOperations.replaceWithAnother(unkNode,theRightNode);
      Sequence.fromIterable(JavaToMpsConverter.deepReferences(theRightNode)).ofType(StaticReference.class).visitAll(new IVisitor<StaticReference>(){
        public void visit(        StaticReference it){
          SModel sourceModel=theRightNode.getModel();
          SModelReference targetModel=it.getTargetSModelReference();
          if (!(sourceModel.getReference().equals(targetModel))) {
            ((SModelInternal)sourceModel).addModelImport(targetModel,true);
          }
        }
      }
);
    }
  }
}
