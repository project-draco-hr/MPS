{
  final SModelReference planModelRef=PersistenceFacade.getInstance().createModelReference("r:85a0bc80-fc68-485e-a9a1-926c3cc284af(jetbrains.mps.generator.xmodel.test.plan1@genplan)");
  ModelGenerationPlan plan=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<ModelGenerationPlan>(){
    @Override public ModelGenerationPlan compute(){
      SModel planModel=resolve(planModelRef);
      GenPlanBuilder gpBuilder=new GenPlanBuilder(LanguageRegistry.getInstance(mpsProject));
      return gpBuilder.create(planModel.getRootNodes().iterator().next());
    }
  }
);
  Assert.assertNotNull(plan);
  Assert.assertEquals(3,plan.getSteps_().size());
  myErrors.checkThat(plan.getSteps_().get(0),CoreMatchers.instanceOf(Transform.class));
  myErrors.checkThat(plan.getSteps_().get(1),CoreMatchers.instanceOf(Checkpoint.class));
  myErrors.checkThat(plan.getSteps_().get(2),CoreMatchers.instanceOf(Transform.class));
  Transform s1=(Transform)plan.getSteps_().get(0);
  Checkpoint s2=(Checkpoint)plan.getSteps_().get(1);
  Transform s3=(Transform)plan.getSteps_().get(2);
  myErrors.checkThat(s1.getTransformations().isEmpty(),CoreMatchers.equalTo(false));
  myErrors.checkThat(s3.getTransformations().isEmpty(),CoreMatchers.equalTo(false));
  myErrors.checkThat(s2.getName(),CoreMatchers.equalTo("first"));
}
