{
  final SModelReference mr1=PersistenceFacade.getInstance().createModelReference("r:a2bc1c51-b81b-4f90-a208-04e6bd08c9c2(jetbrains.mps.generator.xmodel.test.m1)");
  final SModelReference mr2=PersistenceFacade.getInstance().createModelReference("r:1ae0d5a3-32c6-406d-9a53-f40b122309f5(jetbrains.mps.generator.xmodel.test.m2)");
  ModelGenerationPlan plan=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<ModelGenerationPlan>(){
    @Override public ModelGenerationPlan compute(){
      SLanguage lang1=MetaAdapterFactory.getLanguage(0xb2d9d19b9a4747a4L,0x93f40c9390001bf2L,"jetbrains.mps.generator.test.xmodel.lang1");
      final Transform step1=new Transform(getGenerators(lang1));
      final Transform step2=new Transform(getBaseLanguageGenerators());
      final Checkpoint cp1=new Checkpoint("aaa");
      return new RigidGenerationPlan(step1,cp1,step2);
    }
  }
);
  SModel m1=resolve(mr1);
  OptionsBuilder optBuilder=GenerationOptions.getDefaults();
  GenerationOptions opt=optBuilder.customPlan(m1,plan).create();
  final TransientModelsProvider tmProvider=mpsProject.getComponent(TransientModelsProvider.class);
  GenerationFacade genFacade=new GenerationFacade(mpsProject.getRepository(),opt).transients(tmProvider);
  GenerationStatus genStatus1=genFacade.process(new EmptyProgressMonitor(),m1);
  SModel m2=resolve(mr2);
  opt=optBuilder.customPlan(m2,plan).create();
  genFacade=new GenerationFacade(mpsProject.getRepository(),opt).transients(tmProvider);
  GenerationStatus genStatus2=genFacade.process(new EmptyProgressMonitor(),m2);
  myErrors.checkThat("m1 generation succeeds",genStatus1.isOk(),CoreMatchers.equalTo(true));
  myErrors.checkThat("m2 generation succeeds",genStatus2.isOk(),CoreMatchers.equalTo(true));
}
