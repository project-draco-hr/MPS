{
  final Project mpsProject=ourEnvironment.openProject(new File(System.getProperty("user.dir")));
  try {
    final LanguageRegistry lr=LanguageRegistry.getInstance(mpsProject);
    final SModelReference mr=PersistenceFacade.getInstance().createModelReference("r:24638668-c917-4da1-8069-8ddef862314d(jetbrains.mps.generator.crossmodel.sandbox.beanmodel1)");
    final SModel m=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<SModel>(){
      @Override public SModel compute(){
        return mr.resolve(mpsProject.getRepository());
      }
    }
);
    ModelGenerationPlan plan=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<ModelGenerationPlan>(){
      @Override public ModelGenerationPlan compute(){
        SLanguage langTestProperty=MetaAdapterFactory.getLanguage(0xdc1cc9486f434687L,0x90cb17dd5cb27219L,"jetbrains.mps.generator.test.crossmodel.property");
        final GeneratorRuntime g1=lr.getLanguage(langTestProperty).getGenerators().iterator().next();
        final Transform step1=new Transform(getGenerators(g1));
        SLanguage langBaseLang=MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L,0xa443f952ceaf5816L,"jetbrains.mps.baseLanguage");
        final GeneratorRuntime g2=lr.getLanguage(langBaseLang).getGenerators().iterator().next();
        final Transform step2=new Transform(getGenerators(g2));
        final Checkpoint cp1=new Checkpoint("aaa");
        return new ModelGenerationPlan(){
          @Override public List<List<TemplateMappingConfiguration>> getSteps(){
            return Arrays.asList(step1.getTransformations(),step2.getTransformations());
          }
          @Override public List<Step> getSteps_(){
            return Arrays.asList(step1,cp1,step2);
          }
          @Override public Collection<TemplateModule> getGenerators(){
            return Arrays.asList((TemplateModule)g1,(TemplateModule)g2);
          }
          @Override public boolean coversLanguage(          SLanguage language){
            return true;
          }
        }
;
      }
    }
);
    GenerationOptions opt=GenerationOptions.getDefaults().customPlan(m,plan).create();
    final TransientModelsProvider tmProvider=mpsProject.getComponent(TransientModelsProvider.class);
    boolean result=GenerationFacade.generateModels(mpsProject,Collections.singletonList(m),null,new GenerationHandlerBase(){
      @Override public boolean handleOutput(      SModule module,      SModel inputModel,      GenerationStatus status,      IOperationContext invocationContext,      ProgressMonitor progressMonitor){
        return true;
      }
      @Override public int estimateCompilationMillis(){
        return 0;
      }
    }
,new EmptyProgressMonitor(),null,opt,tmProvider);
    myErrors.checkThat("Generation succeeds",result,CoreMatchers.equalTo(true));
    TransientModelsModule transientModelsModule=tmProvider.getModule(m.getModule());
    final String cpModelName=SModelStereotype.withStereotype(SModelStereotype.withoutStereotype(m.getModelName()),"cp-aaa");
    SModel cpModel=null;
    for (    SModel trm : transientModelsModule.getModels()) {
      if (cpModelName.equals(trm.getModelName())) {
        cpModel=trm;
        break;
      }
    }
    myErrors.checkThat("Checkpoint model",cpModel,CoreMatchers.notNullValue());
  }
  finally {
    ourEnvironment.closeProject(mpsProject);
  }
}
