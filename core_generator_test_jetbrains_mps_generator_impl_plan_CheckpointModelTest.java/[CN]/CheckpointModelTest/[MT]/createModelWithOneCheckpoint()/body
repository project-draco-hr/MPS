{
  final SModelReference mr=PersistenceFacade.getInstance().createModelReference("r:24638668-c917-4da1-8069-8ddef862314d(jetbrains.mps.generator.crossmodel.sandbox.beanmodel1)");
  final SModel m=resolve(mr);
  final Checkpoint cp1=new Checkpoint("aaa");
  ModelGenerationPlan plan=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<ModelGenerationPlan>(){
    @Override public ModelGenerationPlan compute(){
      final Transform step1=new Transform(getCrossmodelPropertyGenerators());
      final Transform step2=new Transform(getBaseLanguageGenerators());
      return new RigidGenerationPlan(step1,cp1,step2);
    }
  }
);
  final PlanIdentity planIdentity=new PlanIdentity(plan);
  GenerationOptions opt=GenerationOptions.getDefaults().customPlan(m,plan).create();
  final TransientModelsProvider tmProvider=mpsProject.getComponent(TransientModelsProvider.class);
  GenerationFacade genFacade=new GenerationFacade(mpsProject.getRepository(),opt).transients(tmProvider);
  GenerationStatus genStatus=genFacade.process(new EmptyProgressMonitor(),m);
  myErrors.checkThat("Generation succeeds",genStatus.isOk(),CoreMatchers.equalTo(true));
  CrossModelEnvironment cme=new CrossModelEnvironment(tmProvider);
  myErrors.checkThat("CrossModelEnvironment.hasState",cme.hasState(mr,planIdentity),CoreMatchers.equalTo(true));
  SModule checkpointModule=tmProvider.getCheckpointsModule();
  final SModelName cpModelName=CrossModelEnvironment.createCheckpointModelName(m.getReference(),cp1);
  SModel cpModel=null;
  for (  SModel trm : checkpointModule.getModels()) {
    if (cpModelName.equals(trm.getName())) {
      cpModel=trm;
      break;
    }
  }
  myErrors.checkThat("Checkpoint model",cpModel,CoreMatchers.notNullValue());
  ModelCheckpoints modelCheckpoints=cme.getState(mr,planIdentity);
  CheckpointState cpState=modelCheckpoints.find(cp1);
  myErrors.checkThat("CheckpointState present",cpState,CoreMatchers.notNullValue());
  if (cpState != null) {
    Collection<String> mappingLabels=cpState.getMappingLabels();
    myErrors.checkThat("GetterMethod label present",mappingLabels.contains("GetterMethod"),CoreMatchers.equalTo(true));
  }
}
