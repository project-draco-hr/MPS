{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0fb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbsractMake;
      }
    break;
case 1:
  if (true) {
    return myConceptActionCallDeclaredParameter;
  }
break;
case 2:
if (true) {
return myConceptActionCallGlobalParameter;
}
break;
case 3:
if (true) {
return myConceptActionCallParameter;
}
break;
case 4:
if (true) {
return myConceptCallActionExpression;
}
break;
case 5:
if (true) {
return myConceptClean;
}
break;
case 6:
if (true) {
return myConceptClickableGenerator;
}
break;
case 7:
if (true) {
return myConceptGlobalStatisticTarget;
}
break;
case 8:
if (true) {
return myConceptINodeSetReference;
}
break;
case 9:
if (true) {
return myConceptIStatisticsTarget;
}
break;
case 10:
if (true) {
return myConceptMake;
}
break;
case 11:
if (true) {
return myConceptModelProperties;
}
break;
case 12:
if (true) {
return myConceptModelReference;
}
break;
case 13:
if (true) {
return myConceptModelStatisticsTarget;
}
break;
case 14:
if (true) {
return myConceptModuleProperties;
}
break;
case 15:
if (true) {
return myConceptNodeReference;
}
break;
case 16:
if (true) {
return myConceptOfAspectOperation;
}
break;
case 17:
if (true) {
return myConceptProjectStatisticsTarget;
}
break;
case 18:
if (true) {
return myConceptRebuildProjectCommand;
}
break;
case 19:
if (true) {
return myConceptRemoveGenSources;
}
break;
case 20:
if (true) {
return myConceptShowBrokenReferences;
}
break;
case 21:
if (true) {
return myConceptShowExpression;
}
break;
case 22:
if (true) {
return myConceptShowGenPlan;
}
break;
case 23:
if (true) {
return myConceptStatCommand;
}
break;
case 24:
if (true) {
return myConceptSubtreeStatisticsTarget;
}
break;
case 25:
if (true) {
return myConceptUnloadModelsCommand;
}
break;
case 26:
if (true) {
return myConceptWithDependencies;
}
break;
default :
}
}
return null;
}
