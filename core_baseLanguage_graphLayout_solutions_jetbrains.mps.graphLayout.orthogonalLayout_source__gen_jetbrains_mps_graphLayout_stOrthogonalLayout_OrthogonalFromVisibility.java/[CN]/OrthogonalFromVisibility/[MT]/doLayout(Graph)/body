{
  EmbeddedGraph embeddedGraph=new TreeEmbeddingFinder().find(graph);
  List<Node> outerNodes=ListSequence.fromList(new ArrayList<Node>());
  for (  Dart dart : ListSequence.fromList(embeddedGraph.getOuterFace().getDarts())) {
    ListSequence.fromList(outerNodes).addElement(dart.getTarget());
  }
  Node s=ListSequence.fromList(outerNodes).getElement(0);
  Node t=ListSequence.fromList(outerNodes).getElement((ListSequence.fromList(outerNodes).count()) / 2);
  STPlanarGraph stPlanarGraph=new STPlanarGraph(embeddedGraph,s,t);
  Map<Object,Rectangle> visibility=VisibilityRepresentation.getVisibilityRepresentation(stPlanarGraph);
  GraphLayout layout=new GraphLayout(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Rectangle rect=MapSequence.fromMap(visibility).get(node);
    layout.setLayoutFor(node,new Point(rect.x + rect.width / 2,rect.y));
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    Rectangle rect=MapSequence.fromMap(visibility).get(edge);
    List<Point> points=ListSequence.fromList(new ArrayList<Point>());
    ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getSource()));
    ListSequence.fromList(points).addElement(new Point(rect.x,rect.y));
    ListSequence.fromList(points).addElement(new Point(rect.x,rect.y + rect.height));
    ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getTarget()));
    layout.setLayoutFor(edge,points);
  }
  return layout;
}
