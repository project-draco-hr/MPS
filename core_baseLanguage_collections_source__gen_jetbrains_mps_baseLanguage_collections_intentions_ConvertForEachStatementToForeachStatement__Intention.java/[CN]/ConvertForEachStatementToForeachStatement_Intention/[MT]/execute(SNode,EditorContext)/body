{
  final SNode oldVariable=SLinkOperations.getTarget(node,"variable",true);
  SNode variableType=SNodeOperations.cast(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(oldVariable)),"jetbrains.mps.baseLanguage.structure.Type");
  SNode foreachStatement=SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.ForeachStatement");
  SLinkOperations.setTarget(foreachStatement,"body",SLinkOperations.getTarget(node,"body",true),true);
  SLinkOperations.setTarget(foreachStatement,"iterable",SLinkOperations.getTarget(node,"inputSequence",true),true);
  SPropertyOperations.set(foreachStatement,"label",SPropertyOperations.getString(node,"label"));
  SNode newVariable=SLinkOperations.setNewChild(foreachStatement,"variable","jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
  SPropertyOperations.set(newVariable,"name",SPropertyOperations.getString(oldVariable,"name"));
  SLinkOperations.setTarget(newVariable,"type",variableType,true);
  for (  SNode oldRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(foreachStatement,"body",true),"jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,"variable",false) == oldVariable;
    }
  }
)) {
    SLinkOperations.setTarget(SNodeOperations.replaceWithNewChild(oldRef,"jetbrains.mps.baseLanguage.structure.LocalVariableReference"),"variableDeclaration",newVariable,false);
  }
}
