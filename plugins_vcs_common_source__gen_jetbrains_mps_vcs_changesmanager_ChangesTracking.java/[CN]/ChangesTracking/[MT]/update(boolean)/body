{
  myQueue.assertSoftlyIsCommandThread();
  if (!(myDifference.isEnabled())) {
    return;
  }
  if (!(isUnderVcs(myModelDescriptor))) {
    return;
  }
  boolean isConflict=ConflictsUtil.isModelOrModuleConflicting(myModelDescriptor,myProject);
  FileStatus status=(isConflict ? FileStatus.MERGED_WITH_CONFLICTS : getStatus(myModelDescriptor));
  if (status != null && myStatusOnLastUpdate == status && !(force)) {
    return;
  }
  myDifference.removeChangeSet();
  myStatusOnLastUpdate=status;
  if (FileStatus.NOT_CHANGED == status && !(force)) {
    return;
  }
  final Wrappers._T<SModel> baseVersionModel=new Wrappers._T<SModel>(null);
  if (isAdded(myModelDescriptor) || isConflict) {
    baseVersionModel.value=new MergeTemporaryModel(myModelDescriptor.getReference(),true);
  }
 else {
    baseVersionModel.value=BaseVersionUtil.getBaseVersionModel(myModelDescriptor,myProject);
    if (baseVersionModel.value == null) {
      return;
    }
    if (Sequence.fromIterable(((Iterable<SModel.Problem>)baseVersionModel.value.getProblems())).any(new IWhereFilter<SModel.Problem>(){
      public boolean accept(      SModel.Problem it){
        return it.isError();
      }
    }
)) {
      StringBuilder sb=new StringBuilder();
      for (      SModel.Problem p : Sequence.fromIterable((Iterable<SModel.Problem>)baseVersionModel.value.getProblems())) {
        sb.append((p.isError() ? "error: " : "warn: ")).append(p.getText()).append("\n");
      }
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn(sb.toString());
      }
      return;
    }
  }
  ProjectHelper.fromIdeaProject(myProject).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
synchronized (ChangesTracking.this) {
        if (!(myDisposed)) {
          DiffModelUtil.renameModel(baseVersionModel.value,"repository");
          ChangeSet changeSet=ChangeSetBuilder.buildChangeSet(baseVersionModel.value,myModelDescriptor,true);
          myDifference.setChangeSet((ChangeSetImpl)changeSet);
          buildCaches();
        }
      }
    }
  }
);
}
