{
  final Wrappers._boolean _force=new Wrappers._boolean(force);
  myQueue.assertSoftlyIsCommandThread();
  if (!(myDifference.isEnabled())) {
    return;
  }
  if (!(myModelDescriptor.getSource() instanceof FileDataSource)) {
    return;
  }
  IFile modelFile=((FileDataSource)myModelDescriptor.getSource()).getFile();
  if (!(modelFile.exists())) {
    return;
  }
  VirtualFile modelVFile=VirtualFileUtils.getVirtualFile(modelFile);
  if (modelVFile == null || ProjectLevelVcsManager.getInstance(myProject).getVcsFor(modelVFile) == null) {
    return;
  }
  FileStatus status=FileStatusManager.getInstance(myProject).getStatus(modelVFile);
  if (ConflictsUtil.isModelOrModuleConflicting(myModelDescriptor,myProject)) {
    status=FileStatus.MERGED_WITH_CONFLICTS;
  }
  if (myDifference.getChangeSet() != null) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        if (myDifference.getChangeSet().getNewModel() != myModelDescriptor) {
          _force.value=true;
        }
      }
    }
);
  }
  if (myStatusOnLastUpdate == status && !(_force.value)) {
    return;
  }
  myDifference.removeChangeSet();
  myStatusOnLastUpdate=status;
  if (FileStatus.NOT_CHANGED == status && !(_force.value)) {
    return;
  }
  final Wrappers._T<SModel> baseVersionModel=new Wrappers._T<SModel>(null);
  if (BaseVersionUtil.isAddedFileStatus(status) || ConflictsUtil.isModelOrModuleConflicting(myModelDescriptor,myProject)) {
    baseVersionModel.value=new jetbrains.mps.smodel.SModel(myModelDescriptor.getSModelReference()).getModelDescriptor();
  }
 else {
    Object content=BaseVersionUtil.getBaseVersionContent(modelVFile,myProject);
    if (content == null && status != FileStatus.NOT_CHANGED) {
      LOG.error("Base version content is null while file status is " + status);
    }
    if (content == null) {
      return;
    }
    String ext=modelVFile.getExtension();
    SModel md=(content instanceof String ? PersistenceUtil.loadModel((String)content,ext) : PersistenceUtil.loadModel((byte[])content,ext));
    if (md == null) {
      return;
    }
    baseVersionModel.value=md;
    if (Sequence.fromIterable(((Iterable<SModel.Problem>)md.getProblems())).any(new IWhereFilter<SModel.Problem>(){
      public boolean accept(      SModel.Problem it){
        return it.isError();
      }
    }
)) {
      StringBuilder sb=new StringBuilder();
      for (      SModel.Problem p : Sequence.fromIterable((Iterable<SModel.Problem>)md.getProblems())) {
        sb.append((p.isError() ? "error: " : "warn: ")).append(p.getText()).append("\n");
      }
      LOG.warning(sb.toString());
      return;
    }
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
synchronized (ChangesTracking.this) {
        if (!(myDisposed)) {
          ChangeSet changeSet=ChangeSetBuilder.buildChangeSet(baseVersionModel.value,myModelDescriptor,true);
          myDifference.setChangeSet((ChangeSetImpl)changeSet);
          buildCaches();
        }
      }
    }
  }
);
}
