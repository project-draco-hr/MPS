{
  SNode parent=event.getParent();
  if (parent.getModel() == null) {
    return;
  }
  String childRoleName=event.getChildRole();
  Set<String> childRoles=MapSequence.fromMap(childChanged).get(parent);
  if (childRoles == null) {
    childRoles=SetSequence.fromSet(new HashSet<String>());
    MapSequence.fromMap(childChanged).put(parent,childRoles);
  }
  if (SetSequence.fromSet(childRoles).contains(childRoleName)) {
    return;
  }
 else {
    SetSequence.fromSet(childRoles).addElement(childRoleName);
  }
  final SNodeId parentId=parent.getNodeId();
  final SContainmentLink childRole=event.getAggregationLink();
  final Wrappers._T<List<? extends SNode>> childrenRightAfterEvent=new Wrappers._T<List<? extends SNode>>(IterableUtil.asList(parent.getChildren(childRole)));
  childrenRightAfterEvent.value=ListSequence.fromList(childrenRightAfterEvent.value).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode n){
      return CopyUtil.copyAndPreserveId(n,false);
    }
  }
).toListSequence();
  runUpdateTask(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      removeChanges(parentId,NodeGroupChange.class,new _FunctionTypes._return_P1_E0<Boolean,NodeGroupChange>(){
        public Boolean invoke(        NodeGroupChange ch){
          return ch.isAbout(childRole);
        }
      }
);
      removeDescendantChanges(parentId,childRole);
      myLastParentAndNewChildrenIds=MultiTuple.<SNodeId,List<SNodeId>>from(parentId,ListSequence.fromList(childrenRightAfterEvent.value).select(new ISelector<SNode,SNodeId>(){
        public SNodeId select(        SNode n){
          return n.getNodeId();
        }
      }
).toListSequence());
      buildAndAddChanges(new _FunctionTypes._void_P1_E0<ChangeSetBuilder>(){
        public void invoke(        ChangeSetBuilder b){
          SNode oldParentNode=getOldNode(parentId);
          if (oldParentNode != null) {
            b.buildForNodeRole(IterableUtil.asList(oldParentNode.getChildren(childRole)),childrenRightAfterEvent.value,parentId,childRole);
          }
        }
      }
);
    }
  }
,parent,event);
}
