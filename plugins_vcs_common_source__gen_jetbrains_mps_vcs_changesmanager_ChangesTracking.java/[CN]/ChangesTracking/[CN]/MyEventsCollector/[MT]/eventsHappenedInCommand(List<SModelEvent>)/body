{
  childChanged=MapSequence.fromMap(new HashMap<SNode,Set<String>>());
  for (  SModelEvent event : ListSequence.fromList(events)) {
    event.accept(this);
  }
  childChanged=null;
  Set<IFile> affectedFiles=SetSequence.fromSet(new HashSet<IFile>());
  DataSource dataSource=myModelDescriptor.getSource();
  if (dataSource instanceof FileDataSource) {
    SetSequence.fromSet(affectedFiles).addElement(((FileDataSource)dataSource).getFile());
  }
 else   if (dataSource instanceof FilePerRootDataSource) {
    FilePerRootDataSource ds=(FilePerRootDataSource)dataSource;
    Map<SNodeId,String> streamNames=FilePerRootFormatUtil.getStreamNames(((SModelBase)myModelDescriptor).getSModel());
    for (    SModelEvent event : ListSequence.fromList(events)) {
      SNode root=event.getAffectedRoot();
      if (root != null) {
        SetSequence.fromSet(affectedFiles).addElement(ds.getFile(streamNames.get(root.getNodeId())));
      }
    }
    SetSequence.fromSet(affectedFiles).addElement(ds.getFile(FilePerRootDataSource.HEADER_FILE));
  }
  VcsFileStatusProvider provider=myProject.getComponent(VcsFileStatusProvider.class);
  for (  IFile iFile : SetSequence.fromSet(affectedFiles)) {
    VirtualFile vFile=VirtualFileUtils.getVirtualFile(iFile);
    if (vFile != null) {
      Document document=FileDocumentManager.getInstance().getDocument(vFile);
      if (document != null && provider != null) {
        provider.refreshFileStatusFromDocument(vFile,document);
      }
    }
  }
}
