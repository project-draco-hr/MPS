{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.BaseIntentionDeclaration:
    return myConceptBaseIntentionDeclaration;
case LanguageConceptSwitch.ChildFilterBlock:
  return myConceptChildFilterBlock;
case LanguageConceptSwitch.ChildFilterFunction:
return myConceptChildFilterFunction;
case LanguageConceptSwitch.ConceptFunctionParameter_childNode:
return myConceptConceptFunctionParameter_childNode;
case LanguageConceptSwitch.ConceptFunctionParameter_node:
return myConceptConceptFunctionParameter_node;
case LanguageConceptSwitch.DescriptionBlock:
return myConceptDescriptionBlock;
case LanguageConceptSwitch.ErrorIntentionPriority:
return myConceptErrorIntentionPriority;
case LanguageConceptSwitch.ExecuteBlock:
return myConceptExecuteBlock;
case LanguageConceptSwitch.ForConceptMethodParameter:
return myConceptForConceptMethodParameter;
case LanguageConceptSwitch.Intention:
return myConceptIntention;
case LanguageConceptSwitch.IntentionDeclaration:
return myConceptIntentionDeclaration;
case LanguageConceptSwitch.IntentionParameter:
return myConceptIntentionParameter;
case LanguageConceptSwitch.IntentionPriority:
return myConceptIntentionPriority;
case LanguageConceptSwitch.IsApplicableBlock:
return myConceptIsApplicableBlock;
case LanguageConceptSwitch.Parameter:
return myConceptParameter;
case LanguageConceptSwitch.ParameterizedDescriptionBlock:
return myConceptParameterizedDescriptionBlock;
case LanguageConceptSwitch.ParameterizedExecuteBlock:
return myConceptParameterizedExecuteBlock;
case LanguageConceptSwitch.ParameterizedIntentionDeclaration:
return myConceptParameterizedIntentionDeclaration;
case LanguageConceptSwitch.QueryBlock:
return myConceptQueryBlock;
case LanguageConceptSwitch.SurroundWithIntentionDeclaration:
return myConceptSurroundWithIntentionDeclaration;
default :
return null;
}
}
