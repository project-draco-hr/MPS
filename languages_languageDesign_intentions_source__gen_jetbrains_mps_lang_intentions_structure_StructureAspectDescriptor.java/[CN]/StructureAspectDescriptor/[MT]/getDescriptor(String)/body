{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy","jetbrains.mps.lang.structure.structure.IConceptAspect").properties("isErrorIntention","isAvailableInChildNodes").references("forConcept").children(new String[]{"descriptionFunction","childFilterFunction","isApplicableFunction","executeFunction"},new boolean[]{false,false,false,false}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterBlock").interface_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.intentions.structure.ChildFilterBlock").alias("child filter function","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_childNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childNode","function parameter").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node","function parameter").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.DescriptionBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("description","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ExecuteBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("execute","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").alias("Intention","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameter","intention parameter").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IsApplicableBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedDescriptionBlock").super_("jetbrains.mps.lang.intentions.structure.DescriptionBlock").parents("jetbrains.mps.lang.intentions.structure.DescriptionBlock").alias("description","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedExecuteBlock").super_("jetbrains.mps.lang.intentions.structure.ExecuteBlock").parents("jetbrains.mps.lang.intentions.structure.ExecuteBlock").alias("execute","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").children(new String[]{"queryBlock","descriptionBlock","executeBlock"},new boolean[]{false,false,false}).alias("Parameterized Intention","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.QueryBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").children(new String[]{"paramType"},new boolean[]{false}).alias("parameter","").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").alias("Surround-With Intention","").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
