{
  SNode nodeMacro=QueriesUtil.addNodeMacro(node);
  SNode loopMacro=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.LoopMacro",null);
  SNodeOperations.replaceWithAnother(nodeMacro,loopMacro);
  SNode referentValue=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodesQuery",null);
  SNode dotExpression=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
  SNode linkAccess=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkListAccess",null);
  SLinkOperations.setTarget(linkAccess,"link",myParameter,false);
  SLinkOperations.setTarget(dotExpression,"operation",linkAccess,true);
  SLinkOperations.setTarget(dotExpression,"operand",SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode",null),true);
  SNode expressionStatement=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
  SLinkOperations.setTarget(expressionStatement,"expression",dotExpression,true);
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(referentValue,"body",true),"statement",true)).addElement(expressionStatement);
  SLinkOperations.setTarget(loopMacro,"sourceNodesQuery",referentValue,true);
  editorContext.selectAndSetCaret(loopMacro,1);
}
