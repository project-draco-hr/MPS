{
  if (initialState == null) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SAbstractConcept,SAbstractConcept>>());
  }
{
    final SearchScope scope=CommandUtil.createScope(searchScope);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    Collection<SNode> instances=CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null,false,context),SNodeOperations.asSConcept(initialState))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)),SNodeOperations.asSConcept(initialState));
      }
    }
).toListSequence();
    return CollectionSequence.fromCollection(instances).select(new ISelector<SNode,RefactoringParticipant.Change<SAbstractConcept,SAbstractConcept>>(){
      public RefactoringParticipant.Change<SAbstractConcept,SAbstractConcept> select(      SNode instance){
        final SNodeReference nodeRef=instance.getReference();
        final SearchResults searchResults=new SearchResults();
        searchResults.add(new SearchResult<SNode>(instance,"instance"));
        RefactoringParticipant.Change<SAbstractConcept,SAbstractConcept> change=new RefactoringParticipant.Change<SAbstractConcept,SAbstractConcept>(){
          public MoveNodeRefactoringParticipant<SAbstractConcept,SAbstractConcept> getParticipant(){
            return UpdateLocalConceptInstancesParticipant.this;
          }
          public SearchResults getSearchResults(){
            return searchResults;
          }
          public boolean needsToPreserveOldNode(){
            return false;
          }
          public void confirm(          final SAbstractConcept finalState,          final SRepository repository,          final RefactoringSession refactoringSession){
            refactoringSession.registerChange(new Runnable(){
              public void run(){
                SNode node=nodeRef.resolve(repository);
                MoveNodesDefault.CopyMapObject copyMap=MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);
                if (node == null || MapSequence.fromMap(copyMap.getCopyMap()).containsKey(node)) {
                  RefactoringRuntime.replaceWithNewConcept(MapSequence.fromMap(copyMap.getCopyMap()).get(node),finalState);
                }
                RefactoringRuntime.replaceWithNewConcept(node,finalState);
              }
            }
);
          }
        }
;
        return change;
      }
    }
).toListSequence();
  }
}
