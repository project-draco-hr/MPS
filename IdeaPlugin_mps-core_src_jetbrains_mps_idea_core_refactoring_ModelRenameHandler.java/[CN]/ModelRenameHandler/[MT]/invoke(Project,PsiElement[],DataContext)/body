{
  IFile modelFile=getModelFile(dataContext);
  if (modelFile == null)   return;
  SModel descriptor=SModelFileTracker.getInstance().findModel(modelFile);
  if (!(descriptor instanceof EditableSModel))   return;
  final EditableSModel modelDescriptor=(EditableSModel)descriptor;
  final AtomicReference<String> targetFqName=new AtomicReference<String>(null);
  Pair<String,Boolean> result=Messages.showInputDialogWithCheckBox(MPSBundle.message("rename.model.to",SNodeOperations.getModelLongName(modelDescriptor)),MPSBundle.message("rename.model"),MPSBundle.message("update.all.references"),true,true,null,SNodeOperations.getModelLongName(modelDescriptor),new MyInputValidator(){
    @Override protected void doRename(    String fqName){
      targetFqName.set(fqName);
    }
  }
);
  if (targetFqName.get() != null) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        deleteGeneratedFiles(modelDescriptor);
      }
    }
);
    final ModelRenamer renamer=new ModelRenamer(modelDescriptor,targetFqName.get(),!(result.getSecond()));
    ProjectModelAccess.instance().runWriteActionInCommand(new Runnable(){
      @Override public void run(){
        renamer.rename();
      }
    }
,ProjectHelper.toMPSProject(project));
    ProgressManager.getInstance().run(new Task.Modal(project,"Updating model usages...",false){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        indicator.pushState();
        indicator.setIndeterminate(true);
        try {
          ModelAccess.instance().runWriteAction(new Runnable(){
            public void run(){
              renamer.updateReferencesIfNeeded();
            }
          }
);
        }
  finally {
          indicator.popState();
        }
      }
    }
);
  }
}
