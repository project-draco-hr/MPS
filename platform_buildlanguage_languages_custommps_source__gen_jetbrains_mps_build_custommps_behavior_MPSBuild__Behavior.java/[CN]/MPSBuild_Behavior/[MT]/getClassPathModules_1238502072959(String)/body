{
  List<SNode> paths=ListOperations.<SNode>createList();
  File dir=new File(PathManager.getHomePath() + File.separator + prefix.replace("/",File.separator));
  List<IModule> modulesList=MPSModuleRepository.getInstance().getAllModulesInDirectory(dir);
  Set<IModule> modulesInClasspath=SetSequence.<IModule>fromArray();
  for (  IModule module : ListSequence.fromList(modulesList)) {
    if (module instanceof Language) {
      Language language=(Language)module;
      SetSequence.fromSet(modulesInClasspath).addElement(language);
      SetSequence.fromSet(modulesInClasspath).addSequence(ListSequence.fromList(language.getRuntimeDependOnModules()));
    }
  }
  for (  IModule module : SetSequence.fromSet(modulesInClasspath)) {
    String moduleProperName=Module_Behavior.extractModuleProperName_1235487584035(module);
    SNode path=SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath",null);
    SPropertyOperations.set(path,"path",prefix + "/" + moduleProperName+ "."+ AbstractModule.PACKAGE_SUFFIX);
    ListSequence.fromList(paths).addElement(path);
    if (module instanceof Language) {
      Language language=(Language)module;
      List<String> runtimeCP=language.getLanguageRuntimeClassPathItems();
      ListSequence.fromList(runtimeCP).removeSequence(ListSequence.fromList(language.getClassPath()));
      if (!(ListSequence.fromList(runtimeCP).isEmpty())) {
        path=SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath",null);
        SPropertyOperations.set(path,"path",prefix + "/" + moduleProperName+ "."+ AbstractModule.RUNTIME_JAR_SUFFIX);
        ListSequence.fromList(paths).addElement(path);
      }
    }
  }
  return ListSequence.fromList(paths).sort(new ISelector<SNode,Comparable<?>>(){
    public Comparable<?> select(    SNode it){
      return SPropertyOperations.getString(it,"path");
    }
  }
,true);
}
