{
  TemplateContext applyContext=myArguments.length == 0 ? context : context.subContext(getArgumentsAsMap());
  if (myTemplateNode.isInstanceOfConcept(RuleUtil.concept_TemplateDeclaration)) {
    List<SNode> fragments=GeneratorUtilEx.getTemplateFragments(myTemplateNode);
    if (!GeneratorUtilEx.checkIfOneOrMaryAdjacentFragments(fragments,myTemplateNode,context.getInput(),null,environment.getGenerator())) {
      environment.getGenerator().showErrorMessage(context.getInput(),myTemplateNode,"error processing template declaration");
      return null;
    }
    environment.getTracer().pushTemplateNode(new SNodePointer(myTemplateNode));
    Collection<SNode> outputNodes=new ArrayList<SNode>();
    for (    SNode fragment : fragments) {
      SNode templateForInclude=fragment.getParent();
      String mappingName=GeneratorUtilEx.getMappingName(fragment,null);
      TemplateProcessor p=new TemplateProcessor(environment.getGenerator(),environment.getReductionContext());
      try {
        outputNodes.addAll(p.processTemplateNode(mappingName,templateForInclude,context.subContext(mappingName)));
      }
 catch (      TemplateProcessingFailureException ex) {
      }
    }
    return outputNodes;
  }
 else {
    return new TemplateProcessor(environment.getGenerator(),environment.getReductionContext()).processTemplateNode(null,myTemplateNode,applyContext);
  }
}
