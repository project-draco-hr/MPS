{
  SNode node=(SNode)cellContext.get(CellContext.EDITED_NODE);
  List<SubstituteAction> list=ModelActions.createSideTransformHintSubstituteActions(node,cellSide,null,editorContext.getOperationContext());
  List<SubstituteAction> wrapperList=new ArrayList<SubstituteAction>(list.size());
  for (  final SubstituteAction action : list) {
    wrapperList.add(new NodeSubstituteActionWrapper(action){
      @Override public SNode substitute(      @Nullable EditorContext context,      String pattern){
        if (context != null) {
          EditorCell contextCell=context.getContextCell();
          if (contextCell instanceof EditorCell_Constant && contextCell.isErrorState()) {
            ((EditorCell_Constant)contextCell).synchronizeViewWithModel();
          }
        }
        return super.substitute(context,pattern);
      }
      public String toString(){
        return "Wrapper for ApplySideTransforms" + action + "("+ action.getClass()+ ")";
      }
    }
);
  }
  return wrapperList;
}
