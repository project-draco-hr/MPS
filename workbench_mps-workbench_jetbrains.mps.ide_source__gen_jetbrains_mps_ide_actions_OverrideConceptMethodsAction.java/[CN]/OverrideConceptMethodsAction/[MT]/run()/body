{
  final Wrappers._T<SNode> contextClass=new Wrappers._T<SNode>();
  final Wrappers._T<SNode> contextMethod=new Wrappers._T<SNode>();
  final Wrappers._T<SNodeReference[]> methods=new Wrappers._T<SNodeReference[]>();
  myProject.getModelAccess().runReadAction(new Runnable(){
    public void run(){
      contextClass.value=SNodeOperations.getNodeAncestor(mySelectedNode,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),true,false);
      contextMethod.value=SNodeOperations.getNodeAncestor(mySelectedNode,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),true,false);
      List<SNode> methodsToOverride=(myIsOverride ? BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),contextClass.value,"virtual_getMethodsToOverride_5418393554803767537",new Object[]{}) : BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),contextClass.value,"virtual_getMethodsToImplement_5418393554803775106",new Object[]{}));
      methods.value=OverrideConceptMethodsDialog.toNodePointers(OverrideConceptMethodsDialog.sortMethods(contextClass.value,methodsToOverride));
    }
  }
);
  final OverrideConceptMethodsDialog dialog=new OverrideConceptMethodsDialog(methods.value,ProjectHelper.toIdeaProject(myProject)){
    @Override protected boolean showInsertOverride(){
      return myIsOverride;
    }
  }
;
  dialog.setTitle((myIsOverride ? "Select Behavior Methods to Override" : "Select Behavior Methods to Implement"));
  dialog.show();
  if (dialog.isOK()) {
    final Iterable<SNodeReference> selectedElements=(Iterable<SNodeReference>)dialog.getSelectedElements();
    myProject.getModelAccess().executeCommandInEDT(new Runnable(){
      public void run(){
        List<SNode> selection=Sequence.fromIterable(selectedElements).select(new ISelector<SNodeReference,SNode>(){
          public SNode select(          SNodeReference it){
            return SNodeOperations.cast(((SNodePointer)it).resolve(MPSModuleRepository.getInstance()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
          }
        }
).toListSequence();
        OverrideConceptMethodsHelper helper=new OverrideConceptMethodsHelper(myProject,contextClass.value,contextMethod.value,dialog.isRemoveAttributes(),dialog.isAddReturn());
        List<SNode> insertedMethods=helper.insertMethods(selection);
        if (insertedMethods.isEmpty()) {
          return;
        }
        MoveRefactoringUtils.fixImportsFromNode(contextClass.value);
        SNode firstMethod=ListSequence.fromList(insertedMethods).first();
        SNode nodeToSelect;
        if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(firstMethod,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).isNotEmpty()) {
          nodeToSelect=ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(firstMethod,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).first();
        }
 else {
          nodeToSelect=firstMethod;
        }
        myEditorContext.flushEvents();
        myEditorContext.getSelectionManager().setSelection(nodeToSelect);
      }
    }
);
  }
}
