{
  final SModel m1=new TestModelFactory().createModel(1,1);
  final SModel m2=new TestModelFactory().createModel(1,3);
  myTestModelAccess.enableRead();
  ((SModelBase)m1).attach(myTestRepo);
  ((SModelBase)m2).attach(myTestRepo);
  AccessCountListener1 cl1=new AccessCountListener1();
  AccessCountListener2 cl2=new AccessCountListener2();
  AccessCountListener3 cl3=new AccessCountListener3();
  final SNode r1=m1.getRootNodes().iterator().next();
  attachAccessListeners(m1,cl1,cl2,cl3);
  Assert.assertTrue(r1.getChildren().iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(1));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  Assert.assertTrue(r1.getChildren(TestModelFactory.ourRole).iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(2));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(1));
  detachAccessListeners(m1,cl1,cl2,cl3);
  cl1.reset();
  cl2.reset();
  cl3.reset();
  final SNode r2=m2.getRootNodes().iterator().next();
  attachAccessListeners(m2,cl1,cl2,cl3);
  Assert.assertTrue(r2.getChildren().iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(1));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  Assert.assertTrue(r2.getChildren(TestModelFactory.ourRole).iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(2));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(1));
  detachAccessListeners(m2,cl1,cl2,cl3);
  cl1.reset();
  cl2.reset();
  cl3.reset();
  final SNode n1=r1.getChildren(TestModelFactory.ourRole).iterator().next();
  attachAccessListeners(m1,cl1,cl2,cl3);
  Assert.assertFalse(n1.getChildren().iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  Assert.assertFalse(n1.getChildren(TestModelFactory.ourRole).iterator().hasNext());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  detachAccessListeners(m1,cl1,cl2,cl3);
}
