{
  final TestModelFactory m1f=new TestModelFactory();
  SModel m1=m1f.createModel(3,2);
  myTestModelAccess.enableRead();
  m1f.attachTo(myTestRepo);
  final SNode r1=m1f.getRoot(1);
  final SNode r1c1=r1.getFirstChild();
  AccessCountListener1 cl1=new AccessCountListener1();
  AccessCountListener2 cl2=new AccessCountListener2();
  AccessCountListener3 cl3=new AccessCountListener3();
  m1f.attachAccessListeners(cl1,cl2,cl3);
  SConcept c=r1.getConcept();
  myErrors.checkThat(c,equalTo(ourConcept));
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  final SNodeReference ptr=r1.getReference();
  myErrors.checkThat(ptr,notNullValue());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  final SContainmentLink roleInParent=r1c1.getContainmentLink();
  myErrors.checkThat(roleInParent,equalTo(ourRole));
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  SNodeId nid=r1c1.getNodeId();
  myErrors.checkThat(nid,notNullValue());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  String presentation=r1c1.toString();
  myErrors.checkThat(presentation,notNullValue());
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  m1f.detachAccessListeners(cl1,cl2,cl3);
}
