{
  final TestModelFactory m1f=new TestModelFactory();
  SModel m1=m1f.createModel(2,2);
  myTestModelAccess.enableWrite();
  m1f.attachTo(myTestRepo);
  final SNode c=m1f.createNode();
  ChangeListener1 cl1=new ChangeListener1();
  ChangeListener2 cl2=new ChangeListener2();
  m1f.attachChangeListeners(cl1,cl2);
  m1.addRootNode(c);
  myErrors.checkThat(cl1.myAddedRoots.size(),equalTo(1));
  myErrors.checkThat(cl2.myAdded.size(),equalTo(1));
  myErrors.checkThat(cl1.myAddedRoots.contains(c),equalTo(true));
  myErrors.checkThat(cl2.myAdded.contains(c),equalTo(true));
  myErrors.checkThat(IterableUtil.asCollection(m1.getRootNodes()).size(),equalTo(3));
  myErrors.checkThat(m1f.isEditableChanged(),equalTo(true));
  cl1.reset();
  cl2.reset();
  m1f.clearEditableChanged();
  m1.removeRootNode(c);
  myErrors.checkThat(cl1.myRemovedRoots.size(),equalTo(1));
  myErrors.checkThat(cl1.myBeforeRemovedRoots.size(),equalTo(1));
  myErrors.checkThat(cl2.myRemoved.size(),equalTo(1));
  myErrors.checkThat(cl1.myRemovedRoots.contains(c),equalTo(true));
  myErrors.checkThat(cl1.myBeforeRemovedRoots.contains(c),equalTo(true));
  myErrors.checkThat(cl2.myRemoved.contains(c),equalTo(true));
  myErrors.checkThat(IterableUtil.asCollection(m1.getRootNodes()).size(),equalTo(2));
  myErrors.checkThat(m1f.isEditableChanged(),equalTo(true));
  m1.addRootNode(c);
  Assert.assertEquals(3,IterableUtil.asCollection(m1.getRootNodes()).size());
  cl1.reset();
  cl2.reset();
  m1f.clearEditableChanged();
  c.delete();
  myErrors.checkThat(cl1.myRemovedRoots.size(),equalTo(1));
  myErrors.checkThat(cl1.myBeforeRemovedRoots.size(),equalTo(1));
  myErrors.checkThat(cl2.myRemoved.size(),equalTo(1));
  myErrors.checkThat(cl1.myRemovedRoots.contains(c),equalTo(true));
  myErrors.checkThat(cl1.myBeforeRemovedRoots.contains(c),equalTo(true));
  myErrors.checkThat(cl2.myRemoved.contains(c),equalTo(true));
  myErrors.checkThat(IterableUtil.asCollection(m1.getRootNodes()).size(),equalTo(2));
  myErrors.checkThat(m1f.isEditableChanged(),equalTo(true));
  m1f.detachChangeListeners(cl1,cl2);
}
