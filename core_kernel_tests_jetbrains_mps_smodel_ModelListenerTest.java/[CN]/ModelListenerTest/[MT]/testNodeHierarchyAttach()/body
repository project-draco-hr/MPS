{
  final TestModelFactory m1f=new TestModelFactory();
  SModel m1=m1f.createModel(3,2);
  final SNodeId r2c1=m1f.getRoot(2).getFirstChild().getNodeId();
  myTestModelAccess.enableRead();
  m1f.attachTo(myTestRepo);
  final SNode notRoot=m1.getNode(r2c1);
  myTestModelAccess.disableRead();
  boolean gotAccessError=false;
  try {
    notRoot.getProperty(SNodeUtil.property_INamedConcept_name);
  }
 catch (  IllegalModelAccessError e) {
    gotAccessError=true;
  }
  Assert.assertTrue("Model belongs to a repository, SNode.getProperty without read access shall fail",gotAccessError);
  myTestModelAccess.enableRead();
  SNode parent=notRoot.getParent();
  myTestModelAccess.disableRead();
  try {
    parent.getProperty(SNodeUtil.property_INamedConcept_name);
    Assert.fail("getParent() for a node, which is obtained through model.getNodeId(), shall get SRepository and fully-functional checkModelRead");
  }
 catch (  IllegalModelAccessError e) {
  }
}
