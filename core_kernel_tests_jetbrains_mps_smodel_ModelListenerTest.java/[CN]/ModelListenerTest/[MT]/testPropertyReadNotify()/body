{
  final TestModelFactory m1f=new TestModelFactory();
  SModel m1=m1f.createModel(3,5);
  myTestModelAccess.enableRead();
  m1f.attachTo(myTestRepo);
  AccessCountListener1 cl1=new AccessCountListener1();
  AccessCountListener2 cl2=new AccessCountListener2();
  AccessCountListener3 cl3=new AccessCountListener3();
  final SNode r1=m1f.getRoot(1);
  m1f.attachAccessListeners(cl1,cl2,cl3);
  boolean shouldHave=r1.hasProperty(SNodeUtil.property_INamedConcept_name);
  myErrors.checkThat(shouldHave,equalTo(true));
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(1));
  myErrors.checkThat(cl1.myPropertiesRead,equalTo(1));
  myErrors.checkThat(cl2.myPropertiesRead,equalTo(1));
  myErrors.checkThat(cl3.myPropertiesRead,equalTo(0));
  myErrors.checkThat(cl3.getExistenceReadAccessProperties().size(),equalTo(1));
  cl1.reset();
  cl2.reset();
  cl3.reset();
  cl3.getExistenceReadAccessProperties().clear();
  r1.getProperty(SNodeUtil.property_INamedConcept_name);
  myErrors.checkThat(cl1.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl2.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl3.myVisitedNodes,equalTo(0));
  myErrors.checkThat(cl1.myPropertiesRead,equalTo(1));
  myErrors.checkThat(cl2.myPropertiesRead,equalTo(1));
  myErrors.checkThat(cl3.myPropertiesRead,equalTo(1));
  myErrors.checkThat(cl3.getExistenceReadAccessProperties().size(),equalTo(0));
  m1f.detachAccessListeners(cl1,cl2,cl3);
}
