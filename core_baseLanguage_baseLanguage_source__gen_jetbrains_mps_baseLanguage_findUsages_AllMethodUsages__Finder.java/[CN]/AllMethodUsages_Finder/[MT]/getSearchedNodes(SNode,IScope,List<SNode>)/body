{
  List<SNode> methodDeclarations=new ArrayList<SNode>();
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) != null) {
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      ListSequence.<SNode>fromList(methodDeclarations).addSequence(ListSequence.<SNode>fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",node,scope,new EmptyProgressIndicator())));
    }
    ListSequence.<SNode>fromList(methodDeclarations).addElement(node);
  }
 else {
    ListSequence.<SNode>fromList(methodDeclarations).addSequence(ListSequence.<SNode>fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceMethodImplementations_Finder",node,scope,new EmptyProgressIndicator())));
  }
  for (  SNode methodDeclaration : methodDeclarations) {
    ListSequence.<SNode>fromList(_results).addElement(methodDeclaration);
  }
}
