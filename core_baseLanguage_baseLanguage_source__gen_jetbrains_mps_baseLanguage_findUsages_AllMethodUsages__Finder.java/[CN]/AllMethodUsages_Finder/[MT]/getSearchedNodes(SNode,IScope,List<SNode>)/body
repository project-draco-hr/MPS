{
  List<SNode> methodDeclarations=new ArrayList<SNode>();
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) != null) {
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      ListSequence.fromList(methodDeclarations).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",node,scope,new EmptyProgressMonitor())));
    }
    ListSequence.fromList(methodDeclarations).addElement(node);
  }
 else {
    ListSequence.fromList(methodDeclarations).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceMethodImplementations_Finder",node,scope,new EmptyProgressMonitor())));
  }
  for (  SNode methodDeclaration : methodDeclarations) {
    ListSequence.fromList(_results).addElement(methodDeclaration);
  }
}
