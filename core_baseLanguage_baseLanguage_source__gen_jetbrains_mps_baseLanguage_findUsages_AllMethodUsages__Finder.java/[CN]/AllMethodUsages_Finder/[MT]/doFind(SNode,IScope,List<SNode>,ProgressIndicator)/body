{
  List<SNode> methodDeclarations;
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) != null) {
    methodDeclarations=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",node,scope,indicator);
    ListSequence.fromList(methodDeclarations).addElement(node);
  }
 else {
    methodDeclarations=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceMethodImplementations_Finder",node,scope,indicator);
    ListSequence.fromList(methodDeclarations).addElement(node);
  }
  for (  SNode methodDeclaration : methodDeclarations) {
    for (    SNode nodeUsage : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",methodDeclaration,scope,indicator))) {
      if (!(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(nodeUsage),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) && !(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(nodeUsage),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"))) {
        continue;
      }
      ListSequence.fromList(_results).addElement(nodeUsage);
    }
  }
}
