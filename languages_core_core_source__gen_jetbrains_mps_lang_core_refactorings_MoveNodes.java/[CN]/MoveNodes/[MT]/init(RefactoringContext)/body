{
  final Wrappers._boolean result=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (((Object)refactoringContext.getParameter("target")) instanceof SNode) {
        SNode targetNode=((SNode)((Object)refactoringContext.getParameter("target")));
        SNode concept=SNodeOperations.getConceptDeclaration(targetNode);
        ConceptAndSuperConceptsScope superConceptsScope=new ConceptAndSuperConceptsScope(concept);
        List<SNode> linkDeclarations=(List<SNode>)superConceptsScope.getLinkDeclarationsExcludingOverridden();
        Iterable<SNode> childLinkDeclarations=ListSequence.fromList(linkDeclarations).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
          }
        }
);
        Iterable<String> childLinksRoles=Sequence.fromIterable(childLinkDeclarations).select(new ISelector<SNode,String>(){
          public String select(          SNode it){
            return SModelUtil.getGenuineLinkRole(it);
          }
        }
);
        for (        SNode node : refactoringContext.getSelectedNodes()) {
          String childRole=node.getRoleInParent();
          if (!(Sequence.fromIterable(childLinksRoles).contains(childRole))) {
            return;
          }
          for (          SNode linkDeclaration : childLinkDeclarations) {
            if (SPropertyOperations.getString(linkDeclaration,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98052f333L,"role")).equals(childRole)) {
              if (!(SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(SLinkOperations.getTarget(linkDeclaration,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98055fef0L,"target"))),SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(node))))) {
                return;
              }
            }
          }
        }
        result.value=true;
      }
 else       if (((Object)refactoringContext.getParameter("target")) instanceof SModel) {
        result.value=ListSequence.fromList(refactoringContext.getSelectedNodes()).all(new IWhereFilter<SNode>(){
          public boolean accept(          SNode node){
            return ModelConstraints.canBeRoot(SNodeOperations.getConcept(node),((SModel)((Object)refactoringContext.getParameter("target"))));
          }
        }
);
      }
    }
  }
);
  return result.value;
}
