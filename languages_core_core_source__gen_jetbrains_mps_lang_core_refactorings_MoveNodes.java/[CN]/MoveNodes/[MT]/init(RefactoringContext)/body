{
  ((RefactoringContext)refactoringContext).setLocal(true);
  if (!(false)) {
    return false;
  }
  final Wrappers._boolean result=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (((Object)refactoringContext.getParameter("target")) instanceof SNode) {
        SNode targetNode=((SNode)((Object)refactoringContext.getParameter("target")));
        SNode concept=SNodeOperations.getConceptDeclaration(targetNode);
        ConceptAndSuperConceptsScope superConceptsScope=new ConceptAndSuperConceptsScope(concept);
        List<SNode> linkDeclarations=(List<SNode>)superConceptsScope.getLinkDeclarationsExcludingOverridden();
        Iterable<SNode> childLinkDeclarations=ListSequence.fromList(linkDeclarations).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
          }
        }
);
        Iterable<String> childLinksRoles=Sequence.fromIterable(childLinkDeclarations).select(new ISelector<SNode,String>(){
          public String select(          SNode it){
            return SModelUtil.getGenuineLinkRole(it);
          }
        }
);
        for (        SNode node : refactoringContext.getSelectedNodes()) {
          String childRole=node.getRole_();
          if (!(Sequence.fromIterable(childLinksRoles).contains(childRole))) {
            return;
          }
          for (          SNode linkDeclaration : childLinkDeclarations) {
            if (SPropertyOperations.getString(linkDeclaration,"role").equals(childRole)) {
              if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(linkDeclaration,"target",false),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(node))))) {
                return;
              }
            }
          }
        }
        result.value=true;
      }
 else       if (((Object)refactoringContext.getParameter("target")) instanceof SModelDescriptor) {
        for (        SNode node : refactoringContext.getSelectedNodes()) {
          if (!(SNodeOperations.isInstanceOf(SNodeOperations.getConceptDeclaration(node),"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) || !(SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(node),"rootable"))) {
            return;
          }
        }
        result.value=true;
      }
    }
  }
);
  return result.value;
}
