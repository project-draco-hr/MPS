{
  try {
    Point p=new Point(ShowParameters_Action.this.cell.getX() + ShowParameters_Action.this.cell.getWidth(),ShowParameters_Action.this.cell.getY() + ShowParameters_Action.this.cell.getHeight());
    EditorCell currentCell=ShowParameters_Action.this.cell;
    while (currentCell != null) {
      ParametersInformation parametersInformation=currentCell.getStyle().get(StyleAttributes.PARAMETERS_INFORMATION);
      if (parametersInformation == null && SNodeOperations.isInstanceOf(((SNode)currentCell.getSNode()),"jetbrains.mps.baseLanguage.structure.IMethodCall")) {
        parametersInformation=new ParametersInformation(){
          @Override public List<SNode> getMethods(          SNode node,          EditorContext editorContext){
            SNode method=SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false);
            SNode classifier=SNodeOperations.cast(SNodeOperations.getParent(method),"jetbrains.mps.baseLanguage.structure.IMemberContainer");
            List<SNode> members=IMemberContainer_Behavior.call_getMembers_1213877531970(classifier);
            List<SNode> methodsToShow=new ArrayList<SNode>();
            for (            SNode member : ListSequence.fromList(members)) {
              if (SNodeOperations.isInstanceOf(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"name"),SPropertyOperations.getString(method,"name"))) {
                ListSequence.fromList(methodsToShow).addElement(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
              }
            }
            return methodsToShow;
          }
          @Override public String getMethodPresentation(          SNode node,          EditorContext editorContext,          SNode method){
            return BaseConcept_Behavior.call_getPresentation_1213877396640(SNodeOperations.cast(method,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
          }
          @Override public boolean isMethodCurrent(          SNode node,          EditorContext editorContext,          SNode method){
            return SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false) == method;
          }
        }
;
      }
      if (parametersInformation != null) {
        Component componet=parametersInformation.getComponent(currentCell.getSNode(),ShowParameters_Action.this.editorContext);
        MPSToolTipManager.getInstance().showToolTip(new ToolTipData(componet),ShowParameters_Action.this.editor,p);
        return;
      }
      currentCell=currentCell.getParent();
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "ShowParameters",t);
    }
  }
}
