{
  Iterable<SNode> nodes=ListSequence.<SNode>fromList(SNodeOperations.getChildren(SNodeOperations.getParent(node))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.NodeMacro");
    }
  }
);
  boolean seen=false;
  for (  SNode n : nodes) {
    if (seen) {
      if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
        SNode m=SLinkOperations.getTarget(SNodeOperations.cast(n,"jetbrains.mps.lang.generator.structure.CopySrcNodeMacro"),"sourceNodeQuery",true);
        if ((m == null) || (SLinkOperations.getTarget(m,"body",true) == null) || ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m,"body",true),"statement",true)).isEmpty()|| ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m,"body",true),"statement",true)).count() > 1) {
          return false;
        }
        SNode st=ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m,"body",true),"statement",true)).first();
        return SNodeOperations.isInstanceOf(st,"jetbrains.mps.baseLanguage.structure.ExpressionStatement") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(st,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"),"expression",true),"jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode");
      }
 else {
        return false;
      }
    }
 else     if (n == node) {
      seen=true;
    }
  }
  return false;
}
