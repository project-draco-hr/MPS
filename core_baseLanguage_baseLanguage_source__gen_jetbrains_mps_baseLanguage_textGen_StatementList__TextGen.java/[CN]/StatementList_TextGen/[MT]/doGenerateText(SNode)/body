{
  int size=ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).count();
  SNode methodLike=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.IMethodLike",false,false);
  SNode lastStatement=IMethodLike_Behavior.call_getLastStatement_1239354409446(methodLike);
  for (int i=0; i < size; i++) {
    SNode statement=ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).toListSequence()).getElement(i);
    if (statement == lastStatement && (LastStatementUtil.canMakeReturnStatement(statement))) {
      SNode expressionStatement=SNodeOperations.cast(statement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement");
      SNode returnStatement=SModelOperations.createNewNode(SNodeOperations.getModel(statement),"jetbrains.mps.baseLanguage.structure.ReturnStatement",null);
      SNode expression=SNodeOperations.copyNode(SLinkOperations.getTarget(expressionStatement,"expression",true));
      SLinkOperations.setNewChild(expressionStatement,"expression","jetbrains.mps.baseLanguage.structure.Expression");
      SLinkOperations.setTarget(returnStatement,"expression",expression,true);
      statement=returnStatement;
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),statement,this.getSNode());
      SLinkOperations.setNewChild(returnStatement,"expression","jetbrains.mps.baseLanguage.structure.Expression");
      SLinkOperations.setTarget(expressionStatement,"expression",expression,true);
    }
 else {
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),statement,this.getSNode());
    }
  }
}
