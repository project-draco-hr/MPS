{
  TypeMatcher matcher=new TypeMatcher();
  SNode meth=Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(SLinkOperations.getTarget(targetIfaceErase,"classifier",false))).first();
  if ((meth == null)) {
    return null;
  }
  if ((SLinkOperations.getTarget(meth,"returnType",true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(meth,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
    matcher.matchReturnType(SLinkOperations.getTarget(meth,"returnType",true),FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(funType));
  }
{
    Iterator<SNode> funParamIt=ListSequence.fromList(FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(funType)).iterator();
    Iterator<SNode> methParamIt=ListSequence.fromList(SLinkOperations.getTargets(meth,"parameter",true)).iterator();
    while (funParamIt.hasNext() && methParamIt.hasNext()) {
      matcher.matchType(SLinkOperations.getTarget(methParamIt.next(),"type",true),funParamIt.next());
    }
  }
  Map<SNode,SNode> map=matcher.getMap();
  SNode result=SNodeOperations.copyNode(targetIfaceErase);
  if (map != null) {
    Iterator<SNode> targetTypeVarIt=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),"typeVariableDeclaration",true)).iterator();
    while (targetTypeVarIt.hasNext()) {
      ListSequence.fromList(SLinkOperations.getTargets(result,"parameter",true)).addElement(SNodeOperations.cast(MapSequence.fromMap(map).get(targetTypeVarIt.next()),"jetbrains.mps.baseLanguage.structure.Type"));
    }
  }
  return result;
}
