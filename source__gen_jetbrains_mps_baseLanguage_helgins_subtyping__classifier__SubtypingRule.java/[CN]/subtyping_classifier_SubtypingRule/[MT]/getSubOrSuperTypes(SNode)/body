{
  SNode classifier=SLinkOperations.getTarget(type,"classifier",false);
  List<SNode> supertypes=new ArrayList<SNode>();
  supertypes.add(new QuotationClass_4().createNode());
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode classConcept=classifier;
    supertypes.add(SLinkOperations.getTarget(classConcept,"superclass",true));
    supertypes.addAll(SLinkOperations.getTargets(classConcept,"implementedInterface",true));
    supertypes.add(new QuotationClass_5().createNode(SLinkOperations.getTarget(classConcept,"extendedClass",false)));
  }
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    SNode interfaceConcept=classifier;
    supertypes.addAll(SLinkOperations.getTargets(interfaceConcept,"extendedInterface",true));
  }
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode supertype : supertypes) {
    SNode supertypeCopy=SNodeOperations.copyNode(supertype);
    for (    SNode typeParam : new ArrayList<SNode>(SLinkOperations.getTargets(supertypeCopy,"parameter",true))) {
      if (SNodeOperations.isInstanceOf(typeParam,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        SNode tvr=typeParam;
        int i=((List)SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).indexOf(SLinkOperations.getTarget(tvr,"typeVariableDeclaration",false));
        if (i < 0 || i >= SLinkOperations.getCount(type,"parameter")) {
          ((SNode)supertypeCopy).removeChild(typeParam);
          continue;
        }
        SNode newNode=SNodeOperations.copyNode(((SNode)((List)SLinkOperations.getTargets(type,"parameter",true)).get(i)));
        supertypeCopy.replaceChild(typeParam,newNode);
      }
    }
    result.add(supertypeCopy);
  }
  return result;
}
