{
  return Collections.<AbstractMigrationRefactoring>singletonList(new AbstractMigrationRefactoring(null){
    public String getName(){
      return "Migrate intentions condition for " + context.getName();
    }
    public String getAdditionalInfo(){
      return getName();
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.intentions.structure.IntentionDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode intention){
      return SLinkOperations.getTarget(intention,"forConcept",false) == context.sourceConcept;
    }
    public void doUpdateInstanceNode(    SNode intention){
      SLinkOperations.setTarget(intention,"forConcept",context.targetConcept,false);
      SNode condition=context.conditionCreator.invoke(SConceptOperations.createNewNode("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node",null));
      if ((SLinkOperations.getTarget(intention,"isApplicableFunction",true) == null)) {
        SLinkOperations.setTarget(intention,"isApplicableFunction",new AbstractMigrations.QuotationClass_jfwjkz_a0a0a2a4a0a0a0a().createNode(condition),true);
      }
 else {
        SNode isApplicableBody=new AbstractMigrations.QuotationClass_jfwjkz_a0a0a0c0e0a0a0a0().createNode(condition,SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(intention,"isApplicableFunction",true),"body",true),"statement",true));
        SLinkOperations.setTarget(SLinkOperations.getTarget(intention,"isApplicableFunction",true),"body",isApplicableBody,true);
      }
    }
  }
);
}
