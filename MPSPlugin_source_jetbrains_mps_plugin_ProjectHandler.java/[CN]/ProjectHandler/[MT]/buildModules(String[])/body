{
  final CountDownLatch latch=new CountDownLatch(1);
  final CompilationResult[] result=new CompilationResult[1];
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          refreshFSInternal();
          List<Module> modules=new ArrayList<Module>();
          for (          String path : paths) {
            Module module=findModule(path);
            if (module != null) {
              modules.add(module);
            }
          }
          if (modules.isEmpty()) {
            latch.countDown();
            return;
          }
          CompilerManager compilerManager=CompilerManager.getInstance(myProject);
          compilerManager.make(myProject,modules.toArray(new Module[modules.size()]),new CompileStatusNotification(){
            public void finished(            boolean aborted,            int errors,            int warnings,            CompileContext compileContext){
              compilationFinished(aborted,errors,warnings);
            }
            private void compilationFinished(            boolean aborted,            int errorsNumber,            int warningsNumber){
              result[0]=new CompilationResult(errorsNumber,warningsNumber,aborted);
              latch.countDown();
            }
          }
);
        }
      }
);
    }
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return result[0];
}
