{
  final List<String> res=new ArrayList<String>();
  executeWriteAction(new Runnable(){
    public void run(){
      Module m=findModule(path);
      if (m == null)       return;
      final Set<Module> processedModules=new HashSet<Module>();
      Set<VirtualFile> result=new LinkedHashSet<VirtualFile>();
      ModuleRootManager instance=ModuleRootManager.getInstance(m);
      if (instance != null) {
        String outUrl=instance.getCompilerOutputPathUrl();
        if (outUrl != null) {
          res.add(new File(VirtualFileManager.extractPath(outUrl)).getAbsolutePath());
        }
      }
      ModuleRootManager.getInstance(m).processOrder(new RootPolicy<Set<VirtualFile>>(){
        public Set<VirtualFile> visitLibraryOrderEntry(        LibraryOrderEntry libraryOrderEntry,        Set<VirtualFile> result){
          result.addAll(Arrays.asList(libraryOrderEntry.getFiles(OrderRootType.CLASSES)));
          return result;
        }
        public Set<VirtualFile> visitModuleOrderEntry(        ModuleOrderEntry moduleOrderEntry,        Set<VirtualFile> result){
          Module module=moduleOrderEntry.getModule();
          if (module != null && !processedModules.contains(module)) {
            String outUrl=ModuleRootManager.getInstance(module).getCompilerOutputPathUrl();
            if (outUrl != null) {
              res.add(new File(VirtualFileManager.extractPath(outUrl)).getAbsolutePath());
            }
            processedModules.add(module);
            result.addAll(Arrays.asList(moduleOrderEntry.getFiles(OrderRootType.CLASSES_AND_OUTPUT)));
            ModuleRootManager.getInstance(module).processOrder(this,result);
          }
          return result;
        }
      }
,result);
      for (      VirtualFile f : result) {
        try {
          res.add(f.getPresentableUrl());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  return res;
}
