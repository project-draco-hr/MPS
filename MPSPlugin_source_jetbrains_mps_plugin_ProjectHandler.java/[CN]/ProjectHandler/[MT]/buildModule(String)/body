{
  final Object lock=new Object(){
  }
;
  final CompilationResult[] result=new CompilationResult[1];
synchronized (lock) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            Module module=findModule(path);
            if (module == null) {
synchronized (lock) {
                lock.notifyAll();
              }
              return;
            }
            CompilerManager compilerManager=CompilerManager.getInstance(myProject);
            compilerManager.make(module,new CompileStatusNotification(){
              public void finished(              boolean aborted,              int errors,              int warnings,              CompileContext compileContext){
                compilationFinished(aborted,errors,warnings);
              }
              private void compilationFinished(              boolean aborted,              int errorsNumber,              int warningsNumber){
synchronized (lock) {
                  result[0]=new CompilationResult(errorsNumber,warningsNumber,aborted);
                  lock.notifyAll();
                }
              }
            }
);
          }
        }
);
      }
    }
);
    try {
      lock.wait();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return result[0];
}
