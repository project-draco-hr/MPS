{
  if (type instanceof ParameterizedTypeBinding) {
    StringBuilder sb=new StringBuilder();
    sb.append(asString(((ParameterizedTypeBinding)type).genericType()));
    sb.append('<');
    appendList(sb,((ParameterizedTypeBinding)type).arguments);
    sb.append('>');
    return sb.toString();
  }
  if (type instanceof BinaryTypeBinding) {
    return classFqNameFromCompoundName(((BinaryTypeBinding)type).compoundName);
  }
  if (type instanceof SourceTypeBinding) {
    return classFqNameFromCompoundName(((SourceTypeBinding)type).compoundName);
  }
  if (type instanceof ArrayBinding) {
    if (context != null && context.isVarargs() && context.parameters[context.parameters.length - 1] == type) {
      return asString(((ArrayBinding)type).elementsType()) + "...";
    }
 else {
      return asString(((ArrayBinding)type).elementsType()) + "[]";
    }
  }
  if (type instanceof BaseTypeBinding) {
    return new String(((BaseTypeBinding)type).simpleName);
  }
  if (type instanceof TypeVariableBinding) {
    TypeVariableBinding typeVariableBinding=(TypeVariableBinding)type;
    Binding binding=typeVariableBinding.declaringElement;
    String name=null;
    if (binding instanceof MethodBinding) {
      MethodBinding methodBinding=(MethodBinding)binding;
      name=new String(methodBinding.typeVariables[typeVariableBinding.rank].sourceName);
    }
 else     if (binding instanceof SourceTypeBinding) {
      SourceTypeBinding sourceTypeBinding=(SourceTypeBinding)binding;
      name=new String(sourceTypeBinding.typeVariables[typeVariableBinding.rank].sourceName);
    }
    return name;
  }
  if (type instanceof WildcardBinding && ((WildcardBinding)type).boundKind == Wildcard.EXTENDS) {
    return "? extends " + asString(((WildcardBinding)type).bound);
  }
  if (type instanceof WildcardBinding && ((WildcardBinding)type).boundKind == Wildcard.SUPER) {
    return "? super " + asString(((WildcardBinding)type).bound);
  }
  if (type.isUnboundWildcard()) {
    return "?";
  }
  throw new RuntimeException("unexpected type: " + type);
}
