{
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  QuasiRepresentationModifier quasiModifier=new QuasiRepresentationModifier(embeddedGraph,bends,angles);
  quasiModifier.reduceToOrthogonalRepresentation();
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  System.out.println(embeddedGraph);
  System.out.println(directions);
  ConstraintsGraphProcessor processor=new ConstraintsGraphProcessor(embeddedGraph,directions);
  List<Node> nodes=ListSequence.fromList(new ArrayList<Node>());
  ListSequence.fromList(nodes).addSequence(ListSequence.fromList(graph.getNodes()));
  Map<Node,Dimension> nodeSizes=MapSequence.fromMap(new HashMap<Node,Dimension>());
  for (  Node node : ListSequence.fromList(nodes)) {
    MapSequence.fromMap(nodeSizes).put(node,new Dimension(30,30));
  }
  processor.modifyEmbeddedGraph(nodes,nodeSizes);
}
