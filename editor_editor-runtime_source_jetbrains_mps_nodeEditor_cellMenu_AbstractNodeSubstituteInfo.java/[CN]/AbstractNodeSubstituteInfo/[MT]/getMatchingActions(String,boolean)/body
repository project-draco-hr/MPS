{
  return ModelAccess.instance().runReadAction(new Computable<List<SubstituteAction>>(){
    @Override public List<SubstituteAction> compute(){
      List<SubstituteAction> actionsFromCache=getActionsFromCache(pattern,strictMatching);
      ArrayList<SubstituteAction> result=new ArrayList<SubstituteAction>(actionsFromCache.size());
      for (      SubstituteAction item : actionsFromCache) {
        try {
          if (strictMatching ? item.canSubstituteStrictly(pattern) : SubstituteActionUtil.canSubstitute(item,pattern)) {
            result.add(item);
          }
        }
 catch (        Throwable th) {
          LOG.error("Exception on calling canSubstitute on a substitute action " + (item == null ? "null" : item.getClass()),th);
        }
      }
      putActionsToCache(pattern,strictMatching,result);
      result.trimToSize();
      return result;
    }
  }
);
}
