{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode methodDeclaration=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",true,false);
      if (SNodeOperations.isInstanceOf(methodDeclaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
        SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false),"concept",false);
        return AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode());
      }
 else {
        return null;
      }
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:6786d6ee-e5cc-4a77-9efd-65a8dca8b187(jetbrains.mps.lang.behavior.constraints)","6496299201655529042");
    }
  }
);
  return result;
}
