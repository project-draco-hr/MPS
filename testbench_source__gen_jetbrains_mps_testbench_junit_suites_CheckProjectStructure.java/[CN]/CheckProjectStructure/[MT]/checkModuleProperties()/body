{
  final List<String> errors=new ArrayList<String>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      BaseCheckModulesTest.getContextProject().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          List<SModule> modules=ListSequence.fromListAndArray(new ArrayList<SModule>(),myModule);
          if (myModule instanceof Language) {
            ListSequence.fromList(modules).addSequence(CollectionSequence.fromCollection(((Language)myModule).getGenerators()));
          }
          for (          SModule sm : modules) {
            MessageCollectProcessor processor=new MessageCollectProcessor(false);
            ValidationUtil.validateModule(sm,processor);
            if (processor.getErrors().isEmpty()) {
              continue;
            }
            StringBuilder errorMessages=new StringBuilder();
            for (            String item : processor.getErrors()) {
              errorMessages.append("\t").append(item).append("\n");
            }
            errors.add("Error in module " + sm.getModuleName() + ": "+ errorMessages.toString());
          }
        }
      }
);
    }
  }
);
  Assert.assertTrue("Module property or dependency errors:\n" + CheckingTestsUtil.formatErrors(errors),errors.isEmpty());
}
