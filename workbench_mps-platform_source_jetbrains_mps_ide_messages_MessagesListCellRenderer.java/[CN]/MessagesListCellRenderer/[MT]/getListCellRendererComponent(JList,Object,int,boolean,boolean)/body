{
  JLabel component=(JLabel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  final IMessage message=(IMessage)value;
  component.setBackground(isSelected ? CONSOLE_BACKGROUND.darker() : CONSOLE_BACKGROUND);
  component.setBorder(EMPTY_BORDER);
  StringBuilder sb=new StringBuilder(120);
  new Formatter(sb).format("%tT\t: ",new Date(message.getCreationTime()));
  if (message.getSender() != null) {
    sb.append('[');
    sb.append(message.getSender());
    sb.append(']');
    sb.append(' ');
  }
  sb.append(message.getText());
  if (message.getException() != null) {
    sb.append(" (right-click to see exception)");
  }
  String text=sb.toString();
  final NavStatus ns=canNavigate(message);
  if (ns == NavStatus.YES) {
    component.setToolTipText(String.valueOf(message.getHintObject()));
  }
 else {
    component.setToolTipText(null);
  }
  if (ns == NavStatus.OUTDATED) {
    component.setForeground(EXPIRED_ATTRIBUTES.getForegroundColor());
    text=String.format("[outdated] %s:%s",message.getHintObject().toString(),text);
  }
 else {
switch (message.getKind()) {
case WARNING:
      component.setForeground(WARNING_ATTRIBUTES.getForegroundColor());
    break;
case ERROR:
  component.setForeground(ERROR_ATTRIBUTES.getForegroundColor());
break;
default :
component.setForeground(INFO_ATTRIBUTES.getForegroundColor());
break;
}
}
component.setText(text);
switch (message.getKind()) {
case INFORMATION:
component.setIcon(Icons.INFORMATION_ICON);
break;
case WARNING:
component.setIcon(Icons.WARNING_ICON);
break;
case ERROR:
component.setIcon(Icons.ERROR_ICON);
break;
}
return component;
}
