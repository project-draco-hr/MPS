{
  addNodeById("6791439617122308113");
  addNodeById("6791439617122308116");
  addNodeById("6791439617122315466");
  new ConvertAnonymousRefactoring(SNodeOperations.cast(getNodeById("6791439617122308134"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),"MyI").doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("6791439617122308117"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("6791439617122315467"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("The nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",new NodesMatcher().match(nodesBefore,nodesAfter));
  }
}
