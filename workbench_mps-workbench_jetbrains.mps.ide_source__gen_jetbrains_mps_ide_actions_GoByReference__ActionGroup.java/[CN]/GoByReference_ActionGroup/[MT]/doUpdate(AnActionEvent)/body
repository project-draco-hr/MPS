{
  GoByReference_ActionGroup.this.removeAll();
  final MPSProject mpsProject=event.getData(MPSCommonDataKeys.MPS_PROJECT);
  SNode node=event.getData(MPSCommonDataKeys.NODE);
  if (node == null || mpsProject == null) {
    GoByReference_ActionGroup.this.disable(event.getPresentation());
    return;
  }
  Iterable<? extends SReference> refs=node.getReferences();
  if (!(refs.iterator().hasNext())) {
    GoByReference_ActionGroup.this.disable(event.getPresentation());
    return;
  }
  for (  SReference ref : Sequence.fromIterable(refs)) {
    SNode targetNode=ref.getTargetNode();
    if (targetNode != null) {
      String text="[" + ref.getLink() + "] -> "+ ((jetbrains.mps.smodel.SReference)ref).getResolveInfo();
      GoByReference_ActionGroup.this.addParameterizedAction(new EditGivenNode_Action(targetNode.getReference(),text),PluginId.getId("jetbrains.mps.ide"),targetNode.getReference(),text);
      continue;
    }
    final SReference finalRef=ref;
    mpsProject.getModelAccess().runWriteInEDT(new Runnable(){
      @Override public void run(){
        String text="Bad reference: [" + finalRef.getLink() + "] -> "+ ((jetbrains.mps.smodel.SReference)finalRef).getResolveInfo();
        mpsProject.getModelAccess().executeUndoTransparentCommand(new Runnable(){
          @Override public void run(){
            ResolverComponent.getInstance().resolve(finalRef,mpsProject.getRepository());
          }
        }
);
        SReferenceLink role=finalRef.getLink();
        SNode sourceNode=finalRef.getSourceNode();
        SReference newRef=sourceNode.getReference(role);
        if (newRef == null) {
          return;
        }
        SNode newTarget=finalRef.getTargetNode();
        if (newTarget == null) {
          return;
        }
        GoByReference_ActionGroup.this.addParameterizedAction(new EditGivenNode_Action(newTarget.getReference(),text),PluginId.getId("jetbrains.mps.ide"),newTarget.getReference(),text);
      }
    }
);
  }
  for (  Pair<ActionPlace,Condition<BaseAction>> p : this.myPlaces) {
    this.addPlace(p.first,p.second);
  }
}
