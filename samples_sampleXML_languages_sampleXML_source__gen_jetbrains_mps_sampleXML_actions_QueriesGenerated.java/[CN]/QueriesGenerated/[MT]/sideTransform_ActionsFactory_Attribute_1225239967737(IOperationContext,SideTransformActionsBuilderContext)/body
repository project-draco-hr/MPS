{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.sampleXML.structure.Attribute");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode nextAttr=SConceptOperations.createNewNode("jetbrains.mps.sampleXML.structure.Attribute",null);
        SPropertyOperations.set(nextAttr,"name",((pattern == null ? null : pattern.trim())));
        SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),nextAttr);
        return nextAttr;
      }
      public String getMatchingText(      String pattern){
        return pattern;
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
