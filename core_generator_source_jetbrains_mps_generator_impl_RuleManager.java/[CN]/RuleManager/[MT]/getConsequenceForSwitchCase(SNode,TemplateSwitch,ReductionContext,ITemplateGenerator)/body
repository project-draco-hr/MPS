{
  AbstractConceptDeclaration inputNodeConcept=inputNode.getConceptDeclarationAdapter();
  List<TemplateSwitch> switches=myTemplateSwitchGraph.getSubgraphAsList(templateSwitch);
  for (  TemplateSwitch aSwitch : switches) {
    List<Reduction_MappingRule> rules=aSwitch.getReductionMappingRules();
    for (    Reduction_MappingRule rule : rules) {
      if (checkPremiseForBaseMappingRule(inputNode,inputNodeConcept,rule,reductionContext)) {
        RuleConsequence ruleConsequence=rule.getRuleConsequence();
        if (ruleConsequence == null) {
          generator.showErrorMessage(inputNode,null,rule.getNode(),"couldn't apply reduction: no rule consequence");
        }
        return ruleConsequence;
      }
    }
    RuleConsequence ruleConsequence=aSwitch.getDefaultConsequence();
    if (ruleConsequence != null) {
      return ruleConsequence;
    }
  }
  return null;
}
