{
  try {
    if (DeleteLine_Action.this.currentCell instanceof EditorCell_Collection) {
      EditorCell_Collection collection=(EditorCell_Collection)DeleteLine_Action.this.currentCell;
      List<EditorCell_Collection> cells=ListSequence.fromList(new ArrayList<EditorCell_Collection>());
      List<EditorCell_Collection> newFrontier=ListSequence.fromList(new ArrayList<EditorCell_Collection>());
      ListSequence.fromList(cells).addElement(collection);
      while (!(ListSequence.fromList(cells).isEmpty())) {
        for (        EditorCell_Collection cellCollection : cells) {
          if (cellCollection.getCellLayout() instanceof CellLayout_Vertical) {
            return;
          }
          for (          EditorCell cell : cellCollection) {
            if (cell instanceof EditorCell_Collection) {
              ListSequence.fromList(newFrontier).addElement((EditorCell_Collection)cell);
            }
          }
        }
        cells=newFrontier;
        newFrontier=ListSequence.fromList(new ArrayList<EditorCell_Collection>());
      }
    }
    EditorCell current=DeleteLine_Action.this.currentCell;
    List<SNode> nodesToDelete=new ArrayList<SNode>();
    while (true) {
      if (current.getParent() == null) {
        break;
      }
      CellLayout layout=current.getParent().getCellLayout();
      if (layout instanceof CellLayout_Indent) {
        EditorCell root=current.getRootParent();
        EditorCell[] siblings=current.getParent().getCells();
        for (int i=Arrays.asList(siblings).indexOf(current); i <= siblings.length - 1; i++) {
          EditorCell sibling=siblings[i];
          ListSequence.fromList(nodesToDelete).addElement(sibling.getSNode());
          if (CellLayout_Indent.isNewLineAfter(root,sibling)) {
            break;
          }
        }
        break;
      }
 else       if (layout instanceof CellLayout_Vertical) {
        if (current.isBigCell()) {
          ListSequence.fromList(nodesToDelete).addElement(current.getSNode());
          break;
        }
      }
      current=current.getParent();
    }
    for (    SNode nodeToDelete : nodesToDelete) {
      if ((nodeToDelete != null) && SNodeOperations.getParent(nodeToDelete) != null) {
        SNodeOperations.deleteNode(nodeToDelete);
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "DeleteLine",t);
  }
}
