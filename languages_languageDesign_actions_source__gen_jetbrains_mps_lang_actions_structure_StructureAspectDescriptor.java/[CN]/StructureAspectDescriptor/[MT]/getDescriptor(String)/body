{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.AddMenuPart","jetbrains.mps.lang.actions.structure.ConceptPart",false,new String[]{"jetbrains.mps.lang.actions.structure.ConceptPart","jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart","jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"add custom items","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_EditorCell","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"selectedCell","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_OperationContext","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"operationContext","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childConcept","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"childConcept","substitution node<> should be instance of this concept or one of it's subconcepts","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childSetter","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"childSetter","IChildNodeSetter instance which should be used to set new child for this parent node","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_concept","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"concept","outputConcept of substitute action","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_createdNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"createdNode","node<> returned from create child node block","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_currentTargetNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"currentTargetNode","node<> to substitute","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_link","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"link","containment LinkDeclaration for where result of this substitution will be saved or null if LinkDeclaration was not determined","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcess","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"copy","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcessOriginal","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"original","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPastePostProcess","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"pastedNode","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPasteWrap","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sourceNode","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToWrap","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"nodeToWrap","instance of wrapped concept created by another substitute action","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parameterObject","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"parameterObject","one of parameters returned from the parameters query","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parentNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"parentNode","the parent node<> of the node<> to substitute","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_pattern","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"pattern","string entered by user inside competion pop-up, used to hide those actions which matching text was not matched with the pattern","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"result","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sourceNode","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_strictly","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"strictly","true if matching text should match specified pattern completely, false if only beggining of matching text should match this pattern","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_targetNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"targetNode","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_wrapped","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"wrapped","boolean property specifying if the result of this substite action will be wrapped into another concept instance before injecting it into the model","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{"part"},new boolean[]{true},true,false,"","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{"nodeQuery","handler"},new boolean[]{false,false},false,false,"add concept","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptSubstitutePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{},false,false,"add concept","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ConceptsSubstituteMenuPart","jetbrains.mps.lang.actions.structure.SubstituteMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SubstituteMenuPart"},new String[]{},new String[]{},new String[]{"query"},new boolean[]{false},false,false,"concepts menu","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.CopyPasteHandlers","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{},new String[]{"postProcessor","preProcessor"},new boolean[]{true,true},false,false,"Copy/Paste Handlers","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.CopyPreProcessFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"paste pre process function","","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.CopyPreProcessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{"preProcessFunction"},new boolean[]{false},false,false,"paste pre processor","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ExecuteSmartActionFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.GenerateCodeAction","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"description"},new String[]{},new String[]{"isApplicable","getActionUI","executeSmartAction","smartActionParameter"},new boolean[]{false,false,false,true},false,false,"","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.GenericSubstituteMenuPart","jetbrains.mps.lang.actions.structure.SubstituteMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SubstituteMenuPart"},new String[]{},new String[]{},new String[]{"query"},new boolean[]{false},false,false,"generic query","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.GetActionUIFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ISideTransform_String",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ISubstitute_String",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.IncludeRightTransformForNodePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"nodeBlock"},new boolean[]{false},false,false,"include transform for","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.IsSmartActionApplicableFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.MenuPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"actionType"},new boolean[]{false},true,false,"","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Concept_NewInstance","jetbrains.mps.lang.smodel.structure.Concept_NewInstance",false,new String[]{"jetbrains.mps.lang.smodel.structure.Concept_NewInstance"},new String[]{},new String[]{},new String[]{"prototype"},new boolean[]{false},false,false,"new initialized instance","create new initialized node","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_LinkList_AddNewChildOperation","jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"add new initialized","add new initialized child","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Link_SetNewChildOperation","jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"set new initialized","set new initialized child","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Model_CreateNewNodeOperation","jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation"},new String[]{},new String[]{},new String[]{"prototype"},new boolean[]{false},false,false,"new initialized node","","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Model_CreateNewRootNodeOperation","jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation"},new String[]{},new String[]{},new String[]{"prototype"},new boolean[]{false},false,false,"new initialized root node","","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Node_InsertNewNextSiblingOperation","jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"new initialized next-sibling","","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Node_InsertNewPrevSiblingOperation","jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"new initialized prev-sibling","","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NF_Node_ReplaceWithNewOperation","jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"replace with new initialized","","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeFactories","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"nodeFactory"},new boolean[]{true},false,false,"Node Factories","","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeFactory","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"description"},new String[]{"applicableConcept"},new String[]{"setupFunction"},new boolean[]{false},false,false,"node factory","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSetupFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"node setup function","","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSetupFunction_EnclosingNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"enclosingNode","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSetupFunction_NewNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"newNode","","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSetupFunction_SampleNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sampleNode","","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSubstituteActions","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{},new String[]{"actionsBuilder"},new boolean[]{true},false,false,"Node Substitute Actions","","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"description"},new String[]{"applicableConcept"},new String[]{"precondition","part","variable","commonInitializer"},new boolean[]{false,true,true,false},false,false,"","","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.NodeSubstitutePreconditionFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"precondition","return true if this substitute actions builder should be used to build substitute menu","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart","jetbrains.mps.lang.actions.structure.SideTransformMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SideTransformMenuPart"},new String[]{},new String[]{},new String[]{"type","query","matchingText","descriptionText","icon","iconNode","handler"},new boolean[]{false,false,false,false,false,false,false},false,false,"parameterized item","","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart","jetbrains.mps.lang.actions.structure.SubstituteMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SubstituteMenuPart"},new String[]{},new String[]{},new String[]{"type","query","matchingText","descriptionText","icon","iconNode","handler","selectionHandler"},new boolean[]{false,false,false,false,false,false,false,false},false,false,"parameterized item","","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.PastePostProcessFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"paste post process function","","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.PastePostProcessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{"postProcessFunction"},new boolean[]{false},false,false,"paste post processor","","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.PasteWrapper","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"sourceConcept","targetConcept"},new String[]{"wrapperFunction"},new boolean[]{false},false,false,"","","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.PasteWrappers","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{},new String[]{"wrapper"},new boolean[]{true},false,false,"Paste Wrappers","","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ActionType","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return result type for this action, used for smart completion","");
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_CanSubstitute","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return false if this action should be excluded from the substitute menu","");
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_GenericSubstituteMenuPart","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return collection of custom SubstituteActions","");
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_IconNode","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return concept<> or node<>. Icon associated with this concept<> or a concept of this node<> will be used for this menu item.","");
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Handler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Query","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Handler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return node<> to substitute currentTargetNode with","");
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Icon","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Query","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return collection of substitute menu part parameters","");
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_String","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return text string","");
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_PasteWrapper","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_RemoveBy_Condition","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return true if corresponding substitute action should be removed from the completion menu","");
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ReturnSmallPart","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return true if wrapped node should be used to setup selection in editor","");
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_STVariableInitializer","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ST_CommonInitializer","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_ST_RemoveBy_Condition","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Handler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Icon","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"icon","","");
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_NodeQuery","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_String","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.actions.structure.ISideTransform_String"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"get text","","");
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteIcon","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteString","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.actions.structure.ISubstitute_String"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return text string","");
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteVariableInitializer","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return initial value of the variable","");
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteWrapper","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","create new instance of output concept wrapping (containing) passed nodeToWrap","");
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_CommonInitializer","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","common init block","");
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_Handler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return node<> to substitute currentTargetNode with","");
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_SelectionHandler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return node to select or null if selection API was directly called from the query","");
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.RemoveByConditionPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"remove by condition","","");
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.RemoveDefaultsPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"remove defaults","","");
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.RemovePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart","jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"conceptToRemove"},new String[]{},new boolean[]{},false,false,"remove concept","","");
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"remove by condition","","");
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SNodeCreatorAndInitializer","jetbrains.mps.lang.smodel.structure.SNodeCreator",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeCreator"},new String[]{},new String[]{},new String[]{"prototype"},new boolean[]{false},false,false,"initialized node<>","create new initialized node","");
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{},new String[]{"actionsBuilder"},new boolean[]{true},false,false,"Transform Menu Actions","","");
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"description","transformTag","side"},new String[]{"applicableConcept"},new String[]{"precondition","part","variable","commonInitializer"},new boolean[]{false,true,true,false},false,false,"","","");
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformHintSubstitutePreconditionFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"precondition","","");
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformMenuPart","jetbrains.mps.lang.actions.structure.MenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.MenuPart"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformVariableDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"initializerBlock"},new boolean[]{false},false,false,"","","");
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransformVariableReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference"},new String[]{},new String[]{"rightTransformVariableDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SideTransform_SimpleString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.actions.structure.ISideTransform_String"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{},false,false,"simple string","","");
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SimpleItemSubstitutePart","jetbrains.mps.lang.actions.structure.SubstituteMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SubstituteMenuPart"},new String[]{},new String[]{},new String[]{"matchingText","descriptionText","icon","iconNode","canSubstitute","handler","selectionHandler"},new boolean[]{false,false,false,false,false,false,false},false,false,"simple","","");
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SimpleSideTransformMenuPart","jetbrains.mps.lang.actions.structure.SideTransformMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SideTransformMenuPart"},new String[]{},new String[]{},new String[]{"matchingText","descriptionText","icon","iconNode","handler"},new boolean[]{false,false,false,false,false},false,false,"simple item","","");
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SmartActionParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"","","");
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SmartActionParameterReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"smartActionParameter"},new String[]{},new boolean[]{},false,false,"","","");
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SmartEditorActions","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"surroundWith","generateCode"},new boolean[]{true,true},false,false,"Smart Editor Actions","","");
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SubstituteMenuPart","jetbrains.mps.lang.actions.structure.MenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.MenuPart"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"initializerBlock"},new boolean[]{false},false,false,"","","");
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference"},new String[]{},new String[]{"nodeBuilderVariableDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.Substitute_SimpleString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.actions.structure.ISubstitute_String","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.SurroundWithAction","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.lang.actions.structure.WrapperSubstituteMenuPart","jetbrains.mps.lang.actions.structure.SubstituteMenuPart",false,new String[]{"jetbrains.mps.lang.actions.structure.SubstituteMenuPart"},new String[]{},new String[]{"wrappedConcept"},new String[]{"wrapperBlock","returnSmallPart","selectionHandler"},new boolean[]{false,false,false},false,false,"wrapper","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
