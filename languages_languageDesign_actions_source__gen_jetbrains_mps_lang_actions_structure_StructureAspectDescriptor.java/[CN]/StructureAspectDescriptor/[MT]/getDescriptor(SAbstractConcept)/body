{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0oe.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAddMenuPart;
      }
    break;
case 1:
  if (true) {
    return myConceptConceptFunctionParameter_EditorCell;
  }
break;
case 2:
if (true) {
return myConceptConceptFunctionParameter_OperationContext;
}
break;
case 3:
if (true) {
return myConceptConceptFunctionParameter_childConcept;
}
break;
case 4:
if (true) {
return myConceptConceptFunctionParameter_childSetter;
}
break;
case 5:
if (true) {
return myConceptConceptFunctionParameter_concept;
}
break;
case 6:
if (true) {
return myConceptConceptFunctionParameter_createdNode;
}
break;
case 7:
if (true) {
return myConceptConceptFunctionParameter_currentTargetNode;
}
break;
case 8:
if (true) {
return myConceptConceptFunctionParameter_link;
}
break;
case 9:
if (true) {
return myConceptConceptFunctionParameter_nodeToCopyPreProcess;
}
break;
case 10:
if (true) {
return myConceptConceptFunctionParameter_nodeToCopyPreProcessOriginal;
}
break;
case 11:
if (true) {
return myConceptConceptFunctionParameter_nodeToPastePostProcess;
}
break;
case 12:
if (true) {
return myConceptConceptFunctionParameter_nodeToPasteWrap;
}
break;
case 13:
if (true) {
return myConceptConceptFunctionParameter_nodeToWrap;
}
break;
case 14:
if (true) {
return myConceptConceptFunctionParameter_parameterObject;
}
break;
case 15:
if (true) {
return myConceptConceptFunctionParameter_parentNode;
}
break;
case 16:
if (true) {
return myConceptConceptFunctionParameter_pattern;
}
break;
case 17:
if (true) {
return myConceptConceptFunctionParameter_result;
}
break;
case 18:
if (true) {
return myConceptConceptFunctionParameter_sourceNode;
}
break;
case 19:
if (true) {
return myConceptConceptFunctionParameter_strictly;
}
break;
case 20:
if (true) {
return myConceptConceptFunctionParameter_targetNode;
}
break;
case 21:
if (true) {
return myConceptConceptFunctionParameter_wrapped;
}
break;
case 22:
if (true) {
return myConceptConceptPart;
}
break;
case 23:
if (true) {
return myConceptConceptRightTransformPart;
}
break;
case 24:
if (true) {
return myConceptConceptSubstitutePart;
}
break;
case 25:
if (true) {
return myConceptConceptsSubstituteMenuPart;
}
break;
case 26:
if (true) {
return myConceptCopyPasteHandlers;
}
break;
case 27:
if (true) {
return myConceptCopyPreProcessFunction;
}
break;
case 28:
if (true) {
return myConceptCopyPreProcessor;
}
break;
case 29:
if (true) {
return myConceptExecuteSmartActionFunction;
}
break;
case 30:
if (true) {
return myConceptGenerateCodeAction;
}
break;
case 31:
if (true) {
return myConceptGenericSubstituteMenuPart;
}
break;
case 32:
if (true) {
return myConceptGetActionUIFunction;
}
break;
case 33:
if (true) {
return myConceptISideTransform_String;
}
break;
case 34:
if (true) {
return myConceptISubstitute_String;
}
break;
case 35:
if (true) {
return myConceptIncludeRightTransformForNodePart;
}
break;
case 36:
if (true) {
return myConceptIsSmartActionApplicableFunction;
}
break;
case 37:
if (true) {
return myConceptMenuPart;
}
break;
case 38:
if (true) {
return myConceptNF_Concept_NewInstance;
}
break;
case 39:
if (true) {
return myConceptNF_LinkList_AddNewChildOperation;
}
break;
case 40:
if (true) {
return myConceptNF_Link_SetNewChildOperation;
}
break;
case 41:
if (true) {
return myConceptNF_Model_CreateNewNodeOperation;
}
break;
case 42:
if (true) {
return myConceptNF_Model_CreateNewRootNodeOperation;
}
break;
case 43:
if (true) {
return myConceptNF_Node_InsertNewNextSiblingOperation;
}
break;
case 44:
if (true) {
return myConceptNF_Node_InsertNewPrevSiblingOperation;
}
break;
case 45:
if (true) {
return myConceptNF_Node_ReplaceWithNewOperation;
}
break;
case 46:
if (true) {
return myConceptNodeFactories;
}
break;
case 47:
if (true) {
return myConceptNodeFactory;
}
break;
case 48:
if (true) {
return myConceptNodeSetupFunction;
}
break;
case 49:
if (true) {
return myConceptNodeSetupFunction_EnclosingNode;
}
break;
case 50:
if (true) {
return myConceptNodeSetupFunction_NewNode;
}
break;
case 51:
if (true) {
return myConceptNodeSetupFunction_SampleNode;
}
break;
case 52:
if (true) {
return myConceptNodeSubstituteActions;
}
break;
case 53:
if (true) {
return myConceptNodeSubstituteActionsBuilder;
}
break;
case 54:
if (true) {
return myConceptNodeSubstituteMenuBuilderPart;
}
break;
case 55:
if (true) {
return myConceptNodeSubstitutePreconditionFunction;
}
break;
case 56:
if (true) {
return myConceptParameterizedSideTransformMenuPart;
}
break;
case 57:
if (true) {
return myConceptParameterizedSubstituteMenuPart;
}
break;
case 58:
if (true) {
return myConceptPastePostProcessFunction;
}
break;
case 59:
if (true) {
return myConceptPastePostProcessor;
}
break;
case 60:
if (true) {
return myConceptPasteWrapper;
}
break;
case 61:
if (true) {
return myConceptPasteWrappers;
}
break;
case 62:
if (true) {
return myConceptQueryFunction_ActionType;
}
break;
case 63:
if (true) {
return myConceptQueryFunction_CanSubstitute;
}
break;
case 64:
if (true) {
return myConceptQueryFunction_GenericSubstituteMenuPart;
}
break;
case 65:
if (true) {
return myConceptQueryFunction_IconNode;
}
break;
case 66:
if (true) {
return myConceptQueryFunction_ParameterizedSideTransform_Handler;
}
break;
case 67:
if (true) {
return myConceptQueryFunction_ParameterizedSideTransform_Query;
}
break;
case 68:
if (true) {
return myConceptQueryFunction_ParameterizedSubstitute_Handler;
}
break;
case 69:
if (true) {
return myConceptQueryFunction_ParameterizedSubstitute_Icon;
}
break;
case 70:
if (true) {
return myConceptQueryFunction_ParameterizedSubstitute_Query;
}
break;
case 71:
if (true) {
return myConceptQueryFunction_ParameterizedSubstitute_String;
}
break;
case 72:
if (true) {
return myConceptQueryFunction_PasteWrapper;
}
break;
case 73:
if (true) {
return myConceptQueryFunction_RemoveBy_Condition;
}
break;
case 74:
if (true) {
return myConceptQueryFunction_ReturnSmallPart;
}
break;
case 75:
if (true) {
return myConceptQueryFunction_STVariableInitializer;
}
break;
case 76:
if (true) {
return myConceptQueryFunction_ST_CommonInitializer;
}
break;
case 77:
if (true) {
return myConceptQueryFunction_ST_RemoveBy_Condition;
}
break;
case 78:
if (true) {
return myConceptQueryFunction_SideTransform_ConceptHandler;
}
break;
case 79:
if (true) {
return myConceptQueryFunction_SideTransform_Handler;
}
break;
case 80:
if (true) {
return myConceptQueryFunction_SideTransform_Icon;
}
break;
case 81:
if (true) {
return myConceptQueryFunction_SideTransform_NodeQuery;
}
break;
case 82:
if (true) {
return myConceptQueryFunction_SideTransform_String;
}
break;
case 83:
if (true) {
return myConceptQueryFunction_SubstituteIcon;
}
break;
case 84:
if (true) {
return myConceptQueryFunction_SubstituteString;
}
break;
case 85:
if (true) {
return myConceptQueryFunction_SubstituteVariableInitializer;
}
break;
case 86:
if (true) {
return myConceptQueryFunction_SubstituteWrapper;
}
break;
case 87:
if (true) {
return myConceptQueryFunction_Substitute_CommonInitializer;
}
break;
case 88:
if (true) {
return myConceptQueryFunction_Substitute_Handler;
}
break;
case 89:
if (true) {
return myConceptQueryFunction_Substitute_SelectionHandler;
}
break;
case 90:
if (true) {
return myConceptRemoveByConditionPart;
}
break;
case 91:
if (true) {
return myConceptRemoveDefaultsPart;
}
break;
case 92:
if (true) {
return myConceptRemovePart;
}
break;
case 93:
if (true) {
return myConceptRemoveSTByConditionPart;
}
break;
case 94:
if (true) {
return myConceptSNodeCreatorAndInitializer;
}
break;
case 95:
if (true) {
return myConceptSideTransformHintSubstituteActions;
}
break;
case 96:
if (true) {
return myConceptSideTransformHintSubstituteActionsBuilder;
}
break;
case 97:
if (true) {
return myConceptSideTransformHintSubstitutePreconditionFunction;
}
break;
case 98:
if (true) {
return myConceptSideTransformMenuBuilderPart;
}
break;
case 99:
if (true) {
return myConceptSideTransformMenuPart;
}
break;
case 100:
if (true) {
return myConceptSideTransformVariableDeclaration;
}
break;
case 101:
if (true) {
return myConceptSideTransformVariableReference;
}
break;
case 102:
if (true) {
return myConceptSideTransform_SimpleString;
}
break;
case 103:
if (true) {
return myConceptSimpleItemSubstitutePart;
}
break;
case 104:
if (true) {
return myConceptSimpleSideTransformMenuPart;
}
break;
case 105:
if (true) {
return myConceptSmartActionParameter;
}
break;
case 106:
if (true) {
return myConceptSmartActionParameterReference;
}
break;
case 107:
if (true) {
return myConceptSmartEditorActions;
}
break;
case 108:
if (true) {
return myConceptSubstituteMenuPart;
}
break;
case 109:
if (true) {
return myConceptSubstituteNodeBuilderVariableDeclaration;
}
break;
case 110:
if (true) {
return myConceptSubstituteNodeBuilderVariableReference;
}
break;
case 111:
if (true) {
return myConceptSubstitute_SimpleString;
}
break;
case 112:
if (true) {
return myConceptSurroundWithAction;
}
break;
case 113:
if (true) {
return myConceptWrapperSubstituteMenuPart;
}
break;
default :
}
}
return null;
}
