{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAddMenuPart;
case 1:
  return myConceptConceptFunctionParameter_EditorCell;
case 2:
return myConceptConceptFunctionParameter_OperationContext;
case 3:
return myConceptConceptFunctionParameter_childConcept;
case 4:
return myConceptConceptFunctionParameter_childSetter;
case 5:
return myConceptConceptFunctionParameter_concept;
case 6:
return myConceptConceptFunctionParameter_createdNode;
case 7:
return myConceptConceptFunctionParameter_currentTargetNode;
case 8:
return myConceptConceptFunctionParameter_link;
case 9:
return myConceptConceptFunctionParameter_nodeToCopyPreProcess;
case 10:
return myConceptConceptFunctionParameter_nodeToCopyPreProcessOriginal;
case 11:
return myConceptConceptFunctionParameter_nodeToPastePostProcess;
case 12:
return myConceptConceptFunctionParameter_nodeToPasteWrap;
case 13:
return myConceptConceptFunctionParameter_nodeToWrap;
case 14:
return myConceptConceptFunctionParameter_parameterObject;
case 15:
return myConceptConceptFunctionParameter_parentNode;
case 16:
return myConceptConceptFunctionParameter_pattern;
case 17:
return myConceptConceptFunctionParameter_result;
case 18:
return myConceptConceptFunctionParameter_sourceNode;
case 19:
return myConceptConceptFunctionParameter_strictly;
case 20:
return myConceptConceptFunctionParameter_targetNode;
case 21:
return myConceptConceptFunctionParameter_wrapped;
case 22:
return myConceptConceptPart;
case 23:
return myConceptConceptRightTransformPart;
case 24:
return myConceptConceptSubstitutePart;
case 25:
return myConceptConceptsSubstituteMenuPart;
case 26:
return myConceptCopyPasteHandlers;
case 27:
return myConceptCopyPreProcessFunction;
case 28:
return myConceptCopyPreProcessor;
case 29:
return myConceptExecuteSmartActionFunction;
case 30:
return myConceptGenerateCodeAction;
case 31:
return myConceptGenericSubstituteMenuPart;
case 32:
return myConceptGetActionUIFunction;
case 33:
return myConceptISideTransform_String;
case 34:
return myConceptISubstitute_String;
case 35:
return myConceptIncludeRightTransformForNodePart;
case 36:
return myConceptIsSmartActionApplicableFunction;
case 37:
return myConceptMenuPart;
case 38:
return myConceptNF_Concept_NewInstance;
case 39:
return myConceptNF_LinkList_AddNewChildOperation;
case 40:
return myConceptNF_Link_SetNewChildOperation;
case 41:
return myConceptNF_Model_CreateNewNodeOperation;
case 42:
return myConceptNF_Model_CreateNewRootNodeOperation;
case 43:
return myConceptNF_Node_InsertNewNextSiblingOperation;
case 44:
return myConceptNF_Node_InsertNewPrevSiblingOperation;
case 45:
return myConceptNF_Node_ReplaceWithNewOperation;
case 46:
return myConceptNodeFactories;
case 47:
return myConceptNodeFactory;
case 48:
return myConceptNodeSetupFunction;
case 49:
return myConceptNodeSetupFunction_EnclosingNode;
case 50:
return myConceptNodeSetupFunction_NewNode;
case 51:
return myConceptNodeSetupFunction_SampleNode;
case 52:
return myConceptNodeSubstituteActions;
case 53:
return myConceptNodeSubstituteActionsBuilder;
case 54:
return myConceptNodeSubstituteMenuBuilderPart;
case 55:
return myConceptNodeSubstitutePreconditionFunction;
case 56:
return myConceptParameterizedSideTransformMenuPart;
case 57:
return myConceptParameterizedSubstituteMenuPart;
case 58:
return myConceptPastePostProcessFunction;
case 59:
return myConceptPastePostProcessor;
case 60:
return myConceptPasteWrapper;
case 61:
return myConceptPasteWrappers;
case 62:
return myConceptQueryFunction_ActionType;
case 63:
return myConceptQueryFunction_CanSubstitute;
case 64:
return myConceptQueryFunction_GenericSubstituteMenuPart;
case 65:
return myConceptQueryFunction_IconNode;
case 66:
return myConceptQueryFunction_ParameterizedSideTransform_Handler;
case 67:
return myConceptQueryFunction_ParameterizedSideTransform_Query;
case 68:
return myConceptQueryFunction_ParameterizedSubstitute_Handler;
case 69:
return myConceptQueryFunction_ParameterizedSubstitute_Icon;
case 70:
return myConceptQueryFunction_ParameterizedSubstitute_Query;
case 71:
return myConceptQueryFunction_ParameterizedSubstitute_String;
case 72:
return myConceptQueryFunction_PasteWrapper;
case 73:
return myConceptQueryFunction_RemoveBy_Condition;
case 74:
return myConceptQueryFunction_ReturnSmallPart;
case 75:
return myConceptQueryFunction_STVariableInitializer;
case 76:
return myConceptQueryFunction_ST_CommonInitializer;
case 77:
return myConceptQueryFunction_ST_RemoveBy_Condition;
case 78:
return myConceptQueryFunction_SideTransform_ConceptHandler;
case 79:
return myConceptQueryFunction_SideTransform_Handler;
case 80:
return myConceptQueryFunction_SideTransform_Icon;
case 81:
return myConceptQueryFunction_SideTransform_NodeQuery;
case 82:
return myConceptQueryFunction_SideTransform_String;
case 83:
return myConceptQueryFunction_SubstituteIcon;
case 84:
return myConceptQueryFunction_SubstituteString;
case 85:
return myConceptQueryFunction_SubstituteVariableInitializer;
case 86:
return myConceptQueryFunction_SubstituteWrapper;
case 87:
return myConceptQueryFunction_Substitute_CommonInitializer;
case 88:
return myConceptQueryFunction_Substitute_Handler;
case 89:
return myConceptQueryFunction_Substitute_SelectionHandler;
case 90:
return myConceptRemoveByConditionPart;
case 91:
return myConceptRemoveDefaultsPart;
case 92:
return myConceptRemovePart;
case 93:
return myConceptRemoveSTByConditionPart;
case 94:
return myConceptSNodeCreatorAndInitializer;
case 95:
return myConceptSideTransformHintSubstituteActions;
case 96:
return myConceptSideTransformHintSubstituteActionsBuilder;
case 97:
return myConceptSideTransformHintSubstitutePreconditionFunction;
case 98:
return myConceptSideTransformMenuBuilderPart;
case 99:
return myConceptSideTransformMenuPart;
case 100:
return myConceptSideTransformVariableDeclaration;
case 101:
return myConceptSideTransformVariableReference;
case 102:
return myConceptSideTransform_SimpleString;
case 103:
return myConceptSimpleItemSubstitutePart;
case 104:
return myConceptSimpleSideTransformMenuPart;
case 105:
return myConceptSmartActionParameter;
case 106:
return myConceptSmartActionParameterReference;
case 107:
return myConceptSmartEditorActions;
case 108:
return myConceptSubstituteMenuPart;
case 109:
return myConceptSubstituteNodeBuilderVariableDeclaration;
case 110:
return myConceptSubstituteNodeBuilderVariableReference;
case 111:
return myConceptSubstitute_SimpleString;
case 112:
return myConceptSurroundWithAction;
case 113:
return myConceptWrapperSubstituteMenuPart;
default :
throw new IllegalStateException();
}
}
