{
  final MPSProject mpsProject=project.getComponent(MPSProject.class);
  final SRepository repository=mpsProject.getRepository();
  ModelAccess modelAccess=repository.getModelAccess();
  final SNode node=(SNode)dataContext.getData(MPSCommonDataKeys.NODE.getName());
  modelAccess.runReadInEDT(new Runnable(){
    @Override public void run(){
      if (node.getModel() == null) {
        return;
      }
      for (      RenameRefactoringContributorEP ep : RenameRefactoringContributorEP.EP_NAME.getExtensions()) {
        RenameRefactoringContributor contributor=ep.getContribitor();
        if (contributor.isAvailableFor(node)) {
          contributor.invoke(project,node);
          return;
        }
      }
      String oldName=node.getName();
      final String newName=RenameDialog.getNewName(project,oldName,"node");
      if (newName == null)       return;
      if (node.getModel() == null || SNodeOperations.isDisposed(node)) {
        return;
      }
      IRefactoring base=RefactoringUtil.getRefactoringByClassName("jetbrains.mps.lang.core.refactorings.Rename");
      IRefactoring psiAwareRefactoring=new PsiRenameRefactoringWrapper(base,node);
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContext(psiAwareRefactoring,Arrays.asList("newName"),Arrays.asList(newName),node,mpsProject));
    }
  }
);
}
