{
  IMakeService makeService=IMakeService.INSTANCE.get();
  MakeSession makeSession=new MakeSession(project,new DefaultMakeMessageHandler(project),false);
  if (makeService.openNewSession(makeSession)) {
    try {
      IScript script=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.debugger.java.evaluation.JavaDebugEvaluate"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")).toScript();
      IResult result=makeService.make(makeSession,new ModelsToResources(Sequence.<SModel>singleton(model)).resources(false),script).get();
      boolean successful=result.isSucessful();
      String source=null;
      final String desiredSourceUnitName=className + ".java";
      if (successful) {
        JavaCompiler javaCompiler=new JavaCompiler();
        for (        IResource res : Sequence.fromIterable(result.output())) {
          if (res instanceof FResource) {
            FResource fres=((FResource)res);
            Map<String,Object> contents=fres.contents();
            for (            String unitName : MapSequence.fromMap(contents).keySet()) {
              if (!(unitName.endsWith(".java"))) {
                continue;
              }
              javaCompiler.addSource(fres.packageName() + '.' + unitName.substring(0,unitName.length() - 5),String.valueOf(MapSequence.fromMap(contents).get(unitName)));
              if (unitName.equals(desiredSourceUnitName)) {
                source=String.valueOf(unitName);
              }
            }
          }
        }
        GeneratorUtil.MyCompilationResultAdapter compilationResult=new GeneratorUtil.MyCompilationResultAdapter();
        javaCompiler.addCompilationResultListener(compilationResult);
        JavaCompilerOptions options=null;
        if (project != null) {
          options=JavaCompilerOptionsComponent.getInstance().getJavaCompilerOptions(project);
        }
        final Wrappers._T<Set<String>> collectCompileClasspath=new Wrappers._T<Set<String>>(null);
        project.getModelAccess().runReadAction(new Runnable(){
          public void run(){
            collectCompileClasspath.value=JavaModuleOperations.collectCompileClasspath(model.getModule());
          }
        }
);
        javaCompiler.compile(JavaModuleOperations.createClassPathItem(collectCompileClasspath.value,GeneratorUtil.class.getName()),(options != null ? options : JavaCompilerOptionsComponent.DEFAULT_JAVA_COMPILER_OPTIONS));
        javaCompiler.removeCompilationResultListener(compilationResult);
        final String fullClassName=SNodeOperations.getModelLongName(model) + "." + className;
        if (successful && (source != null && source.length() > 0)) {
          if (developerMode) {
            System.err.println("[Generated text]\n" + source + "\n[Generated text]");
          }
          return Class.forName(fullClassName,true,javaCompiler.getClassLoader(parentloader));
        }
 else         if ((source != null && source.length() > 0) && !(successful)) {
          String text="Errors during compilation";
          if (compilationResult.hasErrors()) {
            text+=":\n" + compilationResult.getMessage();
          }
 else {
            text+=".";
          }
          throw new EvaluationException(text);
        }
      }
    }
 catch (    InterruptedException e) {
      throw new EvaluationException(e);
    }
catch (    ExecutionException e) {
      throw new EvaluationException(e);
    }
catch (    ClassNotFoundException e) {
      throw new EvaluationException(e);
    }
  }
  throw new EvaluationException("Errors during generation.");
}
