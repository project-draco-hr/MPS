{
  CollectConsumer<SNode> consumer=new CollectConsumer(new HashSet<SNode>());
  Collection<FindUsagesParticipant> participants=PersistenceFacade.getInstance().getFindUsagesParticipants();
  monitor.start("Finding usages...",participants.size() + 5);
  try {
    Set<SAbstractConcept> queryConcepts=new HashSet<SAbstractConcept>(elements);
    if (!myExact) {
      for (      SAbstractConcept concept : elements) {
        Set<String> desc=ConceptDescendantsCache.getInstance().getDescendants(concept.getQualifiedName());
        for (        String cName : desc) {
          queryConcepts.add(SConceptRepository.getInstance().getInstanceConcept(cName));
        }
      }
    }
    monitor.advance(1);
    Collection<SModel> current=IterableUtil.asCollection(scope.getModels());
    for (    FindUsagesParticipant participant : participants) {
      final Set<SModel> next=new HashSet<SModel>(current);
      participant.findInstances(current,queryConcepts,consumer,new Consumer<SModel>(){
        @Override public void consume(        SModel sModel){
          next.remove(sModel);
        }
      }
);
      current=next;
      monitor.advance(1);
    }
    ProgressMonitor subMonitor=monitor.subTask(4,SubProgressKind.DEFAULT);
    subMonitor.start("",current.size());
    for (    SModel m : current) {
      subMonitor.step(m.getModelName());
      FindUsagesUtil.collectInstances(m,queryConcepts,consumer);
      if (monitor.isCanceled())       break;
      subMonitor.advance(1);
    }
    subMonitor.done();
  }
  finally {
    monitor.done();
  }
  return (Set<SNode>)consumer.getResult();
}
