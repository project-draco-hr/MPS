{
  myResults=new SearchResults<SNode>();
  IScope queryScope=query.getScope();
  List<BaseMigrationScript> scriptInstances=MigrationScriptUtil.getScriptInstances(myScripts,myOperationContext);
  monitor.start("Searching applicable nodes",scriptInstances.size());
  try {
    for (    BaseMigrationScript scriptInstance : scriptInstances) {
      if (monitor.isCanceled()) {
        break;
      }
      List<AbstractMigrationRefactoring> refactorings=scriptInstance.getRefactorings();
      for (      AbstractMigrationRefactoring migrationRefactoring : refactorings) {
        if (monitor.isCanceled()) {
          break;
        }
        monitor.step(scriptInstance.getName() + " [" + migrationRefactoring.getAdditionalInfo()+ "]");
        String cname=migrationRefactoring.getFqNameOfConceptToSearchInstances();
        SConcept concept=SConceptRepository.getInstance().getConcept(cname);
        Set<org.jetbrains.mps.openapi.model.SNode> instances=FindUsagesManager.getInstance().findUsages(Collections.singleton(concept),SearchType.INSTANCES,queryScope,null);
        for (        org.jetbrains.mps.openapi.model.SNode instance : instances) {
          if (MigrationScriptUtil.isApplicableRefactoring(((SNode)instance),migrationRefactoring)) {
            String category=TreeTextUtil.toHtml(scriptInstance.getName()) + " </b>[" + TreeTextUtil.toHtml(migrationRefactoring.getAdditionalInfo())+ "]<b>";
            SearchResult<SNode> result=new SearchResult<SNode>(((SNode)instance),category);
            myMigrationBySearchResult.put(result,migrationRefactoring);
            myResults.getSearchResults().add(result);
          }
        }
      }
      monitor.advance(1);
    }
    fireResultsChanged();
    return myResults;
  }
  finally {
    monitor.done();
  }
}
