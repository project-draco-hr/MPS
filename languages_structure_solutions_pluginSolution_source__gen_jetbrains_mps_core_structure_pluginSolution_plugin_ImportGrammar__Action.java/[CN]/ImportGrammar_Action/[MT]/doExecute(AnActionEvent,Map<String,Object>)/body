{
  try {
    FileTypeDescriptor desc=new FileTypeDescriptor("Select Textmapper Grammar","tm");
    final VirtualFile file=FileChooser.chooseFile(desc,((Project)MapSequence.fromMap(_params).get("ideaProject")),null);
    if (file == null) {
      return;
    }
    final MessagesViewTool tool=((Project)MapSequence.fromMap(_params).get("ideaProject")).getComponent(MessagesViewTool.class);
    if (tool != null) {
      final MessagesViewProcessingStatus status=new MessagesViewProcessingStatus(tool);
      status.handle(ProcessingStatus.KIND_INFO,"importing from " + file.getName());
      final Wrappers._T<char[]> contents=new Wrappers._T<char[]>(null);
      final Wrappers._T<String> name=new Wrappers._T<String>(null);
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          try {
            contents.value=VfsUtilCore.loadText(file).toCharArray();
            name.value=file.getName();
          }
 catch (          IOException ex) {
            status.handle(ProcessingStatus.KIND_ERROR,"exception: " + ex.toString());
          }
        }
      }
);
      if (contents.value == null || name.value == null) {
        return;
      }
      TemplatesStatusAdapter templatesStatus=new TemplatesStatusAdapter(status);
      ResourceRegistry resources=new ResourceRegistry(new ClassResourceLoader(TMGenerator.class.getClassLoader(),"org/textmapper/tool/gen/templates","utf8"));
      TypesRegistry types=new TypesRegistry(resources,templatesStatus);
      TMGrammar s=SyntaxUtil.parseSyntax(new TMTree.TextSource(name.value,contents.value,1),status,types);
      if (s == null || s.hasErrors()) {
        return;
      }
      status.handle(ProcessingStatus.KIND_INFO,"deriving AST");
      AstModel model=new TMMapper(s.getGrammar(),status).deriveAST();
      status.handle(ProcessingStatus.KIND_INFO,"saving into root");
      final GrammarMerger merger=new GrammarMerger(model,s.getGrammar(),((SNode)MapSequence.fromMap(_params).get("container")));
      ((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().executeCommandInEDT(new Runnable(){
        public void run(){
          merger.apply();
        }
      }
);
    }
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "ImportGrammar",t);
    }
  }
}
