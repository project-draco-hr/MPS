{
  final SNode mdecl=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
  if (mdecl == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(mdecl,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  final SNode instanceType_typevar_1204064731338=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=IOperation_Behavior.call_getOperand_1213877410070(methodCall);
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204064763142",0,null);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getRepresentative(instanceType_typevar_1204064731338),(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204064784351",false),_info_12389875345);
  }
  if (!(typeCheckingContext.isSingleTypeComputation())) {
{
      SNode _nodeToCheck_1029348928467=methodCall;
      EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204065906120",0,null);
      typeCheckingContext.createLessThanInequality((SNode)typeCheckingContext.getRepresentative(instanceType_typevar_1204064731338),(SNode)new typeof_InstanceMethodCallOperation_InferenceRule.QuotationClass_ecn83h_a0a7a0().createNode(methodClassifier,typeCheckingContext),true,false,_info_12389875345);
    }
  }
  final List<SNode> argTypes=new ArrayList<SNode>();
  for (  SNode a : ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true))) {
    ListSequence.fromList(argTypes).addElement(typeCheckingContext.typeOf(a,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","3058438378413336012",true));
  }
{
    final SNode IT=typeCheckingContext.getRepresentative(instanceType_typevar_1204064731338);
    typeCheckingContext.whenConcrete(IT,new Runnable(){
      public void run(){
        final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
        if (!(IMethodCall_Behavior.call_isInTypeInferenceContext_4837286298388660615(methodCall))) {
          List<SNode> inferrableTypeVars=ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(mdecl,"returnType",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.getParent(it) == mdecl;
            }
          }
).toListSequence();
          List<SNode> boundTypeVars=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"parameter",true)).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode p){
              return SNodeOperations.getDescendants(p,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{});
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.getParent(it) == mdecl;
            }
          }
).toListSequence();
          for (          SNode tvd : ListSequence.fromList(inferrableTypeVars).subtract(ListSequence.fromList(boundTypeVars))) {
            MapSequence.fromMap(subs).put(tvd,new typeof_InstanceMethodCallOperation_InferenceRule.QuotationClass_ecn83h_a1a0b0c0c0n0a().createNode(typeCheckingContext));
          }
        }
        if (ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).isNotEmpty()) {
          for (          SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true))) {
            if (!(MapSequence.fromMap(subs).containsKey(tvd))) {
              final SNode T_typevar_4837286298389112296=typeCheckingContext.createNewRuntimeTypesVariable();
              MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_4837286298389112296));
            }
          }
        }
 else {
{
            Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).iterator();
            Iterator<SNode> targ_it=ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).iterator();
            SNode tvd_var;
            SNode targ_var;
            while (tvd_it.hasNext() && targ_it.hasNext()) {
              tvd_var=tvd_it.next();
              targ_var=targ_it.next();
              MapSequence.fromMap(subs).put(tvd_var,targ_var);
              if (SNodeOperations.isInstanceOf(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
                IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
              }
            }
          }
        }
        if (SNodeOperations.isInstanceOf(typeCheckingContext.getRepresentative(instanceType_typevar_1204064731338),"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(typeCheckingContext.getRepresentative(instanceType_typevar_1204064731338),"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
        }
        List<SNode> typel=ITypeApplicable_Behavior.call_getTypeApplicationParameters_8277080359323839095(mdecl,ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)).count());
        for (        SNode type : ListSequence.fromList(typel)) {
          if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
            IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
          }
        }
        SNode retType=SLinkOperations.getTarget(mdecl,"returnType",true);
        if (SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
          retType=IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
        }
{
          SNode _nodeToCheck_1029348928467=methodCall;
          EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4695112407843714989",0,null);
          typeCheckingContext.createLessThanInequality((SNode)retType,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4660288602099497685",true),false,true,_info_12389875345);
        }
{
          Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
          Iterator<SNode> argt_it=ListSequence.fromList(argTypes).iterator();
          SNode type_var;
          SNode argt_var;
          while (type_it.hasNext() && argt_it.hasNext()) {
            type_var=type_it.next();
            argt_var=argt_it.next();
            final SNode _type=type_var;
            if (SNodeOperations.isInstanceOf(_type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
{
                final SNode A=argt_var;
                typeCheckingContext.whenConcrete(A,new Runnable(){
                  public void run(){
{
                      SNode _nodeToCheck_1029348928467=methodCall;
                      EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4660288602099522921",0,null);
                      typeCheckingContext.createGreaterThanInequality((SNode)IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(_type,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs),(SNode)typeCheckingContext.getExpandedNode(A),false,true,_info_12389875345);
                    }
                  }
                }
,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","3058438378413428023",true,false);
              }
            }
 else {
              if (!(typeCheckingContext.isSingleTypeComputation())) {
{
                  SNode _nodeToCheck_1029348928467=argt_var;
                  EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4660288602099522937",0,null);
                  typeCheckingContext.createGreaterThanInequality((SNode)_type,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4660288602099522939",true),true,true,_info_12389875345);
                }
              }
            }
          }
        }
      }
    }
,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4107091686347739849",true,false);
  }
}
