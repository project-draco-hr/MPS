{
  Map<String,PropertyConstraintsDescriptor> properties=new HashMap();
  properties.put("name",new BasePropertyConstraintsDescriptor("name",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="name";
{
        String editorName=SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)(Object.class)),node,"virtual_getConceptDeclaration_7055725856388417603",new Object[]{}),"name");
        for (        SNode contextHint : ListSequence.fromList(SLinkOperations.getTargets(node,"contextHints",true))) {
          editorName+="_" + SPropertyOperations.getString(SLinkOperations.getTarget(contextHint,"hint",false),"name");
        }
        return editorName + "_Editor";
      }
    }
  }
);
  return properties;
}
