{
  IMethodCall methodCall=null;
  jetbrains.mps.baseLanguage.structure.Expression result;
  if (x.binding != null && x.binding.isStatic()) {
    StaticMethodCall smc=StaticMethodCall.newInstance(myCurrentModel);
    methodCall=smc;
    result=smc;
    SReference classifierReference=myTypesProvider.createClassifierReference(x.binding.declaringClass,StaticMethodCall.CLASS_CONCEPT,smc.getNode());
    smc.getNode().addReference(classifierReference);
  }
 else   if (x.receiver instanceof SuperReference || x.receiver instanceof QualifiedSuperReference) {
    SuperMethodCall smc=SuperMethodCall.newInstance(myCurrentModel);
    methodCall=smc;
    result=smc;
  }
 else {
    if (x.receiver instanceof ThisReference && x.receiver.isImplicitThis()) {
      LocalInstanceMethodCall limc=LocalInstanceMethodCall.newInstance(myCurrentModel);
      methodCall=limc;
      result=limc;
    }
 else {
      jetbrains.mps.baseLanguage.structure.Expression qualifier;
      InstanceMethodCallOperation imco=InstanceMethodCallOperation.newInstance(myCurrentModel);
      methodCall=imco;
      qualifier=processExpressionRefl(x.receiver);
      DotExpression dotExpression=DotExpression.newInstance(myCurrentModel);
      dotExpression.setOperand(qualifier);
      dotExpression.setOperation(imco);
      result=dotExpression;
    }
  }
  SReference methodReference;
  if (x.binding == null) {
    methodReference=myTypesProvider.createErrorReference(BaseMethodCall.BASE_METHOD_DECLARATION,new String(x.selector),methodCall.getNode());
  }
 else   if (x.binding instanceof ProblemMethodBinding) {
    ProblemMethodBinding problemMethodBinding=(ProblemMethodBinding)x.binding;
    methodReference=myTypesProvider.createErrorReference(BaseMethodCall.BASE_METHOD_DECLARATION,new String(problemMethodBinding.selector),methodCall.getNode());
  }
 else {
    methodReference=myTypesProvider.createMethodReference(x.binding,BaseMethodCall.BASE_METHOD_DECLARATION,methodCall.getNode());
  }
  if (methodReference != null) {
    methodCall.getNode().addReference(methodReference);
  }
  addMethodTypeArgs(x.typeArguments,methodCall);
  addCallArgs(x.arguments,methodCall);
  return result;
}
