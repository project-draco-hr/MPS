{
  SNode method;
  if (x.isConstructor()) {
    method=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123140l,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
  }
 else   if (x instanceof PsiAnnotationMethod && SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(parentConcept),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206331916l,"jetbrains.mps.baseLanguage.structure.Annotation"))) {
    method=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"));
    if (((PsiAnnotationMethod)x).getDefaultValue() != null) {
      SNode str=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070475926800l,"jetbrains.mps.baseLanguage.structure.StringLiteral"));
      SPropertyOperations.set(str,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1070475926800l,1070475926801l,"value"),"TODO: SUPPORT EXPRESSIONS IN PSI STUBS?");
      SLinkOperations.setTarget(SNodeOperations.cast(method,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,5790076564176875336l,"defaultValue"),str);
    }
  }
 else   if (!(isStatic(x)) || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(parentConcept),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"))) {
    method=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  }
 else {
    method=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081236700938l,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  }
  SPropertyOperations.set(method,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"),"" + (x.getName()));
  SLinkOperations.setTarget(SNodeOperations.cast(method,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1178285077437l,"jetbrains.mps.baseLanguage.structure.ClassifierMember")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility"),getVisibility(x));
  SPropertyOperations.set(method,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1181808852946l,"isFinal"),"" + (isFinal(x)));
  SPropertyOperations.set(method,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,4276006055363816570l,"isSynchronized"),"" + (x.hasModifierProperty(PsiModifier.SYNCHRONIZED)));
  ListSequence.fromList(SLinkOperations.getChildren(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1164879685961l,"throwsItem"))).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getThrowsList().getReferencedTypes())).select(new ISelector<PsiClassType,SNode>(){
    public SNode select(    PsiClassType it){
      SNode typ=resolveClass(it);
      return typ;
    }
  }
));
  final ASTConverter currConverter=addTypeParams(x,method);
  SLinkOperations.setTarget(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123133l,"returnType"),currConverter.convertType(x.getReturnType()));
  ListSequence.fromList(SLinkOperations.getChildren(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getParameterList().getParameters())).select(new ISelector<PsiParameter,SNode>(){
    public SNode select(    PsiParameter it){
      SNode param=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068498886292l,"jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SPropertyOperations.set(param,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"),"" + (it.getName()));
      SLinkOperations.setTarget(param,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4972933694980447171l,5680397130376446158l,"type"),currConverter.convertType(it.getType()));
      SPropertyOperations.set(param,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068431474542l,1176718929932l,"isFinal"),"" + (isFinal(it)));
      currConverter.addAnnotations(it,param);
      return param;
    }
  }
));
  if (1 > 0) {
    SLinkOperations.setTarget(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123135l,"body"),SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),5293379017992965193l,"jetbrains.mps.baseLanguage.structure.StubStatementList")));
  }
 else {
    SLinkOperations.setTarget(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123135l,"body"),SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123136l,"jetbrains.mps.baseLanguage.structure.StatementList")));
  }
  if (needToSetId()) {
    SNodeId.Foreign nodeId=JavaForeignIdBuilder.computeNodeId(x);
    if (nodeId != null) {
      ((jetbrains.mps.smodel.SNode)method).setId(nodeId);
    }
  }
  if (myMps2PsiMapper != null) {
    myMps2PsiMapper.consume(new Pair<SNode,PsiElement>(method,x));
  }
  return method;
}
