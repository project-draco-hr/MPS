{
  final Wrappers._T<SNode> classifier=new Wrappers._T<SNode>();
  if (x.isAnnotationType()) {
    classifier.value=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation",null);
  }
 else   if (x.isEnum()) {
    classifier.value=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass",null);
  }
 else   if (x.isInterface()) {
    classifier.value=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface",null);
  }
 else {
    classifier.value=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept",null);
  }
  final SNode ourConcept=SNodeOperations.getConceptDeclaration(classifier.value);
  SPropertyOperations.set(classifier.value,"name","" + (x.getName()));
  SLinkOperations.setTarget(classifier.value,"visibility",getVisibility(x),true);
  addAnnotations(x,classifier.value);
  if (needToSetId() && isNotEmpty_rbndtb_a0a21a61(SPropertyOperations.getString(classifier.value,"name"))) {
    ((jetbrains.mps.smodel.SNode)classifier.value).setId(JavaForeignIdBuilder.computeNodeId(x));
  }
  final ASTConverter currConverter=addTypeParams(x,classifier.value);
{
    SNode reallyClass=classifier.value;
    if (SNodeOperations.isInstanceOf(reallyClass,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (x.getSuperTypes().length > 0) {
        SLinkOperations.setTarget(reallyClass,"superclass",currConverter.resolveClass(x.getSuperTypes()[0]),true);
      }
      ListSequence.fromList(SLinkOperations.getTargets(reallyClass,"implementedInterface",true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getImplementsListTypes())).select(new ISelector<PsiClassType,SNode>(){
        public SNode select(        PsiClassType it){
          return currConverter.resolveClass(it);
        }
      }
));
      SPropertyOperations.set(reallyClass,"isFinal","" + (isFinal(x)));
      SPropertyOperations.set(reallyClass,"isStatic","" + (isStatic(x)));
    }
  }
{
    SNode iface=classifier.value;
    if (SNodeOperations.isInstanceOf(iface,"jetbrains.mps.baseLanguage.structure.Interface")) {
      ListSequence.fromList(SLinkOperations.getTargets(iface,"extendedInterface",true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getSuperTypes())).select(new ISelector<PsiClassType,SNode>(){
        public SNode select(        PsiClassType it){
          return currConverter.resolveClass(it);
        }
      }
));
    }
  }
  Sequence.fromIterable(Sequence.fromArray(x.getFields())).visitAll(new IVisitor<PsiField>(){
    public void visit(    PsiField it){
      if (it instanceof PsiEnumConstant) {
        if (!(SNodeOperations.isInstanceOf(classifier.value,"jetbrains.mps.baseLanguage.structure.EnumClass"))) {
          return;
        }
        SNode cnst=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration",null);
        SPropertyOperations.set(cnst,"name","" + (it.getName()));
        if (needToSetId() && SPropertyOperations.getString(cnst,"name") != null) {
          ((jetbrains.mps.smodel.SNode)cnst).setId(JavaForeignIdBuilder.computeNodeId(it));
        }
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value,"jetbrains.mps.baseLanguage.structure.EnumClass"),"enumConstant",true)).addElement(cnst);
      }
      SNode node=currConverter.convertField(it,ourConcept);
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
        ListSequence.fromList(SLinkOperations.getTargets(classifier.value,"staticField",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));
      }
 else       if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"field",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
      }
    }
  }
);
  Sequence.fromIterable(Sequence.fromArray(x.getMethods())).visitAll(new IVisitor<PsiMethod>(){
    public void visit(    PsiMethod it){
      SNode node=currConverter.convertMethod(it,ourConcept);
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
        ListSequence.fromList(SLinkOperations.getTargets(classifier.value,"method",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
      }
 else       if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"staticMethod",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
      }
 else       if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"constructor",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
      }
    }
  }
);
  ListSequence.fromList(SLinkOperations.getTargets(classifier.value,"staticInnerClassifiers",true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getInnerClasses())).select(new ISelector<PsiClass,SNode>(){
    public SNode select(    PsiClass it){
      return currConverter.convertClass(it);
    }
  }
));
  if (myMps2PsiMapper != null) {
    myMps2PsiMapper.consume(new Pair<SNode,PsiElement>(classifier.value,x));
  }
  return classifier.value;
}
