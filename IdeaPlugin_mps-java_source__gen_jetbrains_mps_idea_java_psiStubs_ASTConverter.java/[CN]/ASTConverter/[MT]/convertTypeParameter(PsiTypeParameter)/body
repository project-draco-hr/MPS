{
  SNode typeVar=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration")));
  SPropertyOperations.set(typeVar,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"),"" + (x.getName()));
  if (x.getExtendsListTypes().length > 0) {
    Iterable<PsiClassType> extend=Sequence.fromArray(x.getExtendsListTypes());
    if (isNotLight(Sequence.fromIterable(extend).first())) {
      SLinkOperations.setTarget(typeVar,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae375bda0L,"bound"),resolveClass(Sequence.fromIterable(extend).first()));
    }
    ListSequence.fromList(SLinkOperations.getChildren(typeVar,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae913a476L,"auxBounds"))).addSequence(Sequence.fromIterable(extend).skip(1).where(new IWhereFilter<PsiClassType>(){
      public boolean accept(      PsiClassType it){
        return isNotLight(it);
      }
    }
).select(new ISelector<PsiClassType,SNode>(){
      public SNode select(      PsiClassType it){
        return resolveClass(it);
      }
    }
));
  }
  return typeVar;
}
