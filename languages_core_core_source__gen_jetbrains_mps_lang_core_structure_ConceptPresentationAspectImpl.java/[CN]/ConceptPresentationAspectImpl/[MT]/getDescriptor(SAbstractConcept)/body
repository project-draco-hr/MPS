{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0kb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_Attribute;
      }
    break;
case 1:
  if (true) {
    return props_BaseCommentAttribute;
  }
break;
case 2:
if (true) {
return props_BaseConcept;
}
break;
case 3:
if (true) {
return props_ChildAttribute;
}
break;
case 4:
if (true) {
return props_ExportScope;
}
break;
case 5:
if (true) {
return props_ExportScopeModule;
}
break;
case 6:
if (true) {
return props_ExportScopeNamespace;
}
break;
case 7:
if (true) {
return props_ExportScopePublic;
}
break;
case 8:
if (true) {
return props_IAntisuppressErrors;
}
break;
case 9:
if (true) {
return props_ICanSuppressErrors;
}
break;
case 10:
if (true) {
return props_IContainer;
}
break;
case 11:
if (true) {
return props_IDeprecatable;
}
break;
case 12:
if (true) {
return props_IDontApplyTypesystemRules;
}
break;
case 13:
if (true) {
return props_IDontSubstituteByDefault;
}
break;
case 14:
if (true) {
return props_IMetaLevelChanger;
}
break;
case 15:
if (true) {
return props_INamedConcept;
}
break;
case 16:
if (true) {
return props_IOldCommentAnnotation;
}
break;
case 17:
if (true) {
return props_IOldCommentContainer;
}
break;
case 18:
if (true) {
return props_IResolveInfo;
}
break;
case 19:
if (true) {
return props_ISkipConstraintsChecking;
}
break;
case 20:
if (true) {
return props_IStubForAnotherConcept;
}
break;
case 21:
if (true) {
return props_ISuppressErrors;
}
break;
case 22:
if (true) {
return props_IType;
}
break;
case 23:
if (true) {
return props_IWrapper;
}
break;
case 24:
if (true) {
return props_ImplementationContainer;
}
break;
case 25:
if (true) {
return props_ImplementationPart;
}
break;
case 26:
if (true) {
return props_ImplementationWithStubPart;
}
break;
case 27:
if (true) {
return props_InterfacePart;
}
break;
case 28:
if (true) {
return props_LinkAttribute;
}
break;
case 29:
if (true) {
return props_NodeAttribute;
}
break;
case 30:
if (true) {
return props_PropertyAttribute;
}
break;
case 31:
if (true) {
return props_ScopeFacade;
}
break;
case 32:
if (true) {
return props_ScopeProvider;
}
break;
case 33:
if (true) {
return props_SideTransformInfo;
}
break;
case 34:
if (true) {
return props_SuppressErrorsAnnotation;
}
break;
default :
}
}
throw new IllegalStateException();
}
