{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_Attribute;
case 1:
  return props_BaseCommentAttribute;
case 2:
return props_BaseConcept;
case 3:
return props_ChildAttribute;
case 4:
return props_ExportScope;
case 5:
return props_ExportScopeModule;
case 6:
return props_ExportScopeNamespace;
case 7:
return props_ExportScopePublic;
case 8:
return props_IAntisuppressErrors;
case 9:
return props_ICanSuppressErrors;
case 10:
return props_IContainer;
case 11:
return props_IDeprecatable;
case 12:
return props_IDontApplyTypesystemRules;
case 13:
return props_IDontSubstituteByDefault;
case 14:
return props_IMetaLevelChanger;
case 15:
return props_INamedConcept;
case 16:
return props_IOldCommentAnnotation;
case 17:
return props_IOldCommentContainer;
case 18:
return props_IResolveInfo;
case 19:
return props_ISkipConstraintsChecking;
case 20:
return props_IStubForAnotherConcept;
case 21:
return props_ISuppressErrors;
case 22:
return props_IType;
case 23:
return props_IWrapper;
case 24:
return props_ImplementationContainer;
case 25:
return props_ImplementationPart;
case 26:
return props_ImplementationWithStubPart;
case 27:
return props_InterfacePart;
case 28:
return props_LinkAttribute;
case 29:
return props_NodeAttribute;
case 30:
return props_PropertyAttribute;
case 31:
return props_ScopeFacade;
case 32:
return props_ScopeProvider;
case 33:
return props_SideTransformInfo;
case 34:
return props_SuppressErrorsAnnotation;
}
throw new IllegalStateException("Unknown concept " + c);
}
