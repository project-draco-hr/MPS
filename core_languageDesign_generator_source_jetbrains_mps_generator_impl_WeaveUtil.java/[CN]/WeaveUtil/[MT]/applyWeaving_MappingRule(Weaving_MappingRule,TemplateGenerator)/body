{
  AbstractConceptDeclaration applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    generator.showErrorMessage(null,rule.getNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.getApplyToConceptInheritors();
  List<SNode> nodes=generator.getInputModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode applicableNode : nodes) {
    if (QueryExecutor.checkCondition(rule.getConditionFunction(),false,applicableNode,rule.getNode(),generator)) {
      SNode outputContextNode=QueryExecutor.getContextNodeForWeavingingRule(applicableNode,rule,generator);
      if (outputContextNode == null) {
        generator.showErrorMessage(applicableNode,rule.getNode(),"couldn't find context node");
        continue;
      }
 else {
        SNode contextRoot=outputContextNode.getContainingRoot();
        if (contextRoot != null) {
          SNode inputRoot=applicableNode.getContainingRoot();
          SNode originalContextRoot=generator.getInputRootForOutput(contextRoot);
          if (originalContextRoot == null) {
            generator.showWarningMessage(rule.getNode(),"bad context for weaving rule: unknown input for " + contextRoot);
          }
          originalContextRoot=originalContextRoot != null ? originalContextRoot.getContainingRoot() : null;
          if (originalContextRoot != inputRoot && inputRoot != null && originalContextRoot != null) {
            generator.showWarningMessage(rule.getNode(),"bad context for weaving rule: " + originalContextRoot.toString() + " vs "+ inputRoot.toString());
          }
        }
 else {
          generator.showWarningMessage(rule.getNode(),"bad context for weaving rule: no root for " + outputContextNode);
        }
      }
      generator.setChanged(true);
      boolean someOutputGenerated=true;
      generator.getGenerationTracer().pushInputNode(applicableNode);
      generator.getGenerationTracer().pushRule(rule.getNode());
      try {
        RuleConsequence ruleConsequence=rule.getRuleConsequence();
        if (ruleConsequence == null) {
          generator.showErrorMessage(applicableNode,null,rule.getNode(),"no rule consequence");
        }
 else {
          generator.getGenerationTracer().pushRuleConsequence(ruleConsequence.getNode());
          if (ruleConsequence instanceof TemplateDeclarationReference) {
            TemplateDeclaration template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
            weaveTemplateDeclaration(applicableNode,template,outputContextNode,rule,generator);
          }
 else           if (ruleConsequence instanceof WeaveEach_RuleConsequence) {
            WeaveEach_RuleConsequence weaveEach=(WeaveEach_RuleConsequence)ruleConsequence;
            SourceSubstituteMacro_SourceNodesQuery query=weaveEach.getSourceNodesQuery();
            if (query == null) {
              generator.showErrorMessage(applicableNode,rule.getNode(),"couldn't create list of source nodes");
              break;
            }
            TemplateDeclaration template=weaveEach.getTemplate();
            List<SNode> queryNodes=QueryExecutor.evaluateSourceNodesQuery(applicableNode,rule.getNode(),null,query,generator);
            if (queryNodes.isEmpty()) {
              someOutputGenerated=false;
            }
            for (            SNode queryNode : queryNodes) {
              weaveTemplateDeclaration(queryNode,template,outputContextNode,rule,generator);
            }
          }
 else {
            generator.showErrorMessage(applicableNode,null,ruleConsequence.getNode(),"unsapported rule consequence");
          }
        }
      }
  finally {
        if (someOutputGenerated) {
          generator.getGenerationTracer().closeInputNode(applicableNode);
        }
 else {
          generator.getGenerationTracer().popInputNode(applicableNode);
        }
      }
    }
  }
}
