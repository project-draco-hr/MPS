{
  AbstractExtractMethodRefactoringProcessor result=new AbstractExtractMethodRefactoringProcessor(thisNode,nodesToExtract){
    public SNode createMethodCall(    SNode declaration,    List<SNode> arguments){
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall",null);
        SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
        return call;
      }
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall",null);
        SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(declaration,"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
        SLinkOperations.setTarget(call,"concept",SLinkOperations.getTarget(SNodeOperations.cast(this.myNode,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"concept",false),false);
        return call;
      }
      return null;
    }
    @Override public SNode createNewMethod(){
      if (isStatic) {
        return SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration",null);
      }
 else {
        return SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration",null);
      }
    }
  }
;
  return result;
}
