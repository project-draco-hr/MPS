{
  AbstractExtractMethodRefactoringProcessor result=new AbstractExtractMethodRefactoringProcessor(thisNode,nodesToExtract){
    @Override public SNode createMethodCall(    SNode declaration,    List<SNode> arguments){
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall",null);
        SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
        return call;
      }
      return null;
    }
    @Override public SNode createNewMethod(){
      SNode method=SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration",null);
      SPropertyOperations.set(method,"isStatic","" + (isStatic));
      return method;
    }
  }
;
  return result;
}
