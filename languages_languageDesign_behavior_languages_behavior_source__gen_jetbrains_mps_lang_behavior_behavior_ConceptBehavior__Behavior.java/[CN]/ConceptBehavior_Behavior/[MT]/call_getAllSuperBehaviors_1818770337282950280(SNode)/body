{
  Set<SNode> seen=SetSequence.fromSet(new HashSet<SNode>());
  List<SNode> conceptResult=new ArrayList<SNode>();
  Queue<SNode> q=QueueSequence.fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(q).addLastElement(SLinkOperations.getTarget(thisNode,"concept",false));
  while (QueueSequence.fromQueue(q).isNotEmpty()) {
    SNode qn=QueueSequence.fromQueue(q).removeFirstElement();
    ListSequence.fromList(conceptResult).addElement(qn);
    if (SNodeOperations.isInstanceOf(qn,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      if ((SLinkOperations.getTarget(SNodeOperations.cast(qn,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"),"extends",false) != null)) {
        SNode cl=SLinkOperations.getTarget(SNodeOperations.cast(qn,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"),"extends",false);
        if (seen.add(cl)) {
          QueueSequence.fromQueue(q).addLastElement(cl);
        }
      }
      for (      SNode i : SLinkOperations.getTargets(SNodeOperations.cast(qn,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"),"implements",true)) {
        SNode cl=SLinkOperations.getTarget(i,"intfc",false);
        if (seen.add(cl)) {
          QueueSequence.fromQueue(q).addLastElement(cl);
        }
      }
    }
 else     if (SNodeOperations.isInstanceOf(qn,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
      for (      SNode i : SLinkOperations.getTargets(SNodeOperations.cast(qn,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"),"extends",true)) {
        SNode cl=SLinkOperations.getTarget(i,"intfc",false);
        if (seen.add(cl)) {
          QueueSequence.fromQueue(q).addLastElement(cl);
        }
      }
    }
  }
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode concept : conceptResult) {
    SNode behavior=SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if (behavior != null) {
      ListSequence.fromList(result).addElement(behavior);
    }
  }
  return result;
}
