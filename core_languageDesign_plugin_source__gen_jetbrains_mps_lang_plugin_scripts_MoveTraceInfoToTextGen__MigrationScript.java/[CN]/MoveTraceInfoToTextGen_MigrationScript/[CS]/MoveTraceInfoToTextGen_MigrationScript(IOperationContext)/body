{
  super("Upgrade Trace Info Generation");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Split Trace Info And Debug Info";
    }
    public String getAdditionalInfo(){
      return "Split Trace Info And Debug Info";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.plugin.structure.DebugInfoInitializer";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SLinkOperations.getTargets(node,"conceptsToDebug",true)).isNotEmpty() && ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node),"jetbrains.mps.debug.apiLang.structure.DebugInfoProvider")).isEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode debugInfoProvider=SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.DebugInfoProvider",null);
      SModelOperations.addRootNode(SNodeOperations.getModel(node),debugInfoProvider);
      for (      SNode conceptToDebug : ListSequence.fromList(SLinkOperations.getTargets(node,"conceptsToDebug",true))) {
        ListSequence.fromList(SLinkOperations.getTargets(debugInfoProvider,"breakpointableConcepts",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0a0c0e0a0a0b0a().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptToDebug,"createBreakpoint",true),"body",true),SLinkOperations.getTarget(conceptToDebug,"declaration",false),SLinkOperations.getTarget(conceptToDebug,"declaration",false)));
        SNodeOperations.deleteNode(SLinkOperations.getTarget(conceptToDebug,"createBreakpoint",true));
      }
      for (      SNode projectRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Debug_Project",false,new String[]{}))) {
        SNodeOperations.replaceWithAnother(projectRef,SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_Debug_Project",null));
      }
      for (      SNode nodeRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_DebuggableNode",false,new String[]{}))) {
        SNodeOperations.replaceWithAnother(nodeRef,SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_DebuggableNode",null));
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Trace Info Generation Is Done Via Behavior And TextGen";
    }
    public String getAdditionalInfo(){
      return "Trace Info Generation Is Done Via Behavior And TextGen";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.plugin.structure.DebugInfoInitializer";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      _FunctionTypes._return_P1_E0<? extends SNode,? super SNode> getOrCreateBehavior=new _FunctionTypes._return_P1_E0<SNode,SNode>(){
        public SNode invoke(        SNode conceptDeclaration){
          SNode behaviorNode=(SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(conceptDeclaration,LanguageAspect.BEHAVIOR);
          if (behaviorNode != null) {
            return behaviorNode;
          }
          SModel behaviorModel=(SModel)LanguageAspect.BEHAVIOR.get((Language)(SNodeOperations.getModel(conceptDeclaration).getModelDescriptor().getModule())).getSModel();
          if (behaviorModel == null) {
            behaviorModel=LanguageAspect.BEHAVIOR.createNew((Language)(SNodeOperations.getModel(conceptDeclaration).getModelDescriptor().getModule())).getSModel();
          }
          behaviorNode=SModelOperations.createNewRootNode(behaviorModel,"jetbrains.mps.lang.behavior.structure.ConceptBehavior",null);
          SLinkOperations.setTarget(behaviorNode,"concept",conceptDeclaration,false);
          SLinkOperations.setNewChild(behaviorNode,"constructor","jetbrains.mps.lang.behavior.structure.ConceptConstructorDeclaration");
          SLinkOperations.setNewChild(SLinkOperations.getTarget(behaviorNode,"constructor",true),"body","jetbrains.mps.baseLanguage.structure.StatementList");
          return behaviorNode;
        }
      }
;
      for (      SNode traceableConcept : ListSequence.fromList(SLinkOperations.getTargets(node,"conceptsToDebug",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(it,"declaration",false),"implements",true)).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode interfaceRef){
              return eq_3y9ork_a0a0a0a0a0a0a0a0a0a3a4a0a0a2a0(SLinkOperations.getTarget(interfaceRef,"intfc",false),SLinkOperations.getTarget(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0a0a0a0a0a0a3a4a0a0a2a0().createNode(),"intfc",false));
            }
          }
) == null;
        }
      }
)) {
        SNode conceptDeclaration=SLinkOperations.getTarget(traceableConcept,"declaration",false);
        ListSequence.fromList(SLinkOperations.getTargets(conceptDeclaration,"implements",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0b0d0e0a0a0c0a().createNode());
        if ((SLinkOperations.getTarget(traceableConcept,"propertyStringGetter",true) != null)) {
          SNode conceptBehavior=getOrCreateBehavior.invoke(conceptDeclaration);
          ListSequence.fromList(SLinkOperations.getTargets(conceptBehavior,"method",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0b0c0d0e0a0a0c0a().createNode(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(traceableConcept,"propertyStringGetter",true),"body",true),"statement",true)));
          for (          SNode debuggableNode : ListSequence.fromList(SNodeOperations.getDescendants(conceptBehavior,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_DebuggableNode",false,new String[]{})).concat(ListSequence.fromList(SNodeOperations.getDescendants(conceptBehavior,"jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_DebuggableNode",false,new String[]{})))) {
            SNodeOperations.replaceWithAnother(debuggableNode,new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a1a0a2a2a3a4a0a0a2a0().createNode());
          }
        }
      }
      for (      SNode scopeConcept : ListSequence.fromList(SLinkOperations.getTargets(node,"scopeConcepts",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(it,"scopeConcept",false),"implements",true)).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode interfaceRef){
              return eq_3y9ork_a0a0a0a0a0a0a0a0a0a6a4a0a0a2a0(SLinkOperations.getTarget(interfaceRef,"intfc",false),SLinkOperations.getTarget(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0a0a0a0a0a0a6a4a0a0a2a0().createNode(),"intfc",false));
            }
          }
) == null;
        }
      }
)) {
        SNode conceptDeclaration=SLinkOperations.getTarget(scopeConcept,"scopeConcept",false);
        ListSequence.fromList(SLinkOperations.getTargets(conceptDeclaration,"implements",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0b0g0e0a0a0c0a().createNode());
        SNode conceptBehavior=getOrCreateBehavior.invoke(conceptDeclaration);
        ListSequence.fromList(SLinkOperations.getTargets(conceptBehavior,"method",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0d0g0e0a0a0c0a().createNode(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(scopeConcept,"variablesGetter",true),"body",true),"statement",true)));
        for (        SNode scopeNode : ListSequence.fromList(SNodeOperations.getDescendants(conceptBehavior,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_ScopeNode",false,new String[]{}))) {
          SNodeOperations.replaceWithAnother(scopeNode,new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a1a0a4a6a4a0a0a2a0().createNode());
        }
      }
      for (      SNode unitConcept : ListSequence.fromList(SLinkOperations.getTargets(node,"unitConcepts",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(it,"unitConcept",false),"implements",true)).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode interfaceRef){
              return eq_3y9ork_a0a0a0a0a0a0a0a0a0a9a4a0a0a2a0(SLinkOperations.getTarget(interfaceRef,"intfc",false),SLinkOperations.getTarget(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0a0a0a0a0a0a9a4a0a0a2a0().createNode(),"intfc",false));
            }
          }
) == null;
        }
      }
)) {
        SNode conceptDeclaration=SLinkOperations.getTarget(unitConcept,"unitConcept",false);
        ListSequence.fromList(SLinkOperations.getTargets(conceptDeclaration,"implements",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0b0j0e0a0a0c0a().createNode());
        SNode conceptBehavior=getOrCreateBehavior.invoke(conceptDeclaration);
        ListSequence.fromList(SLinkOperations.getTargets(conceptBehavior,"method",true)).addElement(new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a0a0d0j0e0a0a0c0a().createNode(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(unitConcept,"getUnitName",true),"body",true),"statement",true)));
        for (        SNode unitNode : ListSequence.fromList(SNodeOperations.getDescendants(conceptBehavior,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_UnitNode",false,new String[]{}))) {
          SNodeOperations.replaceWithAnother(unitNode,new MoveTraceInfoToTextGen_MigrationScript.QuotationClass_3y9ork_a1a0a4a9a4a0a0a2a0().createNode());
        }
      }
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
