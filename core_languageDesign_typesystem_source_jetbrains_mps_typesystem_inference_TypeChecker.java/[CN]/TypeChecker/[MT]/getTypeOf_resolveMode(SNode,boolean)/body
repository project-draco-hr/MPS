{
  if (node == null)   return null;
  SNode containingRoot=node.getContainingRoot();
  if (containingRoot == null)   return null;
  if (myComputedTypesForCompletion != null && myComputedTypesForCompletion.containsKey(node)) {
    return myComputedTypesForCompletion.get(node);
  }
  TypeCheckingContext typeCheckingContext=NodeTypesComponentsRepository.getInstance().getTypeCheckingContext(node.getContainingRoot());
  if (nodeIsNotChecked || !myCheckedRoots.contains(containingRoot) || typeCheckingContext == null) {
    final SNode[] result=new SNode[1];
    typeCheckingContext=NodeTypesComponentsRepository.getInstance().createTypeCheckingContext(containingRoot);
    final TypeCheckingContext finalTypeCheckingContext=typeCheckingContext;
    checkWithinRoot(node,new Runnable(){
      public void run(){
        result[0]=finalTypeCheckingContext.computeTypeForResolve(node);
      }
    }
);
    SNode resultType=result[0];
    if (myComputedTypesForCompletion != null) {
      myComputedTypesForCompletion.put(node,resultType);
    }
    return resultType;
  }
  SNode resultType=getTypeDontCheck(node);
  if (myComputedTypesForCompletion != null) {
    myComputedTypesForCompletion.put(node,resultType);
  }
  return resultType;
}
