{
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      final SModel model=context.getConsoleTab().getConsoleModel();
      boolean result=ConsoleUtil.make(context.getProject(),model);
      if (!(result)) {
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              try {
                final ClassLoader loader=ClassLoaderManager.getInstance().getClassLoader(model.getModule());
                String name=ConsoleUtil.getGeneratedModelName(context);
                Method[] methods=Class.forName(name,true,loader).getMethods();
                for (                Method method : methods) {
                  if (method.getName().equals("execute")) {
                    beforeCallback.run();
                    method.invoke(null,new Object[]{context,console});
                    afterCallback.run();
                    return;
                  }
                }
              }
 catch (              ClassNotFoundException ignore) {
                if (LOG.isEnabledFor(Level.ERROR)) {
                  LOG.error("Exception on query loading",ignore);
                }
              }
catch (              IllegalAccessException ignore) {
                if (LOG.isEnabledFor(Level.ERROR)) {
                  LOG.error("Exception on query loading",ignore);
                }
              }
catch (              InvocationTargetException ignore) {
                if (LOG.isEnabledFor(Level.ERROR)) {
                  LOG.error("Exception on query loading",ignore);
                }
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
