{
  final SNode n=thisNode;
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      final Wrappers._T<SModel> model=new Wrappers._T<SModel>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          model.value=SNodeOperations.getModel(n);
        }
      }
);
      boolean result=QuickQueryUtils.make(p,model.value);
      if (!(result)) {
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              try {
                final ClassLoader loader=ClassLoaderManager.getInstance().getClassLoader(model.value.getModule());
                String name=Console_Behavior.call_getGeneratedName_5211727872447036782(SNodeOperations.cast(SNodeOperations.getParent(n),"jetbrains.mps.console.base.structure.Console"));
                Method[] methods=Class.forName(name,true,loader).getMethods();
                for (                Method method : methods) {
                  if (method.getName().equals("execute")) {
                    method.invoke(null,new Object[]{console});
                  }
                }
              }
 catch (              ClassNotFoundException ignore) {
                if (LOG.isEnabledFor(Priority.WARN)) {
                  LOG.warn("Exception on query loading",ignore);
                }
              }
catch (              IllegalAccessException ignore) {
                if (LOG.isEnabledFor(Priority.WARN)) {
                  LOG.warn("Exception on query loading",ignore);
                }
              }
catch (              InvocationTargetException ignore) {
                if (LOG.isEnabledFor(Priority.WARN)) {
                  LOG.warn("Exception on query loading",ignore);
                }
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
