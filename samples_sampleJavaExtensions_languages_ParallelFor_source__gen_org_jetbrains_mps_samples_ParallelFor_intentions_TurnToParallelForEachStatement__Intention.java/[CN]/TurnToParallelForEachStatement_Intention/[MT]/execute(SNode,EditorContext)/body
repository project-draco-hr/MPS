{
  SNode parallelFor=SNodeFactoryOperations.createNewNode("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor",null);
  final SNode variable=SNodeFactoryOperations.createNewNode("org.jetbrains.mps.samples.ParallelFor.structure.ParallelLoopVariable",null);
  SPropertyOperations.set(variable,"name",SPropertyOperations.getString(SLinkOperations.getTarget(node,"variable",true),"name"));
  SLinkOperations.setTarget(variable,"type",SNodeOperations.copyNode(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node,"variable",true)),"jetbrains.mps.baseLanguage.structure.Type")),true);
  SLinkOperations.setTarget(parallelFor,"loopVariable",variable,true);
  SLinkOperations.setTarget(parallelFor,"inputSequence",SLinkOperations.getTarget(node,"inputSequence",true),true);
  ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(node,"body",true),"jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,"variable",false) == SLinkOperations.getTarget(node,"variable",true);
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNode newReference=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
      SLinkOperations.setTarget(newReference,"variableDeclaration",variable,false);
      SNodeOperations.replaceWithAnother(it,newReference);
    }
  }
);
  SLinkOperations.setTarget(parallelFor,"body",SLinkOperations.getTarget(node,"body",true),true);
  SNodeOperations.replaceWithAnother(node,parallelFor);
  editorContext.selectWRTFocusPolicy(variable);
}
