{
  if (myWarnings.containsKey(editor)) {
    for (    WarningPanel panel : myWarnings.get(editor)) {
      myFileEditorManager.removeTopComponent(editor,panel);
    }
    myWarnings.remove(editor);
  }
  IEditor nodeEditor=editor.getNodeEditor();
  if (nodeEditor == null)   return;
  EditorComponent editorComponent=nodeEditor.getCurrentEditorComponent();
  if (editorComponent != null && editorComponent.isDisposed())   return;
  SNode node=editor.getFile().getNode();
  if (node == null)   return;
  SModel smodel=node.getModel();
  if (smodel == null)   return;
  final SModelDescriptor model=smodel.getModelDescriptor();
  if (model == null)   return;
  if (model instanceof TransientSModelDescriptor) {
    addWarningPanel(editor,"Warning: the node is in a transient model. Your changes won't be saved.");
  }
  IModule module=model.getModule();
  if (module != null && module.isPackaged()) {
    addWarningPanel(editor,"Warning: the node is in a packaged model. Your changes won't be saved");
  }
  final Set<Language> outdatedLanguages=new HashSet<Language>();
  for (  Language l : SModelOperations.getLanguages(model.getSModel(),GlobalScope.getInstance())) {
    if (l.getEditorModelDescriptor() != null && ModelGenerationStatusManager.getInstance().generationRequiredFast(l.getEditorModelDescriptor(),ProjectOperationContext.get(project),false)) {
      outdatedLanguages.add(l);
    }
  }
  if (!outdatedLanguages.isEmpty()) {
    addWarningPanel(editor,"Warning: one or more of the used languages require generation","Generate",new Runnable(){
      public void run(){
        final List<SModelDescriptor> models=new ArrayList<SModelDescriptor>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            Language l : outdatedLanguages) {
              ModuleTestConfiguration languageConfig=new ModuleTestConfiguration();
              languageConfig.setModuleRef(l.getModuleReference());
              languageConfig.setName("tmp");
              try {
                models.addAll(languageConfig.getGenParams(myProject,false).getModelDescriptors());
              }
 catch (              IllegalGeneratorConfigurationException e) {
                LOG.error(e);
              }
            }
          }
        }
);
        GeneratorFacade.getInstance().generateModels(editor.getNodeEditor().getOperationContext(),models,GeneratorFacade.getInstance().getDefaultGenerationHandler(),true,false);
      }
    }
);
  }
}
