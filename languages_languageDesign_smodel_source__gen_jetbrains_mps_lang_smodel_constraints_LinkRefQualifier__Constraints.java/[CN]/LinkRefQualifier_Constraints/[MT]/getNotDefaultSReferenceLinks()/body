{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1204851882688l,1204851882689l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1204851882688l,1204851882689l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode qualifierContainer=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer");
          return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>)((Class)Object.class),qualifierContainer,"virtual_getLinkAccessScope_2906110183022538642",new Object[]{});
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_cgym5w_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
