{
  monitor.start(getDescription(),2);
  try {
    for (    SNode nodeUsage : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",node,scope,monitor.subTask(1)))) {
      ListSequence.fromList(_results).addElement(nodeUsage);
    }
    for (    SNode subclassResult : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder",SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),scope,monitor.subTask(1)))) {
      for (      SNode constructorNode : Sequence.fromIterable(ClassConcept_Behavior.call_constructors_5292274854859503373(SNodeOperations.cast(subclassResult,"jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
        for (        SNode invocation : ListSequence.fromList(SNodeOperations.getDescendants(constructorNode,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
          }
        }
)) {
          boolean thisConstructor=true;
          SNode invocationNode=SNodeOperations.cast(invocation,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
          if ((int)ListSequence.fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).count()) {
            for (int i=0; i < ListSequence.fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).count(); i++) {
              SNode actualArgument=ListSequence.fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).getElement(i);
              SNode formalArgument=ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).getElement(i);
              if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
                thisConstructor=false;
              }
            }
            if (thisConstructor) {
              ListSequence.fromList(_results).addElement(invocationNode);
            }
          }
        }
      }
    }
    SNode enumNode=SNodeOperations.cast(SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.EnumClass",false,false),"jetbrains.mps.baseLanguage.structure.EnumClass");
    if (enumNode != null) {
      for (      SNode enumConstant : ListSequence.fromList(SLinkOperations.getTargets(enumNode,"enumConstant",true))) {
        boolean thisConstructor=true;
        if ((int)ListSequence.fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).count()) {
          for (int i=0; i < ListSequence.fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).count(); i++) {
            SNode actualArgument=ListSequence.fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).getElement(i);
            SNode formalArgument=ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).getElement(i);
            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
              thisConstructor=false;
            }
          }
          if (thisConstructor) {
            ListSequence.fromList(_results).addElement(enumConstant);
          }
        }
      }
    }
  }
  finally {
    monitor.done();
  }
}
