{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("3ecd7c84-cde3-45de-886c-135ecc69b742"),"jetbrains.mps.lang.refactoring")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractMoveExpression;
case 1:
  return props_AbstractMoveNodeExpression;
case 2:
return props_AbstractMoveNodesExpression;
case 3:
return props_AffectedNodesClause;
case 4:
return props_ConceptFunctionParameter_Model;
case 5:
return props_ConceptFunctionParameter_Module;
case 6:
return props_ConceptFunctionParameter_SModel;
case 7:
return props_ConceptFunctionParameter_SNode;
case 8:
return props_ContextMemberOperation;
case 9:
return props_ContextType;
case 10:
return props_CreateRefactoringContext;
case 11:
return props_DoRefactorClause;
case 12:
return props_DoWhenDoneClause;
case 13:
return props_ExecuteRefactoringStatement;
case 14:
return props_GetModelsToUpdateClause;
case 15:
return props_InitClause;
case 16:
return props_IsApplicableToModelClause;
case 17:
return props_IsApplicableToModuleClause;
case 18:
return props_IsApplicableToNodeClause;
case 19:
return props_IsRefactoringApplicable;
case 20:
return props_MainProjectOperation;
case 21:
return props_ModelDescriptorOperation;
case 22:
return props_ModelTarget;
case 23:
return props_ModelsToGenerateByDefault;
case 24:
return props_ModelsToGenerateClause;
case 25:
return props_ModuleOperation;
case 26:
return props_ModuleTarget;
case 27:
return props_MoveNodeToModelExpression;
case 28:
return props_MoveNodeToNodeExpression;
case 29:
return props_MoveNodesToModelExpression;
case 30:
return props_MoveNodesToNodeExpression;
case 31:
return props_NodeOperation;
case 32:
return props_NodeTarget;
case 33:
return props_NodesOperation;
case 34:
return props_OperationContextOperation;
case 35:
return props_ProjectOperation;
case 36:
return props_Refactoring;
case 37:
return props_RefactoringAction;
case 38:
return props_RefactoringArgument;
case 39:
return props_RefactoringArgumentReference;
case 40:
return props_RefactoringContext_ConceptFunctionParameter;
case 41:
return props_RefactoringField;
case 42:
return props_RefactoringFieldReference;
case 43:
return props_RefactoringParameter;
case 44:
return props_RefactoringParameterReference;
case 45:
return props_RefactoringTarget;
case 46:
return props_RepositoryOperation;
case 47:
return props_ScopeOperation;
case 48:
return props_UpdateModelProcedure;
}
throw new IllegalStateException();
}
