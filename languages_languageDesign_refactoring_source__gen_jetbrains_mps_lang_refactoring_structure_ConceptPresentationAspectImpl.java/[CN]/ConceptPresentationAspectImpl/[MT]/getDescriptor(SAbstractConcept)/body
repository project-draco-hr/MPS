{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case LanguageConceptSwitch.AbstractMoveExpression:
    return props_AbstractMoveExpression;
case LanguageConceptSwitch.AbstractMoveNodeExpression:
  return props_AbstractMoveNodeExpression;
case LanguageConceptSwitch.AbstractMoveNodesExpression:
return props_AbstractMoveNodesExpression;
case LanguageConceptSwitch.AffectedNodesClause:
return props_AffectedNodesClause;
case LanguageConceptSwitch.ConceptFunctionParameter_Model:
return props_ConceptFunctionParameter_Model;
case LanguageConceptSwitch.ConceptFunctionParameter_Module:
return props_ConceptFunctionParameter_Module;
case LanguageConceptSwitch.ConceptFunctionParameter_SModel:
return props_ConceptFunctionParameter_SModel;
case LanguageConceptSwitch.ConceptFunctionParameter_SNode:
return props_ConceptFunctionParameter_SNode;
case LanguageConceptSwitch.ContextMemberOperation:
return props_ContextMemberOperation;
case LanguageConceptSwitch.ContextType:
return props_ContextType;
case LanguageConceptSwitch.CreateRefactoringContext:
return props_CreateRefactoringContext;
case LanguageConceptSwitch.DoRefactorClause:
return props_DoRefactorClause;
case LanguageConceptSwitch.DoWhenDoneClause:
return props_DoWhenDoneClause;
case LanguageConceptSwitch.ExecuteRefactoringStatement:
return props_ExecuteRefactoringStatement;
case LanguageConceptSwitch.GetModelsToUpdateClause:
return props_GetModelsToUpdateClause;
case LanguageConceptSwitch.InitClause:
return props_InitClause;
case LanguageConceptSwitch.IsApplicableToModelClause:
return props_IsApplicableToModelClause;
case LanguageConceptSwitch.IsApplicableToModuleClause:
return props_IsApplicableToModuleClause;
case LanguageConceptSwitch.IsApplicableToNodeClause:
return props_IsApplicableToNodeClause;
case LanguageConceptSwitch.IsRefactoringApplicable:
return props_IsRefactoringApplicable;
case LanguageConceptSwitch.MainProjectOperation:
return props_MainProjectOperation;
case LanguageConceptSwitch.ModelDescriptorOperation:
return props_ModelDescriptorOperation;
case LanguageConceptSwitch.ModelTarget:
return props_ModelTarget;
case LanguageConceptSwitch.ModelsToGenerateByDefault:
return props_ModelsToGenerateByDefault;
case LanguageConceptSwitch.ModelsToGenerateClause:
return props_ModelsToGenerateClause;
case LanguageConceptSwitch.ModuleOperation:
return props_ModuleOperation;
case LanguageConceptSwitch.ModuleTarget:
return props_ModuleTarget;
case LanguageConceptSwitch.MoveNodeToModelExpression:
return props_MoveNodeToModelExpression;
case LanguageConceptSwitch.MoveNodeToNodeExpression:
return props_MoveNodeToNodeExpression;
case LanguageConceptSwitch.MoveNodesToModelExpression:
return props_MoveNodesToModelExpression;
case LanguageConceptSwitch.MoveNodesToNodeExpression:
return props_MoveNodesToNodeExpression;
case LanguageConceptSwitch.NodeOperation:
return props_NodeOperation;
case LanguageConceptSwitch.NodeTarget:
return props_NodeTarget;
case LanguageConceptSwitch.NodesOperation:
return props_NodesOperation;
case LanguageConceptSwitch.OperationContextOperation:
return props_OperationContextOperation;
case LanguageConceptSwitch.ProjectOperation:
return props_ProjectOperation;
case LanguageConceptSwitch.Refactoring:
return props_Refactoring;
case LanguageConceptSwitch.RefactoringAction:
return props_RefactoringAction;
case LanguageConceptSwitch.RefactoringArgument:
return props_RefactoringArgument;
case LanguageConceptSwitch.RefactoringArgumentReference:
return props_RefactoringArgumentReference;
case LanguageConceptSwitch.RefactoringContext_ConceptFunctionParameter:
return props_RefactoringContext_ConceptFunctionParameter;
case LanguageConceptSwitch.RefactoringField:
return props_RefactoringField;
case LanguageConceptSwitch.RefactoringFieldReference:
return props_RefactoringFieldReference;
case LanguageConceptSwitch.RefactoringParameter:
return props_RefactoringParameter;
case LanguageConceptSwitch.RefactoringParameterReference:
return props_RefactoringParameterReference;
case LanguageConceptSwitch.RefactoringTarget:
return props_RefactoringTarget;
case LanguageConceptSwitch.RepositoryOperation:
return props_RepositoryOperation;
case LanguageConceptSwitch.ScopeOperation:
return props_ScopeOperation;
case LanguageConceptSwitch.UpdateModelProcedure:
return props_UpdateModelProcedure;
}
return null;
}
