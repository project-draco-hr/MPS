{
  Map<String,SNode> old=myGenerator.setPreviousInputNodesByMappingName(myInputNodesByMappingName);
  try {
    SNode child=QueryExecutor.executeMapSrcNodeMacro(myInputNode,myMapSrcMacro,myChildToReplace.getParent(),myGenerator);
    if (child != null) {
      Language childLang=child.getNodeLanguage();
      if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(childLang)) {
        if (!childLang.getGenerators().isEmpty()) {
          LOG.error("language of output node is '" + childLang.getNamespace() + "' - this language did not show up when computing generation steps!",child);
          LOG.error(" -- was input: " + myInputNode.getDebugText(),myInputNode);
          LOG.error(" -- was template: " + myMapSrcMacro.getDebugText(),myMapSrcMacro);
          LOG.error(" -- workaround: add the language '" + childLang.getNamespace() + "' to list of 'Languages Engaged On Generation' in model '"+ myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName()+ "'");
        }
      }
      if (child.isRegistered()) {
        child=CopyUtil.copy(child);
      }
      validateReferences(child);
      SNode parent=myChildToReplace.getParent();
      String childRole=parent.getRoleOf(myChildToReplace);
      if (!GeneratorUtil.checkChild(parent,childRole,child)) {
        LOG.warning(" -- was input: " + myInputNode.getDebugText(),myInputNode);
        LOG.warning(" -- was template: " + myMapSrcMacro.getDebugText(),myMapSrcMacro);
      }
      parent.replaceChild(myChildToReplace,child);
      myGenerator.getGeneratorSessionContext().getGenerationTracer().replaceOutputNode(myChildToReplace,child);
      addExecuteMapSrcNodeMacroPostProcChange((NodeMacro)myMapSrcMacro.getAdapter(),child,myInputNode,myInputNodesByMappingName,myGenerator);
    }
  }
 catch (  Throwable t) {
    myGenerator.showErrorMessage(myInputNode,myMapSrcMacro,"mapping failed: '" + t.getMessage() + "'");
    LOG.error(t,myMapSrcMacro);
  }
 finally {
    myGenerator.setPreviousInputNodesByMappingName(old);
  }
}
