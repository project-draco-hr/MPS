{
  try {
    SNode child=myGenerator.getExecutor().executeMapSrcNodeMacro(myContext.getInput(),myMapSrcMacro,myChildToReplace.getParent(),myContext);
    if (child != null) {
      Language childLang=child.getNodeLanguage();
      if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(childLang)) {
        if (!childLang.getGenerators().isEmpty()) {
          myLogger.error(child,"language of output node is '" + childLang.getNamespace() + "' - this language did not show up when computing generation steps!");
          myLogger.describeError(myContext.getInput(),"was input: " + myContext.getInput().getDebugText());
          myLogger.describeError(myMapSrcMacro,"was template: " + myMapSrcMacro.getDebugText());
          myLogger.describeError(null,"workaround: add the language '" + childLang.getNamespace() + "' to list of 'Languages Engaged On Generation' in model '"+ myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName()+ "'");
        }
      }
      if (child.isRegistered()) {
        child=CopyUtil.copy(child);
      }
      validateReferences(child);
      SNode parent=myChildToReplace.getParent();
      if (parent == null) {
        if (myChildToReplace.isRoot()) {
          myChildToReplace.getModel().addRoot(child);
          myChildToReplace.getModel().removeRoot(myChildToReplace);
        }
      }
 else {
        String childRole=parent.getRoleOf(myChildToReplace);
        if (!GeneratorUtil.checkChild(parent,childRole,child)) {
          myLogger.describeWarning(myContext.getInput(),"was input: " + myContext.getInput().getDebugText());
          myLogger.describeWarning(myMapSrcMacro,"was template: " + myMapSrcMacro.getDebugText());
        }
        parent.replaceChild(myChildToReplace,child);
      }
      myGenerator.getGeneratorSessionContext().getGenerationTracer().replaceOutputNode(myChildToReplace,child);
      addExecuteMapSrcNodeMacroPostProcChange((NodeMacro)myMapSrcMacro.getAdapter(),child,myContext);
    }
  }
 catch (  Throwable t) {
    myGenerator.showErrorMessage(myContext.getInput(),myMapSrcMacro,"mapping failed: '" + t.getMessage() + "'");
    myLogger.handleException(t);
  }
}
