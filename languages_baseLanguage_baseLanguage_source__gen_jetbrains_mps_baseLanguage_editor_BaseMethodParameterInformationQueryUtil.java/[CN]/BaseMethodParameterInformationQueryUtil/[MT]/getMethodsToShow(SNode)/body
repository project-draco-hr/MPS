{
  List<SNode> methodsToShow=new ArrayList<SNode>();
  SNode method=SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"));
  SNode targetContainer=SNodeOperations.cast(SNodeOperations.getParent(method),MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l,-6610165693999523818l),1194952169813l,"jetbrains.mps.baseLanguage.structure.IMemberContainer"));
  Iterable<SNode> members=BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>)((Class)Object.class),methodCall,"virtual_getAvailableMethodDeclarations_5776618742611315379",new Object[]{SPropertyOperations.getString(method,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))});
  if (Sequence.fromIterable(members).isEmpty()) {
    members=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),targetContainer,"virtual_getMembers_1213877531970",new Object[]{});
  }
  for (  SNode member : Sequence.fromIterable(members)) {
    if (SNodeOperations.isInstanceOf(member,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) && eq_bha4h6_a0a0a6a1(SPropertyOperations.getString(SNodeOperations.cast(member,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),SPropertyOperations.getString(method,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")))) {
      ListSequence.fromList(methodsToShow).addElement(SNodeOperations.cast(member,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")));
    }
  }
  return methodsToShow;
}
