{
  zClosureContext _zClosureContext=new zClosureContext();
  _zClosureContext.f=new File(Arrays.asList(args).get(0));
  for (  File dir : TreeTraversalFactory.Filter(TreeTraversalFactory.Filter(TreeTraversalFactory.Traverse(new File_TreePath().startTraversal(_zClosureContext.f),TreeTraversalFactory.Axis("DESCENDANTS")),new File_TreePath.DIR_NodeKindTrigger(null,null)),new WhereFilter(null,_zClosureContext))) {
    System.out.println(dir);
  }
  for (  File d : TreeTraversalFactory.Filter(new File_TreePath().startTraversal(_zClosureContext.f),new File_TreePath.DIR_NodeKindTrigger(null,null))) {
    System.out.println("Is a directory");
  }
  List<File> listOfFiles=new ArrayList();
  listOfFiles.add(_zClosureContext.f);
  System.out.println("All subdirectories");
  for (  File d : TreeTraversalFactory.Traverse(new File_TreePath().startTraversal(listOfFiles),TreeTraversalFactory.Axis(">"))) {
    System.out.println(d);
  }
  for (  File d : TreeTraversalFactory.Filter(new File_TreePath().startTraversal(listOfFiles),new File_TreePath.DIR_NodeKindTrigger(null,null))) {
    System.out.println("Is a directory");
  }
  Iterable<File> sequenceOfFiles=new SequenceWithSupplier<File>(new zValueSupplier(null,_zClosureContext));
  for (  File d : TreeTraversalFactory.Filter(new File_TreePath().startTraversal(sequenceOfFiles),new File_TreePath.DIR_NodeKindTrigger(null,null))) {
    System.out.println("Is a directory too");
  }
  ITreeTraversal<File> foo=TreeTraversalFactory.Filter(new File_TreePath().startTraversal(_zClosureContext.f),new File_TreePath.DIR_NodeKindTrigger(null,null));
}
