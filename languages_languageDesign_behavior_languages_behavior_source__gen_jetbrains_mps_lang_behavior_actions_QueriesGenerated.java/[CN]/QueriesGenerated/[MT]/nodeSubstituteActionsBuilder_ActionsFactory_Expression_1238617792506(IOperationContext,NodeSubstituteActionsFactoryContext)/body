{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode behavior=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false);
          return AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(SLinkOperations.getTarget(behavior,"concept",false),_context.getParentNode());
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode expr=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SNodeFactoryOperations.setNewChild(expr,"operand","jetbrains.mps.lang.behavior.structure.ThisNodeExpression");
              SNode call=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall",null);
              SLinkOperations.setTarget(call,"baseMethodDeclaration",(item),false);
              SLinkOperations.setTarget(expr,"operation",call,true);
              return expr;
            }
          }
);
        }
      }
    }
  }
  return result;
}
