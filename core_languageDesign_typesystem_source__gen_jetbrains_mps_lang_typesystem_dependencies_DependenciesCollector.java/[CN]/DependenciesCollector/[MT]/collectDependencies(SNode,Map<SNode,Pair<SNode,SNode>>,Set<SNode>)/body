{
  Set<SNode> roots=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode applicableNodeReference : SNodeOperations.getDescendants(inferenceRule,"jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference",false,new String[]{})) {
    if (SLinkOperations.getTarget(applicableNodeReference,"applicableNode",false) == SLinkOperations.getTarget(inferenceRule,"applicableNode",true)) {
      SetSequence.fromSet(roots).addElement(applicableNodeReference);
    }
  }
  int prevSize=SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).count();
  int leavesSize=SetSequence.fromSet(leaves).count();
  for (  SNode root : roots) {
    MapSequence.fromMap(dependencies).put(root,null);
  }
  while (SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).count() > prevSize || SetSequence.fromSet(leaves).count() > leavesSize) {
    prevSize=SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).count();
    leavesSize=SetSequence.fromSet(leaves).count();
    for (    SNode node : SetSequence.fromSetWithValues(new HashSet<SNode>(),MapSequence.fromMap(dependencies).keySet())) {
      SNode parent=SNodeOperations.getParent(node);
      do {
        SNode matchedNode_3860_f8rhjlpb=parent;
{
          boolean matches_3860_f8rhjlpd=false;
{
            SNode matchingNode_3860_f8rhjlpd=parent;
            if (matchingNode_3860_f8rhjlpd != null) {
              matches_3860_f8rhjlpd=SModelUtil_new.isAssignableConcept(matchingNode_3860_f8rhjlpd.getConceptFqName(),"jetbrains.mps.lang.typesystem.structure.TypeOfExpression");
            }
          }
          if (matches_3860_f8rhjlpd) {
            if (!(SetSequence.fromSet(roots).contains(node))) {
              SetSequence.fromSet(leaves).addElement(node);
            }
            break;
          }
        }
{
          boolean matches_3860_f8rhm8cu=false;
{
            SNode matchingNode_3860_f8rhm8cu=parent;
            if (matchingNode_3860_f8rhm8cu != null) {
              matches_3860_f8rhm8cu=SModelUtil_new.isAssignableConcept(matchingNode_3860_f8rhm8cu.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
            }
          }
          if (matches_3860_f8rhm8cu) {
            if (SLinkOperations.getTarget(matchedNode_3860_f8rhjlpb,"rValue",true) == node) {
              MapSequence.fromMap(dependencies).put(SLinkOperations.getTarget(matchedNode_3860_f8rhjlpb,"lValue",true),new Pair<SNode,SNode>(node,new DependenciesCollector.QuotationClass_3860_l523emnfaouv().createNode()));
            }
            break;
          }
        }
{
          boolean matches_3860_f8yj0tuh=false;
{
            SNode matchingNode_3860_f8yj0tuh=parent;
            if (matchingNode_3860_f8yj0tuh != null) {
              matches_3860_f8yj0tuh=SModelUtil_new.isAssignableConcept(matchingNode_3860_f8yj0tuh.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
            }
          }
          if (matches_3860_f8yj0tuh) {
            if (SLinkOperations.getTarget(matchedNode_3860_f8rhjlpb,"initializer",true) == node) {
              MapSequence.fromMap(dependencies).put(matchedNode_3860_f8rhjlpb,new Pair<SNode,SNode>(node,new DependenciesCollector.QuotationClass_3860_l523emnfap4b().createNode()));
            }
            break;
          }
        }
        do {
          SNode matchedNode_3860_f8ykh1c5=node;
{
            boolean matches_3860_f8ykh1c7=false;
{
              SNode matchingNode_3860_f8ykh1c7=node;
              if (matchingNode_3860_f8ykh1c7 != null) {
                matches_3860_f8ykh1c7=SModelUtil_new.isAssignableConcept(matchingNode_3860_f8ykh1c7.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
              }
            }
            if (matches_3860_f8ykh1c7) {
              for (              SNode variableReference : SNodeOperations.getDescendants(inferenceRule,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})) {
                if (SLinkOperations.getTarget(variableReference,"variableDeclaration",false) == node) {
                  MapSequence.fromMap(dependencies).put(variableReference,new Pair<SNode,SNode>(node,new DependenciesCollector.QuotationClass_3860_l523emnfapdr().createNode()));
                }
              }
              break;
            }
          }
{
            boolean matches_3860_f8yki64r=false;
{
              SNode matchingNode_3860_f8yki64r=node;
              if (matchingNode_3860_f8yki64r != null) {
                matches_3860_f8yki64r=SModelUtil_new.isAssignableConcept(matchingNode_3860_f8yki64r.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.VariableReference");
              }
            }
            if (matches_3860_f8yki64r) {
{
                SNode variableDeclaration=SLinkOperations.getTarget(matchedNode_3860_f8ykh1c5,"variableDeclaration",false);
                for (                SNode reference : SNodeOperations.getDescendants(inferenceRule,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})) {
                  if (SLinkOperations.getTarget(matchedNode_3860_f8ykh1c5,"variableDeclaration",false) == variableDeclaration) {
                    SNode nodeStatement=SNodeOperations.getAncestor(matchedNode_3860_f8ykh1c5,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
                    SNode usageStatement=SNodeOperations.getAncestor(reference,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
                    while (SNodeOperations.getParent(nodeStatement) != SNodeOperations.getParent(usageStatement)) {
                      usageStatement=SNodeOperations.getAncestor(usageStatement,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
                    }
                    List<SNode> list=CollectionUtil.filter(SNodeOperations.getParent(nodeStatement).getChildren(),new Condition(){
                      public boolean met(                      Object p0){
                        return SNodeOperations.isInstanceOf(((SNode)p0),"jetbrains.mps.baseLanguage.structure.Statement");
                      }
                    }
);
                    if (ListSequence.fromList(list).indexOf(nodeStatement) <= ListSequence.fromList(list).indexOf(usageStatement)) {
                      MapSequence.fromMap(dependencies).put(reference,new Pair<SNode,SNode>(node,new DependenciesCollector.QuotationClass_3860_l523emnfapn9().createNode()));
                    }
                  }
                }
              }
              break;
            }
          }
        }
 while (false);
      }
 while (false);
    }
  }
}
