{
  Set<File> classPath=new LinkedHashSet<File>();
  String mpsHome=getProject().getProperty("artifacts.buildMPS");
  String pluginHome=getProject().getProperty("artifacts.buildPlugin");
  String ideaHome=getProject().getProperty("artifacts.IDEA");
  String mpsCoreHome=getProject().getProperty("artifacts.buildCore");
  String mpsWorkbenchHome=getProject().getProperty("artifacts.buildWorkbench");
  if ((mpsHome != null && mpsHome.length() > 0)) {
    gatherAllClassesAndJarsUnder(new File(mpsHome,"lib"),classPath);
    myWhatToDo.addLibrary("devkits",new File(mpsHome,"languages/devkits"),false);
  }
 else   if ((pluginHome != null && pluginHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
    gatherAllClassesAndJarsUnder(new File(ideaHome,"lib"),classPath);
    gatherAllClassesAndJarsUnder(new File(pluginHome,"mps-core/lib"),classPath);
    myWhatToDo.addLibrary("devkits",new File(pluginHome,"mps-core/languages/devkits"),false);
  }
 else   if ((mpsCoreHome != null && mpsCoreHome.length() > 0) && (ideaHome != null && ideaHome.length() > 0)) {
    gatherAllClassesAndJarsUnder(new File(ideaHome,"lib"),classPath);
    gatherAllClassesAndJarsUnder(new File(mpsCoreHome,"mps-core/lib"),classPath);
    if ((mpsWorkbenchHome != null && mpsWorkbenchHome.length() > 0)) {
      gatherAllClassesAndJarsUnder(new File(mpsWorkbenchHome,"lib"),classPath);
    }
    myWhatToDo.addLibrary(new File(mpsCoreHome,"mps-core/languages/devkits").getAbsolutePath(),new File(mpsCoreHome,"mps-core/languages/devkits"),false);
  }
 else {
    throw new BuildException("Dependency on MPS build scripts is required to generate MPS modules.");
  }
  return classPath;
}
