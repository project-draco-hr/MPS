{
  setLayout(new BorderLayout());
  myContext=context;
  JPanel controlsPanel=createControlsPanel();
  final JPanel panel=new JPanel(new GridLayout(1,2));
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      myMerger=new Merger(baseModel,mine,repo);
      myMerger.doRebuild(new Runnable(){
        public void run(){
        }
      }
);
      ModelDifferenceComponent mineModelDiff=new ModelDifferenceComponent(context);
      mineModelDiff.showDifference(baseModel,mine,myMerger.getBaseMineChange());
      myMineChangesTree=mineModelDiff.getModelTree();
      panel.add(new HeaderWrapper("My Changes",mineModelDiff));
      myResultView=new MergeResultView(context,baseModel,mine,repo,myMerger){
        @Override protected void showConflict(        Conflict conflict){
          SNode node;
          node=mine.getNodeById(conflict.getC2().getAffectedNodeId());
          if (node == null) {
            node=baseModel.getNodeById(conflict.getC2().getAffectedNodeId());
          }
          TreeNode treeNode1=myMineChangesTree.findNodeWith(node);
          myMineChangesTree.selectNode(treeNode1);
          node=repo.getNodeById(conflict.getC1().getAffectedNodeId());
          if (node == null) {
            node=baseModel.getNodeById(conflict.getC1().getAffectedNodeId());
          }
          TreeNode treeNode2=myRepoChangesTree.findNodeWith(node);
          myRepoChangesTree.selectNode(treeNode2);
        }
      }
;
      panel.add(new HeaderWrapper("Merge Result",myResultView));
      ModelDifferenceComponent repoModelDiff=new ModelDifferenceComponent(context);
      repoModelDiff.showDifference(baseModel,repo,myMerger.getBaseRepoChange());
      myRepoChangesTree=repoModelDiff.getModelTree();
      panel.add(new HeaderWrapper("Repository Changes",repoModelDiff));
      updateView();
    }
  }
);
  add(panel);
  add(controlsPanel,BorderLayout.PAGE_END);
}
