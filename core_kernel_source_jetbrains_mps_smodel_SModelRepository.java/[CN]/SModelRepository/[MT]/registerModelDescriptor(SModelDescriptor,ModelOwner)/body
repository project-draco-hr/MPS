{
synchronized (myModelsLock) {
    ModelOwner prevOwner=myModelOwner.get(modelDescriptor);
    if (prevOwner != null) {
      if (prevOwner != owner) {
        LOG.error("Model \"" + modelDescriptor.getModelName() + "\" is already registered by another owner: old="+ prevOwner+ ", new="+ owner);
      }
      return;
    }
    SModelReference modelReference=modelDescriptor.getSModelReference();
    SModelDescriptor registeredModel=getModelDescriptor(modelReference);
    LOG.assertLog(registeredModel == null || registeredModel == modelDescriptor,"Another model \"" + modelReference + "\" is already registered");
    Set<SModelDescriptor> ownerModels=myModelsByOwner.get(owner);
    if (ownerModels == null) {
      ownerModels=new HashSet<SModelDescriptor>();
      myModelsByOwner.put(owner,ownerModels);
    }
    ownerModels.add(modelDescriptor);
    myModelOwner.put(modelDescriptor,owner);
    if (modelReference.getModelId() != null) {
      myIdToModelDescriptorMap.put(modelReference.getModelId(),modelDescriptor);
      if (modelDescriptor instanceof BaseSModelDescriptor) {
        ((BaseSModelDescriptor)modelDescriptor).setRegistered(true);
      }
    }
    if (modelReference.getSModelFqName() != null) {
      myFqNameToModelDescriptorMap.put(modelReference.getSModelFqName(),modelDescriptor);
    }
    modelDescriptor.addModelListener(myModelsListener);
  }
  fireModelAdded(modelDescriptor);
}
