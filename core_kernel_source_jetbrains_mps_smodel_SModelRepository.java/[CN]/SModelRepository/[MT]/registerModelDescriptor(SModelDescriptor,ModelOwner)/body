{
synchronized (myModelsLock) {
    List<ModelOwner> owners=myModelsWithOwners.get(modelDescriptor);
    if (owners != null && owners.contains(owner))     return;
    SModelReference modelReference=modelDescriptor.getSModelReference();
    SModelDescriptor registeredModel=getModelDescriptor(modelReference);
    LOG.assertLog(registeredModel == null || registeredModel == modelDescriptor,"Another model \"" + modelReference + "\" is already registered for "+ owner);
    LOG.assertLog(owners == null || !owners.contains(owner),"Another model \"" + modelReference + "\" is already registered for "+ owner);
    if (owners == null) {
      owners=new ArrayList<ModelOwner>(1);
      myModelsWithOwners.put(modelDescriptor,owners);
    }
    Set<SModelDescriptor> ownerModels=myModelsByOwner.get(owner);
    if (ownerModels == null) {
      ownerModels=new HashSet<SModelDescriptor>();
      myModelsByOwner.put(owner,ownerModels);
    }
    ownerModels.add(modelDescriptor);
    owners.add(owner);
    if (modelReference.getSModelId() != null) {
      myIdToModelDescriptorMap.put(modelReference.getSModelId(),modelDescriptor);
      if (modelDescriptor instanceof BaseSModelDescriptor) {
        ((BaseSModelDescriptor)modelDescriptor).setRegistered(true);
      }
    }
    if (modelReference.getSModelFqName() != null) {
      myFqNameToModelDescriptorMap.put(modelReference.getSModelFqName(),modelDescriptor);
    }
    modelDescriptor.addModelListener(myModelsListener);
  }
  fireModelAdded(modelDescriptor);
}
