{
  SModelUID modelUID=modelDescriptor.getModelUID();
  SModelDescriptor registeredModel=myUIDToModelDescriptorMap.get(modelUID);
  LOG.assertLog(registeredModel == null || registeredModel == modelDescriptor,"Another model \"" + modelUID + "\" is already registered!");
  Set<ModelOwner> owners=myModelToOwnerMap.get(modelDescriptor);
  LOG.assertLog(owners == null || !owners.contains(owner),"Another model \"" + modelUID + "\" is already registered!");
  myUIDToModelDescriptorMap.put(modelUID,modelDescriptor);
  myModelDescriptors.add(modelDescriptor);
  if (owners == null) {
    owners=new HashSet<ModelOwner>();
    myModelToOwnerMap.put(modelDescriptor,owners);
  }
  Set<SModelDescriptor> descriptors=myOwnerToModelMap.get(owner);
  if (descriptors == null) {
    descriptors=new LinkedHashSet<SModelDescriptor>();
    myOwnerToModelMap.put(owner,descriptors);
  }
  descriptors.add(modelDescriptor);
  myModelsWithNoOwners.remove(modelDescriptor);
  owners.add(owner);
  modelDescriptor.addWeakModelListener(this);
  modelDescriptor.addModelCommandListener(myListener);
  fireRepositoryChanged();
  fireModelAdded(modelDescriptor);
}
