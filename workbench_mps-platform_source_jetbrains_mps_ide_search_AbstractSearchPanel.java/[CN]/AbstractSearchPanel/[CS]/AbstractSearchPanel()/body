{
  super();
  setPreferredSize(new Dimension((int)getPreferredSize().getWidth(),(int)myText.getPreferredSize().getHeight() + 5));
  myDefaultBackground=myText.getBackground();
  JPanel mainPanel=new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT,5,0));
  mainPanel.add(new JLabel("Text:"));
  mainPanel.add(myText);
  myText.setHideCompletionOnClick(true);
  setSmallerFont(myText);
  DefaultActionGroup group=new DefaultActionGroup("search bar",false);
  group.add(new ShowHistoryAction());
  group.add(new PrevOccurenceAction());
  group.add(new NextOccurenceAction());
  if (showExportToFindTool()) {
    group.add(new FindAllAction());
  }
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",group,true);
  tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myToolbarComponent=tb.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  mainPanel.add(myToolbarComponent);
  mainPanel.add(myIsCaseSensitive);
  myIsCaseSensitive.setMnemonic(KeyEvent.VK_M);
  myIsCaseSensitive.setFocusable(false);
  myIsCaseSensitive.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  mainPanel.add(myIsRegex);
  myIsRegex.setMnemonic(KeyEvent.VK_R);
  myIsRegex.setFocusable(false);
  myIsRegex.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myIsWordsOnly.setEnabled(!myIsWordsOnly.isEnabled());
    }
  }
);
  mainPanel.add(myIsWordsOnly);
  myIsWordsOnly.setMnemonic(KeyEvent.VK_O);
  myIsWordsOnly.setFocusable(false);
  myIsWordsOnly.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  this.add(mainPanel,BorderLayout.WEST);
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  JLabel escapeLabel=new JLabel(Actions.Cross);
  tailPanel.add(myFindResult,BorderLayout.CENTER);
  tailPanel.add(escapeLabel,BorderLayout.EAST);
  tailContainer.add(tailPanel,BorderLayout.EAST);
  this.add(tailContainer,BorderLayout.CENTER);
  escapeLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      deactivate();
    }
  }
);
  setSmallerFontAndOpaque(myIsWordsOnly);
  setSmallerFontAndOpaque(myIsCaseSensitive);
  setSmallerFontAndOpaque(myIsRegex);
  setSmallerFontAndOpaque(myFindResult);
  myText.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      search();
    }
    public void removeUpdate(    DocumentEvent e){
      search();
    }
    public void changedUpdate(    DocumentEvent e){
      search();
    }
  }
);
  myText.setColumns(20);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goToNext();
    }
  }
,KeyStroke.getKeyStroke("DOWN"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goToPrevious();
    }
  }
,KeyStroke.getKeyStroke("UP"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  setVisible(false);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      deactivate();
    }
  }
,KeyStroke.getKeyStroke("ESCAPE"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}
