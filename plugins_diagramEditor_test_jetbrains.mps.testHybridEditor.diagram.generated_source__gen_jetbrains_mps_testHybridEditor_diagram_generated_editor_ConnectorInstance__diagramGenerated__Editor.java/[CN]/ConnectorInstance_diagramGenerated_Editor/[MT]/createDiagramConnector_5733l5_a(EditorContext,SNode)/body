{
  final ConnectorCell editorCell=new ConnectorCell(editorContext,node){
    public Mapper<SNode,PolyLineConnection> getMapper(){
      return new Mapper<SNode,PolyLineConnection>(node,new PolyLineConnection()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          ReadableProperty<SNode> inputPort=JetpadUtils.modelProperty(new Computable<SNode>(){
            public SNode compute(){
              return SLinkOperations.getTarget(SLinkOperations.getTarget(node,"target",true),"block",false);
            }
          }
);
          ReadableProperty<SNode> outputPort=JetpadUtils.modelProperty(new Computable<SNode>(){
            public SNode compute(){
              return SLinkOperations.getTarget(SLinkOperations.getTarget(node,"source",true),"block",false);
            }
          }
);
          configuration.add(Synchronizers.forProperty(inputPort,new WritableProperty<SNode>(){
            public void set(            SNode port){
              Mapper<? super SNode,?> descendantMapper=getParent().getDescendantMapper(port);
              getTarget().fromView().set((port == null ? null : (descendantMapper == null ? null : ((View)descendantMapper.getTarget()))));
            }
          }
));
          configuration.add(Synchronizers.forProperty(outputPort,new WritableProperty<SNode>(){
            public void set(            SNode port){
              Mapper<? super SNode,?> descendantMapper=getParent().getDescendantMapper(port);
              getTarget().toView().set((port == null ? null : (descendantMapper == null ? null : ((View)descendantMapper.getTarget()))));
            }
          }
));
        }
      }
;
    }
  }
;
  editorCell.setBig(true);
  editorCell.setCellId("DiagramConnector_5733l5_a");
  editorCell.setBig(true);
  return editorCell;
}
