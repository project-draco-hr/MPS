{
  SNode directAncestor=SNodeOperations.getAncestor(dotExpression,"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor",false,false);
  if (directAncestor != null) {
    if (AttributeOperations.getAttribute(dotExpression,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe")) != null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.ThisExpression")) {
      SNode type=TypeChecker.getInstance().getTypeOf(SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.ThisExpression"));
      if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        final SNode clazz=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
        if (AttributeOperations.getAttribute(clazz,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe")) != null && SPropertyOperations.getBoolean(clazz,"isFinal")) {
          return;
        }
        if (AttributeOperations.getAttribute(clazz,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass")) != null) {
{
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(SLinkOperations.getTarget(dotExpression,"operation",true),"Calling a method on a non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","3540747636396645537",null,errorTarget);
          }
          return;
        }
        if (!(ListSequence.fromList(CheckingRuleHelper.allowedClasses()).any(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SLinkOperations.getTarget(it,"classifier",false) == clazz;
          }
        }
))) {
{
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(SLinkOperations.getTarget(dotExpression,"operation",true),"Calling a method on a potentially non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","3540747636396649371",null,errorTarget);
          }
        }
      }
    }
    if ((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
      SNode variableDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false);
      SNode declarationsAncestor=SNodeOperations.getAncestor(variableDeclaration,"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor",false,false);
      if (directAncestor != declarationsAncestor) {
        if (AttributeOperations.getAttribute(variableDeclaration,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe")) != null) {
          return;
        }
        final SNode targetClassifier=check_ttr84v_a0c0c0c0c0b(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(dotExpression,"operand",true)),"jetbrains.mps.baseLanguage.structure.ClassifierType"));
        if (SNodeOperations.isInstanceOf(targetClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          SNode clazz=SNodeOperations.cast(targetClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
          if (AttributeOperations.getAttribute(clazz,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe")) != null && SPropertyOperations.getBoolean(clazz,"isFinal")) {
            return;
          }
          if (AttributeOperations.getAttribute(clazz,new IAttributeDescriptor.NodeAttribute("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass")) != null) {
{
              MessageTarget errorTarget=new NodeMessageTarget();
              IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(SLinkOperations.getTarget(dotExpression,"operation",true),"Calling a method on a non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","3540747636396547859",null,errorTarget);
            }
            return;
          }
        }
        if (targetClassifier == null || !(ListSequence.fromList(CheckingRuleHelper.allowedClasses()).any(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SLinkOperations.getTarget(it,"classifier",false) == targetClassifier;
          }
        }
))) {
{
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(SLinkOperations.getTarget(dotExpression,"operation",true),"Calling a method on a potentially non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","3540747636396547907",null,errorTarget);
          }
        }
      }
    }
  }
}
