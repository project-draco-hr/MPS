{
  Map<SLanguage,Integer> usedLangs=sourceModel.usedLanguagesWithVersions();
  ArrayList<SLanguage> keys=new ArrayList<SLanguage>(usedLangs.keySet());
  sortLanguages(keys);
  for (  SLanguage l : keys) {
    myHelper.addLanguage(IdHelper.getLanguageId(l));
    Element languageElem=new Element(ModelPersistence9.USED_LANGUAGE);
    languageElem.setAttribute(ModelPersistence9.ID,IdHelper.getLanguageId(l).serialize());
    languageElem.setAttribute(ModelPersistence9.VERSION,Integer.toString(usedLangs.get(l)));
    languageElem.setAttribute(ModelPersistence9.USE_INDEX,myHelper.getUsedLanguageIndex(IdHelper.getLanguageId(l)));
    rootElement.addContent(languageElem);
  }
  usedLangs=sourceModel.implicitlyUsedLanguagesWithVersions();
  keys=new ArrayList<SLanguage>(usedLangs.keySet());
  sortLanguages(keys);
  for (  SLanguage l : keys) {
    myHelper.addLanguage(IdHelper.getLanguageId(l));
    Element languageElem=new Element(ModelPersistence9.USED_LANGUAGE);
    languageElem.setAttribute(ModelPersistence9.ID,IdHelper.getLanguageId(l).serialize());
    languageElem.setAttribute(ModelPersistence9.VERSION,Integer.toString(usedLangs.get(l)));
    languageElem.setAttribute(ModelPersistence9.IMPLICIT,"true");
    languageElem.setAttribute(ModelPersistence9.USE_INDEX,myHelper.getUsedLanguageIndex(IdHelper.getLanguageId(l)));
    rootElement.addContent(languageElem);
  }
}
