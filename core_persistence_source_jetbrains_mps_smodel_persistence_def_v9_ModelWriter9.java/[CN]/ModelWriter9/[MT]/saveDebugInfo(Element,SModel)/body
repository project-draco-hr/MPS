{
  DebugRegistry debugRegistry=MPSModuleRepository.getInstance().getDebugRegistry();
  for (  VersionedElement<SLanguageId> ve : sourceModel.usedLanguages()) {
    SLanguageId id=ve.getElement();
    Language lang=new SLanguageAdapter(id).getSourceModule();
    String name=lang != null ? lang.getModuleName() : debugRegistry.getLanguageName(id);
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_LANG);
    langElement.setAttribute(ModelPersistence9.ID,id.serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,name);
    debugInfoElement.addContent(langElement);
  }
  for (  ImportElement ie : sourceModel.importedModels()) {
    SModelReference ref=ie.getModelReference();
    org.jetbrains.mps.openapi.model.SModel model=ref.resolve(MPSModuleRepository.getInstance());
    String name=model != null ? model.getModelName() : debugRegistry.getModelName(ref);
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_MODEL);
    langElement.setAttribute(ModelPersistence9.REF,ref.toString());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,name);
    debugInfoElement.addContent(langElement);
  }
  Map<SConceptId,String> conceptIds=new HashMap<SConceptId,String>();
  Map<SPropertyId,String> propIds=new HashMap<SPropertyId,String>();
  Map<SReferenceLinkId,String> refIds=new HashMap<SReferenceLinkId,String>();
  Map<SContainmentLinkId,String> roleIds=new HashMap<SContainmentLinkId,String>();
  for (  SNode root : sourceModel.getRootNodes()) {
    for (    SNode n : SNodeUtil.getDescendants(root)) {
      SConceptId conceptId=n.getConcept().getId();
      SNode conceptNode=new SConceptAdapter(conceptId).getConceptDeclarationNode();
      String conceptName=conceptNode != null ? conceptNode.getName() : debugRegistry.getConceptName(conceptId);
      conceptIds.put(conceptId,conceptName);
      if (n.getParent() != null) {
        SContainmentLinkId roleId=n.getRoleInParentId();
        SContainmentLinkAdapter role=new SContainmentLinkAdapter(roleId);
        SConceptId linkConceptId=roleId.getConceptId();
        SNode roleNode=role.getLinkNode();
        String roleName;
        if (roleNode != null) {
          SNode linkConcept=roleNode.getContainingRoot();
          if (linkConcept != conceptNode) {
            String linkConceptName=linkConcept.getName();
            conceptIds.put(linkConceptId,linkConceptName);
          }
          roleName=roleNode.getProperty("role");
        }
 else {
          conceptIds.put(linkConceptId,debugRegistry.getConceptName(linkConceptId));
          roleName=debugRegistry.getLinkName(roleId);
        }
        roleIds.put(roleId,roleName);
      }
      for (      SPropertyId pid : root.getPropertyIds()) {
        SPropertyAdapter propId=new SPropertyAdapter(pid);
        SConceptId propConceptId=pid.getConceptId();
        SNode propNode=propId.getPropNode();
        String propName;
        if (propNode != null) {
          SNode propConcept=propNode.getContainingRoot();
          if (propConcept != conceptNode) {
            String propConceptName=propConcept.getName();
            conceptIds.put(propConceptId,propConceptName);
          }
          propName=propNode.getName();
        }
 else {
          conceptIds.put(propConceptId,debugRegistry.getConceptName(propConceptId));
          propName=debugRegistry.getPropertyName(pid);
        }
        propIds.put(pid,propName);
      }
      for (      SReference ref : root.getReferences()) {
        SReferenceLinkId refId=ref.getRoleId();
        SReferenceLinkAdapter refRole=new SReferenceLinkAdapter(refId);
        SNode refNode=refRole.getLinkNode();
        SConceptId refConceptId=refId.getConceptId();
        String refName;
        if (refNode != null) {
          SNode refConcept=refNode.getContainingRoot();
          if (refConcept != conceptNode) {
            String propConceptName=refConcept.getName();
            conceptIds.put(refConceptId,propConceptName);
          }
          refName=refNode.getProperty("role");
        }
 else {
          conceptIds.put(refConceptId,debugRegistry.getConceptName(refConceptId));
          refName=debugRegistry.getLinkName(refId);
        }
        refIds.put(refId,refName);
      }
    }
  }
  for (  Entry<SConceptId,String> e : conceptIds.entrySet()) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_CONCEPT);
    langElement.setAttribute(ModelPersistence9.ID,e.getKey().serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,e.getValue());
    debugInfoElement.addContent(langElement);
  }
  for (  Entry<SPropertyId,String> e : propIds.entrySet()) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_PROP);
    langElement.setAttribute(ModelPersistence9.ID,e.getKey().serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,e.getValue());
    debugInfoElement.addContent(langElement);
  }
  for (  Entry<SReferenceLinkId,String> e : refIds.entrySet()) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_REF_ROLE);
    langElement.setAttribute(ModelPersistence9.ID,e.getKey().serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,e.getValue());
    debugInfoElement.addContent(langElement);
  }
  for (  Entry<SContainmentLinkId,String> e : roleIds.entrySet()) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_CHILD_ROLE);
    langElement.setAttribute(ModelPersistence9.ID,e.getKey().serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,e.getValue());
    debugInfoElement.addContent(langElement);
  }
}
