{
  DebugRegistry debugRegistry=DebugRegistry.getInstance();
  ArrayList<SLanguage> langs=new ArrayList<SLanguage>(sourceModel.usedLanguages());
  langs.addAll(sourceModel.implicitlyUsedLanguagesWithVersions().keySet());
  sortLanguages(langs);
  for (  SLanguage id : langs) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_LANG);
    langElement.setAttribute(ModelPersistence9.ID,IdHelper.getLanguageId(id).serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,id.getQualifiedName());
    debugInfoElement.addContent(langElement);
  }
  for (  ImportElement ie : sourceModel.importedModels()) {
    SModelReference ref=ie.getModelReference();
    org.jetbrains.mps.openapi.model.SModel model=ref.resolve(MPSModuleRepository.getInstance());
    String name=model != null ? model.getModelName() : debugRegistry.getModelName(ref);
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_MODEL);
    langElement.setAttribute(ModelPersistence9.REF,ref.toString());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,name);
    debugInfoElement.addContent(langElement);
  }
  Map<SConceptId,String> conceptIds=new HashMap<SConceptId,String>();
  Map<SPropertyId,String> propIds=new HashMap<SPropertyId,String>();
  Map<SReferenceLinkId,String> refIds=new HashMap<SReferenceLinkId,String>();
  Map<SContainmentLinkId,String> roleIds=new HashMap<SContainmentLinkId,String>();
  final IdInfoCollector ic=new IdInfoCollector();
  ic.fill(sourceModel.getRootNodes());
  ic.getDebugInfoById(conceptIds,propIds,refIds,roleIds);
  ArrayList<SConceptId> cids=new ArrayList<SConceptId>(conceptIds.keySet());
  sortConcepts(cids);
  for (  SConceptId id : cids) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_CONCEPT);
    langElement.setAttribute(ModelPersistence9.ID,id.serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,conceptIds.get(id));
    debugInfoElement.addContent(langElement);
  }
  ArrayList<SPropertyId> pids=new ArrayList<SPropertyId>(propIds.keySet());
  sortProps(pids);
  for (  SPropertyId id : pids) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_PROP);
    langElement.setAttribute(ModelPersistence9.ID,id.serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,propIds.get(id));
    debugInfoElement.addContent(langElement);
  }
  ArrayList<SReferenceLinkId> rids=new ArrayList<SReferenceLinkId>(refIds.keySet());
  sortRefs(rids);
  for (  SReferenceLinkId id : rids) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_REF_ROLE);
    langElement.setAttribute(ModelPersistence9.ID,id.serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,refIds.get(id));
    debugInfoElement.addContent(langElement);
  }
  ArrayList<SContainmentLinkId> lids=new ArrayList<SContainmentLinkId>(roleIds.keySet());
  sortLinks(lids);
  for (  SContainmentLinkId id : lids) {
    Element langElement=new Element(ModelPersistence9.DEBUG_INFO_CHILD_ROLE);
    langElement.setAttribute(ModelPersistence9.ID,id.serialize());
    langElement.setAttribute(ModelPersistence9.DEBUG_INFO_NAME,roleIds.get(id));
    debugInfoElement.addContent(langElement);
  }
}
