{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("member",new BaseReferenceConstraintsDescriptor("member",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ju2p9y_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode enumMemberValueRef=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression",true,false);
            return new SimpleScope(SLinkOperations.getTargets(SLinkOperations.getTarget(enumMemberValueRef,"enum",false),"member",true)){
              @Nullable public String getReferenceText(              @NotNull SNode target){
                return SPropertyOperations.getString(SNodeOperations.cast(target,"jetbrains.mps.lang.structure.structure.EnumerationMemberDeclaration"),"externalValue");
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
