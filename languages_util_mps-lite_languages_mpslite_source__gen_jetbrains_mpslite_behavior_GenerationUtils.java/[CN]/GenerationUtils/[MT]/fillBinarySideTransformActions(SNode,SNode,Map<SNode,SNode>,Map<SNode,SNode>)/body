{
  SNode expressionConcept=(SNode)MapSequence.<SNode,SNode>fromMap(conceptsToTargets).get(SLinkOperations.getTarget(SNodeOperations.getAncestor(binaryOperationConcept,"jetbrains.mpslite.structure.ConceptContainer",false,false),"expressionConcept",true));
  if ((expressionConcept != null)) {
    SNode rtBuilder=new GenerationUtils.QuotationClass_vxpwrw_a0a0a1a1().createNode(SNodeOperations.cast(MapSequence.<SNode,SNode>fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept,"leftTarget",true)),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),MapSequence.<SNode,SNode>fromMap(conceptsToTargets).get(binaryOperationConcept),expressionConcept);
    SNode ltBuilder=new GenerationUtils.QuotationClass_vxpwrw_a0a1a1a1().createNode(SNodeOperations.cast(MapSequence.<SNode,SNode>fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept,"rightTarget",true)),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),MapSequence.<SNode,SNode>fromMap(conceptsToTargets).get(binaryOperationConcept),expressionConcept);
    ListSequence.<SNode>fromList(SLinkOperations.getTargets(actions,"actionsBuilder",true)).addElement(rtBuilder);
    ListSequence.<SNode>fromList(SLinkOperations.getTargets(actions,"actionsBuilder",true)).addElement(ltBuilder);
  }
}
