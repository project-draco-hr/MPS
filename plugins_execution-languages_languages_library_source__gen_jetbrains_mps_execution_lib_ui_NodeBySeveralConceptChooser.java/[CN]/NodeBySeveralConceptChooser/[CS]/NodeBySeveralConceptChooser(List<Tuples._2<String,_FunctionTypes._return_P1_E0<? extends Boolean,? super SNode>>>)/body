{
  ListSequence.fromList(myTargetConcepts).addSequence(ListSequence.fromList(targets).select(new ISelector<Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>,Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>>(){
    public Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> select(    Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> it){
      return MultiTuple.<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>from((it._0() == null ? "jetbrains.mps.lang.core.structure.BaseConcept" : it._0()),it._1());
    }
  }
));
  Iterable<Language> languages=ListSequence.fromList(myTargetConcepts).select(new ISelector<Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>,Language>(){
    public Language select(    final Tuples._2<String,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> it){
      return ModelAccess.instance().runReadAction(new Computable<Language>(){
        public Language compute(){
          return (Language)SModelUtil.findConceptDeclaration(it._0(),GlobalScope.getInstance()).getModel().getModelDescriptor().getModule();
        }
      }
);
    }
  }
);
  myScope=new ModulesWithLanguagesScope(GlobalScope.getInstance(),languages);
}
