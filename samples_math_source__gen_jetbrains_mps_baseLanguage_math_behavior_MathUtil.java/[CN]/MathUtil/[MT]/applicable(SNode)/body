{
  boolean operation_ok=SNodeOperations.isInstanceOf(contextParent,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242875l,"jetbrains.mps.baseLanguage.structure.PlusExpression")) || SNodeOperations.isInstanceOf(contextParent,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1095950406618l,"jetbrains.mps.baseLanguage.structure.DivExpression")) || SNodeOperations.isInstanceOf(contextParent,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1092119917967l,"jetbrains.mps.baseLanguage.structure.MulExpression"))|| SNodeOperations.isInstanceOf(contextParent,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242869l,"jetbrains.mps.baseLanguage.structure.MinusExpression"));
  boolean types_ok=SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(contextParent),MetaAdapterFactory.getConcept(new UUID(3676340747305173022l,-6911132873973321185l),1237106070629l,"jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) || SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(contextParent),MetaAdapterFactory.getConcept(new UUID(3676340747305173022l,-6911132873973321185l),1237108887116l,"jetbrains.mps.baseLanguage.math.structure.BigComplexType"));
  return operation_ok && types_ok;
}
