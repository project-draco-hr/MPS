{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.make.script.structure.ResultStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:308041c6-80bc-4e26-b4b1-473fd45c9339(jetbrains.mps.make.script.structure)","Result"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode rs=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x6237d5bb8b2a942dL,"jetbrains.mps.make.script.structure.ResultStatement")),null);
              SPropertyOperations.set(rs,MetaAdapterFactory.getProperty(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x6237d5bb8b2a942dL,0x6237d5bb8b2a942eL,"result"),SEnumOperations.getEnumMemberValue((item)));
              return rs;
            }
            public String getMatchingText(            String pattern){
              return SEnumOperations.getEnumMemberName((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
