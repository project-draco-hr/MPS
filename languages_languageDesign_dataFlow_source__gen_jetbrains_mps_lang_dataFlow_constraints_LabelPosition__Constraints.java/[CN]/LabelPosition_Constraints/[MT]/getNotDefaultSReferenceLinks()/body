{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x1190a8b1526L,0x1190a8b2ed8L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x1190a8b1526L,0x1190a8b2ed8L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> labels=new ArrayList<SNode>();
          SNode builder=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e58cd635L,"jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration"),true,false);
          ListSequence.fromList(labels).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(builder,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x1190a87adadL,"jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement"),true,new SAbstractConcept[]{})));
          return labels;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_t9qyyi_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
