{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.CommentedText");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode commonCommand=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.bash.structure.CommandList",false,false);
        SLinkOperations.setNewChild(commonCommand,"comment","jetbrains.mps.bash.structure.CommentedText");
        return SLinkOperations.getTarget(commonCommand,"comment",true);
      }
      public String getMatchingText(      String pattern){
        return "#";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "simple text comment";
      }
    }
);
  }
  return result;
}
