{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.FollowingCommandList");
    Iterable<SNode> concepts;
    concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SConceptOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
          SLinkOperations.setNewChild(SLinkOperations.getTarget(SLinkOperations.getTarget(result,"baseCommand",true),"base",true),"command","jetbrains.mps.bash.structure.AbstractCommand");
          SLinkOperations.setTarget(SLinkOperations.getTarget(result,"baseCommand",true),"following",_context.getSourceNode(),true);
          return result;
        }
      }
);
    }
  }
  return result;
}
