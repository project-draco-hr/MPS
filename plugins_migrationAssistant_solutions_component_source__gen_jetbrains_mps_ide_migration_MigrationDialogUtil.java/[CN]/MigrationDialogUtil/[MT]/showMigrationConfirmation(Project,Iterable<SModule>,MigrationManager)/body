{
  final StringBuilder text=new StringBuilder();
  text.append("This project needs to be migrated.\n");
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<String> migrations;
      migrations=Sequence.fromIterable(m.getProjectMigrationsToApply()).select(new ISelector<ProjectMigration,String>(){
        public String select(        ProjectMigration it){
          return it.getDescription();
        }
      }
);
      if (Sequence.fromIterable(migrations).isNotEmpty()) {
        text.append("  Project migrations to be executed:\n");
        Sequence.fromIterable(migrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>(){
          public void visit(          String it){
            text.append("    ").append(it).append("\n");
          }
        }
);
        if (Sequence.fromIterable(migrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
          text.append("    ...and ").append(Sequence.fromIterable(migrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
        }
      }
      migrations=Sequence.fromIterable(m.getModuleMigrationsToApply(modules)).select(new ISelector<Tuples._2<ScriptApplied,ScriptApplied.ScriptAppliedReference>,String>(){
        public String select(        Tuples._2<ScriptApplied,ScriptApplied.ScriptAppliedReference> it){
          return it._1().getKindDescription(it._0());
        }
      }
);
      if (Sequence.fromIterable(migrations).isNotEmpty()) {
        text.append("  Language migrations to be executed:\n");
        Sequence.fromIterable(migrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>(){
          public void visit(          String it){
            text.append("    ").append(it).append("\n");
          }
        }
);
        if (Sequence.fromIterable(migrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
          text.append("    ...and ").append(Sequence.fromIterable(migrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
        }
      }
    }
  }
);
  text.append("\nIn case the migration is postponed, this notification will not appear until the project is reopened.\n");
  text.append("Migration Assistant can be invoked at any time by clicking Tools->Run Migration Assistant.\n");
  text.append("Would you like to reload project and start the migration immediately?");
  int result=Messages.showYesNoDialog(p,text.toString(),"Migration Required","Migrate","Postpone",null);
  return result == Messages.YES;
}
