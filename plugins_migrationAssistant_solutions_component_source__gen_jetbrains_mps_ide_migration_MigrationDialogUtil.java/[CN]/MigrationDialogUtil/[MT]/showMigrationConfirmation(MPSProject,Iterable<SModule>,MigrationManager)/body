{
  final StringBuilder text=new StringBuilder();
  text.append("This project needs to be migrated.\n");
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      Iterable<String> projectMigrations=Sequence.fromIterable(m.getProjectMigrationsToApply()).select(new ISelector<ProjectMigration,String>(){
        public String select(        ProjectMigration it){
          return it.getDescription();
        }
      }
);
      if (Sequence.fromIterable(projectMigrations).isNotEmpty()) {
        text.append("  Project migrations to be executed:\n");
        Sequence.fromIterable(projectMigrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>(){
          public void visit(          String it){
            text.append("    ").append(it).append("\n");
          }
        }
);
        if (Sequence.fromIterable(projectMigrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
          text.append("    ...and ").append(Sequence.fromIterable(projectMigrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
        }
      }
    }
  }
);
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      Iterable<String> languageMigrations=ListSequence.fromList(m.getModuleMigrationsToApply(modules)).select(new ISelector<ScriptApplied.ScriptAppliedReference,String>(){
        public String select(        ScriptApplied.ScriptAppliedReference it){
          return it.getKindDescription(it.resolve(m.getMigrationComponent(),false));
        }
      }
).distinct();
      if (Sequence.fromIterable(languageMigrations).isNotEmpty()) {
        text.append("  Language migrations to be executed:\n");
        Sequence.fromIterable(languageMigrations).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>(){
          public void visit(          String it){
            text.append("    ").append(it).append("\n");
          }
        }
);
        if (Sequence.fromIterable(languageMigrations).count() > MIGRATIONS_TO_SHOW_COUNT) {
          text.append("    ...and ").append(Sequence.fromIterable(languageMigrations).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
        }
      }
    }
  }
);
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      Iterable<String> modules=Sequence.fromIterable(MigrationModuleUtil.getMigrateableModulesFromProject(project)).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule module){
          return Sequence.fromIterable(MigrationsUtil.getAllSteps(module)).isNotEmpty();
        }
      }
).select(new ISelector<SModule,String>(){
        public String select(        SModule module){
          return NameUtil.compactNamespace(module.getModuleName());
        }
      }
);
      if (Sequence.fromIterable(modules).isNotEmpty()) {
        text.append("  Modules to be migrated:\n");
        Sequence.fromIterable(modules).take(MIGRATIONS_TO_SHOW_COUNT).visitAll(new IVisitor<String>(){
          public void visit(          String it){
            text.append("    ").append(it).append("\n");
          }
        }
);
        if (Sequence.fromIterable(modules).count() > MIGRATIONS_TO_SHOW_COUNT) {
          text.append("    ...and ").append(Sequence.fromIterable(modules).count() - MIGRATIONS_TO_SHOW_COUNT).append(" more\n");
        }
      }
    }
  }
);
  text.append("\nIn case the migration is postponed, this notification will not appear until the project is reopened.\n");
  text.append("Migration Assistant can be invoked at any time by clicking Tools->Run Migration Assistant.\n");
  text.append("Would you like to reload project and start the migration immediately?");
  int result=Messages.showYesNoDialog(project.getProject(),text.toString(),"Migration Required","Migrate","Postpone",null);
  return result == Messages.YES;
}
