{
  ModelAccessHelper mah=new ModelAccessHelper(myProject.getModelAccess());
  final SNode contextClass=mah.runReadAction(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.getNodeAncestor(mySelectedNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"),true,false);
    }
  }
);
  final SNode contextMember=mah.runReadAction(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.getNodeAncestor(mySelectedNode,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),true,false);
    }
  }
);
  final SNodeReference[] methods=mah.runReadAction(new Computable<SNodeReference[]>(){
    @Override public SNodeReference[] compute(){
      List<SNode> methodsToOverride=(myIsOverride ? BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),contextClass,"virtual_getMethodsToOverride_5418393554803767537",new Object[]{}) : BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),contextClass,"virtual_getMethodsToImplement_5418393554803775106",new Object[]{}));
      return OverrideImplementMethodsDialog.toNodePointers(OverrideImplementMethodsDialog.sortMethods(contextClass,methodsToOverride));
    }
  }
);
  final OverrideImplementMethodsDialog dialog=new OverrideImplementMethodsDialog(methods,ProjectHelper.toIdeaProject(myProject)){
    @Override protected boolean showInsertOverride(){
      return myIsOverride;
    }
  }
;
  dialog.setTitle((myIsOverride ? "Select Methods to Override" : "Select Methods to Implement"));
  dialog.show();
  if (dialog.isOK()) {
    final Iterable<SNodeReference> selectedElements=(Iterable<SNodeReference>)dialog.getSelectedElements();
    myProject.getModelAccess().executeCommandInEDT(new Runnable(){
      @Override public void run(){
        List<SNode> selection=Sequence.fromIterable(selectedElements).select(new ISelector<SNodeReference,SNode>(){
          public SNode select(          SNodeReference it){
            return SNodeOperations.cast(((SNodePointer)it).resolve(MPSModuleRepository.getInstance()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
          }
        }
).toListSequence();
        OverrideImplementMethodsHelper helper=new OverrideImplementMethodsHelper(myProject,contextClass,contextMember,dialog.isRemoveAttributes(),dialog.isInsertOverrideAnnotation(),dialog.isAddReturn());
        List<SNode> insertedMethods=helper.insertMethods(selection);
        if (insertedMethods.isEmpty()) {
          return;
        }
        SNode firstMethod=ListSequence.fromList(insertedMethods).first();
        SNode nodeToSelect;
        if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(firstMethod,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).isNotEmpty()) {
          nodeToSelect=ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(firstMethod,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).first();
        }
 else {
          nodeToSelect=firstMethod;
        }
        myEditorContext.flushEvents();
        myEditorContext.getSelectionManager().setSelection(nodeToSelect);
      }
    }
);
  }
}
