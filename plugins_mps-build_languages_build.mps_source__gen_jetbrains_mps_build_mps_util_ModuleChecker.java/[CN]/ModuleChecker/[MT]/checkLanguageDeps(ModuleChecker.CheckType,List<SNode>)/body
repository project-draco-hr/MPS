{
  LanguageDescriptor descriptor=(LanguageDescriptor)myModuleDescriptor;
  SNode language=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language");
  boolean importsCore=false;
  boolean importsDescriptor=false;
  for (  SModuleReference extendedLang : descriptor.getExtendedLanguages()) {
    if (!(importsCore) && BootstrapLanguages.coreLanguageRef().equals(extendedLang)) {
      importsCore=true;
    }
    if (!(importsDescriptor) && BootstrapLanguages.descriptorLanguageRef().equals(extendedLang)) {
      importsDescriptor=true;
    }
    final SNode resolved=SNodeOperations.as(myVisibleModules.resolve(extendedLang),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find extended language in dependencies: " + extendedLang.getModuleName(),myModule);
      continue;
    }
    if (type.doCheck && !(ListSequence.fromList(SLinkOperations.getTargets(language,"dependencies",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        SNode em=SNodeOperations.as(it,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
        return em != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(em,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(em,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"),"language",false)) == resolved;
      }
    }
))) {
      report("extends language dependency should be extracted into build script: " + extendedLang.toString(),myOriginalModule);
    }
    if (type.doPartialImport) {
      SNode res=ListSequence.fromList(previous).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(it,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"),"language",false) == resolved;
        }
      }
);
      if (res == null) {
        res=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency",null);
        SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage",null);
        SLinkOperations.setTarget(ul,"language",resolved,false);
        SLinkOperations.setTarget(res,"dependency",ul,true);
        ListSequence.fromList(SLinkOperations.getTargets(language,"dependencies",true)).addElement(res);
      }
 else {
        ListSequence.fromList(previous).removeElement(res);
      }
    }
  }
  if (!(importsCore) && type.doFullImport) {
    SNode resolved=SNodeOperations.as(myVisibleModules.resolve(BootstrapLanguages.coreLanguageRef()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find jetbrains.mps.lang.core language in dependencies for " + SPropertyOperations.getString(myModule,"name"),myModule);
    }
 else {
      SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage",null);
      SLinkOperations.setTarget(ul,"language",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module"),"dependencies",true)).addElement(ul);
    }
  }
  if (!(importsDescriptor) && type.doFullImport) {
    SNode resolved=SNodeOperations.as(myVisibleModules.resolve(BootstrapLanguages.descriptorLanguageRef()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find jetbrains.mps.lang.descriptor language in dependencies for " + SPropertyOperations.getString(myModule,"name"),myModule);
    }
 else {
      SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage",null);
      SLinkOperations.setTarget(ul,"language",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module"),"dependencies",true)).addElement(ul);
    }
  }
}
