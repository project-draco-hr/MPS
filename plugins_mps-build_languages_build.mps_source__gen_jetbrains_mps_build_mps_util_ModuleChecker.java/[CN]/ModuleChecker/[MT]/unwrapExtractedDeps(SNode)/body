{
  Iterable<SNode> moduleExtractedDependencies=SNodeOperations.ofConcept(SLinkOperations.getTargets(module,"dependencies",true),"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
  Set<SNode> moduleDependencies=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(moduleDependencies).addSequence(ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)));
  SetSequence.fromSet(moduleDependencies).removeSequence(Sequence.fromIterable(moduleExtractedDependencies));
  SetSequence.fromSet(moduleDependencies).addSequence(Sequence.fromIterable(moduleExtractedDependencies).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"dependency",true) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"dependency",true);
    }
  }
));
  return SetSequence.fromSetWithValues(new HashSet<SNode>(),Sequence.fromIterable(SNodeOperations.ofConcept(moduleDependencies,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule")).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"module",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"module",false);
    }
  }
));
}
