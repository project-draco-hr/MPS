{
  if (!(queryParameters.getEffectiveSearchScope() instanceof GlobalSearchScope)) {
    return;
  }
  final GlobalSearchScope scope=(GlobalSearchScope)queryParameters.getEffectiveSearchScope();
  final PsiElement psiTarget=queryParameters.getElementToSearch();
  final Project project=psiTarget.getProject();
  final MPSPsiProvider psiProvider=MPSPsiProvider.getInstance(project);
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      final SNode targetNode=getNodeForElement(psiTarget);
      if (targetNode == null) {
        return;
      }
      Set<SNode> targetNodes=new HashSet<SNode>(1);
      targetNodes.add(targetNode);
      Set<SReference> references=FindUsagesFacade.getInstance().findUsages(new IdeaSearchScope(scope),targetNodes,null);
      for (      SReference sReference : references) {
        SNode source=sReference.getSourceNode();
        MPSPsiNode psiNode=(MPSPsiNode)psiProvider.getPsi(source);
        if (psiNode == null)         return;
        String refRole=sReference.getRole();
        MPSPsiRef[] refs=psiNode.getReferences(refRole);
        for (        MPSPsiRef r : refs) {
          if (targetNode.getNodeId().equals(r.getNodeId())) {
            consumer.process(r.getReference());
          }
        }
      }
    }
  }
);
}
