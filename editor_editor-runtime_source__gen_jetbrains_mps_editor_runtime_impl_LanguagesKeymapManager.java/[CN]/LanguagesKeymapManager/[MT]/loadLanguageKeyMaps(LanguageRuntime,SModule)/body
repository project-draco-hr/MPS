{
  SModel editorModelDescriptor=SModuleOperations.getAspect(languageSource,"editor");
  SModel editorModel=(editorModelDescriptor != null ? editorModelDescriptor : null);
  if (editorModel == null) {
    return Collections.<KeyMap>emptyList();
  }
  List<SNode> declarations=SModelOperations.roots(editorModel,MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xfbc216b31bL,"jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration"));
  if (ListSequence.fromList(declarations).isEmpty()) {
    return Collections.<KeyMap>emptyList();
  }
  List<KeyMap> keyMaps=ListSequence.fromList(new ArrayList<KeyMap>());
  for (  SNode keyMapDeclaration : ListSequence.fromList(declarations)) {
    try {
      Class<KeyMap> keyMapClass=(Class<KeyMap>)languageRuntime.getClass().getClassLoader().loadClass(((String)BHReflection.invoke(keyMapDeclaration,SMethodTrimmedId.create("getFqName",null,"hEwIO9y"))));
      KeyMap keyMap=keyMapClass.newInstance();
      if (keyMap.isApplicableToEveryModel()) {
        ListSequence.fromList(keyMaps).addElement(keyMap);
      }
    }
 catch (    ClassNotFoundException ex) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Failed to instantiate keymap",ex);
      }
    }
catch (    InstantiationException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failed to instantiate keymap",e);
      }
    }
catch (    IllegalAccessException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failed to instantiate keymap",e);
      }
    }
  }
  return (ListSequence.fromList(keyMaps).isEmpty() ? Collections.<KeyMap>emptyList() : keyMaps);
}
