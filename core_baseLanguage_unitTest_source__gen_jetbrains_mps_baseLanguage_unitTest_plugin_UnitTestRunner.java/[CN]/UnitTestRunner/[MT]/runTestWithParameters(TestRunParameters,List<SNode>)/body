{
  List<String> params=ListSequence.fromList(new ArrayList<String>());
  String workingDir=null;
  String programParams=null;
  String vmParams=null;
  if (this.configParameter != null) {
    workingDir=this.configParameter.getWorkingDirectory();
    programParams=this.configParameter.getProgramParameters();
    vmParams=this.configParameter.getVMParameters();
  }
  this.addJavaCommand(params);
  if (this.unitTestPreferences != null && this.unitTestPreferences.getStateObject().useDebug) {
    this.addDebug(params,this.unitTestPreferences.getStateObject().debugPort,false);
  }
  ListSequence.fromList(params).addSequence(ListSequence.fromList(parameters.getVmParameters()));
  if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
    String[] paramList=this.splitParams(vmParams);
    ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
  }
  this.addClassPath(params,this.getClasspathString(ListSequence.fromList(tests).first(),parameters.getClassPath()));
  ListSequence.fromList(params).addElement(parameters.getTestRunner());
  for (  SNode test : ListSequence.fromList(tests)) {
    ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
  }
  if (programParams != null && StringUtils.isNotEmpty(programParams)) {
    String[] paramList=this.splitParams(programParams);
    ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
  }
  ProcessBuilder p=new ProcessBuilder(params);
  if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
    p.directory(new File(workingDir));
  }
  this.myComponent.appendInternal(this.getCommandString(p) + "\n\n");
  try {
    final Process result=p.start();
    this.myComponent.addCloseListener(new _FunctionTypes._void_P0_E0(){
      public void invoke(){
        result.destroy();
      }
    }
);
    return result;
  }
 catch (  Exception e) {
    Logger.getLogger(UnitTestRunner.class).error("Can't run tests",e);
    return null;
  }
}
