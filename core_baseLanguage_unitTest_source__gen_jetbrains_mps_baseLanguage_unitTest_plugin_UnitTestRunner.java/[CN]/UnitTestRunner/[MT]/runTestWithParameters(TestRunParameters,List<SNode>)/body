{
  final List<String> params=ListSequence.fromList(new ArrayList<String>());
  String workingDir=null;
  String programParams=null;
  String vmParams=null;
  if (this.configParameter != null) {
    workingDir=this.configParameter.getWorkingDirectory();
    programParams=this.configParameter.getProgramParameters();
    vmParams=this.configParameter.getVMParameters();
  }
  this.addJavaCommand(params);
  if (this.unitTestPreferences.getStateObject().useDebug) {
    this.addDebug(params,this.unitTestPreferences.getStateObject().debugPort,false);
  }
  ListSequence.fromList(params).addSequence(ListSequence.fromList(parameters.getVmParameters()));
  if (vmParams != null) {
    ListSequence.fromList(params).addElement(vmParams);
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      UnitTestRunner.this.addClassPath(params,UnitTestRunner.this.getClasspathString(ListSequence.fromList(tests).first(),parameters.getClassPath()));
    }
  }
);
  ListSequence.fromList(params).addElement(parameters.getTestRunner());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SNode test : ListSequence.fromList(tests)) {
        ListSequence.fromList(params).addSequence(ListSequence.fromList(ITestable_Behavior.call_getParametersPart_1215620460293(test)));
      }
    }
  }
);
  if (programParams != null) {
    ListSequence.fromList(params).addElement(programParams);
  }
  ProcessBuilder p=new ProcessBuilder(params);
  if (workingDir != null) {
    p.directory(new File(workingDir));
  }
  this.myComponent.appendInternal(this.getCommandString(p) + "\n\n");
  try {
    this.myProcess=p.start();
    final UnitTestRunOutputReader outReader=new UnitTestRunOutputReader(this.myProcess.getInputStream(),this.myComponent,false);
    final UnitTestRunOutputReader errReader=new UnitTestRunOutputReader(this.myProcess.getErrorStream(),this.myComponent,true);
    this.myComponent.addCloseListener(new _FunctionTypes._void_P0_E0(){
      public void invoke(){
        outReader.interrupt();
        errReader.interrupt();
        UnitTestRunner.this.myProcess.destroy();
      }
    }
);
    CyclicBarrier barrier=new CyclicBarrier(2,outReader.getExecutor());
    outReader.setBarrier(barrier);
    errReader.setBarrier(barrier);
    outReader.start();
    errReader.start();
    this.myProcess.waitFor();
  }
 catch (  Exception e) {
    Logger.getLogger(UnitTestRunner.class).error("Can't run tests",e);
  }
}
