{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationCall");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<Tuples._2<String,NotationContext>> queryResult=new Computable<Iterable<Tuples._2<String,NotationContext>>>(){
        public Iterable<Tuples._2<String,NotationContext>> compute(){
          final NotationContext context=ContextUtil.getContext((_context.getCurrentTargetNode() != null ? _context.getCurrentTargetNode() : _context.getParentNode()),null);
          if (context == null) {
            return ListSequence.fromList(new ArrayList<Tuples._2<String,NotationContext>>());
          }
          Scope lscope=Scope.getScope(_context.getParentNode(),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotation"));
          Iterable<String> result=Sequence.fromIterable(lscope.getAvailableElements(null)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.core.notation.structure.SNotation") && BehaviorReflection.invokeVirtual(Boolean.TYPE,SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.core.notation.structure.SNotation"),"context",true),"virtual_isApplicable_5566195403253848024",new Object[]{context});
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.core.notation.structure.SNotation"),"context",true);
            }
          }
).select(new ISelector<SNode,String>(){
            public String select(            SNode it){
              return SPropertyOperations.getString(it,"id");
            }
          }
).distinct();
          return Sequence.fromIterable(result).select(new ISelector<String,Tuples._2<String,NotationContext>>(){
            public Tuples._2<String,NotationContext> select(            String it){
              return MultiTuple.<String,NotationContext>from(it,context);
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final Tuples._2<String,NotationContext> item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode call=SModelOperations.createNewNode(model,null,"jetbrains.mps.core.notation.structure.SNotationCall");
              SPropertyOperations.set(call,"id",(item)._0());
              return call;
            }
            public String getMatchingText(            String pattern){
              SNode cnode=(item)._1().getNode();
              String idSuffix=((item)._0() != null ? "." + (item)._0() : "");
              return ((SNodeOperations.isInstanceOf(cnode,"jetbrains.mps.lang.core.structure.INamedConcept") ? SPropertyOperations.getString(SNodeOperations.cast(cnode,"jetbrains.mps.lang.core.structure.INamedConcept"),"name") : "<unknown>")) + idSuffix;
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
