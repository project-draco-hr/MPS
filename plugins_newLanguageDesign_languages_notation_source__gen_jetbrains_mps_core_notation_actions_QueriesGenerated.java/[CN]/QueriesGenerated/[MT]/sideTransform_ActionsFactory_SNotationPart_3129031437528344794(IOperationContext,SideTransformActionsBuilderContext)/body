{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode outer=SNotationActionUtil.getTargetForQuantifier(_context.getSourceNode());
      SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
      SPropertyOperations.set(q,"kind","optional");
      SNodeOperations.replaceWithAnother(outer,q);
      return SLinkOperations.setTarget(q,"inner",outer,true);
    }
    public String getMatchingText(    String pattern){
      return "?";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "optional";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
      SPropertyOperations.set(q,"kind","list");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),q);
      return SLinkOperations.setTarget(q,"inner",_context.getSourceNode(),true);
    }
    public String getMatchingText(    String pattern){
      return "*";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "optional";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
      SPropertyOperations.set(q,"kind","nonempty-list");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),q);
      return SLinkOperations.setTarget(q,"inner",_context.getSourceNode(),true);
    }
    public String getMatchingText(    String pattern){
      return "+";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "one or more";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),null));
    }
  }
);
  return result;
}
