{
  super(process,params,Charset.defaultCharset());
  myDispatcher=dispartcher;
  addProcessListener(new ProcessAdapter(){
    private final StringBuffer buffer=new StringBuffer();
    private String getLine(    String text){
      text=text.replaceAll("\r\n","\n");
      buffer.append(text);
      int index=buffer.lastIndexOf("\n");
      if (index > 0) {
        String lineToAppend=buffer.substring(0,index);
        buffer.replace(0,index,"");
        return lineToAppend;
      }
 else {
        return null;
      }
    }
    private boolean isTerminatedEvent(){
      for (      StackTraceElement element : Thread.currentThread().getStackTrace()) {
        if (element.getClassName().equals(ProcessTerminatedListener.class.getName())) {
          return true;
        }
      }
      return false;
    }
    public void onTextAvailable(    ProcessEvent event,    Key k){
      if (isTerminatedEvent()) {
        myDispatcher.onProcessTerminated(event.getText());
      }
      boolean error=ProcessOutputTypes.STDERR.equals(k);
      boolean system=ProcessOutputTypes.SYSTEM.equals(k);
      String text=(error || system ? event.getText() : getLine(event.getText()));
      if (text == null) {
        return;
      }
      String textTrimmed=StringUtils.trimBoth(text);
      TestEvent testEvent=TestEvent.parse(textTrimmed);
      if (testEvent != null) {
        myLastEvent=testEvent;
        myDispatcher.onTestEvent(testEvent);
      }
 else {
        if (myLastEvent != null && (TestEvent.FAILURE_TEST_PREFIX.equals(myLastEvent.getToken()) || TestEvent.ERROR_TEST_PREFIX.equals(myLastEvent.getToken()))) {
          k=ProcessOutputTypes.STDERR;
        }
        myDispatcher.onSimpleTextAvailable(text,k);
      }
    }
  }
);
  ProcessTerminatedListener.attach(this);
}
