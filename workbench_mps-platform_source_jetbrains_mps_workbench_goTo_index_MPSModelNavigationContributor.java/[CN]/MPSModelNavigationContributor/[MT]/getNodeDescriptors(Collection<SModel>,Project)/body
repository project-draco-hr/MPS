{
  RootNodeNameIndex index=new RootNodeNameIndex();
  final ID<Integer,List<SNodeDescriptor>> indexName=index.getName();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  Set<SModel> findDirectly=new HashSet<SModel>();
  final Set<NodeDescriptor> keys=new HashSet<NodeDescriptor>();
  for (  SModel sm : models) {
    if (!SModelStereotype.isUserModel(sm))     continue;
    if (!(sm instanceof DefaultSModelDescriptor)) {
      if (sm.isLoaded()) {
        findDirectly.add(sm);
      }
      continue;
    }
    DefaultSModelDescriptor esm=(DefaultSModelDescriptor)sm;
    if (esm.getLoadingState() == ModelLoadingState.FULLY_LOADED) {
      findDirectly.add(sm);
      continue;
    }
    IFile modelFile=esm.getSource().getFile();
    VirtualFile vf=VirtualFileUtils.getVirtualFile(modelFile);
    if (vf == null)     continue;
    int fileId=FileBasedIndex.getFileId(vf);
    GlobalSearchScope scope=GlobalSearchScope.fileScope(ProjectHelper.toIdeaProject(p),vf);
    List<List<SNodeDescriptor>> descriptors=fileBasedIndex.getValues(indexName,fileId,scope);
    if (descriptors.isEmpty())     continue;
    boolean needToLoad=false;
    for (    NodeDescriptor snd : descriptors.get(0)) {
      PropertyConstraintsDescriptor descriptor=ConceptRegistry.getInstance().getConstraintsDescriptor(snd.getConcept().getId()).getProperty(SNodeUtil.property_INamedConcept_name);
      if (descriptor instanceof BasePropertyConstraintsDescriptor && !((BasePropertyConstraintsDescriptor)descriptor).isGetterDefault()) {
        needToLoad=true;
        break;
      }
    }
    if (needToLoad) {
      findDirectly.add(sm);
    }
 else {
      keys.addAll(descriptors.get(0));
    }
  }
  for (  SModel sm : findDirectly) {
    for (    SNode root : index.getRootsToIterate(((DefaultSModelDescriptor)sm).getSModel())) {
      String nodeName=(root.getName() == null) ? "null" : root.getName();
      NodeDescriptor nodeDescriptor=SNodeDescriptor.fromModelReference(nodeName,root.getConcept().getId(),root.getModel().getSModelReference(),root.getSNodeId());
      keys.add(nodeDescriptor);
    }
  }
  return keys;
}
