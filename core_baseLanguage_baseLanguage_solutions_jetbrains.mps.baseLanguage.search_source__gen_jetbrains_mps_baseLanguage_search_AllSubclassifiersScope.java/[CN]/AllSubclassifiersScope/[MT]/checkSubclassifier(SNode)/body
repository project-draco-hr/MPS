{
  if (this.visitedClassifiersMap.containsKey(cls)) {
    return this.visitedClassifiersMap.get(cls);
  }
  boolean result=false;
  if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode extendedClass=BaseLanguageUtil.getSuperclass(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    if (extendedClass != null && this.checkSubclassifier(extendedClass)) {
      result=true;
    }
    if (!(result)) {
      for (      SNode iface : ListSequence.fromList(SLinkOperations.getTargets((SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"implementedInterface",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"classifier",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
)) {
        if (this.checkSubclassifier(iface)) {
          result=true;
          break;
        }
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.Interface")) {
    for (    SNode iface : ListSequence.fromList(SLinkOperations.getTargets((SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.Interface")),"extendedInterface",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return (SLinkOperations.getTarget(it,"classifier",false) != null);
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"classifier",false);
      }
    }
)) {
      if (this.checkSubclassifier(iface)) {
        result=true;
        break;
      }
    }
  }
  this.visitedClassifiersMap.put(cls,result);
  return result;
}
