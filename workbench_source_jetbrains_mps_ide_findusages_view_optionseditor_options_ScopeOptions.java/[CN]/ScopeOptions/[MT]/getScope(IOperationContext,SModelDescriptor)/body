{
  IScope scope;
  if (myScopeType.equals(GLOBAL_SCOPE)) {
    scope=GlobalScopeMinusTransient.getInstance();
  }
 else   if (myScopeType.equals(PROJECT_SCOPE)) {
    scope=operationContext.getProject().getComponent(ProjectScope.class);
  }
 else   if (myScopeType.equals(MODULE_SCOPE)) {
    if (myModule.equals(DEFAULT_VALUE)) {
      scope=new OnlyModuleScope(operationContext.getModule());
    }
 else {
      IModule module=getModuleByNamespace(myModule);
      if (module == null) {
        LOG.error("Module is not found for " + myModule + ". Using current module.");
        module=operationContext.getModule();
        myModule=module.getModuleFqName();
      }
      scope=new OnlyModuleScope(module);
    }
  }
 else   if (myScopeType.equals(MODEL_SCOPE)) {
    if (myModel.equals(DEFAULT_VALUE)) {
      scope=new ModelsOnlyScope(descriptor);
    }
 else {
      List<SModelDescriptor> models=SModelRepository.getInstance().getModelDescriptorsByModelName(myModel);
      if (models.isEmpty()) {
        myModel=descriptor.getLongName();
        models=SModelRepository.getInstance().getModelDescriptorsByModelName(myModel);
        LOG.error("Model is not found for " + myModel + ". Using current model.");
      }
      SModelDescriptor modelDescriptor=models.get(0);
      scope=new ModelsOnlyScope(modelDescriptor);
    }
  }
 else   if (myScopeType.equals(BOOTSTRAP_SCOPE)) {
    return BootstrapScope.getInstance();
  }
 else   throw new IllegalArgumentException();
  return scope;
}
