{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractClassifierReference_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractCreator_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractOperation_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AdditionalForLoopVariable_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Annotation_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnnotationInstance_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnnotationInstanceExpression_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnnotationInstanceValue_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnnotationMethodDeclaration_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnonymousClass_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AnonymousClassCreator_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayAccessExpression_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayClassExpression_Editor()));
case 13:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayCloneOperation_Editor()));
case 14:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayCreator_Editor()));
case 15:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayCreatorWithInitializer_Editor()));
case 16:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayLengthOperation_Editor()));
case 17:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayLiteral_Editor()));
case 18:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ArrayType_Editor()));
case 19:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AsExpression_Editor()));
case 20:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AssertStatement_Editor()));
case 21:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BLBottomType_Editor()));
case 22:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseAssignmentExpression_Editor()));
case 23:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseVariableDeclaration_Editor()));
case 24:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseVariableReference_Editor()));
case 25:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor()));
case 26:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BitwiseNotExpression_Editor()));
case 27:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BlockStatement_Editor()));
case 28:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BooleanConstant_Editor()));
case 29:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BreakStatement_Editor()));
case 30:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CastExpression_Editor()));
case 31:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CatchClause_Editor()));
case 32:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CharConstant_Editor()));
case 33:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClassConcept_Editor()));
case 34:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClassCreator_Editor()));
case 35:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClassifierClassExpression_Editor()));
case 36:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClassifierType_Editor()));
case 37:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClosureParameter_Editor()));
case 38:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClosureParameterReference_Editor()));
case 39:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CommentedStatement_Editor()));
case 40:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CommentedStatementsBlock_Editor()));
case 41:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ConceptFunction_Editor()));
case 42:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ConceptFunctionParameter_Editor()));
case 43:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ConstructorDeclaration_Editor()));
case 44:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ContinueStatement_Editor()));
case 45:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomPropertyImplementation_Editor()));
case 46:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomSetterPropertyImplementation_Editor()));
case 47:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DefaultClassCreator_Editor()));
case 48:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DefaultGetAccessor_Editor()));
case 49:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DefaultPropertyImplementation_Editor()));
case 50:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DefaultSetAccessor_Editor()));
case 51:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DimensionExpression_Editor()));
case 52:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DoWhileStatement_Editor()));
case 53:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DotExpression_Editor()));
case 54:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ElsifClause_Editor()));
case 55:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumClass_Editor()));
case 56:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumConstantDeclaration_Editor()));
case 57:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumConstantReference_Editor()));
case 58:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumValueOfExpression_Editor()));
case 59:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumValuesExpression_Editor()));
case 60:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EscapeOperation_Editor()));
case 61:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Expression_Editor()));
case 62:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExpressionStatement_Editor()));
case 63:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FieldDeclaration_Editor()));
case 64:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FieldReferenceOperation_Editor()));
case 65:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FloatingPointConstant_Editor()));
case 66:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FloatingPointFloatConstant_Editor()));
case 67:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ForStatement_Editor()));
case 68:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ForeachStatement_Editor()));
case 69:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GenericNewExpression_Editor()));
case 70:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetAccessor_Editor()));
case 71:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new HexIntegerLiteral_Editor()));
case 72:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IfStatement_Editor()));
case 73:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ImplicitAnnotationInstanceValue_Editor()));
case 74:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IncompleteLeftParen_Editor()));
case 75:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IncompleteMemberDeclaration_Editor()));
case 76:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IncompleteRightParen_Editor()));
case 77:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InstanceInitializer_Editor()));
case 78:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InstanceMethodCallOperation_Editor()));
case 79:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InstanceMethodDeclaration_Editor()));
case 80:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InstanceOfExpression_Editor()));
case 81:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor()));
case 82:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Interface_Editor()));
case 83:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new JavaImport_Editor()));
case 84:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new JavaImports_Editor()));
case 85:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LocalMethodCall_Editor()));
case 86:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LocalPropertyReference_Editor()));
case 87:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LocalVariableDeclaration_Editor()));
case 88:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LocalVariableDeclarationStatement_Editor()));
case 89:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LongLiteral_Editor()));
case 90:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LoopLabel_Editor()));
case 91:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LoopLabelReference_Editor()));
case 92:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LowerBoundType_Editor()));
case 93:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NotExpression_Editor()));
case 94:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NullLiteral_Editor()));
case 95:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Number_Editor()));
case 96:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ParameterDeclaration_Editor()));
case 97:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ParenthesizedExpression_Editor()));
case 98:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PlaceholderMember_Editor()));
case 99:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PostfixDecrementExpression_Editor()));
case 100:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PostfixIncrementExpression_Editor()));
case 101:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PrefixDecrementExpression_Editor()));
case 102:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PrefixIncrementExpression_Editor()));
case 103:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PrimitiveClassExpression_Editor()));
case 104:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Property_Editor()));
case 105:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PropertyReference_Editor()));
case 106:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PropertyValueReference_Editor()));
case 107:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RemarkStatement_Editor()));
case 108:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ReturnStatement_Editor()));
case 109:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SetAccessor_Editor()));
case 110:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SingleLineComment_Editor()));
case 111:
return collectEditors(descriptor,Arrays.asList(new ConceptEditor[]{new Statement_Editor(),new Statement_comment_Editor()}));
case 112:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StatementCommentPart_Editor()));
case 113:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StatementList_Editor()));
case 114:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StaticFieldDeclaration_Editor()));
case 115:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StaticFieldReference_Editor()));
case 116:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StaticInitializer_Editor()));
case 117:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StaticMethodCall_Editor()));
case 118:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StaticMethodDeclaration_Editor()));
case 119:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StringBooleanOperation_Editor()));
case 120:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StringLiteral_Editor()));
case 121:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StringToken_Editor()));
case 122:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StubStatementList_Editor()));
case 123:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubstringExpression_Editor()));
case 124:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SuperConstructorInvocation_Editor()));
case 125:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SuperMethodCall_Editor()));
case 126:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SwitchCase_Editor()));
case 127:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SwitchStatement_Editor()));
case 128:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SynchronizedStatement_Editor()));
case 129:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TernaryOperatorExpression_Editor()));
case 130:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TextCommentPart_Editor()));
case 131:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ThisConstructorInvocation_Editor()));
case 132:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ThisExpression_Editor()));
case 133:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ThrowStatement_Editor()));
case 134:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TrimOperation_Editor()));
case 135:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TryCatchStatement_Editor()));
case 136:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TryStatement_Editor()));
case 137:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Type_Editor()));
case 138:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeVariableDeclaration_Editor()));
case 139:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeVariableReference_Editor()));
case 140:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnaryMinus_Editor()));
case 141:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UndefinedType_Editor()));
case 142:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnknownConsCall_Editor()));
case 143:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnknownDotCall_Editor()));
case 144:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnknownLocalCall_Editor()));
case 145:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnknownNameRef_Editor()));
case 146:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnknownNew_Editor()));
case 147:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UnresolvedNameReference_Editor()));
case 148:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UpperBoundType_Editor()));
case 149:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UsingStatement_Editor()));
case 150:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ValueParameter_Editor()));
case 151:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new VariableArityType_Editor()));
case 152:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new VariableReference_Editor()));
case 153:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Visibility_Editor()));
case 154:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WhileStatement_Editor()));
case 155:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WildCardType_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
