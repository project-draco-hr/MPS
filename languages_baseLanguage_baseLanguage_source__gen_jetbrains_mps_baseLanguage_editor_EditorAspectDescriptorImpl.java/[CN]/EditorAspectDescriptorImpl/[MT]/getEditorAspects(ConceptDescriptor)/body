{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return Collections.<EditorAspect>singletonList(new AbstractClassifierReference_Editor());
case 1:
  return Collections.<EditorAspect>singletonList(new AbstractCreator_Editor());
case 2:
return Collections.<EditorAspect>singletonList(new AbstractOperation_Editor());
case 3:
return Collections.<EditorAspect>singletonList(new AdditionalForLoopVariable_Editor());
case 4:
return Collections.<EditorAspect>singletonList(new Annotation_Editor());
case 5:
return Collections.<EditorAspect>singletonList(new AnnotationInstance_Editor());
case 6:
return Collections.<EditorAspect>singletonList(new AnnotationInstanceExpression_Editor());
case 7:
return Collections.<EditorAspect>singletonList(new AnnotationInstanceValue_Editor());
case 8:
return Collections.<EditorAspect>singletonList(new AnnotationMethodDeclaration_Editor());
case 9:
return Collections.<EditorAspect>singletonList(new AnonymousClass_Editor());
case 10:
return Collections.<EditorAspect>singletonList(new AnonymousClassCreator_Editor());
case 11:
return Collections.<EditorAspect>singletonList(new ArrayAccessExpression_Editor());
case 12:
return Collections.<EditorAspect>singletonList(new ArrayClassExpression_Editor());
case 13:
return Collections.<EditorAspect>singletonList(new ArrayCloneOperation_Editor());
case 14:
return Collections.<EditorAspect>singletonList(new ArrayCreator_Editor());
case 15:
return Collections.<EditorAspect>singletonList(new ArrayCreatorWithInitializer_Editor());
case 16:
return Collections.<EditorAspect>singletonList(new ArrayLengthOperation_Editor());
case 17:
return Collections.<EditorAspect>singletonList(new ArrayLiteral_Editor());
case 18:
return Collections.<EditorAspect>singletonList(new ArrayType_Editor());
case 19:
return Collections.<EditorAspect>singletonList(new AsExpression_Editor());
case 20:
return Collections.<EditorAspect>singletonList(new AssertStatement_Editor());
case 21:
return Collections.<EditorAspect>singletonList(new BLBottomType_Editor());
case 22:
return Collections.<EditorAspect>singletonList(new BaseAssignmentExpression_Editor());
case 23:
return Collections.<EditorAspect>singletonList(new BaseVariableDeclaration_Editor());
case 24:
return Collections.<EditorAspect>singletonList(new BaseVariableReference_Editor());
case 25:
return Collections.<EditorAspect>singletonList(new BinaryOperation_Editor());
case 26:
return Collections.<EditorAspect>singletonList(new BitwiseNotExpression_Editor());
case 27:
return Collections.<EditorAspect>singletonList(new BlockStatement_Editor());
case 28:
return Collections.<EditorAspect>singletonList(new BooleanConstant_Editor());
case 29:
return Collections.<EditorAspect>singletonList(new BreakStatement_Editor());
case 30:
return Collections.<EditorAspect>singletonList(new CastExpression_Editor());
case 31:
return Collections.<EditorAspect>singletonList(new CatchClause_Editor());
case 32:
return Collections.<EditorAspect>singletonList(new CharConstant_Editor());
case 33:
return Collections.<EditorAspect>singletonList(new ClassConcept_Editor());
case 34:
return Collections.<EditorAspect>singletonList(new ClassCreator_Editor());
case 35:
return Collections.<EditorAspect>singletonList(new ClassifierClassExpression_Editor());
case 36:
return Collections.<EditorAspect>singletonList(new ClassifierType_Editor());
case 37:
return Collections.<EditorAspect>singletonList(new ClosureParameter_Editor());
case 38:
return Collections.<EditorAspect>singletonList(new ClosureParameterReference_Editor());
case 39:
return Collections.<EditorAspect>singletonList(new CommentedStatement_Editor());
case 40:
return Collections.<EditorAspect>singletonList(new CommentedStatementsBlock_Editor());
case 41:
return Collections.<EditorAspect>singletonList(new ConceptFunction_Editor());
case 42:
return Collections.<EditorAspect>singletonList(new ConceptFunctionParameter_Editor());
case 43:
return Collections.<EditorAspect>singletonList(new ConstructorDeclaration_Editor());
case 44:
return Collections.<EditorAspect>singletonList(new ContinueStatement_Editor());
case 45:
return Collections.<EditorAspect>singletonList(new CustomPropertyImplementation_Editor());
case 46:
return Collections.<EditorAspect>singletonList(new DefaultClassCreator_Editor());
case 47:
return Collections.<EditorAspect>singletonList(new DefaultGetAccessor_Editor());
case 48:
return Collections.<EditorAspect>singletonList(new DefaultPropertyImplementation_Editor());
case 49:
return Collections.<EditorAspect>singletonList(new DefaultSetAccessor_Editor());
case 50:
return Collections.<EditorAspect>singletonList(new DimensionExpression_Editor());
case 51:
return Collections.<EditorAspect>singletonList(new DoWhileStatement_Editor());
case 52:
return Collections.<EditorAspect>singletonList(new DotExpression_Editor());
case 53:
return Collections.<EditorAspect>singletonList(new ElsifClause_Editor());
case 54:
return Collections.<EditorAspect>singletonList(new EnumClass_Editor());
case 55:
return Collections.<EditorAspect>singletonList(new EnumConstantDeclaration_Editor());
case 56:
return Collections.<EditorAspect>singletonList(new EnumConstantReference_Editor());
case 57:
return Collections.<EditorAspect>singletonList(new EnumValueOfExpression_Editor());
case 58:
return Collections.<EditorAspect>singletonList(new EnumValuesExpression_Editor());
case 59:
return Collections.<EditorAspect>singletonList(new EscapeOperation_Editor());
case 60:
return Collections.<EditorAspect>singletonList(new Expression_Editor());
case 61:
return Collections.<EditorAspect>singletonList(new ExpressionStatement_Editor());
case 62:
return Collections.<EditorAspect>singletonList(new FieldDeclaration_Editor());
case 63:
return Collections.<EditorAspect>singletonList(new FieldReferenceOperation_Editor());
case 64:
return Collections.<EditorAspect>singletonList(new FloatingPointConstant_Editor());
case 65:
return Collections.<EditorAspect>singletonList(new FloatingPointFloatConstant_Editor());
case 66:
return Collections.<EditorAspect>singletonList(new ForStatement_Editor());
case 67:
return Collections.<EditorAspect>singletonList(new ForeachStatement_Editor());
case 68:
return Collections.<EditorAspect>singletonList(new GenericNewExpression_Editor());
case 69:
return Collections.<EditorAspect>singletonList(new GetAccessor_Editor());
case 70:
return Collections.<EditorAspect>singletonList(new HexIntegerLiteral_Editor());
case 71:
return Collections.<EditorAspect>singletonList(new IfStatement_Editor());
case 72:
return Collections.<EditorAspect>singletonList(new ImplicitAnnotationInstanceValue_Editor());
case 73:
return Collections.<EditorAspect>singletonList(new IncompleteMemberDeclaration_Editor());
case 74:
return Collections.<EditorAspect>singletonList(new InstanceInitializer_Editor());
case 75:
return Collections.<EditorAspect>singletonList(new InstanceMethodCallOperation_Editor());
case 76:
return Collections.<EditorAspect>singletonList(new InstanceMethodDeclaration_Editor());
case 77:
return Collections.<EditorAspect>singletonList(new InstanceOfExpression_Editor());
case 78:
return Collections.<EditorAspect>singletonList(new IntegerConstant_Editor());
case 79:
return Collections.<EditorAspect>singletonList(new Interface_Editor());
case 80:
return Collections.<EditorAspect>singletonList(new JavaImport_Editor());
case 81:
return Collections.<EditorAspect>singletonList(new JavaImports_Editor());
case 82:
return Collections.<EditorAspect>singletonList(new LocalMethodCall_Editor());
case 83:
return Collections.<EditorAspect>singletonList(new LocalPropertyReference_Editor());
case 84:
return Collections.<EditorAspect>singletonList(new LocalVariableDeclaration_Editor());
case 85:
return Collections.<EditorAspect>singletonList(new LocalVariableDeclarationStatement_Editor());
case 86:
return Collections.<EditorAspect>singletonList(new LongLiteral_Editor());
case 87:
return Collections.<EditorAspect>singletonList(new LoopLabel_Editor());
case 88:
return Collections.<EditorAspect>singletonList(new LoopLabelReference_Editor());
case 89:
return Collections.<EditorAspect>singletonList(new LowerBoundType_Editor());
case 90:
return Collections.<EditorAspect>singletonList(new NotExpression_Editor());
case 91:
return Collections.<EditorAspect>singletonList(new NullLiteral_Editor());
case 92:
return Collections.<EditorAspect>singletonList(new Number_Editor());
case 93:
return Collections.<EditorAspect>singletonList(new ParameterDeclaration_Editor());
case 94:
return Collections.<EditorAspect>singletonList(new ParenthesizedExpression_Editor());
case 95:
return Collections.<EditorAspect>singletonList(new PlaceholderMember_Editor());
case 96:
return Collections.<EditorAspect>singletonList(new PlaceholderMethodDeclaration_Editor());
case 97:
return Collections.<EditorAspect>singletonList(new PostfixDecrementExpression_Editor());
case 98:
return Collections.<EditorAspect>singletonList(new PostfixIncrementExpression_Editor());
case 99:
return Collections.<EditorAspect>singletonList(new PrefixDecrementExpression_Editor());
case 100:
return Collections.<EditorAspect>singletonList(new PrefixIncrementExpression_Editor());
case 101:
return Collections.<EditorAspect>singletonList(new PrimitiveClassExpression_Editor());
case 102:
return Collections.<EditorAspect>singletonList(new Property_Editor());
case 103:
return Collections.<EditorAspect>singletonList(new PropertyReference_Editor());
case 104:
return Collections.<EditorAspect>singletonList(new RemarkStatement_Editor());
case 105:
return Collections.<EditorAspect>singletonList(new ReturnStatement_Editor());
case 106:
return Collections.<EditorAspect>singletonList(new SetAccessor_Editor());
case 107:
return Collections.<EditorAspect>singletonList(new SingleLineComment_Editor());
case 108:
return Collections.<EditorAspect>singletonList(new Statement_Editor());
case 109:
return Collections.<EditorAspect>singletonList(new StatementCommentPart_Editor());
case 110:
return Collections.<EditorAspect>singletonList(new StatementList_Editor());
case 111:
return Collections.<EditorAspect>singletonList(new StaticFieldDeclaration_Editor());
case 112:
return Collections.<EditorAspect>singletonList(new StaticFieldReference_Editor());
case 113:
return Collections.<EditorAspect>singletonList(new StaticInitializer_Editor());
case 114:
return Collections.<EditorAspect>singletonList(new StaticMethodCall_Editor());
case 115:
return Collections.<EditorAspect>singletonList(new StaticMethodDeclaration_Editor());
case 116:
return Collections.<EditorAspect>singletonList(new StringBooleanOperation_Editor());
case 117:
return Collections.<EditorAspect>singletonList(new StringLiteral_Editor());
case 118:
return Collections.<EditorAspect>singletonList(new StringToken_Editor());
case 119:
return Collections.<EditorAspect>singletonList(new StubStatementList_Editor());
case 120:
return Collections.<EditorAspect>singletonList(new SubstringExpression_Editor());
case 121:
return Collections.<EditorAspect>singletonList(new SuperConstructorInvocation_Editor());
case 122:
return Collections.<EditorAspect>singletonList(new SuperMethodCall_Editor());
case 123:
return Collections.<EditorAspect>singletonList(new SwitchCase_Editor());
case 124:
return Collections.<EditorAspect>singletonList(new SwitchStatement_Editor());
case 125:
return Collections.<EditorAspect>singletonList(new SynchronizedStatement_Editor());
case 126:
return Collections.<EditorAspect>singletonList(new TernaryOperatorExpression_Editor());
case 127:
return Collections.<EditorAspect>singletonList(new TextCommentPart_Editor());
case 128:
return Collections.<EditorAspect>singletonList(new ThisConstructorInvocation_Editor());
case 129:
return Collections.<EditorAspect>singletonList(new ThisExpression_Editor());
case 130:
return Collections.<EditorAspect>singletonList(new ThrowStatement_Editor());
case 131:
return Collections.<EditorAspect>singletonList(new TrimOperation_Editor());
case 132:
return Collections.<EditorAspect>singletonList(new TryCatchStatement_Editor());
case 133:
return Collections.<EditorAspect>singletonList(new TryStatement_Editor());
case 134:
return Collections.<EditorAspect>singletonList(new Type_Editor());
case 135:
return Collections.<EditorAspect>singletonList(new TypeVariableDeclaration_Editor());
case 136:
return Collections.<EditorAspect>singletonList(new TypeVariableReference_Editor());
case 137:
return Collections.<EditorAspect>singletonList(new UnaryMinus_Editor());
case 138:
return Collections.<EditorAspect>singletonList(new UndefinedType_Editor());
case 139:
return Collections.<EditorAspect>singletonList(new UnknownConsCall_Editor());
case 140:
return Collections.<EditorAspect>singletonList(new UnknownDotCall_Editor());
case 141:
return Collections.<EditorAspect>singletonList(new UnknownLocalCall_Editor());
case 142:
return Collections.<EditorAspect>singletonList(new UnknownNameRef_Editor());
case 143:
return Collections.<EditorAspect>singletonList(new UnknownNew_Editor());
case 144:
return Collections.<EditorAspect>singletonList(new UnresolvedNameReference_Editor());
case 145:
return Collections.<EditorAspect>singletonList(new UpperBoundType_Editor());
case 146:
return Collections.<EditorAspect>singletonList(new UsingStatement_Editor());
case 147:
return Collections.<EditorAspect>singletonList(new ValueParameter_Editor());
case 148:
return Collections.<EditorAspect>singletonList(new VariableArityType_Editor());
case 149:
return Collections.<EditorAspect>singletonList(new VariableReference_Editor());
case 150:
return Collections.<EditorAspect>singletonList(new Visibility_Editor());
case 151:
return Collections.<EditorAspect>singletonList(new WhileStatement_Editor());
case 152:
return Collections.<EditorAspect>singletonList(new WildCardType_Editor());
default :
}
return Collections.emptyList();
}
