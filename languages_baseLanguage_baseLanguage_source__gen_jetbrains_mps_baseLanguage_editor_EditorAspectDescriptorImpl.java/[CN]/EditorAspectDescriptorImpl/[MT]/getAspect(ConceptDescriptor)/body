{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbstractClassifierReference_Editor();
case 1:
  return new AbstractCreator_Editor();
case 2:
return new AbstractOperation_Editor();
case 3:
return new AdditionalForLoopVariable_Editor();
case 4:
return new Annotation_Editor();
case 5:
return new AnnotationInstance_Editor();
case 6:
return new AnnotationInstanceExpression_Editor();
case 7:
return new AnnotationInstanceValue_Editor();
case 8:
return new AnnotationMethodDeclaration_Editor();
case 9:
return new AnonymousClass_Editor();
case 10:
return new AnonymousClassCreator_Editor();
case 11:
return new ArrayAccessExpression_Editor();
case 12:
return new ArrayClassExpression_Editor();
case 13:
return new ArrayCloneOperation_Editor();
case 14:
return new ArrayCreator_Editor();
case 15:
return new ArrayCreatorWithInitializer_Editor();
case 16:
return new ArrayLengthOperation_Editor();
case 17:
return new ArrayLiteral_Editor();
case 18:
return new ArrayType_Editor();
case 19:
return new AsExpression_Editor();
case 20:
return new AssertStatement_Editor();
case 21:
return new BLBottomType_Editor();
case 22:
return new BaseAssignmentExpression_Editor();
case 23:
return new BaseVariableDeclaration_Editor();
case 24:
return new BaseVariableReference_Editor();
case 25:
return new BinaryOperation_Editor();
case 26:
return new BitwiseNotExpression_Editor();
case 27:
return new BlockStatement_Editor();
case 28:
return new BooleanConstant_Editor();
case 29:
return new BreakStatement_Editor();
case 30:
return new CastExpression_Editor();
case 31:
return new CatchClause_Editor();
case 32:
return new CharConstant_Editor();
case 33:
return new ClassConcept_Editor();
case 34:
return new ClassCreator_Editor();
case 35:
return new ClassifierClassExpression_Editor();
case 36:
return new ClassifierType_Editor();
case 37:
return new ClosureParameter_Editor();
case 38:
return new ClosureParameterReference_Editor();
case 39:
return new CommentedStatement_Editor();
case 40:
return new CommentedStatementsBlock_Editor();
case 41:
return new ConceptFunction_Editor();
case 42:
return new ConceptFunctionParameter_Editor();
case 43:
return new ConstructorDeclaration_Editor();
case 44:
return new ContinueStatement_Editor();
case 45:
return new CustomPropertyImplementation_Editor();
case 46:
return new DefaultClassCreator_Editor();
case 47:
return new DefaultGetAccessor_Editor();
case 48:
return new DefaultPropertyImplementation_Editor();
case 49:
return new DefaultSetAccessor_Editor();
case 50:
return new DimensionExpression_Editor();
case 51:
return new DoWhileStatement_Editor();
case 52:
return new DotExpression_Editor();
case 53:
return new ElsifClause_Editor();
case 54:
return new EnumClass_Editor();
case 55:
return new EnumConstantDeclaration_Editor();
case 56:
return new EnumConstantReference_Editor();
case 57:
return new EnumValueOfExpression_Editor();
case 58:
return new EnumValuesExpression_Editor();
case 59:
return new EscapeOperation_Editor();
case 60:
return new Expression_Editor();
case 61:
return new ExpressionStatement_Editor();
case 62:
return new FieldDeclaration_Editor();
case 63:
return new FieldReferenceOperation_Editor();
case 64:
return new FloatingPointConstant_Editor();
case 65:
return new FloatingPointFloatConstant_Editor();
case 66:
return new ForStatement_Editor();
case 67:
return new ForeachStatement_Editor();
case 68:
return new GenericNewExpression_Editor();
case 69:
return new GetAccessor_Editor();
case 70:
return new HexIntegerLiteral_Editor();
case 71:
return new IfStatement_Editor();
case 72:
return new ImplicitAnnotationInstanceValue_Editor();
case 73:
return new IncompleteMemberDeclaration_Editor();
case 74:
return new InstanceInitializer_Editor();
case 75:
return new InstanceMethodCallOperation_Editor();
case 76:
return new InstanceMethodDeclaration_Editor();
case 77:
return new InstanceOfExpression_Editor();
case 78:
return new IntegerConstant_Editor();
case 79:
return new Interface_Editor();
case 80:
return new JavaImport_Editor();
case 81:
return new JavaImports_Editor();
case 82:
return new LocalMethodCall_Editor();
case 83:
return new LocalPropertyReference_Editor();
case 84:
return new LocalVariableDeclaration_Editor();
case 85:
return new LocalVariableDeclarationStatement_Editor();
case 86:
return new LongLiteral_Editor();
case 87:
return new LoopLabel_Editor();
case 88:
return new LoopLabelReference_Editor();
case 89:
return new LowerBoundType_Editor();
case 90:
return new NotExpression_Editor();
case 91:
return new NullLiteral_Editor();
case 92:
return new Number_Editor();
case 93:
return new ParameterDeclaration_Editor();
case 94:
return new ParenthesizedExpression_Editor();
case 95:
return new PlaceholderMember_Editor();
case 96:
return new PlaceholderMethodDeclaration_Editor();
case 97:
return new PostfixDecrementExpression_Editor();
case 98:
return new PostfixIncrementExpression_Editor();
case 99:
return new PrefixDecrementExpression_Editor();
case 100:
return new PrefixIncrementExpression_Editor();
case 101:
return new PrimitiveClassExpression_Editor();
case 102:
return new Property_Editor();
case 103:
return new PropertyReference_Editor();
case 104:
return new RemarkStatement_Editor();
case 105:
return new ReturnStatement_Editor();
case 106:
return new SetAccessor_Editor();
case 107:
return new SingleLineComment_Editor();
case 108:
return new Statement_Editor();
case 109:
return new StatementCommentPart_Editor();
case 110:
return new StatementList_Editor();
case 111:
return new StaticFieldDeclaration_Editor();
case 112:
return new StaticFieldReference_Editor();
case 113:
return new StaticInitializer_Editor();
case 114:
return new StaticMethodCall_Editor();
case 115:
return new StaticMethodDeclaration_Editor();
case 116:
return new StringBooleanOperation_Editor();
case 117:
return new StringLiteral_Editor();
case 118:
return new StringToken_Editor();
case 119:
return new StubStatementList_Editor();
case 120:
return new SubstringExpression_Editor();
case 121:
return new SuperConstructorInvocation_Editor();
case 122:
return new SuperMethodCall_Editor();
case 123:
return new SwitchCase_Editor();
case 124:
return new SwitchStatement_Editor();
case 125:
return new SynchronizedStatement_Editor();
case 126:
return new TernaryOperatorExpression_Editor();
case 127:
return new TextCommentPart_Editor();
case 128:
return new ThisConstructorInvocation_Editor();
case 129:
return new ThisExpression_Editor();
case 130:
return new ThrowStatement_Editor();
case 131:
return new TrimOperation_Editor();
case 132:
return new TryCatchStatement_Editor();
case 133:
return new TryStatement_Editor();
case 134:
return new Type_Editor();
case 135:
return new TypeVariableDeclaration_Editor();
case 136:
return new TypeVariableReference_Editor();
case 137:
return new UnaryMinus_Editor();
case 138:
return new UndefinedType_Editor();
case 139:
return new UnknownConsCall_Editor();
case 140:
return new UnknownDotCall_Editor();
case 141:
return new UnknownLocalCall_Editor();
case 142:
return new UnknownNameRef_Editor();
case 143:
return new UnknownNew_Editor();
case 144:
return new UnresolvedNameReference_Editor();
case 145:
return new UpperBoundType_Editor();
case 146:
return new UsingStatement_Editor();
case 147:
return new ValueParameter_Editor();
case 148:
return new VariableArityType_Editor();
case 149:
return new VariableReference_Editor();
case 150:
return new Visibility_Editor();
case 151:
return new WhileStatement_Editor();
case 152:
return new WildCardType_Editor();
default :
}
return null;
}
