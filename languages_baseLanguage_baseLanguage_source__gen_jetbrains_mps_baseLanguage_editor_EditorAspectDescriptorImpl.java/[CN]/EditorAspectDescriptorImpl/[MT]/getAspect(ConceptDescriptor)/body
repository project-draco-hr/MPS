{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0xf,descriptor.getConceptFqName())) {
case 0:
    return getAbstractClassifierReferenceEditorAspect();
case 1:
  return getAbstractCreatorEditorAspect();
case 2:
return getAbstractOperationEditorAspect();
case 3:
return getAdditionalForLoopVariableEditorAspect();
case 4:
return getAnnotationEditorAspect();
case 5:
return getAnnotationInstanceEditorAspect();
case 6:
return getAnnotationInstanceExpressionEditorAspect();
case 7:
return getAnnotationInstanceValueEditorAspect();
case 8:
return getAnnotationMethodDeclarationEditorAspect();
case 9:
return getAnonymousClassEditorAspect();
case 10:
return getAnonymousClassCreatorEditorAspect();
case 11:
return getArrayAccessExpressionEditorAspect();
case 12:
return getArrayClassExpressionEditorAspect();
case 13:
return getArrayCloneOperationEditorAspect();
case 14:
return getArrayCreatorEditorAspect();
case 15:
return getArrayCreatorWithInitializerEditorAspect();
case 16:
return getArrayLengthOperationEditorAspect();
case 17:
return getArrayLiteralEditorAspect();
case 18:
return getArrayTypeEditorAspect();
case 19:
return getAsExpressionEditorAspect();
case 20:
return getAssertStatementEditorAspect();
case 21:
return getBLBottomTypeEditorAspect();
case 22:
return getBaseAssignmentExpressionEditorAspect();
case 23:
return getBaseVariableDeclarationEditorAspect();
case 24:
return getBaseVariableReferenceEditorAspect();
case 25:
return getBinaryOperationEditorAspect();
case 26:
return getBitwiseNotExpressionEditorAspect();
case 27:
return getBlockStatementEditorAspect();
case 28:
return getBooleanConstantEditorAspect();
case 29:
return getBreakStatementEditorAspect();
case 30:
return getCastExpressionEditorAspect();
case 31:
return getCatchClauseEditorAspect();
case 32:
return getCharConstantEditorAspect();
case 33:
return getClassConceptEditorAspect();
case 34:
return getClassCreatorEditorAspect();
case 35:
return getClassifierClassExpressionEditorAspect();
case 36:
return getClassifierTypeEditorAspect();
case 37:
return getClosureParameterEditorAspect();
case 38:
return getClosureParameterReferenceEditorAspect();
case 39:
return getCommentedStatementEditorAspect();
case 40:
return getCommentedStatementsBlockEditorAspect();
case 41:
return getConceptFunctionEditorAspect();
case 42:
return getConceptFunctionParameterEditorAspect();
case 43:
return getConstructorDeclarationEditorAspect();
case 44:
return getContinueStatementEditorAspect();
case 45:
return getCustomPropertyImplementationEditorAspect();
case 46:
return getDefaultClassCreatorEditorAspect();
case 47:
return getDefaultGetAccessorEditorAspect();
case 48:
return getDefaultPropertyImplementationEditorAspect();
case 49:
return getDefaultSetAccessorEditorAspect();
case 50:
return getDimensionExpressionEditorAspect();
case 51:
return getDoWhileStatementEditorAspect();
case 52:
return getDotExpressionEditorAspect();
case 53:
return getElsifClauseEditorAspect();
case 54:
return getEnumClassEditorAspect();
case 55:
return getEnumConstantDeclarationEditorAspect();
case 56:
return getEnumConstantReferenceEditorAspect();
case 57:
return getEnumValueOfExpressionEditorAspect();
case 58:
return getEnumValuesExpressionEditorAspect();
case 59:
return getEscapeOperationEditorAspect();
case 60:
return getExpressionEditorAspect();
case 61:
return getExpressionStatementEditorAspect();
case 62:
return getFieldDeclarationEditorAspect();
case 63:
return getFieldReferenceOperationEditorAspect();
case 64:
return getFloatingPointConstantEditorAspect();
case 65:
return getFloatingPointFloatConstantEditorAspect();
case 66:
return getForStatementEditorAspect();
case 67:
return getForeachStatementEditorAspect();
case 68:
return getGenericNewExpressionEditorAspect();
case 69:
return getGetAccessorEditorAspect();
case 70:
return getHexIntegerLiteralEditorAspect();
case 71:
return getIfStatementEditorAspect();
case 72:
return getImplicitAnnotationInstanceValueEditorAspect();
case 73:
return getIncompleteMemberDeclarationEditorAspect();
case 74:
return getInstanceInitializerEditorAspect();
case 75:
return getInstanceMethodCallOperationEditorAspect();
case 76:
return getInstanceMethodDeclarationEditorAspect();
case 77:
return getInstanceOfExpressionEditorAspect();
case 78:
return getIntegerConstantEditorAspect();
case 79:
return getInterfaceEditorAspect();
case 80:
return getJavaImportEditorAspect();
case 81:
return getJavaImportsEditorAspect();
case 82:
return getLocalMethodCallEditorAspect();
case 83:
return getLocalPropertyReferenceEditorAspect();
case 84:
return getLocalVariableDeclarationEditorAspect();
case 85:
return getLocalVariableDeclarationStatementEditorAspect();
case 86:
return getLongLiteralEditorAspect();
case 87:
return getLoopLabelEditorAspect();
case 88:
return getLoopLabelReferenceEditorAspect();
case 89:
return getLowerBoundTypeEditorAspect();
case 90:
return getNotExpressionEditorAspect();
case 91:
return getNullLiteralEditorAspect();
case 92:
return getNumberEditorAspect();
case 93:
return getParameterDeclarationEditorAspect();
case 94:
return getParenthesizedExpressionEditorAspect();
case 95:
return getPlaceholderMemberEditorAspect();
case 96:
return getPlaceholderMethodDeclarationEditorAspect();
case 97:
return getPostfixDecrementExpressionEditorAspect();
case 98:
return getPostfixIncrementExpressionEditorAspect();
case 99:
return getPrefixDecrementExpressionEditorAspect();
case 100:
return getPrefixIncrementExpressionEditorAspect();
case 101:
return getPrimitiveClassExpressionEditorAspect();
case 102:
return getPropertyEditorAspect();
case 103:
return getPropertyReferenceEditorAspect();
case 104:
return getRemarkStatementEditorAspect();
case 105:
return getReturnStatementEditorAspect();
case 106:
return getSetAccessorEditorAspect();
case 107:
return getSingleLineCommentEditorAspect();
case 108:
return getStatementEditorAspect();
case 109:
return getStatementCommentPartEditorAspect();
case 110:
return getStatementListEditorAspect();
case 111:
return getStaticFieldDeclarationEditorAspect();
case 112:
return getStaticFieldReferenceEditorAspect();
case 113:
return getStaticInitializerEditorAspect();
case 114:
return getStaticMethodCallEditorAspect();
case 115:
return getStaticMethodDeclarationEditorAspect();
case 116:
return getStringBooleanOperationEditorAspect();
case 117:
return getStringLiteralEditorAspect();
case 118:
return getStringTokenEditorAspect();
case 119:
return getStubStatementListEditorAspect();
case 120:
return getSubstringExpressionEditorAspect();
case 121:
return getSuperConstructorInvocationEditorAspect();
case 122:
return getSuperMethodCallEditorAspect();
case 123:
return getSwitchCaseEditorAspect();
case 124:
return getSwitchStatementEditorAspect();
case 125:
return getSynchronizedStatementEditorAspect();
case 126:
return getTernaryOperatorExpressionEditorAspect();
case 127:
return getTextCommentPartEditorAspect();
case 128:
return getThisConstructorInvocationEditorAspect();
case 129:
return getThisExpressionEditorAspect();
case 130:
return getThrowStatementEditorAspect();
case 131:
return getTrimOperationEditorAspect();
case 132:
return getTryCatchStatementEditorAspect();
case 133:
return getTryStatementEditorAspect();
case 134:
return getTypeEditorAspect();
case 135:
return getTypeVariableDeclarationEditorAspect();
case 136:
return getTypeVariableReferenceEditorAspect();
case 137:
return getUnaryMinusEditorAspect();
case 138:
return getUndefinedTypeEditorAspect();
case 139:
return getUnknownConsCallEditorAspect();
case 140:
return getUnknownDotCallEditorAspect();
case 141:
return getUnknownLocalCallEditorAspect();
case 142:
return getUnknownNameRefEditorAspect();
case 143:
return getUnknownNewEditorAspect();
case 144:
return getUnresolvedNameReferenceEditorAspect();
case 145:
return getUpperBoundTypeEditorAspect();
case 146:
return getUsingStatementEditorAspect();
case 147:
return getValueParameterEditorAspect();
case 148:
return getVariableArityTypeEditorAspect();
case 149:
return getVariableReferenceEditorAspect();
case 150:
return getVisibilityEditorAspect();
case 151:
return getWhileStatementEditorAspect();
case 152:
return getWildCardTypeEditorAspect();
default :
}
return null;
}
