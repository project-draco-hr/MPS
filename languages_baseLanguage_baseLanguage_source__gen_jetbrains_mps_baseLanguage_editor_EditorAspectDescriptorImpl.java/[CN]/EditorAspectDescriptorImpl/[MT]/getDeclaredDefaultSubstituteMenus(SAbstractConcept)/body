{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_xbvbvu_a0i.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<SubstituteMenu>singletonList(new AbstractCreator_SubstituteMenu());
      }
    break;
case 1:
  if (true) {
    return Collections.<SubstituteMenu>singletonList(new AnnotationInstanceExpression_SubstituteMenu());
  }
break;
case 2:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AnnotationInstanceValue_SubstituteMenu());
}
break;
case 3:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AnonymousClass_SubstituteMenu());
}
break;
case 4:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AnonymousClassCreator_SubstituteMenu());
}
break;
case 5:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ArrayLiteral_SubstituteMenu());
}
break;
case 6:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ArrayType_SubstituteMenu());
}
break;
case 7:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AsExpression_SubstituteMenu());
}
break;
case 8:
if (true) {
return Collections.<SubstituteMenu>singletonList(new BLBottomType_SubstituteMenu());
}
break;
case 9:
if (true) {
return Collections.<SubstituteMenu>singletonList(new BooleanConstant_SubstituteMenu());
}
break;
case 10:
if (true) {
return Collections.<SubstituteMenu>singletonList(new BreakStatement_SubstituteMenu());
}
break;
case 11:
if (true) {
return Collections.<SubstituteMenu>singletonList(new CastExpression_SubstituteMenu());
}
break;
case 12:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ClassifierClassExpression_SubstituteMenu());
}
break;
case 13:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ClassifierMember_SubstituteMenu());
}
break;
case 14:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ClassifierType_SubstituteMenu());
}
break;
case 15:
if (true) {
return Collections.<SubstituteMenu>singletonList(new CommentedStatement_SubstituteMenu());
}
break;
case 16:
if (true) {
return Collections.<SubstituteMenu>singletonList(new CommentedStatementsBlock_SubstituteMenu());
}
break;
case 17:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_SubstituteMenu());
}
break;
case 18:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ContinueStatement_SubstituteMenu());
}
break;
case 19:
if (true) {
return Collections.<SubstituteMenu>singletonList(new DotExpression_SubstituteMenu());
}
break;
case 20:
if (true) {
return Collections.<SubstituteMenu>singletonList(new EnumValueOfExpression_SubstituteMenu());
}
break;
case 21:
if (true) {
return Collections.<SubstituteMenu>singletonList(new EnumValuesExpression_SubstituteMenu());
}
break;
case 22:
if (true) {
return Collections.<SubstituteMenu>singletonList(new Expression_SubstituteMenu());
}
break;
case 23:
if (true) {
return Collections.<SubstituteMenu>singletonList(new FloatingPointConstant_SubstituteMenu());
}
break;
case 24:
if (true) {
return Collections.<SubstituteMenu>singletonList(new FloatingPointFloatConstant_SubstituteMenu());
}
break;
case 25:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IfStatement_SubstituteMenu());
}
break;
case 26:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ImplicitAnnotationInstanceValue_SubstituteMenu());
}
break;
case 27:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IncompleteMemberDeclaration_SubstituteMenu());
}
break;
case 28:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IntegerConstant_SubstituteMenu());
}
break;
case 29:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalInstanceFieldReference_SubstituteMenu());
}
break;
case 30:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalInstanceMethodCall_SubstituteMenu());
}
break;
case 31:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalStaticFieldReference_SubstituteMenu());
}
break;
case 32:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalStaticMethodCall_SubstituteMenu());
}
break;
case 33:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalVariableDeclaration_SubstituteMenu());
}
break;
case 34:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LocalVariableReference_SubstituteMenu());
}
break;
case 35:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LongLiteral_SubstituteMenu());
}
break;
case 36:
if (true) {
return Collections.<SubstituteMenu>singletonList(new NullType_SubstituteMenu());
}
break;
case 37:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ParameterDeclaration_SubstituteMenu());
}
break;
case 38:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ParameterReference_SubstituteMenu());
}
break;
case 39:
if (true) {
return Collections.<SubstituteMenu>singletonList(new PlaceholderMember_SubstituteMenu());
}
break;
case 40:
if (true) {
return Collections.<SubstituteMenu>singletonList(new PrimitiveClassExpression_SubstituteMenu());
}
break;
case 41:
if (true) {
return Collections.<SubstituteMenu>singletonList(new RemarkStatement_SubstituteMenu());
}
break;
case 42:
if (true) {
return Collections.<SubstituteMenu>singletonList(new Statement_SubstituteMenu());
}
break;
case 43:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StatementCommentPart_SubstituteMenu());
}
break;
case 44:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StatementList_SubstituteMenu());
}
break;
case 45:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StaticFieldDeclaration_SubstituteMenu());
}
break;
case 46:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StaticMethodDeclaration_SubstituteMenu());
}
break;
case 47:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StringLiteral_SubstituteMenu());
}
break;
case 48:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StringToken_SubstituteMenu());
}
break;
case 49:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StubStatementList_SubstituteMenu());
}
break;
case 50:
if (true) {
return Collections.<SubstituteMenu>singletonList(new SubstringExpression_SubstituteMenu());
}
break;
case 51:
if (true) {
return Collections.<SubstituteMenu>singletonList(new SuperConstructorInvocation_SubstituteMenu());
}
break;
case 52:
if (true) {
return Collections.<SubstituteMenu>singletonList(new TextCommentPart_SubstituteMenu());
}
break;
case 53:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ThisConstructorInvocation_SubstituteMenu());
}
break;
case 54:
if (true) {
return Collections.<SubstituteMenu>singletonList(new Type_SubstituteMenu());
}
break;
case 55:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UndefinedType_SubstituteMenu());
}
break;
case 56:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnknownConsCall_SubstituteMenu());
}
break;
case 57:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnknownDotCall_SubstituteMenu());
}
break;
case 58:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnknownLocalCall_SubstituteMenu());
}
break;
case 59:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnknownNameRef_SubstituteMenu());
}
break;
case 60:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnknownNew_SubstituteMenu());
}
break;
case 61:
if (true) {
return Collections.<SubstituteMenu>singletonList(new UnresolvedNameReference_SubstituteMenu());
}
break;
case 62:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ValueParameter_SubstituteMenu());
}
break;
case 63:
if (true) {
return Collections.<SubstituteMenu>singletonList(new Visibility_SubstituteMenu());
}
break;
default :
}
}
return Collections.<SubstituteMenu>emptyList();
}
