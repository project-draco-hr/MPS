{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractClassifierReference_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AbstractCreator_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new AdditionalForLoopVariable_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new Annotation_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnnotationInstance_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnnotationInstanceExpression_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnnotationInstanceValue_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnnotationMethodDeclaration_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnonymousClass_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new AnonymousClassCreator_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayAccessExpression_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayClassExpression_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayCloneOperation_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayCreator_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayCreatorWithInitializer_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayLengthOperation_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayLiteral_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new ArrayType_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new AsExpression_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new AssertStatement_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new BLBottomType_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new BaseAssignmentExpression_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new BaseVariableDeclaration_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new BaseVariableReference_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new BitwiseNotExpression_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new BlockStatement_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new BooleanConstant_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new BreakStatement_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new CastExpression_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new CatchClause_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new CharConstant_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClassConcept_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClassCreator_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClassifierClassExpression_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClassifierType_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClosureParameter_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClosureParameterReference_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new CommentedStatement_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new CommentedStatementsBlock_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptFunction_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptFunctionParameter_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConstructorDeclaration_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new ContinueStatement_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomPropertyImplementation_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomSetterPropertyImplementation_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultClassCreator_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultGetAccessor_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultPropertyImplementation_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultSetAccessor_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new DimensionExpression_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new DoWhileStatement_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new DotExpression_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new ElsifClause_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumClass_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumConstantDeclaration_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumConstantReference_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumValueOfExpression_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumValuesExpression_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new EscapeOperation_Editor());
}
break;
case 61:
if (true) {
return Arrays.asList(new ConceptEditor[]{new Expression_Editor(),new Expression_VisibleExpressionBoundaries_Editor()});
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExpressionStatement_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new FieldDeclaration_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new FieldReferenceOperation_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new FloatingPointConstant_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new FloatingPointFloatConstant_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForStatement_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForeachStatement_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenericNewExpression_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetAccessor_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new HexIntegerLiteral_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new ImplicitAnnotationInstanceValue_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncompleteLeftParen_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncompleteMemberDeclaration_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncompleteRightParen_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new InstanceInitializer_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new InstanceMethodCallOperation_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new InstanceMethodDeclaration_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new InstanceOfExpression_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new Interface_Editor());
}
break;
case 83:
if (true) {
return Collections.<ConceptEditor>singletonList(new JavaImport_Editor());
}
break;
case 84:
if (true) {
return Collections.<ConceptEditor>singletonList(new JavaImports_Editor());
}
break;
case 85:
if (true) {
return Collections.<ConceptEditor>singletonList(new LocalMethodCall_Editor());
}
break;
case 86:
if (true) {
return Collections.<ConceptEditor>singletonList(new LocalPropertyReference_Editor());
}
break;
case 87:
if (true) {
return Collections.<ConceptEditor>singletonList(new LocalVariableDeclaration_Editor());
}
break;
case 88:
if (true) {
return Collections.<ConceptEditor>singletonList(new LocalVariableDeclarationStatement_Editor());
}
break;
case 89:
if (true) {
return Collections.<ConceptEditor>singletonList(new LongLiteral_Editor());
}
break;
case 90:
if (true) {
return Collections.<ConceptEditor>singletonList(new LoopLabel_Editor());
}
break;
case 91:
if (true) {
return Collections.<ConceptEditor>singletonList(new LoopLabelReference_Editor());
}
break;
case 92:
if (true) {
return Collections.<ConceptEditor>singletonList(new LowerBoundType_Editor());
}
break;
case 93:
if (true) {
return Collections.<ConceptEditor>singletonList(new NestedNewExpression_Editor());
}
break;
case 94:
if (true) {
return Collections.<ConceptEditor>singletonList(new NotExpression_Editor());
}
break;
case 95:
if (true) {
return Collections.<ConceptEditor>singletonList(new NullLiteral_Editor());
}
break;
case 96:
if (true) {
return Collections.<ConceptEditor>singletonList(new Number_Editor());
}
break;
case 97:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParameterDeclaration_Editor());
}
break;
case 98:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParenthesizedExpression_Editor());
}
break;
case 99:
if (true) {
return Collections.<ConceptEditor>singletonList(new PlaceholderMember_Editor());
}
break;
case 100:
if (true) {
return Collections.<ConceptEditor>singletonList(new PostfixDecrementExpression_Editor());
}
break;
case 101:
if (true) {
return Collections.<ConceptEditor>singletonList(new PostfixIncrementExpression_Editor());
}
break;
case 102:
if (true) {
return Collections.<ConceptEditor>singletonList(new PrefixDecrementExpression_Editor());
}
break;
case 103:
if (true) {
return Collections.<ConceptEditor>singletonList(new PrefixIncrementExpression_Editor());
}
break;
case 104:
if (true) {
return Collections.<ConceptEditor>singletonList(new PrimitiveClassExpression_Editor());
}
break;
case 105:
if (true) {
return Collections.<ConceptEditor>singletonList(new Property_Editor());
}
break;
case 106:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyReference_Editor());
}
break;
case 107:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyValueReference_Editor());
}
break;
case 108:
if (true) {
return Collections.<ConceptEditor>singletonList(new QualifiedSuperMethodCall_Editor());
}
break;
case 109:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemarkStatement_Editor());
}
break;
case 110:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReturnStatement_Editor());
}
break;
case 111:
if (true) {
return Collections.<ConceptEditor>singletonList(new SetAccessor_Editor());
}
break;
case 112:
if (true) {
return Collections.<ConceptEditor>singletonList(new SingleLineComment_Editor());
}
break;
case 113:
if (true) {
return Arrays.asList(new ConceptEditor[]{new Statement_Editor(),new Statement_comment_Editor()});
}
break;
case 114:
if (true) {
return Collections.<ConceptEditor>singletonList(new StatementCommentPart_Editor());
}
break;
case 115:
if (true) {
return Collections.<ConceptEditor>singletonList(new StatementList_Editor());
}
break;
case 116:
if (true) {
return Collections.<ConceptEditor>singletonList(new StaticFieldDeclaration_Editor());
}
break;
case 117:
if (true) {
return Collections.<ConceptEditor>singletonList(new StaticFieldReference_Editor());
}
break;
case 118:
if (true) {
return Collections.<ConceptEditor>singletonList(new StaticInitializer_Editor());
}
break;
case 119:
if (true) {
return Collections.<ConceptEditor>singletonList(new StaticMethodCall_Editor());
}
break;
case 120:
if (true) {
return Collections.<ConceptEditor>singletonList(new StaticMethodDeclaration_Editor());
}
break;
case 121:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringBooleanOperation_Editor());
}
break;
case 122:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
}
break;
case 123:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringToken_Editor());
}
break;
case 124:
if (true) {
return Collections.<ConceptEditor>singletonList(new StubStatementList_Editor());
}
break;
case 125:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstringExpression_Editor());
}
break;
case 126:
if (true) {
return Collections.<ConceptEditor>singletonList(new SuperConstructorInvocation_Editor());
}
break;
case 127:
if (true) {
return Collections.<ConceptEditor>singletonList(new SuperMethodCall_Editor());
}
break;
case 128:
if (true) {
return Collections.<ConceptEditor>singletonList(new SwitchCase_Editor());
}
break;
case 129:
if (true) {
return Collections.<ConceptEditor>singletonList(new SwitchStatement_Editor());
}
break;
case 130:
if (true) {
return Collections.<ConceptEditor>singletonList(new SynchronizedStatement_Editor());
}
break;
case 131:
if (true) {
return Collections.<ConceptEditor>singletonList(new TernaryOperatorExpression_Editor());
}
break;
case 132:
if (true) {
return Collections.<ConceptEditor>singletonList(new TextCommentPart_Editor());
}
break;
case 133:
if (true) {
return Collections.<ConceptEditor>singletonList(new ThisConstructorInvocation_Editor());
}
break;
case 134:
if (true) {
return Collections.<ConceptEditor>singletonList(new ThisExpression_Editor());
}
break;
case 135:
if (true) {
return Collections.<ConceptEditor>singletonList(new ThrowStatement_Editor());
}
break;
case 136:
if (true) {
return Collections.<ConceptEditor>singletonList(new TrimOperation_Editor());
}
break;
case 137:
if (true) {
return Collections.<ConceptEditor>singletonList(new TryCatchStatement_Editor());
}
break;
case 138:
if (true) {
return Collections.<ConceptEditor>singletonList(new TryStatement_Editor());
}
break;
case 139:
if (true) {
return Collections.<ConceptEditor>singletonList(new Type_Editor());
}
break;
case 140:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeVariableDeclaration_Editor());
}
break;
case 141:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeVariableReference_Editor());
}
break;
case 142:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnaryMinus_Editor());
}
break;
case 143:
if (true) {
return Collections.<ConceptEditor>singletonList(new UndefinedType_Editor());
}
break;
case 144:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnknownConsCall_Editor());
}
break;
case 145:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnknownDotCall_Editor());
}
break;
case 146:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnknownLocalCall_Editor());
}
break;
case 147:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnknownNameRef_Editor());
}
break;
case 148:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnknownNew_Editor());
}
break;
case 149:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnresolvedNameReference_Editor());
}
break;
case 150:
if (true) {
return Collections.<ConceptEditor>singletonList(new UpperBoundType_Editor());
}
break;
case 151:
if (true) {
return Collections.<ConceptEditor>singletonList(new UsingStatement_Editor());
}
break;
case 152:
if (true) {
return Collections.<ConceptEditor>singletonList(new ValueParameter_Editor());
}
break;
case 153:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableArityType_Editor());
}
break;
case 154:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
}
break;
case 155:
if (true) {
return Collections.<ConceptEditor>singletonList(new Visibility_Editor());
}
break;
case 156:
if (true) {
return Collections.<ConceptEditor>singletonList(new WhileStatement_Editor());
}
break;
case 157:
if (true) {
return Collections.<ConceptEditor>singletonList(new WildCardType_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
