{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      final Wrappers._T<Iterable<IResource>> _output_kp7j54_a0a=new Wrappers._T<Iterable<IResource>>(null);
switch (0) {
case 0:
        final Wrappers._T<List<SModelDescriptor>> models=new Wrappers._T<List<SModelDescriptor>>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          models.value=Sequence.fromIterable(input).where(new IWhereFilter<IResource>(){
            public boolean accept(            IResource it){
              return ((MResource)it).module() instanceof Language;
            }
          }
).translate(new ITranslator2<IResource,SModelDescriptor>(){
            public Iterable<SModelDescriptor> translate(            IResource it){
              return ((MResource)it).models();
            }
          }
).where(new IWhereFilter<SModelDescriptor>(){
            public boolean accept(            SModelDescriptor it){
              return ListSequence.fromList(SModelOperations.getRoots(((SModel)it.getSModel()),"jetbrains.mps.core.structure.structure.SStructureContainer")).isNotEmpty();
            }
          }
).toListSequence();
        }
      }
);
    if (ListSequence.fromList(models.value).isEmpty()) {
      return new IResult.SUCCESS(_output_kp7j54_a0a.value);
    }
  final IMessageHandler mh=new IMessageHandler(){
    public void handle(    IMessage msg){
      monitor.reportFeedback(new IFeedback.MESSAGE(msg));
    }
    public void clear(){
    }
  }
;
final List<LanguageModelsMerger> generated=ListSequence.fromList(new ArrayList<LanguageModelsMerger>());
IGenerationHandler gh=new MakeGenerationHandler(new _FunctionTypes._return_P1_E0<Boolean,GResource>(){
public Boolean invoke(GResource data){
  monitor.currentProgress().advanceWork("Transforming",100);
  monitor.reportFeedback(new IFeedback.MESSAGE(new Message(MessageKind.INFORMATION,"Generated " + data.model().getLongName())));
  ListSequence.fromList(generated).addElement(new LanguageModelsMerger((Language)data.module(),data.status().getOutputModel(),mh));
  return true;
}
}
);
monitor.reportFeedback(new IFeedback.MESSAGE(new Message(MessageKind.INFORMATION,"Transforming core language descriptors..")));
monitor.currentProgress().beginWork("Transforming",ListSequence.fromList(models.value).count() * 100,monitor.currentProgress().workLeft());
Object tmc=null;
try {
Class<?> tmcCls=Class.forName("jetbrains.mps.ide.generator.TransientModelsComponent");
tmc=pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).project().getComponent(tmcCls);
}
 catch (ClassNotFoundException ignore) {
}
if (tmc == null) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no tmc")));
}
final TransientModelsProvider transModels=(tmc != null ? (TransientModelsProvider)tmc : new TransientModelsProvider(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).project(),null));
GenerationOptions options=pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.configure"),jetbrains.mps.lang.core.plugin.Generate_Facet.Target_configure.Variables.class).generationOptions().create();
final GenerationOptions.OptionsBuilder builder=GenerationOptions.getDefaults().keepOutputModel(true).strictMode(options.isStrictMode()).reporting(options.isShowInfo(),options.isShowWarnings(),options.isKeepModelsWithWarnings(),options.getNumberOfModelsToKeep()).saveTransientModels(options.isSaveTransientModels());
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
for (SModelDescriptor m : ListSequence.fromList(models.value)) {
builder.customPlan(m,TransformGenerationPlan.forLanguages("jetbrains.mps.core.gen.transform"));
}
}
}
);
options=builder.create();
boolean generationOk=GenerationFacade.generateModels(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).project(),models.value,pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).operationContext(),gh,new EmptyProgressMonitor(),mh,options,transModels);
if (ListSequence.fromList(generated).isNotEmpty()) {
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
ListSequence.fromList(generated).visitAll(new IVisitor<LanguageModelsMerger>(){
public void visit(LanguageModelsMerger it){
it.convert();
}
}
);
}
}
);
ModelAccess.instance().runWriteAction(new Runnable(){
public void run(){
ListSequence.fromList(generated).visitAll(new IVisitor<LanguageModelsMerger>(){
public void visit(LanguageModelsMerger it){
it.apply();
}
}
);
}
}
);
ListSequence.fromList(generated).visitAll(new IVisitor<LanguageModelsMerger>(){
public void visit(LanguageModelsMerger it){
_output_kp7j54_a0a.value=Sequence.fromIterable(_output_kp7j54_a0a.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new MResource(it.getLanguage(),it.getGenerated()))));
}
}
);
}
monitor.currentProgress().finishWork("Transforming");
if (!(generationOk)) {
return new IResult.FAILURE(_output_kp7j54_a0a.value);
}
default :
return new IResult.SUCCESS(_output_kp7j54_a0a.value);
}
}
}
;
}
