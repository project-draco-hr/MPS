{
  if (mappingRef instanceof MappingConfig_RefAllGlobal) {
    return myAllMappings;
  }
  if (mappingRef instanceof MappingConfig_ExtRef) {
    GeneratorReference generatorRef=((MappingConfig_ExtRef)mappingRef).getGeneratorReference();
    if (generatorRef != null) {
      String referentUID=generatorRef.getReferentUID();
      if (referentUID != null) {
        Generator newRefGenerator=(Generator)MPSModuleRepository.getInstance().getModuleByUID(referentUID);
        if (newRefGenerator != null) {
          return getMappingsFromRef(((MappingConfig_ExtRef)mappingRef).getMappingConfigReference(),newRefGenerator,scope);
        }
 else {
          LOG.error("couldn't get generator by uid: '" + referentUID + "'");
        }
      }
    }
    return new ArrayList();
  }
  if (mappingRef instanceof MappingConfig_SimpleRef) {
    String modelUID=((MappingConfig_SimpleRef)mappingRef).getTemplatesModelUID();
    String mappingConfigID=((MappingConfig_SimpleRef)mappingRef).getMappingConfigID();
    if (modelUID != null && mappingConfigID != null) {
      SModelDescriptor refModel=scope.getModelDescriptor(SModelUID.fromString(modelUID));
      if (refModel != null) {
        if (mappingConfigID.equals("*")) {
          return refModel.getSModel().allAdapters(MappingConfiguration.class);
        }
 else {
          SNode mappingConfig=refModel.getSModel().getNodeById(mappingConfigID);
          if (mappingConfig != null) {
            List<MappingConfiguration> result=new ArrayList<MappingConfiguration>();
            result.add((MappingConfiguration)BaseAdapter.fromNode(mappingConfig));
            return result;
          }
 else {
            LOG.error("couldn't get node by id: '" + mappingConfigID + "' in model "+ modelUID);
          }
        }
      }
 else {
        LOG.error("couldn't get model by uid: '" + modelUID + "' in scope "+ scope);
      }
    }
    return new ArrayList();
  }
  if (mappingRef instanceof MappingConfig_RefAllLocal) {
    return refGenerator.getOwnMappings();
  }
  return new ArrayList();
}
