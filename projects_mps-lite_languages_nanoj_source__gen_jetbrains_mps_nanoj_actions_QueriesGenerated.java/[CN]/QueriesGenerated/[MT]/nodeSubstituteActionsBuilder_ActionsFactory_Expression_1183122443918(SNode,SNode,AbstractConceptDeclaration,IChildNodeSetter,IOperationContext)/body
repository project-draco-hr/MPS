{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.Expression",operationContext.getScope());
    ConceptDeclaration wrappedConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.Expression",operationContext.getScope());
    IChildNodeSetter setter=new AbstractChildNodeSetter(){
      public SNode wrapNode(      SNode nodeToWrap,      SModel model){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.nanoj.structure.InstanceMethodCallExpression",null);
        SLinkOperations.setTarget(result,"instance",nodeToWrap,true);
        return result;
      }
      public void doExecute(      SNode pn,      SNode oc,      SNode nc,      IScope sc){
        childSetter.execute(parentNode,currentTargetNode,this.wrapNode(nc,nc.getModel()),operationContext.getScope());
      }
    }
;
    result.addAll(ModelActions.createChildSubstituteActions(parentNode,currentTargetNode,wrappedConcept,setter,operationContext));
  }
  return result;
}
