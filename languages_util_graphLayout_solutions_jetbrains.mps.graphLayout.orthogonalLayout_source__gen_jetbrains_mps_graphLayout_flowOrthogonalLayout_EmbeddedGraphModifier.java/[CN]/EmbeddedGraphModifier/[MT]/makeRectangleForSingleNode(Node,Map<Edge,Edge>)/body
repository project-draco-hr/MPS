{
  List<Direction2D> allDirections=Arrays.asList(Direction2D.values());
  List<Dart> darts=myEmbeddedGraph.getDartWithSource(node);
  Face nodeInnerFace=new Face(myGraph);
  Node firstCornerNode=myGraph.createDummyNode();
  Node curCornerNode=firstCornerNode;
  Map<Dart,Edge> edgesFromNode=MapSequence.<Dart,Edge>fromMap(new HashMap<Dart,Edge>());
  List<Dart> nodeOuterDarts=ListSequence.<Dart>fromList(new LinkedList<Dart>());
  for (  final Direction2D dir : ListSequence.<Direction2D>fromList(allDirections)) {
    MapSequence.<Node,Node[]>fromMap(myCornerNodes).get(node)[dir.turnClockwise(1).ordinal()]=curCornerNode;
    Node nextCornerNode;
    if (dir == ListSequence.<Direction2D>fromList(allDirections).last()) {
      nextCornerNode=firstCornerNode;
    }
 else {
      nextCornerNode=myGraph.createDummyNode();
    }
    Dart dirDart=ListSequence.<Dart>fromList(darts).findFirst(new IWhereFilter<Dart>(){
      public boolean accept(      Dart dart){
        return MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(dart) == dir;
      }
    }
);
    if (dirDart == null) {
      addToNodeFace(nodeInnerFace,myGraph.connect(curCornerNode,nextCornerNode),dir,nodeOuterDarts);
    }
 else {
      Node newNode=myGraph.createDummyNode();
      MapSequence.<Dart,Edge>fromMap(edgesFromNode).put(dirDart,myGraph.connect(newNode,dirDart.getTarget()));
      addToNodeFace(nodeInnerFace,myGraph.connect(curCornerNode,newNode),dir,nodeOuterDarts);
      addToNodeFace(nodeInnerFace,myGraph.connect(newNode,nextCornerNode),dir,nodeOuterDarts);
    }
    curCornerNode=nextCornerNode;
  }
  Map<Dart,Edge> endEdges=MapSequence.<Dart,Edge>fromMap(new HashMap<Dart,Edge>());
  for (  Dart dart : ListSequence.<Dart>fromList(darts)) {
    MapSequence.<Edge,Edge>fromMap(modifiedEdges).put(dart.getEdge(),MapSequence.<Dart,Edge>fromMap(edgesFromNode).get(dart));
    List<Dart> faceDarts=myEmbeddedGraph.getFace(dart).getDarts();
    int prevIndex=ListSequence.<Dart>fromList(faceDarts).indexOf(dart) - 1;
    if (prevIndex == -1) {
      prevIndex=ListSequence.<Dart>fromList(faceDarts).count() - 1;
    }
    MapSequence.<Dart,Edge>fromMap(endEdges).put(dart,MapSequence.<Dart,Edge>fromMap(edgesFromNode).get(myEmbeddedGraph.getOpposite(ListSequence.<Dart>fromList(faceDarts).getElement(prevIndex))));
  }
  for (  Dart dart : ListSequence.<Dart>fromList(darts)) {
    Face face=myEmbeddedGraph.getFace(dart);
    List<Dart> faceDarts=face.getDarts();
    int dartIndex=ListSequence.<Dart>fromList(faceDarts).indexOf(dart);
    int prevIndex=dartIndex - 1;
    if (prevIndex == -1) {
      prevIndex=ListSequence.<Dart>fromList(faceDarts).count() - 1;
    }
    Dart prevDart=ListSequence.<Dart>fromList(faceDarts).getElement(prevIndex);
    Edge startEdge=MapSequence.<Dart,Edge>fromMap(edgesFromNode).get(dart);
    Edge endEdge=MapSequence.<Dart,Edge>fromMap(endEdges).get(dart);
    Node start=startEdge.getSource();
    Node end=endEdge.getSource();
    List<Dart> newDarts=ListSequence.<Dart>fromList(new LinkedList<Dart>());
    Iterator<Dart> dartItr=ListSequence.<Dart>fromList(nodeOuterDarts).iterator();
    Dart cur;
    do {
      cur=dartItr.next();
    }
 while (cur.getTarget() != start);
    do {
      ListSequence.<Dart>fromList(newDarts).insertElement(0,cur);
      if (!(dartItr.hasNext())) {
        dartItr=ListSequence.<Dart>fromList(nodeOuterDarts).iterator();
      }
      cur=dartItr.next();
    }
 while (cur.getTarget() != end);
    Dart newStartDart=new Dart(startEdge,start);
    ListSequence.<Dart>fromList(newDarts).addElement(newStartDart);
    MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(newStartDart,MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(dart));
    Dart newEndDart=new Dart(endEdge,endEdge.getTarget());
    ListSequence.<Dart>fromList(newDarts).insertElement(0,newEndDart);
    MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(newEndDart,MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(prevDart));
    myEmbeddedGraph.removeDart(face,dart);
    face.makeEndsWith(prevDart);
    myEmbeddedGraph.removeDart(face,prevDart);
    for (    Dart newDart : ListSequence.<Dart>fromList(newDarts)) {
      myEmbeddedGraph.addLastDart(face,newDart);
    }
    MapSequence.fromMap(myDartDirections).removeKey(dart);
    MapSequence.fromMap(myDartDirections).removeKey(prevDart);
  }
  MapSequence.<Node,Face>fromMap(myNodeFaces).put(node,nodeInnerFace);
  myEmbeddedGraph.addFace(nodeInnerFace);
  myGraph.deleteNode(node);
}
