{
  final Wrappers._T<Node> prev=new Wrappers._T<Node>(ListSequence.<Node>fromList(nodes).getElement(ListSequence.<Node>fromList(nodes).count() - 2));
  final Wrappers._T<Node> cur=new Wrappers._T<Node>(ListSequence.<Node>fromList(nodes).getElement(ListSequence.<Node>fromList(nodes).count() - 1));
  Edge prevToCurEdge=ListSequence.<Edge>fromList(prev.value.getEdges()).findFirst(new IWhereFilter<Edge>(){
    public boolean accept(    Edge edge){
      return edge.getOpposite(prev.value) == cur.value;
    }
  }
);
  Map<Edge,Integer> toSplit=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  final Node next : ListSequence.<Node>fromList(nodes)) {
    Edge curToNextEdge=ListSequence.<Edge>fromList(cur.value.getEdges()).findFirst(new IWhereFilter<Edge>(){
      public boolean accept(      Edge edge){
        return edge.getOpposite(cur.value) == next;
      }
    }
);
    Dart prevToCurDart=myEmbeddedGraph.getSourceDart(prevToCurEdge,prev.value);
    Dart curToNextDart=myEmbeddedGraph.getSourceDart(curToNextEdge,cur.value);
    if (!(MapSequence.fromMap(myNodeFaces).containsKey(node))) {
      MapSequence.<Node,Face>fromMap(myNodeFaces).put(node,myEmbeddedGraph.getFace(prevToCurDart));
    }
    Direction2D prevToCurDir=MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(prevToCurDart);
    Direction2D curToNextDir=MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(curToNextDart);
    if (prevToCurDir != curToNextDir) {
      Edge curRealEdge=ListSequence.<Edge>fromList(cur.value.getEdges()).findFirst(new IWhereFilter<Edge>(){
        public boolean accept(        Edge edge){
          return !(ListSequence.<Node>fromList(nodes).contains(edge.getOpposite(cur.value)));
        }
      }
);
      Dart curRealDart=myEmbeddedGraph.getSourceDart(curRealEdge,cur.value);
      Edge edgeToSplit;
      if (MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(curRealDart) == prevToCurDir) {
        edgeToSplit=prevToCurEdge;
      }
 else {
        edgeToSplit=curToNextEdge;
      }
      if (MapSequence.fromMap(toSplit).containsKey(edgeToSplit)) {
        MapSequence.<Edge,Integer>fromMap(toSplit).put(edgeToSplit,MapSequence.<Edge,Integer>fromMap(toSplit).get(edgeToSplit) + 1);
      }
 else {
        MapSequence.<Edge,Integer>fromMap(toSplit).put(edgeToSplit,1);
      }
    }
    prev.value=cur.value;
    cur.value=next;
    prevToCurEdge=curToNextEdge;
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(toSplit).keySet())) {
    int splitNum=MapSequence.<Edge,Integer>fromMap(toSplit).get(edge);
    final Wrappers._T<Edge> curEdge=new Wrappers._T<Edge>(edge);
    Direction2D curDirection=null;
    for (int i=0; i < splitNum; i++) {
      List<Dart> toRemove=ListSequence.<Dart>fromList(new ArrayList<Dart>());
      ListSequence.<Dart>fromList(toRemove).addSequence(ListSequence.<Dart>fromList(myEmbeddedGraph.getDarts(curEdge.value)));
      if (curDirection == null) {
        final Node curSource=curEdge.value.getSource();
        Edge realEdge=ListSequence.<Edge>fromList(curSource.getEdges()).findFirst(new IWhereFilter<Edge>(){
          public boolean accept(          Edge edge){
            return !(ListSequence.<Node>fromList(nodes).contains(edge.getOpposite(curSource)));
          }
        }
);
        curDirection=MapSequence.<Dart,Direction2D>fromMap(myDartDirections).get(myEmbeddedGraph.getSourceDart(realEdge,curSource)).turnClockwise(1);
      }
      List<Edge> newEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
      Node newNode=myEmbeddedGraph.splitEdge(curEdge.value,newEdges);
      Dart firstDart=ListSequence.<Dart>fromList(myEmbeddedGraph.getDarts(ListSequence.<Edge>fromList(newEdges).getElement(0))).findFirst(new IWhereFilter<Dart>(){
        public boolean accept(        Dart dart){
          return dart.getSource() == curEdge.value.getSource();
        }
      }
);
      MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(firstDart,curDirection);
      MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(myEmbeddedGraph.getOpposite(firstDart),curDirection.opposite());
      Dart secondDart=ListSequence.<Dart>fromList(myEmbeddedGraph.getDarts(ListSequence.<Edge>fromList(newEdges).getElement(1))).findFirst(new IWhereFilter<Dart>(){
        public boolean accept(        Dart dart){
          return dart.getTarget() == curEdge.value.getTarget();
        }
      }
);
      Direction2D nextDirection=curDirection.turnClockwise(1);
      MapSequence.<Node,Node[]>fromMap(myCornerNodes).get(node)[nextDirection.ordinal()]=newNode;
      MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(secondDart,nextDirection);
      MapSequence.<Dart,Direction2D>fromMap(myDartDirections).put(myEmbeddedGraph.getOpposite(secondDart),nextDirection.opposite());
      for (      Dart dartToRemove : ListSequence.<Dart>fromList(toRemove)) {
        MapSequence.fromMap(myDartDirections).removeKey(dartToRemove);
      }
      curEdge.value=ListSequence.<Edge>fromList(newEdges).getElement(1);
      curDirection=nextDirection;
    }
  }
}
