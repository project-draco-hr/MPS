{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,"jetbrains.mps.core.xml.structure.XmlElement").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SPropertyOperations.set(_context.getSourceNode(),MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,0x61218fae7b61b5d5L,"shortEmptyNotation"),"" + (true));
      ListSequence.fromList(SLinkOperations.getChildren(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,0x16838b3fce9a4922L,"content"))).clear();
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "short notation for empty element";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,"jetbrains.mps.core.xml.structure.XmlElement").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,"jetbrains.mps.core.xml.structure.XmlElement").getDeclarationNode(),null));
    }
  }
);
  return result;
}
