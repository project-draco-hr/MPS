{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlElement"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode elem=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.core.xml.structure.XmlElement");
      ListSequence.fromList(SLinkOperations.getTargets(elem,"content",true)).clear();
      SPropertyOperations.set(elem,"shortEmptyNotation","" + (true));
      return elem;
    }
    public String getMatchingText(    String pattern){
      return "/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "short notation for empty element";
    }
  }
);
  return result;
}
