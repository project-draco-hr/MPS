{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlComment"),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlProcessingInstruction"),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlPrologElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,MetaAdapterFactory.getConcept(new UUID(5160134014823646133l,-7982110198386724200l),5228786488744996718l,"jetbrains.mps.core.xml.structure.XmlDeclaration"),null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return SNodeOperations.getIndexInParent(_context.getCurrentTargetNode()) <= 0;
        }
        public String getDescriptionText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDeclaration"),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,1156234966388l,"shortDescription"));
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDeclaration"),MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,5092175715804935370l,"conceptAlias"));
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlPrologElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,MetaAdapterFactory.getConcept(new UUID(5160134014823646133l,-7982110198386724200l),2133624044437898907l,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          List<SNode> descendants=SNodeOperations.getNodeDescendants(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(5160134014823646133l,-7982110198386724200l),2133624044437898907l,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),false,new SConcept[]{});
          ListSequence.fromList(descendants).removeElement(_context.getCurrentTargetNode());
          return ListSequence.fromList(descendants).isEmpty();
        }
        public String getDescriptionText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,1156234966388l,"shortDescription"));
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,5092175715804935370l,"conceptAlias"));
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
