{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlComment"),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlProcessingInstruction"),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlPrologElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x4890619bb401ef6eL,"jetbrains.mps.core.xml.structure.XmlDeclaration")),null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return SNodeOperations.getIndexInParent(_context.getCurrentTargetNode()) <= 0;
        }
        public String getDescriptionText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDeclaration"),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x10d34f97574L,"shortDescription"));
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDeclaration"),MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x46ab0ad5826c74caL,"conceptAlias"));
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlPrologElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x1d9c27c394f4069bL,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration")),null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          List<SNode> descendants=SNodeOperations.getNodeDescendants(_context.getParentNode(),MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x1d9c27c394f4069bL,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),false,new SAbstractConcept[]{});
          if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x1d9c27c394f4069bL,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"))) {
            ListSequence.fromList(descendants).removeElement(SNodeOperations.cast(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x1d9c27c394f4069bL,"jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration")));
          }
          return ListSequence.fromList(descendants).isEmpty();
        }
        public String getDescriptionText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x10d34f97574L,"shortDescription"));
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration"),MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x46ab0ad5826c74caL,"conceptAlias"));
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
