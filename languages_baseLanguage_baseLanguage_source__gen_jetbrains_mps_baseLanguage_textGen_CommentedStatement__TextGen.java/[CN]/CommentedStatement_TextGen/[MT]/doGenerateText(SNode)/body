{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  this.appendNewLine();
  this.appendWithIndent("/*");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1232461062092l,1232461075566l,"statement")));
  this.appendNewLine();
  this.decreaseDepth();
  this.appendWithIndent("*/");
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,MetaAdapterFactory.getInterfaceConcept(new UUID(-7066981744759912873l,-4622583950651520061l),5067982036267369891l,"jetbrains.mps.lang.traceable.structure.TraceableConcept")),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
