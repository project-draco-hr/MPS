{
  addNodeById("1230053266654");
  addNodeById("1230053266673");
  InlineVariableRefactoring ref=InlineVariableRefactoring.createRefactoring(SNodeOperations.cast(getNodeById("1230053266662"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7efL,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("1230053266655"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("1230053266674"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("The nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",new NodesMatcher().match(nodesBefore,nodesAfter));
  }
}
