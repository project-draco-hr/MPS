{
  TargetRange tr=new TargetRange();
  final ITarget make=Mockups.target(context,"make",new ITarget.Name("make"));
  Mockups.allowing(context,make);
  tr.addTarget(make);
  final ITarget gen=Mockups.target(context,"gen",new ITarget.Name("gen"));
  final ITarget text=Mockups.target(context,"text",new ITarget.Name("text"));
  context.checking(new Expectations(){
{
      atLeast(1).of(text).after();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("gen")})));
      atLeast(1).of(text).before();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      atLeast(1).of(gen).before();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
    }
  }
);
  Mockups.allowing(context,gen);
  Mockups.allowing(context,text);
  tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(),gen,text));
  Assert.assertTrue(tr.hasTarget(new ITarget.Name("gen")));
  Assert.assertTrue(tr.hasTarget(new ITarget.Name("text")));
  List<ITarget> expected=ListSequence.fromListAndArray(new ArrayList<ITarget>(),gen,text,make);
  for (  ITarget t : Sequence.fromIterable(tr.sortedTargets())) {
    Assert.assertSame(ListSequence.fromList(expected).removeElementAt(0),t);
  }
}
