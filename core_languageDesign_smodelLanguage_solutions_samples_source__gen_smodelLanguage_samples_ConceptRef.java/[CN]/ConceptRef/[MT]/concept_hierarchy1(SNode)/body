{
  List<SNode> hierarchy=SConceptOperations.getConceptHierarchy(concept);
  List<SNode> supers_all=SConceptOperations.getAllSuperConcepts(concept);
  List<SNode> supers_direct=SConceptOperations.getDirectSuperConcepts(concept);
  boolean yes1=SConceptOperations.isSuperConceptOf(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
  boolean yes2=SConceptOperations.isSuperConceptOf(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation")));
  boolean yes3=SConceptOperations.isSubConceptOf(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation"),"jetbrains.mps.baseLanguage.structure.Expression");
  boolean yes4=SConceptOperations.isSubConceptOf(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation"),NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression")));
  SConceptOperations.isSubConceptOf(concept,NameUtil.nodeFQName(concept));
  SConceptOperations.isSuperConceptOf(concept,NameUtil.nodeFQName(concept));
}
