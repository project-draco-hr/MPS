{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final ProgressMonitor monitor=indicator != null ? new ProgressMonitorAdapter(indicator) : new EmptyProgressMonitor();
  monitor.start("Making modules",10);
  try {
    MPSCompilationResult mpsCompilationResult=ModelAccess.instance().runReadAction(new Computable<MPSCompilationResult>(){
      @Override public MPSCompilationResult compute(){
        monitor.advance(1);
        MessagesViewTool mvt=myProject.getComponent(MessagesViewTool.class);
        final ModuleMaker maker=new ModuleMaker(mvt.newHandler(),MessageKind.ERROR);
        return myReloadManager.computeNoReload(new Computable<MPSCompilationResult>(){
          @Override public MPSCompilationResult compute(){
            return maker.make(IterableUtil.asCollection(MPSModuleRepository.getInstance().getModules()),monitor.subTask(9));
          }
        }
);
      }
    }
);
    reloadClasses(mpsCompilationResult,indicator,early);
  }
  finally {
    monitor.done();
  }
}
