{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final ProgressMonitor monitor=indicator != null ? new ProgressMonitorAdapter(indicator) : new EmptyProgressMonitor();
  LOG.info("Making modules on startup");
  monitor.start("Making modules",10);
  try {
    MPSCompilationResult mpsCompilationResult=ModelAccess.instance().runReadAction(new Computable<MPSCompilationResult>(){
      @Override public MPSCompilationResult compute(){
        monitor.advance(1);
        MessagesViewTool mvt=myProject.getComponent(MessagesViewTool.class);
        final ModuleMaker maker=new ModuleMaker(mvt.newHandler(),MessageKind.ERROR);
        return myReloadManager.computeNoReload(new Computable<MPSCompilationResult>(){
          @Override public MPSCompilationResult compute(){
            jetbrains.mps.project.Project project=ProjectHelper.toMPSProject(myProject);
            if (project == null) {
              return maker.make(IterableUtil.asCollection(MPSModuleRepository.getInstance().getModules()),monitor.subTask(9));
            }
 else {
              return maker.make(IterableUtil.asCollection(MPSModuleRepository.getInstance().getModules()),monitor.subTask(9),JavaCompilerOptionsComponent.getInstance().getJavaCompilerOptions(project));
            }
          }
        }
);
      }
    }
);
    if (mpsCompilationResult.isReloadingNeeded())     reloadClasses(mpsCompilationResult,indicator,early);
  }
  finally {
    monitor.done();
  }
  LOG.info("Compilation on startup is finished");
}
