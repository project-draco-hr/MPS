{
  StringBuilder uniqueNameBuffer=new StringBuilder(50);
  uniqueNameBuffer.append(roughName);
  if (roughName.length() > 0 && roughName.charAt(roughName.length() - 1) == '_') {
    uniqueNameBuffer.setLength(roughName.length() - 1);
  }
  if (contextNode != null) {
    SNode topmostNamed=null;
    SNode node_=contextNode;
    while (node_ != null) {
      if (node_.getConcept().isSubConceptOf(myNamedConcept)) {
        topmostNamed=node_;
      }
      node_=node_.getParent();
    }
    if (topmostNamed != null) {
      String suffix=topToSuffix.get(topmostNamed);
      if (suffix != null) {
        uniqueNameBuffer.append('_');
        uniqueNameBuffer.append(suffix);
      }
 else {
        String name=topmostNamed.getName();
        if (name != null) {
          suffix=Integer.toString(name.hashCode() >>> 1,Character.MAX_RADIX);
          topToSuffix.put(topmostNamed,suffix);
          uniqueNameBuffer.append('_');
          uniqueNameBuffer.append(suffix);
        }
      }
      contextNode=topmostNamed;
    }
  }
  if (inputNode != null) {
    final String nid=nodeUniqueId(inputNode);
    uniqueNameBuffer.append('_');
    uniqueNameBuffer.append(nid);
  }
  final boolean suffixAdded=roughName.length() < uniqueNameBuffer.length();
  String uniqueName=uniqueNameBuffer.toString();
  final Set<String> usedNames=getUsedNames(contextNode);
  if (!suffixAdded || usedNames.contains(uniqueName)) {
    uniqueNameBuffer.append('_');
    final int trimPos=uniqueNameBuffer.length();
    for (int count=0; ; count++) {
      uniqueNameBuffer.append(count);
      uniqueName=uniqueNameBuffer.toString();
      if (!usedNames.contains(uniqueName))       break;
      uniqueNameBuffer.setLength(trimPos);
    }
  }
  usedNames.add(uniqueName);
  return uniqueName;
}
