{
  Language language=Language.getLanguageFor(_context.getOriginalInputModel().getModelDescriptor());
  if (language == null) {
    return;
  }
  SModel structureModel=language.getStructureModelDescriptor().getSModel();
  Map<SNode,SNode> conceptsToTargets=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Map<SNode,SNode> partsToLinkDeclarations=MapSequence.fromMap(new HashMap<SNode,SNode>());
  List<SNode> mpsliteConceptDeclarations=SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.MPSLiteConceptDeclaration");
  List<SNode> allConcepts=SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.IMPSLiteConcept");
  for (  SNode conceptDeclaration : allConcepts) {
    SNode concept=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration",null);
    SPropertyOperations.set(concept,"name",SPropertyOperations.getString(conceptDeclaration,"name"));
    MapSequence.fromMap(conceptsToTargets).put(conceptDeclaration,concept);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SLinkOperations.setTarget(((SNode)conceptsToTargets.get(conceptDeclaration)),"extends",(SNode)AbstractConceptReference_Behavior.call_getConcept_1238594571574(SLinkOperations.getTarget(conceptDeclaration,"extends",true),conceptsToTargets),false);
  }
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    LineList_Behavior.call_fillConceptStructure_1238593666753(SLinkOperations.getTarget(conceptDeclaration,"lineList",true),(SNode)conceptsToTargets.get(conceptDeclaration),conceptsToTargets,partsToLinkDeclarations);
  }
  List<SNode> binaryOperations=SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.BinaryOperationConcept");
  for (  SNode binaryOperationConcept : binaryOperations) {
    EditorGenerationUtils.fillBinaryOperationStructure(binaryOperationConcept,conceptsToTargets,partsToLinkDeclarations);
  }
  SModel editorModel=language.getEditorModelDescriptor().getSModel();
  SModel actionsModel=language.getActionsModelDescriptor().getSModel();
  Map<SNode,SNode> conceptsToEditors=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNode editor=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration",null);
    SNode lineList=SLinkOperations.getTarget(conceptDeclaration,"lineList",true);
    SNode contentCell=EditorGenerationUtils.generateEditorCellModel(lineList,conceptDeclaration,partsToLinkDeclarations);
    if (contentCell == null) {
      continue;
    }
    SLinkOperations.setTarget(editor,"cellModel",contentCell,true);
    SLinkOperations.setTarget(editor,"conceptDeclaration",conceptsToTargets.get(conceptDeclaration),false);
    MapSequence.fromMap(conceptsToEditors).put(conceptDeclaration,editor);
  }
  SNode actions=SConceptOperations.createNewNode("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions",null);
  SPropertyOperations.set(actions,"name","_BinaryOperations_SideTransform");
  for (  SNode binaryOperationConcept : binaryOperations) {
    SNode editor=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration",null);
    SNode contentCell=EditorGenerationUtils.generateBinaryOperationCellModel(binaryOperationConcept,partsToLinkDeclarations);
    SLinkOperations.setTarget(editor,"cellModel",contentCell,true);
    SLinkOperations.setTarget(editor,"conceptDeclaration",conceptsToTargets.get(binaryOperationConcept),false);
    MapSequence.fromMap(conceptsToEditors).put(binaryOperationConcept,editor);
    EditorGenerationUtils.fillBinarySideTransformActions(binaryOperationConcept,actions,conceptsToTargets,partsToLinkDeclarations);
  }
  structureModel.setLoading(true);
  for (  SNode root : ListSequence.fromList(ListSequence.<SNode>fromArray()).addSequence(ListSequence.fromList(SModelOperations.getRoots(structureModel,null)))) {
    structureModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode concept=conceptsToTargets.get(conceptDeclaration);
    SModelOperations.addRootNode(structureModel,concept);
  }
  structureModel.setLoading(false);
  SModelRepository.getInstance().markChanged(structureModel);
  editorModel.setLoading(true);
  for (  SNode root : ListSequence.fromList(ListSequence.<SNode>fromArray()).addSequence(ListSequence.fromList(SModelOperations.getRoots(editorModel,null)))) {
    editorModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode editorDeclaration=conceptsToEditors.get(conceptDeclaration);
    SModelOperations.addRootNode(editorModel,editorDeclaration);
  }
  editorModel.setLoading(false);
  actionsModel.setLoading(true);
  for (  SNode root : ListSequence.fromList(ListSequence.<SNode>fromArray()).addSequence(ListSequence.fromList(SModelOperations.getRoots(actionsModel,null)))) {
    actionsModel.removeRoot(root);
  }
  SModelOperations.addRootNode(actionsModel,actions);
  actionsModel.setLoading(false);
  SModelRepository.getInstance().markChanged(editorModel);
  SModelRepository.getInstance().markChanged(actionsModel);
  for (  SNode conceptDeclaration : allConcepts) {
    SNodeOperations.deleteNode(conceptDeclaration);
  }
}
