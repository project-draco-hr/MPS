{
  Language language=Language.getLanguageFor(_context.getOriginalInputModel().getModelDescriptor());
  if (language == null) {
    return;
  }
  SModel structureModel=language.getStructureModelDescriptor().getSModel();
  Map<SNode,SNode> conceptsToTargets=new HashMap<SNode,SNode>();
  Map<SNode,SNode> linePartsToLinkDeclarations=new HashMap<SNode,SNode>();
  List<SNode> mpsliteConceptDeclarations=SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.MPSLiteConceptDeclaration");
  List<SNode> templateBasedConceptDeclarations=SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.TemplateBasedConcept");
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNode concept=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration",null);
    SPropertyOperations.set(concept,"name",SPropertyOperations.getString(conceptDeclaration,"name"));
    conceptsToTargets.put(conceptDeclaration,concept);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    SNode concept=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration",null);
    SPropertyOperations.set(concept,"name",SPropertyOperations.getString(templateBasedConcept,"name"));
    conceptsToTargets.put(templateBasedConcept,concept);
  }
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SLinkOperations.setTarget(((SNode)conceptsToTargets.get(conceptDeclaration)),"extends",(SNode)conceptsToTargets.get(SLinkOperations.getTarget(conceptDeclaration,"extends",false)),false);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    SLinkOperations.setTarget(((SNode)conceptsToTargets.get(templateBasedConcept)),"extends",(SNode)conceptsToTargets.get(SLinkOperations.getTarget(templateBasedConcept,"extends",false)),false);
  }
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    LineList_Behavior.call_fillConceptStructure_1238593666753(SLinkOperations.getTarget(conceptDeclaration,"lineList",true),null,(SNode)conceptsToTargets.get(conceptDeclaration),conceptsToTargets,linePartsToLinkDeclarations);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    LineList_Behavior.call_fillConceptStructure_1238593666753(SLinkOperations.getTarget(SLinkOperations.getTarget(templateBasedConcept,"template",false),"lineList",true),templateBasedConcept,(SNode)conceptsToTargets.get(templateBasedConcept),conceptsToTargets,linePartsToLinkDeclarations);
  }
  SModel editorModel=language.getEditorModelDescriptor().getSModel();
  Map<SNode,SNode> conceptsToEditors=new HashMap<SNode,SNode>();
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNode editor=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration",null);
    SNode lineList=SLinkOperations.getTarget(conceptDeclaration,"lineList",true);
    SNode contentCell=EditorGenerationUtils.generateEditorCellModel(lineList,null,conceptDeclaration,linePartsToLinkDeclarations);
    if (contentCell == null) {
      continue;
    }
    SLinkOperations.setTarget(editor,"cellModel",contentCell,true);
    SLinkOperations.setTarget(editor,"conceptDeclaration",conceptsToTargets.get(conceptDeclaration),false);
    conceptsToEditors.put(conceptDeclaration,editor);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    SNode editor=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration",null);
    SNode lineList=SLinkOperations.getTarget(SLinkOperations.getTarget(templateBasedConcept,"template",false),"lineList",true);
    SNode contentCell=EditorGenerationUtils.generateEditorCellModel(lineList,templateBasedConcept,templateBasedConcept,linePartsToLinkDeclarations);
    if (contentCell == null) {
      continue;
    }
    SLinkOperations.setTarget(editor,"cellModel",contentCell,true);
    SLinkOperations.setTarget(editor,"conceptDeclaration",conceptsToTargets.get(templateBasedConcept),false);
    conceptsToEditors.put(templateBasedConcept,editor);
  }
  structureModel.setLoading(true);
  for (  SNode root : new ArrayList<SNode>(SModelOperations.getRoots(structureModel,null))) {
    structureModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNode concept=conceptsToTargets.get(conceptDeclaration);
    SModelOperations.addRootNode(structureModel,concept);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    SNode concept=conceptsToTargets.get(templateBasedConcept);
    SModelOperations.addRootNode(structureModel,concept);
  }
  structureModel.setLoading(false);
  SModelRepository.getInstance().markChanged(structureModel);
  editorModel.setLoading(true);
  for (  SNode root : new ArrayList<SNode>(SModelOperations.getRoots(editorModel,null))) {
    editorModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNode editorDeclaration=conceptsToEditors.get(conceptDeclaration);
    SModelOperations.addRootNode(editorModel,editorDeclaration);
  }
  for (  SNode templateBasedConcept : templateBasedConceptDeclarations) {
    SNode editorDeclaration=conceptsToEditors.get(templateBasedConcept);
    SModelOperations.addRootNode(editorModel,editorDeclaration);
  }
  editorModel.setLoading(false);
  SModelRepository.getInstance().markChanged(editorModel);
  for (  SNode conceptDeclaration : mpsliteConceptDeclarations) {
    SNodeOperations.deleteNode(conceptDeclaration);
  }
  for (  SNode conceptDeclaration : templateBasedConceptDeclarations) {
    SNodeOperations.deleteNode(conceptDeclaration);
  }
}
