{
  this.addNodeById("1732396662099564446");
  try {
    Map<Object,Object> userObjects=MapSequence.fromMap(new HashMap<Object,Object>());
    MapSequence.fromMap(userObjects).put("1","1");
    MapSequence.fromMap(userObjects).put("2","2");
    for (    IMapping<Object,Object> object : MapSequence.fromMap(userObjects)) {
      SNodeOperations.cast(this.getNodeById("1732396662099564449"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").putUserObject(object.key(),object.value());
    }
    SNode readNode=FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"));
    Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1732396662099564449"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")),ListSequence.fromListAndArray(new ArrayList<SNode>(),readNode)));
    for (    IMapping<Object,Object> object : MapSequence.fromMap(userObjects)) {
      Assert.assertEquals("User object " + object + " was lost.",object.value(),readNode.getUserObject(object.key()));
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    org.junit.Assert.fail(e.getMessage());
  }
}
