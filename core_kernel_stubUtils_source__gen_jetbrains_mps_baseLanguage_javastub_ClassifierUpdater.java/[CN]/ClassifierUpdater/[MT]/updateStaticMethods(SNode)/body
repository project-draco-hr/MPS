{
  for (  ASMMethod m : myParsedClass.getDeclaredMethods()) {
    if (m.isPrivate() && mySkipPrivate) {
      continue;
    }
    if (!(m.isStatic())) {
      continue;
    }
    if (m.isCompilerGenerated()) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(cls,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc367070a5L,"jetbrains.mps.baseLanguage.structure.EnumClass")) && isGeneratedEnumMethod(m)) {
      continue;
    }
    SNode md=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbbebabf0aL,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")));
    ((jetbrains.mps.smodel.SNode)md).setId(ASMNodeId.createId(myParsedClass,m));
    SLinkOperations.setTarget(md,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112670d273fL,0x112670d886aL,"visibility"),createVisibility(m));
    updateBaseMethod(m,md,cls);
    ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member"))).addElement(md);
  }
}
