{
  for (  ASMMethod c : ac.getDeclaredConstructors()) {
    if (c.isSynthetic()) {
      continue;
    }
    if (c.isPrivate() && mySkipPrivate) {
      continue;
    }
    SNode constructor=_quotation_createNode_ol94f8_a0d0a0l(cm,ASMNodeId.createId(ac,c),createVisibility(c),SModelOperations.createNewNode(cm,null,"jetbrains.mps.baseLanguage.structure.StubStatementList"),SPropertyOperations.getString(cls,"name"));
    SPropertyOperations.set(constructor,"isDeprecated","" + (c.isDeprecated()));
    for (    ASMTypeVariable tv : c.getTypeParameters()) {
      ListSequence.fromList(SLinkOperations.getTargets(constructor,"typeVariableDeclaration",true)).addElement(_quotation_createNode_ol94f8_a0a0a5a0a11(cm,tv.getName()));
    }
{
      ASMType pt;
      String pn;
      List<ASMAnnotation> pa;
      Iterator<ASMType> pt_iterator=ListSequence.fromList(c.getGenericParameterTypes()).iterator();
      Iterator<String> pn_iterator=ListSequence.fromList(c.getParameterNames()).iterator();
      Iterator<List<ASMAnnotation>> pa_iterator=ListSequence.fromList(c.getParameterAnnotations()).iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(pn_iterator.hasNext())) {
          break;
        }
        if (!(pa_iterator.hasNext())) {
          break;
        }
        pt=pt_iterator.next();
        pn=pn_iterator.next();
        pa=pa_iterator.next();
{
          if (!(SPropertyOperations.getBoolean(cls,"isStatic")) && c.getGenericParameterTypes().get(0) == pt) {
            continue;
          }
          SNode pd=_quotation_createNode_ol94f8_a0c0g0g0g0a0l(cm,getTypeByASMType(pt,constructor,cls),pn);
          addAnnotationsToParameter(pd,pa);
          ListSequence.fromList(SLinkOperations.getTargets(constructor,"parameter",true)).addElement(pd);
        }
      }
    }
    for (    ASMAnnotation annotation : c.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getTargets(constructor,"annotation",true)).addElement(createAnnotation(annotation));
    }
    for (    ASMType exception : c.getExceptionTypes()) {
      ListSequence.fromList(SLinkOperations.getTargets(constructor,"throwsItem",true)).addElement(getTypeByASMType(exception,constructor,cls));
    }
    ListSequence.fromList(SLinkOperations.getTargets(cls,"member",true)).addElement(constructor);
  }
}
