{
  for (  ASMMethod m : myParsedClass.getDeclaredMethods()) {
    if (m.isPrivate() && mySkipPrivate) {
      continue;
    }
    if (m.isStatic()) {
      continue;
    }
    if (m.isBridge()) {
      continue;
    }
    if (m.isCompilerGenerated()) {
      continue;
    }
    SNode md=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    ((jetbrains.mps.smodel.SNode)md).setId(ASMNodeId.createId(myParsedClass,m));
    SPropertyOperations.set(md,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,1178608670077l,"isAbstract"),"" + (m.isAbstract()));
    SLinkOperations.setTarget(md,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility"),createVisibility(m));
    this.updateBaseMethod(m,md,cls);
    ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).addElement(md);
  }
}
