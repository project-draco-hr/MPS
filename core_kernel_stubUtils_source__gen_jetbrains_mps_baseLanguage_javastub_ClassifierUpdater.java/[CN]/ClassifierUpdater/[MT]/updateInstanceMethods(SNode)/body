{
  for (  ASMMethod m : myParsedClass.getDeclaredMethods()) {
    if (m.isPrivate() && mySkipPrivate) {
      continue;
    }
    if (m.isStatic()) {
      continue;
    }
    if (m.isBridge()) {
      continue;
    }
    if (m.isCompilerGenerated()) {
      continue;
    }
    SNode md=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
    ((jetbrains.mps.smodel.SNode)md).setId(ASMNodeId.createId(myParsedClass,m));
    SPropertyOperations.set(md,"isAbstract","" + (m.isAbstract()));
    SLinkOperations.setTarget(md,"visibility",createVisibility(m),true);
    this.updateBaseMethod(m,md,cls);
    ListSequence.fromList(SLinkOperations.getTargets(cls,"member",true)).addElement(md);
  }
}
