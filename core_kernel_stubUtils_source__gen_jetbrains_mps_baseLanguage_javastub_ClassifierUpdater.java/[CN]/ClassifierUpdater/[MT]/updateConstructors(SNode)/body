{
  for (  ASMMethod c : myParsedClass.getDeclaredConstructors()) {
    if (c.isSynthetic()) {
      continue;
    }
    if (c.isPrivate() && mySkipPrivate) {
      continue;
    }
    SNode constructor=_quotation_createNode_ol94f8_a0d0a0w(null,ASMNodeId.createId(myParsedClass,c),createVisibility(c),SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),5293379017992965193l,"jetbrains.mps.baseLanguage.structure.StubStatementList")),SPropertyOperations.getString(cls,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
    SPropertyOperations.set(constructor,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1224848483129l,1224848525476l,"isDeprecated"),"" + (c.isDeprecated()));
    for (    ASMTypeVariable tv : c.getTypeParameters()) {
      ListSequence.fromList(SLinkOperations.getChildren(constructor,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1109279851642l,1109279881614l,"typeVariableDeclaration"))).addElement(_quotation_createNode_ol94f8_a0a0a5a0a22(tv.getName()));
    }
{
      ASMType pt;
      String pn;
      List<ASMAnnotation> pa;
      Iterator<ASMType> pt_iterator=ListSequence.fromList(c.getGenericParameterTypes()).iterator();
      Iterator<String> pn_iterator=ListSequence.fromList(c.getParameterNames()).iterator();
      Iterator<List<ASMAnnotation>> pa_iterator=ListSequence.fromList(c.getParameterAnnotations()).iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(pn_iterator.hasNext())) {
          break;
        }
        if (!(pa_iterator.hasNext())) {
          break;
        }
        pt=pt_iterator.next();
        pn=pn_iterator.next();
        pa=pa_iterator.next();
{
          if (!(SPropertyOperations.getBoolean(cls,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,4980874121082273661l,"isStatic"))) && c.getGenericParameterTypes().get(0) == pt) {
            continue;
          }
          SNode pd=_quotation_createNode_ol94f8_a0c0g0g0g0a0w(getTypeByASMType(pt,constructor,cls),pn);
          addAnnotationsToParameter(pd,pa);
          ListSequence.fromList(SLinkOperations.getChildren(constructor,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).addElement(pd);
        }
      }
    }
    for (    ASMAnnotation annotation : c.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getChildren(constructor,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1188208481402l,1188208488637l,"annotation"))).addElement(createAnnotation(annotation));
    }
    for (    ASMType exception : c.getExceptionTypes()) {
      ListSequence.fromList(SLinkOperations.getChildren(constructor,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1164879685961l,"throwsItem"))).addElement(getTypeByASMType(exception,constructor,cls));
    }
    ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).addElement(constructor);
  }
}
