{
  myModule=module;
  myClassifier=clsfr;
  cm=SNodeOperations.getModel(clsfr);
  if (SNodeOperations.isInstanceOf(clsfr,"jetbrains.mps.baseLanguage.structure.Annotation")) {
    SNode annotation=SNodeOperations.cast(clsfr,"jetbrains.mps.baseLanguage.structure.Annotation");
    updateAnnotationMethods(ac,annotation);
    updateAnnotations(ac,annotation);
  }
 else   if (SNodeOperations.isInstanceOf(clsfr,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode cls=SNodeOperations.cast(clsfr,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SPropertyOperations.set(cls,"abstractClass","" + ac.isAbstract());
    SPropertyOperations.set(cls,"isDeprecated","" + ac.isDeprecated());
    SPropertyOperations.set(cls,"isFinal","" + ac.isFinal());
    updateAnnotations(ac,cls);
    updateTypeVariables(ac,cls);
    updateExtendsAndImplements(ac,cls);
    updateInstanceFields(ac,cls);
    updateStaticFields(ac,cls);
    updateConstructors(ac,cls);
    updateInstanceMethods(ac,cls);
    updateStaticMethods(ac,cls);
  }
 else   if (SNodeOperations.isInstanceOf(clsfr,"jetbrains.mps.baseLanguage.structure.Interface")) {
    SNode intfc=SNodeOperations.cast(clsfr,"jetbrains.mps.baseLanguage.structure.Interface");
    SPropertyOperations.set(intfc,"isDeprecated","" + ac.isDeprecated());
    updateAnnotations(ac,intfc);
    updateTypeVariables(ac,intfc);
    updateExtendsForInterface(ac,intfc);
    updateStaticFields(ac,intfc);
    updateInstanceMethods(ac,intfc);
  }
 else {
    return;
  }
  SLinkOperations.setTarget(clsfr,"visibility",(ac.isPublic() ? new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0a().createNode(cm) : null),true);
}
