{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")) != null)) {
    appendNode(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")));
  }
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,"visibility",true),this);
  if (SPropertyOperations.getBoolean(node,"isFinal")) {
    this.append("final ");
  }
  if (SPropertyOperations.getBoolean(node,"isAbstract") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.Interface"))) {
    this.append("abstract ");
  }
  if (SPropertyOperations.getBoolean(node,"isSynchronized")) {
    this.append("synchronized ");
  }
  GenericDeclarationTextGen2.typeDeclarations(node,this);
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"typeVariableDeclaration",true)).isNotEmpty()) {
    this.append(" ");
  }
  appendNode(SLinkOperations.getTarget(node,"returnType",true));
  this.append(" ");
  this.append(SPropertyOperations.getString(node,"name"));
  this.append("(");
{
    Iterable<SNode> collection=SLinkOperations.getTargets(node,"parameter",true);
    final SNode lastItem=Sequence.fromIterable(collection).last();
    for (    SNode item : collection) {
      appendNode(item);
      if (item != lastItem) {
        append(", ");
      }
    }
  }
  this.append(")");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true)).isNotEmpty()) {
    this.append(" throws ");
{
      Iterable<SNode> collection=SLinkOperations.getTargets(node,"throwsItem",true);
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(node,"isAbstract")) {
    this.append(";");
    this.appendNewLine();
  }
 else {
    this.append(" {");
    this.increaseDepth();
    if ((SLinkOperations.getTarget(node,"body",true) != null)) {
      appendNode(SLinkOperations.getTarget(node,"body",true));
    }
 else {
      this.appendNewLine();
      this.appendWithIndent("throw new RuntimeException(\"NOT IMPLEMENTED\");");
    }
    this.decreaseDepth();
    this.appendNewLine();
    this.appendWithIndent("}");
    this.appendNewLine();
  }
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
