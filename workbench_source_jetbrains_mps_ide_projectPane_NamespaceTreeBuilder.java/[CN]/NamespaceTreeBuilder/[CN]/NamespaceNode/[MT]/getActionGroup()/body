{
  DefaultActionGroup group=new DefaultActionGroup();
  if (hasModulesUnder()) {
    group.add(new NewSolutionAction(myName));
    group.add(new NewLanguageAction(myName));
    group.addSeparator();
  }
  if (hasModelsUnder()) {
    group.add(new NewModel_Action(){
      protected String getNamespace(){
        return myName;
      }
    }
);
    group.addSeparator();
  }
  group.add(new BaseAction("Generate files","Generate files from all models under this namespace",IconManager.EMPTY_ICON){
{
      setExecuteOutsideCommand(true);
    }
    protected void doExecute(    AnActionEvent e){
      DataContext dataContext=DataManager.getInstance().getDataContext();
      Project ideaProject=PlatformDataKeys.PROJECT.getData(dataContext);
      if (ideaProject == null)       return;
      MPSProjectHolder holder=ideaProject.getComponent(MPSProjectHolder.class);
      if (holder == null)       return;
      MPSProject project=holder.getMPSProject();
      GeneratorManager manager=project.getComponentSafe(GeneratorManager.class);
      List<SModelDescriptor> models=new ArrayList<SModelDescriptor>();
      for (      SModelDescriptor modelDescriptor : getModelsUnder(NamespaceNode.this)) {
        if (!modelDescriptor.isTransient() && (modelDescriptor instanceof DefaultSModelDescriptor)) {
          models.add(modelDescriptor);
        }
      }
      manager.generateModelsFromDifferentModules(project.createOperationContext(),models,IGenerationType.FILES);
    }
  }
);
  group.addSeparator();
  group.add(new BaseAction("Rename"){
    protected void doExecute(    AnActionEvent e){
      Frame frame=NamespaceNode.this.getOperationContext().getMainFrame();
      String newFolder=JOptionPane.showInputDialog(frame,"Enter new Folder",myName);
      if (newFolder != null) {
        if (newFolder.equals("")) {
          newFolder=null;
        }
        ActionEventData data=new ActionEventData(e);
        for (        IModule m : getModulesUnder(NamespaceNode.this)) {
          data.getMPSProject().setFolderFor(m,newFolder);
        }
        data.getMPSProject().getComponent(ProjectPane.class).rebuild();
      }
    }
  }
);
  return group;
}
