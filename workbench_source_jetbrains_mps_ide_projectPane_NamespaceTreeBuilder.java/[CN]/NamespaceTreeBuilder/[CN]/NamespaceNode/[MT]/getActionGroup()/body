{
  DefaultActionGroup group=new DefaultActionGroup();
  if (hasModulesUnder(this)) {
    group.add(new NewSolutionAction(myName));
    group.add(new NewLanguageAction(myName));
    group.addSeparator();
  }
  group.add(new BaseAction("Generate files","Generate files from all models under this namespace",IconManager.EMPTY_ICON,true,true){
    protected void doExecute(    AnActionEvent e){
      DataContext dataContext=DataManager.getInstance().getDataContext();
      Project ideaProject=PlatformDataKeys.PROJECT.getData(dataContext);
      if (ideaProject == null)       return;
      MPSProjectHolder holder=ideaProject.getComponent(MPSProjectHolder.class);
      if (holder == null)       return;
      MPSProject project=holder.getMPSProject();
      GeneratorManager manager=project.getComponentSafe(GeneratorManager.class);
      List<SModelDescriptor> models=new ArrayList<SModelDescriptor>();
      for (      SModelDescriptor modelDescriptor : getModelsUnder(NamespaceNode.this)) {
        if (!modelDescriptor.isTransient() && (modelDescriptor instanceof DefaultSModelDescriptor)) {
          models.add(modelDescriptor);
        }
      }
      manager.generateModelsFromDifferentModules(project.createOperationContext(),models,IGenerationType.FILES);
    }
  }
);
  return group;
}
