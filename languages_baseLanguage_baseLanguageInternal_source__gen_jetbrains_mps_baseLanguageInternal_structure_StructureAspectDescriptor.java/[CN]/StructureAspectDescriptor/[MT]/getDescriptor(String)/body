{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ConstantValue","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"className"},new String[]{"constant"},new String[]{},new boolean[]{},false,false,"constant value","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.ILocalVariableElementList"},new String[]{},new String[]{},new String[]{"stmts","innerExpr"},new boolean[]{false,false},false,false,"extract statements","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStatementListInnerExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.ILocalVariableElement"},new String[]{},new String[]{},new String[]{"inner"},new boolean[]{false},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassConcept","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassCreator","jetbrains.mps.baseLanguage.structure.ClassCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"makeUnique","nonStatic"},new String[]{},new String[]{"innerClass","inner"},new boolean[]{false,false},false,false,"extract static inner class","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"makeUnique"},new String[]{},new String[]{"method","inner"},new boolean[]{false,false},false,false,"extract static method","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethod_CallExpression","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"staticMethodDeclaration"},new String[]{},new boolean[]{},false,false,"","extract static method invocation","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"fieldName","makeUnique"},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"extract to constant","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.ExtractToConstantRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"original"},new String[]{},new boolean[]{},false,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClass","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.structure.IAnonymousClass","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter"},new String[]{"fqClassName"},new String[]{},new String[]{"constructorArgument","type","typeParameter"},new boolean[]{true,false,true},false,false,"","_anonymous class","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalAnonymousClassCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"cls"},new boolean[]{false},false,false,"_anonymous class","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalClassCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{"fqClassName"},new String[]{},new String[]{"type","parameter","actualArgument"},new boolean[]{false,true,true},false,false,"_class","internal class creator","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"_<type>.class","internal class expression","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType","jetbrains.mps.baseLanguage.structure.ClassifierType",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassifierType"},new String[]{"fqClassName"},new String[]{},new String[]{},new boolean[]{},false,false,"_classifier type","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"fqClassName"},new String[]{},new String[]{"type","parameter","actualArgument"},new boolean[]{false,true,true},false,false,"_new","internal new expression","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{"fieldName"},new String[]{},new String[]{"fieldType","instanceType","instance"},new boolean[]{false,false,false},false,false,"_field reference","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{"methodName"},new String[]{},new String[]{"returnType","instance","actualArgument"},new boolean[]{false,false,true},false,false,"_method call","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"fqClassName","fieldName"},new String[]{},new String[]{},new boolean[]{},false,false,"_static field reference","internal static field reference","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"fqClassName","methodName"},new String[]{},new String[]{"returnType","typeParameter","actualArgument"},new boolean[]{false,true,true},false,false,"_static method call","internal static method call","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalSuperMethodCallOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"methodName"},new String[]{},new String[]{"returnType","actualArgument"},new boolean[]{false,true},false,false,"_super method call","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalThisExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"_this","","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"name"},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"_<variable reference>","internal variable/parameter reference","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.TypeHintExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression","typeHint"},new boolean[]{false,false},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguageInternal.structure.WeakClassReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"classifier"},new String[]{},new boolean[]{},false,false,"class name","weak reference to a class","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
