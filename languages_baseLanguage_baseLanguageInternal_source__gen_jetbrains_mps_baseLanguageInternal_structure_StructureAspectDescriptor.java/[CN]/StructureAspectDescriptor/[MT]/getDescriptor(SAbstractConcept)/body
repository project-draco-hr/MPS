{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0eb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptConstantValue;
      }
    break;
case 1:
  if (true) {
    return myConceptExtractStatementListExpression;
  }
break;
case 2:
if (true) {
return myConceptExtractStatementListInnerExpression;
}
break;
case 3:
if (true) {
return myConceptExtractStaticInnerClassConcept;
}
break;
case 4:
if (true) {
return myConceptExtractStaticInnerClassCreator;
}
break;
case 5:
if (true) {
return myConceptExtractStaticInnerClassExpression;
}
break;
case 6:
if (true) {
return myConceptExtractStaticMethodExpression;
}
break;
case 7:
if (true) {
return myConceptExtractStaticMethod_CallExpression;
}
break;
case 8:
if (true) {
return myConceptExtractToConstantExpression;
}
break;
case 9:
if (true) {
return myConceptExtractToConstantRefExpression;
}
break;
case 10:
if (true) {
return myConceptInternalAnonymousClass;
}
break;
case 11:
if (true) {
return myConceptInternalAnonymousClassCreator;
}
break;
case 12:
if (true) {
return myConceptInternalClassCreator;
}
break;
case 13:
if (true) {
return myConceptInternalClassExpression;
}
break;
case 14:
if (true) {
return myConceptInternalClassifierType;
}
break;
case 15:
if (true) {
return myConceptInternalNewExpression;
}
break;
case 16:
if (true) {
return myConceptInternalPartialFieldReference;
}
break;
case 17:
if (true) {
return myConceptInternalPartialInstanceMethodCall;
}
break;
case 18:
if (true) {
return myConceptInternalStaticFieldReference;
}
break;
case 19:
if (true) {
return myConceptInternalStaticMethodCall;
}
break;
case 20:
if (true) {
return myConceptInternalSuperMethodCallOperation;
}
break;
case 21:
if (true) {
return myConceptInternalThisExpression;
}
break;
case 22:
if (true) {
return myConceptInternalTypedStaticFieldReference;
}
break;
case 23:
if (true) {
return myConceptInternalVariableReference;
}
break;
case 24:
if (true) {
return myConceptTypeHintExpression;
}
break;
case 25:
if (true) {
return myConceptWeakClassReference;
}
break;
default :
}
}
return null;
}
