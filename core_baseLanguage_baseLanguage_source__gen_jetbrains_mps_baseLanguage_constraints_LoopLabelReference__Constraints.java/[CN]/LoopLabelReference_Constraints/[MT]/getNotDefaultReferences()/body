{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("loopLabel",new BaseReferenceConstraintsDescriptor("loopLabel",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> labels=new ArrayList<SNode>();
          for (          SNode loop : SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false)) {
            if ((SLinkOperations.getTarget(loop,"loopLabel",true) != null)) {
              ListSequence.fromList(labels).addElement(SLinkOperations.getTarget(loop,"loopLabel",true));
            }
          }
          return labels;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_hn9a9l_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
