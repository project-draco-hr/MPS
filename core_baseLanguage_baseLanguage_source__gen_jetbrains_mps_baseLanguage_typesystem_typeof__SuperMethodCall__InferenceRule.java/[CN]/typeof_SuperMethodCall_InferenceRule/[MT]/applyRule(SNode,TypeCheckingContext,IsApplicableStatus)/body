{
  if (SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false) == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  final SNode instanceType_typevar_5569019188765050003=typeCheckingContext.createNewRuntimeTypesVariable();
  SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(superMethodCall);
  List<SNode> typeVarRefs=new ArrayList<SNode>();
  for (  SNode typeVariableDeclaration : SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)) {
    ListSequence.<SNode>fromList(typeVarRefs).addElement(new typeof_SuperMethodCall_InferenceRule.QuotationClass_okooqp_a0a0a0g0a().createNode(typeVariableDeclaration,typeCheckingContext));
  }
{
    SNode _nodeToCheck_1029348928467=superMethodCall;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","5569019188765067989",0,null);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getRepresentative(instanceType_typevar_5569019188765050003),(SNode)new typeof_SuperMethodCall_InferenceRule.QuotationClass_okooqp_a0a7a0().createNode(classifier,typeVarRefs,typeCheckingContext),_info_12389875345);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.<SNode,List<SNode>>fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,superMethodCall,SLinkOperations.getTarget(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false),"returnType",true),mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getRepresentative(instanceType_typevar_5569019188765050003),mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithMethodTypeVariables(typeCheckingContext,superMethodCall,mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
