{
  String result=fqName;
  String behaviorClass=behaviorClassByConceptFqName(fqName);
  String namespace=NameUtil.namespaceFromConceptFQName(fqName);
  Language language=scope.getLanguage(namespace);
  if (language != null) {
    Class cls=language.getClass(behaviorClass);
    if (cls != null) {
      try {
        Method method;
        if (myDefaultConceptNameMethods.containsKey(fqName)) {
          method=myDefaultConceptNameMethods.get(fqName);
        }
 else {
          method=cls.getMethod(BehaviorConstants.GET_DEFAULT_CONCRETE_CONCEPT_FQ_NAME);
          myDefaultConceptNameMethods.put(fqName,method);
        }
        try {
          if (method != null) {
            result=(String)method.invoke(null);
          }
        }
 catch (        IllegalAccessException e) {
          LOG.error(e);
          myDefaultConceptNameMethods.put(fqName,null);
        }
catch (        InvocationTargetException e) {
          LOG.error(e);
          myDefaultConceptNameMethods.put(fqName,null);
        }
      }
 catch (      NoSuchMethodException e) {
        myDefaultConceptNameMethods.put(fqName,null);
      }
    }
  }
  return result;
}
