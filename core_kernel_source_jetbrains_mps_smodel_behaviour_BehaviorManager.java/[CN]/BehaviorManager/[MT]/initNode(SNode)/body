{
  if (node == null) {
    return;
  }
  AbstractConceptDeclaration concept=node.getConceptDeclarationAdapter();
  Language language=node.getLanguage(GlobalScope.getInstance());
  String conceptFqName=NameUtil.nodeFQName(concept);
  List<Method> methodsToCall=new ArrayList<Method>();
  if (myConstructors.containsKey(conceptFqName)) {
    methodsToCall=myConstructors.get(conceptFqName);
  }
 else {
    while (concept != null) {
      String fqName=NameUtil.nodeFQName(concept);
      String behaviorClass=behaviorClassByConceptFqName(fqName);
      try {
        Class cls=language.getClass(behaviorClass);
        if (cls != null) {
          Method method=cls.getMethod("init",SNode.class);
          method.setAccessible(true);
          methodsToCall.add(method);
        }
      }
 catch (      NoSuchMethodException e) {
      }
      concept=((ConceptDeclaration)concept).getExtends();
    }
    myConstructors.put(conceptFqName,methodsToCall);
  }
  for (int i=methodsToCall.size() - 1; i >= 0; i--) {
    try {
      methodsToCall.get(i).invoke(null,node);
    }
 catch (    IllegalAccessException e) {
      LOG.error(e);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}
