{
  if (node == null) {
    return;
  }
  AbstractConceptDeclaration concept=node.getConceptDeclarationAdapter();
  Language language=node.getLanguage(GlobalScope.getInstance());
  String conceptFqName=NameUtil.nodeFQName(concept);
  List<Method> methodsToCall=new ArrayList<Method>();
  if (myConstructors.containsKey(conceptFqName)) {
    methodsToCall=myConstructors.get(conceptFqName);
  }
 else {
    List<AbstractConceptDeclaration> concepts=new ArrayList<AbstractConceptDeclaration>();
    List<AbstractConceptDeclaration> newFrontier=new ArrayList<AbstractConceptDeclaration>();
    Set<AbstractConceptDeclaration> processed=new HashSet<AbstractConceptDeclaration>();
    concepts.add(concept);
    while (!concepts.isEmpty()) {
      for (      AbstractConceptDeclaration currentConcept : concepts) {
        if (processed.contains(currentConcept)) {
          continue;
        }
        String fqName=NameUtil.nodeFQName(currentConcept);
        String behaviorClass=behaviorClassByConceptFqName(fqName);
        try {
          Class cls=language.getClass(behaviorClass);
          if (cls != null) {
            Method method=cls.getMethod("init",SNode.class);
            method.setAccessible(true);
            methodsToCall.add(method);
          }
        }
 catch (        NoSuchMethodException e) {
        }
        if (currentConcept instanceof ConceptDeclaration) {
          ConceptDeclaration conceptDeclaration=(ConceptDeclaration)currentConcept;
          List<InterfaceConceptReference> references=conceptDeclaration.getImplementses();
          for (          InterfaceConceptReference reference : references) {
            newFrontier.add(reference.getIntfc());
          }
          ConceptDeclaration parentConcept=conceptDeclaration.getExtends();
          if (parentConcept != null) {
            newFrontier.add(parentConcept);
          }
        }
 else         if (currentConcept instanceof InterfaceConceptDeclaration) {
          InterfaceConceptDeclaration interfaceConcept=(InterfaceConceptDeclaration)currentConcept;
          List<InterfaceConceptReference> references=interfaceConcept.getExtendses();
          for (          InterfaceConceptReference reference : references) {
            newFrontier.add(reference.getIntfc());
          }
        }
        processed.add(currentConcept);
      }
      concepts=newFrontier;
      newFrontier=new ArrayList<AbstractConceptDeclaration>();
    }
    myConstructors.put(conceptFqName,methodsToCall);
  }
  for (int i=methodsToCall.size() - 1; i >= 0; i--) {
    try {
      methodsToCall.get(i).invoke(null,node);
    }
 catch (    IllegalAccessException e) {
      LOG.error(e);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}
