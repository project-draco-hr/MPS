{
  final BlockInstanceView view=new BlockInstanceView();
  GenericViewCell editorCell=GenericViewCell.createViewCell(editorContext,node,view);
  view.x.set(SPropertyOperations.getInteger(node,"x"));
  view.y.set(SPropertyOperations.getInteger(node,"y"));
  view.text.set(SPropertyOperations.getString(node,"name"));
  view.inputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"inMetaPorts",true)).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
).toListSequence());
  view.outputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"outMetaPorts",true)).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
).toListSequence());
  view.addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
    @Override public void handle(    View v,    MouseEvent e){
      ModelAccess.instance().runCommandInEDT(new Runnable(){
        public void run(){
          SPropertyOperations.set(node,"x","" + (view.x.get()));
          SPropertyOperations.set(node,"y","" + (view.y.get()));
          SPropertyOperations.set(node,"name",view.text.get());
        }
      }
,editorContext.getOperationContext().getProject());
    }
  }
).build());
  view.visible().set(true);
  editorCell.setCellId("DiagramNode_gju6mh_a");
  editorCell.setBig(true);
  return editorCell;
}
