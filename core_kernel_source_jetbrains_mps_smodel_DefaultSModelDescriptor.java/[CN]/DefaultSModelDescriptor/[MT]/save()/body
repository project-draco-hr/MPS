{
  ModelAccess.assertLegalWrite();
  if (getLoadingState() == ModelLoadingState.NOT_LOADED)   return;
  LOG.info("Saving model " + mySModel.getSModelFqName());
  if (needsReloading()) {
    LOG.warning("Model file " + mySModel.getSModelFqName() + " was modified externally!\n"+ "You might want to turn \"Synchronize files on frame activation/deactivation\" option on to avoid conflicts.");
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        final boolean needSave=VcsMigrationUtil.getHandler().resolveDiskMemoryConflict(myModelFile,mySModel);
        if (needSave) {
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              updateDiskTimestamp();
              save();
            }
          }
);
        }
 else {
          ModelAccess.instance().runWriteAction(new Runnable(){
            public void run(){
              reloadFromDisk();
            }
          }
);
        }
      }
    }
,ModalityState.NON_MODAL);
    return;
  }
  if (needsReloading())   return;
  SModelRepository.getInstance().markChanged(this,false);
  SModel newData=myModelRootManager.saveModel(this,true);
  if (newData != null) {
    replaceModel(newData);
  }
  updateDiskTimestamp();
  fireModelSaved();
}
