{
  ModelAccess.assertLegalWrite();
  if (mySModel == null)   return;
  if (!ApplicationManager.getApplication().isDispatchThread()) {
    IllegalStateException exception=new IllegalStateException("DefaultSModelDescriptor.Save should only be called from EDT.");
    exception.printStackTrace();
    throw exception;
  }
  if (!mySModel.isLoading())   LOG.assertInCommand();
  LOG.info("Saving model " + mySModel.getSModelFqName());
  if (needsReloading()) {
    LOG.warning("Model file " + mySModel.getSModelFqName() + " was modified externally!\n"+ "You might want to turn \"Synchronize files on frame activation/deactivation\" option on to avoid conflicts.");
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        final boolean needSave=VcsHelper.resolveDiskMemoryConflict(myModelFile,mySModel);
        if (needSave) {
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              myDiskTimestamp=fileTimestamp();
              save();
            }
          }
);
        }
 else {
          ModelAccess.instance().runWriteAction(new Runnable(){
            public void run(){
              reloadFromDisk();
            }
          }
);
        }
      }
    }
,ModalityState.NON_MODAL);
    return;
  }
  SModelRepository.getInstance().markUnchanged(mySModel);
  myModelRootManager.saveModel(this);
  myDiskTimestamp=fileTimestamp();
  IFile modelFile=getModelFile();
  if (modelFile != null && !modelFile.isReadOnly()) {
    MPSFileSynchronizer.getInstance().requestSync(modelFile);
  }
  fireModelSaved();
}
