{
  boolean b1=SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)),"jetbrains.mps.baseLanguage.math.structure.BigDecimalType");
  boolean b2=SNodeOperations.isInstanceOf(getUnboxedElementType(TypeChecker.getInstance().getTypeOf(node)),"jetbrains.mps.baseLanguage.math.structure.BigComplexType");
  SNode operation=new MathUtil.QuotationClass_30uc9x_a0a2a7().createNode();
  if (b1) {
    operation=new MathUtil.QuotationClass_30uc9x_a0a0a3a7().createNode(MathUtil.getMathContext(node));
  }
  if (b2) {
    operation=new MathUtil.QuotationClass_30uc9x_a0a0a4a7().createNode(MathUtil.getMathContext(node));
  }
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation") && (b1 || b2)) {
    return operation;
  }
 else   if ((SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation") && SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation"),"context",true) != null) && (b1 || b2)) {
    return operation;
  }
 else   if ((SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation") && SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"),"context",true) != null) && (b1 || b2)) {
    return operation;
  }
 else {
    return operations[getIndex(node)];
  }
}
