{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_8acy7z_a0a=null;
switch (0) {
case 0:
        final List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
      final Iterable<Tuples._2<IFile,IFile>> filesToCopy=Sequence.fromIterable(input).<Tuples._2<IFile,IFile>>translate(new ITranslator2<IResource,Tuples._2<IFile,IFile>>(){
        public Iterable<Tuples._2<IFile,IFile>> translate(        IResource res){
          final IModule module=((MResource)res).module();
          return Sequence.fromIterable(((MResource)res).models()).<Tuples._2<IFile,IFile>>translate(new ITranslator2<SModelDescriptor,Tuples._2<IFile,IFile>>(){
            public Iterable<Tuples._2<IFile,IFile>> translate(            SModelDescriptor smd){
              SModel model=smd.getSModel();
              String output=module.getOutputFor(smd);
              IFile outputRoot=(pool.parameters(Target_8acy7z_a.this.getName(),Binaries_Facet.Target_8acy7z_a.Parameters.class).pathToFile() != null ? pool.parameters(Target_8acy7z_a.this.getName(),Binaries_Facet.Target_8acy7z_a.Parameters.class).pathToFile().invoke(output) : FileSystem.getInstance().getFileByPath(output));
              final IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,outputRoot);
              final FilesDelta fd=new FilesDelta(outputDir);
              ListSequence.fromList(deltaList).addElement(fd);
              return ListSequence.fromList(SModelOperations.getNodes(model,"jetbrains.mps.lang.plugin.structure.Resource")).<Tuples._2<IFile,IFile>>select(new ISelector<SNode,Tuples._2<IFile,IFile>>(){
                public Tuples._2<IFile,IFile> select(                SNode bin){
                  IFile fromFile=FileSystem.getInstance().getFileByPath(MacrosUtil.expandPath(SPropertyOperations.getString(bin,"path"),module.getModuleFqName()));
                  IFile toFile=outputDir.getDescendant(fromFile.getName());
                  fd.written(toFile);
                  return MultiTuple.<IFile,IFile>from(fromFile,toFile);
                }
              }
);
            }
          }
);
        }
      }
);
    _output_8acy7z_a0a=Sequence.fromIterable(_output_8acy7z_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
  ModelAccess.instance().writeFilesInEDT(new Runnable(){
    public void run(){
      Sequence.fromIterable(filesToCopy).toListSequence().visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
        public void visit(        Tuples._2<IFile,IFile> ftc){
          IFileUtils.copyFileContent(ftc._0(),ftc._1());
        }
      }
);
    }
  }
);
default :
return new IResult.SUCCESS(_output_8acy7z_a0a);
}
}
}
;
}
