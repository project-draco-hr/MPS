{
  super(operationContext);
  myShowLongName=showLongName;
  myModelDescriptor=modelDescriptor;
  myLabel=label;
  myNodesCondition=condition;
  myCountAdditionalNamePart=countNamePart;
  myTreeUpdater=new SNodeTreeUpdater(operationContext,myDependencyRecorder,getTree());
  myTreeUpdater.addListener(new SNodeTreeListener(){
    public void addAndRemoveRoots(    Set<SNode> removedRoots,    Set<SNode> addedRoots){
      SModelTreeNode.this.addAndRemoveRoots(removedRoots,addedRoots);
    }
    public void addAndRemoveVisibleChildren(    Set<SNode> removedNodes,    Set<SNode> addedNodes){
      SModelTreeNode.this.addAndRemoveVisibleChildren(removedNodes,addedNodes);
    }
    public void updateChangedPresentations(    Set<SNode> nodesWithChangedPresentations){
      SModelTreeNode.this.updateChangedPresentations(nodesWithChangedPresentations);
    }
    public void updateChangedRefs(    Set<SNode> nodesWithChangedRefs){
      SModelTreeNode.this.updateChangedRefs(nodesWithChangedRefs);
    }
    public void updateNodesWithChangedPackages(    Set<SNode> nodesWithChangedPackages){
      SModelTreeNode.this.updateNodesWithChangedPackages(nodesWithChangedPackages);
    }
    public void updateAncestorsPresentationInTree(){
      SModelTreeNode.this.updateAncestorsPresentationInTree();
    }
  }
);
  setUserObject(modelDescriptor);
  updatePresentation();
}
