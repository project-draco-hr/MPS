{
  try {
    myInitializing=true;
    removeAllChildren();
    for (    SNodeGroupTreeNode group : myRootGroups) {
      add(group);
    }
    SModel model=getSModel();
    if (!model.hasModelCommandListener(myModelListener)) {
      model.addModelCommandListener(myModelListener);
      model.addModelListener(mySimpleModelListener);
    }
    Condition<SNode> condition=new Condition<SNode>(){
      public boolean met(      SNode object){
        return !(BaseAdapter.fromNode(object) instanceof AttributeConcept);
      }
    }
;
    List<SNode> filteredRoots=CollectionUtil.filter(model.getRoots(),new AndCondition<SNode>(condition,myNodesCondition));
    List<SNode> sortedRoots=SortUtil.sortNodes(filteredRoots);
    for (    SNode sortedRoot : sortedRoots) {
      MPSTreeNodeEx treeNode=createSNodeTreeNode(sortedRoot,getOperationContext(),myNodesCondition);
      MPSTreeNode group=getNodeGroupFor(sortedRoot);
      if (group != null) {
        group.add(treeNode);
      }
 else {
        add(treeNode);
      }
    }
    DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
    treeModel.nodeStructureChanged(this);
    myInitialized=true;
  }
  finally {
    myInitializing=false;
  }
}
