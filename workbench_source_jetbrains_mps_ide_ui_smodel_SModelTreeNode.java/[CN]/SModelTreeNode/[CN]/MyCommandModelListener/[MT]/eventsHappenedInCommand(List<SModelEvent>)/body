{
  getTree().rebuildTreeLater(new Runnable(){
    public void run(){
      final Set<SNode> addedRoots=new LinkedHashSet<SNode>();
      final Set<SNode> removedRoots=new LinkedHashSet<SNode>();
      final Set<SNode> addedNodes=new LinkedHashSet<SNode>();
      final Set<SNode> removedNodes=new LinkedHashSet<SNode>();
      final Set<SNode> nodesWithChangedProperties=new LinkedHashSet<SNode>();
      final Set<SNode> nodesWithChangedPackages=new LinkedHashSet<SNode>();
      final Set<SNode> nodesWithChangedRefs=new LinkedHashSet<SNode>();
      for (      SModelEvent event : events) {
        event.accept(new SModelEventVisitorAdapter(){
          public void visitRootEvent(          SModelRootEvent event){
            if (event.isAdded()) {
              addedRoots.add(event.getRoot());
              removedRoots.remove(event.getRoot());
            }
            if (event.isRemoved()) {
              removedRoots.add(event.getRoot());
              addedRoots.remove(event.getRoot());
            }
          }
          public void visitChildEvent(          SModelChildEvent event){
            if (event.isAdded()) {
              addedNodes.add(event.getChild());
            }
            if (event.isRemoved()) {
              removedNodes.add(event.getChild());
            }
          }
          public void visitPropertyEvent(          SModelPropertyEvent event){
            nodesWithChangedProperties.add(event.getNode());
            if (PACK.equals(event.getPropertyName()) && event.getNode().isRoot()) {
              nodesWithChangedPackages.add(event.getNode());
            }
          }
          public void visitReferenceEvent(          SModelReferenceEvent event){
            nodesWithChangedRefs.add(event.getReference().getSourceNode());
          }
        }
);
      }
      addAndRemoveRoots(removedRoots,addedRoots);
      addAndRemoveVisibleChildren(removedNodes,addedNodes);
      updateChangedProperties(nodesWithChangedProperties);
      updateChangedRefs(nodesWithChangedRefs);
      updateNodesWithChangedPackages(nodesWithChangedPackages);
      updateAncestorsPresentationInTree();
    }
  }
,false);
}
