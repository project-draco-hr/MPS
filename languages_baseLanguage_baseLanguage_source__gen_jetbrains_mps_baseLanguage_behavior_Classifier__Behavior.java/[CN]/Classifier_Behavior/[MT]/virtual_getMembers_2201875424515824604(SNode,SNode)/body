{
  if (!(SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
    return new ArrayList<SNode>();
  }
  if (!(SConceptPropertyOperations.getBoolean(SNodeOperations.castConcept(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"inheritableMember"))) {
    return ListSequence.fromListWithValues(new ArrayList<SNode>(),ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(thisNode)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
      }
    }
));
  }
  Set<SNode> pretenders=SetSequence.fromSet(new HashSet());
  for (  final SNode classifier : Classifier_Behavior.call_getExtendedClassifiers_2201875424516179426(thisNode)) {
    SetSequence.fromSet(pretenders).addSequence(ListSequence.fromList(Classifier_Behavior.call_getMembers_2201875424515824604(classifier,kind)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return ClassifierMember_Behavior.call_isVisible_8083692786967482069(it,classifier,thisNode);
      }
    }
));
  }
  Set<Object> signatures=SetSequence.fromSet(new HashSet());
  List<SNode> result=new ArrayList<SNode>();
  Iterable<SNode> members=ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
    }
  }
);
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(members));
  SetSequence.fromSet(signatures).addSequence(Sequence.fromIterable(members).select(new ISelector<SNode,Object>(){
    public Object select(    SNode it){
      return ClassifierMember_Behavior.call_getSignatureForOverriding_274804607996650333(it,thisNode);
    }
  }
));
  for (  SNode node : SetSequence.fromSet(pretenders).sort(new ISelector<SNode,Comparable<?>>(){
    public Comparable<?> select(    SNode it){
      if (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
        SNode method=SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        if (SNodeOperations.getParent(method) == SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object")) {
          return 1;
        }
        if (BaseMethodDeclaration_Behavior.call_isAbstract_1232982539764(method)) {
          return 2;
        }
        return 3;
      }
 else {
        return 0;
      }
    }
  }
,false)) {
    Object signature=ClassifierMember_Behavior.call_getSignatureForOverriding_274804607996650333(node,thisNode);
    if (!(SetSequence.fromSet(signatures).contains(signature))) {
      ListSequence.fromList(result).addElement(node);
      SetSequence.fromSet(signatures).addElement(signature);
    }
  }
  return result;
}
