{
  if (!(SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
    return new EmptyScope();
  }
  if (!(SConceptPropertyOperations.getBoolean(SNodeOperations.castConcept(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"inheritableMember"))) {
    return new SimpleScope(ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(thisNode)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
      }
    }
));
  }
  return new ClassifierMembersScope(thisNode,SNodeOperations.castConcept(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember")){
    protected Iterable<SNode> getMembers(    @Nullable String prefix){
      Set<SNode> pretenders=SetSequence.fromSet(new HashSet());
      for (      final SNode classifier : ListSequence.fromList(Classifier_Behavior.call_getExtendedClassifierTypes_2201875424516179426(thisNode)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (it != null);
        }
      }
)) {
        Iterable<SNode> nodes=ListSequence.fromList(Classifier_Behavior.call_getMembers_2201875424515824604(classifier,kind).getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
          }
        }
).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
          }
        }
);
        SetSequence.fromSet(pretenders).addSequence(Sequence.fromIterable(nodes).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return ClassifierMember_Behavior.call_isVisible_8083692786967482069(it,classifier,thisNode);
          }
        }
));
      }
      Map<Object,List<SNode>> signatureToMembers=MapSequence.fromMap(new HashMap<Object,List<SNode>>());
      Iterable<SNode> members=ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
      }
);
      SetSequence.fromSet(pretenders).addSequence(Sequence.fromIterable(members));
      for (      SNode member : pretenders) {
        Object signature=ClassifierMember_Behavior.call_getSignatureForOverriding_274804607996650333(member,thisNode);
        if (!(MapSequence.fromMap(signatureToMembers).containsKey(signature))) {
          MapSequence.fromMap(signatureToMembers).put(signature,ListSequence.fromList(new ArrayList()));
        }
        ListSequence.fromList(MapSequence.fromMap(signatureToMembers).get(signature)).addElement(member);
      }
      List<SNode> result=new ArrayList<SNode>();
      for (      Object signature : MapSequence.fromMap(signatureToMembers).keySet()) {
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(Classifier_Behavior.call_doOverride_7343816061617019844(thisNode,kind,MapSequence.fromMap(signatureToMembers).get(signature))));
      }
      return ListSequence.fromList(result).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
      }
);
    }
  }
;
}
