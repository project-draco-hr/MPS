{
  while (SNodeOperations.getParent(child) != thisNode && child != null) {
    child=SNodeOperations.getParent(child);
  }
  final boolean isStaticContext=!(child == null) && ((SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember") && BehaviorReflection.invokeVirtual(Boolean.TYPE,SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"virtual_isStatic_8986964027630462944",new Object[]{})) || (SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.Classifier") && BehaviorReflection.invokeVirtual(Boolean.TYPE,SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.Classifier"),"virtual_isStatic_7405920559687241224",new Object[]{})) || SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.StaticInitializer"));
  if (SConceptOperations.isExactly(kind,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
    Iterable<SNode> staticImportedFields=null;
    if ((AttributeOperations.getAttribute(thisNode,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.JavaImports")) != null)) {
      staticImportedFields=ClassifierResolveUtils.staticImportedFields(AttributeOperations.getAttribute(thisNode,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.JavaImports")));
    }
    Iterable<SNode> variables=Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.FieldDeclaration") && !(isStaticContext));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
      }
    }
).concat(Sequence.fromIterable(staticImportedFields));
    return Scopes.forVariables(kind,variables,ScopeUtils.lazyParentScope(thisNode,kind));
  }
  if (SConceptOperations.isExactly(kind,"jetbrains.mps.baseLanguage.structure.MethodDeclaration")) {
    Iterable<SNode> staticImportedMethods=null;
    if ((AttributeOperations.getAttribute(thisNode,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.JavaImports")) != null)) {
      staticImportedMethods=ClassifierResolveUtils.staticImportedMethods(AttributeOperations.getAttribute(thisNode,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.JavaImports")));
    }
    Iterable<SNode> methods=Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && !(isStaticContext));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.MethodDeclaration");
      }
    }
).concat(Sequence.fromIterable(staticImportedMethods));
    return Scopes.forMethods(kind,new MethodsScope(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}),methods),ScopeUtils.lazyParentScope(thisNode,kind));
  }
{
    SNode concept_i0bb;
    concept_i0bb=kind;
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.ContextClassifierKind")) {
      return CompositeWithParentScope.from(thisNode,thisNode,kind);
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration")) {
      if (!(isStaticContext)) {
        return Scopes.forTypeVariables(SLinkOperations.getTargets(thisNode,"typeVariableDeclaration",true),ScopeUtils.lazyParentScope(thisNode,kind));
      }
 else {
        return ScopeUtils.lazyParentScope(thisNode,kind);
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
{
        Iterable<SNode> staticMethods=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),thisNode,"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
          }
        }
);
        if (!(isStaticContext)) {
          Iterable<SNode> instanceMethods=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),thisNode,"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
            }
          }
);
          Set<String> filteredNames=SetSequence.fromSet(new HashSet<String>());
          SetSequence.fromSet(filteredNames).addSequence(Sequence.fromIterable(instanceMethods).select(new ISelector<SNode,String>(){
            public String select(            SNode it){
              return SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"name");
            }
          }
));
          SetSequence.fromSet(filteredNames).addSequence(Sequence.fromIterable(staticMethods).select(new ISelector<SNode,String>(){
            public String select(            SNode it){
              return SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),"name");
            }
          }
));
          Scope methodScope=new ListScope((SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") ? staticMethods : instanceMethods)){
            public String getName(            SNode child){
              return SPropertyOperations.getString(SNodeOperations.cast(child,"jetbrains.mps.lang.core.structure.INamedConcept"),"name");
            }
          }
;
          return Scopes.forMethods(kind,methodScope,new FilteringByNameScope(filteredNames,ScopeUtils.lazyParentScope(thisNode,kind)));
        }
 else {
          return Scopes.forMethods(kind,new ListScope(staticMethods){
            public String getName(            SNode child){
              return SPropertyOperations.getString(SNodeOperations.cast(child,"jetbrains.mps.lang.core.structure.INamedConcept"),"name");
            }
          }
,ScopeUtils.lazyParentScope(thisNode,kind));
        }
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.Classifier")) {
      if (child == null) {
        return ScopeUtils.lazyParentScope(thisNode,kind);
      }
      if (SNodeOperations.hasRole(child,"jetbrains.mps.baseLanguage.structure.ClassConcept","superclass") || SNodeOperations.hasRole(child,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface") || SNodeOperations.hasRole(child,"jetbrains.mps.baseLanguage.structure.Interface","extendedInterface")) {
        return ClassifierScopes.getVisibleClassifiersScope(child,false);
      }
      return ClassifierScopes.getVisibleClassifiersScope(child,true);
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
{
        Scope addition=null;
        if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticKind")) {
          Iterable<SNode> members=ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.core.structure.INamedConcept") && SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
            }
          }
);
          addition=new NamedElementsScope(members);
        }
 else {
          if (!(isStaticContext) && child != null) {
            addition=BehaviorReflection.invokeVirtual(Scope.class,thisNode,"virtual_getVisibleMembers_8083692786967356611",new Object[]{child,kind});
          }
        }
        return (addition != null ? Scopes.defaultWithNameHiding(kind,addition,ScopeUtils.lazyParentScope(thisNode,kind)) : ScopeUtils.lazyParentScope(thisNode,kind));
      }
    }
  }
  return ScopeUtils.lazyParentScope(thisNode,kind);
}
