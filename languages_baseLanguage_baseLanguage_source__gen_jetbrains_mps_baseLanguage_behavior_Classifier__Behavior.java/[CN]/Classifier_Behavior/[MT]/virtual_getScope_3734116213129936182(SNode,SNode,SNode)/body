{
  while (SNodeOperations.getParent(child) != thisNode && child != null) {
    child=SNodeOperations.getParent(child);
  }
  if (child == null) {
    return ScopeUtils.lazyParentScope(thisNode,kind);
  }
  final boolean isStaticContext=(SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember") && BehaviorReflection.invokeVirtual(Boolean.TYPE,SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"virtual_isStatic_8986964027630462944",new Object[]{})) || (SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.Classifier") && Classifier_Behavior.call_isStatic_521412098689998668(SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.Classifier"))) || SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.StaticInitializer");
  if (SConceptOperations.isExactly(kind,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
    Iterable<SNode> variables=Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.FieldDeclaration") && !(isStaticContext));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
      }
    }
);
    return Scopes.forVariables(kind,variables,ScopeUtils.lazyParentScope(thisNode,kind));
  }
  if (SConceptOperations.isExactly(kind,"jetbrains.mps.baseLanguage.structure.MethodDeclaration")) {
    Iterable<SNode> methods=Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && !(isStaticContext));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.MethodDeclaration");
      }
    }
);
    return Scopes.forMethods(kind,new MethodsScope(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}),methods),ScopeUtils.lazyParentScope(thisNode,kind));
  }
{
    SNode concept_i0bb;
    concept_i0bb=kind;
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.ContextClassifierKind")) {
      return CompositeWithParentScope.from(thisNode,thisNode,kind);
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration")) {
      if (!(isStaticContext)) {
        return Scopes.forTypeVariables(SLinkOperations.getTargets(thisNode,"typeVariableDeclaration",true),ScopeUtils.lazyParentScope(thisNode,kind));
      }
 else {
        return ScopeUtils.lazyParentScope(thisNode,kind);
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      if (!(isStaticContext)) {
        Scope instanceMethods=BehaviorReflection.invokeVirtual(Scope.class,thisNode,"virtual_getMembers_2201875424515824604",new Object[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")});
        Scope staticMethods=BehaviorReflection.invokeVirtual(Scope.class,thisNode,"virtual_getMembers_2201875424515824604",new Object[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")});
        Set<String> filteredNames=SetSequence.fromSet(new HashSet<String>());
        SetSequence.fromSet(filteredNames).addSequence(Sequence.fromIterable(instanceMethods.getAvailableElements(null)).select(new ISelector<SNode,String>(){
          public String select(          SNode it){
            return SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"name");
          }
        }
));
        SetSequence.fromSet(filteredNames).addSequence(Sequence.fromIterable(staticMethods.getAvailableElements(null)).select(new ISelector<SNode,String>(){
          public String select(          SNode it){
            return SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),"name");
          }
        }
));
        return Scopes.forMethods(kind,(SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration") ? staticMethods : instanceMethods),new FilteringByNameScope(filteredNames,ScopeUtils.lazyParentScope(thisNode,kind)));
      }
 else {
        return Scopes.forMethods(kind,BehaviorReflection.invokeVirtual(Scope.class,thisNode,"virtual_getMembers_2201875424515824604",new Object[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")}),ScopeUtils.lazyParentScope(thisNode,kind));
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_i0bb,"jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
{
        Scope addition=null;
        if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticKind")) {
          Iterable<SNode> members=ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.core.structure.INamedConcept") && SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
            }
          }
);
          addition=new NamedElementsScope(members);
        }
 else {
          if (!(isStaticContext)) {
            addition=Classifier_Behavior.call_getVisibleMembers_8083692786967356611(thisNode,child,kind);
          }
        }
        return (addition != null ? Scopes.defaultWithNameHiding(kind,addition,ScopeUtils.lazyParentScope(thisNode,kind)) : ScopeUtils.lazyParentScope(thisNode,kind));
      }
    }
  }
  return ScopeUtils.lazyParentScope(thisNode,kind);
}
