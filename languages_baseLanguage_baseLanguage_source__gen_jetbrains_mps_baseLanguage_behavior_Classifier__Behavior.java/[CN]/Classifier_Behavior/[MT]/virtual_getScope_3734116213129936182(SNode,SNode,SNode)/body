{
  boolean isStaticContext=(SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember") && ClassifierMember_Behavior.call_isStatic_8986964027630462944(SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.ClassifierMember"))) || (SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.Classifier") && Classifier_Behavior.call_isStatic_521412098689998668(SNodeOperations.cast(child,"jetbrains.mps.baseLanguage.structure.Classifier")));
{
    SNode concept_d0cb;
    concept_d0cb=kind;
    if (SConceptOperations.isSubConceptOf(concept_d0cb,"jetbrains.mps.baseLanguage.structure.ContextClassifierKind")) {
      return CompositeWithParentScope.from(thisNode,thisNode,kind);
    }
    if (SConceptOperations.isSubConceptOf(concept_d0cb,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration")) {
      while (SNodeOperations.getParent(child) != thisNode) {
        child=SNodeOperations.getParent(child);
      }
      if (!(isStaticContext)) {
        return CompositeWithParentScope.from(SLinkOperations.getTargets(thisNode,"typeVariableDeclaration",true),thisNode,kind);
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_d0cb,"jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
{
        Scope addition=null;
        if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticKind")) {
          Iterable<SNode> members=ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
            }
          }
);
          addition=new SimpleScope(members);
        }
 else {
          if (!(isStaticContext)) {
            addition=Classifier_Behavior.call_getVisibleMembers_8083692786967356611(thisNode,child,kind);
          }
        }
        return (addition != null ? HidingByNameScope.create(addition,ScopeUtils.parentScope(thisNode,kind),false) : ScopeUtils.parentScope(thisNode,kind));
      }
    }
  }
  return ScopeUtils.parentScope(thisNode,kind);
}
