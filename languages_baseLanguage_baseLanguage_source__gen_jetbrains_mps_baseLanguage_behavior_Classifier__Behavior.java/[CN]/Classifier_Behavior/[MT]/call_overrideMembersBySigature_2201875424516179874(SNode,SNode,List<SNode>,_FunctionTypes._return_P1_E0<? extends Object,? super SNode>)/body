{
  Set<Object> signatures=SetSequence.fromSet(new HashSet());
  List<SNode> result=new ArrayList<SNode>();
  Iterable<SNode> members=ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(thisNode)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
    }
  }
);
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(members));
  SetSequence.fromSet(signatures).addSequence(Sequence.fromIterable(members).select(new ISelector<SNode,Object>(){
    public Object select(    SNode it){
      return signatureTranform.invoke(it);
    }
  }
));
  Map<Object,Integer> signatureToMembersCount=MapSequence.fromMap(new HashMap<Object,Integer>());
  for (  Object signature : ListSequence.fromList(membersToOverride).select(new ISelector<SNode,Object>(){
    public Object select(    SNode it){
      return signatureTranform.invoke(it);
    }
  }
)) {
    MapSequence.fromMap(signatureToMembersCount).put(signature,(MapSequence.fromMap(signatureToMembersCount).containsKey(signature) ? MapSequence.fromMap(signatureToMembersCount).get(signature) + 1 : 1));
  }
  for (  SNode node : membersToOverride) {
    Object signature=signatureTranform.invoke(node);
    if ((int)MapSequence.fromMap(signatureToMembersCount).get(signature) == 1 && !(SetSequence.fromSet(signatures).contains(signature))) {
      ListSequence.fromList(result).addElement(node);
    }
  }
  return result;
}
