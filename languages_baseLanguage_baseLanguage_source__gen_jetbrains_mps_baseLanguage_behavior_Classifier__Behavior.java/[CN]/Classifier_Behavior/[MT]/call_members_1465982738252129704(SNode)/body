{
  final List<SNode> members=ListSequence.fromList(new ArrayList<SNode>());
  _FunctionTypes._void_P2_E0<? super Iterable<SNode>,? super Boolean> addMembersToResult=new _FunctionTypes._void_P2_E0<Iterable<SNode>,Boolean>(){
    public void invoke(    Iterable<SNode> curMembers,    Boolean addWhitespaceAfterEachMember){
      for (      SNode member : Sequence.fromIterable(curMembers)) {
        ListSequence.fromList(members).addElement(member);
        if (addWhitespaceAfterEachMember) {
          ListSequence.fromList(members).addElement(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PlaceholderMember",null));
        }
      }
      if (Sequence.fromIterable(curMembers).isNotEmpty() && !(addWhitespaceAfterEachMember)) {
        ListSequence.fromList(members).addElement(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PlaceholderMember",null));
      }
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> addMemberToResult=new _FunctionTypes._void_P1_E0<SNode>(){
    public void invoke(    SNode member){
      if ((member != null)) {
        ListSequence.fromList(members).addElement(member);
        ListSequence.fromList(members).addElement(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PlaceholderMember",null));
      }
    }
  }
;
  SNode asClass=SNodeOperations.as(thisNode,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  addMemberToResult.invoke(SLinkOperations.getTarget(asClass,"instanceInitializer",true));
  addMembersToResult.invoke(SLinkOperations.getTargets(thisNode,"staticField",true),false);
  addMembersToResult.invoke(SLinkOperations.getTargets(asClass,"field",true),false);
  addMembersToResult.invoke(SLinkOperations.getTargets(asClass,"constructor",true),true);
  addMembersToResult.invoke(SLinkOperations.getTargets(thisNode,"method",true),!(SNodeOperations.isInstanceOf(thisNode,"jetbrains.mps.baseLanguage.structure.Interface")));
  addMembersToResult.invoke(SLinkOperations.getTargets(asClass,"staticMethod",true),true);
  addMembersToResult.invoke(SLinkOperations.getTargets(thisNode,"staticInnerClassifiers",true),true);
  addMemberToResult.invoke(SLinkOperations.getTarget(asClass,"classInitializer",true));
  if (ListSequence.fromList(members).count() > 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(members).last(),"jetbrains.mps.baseLanguage.structure.PlaceholderMember")) {
    ListSequence.fromList(members).removeLastElement();
  }
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"member",true)));
  return members;
}
