{
  List<SNode> members=ListSequence.fromList(new ArrayList<SNode>());
  SNode asClass=SNodeOperations.as(thisNode,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  if ((SLinkOperations.getTarget(asClass,"instanceInitializer",true) != null)) {
    ListSequence.fromList(members).addElement(SLinkOperations.getTarget(asClass,"instanceInitializer",true));
  }
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"staticField",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass,"field",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass,"property",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass,"constructor",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"method",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(asClass,"staticMethod",true)));
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"staticInnerClassifiers",true)));
  if ((SLinkOperations.getTarget(asClass,"classInitializer",true) != null)) {
    ListSequence.fromList(members).addElement(SLinkOperations.getTarget(asClass,"classInitializer",true));
  }
  ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"member",true)));
  return members;
}
