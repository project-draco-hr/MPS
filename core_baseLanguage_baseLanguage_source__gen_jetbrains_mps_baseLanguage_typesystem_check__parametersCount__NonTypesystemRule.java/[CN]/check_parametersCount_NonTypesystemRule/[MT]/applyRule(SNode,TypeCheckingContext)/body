{
  SNode baseMethodDeclaration=SLinkOperations.getTarget(iMethodCall,"baseMethodDeclaration",false);
  boolean b=true;
  List<SNode> parameterDeclarations=SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true);
  List<SNode> actualArguments=SLinkOperations.getTargets(iMethodCall,"actualArgument",true);
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(parameterDeclarations).last(),"type",true),"jetbrains.mps.baseLanguage.structure.VariableArityType")) {
    b=ListSequence.fromList(parameterDeclarations).count() - 1 <= ListSequence.fromList(actualArguments).count();
  }
 else {
    b=ListSequence.fromList(parameterDeclarations).count() == ListSequence.fromList(actualArguments).count();
  }
  if (!(b)) {
{
      BaseIntentionProvider intentionProvider=null;
      intentionProvider=new BaseIntentionProvider("r:37623e48-51f1-4d67-b248-fce5d55297eb(jetbrains.mps.baseLanguage.typesystem@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
      intentionProvider.putArgument("methodCall",iMethodCall);
      intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(baseMethodDeclaration,"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(iMethodCall,"wrong number of parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1219948518456",intentionProvider,errorTarget);
    }
  }
  if (SLinkOperations.getCount(baseMethodDeclaration,"typeVariableDeclaration") > 0) {
    for (    SNode actual : actualArguments) {
      typeCheckingContext.addDependencyForCurrent(actual);
    }
  }
}
