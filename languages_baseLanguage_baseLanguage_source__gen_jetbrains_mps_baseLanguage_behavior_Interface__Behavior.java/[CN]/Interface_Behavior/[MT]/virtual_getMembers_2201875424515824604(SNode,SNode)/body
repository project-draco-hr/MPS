{
  TransactionCache cache=ModelAccess.instance().getTransactionCache("jetbrains.mps.baseLanguage.structure.Interface");
  Scope cached=(Scope)cache.get(MultiTuple.<SNode,SNode>from(thisNode,kind));
  if (cached != null) {
    return cached;
  }
  SNode[] implementedInterfaces=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"extendedInterface",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"classifier",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"classifier",false);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (it != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Interface");
    }
  }
).toGenericArray(SNode.class);
  Scope result=null;
  if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
    result=FieldDeclarationScope.forInterface(thisNode,implementedInterfaces);
  }
 else   if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
    result=EnumConstantDeclarationScope.forInterface(thisNode,implementedInterfaces);
  }
 else   if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.Property")) {
    result=PropertyScope.forInterface(thisNode,implementedInterfaces);
  }
 else   if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
    result=StaticFieldDeclarationScope.forInterface(thisNode,implementedInterfaces);
  }
 else   if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
    result=StaticMethodDeclarationScope.forInterface(thisNode,implementedInterfaces);
  }
 else   if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
    result=InstanceMethodDeclarationScope.forInterface(thisNode,implementedInterfaces);
  }
  if (result != null) {
    cache.put(MultiTuple.<SNode,SNode>from(thisNode,kind),result);
    return result;
  }
  return Classifier_Behavior.callSuper_getMembers_2201875424515824604(thisNode,"jetbrains.mps.baseLanguage.structure.Interface",kind);
}
