{
  List<SNode> extendsClassifiers=new ArrayList<SNode>();
  ListSequence.fromList(extendsClassifiers).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"extendedInterface",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"classifier",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"classifier",false);
    }
  }
));
  List<SNode> elements=new ArrayList<SNode>();
  Set<Pair<SNode,String>> conceptAndNames=SetSequence.fromSet(new HashSet());
  for (  SNode node : Classifier_Behavior.callSuper_getVisibleMembers_8083692786967356510(thisNode,"jetbrains.mps.baseLanguage.structure.Interface",accessKind,kind).getAvailableElements(null)) {
    ListSequence.fromList(elements).addElement(node);
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.core.structure.INamedConcept")) {
      SetSequence.fromSet(conceptAndNames).addElement(new Pair(SNodeOperations.getConceptDeclaration(node),SPropertyOperations.getString(SNodeOperations.cast(node,"jetbrains.mps.lang.core.structure.INamedConcept"),"name")));
    }
  }
  for (  SNode classifier : ListSequence.fromList(extendsClassifiers).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (it != null);
    }
  }
)) {
    for (    SNode node : Classifier_Behavior.call_getVisibleMembers_8083692786967356510(classifier,ClassAccessKind.SUBCLASS,kind).getAvailableElements(null)) {
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.core.structure.INamedConcept")) {
        Pair<SNode,String> tmp=new Pair(SNodeOperations.getConceptDeclaration(node),SPropertyOperations.getString(SNodeOperations.cast(node,"jetbrains.mps.lang.core.structure.INamedConcept"),"name"));
        if (!(SetSequence.fromSet(conceptAndNames).contains(tmp))) {
          SetSequence.fromSet(conceptAndNames).addElement(tmp);
          ListSequence.fromList(elements).addElement(node);
        }
      }
 else {
        ListSequence.fromList(elements).addElement(node);
      }
    }
  }
  return new SimpleScope(elements);
}
