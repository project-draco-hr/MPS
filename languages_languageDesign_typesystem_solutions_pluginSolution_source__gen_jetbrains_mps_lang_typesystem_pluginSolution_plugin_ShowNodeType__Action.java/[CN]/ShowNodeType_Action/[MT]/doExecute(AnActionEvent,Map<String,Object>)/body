{
  try {
    final Wrappers._T<IErrorReporter> reporter=new Wrappers._T<IErrorReporter>();
    final Wrappers._T<SNode> type=new Wrappers._T<SNode>();
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        TypeContextManager.getInstance().runTypeCheckingAction(((EditorComponent)MapSequence.fromMap(_params).get("editorComponent")),((EditorComponent)MapSequence.fromMap(_params).get("editorComponent")).getNodeForTypechecking(),new ITypechecking.Action(){
          public void run(          TypeCheckingContext typeCheckingContext){
            if (!(typeCheckingContext.isCheckedRoot(false))) {
              typeCheckingContext.checkIfNotChecked(((SNode)MapSequence.fromMap(_params).get("node")),false);
            }
            type.value=typeCheckingContext.getTypeDontCheck(((SNode)MapSequence.fromMap(_params).get("node")));
            reporter.value=typeCheckingContext.getTypeMessageDontCheck(((SNode)MapSequence.fromMap(_params).get("node")));
          }
        }
);
      }
    }
);
    if (type.value == null) {
      JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"no type");
      return;
    }
    final Wrappers._T<SModel> tmpModel=new Wrappers._T<SModel>();
    try {
      ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
        public void run(){
          tmpModel.value=TemporaryModels.getInstance().create(false,TempModuleOptions.forDefaultModule());
          tmpModel.value.addRootNode(type.value);
          TemporaryModels.getInstance().addMissingImports(tmpModel.value);
        }
      }
);
      new MyBaseNodeDialog(((IOperationContext)MapSequence.fromMap(_params).get("context")),((SNode)MapSequence.fromMap(_params).get("node")),type.value,reporter.value).show();
    }
  finally {
      ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
        public void run(){
          tmpModel.value.removeRootNode(type.value);
          TemporaryModels.getInstance().dispose(tmpModel.value);
        }
      }
);
    }
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "ShowNodeType",t);
    }
  }
}
