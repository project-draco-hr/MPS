{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("28f9e497-3b42-4291-aeba-0a1039153ab1"),"jetbrains.mps.lang.plugin")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_ActionAccessOperation;
case 1:
  return props_ActionConstructionParameterDeclaration;
case 2:
return props_ActionConstructorParameterReferenceOperation;
case 3:
return props_ActionDataParameterDeclaration;
case 4:
return props_ActionDataParameterReferenceOperation;
case 5:
return props_ActionDeclaration;
case 6:
return props_ActionGroupDeclaration;
case 7:
return props_ActionGroupMember;
case 8:
return props_ActionGroupRef;
case 9:
return props_ActionInstance;
case 10:
return props_ActionParameter;
case 11:
return props_ActionParameterCondition;
case 12:
return props_ActionParameterDeclaration;
case 13:
return props_ActionParameterReference;
case 14:
return props_ActionParameterReferenceOperation;
case 15:
return props_ActionPlaceSpecification;
case 16:
return props_ActionReference;
case 17:
return props_ActionType;
case 18:
return props_AddElementStatement;
case 19:
return props_AddKeystrokeStatement;
case 20:
return props_AddStatement;
case 21:
return props_AddTabOperation;
case 22:
return props_BaseNodeBlock;
case 23:
return props_BaseProjectOperation;
case 24:
return props_BaseToolDeclaration;
case 25:
return props_BuildGroupBlock;
case 26:
return props_ButtonCreator;
case 27:
return props_CloseTabOperation;
case 28:
return props_ConceptCondition;
case 29:
return props_ConceptFunctionParameter_AnActionEvent;
case 30:
return props_ConceptFunctionParameter_Concept;
case 31:
return props_ConceptFunctionParameter_CreatorType;
case 32:
return props_ConceptFunctionParameter_IModule;
case 33:
return props_ConceptFunctionParameter_MPSProject;
case 34:
return props_ConceptFunctionParameter_Model;
case 35:
return props_ConceptFunctionParameter_OperationContext;
case 36:
return props_ConceptFunctionParameter_PreferencePage_component;
case 37:
return props_ConceptFunctionParameter_Project;
case 38:
return props_ConceptFunctionParameter_SConceptClass;
case 39:
return props_ConceptFunctionParameter_node;
case 40:
return props_ConceptsBlock;
case 41:
return props_CreateBlock;
case 42:
return props_CreateNodeAspectBlock;
case 43:
return props_CreateTabBlock;
case 44:
return props_CustomCondition;
case 45:
return props_DisposeBlock;
case 46:
return props_DoUpdateBlock;
case 47:
return props_EditableModel;
case 48:
return props_EditorTab;
case 49:
return props_EditorTabReference;
case 50:
return props_ElementListContents;
case 51:
return props_EnumerateChildrenFunction;
case 52:
return props_EverywhereActionPlace;
case 53:
return props_ExecuteBlock;
case 54:
return props_GetComponentBlock;
case 55:
return props_GetGroupOperation;
case 56:
return props_GetNodeBlock;
case 57:
return props_GetNodesBlock;
case 58:
return props_GetSelectedTabOperation;
case 59:
return props_GroupAccessOperation;
case 60:
return props_GroupAnchor;
case 61:
return props_GroupContents;
case 62:
return props_GroupType;
case 63:
return props_IdeaActionsDescriptor;
case 64:
return props_IdeaConfigurationXml;
case 65:
return props_IdeaInitializerDescriptor;
case 66:
return props_IdeaPluginDependency;
case 67:
return props_InitBlock;
case 68:
return props_InterfaceExtentionPoint;
case 69:
return props_InterfaceGroup;
case 70:
return props_IsApplicableBlock;
case 71:
return props_IsApplicableTabBlock;
case 72:
return props_KeyMapKeystroke;
case 73:
return props_KeyStrokeType;
case 74:
return props_KeymapChangesDeclaration;
case 75:
return props_KeymapRef;
case 76:
return props_ListenBlock;
case 77:
return props_MPSPluginDependency;
case 78:
return props_ModificationStatement;
case 79:
return props_NodesBlock;
case 80:
return props_NonDumbAwareActions;
case 81:
return props_OldConceptsBlock;
case 82:
return props_OldCreateBlock;
case 83:
return props_OnAfterReadBlock;
case 84:
return props_OnBeforeWriteBlock;
case 85:
return props_Order;
case 86:
return props_OrderConstraints;
case 87:
return props_OrderReference;
case 88:
return props_ParameterCondition_ConceptFunctionParameter;
case 89:
return props_ParameterizedShortcutChange;
case 90:
return props_PersistentPropertyDeclaration;
case 91:
return props_PersistentPropertyReference;
case 92:
return props_PinTabOperation;
case 93:
return props_PluginDependency;
case 94:
return props_PopupCreator;
case 95:
return props_PreferencePage;
case 96:
return props_PreferencePageCommitBlock;
case 97:
return props_PreferencePageIsModifiedBlock;
case 98:
return props_PreferencePageResetBlock;
case 99:
return props_PreferencesComponentDeclaration;
case 100:
return props_PreferencesComponentType;
case 101:
return props_RequiredCondition;
case 102:
return props_Separator;
case 103:
return props_ShortcutChange;
case 104:
return props_SimpleActionPlace;
case 105:
return props_SimpleShortcutChange;
case 106:
return props_SmartDisposeClosureParameterDeclaration;
case 107:
return props_TabbedToolDeclaration;
case 108:
return props_TabbedToolOperation;
case 109:
return props_ToStringConceptFunction;
case 110:
return props_ToStringParameter;
case 111:
return props_ToolActionPlace;
case 112:
return props_ToolDeclaration;
case 113:
return props_ToolInstanceExpression;
case 114:
return props_ToolTab;
case 115:
return props_ToolType;
case 116:
return props_ToolbarCreator;
case 117:
return props_UnpinTabOperation;
case 118:
return props_UpdateBlock;
case 119:
return props_UpdateGroupBlock;
case 120:
return props_UpdateGroupFunction;
}
throw new IllegalStateException();
}
