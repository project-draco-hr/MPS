{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0se.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_ActionAccessOperation;
      }
    break;
case 1:
  if (true) {
    return props_ActionConstructionParameterDeclaration;
  }
break;
case 2:
if (true) {
return props_ActionConstructorParameterReferenceOperation;
}
break;
case 3:
if (true) {
return props_ActionDataParameterDeclaration;
}
break;
case 4:
if (true) {
return props_ActionDataParameterReferenceOperation;
}
break;
case 5:
if (true) {
return props_ActionDeclaration;
}
break;
case 6:
if (true) {
return props_ActionGroupDeclaration;
}
break;
case 7:
if (true) {
return props_ActionGroupMember;
}
break;
case 8:
if (true) {
return props_ActionGroupRef;
}
break;
case 9:
if (true) {
return props_ActionInstance;
}
break;
case 10:
if (true) {
return props_ActionParameter;
}
break;
case 11:
if (true) {
return props_ActionParameterCondition;
}
break;
case 12:
if (true) {
return props_ActionParameterDeclaration;
}
break;
case 13:
if (true) {
return props_ActionParameterReference;
}
break;
case 14:
if (true) {
return props_ActionParameterReferenceOperation;
}
break;
case 15:
if (true) {
return props_ActionPlaceSpecification;
}
break;
case 16:
if (true) {
return props_ActionReference;
}
break;
case 17:
if (true) {
return props_ActionType;
}
break;
case 18:
if (true) {
return props_AddElementStatement;
}
break;
case 19:
if (true) {
return props_AddKeystrokeStatement;
}
break;
case 20:
if (true) {
return props_AddStatement;
}
break;
case 21:
if (true) {
return props_AddTabOperation;
}
break;
case 22:
if (true) {
return props_BaseNodeBlock;
}
break;
case 23:
if (true) {
return props_BaseProjectOperation;
}
break;
case 24:
if (true) {
return props_BaseToolDeclaration;
}
break;
case 25:
if (true) {
return props_BuildGroupBlock;
}
break;
case 26:
if (true) {
return props_ButtonCreator;
}
break;
case 27:
if (true) {
return props_CloseTabOperation;
}
break;
case 28:
if (true) {
return props_ConceptCondition;
}
break;
case 29:
if (true) {
return props_ConceptFunctionParameter_AnActionEvent;
}
break;
case 30:
if (true) {
return props_ConceptFunctionParameter_Concept;
}
break;
case 31:
if (true) {
return props_ConceptFunctionParameter_CreatorType;
}
break;
case 32:
if (true) {
return props_ConceptFunctionParameter_IModule;
}
break;
case 33:
if (true) {
return props_ConceptFunctionParameter_MPSProject;
}
break;
case 34:
if (true) {
return props_ConceptFunctionParameter_Model;
}
break;
case 35:
if (true) {
return props_ConceptFunctionParameter_OperationContext;
}
break;
case 36:
if (true) {
return props_ConceptFunctionParameter_PreferencePage_component;
}
break;
case 37:
if (true) {
return props_ConceptFunctionParameter_Project;
}
break;
case 38:
if (true) {
return props_ConceptFunctionParameter_SConceptClass;
}
break;
case 39:
if (true) {
return props_ConceptFunctionParameter_node;
}
break;
case 40:
if (true) {
return props_ConceptsBlock;
}
break;
case 41:
if (true) {
return props_CreateBlock;
}
break;
case 42:
if (true) {
return props_CreateNodeAspectBlock;
}
break;
case 43:
if (true) {
return props_CreateTabBlock;
}
break;
case 44:
if (true) {
return props_CustomCondition;
}
break;
case 45:
if (true) {
return props_DisposeBlock;
}
break;
case 46:
if (true) {
return props_DoUpdateBlock;
}
break;
case 47:
if (true) {
return props_EditableModel;
}
break;
case 48:
if (true) {
return props_EditorTab;
}
break;
case 49:
if (true) {
return props_EditorTabReference;
}
break;
case 50:
if (true) {
return props_ElementListContents;
}
break;
case 51:
if (true) {
return props_EnumerateChildrenFunction;
}
break;
case 52:
if (true) {
return props_EverywhereActionPlace;
}
break;
case 53:
if (true) {
return props_ExecuteBlock;
}
break;
case 54:
if (true) {
return props_GetComponentBlock;
}
break;
case 55:
if (true) {
return props_GetGroupOperation;
}
break;
case 56:
if (true) {
return props_GetNodeBlock;
}
break;
case 57:
if (true) {
return props_GetNodesBlock;
}
break;
case 58:
if (true) {
return props_GetSelectedTabOperation;
}
break;
case 59:
if (true) {
return props_GroupAccessOperation;
}
break;
case 60:
if (true) {
return props_GroupAnchor;
}
break;
case 61:
if (true) {
return props_GroupContents;
}
break;
case 62:
if (true) {
return props_GroupType;
}
break;
case 63:
if (true) {
return props_IdeaActionsDescriptor;
}
break;
case 64:
if (true) {
return props_IdeaConfigurationXml;
}
break;
case 65:
if (true) {
return props_IdeaInitializerDescriptor;
}
break;
case 66:
if (true) {
return props_IdeaPluginDependency;
}
break;
case 67:
if (true) {
return props_InitBlock;
}
break;
case 68:
if (true) {
return props_InterfaceExtentionPoint;
}
break;
case 69:
if (true) {
return props_InterfaceGroup;
}
break;
case 70:
if (true) {
return props_IsApplicableBlock;
}
break;
case 71:
if (true) {
return props_IsApplicableTabBlock;
}
break;
case 72:
if (true) {
return props_KeyMapKeystroke;
}
break;
case 73:
if (true) {
return props_KeyStrokeType;
}
break;
case 74:
if (true) {
return props_KeymapChangesDeclaration;
}
break;
case 75:
if (true) {
return props_KeymapRef;
}
break;
case 76:
if (true) {
return props_ListenBlock;
}
break;
case 77:
if (true) {
return props_MPSPluginDependency;
}
break;
case 78:
if (true) {
return props_ModificationStatement;
}
break;
case 79:
if (true) {
return props_NodesBlock;
}
break;
case 80:
if (true) {
return props_NonDumbAwareActions;
}
break;
case 81:
if (true) {
return props_OldConceptsBlock;
}
break;
case 82:
if (true) {
return props_OldCreateBlock;
}
break;
case 83:
if (true) {
return props_OnAfterReadBlock;
}
break;
case 84:
if (true) {
return props_OnBeforeWriteBlock;
}
break;
case 85:
if (true) {
return props_Order;
}
break;
case 86:
if (true) {
return props_OrderConstraints;
}
break;
case 87:
if (true) {
return props_OrderReference;
}
break;
case 88:
if (true) {
return props_ParameterCondition_ConceptFunctionParameter;
}
break;
case 89:
if (true) {
return props_ParameterizedShortcutChange;
}
break;
case 90:
if (true) {
return props_PersistentPropertyDeclaration;
}
break;
case 91:
if (true) {
return props_PersistentPropertyReference;
}
break;
case 92:
if (true) {
return props_PinTabOperation;
}
break;
case 93:
if (true) {
return props_PluginDependency;
}
break;
case 94:
if (true) {
return props_PopupCreator;
}
break;
case 95:
if (true) {
return props_PreferencePage;
}
break;
case 96:
if (true) {
return props_PreferencePageCommitBlock;
}
break;
case 97:
if (true) {
return props_PreferencePageIsModifiedBlock;
}
break;
case 98:
if (true) {
return props_PreferencePageResetBlock;
}
break;
case 99:
if (true) {
return props_PreferencesComponentDeclaration;
}
break;
case 100:
if (true) {
return props_PreferencesComponentType;
}
break;
case 101:
if (true) {
return props_RequiredCondition;
}
break;
case 102:
if (true) {
return props_Separator;
}
break;
case 103:
if (true) {
return props_ShortcutChange;
}
break;
case 104:
if (true) {
return props_SimpleActionPlace;
}
break;
case 105:
if (true) {
return props_SimpleShortcutChange;
}
break;
case 106:
if (true) {
return props_SmartDisposeClosureParameterDeclaration;
}
break;
case 107:
if (true) {
return props_TabbedToolDeclaration;
}
break;
case 108:
if (true) {
return props_TabbedToolOperation;
}
break;
case 109:
if (true) {
return props_ToStringConceptFunction;
}
break;
case 110:
if (true) {
return props_ToStringParameter;
}
break;
case 111:
if (true) {
return props_ToolActionPlace;
}
break;
case 112:
if (true) {
return props_ToolDeclaration;
}
break;
case 113:
if (true) {
return props_ToolInstanceExpression;
}
break;
case 114:
if (true) {
return props_ToolTab;
}
break;
case 115:
if (true) {
return props_ToolType;
}
break;
case 116:
if (true) {
return props_ToolbarCreator;
}
break;
case 117:
if (true) {
return props_UnpinTabOperation;
}
break;
case 118:
if (true) {
return props_UpdateBlock;
}
break;
case 119:
if (true) {
return props_UpdateGroupBlock;
}
break;
case 120:
if (true) {
return props_UpdateGroupFunction;
}
break;
default :
}
}
throw new IllegalStateException();
}
