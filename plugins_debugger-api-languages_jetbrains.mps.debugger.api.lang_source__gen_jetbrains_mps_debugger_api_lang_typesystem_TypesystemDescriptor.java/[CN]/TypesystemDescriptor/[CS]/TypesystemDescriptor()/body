{
{
    InferenceRule_Runtime inferenceRule=new typeof_ConceptFunctionParameter_DebuggableNode_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConceptFunctionParameter_ScopeNode_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConceptFunctionParameter_UnitNode_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_CreateBreakpointOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DebuggerConfiguration_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DebuggerReference_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_VariableNodeExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_VariableNodeItem_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    NonTypesystemRule_Runtime nonTypesystemRule=new check_DebuggerReferenceThrowableIsCaught_NonTypesystemRule();
    this.myNonTypesystemRules.add(nonTypesystemRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DebuggerTypeIsDebuggerType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new DebuggerIsDebugger_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
}
