{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_vhxjlb_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<IDataFlowBuilder>singletonList(new Determinant_DataFlow());
      }
    break;
case 1:
  if (true) {
    return Collections.<IDataFlowBuilder>singletonList(new DivExpressionFraction_DataFlow());
  }
break;
case 2:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ExponentialOperation_DataFlow());
}
break;
case 3:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new LinearSolveOperation_DataFlow());
}
break;
case 4:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MathFuncExpression_DataFlow());
}
break;
case 5:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MathSymbol_DataFlow());
}
break;
case 6:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MathSymbolFromToIndex_DataFlow());
}
break;
case 7:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MathSymbolIndex_DataFlow());
}
break;
case 8:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MathSymbolIndexReference_DataFlow());
}
break;
case 9:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixConstructor_DataFlow());
}
break;
case 10:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixElementAccessExpression_DataFlow());
}
break;
case 11:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixInitializer_DataFlow());
}
break;
case 12:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixInitializerIndexReference_DataFlow());
}
break;
case 13:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixNorm_DataFlow());
}
break;
case 14:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatrixZero_DataFlow());
}
break;
case 15:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new VectorInitializer_DataFlow());
}
break;
default :
}
}
return Collections.<IDataFlowBuilder>emptyList();
}
