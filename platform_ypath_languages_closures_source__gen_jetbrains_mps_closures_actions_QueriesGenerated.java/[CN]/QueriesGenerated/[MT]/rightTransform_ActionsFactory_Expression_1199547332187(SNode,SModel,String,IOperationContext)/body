{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode invoke=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.closures.structure.InvokeFunctionExpression");
        SLinkOperations.setTarget(invoke,"function",sourceNode,true);
        return invoke;
      }
      public String getMatchingText(      String pattern){
        return ".invoke";
      }
    }
);
  }
  return result;
}
