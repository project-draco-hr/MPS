{
  Set<IModule> toCompile=new LinkedHashSet<IModule>();
  toCompile.addAll(go.getModules());
  for (  Project p : go.getProjects()) {
    toCompile.addAll(p.getModules());
  }
  for (  final SModelDescriptor modelDescriptor : go.getModels()) {
    IModule owningModule=ModelAccess.instance().runReadAction(new Computable<IModule>(){
      public IModule compute(){
        return modelDescriptor.getModule();
      }
    }
);
    toCompile.add(owningModule);
  }
  final Set<IModule> finalToCompile=CollectionUtil.filter(toCompile,new Condition<IModule>(){
    @Override public boolean met(    IModule module){
      return module.isCompileInMPS() && !(module.isPackaged());
    }
  }
);
  if (finalToCompile.isEmpty()) {
    return;
  }
  info("Starting compilation:");
  StringBuffer sb=new StringBuffer();
  for (  IModule m : finalToCompile) {
    sb.append("    ");
    sb.append(m.getModuleFqName());
    sb.append("\n");
  }
  info(sb.toString());
  MPSCompilationResult result=ModelAccess.instance().runReadAction(new Computable<MPSCompilationResult>(){
    public MPSCompilationResult compute(){
      return new ModuleMaker().make(finalToCompile,new EmptyProgressMonitor(){
        @Override public void step(        String text){
          info("    " + text);
        }
        @Override public void start(        String taskName,        int work){
          info(taskName);
        }
      }
);
    }
  }
);
  info(result.toString());
}
