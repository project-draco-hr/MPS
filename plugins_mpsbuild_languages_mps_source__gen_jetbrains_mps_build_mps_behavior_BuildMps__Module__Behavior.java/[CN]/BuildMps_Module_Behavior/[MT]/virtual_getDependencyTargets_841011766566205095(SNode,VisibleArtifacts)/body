{
  MPSModulesClosure closure=new MPSModulesClosure(artifacts.getGenContext(),thisNode).closure();
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode m : Sequence.fromIterable(closure.getModules())) {
    if (SNodeOperations.getContainingRoot(m) == SNodeOperations.getContainingRoot(thisNode)) {
      continue;
    }
    SNode artifact=SNodeOperations.as(artifacts.findArtifact(m),"jetbrains.mps.build.structure.BuildLayout_Node");
    if (artifact != null) {
      ListSequence.fromList(result).addElement(artifact);
    }
  }
  for (  SNode lr : Sequence.fromIterable(closure.getLanguagesWithRuntime())) {
    if (SNodeOperations.getContainingRoot(lr) == SNodeOperations.getContainingRoot(thisNode)) {
      continue;
    }
    for (    SNode runtime : SLinkOperations.getTargets(lr,"runtime",true)) {
      if (!(SNodeOperations.isInstanceOf(runtime,"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime"))) {
        continue;
      }
      SNode path=SLinkOperations.getTarget(SNodeOperations.cast(runtime,"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime"),"path",true);
      SNode artifact=SNodeOperations.as(artifacts.findArtifact(path),"jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        ListSequence.fromList(result).addElement(artifact);
        if (SNodeOperations.isInstanceOf(artifact,"jetbrains.mps.build.structure.BuildLayout_Copy")) {
          SNode file=SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.cast(artifact,"jetbrains.mps.build.structure.BuildLayout_Copy"),"fileset",true),"jetbrains.mps.build.structure.BuildInputSingleFile");
          if ((file != null)) {
            artifacts.findArtifact(SLinkOperations.getTarget(file,"path",true));
          }
        }
      }
    }
  }
  MPSModulesClosure.RequiredJavaModules requiredJava=closure.getRequiredJava();
  for (  SNode jm : Sequence.fromIterable(requiredJava.getModules())) {
    if (SNodeOperations.getContainingRoot(jm) == SNodeOperations.getContainingRoot(thisNode)) {
      continue;
    }
    if (requiredJava.isReexported(jm)) {
      JavaExportUtil.requireModule(artifacts,jm,thisNode);
    }
 else {
      SNode artifact=SNodeOperations.as(artifacts.findArtifact(jm),"jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        ListSequence.fromList(result).addElement(artifact);
      }
    }
  }
  if (ListSequence.fromList(result).isNotEmpty()) {
    artifacts.needsFetch(thisNode);
    return result;
  }
  return null;
}
