{
  MPSModulesClosure closure=new MPSModulesClosure(artifacts.getGenContext(),thisNode).closure();
  Iterable<SNode> requiredModules=Sequence.fromIterable(((Iterable<SNode>)closure.getModules())).concat(Sequence.fromIterable(((Iterable<SNode>)closure.getLanguagesWithRuntime()))).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.as(artifacts.toOriginalNode(it),"jetbrains.mps.build.mps.structure.BuildMps_Module");
    }
  }
);
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode m : Sequence.fromIterable(requiredModules)) {
    if (SNodeOperations.getContainingRoot(m) == SNodeOperations.getContainingRoot(thisNode)) {
      continue;
    }
    SNode artifact=SNodeOperations.as(artifacts.findArtifact(m),"jetbrains.mps.build.structure.BuildLayout_Node");
    if (artifact != null) {
      ListSequence.fromList(result).addElement(artifact);
    }
  }
  Iterable<SNode> requiredJava=closure.getRequiredJava(thisNode).getModules();
  for (  SNode jm : Sequence.fromIterable(requiredJava)) {
    if (SNodeOperations.getContainingRoot(jm) == SNodeOperations.getContainingRoot(thisNode)) {
      continue;
    }
    SNode artifact=SNodeOperations.as(artifacts.findArtifact(jm),"jetbrains.mps.build.structure.BuildLayout_Node");
    if (artifact != null) {
      ListSequence.fromList(result).addElement(artifact);
    }
  }
  if (ListSequence.fromList(result).isNotEmpty()) {
    artifacts.needsFetch(thisNode);
    return result;
  }
  return null;
}
