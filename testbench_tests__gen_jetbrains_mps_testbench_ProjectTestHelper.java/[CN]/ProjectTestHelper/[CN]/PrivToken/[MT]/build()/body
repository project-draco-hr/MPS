{
  final GenerationOptions.OptionsBuilder optBuilder=GenerationOptions.getDefaults();
  boolean isParallel="true".equalsIgnoreCase(System.getProperty("parallel.generation"));
  if (isParallel) {
    optBuilder.strictMode(true).generateInParallel(isParallel,8);
  }
  final IScriptController ctl=new IScriptController.Stub(){
    @Override public void setup(    IPropertiesPool ppool){
      Tuples._1<Boolean> tparams=(Tuples._1<Boolean>)ppool.properties(new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"),Object.class);
      tparams._0(false);
      Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>> makeparams=(Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>>)ppool.properties(new ITarget.Name("jetbrains.mps.make.facets.Make.make"),Object.class);
      makeparams._0(new _FunctionTypes._return_P1_E0<IFile,String>(){
        public IFile invoke(        String path){
          return tmpFile(path);
        }
      }
);
      Tuples._2<Boolean,GenerationOptions.OptionsBuilder> params=(Tuples._2<Boolean,GenerationOptions.OptionsBuilder>)ppool.properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.configure"),Object.class);
      params._1(optBuilder);
    }
  }
;
  final Wrappers._T<IResult> result=new Wrappers._T<IResult>();
  ModelAccess.instance().flushEventQueue();
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      IOperationContext context=new ProjectOperationContext(project);
      IScript scr=defaultScriptBuilder().toScript();
      try {
        result.value=new TestMakeService(context,myMessageHandler).make(null,collectResources(context,module),scr,ctl,new EmptyProgressMonitor()).get();
      }
 catch (      InterruptedException ignore) {
      }
catch (      ExecutionException ignore) {
      }
    }
  }
);
  ModelAccess.instance().flushEventQueue();
  return result.value.isSucessful();
}
