{
  if (Sequence.fromIterable(initialModules).count() != 1) {
    throw new IllegalStateException("cannot build runtime dependencies for several modules");
  }
  SNode initial=Sequence.fromIterable(initialModules).first();
  modules.add(initial);
  for (  SNode language : getUsedLanguages(initial)) {
    boolean hasRuntime=false;
    for (    SNode rdep : SLinkOperations.getTargets(language,"runtime",true)) {
      if (!(SNodeOperations.isInstanceOf(rdep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime"))) {
        hasRuntime=true;
        continue;
      }
      SNode runtimeSolution=SNodeOperations.as(toOriginal(SLinkOperations.getTarget(SNodeOperations.cast(rdep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime"),"solution",false)),"jetbrains.mps.build.mps.structure.BuildMps_Solution");
      if (runtimeSolution != null) {
        modules.add(runtimeSolution);
      }
    }
    if (hasRuntime) {
      languagesWithRuntime.add(language);
    }
  }
  modules.remove(initial);
  return this;
}
