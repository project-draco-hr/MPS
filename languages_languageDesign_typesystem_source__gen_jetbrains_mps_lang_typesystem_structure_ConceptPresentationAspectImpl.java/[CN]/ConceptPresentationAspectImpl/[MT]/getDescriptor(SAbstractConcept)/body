{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractCheckingRule;
case 1:
  return props_AbstractComparableStatement;
case 2:
return props_AbstractEquationStatement;
case 3:
return props_AbstractInequationStatement;
case 4:
return props_AbstractOverloadedOpsTypeRule;
case 5:
return props_AbstractRule;
case 6:
return props_AbstractSubtypingRule;
case 7:
return props_AddDependencyStatement;
case 8:
return props_ApplicableNodeCondition;
case 9:
return props_ApplicableNodeReference;
case 10:
return props_AssertStatement;
case 11:
return props_AttributedNodeExpression;
case 12:
return props_CaretPositionOperation;
case 13:
return props_CoerceExpression;
case 14:
return props_CoerceStatement;
case 15:
return props_CoerceStrongExpression;
case 16:
return props_ComparisonRule;
case 17:
return props_ConceptClauseLinkInfo;
case 18:
return props_ConceptFunctionParameter_ContextNode;
case 19:
return props_ConceptFunctionParameter_EditorContext;
case 20:
return props_ConceptFunctionParameter_Role;
case 21:
return props_ConceptFunctionParameter_Selection;
case 22:
return props_ConceptFunctionParameter_isAggregation;
case 23:
return props_ConceptFunctionParameter_node;
case 24:
return props_ConceptFunctionParameter_var;
case 25:
return props_ConceptReference;
case 26:
return props_CreateComparableEquationStatement;
case 27:
return props_CreateComparableEquationStatementStrong;
case 28:
return props_CreateEquationStatement;
case 29:
return props_CreateGreaterThanInequationStatement;
case 30:
return props_CreateLessThanInequationStatement;
case 31:
return props_CreateStrongGreaterThanInequationStatement;
case 32:
return props_CreateStrongLessThanInequationStatement;
case 33:
return props_DefaultGroupReference;
case 34:
return props_ErrorInfoExpression;
case 35:
return props_GetOperationType;
case 36:
return props_IRuleWithOneNode;
case 37:
return props_IRuleWithTwoNodes;
case 38:
return props_ImmediateSupertypesExpression;
case 39:
return props_InequationReference;
case 40:
return props_InequationReplacementRule;
case 41:
return props_InferenceRule;
case 42:
return props_InfoStatement;
case 43:
return props_InfoStatementAnnotation;
case 44:
return props_IsApplicableConceptFunction;
case 45:
return props_IsReplacementRuleApplicable_ConceptFunction;
case 46:
return props_IsStrongSubtypeExpression;
case 47:
return props_IsSubtypeExpression;
case 48:
return props_JoinContainer;
case 49:
return props_JoinType;
case 50:
return props_LeftOperandType_parameter;
case 51:
return props_LinkPatternVariableReference;
case 52:
return props_MatchStatement;
case 53:
return props_MatchStatementItem;
case 54:
return props_MeetContainer;
case 55:
return props_MeetType;
case 56:
return props_MessageStatement;
case 57:
return props_MessageStatementAnnotation;
case 58:
return props_MessageTarget;
case 59:
return props_MultipleForeachLoop;
case 60:
return props_MultipleForeachLoopVariable;
case 61:
return props_NodeInfo;
case 62:
return props_Node_InferTypeOperation;
case 63:
return props_Node_TypeOperation;
case 64:
return props_NonTypesystemRule;
case 65:
return props_NormalTypeClause;
case 66:
return props_Operation_parameter;
case 67:
return props_OrStatement;
case 68:
return props_OriginalNodeId;
case 69:
return props_OverloadedOpIsApplicableFunction;
case 70:
return props_OverloadedOpRulesContainer;
case 71:
return props_OverloadedOpTypeRule_OneTypeSpecified;
case 72:
return props_OverloadedOperatorTypeFunction;
case 73:
return props_OverloadedOperatorTypeRule;
case 74:
return props_OverridesConceptFunction;
case 75:
return props_PatternCondition;
case 76:
return props_PatternVariableReference;
case 77:
return props_PrintToTrace;
case 78:
return props_Processed;
case 79:
return props_PropertyMessageTarget;
case 80:
return props_PropertyNameTarget;
case 81:
return props_PropertyPatternVariableReference;
case 82:
return props_QuickFixArgument;
case 83:
return props_QuickFixArgumentReference;
case 84:
return props_QuickFixDescriptionBlock;
case 85:
return props_QuickFixExecuteBlock;
case 86:
return props_QuickFixField;
case 87:
return props_QuickFixFieldReference;
case 88:
return props_QuickFixSetSelectionBlock;
case 89:
return props_ReferenceMessageTarget;
case 90:
return props_ReferenceRoleTarget;
case 91:
return props_ReplacementRuleReference;
case 92:
return props_ReportErrorStatement;
case 93:
return props_ReportErrorStatementAnnotation;
case 94:
return props_RightOperandType_parameter;
case 95:
return props_RuntimeErrorType;
case 96:
return props_RuntimeHoleType;
case 97:
return props_RuntimeListVariable;
case 98:
return props_RuntimeTypeVariable;
case 99:
return props_SelectionType;
case 100:
return props_SubstituteTypeRule;
case 101:
return props_SubtypingRule;
case 102:
return props_SupersedeConceptFunction;
case 103:
return props_TypeCheckerAccessExpression;
case 104:
return props_TypeClause;
case 105:
return props_TypeOfExpression;
case 106:
return props_TypeVarDeclaration;
case 107:
return props_TypeVarReference;
case 108:
return props_TypesystemIntention;
case 109:
return props_TypesystemIntentionArgument;
case 110:
return props_TypesystemQuickFix;
case 111:
return props_VariableConverterItem;
case 112:
return props_VariableConverterItem_ApplicableBlock;
case 113:
return props_VariableConverterItem_ConvertBlock;
case 114:
return props_VariableConvertersContainer;
case 115:
return props_WarningStatement;
case 116:
return props_WarningStatementAnnotation;
case 117:
return props_WasSelectedNodeOperation;
case 118:
return props_WhenConcreteStatement;
case 119:
return props_WhenConcreteVariableDeclaration;
case 120:
return props_WhenConcreteVariableReference;
}
throw new IllegalStateException("Unknown concept " + c);
}
