{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case LanguageConceptSwitch.AbstractCheckingRule:
    return props_AbstractCheckingRule;
case LanguageConceptSwitch.AbstractComparableStatement:
  return props_AbstractComparableStatement;
case LanguageConceptSwitch.AbstractEquationStatement:
return props_AbstractEquationStatement;
case LanguageConceptSwitch.AbstractInequationStatement:
return props_AbstractInequationStatement;
case LanguageConceptSwitch.AbstractOverloadedOpsTypeRule:
return props_AbstractOverloadedOpsTypeRule;
case LanguageConceptSwitch.AbstractRule:
return props_AbstractRule;
case LanguageConceptSwitch.AbstractSubtypingRule:
return props_AbstractSubtypingRule;
case LanguageConceptSwitch.AddDependencyStatement:
return props_AddDependencyStatement;
case LanguageConceptSwitch.ApplicableNodeCondition:
return props_ApplicableNodeCondition;
case LanguageConceptSwitch.ApplicableNodeReference:
return props_ApplicableNodeReference;
case LanguageConceptSwitch.AssertStatement:
return props_AssertStatement;
case LanguageConceptSwitch.AttributedNodeExpression:
return props_AttributedNodeExpression;
case LanguageConceptSwitch.CaretPositionOperation:
return props_CaretPositionOperation;
case LanguageConceptSwitch.CoerceExpression:
return props_CoerceExpression;
case LanguageConceptSwitch.CoerceStatement:
return props_CoerceStatement;
case LanguageConceptSwitch.CoerceStrongExpression:
return props_CoerceStrongExpression;
case LanguageConceptSwitch.ComparisonRule:
return props_ComparisonRule;
case LanguageConceptSwitch.ConceptClauseLinkInfo:
return props_ConceptClauseLinkInfo;
case LanguageConceptSwitch.ConceptFunctionParameter_ContextNode:
return props_ConceptFunctionParameter_ContextNode;
case LanguageConceptSwitch.ConceptFunctionParameter_EditorContext:
return props_ConceptFunctionParameter_EditorContext;
case LanguageConceptSwitch.ConceptFunctionParameter_Role:
return props_ConceptFunctionParameter_Role;
case LanguageConceptSwitch.ConceptFunctionParameter_Selection:
return props_ConceptFunctionParameter_Selection;
case LanguageConceptSwitch.ConceptFunctionParameter_isAggregation:
return props_ConceptFunctionParameter_isAggregation;
case LanguageConceptSwitch.ConceptFunctionParameter_node:
return props_ConceptFunctionParameter_node;
case LanguageConceptSwitch.ConceptFunctionParameter_var:
return props_ConceptFunctionParameter_var;
case LanguageConceptSwitch.ConceptReference:
return props_ConceptReference;
case LanguageConceptSwitch.CreateComparableEquationStatement:
return props_CreateComparableEquationStatement;
case LanguageConceptSwitch.CreateComparableEquationStatementStrong:
return props_CreateComparableEquationStatementStrong;
case LanguageConceptSwitch.CreateEquationStatement:
return props_CreateEquationStatement;
case LanguageConceptSwitch.CreateGreaterThanInequationStatement:
return props_CreateGreaterThanInequationStatement;
case LanguageConceptSwitch.CreateLessThanInequationStatement:
return props_CreateLessThanInequationStatement;
case LanguageConceptSwitch.CreateStrongGreaterThanInequationStatement:
return props_CreateStrongGreaterThanInequationStatement;
case LanguageConceptSwitch.CreateStrongLessThanInequationStatement:
return props_CreateStrongLessThanInequationStatement;
case LanguageConceptSwitch.DefaultGroupReference:
return props_DefaultGroupReference;
case LanguageConceptSwitch.ErrorInfoExpression:
return props_ErrorInfoExpression;
case LanguageConceptSwitch.GetOperationType:
return props_GetOperationType;
case LanguageConceptSwitch.IRuleWithOneNode:
return props_IRuleWithOneNode;
case LanguageConceptSwitch.IRuleWithTwoNodes:
return props_IRuleWithTwoNodes;
case LanguageConceptSwitch.ImmediateSupertypesExpression:
return props_ImmediateSupertypesExpression;
case LanguageConceptSwitch.InequationReference:
return props_InequationReference;
case LanguageConceptSwitch.InequationReplacementRule:
return props_InequationReplacementRule;
case LanguageConceptSwitch.InferenceRule:
return props_InferenceRule;
case LanguageConceptSwitch.InfoStatement:
return props_InfoStatement;
case LanguageConceptSwitch.InfoStatementAnnotation:
return props_InfoStatementAnnotation;
case LanguageConceptSwitch.IsApplicableConceptFunction:
return props_IsApplicableConceptFunction;
case LanguageConceptSwitch.IsReplacementRuleApplicable_ConceptFunction:
return props_IsReplacementRuleApplicable_ConceptFunction;
case LanguageConceptSwitch.IsStrongSubtypeExpression:
return props_IsStrongSubtypeExpression;
case LanguageConceptSwitch.IsSubtypeExpression:
return props_IsSubtypeExpression;
case LanguageConceptSwitch.JoinContainer:
return props_JoinContainer;
case LanguageConceptSwitch.JoinType:
return props_JoinType;
case LanguageConceptSwitch.LeftOperandType_parameter:
return props_LeftOperandType_parameter;
case LanguageConceptSwitch.LinkPatternVariableReference:
return props_LinkPatternVariableReference;
case LanguageConceptSwitch.MatchStatement:
return props_MatchStatement;
case LanguageConceptSwitch.MatchStatementItem:
return props_MatchStatementItem;
case LanguageConceptSwitch.MeetContainer:
return props_MeetContainer;
case LanguageConceptSwitch.MeetType:
return props_MeetType;
case LanguageConceptSwitch.MessageStatement:
return props_MessageStatement;
case LanguageConceptSwitch.MessageStatementAnnotation:
return props_MessageStatementAnnotation;
case LanguageConceptSwitch.MessageTarget:
return props_MessageTarget;
case LanguageConceptSwitch.MultipleForeachLoop:
return props_MultipleForeachLoop;
case LanguageConceptSwitch.MultipleForeachLoopVariable:
return props_MultipleForeachLoopVariable;
case LanguageConceptSwitch.NodeInfo:
return props_NodeInfo;
case LanguageConceptSwitch.Node_InferTypeOperation:
return props_Node_InferTypeOperation;
case LanguageConceptSwitch.Node_TypeOperation:
return props_Node_TypeOperation;
case LanguageConceptSwitch.NonTypesystemRule:
return props_NonTypesystemRule;
case LanguageConceptSwitch.NormalTypeClause:
return props_NormalTypeClause;
case LanguageConceptSwitch.Operation_parameter:
return props_Operation_parameter;
case LanguageConceptSwitch.OrStatement:
return props_OrStatement;
case LanguageConceptSwitch.OriginalNodeId:
return props_OriginalNodeId;
case LanguageConceptSwitch.OverloadedOpIsApplicableFunction:
return props_OverloadedOpIsApplicableFunction;
case LanguageConceptSwitch.OverloadedOpRulesContainer:
return props_OverloadedOpRulesContainer;
case LanguageConceptSwitch.OverloadedOpTypeRule_OneTypeSpecified:
return props_OverloadedOpTypeRule_OneTypeSpecified;
case LanguageConceptSwitch.OverloadedOperatorTypeFunction:
return props_OverloadedOperatorTypeFunction;
case LanguageConceptSwitch.OverloadedOperatorTypeRule:
return props_OverloadedOperatorTypeRule;
case LanguageConceptSwitch.OverridesConceptFunction:
return props_OverridesConceptFunction;
case LanguageConceptSwitch.PatternCondition:
return props_PatternCondition;
case LanguageConceptSwitch.PatternVariableReference:
return props_PatternVariableReference;
case LanguageConceptSwitch.PrintToTrace:
return props_PrintToTrace;
case LanguageConceptSwitch.Processed:
return props_Processed;
case LanguageConceptSwitch.PropertyMessageTarget:
return props_PropertyMessageTarget;
case LanguageConceptSwitch.PropertyNameTarget:
return props_PropertyNameTarget;
case LanguageConceptSwitch.PropertyPatternVariableReference:
return props_PropertyPatternVariableReference;
case LanguageConceptSwitch.QuickFixArgument:
return props_QuickFixArgument;
case LanguageConceptSwitch.QuickFixArgumentReference:
return props_QuickFixArgumentReference;
case LanguageConceptSwitch.QuickFixDescriptionBlock:
return props_QuickFixDescriptionBlock;
case LanguageConceptSwitch.QuickFixExecuteBlock:
return props_QuickFixExecuteBlock;
case LanguageConceptSwitch.QuickFixField:
return props_QuickFixField;
case LanguageConceptSwitch.QuickFixFieldReference:
return props_QuickFixFieldReference;
case LanguageConceptSwitch.QuickFixSetSelectionBlock:
return props_QuickFixSetSelectionBlock;
case LanguageConceptSwitch.ReferenceMessageTarget:
return props_ReferenceMessageTarget;
case LanguageConceptSwitch.ReferenceRoleTarget:
return props_ReferenceRoleTarget;
case LanguageConceptSwitch.ReplacementRuleReference:
return props_ReplacementRuleReference;
case LanguageConceptSwitch.ReportErrorStatement:
return props_ReportErrorStatement;
case LanguageConceptSwitch.ReportErrorStatementAnnotation:
return props_ReportErrorStatementAnnotation;
case LanguageConceptSwitch.RightOperandType_parameter:
return props_RightOperandType_parameter;
case LanguageConceptSwitch.RuntimeErrorType:
return props_RuntimeErrorType;
case LanguageConceptSwitch.RuntimeHoleType:
return props_RuntimeHoleType;
case LanguageConceptSwitch.RuntimeListVariable:
return props_RuntimeListVariable;
case LanguageConceptSwitch.RuntimeTypeVariable:
return props_RuntimeTypeVariable;
case LanguageConceptSwitch.SelectionType:
return props_SelectionType;
case LanguageConceptSwitch.SubstituteTypeRule:
return props_SubstituteTypeRule;
case LanguageConceptSwitch.SubtypingRule:
return props_SubtypingRule;
case LanguageConceptSwitch.SupersedeConceptFunction:
return props_SupersedeConceptFunction;
case LanguageConceptSwitch.TypeCheckerAccessExpression:
return props_TypeCheckerAccessExpression;
case LanguageConceptSwitch.TypeClause:
return props_TypeClause;
case LanguageConceptSwitch.TypeOfExpression:
return props_TypeOfExpression;
case LanguageConceptSwitch.TypeVarDeclaration:
return props_TypeVarDeclaration;
case LanguageConceptSwitch.TypeVarReference:
return props_TypeVarReference;
case LanguageConceptSwitch.TypesystemIntention:
return props_TypesystemIntention;
case LanguageConceptSwitch.TypesystemIntentionArgument:
return props_TypesystemIntentionArgument;
case LanguageConceptSwitch.TypesystemQuickFix:
return props_TypesystemQuickFix;
case LanguageConceptSwitch.VariableConverterItem:
return props_VariableConverterItem;
case LanguageConceptSwitch.VariableConverterItem_ApplicableBlock:
return props_VariableConverterItem_ApplicableBlock;
case LanguageConceptSwitch.VariableConverterItem_ConvertBlock:
return props_VariableConverterItem_ConvertBlock;
case LanguageConceptSwitch.VariableConvertersContainer:
return props_VariableConvertersContainer;
case LanguageConceptSwitch.WarningStatement:
return props_WarningStatement;
case LanguageConceptSwitch.WarningStatementAnnotation:
return props_WarningStatementAnnotation;
case LanguageConceptSwitch.WasSelectedNodeOperation:
return props_WasSelectedNodeOperation;
case LanguageConceptSwitch.WhenConcreteStatement:
return props_WhenConcreteStatement;
case LanguageConceptSwitch.WhenConcreteVariableDeclaration:
return props_WhenConcreteVariableDeclaration;
case LanguageConceptSwitch.WhenConcreteVariableReference:
return props_WhenConcreteVariableReference;
}
return null;
}
