{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0se.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractCheckingRule;
      }
    break;
case 1:
  if (true) {
    return props_AbstractComparableStatement;
  }
break;
case 2:
if (true) {
return props_AbstractEquationStatement;
}
break;
case 3:
if (true) {
return props_AbstractInequationStatement;
}
break;
case 4:
if (true) {
return props_AbstractOverloadedOpsTypeRule;
}
break;
case 5:
if (true) {
return props_AbstractRule;
}
break;
case 6:
if (true) {
return props_AbstractSubtypingRule;
}
break;
case 7:
if (true) {
return props_AddDependencyStatement;
}
break;
case 8:
if (true) {
return props_ApplicableNodeCondition;
}
break;
case 9:
if (true) {
return props_ApplicableNodeReference;
}
break;
case 10:
if (true) {
return props_AssertStatement;
}
break;
case 11:
if (true) {
return props_AttributedNodeExpression;
}
break;
case 12:
if (true) {
return props_CaretPositionOperation;
}
break;
case 13:
if (true) {
return props_CoerceExpression;
}
break;
case 14:
if (true) {
return props_CoerceStatement;
}
break;
case 15:
if (true) {
return props_CoerceStrongExpression;
}
break;
case 16:
if (true) {
return props_ComparisonRule;
}
break;
case 17:
if (true) {
return props_ConceptClauseLinkInfo;
}
break;
case 18:
if (true) {
return props_ConceptFunctionParameter_ContextNode;
}
break;
case 19:
if (true) {
return props_ConceptFunctionParameter_EditorContext;
}
break;
case 20:
if (true) {
return props_ConceptFunctionParameter_Role;
}
break;
case 21:
if (true) {
return props_ConceptFunctionParameter_Selection;
}
break;
case 22:
if (true) {
return props_ConceptFunctionParameter_isAggregation;
}
break;
case 23:
if (true) {
return props_ConceptFunctionParameter_node;
}
break;
case 24:
if (true) {
return props_ConceptFunctionParameter_var;
}
break;
case 25:
if (true) {
return props_ConceptReference;
}
break;
case 26:
if (true) {
return props_CreateComparableEquationStatement;
}
break;
case 27:
if (true) {
return props_CreateComparableEquationStatementStrong;
}
break;
case 28:
if (true) {
return props_CreateEquationStatement;
}
break;
case 29:
if (true) {
return props_CreateGreaterThanInequationStatement;
}
break;
case 30:
if (true) {
return props_CreateLessThanInequationStatement;
}
break;
case 31:
if (true) {
return props_CreateStrongGreaterThanInequationStatement;
}
break;
case 32:
if (true) {
return props_CreateStrongLessThanInequationStatement;
}
break;
case 33:
if (true) {
return props_DefaultGroupReference;
}
break;
case 34:
if (true) {
return props_ErrorInfoExpression;
}
break;
case 35:
if (true) {
return props_GetOperationType;
}
break;
case 36:
if (true) {
return props_IRuleWithOneNode;
}
break;
case 37:
if (true) {
return props_IRuleWithTwoNodes;
}
break;
case 38:
if (true) {
return props_ImmediateSupertypesExpression;
}
break;
case 39:
if (true) {
return props_InequationReference;
}
break;
case 40:
if (true) {
return props_InequationReplacementRule;
}
break;
case 41:
if (true) {
return props_InferenceRule;
}
break;
case 42:
if (true) {
return props_InfoStatement;
}
break;
case 43:
if (true) {
return props_InfoStatementAnnotation;
}
break;
case 44:
if (true) {
return props_IsApplicableConceptFunction;
}
break;
case 45:
if (true) {
return props_IsReplacementRuleApplicable_ConceptFunction;
}
break;
case 46:
if (true) {
return props_IsStrongSubtypeExpression;
}
break;
case 47:
if (true) {
return props_IsSubtypeExpression;
}
break;
case 48:
if (true) {
return props_JoinContainer;
}
break;
case 49:
if (true) {
return props_JoinType;
}
break;
case 50:
if (true) {
return props_LeftOperandType_parameter;
}
break;
case 51:
if (true) {
return props_LinkPatternVariableReference;
}
break;
case 52:
if (true) {
return props_MatchStatement;
}
break;
case 53:
if (true) {
return props_MatchStatementItem;
}
break;
case 54:
if (true) {
return props_MeetContainer;
}
break;
case 55:
if (true) {
return props_MeetType;
}
break;
case 56:
if (true) {
return props_MessageStatement;
}
break;
case 57:
if (true) {
return props_MessageStatementAnnotation;
}
break;
case 58:
if (true) {
return props_MessageTarget;
}
break;
case 59:
if (true) {
return props_MultipleForeachLoop;
}
break;
case 60:
if (true) {
return props_MultipleForeachLoopVariable;
}
break;
case 61:
if (true) {
return props_NodeInfo;
}
break;
case 62:
if (true) {
return props_Node_InferTypeOperation;
}
break;
case 63:
if (true) {
return props_Node_TypeOperation;
}
break;
case 64:
if (true) {
return props_NonTypesystemRule;
}
break;
case 65:
if (true) {
return props_NormalTypeClause;
}
break;
case 66:
if (true) {
return props_Operation_parameter;
}
break;
case 67:
if (true) {
return props_OrStatement;
}
break;
case 68:
if (true) {
return props_OriginalNodeId;
}
break;
case 69:
if (true) {
return props_OverloadedOpIsApplicableFunction;
}
break;
case 70:
if (true) {
return props_OverloadedOpRulesContainer;
}
break;
case 71:
if (true) {
return props_OverloadedOpTypeRule_OneTypeSpecified;
}
break;
case 72:
if (true) {
return props_OverloadedOperatorTypeFunction;
}
break;
case 73:
if (true) {
return props_OverloadedOperatorTypeRule;
}
break;
case 74:
if (true) {
return props_OverridesConceptFunction;
}
break;
case 75:
if (true) {
return props_PatternCondition;
}
break;
case 76:
if (true) {
return props_PatternVariableReference;
}
break;
case 77:
if (true) {
return props_PrintToTrace;
}
break;
case 78:
if (true) {
return props_Processed;
}
break;
case 79:
if (true) {
return props_PropertyMessageTarget;
}
break;
case 80:
if (true) {
return props_PropertyNameTarget;
}
break;
case 81:
if (true) {
return props_PropertyPatternVariableReference;
}
break;
case 82:
if (true) {
return props_QuickFixArgument;
}
break;
case 83:
if (true) {
return props_QuickFixArgumentReference;
}
break;
case 84:
if (true) {
return props_QuickFixDescriptionBlock;
}
break;
case 85:
if (true) {
return props_QuickFixExecuteBlock;
}
break;
case 86:
if (true) {
return props_QuickFixField;
}
break;
case 87:
if (true) {
return props_QuickFixFieldReference;
}
break;
case 88:
if (true) {
return props_QuickFixSetSelectionBlock;
}
break;
case 89:
if (true) {
return props_ReferenceMessageTarget;
}
break;
case 90:
if (true) {
return props_ReferenceRoleTarget;
}
break;
case 91:
if (true) {
return props_ReplacementRuleReference;
}
break;
case 92:
if (true) {
return props_ReportErrorStatement;
}
break;
case 93:
if (true) {
return props_ReportErrorStatementAnnotation;
}
break;
case 94:
if (true) {
return props_RightOperandType_parameter;
}
break;
case 95:
if (true) {
return props_RuntimeErrorType;
}
break;
case 96:
if (true) {
return props_RuntimeHoleType;
}
break;
case 97:
if (true) {
return props_RuntimeListVariable;
}
break;
case 98:
if (true) {
return props_RuntimeTypeVariable;
}
break;
case 99:
if (true) {
return props_SelectionType;
}
break;
case 100:
if (true) {
return props_SubstituteTypeRule;
}
break;
case 101:
if (true) {
return props_SubtypingRule;
}
break;
case 102:
if (true) {
return props_SupersedeConceptFunction;
}
break;
case 103:
if (true) {
return props_TypeCheckerAccessExpression;
}
break;
case 104:
if (true) {
return props_TypeClause;
}
break;
case 105:
if (true) {
return props_TypeOfExpression;
}
break;
case 106:
if (true) {
return props_TypeVarDeclaration;
}
break;
case 107:
if (true) {
return props_TypeVarReference;
}
break;
case 108:
if (true) {
return props_TypesystemIntention;
}
break;
case 109:
if (true) {
return props_TypesystemIntentionArgument;
}
break;
case 110:
if (true) {
return props_TypesystemQuickFix;
}
break;
case 111:
if (true) {
return props_VariableConverterItem;
}
break;
case 112:
if (true) {
return props_VariableConverterItem_ApplicableBlock;
}
break;
case 113:
if (true) {
return props_VariableConverterItem_ConvertBlock;
}
break;
case 114:
if (true) {
return props_VariableConvertersContainer;
}
break;
case 115:
if (true) {
return props_WarningStatement;
}
break;
case 116:
if (true) {
return props_WarningStatementAnnotation;
}
break;
case 117:
if (true) {
return props_WasSelectedNodeOperation;
}
break;
case 118:
if (true) {
return props_WhenConcreteStatement;
}
break;
case 119:
if (true) {
return props_WhenConcreteVariableDeclaration;
}
break;
case 120:
if (true) {
return props_WhenConcreteVariableReference;
}
break;
default :
}
}
throw new IllegalStateException();
}
