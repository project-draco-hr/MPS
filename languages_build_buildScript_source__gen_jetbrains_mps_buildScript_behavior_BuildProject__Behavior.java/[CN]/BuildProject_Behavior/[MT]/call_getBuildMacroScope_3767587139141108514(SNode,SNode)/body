{
  Scope rootScope=ScopeUtil.simpleRoleScope(thisNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.buildScript.structure.BuildProject","macros"));
  if (neq_save77_a0b0e(SNodeOperations.getAncestor(child,"jetbrains.mps.buildScript.structure.BuildProject",false,false),thisNode)) {
    rootScope=ScopeUtil.where(rootScope,new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
      public Boolean invoke(      SNode node){
        return SConceptPropertyOperations.getBoolean(SNodeOperations.cast(node,"jetbrains.mps.buildScript.structure.BuildMacro"),"public");
      }
    }
);
  }
  if ("macros".equals(SNodeOperations.getContainingLinkRole(child))) {
    rootScope=ScopeUtil.where(rootScope,new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
      public Boolean invoke(      SNode it){
        return !(ListSequence.fromList(SNodeOperations.getNextSiblings(child,false)).contains(it)) && !(eq_save77_a0a0a0a0a1a0b0c0e(child,it));
      }
    }
);
  }
  List<Scope> scopes=ListSequence.fromList(new ArrayList<Scope>());
  ListSequence.fromList(scopes).addElement(rootScope);
  ListSequence.fromList(scopes).addSequence(Sequence.fromIterable(ScopeUtil.imported(SLinkOperations.getTargets(thisNode,"dependencies",true),SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildMacro"),child)));
  return new CompositeScope(ListSequence.fromList(scopes).toGenericArray(Scope.class));
}
