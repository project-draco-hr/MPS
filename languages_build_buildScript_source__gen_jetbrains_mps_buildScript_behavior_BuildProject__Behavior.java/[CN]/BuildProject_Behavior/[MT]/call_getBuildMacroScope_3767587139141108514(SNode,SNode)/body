{
  Scope rootScope=ScopeUtil.simpleRoleScope(thisNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.buildScript.structure.BuildProject","macros"));
  SNode containingProject=SNodeOperations.getAncestor(child,"jetbrains.mps.buildScript.structure.BuildProject",false,false);
  if (neq_save77_a0c0d(containingProject,thisNode)) {
    rootScope=ScopeUtil.where(rootScope,new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
      public Boolean invoke(      SNode node){
        return SConceptPropertyOperations.getBoolean(SNodeOperations.cast(node,"jetbrains.mps.buildScript.structure.BuildMacro"),"public");
      }
    }
);
  }
  if ((containingProject != null)) {
    final Wrappers._T<SNode> definedMacro=new Wrappers._T<SNode>();
    if (ListSequence.fromList(SLinkOperations.getTargets(containingProject,"macros",true)).contains(child)) {
      definedMacro.value=SNodeOperations.cast(child,"jetbrains.mps.buildScript.structure.BuildMacro");
    }
 else {
      definedMacro.value=ListSequence.fromList(SLinkOperations.getTargets(containingProject,"macros",true)).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ListSequence.fromList(SNodeOperations.getDescendants(it,null,false,new String[]{})).contains(child);
        }
      }
);
    }
    if ((definedMacro.value != null)) {
      rootScope=ScopeUtil.where(rootScope,new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
        public Boolean invoke(        SNode visibleNode){
          return !(ListSequence.fromList(SNodeOperations.getNextSiblings(definedMacro.value,false)).contains(visibleNode)) && !(eq_save77_a0a0a0a0a1a0b0c0d0d(definedMacro.value,visibleNode));
        }
      }
);
    }
  }
  List<Scope> scopes=ListSequence.fromList(new ArrayList<Scope>());
  ListSequence.fromList(scopes).addElement(rootScope);
  ListSequence.fromList(scopes).addSequence(Sequence.fromIterable(ScopeUtil.imported(SLinkOperations.getTargets(thisNode,"dependencies",true),SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildMacro"),child)));
  return new CompositeScope(ListSequence.fromList(scopes).toGenericArray(Scope.class));
}
