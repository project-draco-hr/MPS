{
  SNode term=(SNode)query.getObjectHolder().getObject();
  SNode root=term.getTopmostAncestor();
  ITypeContextOwner owner=new MyTypeContextOwner();
  TypeContextManager manager=TypeContextManager.getInstance();
  TypeCheckingContext context=manager.acquireTypecheckingContext(root,owner);
  try {
    IncrementalTypechecking component=context.getBaseNodeTypesComponent();
    List<SearchResult<SNode>> rules=new ArrayList<SearchResult<SNode>>();
    if (component == null)     return createResult(term,rules);
    Set<Pair<String,String>> rulesIds=component.getRulesWhichAffectNodeType(term);
    if (rulesIds == null)     return createResult(term,rules);
    for (    Pair<String,String> ruleId : rulesIds) {
      SModelDescriptor modelDescriptor=SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(ruleId.o1));
      if (modelDescriptor == null)       continue;
      SNode rule=modelDescriptor.getSModel().getNodeById(ruleId.o2);
      if (rule == null)       continue;
      rules.add(new SearchResult<SNode>(rule,"rules which affect node's type"));
    }
    return createResult(term,rules);
  }
  finally {
    manager.releaseTypecheckingContext(root,owner);
  }
}
