{
  myCommandQueue.assertSoftlyIsCommandThread();
  SModel model=SNodeOperations.getModel(subtreeRoot);
  for (  SNode node : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(subtreeRoot,null,true,new String[]{}))) {
    if (node != subtreeRoot) {
      processChildAdded(new SModelChildEvent(model,true,SNodeOperations.getParent(node),SNodeOperations.getContainingLinkRole(node),SNodeOperations.getIndexInParent(node),node),false);
    }
    SNode baseParent=myBaseVersionModel.getNodeById(node.getSNodeId());
    for (    SNode baseChild : ListSequence.<SNode>fromList(SNodeOperations.getChildren(baseParent))) {
      SNode thisChild=model.getNodeById(baseChild.getSNodeId());
      if (!(SNodeOperations.getParent(thisChild) == node && ObjectUtils.equals(SNodeOperations.getContainingLinkRole(thisChild),SNodeOperations.getContainingLinkRole(baseChild))) && ObjectUtils.equals(check_fh1co9_a0a1a3a2a2a(SNodeOperations.getPrevSibling(thisChild)),check_fh1co9_b0a1a3a2a2a(SNodeOperations.getPrevSibling(baseChild)))) {
        processChildRemoved(new SModelChildEvent(model,false,node,SNodeOperations.getContainingLinkRole(baseChild),SNodeOperations.getIndexInParent(baseChild),baseChild),false);
      }
    }
    for (    IMapping<String,String> property : MapSequence.<String,String>fromMap(node.getProperties())) {
      propertyChanged(new SModelPropertyEvent(model,property.key(),node,null,property.value()));
    }
    for (    SReference reference : ListSequence.<SReference>fromList(node.getReferences())) {
      referenceAdded(new SModelReferenceEvent(model,reference,true));
    }
  }
}
