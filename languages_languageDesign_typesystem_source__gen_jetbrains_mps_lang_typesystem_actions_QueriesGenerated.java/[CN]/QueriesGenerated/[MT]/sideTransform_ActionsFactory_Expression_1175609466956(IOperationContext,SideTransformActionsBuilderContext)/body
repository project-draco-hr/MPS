{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        List<SNode> subconcepts=SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"),_context.getModel(),operationContext.getScope());
        final IScope scope=operationContext.getScope();
        return ListSequence.fromList(subconcepts).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return AbstractConceptDeclaration_Behavior.call_isDefaultSubstitutableConcept_1213877394594(it,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"),scope);
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode result=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null);
            SNode statement=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.Statement",false,false);
            if (statement == null) {
              return null;
            }
            SNodeOperations.replaceWithAnother(statement,result);
            SNode left=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.NormalTypeClause",null);
            SLinkOperations.setTarget(left,"normalType",_context.getSourceNode(),true);
            SLinkOperations.setTarget(result,"leftExpression",left,true);
            return result;
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"),null));
          }
        }
);
      }
    }
  }
  return result;
}
