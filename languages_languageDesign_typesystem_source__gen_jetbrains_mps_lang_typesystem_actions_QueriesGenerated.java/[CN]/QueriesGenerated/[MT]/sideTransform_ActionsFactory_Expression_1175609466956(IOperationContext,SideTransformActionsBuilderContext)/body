{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        List<SNode> subconcepts=SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").getDeclarationNode(),_context.getModel());
        return ListSequence.fromList(subconcepts).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeUtil.isDefaultSubstitutable(it);
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode result=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)),null);
            SNode statement=SNodeOperations.getNodeAncestor(_context.getSourceNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"),false,false);
            if (statement == null) {
              return null;
            }
            SNodeOperations.replaceWithAnother(statement,result);
            SNode left=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1141682561cL,"jetbrains.mps.lang.typesystem.structure.NormalTypeClause")),null);
            SLinkOperations.setTarget(left,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1141682561cL,0x1141682cac0L,"normalType"),_context.getSourceNode());
            SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,0x1117f3d1d35L,"leftExpression"),left);
            return result;
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
