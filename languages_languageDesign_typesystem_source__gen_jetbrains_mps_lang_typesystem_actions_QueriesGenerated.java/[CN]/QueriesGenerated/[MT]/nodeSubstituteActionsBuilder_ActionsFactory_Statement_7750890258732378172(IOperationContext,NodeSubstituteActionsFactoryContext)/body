{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f60bfd5L,"jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          return ListSequence.fromListAndArray(new ArrayList<String>(),"infer typeof","check typeof");
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode rule=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f60bfd5L,"jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement")),null);
              if ((item).equals("check typeof")) {
                SPropertyOperations.set(rule,MetaAdapterFactory.getProperty(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117f3c1ffaL,0x118e0a511a0L,"checkOnly"),"" + (true));
              }
              return rule;
            }
          }
);
        }
      }
    }
  }
  return result;
}
