{
{
    SNode matchedNode_n3qbw2_a0=binaryOperation;
{
      boolean matches_n3qbw2_a0a=false;
{
        SNode matchingNode_n3qbw2_a0a=binaryOperation;
        if (matchingNode_n3qbw2_a0a != null) {
          matches_n3qbw2_a0a=SModelUtil_new.isAssignableConcept(matchingNode_n3qbw2_a0a.getConcept().getQualifiedName(),"jetbrains.mps.baseLanguage.structure.MulExpression");
        }
      }
      if (matches_n3qbw2_a0a) {
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType")) {
          int lc=SPropertyOperations.getInteger(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType"),"columns");
          int rr=SPropertyOperations.getInteger(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType"),"rows");
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),"jetbrains.mps.baseLanguage.math.structure.MatrixType")) {
            if (lc != 0 && rr != 0 && rr != lc) {
{
                MessageTarget errorTarget=new NodeMessageTarget();
                IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(binaryOperation,"These matrices cannot be multiplied with each other","r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)","6527203785516632809",null,errorTarget);
              }
            }
          }
        }
      }
 else {
        boolean matches_n3qbw2_b0a=false;
{
          SNode matchingNode_n3qbw2_b0a=binaryOperation;
          if (matchingNode_n3qbw2_b0a != null) {
            matches_n3qbw2_b0a=SModelUtil_new.isAssignableConcept(matchingNode_n3qbw2_b0a.getConcept().getQualifiedName(),"jetbrains.mps.baseLanguage.structure.PlusExpression");
          }
        }
        if (matches_n3qbw2_b0a) {
          if (!(MathTypeUtil.checkAdditiveOperationDimensions(matchedNode_n3qbw2_a0))) {
{
              MessageTarget errorTarget=new NodeMessageTarget();
              IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(binaryOperation,"Invalid dimensions","r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)","6527203785516632993",null,errorTarget);
            }
          }
        }
 else {
          boolean matches_n3qbw2_c0a=false;
{
            SNode matchingNode_n3qbw2_c0a=binaryOperation;
            if (matchingNode_n3qbw2_c0a != null) {
              matches_n3qbw2_c0a=SModelUtil_new.isAssignableConcept(matchingNode_n3qbw2_c0a.getConcept().getQualifiedName(),"jetbrains.mps.baseLanguage.structure.MinusExpression");
            }
          }
          if (matches_n3qbw2_c0a) {
            if (!(MathTypeUtil.checkAdditiveOperationDimensions(matchedNode_n3qbw2_a0))) {
{
                MessageTarget errorTarget=new NodeMessageTarget();
                IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(binaryOperation,"Invalid dimensions","r:47d0f24b-df34-4ea0-aa7e-7c2eb0f88f31(jetbrains.mps.baseLanguage.math.typesystem)","6527203785516633003",null,errorTarget);
              }
            }
          }
        }
      }
    }
  }
}
