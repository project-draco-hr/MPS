{
  _FunctionTypes._return_P1_E0<? extends Integer,? extends _FunctionTypes._return_P0_E0<? extends Integer>> fun=new _FunctionTypes._return_P1_E0<Integer,_FunctionTypes._return_P0_E0<? extends Integer>>(){
    public Integer invoke(    _FunctionTypes._return_P0_E0<? extends Integer> f){
      return f.invoke();
    }
  }
;
  _FunctionTypes._return_P2_E0<? extends Integer,? super Integer,? super Integer> add=new _FunctionTypes._return_P2_E0<Integer,Integer,Integer>(){
    public Integer invoke(    Integer x,    Integer y){
      return x + y;
    }
  }
;
  _FunctionTypes._return_P1_E0<? extends Integer,? super Integer> plusThree=new _FunctionTypes._return_P1_E0<Integer,Integer>(){
    public Integer invoke(    Integer x){
      return x + 3;
    }
  }
;
  _FunctionTypes._return_P1_E0<? extends Integer,? super Integer> curriedPlusThree=this.curry(add,3);
  Assert.assertEquals(plusThree.invoke(1),curriedPlusThree.invoke(1));
}
