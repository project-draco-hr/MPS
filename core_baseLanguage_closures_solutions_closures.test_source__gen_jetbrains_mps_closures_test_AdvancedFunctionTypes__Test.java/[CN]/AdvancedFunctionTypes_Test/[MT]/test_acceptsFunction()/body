{
  FunctionTypes._R_from_T<? extends Integer,? extends FunctionTypes._R<? extends Integer>> fun=new FunctionTypes._R_from_T<Integer,FunctionTypes._R<Integer>>(){
    public Integer invoke(    FunctionTypes._R<Integer> f){
      return f.invoke();
    }
  }
;
  FunctionTypes._R_from_S_and_T<? extends Integer,? super Integer,? super Integer> add=new FunctionTypes._R_from_S_and_T<Integer,Integer,Integer>(){
    public Integer invoke(    Integer x,    Integer y){
      return x + y;
    }
  }
;
  FunctionTypes._R_from_T<? extends Integer,? super Integer> plusThree=new FunctionTypes._R_from_T<Integer,Integer>(){
    public Integer invoke(    Integer x){
      return x + 3;
    }
  }
;
  FunctionTypes._R_from_T<? extends Integer,? super Integer> curriedPlusThree=this.curry(add,3);
  Assert.assertEquals(plusThree.invoke(1),curriedPlusThree.invoke(1));
}
