{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        return !(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant")) && !(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.structure.VariableReference")) && !(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression"))&& !(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression"))&& !(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString"));
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
