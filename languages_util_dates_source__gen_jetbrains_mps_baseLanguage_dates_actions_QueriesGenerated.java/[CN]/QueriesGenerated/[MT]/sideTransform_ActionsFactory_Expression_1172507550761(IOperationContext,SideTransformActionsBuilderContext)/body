{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return DateTypeUtil.findDateTimeProperties(operationContext.getScope(),_context.getModel());
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode result=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.dates.structure.PeriodConstant");
            SLinkOperations.setTarget(result,"count",_context.getSourceNode(),true);
            SLinkOperations.setTarget(result,"dateTimeProperty",(item),false);
            return result;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"pluralForm");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "Period constant";
          }
        }
);
      }
    }
  }
  return result;
}
