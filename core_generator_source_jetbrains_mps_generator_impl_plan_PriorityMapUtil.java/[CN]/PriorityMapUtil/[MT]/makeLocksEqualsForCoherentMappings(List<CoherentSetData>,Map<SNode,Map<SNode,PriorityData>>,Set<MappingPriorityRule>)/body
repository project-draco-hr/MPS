{
  for (  CoherentSetData coherentSetData : coherentMappings) {
    Set<SNode> coherentMappingSet=coherentSetData.myMappings;
    Map<SNode,PriorityData> joinedLocks=new HashMap<SNode,PriorityData>();
    for (    SNode coherentMapping : coherentMappingSet) {
      Map<SNode,PriorityData> locks=priorityMap.get(coherentMapping);
      for (      Map.Entry<SNode,PriorityData> entry : locks.entrySet()) {
        SNode lockMapping=entry.getKey();
        PriorityData priorityData=entry.getValue();
        if (coherentMappingSet.contains(lockMapping)) {
          if (priorityData.isStrict()) {
            conflictingRules.addAll(priorityData.myCauseRules);
            conflictingRules.addAll(coherentSetData.myCauseRules);
          }
          continue;
        }
        PriorityData joinedPriorityData=joinedLocks.get(lockMapping);
        if (joinedPriorityData != null) {
          joinedPriorityData.update(priorityData);
        }
 else {
          joinedLocks.put(lockMapping,new PriorityData(priorityData));
        }
      }
    }
    for (    SNode coherentMapping : coherentMappingSet) {
      Map<SNode,PriorityData> joinedLocks_1=new HashMap<SNode,PriorityData>();
      for (      Map.Entry<SNode,PriorityData> entry : joinedLocks.entrySet()) {
        joinedLocks_1.put(entry.getKey(),new PriorityData(entry.getValue()));
      }
      priorityMap.put(coherentMapping,joinedLocks_1);
    }
  }
}
