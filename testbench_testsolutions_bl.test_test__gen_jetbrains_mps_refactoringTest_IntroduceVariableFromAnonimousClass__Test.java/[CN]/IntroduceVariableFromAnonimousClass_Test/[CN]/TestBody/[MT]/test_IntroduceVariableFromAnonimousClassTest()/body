{
  this.addNodeById("3109730807963543192");
  this.addNodeById("3109730807963543200");
  this.addNodeById("3109730807963545002");
  IntroduceLocalVariableRefactoring refactoring=new IntroduceLocalVariableRefactoring();
  refactoring.init(SNodeOperations.cast(this.getNodeById("3109730807963543246"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,"jetbrains.mps.baseLanguage.structure.GenericNewExpression")),null);
  refactoring.setName("i");
  refactoring.setReplacingAll(true);
  refactoring.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("3109730807963543202"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("3109730807963601732"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
