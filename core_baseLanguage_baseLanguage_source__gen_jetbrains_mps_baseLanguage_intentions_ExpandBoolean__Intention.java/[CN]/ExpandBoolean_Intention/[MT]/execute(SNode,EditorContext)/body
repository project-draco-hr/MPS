{
  SNode statementNode=SNodeOperations.cast(SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.Statement",false,false),"jetbrains.mps.baseLanguage.structure.Statement");
  SNode ifNode=SNodeFactoryOperations.insertNewPrevSiblingChild(statementNode,"jetbrains.mps.baseLanguage.structure.IfStatement");
  SNode ifTrue=SNodeFactoryOperations.setNewChild(ifNode,"ifTrue","jetbrains.mps.baseLanguage.structure.StatementList");
  SNode ifFalse=SNodeFactoryOperations.setNewChild(SNodeFactoryOperations.setNewChild(ifNode,"ifFalseStatement","jetbrains.mps.baseLanguage.structure.BlockStatement"),"statements","jetbrains.mps.baseLanguage.structure.StatementList");
  SLinkOperations.setTarget(ifNode,"condition",SNodeOperations.copyNode(node),true);
  ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).insertElement(0,SNodeOperations.copyNode(statementNode));
  ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifFalse,"statement",true)).insertElement(0,SNodeOperations.copyNode(statementNode));
  final SNode fake_node=node;
  Iterable<SNode> refs;
  refs=ListSequence.<SNode>fromList(SNodeOperations.getDescendants(ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).first(),null,false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.VariableReference") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false) == SLinkOperations.getTarget(fake_node,"variableDeclaration",false);
    }
  }
);
  Sequence.<SNode>fromIterable(refs).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNode booleanConstant=SNodeFactoryOperations.replaceWithNewChild(it,"jetbrains.mps.baseLanguage.structure.BooleanConstant");
      SPropertyOperations.set(booleanConstant,"value","" + (true));
    }
  }
);
  refs=ListSequence.<SNode>fromList(SNodeOperations.getDescendants(ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifFalse,"statement",true)).first(),null,false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.VariableReference") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false) == SLinkOperations.getTarget(fake_node,"variableDeclaration",false);
    }
  }
);
  Sequence.<SNode>fromIterable(refs).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNode booleanConstant=SNodeFactoryOperations.replaceWithNewChild(it,"jetbrains.mps.baseLanguage.structure.BooleanConstant");
      SPropertyOperations.set(booleanConstant,"value","" + (false));
    }
  }
);
  SNodeOperations.deleteNode(statementNode);
}
