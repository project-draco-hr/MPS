{
  if (myParts == null) {
    throw new IllegalStateException("commit() should be called after willBeMoved() and isMoved()");
  }
  if (ListSequence.fromList(myParts).count() == ListSequence.fromList(affectedNodes).count()) {
    throw new IllegalStateException("affectedNodes is not properly initialized");
  }
  if (ListSequence.fromList(myParts).isEmpty()) {
    return;
  }
  if (myRepository == null) {
    throw new IllegalStateException("repository is null");
  }
{
    Iterator<MoveNodePart> part_it=ListSequence.fromList(myParts).iterator();
    Iterator<List<SNodeReference>> affected_it=ListSequence.fromList(affectedNodes).iterator();
    MoveNodePart part_var;
    List<SNodeReference> affected_var;
    while (part_it.hasNext() && affected_it.hasNext()) {
      part_var=part_it.next();
      affected_var=affected_it.next();
      part_var.execute(ListSequence.fromList(affected_var).select(new ISelector<SNodeReference,SNode>(){
        public SNode select(        SNodeReference it){
          return it.resolve(myRepository);
        }
      }
));
    }
  }
}
