{
  myParts=ListSequence.fromList(new ArrayList<MoveNodePart>(ListSequence.fromList(nodes).count()));
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SRepository> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SRepository>(){
      public SRepository select(      SNode it){
        return SNodeOperations.getModel(it).getRepository();
      }
    }
);
    myRepository=Sequence.fromIterable(seq).first();
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>(){
      public boolean accept(      SRepository it){
        return eq_f4ilh2_a0a0a0a0a0a2a1a21(it,myRepository);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same repository.");
    }
  }
  for (  SNode from : ListSequence.fromList(nodes)) {
    ListSequence.fromList(myParts).addElement(new MoveNodePart(from.getReference()));
  }
  affectedNodes=ListSequence.fromList(new ArrayList<List<SNodeReference>>());
  for (  MoveNodePart part : ListSequence.fromList(myParts)) {
    ListSequence.fromList(affectedNodes).addElement(Sequence.fromIterable(part.getAffectedNodes(mySearchScope,myRepository)).toListSequence());
  }
}
