{
  if (affectedNodes == null) {
    throw new IllegalStateException("isMoved() can be called only after willBeMoved()");
  }
  SearchResults results=new SearchResults();
  results.getSearchedNodes().addAll(ListSequence.fromList(myParts).select(new ISelector<MoveNodePart,SNodeReference>(){
    public SNodeReference select(    MoveNodePart it){
      return it.getFrom();
    }
  }
).toListSequence());
  results.getSearchResults().addAll(ListSequence.fromList(affectedNodes).translate(new ITranslator2<List<SNodeReference>,SNodeReference>(){
    public Iterable<SNodeReference> translate(    List<SNodeReference> it){
      return it;
    }
  }
).select(new ISelector<SNodeReference,SearchResult>(){
    public SearchResult select(    SNodeReference it){
      return new SearchResult(it,"reference");
    }
  }
).toListSequence());
  return results;
}
