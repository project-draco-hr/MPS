{
  if (affectedNodes == null) {
    throw new IllegalStateException("isMoved() can be called only after willBeMoved()");
  }
  SearchResults<SNode> results=new SearchResults<SNode>();
  results.getSearchedNodes().addAll(ListSequence.fromList(myParts).select(new ISelector<MoveNodePart,SNode>(){
    public SNode select(    MoveNodePart it){
      return it.getFrom().resolve(myRepository);
    }
  }
).toListSequence());
  results.getSearchResults().addAll(ListSequence.fromList(affectedNodes).translate(new ITranslator2<List<SNodeReference>,SNodeReference>(){
    public Iterable<SNodeReference> translate(    List<SNodeReference> it){
      return it;
    }
  }
).select(new ISelector<SNodeReference,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNodeReference it){
      return new SearchResult<SNode>(it.resolve(myRepository),"reference");
    }
  }
).toListSequence());
  return results;
}
