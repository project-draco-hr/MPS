{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("declaration",new BaseReferenceConstraintsDescriptor("declaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode contextBuilder=SNodeOperations.as(Builder_Behavior.getContextBuilder_7057666463730366732(_context.getEnclosingNode()),"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder");
          for (SNode dcl=SLinkOperations.getTarget(contextBuilder,"declaration",false); (dcl != null); dcl=SLinkOperations.getTarget(dcl,"extends",false)) {
            ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(dcl,"property",true)));
            for (            SNode builders : ListSequence.<SNode>fromList(SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders"))) {
              for (              SNode basedecl : ListSequence.<SNode>fromList(SLinkOperations.getTargets(builders,"builder",true))) {
                SNode extdecl=SNodeOperations.as(basedecl,"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration");
                if (dcl == SLinkOperations.getTarget(extdecl,"extended",false)) {
                  ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(extdecl,"property",true)));
                }
              }
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_60c3dm_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
