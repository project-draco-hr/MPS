{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_vhxjlb_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<IDataFlowBuilder>singletonList(new BinaryRegexp_DataFlow());
      }
    break;
case 1:
  if (true) {
    return Collections.<IDataFlowBuilder>singletonList(new FindMatchExpression_DataFlow());
  }
break;
case 2:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new FindMatchStatement_DataFlow());
}
break;
case 3:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ForEachMatchStatement_DataFlow());
}
break;
case 4:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InlineRegexpExpression_DataFlow());
}
break;
case 5:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new LookRegexp_DataFlow());
}
break;
case 6:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchParensRegexp_DataFlow());
}
break;
case 7:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpExpression_DataFlow());
}
break;
case 8:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpOperation_DataFlow());
}
break;
case 9:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpStatement_DataFlow());
}
break;
case 10:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReference_DataFlow());
}
break;
case 11:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReferenceRegexp_DataFlow());
}
break;
case 12:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReferenceReplacement_DataFlow());
}
break;
case 13:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ParensRegexp_DataFlow());
}
break;
case 14:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Regexp_DataFlow());
}
break;
case 15:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new RegexpDeclaration_DataFlow());
}
break;
case 16:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new RegexpDeclarationReferenceRegexp_DataFlow());
}
break;
case 17:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new RegexpExpression_DataFlow());
}
break;
case 18:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Regexps_DataFlow());
}
break;
case 19:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ReplaceRegexpOperation_DataFlow());
}
break;
case 20:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ReplaceWithRegexpOperation_DataFlow());
}
break;
case 21:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SplitOperation_DataFlow());
}
break;
case 22:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SymbolClassRegexp_DataFlow());
}
break;
case 23:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new UnaryRegexp_DataFlow());
}
break;
default :
}
}
return Collections.<IDataFlowBuilder>emptyList();
}
