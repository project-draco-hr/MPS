{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    boolean matchedCase=false;
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new BinaryRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x550fbf4ebc5de3f5L,"jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new FindMatchExpression_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1119d8807a3L,"jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new FindMatchStatement_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1119caff72eL,"jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new ForEachMatchStatement_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117648961dL,"jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new InlineRegexpExpression_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118de32185L,"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new LookRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111797946c7L,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchParensRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x112972a0c32L,"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpExpression_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c9466ae95L,"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpOperation_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11176652f14L,"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchRegexpStatement_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117987ff5eL,"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReference_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReferenceRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x34ae970c192ab94eL,"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new MatchVariableReferenceReplacement_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new ParensRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a06efdL,"jetbrains.mps.baseLanguage.regexp.structure.Regexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new Regexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a6454dL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new RegexpDeclaration_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new RegexpDeclarationReferenceRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118ea37105L,"jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new RegexpExpression_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f550b6dL,"jetbrains.mps.baseLanguage.regexp.structure.Regexps"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new Regexps_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x34ae970c1923d18aL,"jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new ReplaceRegexpOperation_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c94680172L,"jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new ReplaceWithRegexpOperation_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c942ab86bL,"jetbrains.mps.baseLanguage.regexp.structure.SplitOperation"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new SplitOperation_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178e2916aL,"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new SymbolClassRegexp_DataFlow());
    }
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c678adL,"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"))) {
      matchedCase=true;
      return Collections.<IDataFlowBuilder>singletonList(new UnaryRegexp_DataFlow());
    }
    if (!(matchedCase)) {
    }
  }
  return Collections.<IDataFlowBuilder>emptyList();
}
