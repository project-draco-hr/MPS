{
  Iterable<SNode> result=SLinkOperations.getTargets(enumConstant,"method",true);
  Map<String,Set<SNode>> nameToMethodsMap=MapSequence.fromMap(new HashMap<String,Set<SNode>>());
  for (  SNode methodToCheck : Sequence.fromIterable(result).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return canOverride(it);
    }
  }
)) {
    SetSequence.fromSet(safeGet(nameToMethodsMap,SPropertyOperations.getString(methodToCheck,"name"))).addElement(methodToCheck);
  }
  if (MapSequence.fromMap(nameToMethodsMap).isNotEmpty()) {
    SNode dummy=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClass",null);
    SLinkOperations.setTarget(dummy,"classifier",container,false);
    collectOverridingMethodsInClassifierHierarchy(dummy,nameToMethodsMap,SetSequence.fromSet(new HashSet<SNode>()));
  }
}
