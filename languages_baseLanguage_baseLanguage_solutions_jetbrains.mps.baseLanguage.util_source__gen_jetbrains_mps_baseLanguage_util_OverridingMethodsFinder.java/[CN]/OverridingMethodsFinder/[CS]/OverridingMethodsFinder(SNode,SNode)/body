{
  Iterable<SNode> result=SLinkOperations.getChildren(enumConstant,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245299891l,492581319488141108l,"method"));
  Map<String,Set<SNode>> nameToMethodsMap=MapSequence.fromMap(new HashMap<String,Set<SNode>>());
  for (  SNode methodToCheck : Sequence.fromIterable(result).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return canOverride(it);
    }
  }
)) {
    SetSequence.fromSet(safeGet(nameToMethodsMap,SPropertyOperations.getString(methodToCheck,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")))).addElement(methodToCheck);
  }
  if (MapSequence.fromMap(nameToMethodsMap).isNotEmpty()) {
    SNode dummy=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,"jetbrains.mps.baseLanguage.structure.AnonymousClass"));
    SLinkOperations.setTarget(dummy,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,1170346070688l,"classifier"),container);
    collectOverridingMethodsInClassifierHierarchy(dummy,nameToMethodsMap,SetSequence.fromSet(new HashSet<SNode>()));
  }
}
