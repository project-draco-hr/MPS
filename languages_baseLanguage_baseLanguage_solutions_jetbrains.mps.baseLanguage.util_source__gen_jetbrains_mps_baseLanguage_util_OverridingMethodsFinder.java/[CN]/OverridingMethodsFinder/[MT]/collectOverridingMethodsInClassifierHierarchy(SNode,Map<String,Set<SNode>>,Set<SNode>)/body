{
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode clazz=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SNode superClass=((SLinkOperations.getTarget(clazz,"superclass",true) != null) ? SLinkOperations.getTarget(SLinkOperations.getTarget(clazz,"superclass",true),"classifier",false) : SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object"));
    if (addIfNotContains(visitedClassifiers,superClass)) {
      collectOverridingMethods(classifier,superClass,nameToMethodsMap,visitedClassifiers);
    }
    ListSequence.fromList(SLinkOperations.getTargets(clazz,"implementedInterface",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"classifier",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return addIfNotContains(visitedClassifiers,it);
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        collectOverridingMethods(classifier,it,nameToMethodsMap,visitedClassifiers);
      }
    }
);
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      SNode superClassifier=SLinkOperations.getTarget(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false);
      if (addIfNotContains(visitedClassifiers,superClassifier)) {
        collectOverridingMethods(classifier,superClassifier,nameToMethodsMap,visitedClassifiers);
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"classifier",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return addIfNotContains(visitedClassifiers,it);
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        collectOverridingMethods(classifier,it,nameToMethodsMap,visitedClassifiers);
      }
    }
);
  }
}
