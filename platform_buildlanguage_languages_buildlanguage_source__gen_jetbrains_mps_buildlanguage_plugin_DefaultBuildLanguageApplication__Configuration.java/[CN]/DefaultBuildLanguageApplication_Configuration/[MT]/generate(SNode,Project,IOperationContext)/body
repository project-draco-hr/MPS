{
  final GeneratorManager generatorManager=project.getComponent(GeneratorManager.class);
  final File[] file=new File[1];
  TextGenerationHandler generationHandler=new TextGenerationHandler(){
    @Override protected void fileGenerated(    String targetDir,    String fileName,    TextGenerationUtil.TextGenerationResult result){
      File target=new File(targetDir + File.separator + fileName);
      FileUtil.write(target,result.getText());
      if (target.getName().equals(Project_Behavior.call_getFileName_1213877351819(SNodeOperations.cast(currentNode,"jetbrains.mps.buildlanguage.structure.Project")))) {
        file[0]=target;
      }
    }
  }
;
  final Wrappers._T<SModelDescriptor> modelDescriptor=new Wrappers._T<SModelDescriptor>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      modelDescriptor.value=SNodeOperations.getModel(currentNode).getModelDescriptor();
    }
  }
);
  generatorManager.generateModelsWithProgressWindow(ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(),modelDescriptor.value),context,generationHandler,false);
  return file[0];
}
