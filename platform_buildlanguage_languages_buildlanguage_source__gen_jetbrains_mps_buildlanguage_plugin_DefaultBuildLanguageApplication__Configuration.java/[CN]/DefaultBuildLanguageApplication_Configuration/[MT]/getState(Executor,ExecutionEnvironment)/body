{
  return new RunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      final ConsoleViewImpl consoleView=StacktraceUtil.createConsoleView(MPSDataKeys.PROJECT.getData(environment.getDataContext()));
      JComponent consoleComponent=null;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
      Project project=MPSDataKeys.PROJECT.getData(environment.getDataContext());
      IOperationContext context=MPSDataKeys.OPERATION_CONTEXT.getData(environment.getDataContext());
      try {
        final ConfigRunParameters javaRunParameters=DefaultBuildLanguageApplication_Configuration.this.getStateObject().myJavaRunParameters.copy();
        final SNode node=DefaultBuildLanguageApplication_Configuration.this.getNodeForExecution(environment.getProject(),(javaRunParameters).getMake());
{
          ListSequence.fromList(actions).addSequence(ListSequence.fromList(new _FunctionTypes._return_P0_E0<List<AnAction>>(){
            public List<AnAction> invoke(){
{
                final List<AnAction> actionsList=ListSequence.fromListAndArray(new ArrayList<AnAction>(),consoleView.createConsoleActions());
                return actionsList;
              }
            }
          }
.invoke()));
          consoleComponent=consoleView.getComponent();
          consoleDispose=new Runnable(){
            public void run(){
              Disposer.dispose(consoleView);
            }
          }
;
          final Wrappers._T<ExecutionException> ex=new Wrappers._T<ExecutionException>(null);
          handler=(ProcessHandler)new _FunctionTypes._return_P0_E0<Object>(){
            public Object invoke(){
              try {
                AntScriptRunner runner=new AntScriptRunner(javaRunParameters);
                final Wrappers._T<File> file=new Wrappers._T<File>();
                ModelAccess.instance().runReadAction(new Runnable(){
                  public void run(){
                    file.value=FileGenerationUtil.getDefaultOutputDir(SNodeOperations.getModel(node),new File(SNodeOperations.getModel(node).getModelDescriptor().getModule().getGeneratorOutputPath()));
                    file.value=new File(file.value,Project_Behavior.call_getFileName_1213877351819(node));
                  }
                }
);
                Process process=runner.run(file.value);
                return new DefaultProcessHandler(consoleView,process,runner.getCommandString());
              }
 catch (              ExecutionException e) {
                ex.value=e;
                return null;
              }
            }
          }
.invoke();
          if (ex.value != null) {
            throw ex.value;
          }
        }
      }
 catch (      ExecutionException e) {
        throw e;
      }
catch (      Throwable t) {
        DefaultBuildLanguageApplication_Configuration.LOG.error(t);
        throw new ExecutionException("Execution code threw an exception: " + t.getMessage(),t);
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      if (finalHandler == null) {
        return null;
      }
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
