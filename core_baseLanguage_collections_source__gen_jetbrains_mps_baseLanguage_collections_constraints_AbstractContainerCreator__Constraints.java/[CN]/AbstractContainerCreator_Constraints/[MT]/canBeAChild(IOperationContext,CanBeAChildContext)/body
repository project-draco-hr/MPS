{
  final SNode dtype=TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.as(SNodeOperations.getParent(_context.getParentNode()),"jetbrains.mps.baseLanguage.structure.TypeDerivable"),SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Expression"));
  final SNode avlbForCLdecl=ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"),"conceptLinkDeclaration",true)).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return "availableFor".equals(SPropertyOperations.getString(it,"name"));
    }
  }
);
  if ((dtype != null)) {
    Iterable<SNode> avlbFor=ListSequence.fromList(SLinkOperations.getTargets(_context.getChildConcept(),"conceptLink",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode cl){
        return SLinkOperations.getTarget(cl,"conceptLinkDeclaration",false) == avlbForCLdecl;
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode cl){
        return (SNode)SLinkOperations.getTarget(SNodeOperations.cast(cl,"jetbrains.mps.lang.structure.structure.ReferenceConceptLink"),"target",false);
      }
    }
);
    return Sequence.fromIterable(avlbFor).isEmpty() || Sequence.fromIterable(avlbFor).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode trg){
        return SConceptOperations.isSuperConceptOf(SNodeOperations.getConceptDeclaration(dtype),NameUtil.nodeFQName(trg));
      }
    }
);
  }
  return true;
}
