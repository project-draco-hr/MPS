{
  SNode dtype=TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.as(SNodeOperations.getParent(_context.getParentNode()),"jetbrains.mps.baseLanguage.structure.TypeDerivable"),SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Expression"));
  if ((dtype != null)) {
    final SNode cld=ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"),"conceptLinkDeclaration",true)).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return "availableFor".equals(SPropertyOperations.getString(it,"name"));
      }
    }
);
    for (    SNode avlbForConcept : ListSequence.fromList(SLinkOperations.getTargets(_context.getChildConcept(),"conceptLink",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return cld == SLinkOperations.getTarget(it,"conceptLinkDeclaration",false);
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.ReferenceConceptLink"),"target",false);
      }
    }
)) {
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.getConceptDeclaration(dtype),NameUtil.nodeFQName(avlbForConcept))) {
        return true;
      }
    }
    return false;
  }
  return true;
}
