{
  buildForImports();
  buildForDependencies(ModuleDependencyChange.DependencyType.USED_LANG,new _FunctionTypes._return_P1_E0<List<ModuleReference>,SModel>(){
    public List<ModuleReference> invoke(    SModel model){
      return model.importedLanguages();
    }
  }
);
  buildForDependencies(ModuleDependencyChange.DependencyType.USED_DEVKIT,new _FunctionTypes._return_P1_E0<List<ModuleReference>,SModel>(){
    public List<ModuleReference> invoke(    SModel model){
      return model.importedDevkits();
    }
  }
);
  buildForDependencies(ModuleDependencyChange.DependencyType.LANG_ENGAGED_ON_GENERATION,new _FunctionTypes._return_P1_E0<List<ModuleReference>,SModel>(){
    public List<ModuleReference> invoke(    SModel model){
      return model.engagedOnGenerationLanguages();
    }
  }
);
  if (myNewModel.getSModelHeader().isDoNotGenerate() != myOldModel.getSModelHeader().isDoNotGenerate()) {
    ListSequence.fromList(myNewChanges).addElement(new DoNotGenerateOptionChange(myChangeSet));
  }
  if (myNewModel.getSModelHeader().getVersion() != myOldModel.getSModelHeader().getVersion()) {
    ListSequence.fromList(myNewChanges).addElement(new ModelVersionChange(myChangeSet));
  }
}
