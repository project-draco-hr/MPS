{
  _FunctionTypes._return_P1_E0<? extends Set<SNodeId>,? super SModel> rootIds=new _FunctionTypes._return_P1_E0<ISetSequence<SNodeId>,SModel>(){
    public ISetSequence<SNodeId> invoke(    SModel m){
      return SetSequence.fromSetWithValues(new HashSet<SNodeId>(),ListSequence.fromList(SModelOperations.getRoots(m,null)).select(new ISelector<SNode,SNodeId>(){
        public SNodeId select(        SNode node){
          return node.getSNodeId();
        }
      }
));
    }
  }
;
  Set<SNodeId> oldRootIds=rootIds.invoke(myOldModel);
  Set<SNodeId> newRootIds=rootIds.invoke(myNewModel);
  ListSequence.fromList(myNewChanges).addSequence(SetSequence.fromSet(newRootIds).subtract(SetSequence.fromSet(oldRootIds)).select(new ISelector<SNodeId,AddRootChange>(){
    public AddRootChange select(    SNodeId r){
      return new AddRootChange(myChangeSet,r);
    }
  }
));
  ListSequence.fromList(myNewChanges).addSequence(SetSequence.fromSet(oldRootIds).subtract(SetSequence.fromSet(newRootIds)).select(new ISelector<SNodeId,DeleteRootChange>(){
    public DeleteRootChange select(    SNodeId r){
      return new DeleteRootChange(myChangeSet,r);
    }
  }
));
  return SetSequence.fromSet(oldRootIds).intersect(SetSequence.fromSet(newRootIds));
}
