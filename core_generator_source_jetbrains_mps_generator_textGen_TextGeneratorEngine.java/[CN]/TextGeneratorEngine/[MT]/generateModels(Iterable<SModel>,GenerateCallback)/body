{
  ModelAccess.assertLegalRead();
  int size=0;
  for (  SModel model : models) {
    if (model == null) {
      throw new IllegalArgumentException();
    }
    size++;
  }
  final CountDownLatch latch=new CountDownLatch(size);
  for (  final SModel model : models) {
    executor.submit(new Runnable(){
      @Override public void run(){
        boolean oldFlag=ModelAccess.instance().setReadEnabledFlag(true);
        try {
          List<TextGenerationResult> results=new ArrayList<TextGenerationResult>();
          for (          SNode outputNode : model.roots()) {
            results.add(TextGen.generateText(outputNode,failIfNoTextgen,generateDebugInfo,buffers.get()));
          }
          callback.modelGenerated(model,results);
        }
  finally {
          ModelAccess.instance().setReadEnabledFlag(oldFlag);
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
