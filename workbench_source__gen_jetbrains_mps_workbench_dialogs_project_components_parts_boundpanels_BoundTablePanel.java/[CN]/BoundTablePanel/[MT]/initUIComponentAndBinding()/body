{
  this.myTable=(this.myDiffRow ? new DiffRowTable() : new JTable());
  JTableBinding<T,List<T>,JTable> tableBinding=SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE,this.myList,this.myTable);
  for (  final ColumnDescriptor d : this.myColumns) {
    tableBinding.addColumnBinding((Property<T,?>)BeanProperty.create(d.getName()));
  }
  tableBinding.bind();
  this.myOwner.addBinding(tableBinding);
  int i=0;
  for (  final ColumnDescriptor d : this.myColumns) {
    TableColumn column=this.myTable.getColumnModel().getColumn(i);
    column.setHeaderValue(d.getHeader());
    if (d.getWidth() > 0) {
      column.setWidth(d.getWidth());
      column.setMaxWidth(d.getWidth());
    }
    column.setResizable(true);
    TableCellRenderer renderer=d.createRenderer();
    if (renderer != null) {
      column.setCellRenderer(renderer);
    }
    TableCellEditor editor=d.createEditor();
    if (editor != null) {
      column.setCellEditor(editor);
    }
 else {
      JTextField text=new JTextField();
      text.setOpaque(true);
      text.setEditable(false);
      column.setCellEditor(new DefaultCellEditor(text){
        public boolean isCellEditable(        EventObject anEvent){
          return false;
        }
      }
);
    }
    i++;
  }
  this.myTable.setSelectionMode((this.multipleChooserSet() ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_INTERVAL_SELECTION));
  return this.myTable;
}
