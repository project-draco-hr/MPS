{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("conceptPropertyDeclaration",new BaseReferenceConstraintsDescriptor("conceptPropertyDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode enclosingConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",true,false);
          final boolean isConcept=SNodeOperations.isInstanceOf(enclosingConcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
          return (List<SNode>)new ConceptAndSuperConceptsScope(enclosingConcept).getNodes(new Condition<SNode>(){
            @Override public boolean met(            SNode node){
              return SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration") && (isConcept || SPropertyOperations.getBoolean(SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"),"inheritable"));
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_c4t1u2_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
