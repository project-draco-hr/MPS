{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("webr.xml.structure.Text",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode text=SConceptOperations.createNewNode("webr.xml.structure.Text",_context.getCurrentTargetNode());
        if (!(pattern.isEmpty())) {
          SPropertyOperations.set(text,"text",pattern.substring(1));
        }
        return text;
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return pattern.startsWith("/") || pattern.isEmpty();
      }
      public String getDescriptionText(      String pattern){
        return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("webr.xml.structure.Text"),"short_description");
      }
      public String getMatchingText(      String pattern){
        return (pattern.isEmpty() ? "/text" : pattern);
      }
    }
);
  }
  return result;
}
