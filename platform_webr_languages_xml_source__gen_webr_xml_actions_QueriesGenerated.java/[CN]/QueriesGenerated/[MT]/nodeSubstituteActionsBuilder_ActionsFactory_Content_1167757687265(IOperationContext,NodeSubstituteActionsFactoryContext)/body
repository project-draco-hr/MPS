{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final SNode parentElement;
  final boolean isMixed;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return ElementUtil.getParentElementDeclaration(_context.getParentNode(),operationContext.getScope());
      }
    }
;
    parentElement=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return (parentElement == null) || TypeExpression_Behavior.call_isMixed_1213877382388(parentElement);
      }
    }
;
    isMixed=(Boolean)calc.calculate();
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("webr.xml.structure.Element");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ElementUtil.getElementDeclarations(parentElement,_context.getParentNode(),operationContext.getScope());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode prototype;
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"webr.xml.structure.Text") && pattern.equals(SPropertyOperations.getString(_context.getCurrentTargetNode(),"text"))) {
                prototype=null;
              }
 else {
                prototype=_context.getCurrentTargetNode();
              }
              SNode element=SModelOperations.createNewNode(model,"webr.xml.structure.Element",prototype);
              SLinkOperations.setTarget(element,"elementDeclaration",(item),false);
              SPropertyOperations.set(element,"isEmpty","" + (ElementDeclaration_Behavior.call_isEmpty_1213877429867((item))));
              return element;
            }
            public String getMatchingText(            String pattern){
              return "<" + SPropertyOperations.getString((item),"elementName");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
