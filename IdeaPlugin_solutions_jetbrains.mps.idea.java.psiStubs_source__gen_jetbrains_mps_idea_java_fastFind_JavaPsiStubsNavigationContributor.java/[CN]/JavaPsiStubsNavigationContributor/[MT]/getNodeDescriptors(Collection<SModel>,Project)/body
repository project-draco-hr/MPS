{
  List<NodeDescriptor> nodes=ListSequence.fromList(new ArrayList<NodeDescriptor>());
  for (  SModel model : CollectionSequence.fromCollection(collection)) {
    if (!(model instanceof PsiJavaStubModelDescriptor)) {
      continue;
    }
    PsiJavaStubDataSource dataSource=((PsiJavaStubModelDescriptor)model).getSource();
    for (    PsiJavaFile javaFile : Sequence.fromIterable(dataSource.getJavaFiles())) {
      for (      PsiClass clas : javaFile.getClasses()) {
        final PsiClass claz=clas;
        final SModelReference modelRef=model.getModelReference();
        if (!(modelRef instanceof jetbrains.mps.smodel.SModelReference)) {
          continue;
        }
        if (clas.getName() == null || clas.getName().equals("")) {
          continue;
        }
        ListSequence.fromList(nodes).addElement(new NodeDescriptor(){
          public String getName(){
            return claz.getName();
          }
          public SConcept getConcept(){
            String name="jetbrains.mps.baseLanguage.structure.ClassConcept";
            if (claz.isAnnotationType()) {
              name="jetbrains.mps.baseLanguage.structure.Annotation";
            }
 else             if (claz.isInterface()) {
              name="jetbrains.mps.baseLanguage.structure.Interface";
            }
 else             if (claz.isEnum()) {
              name="jetbrains.mps.baseLanguage.structure.EnumClass";
            }
            return SConceptRepository.getInstance().getConcept(name);
          }
          public SNodeReference getNodeReference(){
            return new SNodePointer((jetbrains.mps.smodel.SModelReference)modelRef,new SNodeId.Foreign(SNodeId.Foreign.ID_PREFIX + claz.getName()));
          }
        }
);
      }
    }
  }
  return nodes;
}
