{
  if (ImportOptions.getInstance().isNeedUpdateDeclarations()) {
    String name=this.myNamesMap.getNameForClass(ci.getDeclarationClass());
    if (((SPropertyOperations.getString(decl,"name") == null || SPropertyOperations.getString(decl,"name").length() == 0)) || neq_ixz87t_a0a1a0a01b(SPropertyOperations.getString(decl,"name"),name)) {
      SPropertyOperations.set(decl,"name",name);
      System.out.format("Declaration %s name has been set to %s.\n",ci.getDeclarationClass().getName(),name);
    }
    if ((SPropertyOperations.getString(decl,"classname") == null || SPropertyOperations.getString(decl,"classname").length() == 0)) {
      SPropertyOperations.set(decl,"classname",ci.getDeclarationClass().getName());
    }
    if (SPropertyOperations.getBoolean(decl,"abstract") != ci.isAbstract()) {
      System.out.format("Declaration %s abstract proprety has been set to %b.\n",ci.getDeclarationClass().getName(),ci.isAbstract());
      SPropertyOperations.set(decl,"abstract","" + ci.isAbstract());
    }
    if (SPropertyOperations.getBoolean(decl,"canHaveInternalText") != ci.canHaveInternalText()) {
      System.out.format("Declaration %s can have internal name proprety has been set to %b.\n",ci.getDeclarationClass().getName(),ci.canHaveInternalText());
      SPropertyOperations.set(decl,"canHaveInternalText","" + ci.canHaveInternalText());
    }
    if (!(SPropertyOperations.getBoolean(decl,"depracated")) && ci.isDeprecated()) {
      SPropertyOperations.set(decl,"depracated","" + ci.isDeprecated());
      System.out.format("Declaration %s has been set deprecated.\n",ci.getDeclarationClass().getName());
    }
  }
}
