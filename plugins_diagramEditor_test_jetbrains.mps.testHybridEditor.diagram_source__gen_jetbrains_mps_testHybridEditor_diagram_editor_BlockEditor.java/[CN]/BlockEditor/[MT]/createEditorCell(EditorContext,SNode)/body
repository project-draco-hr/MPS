{
  final BlockCell blockCell=new BlockCell(context,node){
    private final WritableModelProperty<Integer> myXPropery=new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(),getContext().getOperationContext().getProject()){
      protected Integer getModelPropertyValue(){
        return SPropertyOperations.getInteger(node,"x");
      }
      protected void setModelPropertyValue(      Integer x){
        SPropertyOperations.set(node,"x","" + (x));
      }
    }
;
    private final WritableModelProperty<Integer> myYPropery=new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(),getContext().getOperationContext().getProject()){
      protected Integer getModelPropertyValue(){
        return SPropertyOperations.getInteger(node,"y");
      }
      protected void setModelPropertyValue(      Integer y){
        SPropertyOperations.set(node,"y","" + (y));
      }
    }
;
    public ReadableProperty<Integer> getXProperty(){
      return myXPropery;
    }
    public ReadableProperty<Integer> getYProperty(){
      return myYPropery;
    }
    public Mapper<SNode,DiagramNodeView> createMapper(){
      final BlockCell bc=this;
      final Mapper<SNode,DiagramNodeView> mapper=new Mapper<SNode,DiagramNodeView>(node,new BlockView()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forProperty(bc.getXProperty(),new Runnable(){
            public void run(){
              getTarget().moveTo(new Vector(bc.getXProperty().get(),bc.getYProperty().get()));
              getTarget().invalidate();
            }
          }
));
          configuration.add(Synchronizers.forProperty(bc.getYProperty(),new Runnable(){
            public void run(){
              getTarget().moveTo(new Vector(bc.getXProperty().get(),bc.getYProperty().get()));
              getTarget().invalidate();
            }
          }
));
          configuration.add(Synchronizers.forSimpleRole(this,SLinkOperations.getTargets(node,"inputPorts",true),getTarget().inputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode mapperNode){
              EditorCell portCell=context.createNodeCell(mapperNode);
              if (portCell instanceof InputPortCell) {
                addEditorCell(portCell);
                return ((InputPortCell)portCell).getMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.forSimpleRole(this,SLinkOperations.getTargets(node,"outputPorts",true),getTarget().outputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode maperNode){
              EditorCell portCell=context.createNodeCell(maperNode);
              if (portCell instanceof OutputPortCell) {
                addEditorCell(portCell);
                return ((OutputPortCell)portCell).getMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.forConstantRole(this,getSource(),getTarget().contentView.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode block){
              return new BlockEditor.ContentMapper(block);
            }
          }
));
        }
      }
;
      DiagramNodeView view=mapper.getTarget();
      view.rect.background().set(Color.BLACK);
      view.padding().set(0);
      mapper.getTarget().rect.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler(){
        public void move(        final Vector delta){
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              SPropertyOperations.set(((SNode)mapper.getSource()),"x","" + (SPropertyOperations.getInteger(((SNode)mapper.getSource()),"x") + delta.x));
              SPropertyOperations.set(((SNode)mapper.getSource()),"y","" + (SPropertyOperations.getInteger(((SNode)mapper.getSource()),"y") + delta.y));
            }
          }
,context.getOperationContext().getProject());
        }
      }
);
      return mapper;
    }
  }
;
  blockCell.setBig(true);
  blockCell.getEditor().addCellDependentOnNodeProperty(blockCell,new Pair<SNodeReference,String>(new SNodePointer(node),"name"));
  blockCell.getEditor().addCellDependentOnNodeProperty(blockCell,new Pair<SNodeReference,String>(new SNodePointer(node),"x"));
  blockCell.getEditor().addCellDependentOnNodeProperty(blockCell,new Pair<SNodeReference,String>(new SNodePointer(node),"y"));
  return blockCell;
}
