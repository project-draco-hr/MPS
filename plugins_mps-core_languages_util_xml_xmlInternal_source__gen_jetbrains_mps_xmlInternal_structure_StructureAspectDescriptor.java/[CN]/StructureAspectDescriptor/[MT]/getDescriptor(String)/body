{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Comment").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"text"},new boolean[]{true}).alias("!-- comment","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.ContentStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"content"},new boolean[]{false}).alias("contentStatement","").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Document").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"prolog","rootElement"},new boolean[]{false,false}).create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.DocumentStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"document"},new boolean[]{false}).alias("document statement","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.DocumentTypeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("docTypeName").children(new String[]{"externalId"},new boolean[]{false}).create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.ExternalId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Literal").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.NamespaceAttribute").super_("jetbrains.mps.xml.structure.BaseAttribute").parents("jetbrains.mps.xml.structure.BaseAttribute").properties("prefix","uri").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Prolog").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"documentTypeDeclaration"},new boolean[]{false}).create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.PublicExternalId").super_("jetbrains.mps.xmlInternal.structure.ExternalId").parents("jetbrains.mps.xmlInternal.structure.ExternalId").children(new String[]{"pubidLiteral","systemLiteral"},new boolean[]{false,false}).alias("PUBLIC","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.SimpleAttribute").super_("jetbrains.mps.xml.structure.BaseAttribute").parents("jetbrains.mps.xml.structure.BaseAttribute").properties("attributeName").children(new String[]{"value"},new boolean[]{false}).alias("simple attribute","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.SimpleElement").super_("jetbrains.mps.xml.structure.BaseElement").parents("jetbrains.mps.xml.structure.BaseElement").children(new String[]{"elementName"},new boolean[]{false}).alias("simple element","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.StatementElement").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"statementList"},new boolean[]{false}).alias("statementElement","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.XmlFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.xml.structure.XmlRoot").properties("fileName","extension").references("schema").children(new String[]{"document"},new boolean[]{false}).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
