{
  try {
    while (true) {
      boolean schedule, needsWrite;
synchronized (myLock) {
        if (workerStarted || myTasks.isEmpty()) {
          try {
            myLock.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        if (workerStarted) {
          continue;
        }
        Task first=myTasks.peek();
        schedule=first != null;
        needsWrite=schedule && first.needsWrite();
      }
      if (schedule) {
        myModelAccess.waitLock(needsWrite);
        workerStarted=true;
        ApplicationManager.getApplication().invokeLater(myWorker,ModalityState.any());
      }
    }
  }
 catch (  Exception e) {
    LOG.error(null,e);
  }
}
