{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode a : ListSequence.fromList(SConceptOperations.getAllSubConcepts(ListSequence.fromList(BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>)((Class)Object.class),SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(node)),"virtual_getAllowedSubstituends_3044950653914716992",new Object[]{})).first(),SNodeOperations.getModel(node)))) {
    if (!(SPropertyOperations.getBoolean(a,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,4628067390765956802l,"abstract"))) && SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(a),MetaAdapterFactory.getConcept(new UUID(3676340747305173022l,-6911132873973321185l),7255837154369354272l,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"))) {
      ListSequence.fromList(result).addElement(SNodeOperations.cast(a,MetaAdapterFactory.getConcept(new UUID(3676340747305173022l,-6911132873973321185l),7255837154369354272l,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation")));
    }
  }
  return result;
}
