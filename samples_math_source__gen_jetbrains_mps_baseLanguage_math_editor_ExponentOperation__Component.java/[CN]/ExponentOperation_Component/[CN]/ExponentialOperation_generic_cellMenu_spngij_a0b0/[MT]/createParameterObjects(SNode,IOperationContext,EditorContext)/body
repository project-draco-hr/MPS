{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode a : ListSequence.fromList(SConceptOperations.getAllSubConcepts(ListSequence.fromList(ExponentialOperation__BehaviorDescriptor.getAllowedSubstituends_id2D1PBM_bxH0.invoke(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(node)))).first(),SNodeOperations.getModel(node)))) {
    if (!(SPropertyOperations.getBoolean(a,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x403a32c5772c7ec2L,"abstract"))) && SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(a),MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x64b1e972e6443a20L,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"))) {
      ListSequence.fromList(result).addElement(SNodeOperations.castConcept(a,MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x64b1e972e6443a20L,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation")));
    }
  }
  return result;
}
