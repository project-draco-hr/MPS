{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode a : ListSequence.fromList(SConceptOperations.getAllSubConcepts(ListSequence.fromList(BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>)((Class)Object.class),SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(node))),"virtual_getAllowedSubstituends_3044950653914716992",new Object[]{})).first(),SNodeOperations.getModel(node),scope))) {
    if (!(SPropertyOperations.getBoolean(a,"abstract")) && SConceptOperations.isSubConceptOf(a,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation")) {
      ListSequence.fromList(result).addElement(SNodeOperations.castConcept(a,"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"));
    }
  }
  return result;
}
