{
  super(editorContext,node);
  setSubstituteInfo(new CompositeSubstituteInfo(editorContext,new BasicCellContext(node),new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.componentDependencies.structure.Component"),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.componentDependencies.structure.ComponentSet","component"),new _FunctionTypes._void_P3_E0<SNode,Integer,Integer>(){
    public void invoke(    SNode node,    Integer x,    Integer y){
      SPropertyOperations.set(node,"name","New component");
      SPropertyOperations.set(node,"x","" + (100));
      SPropertyOperations.set(node,"y","" + (100));
    }
  }
),createNewDiagramConnectorActions(getSNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.componentDependencies.structure.Dependency"),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.componentDependencies.structure.ComponentSet","dependency"),new _FunctionTypes._return_P4_E0<Boolean,SNode,Object,SNode,Object>(){
    public Boolean invoke(    SNode from,    Object fromId,    SNode to,    Object toId){
      SNode sourceComponent=SNodeOperations.getAncestor(from,"jetbrains.mps.samples.componentDependencies.structure.Component",true,false);
      final SNode targetComponent=SNodeOperations.getAncestor(to,"jetbrains.mps.samples.componentDependencies.structure.Component",true,false);
      return sourceComponent != targetComponent && ListSequence.fromList(SLinkOperations.getTargets(sourceComponent,"dep",true)).all(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.getAncestor(SLinkOperations.getTarget(it,"to",false),"jetbrains.mps.samples.componentDependencies.structure.Component",true,false) != targetComponent;
        }
      }
);
    }
  }
,new _FunctionTypes._void_P5_E0<SNode,SNode,Object,SNode,Object>(){
    public void invoke(    SNode node,    SNode from,    Object fromId,    SNode to,    Object toId){
      SNode sourceComponent=SNodeOperations.getAncestor(from,"jetbrains.mps.samples.componentDependencies.structure.Component",false,false);
      SNode targetComponent=SNodeOperations.getAncestor(to,"jetbrains.mps.samples.componentDependencies.structure.Component",true,false);
      ListSequence.fromList(SLinkOperations.getTargets(sourceComponent,"dep",true)).addElement(SNodeOperations.cast(node,"jetbrains.mps.samples.componentDependencies.structure.Dependency"));
      SLinkOperations.setTarget(node,"to",targetComponent,false);
    }
  }
)}));
  synchronize();
}
