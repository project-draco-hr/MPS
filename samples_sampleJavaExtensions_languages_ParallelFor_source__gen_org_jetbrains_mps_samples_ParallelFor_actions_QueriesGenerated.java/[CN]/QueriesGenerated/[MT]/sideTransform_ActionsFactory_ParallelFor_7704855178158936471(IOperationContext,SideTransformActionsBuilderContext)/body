{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode candidate=ParallelFor_Behavior.call_findPoolDeclaration_7704855178165020537(_context.getSourceNode());
      if (candidate == null) {
        SLinkOperations.setTarget(_context.getSourceNode(),"threadPool",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Expression",null),true);
      }
 else {
        SLinkOperations.setTarget(_context.getSourceNode(),"threadPool",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null),true);
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"threadPool",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",candidate,false);
      }
      return null;
    }
    public String getMatchingText(    String pattern){
      return "using";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
