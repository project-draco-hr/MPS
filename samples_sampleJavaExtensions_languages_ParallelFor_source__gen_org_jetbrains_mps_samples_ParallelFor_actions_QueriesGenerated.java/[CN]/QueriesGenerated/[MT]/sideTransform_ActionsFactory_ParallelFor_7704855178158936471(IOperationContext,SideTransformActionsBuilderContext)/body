{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode candidate=ParallelFor_Behavior.call_findPoolDeclaration_7704855178165020537(_context.getSourceNode());
      if (candidate == null) {
        SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-3786532327622816550l,-4790818904192366506l),8923957828369477802l,4659204813808501246l,"threadPool"),SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790191l,"jetbrains.mps.baseLanguage.structure.Expression")));
      }
 else {
        SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-3786532327622816550l,-4790818904192366506l),8923957828369477802l,4659204813808501246l,"threadPool"),SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,"jetbrains.mps.baseLanguage.structure.VariableReference")));
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-3786532327622816550l,-4790818904192366506l),8923957828369477802l,4659204813808501246l,"threadPool")),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,"jetbrains.mps.baseLanguage.structure.VariableReference")),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,1068581517664l,"variableDeclaration"),candidate);
      }
      return SLinkOperations.getTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-3786532327622816550l,-4790818904192366506l),8923957828369477802l,4659204813808501246l,"threadPool"));
    }
    public String getMatchingText(    String pattern){
      return "using";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor"),null));
    }
  }
);
  return result;
}
