{
  super("API Migration");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "MacrosUtil.expandPath()";
    }
    public String getAdditionalInfo(){
      return "MacrosUtil.expandPath()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.StaticMethodCall";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isStaticMethodCall(node,"jetbrains.mps.plugins.MacrosUtil.expandPath(java.lang.String,java.lang.String):java.lang.String");
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"classConcept",SNodeOperations.getNode("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)","~MacrosUtil"),false);
      SLinkOperations.setTarget(node,"baseMethodDeclaration",SLinkOperations.getTarget(new Mps21ApiMigration_MigrationScript.QuotationClass_q3kr7y_a0c0b0e0a0a0b0a().createNode(),"baseMethodDeclaration",false),false);
      StubRefUtil.addRequiredImports(SNodeOperations.getModel(node),node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "IOperationContext.getProject()";
    }
    public String getAdditionalInfo(){
      return "IOperationContext.getProject()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.DotExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && StubRefUtil.isInstanceMethodCall(SNodeOperations.cast(SLinkOperations.getTarget(node,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"jetbrains.mps.smodel.IOperationContext.getProject():com.intellij.openapi.project.Project");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceNode(node,new Mps21ApiMigration_MigrationScript.QuotationClass_q3kr7y_a1a0a4a0a0a2a0().createNode(SLinkOperations.getTarget(node,"operand",true)));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "IOperationContext.getMainFrame()";
    }
    public String getAdditionalInfo(){
      return "IOperationContext.getMainFrame()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.DotExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && StubRefUtil.isInstanceMethodCall(SNodeOperations.cast(SLinkOperations.getTarget(node,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"jetbrains.mps.smodel.IOperationContext.getMainFrame():java.awt.Frame");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceNode(node,new Mps21ApiMigration_MigrationScript.QuotationClass_q3kr7y_a1a0a4a0a0a3a0().createNode(SLinkOperations.getTarget(node,"operand",true)));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ModelCommandExecutor.runWriteActionWithProgressSynchronously";
    }
    public String getAdditionalInfo(){
      return "ModelCommandExecutor.runWriteActionWithProgressSynchronously";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isInstanceMethodCall(node,"jetbrains.mps.smodel.ModelCommandExecutor.runWriteActionWithProgressSynchronously(com.intellij.openapi.progress.Progressive,java.lang.String,boolean,com.intellij.openapi.project.Project):void");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceNode(node,SLinkOperations.getTarget(new Mps21ApiMigration_MigrationScript.QuotationClass_q3kr7y_a0b0a0e0a0a0e0a().createNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(0),ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(1),ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(1),ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(1),ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(2),ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).getElement(3)),"operation",true));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "AbstractModule.getDependOn";
    }
    public String getAdditionalInfo(){
      return "AbstractModule.getDependOn";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isInstanceMethodCall(node,"jetbrains.mps.project.AbstractModule.getDependOn():java.util.List");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceNode(node,SLinkOperations.getTarget(new Mps21ApiMigration_MigrationScript.QuotationClass_q3kr7y_a0b0a0e0a0a0f0a().createNode(),"operation",true));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
