{
  MPSModuleRepository.getInstance().addRepositoryListener(new SRepositoryContentAdapter(){
    @Override public void moduleAdded(    SModule module){
      super.moduleAdded(module);
      if (module instanceof Language) {
        refreshModule((Language)module,false);
      }
    }
    @Override public void moduleChanged(    SModule module){
      if (module instanceof Language) {
        refreshModule((Language)module,false);
      }
    }
    @Override public void beforeModuleRemoved(    SModule module){
      super.beforeModuleRemoved(module);
      if (module instanceof Language) {
        refreshModule((Language)module,true);
      }
    }
    @Override public void repositoryChanged(){
      refresh();
    }
    @Override protected void startListening(    SModel model){
      for (      LanguageAspect aspect : HASHED_LANGUAGE_ASPECTS) {
        if (aspect.is(model) && model instanceof EditableSModel) {
          ((EditableSModel)model).addChangeListener(this);
          model.addModelListener(this);
          return;
        }
      }
    }
    @Override protected void stopListening(    SModel model){
      if (model instanceof EditableSModel) {
        ((EditableSModel)model).removeChangeListener(this);
        model.removeModelListener(this);
      }
    }
    @Override public void nodeAdded(    SModel model,    SNode node,    String role,    SNode child){
      if (node == null) {
        final Language language=Language.getLanguageFor(model);
        if (language != null) {
          refreshModule(language,false);
        }
      }
    }
    @Override public void nodeRemoved(    SModel model,    SNode node,    String role,    SNode child){
      if (node == null) {
        final Language language=Language.getLanguageFor(model);
        if (language != null) {
          refreshModule(language,false);
        }
      }
    }
    @Override public void modelSaved(    SModel model){
      final Language language=Language.getLanguageFor(model);
      if (language != null) {
        refreshModule(language,false);
      }
    }
  }
);
  refresh();
}
