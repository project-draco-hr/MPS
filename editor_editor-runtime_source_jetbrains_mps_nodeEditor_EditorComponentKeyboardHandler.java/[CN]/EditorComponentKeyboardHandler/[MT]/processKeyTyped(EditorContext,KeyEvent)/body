{
  EditorComponent nodeEditor=editorContext.getNodeEditorComponent();
  nodeEditor.hideMessageToolTip();
  if (processKeyMaps(editorContext,keyEvent)) {
    return true;
  }
  final EditorCell selectedCell=editorContext.getSelectedCell();
  if (selectedCell != null && ((jetbrains.mps.nodeEditor.cells.EditorCell)selectedCell).processKeyTyped(keyEvent,false)) {
    keyEvent.consume();
    return true;
  }
  jetbrains.mps.openapi.editor.cells.CellActionType actionType=editorContext.getNodeEditorComponent().getActionType(keyEvent,editorContext);
  if (selectedCell != null) {
    final boolean strictMatching=jetbrains.mps.openapi.editor.cells.CellActionType.RIGHT_TRANSFORM.equals(actionType) || jetbrains.mps.openapi.editor.cells.CellActionType.LEFT_TRANSFORM.equals(actionType);
    if (selectedCell.isErrorState() && strictMatching) {
      boolean res=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return APICellAdapter.validate(selectedCell,strictMatching,false);
        }
      }
);
      if (res)       return true;
    }
    if (actionType != null) {
      if (editorContext.getEditorComponent().getActionHandler().executeAction(selectedCell,actionType)) {
        return true;
      }
    }
  }
  if (selectedCell != null && ((jetbrains.mps.nodeEditor.cells.EditorCell)selectedCell).processKeyTyped(keyEvent,true)) {
    keyEvent.consume();
    return true;
  }
  return false;
}
