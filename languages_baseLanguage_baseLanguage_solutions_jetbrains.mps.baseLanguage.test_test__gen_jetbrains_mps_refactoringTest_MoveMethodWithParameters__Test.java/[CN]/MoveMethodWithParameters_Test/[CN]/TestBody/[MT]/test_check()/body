{
  this.addNodeById("5142438244427169027");
  this.addNodeById("5142438244427184189");
  this.addNodeById("5142438244427184178");
  this.addNodeById("5142438244427184202");
  MoveStaticMethodRefactoring ref=new MoveStaticMethodRefactoring(SNodeOperations.cast(this.getNodeById("5142438244427169034"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),SNodeOperations.cast(this.getNodeById("5142438244427184181"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  ref.doRefactoring();
  ref.replaceSingleUsage(SNodeOperations.cast(this.getNodeById("6765021202370589782"),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("5142438244427169028"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("5142438244427184181"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("5142438244427184190"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("5142438244427184203"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
