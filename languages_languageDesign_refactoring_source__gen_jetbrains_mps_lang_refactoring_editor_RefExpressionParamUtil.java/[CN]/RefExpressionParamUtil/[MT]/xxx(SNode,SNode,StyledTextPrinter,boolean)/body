{
  styledText.append(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node),"conceptAlias")).append("<").append(SPropertyOperations.getString(ref,"name")).append(">(");
  String target="no_target";
  boolean isList=SPropertyOperations.getBoolean(SLinkOperations.getTarget(ref,"target",true),"allowMultiple");
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ref,"target",true),"jetbrains.mps.lang.refactoring.structure.NodeTarget")) {
    target=((isList ? "nlist" : "node")) + "<" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ref,"target",true),"jetbrains.mps.lang.refactoring.structure.NodeTarget"),"concept",false),"name")+ ">";
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ref,"target",true),"jetbrains.mps.lang.refactoring.structure.ModelTarget")) {
    target=(isList ? "list<model>" : "model");
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ref,"target",true),"jetbrains.mps.lang.refactoring.structure.ModuleTarget")) {
    target=(isList ? "list<SModule>" : "SModule");
  }
  styledText.append(target).append(" target");
  if (showParameters) {
    styledText.append(" : MPSProject project");
    for (    SNode param : ListSequence.fromList(SLinkOperations.getTargets(ref,"parameter",true))) {
      styledText.append(", ").append(BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(param,"type",true),"virtual_getPresentation_1213877396640",new Object[]{})).append(" ").append(SPropertyOperations.getString(param,"name"));
    }
  }
  styledText.append(")");
}
