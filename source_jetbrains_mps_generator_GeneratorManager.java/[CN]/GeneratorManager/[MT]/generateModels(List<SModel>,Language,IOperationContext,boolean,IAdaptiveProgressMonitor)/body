{
  invocationContext.getProject().saveModels();
  List<SModelDescriptor> sourceModels=new ArrayList<SModelDescriptor>();
  for (  SModel model : _sourceModels) {
    sourceModels.add(model.getModelDescriptor());
  }
  clearMessages();
  addMessage(MessageKind.INFORMATION,"generating " + (generateText ? "text" : "files"));
  addMessage(MessageKind.INFORMATION,"    target language: \"" + targetLanguage.getNamespace() + "\"");
  String outputFolder=invocationContext.getModule().getGeneratorOutputPath();
  if (!new File(outputFolder).exists()) {
    new File(outputFolder).mkdirs();
    try {
      MPSPlugin.getInstance().addSource(outputFolder);
    }
 catch (    Exception e) {
      addMessage(MessageKind.WARNING,"Can't add output folder to IDEA as sources");
    }
  }
  if (!generateText) {
    addMessage(MessageKind.INFORMATION,"    target root folder: \"" + outputFolder + "\"");
  }
  boolean ideaPresent=MPSPlugin.getInstance().isIDEAPresent();
  boolean compile=myCompileOnGeneration && ideaPresent;
  long totalJob=ModelsProgressUtil.estimateTotalGenerationJobMillis(compile,generateText,sourceModels);
  progress.start("generating",totalJob);
  try {
    if (!myCompileOnGeneration) {
      progress.addText("compilation in IntelliJ IDEA on generation is turned off");
    }
 else     if (!ideaPresent) {
      progress.addText("IntelliJ IDEA with installed MPS is not present");
    }
 else {
      checkMonitorCanceled(progress);
      progress.addText("compiling in IntelliJ IDEA...");
      progress.startLeafTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
      MPSPlugin.getInstance().refreshFS();
      progress.finishTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
      checkMonitorCanceled(progress);
      progress.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
      MPSPlugin.getInstance().buildModule(outputFolder);
      progress.finishTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
      checkMonitorCanceled(progress);
    }
    progress.addText("reloading MPS classes...");
    progress.startLeafTask(ModelsProgressUtil.TASK_NAME_RELOAD_ALL);
    ReloadUtils.reloadAll();
    progress.finishTask(ModelsProgressUtil.TASK_NAME_RELOAD_ALL);
    checkMonitorCanceled(progress);
    GenerationSession generationSession=new GenerationSession(targetLanguage,invocationContext,progress);
    GenerationStatus status=null;
    for (    SModelDescriptor sourceModelDescriptor : sourceModels) {
      SModel sourceModel=sourceModelDescriptor.getSModel();
      progress.addText("");
      String taskName=ModelsProgressUtil.generationModelTaskName(sourceModelDescriptor);
      progress.startLeafTask(taskName,ModelsProgressUtil.generationModelTaskKind());
      status=generationSession.generateModel(sourceModelDescriptor);
      checkMonitorCanceled(progress);
      if (status.getOutputModel() != null) {
        if (generateText) {
          progress.addText("generate text to Output view");
          generateText(status.getOutputModel(),invocationContext);
        }
 else {
          addProgressMessage(MessageKind.INFORMATION,"generate files to folder: \"" + getOutputFolderPath(outputFolder,sourceModel) + "\"",progress);
          generateFile(outputFolder,sourceModel,status.getOutputModel());
        }
      }
      progress.finishTask(taskName);
      if (!status.isOk()) {
        break;
      }
    }
    if (isSaveTransientModels()) {
      generationSession.saveTransientModels();
      addProgressMessage(MessageKind.INFORMATION,"adding module \"" + generationSession.getSessionModuleName() + "\"",progress);
      File sessionDescriptorFile=generationSession.getSessionDescriptorFile();
      generationSession.dispose();
      myProject.addProjectSolution(sessionDescriptorFile);
    }
 else     if (!status.isError()) {
      generationSession.dispose();
    }
    checkMonitorCanceled(progress);
    progress.addText("");
    if (status.isOk()) {
      if (compile && !generateText) {
        progress.addText("compiling in IntelliJ IDEA...");
        progress.startLeafTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
        MPSPlugin.getInstance().refreshFS();
        progress.finishTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
        checkMonitorCanceled(progress);
        progress.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
        MPSPlugin.getInstance().buildModule(outputFolder);
        progress.finishTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
        checkMonitorCanceled(progress);
        progress.addText("reloading MPS classes...");
        progress.startLeafTask(ModelsProgressUtil.TASK_NAME_RELOAD_ALL);
        ReloadUtils.reloadAll();
        progress.finishTask(ModelsProgressUtil.TASK_NAME_RELOAD_ALL);
        checkMonitorCanceled(progress);
      }
      addProgressMessage(MessageKind.INFORMATION,"generation completed successfully",progress);
      progress.finish();
    }
 else     if (status.isError()) {
      addProgressMessage(MessageKind.WARNING,"generation finished with errors",progress);
      progress.finishAnyway();
    }
    showMessageView();
  }
 catch (  GenerationCanceledException gce) {
    addProgressMessage(MessageKind.WARNING,"generation canceled",progress);
    progress.finishAnyway();
    showMessageView();
  }
catch (  Throwable t) {
    LOG.error(t);
    addProgressMessage(MessageKind.ERROR,t.toString(),progress);
  }
 finally {
    progress.finishAnyway();
    System.gc();
  }
}
