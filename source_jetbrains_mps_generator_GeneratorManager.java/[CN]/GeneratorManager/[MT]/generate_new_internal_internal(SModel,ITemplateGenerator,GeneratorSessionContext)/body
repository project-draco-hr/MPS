{
  SModelDescriptor currentTargetModel=createTransientModel(0,sourceModel,generatorContext.getModule(),generatorContext.getSessionId());
  int iterationCount=1;
  LOG.debug("DO MAPPING from: " + sourceModel.getUID() + " to "+ currentTargetModel.getModelUID());
  generator.doMapping(sourceModel,currentTargetModel.getSModel(),null);
  while (true) {
    SModelDescriptor currentSourceModel=currentTargetModel;
    LOG.debug("CHECK NEED REDUCTION (" + iterationCount + ") in: "+ currentSourceModel.getModelUID());
    int numReductions=generator.prepareReduction(currentSourceModel.getSModel(),null);
    while (numReductions == 0 && generator.hasPendingReductions()) {
      numReductions=generator.preparePendingReduction();
    }
    LOG.debug("FOUND REDUCTIONS: " + numReductions);
    generator.getProgressMonitor().addText("found reductions : " + numReductions);
    if (numReductions == 0) {
      break;
    }
    currentTargetModel=createTransientModel(iterationCount,sourceModel,generatorContext.getModule(),generatorContext.getSessionId());
    LOG.debug("DO REDUCTION (" + iterationCount + ") from: "+ currentSourceModel.getModelUID()+ " to "+ currentTargetModel.getModelUID());
    generator.doReduction(currentTargetModel.getSModel());
    if (++iterationCount > 3) {
      LOG.debug("Reduction iteration count exceeded limit (10) - stop generation.");
      generator.showErrorMessage(null,"Failed to reduce model.");
      throw new GenerationFailedException("Failed to reduce model.");
    }
  }
  return currentTargetModel.getSModel();
}
