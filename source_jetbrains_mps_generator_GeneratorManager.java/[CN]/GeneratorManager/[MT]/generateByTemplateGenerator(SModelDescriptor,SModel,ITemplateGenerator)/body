{
  final SModel originalSourceModel=sourceModelDescr.getSModel();
  String outputModelNamespace=JavaNameUtil.packageNameForModelFqName(originalSourceModel.getFQName());
  String transientModelNamePfx=originalSourceModel.getName() + "_transient_";
  List<SModel> transientModels=new LinkedList<SModel>();
  int iterationCount=0;
  SModel currentTargetModel=createOutputModel(outputModelNamespace,transientModelNamePfx + iterationCount++,originalSourceModel,templatesModel);
  transientModels.add(currentTargetModel);
  LOG.debug("DO MAPPING from: " + originalSourceModel.getFQName() + " to "+ currentTargetModel.getFQName());
  final SModel currentTargetModel1=currentTargetModel;
  CommandProcessor.instance().executeCommand(new Runnable(){
    public void run(){
      generator.generate(originalSourceModel,currentTargetModel1,templatesModel);
    }
  }
,"generation");
  while (true) {
    generator.reset();
    SModel currentSourceModel=currentTargetModel;
    LOG.debug("CHECK NEED REDUCTION (" + iterationCount + ") in: "+ currentSourceModel.getFQName());
    int numReductions=generator.setupReduction(currentSourceModel,templatesModel);
    LOG.debug("FOUND " + numReductions + " REDUCTIONS");
    if (numReductions == 0) {
      break;
    }
    currentTargetModel=createOutputModel(outputModelNamespace,transientModelNamePfx + iterationCount,originalSourceModel,templatesModel);
    transientModels.add(currentTargetModel);
    LOG.debug("DO REDUCTION (" + iterationCount + ") from: "+ currentSourceModel.getFQName()+ " to "+ currentTargetModel.getFQName());
    generator.doReduction(currentTargetModel);
    if (++iterationCount > 9) {
      LOG.debug("Reduction iteration count exceeded limit (10) - stop generation.");
      break;
    }
    currentSourceModel=currentTargetModel;
  }
  if (SAVE_TRANSIENT_MODELS) {
    LOG.debug("SAVE TRANSIENT MODELS ...");
    String sourceModelDerectory=sourceModelDescr.getModelFile().getParent();
    SModelRepository modelRepository=SModelRepository.getInstance();
    for (    SModel transientModel : transientModels) {
      SModelDescriptor existingModel=modelRepository.getModelDescriptor(transientModel.getFQName());
      if (existingModel != null) {
        myProject.getRootManager().deleteModel(existingModel);
      }
      File transientModelFile=new File(sourceModelDerectory,transientModel.getName() + ".mps");
      SModelDescriptor transientModelDescr=MPSFileModelDescriptor.getInstance(transientModelFile.getAbsolutePath(),transientModel,myProject);
      myProject.getComponent(RootManager.class).addProjectModelDescriptor(transientModelDescr);
      modelRepository.markChanged(transientModel);
      LOG.debug(" ---> " + transientModelDescr.getFQName() + " to file "+ transientModelDescr.getModelFile().getAbsolutePath());
    }
  }
  SModel lastTransientModel=transientModels.get(transientModels.size() - 1);
  SModel outputModel=null;
  if (SAVE_TRANSIENT_MODELS) {
    outputModel=createOutputModel(outputModelNamespace,"",originalSourceModel,templatesModel);
    LOG.debug("COPY MODEL from: " + lastTransientModel.getFQName() + " to "+ outputModel.getFQName());
    SModelUtil.cloneSModel(lastTransientModel,outputModel);
  }
 else {
    outputModel=lastTransientModel;
    outputModel.setNamespace(outputModelNamespace);
    outputModel.setName("");
  }
  return outputModel;
}
