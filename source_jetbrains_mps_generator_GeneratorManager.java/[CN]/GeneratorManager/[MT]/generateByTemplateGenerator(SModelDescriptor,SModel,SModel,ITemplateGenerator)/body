{
  SModel originalSourceModel=sourceModelDescr.getSModel();
  List<SModel> transientModels=new LinkedList<SModel>();
  int iterationCount=0;
  SModel currentTargetModel=createTransientModel(originalSourceModel,iterationCount++);
  transientModels.add(currentTargetModel);
  System.out.println("DO MAPPING from: " + originalSourceModel.getFQName() + " to "+ currentTargetModel.getFQName());
  generator.generate(originalSourceModel,targetModel,templatesModel);
  while (true) {
    generator.reset();
    SModel currentSourceModel=currentTargetModel;
    int numReductions=generator.setupReduction(currentSourceModel,templatesModel);
    if (numReductions == 0) {
      break;
    }
    currentTargetModel=createTransientModel(originalSourceModel,iterationCount);
    generator.doReduction(currentTargetModel);
    iterationCount++;
    currentSourceModel=currentTargetModel;
  }
  System.out.println("SAVE TRANSIENT MODELS ...");
  String sourceModelDerectory=sourceModelDescr.getModelFile().getParent();
  SModelRepository modelRepository=SModelRepository.getInstance();
  for (  SModel transientModel : transientModels) {
    SModelDescriptor existingModel=modelRepository.getModelDescriptor(transientModel.getFQName());
    if (existingModel != null) {
      myProject.deleteModel(existingModel);
    }
    File transientModelFile=new File(sourceModelDerectory,transientModel.getName() + ".mps");
    SModelDescriptor transientModelDescr=MPSFileModelDescriptor.getInstance(transientModelFile.getAbsolutePath(),transientModel,myProject);
    myProject.getComponent(RootManager.class).addProjectModelDescriptor(transientModelDescr);
    modelRepository.markChanged(transientModel);
    System.out.println(" ---> " + transientModelDescr.getFQName() + " to file "+ transientModelDescr.getModelFile().getAbsolutePath());
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      generator.getProject().getComponent(ProjectPane.class).rebuildTree();
    }
  }
);
  targetModel.setLoading(true);
  List<SemanticNode> roots=currentTargetModel.getRoots();
  for (  SemanticNode node : roots) {
    targetModel.addRoot(node);
  }
  targetModel.setLoading(false);
}
