{
  String sessionId=generatorContext.getSessionId();
  String projectDir=generatorContext.getProject().getProjectFile().getParentFile().getAbsolutePath();
  String solutionDir=projectDir + File.separatorChar + "outputModels"+ File.separatorChar+ sessionId;
  IModule transientModule=generatorContext.getModule();
  List<SModelDescriptor> transientModelDescriptors=transientModule.getOwnModelDescriptors();
  for (  SModelDescriptor descriptor : transientModelDescriptors) {
    if (descriptor instanceof TransientModelDescriptor) {
      TransientModelDescriptor transientModelDescriptor=(TransientModelDescriptor)descriptor;
      String modelFqName=transientModelDescriptor.getModelUID().toString();
      String modelFileName=modelFqName.replace('.',File.separatorChar) + ".mps";
      File modelFile=new File(solutionDir,modelFileName);
      ModelPersistence.saveModel(transientModelDescriptor.getSModel(),modelFile);
    }
  }
  SModel solutionDescriptorModel=ProjectModelDescriptor.createDescriptorFor(transientModule).getSModel();
  solutionDescriptorModel.setLoading(true);
  SolutionDescriptor solutionDescriptor=new SolutionDescriptor(solutionDescriptorModel);
  solutionDescriptor.setName("generator session " + sessionId);
  ModelRoot root=new ModelRoot(solutionDescriptorModel);
  root.setPrefix("");
  root.setPath(solutionDir);
  solutionDescriptor.addModelRoot(root);
{
    Generator generatorModule=generatorContext.getGeneratorModule();
    List<ModelRoot> modelRoots=generatorModule.getNonDefaultModelRoots();
    for (    ModelRoot modelRoot : modelRoots) {
      ModelRoot copyRoot=new ModelRoot(solutionDescriptorModel);
      copyRoot.setPrefix(modelRoot.getPrefix());
      copyRoot.setPath(modelRoot.getPath());
      solutionDescriptor.addModelRoot(copyRoot);
    }
    List<Language> languages=generatorModule.getLanguages();
    for (    Language language : languages) {
      Root languageRoot=new Root(solutionDescriptorModel);
      languageRoot.setPath(language.getDescriptorFile().getParentFile().getAbsolutePath());
      solutionDescriptor.addModuleRoot(languageRoot);
    }
  }
{
    IModule invocationModule=generatorContext.getInvocationContext().getModule();
    List<ModelRoot> modelRoots=invocationModule.getNonDefaultModelRoots();
    for (    ModelRoot modelRoot : modelRoots) {
      ModelRoot copyRoot=new ModelRoot(solutionDescriptorModel);
      copyRoot.setPrefix(modelRoot.getPrefix());
      copyRoot.setPath(modelRoot.getPath());
      solutionDescriptor.addModelRoot(copyRoot);
    }
    List<Language> languages=invocationModule.getLanguages();
    for (    Language language : languages) {
      Root languageRoot=new Root(solutionDescriptorModel);
      languageRoot.setPath(language.getDescriptorFile().getParentFile().getAbsolutePath());
      solutionDescriptor.addModuleRoot(languageRoot);
    }
  }
  File solutionFile=new File(solutionDir,"generatorSession_" + sessionId + ".msd");
  PersistenceUtil.saveSolutionDescriptor(solutionFile,solutionDescriptor);
  transientModule.dispose();
  generatorContext.getProject().addProjectSolution(solutionFile);
}
