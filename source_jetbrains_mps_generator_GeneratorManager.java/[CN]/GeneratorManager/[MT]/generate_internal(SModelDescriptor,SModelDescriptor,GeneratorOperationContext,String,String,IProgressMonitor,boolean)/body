{
  final IModelGenerator generator;
  try {
    Class cls=Class.forName(generatorClass,true,ClassLoaderManager.getInstance().getClassLoader());
    if (ITemplateGenerator.class.isAssignableFrom(cls)) {
      generator=(ITemplateGenerator)cls.getConstructor(IOperationContext.class,IProgressMonitor.class).newInstance(generatorContext,monitor);
    }
 else {
      generator=(IModelGenerator)cls.getConstructor(IOperationContext.class).newInstance(generatorContext);
    }
  }
 catch (  Exception e) {
    throw new GenerationFailedException(e);
  }
  SModel targetModel;
  if (generator instanceof ITemplateGenerator) {
    GenerateWithTemplatesCommand command=new GenerateWithTemplatesCommand(sourceModel,templatesModel.getSModel(),(ITemplateGenerator)generator);
    targetModel=command.execute();
  }
 else {
    IProgressMonitor childMonitor=monitor.startSubTask(AMOUNT_PER_MODEL);
    targetModel=JavaGenUtil.createTargetJavaModel(sourceModel.getSModel(),JavaNameUtil.packageNameForModelUID(sourceModel.getModelUID()),generatorContext);
    generator.generate(sourceModel.getSModel(),targetModel,monitor);
    childMonitor.finish();
  }
  if (targetModel != null) {
    if (generateText) {
      generateText(targetModel,generatorContext);
    }
 else {
      generateFile(outputPath,sourceModel.getSModel(),targetModel);
    }
  }
  if (generator instanceof ITemplateGenerator) {
    return ((ITemplateGenerator)generator).getErrorCount() > 0;
  }
  return true;
}
