{
  final SModelDescriptor tmpModelDescriptor=language.createTransientProjectModel();
  final SModel model=tmpModelDescriptor.getSModel();
  final GeneratorConfiguration conf=new GeneratorConfiguration(model);
  tmpModelDescriptor.getSModel().runLoadingAction(new Runnable(){
    public void run(){
      conf.setName("Generate " + language.getNamespace() + " language.");
      conf.setOutputPath(language.getSourceDir().getAbsolutePath());
      conf.addCommand(createCommand(model,"jetbrains.mps.bootstrap.structureLanguage","jetbrains.mps.baseLanguage"));
      conf.addCommand(createCommand(model,"jetbrains.mps.bootstrap.editorLanguage","jetbrains.mps.baseLanguage"));
      conf.addCommand(createCommand(model,"jetbrains.mps.typesystem.typesystemLanguage","jetbrains.mps.baseLanguage"));
    }
  }
);
  List<SModelDescriptor> models=new LinkedList<SModelDescriptor>();
  models.add(language.getStructureModelDescriptor());
  if (language.getEditorModelDescriptor() != null) {
    models.add(language.getEditorModelDescriptor());
  }
  if (language.getTypesystemModelDescriptor() != null) {
    models.add(language.getTypesystemModelDescriptor());
  }
  generate(conf,models,operationContext,false,language);
  language.unRegisterModelDescriptor(tmpModelDescriptor);
}
