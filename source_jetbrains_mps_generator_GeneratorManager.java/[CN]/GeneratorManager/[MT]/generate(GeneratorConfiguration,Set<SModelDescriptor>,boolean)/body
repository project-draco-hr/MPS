{
  new Thread(){
{
      setPriority(Thread.MIN_PRIORITY);
    }
    public void run(){
      myOperationContext.getComponent(ProjectPane.class).disableRebuild();
      ProgressMonitor progress=new ProgressWindowProgressMonitor(false);
      boolean isIdeaPresent=MPSPlugin.getInstance().isIDEAPresent();
      try {
        int modelCount=0;
        for (        GeneratorConfigurationCommand cmd : CollectionUtil.iteratorAsIterable(configuration.commands())) {
          modelCount+=findModelsWithLanguage(modelDescriptors,cmd.getSourceLanguage().getName()).size();
        }
        int ideaCompilations=0;
        if (isIdeaPresent && myCompileOnGeneration) {
          if (generateText) {
            ideaCompilations=1;
          }
 else {
            ideaCompilations=2;
          }
        }
        progress.start("Generating",(modelCount + ideaCompilations) * AMOUNT_PER_MODEL);
        if (myCompileOnGeneration && ideaCompilations == 0) {
          progress.addText("IntelliJ IDEA with installed MPS is not present");
        }
        if (!myCompileOnGeneration) {
          progress.addText("Compilation in IDEA on generation is turned off");
        }
        clearMessages();
        addMessage(new Message(MessageKind.INFORMATION,null,"Generating configuration " + configuration.getName(),myOperationContext));
        if (isIdeaPresent && myCompileOnGeneration) {
          progress.addText("Compiling in IntelliJ IDEA...");
          LOG.debug("Compiling in IDE before generation ");
          compileAndReload();
          progress.advance(AMOUNT_PER_MODEL);
        }
        for (        GeneratorConfigurationCommand cmd : CollectionUtil.iteratorAsIterable(configuration.commands())) {
          LOG.debug("Executing command : " + cmd.getSourceLanguage().getName() + " -> "+ cmd.getTargetLanguage().getName());
          Set<SModelDescriptor> modelsWithLanguage=findModelsWithLanguage(modelDescriptors,cmd.getSourceLanguage().getName());
          Generator generator=findGenerator(cmd.getSourceLanguage().getName(),cmd.getTargetLanguage().getName());
          for (          String languageRoot : generator.getRequiredLanguageRoots()) {
            LanguageRepository.getInstance().readLanguageDescriptors(new File(languageRoot),GeneratorManager.this);
          }
          String generatorClass=findGeneratorClass(generator);
          if (generatorClass == null)           generatorClass=DefaultTemplateGenerator.class.getName();
          SModelDescriptor templatesModel=loadTemplatesModel(generator);
          for (          final SModelDescriptor model : modelsWithLanguage) {
            try {
              generate_internal(model,generatorClass,templatesModel,configuration.getOutputPath(),progress,generateText);
            }
 catch (            final GenerationCanceledException e) {
              addMessage(new Message(MessageKind.WARNING,"generation canceled"));
              progress.addText("Generation canceled");
              showMessageView();
              return;
            }
catch (            final GenerationFailedException gfe) {
              LOG.error(model.getModelUID() + " generation failed",gfe);
              addMessage(new Message(MessageKind.ERROR,model.getModelUID() + " model generation failed"));
              showMessageView();
              return;
            }
catch (            Exception e) {
              LOG.error("Exception ",e);
            }
            addMessage(new Message(MessageKind.INFORMATION,model.getModelUID() + " model is generated"));
          }
        }
        if (!generateText && isIdeaPresent && myCompileOnGeneration) {
          LOG.debug("Compiling in IDE after generation");
          progress.addText("Compiling in IntelliJ IDEA...");
          compileAndReload();
          progress.advance(AMOUNT_PER_MODEL);
        }
        addMessage(new Message(MessageKind.INFORMATION,"Generation finished"));
        if (!generateText) {
          showMessageView();
        }
        progress.addText("Finished.");
      }
  finally {
        progress.finish();
        LanguageRepository.getInstance().unRegisterLanguages(GeneratorManager.this);
        SModelRepository.getInstance().unRegisterModelDescriptors(GeneratorManager.this);
        myOperationContext.getComponent(ProjectPane.class).enableRebuild();
      }
    }
  }
.start();
}
