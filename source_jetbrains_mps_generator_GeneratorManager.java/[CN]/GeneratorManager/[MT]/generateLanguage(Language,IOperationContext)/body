{
  clearMessages();
  Language targetLanguage=BootstrapLanguages.getInstance().getBaseLanguage();
  addMessage(MessageKind.INFORMATION,"Generating language: \"" + language + "\"");
  addMessage(MessageKind.INFORMATION,"target language    : \"" + targetLanguage.getNamespace() + "\"");
  String outputFolder=invocationContext.getModule().getGeneratorOutputPath();
  addMessage(MessageKind.INFORMATION,"target folder      : \"" + outputFolder + "\"");
  List<SModel> sourceModels=new LinkedList<SModel>();
  if (language.getStructureModelDescriptor() != null) {
    sourceModels.add(language.getStructureModelDescriptor().getSModel());
  }
  if (language.getEditorModelDescriptor() != null) {
    sourceModels.add(language.getEditorModelDescriptor().getSModel());
  }
  if (language.getTypesystemModelDescriptor() != null) {
    sourceModels.add(language.getTypesystemModelDescriptor().getSModel());
  }
  if (sourceModels.isEmpty()) {
    addMessage(MessageKind.ERROR,"No source models found");
    return;
  }
  invocationContext.getComponent(ProjectPane.class).disableRebuild();
  IProgressMonitor progress=new ProgressWindowProgressMonitor(invocationContext.getComponent(ProjectFrame.class),false);
  try {
    boolean compile=false;
    if (!myCompileOnGeneration) {
      progress.addText("Compilation in IntelliJ IDEA on generation is turned off");
    }
 else     if (!MPSPlugin.getInstance().isIDEAPresent()) {
      progress.addText("IntelliJ IDEA with installed MPS is not present");
    }
 else {
      compile=true;
    }
    GenerationStatus status=null;
    boolean compileBefore=compile;
    boolean compileAfter=compile;
    progress.start("Generating",sourceModels.size() * AMOUNT_PER_MODEL + ((compileBefore ? 1 : 0) + (compileAfter ? 1 : 0) * sourceModels.size()) * AMOUNT_PER_COMPILATION);
    for (    SModel sourceModel : sourceModels) {
      status=generate_model_internal(sourceModel,targetLanguage,compileBefore,compileAfter,invocationContext,progress);
      compileBefore=false;
      if (status.isOk()) {
        progress.addText("Generate files to folder: \"" + getOutputFolderPath(outputFolder,sourceModel) + "\"");
        generateFile(outputFolder,sourceModel,status.getOutputModel());
      }
 else {
        break;
      }
    }
    if (status.isOk()) {
      addProgressMessage(MessageKind.INFORMATION,"Generation completed successfully",progress);
    }
 else     if (status.isError()) {
      addProgressMessage(MessageKind.WARNING,"Generation finished with errors",progress);
    }
 else     if (status.isCanceled()) {
      addProgressMessage(MessageKind.WARNING,"Generation cancelled",progress);
    }
    showMessageView();
  }
  finally {
    progress.finish();
    ReflectionClassifierFinder.generationFinished();
    invocationContext.getComponent(ProjectPane.class).enableRebuild();
  }
}
