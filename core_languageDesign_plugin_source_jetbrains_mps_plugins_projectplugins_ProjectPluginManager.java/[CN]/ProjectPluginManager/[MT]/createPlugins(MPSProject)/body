{
  final Map<IModule,BaseProjectPlugin> plugins=new HashMap<IModule,BaseProjectPlugin>();
  Set<Language> languages=new HashSet<Language>();
  Set<DevKit> devkits=new HashSet<DevKit>();
  for (  Solution s : project.getProjectSolutions()) {
    languages.addAll(s.getScope().getVisibleLanguages());
    devkits.addAll(s.getScope().getVisibleDevkits());
  }
  for (  Language l : project.getProjectLanguages()) {
    languages.add(l);
  }
  languages.addAll(LibraryManager.getInstance().getGlobalModules(Language.class));
  devkits.addAll(LibraryManager.getInstance().getGlobalModules(DevKit.class));
  for (  DevKit dk : project.getProjectDevKits()) {
    devkits.add(dk);
  }
  for (  Language language : languages) {
    if (language.getPluginModelDescriptor() != null) {
      BaseProjectPlugin plugin=createPlugin(language,language.getGeneratedPluginClassLongName());
      if (plugin == null)       continue;
      plugins.put(language,plugin);
    }
  }
  for (  DevKit dk : devkits) {
    if (dk.getDevKitPluginClass() != null) {
      BaseProjectPlugin plugin=createPlugin(dk,dk.getDevKitPluginClass());
      if (plugin == null)       continue;
      plugins.put(dk,plugin);
    }
  }
  myIdePlugin=new Ide_ProjectPlugin();
  IModule ideModule=MPSModuleRepository.getInstance().getModuleByUID(IDE_MODULE_ID);
  plugins.put(ideModule,myIdePlugin);
  return PluginSorter.sortByDependencies(plugins);
}
