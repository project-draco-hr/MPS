{
  final List<SNode> nodesList=new ArrayList<SNode>();
  final SRepository repo=ProjectHelper.toMPSProject(myProject).getRepository();
  repo.getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SAbstractConcept c : Sequence.fromIterable(TestNodeWrapperFactory.getWrappedRootConcepts())) {
        Set<SNode> usages=FindUsagesFacade.getInstance().findInstances(GlobalScope.getInstance(),Collections.singleton(c),false,progress);
        ListSequence.fromList(nodesList).addSequence(SetSequence.fromSet(usages));
      }
    }
  }
);
  if (myIsTestMethods) {
    final List<ITestNodeWrapper> methodsList=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
    repo.getModelAccess().runReadAction(new Runnable(){
      public void run(){
        for (        SNode testCase : nodesList) {
          ITestNodeWrapper wrapper=TestNodeWrapperFactory.tryToWrap(testCase);
          if (wrapper == null) {
            continue;
          }
          ListSequence.fromList(methodsList).addSequence(Sequence.fromIterable(wrapper.getTestMethods()));
        }
      }
    }
);
synchronized (myLock) {
      ListSequence.fromList(myCandidates).clear();
      ListSequence.fromList(myCandidates).addSequence(ListSequence.fromList(methodsList));
    }
  }
 else {
    repo.getModelAccess().runReadAction(new Runnable(){
      public void run(){
synchronized (myLock) {
          ListSequence.fromList(myCandidates).clear();
          ListSequence.fromList(myCandidates).addSequence(ListSequence.fromList(nodesList).select(new ISelector<SNode,ITestNodeWrapper>(){
            public ITestNodeWrapper select(            SNode it){
              return wrap(it);
            }
          }
).where(new IWhereFilter<ITestNodeWrapper>(){
            public boolean accept(            ITestNodeWrapper it){
              return it != null;
            }
          }
));
        }
      }
    }
);
  }
}
