{
  if (!myModelRootManager.isFindUsagesEnabled())   return new HashSet<ConceptDeclaration>();
  if (mySModel != null && !SModelRepository.getInstance().isChanged(mySModel) && !descendantsKnownInModel.isEmpty()) {
    return descendantsKnownInModel;
  }
  if (mySModel == null || !SModelRepository.getInstance().isChanged(mySModel)) {
    if (!myModelRootManager.containsString(this,node.getId()))     return descendantsKnownInModel;
  }
  getSModel();
  Set<ConceptDeclaration> result=new HashSet<ConceptDeclaration>();
  if (mySModel != null) {
    for (    SNode root : mySModel.getRoots()) {
      addDescendants(root,node,result);
    }
  }
  descendantsKnownInModel.clear();
  descendantsKnownInModel.addAll(result);
  return descendantsKnownInModel;
}
