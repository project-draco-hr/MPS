{
  Set<ILoggableRefactoring> result=new HashSet<ILoggableRefactoring>();
  if (myCachedRefactorings != null) {
    result.addAll(myCachedRefactorings);
    return result;
  }
  SModelDescriptor scriptsModelDescriptor=getScriptsModelDescriptor();
  if (scriptsModelDescriptor == null) {
    return result;
  }
  SModel scriptsModel=scriptsModelDescriptor.getSModel();
  String packageName=scriptsModel.getLongName();
  for (  OldRefactoring refactoring : scriptsModel.getRootsAdapters(OldRefactoring.class)) {
    try {
      String fqName=packageName + "." + refactoring.getName();
      Class<ILoggableRefactoring> cls=getClass(fqName);
      SNodePointer pointer=new SNodePointer(refactoring.getNode());
      if (cls == null) {
        if (!myNotFoundRefactorings.contains(pointer)) {
          LOG.error("Can't find " + fqName);
          myNotFoundRefactorings.add(pointer);
        }
        continue;
      }
      Constructor<ILoggableRefactoring> constructor=cls.getConstructor();
      constructor.setAccessible(false);
      result.add(constructor.newInstance());
    }
 catch (    Throwable t) {
      LOG.error(t);
    }
  }
  myCachedRefactorings=new HashSet<ILoggableRefactoring>(result);
  return result;
}
