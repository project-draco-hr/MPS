{
  super.updatePackagedDescriptorClasspath();
  if (!isPackaged())   return;
  LanguageDescriptor descriptor=getLanguageDescriptor();
  File bundleParent=getBundleHome().getParentFile();
  String jarName=getModuleFqName() + "." + RUNTIME_JAR_SUFFIX;
  File jarFile=new File(bundleParent,jarName);
  boolean addJar=false;
  if (descriptor != null) {
    Set<String> visited=new HashSet<String>();
    List<ClassPathEntry> remove=new ArrayList<ClassPathEntry>();
    for (    ClassPathEntry e : myLanguageDescriptor.getRuntimeClassPaths()) {
      IFile file=FileSystem.getFile(e.getPath());
      if (!file.exists() || file.isDirectory() || (visited.contains(e.getPath()))) {
        remove.add(e);
      }
      visited.add(e.getPath());
    }
    myLanguageDescriptor.getRuntimeClassPaths().removeAll(remove);
    if (jarFile.exists() && !visited.contains(jarFile.getPath())) {
      addJar=true;
    }
  }
  if (descriptor != null) {
    Set<StubModelsEntry> visited=new HashSet<StubModelsEntry>();
    List<StubModelsEntry> remove=new ArrayList<StubModelsEntry>();
    for (    StubModelsEntry entry : descriptor.getRuntimeStubModels()) {
      IFile cp=FileSystem.getFile(entry.getPath());
      if ((!cp.exists()) || cp.isDirectory()) {
        remove.add(entry);
      }
      for (      StubModelsEntry ve : visited) {
        boolean eqManager=EqualUtil.equals(ve.getManager(),entry.getManager());
        boolean eqPath=EqualUtil.equals(cp.getAbsolutePath(),ve.getPath());
        if (eqManager && eqPath) {
          remove.add(entry);
          break;
        }
      }
      visited.add(entry);
    }
    descriptor.getRuntimeStubModels().removeAll(remove);
    boolean containsJar=false;
    for (    StubModelsEntry ve : visited) {
      boolean eqPath=EqualUtil.equals(jarFile.getPath(),ve.getPath());
      if (eqPath) {
        containsJar=true;
        break;
      }
    }
    if (jarFile.exists() && !containsJar) {
      addJar=true;
    }
  }
  if (addJar) {
    ClassPathEntry runtimeJar=new ClassPathEntry();
    myLanguageDescriptor.getRuntimeClassPaths().add(runtimeJar);
    runtimeJar.setPath(jarFile.getPath());
  }
}
