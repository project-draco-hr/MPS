{
  super.updatePackagedDescriptorClasspath();
  if (!isPackaged())   return;
  if (myLanguageDescriptor != null) {
    IFile bundleParent=getBundleHome().getParent();
    String jarName=getModuleFqName() + ".jar";
    IFile bundleHomeFile=bundleParent.getDescendant(jarName);
    if (!bundleHomeFile.exists())     return;
    for (    GeneratorDescriptor g : myLanguageDescriptor.getGenerators()) {
      g.getModelRoots().removeAll(myLanguageDescriptor.getRuntimeStubModels());
    }
    myLanguageDescriptor.getRuntimeStubModels().clear();
    DeploymentDescriptor dd=myLanguageDescriptor.getDeploymentDescriptor();
    if (dd == null)     return;
    for (    ModuleReference mr : myLanguageDescriptor.getRuntimeModules()) {
      IModule rtm=MPSModuleRepository.getInstance().getModule(mr);
      if (rtm != null && rtm.getBundleHome() != null) {
        if (rtm.getBundleHome().getName().startsWith("mps-") && rtm.getBundleHome().getPath().startsWith(PathManager.getHomePath())) {
          dd.getRuntimeJars().add("/" + rtm.getBundleHome().getPath().substring(PathManager.getHomePath().length()));
        }
      }
    }
    for (    String jarFile : dd.getRuntimeJars()) {
      IFile jar=jarFile.startsWith("/") ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile) : bundleParent.getDescendant(jarFile);
      if (jar.exists()) {
        ClassPathEntry jarEntry=new ClassPathEntry();
        jarEntry.setPath(jar.getPath());
        ModelRoot mr=jetbrains.mps.project.structure.model.ModelRootUtil.fromClassPathEntry(jarEntry);
        myLanguageDescriptor.getRuntimeStubModels().add(mr);
        for (        GeneratorDescriptor g : myLanguageDescriptor.getGenerators()) {
          g.getModelRoots().add(mr);
        }
      }
    }
  }
}
