{
  super.updatePackagedDescriptorClasspath();
  if (!isPackaged())   return;
  if (myLanguageDescriptor != null) {
    IFile bundleParent=getBundleHome().getParent();
    String jarName=getModuleFqName() + ".jar";
    IFile bundleHomeFile=bundleParent.getDescendant(jarName);
    if (!bundleHomeFile.exists())     return;
    boolean hasClasspath=false;
    for (    ModelRoot entry : myLanguageDescriptor.getRuntimeStubModels()) {
      String path=entry.getPath();
      if (!(path.endsWith(".jar")) || bundleHomeFile.getPath().equals(path)) {
        hasClasspath=true;
      }
    }
    myLanguageDescriptor.getRuntimeStubModels().clear();
    if (hasClasspath) {
      ClassPathEntry bundleHome=new ClassPathEntry();
      bundleHome.setPath(bundleHomeFile.getPath());
      myLanguageDescriptor.getRuntimeStubModels().add(jetbrains.mps.project.structure.model.ModelRootUtil.fromClassPathEntry(bundleHome));
    }
    DeploymentDescriptor dd=myLanguageDescriptor.getDeploymentDescriptor();
    if (dd == null)     return;
    for (    String jarFile : dd.getRuntimeJars()) {
      IFile jar=bundleParent.getDescendant(jarFile);
      if (jar.exists()) {
        ClassPathEntry jarEntry=new ClassPathEntry();
        jarEntry.setPath(jar.getPath());
        myLanguageDescriptor.getRuntimeStubModels().add(jetbrains.mps.project.structure.model.ModelRootUtil.fromClassPathEntry(jarEntry));
      }
    }
  }
}
