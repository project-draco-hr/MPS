{
  if (contributors.isEmpty()) {
    return;
  }
  LOG.debug("Unloading contributors " + ModalityState.defaultModalityState());
  myModelAccess.checkWriteAccess();
  if (contributors.isEmpty())   return;
  final List<PluginContributor> contributorsToUnload=new ArrayList<PluginContributor>(contributors);
  for (  PluginContributor contributor : contributors) {
    if (!myContributorsToBeLoaded.contains(contributor)) {
      LOG.warn("Trying to unload twice the plugin contributor " + contributor + ". Ignoring the request.");
      contributorsToUnload.remove(contributor);
    }
  }
synchronized (myPluginLoadersLock) {
    final List<PluginLoader> pluginLoaders=new ArrayList<PluginLoader>(myPluginLoaders);
    Task unloadingTask=new Task.Modal(null,"Unloading MPS plugins",false){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        ProgressMonitor monitor=new ProgressMonitorAdapter(indicator);
        monitor.start("Unloading mps plugins",pluginLoaders.size());
        long beginTime=System.nanoTime();
        LOG.info(String.format("Unloading plugins from %d contributors",contributorsToUnload.size()));
        try {
          for (          final PluginLoader listener : pluginLoaders) {
            listener.unloadPlugins(contributorsToUnload,monitor.subTask(1));
          }
        }
  finally {
          monitor.done();
          LOG.info(String.format("Unloading of %d plugins took %.3f s",contributorsToUnload.size(),(System.nanoTime() - beginTime) / 1e9));
        }
      }
    }
;
    runOrPostpone(unloadingTask);
    myContributorsToBeLoaded.removeAll(contributors);
  }
}
