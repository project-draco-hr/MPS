{
  myModelAccess.checkWriteAccess();
  if (contributors.isEmpty()) {
    return;
  }
  if (!contributors.isEmpty()) {
    LOG.debug(String.format("Scheduling unloading of %d contributors",contributors.size()));
    final List<PluginContributor> contributorsToUnload=new ArrayList<PluginContributor>(contributors);
synchronized (myPluginLoadersLock) {
      for (      PluginContributor contributor : contributors) {
        if (!myContributorsToBeLoaded.contains(contributor)) {
          LOG.warn("Trying to unload twice the plugin contributor " + contributor + ". Ignoring the request.");
          contributorsToUnload.remove(contributor);
        }
      }
      final List<PluginLoader> pluginLoaders=new ArrayList<PluginLoader>(myPluginLoaders);
      Task unloadingTask=new Task.Modal(null,"Unloading MPS plugins",false){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          ProgressMonitor monitor=new ProgressMonitorAdapter(indicator);
          monitor.start("Unloading MPS plugins",pluginLoaders.size());
          long beginTime=System.nanoTime();
          try {
            for (            final PluginLoader loader : pluginLoaders) {
              LOG.info(String.format("Unloading plugins in %s from %d contributors",loader,contributorsToUnload.size()));
              loader.unloadPlugins(contributorsToUnload,monitor.subTask(1));
            }
          }
  finally {
            monitor.done();
            LOG.info(String.format("Unloading of %d plugins took %.3f s",contributorsToUnload.size(),(System.nanoTime() - beginTime) / 1e9));
          }
        }
      }
;
      runOrPostpone(unloadingTask);
      myContributorsToBeLoaded.removeAll(contributors);
    }
  }
}
