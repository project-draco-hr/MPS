{
  try {
    ModuleDescriptor moduleDescr=((AbstractModule)((SModule)MapSequence.fromMap(_params).get("module"))).getModuleDescriptor();
    if (moduleDescr == null || moduleDescr.getSourcePaths().isEmpty()) {
      return;
    }
    List<IFile> sourcePaths=ListSequence.fromList(new ArrayList<IFile>());
    for (    String path : CollectionSequence.fromCollection(moduleDescr.getSourcePaths())) {
      ListSequence.fromList(sourcePaths).addElement(FileSystem.getInstance().getFileByPath(path));
    }
    final JavaToMpsConverter parser=new JavaToMpsConverter(((SModule)MapSequence.fromMap(_params).get("module")),((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository());
    final List<IFile> filesToParse=Sequence.fromIterable(JavaConvertUtil.openDirs(sourcePaths)).toListSequence();
    ProgressManager.getInstance().run(new Task.Modal(null,"Convert to MPS",false){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          parser.convertToMps(filesToParse,new ProgressMonitorAdapter(indicator));
        }
 catch (        JavaParseException e) {
          throw new RuntimeException(e);
        }
catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    moduleDescr.getSourcePaths().clear();
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MigrateSourcesToMPS",t);
    }
  }
}
