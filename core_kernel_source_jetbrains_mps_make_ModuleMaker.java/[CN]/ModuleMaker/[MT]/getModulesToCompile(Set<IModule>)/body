{
  ttrace.push("checking if " + modules.size() + " modules are dirty",false);
  List<IModule> dirtyModules=new ArrayList<IModule>(modules.size());
  for (  IModule m : modules) {
    if (isDirty(m)) {
      dirtyModules.add(m);
    }
  }
  ttrace.pop();
  Map<IModule,Set<IModule>> backDependencies=new HashMap<IModule,Set<IModule>>();
  ttrace.push("building back deps",false);
  for (  IModule m : modules) {
    for (    IModule dep : m.getDependenciesManager().getRequiredModules()) {
      Set<IModule> incoming=backDependencies.get(dep);
      if (incoming == null) {
        incoming=new HashSet<IModule>();
        backDependencies.put(dep,incoming);
      }
      incoming.add(m);
    }
  }
  ttrace.pop();
  ttrace.push("adding modules dependent on dirty ones - " + dirtyModules.size(),false);
  Set<IModule> toCompile=new LinkedHashSet<IModule>();
  for (  IModule dirty : dirtyModules) {
    collectToCompile(dirty,toCompile,backDependencies);
  }
  ttrace.pop();
  return toCompile;
}
