{
  INodeAdapter adapter=myMapSrcNodeOrListMacro.getAdapter();
  MapSrcMacro_MapperFunction mapperFunction;
  if (adapter instanceof MapSrcNodeMacro) {
    mapperFunction=((MapSrcNodeMacro)adapter).getMapperFunction();
  }
 else {
    mapperFunction=((MapSrcListMacro)adapter).getMapperFunction();
  }
  if (mapperFunction != null) {
    String methodName=TemplateFunctionMethodName.mapSrcMacro_MapperFunction(mapperFunction.getNode());
    Object[] args=new Object[]{sourceNode,generator.getSourceModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
    try {
      SNode outputNode=(SNode)QueryMethodGenerated.invoke(methodName,args,myMapSrcNodeOrListMacro.getModel());
      return outputNode;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,myMapSrcNodeOrListMacro,"couldn't evaluate macro query");
      LOG.error(e);
      return null;
    }
  }
  String sourceNodeMapperId;
  if (adapter instanceof MapSrcNodeMacro) {
    sourceNodeMapperId=((MapSrcNodeMacro)adapter).getSourceNodeMapperId();
  }
 else {
    sourceNodeMapperId=((MapSrcListMacro)adapter).getSourceNodeMapperId();
  }
  String methodName="templateSourceNodeMapper_" + sourceNodeMapperId;
  Object[] args=new Object[]{sourceNode,generator};
  SNode targetNode=(SNode)QueryMethod.invoke(methodName,args,myMapSrcNodeOrListMacro.getModel());
  return targetNode;
}
