{
  IMethodCall methodCall=(IMethodCall)BaseAdapter.fromNode(methodCallNode);
  BaseMethodDeclaration baseMethodDeclaration=methodCall.getBaseMethodDeclaration();
  if (baseMethodDeclaration == null) {
    return;
  }
  String methodName=baseMethodDeclaration.getName();
  List<Expression> actualArgs=methodCall.getActualArguments();
  Pair<Classifier,List<Type>> pair=getClassifierAndTypeParams(methodCall);
  Classifier classifier=pair.first;
  List<Type> typeParameters=pair.second;
  List<? extends BaseMethodDeclaration> candidates=getCandidates(methodCall,methodName,classifier);
  Map<TypeVariableDeclaration,Type> typeByTypeVar=getTypeByTypeVar(methodCall,classifier,typeParameters);
  List<? extends BaseMethodDeclaration> methodDeclarationsGoodParams=MethodResolveUtil.selectByParmCount(candidates,actualArgs);
  BaseMethodDeclaration newTarget=null;
  if (methodDeclarationsGoodParams.size() == 1) {
    newTarget=methodDeclarationsGoodParams.get(0);
  }
 else {
    newTarget=MethodResolveUtil.chooseByParameterType(methodDeclarationsGoodParams,actualArgs,typeByTypeVar);
  }
  if (newTarget != null) {
    methodCall.setBaseMethodDeclaration(newTarget);
  }
}
