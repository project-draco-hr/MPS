{
  final Language[] languages=new Language[7];
  for (int i=0; i < 7; i++) {
    languages[i]=createLanguage();
  }
  DevKit devKit=createDevKit();
  DevKit devKit2=createDevKit();
  final DependencyPathTree testTree=new DependencyPathTree(null);
  languages[0].addUsedLanguage(languages[1].getModuleReference());
  languages[1].addExtendedLanguage(languages[2].getModuleReference());
  languages[2].addUsedLanguage(languages[3].getModuleReference());
  devKit.getModuleDescriptor().getExportedLanguages().add(languages[4].getModuleReference());
  devKit.getModuleDescriptor().getExtendedDevkits().add(devKit2.getModuleReference());
  devKit2.getModuleDescriptor().getExportedLanguages().add(languages[5].getModuleReference());
  languages[1].addUsedDevkit(devKit.getModuleReference());
  languages[5].addExtendedLanguage(languages[6].getModuleReference());
  testUsedLanguage(testTree,languages[0],languages[1],1);
  testUsedLanguage(testTree,languages[0],languages[2],1);
  testUsedLanguage(testTree,languages[0],languages[3],0);
  testUsedLanguage(testTree,languages[1],languages[4],1);
  testUsedLanguage(testTree,languages[0],languages[4],0);
  testUsedLanguage(testTree,languages[1],languages[5],1);
  testUsedLanguage(testTree,languages[1],languages[6],1);
}
