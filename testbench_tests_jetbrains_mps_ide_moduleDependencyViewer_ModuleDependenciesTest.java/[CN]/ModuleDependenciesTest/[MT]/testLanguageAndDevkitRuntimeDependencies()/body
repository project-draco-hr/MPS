{
  final Solution[] solutions=new Solution[8];
  final Language[] languages=new Language[4];
  final DevKit[] devkits=new DevKit[2];
  for (int i=0; i < solutions.length; i++)   solutions[i]=createSolution();
  for (int i=0; i < languages.length; i++)   languages[i]=createLanguage();
  for (int i=0; i < devkits.length; i++)   devkits[i]=createDevKit();
  final DependencyPathTree testTree=new DependencyPathTree(null);
  solutions[0].addDependency(solutions[4].getModuleReference(),false);
  solutions[4].addUsedLanguage(languages[0].getModuleReference());
  languages[0].getModuleDescriptor().getRuntimeModules().add(solutions[1].getModuleReference());
  languages[0].addExtendedLanguage(languages[1].getModuleReference());
  languages[1].getModuleDescriptor().getRuntimeModules().add(solutions[2].getModuleReference());
  languages[0].addUsedLanguage(languages[2].getModuleReference());
  languages[2].getModuleDescriptor().getRuntimeModules().add(solutions[3].getModuleReference());
  solutions[4].addUsedDevkit(devkits[0].getModuleReference());
  devkits[0].getModuleDescriptor().getExportedLanguages().add(languages[3].getModuleReference());
  languages[3].getModuleDescriptor().getRuntimeModules().add(solutions[7].getModuleReference());
  devkits[0].getModuleDescriptor().getExtendedDevkits().add(devkits[1].getModuleReference());
  devkits[1].getModuleDescriptor().getExportedSolutions().add(solutions[5].getModuleReference());
  solutions[5].addDependency(solutions[6].getModuleReference(),false);
  testDependency(testTree,solutions[0],solutions[1],0);
  testTree.setShowRuntime(true);
  testDependency(testTree,solutions[0],solutions[1],1);
  testDependency(testTree,solutions[0],solutions[1],1);
  testDependency(testTree,solutions[0],solutions[2],1);
  testDependency(testTree,solutions[0],solutions[3],0);
  testDependency(testTree,solutions[0],solutions[5],1);
  testDependency(testTree,solutions[0],solutions[6],1);
  testDependency(testTree,solutions[0],solutions[7],1);
  testDependency(testTree,solutions[0],languages[3],0);
}
