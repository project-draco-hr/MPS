{
  this.config=config;
  ActiveEnvironment.activateEnvironment(this);
  BasicConfigurator.configure();
  Logger.getRootLogger().setLevel(Level.ERROR);
  IdeMain.setTestMode(IdeMain.TestMode.CORE_TEST);
  EnvironmentUtils.setSystemProperties(true);
  String mpsInternal=System.getProperty("mps.internal");
  System.setProperty("idea.is.internal",(mpsInternal == null ? "false" : mpsInternal));
  System.setProperty("idea.no.jre.check","true");
  System.setProperty("idea.platform.prefix","Idea");
  StringBuffer pluginPath=new StringBuffer();
  File pluginDir=new File(PathManager.getPreinstalledPluginsPath());
  if (pluginDir.listFiles() != null) {
    for (    File pluginFolder : pluginDir.listFiles()) {
      if (pluginPath.length() > 0) {
        pluginPath.append(File.pathSeparator);
      }
      pluginPath.append(pluginFolder.getPath());
    }
  }
  System.setProperty("plugin.path",pluginPath.toString());
  if (System.getProperty("idea.load.plugins") == null || System.getProperty("idea.load.plugins").equals("false")) {
    System.setProperty("idea.load.plugins.id",IterableUtils.join(config.plugins(),","));
  }
  if (!(cachesInvalidated)) {
    FSRecords.invalidateCaches();
    cachesInvalidated=true;
  }
  try {
    IdeaTestApplication.getInstance(null);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        ModelAccess.instance().runWriteAction(new Runnable(){
          public void run(){
            LibraryInitializer.getInstance().update();
          }
        }
);
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  for (  String macro : SetSequence.fromSet(MapSequence.fromMap(config.macros()).keySet())) {
    setMacro(macro,MapSequence.fromMap(config.macros()).get(macro));
  }
}
