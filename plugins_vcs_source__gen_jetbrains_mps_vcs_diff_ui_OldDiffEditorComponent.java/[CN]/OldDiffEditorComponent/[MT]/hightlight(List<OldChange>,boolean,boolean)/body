{
  final List<OldChangeEditorMessage> resultChanges=new ArrayList<OldChangeEditorMessage>();
  myChanges=new ArrayList<OldChange>(changes);
  SNode sNode=getRootCell().getSNode();
  if (sNode == null) {
    return;
  }
  final SModel model=sNode.getModel();
  final Set<OldChange> newChanges=getNewChanges(changes);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      OldChange change : changes) {
        if (change instanceof OldSetReferenceChange) {
          OldSetReferenceChange referenceChange=(OldSetReferenceChange)change;
          OldChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!(newChanges.contains(change)));
          message.setRole(referenceChange.getRole());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof MoveNodeChange || change instanceof ChangeConceptChange) {
          OldChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!(newChanges.contains(change)));
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof NewNodeChange) {
          if (!(isNewVersion)) {
            OldChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!(newChanges.contains(change)));
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
        if (change instanceof OldSetPropertyChange) {
          OldSetPropertyChange propertyChange=(OldSetPropertyChange)change;
          OldChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!(newChanges.contains(change)));
          message.setProperty(propertyChange.getProperty());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof DeleteNodeChange) {
          if (isNewVersion) {
            OldChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!(newChanges.contains(change)));
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
      }
    }
  }
);
  for (  OldChangeEditorMessage editorMessage : resultChanges) {
    getInspector().getHighlightManager().mark(editorMessage);
  }
  getHighlightManager().repaintAndRebuildEditorMessages();
  getInspector().getHighlightManager().repaintAndRebuildEditorMessages();
  myChangeEditorMessages=new ArrayList<OldChangeEditorMessage>(resultChanges);
}
