{
  final SNode linkDecl=SLinkOperations.getTarget(op,"link",false);
  if (linkDecl == null) {
    return;
  }
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(op,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1206103331026",true),new QuotationClass_77().createNode(SLinkOperations.getTarget(linkDecl,"target",false),SPropertyOperations.hasValue(linkDecl,"metaClass","aggregation",null) + ""),op,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1206103335045");
  RulesUtil.checkAppliedCorrectly_generic(op);
  final SNode Concept_typevar_1186062441601=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
  RulesUtil.equate_inputNodeConcept(op,TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1186062441601));
{
    final SNode C=TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1186062441601);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(C,new Runnable(){
      public void run(){
        SNode inputNodeConcept=TypeChecker.getInstance().getEquationManager().getRepresentator(C);
        List<LinkDeclaration> declaredLinks=SModelSearchUtil_new.getLinkDeclarationsExcludingOverridden(((AbstractConceptDeclaration)SNodeOperations.getAdapter(inputNodeConcept)));
        if (!(declaredLinks.contains(((LinkDeclaration)SNodeOperations.getAdapter(linkDecl))))) {
          TypeChecker.getInstance().reportTypeError(op,"access to link '" + SPropertyOperations.getString(linkDecl,"role") + "' is not expected here","jetbrains.mps.bootstrap.smodelLanguage.helgins","1186062499482");
        }
      }
    }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186062479067");
  }
}
