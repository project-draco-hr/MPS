{
  Set<IModule> modules=SetSequence.fromSet(new HashSet<IModule>());
  for (  SNode moduleRef : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"moduleReference",true))) {
    IModule module=Module_Behavior.call_getModule_1213877515148(SLinkOperations.getTarget(moduleRef,"module",false));
    SetSequence.fromSet(modules).addElement(module);
  }
  IClassPathItem classpath=AbstractModule.getDependenciesClasspath(modules,false);
  List<String> stringClasspath=ListSequence.fromList(ModuleUtil.retrieveClassPath(classpath)).select(new ISelector<String,String>(){
    public String select(    String it){
      return (String)it.replace(File.separator,Util.SEPARATOR);
    }
  }
).distinct().toListSequence();
  return ModuleCycle_Behavior.createPathHolders_1218716903754(stringClasspath,ModuleCycle_Behavior.call_getBasedir_1218647622991(thisNode),BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.getAncestor(thisNode,"jetbrains.mps.build.packaging.structure.IMacroHolder",true,true),"virtual_getMacro_1107726059764558743",new Object[]{}));
}
