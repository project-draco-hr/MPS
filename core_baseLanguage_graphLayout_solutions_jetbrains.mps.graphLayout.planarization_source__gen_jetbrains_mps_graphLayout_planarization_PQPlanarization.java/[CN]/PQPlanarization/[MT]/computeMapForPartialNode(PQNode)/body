{
  int w=0;
  for (  PQNode child : ListSequence.fromList(node.getChildren())) {
    w+=MapSequence.fromMap(myW).get(child);
  }
  MapSequence.fromMap(myW).put(node,w);
  if (node instanceof PNode) {
    Iterable<PQNode> partialChildren=ListSequence.fromList(node.getChildren()).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.PARTIAL;
      }
    }
);
    int partialW=0;
    for (    PQNode child : Sequence.fromIterable(partialChildren)) {
      partialW+=MapSequence.fromMap(myW).get(child);
    }
    int h1=0;
    PQNode h1Child=null;
    for (    PQNode child : Sequence.fromIterable(partialChildren)) {
      if (h1 <= MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myH).get(child)) {
        h1=MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myH).get(child);
        h1Child=child;
      }
    }
    h1=partialW - h1;
    MapSequence.fromMap(myH).put(node,h1);
    MapSequence.fromMap(myHChild1).put(node,h1Child);
    int a1=0;
    PQNode aChild=null;
    for (    PQNode child : Sequence.fromIterable(partialChildren)) {
      if (a1 < MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myA).get(child)) {
        a1=MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myA).get(child);
        aChild=child;
      }
    }
    MapSequence.fromMap(myAChild).put(node,aChild);
    a1=MapSequence.fromMap(myW).get(node) - a1;
    int h2=0;
    PQNode h2Child=null;
    for (    PQNode child : Sequence.fromIterable(partialChildren)) {
      if (child == h1Child) {
        continue;
      }
      if (h2 <= MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myH).get(child)) {
        h2=MapSequence.fromMap(myW).get(child) - MapSequence.fromMap(myH).get(child);
        h2Child=child;
      }
    }
    MapSequence.fromMap(myHChild2).put(node,h2Child);
    int a2=partialW - h1 - h2;
    MapSequence.fromMap(myA).put(node,Math.min(a1,a2));
    if (a1 < a2) {
      SetSequence.fromSet(myPerformedA).addElement(node);
    }
  }
  if (node instanceof QNode) {
    Iterator<PQNode> childItr=ListSequence.fromList(node.getChildren()).iterator();
    PQNode hLeftNode=null;
    int hLeft=this.findHforPartialQRoot(childItr);
    childItr=ListSequence.fromList(node.getChildren()).reversedList().iterator();
    PQNode hRightNode=null;
    int hRight=this.findHforPartialQRoot(childItr);
  }
}
