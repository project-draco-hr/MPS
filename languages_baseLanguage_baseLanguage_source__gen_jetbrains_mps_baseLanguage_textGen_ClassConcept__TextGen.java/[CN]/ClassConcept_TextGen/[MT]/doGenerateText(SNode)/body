{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")) != null)) {
    appendNode(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")));
  }
  BaseLanguageTextGen.fileHeader(node,this);
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility")),this);
  if (Classifier_Behavior.call_isInner_521412098689998677(node) && BehaviorReflection.invokeVirtual(Boolean.TYPE,node,"virtual_isStatic_7405920559687241224",new Object[]{})) {
    this.append("static ");
  }
  if (SPropertyOperations.getBoolean(node,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1075300953594l,"abstractClass"))) {
    this.append("abstract ");
  }
  if (SPropertyOperations.getBoolean(node,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1221565133444l,"isFinal"))) {
    this.append("final ");
  }
  this.append("class ");
  this.append(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
  GenericDeclarationTextGen2.typeDeclarations(node,this);
  if ((SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1165602531693l,"superclass")) != null)) {
    this.append(" extends ");
    appendNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1165602531693l,"superclass")));
  }
  if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1095933932569l,"implementedInterface"))).isNotEmpty()) {
    this.append(" implements ");
{
      Iterable<SNode> collection=SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1095933932569l,"implementedInterface"));
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
  }
  this.append(" ");
  BaseClassConceptTextGen.membersWithBrackets(node,true,this);
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String unitName=null;
      try {
        unitName=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate unit name for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillUnitInfo(this,node,unitName);
    }
  }
}
