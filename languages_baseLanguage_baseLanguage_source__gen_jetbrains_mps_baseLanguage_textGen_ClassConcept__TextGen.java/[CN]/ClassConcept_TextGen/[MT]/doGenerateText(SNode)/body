{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"))) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"))),this.getSNode());
  }
  BaseLanguageTextGen.fileHeader(node,this);
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,"visibility",true),this);
  if (Classifier_Behavior.call_isInner_521412098689998677(node) && Classifier_Behavior.call_isStatic_521412098689998668(node)) {
    this.append("static ");
  }
  if (SPropertyOperations.getBoolean(node,"abstractClass")) {
    this.append("abstract ");
  }
  if (SPropertyOperations.getBoolean(node,"isFinal")) {
    this.append("final ");
  }
  this.append("class ");
  this.append(SPropertyOperations.getString(node,"name"));
  GenericDeclarationTextGen2.typeDeclarations(node,this);
  if ((SLinkOperations.getTarget(node,"superclass",true) != null)) {
    this.append(" extends ");
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"superclass",true),this.getSNode());
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).isNotEmpty()) {
    this.append(" implements ");
    if (ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).isNotEmpty()) {
      for (      SNode item : SLinkOperations.getTargets(node,"implementedInterface",true)) {
        TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).last()) {
          this.append(", ");
        }
      }
    }
  }
  this.append(" ");
  BaseClassConceptTextGen.membersWithBrackets(node,this);
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String unitName=null;
      try {
        unitName=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{});
      }
 catch (      Throwable t) {
        LOG.error("Can't calculate unit name for a node " + node + ".",t);
      }
      TraceInfoGenerationUtil.fillUnitInfo(this,node,unitName);
    }
  }
}
