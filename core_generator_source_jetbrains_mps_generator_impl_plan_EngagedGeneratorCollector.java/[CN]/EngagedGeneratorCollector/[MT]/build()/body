{
  Queue<String> queue=new ArrayDeque<String>(getAllLanguages());
  Set<String> processed=new HashSet<String>(queue);
  Map<String,List<TemplateModule>> result=new HashMap<String,List<TemplateModule>>();
  Set<String> badLanguages=new HashSet<String>();
  Set<String> participatingLanguages=new HashSet<String>(processed);
  while (!queue.isEmpty()) {
    String next=queue.remove();
    LanguageRuntime language=LanguageRegistry.getInstance().getLanguage(next);
    if (language == null) {
      LOG.error(String.format("Model %s uses language %s which is missing (likely is not yet generated or is a bootstrap dependency)",myModel.getModelName(),next));
      badLanguages.add(next);
      continue;
    }
    Collection<TemplateModule> generators=language.getGenerators();
    if (generators == null) {
      result.put(next,Collections.<TemplateModule>emptyList());
      continue;
    }
    ArrayList<TemplateModule> langGenerators=new ArrayList<TemplateModule>(generators.size());
    result.put(next,langGenerators);
    for (    TemplateModule generator : generators) {
      if (generator == null) {
        continue;
      }
      langGenerators.add(generator);
      final Collection<String> generatorOutputLanguages=generator.getUsedLanguages();
      participatingLanguages.addAll(generatorOutputLanguages);
      HashSet<String> moreLanguages=new HashSet<String>();
      moreLanguages.addAll(generatorOutputLanguages);
      final Collection<String> refGenLangs=getLanguagesFromReferencedModules(generator);
      moreLanguages.addAll(refGenLangs);
      moreLanguages.removeAll(processed);
      processed.addAll(moreLanguages);
      queue.addAll(moreLanguages);
    }
  }
  ArrayList<TemplateModule> all=new ArrayList<TemplateModule>();
  for (  Collection<TemplateModule> m : result.values()) {
    all.addAll(m);
  }
  myAccessibleGenerators=Collections.unmodifiableList(all);
  if (myOnlyLanguageRealUses) {
    buildLangExtendClosure(Collections.<String>emptyList(),badLanguages);
    ArrayList<TemplateModule> engaged=new ArrayList<TemplateModule>();
    participatingLanguages.retainAll(result.keySet());
    for (    String pl : participatingLanguages) {
      engaged.addAll(result.get(pl));
    }
    myEngagedGenerators=Collections.unmodifiableList(engaged);
  }
 else {
    myEngagedGenerators=myAccessibleGenerators;
  }
}
