{
  Queue<String> queue=new ArrayDeque<String>(getAllLanguages());
  Set<String> processed=new HashSet<String>(queue);
  Map<String,List<TemplateModule>> result=new HashMap<String,List<TemplateModule>>();
  Set<String> badLanguages=new HashSet<String>();
  Set<String> participatingLanguages=new HashSet<String>(processed);
  while (!queue.isEmpty()) {
    String next=queue.remove();
    LanguageRuntime language=LanguageRegistry.getInstance().getLanguage(next);
    if (language == null) {
      LOG.error(String.format("Model %s uses language %s which is missing (likely is not yet generated or is a bootstrap dependency)",myModel.getModelName(),next));
      badLanguages.add(next);
      continue;
    }
    HashSet<String> targetLanguages=new HashSet<String>();
    HashSet<String> moreLanguages=new HashSet<String>();
    result.put(next,collectLanguagesFromGenerators(language,targetLanguages,moreLanguages));
    if (myOnlyLanguageRealUses) {
      HashSet<String> checkExtendedLanguages=new HashSet<String>(targetLanguages);
      checkExtendedLanguages.add(next);
      checkExtendedLanguages.removeAll(processed);
      for (      String targetLanguage : checkExtendedLanguages) {
        Language langModule=ModuleRepositoryFacade.getInstance().getModule(targetLanguage,Language.class);
        for (        SModuleReference mr : langModule.getExtendedLanguageRefs()) {
          targetLanguages.add(mr.getModuleName());
        }
      }
    }
    participatingLanguages.addAll(targetLanguages);
    moreLanguages.addAll(targetLanguages);
    moreLanguages.removeAll(processed);
    processed.addAll(moreLanguages);
    queue.addAll(moreLanguages);
  }
  ArrayList<TemplateModule> all=new ArrayList<TemplateModule>();
  for (  Collection<TemplateModule> m : result.values()) {
    all.addAll(m);
  }
  myAccessibleGenerators=Collections.unmodifiableList(all);
  if (myOnlyLanguageRealUses) {
    ArrayList<TemplateModule> engaged=new ArrayList<TemplateModule>();
    participatingLanguages.retainAll(result.keySet());
    for (    String pl : participatingLanguages) {
      engaged.addAll(result.get(pl));
    }
    myEngagedGenerators=Collections.unmodifiableList(engaged);
  }
 else {
    myEngagedGenerators=myAccessibleGenerators;
  }
}
