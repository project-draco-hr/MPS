{
  if (addedRoots.isEmpty())   return;
  DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
  final ArrayList<SNode> allRoots=new ArrayList<SNode>();
  for (  SNode root1 : getModel().getRootNodes()) {
    allRoots.add(root1);
  }
  Collections.sort(allRoots,new ToStringComparator(true));
  List<SNode> added=new ArrayList<SNode>(addedRoots);
  Collections.sort(added,new Comparator<SNode>(){
    @Override public int compare(    SNode o1,    SNode o2){
      return new Integer(allRoots.indexOf(o1)).compareTo(allRoots.indexOf(o2));
    }
  }
);
  final HashMap<MPSTreeNode,Integer> lastPositions=new HashMap<MPSTreeNode,Integer>();
  for (  SNode root : added) {
    SNodeTreeNode nodeToInsert=new SNodeTreeNode(root);
    MPSTreeNode targetNode=getNodeGroupFor(root);
    if (targetNode == null) {
      targetNode=SModelTreeNode.this;
    }
    int index=-1;
    Integer lastPosition=lastPositions.get(targetNode);
    if (lastPosition == null)     lastPosition=0;
    for (int i=lastPosition; i < targetNode.getChildCount(); i++) {
      if (!(targetNode.getChildAt(i) instanceof SNodeTreeNode)) {
        continue;
      }
      SNodeTreeNode child=(SNodeTreeNode)targetNode.getChildAt(i);
      String rp=root.toString();
      String cp=child.getSNode().toString();
      if (rp.compareTo(cp) < 0) {
        index=i;
        break;
      }
    }
    if (index == -1) {
      index=targetNode.getChildCount();
    }
    lastPositions.put(targetNode,index + 1);
    treeModel.insertNodeInto(nodeToInsert,targetNode,index);
  }
}
