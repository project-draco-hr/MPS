{
  notifier.fireTestStarted(myDescription);
  MPSCompilationResult compilationResult=MpsTestsSupport.makeAllInCreatedEnvironment();
  if (compilationResult != null && compilationResult.getErrors() > 0) {
    notifier.fireTestFailure(new Failure(myDescription,new Exception("Compilation errors: " + compilationResult)));
  }
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      ClassLoaderManager.getInstance().reloadClasses(MPSModuleRepository.getInstance().getModules(),new EmptyProgressMonitor());
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    @Override public void run(){
      for (      SModule mod : MPSModuleRepository.getInstance().getAllModules()) {
        if (!(mod instanceof AbstractModule)) {
          continue;
        }
        ((AbstractModule)mod).updateModelsSet();
      }
    }
  }
);
  if (ActiveEnvironment.get().hasIdeaInstance()) {
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          ModelAccess.instance().runWriteAction(new Runnable(){
            @Override public void run(){
              LocalFileSystem.getInstance().refresh(false);
            }
          }
);
        }
      }
);
    }
 catch (    InterruptedException e) {
      notifier.fireTestFailure(new Failure(myDescription,e));
    }
catch (    InvocationTargetException e) {
      notifier.fireTestFailure(new Failure(myDescription,e));
    }
  }
 else {
  }
  notifier.fireTestFinished(myDescription);
}
