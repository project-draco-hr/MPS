{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,0x1ed21562e580b09eL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,0x1ed21562e580b09eL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode module : ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x4df58c6f18f84a13L,"jetbrains.mps.build.structure.BuildProject"),false,false),MetaAdapterFactory.getConcept(0xcf935df46994e9cL,0xa132fa109541cba3L,0x4780308f5d333ebL,"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"),false,new SAbstractConcept[]{}))) {
            SModule smodule=ModuleRepositoryFacade.getInstance().getModule(ModuleReference.parseReference(BuildMps_AbstractModule_Behavior.call_getModuleReference_4643216374596368935(module)));
            for (            SModel model : smodule.getModels()) {
              ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelOperations.roots(model,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(it)).any(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode it){
                      return ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))).isEmpty();
                    }
                  }
);
                }
              }
));
            }
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_bt7fcz_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  references.put(MetaIdFactory.refId(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,0x1ed21562e585f109L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,0x1ed21562e585f109L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode cls=SLinkOperations.getTarget(SNodeOperations.as(_context.getContextNode(),MetaAdapterFactory.getConcept(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,"jetbrains.mps.build.mps.runner.structure.BuildSolutionRunnerAspect")),MetaAdapterFactory.getReferenceLink(0x427a473d5177432cL,0x9905bcbceb71b996L,0x39ea87a41cc0827eL,0x1ed21562e580b09eL,"startClass"));
          return Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(cls)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))).isEmpty();
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_bt7fcz_a0a1a0a0a1a0b0a2a3;
        }
      }
;
    }
  }
);
  return references;
}
