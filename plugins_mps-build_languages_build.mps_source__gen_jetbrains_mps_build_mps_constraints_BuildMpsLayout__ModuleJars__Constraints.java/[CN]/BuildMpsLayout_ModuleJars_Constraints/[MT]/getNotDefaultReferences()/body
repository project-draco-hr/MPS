{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("module",new BaseReferenceConstraintsDescriptor("module",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_9ulpon_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(Scope.getScope(Scope.parent(_context.getContextNode()),_context.getContextNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Module"))){
            @Override public boolean isExcluded(            SNode node){
              return SNodeOperations.isInstanceOf(node,"jetbrains.mps.build.mps.structure.BuildMps_Generator");
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
