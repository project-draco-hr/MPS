{
  IGenerationTracer generationTracer=myGenerator.getGenerationTracer();
  List<SNode> outputNodes=new ArrayList<SNode>();
  String mappingName=GeneratorUtil.getMappingName(nodeMacro,null);
  if (nodeMacro instanceof LoopMacro) {
    List<SNode> newInputNodes=getNewInputNodes(nodeMacro,inputNode);
    for (    SNode newInputNode : newInputNodes) {
      boolean inputChanged=(newInputNode != inputNode);
      if (inputChanged) {
        pushInputHistory(inputNode);
        generationTracer.pushInputNode(newInputNode);
      }
      try {
        List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
        if (_outputNodes != null)         outputNodes.addAll(_outputNodes);
      }
  finally {
        if (inputChanged) {
          popInputHistory();
          generationTracer.closeInputNode(newInputNode);
        }
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof CopySrcNodeMacro || nodeMacro instanceof CopySrcListMacro) {
    List<SNode> newInputNodes=getNewInputNodes(nodeMacro,inputNode);
    for (    SNode newInputNode : newInputNodes) {
      List<SNode> _outputNodes=copyNodeFromInputNode(mappingName,templateNode,newInputNode);
      if (_outputNodes != null) {
        for (        SNode outputNode : _outputNodes) {
          Language outputNodeLang=outputNode.getNodeLanguage();
          if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(outputNodeLang)) {
            if (!outputNodeLang.getGenerators().isEmpty()) {
              myGenerator.showErrorMessage(outputNode,"language of output node is '" + outputNodeLang.getNamespace() + "' - this language did not show up when computing generation steps!");
              myGenerator.showErrorMessage(inputNode," -- was input: " + inputNode.getDebugText());
              myGenerator.showErrorMessage(nodeMacro.getNode()," -- was template: " + nodeMacro.getDebugText());
              myGenerator.showErrorMessage(null," -- workaround: add the language '" + outputNodeLang.getNamespace() + "' to list of 'Languages Engaged On Generation' in model '"+ myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName()+ "'");
            }
          }
        }
        outputNodes.addAll(_outputNodes);
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof IfMacro) {
    List<SNode> _outputNodes=null;
    if (myGenerator.getExecutor().checkConditionForIfMacro(inputNode,(IfMacro)nodeMacro,myContext)) {
      _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,inputNode,nodeMacrosToSkip + 1);
    }
 else {
      RuleConsequence altConsequence=((IfMacro)nodeMacro).getAlternativeConsequence();
      if (altConsequence != null) {
        try {
          List<Pair<SNode,String>> nodeAndMappingNamePairs=GeneratorUtil.getTemplateNodesFromRuleConsequence(altConsequence,inputNode,nodeMacro.getNode(),myGenerator);
          if (nodeAndMappingNamePairs == null) {
            myGenerator.showErrorMessage(inputNode,null,nodeMacro.getNode(),"error processing $IF$/alternative");
            return null;
          }
          for (          Pair<SNode,String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {
            SNode altTemplateNode=nodeAndMappingNamePair.o1;
            if (nodeAndMappingNamePair.o2 != null) {
              mappingName=nodeAndMappingNamePair.o2;
            }
            List<SNode> __outputNodes=createOutputNodesForExternalTemplateNode(mappingName,altTemplateNode,inputNode,myContext);
            if (__outputNodes != null) {
              if (_outputNodes == null)               _outputNodes=new ArrayList<SNode>();
              _outputNodes.addAll(__outputNodes);
            }
          }
        }
 catch (        AbandonRuleInputException e) {
        }
      }
    }
    if (_outputNodes != null)     outputNodes.addAll(_outputNodes);
    return outputNodes;
  }
 else   if (nodeMacro instanceof MapSrcNodeMacro || nodeMacro instanceof MapSrcListMacro) {
    MapSrcMacro_MapperFunction macro_mapperFunction;
    if (nodeMacro instanceof MapSrcNodeMacro) {
      macro_mapperFunction=((MapSrcNodeMacro)nodeMacro).getMapperFunction();
    }
 else {
      macro_mapperFunction=((MapSrcListMacro)nodeMacro).getMapperFunction();
    }
    List<SNode> newInputNodes=getNewInputNodes(nodeMacro,inputNode);
    for (    SNode newInputNode : newInputNodes) {
      boolean inputChanged=(newInputNode != inputNode);
      if (inputChanged) {
        pushInputHistory(inputNode);
        generationTracer.pushInputNode(newInputNode);
      }
      try {
        if (macro_mapperFunction != null) {
          SNode childToReplaceLater=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
          generationTracer.pushOutputNodeToReplaceLater(childToReplaceLater);
          outputNodes.add(childToReplaceLater);
          putInputNodeByMappingName(mappingName,newInputNode);
          myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(nodeMacro,childToReplaceLater,newInputNode,new HashMap<String,SNode>(myInputNodesByMappingName),myContext);
        }
 else {
          List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
          if (_outputNodes != null) {
            outputNodes.addAll(_outputNodes);
            for (            SNode outputNode : _outputNodes) {
              myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroPostProcChange(nodeMacro,outputNode,newInputNode,new HashMap<String,SNode>(myInputNodesByMappingName),myContext);
            }
          }
        }
      }
  finally {
        if (inputChanged) {
          popInputHistory();
          generationTracer.closeInputNode(newInputNode);
        }
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof SwitchMacro) {
    TemplateSwitch templateSwitch=((SwitchMacro)nodeMacro).getTemplateSwitch();
    if (templateSwitch == null) {
      myGenerator.showErrorMessage(inputNode,nodeMacro.getNode(),"error processing $SWITCH$ - bad TemplateSwitch reference");
      return null;
    }
    SNode newInputNode=getNewInputNode(nodeMacro,inputNode);
    if (newInputNode == null) {
      GeneratorMessage generatorMessage=templateSwitch.getNullInputMessage();
      if (generatorMessage != null) {
        GeneratorUtil.processGeneratorMessage(generatorMessage,inputNode,nodeMacro.getNode(),null,myGenerator);
      }
      return outputNodes;
    }
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    generationTracer.pushSwitch(templateSwitch.getNode());
    try {
      List<SNode> _outputNodes=null;
      RuleConsequence consequenceForCase=(RuleConsequence)myGenerator.getRuleManager().getConsequenceForSwitchCase(newInputNode,templateSwitch,myGenerator);
      if (consequenceForCase == null) {
        _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
      }
 else {
        List<Pair<SNode,String>> nodeAndMappingNamePairs=GeneratorUtil.getTemplateNodesFromRuleConsequence(consequenceForCase,newInputNode,nodeMacro.getNode(),myGenerator);
        if (nodeAndMappingNamePairs == null) {
          myGenerator.showErrorMessage(newInputNode,nodeMacro.getNode(),consequenceForCase.getNode(),"error processing $SWITCH$");
          return null;
        }
        for (        Pair<SNode,String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {
          SNode templateNodeForCase=nodeAndMappingNamePair.o1;
          if (nodeAndMappingNamePair.o2 != null) {
            mappingName=nodeAndMappingNamePair.o2;
          }
          List<SNode> __outputNodes=createOutputNodesForExternalTemplateNode(mappingName,templateNodeForCase,newInputNode,null);
          if (__outputNodes != null) {
            if (_outputNodes == null)             _outputNodes=new ArrayList<SNode>();
            _outputNodes.addAll(__outputNodes);
          }
        }
      }
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
 catch (    AbandonRuleInputException e) {
    }
 finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof IncludeMacro) {
    SNode newInputNode=getNewInputNode(nodeMacro,inputNode);
    if (newInputNode == null) {
      return outputNodes;
    }
    IncludeMacro includeMacro=(IncludeMacro)nodeMacro;
    TemplateDeclaration includeTemplate=includeMacro.getIncludeTemplate();
    if (includeTemplate == null) {
      myGenerator.showErrorMessage(newInputNode,null,nodeMacro.getNode(),"error processing $INCLIDE$ : no 'include template'");
      return null;
    }
    List<TemplateFragment> fragments=GeneratorUtil.getTemplateFragments(includeTemplate);
    if (!GeneratorUtil.checkIfOneOrMaryAdjacentFragments(fragments,includeTemplate,newInputNode,nodeMacro.getNode(),myGenerator)) {
      myGenerator.showErrorMessage(newInputNode,null,nodeMacro.getNode(),"error processing $INCLIDE$");
      return null;
    }
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    generationTracer.pushTemplateNode(includeTemplate.getNode());
    try {
      for (      TemplateFragment fragment : fragments) {
        SNode templateForInclude=fragment.getParent().getNode();
        mappingName=GeneratorUtil.getMappingName(fragment,mappingName);
        List<SNode> _outputNodes=createOutputNodesForExternalTemplateNode(mappingName,templateForInclude,newInputNode,null);
        if (_outputNodes != null)         outputNodes.addAll(_outputNodes);
      }
    }
  finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
    return outputNodes;
  }
  List<SNode> newInputNodes=getNewInputNodes(nodeMacro,inputNode);
  for (  SNode newInputNode : newInputNodes) {
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    try {
      List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
  finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
  }
  return outputNodes;
}
