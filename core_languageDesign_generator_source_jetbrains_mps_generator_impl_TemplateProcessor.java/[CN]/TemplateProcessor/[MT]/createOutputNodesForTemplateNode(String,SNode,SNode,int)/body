{
  IGenerationTracer generationTracer=myGenerator.getGenerationTracer();
  putInputNodeByMappingName(mappingName,inputNode);
  int macroCount=0;
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (!(templateChildNode instanceof NodeMacro))     continue;
    macroCount++;
    if (macroCount <= nodeMacrosToSkip)     continue;
    NodeMacro nodeMacro=(NodeMacro)templateChildNode;
    generationTracer.pushMacro(nodeMacro.getNode());
    try {
      return createOutputNodesForTemplateNodeWithMacro(nodeMacro,templateNode,inputNode,nodeMacrosToSkip);
    }
  finally {
      generationTracer.closeMacro(nodeMacro.getNode());
    }
  }
  generationTracer.pushTemplateNode(templateNode);
  SNode outputNode=new SNode(myOutputModel,templateNode.getConceptFqName(),false);
  GeneratorMappings mappings=myGenerator.getMappings();
  mappings.addOutputNodeByInputAndTemplateNode(inputNode,templateNode,outputNode);
  if (myInputHistory != null && !myInputHistory.isEmpty()) {
    for (    SNode historyInputNode : myInputHistory) {
      mappings.addOutputNodeByIndirectInputAndTemplateNode(historyInputNode,templateNode,outputNode);
    }
  }
  mappings.addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,outputNode);
  mappings.addOutputNodeByTemplateNode(templateNode,outputNode);
  outputNode.putProperties(templateNode);
  SModel templateModel=templateNode.getModel();
  for (  SReference reference : templateNode.getReferencesArray()) {
    if (templateNode.getLinkAttribute(ReferenceMacro_AnnotationLink.REFERENCE_MACRO,reference.getRole()) != null) {
      continue;
    }
    SNode templateReferentNode=reference.getTargetNode();
    if (templateReferentNode == null) {
      myGenerator.showErrorMessage(null,templateNode,"'createOutputNodesForTemplateNode()' referent '" + reference.getRole() + "' is null in template model");
      continue;
    }
    if (templateReferentNode.getModel() == templateModel) {
      ReferenceInfo_TemplateNode refInfo=new ReferenceInfo_TemplateNode(outputNode,reference,inputNode,getInputHistoryCopy());
      PostponedReference postponedReference=new PostponedReference(refInfo,myGenerator);
      outputNode.addReference(postponedReference);
    }
 else {
      outputNode.setReferent(reference.getRole(),templateReferentNode);
    }
  }
  List<INodeAdapter> templateChildNodes=new ArrayList<INodeAdapter>();
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (templateChildNode instanceof PropertyMacro) {
      myGenerator.getExecutor().expandPropertyMacro((PropertyMacro)templateChildNode,inputNode,templateNode,outputNode);
    }
 else     if (templateChildNode instanceof ReferenceMacro) {
      ReferenceInfo_Macro refInfo=new ReferenceInfo_Macro(outputNode,(ReferenceMacro)templateChildNode,inputNode,new HashMap<String,SNode>(myInputNodesByMappingName),templateNode);
      PostponedReference postponedReference=new PostponedReference(refInfo,myGenerator);
      outputNode.addReference(postponedReference);
    }
 else     if (!GeneratorUtil.isTemplateLanguageElement(templateChildNode)) {
      templateChildNodes.add(templateChildNode);
    }
  }
  try {
    for (    INodeAdapter templateChildNode : templateChildNodes) {
      List<SNode> outputChildNodes=createOutputNodesForTemplateNode(null,templateChildNode.getNode(),inputNode,0);
      if (outputChildNodes != null) {
        String role=templateChildNode.getRole_();
        for (        SNode outputChildNode : outputChildNodes) {
          if (!GeneratorUtil.checkChild(outputNode,role,outputChildNode)) {
            myGenerator.showWarningMessage(inputNode," -- was input: " + (inputNode != null ? inputNode.getDebugText() : "null"));
            myGenerator.showWarningMessage(templateNode," -- was parent in template: " + templateNode.getDebugText());
            myGenerator.showWarningMessage(templateChildNode.getNode()," -- was child in template: " + templateChildNode.getDebugText());
          }
          outputNode.addChild(role,outputChildNode);
        }
      }
    }
  }
  finally {
    generationTracer.pushOutputNode(outputNode);
    generationTracer.closeTemplateNode(templateNode);
  }
  return Collections.singletonList(outputNode);
}
