{
  boolean fValue=n == NormKind.Norm2F;
  MatrixScalarOperations oper;
  if (fValue) {
    oper=getF(myCarrier[0][0]);
  }
 else   oper=getI(myCarrier[0][0]);
  if (oper == null) {
    throw new IllegalArgumentException();
  }
  Object leader=null;
switch (n) {
case Norm1:
    for (int j=0; j < myColumns; j++) {
      Object o1=0;
      for (int i=0; i < myRows; i++) {
        o1=oper.add(o1,myCarrier[i][j]);
      }
      if (leader == null || ((Comparable)leader).compareTo(o1) < 0) {
        leader=o1;
      }
    }
  return leader;
case NormInfty:
leader=null;
for (int i=0; i < myRows; i++) {
Object o1=0;
for (int j=0; j < myColumns; j++) {
  o1=oper.add(o1,myCarrier[i][j]);
}
if (leader == null || ((Comparable)leader).compareTo(o1) < 0) {
  leader=o1;
}
}
return leader;
case Norm2F:
Object o1=0;
for (int i=0; i < myRows; i++) {
for (int j=0; j < myColumns; j++) {
Object o=myCarrier[i][j];
o1=oper.add(o1,oper.mul(myOperations.abs(o),myOperations.abs(o)));
}
}
if (o1 instanceof BigDecimal) {
return MathRuntime.sqrt((BigDecimal)o1,MathContext.DECIMAL128);
}
if (o1 instanceof Double) {
return Math.sqrt((Double)o1);
}
if (o1 instanceof Float) {
return (float)Math.sqrt((Float)o1);
}
return null;
case NormMax:
leader=null;
for (int i=0; i < myRows; i++) {
for (int j=0; j < myColumns; j++) {
Object o2=myOperations.abs(myCarrier[i][j]);
if (leader == null || ((Comparable)leader).compareTo(((Comparable)o2)) < 0) {
leader=o2;
}
}
}
return leader;
default :
}
return null;
}
