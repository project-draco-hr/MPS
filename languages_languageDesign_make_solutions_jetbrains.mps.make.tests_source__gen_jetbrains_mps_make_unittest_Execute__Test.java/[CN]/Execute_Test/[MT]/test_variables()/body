{
  final ITarget make=Mockups.target(context,"make");
  final ITarget config=Mockups.target(context,"config");
  final IJobMonitor monit=Mockups.monitor(context,"mon");
  final String[] vars=new String[1];
  context.checking(new Expectations(){
{
      atLeast(1).of(config).before();
      will(returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("make"))));
      exactly(1).of(config).createJob();
      IJob cj=new IJob(){
        public IResult execute(        Iterable<IResource> res,        IJobMonitor mon,        IPropertiesAccessor pa,        ProgressMonitor progressMonitor){
          String[] arr=pa.global().properties(new ITarget.Name("make"),(new String[0]).getClass());
          arr[0]="BARFOO";
          return new IResult.SUCCESS(res);
        }
      }
;
      will(returnValue(cj));
      exactly(1).of(make).createParameters(with(aNonNull(Class.class)));
      will(returnValue(vars));
      exactly(1).of(make).createJob();
      IJob mj=new IJob(){
        public IResult execute(        Iterable<IResource> res,        IJobMonitor mon,        IPropertiesAccessor pa,        ProgressMonitor progressMonitor){
          String[] arr=pa.global().properties(new ITarget.Name("make"),(new String[0]).getClass());
          Assert.assertEquals("BARFOO",arr[0]);
          arr[0]="FUBAR";
          return new IResult.SUCCESS(res);
        }
      }
;
      will(returnValue(mj));
    }
  }
);
  Mockups.allowing(context,make);
  Mockups.allowing(context,config);
  TargetRange tr=new TargetRange();
  tr.addTarget(make);
  tr.addTarget(config);
  Script sc=new Script(tr,new ITarget.Name("make"));
  sc.validate();
  Assert.assertTrue(sc.isValid());
  IResult res=sc.execute(null,null,new EmptyProgressMonitor());
  Assert.assertNotNull(res);
  Assert.assertTrue(res.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
  Assert.assertNotNull(res.output());
  Assert.assertEquals("FUBAR",vars[0]);
}
