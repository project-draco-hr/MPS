{
  final ITarget make=Mockups.target(context,"make",new Class[]{IResource.class});
  final ITarget nop=Mockups.target(context,"nop");
  final ITarget nop2=Mockups.target(context,"nop2");
  final ITarget dup=Mockups.target(context,"dup");
  final ITarget res=Mockups.target(context,"res");
  final IResource resA=Mockups.resource(context,"resA");
  final IResource resB=Mockups.resource(context,"resB");
  final IResult result=Mockups.result(context,"result",true);
  context.checking(new Expectations(){
{
      atLeast(1).of(res).before();
      will(Expectations.returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      exactly(1).of(res).createJob();
      will(Expectations.returnValue(Mockups.job(context,"resjob",new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return result;
        }
      }
)));
      atLeast(1).of(res).producesOutput();
      will(Expectations.returnValue(true));
      atLeast(1).of(result).output();
      will(Expectations.returnValue(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)));
      atLeast(1).of(nop).before();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("make"))));
      atLeast(1).of(nop).after();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("res"))));
      atLeast(1).of(nop2).before();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("make"))));
      atLeast(1).of(nop2).after();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("res"))));
      atLeast(1).of(dup).before();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("make"))));
      atLeast(1).of(dup).after();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("res"))));
      exactly(1).of(dup).createJob();
      will(Expectations.returnValue(Mockups.job(context,"resjob2",new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return result;
        }
      }
)));
      atLeast(1).of(dup).producesOutput();
      will(Expectations.returnValue(true));
      exactly(1).of(make).createJob();
      IJob makejob=new IJob(){
        public IResult execute(        Iterable<IResource> input,        IJobMonitor mon,        IPropertiesAccessor pa,        ProgressMonitor progressMonitor){
          Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)).disjunction(Sequence.fromIterable(input)).isEmpty());
          return result;
        }
      }
;
      will(Expectations.returnValue(makejob));
    }
  }
);
  Mockups.allowing(context,res);
  Mockups.allowing(context,nop);
  Mockups.allowing(context,nop2);
  Mockups.allowing(context,dup);
  Mockups.allowing(context,make);
  Mockups.allowing(context,result);
  TargetRange tr=new TargetRange();
  tr.addTarget(make);
  tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(),res,nop,nop2,dup));
  Script sc=new Script(tr,new ITarget.Name("make"));
  sc.validate();
  Assert.assertTrue(sc.isValid());
  IResult r=sc.execute(null,null,new EmptyProgressMonitor());
  Assert.assertNotNull(r);
  Assert.assertTrue(r.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(r.output()).isEmpty());
}
