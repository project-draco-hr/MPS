{
  final Wrappers._T<SModel> target=new Wrappers._T<SModel>();
  event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      SNode targetRef=SLinkOperations.getTarget(event.getData(MPSCommonDataKeys.NODE),MetaAdapterFactory.getContainmentLink(0x9f846aef4e4a4a84L,0x828e7e83fe2697f2L,0x2dc6844997876885L,0x6a7c966ca6903a21L,"target"));
      String targetName=SPropertyOperations.getString(targetRef,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x7c3f2da20e92b62L,0x7c3f2da20e92b66L,"name"));
      if (isNotEmptyString(SPropertyOperations.getString(targetRef,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x7c3f2da20e92b62L,0x7c3f2da20e93b6fL,"stereotype")))) {
        targetName+="@" + SPropertyOperations.getString(targetRef,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x7c3f2da20e92b62L,0x7c3f2da20e93b6fL,"stereotype"));
      }
      target.value=SModelRepository.getInstance().getModelDescriptor(targetName);
    }
  }
);
  final List<SNode> manifests=new ArrayList<SNode>();
  event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode mref : SLinkOperations.getChildren(event.getData(MPSCommonDataKeys.NODE),MetaAdapterFactory.getContainmentLink(0x9f846aef4e4a4a84L,0x828e7e83fe2697f2L,0x2dc6844997876885L,0x2dc684499788dbc4L,"manifest"))) {
        SNode manifest=SLinkOperations.getTarget(mref,MetaAdapterFactory.getReferenceLink(0x9f846aef4e4a4a84L,0x828e7e83fe2697f2L,0x2dc684499788c1c4L,0x2dc684499788c1c5L,"manifest"));
        ListSequence.fromList(manifests).addElement(manifest);
      }
    }
  }
);
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(new Runnable(){
        public void run(){
          TestModuleBuildProjectTemplate template=new TestModuleBuildProjectTemplate(event.getData(MPSCommonDataKeys.MPS_PROJECT),target.value);
          SNode bproj=template.createBuildProject(event.getData(MPSCommonDataKeys.NODE),manifests);
          SPropertyOperations.set(bproj,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x115eca8579fL,"virtualPackage"),"generated");
          PathConverter pathConverter=new PathConverter(bproj);
          List<SNode> modules=ListSequence.fromList(SNodeOperations.getNodeDescendants(bproj,MetaAdapterFactory.getConcept(0xcf935df46994e9cL,0xa132fa109541cba3L,0x4780308f5d333ebL,"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"),false,new SAbstractConcept[]{})).toListSequence();
          for (          SNode mod : modules) {
            try {
              VisibleModules visible=new VisibleModules(bproj);
              visible.collect();
              ModuleLoader.createModuleChecker(mod,visible,pathConverter).check(ModuleChecker.CheckType.LOAD_IMPORTANT_PART);
            }
 catch (            ModuleLoaderException ex) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error(ex.getMessage(),ex);
              }
              break;
            }
          }
        }
      }
);
    }
  }
);
  return true;
}
