{
  SNode classNode=SNodeOperations.getAncestor(this.myMoving,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  for (  SNode call : ListSequence.fromList(SNodeOperations.getDescendants(this.myMoving,"jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    }
  }
).toListSequence()) {
    if (SLinkOperations.getTarget(call,"baseMethodDeclaration",false) != this.myMoving) {
      SNode newCall=new MoveStaticMethodRefactoring.QuotationClass_f5lqsg_a0a0a0a1a1().createNode(classNode,SLinkOperations.getTarget(call,"baseMethodDeclaration",false));
      ListSequence.fromList(SLinkOperations.getTargets(newCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)));
      ListSequence.fromList(SLinkOperations.getTargets(newCall,"typeArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(call,"typeArgument",true)));
      SNodeOperations.replaceWithAnother(call,newCall);
    }
  }
}
