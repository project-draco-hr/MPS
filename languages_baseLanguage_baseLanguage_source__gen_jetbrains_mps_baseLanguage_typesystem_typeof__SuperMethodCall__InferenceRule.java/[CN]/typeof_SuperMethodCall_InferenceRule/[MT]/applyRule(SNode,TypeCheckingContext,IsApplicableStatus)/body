{
  final SNode mdecl=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
  if (mdecl == null) {
    return;
  }
  SNode contextClassifier=Classifier_Behavior.getContextClassifier_6172562527426750080(methodCall);
  if (contextClassifier == null) {
    return;
  }
  SNode thisType=Classifier_Behavior.call_getThisType_3305065273710880775(contextClassifier);
  final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  if (!(IMethodCall_Behavior.call_isInTypeInferenceContext_4837286298388660615(methodCall))) {
    List<SNode> inferrableTypeVars=ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(mdecl,"returnType",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.getParent(it) == mdecl;
      }
    }
).toListSequence();
    List<SNode> boundTypeVars=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"parameter",true)).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode p){
        return SNodeOperations.getDescendants(p,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{});
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.getParent(it) == mdecl;
      }
    }
).toListSequence();
    for (    SNode tvd : ListSequence.fromList(inferrableTypeVars).subtract(ListSequence.fromList(boundTypeVars))) {
      MapSequence.fromMap(subs).put(tvd,new typeof_SuperMethodCall_InferenceRule.QuotationClass_okooqp_a1a0b0c0k0a().createNode(typeCheckingContext));
    }
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).isNotEmpty()) {
    for (    SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true))) {
      if (!(MapSequence.fromMap(subs).containsKey(tvd))) {
        final SNode T_typevar_4837286298389139314=typeCheckingContext.createNewRuntimeTypesVariable();
        MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_4837286298389139314));
      }
    }
  }
 else {
{
      Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).iterator();
      Iterator<SNode> targ_it=ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).iterator();
      SNode tvd_var;
      SNode targ_var;
      while (tvd_it.hasNext() && targ_it.hasNext()) {
        tvd_var=tvd_it.next();
        targ_var=targ_it.next();
        MapSequence.fromMap(subs).put(tvd_var,targ_var);
        if (SNodeOperations.isInstanceOf(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
        }
      }
    }
  }
  if (SNodeOperations.isInstanceOf(thisType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
    IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(thisType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
  }
  List<SNode> argl=SLinkOperations.getTargets(methodCall,"actualArgument",true);
  List<SNode> typel=ITypeApplicable_Behavior.call_getTypeApplicationParameters_8277080359323839095(mdecl,ListSequence.fromList(argl).count());
  for (  SNode type : ListSequence.fromList(typel)) {
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
      IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
    }
  }
  SNode retType=SLinkOperations.getTarget(mdecl,"returnType",true);
  if (SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
    IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
    retType=IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
  }
{
    SNode _nodeToCheck_1029348928467=methodCall;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139430",0,null);
    typeCheckingContext.createLessThanInequality((SNode)retType,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139432",true),false,true,_info_12389875345);
  }
{
    Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
    Iterator<SNode> arg_it=ListSequence.fromList(argl).iterator();
    SNode type_var;
    SNode arg_var;
    while (type_it.hasNext() && arg_it.hasNext()) {
      type_var=type_it.next();
      arg_var=arg_it.next();
      if (SNodeOperations.isInstanceOf(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
{
          SNode _nodeToCheck_1029348928467=arg_var;
          EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139447",0,null);
          typeCheckingContext.createGreaterThanInequality((SNode)IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs),(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139449",true),false,true,_info_12389875345);
        }
      }
 else {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
{
            SNode _nodeToCheck_1029348928467=arg_var;
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139463",0,null);
            typeCheckingContext.createGreaterThanInequality((SNode)type_var,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4837286298389139465",true),true,true,_info_12389875345);
          }
        }
      }
    }
  }
}
