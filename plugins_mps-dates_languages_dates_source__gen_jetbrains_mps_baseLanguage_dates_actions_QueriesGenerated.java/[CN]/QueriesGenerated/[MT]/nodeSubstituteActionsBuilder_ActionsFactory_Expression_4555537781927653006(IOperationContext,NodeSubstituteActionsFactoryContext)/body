{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          DateTimeZone.getAvailableIDs();
          List<String> result=ListSequence.fromList(new ArrayList<String>());
          for (          Object id : DateTimeZone.getAvailableIDs()) {
            ListSequence.fromList(result).addElement(String.valueOf(id));
          }
          return result;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode tz=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression",null);
              SPropertyOperations.set(tz,"timezone_id",(item));
              return tz;
            }
            public String getMatchingText(            String pattern){
              return (item);
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode tz=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression",null);
          SPropertyOperations.set(tz,"offsetmillis","" + (0));
          try {
            DateTime dt=DateTimeFormat.forPattern("Z").withOffsetParsed().parseDateTime(pattern);
            if (dt.withZoneRetainFields(DateTimeZone.UTC).getMillis() == 0L) {
              SPropertyOperations.set(tz,"offsetmillis","" + (dt.getZone().getStandardOffset(0L)));
            }
          }
 catch (          RuntimeException ignored) {
          }
          return tz;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          if (strictly) {
            return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a2a0.matcher(pattern).matches();
          }
 else {
            return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0c0a.matcher(pattern).matches();
          }
        }
        public String getDescriptionText(        String pattern){
          return "offset time zone";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
