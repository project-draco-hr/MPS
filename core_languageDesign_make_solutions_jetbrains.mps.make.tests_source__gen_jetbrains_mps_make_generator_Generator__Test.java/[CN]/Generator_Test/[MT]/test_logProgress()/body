{
  final LoggingProgressStrategy.Log logger=context.mock(LoggingProgressStrategy.Log.class);
  context.checking(new Expectations(){
{
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- started")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- done 50%")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK/WORKWORK -- started")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- done 62%")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK/WORKWORK -- done 50%")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- done 74%")));
      exactly(2).of(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK/WORKWORK -- done 100%")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK/WORKWORK -- finished")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- done 100%")));
      oneOf(logger).info(with(equal("\u221e/Script/" + new ITarget.Name("work") + "/WORK -- finished")));
      allowing(logger).info(with(new BaseMatcher<String>(){
        public boolean matches(        Object s){
          return !(((String)s).matches(".*WORK -- .*"));
        }
        public void describeTo(        Description p0){
        }
      }
));
    }
  }
);
  final LoggingProgressStrategy strat=new LoggingProgressStrategy(logger);
  ScriptBuilder scb=new ScriptBuilder();
  IJobMonitor.Stub jmon=new IJobMonitor.Stub(null){
    @Override public IProgress currentProgress(){
      return strat.currentProgress();
    }
  }
;
  final IMonitors mons=new IMonitors.Stub(new IConfigMonitor.Stub(),jmon);
  IScript scr=scb.withFacet(new IFacet.Name("Maker")).withFacet(new IFacet.Name("Worker")).withTarget(new ITarget.Name("Make")).toScript();
  scr=new IScript.StubBoss(scr){
    public IMonitors monitors(){
      return mons;
    }
    public void init(    IParametersPool ppool){
    }
  }
;
  Assert.assertTrue(scr.isValid());
  ITarget dt=scr.defaultTarget();
  Assert.assertNotNull(dt);
  Assert.assertEquals(new ITarget.Name("Make"),dt.getName());
  IResult res=scr.execute();
  Assert.assertNotNull(res);
  Assert.assertTrue(res.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
}
