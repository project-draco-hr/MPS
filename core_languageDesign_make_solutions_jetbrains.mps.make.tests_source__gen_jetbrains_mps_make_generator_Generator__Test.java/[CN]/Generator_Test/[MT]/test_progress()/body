{
  ScriptBuilder scb=new ScriptBuilder();
  final IProgress pstub=context.mock(IProgress.class);
  context.checking(new Expectations(){
{
      org.jmock.Sequence seq=context.sequence("sequence");
      exactly(1).of(pstub).beginWork(with(equal("WORK")),with(same(100)),with(any(Integer.class)));
      inSequence(seq);
      atMost(1).of(pstub).doneWork(with(equal("WORK")),with(same(50)));
      inSequence(seq);
      exactly(1).of(pstub).beginWork(with(equal("WORKWORK")),with(same(10)),with(any(Integer.class)));
      inSequence(seq);
      atMost(1).of(pstub).doneWork(with(equal("WORKWORK")),with(same(5)));
      inSequence(seq);
      atMost(1).of(pstub).doneWork(with(equal("WORKWORK")),with(same(5)));
      inSequence(seq);
      exactly(1).of(pstub).finishWork(with(equal("WORKWORK")));
      inSequence(seq);
      exactly(1).of(pstub).finishWork(with(equal("WORK")));
      inSequence(seq);
      allowing(pstub).workLeft();
      will(returnValue(Integer.MAX_VALUE));
    }
  }
);
  IScript scr=scb.withFacet(new IFacet.Name("Maker")).withFacet(new IFacet.Name("Worker")).withTarget(new ITarget.Name("Make")).withMonitors(new IMonitors.Stub(new IConfigMonitor.Stub(),new IJobMonitor.Stub(pstub))).toScript();
  Assert.assertTrue(scr.isValid());
  ITarget dt=scr.defaultTarget();
  Assert.assertNotNull(dt);
  Assert.assertEquals(new ITarget.Name("Make"),dt.getName());
  IResult res=scr.execute();
  Assert.assertNotNull(res);
  Assert.assertTrue(res.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
}
