{
  ScriptBuilder scb=new ScriptBuilder();
  final IProgress pstub=context.mock(IProgress.class);
  context.checking(new Expectations(){
{
      exactly(1).of(pstub).beginWork(with(equal("Script")),with(equal(1020)),with(any(Integer.class)));
      exactly(1).of(pstub).beginWork(with(equal(new ITarget.Name("Configure").toString())),with(equal(1000)),with(equal(10)));
      exactly(1).of(pstub).beginWork(with(equal(new ITarget.Name("Generate").toString())),with(equal(1000)),with(equal(1000)));
      exactly(1).of(pstub).beginWork(with(equal(new ITarget.Name("Make").toString())),with(equal(1000)),with(equal(10)));
      exactly(1).of(pstub).beginWork(with(equal("GENERATE")),with(same(100)),with(any(Integer.class)));
      atMost(1).of(pstub).advanceWork(with(equal("GENERATE")),with(same(50)));
      exactly(1).of(pstub).finishWork(with(equal("GENERATE")));
      atMost(3).of(pstub).advanceWork(with(equal("Script")),with(same(1)));
      exactly(1).of(pstub).finishWork(with(equal(new ITarget.Name("Make").toString())));
      exactly(1).of(pstub).finishWork(with(equal(new ITarget.Name("Generate").toString())));
      exactly(1).of(pstub).finishWork(with(equal(new ITarget.Name("Configure").toString())));
      exactly(1).of(pstub).finishWork(with(equal("Script")));
      allowing(pstub).workLeft();
      will(returnValue(Integer.MAX_VALUE));
    }
  }
);
  final IMonitors mons=new IMonitors.Stub(new IConfigMonitor.Stub(),new IJobMonitor.Stub(pstub));
  IScript scr=scb.withFacet(new IFacet.Name("Maker_")).withFacet(new IFacet.Name("Generator_")).withTarget(new ITarget.Name("Make")).toScript();
  Assert.assertTrue(scr.isValid());
  ITarget dt=scr.finalTarget();
  Assert.assertNotNull(dt);
  Assert.assertEquals(new ITarget.Name("Make"),dt.getName());
  IResult res=scr.execute(null,mons,null);
  Assert.assertNotNull(res);
  Assert.assertTrue(res.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(res.output()).isEmpty());
}
