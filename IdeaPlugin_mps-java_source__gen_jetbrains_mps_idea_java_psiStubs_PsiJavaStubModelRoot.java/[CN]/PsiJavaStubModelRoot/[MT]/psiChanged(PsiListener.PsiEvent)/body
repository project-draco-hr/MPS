{
  event=new PsiJavaStubModelRoot.NormalizedEvent(event);
  Set<PsiDirectory> newDirs=SetSequence.fromSet(new HashSet<PsiDirectory>());
  Set<PsiDirectory> deletedDirs=SetSequence.fromSet(new HashSet<PsiDirectory>());
  Map<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange> changes=MapSequence.fromMap(new HashMap<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange>());
  boolean modelSetChanged=false;
  for (  PsiFileSystemItem item : event.getCreated()) {
    if (item instanceof PsiDirectory) {
      continue;
    }
    if (!(item instanceof PsiJavaFile)) {
      continue;
    }
    handleFileCreate((PsiFile)item,null,newDirs,changes);
  }
  for (  PsiListener.FSMove move : event.getMoved()) {
    if (move.from instanceof PsiDirectory) {
      handleFileDelete((PsiFile)move.moved,(PsiDirectory)move.from,deletedDirs,changes);
    }
    if (move.to instanceof PsiDirectory) {
      handleFileCreate((PsiFile)move.moved,(PsiDirectory)move.to,newDirs,changes);
    }
  }
  for (  PsiListener.FSRename rename : event.getRenamed()) {
    PsiDirectory parent=(PsiDirectory)rename.item.getParent();
    PsiJavaStubDataSource dataSource=MapSequence.fromMap(myDataSources).get(parent);
    if (dataSource == null) {
      continue;
    }
    PsiJavaStubModelRoot.PsiChange change=MapSequence.fromMap(changes).get(dataSource);
    if (change == null) {
      change=new PsiJavaStubModelRoot.PsiChange();
      MapSequence.fromMap(changes).put(dataSource,change);
    }
    SetSequence.fromSet(change.renamed).addElement(rename);
  }
  for (  PsiFileSystemItem item : event.getRemoved()) {
    if (item instanceof PsiDirectory) {
      if (MapSequence.fromMap(myDataSources).containsKey((PsiDirectory)item)) {
        SetSequence.fromSet(deletedDirs).addElement((PsiDirectory)item);
      }
      continue;
    }
    if (!(item instanceof PsiJavaFile)) {
      continue;
    }
    handleFileDelete((PsiFile)item,null,deletedDirs,changes);
  }
  for (  PsiFile file : event.getChanged().keySet()) {
    if (!(file instanceof PsiJavaFile)) {
      continue;
    }
    PsiDirectory parent=file.getParent();
    PsiJavaStubDataSource dataSource=MapSequence.fromMap(myDataSources).get(parent);
    if (dataSource == null) {
      continue;
    }
    Set<PsiElement> changeSet=SetSequence.fromSet(new HashSet<PsiElement>());
    for (    PsiElement elem : event.getChanged().get(file)) {
      if (!(filter(elem))) {
        continue;
      }
      SetSequence.fromSet(changeSet).addElement(elem);
    }
    PsiJavaStubModelRoot.PsiChange change=MapSequence.fromMap(changes).get(dataSource);
    if (change == null) {
      change=new PsiJavaStubModelRoot.PsiChange();
      MapSequence.fromMap(changes).put(dataSource,change);
    }
    MapSequence.fromMap(change.changed).put(file,changeSet);
  }
  for (  PsiDirectory dir : deletedDirs) {
    PsiJavaStubDataSource ds=MapSequence.fromMap(myDataSources).get(dir);
    if (ds == null) {
      continue;
    }
    MapSequence.fromMap(myDataSources).removeKey(dir);
    SModel model=MapSequence.fromMap(myModels).get(ds);
    MapSequence.fromMap(myModels).removeKey(ds);
    unregister(model);
  }
  for (  PsiDirectory dir : newDirs) {
    PsiDirectory ourSourceRoot=findOurSourceRoot(dir);
    PsiJavaStubModelDescriptor model=makeModelDescriptor(makeModelReference(ourSourceRoot,dir),dir);
    PsiJavaStubDataSource ds=model.getSource();
    MapSequence.fromMap(myDataSources).put(dir,ds);
    MapSequence.fromMap(myModels).put(ds,model);
    register(model);
  }
  for (  IMapping<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange> notification : MapSequence.fromMap(changes).mappingsSet()) {
    PsiJavaStubDataSource ds=notification.key();
    PsiJavaStubModelRoot.PsiChange change=notification.value();
    if (!(change.isEmpty())) {
      ds.dispatchEvent(change);
    }
  }
}
