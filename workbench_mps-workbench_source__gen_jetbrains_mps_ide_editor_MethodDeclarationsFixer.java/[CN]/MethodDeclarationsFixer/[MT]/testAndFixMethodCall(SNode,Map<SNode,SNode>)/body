{
  SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCallNode,"baseMethodDeclaration",false);
  String methodName;
  if (baseMethodDeclaration == null) {
    if (SLinkOperations.getTarget(SNodeOperations.as(methodCallNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false) != null) {
      methodName=SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(methodCallNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false),"name");
    }
 else {
      methodName=SLinkOperations.getResolveInfo(SNodeOperations.getReference(methodCallNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.IMethodCall","baseMethodDeclaration")));
    }
  }
 else {
    methodName=SPropertyOperations.getString(baseMethodDeclaration,"name");
  }
  List<SNode> actualArgs=SLinkOperations.getTargets(methodCallNode,"actualArgument",true);
  List<SNode> candidates=getCandidates(methodCallNode,methodName);
  if (candidates.isEmpty()) {
    return;
  }
  SNode newTarget=null;
  boolean good;
  Map<SNode,SNode> typeByTypeVar=getTypeByTypeVar(methodCallNode);
  jetbrains.mps.util.Pair<List<SNode>,Boolean> parmCountPair=MethodResolveUtil.selectByVisibilityReportNoGoodMethodNode(candidates,methodCallNode);
  List<SNode> methodDeclarationsGoodParams=parmCountPair.o1;
  if (methodDeclarationsGoodParams.size() == 1) {
    newTarget=ListSequence.fromList(methodDeclarationsGoodParams).first();
    good=parmCountPair.o2;
  }
 else {
    parmCountPair=MethodResolveUtil.selectByParmCountReportNoGoodMethodNode(methodDeclarationsGoodParams,actualArgs);
    methodDeclarationsGoodParams=parmCountPair.o1;
    if (methodDeclarationsGoodParams.size() == 1) {
      newTarget=ListSequence.fromList(methodDeclarationsGoodParams).first();
      good=parmCountPair.o2;
    }
 else {
      jetbrains.mps.util.Pair<SNode,Boolean> parmTypesPair=MethodResolveUtil.chooseByParameterTypeReportNoGoodMethodNode(baseMethodDeclaration,methodDeclarationsGoodParams,actualArgs,typeByTypeVar);
      newTarget=parmTypesPair.o1;
      good=parmTypesPair.o2;
    }
  }
  if (newTarget != null) {
    if (baseMethodDeclaration == null || (good && newTarget != baseMethodDeclaration)) {
      reResolvedTargets.put(methodCallNode,newTarget);
    }
    myMethodCallsToSetDecls.put(methodCallNode,newTarget);
    myCheckedMethodCalls.add(methodCallNode);
    for (    SNode actualArgument : SLinkOperations.getTargets(methodCallNode,"actualArgument",true)) {
      myParametersToCheckedMethodCalls.put(actualArgument,methodCallNode);
    }
    SNode newTargetNode=newTarget;
    Set<SNode> nodeSet=myMethodDeclsToCheckedMethodCalls.get(newTargetNode);
    if (nodeSet == null) {
      nodeSet=new HashSet<SNode>();
      myMethodDeclsToCheckedMethodCalls.put(newTargetNode,nodeSet);
    }
    nodeSet.add(methodCallNode);
    Pair<String,String> key=new Pair<String,String>(newTarget.getConceptFqName(),methodName);
    Set<SNode> nodesByNameAndConcept=myMethodConceptsAndNamesToCheckedMethodCalls.get(key);
    if (nodesByNameAndConcept == null) {
      nodesByNameAndConcept=new HashSet<SNode>();
      myMethodConceptsAndNamesToCheckedMethodCalls.put(key,nodesByNameAndConcept);
    }
    nodesByNameAndConcept.add(methodCallNode);
  }
}
