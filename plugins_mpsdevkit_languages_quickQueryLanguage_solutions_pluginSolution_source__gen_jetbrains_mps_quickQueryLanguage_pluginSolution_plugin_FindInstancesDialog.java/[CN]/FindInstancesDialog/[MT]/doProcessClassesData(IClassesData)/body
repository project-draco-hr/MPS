{
  if (cd == null) {
    return;
  }
  final Wrappers._T<SModel> model=new Wrappers._T<SModel>();
  final Wrappers._T<String> fqName=new Wrappers._T<String>();
  final Wrappers._T<ClassLoader> loader=new Wrappers._T<ClassLoader>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      model.value=SNodeOperations.getModel(myNode);
      fqName.value=jetbrains.mps.util.SNodeOperations.getModelLongName(model.value.getModelDescriptor()) + "." + QueryExecutor.GENERATED_QUERY_NAME;
      loader.value=cd.getClassLoader(ClassLoaderManager.getInstance().getClassLoader(SModelUtil.getDeclaringLanguage(SNodeOperations.getConceptDeclaration(FindInstancesDialog.this.myNode))));
    }
  }
);
  final Wrappers._T<Query> query=new Wrappers._T<Query>(null);
  try {
    query.value=(Query)Class.forName(fqName.value,true,loader.value).newInstance();
  }
 catch (  ClassNotFoundException ignore) {
    LOG.warning("Exception on query loading",ignore);
  }
catch (  IllegalAccessException ignore) {
    LOG.warning("Exception on query loading",ignore);
  }
catch (  InstantiationException ignore) {
    LOG.warning("Exception on query loading",ignore);
  }
  if (query.value == null) {
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final IScope scope=FindInstancesDialog.this.myScope.getOptions().getScope(FindInstancesDialog.this.myContext,model.value.getModelDescriptor());
      FindInstancesDialog.this.execute(FindInstancesDialog.this.myContext.getProject(),query.value,SNodeOperations.cast(myNode,"jetbrains.mps.quickQueryLanguage.structure.BaseQuery"),scope);
    }
  }
);
}
