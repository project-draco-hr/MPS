{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbsExpression_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new ComplexLiteral_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new DecimalBinaryOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new DivExpressionFraction_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExponentialOperation_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new InIntervalExpression_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntervalContainsExpression_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntervalLiteral_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntervalType_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinearSolveOperation_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new LiteralI_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathFuncExpression_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathSymbol_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathSymbolFromToIndex_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathSymbolIndex_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathSymbolIndexReference_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new MathTypeCast_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixConstructor_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixElementAccessExpression_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixIndexWildcard_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixInitializer_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixInitializerIndex_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixInitializerIndexReference_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixInverseOperation_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixNorm_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixType_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixUnit_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatrixZero_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new PowExpression_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new VectorInitializer_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new VectorType_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
