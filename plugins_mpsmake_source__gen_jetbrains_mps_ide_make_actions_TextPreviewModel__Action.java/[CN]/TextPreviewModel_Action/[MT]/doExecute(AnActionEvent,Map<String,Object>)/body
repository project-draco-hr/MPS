{
  try {
    SModelDescriptor md=TextPreviewModel_Action.this.modelToGenerate(_params);
    IScript scr=new ScriptBuilder().withFacets(new IFacet.Name("Generate"),new IFacet.Name("TextGen"),new IFacet.Name("JavaCompile"),new IFacet.Name("Make")).withTarget(new ITarget.Name("textGenToMemory")).toScript();
    IConfigMonitor cmon=new IConfigMonitor(){
      public <T extends IOption>T relayQuery(      IQuery<T> query){
        return query.defaultOption();
      }
    }
;
    IResult res=new WorkbenchMakeService(((IOperationContext)MapSequence.fromMap(_params).get("context")),cmon,true).make(new ModelsToResources(((IOperationContext)MapSequence.fromMap(_params).get("context")),Sequence.<SModelDescriptor>singleton(md)).resources(false),scr);
    if (res.isSucessful()) {
      FResource fres=(FResource)Sequence.fromIterable(res.output()).first();
      TextPreviewFile tfile=new TextPreviewFile(md.getSModelReference().getSModelFqName().getCompactPresentation(),"Generated text for " + md.getSModelReference().getSModelFqName().getLongName(),fres.contents());
      FileEditorManager.getInstance(((IOperationContext)MapSequence.fromMap(_params).get("context")).getProject()).openTextEditor(new OpenFileDescriptor(((IOperationContext)MapSequence.fromMap(_params).get("context")).getProject(),tfile),true);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "TextPreviewModel",t);
    }
  }
}
