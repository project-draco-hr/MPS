{
  final MPSProject mpsProject=event.getData(MPSCommonDataKeys.MPS_PROJECT);
  final Project ideaProject=event.getData(CommonDataKeys.PROJECT);
  final DefaultMakeMessageHandler msgHandler=new DefaultMakeMessageHandler(mpsProject);
  msgHandler.clear();
  MakeSession session=new MakeSession(mpsProject,msgHandler,true);
  final SNodeReference contextNode=(event.getData(MPSCommonDataKeys.NODE) == null ? null : event.getData(MPSCommonDataKeys.NODE).getReference());
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")).toScript();
    SModel model=TextPreviewModel_Action.this.modelToGenerate(event);
    final SModelReference model2generateRef=model.getReference();
    final Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(Sequence.<SModel>singleton(model)).resources(false),scr);
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      public void run(){
        try {
          final IResult result=future.get();
          final List<TextPreviewFile> previewFiles=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<List<TextPreviewFile>>(){
            public List<TextPreviewFile> compute(){
              ArrayList<TextPreviewFile> rv=new ArrayList<TextPreviewFile>();
              for (              TextGenOutcomeResource tgr : Sequence.fromIterable(result.output()).ofType(TextGenOutcomeResource.class)) {
                String modelName=NameUtil.compactNamespace(tgr.getModel().getModelName());
                final SRepository repo=mpsProject.getRepository();
                SNode cn=(contextNode == null ? null : contextNode.resolve(repo));
                List<SNode> ancestors=(cn == null ? new ArrayList<SNode>() : SNodeOperations.getNodeAncestors(cn,null,true));
                for (                TextUnit tu : tgr.getTextGenResult().getUnits()) {
                  if (cn != null) {
                    SNode originalStart=TracingUtil.getInputNode(tu.getStartNode(),repo);
                    if (originalStart != null && !(ListSequence.fromList(ancestors).contains(originalStart))) {
                      continue;
                    }
                  }
                  rv.add(new TextPreviewFile(tu,modelName));
                }
              }
              return rv;
            }
          }
);
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (previewFiles.isEmpty()) {
                StringBuilder message=new StringBuilder();
                message.append("Model processed:");
                message.append(model2generateRef);
                message.append("\n");
                if (contextNode != null) {
                  message.append("Context node:");
                  message.append(contextNode);
                  message.append("\n");
                }
                if (result.isSucessful()) {
                  message.append("Text generation completed successfully\n");
                }
 else {
                  message.append("Text generation completed with errors\n");
                }
                if (contextNode != null) {
                  message.append("None of generated text units reference context node");
                }
 else {
                  message.append("There were no text units generated.");
                }
                previewFiles.add(new TextPreviewFile("TextGen",message.toString(),model2generateRef.getModelName()));
              }
              FileEditorManager fem=FileEditorManager.getInstance(ideaProject);
              for (              TextPreviewFile f : ListSequence.fromList(previewFiles)) {
                fem.openTextEditor(new OpenFileDescriptor(ideaProject,f),true);
              }
            }
          }
);
          ProjectPane.getInstance(mpsProject).rebuild();
        }
 catch (        Exception e) {
          msgHandler.handle(new Message(MessageKind.ERROR,"TextPreviewModel",e.toString()).setException(e));
        }
      }
    }
);
  }
}
