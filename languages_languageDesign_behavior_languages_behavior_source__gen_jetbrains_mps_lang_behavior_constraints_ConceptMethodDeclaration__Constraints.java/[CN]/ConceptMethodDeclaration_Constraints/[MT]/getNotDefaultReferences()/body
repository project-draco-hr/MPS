{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("overriddenMethod",new BaseReferenceConstraintsDescriptor("overriddenMethod",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      if (newReferentNode != null && referenceNode != null) {
        for (        SNode p : SLinkOperations.getTargets(referenceNode,"parameter",true)) {
          SNodeOperations.deleteNode(p);
        }
        for (        SNode p : SLinkOperations.getTargets(newReferentNode,"parameter",true)) {
          ListSequence.fromList(SLinkOperations.getTargets(referenceNode,"parameter",true)).addElement(SNodeOperations.copyNode(p));
        }
        SPropertyOperations.set(referenceNode,"name",SPropertyOperations.getString(newReferentNode,"name"));
        SLinkOperations.setTarget(referenceNode,"returnType",SNodeOperations.copyNode(SLinkOperations.getTarget(newReferentNode,"returnType",true)),true);
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false),"concept",false);
          List<SNode> methods=AbstractConceptDeclaration_Behavior.call_getVirtualConceptMethods_1213877394290(concept,operationContext.getScope());
          return ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SLinkOperations.getTarget(it,"overriddenMethod",false) == null;
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_sgoqec_a0a1a0a0a4a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
