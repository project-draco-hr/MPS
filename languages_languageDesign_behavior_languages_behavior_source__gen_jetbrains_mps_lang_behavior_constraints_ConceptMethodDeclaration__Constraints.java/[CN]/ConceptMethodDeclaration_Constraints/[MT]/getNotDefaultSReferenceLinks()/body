{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-5808042798135555774l,-8657779246725685839l),1225194472830l,1225194472831l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-5808042798135555774l,-8657779246725685839l),1225194472830l,1225194472831l),this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      if (newReferentNode != null && referenceNode != null) {
        for (        SNode p : SLinkOperations.getChildren(referenceNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))) {
          SNodeOperations.deleteNode(p);
        }
        for (        SNode p : SLinkOperations.getChildren(newReferentNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))) {
          ListSequence.fromList(SLinkOperations.getChildren(referenceNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).addElement(SNodeOperations.copyNode(p));
        }
        SPropertyOperations.set(referenceNode,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"),SPropertyOperations.getString(newReferentNode,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
        SLinkOperations.setTarget(referenceNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123133l,"returnType"),SNodeOperations.copyNode(SLinkOperations.getTarget(newReferentNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123133l,"returnType"))));
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode concept=SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-5808042798135555774l,-8657779246725685839l),1225194240794l,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),true,false),MetaAdapterFactory.getReferenceLink(new UUID(-5808042798135555774l,-8657779246725685839l),1225194240794l,1225194240799l,"concept"));
          List<SNode> methods=AbstractConceptDeclaration_Behavior.call_getVirtualConceptMethods_1213877394290(concept);
          return ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-5808042798135555774l,-8657779246725685839l),1225194472830l,1225194472831l,"overriddenMethod")) == null;
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_sgoqec_a0a1a0a0a4a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
