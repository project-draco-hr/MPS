{
  int numFull=0;
  int numEmpty=0;
  int numPartial=0;
  for (  OldPQTreeNode child : ListSequence.fromList(getChildren())) {
    if (child.getState() == OldPQTreeNode.State.FULL) {
      numFull++;
    }
    if (child.getState() == OldPQTreeNode.State.PARTIAL) {
      numPartial++;
    }
    if (child.getState() == OldPQTreeNode.State.EMPTY) {
      numEmpty++;
    }
  }
  if (numPartial == 0) {
    if (numEmpty == 0) {
      return doQ1Pattern(OldPQTreeNode.State.FULL);
    }
 else {
      OldPQTreeNode.State prevChildState=ListSequence.fromList(getChildren()).getElement(0).getState();
      int numDiff=0;
      for (      OldPQTreeNode child : ListSequence.fromList(getChildren())) {
        if (child.getState() != prevChildState) {
          numDiff++;
          prevChildState=child.getState();
        }
      }
      boolean isGoodPertinent=numDiff == 2 && isPertinentRoot && ListSequence.fromList(getChildren()).getElement(0).getState() == OldPQTreeNode.State.EMPTY;
      if (numDiff > 1 && !(isGoodPertinent)) {
        return null;
      }
      return doQ1Pattern(OldPQTreeNode.State.PARTIAL);
    }
  }
 else   if (numPartial == 1) {
    Iterator<OldPQTreeNode> childItr=ListSequence.fromList(getChildren()).iterator();
    OldPQTreeNode cur=childItr.next();
    OldPQTreeNode.State firstChildState=null;
    while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
      if (firstChildState == null) {
        firstChildState=cur.getState();
      }
      if (cur.getState() != firstChildState) {
        return null;
      }
      cur=childItr.next();
    }
    while (childItr.hasNext()) {
      cur=childItr.next();
      if (cur.getState() == firstChildState) {
        return null;
      }
    }
    return doQ2Pattern();
  }
 else   if (numPartial == 2) {
    if (!(isPertinentRoot)) {
      return null;
    }
    Iterator<OldPQTreeNode> childItr=ListSequence.fromList(getChildren()).iterator();
    OldPQTreeNode cur=childItr.next();
    while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
      if (cur.getState() != OldPQTreeNode.State.EMPTY) {
        return null;
      }
      cur=childItr.next();
    }
    cur=childItr.next();
    while (cur.getState() != OldPQTreeNode.State.PARTIAL) {
      if (cur.getState() != OldPQTreeNode.State.FULL) {
        return null;
      }
      cur=childItr.next();
    }
    while (childItr.hasNext()) {
      cur=childItr.next();
      if (cur.getState() != OldPQTreeNode.State.EMPTY) {
        return null;
      }
    }
    return doQ3Pattern();
  }
  return null;
}
