{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("var",new BaseReferenceConstraintsDescriptor("var",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode current=(_context.getReferenceNode() == null ? _context.getEnclosingNode() : _context.getReferenceNode());
          List<SNode> vars=new ArrayList<SNode>();
          while (SNodeOperations.isInstanceOf(current,"jetbrains.mps.query.structure.MqlExpression") || SNodeOperations.isInstanceOf(current,"jetbrains.mps.query.structure.MqlSelector")) {
            if (SNodeOperations.isInstanceOf(current,"jetbrains.mps.query.structure.MqlCollectionSelector")) {
              ListSequence.<SNode>fromList(vars).addElement(SLinkOperations.getTarget(SNodeOperations.cast(current,"jetbrains.mps.query.structure.MqlCollectionSelector"),"var",true));
            }
            current=SNodeOperations.getParent(current);
          }
          return vars;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_mzpric_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
