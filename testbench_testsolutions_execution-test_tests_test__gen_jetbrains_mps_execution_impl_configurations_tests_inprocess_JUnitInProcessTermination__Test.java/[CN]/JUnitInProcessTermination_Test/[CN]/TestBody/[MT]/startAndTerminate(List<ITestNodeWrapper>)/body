{
  try {
    final TestRunState runState=new TestRunState(testNodes,myProject);
    TestEventsDispatcher eventsDispatcher=new TestEventsDispatcher(runState);
    Executor processExecutor=new JUnitInProcessExecutor(testNodes,eventsDispatcher);
    final TestInProcessRunState lightState=JUnitInProcessExecutor.getRunState();
    if (LOG.isInfoEnabled()) {
      LOG.info("Starting in-process-execution");
    }
    ProcessHandler process=processExecutor.execute();
    final Wrappers._T<CheckTestStateListener> checkListener=new Wrappers._T<CheckTestStateListener>();
    myProject.getModelAccess().runReadAction(new Runnable(){
      public void run(){
        checkListener.value=new CheckTestStateListener(testNodes,ListSequence.fromList(new ArrayList<ITestNodeWrapper>()));
        runState.addListener(checkListener.value);
      }
    }
);
    OutputRedirector.redirect(process,new UnitTestProcessListener(eventsDispatcher));
    final int[] exitCode={-1};
    final CountDownLatch latch=new CountDownLatch(1);
    process.addProcessListener(new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent event){
        exitCode[0]=event.getExitCode();
        latch.countDown();
      }
    }
);
    process.startNotify();
    this.waitForRunToStart(lightState);
    Assert.assertTrue(lightState.isRunning());
    process.destroyProcess();
    latch.await(10,TimeUnit.SECONDS);
    int exitcode=exitCode[0];
    if (exitcode != FakeProcess.TERMINATION_CODE) {
      Assert.fail("Exit code must be equal to " + FakeProcess.TERMINATION_CODE + ", but "+ exitcode);
    }
 else     if (exitcode < 0) {
      Assert.fail("Process is running for too long");
    }
    if (!(checkListener.value.getMessages().equals(""))) {
      Assert.fail(checkListener.value.getMessages());
    }
  }
 catch (  ExecutionException e) {
    Assert.fail(e.getMessage());
  }
catch (  InterruptedException e) {
    Assert.fail(e.getMessage());
  }
}
