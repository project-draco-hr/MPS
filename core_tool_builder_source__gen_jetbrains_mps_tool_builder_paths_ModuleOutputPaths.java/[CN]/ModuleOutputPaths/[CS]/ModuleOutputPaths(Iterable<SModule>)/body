{
  Iterable<AbstractModule> modules=Sequence.fromIterable(_modules).ofType(AbstractModule.class);
  Iterable<IFile> outputRoots=Sequence.fromIterable(modules).select(new ISelector<AbstractModule,IFile>(){
    public IFile select(    AbstractModule it){
      return it.getOutputPath();
    }
  }
).where(new IWhereFilter<IFile>(){
    public boolean accept(    IFile it){
      return it != null;
    }
  }
);
  this.sortedOutDirs=DirUtil.sortDirs(Sequence.fromIterable(outputRoots).select(new ISelector<IFile,String>(){
    public String select(    IFile it){
      return it.getPath();
    }
  }
));
  this.sortedOutCacheDirs=DirUtil.sortDirs(Sequence.fromIterable(outputRoots).select(new ISelector<IFile,String>(){
    public String select(    IFile it){
      return FileGenerationUtil.getCachesPath(it.getPath());
    }
  }
));
  Iterable<IFile> testOutputRoots=Sequence.fromIterable(modules).select(new ISelector<AbstractModule,IFile>(){
    public IFile select(    AbstractModule mod){
      if (mod.getFacet(TestsFacet.class) != null) {
        return mod.getFacet(TestsFacet.class).getTestsOutputPath();
      }
      return null;
    }
  }
).where(new IWhereFilter<IFile>(){
    public boolean accept(    IFile it){
      return it != null;
    }
  }
);
  this.sortedTestOutDirs=DirUtil.sortDirs(Sequence.fromIterable(testOutputRoots).select(new ISelector<IFile,String>(){
    public String select(    IFile it){
      return it.getPath();
    }
  }
));
  this.sortedTestOutCacheDirs=DirUtil.sortDirs(Sequence.fromIterable(testOutputRoots).select(new ISelector<IFile,String>(){
    public String select(    IFile it){
      return FileGenerationUtil.getCachesPath(it.getPath());
    }
  }
));
  Iterable<String> modelRootPaths=Sequence.fromIterable(_modules).translate(new ITranslator2<SModule,ModelRoot>(){
    public Iterable<ModelRoot> translate(    SModule mod){
      return mod.getModelRoots();
    }
  }
).where(new IWhereFilter<ModelRoot>(){
    public boolean accept(    ModelRoot it){
      return it instanceof FolderModelRootBase;
    }
  }
).select(new ISelector<ModelRoot,String>(){
    public String select(    ModelRoot smr){
      return ((FolderModelRootBase)smr).getPath();
    }
  }
);
  modelRootPaths=Sequence.fromIterable(modelRootPaths).concat(Sequence.fromIterable(_modules).translate(new ITranslator2<SModule,ModelRoot>(){
    public Iterable<ModelRoot> translate(    SModule mod){
      return mod.getModelRoots();
    }
  }
).where(new IWhereFilter<ModelRoot>(){
    public boolean accept(    ModelRoot it){
      return it instanceof FileBasedModelRoot;
    }
  }
).select(new ISelector<ModelRoot,String>(){
    public String select(    ModelRoot smr){
      return ((FileBasedModelRoot)smr).getContentRoot();
    }
  }
));
  this.sortedModelDirs=DirUtil.sortDirs(Sequence.fromIterable(modelRootPaths).select(new ISelector<String,IFile>(){
    public IFile select(    String path){
      return FileSystem.getInstance().getFileByPath(path);
    }
  }
).where(new IWhereFilter<IFile>(){
    public boolean accept(    IFile f){
      return f.isDirectory() && !(f instanceof JarEntryFile);
    }
  }
).select(new ISelector<IFile,String>(){
    public String select(    IFile dir){
      return dir.getPath();
    }
  }
));
}
