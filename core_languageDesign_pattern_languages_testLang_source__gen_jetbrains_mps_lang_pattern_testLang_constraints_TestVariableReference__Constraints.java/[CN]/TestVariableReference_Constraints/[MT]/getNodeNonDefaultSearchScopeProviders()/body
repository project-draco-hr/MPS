{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("declaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> variables=SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.pattern.testLang.structure.PatternTest",false,false),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false,new String[]{});
      List<SNode> result=new ArrayList<SNode>();
      Set<String> names=new HashSet();
      for (      SNode var : variables) {
        if (!(names.contains(SPropertyOperations.getString(var,"name")))) {
          ListSequence.fromList(result).addElement(var);
          names.add(SPropertyOperations.getString(var,"name"));
        }
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:02c98d9f-8736-40ad-9bbb-eeffd3fee9b8(jetbrains.mps.lang.pattern.testLang.constraints)","8707387027762047796");
    }
  }
);
  return result;
}
