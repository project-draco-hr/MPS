{
  File java=Java_Command.getJavaCommand(myJrePath_String);
  if ((className == null || className.length() == 0)) {
    throw new ExecutionException("Classname is empty");
  }
  if (check_yvpt_a0c0a2(programParameter) >= Java_Command.getMaxCommandLine()) {
    try {
      File parametersFile=Java_Command.writeToTmpFile(programParameter.getCommandList());
      File classPathFile=Java_Command.writeToTmpFile(ListSequence.fromList(classPath).select(new ISelector<File,String>(){
        public String select(        File it){
          return it.getAbsolutePath();
        }
      }
));
      List<File> classRunnerClassPath=ListSequence.fromList(Java_Command.getClassRunnerClassPath()).select(new ISelector<String,File>(){
        public File select(        String it){
          return new File(it);
        }
      }
).toListSequence();
      return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter_ProcessBuilderCommandPart).append(myDebuggerSettings_String).append(new KeyValueCommandPart("-" + "classpath",new ListCommandPart(classRunnerClassPath,File.pathSeparator))).append("jetbrains.mps.execution.lib.startup.ClassRunner").append(new KeyValueCommandPart("-" + ("c"),className)).append(new KeyValueCommandPart("-" + ("f"),parametersFile)).append(new KeyValueCommandPart("-" + ("p"),classPathFile)).build(myWorkingDirectory_File);
    }
 catch (    FileNotFoundException e) {
      throw new ExecutionException("Could not create temporal file for program parameters.",e);
    }
  }
 else {
    return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter_ProcessBuilderCommandPart).append(myDebuggerSettings_String).append(new KeyValueCommandPart("-" + "classpath",new ListCommandPart(classPath,File.pathSeparator))).append(className).append(programParameter).build(myWorkingDirectory_File);
  }
}
