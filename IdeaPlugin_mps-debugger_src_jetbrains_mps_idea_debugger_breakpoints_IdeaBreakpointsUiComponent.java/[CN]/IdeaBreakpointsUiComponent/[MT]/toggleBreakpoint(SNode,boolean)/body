{
  List<Breakpoint> breakpoints=myDebuggerManager.getBreakpointManager().getBreakpoints();
  for (  Breakpoint breakpoint : breakpoints) {
    if (breakpoint instanceof BreakpointWithHighlighter) {
      final BreakpointWithHighlighter locationBreakpoint=(BreakpointWithHighlighter)breakpoint;
      boolean sameNode=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return new SNodePointer(BreakpointPainter.getNodeForBreakpoint(locationBreakpoint)).equals(new SNodePointer(node));
        }
      }
);
      if (sameNode) {
        if (handleRemove) {
          myDebuggerManager.getBreakpointManager().removeBreakpoint(locationBreakpoint);
        }
        return;
      }
    }
  }
  TraceablePositionInfo position=ModelAccess.instance().runReadAction(new Computable<TraceablePositionInfo>(){
    @Override public TraceablePositionInfo compute(){
      SModelDescriptor model=node.getModel().getModelDescriptor();
      DebugInfo debugInfo=TraceInfoCache.getInstance().get(model);
      if (debugInfo == null) {
        return null;
      }
      return debugInfo.getPositionForNode(node.getSNodeId().toString());
    }
  }
);
  if (position == null)   return;
  int startLine=position.getStartLine();
  PsiFile psiFile=MpsSourcePosition.createPosition(myProject,TraceInfoUtil.getUnitName(node.getContainingRoot()),position.getFileName(),startLine).getFile();
  Document document=PsiDocumentManager.getInstance(myProject).getDocument(psiFile);
  BreakpointWithHighlighter breakpoint=myDebuggerManager.getBreakpointManager().addFieldBreakpoint(document,startLine);
  if (breakpoint == null) {
    breakpoint=myDebuggerManager.getBreakpointManager().addMethodBreakpoint(document,startLine);
  }
  if (breakpoint == null) {
    breakpoint=myDebuggerManager.getBreakpointManager().addLineBreakpoint(document,startLine);
  }
}
