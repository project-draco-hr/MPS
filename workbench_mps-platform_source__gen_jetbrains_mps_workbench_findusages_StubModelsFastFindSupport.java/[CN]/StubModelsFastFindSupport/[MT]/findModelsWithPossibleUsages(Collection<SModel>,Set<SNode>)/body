{
  nodes=SetSequence.fromSetWithValues(new HashSet<SNode>(),SetSequence.fromSet(nodes).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it.getSNodeId() instanceof SNodeId.Foreign;
    }
  }
));
  MultiMap<SModel,SNode> result=findModels(models,nodes,new Mapper<SNode,String>(){
    public String value(    SNode key){
      return key.getSNodeId().toString();
    }
  }
);
  for (  SNode node : SetSequence.fromSet(nodes)) {
    jetbrains.mps.smodel.SNode snode=((jetbrains.mps.smodel.SNode)node);
    if (!(SNodeOperations.isInstanceOf(snode,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration"))) {
      continue;
    }
    result.putValue(SNodeOperations.getModel(snode).getModelDescriptor(),node);
  }
  Map<SModel,Collection<SNode>> res=new HashMap<SModel,Collection<SNode>>();
  for (  Map.Entry<SModel,Collection<SNode>> e : result.entrySet()) {
    res.put(e.getKey(),e.getValue());
  }
  return res;
}
