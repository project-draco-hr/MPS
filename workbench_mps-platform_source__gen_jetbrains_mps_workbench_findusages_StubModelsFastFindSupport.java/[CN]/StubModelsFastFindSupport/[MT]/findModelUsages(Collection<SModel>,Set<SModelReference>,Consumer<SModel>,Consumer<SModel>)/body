{
  modelReferences=SetSequence.fromSetWithValues(new HashSet<SModelReference>(),SetSequence.fromSet(modelReferences).where(new IWhereFilter<SModelReference>(){
    public boolean accept(    SModelReference it){
      return "java_stub".equals(SModelStereotype.getStereotype(it.getModelName()));
    }
  }
));
  MultiMap<SModel,SModelReference> candidates=findCandidates(scope,modelReferences,processedConsumer,new Mapper<SModelReference,String>(){
    @Override public String value(    SModelReference key){
      return key.getModelName();
    }
  }
);
  for (  Map.Entry<SModel,Collection<SModelReference>> e : candidates.entrySet()) {
    if (FindUsagesUtil.hasModelUsages(e.getKey(),e.getValue())) {
      consumer.consume(e.getKey());
    }
  }
}
