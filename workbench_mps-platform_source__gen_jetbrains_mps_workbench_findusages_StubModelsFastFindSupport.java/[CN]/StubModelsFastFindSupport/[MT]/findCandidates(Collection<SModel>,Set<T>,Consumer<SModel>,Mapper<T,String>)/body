{
  MultiMap<SModel,T> result=new SetBasedMultiMap<SModel,T>();
  if (elems.isEmpty()) {
    for (    SModel sm : models) {
      if (sm instanceof JavaClassStubModelDescriptor) {
        processedConsumer.consume(sm);
      }
    }
    return result;
  }
  final ManyToManyMap<SModel,VirtualFile> scopeFiles=new ManyToManyMap<SModel,VirtualFile>();
  Set<FolderSetDataSource> sources=new THashSet<FolderSetDataSource>();
  for (  final SModel sm : models) {
    if (!(sm instanceof JavaClassStubModelDescriptor)) {
      continue;
    }
    FolderSetDataSource source=((JavaClassStubModelDescriptor)sm).getSource();
    if (!(sources.add(source))) {
      continue;
    }
    Collection<IFile> files=source.getAffectedFiles();
    ArrayList<VirtualFile> vFiles=new ArrayList();
    for (    IFile path : files) {
      final VirtualFile vf=VirtualFileUtils.getVirtualFile(path);
      if (vf == null) {
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("File " + path + ", which belows to model source of model "+ sm.getReference().toString()+ ", was not found in VFS. Assuming no usages in this file.");
        }
        continue;
      }
      if (vf.isDirectory()) {
        vFiles.addAll(Arrays.asList(vf.getChildren()));
      }
 else {
        vFiles.add(vf);
      }
    }
    for (    VirtualFile vf : vFiles) {
      if (vf.isDirectory()) {
        continue;
      }
      scopeFiles.addLink(sm,vf);
    }
    if (!(vFiles.isEmpty())) {
      processedConsumer.consume(sm);
    }
  }
  for (  T elem : elems) {
    String nodeId=(id == null ? elem.toString() : id.value(elem));
    ConcreteFilesGlobalSearchScope allFiles=new ConcreteFilesGlobalSearchScope(scopeFiles.getSecond());
    Collection<VirtualFile> matchingFiles;
    try {
      matchingFiles=FileBasedIndex.getInstance().getContainingFiles(IdIndex.NAME,new IdIndexEntry(nodeId,true),allFiles);
    }
 catch (    ProcessCanceledException ce) {
      matchingFiles=Collections.emptyList();
    }
    for (    VirtualFile file : matchingFiles) {
      for (      SModel m : scopeFiles.getBySecond(file)) {
        result.putValue(m,elem);
      }
    }
  }
  return result;
}
