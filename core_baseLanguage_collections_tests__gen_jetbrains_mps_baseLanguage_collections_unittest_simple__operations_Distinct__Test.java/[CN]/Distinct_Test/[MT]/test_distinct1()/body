{
  Iterable<Integer> source;
  source=ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1,2,2,3,4,4,5);
  source=Sequence.<Integer>fromIterable(source).distinct();
  Assert.assertEquals(Sequence.<Integer>fromIterable(source).where(new IWhereFilter<Integer>(){
    public boolean accept(    Integer it){
      return it == 2;
    }
  }
).count(),1);
  Assert.assertEquals(Sequence.<Integer>fromIterable(source).where(new IWhereFilter<Integer>(){
    public boolean accept(    Integer it){
      return it == 4;
    }
  }
).count(),1);
  Assert.assertEquals(Sequence.<Integer>fromIterable(source).count(),5);
  source=Sequence.<Integer>fromIterable(source).sort(new ISelector<Integer,Comparable<?>>(){
    public Comparable<?> select(    Integer it){
      return it;
    }
  }
,true);
  Integer c=1;
  for (  Integer i : Sequence.<Integer>fromIterable(source)) {
    Assert.assertEquals(i,c);
    c++;
  }
}
