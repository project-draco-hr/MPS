{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode methodDeclaration=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",true,false);
          if (SNodeOperations.isInstanceOf(methodDeclaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
            SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false),"concept",false);
            return AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode());
          }
 else {
            return null;
          }
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_2hfwmh_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
