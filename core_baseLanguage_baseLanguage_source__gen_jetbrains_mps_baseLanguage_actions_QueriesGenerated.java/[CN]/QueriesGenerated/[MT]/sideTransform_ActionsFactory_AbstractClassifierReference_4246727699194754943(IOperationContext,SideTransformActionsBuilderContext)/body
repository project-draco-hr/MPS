{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode classifierType=new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a1a0a1a271().createNode(SLinkOperations.getTarget(_context.getSourceNode(),"classifier",false));
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(_context.getSourceNode()),new QueriesGenerated.QuotationClass_x583g4_a1a1a0a0a0a1a0a1a271().createNode(classifierType));
        return ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).first();
      }
      public String getMatchingText(      String pattern){
        return "<";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add type variable";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode statement=SNodeOperations.replaceWithAnother(SNodeOperations.getParent(_context.getSourceNode()),new QueriesGenerated.QuotationClass_x583g4_a1a0a0a0a0a0b0a0c0qg().createNode(SLinkOperations.getTarget(_context.getSourceNode(),"classifier",false)));
        return SLinkOperations.getTarget(statement,"localVariableDeclaration",true);
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "cpnvert to array";
      }
    }
);
  }
  return result;
}
