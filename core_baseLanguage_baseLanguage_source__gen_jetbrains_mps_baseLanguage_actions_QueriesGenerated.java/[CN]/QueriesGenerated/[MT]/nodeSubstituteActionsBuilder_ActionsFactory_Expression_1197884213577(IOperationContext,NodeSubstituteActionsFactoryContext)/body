{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode conceptToAdd=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression");
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    result.addAll(defaultActions);
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ListSequence.fromList(SNodeOperations.getAncestors(SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false,false),"jetbrains.mps.baseLanguage.structure.Classifier",false)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.AnonymousClass"));
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode thisEx=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
              SLinkOperations.setTarget(thisEx,"classConcept",(item),false);
              return thisEx;
            }
            public String getMatchingText(            String pattern){
              return (item) + ".this";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "qualified 'this'";
            }
          }
);
        }
      }
    }
  }
  return result;
}
