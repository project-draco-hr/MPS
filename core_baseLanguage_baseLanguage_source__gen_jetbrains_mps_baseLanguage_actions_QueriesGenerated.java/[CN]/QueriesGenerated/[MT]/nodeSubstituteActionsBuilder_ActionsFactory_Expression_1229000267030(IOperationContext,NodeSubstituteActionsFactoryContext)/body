{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          if (!(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression"))) {
            return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.CastExpression",null);
          }
          SNode originalExpression=ExpectedType_FactoryUtil.getOriginalExpression(_context.getParentNode(),SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression"));
          SNode castType=null;
          if ((originalExpression != null)) {
            castType=ExpectedType_FactoryUtil.createExpectedType(SNodeOperations.cast(originalExpression,"jetbrains.mps.baseLanguage.structure.Expression"));
          }
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
            return new QueriesGenerated.QuotationClass_x583g4_a0a0e0a0a0a0a0c0a0b0be().createNode(SNodeOperations.copyNode(castType),SNodeOperations.copyNode(_context.getCurrentTargetNode()));
          }
 else {
            return new QueriesGenerated.QuotationClass_x583g4_a0a0a4a0a0a0a0a2a0a1a501().createNode(SNodeOperations.copyNode(castType),SNodeOperations.copyNode(_context.getCurrentTargetNode()));
          }
        }
        public String getDescriptionText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"shortDescription");
        }
        public String getMatchingText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"alias");
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
