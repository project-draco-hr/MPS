{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression");
    Iterable<SNode> concepts;
    concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
{
            SNode source=PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(),result);
            if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(source),"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression") && SNodeOperations.getContainingLinkDeclaration(source) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression","lValue")) {
              source=SNodeOperations.cast(SNodeOperations.getParent(source),"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression");
            }
            SNodeOperations.replaceWithAnother(source,result);
            SLinkOperations.setTarget(result,"rValue",source,true);
            PrecedenceUtil.parenthesiseIfNecessary(result);
            return result;
          }
        }
      }
);
    }
  }
  return result;
}
