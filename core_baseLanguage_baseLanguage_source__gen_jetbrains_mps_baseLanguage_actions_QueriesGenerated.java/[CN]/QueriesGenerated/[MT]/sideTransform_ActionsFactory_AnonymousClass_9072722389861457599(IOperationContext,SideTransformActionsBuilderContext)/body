{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.GenericNewExpression",false,false);
      }
    }
;
    SNode node=(SNode)calc.calculate();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node,CellSide.RIGHT,_context.getTransformationTag(),operationContext)));
  }
  return result;
}
