{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode tryStatement=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.TryStatement",null);
        SNode body=SLinkOperations.getTarget(_context.getSourceNode(),"body",true);
        SLinkOperations.setTarget(tryStatement,"body",body,true);
        for (        SNode catchClause : SLinkOperations.getTargets(_context.getSourceNode(),"catchClause",true)) {
          SNodeOperations.deleteNode(catchClause);
          SLinkOperations.addChild(tryStatement,"catchClause",catchClause);
        }
        SLinkOperations.setNewChild(tryStatement,"finallyBody","jetbrains.mps.baseLanguage.structure.StatementList");
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),tryStatement);
        return tryStatement;
      }
      public String getMatchingText(      String pattern){
        return "finally";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
