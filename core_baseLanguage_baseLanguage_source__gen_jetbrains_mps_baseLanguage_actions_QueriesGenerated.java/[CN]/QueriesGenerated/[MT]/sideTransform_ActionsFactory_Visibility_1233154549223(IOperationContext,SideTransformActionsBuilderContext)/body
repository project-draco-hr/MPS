{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode method=SNodeOperations.getParent(_context.getSourceNode());
        SLinkOperations.addNewChild(method,"typeVariableDeclaration","jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration");
        return method;
      }
      public String getMatchingText(      String pattern){
        return "<";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
