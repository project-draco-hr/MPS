{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          List<SNode> staticFieldDeclarations=((List<SNode>)Classifier_Behavior.getAccessibleMembers_669019847198843527(_context.getParentNode(),IClassifiersSearchScope.STATIC_FIELD));
          return ListSequence.fromList(staticFieldDeclarations).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.getAncestor(it,"jetbrains.mps.baseLanguage.structure.Classifier",false,false) != SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
              SLinkOperations.setTarget(result,"variableDeclaration",(item),false);
              SLinkOperations.setTarget(result,"classifier",SNodeOperations.cast(SNodeOperations.getParent((item)),"jetbrains.mps.baseLanguage.structure.Classifier"),false);
              return result;
            }
          }
);
        }
      }
    }
  }
  return result;
}
