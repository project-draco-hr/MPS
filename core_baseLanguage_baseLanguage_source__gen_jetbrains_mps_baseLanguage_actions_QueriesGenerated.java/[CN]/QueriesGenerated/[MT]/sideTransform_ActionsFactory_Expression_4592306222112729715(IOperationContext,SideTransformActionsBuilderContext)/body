{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode targetExpression=PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode());
        SNode assertion=SNodeOperations.cast(SNodeOperations.getParent(targetExpression),"jetbrains.mps.baseLanguage.structure.AssertStatement");
        SNodeFactoryOperations.setNewChild(assertion,"message","jetbrains.mps.baseLanguage.structure.Expression");
        return SLinkOperations.getTarget(assertion,"message",true);
      }
      public String getMatchingText(      String pattern){
        return ":";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
