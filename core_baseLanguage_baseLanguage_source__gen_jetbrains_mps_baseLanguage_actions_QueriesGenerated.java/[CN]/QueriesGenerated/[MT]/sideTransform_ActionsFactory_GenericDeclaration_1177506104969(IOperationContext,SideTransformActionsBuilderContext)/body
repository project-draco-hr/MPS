{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromArray();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericDeclaration");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SLinkOperations.addNewChild(_context.getSourceNode(),"typeVariableDeclaration","jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration");
        return ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"typeVariableDeclaration",true)).first();
      }
      public String getMatchingText(      String pattern){
        return "<";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add type variable";
      }
    }
);
  }
  return result;
}
