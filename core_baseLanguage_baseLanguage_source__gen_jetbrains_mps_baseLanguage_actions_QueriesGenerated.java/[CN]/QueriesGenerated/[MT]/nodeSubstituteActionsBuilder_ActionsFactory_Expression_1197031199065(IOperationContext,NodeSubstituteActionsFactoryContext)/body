{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ((List<SNode>)Classifier_Behavior.getAssesableMembers_669019847198843527(_context.getParentNode(),IClassifiersSearchScope.INSTANCE_FIELD));
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode operationExpression=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SLinkOperations.setTarget(SLinkOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"),"fieldDeclaration",(item),false);
              SNode thisExpression=SLinkOperations.setNewChild(operationExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
              if (!(ListSequence.fromList(Classifier_Behavior.call_getVisibleMembers_1213877306257(ClassConcept_Behavior.getContextClass_8008512149545173402(_context.getParentNode()),_context.getParentNode(),IClassifiersSearchScope.INSTANCE_FIELD)).contains((item)))) {
                SNode concept=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
                while (concept != null && !(ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(concept)).contains((item)))) {
                  concept=SNodeOperations.getAncestor(concept,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
                }
                SLinkOperations.setTarget(thisExpression,"classConcept",concept,false);
              }
              return operationExpression;
            }
            public String getDescriptionText(            String pattern){
              return "this." + SPropertyOperations.getString((item),"name");
            }
          }
);
        }
      }
    }
  }
  return result;
}
