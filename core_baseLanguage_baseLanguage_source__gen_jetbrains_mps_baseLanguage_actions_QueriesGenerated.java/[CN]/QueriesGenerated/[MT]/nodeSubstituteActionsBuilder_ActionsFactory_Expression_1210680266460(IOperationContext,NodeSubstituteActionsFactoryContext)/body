{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return new QuotationClass_0().createNode();
        }
        public String getDescriptionText(        String pattern){
          return "Prints a string to System.out";
        }
        public String getMatchingText(        String pattern){
          return "sout";
        }
        public Icon getIconFor(        String pattern){
          return IconManager.getIconFor((ConceptDeclaration)((AbstractConceptDeclaration)SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))));
        }
      }
);
    }
  }
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return new QuotationClass_1().createNode();
        }
        public String getDescriptionText(        String pattern){
          return "Prints a string to System.err";
        }
        public String getMatchingText(        String pattern){
          return "serr";
        }
        public Icon getIconFor(        String pattern){
          return IconManager.getIconFor((ConceptDeclaration)((AbstractConceptDeclaration)SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))));
        }
      }
);
    }
  }
  return result;
}
