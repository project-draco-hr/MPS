{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression",operationContext.getScope());
    result.add(new AbstractSideTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode assignment=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.AssignmentExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),assignment);
        SLinkOperations.setTarget(assignment,"lValue",_context.getSourceNode(),true);
        return assignment;
      }
      public String getMatchingText(      String pattern){
        return "=";
      }
      public String getDescriptionText(      String pattern){
        return "assignment";
      }
    }
);
  }
  return result;
}
