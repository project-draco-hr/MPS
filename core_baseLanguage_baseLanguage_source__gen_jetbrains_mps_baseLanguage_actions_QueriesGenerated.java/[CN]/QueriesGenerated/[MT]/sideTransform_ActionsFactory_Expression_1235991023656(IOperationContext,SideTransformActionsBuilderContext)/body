{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        return ParenthesisUtil.createParenthesis(((Expression)SNodeOperations.getAdapter(_context.getSourceNode())),true).getNode();
      }
      public String getMatchingText(      String pattern){
        return "(";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "Surrond by parenthesis";
      }
    }
);
  }
  return result;
}
