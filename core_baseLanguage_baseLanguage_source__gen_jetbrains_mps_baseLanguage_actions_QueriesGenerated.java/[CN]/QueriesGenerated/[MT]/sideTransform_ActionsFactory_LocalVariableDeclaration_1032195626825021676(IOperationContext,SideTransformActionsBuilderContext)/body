{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        return SLinkOperations.addNewChild(SNodeOperations.as(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.ForStatement"),"additionalVar","jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable");
      }
      public String getMatchingText(      String pattern){
        return ",";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add loop var";
      }
    }
);
  }
  return result;
}
