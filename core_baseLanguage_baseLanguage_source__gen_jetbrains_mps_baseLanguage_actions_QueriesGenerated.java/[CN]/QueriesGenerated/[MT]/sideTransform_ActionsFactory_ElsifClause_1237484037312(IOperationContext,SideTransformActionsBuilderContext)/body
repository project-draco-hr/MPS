{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SLinkOperations.setTarget(SNodeOperations.getParent(_context.getSourceNode()),"ifFalseStatement",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BlockStatement",null),true);
        return SLinkOperations.getTarget(SNodeOperations.getParent(_context.getSourceNode()),"ifFalseStatement",true);
      }
      public String getMatchingText(      String pattern){
        return "else {";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
