{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<SNode> functions=SNodeOperations.getAncestors(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ConceptFunction",false);
        SNode parentFunction=ListSequence.fromList(functions).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Closure"));
          }
        }
).first();
        if (parentFunction != null) {
          return ConceptFunction_Behavior.call_getParameters_1213877374450(parentFunction);
        }
 else {
          return ListSequence.<SNode>fromArray();
        }
      }
    }
;
    Iterable queryResult=(Iterable)calc.calculate();
    if (queryResult != null) {
      for (      Object item : queryResult) {
        List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
        result.addAll(defaultActions);
      }
    }
  }
  return result;
}
