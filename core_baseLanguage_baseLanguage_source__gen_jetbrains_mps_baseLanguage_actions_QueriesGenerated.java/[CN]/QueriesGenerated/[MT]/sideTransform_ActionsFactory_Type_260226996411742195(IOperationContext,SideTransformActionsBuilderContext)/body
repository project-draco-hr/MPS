{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CommentedStatement");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode statement=SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(_context.getSourceNode())),"jetbrains.mps.baseLanguage.structure.Statement");
        SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.CommentedStatement",null);
        SNodeOperations.replaceWithAnother(statement,result);
        SLinkOperations.setTarget(result,"statement",statement,true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "//";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
