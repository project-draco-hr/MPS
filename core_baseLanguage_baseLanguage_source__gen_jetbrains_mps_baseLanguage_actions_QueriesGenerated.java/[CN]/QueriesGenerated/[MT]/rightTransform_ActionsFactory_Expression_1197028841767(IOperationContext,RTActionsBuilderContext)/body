{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode operationExpression=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.DotExpression");
        SLinkOperations.setTarget(operationExpression,"operand",_context.getSourceNode(),true);
        SLinkOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.AbstractOperation");
        return operationExpression;
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getDescriptionText(      String pattern){
        return "new \".\" operation";
      }
    }
);
  }
  return result;
}
