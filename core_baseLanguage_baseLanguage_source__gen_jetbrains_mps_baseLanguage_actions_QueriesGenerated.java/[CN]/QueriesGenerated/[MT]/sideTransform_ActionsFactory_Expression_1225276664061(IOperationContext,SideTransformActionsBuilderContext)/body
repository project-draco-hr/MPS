{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SubstringExpression");
    Iterable<SNode> concepts=ListOperations.<SNode>createList(concept);
    concepts=SequenceOperations.concat(concepts,SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope()));
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      result.add(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SConceptOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
{
            SNode expression=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.SubstringExpression");
            SLinkOperations.setTarget(expression,"operand",_context.getSourceNode(),true);
            return expression;
          }
        }
      }
);
    }
  }
  return result;
}
