{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.ArrayType",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"componentType",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "[]";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "to array type";
      }
    }
);
  }
  return result;
}
