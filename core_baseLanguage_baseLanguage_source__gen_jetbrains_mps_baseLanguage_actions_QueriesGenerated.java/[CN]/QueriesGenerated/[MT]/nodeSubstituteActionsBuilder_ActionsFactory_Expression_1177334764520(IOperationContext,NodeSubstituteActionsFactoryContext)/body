{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ListSequence.<Boolean>fromArray(Boolean.TRUE,Boolean.FALSE);
        }
      }
;
      Iterable<Boolean> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final Boolean item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode integerConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
              SPropertyOperations.set(integerConst,"value","" + ((item).booleanValue()));
              return integerConst;
            }
            public String getMatchingText(            String pattern){
              return (item).toString();
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode boolConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FloatingPointConstant",null);
          SPropertyOperations.set(boolConst,"value",pattern);
          return boolConst;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return _PrecompiledPatterns.REGEXP0.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode stringLiteral=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.StringLiteral",null);
{
            Pattern _pattern_0=_PrecompiledPatterns.REGEXP1;
            Matcher _matcher_0=_pattern_0.matcher(pattern);
            if (_matcher_0.matches()) {
              SPropertyOperations.set(stringLiteral,"value",_matcher_0.group(1));
            }
          }
          return stringLiteral;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return _PrecompiledPatterns.REGEXP2.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
