{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode intConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
          try {
            SPropertyOperations.set(intConst,"value","" + (Integer.parseInt(pattern)));
          }
 catch (          NumberFormatException e) {
            SPropertyOperations.set(intConst,"value","" + (0));
          }
          return intConst;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          if (strictly) {
            return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a67.matcher(pattern).matches();
          }
 else {
            return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0yc.matcher(pattern).matches();
          }
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LongLiteral",null);
          SPropertyOperations.set(result,"value",pattern);
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return REGEXP_x583g4_a0a0a2a0a0a0a2a0a2a67.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ListSequence.fromListAndArray(new ArrayList<Boolean>(),Boolean.TRUE,Boolean.FALSE);
        }
      }
;
      Iterable<Boolean> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final Boolean item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode integerConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
              SPropertyOperations.set(integerConst,"value","" + ((item).booleanValue()));
              return integerConst;
            }
            public String getMatchingText(            String pattern){
              return (item).toString();
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode doubleConstant=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FloatingPointConstant",null);
          SPropertyOperations.set(doubleConstant,"value",pattern);
          return doubleConstant;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return REGEXP_x583g4_a0a0a2a0a0a0a2a0a4a67.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode floatConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant",null);
          SPropertyOperations.set(floatConst,"value",pattern);
          return floatConst;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return REGEXP_x583g4_a0a0a2a0a0a0a2a0a5a67.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode stringLiteral=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.StringLiteral",null);
{
            Pattern _pattern_0=REGEXP_x583g4_a0a0b0a0a0a0a0c0a0g0yc;
            Matcher _matcher_0=_pattern_0.matcher(pattern);
            if (_matcher_0.matches()) {
              SPropertyOperations.set(stringLiteral,"value",_matcher_0.group(1));
            }
          }
          return stringLiteral;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return REGEXP_x583g4_a0a0a2a0a0a0a2a0a6a67.matcher(pattern).matches();
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
