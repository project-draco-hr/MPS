{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode creator=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator",null);
        final SNode cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClass",null);
        ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"actualArgument",true)).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            SLinkOperations.addChild(cls,"actualArgument",it);
          }
        }
);
        ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"typeParameter",true)).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            SLinkOperations.addChild(cls,"typeParameter",it);
          }
        }
);
        SLinkOperations.setTarget(cls,"classifier",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getSourceNode(),"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
        SLinkOperations.setTarget(creator,"cls",cls,true);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),creator);
        return creator;
      }
      public String getMatchingText(      String pattern){
        return "{";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "anonymous class";
      }
    }
);
  }
  return result;
}
