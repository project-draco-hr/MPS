{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return SNodeOperations.getParent(_context.getSourceNode());
      }
    }
;
    SNode node=(SNode)calc.calculate();
    ListSequence.<INodeSubstituteAction>fromList(result).addSequence(ListSequence.<INodeSubstituteAction>fromList(ModelActions.createRightTransformHintSubstituteActions(node,CellSide.RIGHT,_context.getTransformationTag(),operationContext)));
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DimensionExpression");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DimensionExpression",null);
        SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),result);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
