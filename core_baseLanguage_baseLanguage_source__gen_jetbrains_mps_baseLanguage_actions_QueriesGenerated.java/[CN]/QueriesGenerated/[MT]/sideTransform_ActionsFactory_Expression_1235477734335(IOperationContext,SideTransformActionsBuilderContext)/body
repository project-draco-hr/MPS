{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromArray();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode node=_context.getSourceNode();
        while (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Expression")) {
          SNode type=TypeChecker.getInstance().getTypeOf(node);
          if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.BooleanType") || SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SNodeOperations.getNode("f:java_stub#java.lang(java.lang@java_stub)","~Boolean")) {
            SNode not=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression",null);
            SNodeOperations.replaceWithAnother(node,not);
            SLinkOperations.setTarget(not,"expression",SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Expression"),true);
            return not;
          }
          node=SNodeOperations.getParent(node);
        }
        return null;
      }
      public String getMatchingText(      String pattern){
        return "!";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
