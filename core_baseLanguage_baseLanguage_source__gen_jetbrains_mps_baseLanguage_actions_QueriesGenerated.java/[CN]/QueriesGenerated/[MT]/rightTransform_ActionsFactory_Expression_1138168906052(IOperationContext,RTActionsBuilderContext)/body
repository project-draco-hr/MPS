{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation",operationContext.getScope());
    for (    final AbstractConceptDeclaration abstractConcept : SModelUtil_new.getSubconcepts(concept,_context.getModel(),operationContext.getScope())) {
      if (!(abstractConcept instanceof ConceptDeclaration)) {
        continue;
      }
      if (abstractConcept.hasConceptProperty(BaseConcept.CPR_Abstract,operationContext.getScope())) {
        continue;
      }
      final ConceptDeclaration currentConcept=(ConceptDeclaration)abstractConcept;
      result.add(new AbstractRTransformHintSubstituteAction(currentConcept.getNode(),_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SModelUtil_new.instantiateConceptDeclaration(currentConcept,_context.getModel()).getNode();
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
          SLinkOperations.setTarget(result,"leftExpression",_context.getSourceNode(),true);
          if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(result,null,false,false),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
            ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.getParent(result,null,false,false));
          }
 else {
            ParenthesisUtil.checkOperationWRTPriority(result);
          }
          return result;
        }
      }
);
    }
  }
  return result;
}
