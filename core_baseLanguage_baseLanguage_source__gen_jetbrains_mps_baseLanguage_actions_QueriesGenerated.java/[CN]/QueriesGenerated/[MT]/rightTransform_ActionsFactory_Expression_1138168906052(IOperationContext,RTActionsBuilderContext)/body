{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation");
    for (    final SNode subconcept : SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope())) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      result.add(new AbstractRTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SConceptOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
          SLinkOperations.setTarget(result,"leftExpression",_context.getSourceNode(),true);
          if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(result,null,false,false),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
            ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.getParent(result,null,false,false));
          }
 else {
            ParenthesisUtil.checkOperationWRTPriority(result);
          }
          return result;
        }
      }
);
    }
  }
  return result;
}
