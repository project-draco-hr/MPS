{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement",operationContext.getScope());
    result.add(new AbstractSideTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
        SNode ref=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
        SLinkOperations.setTarget(ref,"classifier",SLinkOperations.getTarget(_context.getSourceNode(),"classifier",false),false);
        SLinkOperations.setTarget(result,"expression",ref,true);
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(SNodeOperations.getParent(_context.getSourceNode(),null,false,false),null,false,false),result);
        return ref;
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getDescriptionText(      String pattern){
        return "static access";
      }
    }
);
  }
  return result;
}
