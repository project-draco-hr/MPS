{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode sampleNode=_context.getCurrentTargetNode();
          if (SNodeOperations.isInstanceOf(sampleNode,"jetbrains.mps.baseLanguage.structure.Expression")) {
            SNode originalExpression=ExpectedType_FactoryUtil.getOriginalExpression(_context.getParentNode(),sampleNode);
            if ((originalExpression != null)) {
              SNode expectedType=ExpectedType_FactoryUtil.createExpectedType(originalExpression);
              if ((expectedType != null)) {
                return Type_Behavior.call_getAbstractCreators_1226945293888(expectedType);
              }
            }
          }
          return null;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode gne=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GenericNewExpression",null);
              SLinkOperations.setTarget(gne,"creator",(item),true);
              return gne;
            }
            public String getMatchingText(            String pattern){
              return "new " + BaseConcept_Behavior.call_getPresentation_1213877396640((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "";
            }
          }
);
        }
      }
    }
  }
  return result;
}
