{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode thisConcept=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
          return SLinkOperations.getTargets(thisConcept,"constructor",true);
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation",null);
              SLinkOperations.setTarget(newNode,"constructorDeclaration",(item),false);
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation")) {
                for (                SNode argument : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"),"actualArgument",true))) {
                  SLinkOperations.addChild(newNode,"actualArgument",argument);
                }
              }
              return newNode;
            }
            public String getMatchingText(            String pattern){
              return "this" + BaseMethodDeclaration_Behavior.call_getParametersPresentation_1213877350304((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"),"shortDescription");
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode thisConcept=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
          SNode superClass=SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(thisConcept,"superclass",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
          if (superClass == null) {
            superClass=SNodeOperations.cast(SLinkOperations.getTarget(new _Quotations.QuotationClass_0().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
          }
          return SLinkOperations.getTargets(superClass,"constructor",true);
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation",null);
              SLinkOperations.setTarget(newNode,"constructorDeclaration",(item),false);
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")) {
                for (                SNode argument : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"),"actualArgument",true))) {
                  SLinkOperations.addChild(newNode,"actualArgument",argument);
                }
              }
              return newNode;
            }
            public String getMatchingText(            String pattern){
              return "super" + BaseMethodDeclaration_Behavior.call_getParametersPresentation_1213877350304((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"),"shortDescription");
            }
          }
);
        }
      }
    }
  }
  return result;
}
