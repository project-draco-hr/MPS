{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement",operationContext.getScope());
    AbstractConceptDeclaration wrappedConcept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",operationContext.getScope());
    IChildNodeSetter setter=new AbstractChildNodeSetter(){
      public SNode wrapNode(      SNode nodeToWrap,      SModel model){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement",null);
        SLinkOperations.setTarget(result,"localVariableDeclaration",nodeToWrap,true);
        return result;
      }
      public SNode doExecute(      SNode pn,      SNode oc,      SNode nc,      IScope sc){
        SNode wrappedNode=this.wrapNode(nc,nc.getModel());
        _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
        return wrappedNode;
      }
    }
;
    result.addAll(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext));
  }
  return result;
}
