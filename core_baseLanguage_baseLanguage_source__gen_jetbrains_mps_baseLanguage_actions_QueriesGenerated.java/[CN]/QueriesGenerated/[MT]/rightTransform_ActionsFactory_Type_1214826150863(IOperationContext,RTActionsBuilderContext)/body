{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode method=SNodeOperations.getParent(_context.getSourceNode(),null,false,false);
        SPropertyOperations.set(method,"name",pattern);
        return null;
      }
      public String getMatchingText(      String pattern){
        return pattern;
      }
    }
);
  }
  return result;
}
