{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement",null);
        SNode expression=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.ExpressionStatement",false,false),"expression",true);
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(expression),result);
        SLinkOperations.setTarget(result,"expression",expression,true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "return";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
