{
  final String newConceptName="MyVeryGoodConcept2";
  final Wrappers._T<IRefactoring> refactoring=new Wrappers._T<IRefactoring>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      refactoring.value=RefactoringUtil.getRefactoringByClassName(((String)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590291(jetbrains.mps.lang.structure.scripts)","1198085953023"),"jetbrains.mps.lang.refactoring.structure.OldRefactoring"),"call_getGeneratedClassLongName_4598603396803851284",new Class[]{SNode.class})));
    }
  }
);
  final RefactoringContext refactoringContext=new RefactoringContext(refactoring.value);
  refactoringContext.setCurrentOperationContext(ProjectOperationContext.get(project));
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      refactoringContext.setParameter(RenameConceptRefactoringTester.STRMD,structureModelDescriptor);
      SModel model=structureModelDescriptor.getSModel();
      SNode concept=SModelOperations.getRootByName(model,"MyVeryGoodConcept1");
      refactoringContext.setSelectedNode(concept);
      refactoringContext.setSelectedProject(project);
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter("newName",newConceptName);
    }
  }
);
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          try {
            if (sandbox1.getLoadingState() != ModelLoadingState.NOT_LOADED) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1.getSModel();
            String conceptFqName=sModel.rootsIterator().next().getConceptFqName();
            SModelDescriptor structureModelDescriptor=(SModelDescriptor)refactoringContext.getParameter(RenameConceptRefactoringTester.STRMD);
            result[0]=conceptFqName.equals(structureModelDescriptor.getSModelReference().getSModelFqName() + "." + newConceptName);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
