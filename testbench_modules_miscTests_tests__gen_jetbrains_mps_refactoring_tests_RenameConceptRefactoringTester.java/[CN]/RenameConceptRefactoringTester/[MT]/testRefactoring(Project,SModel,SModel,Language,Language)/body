{
  final String newConceptName="MyVeryGoodConcept1";
  final ModelAccess modelAccess=project.getRepository().getModelAccess();
  final Wrappers._T<IRefactoring> refactoring=new Wrappers._T<IRefactoring>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      refactoring.value=RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class,SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","1347577327951781517"),"virtual_getFqName_1213877404258",new Object[]{}));
    }
  }
);
  final RefactoringContext refactoringContext=new RefactoringContext(project,refactoring.value);
  refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      final SModel structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      refactoringContext.setParameter(RenameConceptRefactoringTester.STRMD,structureModelDescriptor);
      SModel model=structureModelDescriptor;
      SNode concept=SModelOperations.getRootByName(model,"MyVeryGoodConcept1");
      refactoringContext.setSelectedNode(concept);
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter("newName",newConceptName);
    }
  }
);
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    @Override public void run(){
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          try {
            if (sandbox1.isLoaded()) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1;
            String conceptFqName=sModel.getRootNodes().iterator().next().getConcept().getQualifiedName();
            SModel structureModelDescriptor=(SModel)refactoringContext.getParameter(RenameConceptRefactoringTester.STRMD);
            result[0]=conceptFqName.equals(structureModelDescriptor.getReference().getModelName() + "." + newConceptName);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
