{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x97a52717898f4598L,0x8150573d9fd03868L,0x151c4f99e489a16L,0x151c4f99e489a17L,"analyzer"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x97a52717898f4598L,0x8150573d9fd03868L,0x151c4f99e489a16L,0x151c4f99e489a17L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SModelOperations.rootsIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0x97a52717898f4598L,0x8150573d9fd03868L,0x5bd9e43c93f46789L,"jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_3xwrd2_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
