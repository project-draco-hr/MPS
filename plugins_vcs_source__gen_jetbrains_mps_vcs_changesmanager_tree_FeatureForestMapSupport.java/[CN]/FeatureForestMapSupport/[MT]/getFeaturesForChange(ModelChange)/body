{
  ModelAccess.assertLegalRead();
  List<Feature> result=ListSequence.fromList(new ArrayList<Feature>());
  SModelReference modelReference=change.getChangeSet().getNewModel().getReference();
  if (change instanceof AddRootChange) {
    AddRootChange arc=((AddRootChange)change);
    ListSequence.fromList(result).addElement(new NodeFeature(new SNodePointer(modelReference,arc.getRootId())));
  }
 else   if (change instanceof SetPropertyChange) {
    SetPropertyChange spc=((SetPropertyChange)change);
    ListSequence.fromList(result).addElement(new PropertyFeature(new SNodePointer(modelReference,spc.getAffectedNodeId()),spc.getPropertyName()));
  }
 else   if (change instanceof SetReferenceChange) {
    SetReferenceChange src=((SetReferenceChange)change);
    ListSequence.fromList(result).addElement(new ReferenceFeature(new SNodePointer(modelReference,src.getAffectedNodeId()),src.getRole()));
  }
 else   if (change instanceof NodeGroupChange) {
    NodeGroupChange ngc=((NodeGroupChange)change);
    SNodeId parentId=ngc.getParentNodeId();
    int begin=ngc.getResultBegin();
    int end=ngc.getResultEnd();
    String role=ngc.getRole();
    if (begin == end) {
      ListSequence.fromList(result).addElement(new DeletedChildFeature(new SNodePointer(modelReference,parentId),role,begin));
    }
 else {
      List<SNode> changeChildren=((List<SNode>)IterableUtil.asList(change.getChangeSet().getNewModel().getNode(parentId).getChildren(role)));
      for (int i=begin; i < end; i++) {
        if (i < ListSequence.fromList(changeChildren).count()) {
          ListSequence.fromList(result).addElement(new NodeFeature(new SNodePointer(modelReference,ListSequence.fromList(changeChildren).getElement(i).getNodeId())));
        }
      }
    }
  }
  return ListSequence.fromList(result).toGenericArray(Feature.class);
}
