{
  List<SNode> returnStatements=SNodeOperations.getDescendants(subtypingRule,"jetbrains.mps.baseLanguage.structure.ReturnStatement",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral","jetbrains.mps.baseLanguage.structure.AnonymousClass","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"});
  for (  SNode retSt : returnStatements) {
    if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(retSt,"expression",true)),new _Quotations.QuotationClass_2().createNode()))) {
      return false;
    }
  }
  return true;
}
