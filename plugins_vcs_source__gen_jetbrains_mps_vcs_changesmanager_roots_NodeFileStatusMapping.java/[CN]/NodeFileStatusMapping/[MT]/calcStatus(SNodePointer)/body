{
  final Wrappers._T<FileStatus> status=new Wrappers._T<FileStatus>(null);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModelDescriptor modelDescriptor=SModelRepository.getInstance().getModelDescriptor(root.getModelReference());
      if (modelDescriptor instanceof EditableSModelDescriptor) {
        EditableSModelDescriptor emd=(EditableSModelDescriptor)modelDescriptor;
        CurrentDifference diff=myRegistry.getCurrentDifference(emd);
        List<ModelChange> modelChanges=check_onkh7z_a0c0b0a1a4(diff.getChangeSet());
        final SNodeId rootId=root.getNodeId();
        List<ModelChange> rootChanges=ListSequence.fromList(modelChanges).where(new IWhereFilter<ModelChange>(){
          public boolean accept(          ModelChange ch){
            return rootId.equals(ch.getRootId());
          }
        }
).toListSequence();
        if (ListSequence.fromList(rootChanges).count() != 0) {
          if (ListSequence.fromList(rootChanges).first() instanceof AddRootChange) {
            status.value=FileStatus.ADDED;
            VirtualFile vf=VirtualFileUtils.getVirtualFile(emd.getModelFile());
            if (vf != null) {
              FileStatus modelStatus=FileStatusManager.getInstance(myProject).getStatus(vf);
              if (BaseVersionUtil.isAddedFileStatus(modelStatus)) {
                status.value=modelStatus;
              }
            }
          }
 else {
            status.value=FileStatus.MODIFIED;
          }
        }
 else {
          status.value=FileStatus.NOT_CHANGED;
        }
      }
    }
  }
);
synchronized (myFileStatusMap) {
    MapSequence.fromMap(myFileStatusMap).put(root,status.value);
  }
}
