{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("notation",new BaseReferenceConstraintsDescriptor("notation",this){
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getParameterNode(),"context",true),"jetbrains.mps.core.notation.structure.SNotationConceptContext")) {
            SNode context=SNodeOperations.cast(SLinkOperations.getTarget(_context.getParameterNode(),"context",true),"jetbrains.mps.core.notation.structure.SNotationConceptContext");
            return (isNotEmptyString(SPropertyOperations.getString(context,"id")) ? (SPropertyOperations.getString(SLinkOperations.getTarget(context,"element",false),"name") + "." + SPropertyOperations.getString(context,"id")) : SPropertyOperations.getString(SLinkOperations.getTarget(context,"element",false),"name"));
          }
 else {
            return "<not concept context in notation>";
          }
        }
      }
;
    }
  }
);
  return references;
}
