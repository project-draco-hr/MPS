{
  SNode linkDeclaration=BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.getConceptDeclaration(sourceNode),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration","call_findLinkDeclaration_1213877394467",new Object[]{reference.getRole()});
  if (linkDeclaration == null) {
    return false;
  }
  final SNode referentConcept=SLinkOperations.getTarget(linkDeclaration,"target",false);
  return TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      Scope refScope=ModelConstraints.getScope(reference);
      if (refScope instanceof ErrorScope) {
        LOG.error("Couldn't create referent search scope : " + ((ErrorScope)refScope).getMessage());
        return false;
      }
      SNode result=null;
      String resolveInfo=reference.getResolveInfo();
      if (resolveInfo != null) {
        result=refScope.resolve(sourceNode,resolveInfo);
        if (result == null) {
          for (          SNode node : refScope.getAvailableElements(null)) {
            if (!(SNodeOperations.isInstanceOf(node,NameUtil.nodeFQName(referentConcept)))) {
              continue;
            }
            if (resolveInfo.equals(node.getName()) || resolveInfo.equals(SNodeAccessUtil.getProperty(node,"nestedName"))) {
              if (result == null) {
                result=node;
              }
 else {
                return false;
              }
            }
          }
        }
      }
      if (result == null) {
        return false;
      }
      sourceNode.setReferenceTarget(reference.getRole(),result);
      return true;
    }
  }
);
}
