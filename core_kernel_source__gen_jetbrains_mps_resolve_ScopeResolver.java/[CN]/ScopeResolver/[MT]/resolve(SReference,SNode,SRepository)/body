{
  SNode linkDeclaration=BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(sourceNode)),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration","call_findLinkDeclaration_1213877394467",new Object[]{reference.getRole()});
  if (linkDeclaration == null) {
    return false;
  }
  final SNode referentConcept=SLinkOperations.getTarget(linkDeclaration,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"));
  return TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      Scope refScope=ModelConstraints.getScope(reference);
      if (refScope instanceof ErrorScope) {
        LOG.error("Couldn't create referent search scope : " + ((ErrorScope)refScope).getMessage());
        return false;
      }
      SNode result=null;
      String resolveInfo=((jetbrains.mps.smodel.SReference)reference).getResolveInfo();
      if (resolveInfo != null) {
        try {
          result=refScope.resolve(sourceNode,resolveInfo);
        }
 catch (        Throwable t) {
          LOG.warn("Exception was thrown during reference resolving",t);
        }
      }
      if (result == null) {
        return false;
      }
      sourceNode.setReferenceTarget(reference.getRole(),result);
      return true;
    }
  }
);
}
