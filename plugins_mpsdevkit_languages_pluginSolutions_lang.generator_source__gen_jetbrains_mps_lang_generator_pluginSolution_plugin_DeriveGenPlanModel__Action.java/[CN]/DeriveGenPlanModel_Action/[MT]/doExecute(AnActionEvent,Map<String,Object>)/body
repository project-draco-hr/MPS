{
  final DeriveGenPlanDialog dialog=new DeriveGenPlanDialog(event.getData(MPSCommonDataKeys.MPS_PROJECT));
  dialog.show();
  if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE || dialog.getSelectedModel() == null) {
    return;
  }
  final SRepository repository=event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository();
  repository.getModelAccess().executeCommand(new Runnable(){
    public void run(){
      GenPlanFunnel gpf=new GenPlanFunnel(repository,event.getData(MPSCommonDataKeys.NODE));
      if (dialog.useLanguageInSteps()) {
        gpf.transformLanguages();
      }
 else {
        gpf.applyGenerators();
      }
      gpf.distinctSteps(dialog.isDistinctStep());
      SModel sampleModel=dialog.getSelectedModel().resolve(repository);
      GenerationPlan plan=new GenerationPlan(sampleModel);
      for (      ModelGenerationPlan.Step step : plan.getSteps()) {
        if (!(step instanceof ModelGenerationPlan.Transform)) {
          continue;
        }
        ModelGenerationPlan.Transform ts=((ModelGenerationPlan.Transform)step);
        for (        TemplateMappingConfiguration tmc : ts.getTransformations()) {
          SModuleReference generatorModuleRef=tmc.getModel().getModule().getModuleReference();
          gpf.next(generatorModuleRef);
        }
      }
    }
  }
);
}
