{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          if (_context.getInEditor()) {
            return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SNodeOperations.cast(SNodeOperations.getParent(_context.getParameterNode()),"jetbrains.mps.baseLanguage.structure.Classifier"),_context.getEnclosingNode());
          }
          if (_context.getVisible()) {
            return ConstructorDeclaration_Behavior.call_getPresentationInContext_983626226385657373(_context.getParameterNode(),_context.getEnclosingNode());
          }
 else {
            return SPropertyOperations.getString(_context.getParameterNode(),"name");
          }
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> res=new ArrayList<SNode>();
          SNode context=((_context.getReferenceNode() != null) ? _context.getReferenceNode() : _context.getEnclosingNode());
          for (          SNode n : SNodeOperations.getAncestors(context,"jetbrains.mps.baseLanguageInternal.structure.ExtractStaticInnerClassExpression",false)) {
            if ((SLinkOperations.getTarget(n,"innerClass",true) != null)) {
              ListSequence.<SNode>fromList(res).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(n,"innerClass",true),"constructor",true)));
            }
          }
          return res;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_4gp7p5_a0a3a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
