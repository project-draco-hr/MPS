{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  List<SNode> fields=SLinkOperations.getTargets(classConcept,"field",true);
  for (  SNode field : fields) {
    final String getterName="get" + NameUtil.capitalize(SPropertyOperations.getString(field,"name"));
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode method){
        return SPropertyOperations.getString(method,"name").equals(getterName) && ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).isEmpty();
      }
    }
)) {
      continue;
    }
    SNode getter=SLinkOperations.addNewChild(classConcept,"method","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SPropertyOperations.set(getter,"name",getterName);
    SLinkOperations.setTarget(getter,"returnType",SNodeOperations.copyNode(SLinkOperations.getTarget(field,"type",true)),true);
    SLinkOperations.setNewChild(getter,"body","jetbrains.mps.baseLanguage.structure.StatementList");
    SNode returnStatement=SLinkOperations.addNewChild(SLinkOperations.getTarget(getter,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ReturnStatement");
    SNode dotExpression=SLinkOperations.setNewChild(returnStatement,"expression","jetbrains.mps.baseLanguage.structure.DotExpression");
    SLinkOperations.setNewChild(dotExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode fieldRef=SLinkOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
    SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
  }
}
