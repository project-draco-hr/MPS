{
  List<SNode> resVdecls=ListSequence.<SNode>fromList(new ArrayList<SNode>());
  SNode wrpPrgNode=SNodeOperations.getAncestorWhereConceptInList(closure,new String[]{"jetbrains.mps.baseLanguage.structure.StatementList","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"},false,false);
  if ((wrpPrgNode != null)) {
    Map<SNode,Integer> clsMap=collectVariableUsages(SLinkOperations.getTarget(closure,"body",true));
    for (    IMapping<SNode,Integer> m : SetSequence.<IMapping<SNode,Integer>>fromSet(MapSequence.fromMap(clsMap).mappingsSet())) {
      ListSequence.<SNode>fromList(resVdecls).addElement(SNodeOperations.cast(m.key(),"jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    }
    if (MapSequence.<SNode,Integer>fromMap(clsMap).isNotEmpty()) {
      Map<SNode,Integer> wrpMap=collectVariableUsages(wrpPrgNode);
      for (      IMapping<SNode,Integer> m : SetSequence.<IMapping<SNode,Integer>>fromSet(MapSequence.fromMap(clsMap).mappingsSet())) {
        if (m.value() == 0) {
          if (!(MapSequence.fromMap(wrpMap).containsKey(m.key())) || MapSequence.<SNode,Integer>fromMap(wrpMap).get(m.key()) <= 1) {
            ListSequence.<SNode>fromList(resVdecls).removeElement(SNodeOperations.cast(m.key(),"jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
          }
        }
      }
    }
  }
  return resVdecls;
}
