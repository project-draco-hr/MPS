{
  final Wrappers._T<SNode> link=new Wrappers._T<SNode>(null);
  if (SPropertyOperations.hasValue(linkNode,"metaClass","reference","reference")) {
    link.value=SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SReference",null);
  }
 else   if (SPropertyOperations.hasValue(linkNode,"metaClass","aggregation","reference")) {
    link.value=SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SChildLink",null);
  }
  MapSequence.fromMap(map).put(linkNode,link.value);
  SPropertyOperations.set(link.value,"name",SPropertyOperations.getString(linkNode,"role"));
  later(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      SLinkOperations.setTarget(link.value,"target",SNodeOperations.as(resolve(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept"),SLinkOperations.getTarget(linkNode,"target",false)),"jetbrains.mps.core.structure.structure.SAbstractConcept"),false);
    }
  }
);
  SLinkOperations.setTarget(link.value,"cardinality",SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SCardinality",null),true);
  SPropertyOperations.set(SLinkOperations.getTarget(link.value,"cardinality",true),"isRequired","" + ((SPropertyOperations.hasValue(linkNode,"sourceCardinality","1","0..1") || SPropertyOperations.hasValue(linkNode,"sourceCardinality","1..n","0..1"))));
  SPropertyOperations.set(SLinkOperations.getTarget(link.value,"cardinality",true),"isMultiple","" + ((SPropertyOperations.hasValue(linkNode,"sourceCardinality","0..n","0..1") || SPropertyOperations.hasValue(linkNode,"sourceCardinality","1..n","0..1"))));
  return link.value;
}
