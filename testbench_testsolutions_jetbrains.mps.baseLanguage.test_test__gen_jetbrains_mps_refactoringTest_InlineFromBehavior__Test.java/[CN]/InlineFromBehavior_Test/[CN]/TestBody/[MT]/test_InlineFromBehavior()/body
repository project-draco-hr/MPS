{
  this.addNodeById("1230053040716");
  this.addNodeById("1230053040735");
  InlineMethodRefactoring ref=new InlineMethodRefactoring(SNodeOperations.cast(this.getNodeById("1230053040732"),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1179409122411l,"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall")));
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053040717"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053040736"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
