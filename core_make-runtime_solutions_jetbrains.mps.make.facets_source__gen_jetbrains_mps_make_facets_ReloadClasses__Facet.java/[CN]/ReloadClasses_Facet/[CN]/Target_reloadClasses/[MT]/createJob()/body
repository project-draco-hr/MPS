{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_i849au_a0a=null;
      final Iterable<TResource> input=(Iterable<TResource>)(Iterable)rawInput;
switch (0) {
case 0:
        final Wrappers._T<Collection<? extends SModule>> modules=new Wrappers._T<Collection<? extends SModule>>(Sequence.fromIterable(input).select(new ISelector<TResource,IModule>(){
          public IModule select(          TResource it){
            return it.module();
          }
        }
).toListSequence());
      modules.value=new GlobalModuleDependenciesManager(modules.value).getModules(GlobalModuleDependenciesManager.Deptype.COMPILE);
    monitor.currentProgress().beginWork("Reloading classes",1,monitor.currentProgress().workLeft());
  FileSystem.getInstance().runWriteTransaction(new Runnable(){
    public void run(){
      ModelAccess.instance().requireWrite(new Runnable(){
        public void run(){
          ClassLoaderManager.getInstance().reloadClasses(modules.value,new EmptyProgressMonitor());
        }
      }
);
    }
  }
);
monitor.currentProgress().advanceWork("Reloading classes",1);
monitor.currentProgress().finishWork("Reloading classes");
_output_i849au_a0a=Sequence.fromIterable(_output_i849au_a0a).concat(Sequence.fromIterable(input));
default :
return new IResult.SUCCESS(_output_i849au_a0a);
}
}
}
;
}
