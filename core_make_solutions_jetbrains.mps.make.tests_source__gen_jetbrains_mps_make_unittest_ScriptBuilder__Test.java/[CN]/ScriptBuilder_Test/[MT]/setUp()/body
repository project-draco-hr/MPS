{
  super.setUp();
  this.context=new Mockery();
  final IFacet fmake=Mocker.facet(context,"Make");
  final IFacet fgen=Mocker.facet(context,"Gen");
  final ITarget tgen=Mocker.target(context,"gen");
  final IFacet ftextgen=Mocker.facet(context,"Textgen");
  final ITarget ttextgen=Mocker.target(context,"textgen");
  context.checking(new Expectations(){
{
      ignoring(fmake).extended();
      ignoring(fmake).optional();
      atLeast(1).of(fmake).required();
      will(returnValue(Sequence.fromArray(new IFacet[]{})));
      atLeast(1).of(fmake).targets(with(aNonNull(Map.class)));
      will(returnValue(Sequence.fromArray(new ITarget[]{})));
      atLeast(1).of(fgen).required();
      will(returnValue(Sequence.fromArray(new IFacet[]{fmake})));
      atLeast(1).of(fgen).targets(with(aNonNull(Map.class)));
      will(returnValue(Sequence.fromArray(new ITarget[]{tgen})));
      atLeast(1).of(ftextgen).required();
      will(returnValue(Sequence.fromArray(new IFacet[]{fmake,fgen})));
      atLeast(1).of(ftextgen).targets(with(aNonNull(Map.class)));
      will(returnValue(Sequence.fromArray(new ITarget[]{ttextgen})));
    }
  }
);
  FacetRegistry.getInstance().register(fmake);
  FacetRegistry.getInstance().register(fgen);
  FacetRegistry.getInstance().register(ftextgen);
  this.facets=new IFacet[]{fmake,fgen,ftextgen};
}
