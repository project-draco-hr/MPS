{
  Iterable<MoveNodesRefactoring> specialRefactorings=new ExtensionPoint<MoveNodesRefactoring>("jetbrains.mps.ide.platform.MoveNodes").getObjects();
  Iterable<MoveNodesRefactoring> applicableRefactorings=Sequence.fromIterable(specialRefactorings).where(new IWhereFilter<MoveNodesRefactoring>(){
    public boolean accept(    MoveNodesRefactoring it){
      return it.isApplicable(((MPSProject)MapSequence.fromMap(_params).get("project")),((List<SNode>)MapSequence.fromMap(_params).get("nodesToMove")));
    }
  }
);
  if (Sequence.fromIterable(applicableRefactorings).isEmpty()) {
    return new MoveNodesDefault();
  }
 else {
    if (Sequence.fromIterable(applicableRefactorings).count() > 1) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("More than one MoveNodes refactoring applicable: " + Sequence.fromIterable(applicableRefactorings).select(new ISelector<MoveNodesRefactoring,String>(){
          public String select(          MoveNodesRefactoring it){
            return "\"" + it.getName() + "\"";
          }
        }
).foldLeft("",new ILeftCombinator<String,String>(){
          public String combine(          String s,          String it){
            return s + ", " + it;
          }
        }
));
      }
    }
    return Sequence.fromIterable(applicableRefactorings).first();
  }
}
