{
  try {
    final Wrappers._T<SModel> targetModelDescriptor=new Wrappers._T<SModel>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        targetModelDescriptor.value=SNodeOperations.getModel(ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target"))).first());
      }
    }
);
    final Object newLocation=MoveNodesDialog.getSelectedObject(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),targetModelDescriptor.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
      @Override public boolean check(      Object selectedObject,      SModel model){
        return selectedObject instanceof SNode || selectedObject instanceof SModel;
      }
    }
);
    if (newLocation == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      @Override public void run(){
        for (        SNode n : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target")))) {
          SNode node=((SNode)n);
          if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(node)) {
            return;
          }
        }
        if (newLocation instanceof SNode && (!(((SNode)newLocation).getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)newLocation)))) {
          return;
        }
        if (newLocation instanceof SModel && (((SModel)newLocation).getReference().resolve(MPSModuleRepository.getInstance()) != newLocation)) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(newLocation),((List<SNode>)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "MoveNodes",t);
  }
}
