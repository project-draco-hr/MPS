{
  try {
    final Wrappers._T<SModelDescriptor> targetModelDescriptor=new Wrappers._T<SModelDescriptor>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        targetModelDescriptor.value=((SModel)SNodeOperations.getModel(ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target"))).first())).getModelDescriptor();
      }
    }
);
    final Object newNode=MoveNodesDialog.getSelectedObject(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),targetModelDescriptor.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
      public boolean check(      Object selectedObject,      SModelDescriptor model){
        return selectedObject instanceof SNode || selectedObject instanceof SModelDescriptor;
      }
    }
);
    if (newNode == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      public void run(){
        for (        SNode node : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target")))) {
          if (!(jetbrains.mps.util.SNodeOperations.isRegistered(((SNode)node))) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)node))) {
            return;
          }
        }
        if (newNode instanceof SNode && (!(jetbrains.mps.util.SNodeOperations.isRegistered(((SNode)newNode))) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)newNode)))) {
          return;
        }
        if (newNode instanceof SModelDescriptor && (!(((SModelDescriptor)newNode).isRegistered()))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(newNode),((List<SNode>)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "MoveNodes",t);
    }
  }
}
