{
  super("Migration from List to collections");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ListMigration";
    }
    public String getAdditionalInfo(){
      return "ListMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.<SNode>fromArray(SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~List"),SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~ArrayList"),SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~LinkedList")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListType",null);
      SLinkOperations.setTarget(result,"elementType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Size ";
    }
    public String getAdditionalInfo(){
      return "Size ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"size",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Get";
    }
    public String getAdditionalInfo(){
      return "Get";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"get",ListSequence.<ParameterType>fromArray(ParameterType.INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode access=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression",null);
      SLinkOperations.setTarget(access,"list",SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),true);
      SLinkOperations.setTarget(access,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),access);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Clear";
    }
    public String getAdditionalInfo(){
      return "Clear";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"clear",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to List";
    }
    public String getAdditionalInfo(){
      return "Add element to List";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"add",ListSequence.<ParameterType>fromArray(ParameterType.ANY));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to pos";
    }
    public String getAdditionalInfo(){
      return "Add element to pos";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"add",ListSequence.<ParameterType>fromArray(ParameterType.INT,ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"element",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).last()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "isEmpty";
    }
    public String getAdditionalInfo(){
      return "isEmpty";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"isEmpty",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "set";
    }
    public String getAdditionalInfo(){
      return "set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"set",ListSequence.<ParameterType>fromArray(ParameterType.INT,ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"element",SNodeOperations.copyNode(ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).toListSequence()).getElement(1)),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "remove";
    }
    public String getAdditionalInfo(){
      return "remove";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"remove",ListSequence.<ParameterType>fromArray(ParameterType.INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "removeObject";
    }
    public String getAdditionalInfo(){
      return "removeObject";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"remove",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "removeAll";
    }
    public String getAdditionalInfo(){
      return "removeAll";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"removeAll",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "indexOf";
    }
    public String getAdditionalInfo(){
      return "indexOf";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"indexOf",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "contains";
    }
    public String getAdditionalInfo(){
      return "contains";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"contains",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "addAll";
    }
    public String getAdditionalInfo(){
      return "addAll";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addAll",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add First";
    }
    public String getAdditionalInfo(){
      return "Add First";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addFirst",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add Last";
    }
    public String getAdditionalInfo(){
      return "Add Last";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addLast",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove first";
    }
    public String getAdditionalInfo(){
      return "Remove first";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"removeFirst",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ArrayList";
    }
    public String getAdditionalInfo(){
      return "ArrayList";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)),"jetbrains.mps.lang.core.structure.INamedConcept"),"name"),"ArrayList") && ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).count() == 1 && ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).count() <= 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit",null);
      SLinkOperations.setTarget(result,"elementType",ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).first(),true);
      if (ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).isNotEmpty()) {
        SLinkOperations.setTarget(result,"copyFrom",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "LinkedList";
    }
    public String getAdditionalInfo(){
      return "LinkedList";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)),"jetbrains.mps.lang.core.structure.INamedConcept"),"name"),"LinkedList") && ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).count() == 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator",null);
      SLinkOperations.setTarget(result,"elementType",ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).first(),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "SetMigration";
    }
    public String getAdditionalInfo(){
      return "SetMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.<SNode>fromArray(SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~Set"),SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~HashSet")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.SetType",null);
      SLinkOperations.setTarget(result,"elementType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to Set";
    }
    public String getAdditionalInfo(){
      return "Add element to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"add",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "AddAll elements to Set";
    }
    public String getAdditionalInfo(){
      return "AddAll elements to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"addAll",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "RemoveAll elements to Set";
    }
    public String getAdditionalInfo(){
      return "RemoveAll elements to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"removeAll",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove element from Set";
    }
    public String getAdditionalInfo(){
      return "Remove element from Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"remove",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "HashSet migration";
    }
    public String getAdditionalInfo(){
      return "HashSet migration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)),"jetbrains.mps.lang.core.structure.INamedConcept"),"name"),"HashSet") && ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).count() <= 1 && ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).count() == 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator",null);
      SLinkOperations.setTarget(result,"elementType",ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).first(),true);
      if (ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).isNotEmpty()) {
        SLinkOperations.setTarget(result,"copyFrom",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "hasNext";
    }
    public String getAdditionalInfo(){
      return "hasNext";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForIterator(node,"hasNext",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation",null);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "next";
    }
    public String getAdditionalInfo(){
      return "next";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForIterator(node,"next",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation",null);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "getIterator";
    }
    public String getAdditionalInfo(){
      return "getIterator";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"iterator",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation",null);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Iterator";
    }
    public String getAdditionalInfo(){
      return "Iterator";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.<SNode>fromArray(SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~Iterator")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.IteratorType",null);
      SLinkOperations.setTarget(result,"elementType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
