{
  super("Migration from List to collections");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ListMigration";
    }
    public String getAdditionalInfo(){
      return "ListMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SLinkOperations.getTarget(node,"classifier",false) == SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~List") || SLinkOperations.getTarget(node,"classifier",false) == SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~ArrayList") || SLinkOperations.getTarget(node,"classifier",false) == SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~LinkedList"))) {
        return false;
      }
      if (ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).count() != 1) {
        return false;
      }
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
        return true;
      }
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
        return true;
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListType",null);
      SLinkOperations.setTarget(result,"elementType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Size ";
    }
    public String getAdditionalInfo(){
      return "Size ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"size",ListSequence.<SNode>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Get";
    }
    public String getAdditionalInfo(){
      return "Get";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"get",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode access=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression",null);
      SLinkOperations.setTarget(access,"list",SLinkOperations.getTarget(SNodeOperations.getParent(node),"operand",true),true);
      SLinkOperations.setTarget(access,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),access);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Clear";
    }
    public String getAdditionalInfo(){
      return "Clear";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"clear",ListSequence.<SNode>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element";
    }
    public String getAdditionalInfo(){
      return "Add element";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"add",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation",null);
      SLinkOperations.setTarget(opration,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to pos";
    }
    public String getAdditionalInfo(){
      return "Add element to pos";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"add",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"element",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).last()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "isEmpty";
    }
    public String getAdditionalInfo(){
      return "isEmpty";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"isEmpty",ListSequence.<SNode>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "set";
    }
    public String getAdditionalInfo(){
      return "set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"set",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"element",SNodeOperations.copyNode(ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).toListSequence()).getElement(1)),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "remove";
    }
    public String getAdditionalInfo(){
      return "remove";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"remove",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation",null);
      SLinkOperations.setTarget(operation,"index",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "removeObject";
    }
    public String getAdditionalInfo(){
      return "removeObject";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"remove",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "indexOf";
    }
    public String getAdditionalInfo(){
      return "indexOf";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"remove",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "addAll";
    }
    public String getAdditionalInfo(){
      return "addAll";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"remove",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add First";
    }
    public String getAdditionalInfo(){
      return "Add First";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"addFirst",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add Last";
    }
    public String getAdditionalInfo(){
      return "Add Last";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"addLast",ListSequence.<SNode>fromArray(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation",null);
      SLinkOperations.setTarget(operation,"argument",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove first";
    }
    public String getAdditionalInfo(){
      return "Remove first";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicabe(node,"removeFirst",ListSequence.<SNode>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation",null));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
