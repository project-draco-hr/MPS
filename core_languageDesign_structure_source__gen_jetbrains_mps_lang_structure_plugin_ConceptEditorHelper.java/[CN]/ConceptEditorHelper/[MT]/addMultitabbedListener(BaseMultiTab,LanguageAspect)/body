{
  SNode node=((SNode)tab.getBaseNode());
  final Language language=SModelUtil.getDeclaringLanguage(node,GlobalScope.getInstance());
  if (language == null) {
    return;
  }
  tab.addNodeAdditionListener(new Condition<SModelDescriptor>(){
    public boolean met(    SModelDescriptor modelDescriptor){
      return Language.getLanguageFor(modelDescriptor) == language && Language.getModelAspect(modelDescriptor) == aspect;
    }
  }
,new SModelAdapter(){
    public void referenceAdded(    SModelReferenceEvent event){
      SNode root=event.getReference().getSourceNode().getContainingRoot();
      if (!(SNodeOperations.isInstanceOf(root,"jetbrains.mps.lang.structure.structure.IConceptAspect"))) {
        return;
      }
      Map<SNode,IOperationContext> nodesMap=this.createNodesMap();
      List<SNode> nodes=ListSequence.fromListWithValues(new ArrayList<SNode>(),MapSequence.fromMap(nodesMap).keySet());
      ListSequence.fromList(nodes).removeSequence(ListSequence.fromList(tab.getLoadableNodes()));
      if (ListSequence.fromList(nodes).isNotEmpty()) {
        SNode n=ListSequence.fromList(nodes).getElement(0);
        tab.addInnerTabChecked(n,MapSequence.fromMap(nodesMap).get(n));
      }
    }
    public void referenceRemoved(    SModelReferenceEvent event){
    }
    private Map<SNode,IOperationContext> createNodesMap(){
      Map<SNode,IOperationContext> nodesMap=MapSequence.fromMap(new HashMap<SNode,IOperationContext>());
      for (      Pair<SNode,IOperationContext> pair : ListSequence.fromList(tab.tryToLoadNodes())) {
        MapSequence.fromMap(nodesMap).put(pair.o1,pair.o2);
      }
      return nodesMap;
    }
    public void rootAdded(    SModelRootEvent event){
      SNode root=event.getRoot();
      if (!(SNodeOperations.isInstanceOf(root,"jetbrains.mps.lang.structure.structure.IConceptAspect"))) {
        return;
      }
      if (tab.getLoadableNodes().contains(root)) {
        return;
      }
      IOperationContext context=null;
      for (      Pair<SNode,IOperationContext> pair : ListSequence.fromList(tab.tryToLoadNodes())) {
        if (pair.o1 == root) {
          context=pair.o2;
          break;
        }
      }
      if (context == null) {
        return;
      }
      tab.addInnerTabChecked(root,context);
    }
  }
);
}
