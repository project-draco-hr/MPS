{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0nb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractAppendPart;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractTextGenDeclaration;
  }
break;
case 2:
if (true) {
return myConceptAbstractTextGenParameter;
}
break;
case 3:
if (true) {
return myConceptAppendOperation;
}
break;
case 4:
if (true) {
return myConceptAttributedNodePart;
}
break;
case 5:
if (true) {
return myConceptBufferParameter;
}
break;
case 6:
if (true) {
return myConceptCollectionAppendPart;
}
break;
case 7:
if (true) {
return myConceptConceptTextGenDeclaration;
}
break;
case 8:
if (true) {
return myConceptConstantStringAppendPart;
}
break;
case 9:
if (true) {
return myConceptContextParameter;
}
break;
case 10:
if (true) {
return myConceptDecreaseDepthOperation;
}
break;
case 11:
if (true) {
return myConceptEncodingDeclaration;
}
break;
case 12:
if (true) {
return myConceptEncodingDeclarationBase;
}
break;
case 13:
if (true) {
return myConceptEncodingLiteral;
}
break;
case 14:
if (true) {
return myConceptExtensionDeclaration;
}
break;
case 15:
if (true) {
return myConceptFilenameFunction;
}
break;
case 16:
if (true) {
return myConceptFoundErrorOperation;
}
break;
case 17:
if (true) {
return myConceptGenerateTextDeclaration;
}
break;
case 18:
if (true) {
return myConceptIncreaseDepthOperation;
}
break;
case 19:
if (true) {
return myConceptIndentBufferOperation;
}
break;
case 20:
if (true) {
return myConceptIndentPart;
}
break;
case 21:
if (true) {
return myConceptLanguageTextGenDeclaration;
}
break;
case 22:
if (true) {
return myConceptLayoutPart;
}
break;
case 23:
if (true) {
return myConceptNewLineAppendPart;
}
break;
case 24:
if (true) {
return myConceptNodeAppendPart;
}
break;
case 25:
if (true) {
return myConceptNodeParameter;
}
break;
case 26:
if (true) {
return myConceptOperationCall;
}
break;
case 27:
if (true) {
return myConceptOperationDeclaration;
}
break;
case 28:
if (true) {
return myConceptReferenceAppendPart;
}
break;
case 29:
if (true) {
return myConceptSimpleTextGenOperation;
}
break;
case 30:
if (true) {
return myConceptStubOperationDeclaration;
}
break;
case 31:
if (true) {
return myConceptTextUnitLayout;
}
break;
case 32:
if (true) {
return myConceptUtilityMethodCall;
}
break;
case 33:
if (true) {
return myConceptUtilityMethodDeclaration;
}
break;
case 34:
if (true) {
return myConceptWithIndentOperation;
}
break;
default :
}
}
return null;
}
