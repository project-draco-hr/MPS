{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.AbstractAppendPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.AppendOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"part"},new boolean[]{true},false,false,"append","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.BufferParameter","jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"buffer","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.CollectionAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{"separator","withSeparator"},new String[]{},new String[]{"list"},new boolean[]{false},false,false,"$list{","collection","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.ConceptTextGenDeclaration","jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{"conceptDeclaration"},new String[]{"extension","encoding","textGenBlock"},new boolean[]{false,false,false},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.ConstantStringAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{"value","withIndent"},new String[]{},new String[]{},new boolean[]{},false,false,"constant","constant string","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.ContextParameter","jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"context","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.DecreaseDepthOperation","jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation",false,new String[]{"jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"decrease depth","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.EncodingDeclaration","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"encoding","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.EncodingLiteral","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase"},new String[]{"encoding"},new String[]{},new String[]{},new boolean[]{},false,false,"encoding literal","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.ExtensionDeclaration","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"extension","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.FoundErrorOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"text"},new boolean[]{false},false,false,"found error","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.GenerateTextDeclaration","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"do generate text","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.IncreaseDepthOperation","jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation",false,new String[]{"jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"increase depth","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.IndentBufferOperation","jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation",false,new String[]{"jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"indent buffer","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.InfoAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false},false,false,"$resolve{","resolve info","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration","jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration"},new String[]{},new String[]{"baseTextGen"},new String[]{"operation","function"},new boolean[]{true,true},false,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.NewLineAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"\\n","new line","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.NodeAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{"withIndent"},new String[]{},new String[]{"value"},new boolean[]{false},false,false,"${","node or property","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.NodeParameter","jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"node","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.OperationCall","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{},new String[]{"function"},new String[]{"parameter"},new boolean[]{true},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.OperationDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"},new String[]{"operationName"},new String[]{},new String[]{},new boolean[]{},false,false,"new operation","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.ReferenceAppendPart","jetbrains.mps.lang.textGen.structure.AbstractAppendPart",false,new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart"},new String[]{"uniqNameInFile"},new String[]{},new String[]{"reference"},new boolean[]{false},false,false,"$ref{","reference","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.UtilityMethodCall","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"function"},new String[]{"parameter"},new boolean[]{true},false,false,"","","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.UtilityMethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"new private function","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.textGen.structure.WithIndentOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"list"},new boolean[]{false},false,false,"with indent {","code block","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
