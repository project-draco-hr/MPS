{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractAppendPart;
case 1:
  return myConceptAbstractTextGenDeclaration;
case 2:
return myConceptAbstractTextGenParameter;
case 3:
return myConceptAppendOperation;
case 4:
return myConceptAttributedNodePart;
case 5:
return myConceptBufferParameter;
case 6:
return myConceptClassConceptUnitContext;
case 7:
return myConceptCollectionAppendPart;
case 8:
return myConceptConceptTextGenDeclaration;
case 9:
return myConceptConstantStringAppendPart;
case 10:
return myConceptContextInstanceSpecification;
case 11:
return myConceptContextParameter;
case 12:
return myConceptDecreaseDepthOperation;
case 13:
return myConceptEncodingDeclaration;
case 14:
return myConceptEncodingDeclarationBase;
case 15:
return myConceptEncodingLiteral;
case 16:
return myConceptExtensionDeclaration;
case 17:
return myConceptFilenameFunction;
case 18:
return myConceptFoundErrorOperation;
case 19:
return myConceptGenerateTextDeclaration;
case 20:
return myConceptIncreaseDepthOperation;
case 21:
return myConceptIndentBufferOperation;
case 22:
return myConceptIndentPart;
case 23:
return myConceptInstancePerUnitContextObject;
case 24:
return myConceptLanguageTextGenDeclaration;
case 25:
return myConceptLayoutPart;
case 26:
return myConceptNewLineAppendPart;
case 27:
return myConceptNodeAppendPart;
case 28:
return myConceptNodeParameter;
case 29:
return myConceptOperationCall;
case 30:
return myConceptOperationDeclaration;
case 31:
return myConceptReferenceAppendPart;
case 32:
return myConceptSimpleTextGenOperation;
case 33:
return myConceptStubOperationDeclaration;
case 34:
return myConceptTextUnitLayout;
case 35:
return myConceptUnitContextDeclaration;
case 36:
return myConceptUnitContextObject;
case 37:
return myConceptUnitContextReference;
case 38:
return myConceptUtilityMethodCall;
case 39:
return myConceptUtilityMethodDeclaration;
case 40:
return myConceptWithIndentOperation;
default :
throw new IllegalStateException();
}
}
