{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractAppendPart:
    return myConceptAbstractAppendPart;
case LanguageConceptSwitch.AbstractTextGenDeclaration:
  return myConceptAbstractTextGenDeclaration;
case LanguageConceptSwitch.AbstractTextGenParameter:
return myConceptAbstractTextGenParameter;
case LanguageConceptSwitch.AppendOperation:
return myConceptAppendOperation;
case LanguageConceptSwitch.AttributedNodePart:
return myConceptAttributedNodePart;
case LanguageConceptSwitch.BufferParameter:
return myConceptBufferParameter;
case LanguageConceptSwitch.ClassConceptUnitContext:
return myConceptClassConceptUnitContext;
case LanguageConceptSwitch.CollectionAppendPart:
return myConceptCollectionAppendPart;
case LanguageConceptSwitch.ConceptTextGenDeclaration:
return myConceptConceptTextGenDeclaration;
case LanguageConceptSwitch.ConstantStringAppendPart:
return myConceptConstantStringAppendPart;
case LanguageConceptSwitch.ContextInstanceSpecification:
return myConceptContextInstanceSpecification;
case LanguageConceptSwitch.ContextParameter:
return myConceptContextParameter;
case LanguageConceptSwitch.DecreaseDepthOperation:
return myConceptDecreaseDepthOperation;
case LanguageConceptSwitch.EncodingDeclaration:
return myConceptEncodingDeclaration;
case LanguageConceptSwitch.EncodingDeclarationBase:
return myConceptEncodingDeclarationBase;
case LanguageConceptSwitch.EncodingLiteral:
return myConceptEncodingLiteral;
case LanguageConceptSwitch.ExtensionDeclaration:
return myConceptExtensionDeclaration;
case LanguageConceptSwitch.FilenameFunction:
return myConceptFilenameFunction;
case LanguageConceptSwitch.FoundErrorOperation:
return myConceptFoundErrorOperation;
case LanguageConceptSwitch.GenerateTextDeclaration:
return myConceptGenerateTextDeclaration;
case LanguageConceptSwitch.IncreaseDepthOperation:
return myConceptIncreaseDepthOperation;
case LanguageConceptSwitch.IndentBufferOperation:
return myConceptIndentBufferOperation;
case LanguageConceptSwitch.IndentPart:
return myConceptIndentPart;
case LanguageConceptSwitch.InstancePerUnitContextObject:
return myConceptInstancePerUnitContextObject;
case LanguageConceptSwitch.LanguageTextGenDeclaration:
return myConceptLanguageTextGenDeclaration;
case LanguageConceptSwitch.LayoutPart:
return myConceptLayoutPart;
case LanguageConceptSwitch.NewLineAppendPart:
return myConceptNewLineAppendPart;
case LanguageConceptSwitch.NodeAppendPart:
return myConceptNodeAppendPart;
case LanguageConceptSwitch.NodeParameter:
return myConceptNodeParameter;
case LanguageConceptSwitch.OperationCall:
return myConceptOperationCall;
case LanguageConceptSwitch.OperationDeclaration:
return myConceptOperationDeclaration;
case LanguageConceptSwitch.ReferenceAppendPart:
return myConceptReferenceAppendPart;
case LanguageConceptSwitch.SimpleTextGenOperation:
return myConceptSimpleTextGenOperation;
case LanguageConceptSwitch.StubOperationDeclaration:
return myConceptStubOperationDeclaration;
case LanguageConceptSwitch.TextUnitLayout:
return myConceptTextUnitLayout;
case LanguageConceptSwitch.UnitContextDeclaration:
return myConceptUnitContextDeclaration;
case LanguageConceptSwitch.UnitContextObject:
return myConceptUnitContextObject;
case LanguageConceptSwitch.UnitContextReference:
return myConceptUnitContextReference;
case LanguageConceptSwitch.UtilityMethodCall:
return myConceptUtilityMethodCall;
case LanguageConceptSwitch.UtilityMethodDeclaration:
return myConceptUtilityMethodDeclaration;
case LanguageConceptSwitch.WithIndentOperation:
return myConceptWithIndentOperation;
default :
return null;
}
}
