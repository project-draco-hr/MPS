{
  assertCanChange();
  ModuleDescriptor md=getModuleDescriptor();
  Map<SModuleReference,Integer> oldDepVersions=md.getDependencyVersions();
  Map<SModuleReference,Integer> newDepVersions=new HashMap<SModuleReference,Integer>();
  List<SModule> visible=new ArrayList<SModule>();
  visible.add(this);
  visible.addAll(new GlobalModuleDependenciesManager(this).getModules(Deptype.VISIBLE));
  if (!md.hasDependencyVersions()) {
    for (    SModule dep : visible) {
      newDepVersions.put(dep.getModuleReference(),0);
    }
    md.setHasDependencyVersions(true);
  }
 else {
    for (    SModule dep : visible) {
      if (oldDepVersions.containsKey(dep.getModuleReference())) {
        newDepVersions.put(dep.getModuleReference(),oldDepVersions.get(dep.getModuleReference()));
      }
 else {
        newDepVersions.put(dep.getModuleReference(),((AbstractModule)dep).getModuleVersion());
      }
    }
  }
  oldDepVersions.clear();
  oldDepVersions.putAll(newDepVersions);
}
