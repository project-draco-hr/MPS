{
  assertCanChange();
  ModuleDescriptor md=getModuleDescriptor();
  if (md == null) {
    return;
  }
  Map<SLanguage,Integer> oldLanguageVersions=md.getLanguageVersions();
  Map<SLanguage,Integer> newLanguageVersions=new HashMap<SLanguage,Integer>();
  LinkedHashSet<SLanguage> usedLanguages=new LinkedHashSet<SLanguage>();
  LinkedHashSet<SModuleReference> devkits=new LinkedHashSet<SModuleReference>();
  collectLanguagesAndDevkits(usedLanguages,devkits);
  final Set<SLanguage> allUsedLanguages=new SLanguageHierarchy(usedLanguages).getExtended();
  if (!md.hasLanguageVersions()) {
    for (    SLanguage lang : allUsedLanguages) {
      newLanguageVersions.put(lang,0);
    }
    md.getUsedDevkits().addAll(devkits);
    md.setHasLanguageVersions(true);
  }
 else {
    for (    SLanguage lang : allUsedLanguages) {
      if (oldLanguageVersions.containsKey(lang)) {
        newLanguageVersions.put(lang,oldLanguageVersions.get(lang));
      }
 else {
        int currentVersion=lang.getLanguageVersion();
        for (        SModel m : getModels()) {
          SModelInternal modelInternal=(SModelInternal)m;
          if (!modelInternal.importedLanguageIds().contains(lang))           continue;
          int modelVer=modelInternal.getLanguageImportVersion(lang);
          if (modelVer == -1)           continue;
          if (modelInternal.importedLanguageIds().contains(lang) && modelVer != currentVersion) {
            LOG.error("Could not update used language versions. Language " + lang + " has current version "+ currentVersion+ " while model "+ m.getModelName()+ " uses this language with version "+ modelVer);
          }
        }
        newLanguageVersions.put(lang,currentVersion);
        if (md.hasDependencyVersions()) {
          setChanged();
        }
      }
    }
    if (!md.getUsedDevkits().containsAll(devkits)) {
      md.getUsedDevkits().addAll(devkits);
      setChanged();
    }
    if (oldLanguageVersions.size() != newLanguageVersions.size()) {
      if (md.hasDependencyVersions()) {
        setChanged();
      }
    }
  }
  oldLanguageVersions.clear();
  oldLanguageVersions.putAll(newLanguageVersions);
}
