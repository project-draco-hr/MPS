{
  final Wrappers._T<Iterable<SModule>> _modules=new Wrappers._T<Iterable<SModule>>(modules);
  final Wrappers._T<Iterable<SModel>> result=new Wrappers._T<Iterable<SModel>>(null);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      Project prj : projects) {
        if (isWholeProject(prj)) {
          _modules.value=Sequence.fromIterable(_modules.value).concat(Sequence.fromIterable(prj.getModules()));
        }
 else         if (!(((FileMPSProject)prj).getDescriptor().getTestConfigurations().isEmpty())) {
          for (          BaseTestConfiguration tconf : ((FileMPSProject)prj).getDescriptor().getTestConfigurations()) {
            try {
              result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable((Iterable<SModel>)tconf.getGenParams(prj,true).getModelDescriptors()));
            }
 catch (            IllegalGeneratorConfigurationException e) {
              log("Error while reading configuration of project " + prj.getName(),e);
            }
          }
        }
 else {
          warning("No test configurations for project " + prj.getName());
        }
      }
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(_modules.value).translate(new ITranslator2<SModule,SModel>(){
        public Iterable<SModel> translate(        SModule m){
          return m.getModels();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(_modules.value).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule it){
          return it instanceof Language;
        }
      }
).translate(new ITranslator2<SModule,Generator>(){
        public Iterable<Generator> translate(        SModule it){
          return ((Language)it).getGenerators();
        }
      }
).translate(new ITranslator2<Generator,SModel>(){
        public Iterable<SModel> translate(        Generator gen){
          return gen.getOwnModelDescriptors();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(models));
    }
  }
);
  return new ModelsToResources(context,Sequence.fromIterable(result.value).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel smd){
      return GenerationFacade.canGenerate(smd);
    }
  }
)).resources(false);
}
