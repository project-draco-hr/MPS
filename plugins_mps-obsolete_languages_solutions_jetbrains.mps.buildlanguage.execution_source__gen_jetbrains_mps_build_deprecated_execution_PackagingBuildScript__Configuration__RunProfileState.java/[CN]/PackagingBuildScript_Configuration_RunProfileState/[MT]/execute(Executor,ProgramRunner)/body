{
  Project project=myEnvironment.getProject();
  String options=myRunConfiguration.getSettings().getAntOptions();
  final Wrappers._boolean compile=new Wrappers._boolean();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      compile.value=SPropertyOperations.getBoolean(SNodeOperations.cast(myRunConfiguration.getNode().getNode(),"jetbrains.mps.build.packaging.structure.Layout"),"compile");
    }
  }
);
  if (compile.value) {
    if (!(new File(Java_Command.getJdkHome() + File.separator + "lib"+ File.separator+ "tools.jar").exists())) {
      options=((StringUtils.isEmpty(options) ? "" : options + " ")) + "-lib" + " "+ CommonPaths.getToolsJar();
    }
  }
{
    ProcessHandler _processHandler=new Ant_Command().setAntLocation_String((myRunConfiguration.getSettings().getUseOtherAntLocation() ? myRunConfiguration.getSettings().getOtherAntLocation() : null)).setOptions_String(options).createProcess(GenerateBuildUtil.getGeneratedFilePath(myRunConfiguration.getConfiguration()));
    final ConsoleView _consoleView=ConsoleCreator.createConsoleView(project,false);
    _processHandler.addProcessListener(new ConsoleProcessListener(_consoleView));
    return new DefaultExecutionResult(_processHandler,new DefaultExecutionConsole(_consoleView.getComponent(),new _FunctionTypes._void_P0_E0(){
      public void invoke(){
        _consoleView.dispose();
      }
    }
));
  }
}
