{
  List<SNode> visitedClassifiers=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> concretes=ListSequence.fromList(new LinkedList<SNode>());
  ListSequence.fromList(concretes).addElement(concrete);
  SNode resType=type;
  while (!(ListSequence.fromList(concretes).isEmpty())) {
    SNode ct=SNodeOperations.as(ListSequence.fromList(concretes).removeElementAt(0),"jetbrains.mps.baseLanguage.structure.ClassifierType");
    if (ListSequence.fromList(visitedClassifiers).contains(SLinkOperations.getTarget(ct,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"))) || ListSequence.fromList(SLinkOperations.getChildren(ct,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).isEmpty()) {
      continue;
    }
    ListSequence.fromList(visitedClassifiers).addElement(SLinkOperations.getTarget(ct,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")));
    for (    SNode sup : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(ct)) {
{
        IMatchingPattern pattern_zgotlq_a0d0e0g=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType");
        SNode coercedNode_zgotlq_a0d0e0g=TypeChecker.getInstance().getRuntimeSupport().coerce_(sup,pattern_zgotlq_a0d0e0g);
        if (coercedNode_zgotlq_a0d0e0g != null) {
          ListSequence.fromList(concretes).addElement(coercedNode_zgotlq_a0d0e0g);
        }
 else {
        }
      }
    }
    resType=resolveType(resType,ct);
    if (ListSequence.fromList(SNodeOperations.getDescendants(resType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).isEmpty()) {
      break;
    }
  }
  return resType;
}
