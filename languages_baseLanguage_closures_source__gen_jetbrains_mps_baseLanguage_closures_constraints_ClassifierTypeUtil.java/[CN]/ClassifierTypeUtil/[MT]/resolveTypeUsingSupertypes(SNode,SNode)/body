{
  List<SNode> visitedClassifiers=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> concretes=ListSequence.fromList(new LinkedList<SNode>());
  ListSequence.fromList(concretes).addElement(concrete);
  SNode resType=type;
  while (!(ListSequence.fromList(concretes).isEmpty())) {
    SNode ct=SNodeOperations.as(ListSequence.fromList(concretes).removeElementAt(0),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType"));
    if (ListSequence.fromList(visitedClassifiers).contains(SLinkOperations.getTarget(ct,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"))) || ListSequence.fromList(SLinkOperations.getChildren(ct,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).isEmpty()) {
      continue;
    }
    ListSequence.fromList(visitedClassifiers).addElement(SLinkOperations.getTarget(ct,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")));
    for (    SNode sup : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(ct)) {
{
        IMatchingPattern pattern_zgotlq_a0d0e0h=HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType"));
        SNode coercedNode_zgotlq_a0d0e0h=TypeChecker.getInstance().getRuntimeSupport().coerce_(sup,pattern_zgotlq_a0d0e0h);
        if (coercedNode_zgotlq_a0d0e0h != null) {
          ListSequence.fromList(concretes).addElement(coercedNode_zgotlq_a0d0e0h);
        }
 else {
        }
      }
    }
    resType=resolveType(resType,ct);
    if (ListSequence.fromList(SNodeOperations.getNodeDescendants(resType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),false,new SAbstractConcept[]{})).isEmpty()) {
      break;
    }
  }
  return resType;
}
