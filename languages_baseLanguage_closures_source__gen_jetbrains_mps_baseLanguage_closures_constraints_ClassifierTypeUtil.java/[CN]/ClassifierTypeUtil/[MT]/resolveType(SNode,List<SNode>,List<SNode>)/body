{
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.TypeVariableReference") && ListSequence.fromList(actTypes).isNotEmpty()) {
    int idx=0;
    for (    SNode tvd : vars) {
      if (tvd == SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false) && idx < ListSequence.fromList(actTypes).count()) {
        return SNodeOperations.copyNode(getTypeCoercedToClassifierType(ListSequence.fromList(actTypes).getElement(idx)));
      }
      idx++;
    }
  }
 else   if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
    for (    SNode pt : SLinkOperations.getTargets(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)) {
      SNode rt=resolveType(pt,actTypes,vars);
      if (pt != rt) {
        SNodeOperations.replaceWithAnother(pt,rt);
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
    SNode bound=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true);
    SNode rbound=resolveType(bound,actTypes,vars);
    if (bound != rbound) {
      SNodeOperations.replaceWithAnother(bound,rbound);
    }
  }
 else   if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
    SNode bound=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.LowerBoundType"),"bound",true);
    SNode rbound=resolveType(bound,actTypes,vars);
    if (bound != rbound) {
      SNodeOperations.replaceWithAnother(bound,rbound);
    }
  }
  return type;
}
