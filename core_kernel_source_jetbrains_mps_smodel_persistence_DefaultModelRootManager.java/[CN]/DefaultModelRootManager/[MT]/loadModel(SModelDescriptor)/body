{
  if (!modelDescriptor.getModelFile().isReadOnly()) {
    final File file=FileSystem.toFile(modelDescriptor.getModelFile());
    if (!file.exists()) {
      return new SModel(modelDescriptor.getSModelReference());
    }
  }
  if (ApplicationLevelVcsManager.instance().isInConflict(modelDescriptor,modelDescriptor.needsReloading())) {
    return handleExceptionDuringModelRead(modelDescriptor,new ConflictModelException(modelDescriptor));
  }
  SModel model;
  try {
    model=ModelPersistence.readModel(modelDescriptor.getModelFile());
  }
 catch (  ModelFileReadException t) {
    return handleExceptionDuringModelRead(modelDescriptor,t);
  }
  boolean needToSave=false;
  if (model.getSModelReference().getSModelId() == null) {
    model.changeModelReference(modelDescriptor.getSModelReference());
    needToSave=true;
  }
  if (model.updateSModelReferences()) {
    needToSave=true;
  }
  if (needToSave && !modelDescriptor.getModelFile().isReadOnly()) {
    ModelPersistence.saveModel(model,modelDescriptor.getModelFile());
  }
  LOG.assertLog(model.getSModelReference().equals(modelDescriptor.getSModelReference()),"\nError loading model from file: \"" + modelDescriptor.getModelFile() + "\"\n"+ "expected model UID     : \""+ modelDescriptor.getSModelReference()+ "\"\n"+ "but was UID            : \""+ model.getSModelReference()+ "\"\n"+ "the model will not be available.\n"+ "Make sure that all project's roots and/or the model namespace is correct");
  return model;
}
