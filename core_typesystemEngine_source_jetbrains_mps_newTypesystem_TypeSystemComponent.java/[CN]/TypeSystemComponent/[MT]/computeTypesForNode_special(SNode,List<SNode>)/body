{
  SNode type=null;
  SNode prevNode=null;
  SNode node=initialNode;
  while (node != null) {
    List<SNode> additionalNodes=new ArrayList<SNode>(givenAdditionalNodes);
    if (prevNode != null) {
      additionalNodes.add(prevNode);
    }
    computeTypes(node,false,false,additionalNodes,false,initialNode);
    type=typeCalculated(initialNode);
    if (type == null) {
      if (node.isRoot()) {
        computeTypes(node,true,true,new ArrayList<SNode>(0),true,initialNode);
        type=getType(initialNode);
        return type;
      }
      prevNode=node;
      node=node.getParent();
    }
 else {
      return type;
    }
  }
  return type;
}
