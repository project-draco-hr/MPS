{
  super("Remove Built-In Variables");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove Built-In Variables From Build Scripts And Uses Declarations From Accessories Instead";
    }
    public String getAdditionalInfo(){
      return "Remove Built-In Variables From Build Scripts And Uses Declarations From Accessories Instead";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.build.packaging.structure.MPSLayout";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SLinkOperations.getTargets(node,"builtInVariable",true)).isNotEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      for (      final SNode ref : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.build.packaging.structure.VariableReference",false,new String[]{}))) {
        if (ListSequence.fromList(SLinkOperations.getTargets(node,"builtInVariable",true)).contains(SLinkOperations.getTarget(ref,"variable",false))) {
          SNode newVariable=ListSequence.fromList(Variable_Behavior.getDefaultVariables_7323449223785133410()).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode var){
              return SPropertyOperations.getString(var,"name").equals(SPropertyOperations.getString(SLinkOperations.getTarget(ref,"variable",false),"name"));
            }
          }
);
          SLinkOperations.setTarget(ref,"variable",newVariable,false);
        }
      }
      ListSequence.fromList(SLinkOperations.getTargets(node,"builtInVariable",true)).clear();
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
