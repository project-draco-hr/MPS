{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("declaration",new BaseReferenceConstraintsDescriptor("declaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.test.structure.TestNode",false,false) != null) {
            return new ArrayList<SNode>();
          }
          SNode test=SNodeOperations.getAncestorWhereConceptInList(_context.getEnclosingNode(),new String[]{"jetbrains.mps.lang.test.structure.NodesTestCase","jetbrains.mps.lang.test.structure.EditorTestCase"},true,false);
          List<SNode> result=new ArrayList<SNode>();
          if (test != null) {
            for (            SNode node : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(test,"jetbrains.mps.lang.test.structure.TestNodeAnnotation",true,new String[]{}))) {
              ListSequence.<SNode>fromList(result).addElement(node);
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_i5q66v_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
