{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 1:
  return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 2:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 3:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 4:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 5:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractRule",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 6:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 7:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AddDependencyStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 8:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 9:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 10:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.AssertStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.ReportErrorStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageStatement","jetbrains.mps.lang.typesystem.structure.ReportErrorStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 11:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CaretPositionOperation",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.lang.core.structure.BaseConcept"});
case 12:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ChildTypeRestriction",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 13:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ChildTypeRestrictionReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 14:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CoerceExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 15:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CoerceStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 16:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CoerceStrongExpression",new String[]{"jetbrains.mps.lang.typesystem.structure.CoerceExpression"},new String[]{"jetbrains.mps.lang.typesystem.structure.CoerceExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 17:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ComparisonRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule","jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 18:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptClauseLinkInfo",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 19:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_BlockingComputationNode",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 20:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_ContextNode",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 21:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_DependentComputationNode",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 22:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_EditorContext",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 23:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Role",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 24:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Selection",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 25:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_isAggregation",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 26:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_node",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 27:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_var",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 28:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptReference",new String[]{"jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition"},new String[]{"jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 29:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ConceptTypeClause",new String[]{"jetbrains.mps.lang.typesystem.structure.TypeClause"},new String[]{"jetbrains.mps.lang.typesystem.structure.TypeClause"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 30:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement","jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 31:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatementStrong",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement","jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 32:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateEquationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 33:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement","jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 34:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement","jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 35:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement","jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 36:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement","jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 37:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.DefaultGroupReference",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 38:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.Dependency",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 39:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.DependentComputationItem",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 40:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_ApplicableBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 41:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_BlockingBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 42:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_FindMasterBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 43:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ErrorInfoExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 44:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.FindSourceBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 45:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.FindSourceBlockParameter",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 46:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.GetOperationType",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 47:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode",new String[]{},new String[]{},new String[]{});
case 48:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes",new String[]{},new String[]{},new String[]{});
case 49:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ImmediateSupertypesExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 50:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InequationReference",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 51:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InequationReplacementRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule","jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 52:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InequationsGroup",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 53:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InequationsGroupReference",new String[]{"jetbrains.mps.lang.typesystem.structure.DefaultGroupReference"},new String[]{"jetbrains.mps.lang.typesystem.structure.DefaultGroupReference"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 54:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InequationsGroupsRegistry",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 55:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InferenceRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule","jetbrains.mps.lang.typesystem.structure.AbstractRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 56:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.InfoStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 57:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.IsReplacementRuleApplicable_ConceptFunction",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 58:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.IsStrongSubtypeExpression",new String[]{"jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression"},new String[]{"jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 59:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 60:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.JoinContainer",new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
case 61:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.JoinType",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 62:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.LeftOperandType_parameter",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 63:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.LinkPatternVariableReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 64:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ListVarDeclaration",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.INamedConcept"});
case 65:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MatchStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 66:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MatchStatementItem",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 67:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MeetContainer",new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
case 68:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MeetType",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 69:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MessageStatement",new String[]{},new String[]{},new String[]{});
case 70:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MessageTarget",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 71:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop",new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"});
case 72:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoopVariable",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 73:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.NodeInfo",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 74:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.Node_InferTypeOperation",new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"});
case 75:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.Node_TypeOperation",new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"});
case 76:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.NonTypesystemRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule","jetbrains.mps.lang.typesystem.structure.AbstractRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 77:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.NormalTypeClause",new String[]{"jetbrains.mps.lang.typesystem.structure.TypeClause"},new String[]{"jetbrains.mps.lang.typesystem.structure.TypeClause"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 78:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OperationContextExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 79:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.Operation_parameter",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 80:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OrStatement",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 81:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OriginalNodeId",new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
case 82:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OverloadedOpIsApplicableFunction",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 83:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 84:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 85:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 86:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 87:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.PatternCondition",new String[]{"jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition"},new String[]{"jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 88:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.PatternVariableReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 89:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.Processed",new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"});
case 90:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.PropertyMessageTarget",new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 91:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.PropertyNameTarget",new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 92:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.PropertyPatternVariableReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 93:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixArgument",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 94:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixArgumentReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 95:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixDescriptionBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 96:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixExecuteBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 97:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixField",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 98:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixFieldReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 99:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.QuickFixSetSelectionBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 100:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ReferenceMessageTarget",new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 101:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ReferenceRoleTarget",new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageTarget"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 102:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 103:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 104:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.RightOperandType_parameter",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
case 105:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.RuntimeErrorType",new String[]{"jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable"},new String[]{"jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 106:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.RuntimeHoleType",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 107:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.RuntimeListVariable",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 108:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 109:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.SelectionType",new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 110:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.SubtypingRule",new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractRule","jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule","jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"});
case 111:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypeCheckerAccessExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 112:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypeClause",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 113:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypeOfExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 114:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.INamedConcept"});
case 115:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypeVarReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 116:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypesystemIntention",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 117:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypesystemIntentionArgument",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 118:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 119:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.VariableConverterItem",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 120:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 121:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock",new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
case 122:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.VariableConvertersContainer",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 123:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.WarningStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.lang.typesystem.structure.MessageStatement"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 124:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.WasSelectedNodeOperation",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.lang.core.structure.BaseConcept"});
case 125:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.Closureoid"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Closureoid","jetbrains.mps.baseLanguage.structure.Statement"});
case 126:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableDeclaration",new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration"});
case 127:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
default :
return null;
}
}
