{
  final MergeRequestImpl mrequest=(MergeRequestImpl)request;
  try {
    final Wrappers._T<VirtualFile> file=new Wrappers._T<VirtualFile>(check_7qvsj_a0a0b0d(mrequest.getResultContent()));
    if (file.value == null) {
      if (LOG_705910402.isEnabledFor(Level.ERROR)) {
        LOG_705910402.error("No file");
      }
      file.value=LocalFileSystem.getInstance().findFileByPath("/");
    }
    final IFile iFile=FileSystem.getInstance().getFileByPath(file.value.getPath());
    final File backupFile=MergeBackupUtil.zipModel(request.getContents(),file.value);
    DiffContent[] contents=mrequest.getContents();
    final Wrappers._T<String> ext=new Wrappers._T<String>(file.value.getExtension());
    if (FilePerRootDataSource.isPerRootPersistenceFile(iFile)) {
      ext.value=MPSExtentions.MODEL;
    }
    final SModel baseModel=PersistenceUtil.loadModel(contents[MergeConstants.ORIGINAL].getDocument().getText(),ext.value);
    SModel mineModel=loadModel(contents[MergeConstants.CURRENT].getBytes(),ext.value);
    SModel newModel=loadModel(contents[MergeConstants.LAST_REVISION].getBytes(),ext.value);
    if (baseModel == null || mineModel == null || newModel == null) {
      if (LOG_705910402.isEnabledFor(Level.WARN)) {
        LOG_705910402.warn("Couldn't read model, invoking text merge");
      }
      super.show(request);
      return;
    }
    final MergeModelsDialog dialog=new MergeModelsDialog(baseModel,mineModel,newModel,mrequest);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.toFront();
      }
    }
);
    ISaveMergedModel saver=new ISaveMergedModel(){
      public boolean save(      MergeModelsDialog parent,      final SModel resultModel){
        final Wrappers._boolean closeDialog=new Wrappers._boolean(true);
        final Wrappers._T<String> resultContent=new Wrappers._T<String>(null);
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            try {
              resultContent.value=ModelMergeTool.saveModel(resultModel,iFile,file.value,ext.value);
            }
 catch (            Throwable error) {
              if (baseModel instanceof PersistenceVersionAware && resultModel instanceof PersistenceVersionAware && ((PersistenceVersionAware)baseModel).getPersistenceVersion() == 8 && ((PersistenceVersionAware)resultModel).getPersistenceVersion() == 9) {
                String message="The merged model cannot be saved using the new 9th persistence." + " The most-likely reason: one of the languages used in this model has not yet been generated." + " You can revert the changes, merge and generate the used languages first and only then merge this model again."+ " Alternatively, you can save the model in old 8th persistence version and then migrate it to the latest persistence, after all used languages will have been merged manually.";
                int result=Messages.showYesNoCancelDialog(dialog.getContentPane(),message,"Save model " + SModelOperations.getModelName(resultModel),"Save in 8th persistence","Revert changes","Return to merge",Messages.getWarningIcon());
switch (result) {
case Messages.YES:
                  ((PersistenceVersionAware)resultModel).setPersistenceVersion(8);
                resultContent.value=ModelMergeTool.saveModel(resultModel,iFile,file.value,ext.value);
              break;
case Messages.NO:
            resultContent.value=null;
          break;
default :
        closeDialog.value=false;
      break;
  }
}
 else {
  if (LOG_705910402.isEnabledFor(Level.ERROR)) {
    LOG_705910402.error("Cannot save merge resulting model " + SModelOperations.getModelName(resultModel),error);
  }
}
}
if (resultContent.value != null) {
setResolved(mrequest,resultContent.value);
MergeBackupUtil.packMergeResult(backupFile,file.value.getName(),resultContent.value);
}
}
}
);
return closeDialog.value;
}
}
;
dialog.setSaver(saver);
dialog.show();
}
 catch (IOException e) {
LOG.error(null,e);
}
}
