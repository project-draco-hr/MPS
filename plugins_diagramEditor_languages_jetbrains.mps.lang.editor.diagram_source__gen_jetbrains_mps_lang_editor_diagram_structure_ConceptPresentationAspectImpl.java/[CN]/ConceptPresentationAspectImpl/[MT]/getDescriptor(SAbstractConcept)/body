{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("6106f611-7a74-42d1-80de-edc5c602bfd1"),"jetbrains.mps.lang.editor.diagram")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractArgument;
case 1:
  return props_AbstractDiagramCreation;
case 2:
return props_AbstractFigureReference;
case 3:
return props_ActionGroup;
case 4:
return props_ActionReference;
case 5:
return props_AttributedFigureReference;
case 6:
return props_BLQueryArgument;
case 7:
return props_CellModel_Diagram;
case 8:
return props_CellModel_DiagramConnector;
case 9:
return props_CellModel_DiagramNode;
case 10:
return props_CellModel_DiagramPort;
case 11:
return props_ConnectionEnd;
case 12:
return props_ConnectionEndBLQuery;
case 13:
return props_CreationActionReference;
case 14:
return props_CustomElementReference;
case 15:
return props_DiagramConnectorCanCreateHandler;
case 16:
return props_DiagramConnectorCreation;
case 17:
return props_DiagramConnectorCreationHandler;
case 18:
return props_DiagramElement;
case 19:
return props_DiagramElementBLQuery;
case 20:
return props_DiagramElementCreationHandler;
case 21:
return props_DiagramElementsCreation;
case 22:
return props_ExternalFigureReference;
case 23:
return props_FigureParameterMapping;
case 24:
return props_FromIdFunctionParameter;
case 25:
return props_FromNodeFunctionParameter;
case 26:
return props_LinkArgument;
case 27:
return props_NodeFunctionParameter;
case 28:
return props_Palette;
case 29:
return props_PaletteElement;
case 30:
return props_PropertyArgument;
case 31:
return props_Separator;
case 32:
return props_StubCellModel_Diagram;
case 33:
return props_StubCellModel_DiagramConnector;
case 34:
return props_StubCellModel_DiagramNode;
case 35:
return props_StubCellModel_DiagramPort;
case 36:
return props_ThisEditorNodeExpression;
case 37:
return props_ToIdFunctionParameter;
case 38:
return props_ToNodeFunctionParameter;
case 39:
return props_XFunctionParameter;
case 40:
return props_YFunctionParameter;
}
throw new IllegalStateException();
}
