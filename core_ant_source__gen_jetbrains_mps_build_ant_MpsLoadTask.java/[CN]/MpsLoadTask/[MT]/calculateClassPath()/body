{
  File[] pathsToLook;
  if (absolutePath("classes").exists()) {
    pathsToLook=new File[]{absolutePath("core"),absolutePath("core/ant/classes"),absolutePath("lib"),absolutePath("plugins/mpsbuild/languages/solutions/jetbrains.mps.build.mps.runtime/classes_gen"),absolutePath("languages/baseLanguage/closures/runtime/classes"),absolutePath("languages/baseLanguage/collections/runtime/classes"),absolutePath("languages/baseLanguage/baseLanguage/solutions/jetbrains.mps.baseLanguage.search/classes"),absolutePath("workbench/typesystemUi/classes"),absolutePath("MPSPlugin/apiclasses")};
  }
 else {
    pathsToLook=new File[]{absolutePath("lib"),absolutePath("plugin"),absolutePath("plugins")};
  }
  Set<File> classPaths=new LinkedHashSet<File>();
  for (  File path : pathsToLook) {
    if (!(path.exists()) || (!(path.isDirectory()) && !(path.getAbsolutePath().endsWith(".jar")))) {
      throw new BuildException(myMpsHome + " is invalid MPS home path: path " + path+ " does not exist or is not a directory or a jar file.");
    }
 else     if (!(path.isDirectory())) {
      classPaths.add(path.getAbsoluteFile());
    }
 else {
      gatherAllClassesAndJarsUnder(path,classPaths);
    }
  }
  File mpsClasses=new File(myMpsHome + File.separator + "classes");
  if (mpsClasses.exists()) {
    classPaths.add(mpsClasses);
  }
  return classPaths;
}
