{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("watchable",new BaseReferenceConstraintsDescriptor("watchable",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode container : SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.debugger.java.customViewers.structure.CustomWatchablesContainer")) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(container,"watchable",true)));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_fcwqku_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
