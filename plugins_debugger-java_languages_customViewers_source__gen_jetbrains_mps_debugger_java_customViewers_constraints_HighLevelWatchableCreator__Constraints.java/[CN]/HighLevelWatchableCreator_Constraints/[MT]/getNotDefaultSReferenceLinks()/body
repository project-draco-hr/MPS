{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xfa8aeae94df94e13L,0xbfb19b04c67ddb77L,0x9a1514044030ceL,0x9a151404409225L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xfa8aeae94df94e13L,0xbfb19b04c67ddb77L,0x9a1514044030ceL,0x9a151404409225L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode container : SModelOperations.roots(_context.getModel(),MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L,0xbfb19b04c67ddb77L,0x47047b766556943dL,"jetbrains.mps.debugger.java.customViewers.structure.CustomWatchablesContainer"))) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getChildren(container,MetaAdapterFactory.getContainmentLink(0xfa8aeae94df94e13L,0xbfb19b04c67ddb77L,0x47047b766556943dL,0x47047b766556943eL,"watchable"))));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_fcwqku_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
