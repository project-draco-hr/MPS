{
  String graphString="4 4  0 1  1 2  2 3  3 0";
  Graph graph=GraphIO.scanGraph(new Scanner(graphString));
  Map<Edge,Integer> low=MapSequence.fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(low,graph.getNode(0),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(low,graph.getNode(1),ListSequence.fromListAndArray(new ArrayList<Integer>(),2));
  setEdgesMap(low,graph.getNode(2),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(low,graph.getNode(3),ListSequence.fromListAndArray(new ArrayList<Integer>(),2));
  Map<Edge,Integer> capacity=MapSequence.fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(capacity,graph.getNode(0),ListSequence.fromListAndArray(new ArrayList<Integer>(),10));
  setEdgesMap(capacity,graph.getNode(1),ListSequence.fromListAndArray(new ArrayList<Integer>(),10));
  setEdgesMap(capacity,graph.getNode(2),ListSequence.fromListAndArray(new ArrayList<Integer>(),10));
  setEdgesMap(capacity,graph.getNode(3),ListSequence.fromListAndArray(new ArrayList<Integer>(),10));
  Map<Edge,Integer> cost=MapSequence.fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(cost,graph.getNode(0),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(1),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(2),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(3),ListSequence.fromListAndArray(new ArrayList<Integer>(),1));
  Map<Edge,Integer> circulation=test(graph,low,capacity,cost);
  Assert.assertTrue(getFlowCost(circulation,cost) == 8);
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    Assert.assertTrue(MapSequence.fromMap(circulation).get(edge) == 2);
  }
}
