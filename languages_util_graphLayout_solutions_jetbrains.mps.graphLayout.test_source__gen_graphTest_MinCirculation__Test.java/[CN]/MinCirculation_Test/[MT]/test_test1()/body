{
  String graphString="4 4  0 1  1 2  2 3  3 0";
  Graph graph=GraphIO.scanGraph(new Scanner(graphString));
  Map<Edge,Integer> low=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(low,graph.getNode(0),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(low,graph.getNode(1),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(low,graph.getNode(2),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(low,graph.getNode(3),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  Map<Edge,Integer> capacity=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(capacity,graph.getNode(0),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(capacity,graph.getNode(1),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(capacity,graph.getNode(2),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(capacity,graph.getNode(3),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  Map<Edge,Integer> cost=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  setEdgesMap(cost,graph.getNode(0),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(1),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(2),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  setEdgesMap(cost,graph.getNode(3),ListSequence.<Integer>fromListAndArray(new ArrayList<Integer>(),1));
  Map<Edge,Integer> circulation=test(graph,low,capacity,cost);
  Assert.assertTrue(getFlowCost(circulation,cost) == 4);
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Assert.assertTrue(MapSequence.<Edge,Integer>fromMap(circulation).get(edge) == 1);
  }
}
