{
  Project project=ProjectHelper.toIdeaProject(context.getProject());
  SModel targetModel=node.getModel();
  if ("java_stub".equals(targetModel.getStereotype())) {
    if (SNodeUtil.isInstanceOf(node,SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.Classifier"))) {
      PsiClass cls=findClass(node,project);
      if (cls != null) {
        cls.navigate(true);
        return true;
      }
    }
 else {
      if (SNodeUtil.isInstanceOf(node,SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"))) {
        PsiMethod constr=findConstructor(node,project);
        if (constr != null) {
          constr.navigate(true);
          return true;
        }
      }
 else {
        if (SNodeUtil.isInstanceOf(node,SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) && SNodeUtil.isInstanceOf(node.getParent(),SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.Classifier"))) {
          PsiMethod method=findMethod(node,project);
          if (method != null) {
            method.navigate(true);
            return true;
          }
        }
 else {
          if ((SNodeUtil.isInstanceOf(node,SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration")) || SNodeUtil.isInstanceOf(node,SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) && SNodeUtil.isInstanceOf(node.getParent(),jetbrains.mps.util.SNodeOperations.getConcept("jetbrains.mps.baseLanguage.structure.Classifier"))) {
            PsiField field=findField(node,project);
            if (field != null) {
              field.navigate(true);
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
