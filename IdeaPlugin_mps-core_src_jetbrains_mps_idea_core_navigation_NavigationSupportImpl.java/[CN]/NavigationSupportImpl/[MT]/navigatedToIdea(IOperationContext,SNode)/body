{
  Project project=ProjectHelper.toIdeaProject(context.getProject());
  SModel targetModel=node.getModel();
  System.out.println("DEBUG: We're navigating --- " + node.getConcept().getName() + " "+ targetModel.getStereotype());
  if ("java_stub".equals(targetModel.getStereotype())) {
    if (node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Classifier")) {
      System.out.println("DEBUG: it's our case");
      PsiClass cls=findClass(node,project);
      if (cls != null) {
        cls.navigate(true);
        return true;
      }
    }
 else     if (node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      PsiMethod constr=findConstructor(node,project);
      if (constr != null) {
        constr.navigate(true);
        return true;
      }
    }
 else     if (node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && node.getParent().isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Classifier")) {
      PsiMethod method=findMethod(node,project);
      if (method != null) {
        method.navigate(true);
        return true;
      }
    }
 else     if ((node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration") || node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) && node.getParent().isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Classifier")) {
      PsiField field=findField(node,project);
      if (field != null) {
        field.navigate(true);
        return true;
      }
    }
  }
  return false;
}
