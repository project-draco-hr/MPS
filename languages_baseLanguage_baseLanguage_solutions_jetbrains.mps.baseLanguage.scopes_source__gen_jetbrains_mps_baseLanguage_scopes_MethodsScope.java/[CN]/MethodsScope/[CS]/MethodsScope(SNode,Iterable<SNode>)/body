{
  nameToMethods=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode method : Sequence.fromIterable(methods)) {
    String name=SPropertyOperations.getString(method,"name");
    if (name != null) {
      if (MapSequence.fromMap(nameToMethods).containsKey(name)) {
        ListSequence.fromList(MapSequence.fromMap(nameToMethods).get(name)).addElement(method);
      }
 else {
        MapSequence.fromMap(nameToMethods).put(name,ListSequence.fromListAndArray(new ArrayList(),method));
      }
    }
  }
  boolean isStatic=Sequence.fromIterable(methods).all(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.IClassifierMember") && IClassifierMember_Behavior.call_isStatic_7405920559687241224(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.IClassifierMember"));
    }
  }
);
  if (isStatic) {
    typeBindings=new HashMap<SNode,SNode>();
  }
 else {
    SNode classifier=IClassifierType_Behavior.call_getClassifier_7405920559687237513(classifierTypeNode);
    typeBindings=((classifier != null) ? MethodResolveUtil.getTypesByTypeVars(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.Classifier"),IClassifierType_Behavior.call_getTypeParameters_7405920559687237518(classifierTypeNode)) : Collections.<SNode,SNode>emptyMap());
  }
}
