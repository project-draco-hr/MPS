{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0pg.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractContainerCreator;
      }
    break;
case 1:
  if (true) {
    return props_AbstractContainerType;
  }
break;
case 2:
if (true) {
return props_AbstractEnumeratorOperation;
}
break;
case 3:
if (true) {
return props_AbstractIteratorOperation;
}
break;
case 4:
if (true) {
return props_AbstractMappingOperation;
}
break;
case 5:
if (true) {
return props_AbstractSetOperation;
}
break;
case 6:
if (true) {
return props_AddAllElementsOperation;
}
break;
case 7:
if (true) {
return props_AddAllSetElementsOperation;
}
break;
case 8:
if (true) {
return props_AddElementOperation;
}
break;
case 9:
if (true) {
return props_AddFirstElementOperation;
}
break;
case 10:
if (true) {
return props_AddLastElementOperation;
}
break;
case 11:
if (true) {
return props_AddSetElementOperation;
}
break;
case 12:
if (true) {
return props_AllConstant;
}
break;
case 13:
if (true) {
return props_AllOperation;
}
break;
case 14:
if (true) {
return props_AlsoSortOperation;
}
break;
case 15:
if (true) {
return props_AnyOperation;
}
break;
case 16:
if (true) {
return props_AsSequenceOperation;
}
break;
case 17:
if (true) {
return props_AsSynchronizedOperation;
}
break;
case 18:
if (true) {
return props_AsUnmodifiableOperation;
}
break;
case 19:
if (true) {
return props_BinaryOperation;
}
break;
case 20:
if (true) {
return props_ChunkOperation;
}
break;
case 21:
if (true) {
return props_ClearAllElementsOperation;
}
break;
case 22:
if (true) {
return props_ClearSetOperation;
}
break;
case 23:
if (true) {
return props_CollectionType;
}
break;
case 24:
if (true) {
return props_ComparatorSortOperation;
}
break;
case 25:
if (true) {
return props_ConcatOperation;
}
break;
case 26:
if (true) {
return props_ContainerIteratorType;
}
break;
case 27:
if (true) {
return props_ContainsAllOperation;
}
break;
case 28:
if (true) {
return props_ContainsKeyOperation;
}
break;
case 29:
if (true) {
return props_ContainsOperation;
}
break;
case 30:
if (true) {
return props_ContainsValueOperation;
}
break;
case 31:
if (true) {
return props_CustomContainerCreator;
}
break;
case 32:
if (true) {
return props_CustomContainerDeclaration;
}
break;
case 33:
if (true) {
return props_CustomContainers;
}
break;
case 34:
if (true) {
return props_CustomMapCreator;
}
break;
case 35:
if (true) {
return props_CutOperation;
}
break;
case 36:
if (true) {
return props_DequeType;
}
break;
case 37:
if (true) {
return props_DisjunctOperation;
}
break;
case 38:
if (true) {
return props_DistinctOperation;
}
break;
case 39:
if (true) {
return props_DowncastExpression;
}
break;
case 40:
if (true) {
return props_EnumeratorType;
}
break;
case 41:
if (true) {
return props_ExcludeOperation;
}
break;
case 42:
if (true) {
return props_FindFirstOperation;
}
break;
case 43:
if (true) {
return props_FindLastOperation;
}
break;
case 44:
if (true) {
return props_FoldLeftOperation;
}
break;
case 45:
if (true) {
return props_FoldRightOperation;
}
break;
case 46:
if (true) {
return props_ForEachStatement;
}
break;
case 47:
if (true) {
return props_ForEachVariable;
}
break;
case 48:
if (true) {
return props_ForEachVariableReference;
}
break;
case 49:
if (true) {
return props_GetCurrentOperation;
}
break;
case 50:
if (true) {
return props_GetElementOperation;
}
break;
case 51:
if (true) {
return props_GetEnumeratorOperation;
}
break;
case 52:
if (true) {
return props_GetFirstOperation;
}
break;
case 53:
if (true) {
return props_GetIndexOfOperation;
}
break;
case 54:
if (true) {
return props_GetIteratorOperation;
}
break;
case 55:
if (true) {
return props_GetKeysOperation;
}
break;
case 56:
if (true) {
return props_GetLastIndexOfOperation;
}
break;
case 57:
if (true) {
return props_GetLastOperation;
}
break;
case 58:
if (true) {
return props_GetNextOperation;
}
break;
case 59:
if (true) {
return props_GetSizeOperation;
}
break;
case 60:
if (true) {
return props_GetValuesOperation;
}
break;
case 61:
if (true) {
return props_HasNextOperation;
}
break;
case 62:
if (true) {
return props_HashMapCreator;
}
break;
case 63:
if (true) {
return props_HashSetCreator;
}
break;
case 64:
if (true) {
return props_HeadListOperation;
}
break;
case 65:
if (true) {
return props_HeadMapOperation;
}
break;
case 66:
if (true) {
return props_HeadSetOperation;
}
break;
case 67:
if (true) {
return props_IApplicableToCollection;
}
break;
case 68:
if (true) {
return props_IApplicableToDeque;
}
break;
case 69:
if (true) {
return props_IApplicableToList;
}
break;
case 70:
if (true) {
return props_IApplicableToNothing;
}
break;
case 71:
if (true) {
return props_IApplicableToQueue;
}
break;
case 72:
if (true) {
return props_IApplicableToStack;
}
break;
case 73:
if (true) {
return props_ICollectionOperation;
}
break;
case 74:
if (true) {
return props_IContainerOperation;
}
break;
case 75:
if (true) {
return props_IDequeOperation;
}
break;
case 76:
if (true) {
return props_IListOperation;
}
break;
case 77:
if (true) {
return props_IQueueOperation;
}
break;
case 78:
if (true) {
return props_IStackOperation;
}
break;
case 79:
if (true) {
return props_InsertElementOperation;
}
break;
case 80:
if (true) {
return props_InternalSequenceOperation;
}
break;
case 81:
if (true) {
return props_IntersectOperation;
}
break;
case 82:
if (true) {
return props_IsEmptyOperation;
}
break;
case 83:
if (true) {
return props_IsNotEmptyOperation;
}
break;
case 84:
if (true) {
return props_IteratorType;
}
break;
case 85:
if (true) {
return props_JoinOperation;
}
break;
case 86:
if (true) {
return props_KeyAccessOperation;
}
break;
case 87:
if (true) {
return props_LinkedHashMapCreator;
}
break;
case 88:
if (true) {
return props_LinkedHashSetCreator;
}
break;
case 89:
if (true) {
return props_LinkedListCreator;
}
break;
case 90:
if (true) {
return props_LinkedListType;
}
break;
case 91:
if (true) {
return props_ListCreatorWithInit;
}
break;
case 92:
if (true) {
return props_ListElementAccessExpression;
}
break;
case 93:
if (true) {
return props_ListType;
}
break;
case 94:
if (true) {
return props_MapAsSequenceVarRef;
}
break;
case 95:
if (true) {
return props_MapClearOperation;
}
break;
case 96:
if (true) {
return props_MapElement;
}
break;
case 97:
if (true) {
return props_MapEntry;
}
break;
case 98:
if (true) {
return props_MapInitializer;
}
break;
case 99:
if (true) {
return props_MapOperation;
}
break;
case 100:
if (true) {
return props_MapOperationExpression;
}
break;
case 101:
if (true) {
return props_MapRemoveOperation;
}
break;
case 102:
if (true) {
return props_MapType;
}
break;
case 103:
if (true) {
return props_MappingType;
}
break;
case 104:
if (true) {
return props_MappingsSetOperation;
}
break;
case 105:
if (true) {
return props_MoveNextOperation;
}
break;
case 106:
if (true) {
return props_MultiForEachPair;
}
break;
case 107:
if (true) {
return props_MultiForEachStatement;
}
break;
case 108:
if (true) {
return props_MultiForEachVariable;
}
break;
case 109:
if (true) {
return props_MultiForEachVariableReference;
}
break;
case 110:
if (true) {
return props_NoArgumentsSequenceOperation;
}
break;
case 111:
if (true) {
return props_OfTypeOperation;
}
break;
case 112:
if (true) {
return props_PageOperation;
}
break;
case 113:
if (true) {
return props_PeekOperation;
}
break;
case 114:
if (true) {
return props_PopOperation;
}
break;
case 115:
if (true) {
return props_PriorityQueueCreator;
}
break;
case 116:
if (true) {
return props_PushOperation;
}
break;
case 117:
if (true) {
return props_PutAllOperation;
}
break;
case 118:
if (true) {
return props_QueueType;
}
break;
case 119:
if (true) {
return props_ReduceLeftOperation;
}
break;
case 120:
if (true) {
return props_ReduceRightOperation;
}
break;
case 121:
if (true) {
return props_RemoveAllElementsOperation;
}
break;
case 122:
if (true) {
return props_RemoveAllSetElementsOperation;
}
break;
case 123:
if (true) {
return props_RemoveAtElementOperation;
}
break;
case 124:
if (true) {
return props_RemoveElementOperation;
}
break;
case 125:
if (true) {
return props_RemoveFirstElementOperation;
}
break;
case 126:
if (true) {
return props_RemoveLastElementOperation;
}
break;
case 127:
if (true) {
return props_RemoveOperation;
}
break;
case 128:
if (true) {
return props_RemoveSetElementOperation;
}
break;
case 129:
if (true) {
return props_RemoveWhereOperation;
}
break;
case 130:
if (true) {
return props_ReverseOperation;
}
break;
case 131:
if (true) {
return props_SelectOperation;
}
break;
case 132:
if (true) {
return props_SequenceCreator;
}
break;
case 133:
if (true) {
return props_SequenceOperation;
}
break;
case 134:
if (true) {
return props_SequenceType;
}
break;
case 135:
if (true) {
return props_SetElementOperation;
}
break;
case 136:
if (true) {
return props_SetType;
}
break;
case 137:
if (true) {
return props_SingleArgumentSequenceOperation;
}
break;
case 138:
if (true) {
return props_SingletonSequenceCreator;
}
break;
case 139:
if (true) {
return props_SkipOperation;
}
break;
case 140:
if (true) {
return props_SkipStatement;
}
break;
case 141:
if (true) {
return props_SmartClosureParameterDeclaration;
}
break;
case 142:
if (true) {
return props_SortDirection;
}
break;
case 143:
if (true) {
return props_SortOperation;
}
break;
case 144:
if (true) {
return props_SortedMapOperation;
}
break;
case 145:
if (true) {
return props_SortedMapType;
}
break;
case 146:
if (true) {
return props_SortedSetOperation;
}
break;
case 147:
if (true) {
return props_SortedSetType;
}
break;
case 148:
if (true) {
return props_StackType;
}
break;
case 149:
if (true) {
return props_StopStatement;
}
break;
case 150:
if (true) {
return props_SubListOperation;
}
break;
case 151:
if (true) {
return props_SubMapOperation;
}
break;
case 152:
if (true) {
return props_SubSetOperation;
}
break;
case 153:
if (true) {
return props_TailListOperation;
}
break;
case 154:
if (true) {
return props_TailMapOperation;
}
break;
case 155:
if (true) {
return props_TailOperation;
}
break;
case 156:
if (true) {
return props_TailSetOperation;
}
break;
case 157:
if (true) {
return props_TakeOperation;
}
break;
case 158:
if (true) {
return props_TestAddElementOperation;
}
break;
case 159:
if (true) {
return props_TestRemoveElementOperation;
}
break;
case 160:
if (true) {
return props_ToArrayOperation;
}
break;
case 161:
if (true) {
return props_ToIteratorOperation;
}
break;
case 162:
if (true) {
return props_ToListOperation;
}
break;
case 163:
if (true) {
return props_TranslateOperation;
}
break;
case 164:
if (true) {
return props_TreeMapCreator;
}
break;
case 165:
if (true) {
return props_TreeSetCreator;
}
break;
case 166:
if (true) {
return props_UnionOperation;
}
break;
case 167:
if (true) {
return props_ValueAccessOperation;
}
break;
case 168:
if (true) {
return props_VisitAllOperation;
}
break;
case 169:
if (true) {
return props_WhereOperation;
}
break;
default :
}
}
throw new IllegalStateException();
}
