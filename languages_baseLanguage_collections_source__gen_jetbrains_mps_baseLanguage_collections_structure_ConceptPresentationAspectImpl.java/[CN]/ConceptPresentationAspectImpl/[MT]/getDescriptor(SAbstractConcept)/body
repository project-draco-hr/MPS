{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("83888646-71ce-4f1c-9c53-c54016f6ad4f"),"jetbrains.mps.baseLanguage.collections")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractContainerCreator;
case 1:
  return props_AbstractContainerType;
case 2:
return props_AbstractEnumeratorOperation;
case 3:
return props_AbstractIteratorOperation;
case 4:
return props_AbstractMappingOperation;
case 5:
return props_AbstractSetOperation;
case 6:
return props_AddAllElementsOperation;
case 7:
return props_AddAllSetElementsOperation;
case 8:
return props_AddElementOperation;
case 9:
return props_AddFirstElementOperation;
case 10:
return props_AddLastElementOperation;
case 11:
return props_AddSetElementOperation;
case 12:
return props_AllConstant;
case 13:
return props_AllOperation;
case 14:
return props_AlsoSortOperation;
case 15:
return props_AnyOperation;
case 16:
return props_AsSequenceOperation;
case 17:
return props_AsSynchronizedOperation;
case 18:
return props_AsUnmodifiableOperation;
case 19:
return props_BinaryOperation;
case 20:
return props_ChunkOperation;
case 21:
return props_ClearAllElementsOperation;
case 22:
return props_ClearSetOperation;
case 23:
return props_CollectionType;
case 24:
return props_ComparatorSortOperation;
case 25:
return props_ConcatOperation;
case 26:
return props_ContainerIteratorType;
case 27:
return props_ContainsAllOperation;
case 28:
return props_ContainsKeyOperation;
case 29:
return props_ContainsOperation;
case 30:
return props_ContainsValueOperation;
case 31:
return props_CustomContainerCreator;
case 32:
return props_CustomContainerDeclaration;
case 33:
return props_CustomContainers;
case 34:
return props_CustomMapCreator;
case 35:
return props_CutOperation;
case 36:
return props_DequeType;
case 37:
return props_DisjunctOperation;
case 38:
return props_DistinctOperation;
case 39:
return props_DowncastExpression;
case 40:
return props_EnumeratorType;
case 41:
return props_ExcludeOperation;
case 42:
return props_FindFirstOperation;
case 43:
return props_FindLastOperation;
case 44:
return props_FoldLeftOperation;
case 45:
return props_FoldRightOperation;
case 46:
return props_ForEachStatement;
case 47:
return props_ForEachVariable;
case 48:
return props_ForEachVariableReference;
case 49:
return props_GetCurrentOperation;
case 50:
return props_GetElementOperation;
case 51:
return props_GetEnumeratorOperation;
case 52:
return props_GetFirstOperation;
case 53:
return props_GetIndexOfOperation;
case 54:
return props_GetIteratorOperation;
case 55:
return props_GetKeysOperation;
case 56:
return props_GetLastIndexOfOperation;
case 57:
return props_GetLastOperation;
case 58:
return props_GetNextOperation;
case 59:
return props_GetSizeOperation;
case 60:
return props_GetValuesOperation;
case 61:
return props_HasNextOperation;
case 62:
return props_HashMapCreator;
case 63:
return props_HashSetCreator;
case 64:
return props_HeadListOperation;
case 65:
return props_HeadMapOperation;
case 66:
return props_HeadSetOperation;
case 67:
return props_IApplicableToCollection;
case 68:
return props_IApplicableToDeque;
case 69:
return props_IApplicableToList;
case 70:
return props_IApplicableToNothing;
case 71:
return props_IApplicableToQueue;
case 72:
return props_IApplicableToStack;
case 73:
return props_ICollectionOperation;
case 74:
return props_IContainerOperation;
case 75:
return props_IDequeOperation;
case 76:
return props_IListOperation;
case 77:
return props_IQueueOperation;
case 78:
return props_IStackOperation;
case 79:
return props_InsertElementOperation;
case 80:
return props_InternalSequenceOperation;
case 81:
return props_IntersectOperation;
case 82:
return props_IsEmptyOperation;
case 83:
return props_IsNotEmptyOperation;
case 84:
return props_IteratorType;
case 85:
return props_JoinOperation;
case 86:
return props_KeyAccessOperation;
case 87:
return props_LinkedHashMapCreator;
case 88:
return props_LinkedHashSetCreator;
case 89:
return props_LinkedListCreator;
case 90:
return props_LinkedListType;
case 91:
return props_ListCreatorWithInit;
case 92:
return props_ListElementAccessExpression;
case 93:
return props_ListType;
case 94:
return props_MapAsSequenceVarRef;
case 95:
return props_MapClearOperation;
case 96:
return props_MapElement;
case 97:
return props_MapEntry;
case 98:
return props_MapInitializer;
case 99:
return props_MapOperation;
case 100:
return props_MapOperationExpression;
case 101:
return props_MapRemoveOperation;
case 102:
return props_MapType;
case 103:
return props_MappingType;
case 104:
return props_MappingsSetOperation;
case 105:
return props_MoveNextOperation;
case 106:
return props_MultiForEachPair;
case 107:
return props_MultiForEachStatement;
case 108:
return props_MultiForEachVariable;
case 109:
return props_MultiForEachVariableReference;
case 110:
return props_NoArgumentsSequenceOperation;
case 111:
return props_OfTypeOperation;
case 112:
return props_PageOperation;
case 113:
return props_PeekOperation;
case 114:
return props_PopOperation;
case 115:
return props_PriorityQueueCreator;
case 116:
return props_PushOperation;
case 117:
return props_PutAllOperation;
case 118:
return props_QueueType;
case 119:
return props_ReduceLeftOperation;
case 120:
return props_ReduceRightOperation;
case 121:
return props_RemoveAllElementsOperation;
case 122:
return props_RemoveAllSetElementsOperation;
case 123:
return props_RemoveAtElementOperation;
case 124:
return props_RemoveElementOperation;
case 125:
return props_RemoveFirstElementOperation;
case 126:
return props_RemoveLastElementOperation;
case 127:
return props_RemoveOperation;
case 128:
return props_RemoveSetElementOperation;
case 129:
return props_RemoveWhereOperation;
case 130:
return props_ReverseOperation;
case 131:
return props_SelectOperation;
case 132:
return props_SequenceCreator;
case 133:
return props_SequenceOperation;
case 134:
return props_SequenceType;
case 135:
return props_SetElementOperation;
case 136:
return props_SetType;
case 137:
return props_SingleArgumentSequenceOperation;
case 138:
return props_SingletonSequenceCreator;
case 139:
return props_SkipOperation;
case 140:
return props_SkipStatement;
case 141:
return props_SmartClosureParameterDeclaration;
case 142:
return props_SortDirection;
case 143:
return props_SortOperation;
case 144:
return props_SortedMapOperation;
case 145:
return props_SortedMapType;
case 146:
return props_SortedSetOperation;
case 147:
return props_SortedSetType;
case 148:
return props_StackType;
case 149:
return props_StopStatement;
case 150:
return props_SubListOperation;
case 151:
return props_SubMapOperation;
case 152:
return props_SubSetOperation;
case 153:
return props_TailListOperation;
case 154:
return props_TailMapOperation;
case 155:
return props_TailOperation;
case 156:
return props_TailSetOperation;
case 157:
return props_TakeOperation;
case 158:
return props_TestAddElementOperation;
case 159:
return props_TestRemoveElementOperation;
case 160:
return props_ToArrayOperation;
case 161:
return props_ToIteratorOperation;
case 162:
return props_ToListOperation;
case 163:
return props_TranslateOperation;
case 164:
return props_TreeMapCreator;
case 165:
return props_TreeSetCreator;
case 166:
return props_UnionOperation;
case 167:
return props_ValueAccessOperation;
case 168:
return props_VisitAllOperation;
case 169:
return props_WhereOperation;
}
throw new IllegalStateException();
}
