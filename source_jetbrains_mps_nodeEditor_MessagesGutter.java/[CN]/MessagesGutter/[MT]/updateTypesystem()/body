{
  SNode node=myEditorComponent.getRootCell().getSNode();
  if (node == null)   return;
  myErrosLabel.setIcon(Icons.OK);
  if (node.getUserObject(SNode.LAST_UPDATE) == null || (Long)node.getUserObject(SNode.LAST_UPDATE) < node.getModel().getModelDescriptor().state()) {
    myErrosLabel.setIcon(Icons.IN_PROGRESS);
    return;
  }
  TSStatus status=(TSStatus)node.getUserObject(SNode.STATUS);
  removeAllMessages();
  if (status != null && status.isError()) {
    List<TSStatus> tsStatuses=new ArrayList<TSStatus>();
    if (status instanceof TSStatus.ERROR_COMPOSITE) {
      tsStatuses.addAll(status.getAllErrors());
    }
 else {
      tsStatuses.add(status);
    }
    myErrosLabel.setIcon(Icons.ERRORS);
    for (    final TSStatus s : tsStatuses) {
      final EditorCell cellForNode=myEditorComponent.findNodeCell(s.getSNode());
      if (cellForNode == null)       return;
      add(new IGutterMessage(){
        public int getStart() throws NodeNotFoundException {
          EditorCell nodeCell=getNodeCell();
          return nodeCell.getY();
        }
        public int getHeight() throws NodeNotFoundException {
          return getNodeCell().getHeight();
        }
        public String getMessage(){
          return s.getMessage();
        }
        public void doNavigate() throws NodeNotFoundException {
          myEditorComponent.changeSelection(getNodeCell());
        }
        private EditorCell getNodeCell() throws NodeNotFoundException {
          EditorCell nodeCell=myEditorComponent.findNodeCell(s.getSNode());
          if (nodeCell == null) {
            throw new NodeNotFoundException();
          }
          return nodeCell;
        }
      }
);
    }
  }
 else {
    myErrosLabel.setIcon(Icons.OK);
  }
}
