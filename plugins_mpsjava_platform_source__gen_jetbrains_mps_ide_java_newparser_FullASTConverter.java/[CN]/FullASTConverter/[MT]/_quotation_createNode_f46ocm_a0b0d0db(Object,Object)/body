{
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  quotedNode_3=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement",null,null,GlobalScope.getInstance(),false);
  quotedNode_4=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList",null,null,GlobalScope.getInstance(),false);
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SingleLineComment",null,null,GlobalScope.getInstance(),false);
  quotedNode_8=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TextCommentPart",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_8,"text","converted:  for ( expr; ...) {}  ->  { expr; for ( ; ...) {} }");
  quotedNode_5.addChild("commentPart",quotedNode_8);
  quotedNode_4.addChild("statement",quotedNode_5);
{
    List<SNode> nodes=(List<SNode>)parameter_1;
    for (    SNode child : nodes) {
      quotedNode_4.addChild("statement",HUtil.copyIfNecessary(child));
    }
  }
  quotedNode_7=(SNode)parameter_2;
  if (quotedNode_7 != null) {
    quotedNode_4.addChild("statement",HUtil.copyIfNecessary(quotedNode_7));
  }
  quotedNode_3.addChild("statements",quotedNode_4);
  return quotedNode_3;
}
