{
  super.init();
  SNodeAccessUtil.setInstance(new SNodeAccessUtilImpl());
  init(new PersistenceRegistry());
  init(new FacetsRegistry());
  init(new ConceptRepository());
  init(new FindUsagesManager());
  init(new SRepositoryRegistry());
  SModelRepository modelRepository=init(new SModelRepository());
  MPSModuleRepository moduleRepository=init(new MPSModuleRepository());
  GlobalSModelEventsManager globalSModelEventsManager=init(new GlobalSModelEventsManager(modelRepository));
  ClassLoaderManager classLoaderManager=init(new ClassLoaderManager(moduleRepository));
  init(new SModelFileTracker(SRepositoryRegistry.getInstance()));
  init(new ModuleRepositoryFacade(moduleRepository));
  init(new ModuleFileTracker(moduleRepository));
  init(new CleanupManager(classLoaderManager));
  init(new PathMacros());
  init(new LibraryInitializer(moduleRepository,classLoaderManager));
  init(new GlobalScope(moduleRepository,modelRepository));
  init(new ImmatureReferences(modelRepository));
  init(new QueryMethodGenerated(classLoaderManager));
  LanguageRegistry languageRegistry=init(new LanguageRegistry(classLoaderManager));
  init(new ConceptRegistry(languageRegistry));
  init(new ExtensionRegistry(classLoaderManager,moduleRepository));
  init(new LanguageHierarchyCache(moduleRepository));
  init(new ConceptDescendantsCache(moduleRepository,languageRegistry));
  init(new StructureAspectInterpreted());
  init(new SModelUtil_new(classLoaderManager,globalSModelEventsManager));
  init(new CachesManager(classLoaderManager,modelRepository));
  init(new LanguageDescriptorModelProvider());
  init(new ProjectStructureModule(moduleRepository,modelRepository));
  init(new CopyPasteManager(classLoaderManager));
  init(new PasteWrappersManager(classLoaderManager));
  init(new BLDependenciesCache(modelRepository));
  init(new DataFlowManager(classLoaderManager,moduleRepository));
  init(new ResolverComponent());
  init(new CheckersComponent());
  init(new ValidationSettings());
  init(new BootstrapMakeFacets());
  init(new InterpretedLanguageAspectsRegistry());
}
