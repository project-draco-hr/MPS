{
  super.init();
  if (ModelAccess.instance() == null) {
    ModelAccess.setInstance(new DefaultModelAccess());
  }
  SNodeAccessUtil.setInstance(new SNodeAccessUtilImpl());
  init(new PersistenceRegistry());
  init(new FacetsRegistry());
  init(new ConceptRepository());
  init(new FindUsagesManager());
  myRepositoryRegistry=init(new SRepositoryRegistry());
  myModelRepository=init(new SModelRepository());
  myMPSModuleRepository=init(new MPSModuleRepository());
  init(new GlobalSModelEventsManager(myModelRepository));
  myClassLoaderManager=init(new ClassLoaderManager(myMPSModuleRepository));
  init(new SModelFileTracker(SRepositoryRegistry.getInstance()));
  init(new ModuleRepositoryFacade(myMPSModuleRepository));
  init(new ModuleFileTracker(myMPSModuleRepository));
  myCleanupManager=init(new CleanupManager(myClassLoaderManager));
  init(new PathMacros());
  init(new LibraryInitializer(myMPSModuleRepository,myClassLoaderManager));
  init(new GlobalScope(myMPSModuleRepository,myModelRepository));
  init(new ImmatureReferences(myMPSModuleRepository));
  init(new QueryMethodGenerated(myClassLoaderManager));
  myLanguageRegistry=init(new LanguageRegistry(myClassLoaderManager));
  init(new ConceptRegistry(myLanguageRegistry));
  init(new ExtensionRegistry(myClassLoaderManager,myMPSModuleRepository));
  init(new LanguageHierarchyCache(myMPSModuleRepository));
  init(new ConceptDescendantsCache(myMPSModuleRepository,myLanguageRegistry));
  init(new StructureAspectInterpreted());
  init(new SModelUtil_new(myClassLoaderManager,myRepositoryRegistry));
  init(new CachesManager(myClassLoaderManager,myModelRepository));
  init(new LanguageDescriptorModelProvider(myMPSModuleRepository));
  init(new ProjectStructureModule(myMPSModuleRepository,myModelRepository));
  init(new CopyPasteManager(myCleanupManager));
  init(new PasteWrappersManager(myClassLoaderManager));
  init(new BLDependenciesCache(myMPSModuleRepository,myCleanupManager));
  init(new DataFlowManager(myCleanupManager,myMPSModuleRepository));
  init(new ResolverComponent());
  init(new CheckersComponent());
  init(new ValidationSettings());
  init(new BootstrapMakeFacets());
}
