{
  setFieldNameInModel(FIELD_NAME_IN_MODEL);
  if (DiskModification.MODIFY == diskModification) {
    setFieldNameInFile(FIELD_NAME_IN_FILE);
  }
 else {
    delete();
  }
  refreshVfs();
  final boolean[] dialogWasInvoked=new boolean[1];
  Messages.setTestDialog(new TestDialog(){
    @Override public int show(    String message){
      dialogWasInvoked[0]=true;
      if (DiskModification.DELETE == diskModification) {
        return VersionToChoose.MEMORY == versionToChoose ? 0 : 1;
      }
 else {
        return VersionToChoose.MEMORY == versionToChoose ? 1 : 0;
      }
    }
  }
);
  if (Action.SAVE == action) {
    ModelAccess.instance().runCommandInEDT(new Runnable(){
      @Override public void run(){
        SModelRepository.getInstance().saveAll();
      }
    }
,myProject.getComponent(MPSProject.class).getProject());
  }
 else {
    ModelAccess.instance().runWriteInEDT(new Runnable(){
      public void run(){
        if (myModelDescriptor.isChanged()) {
          myModelDescriptor.resolveDiskConflict();
        }
 else {
          myModelDescriptor.reloadFromDisk();
        }
      }
    }
);
  }
  ModelAccess.instance().flushEventQueue();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
      }
    }
);
  }
 catch (  InterruptedException e) {
  }
catch (  InvocationTargetException e) {
  }
  Assert.assertTrue(dialogWasInvoked[0]);
  String expectedFieldName;
  if (VersionToChoose.MEMORY == versionToChoose) {
    expectedFieldName=FIELD_NAME_IN_MODEL;
  }
 else {
    if (DiskModification.MODIFY == diskModification) {
      expectedFieldName=FIELD_NAME_IN_FILE;
    }
 else {
      expectedFieldName=null;
    }
  }
  checkSynchronizedState(expectedFieldName);
}
