{
  for (  SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isAttribute(it));
    }
  }
)) {
    SNode link=SNodeOperations.getContainingLinkDeclaration(child);
    if (link != null && SPropertyOperations.hasValue(link,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599937831l,"metaClass"),"aggregation","reference")) {
      component.addDependency(link);
      if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(link,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target")),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))))) {
        component.addError(child,"incompatible target concept in role \"" + SNodeOperations.getContainingLinkRole(child) + "\": subconcept of \""+ SLinkOperations.getTarget(link,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"))+ "\" expected, \""+ SNodeOperations.getConceptDeclaration(child)+ "\" found",null);
      }
    }
  }
  for (  SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
    SNode link=SLinkOperations.findLinkDeclaration(reference);
    if (link == null || !(SPropertyOperations.hasValue(link,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599937831l,"metaClass"),"reference","reference"))) {
      continue;
    }
    SNode target=SLinkOperations.getTargetNode(reference);
    if (target == null) {
      continue;
    }
    component.addDependency(link);
    if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(link,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target")),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(target))))) {
      component.addError(node,"incompatible target concept in role \"" + SLinkOperations.getRole(reference) + "\": subconcept of \""+ SLinkOperations.getTarget(link,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"))+ "\" expected, \""+ SNodeOperations.getConceptDeclaration(target)+ "\" found",null,new ReferenceMessageTarget(SPropertyOperations.getString(link,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599776563l,"role"))));
    }
  }
}
