{
  final Language l1=createLanguage();
  addClassTo(l1);
  final Language l2=createLanguage();
  final Language l3=createLanguage();
  final Reference<Dependency> dep12=new Reference<Dependency>();
  final Reference<Dependency> dep13=new Reference<Dependency>();
  getModelAccess().runWriteAction(new Runnable(){
    @Override public void run(){
      dep12.set(l1.addDependency(l2.getModuleReference(),false));
      dep13.set(l1.addDependency(l3.getModuleReference(),false));
    }
  }
);
  Assert.assertTrue(classIsLoadableFromModule(l1));
  removeModule(l2);
  Assert.assertTrue(!classIsLoadableFromModule(l1));
  removeModule(l3);
  Assert.assertTrue(!classIsLoadableFromModule(l1));
  getModelAccess().runWriteAction(new Runnable(){
    @Override public void run(){
      l1.removeDependency(dep12.get());
    }
  }
);
  Assert.assertTrue(!classIsLoadableFromModule(l1));
  getModelAccess().runWriteAction(new Runnable(){
    @Override public void run(){
      l1.removeDependency(dep13.get());
    }
  }
);
  Assert.assertTrue(classIsLoadableFromModule(l1));
}
