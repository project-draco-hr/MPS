{
  final IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"),new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(){
        @Override public <T extends IOption>T relayQuery(        IQuery<T> query){
          return query.defaultOption();
        }
      }
,new IJobMonitor.Stub());
      IOperationContext projectOperationContext=new ProjectOperationContext(project);
      MakeSession session=new MakeSession(projectOperationContext,null,true);
      if (IMakeService.INSTANCE.get().openNewSession(session)) {
        Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(projectOperationContext,Sequence.<SModel>singleton(model)).resources(false),scr,ctl);
        try {
          callback.invoke(future.get().isSucessful());
        }
 catch (        ExecutionException e) {
          callback.invoke(false);
        }
catch (        InterruptedException e) {
          callback.invoke(false);
        }
      }
      callback.invoke(false);
    }
  }
);
}
