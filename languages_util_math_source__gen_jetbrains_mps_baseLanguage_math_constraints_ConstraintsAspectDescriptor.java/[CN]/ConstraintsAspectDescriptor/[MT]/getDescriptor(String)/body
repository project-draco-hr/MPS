{
switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a,fqName)) {
case 24:
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression"));
case 25:
  return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression"));
case 26:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral"));
case 27:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalType"));
case 53:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.PowExpression"));
case 39:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor"));
case 58:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.VectorType"));
case 47:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixNorm"));
case 50:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixType"));
case 49:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"));
case 31:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathContext"));
case 52:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixZero"));
case 29:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LiteralI"));
case 16:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression"));
case 36:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex"));
case 14:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"));
case 32:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"));
case 54:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.SineExpression"));
case 17:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression"));
case 56:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.TransposeOperation"));
case 43:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer"));
case 28:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"));
case 38:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathTypeCast"));
case 55:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.TangentExpression"));
case 20:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"));
case 0:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.AbsExpression"));
case 35:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex"));
case 30:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LogExpression"));
case 15:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression"));
case 23:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"));
case 37:
return new DataHolderConstraintsDescriptor(new MathSymbolIndexReference_Constraints());
case 51:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixUnit"));
case 19:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.Determinant"));
case 8:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigProdExpression"));
case 9:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigSumExpression"));
case 46:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation"));
case 13:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.CosineExpression"));
case 4:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigDecimalType"));
case 3:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigComplexType"));
case 7:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigMinExpression"));
case 2:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"));
case 34:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbol"));
case 10:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral"));
case 11:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ComplexType"));
case 42:
return new DataHolderConstraintsDescriptor(new MatrixIndexWildcard_Constraints());
case 57:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.VectorInitializer"));
case 5:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigIntegerType"));
case 21:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExponentExpression"));
case 6:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression"));
case 1:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.AbstractIndex"));
case 18:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression"));
case 48:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"));
case 44:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex"));
case 40:
return new DataHolderConstraintsDescriptor(new MatrixElementAccessExpression_Constraints());
case 45:
return new DataHolderConstraintsDescriptor(new MatrixInitializerIndexReference_Constraints());
case 33:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"));
case 22:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"));
case 41:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"));
case 12:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation"));
default :
return null;
}
}
