{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attributeDeclaration",new BaseReferenceConstraintsDescriptor("attributeDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),"attributeName");
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contextBuilder=Builder_Behavior.getContextBuilder_7057666463730366732(_context.getEnclosingNode());
          if (contextBuilder == null) {
          }
 else           if (SNodeOperations.isInstanceOf(contextBuilder,"jetbrains.mps.xmlQuery.structure.ElementBuilder")) {
            return SchemaUtil.getAvailableAttributes(ElementBuilder_Behavior.call_getComplexType_1384720974900281910(SNodeOperations.cast(contextBuilder,"jetbrains.mps.xmlQuery.structure.ElementBuilder")));
          }
          return new ArrayList<SNode>();
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_jxchbf_a0a3a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
