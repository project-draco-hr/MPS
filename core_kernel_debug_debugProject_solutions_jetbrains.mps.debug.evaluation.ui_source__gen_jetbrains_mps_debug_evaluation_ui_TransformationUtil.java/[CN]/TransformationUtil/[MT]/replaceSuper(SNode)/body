{
  List<SNode> superMethodCalls=SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.debug.evaluation.structure.EvaluatorsSuperMethodCall",false,new String[]{});
  for (  SNode superMethodCall : ListSequence.fromList(superMethodCalls)) {
    SNode originalMethodDeclaration=SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false);
    SNode thisNode=TransformationUtil.createThisNodeReplacement();
    SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false),"returnType",true));
    SNode invokeMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a3a1a5().createNode(createStringLiteral(SPropertyOperations.getString(originalMethodDeclaration,"name")),createStringLiteral(getJniSignature(originalMethodDeclaration)),returnType,thisNode);
    ListSequence.fromList(SLinkOperations.getTargets(invokeMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(superMethodCall,"actualArgument",true)));
    SNodeOperations.replaceWithAnother(superMethodCall,new TransformationUtil.QuotationClass_crriw5_a0a0f0b0f().createNode(invokeMethodCall,returnType));
  }
}
