{
  SNode evaluateMethod=findEvaluateMethod(evaluator);
  SNode whatToEvaluate=ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(evaluator),"jetbrains.mps.baseLanguage.structure.ClassConcept")).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode root){
      return ListSequence.fromList(SNodeOperations.getDescendants(root,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode node){
          return (SLinkOperations.getTarget(node,AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"),true) != null);
        }
      }
);
    }
  }
).first();
  preprocess(whatToEvaluate);
  replaceConstructors(evaluator,whatToEvaluate);
  replaceThis(whatToEvaluate);
  replaceSuper(whatToEvaluate);
  replaceLowLevelVariableReferences(evaluator,whatToEvaluate);
  replaceLocalMemberReferences(whatToEvaluate);
  wrapMemberReferencesInCycle(evaluator,whatToEvaluate);
  wrapReturn(evaluateMethod);
  if (!(whatToEvaluate.isDescendantOf(evaluateMethod,false))) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(evaluateMethod,"body",true),"statement",true)).addElement(SNodeOperations.cast(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.Statement"));
  }
}
