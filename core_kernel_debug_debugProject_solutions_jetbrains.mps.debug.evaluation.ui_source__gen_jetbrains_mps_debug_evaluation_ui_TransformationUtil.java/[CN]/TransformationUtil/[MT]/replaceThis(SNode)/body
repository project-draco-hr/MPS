{
  Iterable<SNode> thisExpressions=ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.IThisExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
);
  Iterable<SNode> evalThisExpressions=ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.debug.evaluation.structure.EvaluatorsThisExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
);
  for (  SNode thisExpression : Sequence.fromIterable(thisExpressions)) {
    SNodeOperations.replaceWithAnother(thisExpression,TransformationUtil.createThisNodeReplacement());
  }
  for (  SNode thisExpression : Sequence.fromIterable(evalThisExpressions)) {
    SNodeOperations.replaceWithAnother(thisExpression,TransformationUtil.createThisNodeReplacement());
  }
}
