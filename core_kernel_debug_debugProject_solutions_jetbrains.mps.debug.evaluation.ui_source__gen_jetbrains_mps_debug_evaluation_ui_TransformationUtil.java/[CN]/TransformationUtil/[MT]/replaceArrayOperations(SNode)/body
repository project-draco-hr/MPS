{
  boolean finished=true;
  List<SNode> arrayAccessExpressions=SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression",false,new String[]{});
  for (  SNode arrayAccess : ListSequence.fromList(arrayAccessExpressions)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(arrayAccess,"array",true)),new TransformationUtil.QuotationClass_crriw5_a1a0a0c0i().createNode())) {
      SNode returnType=new TransformationUtil.QuotationClass_crriw5_a0a0a0a2a8().createNode();
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(arrayAccess,"array",true)),"jetbrains.mps.baseLanguage.structure.ArrayType")) {
        returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(arrayAccess,"array",true)),"jetbrains.mps.baseLanguage.structure.ArrayType"),"componentType",true));
      }
      SNodeOperations.replaceWithAnother(arrayAccess,new TransformationUtil.QuotationClass_crriw5_a0a0c0a0c0i().createNode(returnType,SLinkOperations.getTarget(arrayAccess,"index",true),SLinkOperations.getTarget(arrayAccess,"array",true),returnType));
      finished=false;
    }
  }
  List<SNode> arrayLengthOperations=SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation",false,new String[]{});
  for (  SNode arrayLength : ListSequence.fromList(arrayLengthOperations)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(arrayLength),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)),new TransformationUtil.QuotationClass_crriw5_a1a0a0e0i().createNode())) {
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(arrayLength),new TransformationUtil.QuotationClass_crriw5_a0a0a0a0e0i().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(arrayLength),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
      finished=false;
    }
  }
  return finished;
}
