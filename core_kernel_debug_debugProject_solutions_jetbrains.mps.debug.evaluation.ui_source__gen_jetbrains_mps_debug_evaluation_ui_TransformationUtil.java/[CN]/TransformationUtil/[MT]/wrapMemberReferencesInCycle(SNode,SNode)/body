{
  boolean finished=false;
  while (!(finished)) {
    finished=true;
    for (    SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvoke(methodCall)) {
        SNode originalMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
        SNode parent=SNodeOperations.getParent(methodCall);
        SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(originalMethodDeclaration,"returnType",true));
        SNode invokeMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a4a0a3a5a7().createNode(createStringLiteral(SPropertyOperations.getString(originalMethodDeclaration,"name")),createStringLiteral(getJniSignature(originalMethodDeclaration)),returnType);
        ListSequence.fromList(SLinkOperations.getTargets(invokeMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(methodCall,invokeMethodCall);
        SNodeOperations.replaceWithAnother(parent,new TransformationUtil.QuotationClass_crriw5_a0a0h0a0d0f0h().createNode(SNodeOperations.copyNode(parent),returnType));
        finished=false;
      }
    }
    for (    SNode staticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.StaticMethodCall",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvokeStatic(staticMethodCall)) {
        SNode fqNameNode=TransformationUtil.createClassFqNameNode(evaluator,SLinkOperations.getTarget(staticMethodCall,"classConcept",false));
        SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"returnType",true));
        SNode invokeStaticMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a4a0a5a5a7().createNode(fqNameNode,createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"name")),createStringLiteral(getJniSignature(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false))),returnType);
        ListSequence.fromList(SLinkOperations.getTargets(invokeStaticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(staticMethodCall,new TransformationUtil.QuotationClass_crriw5_a0a0g0a0f0f0h().createNode(returnType,invokeStaticMethodCall));
        finished=false;
      }
    }
    if (!(replaceArrayOperations(evaluateMethod))) {
      finished=false;
    }
    for (    SNode fieldReferenceOperation : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",false,new String[]{}))) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(fieldReferenceOperation,"jetbrains.mps.baseLanguage.structure.DotExpression",false,false),"operand",true)),new TransformationUtil.QuotationClass_crriw5_a1a0a0j0f0h().createNode())) {
        SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"type",true));
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(fieldReferenceOperation),new TransformationUtil.QuotationClass_crriw5_a0a0b0a0j0f0h().createNode(returnType,returnType,SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldReferenceOperation),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"name"))));
        finished=false;
      }
    }
    for (    SNode staticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.StaticFieldReference",false,new String[]{}))) {
      SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"type",true));
      SNodeOperations.replaceWithAnother(staticFieldReference,new TransformationUtil.QuotationClass_crriw5_a0a0c0l0f0h().createNode(returnType,createClassFqNameNode(evaluator,SNodeOperations.cast(SLinkOperations.getTarget(staticFieldReference,"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept")),createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"name")),returnType));
      finished=false;
    }
    for (    SNode binaryOperation : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{}))) {
      SNode leftType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true));
      SNode rightType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true));
      if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.EqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new TransformationUtil.QuotationClass_crriw5_a1a0a0c0n0f0h().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new TransformationUtil.QuotationClass_crriw5_a1a0a2a31a5a7().createNode())) {
        SNodeOperations.replaceWithAnother(binaryOperation,new TransformationUtil.QuotationClass_crriw5_a0a0a0c0n0f0h().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
        finished=false;
      }
 else       if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.NotEqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new TransformationUtil.QuotationClass_crriw5_a1a0a0a2a31a5a7().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new TransformationUtil.QuotationClass_crriw5_a1a0a0c0n0f0h_0().createNode())) {
        SNodeOperations.replaceWithAnother(binaryOperation,new TransformationUtil.QuotationClass_crriw5_a0a0a0a2a31a5a7().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
        finished=false;
      }
 else {
        if (isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"leftExpression",true))) {
          SLinkOperations.setTarget(binaryOperation,"leftExpression",new TransformationUtil.QuotationClass_crriw5_a0a0a0a0a2a31a5a7().createNode(binaryOperation.getChild(LTYPE),SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),true);
          finished=false;
        }
        if (isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"rightExpression",true))) {
          SLinkOperations.setTarget(binaryOperation,"rightExpression",new TransformationUtil.QuotationClass_crriw5_a0a0a0b0a2a31a5a7().createNode(binaryOperation.getChild(RTYPE),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),true);
          finished=false;
        }
      }
    }
  }
}
