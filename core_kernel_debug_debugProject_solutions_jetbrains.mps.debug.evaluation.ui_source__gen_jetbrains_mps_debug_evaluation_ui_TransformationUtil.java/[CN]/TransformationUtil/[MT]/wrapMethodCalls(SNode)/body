{
  SNode evaluateMethod=findEvaluateMethod(evaluator);
  normalizeAllDotExpressions(evaluateMethod);
  for (  SNode localStaticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall",false,new String[]{}))) {
    SNode staticMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(staticMethodCall,"classConcept",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SLinkOperations.setTarget(staticMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localStaticMethodCall,"actualArgument",true)));
    SNodeOperations.replaceWithAnother(localStaticMethodCall,staticMethodCall);
  }
  for (  SNode localInstanceMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",false,new String[]{}))) {
    SNode instanceMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
    SLinkOperations.setTarget(instanceMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localInstanceMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(instanceMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localInstanceMethodCall,"actualArgument",true)));
    SNode dotExpression=new TransformationUtil.QuotationClass_crriw5_a0a3a9a9().createNode(instanceMethodCall,createThisNodeReplacement());
    SNodeOperations.replaceWithAnother(localInstanceMethodCall,dotExpression);
  }
  boolean finished=false;
  while (!(finished)) {
    finished=true;
    for (    SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvoke(methodCall)) {
        SNode originalMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
        SNode invokeMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a2a0a3a51a9().createNode(createStringLiteral(SPropertyOperations.getString(originalMethodDeclaration,"name")),createStringLiteral(getJniSignature(originalMethodDeclaration)));
        ListSequence.fromList(SLinkOperations.getTargets(invokeMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(methodCall,invokeMethodCall);
        finished=false;
      }
    }
    for (    SNode staticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.StaticMethodCall",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvokeStatic(staticMethodCall)) {
        SNode invokeStaticMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a1a0a5a51a9().createNode(createStringLiteral(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(staticMethodCall,"classConcept",false))),createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"name")),createStringLiteral(getJniSignature(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false))));
        ListSequence.fromList(SLinkOperations.getTargets(invokeStaticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(staticMethodCall,invokeStaticMethodCall);
        finished=false;
      }
    }
    if (!(replaceArrayOperations(evaluateMethod))) {
      finished=false;
    }
  }
}
