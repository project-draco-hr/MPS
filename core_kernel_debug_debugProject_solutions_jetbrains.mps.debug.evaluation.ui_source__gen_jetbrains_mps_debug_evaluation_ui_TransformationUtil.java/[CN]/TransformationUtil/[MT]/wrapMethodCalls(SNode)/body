{
  SNode evaluateMethod=findEvaluateMethod(evaluator);
  normalizeAllDotExpressions(evaluateMethod);
  for (  SNode localStaticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall",false,new String[]{}))) {
    SNode staticMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(staticMethodCall,"classConcept",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SLinkOperations.setTarget(staticMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localStaticMethodCall,"actualArgument",true)));
    SNodeOperations.replaceWithAnother(localStaticMethodCall,staticMethodCall);
  }
  for (  SNode localInstanceMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",false,new String[]{}))) {
    SNode instanceMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
    SLinkOperations.setTarget(instanceMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localInstanceMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(instanceMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localInstanceMethodCall,"actualArgument",true)));
    SNodeOperations.replaceWithAnother(localInstanceMethodCall,new TransformationUtil.QuotationClass_crriw5_a0a0d0j0j().createNode(instanceMethodCall,createThisNodeReplacement()));
  }
  for (  SNode localStaticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference",false,new String[]{}))) {
    SNode staticFieldReference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
    SLinkOperations.setTarget(staticFieldReference,"variableDeclaration",SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false),false);
    SLinkOperations.setTarget(staticFieldReference,"classifier",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SNodeOperations.replaceWithAnother(localStaticFieldReference,staticFieldReference);
  }
  for (  SNode localInstanceFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference",false,new String[]{}))) {
    SNode fieldReferenceOperation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
    SLinkOperations.setTarget(fieldReferenceOperation,"fieldDeclaration",SLinkOperations.getTarget(localInstanceFieldReference,"variableDeclaration",false),false);
    SNodeOperations.replaceWithAnother(localInstanceFieldReference,new TransformationUtil.QuotationClass_crriw5_a0a0c0n0j().createNode(fieldReferenceOperation,createThisNodeReplacement()));
  }
  boolean finished=false;
  while (!(finished)) {
    finished=true;
    for (    SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvoke(methodCall)) {
        SNode originalMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
        SNode invokeMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a2a0a3a91a9().createNode(createStringLiteral(SPropertyOperations.getString(originalMethodDeclaration,"name")),createStringLiteral(getJniSignature(originalMethodDeclaration)));
        ListSequence.fromList(SLinkOperations.getTargets(invokeMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(methodCall,invokeMethodCall);
        finished=false;
      }
    }
    for (    SNode staticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.StaticMethodCall",false,new String[]{}))) {
      if (TransformationUtil.needsToBeReplacedWithInvokeStatic(staticMethodCall)) {
        SNode fqNameNode=TransformationUtil.getClassFqName(evaluator,SLinkOperations.getTarget(staticMethodCall,"classConcept",false));
        SNode invokeStaticMethodCall=new TransformationUtil.QuotationClass_crriw5_a0a3a0a5a91a9().createNode(fqNameNode,createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"name")),createStringLiteral(getJniSignature(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false))));
        ListSequence.fromList(SLinkOperations.getTargets(invokeStaticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)));
        SNodeOperations.replaceWithAnother(staticMethodCall,invokeStaticMethodCall);
        finished=false;
      }
    }
    if (!(replaceArrayOperations(evaluateMethod))) {
      finished=false;
    }
    for (    SNode fieldReferenceOperation : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",false,new String[]{}))) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(fieldReferenceOperation,"jetbrains.mps.baseLanguage.structure.DotExpression",false,false),"operand",true)),new TransformationUtil.QuotationClass_crriw5_a1a0a0j0t0j().createNode())) {
        SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"type",true));
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(fieldReferenceOperation),new TransformationUtil.QuotationClass_crriw5_a0a0b0a0j0t0j().createNode(returnType,returnType,SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldReferenceOperation),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"name"))));
        finished=false;
      }
    }
    for (    SNode staticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.StaticFieldReference",false,new String[]{}))) {
      SNode returnType=getValueProxyTypeFromType(SLinkOperations.getTarget(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"type",true));
      SNodeOperations.replaceWithAnother(staticFieldReference,new TransformationUtil.QuotationClass_crriw5_a0a0c0l0t0j().createNode(returnType,getClassFqName(evaluator,SNodeOperations.cast(SLinkOperations.getTarget(staticFieldReference,"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept")),createStringLiteral(SPropertyOperations.getString(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"name")),returnType));
      finished=false;
    }
  }
}
