{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("container",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      Iterable<SNode> allConts=Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"uiObject",false))).<SNode>translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode uio){
          return SLinkOperations.getTargets(uio,"compartment",true);
        }
      }
);
      Iterable<SNode> specializesConts=Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"uiObject",false))).<SNode>translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode uio){
          return SLinkOperations.getTargets(uio,"compartment",true);
        }
      }
).<SNode>select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode cont){
          return SLinkOperations.getTarget(cont,"specializes",false);
        }
      }
).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode cont){
          return cont != null;
        }
      }
);
      Iterable<SNode> existing=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"containerTemplate",true)).<SNode>select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode ct){
          return SLinkOperations.getTarget(ct,"container",false);
        }
      }
);
      return Sequence.fromIterable(allConts).subtract(Sequence.fromIterable(specializesConts)).subtract(Sequence.fromIterable(existing));
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:3cad8b0f-ef3c-442c-8c6f-1ab422f65805(jetbrains.mps.ui.modeling.constraints)","4391079257750389363");
    }
  }
);
  return result;
}
