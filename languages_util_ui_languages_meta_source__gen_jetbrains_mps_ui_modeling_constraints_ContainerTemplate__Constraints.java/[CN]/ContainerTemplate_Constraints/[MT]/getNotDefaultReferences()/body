{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("container",new BaseReferenceConstraintsDescriptor("container",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          Iterable<SNode> allConts=Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"uiObject",false))).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode uio){
              return SLinkOperations.getTargets(uio,"compartment",true);
            }
          }
);
          Iterable<SNode> specializesConts=Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"uiObject",false))).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode uio){
              return SLinkOperations.getTargets(uio,"compartment",true);
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode cont){
              return SLinkOperations.getTarget(cont,"specializes",false);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode cont){
              return cont != null;
            }
          }
);
          Iterable<SNode> existing=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"containerTemplate",true)).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode ct){
              return SLinkOperations.getTarget(ct,"container",false);
            }
          }
);
          return Sequence.fromIterable(allConts).subtract(Sequence.fromIterable(specializesConts)).subtract(Sequence.fromIterable(existing));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_cxbh0p_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
