{
  AbstractConceptDeclaration baseNode=null;
  if (node.getAdapter() instanceof IntentionDeclaration) {
    baseNode=((IntentionDeclaration)node.getAdapter()).getForConcept();
  }
 else   if (node.getAdapter() instanceof FinderDeclaration) {
    baseNode=((FinderDeclaration)node.getAdapter()).getForConcept();
  }
 else   if (node.getAdapter() instanceof TemplateDeclaration) {
    baseNode=((TemplateDeclaration)node.getAdapter()).getApplicableConcept();
  }
 else   if (node.getAdapter() instanceof AbstractRule) {
    AbstractRule rule=(AbstractRule)node.getAdapter();
    if (rule.getApplicableNode() instanceof ConceptReference) {
      ConceptReference conceptReference=(ConceptReference)rule.getApplicableNode();
      baseNode=conceptReference.getConcept();
    }
  }
  if (node.isRoot() && node.getAdapter() instanceof BaseConcept) {
    BaseConcept bc=((BaseConcept)node.getAdapter());
    if (RootTemplateAnnotation_AnnotationLink.getRootTemplateAnnotation(bc) != null) {
      RootTemplateAnnotation annotation=RootTemplateAnnotation_AnnotationLink.getRootTemplateAnnotation(bc);
      if (annotation != null && annotation.getApplicableConcept() != null) {
        baseNode=annotation.getApplicableConcept();
      }
    }
  }
  if (baseNode == null)   return null;
  IModule baseNodeModule=baseNode.getModel().getModelDescriptor().getModule();
  IModule nodeModule=node.getModel().getModelDescriptor().getModule();
  if (nodeModule instanceof Generator) {
    nodeModule=((Generator)nodeModule).getSourceLanguage();
  }
  if (baseNodeModule != nodeModule)   return null;
  return baseNode;
}
