{
  SNode ae=argument;
  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(ae,"leftExpression",true)),new QuotationClass_().createNode(),SLinkOperations.getTarget(ae,"leftExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(ae,"rightExpression",true)),new QuotationClass_1().createNode(),SLinkOperations.getTarget(ae,"rightExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(ae),new QuotationClass_2().createNode(),ae);
}
