{
  List<SNode> staticFieldReferences=SModelUtil.allNodes(model,new Condition<SNode>(){
    public boolean met(    SNode object){
      return object instanceof StaticFieldReference;
    }
  }
);
  System.out.println("// ---- static field ref.:" + staticFieldReferences.size());
  for (  SNode node : staticFieldReferences) {
    StaticFieldReference staticFieldReference=(StaticFieldReference)node;
    ClassifierType classifierType=staticFieldReference.getClassifierType();
    if (classifierType != null) {
      if (classifierType.getChildCount() > 0) {
        System.out.println("   !!!! do not replace !!! in " + SModelUtil.getRootParent(classifierType).getDebugText());
      }
 else {
        System.out.println("    *** replace ***");
        staticFieldReference.setClassifierType(null);
        staticFieldReference.setClassifier(classifierType.getClassifier());
      }
    }
  }
  List<SNode> staticMethodCalls=SModelUtil.allNodes(model,new Condition<SNode>(){
    public boolean met(    SNode object){
      return object instanceof StaticMethodCall;
    }
  }
);
  System.out.println("// ---- static method call:" + staticMethodCalls.size());
  for (  SNode node : staticMethodCalls) {
    StaticMethodCall staticMethodCall=(StaticMethodCall)node;
    ClassifierType classifierType=staticMethodCall.getClassType();
    if (classifierType != null) {
      if (classifierType.getChildCount() > 0) {
        System.out.println("   !!!! do not replace !!! in " + SModelUtil.getRootParent(classifierType).getDebugText());
      }
 else {
        System.out.println("    *** replace ***");
        staticMethodCall.setClassType(null);
        Classifier classifier=classifierType.getClassifier();
        if (classifier instanceof ClassConcept) {
          staticMethodCall.setClassConcept((ClassConcept)classifier);
        }
      }
    }
  }
  List<SNode> enumConstantRefs=SModelUtil.allNodes(model,new Condition<SNode>(){
    public boolean met(    SNode object){
      return object instanceof EnumConstantReference;
    }
  }
);
  System.out.println("// ---- enum const ref:" + enumConstantRefs.size());
  for (  SNode node : enumConstantRefs) {
    EnumConstantReference enumConstantReference=(EnumConstantReference)node;
    ClassifierType classifierType=enumConstantReference.getClassType();
    if (classifierType != null) {
      if (classifierType.getChildCount() > 0) {
        System.out.println("   !!!! do not replace !!! in " + SModelUtil.getRootParent(classifierType).getDebugText());
      }
 else {
        System.out.println("    *** replace ***");
        enumConstantReference.setClassType(null);
        Classifier classifier=classifierType.getClassifier();
        if (classifier instanceof EnumClass) {
          enumConstantReference.setEnumClass((EnumClass)classifier);
        }
      }
    }
  }
}
