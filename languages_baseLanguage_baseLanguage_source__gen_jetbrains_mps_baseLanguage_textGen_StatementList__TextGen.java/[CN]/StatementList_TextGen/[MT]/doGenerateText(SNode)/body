{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  int size=ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).count();
  for (int i=0; i < size; i++) {
    SNode statement=ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).toListSequence()).getElement(i);
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),statement,this.getSNode());
  }
  if (getBuffer().hasPositionsSupport()) {
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)(((Class)(Object.class))),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
