{
  SNode variable=SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L,"variableDeclaration"));
  myAssignment=null;
  SNode currentList=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"),false,false);
  SNode currentStatement;
  while ((myAssignment == null) && (currentList != null)) {
    currentStatement=getParentStatement(node,currentList);
    Program program=new MPSProgramBuilder().buildProgram(currentList);
    AnalysisResult<Set<WriteInstruction>> definitions=program.analyze(new ReachingDefinitionsAnalyzer());
    for (    Instruction nodeInstruction : ListSequence.fromList(program.getInstructionsFor(currentStatement))) {
      for (      WriteInstruction instruction : SetSequence.fromSet(definitions.get(nodeInstruction))) {
        if (instruction.getVariable() == variable) {
          SNode assignmentNode=(SNode)instruction.getSource();
          if (!(ListSequence.fromList(SNodeOperations.getNodeAncestors(node,null,false)).contains(assignmentNode))) {
            myAssignment=(assignmentNode);
          }
        }
      }
    }
    currentList=SNodeOperations.getNodeAncestor(currentList,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"),false,false);
  }
}
