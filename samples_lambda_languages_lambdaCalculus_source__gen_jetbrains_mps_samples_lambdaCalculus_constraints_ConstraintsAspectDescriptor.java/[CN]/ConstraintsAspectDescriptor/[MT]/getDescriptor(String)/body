{
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.StringConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.StringConstant"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.Program".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.Program"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.AddOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.AddOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.NumberType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.NumberType"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.StringType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.StringType"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LetExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LetExpression"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LetRef".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LetRef"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.LetVariable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.LetVariable"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner"));
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new VariableReference_Constraints());
  }
  if ("jetbrains.mps.samples.lambdaCalculus.structure.Variable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.samples.lambdaCalculus.structure.Variable"));
  }
  return null;
}
