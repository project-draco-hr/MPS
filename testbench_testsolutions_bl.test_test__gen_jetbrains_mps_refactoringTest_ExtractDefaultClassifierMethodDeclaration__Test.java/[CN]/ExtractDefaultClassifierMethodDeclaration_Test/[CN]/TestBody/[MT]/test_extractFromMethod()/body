{
  this.addNodeById("1230052509259");
  this.addNodeById("1230052509277");
  this.addNodeById("1230052509301");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509264"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")),SNodeOperations.cast(this.getNodeById("6195342755327949995"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))));
  params.setName("bar");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509260"),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181ca87c38L,"jetbrains.mps.lang.plugin.structure.ActionDeclaration")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509278"),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181ca87c38L,"jetbrains.mps.lang.plugin.structure.ActionDeclaration")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
