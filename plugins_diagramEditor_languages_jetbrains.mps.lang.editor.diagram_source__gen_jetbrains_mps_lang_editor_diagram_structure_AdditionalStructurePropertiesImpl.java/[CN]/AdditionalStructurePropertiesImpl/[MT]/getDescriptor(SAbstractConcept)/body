{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0qb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractArgument;
      }
    break;
case 1:
  if (true) {
    return props_AbstractDiagramCreation;
  }
break;
case 2:
if (true) {
return props_AbstractFigureReference;
}
break;
case 3:
if (true) {
return props_ActionGroup;
}
break;
case 4:
if (true) {
return props_ActionReference;
}
break;
case 5:
if (true) {
return props_AttributedFigureReference;
}
break;
case 6:
if (true) {
return props_BLQueryArgument;
}
break;
case 7:
if (true) {
return props_CellModel_Diagram;
}
break;
case 8:
if (true) {
return props_CellModel_DiagramConnector;
}
break;
case 9:
if (true) {
return props_CellModel_DiagramNode;
}
break;
case 10:
if (true) {
return props_CellModel_DiagramPort;
}
break;
case 11:
if (true) {
return props_ConnectionEnd;
}
break;
case 12:
if (true) {
return props_ConnectionEndBLQuery;
}
break;
case 13:
if (true) {
return props_CreationActionReference;
}
break;
case 14:
if (true) {
return props_CustomElementReference;
}
break;
case 15:
if (true) {
return props_DiagramConnectorCanCreateHandler;
}
break;
case 16:
if (true) {
return props_DiagramConnectorCreation;
}
break;
case 17:
if (true) {
return props_DiagramConnectorCreationHandler;
}
break;
case 18:
if (true) {
return props_DiagramElement;
}
break;
case 19:
if (true) {
return props_DiagramElementBLQuery;
}
break;
case 20:
if (true) {
return props_DiagramElementCreationHandler;
}
break;
case 21:
if (true) {
return props_DiagramElementsCreation;
}
break;
case 22:
if (true) {
return props_ExternalFigureReference;
}
break;
case 23:
if (true) {
return props_FigureParameterMapping;
}
break;
case 24:
if (true) {
return props_FromIdFunctionParameter;
}
break;
case 25:
if (true) {
return props_FromNodeFunctionParameter;
}
break;
case 26:
if (true) {
return props_LinkArgument;
}
break;
case 27:
if (true) {
return props_NodeFunctionParameter;
}
break;
case 28:
if (true) {
return props_Palette;
}
break;
case 29:
if (true) {
return props_PaletteElement;
}
break;
case 30:
if (true) {
return props_PropertyArgument;
}
break;
case 31:
if (true) {
return props_Separator;
}
break;
case 32:
if (true) {
return props_StubCellModel_Diagram;
}
break;
case 33:
if (true) {
return props_StubCellModel_DiagramConnector;
}
break;
case 34:
if (true) {
return props_StubCellModel_DiagramNode;
}
break;
case 35:
if (true) {
return props_StubCellModel_DiagramPort;
}
break;
case 36:
if (true) {
return props_ThisEditorNodeExpression;
}
break;
case 37:
if (true) {
return props_ToIdFunctionParameter;
}
break;
case 38:
if (true) {
return props_ToNodeFunctionParameter;
}
break;
case 39:
if (true) {
return props_XFunctionParameter;
}
break;
case 40:
if (true) {
return props_YFunctionParameter;
}
break;
default :
}
}
throw new IllegalStateException();
}
