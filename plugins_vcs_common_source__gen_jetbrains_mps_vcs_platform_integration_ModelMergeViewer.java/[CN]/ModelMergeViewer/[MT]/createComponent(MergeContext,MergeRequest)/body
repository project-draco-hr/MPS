{
  try {
    TextMergeRequest textRequest=(TextMergeRequest)request;
    List<DocumentContent> contents=textRequest.getContents();
    byte[][] byteContents=ListSequence.fromList(contents).select(new ISelector<DocumentContent,byte[]>(){
      public byte[] select(      DocumentContent it){
        return getContentBytes(it);
      }
    }
).toGenericArray(byte[].class);
    final VirtualFile file=((FileContent)textRequest.getOutputContent()).getFile();
    final File backupFile=MergeBackupUtil.zipModel(byteContents,file);
    final Wrappers._T<String> ext=new Wrappers._T<String>(file.getExtension());
    if (FilePerRootDataSource.isPerRootPersistenceFile(FileSystem.getInstance().getFileByPath(file.getPath()))) {
      ext.value=MPSExtentions.MODEL;
    }
    final SModel baseModel=VCSPersistenceUtil.loadModel(byteContents[MergeConstants.ORIGINAL],ext.value);
    SModel mineModel=loadModel(byteContents[MergeConstants.CURRENT],ext.value);
    SModel newModel=loadModel(byteContents[MergeConstants.LAST_REVISION],ext.value);
    if (baseModel != null && mineModel != null && newModel != null) {
      final ModelMergeViewer viewer=new ModelMergeViewer(context,textRequest,baseModel,mineModel,newModel);
      ISaveMergedModel saver=new ISaveMergedModel(){
        public boolean save(        MergeModelsPanel parent,        final SModel resultModel){
          final Wrappers._boolean closeDialog=new Wrappers._boolean(true);
          final Wrappers._T<String> resultContent=new Wrappers._T<String>(null);
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              try {
                resultContent.value=ModelMergeViewer.saveModel(resultModel,file,ext.value);
              }
 catch (              Throwable error) {
                if (baseModel instanceof PersistenceVersionAware && resultModel instanceof PersistenceVersionAware && ((PersistenceVersionAware)baseModel).getPersistenceVersion() == 8 && ((PersistenceVersionAware)resultModel).getPersistenceVersion() == 9) {
                  String message="The merged model cannot be saved using the new 9th persistence." + " The most-likely reason: one of the languages used in this model has not yet been generated." + " You can revert the changes, merge and generate the used languages first and only then merge this model again."+ " Alternatively, you can save the model in old 8th persistence version and then migrate it to the latest persistence, after all used languages will have been merged manually.";
                  int result=Messages.showYesNoCancelDialog(viewer.getComponent(),message,"Save model " + SModelOperations.getModelName(resultModel),"Save in 8th persistence","Revert changes","Return to merge",Messages.getWarningIcon());
switch (result) {
case Messages.YES:
                    ((PersistenceVersionAware)resultModel).setPersistenceVersion(8);
                  resultContent.value=ModelMergeViewer.saveModel(resultModel,file,ext.value);
                break;
case Messages.NO:
              resultContent.value=null;
            break;
default :
          closeDialog.value=false;
        break;
    }
  }
 else {
    if (LOG_276369528.isEnabledFor(Level.ERROR)) {
      LOG_276369528.error("Cannot save merge resulting model " + SModelOperations.getModelName(resultModel),error);
    }
  }
}
if (resultContent.value != null) {
  ModelAccess.instance().runWriteInEDT(new Runnable(){
    public void run(){
      try {
        file.setBinaryContent(resultContent.value.getBytes(FileUtil.DEFAULT_CHARSET));
      }
 catch (      IOException e) {
        if (LOG_276369528.isEnabledFor(Level.ERROR)) {
          LOG_276369528.error("Cannot save merge result into " + file.getPath(),e);
        }
      }
    }
  }
);
  MergeBackupUtil.packMergeResult(backupFile,file.getName(),resultContent.value);
}
}
}
);
return closeDialog.value;
}
}
;
viewer.myPanel.setSaver(saver);
return viewer;
}
}
 catch (IOException e) {
LOG.error(null,e);
}
return null;
}
