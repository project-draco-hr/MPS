{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    Computable computable=new Computable(){
      public Object compute(){
        List<SNode> parameters=ListSequence.fromList(new ArrayList<SNode>());
        boolean inParInt=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration",false,false) != null;
        boolean notInApplicable=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.intentions.structure.IsApplicableBlock",false,false) == null;
        if (inParInt && notInApplicable) {
          ListSequence.fromList(parameters).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.intentions.structure.IntentionParameter"));
        }
        return parameters;
      }
    }
;
    Iterable queryResult=(Iterable)computable.compute();
    if (queryResult != null) {
      for (      Object item : queryResult) {
        List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions((SNode)item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
        ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
      }
    }
  }
  return result;
}
