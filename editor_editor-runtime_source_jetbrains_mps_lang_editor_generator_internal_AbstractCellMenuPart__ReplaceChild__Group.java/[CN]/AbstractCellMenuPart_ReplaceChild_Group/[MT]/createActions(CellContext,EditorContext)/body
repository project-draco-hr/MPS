{
  final SNode parentNode=(SNode)cellContext.get(BasicCellContext.EDITED_NODE);
  SNode linkDeclaration=(SNode)cellContext.get(AggregationCellContext.LINK_DECLARATION);
  IChildNodeSetter setter=new DefaultChildNodeSetter(linkDeclaration);
  final SNode defaultConceptOfChild=CellUtil.getLinkDeclarationTarget(linkDeclaration);
  if (defaultConceptOfChild == null)   return Collections.emptyList();
  final SNode currentChild=(SNode)cellContext.getOpt(AggregationCellContext.CURRENT_CHILD_NODE);
  final IOperationContext context=editorContext.getOperationContext();
  List parameterObjects=createParameterObjects(parentNode,currentChild,defaultConceptOfChild,context,editorContext);
  if (parameterObjects == null) {
    return Collections.emptyList();
  }
  List<SubstituteAction> actions=new ArrayList<SubstituteAction>(parameterObjects.size());
  for (  final Object parameterObject : parameterObjects) {
    actions.add(new DefaultChildNodeSubstituteAction(parameterObject,parentNode,currentChild,setter,context.getScope()){
      @Override protected String getMatchingText(      String pattern,      boolean referent_presentation,      boolean visible){
        return AbstractCellMenuPart_ReplaceChild_Group.this.getMatchingText(parameterObject);
      }
      @Override public String getDescriptionText(      String pattern){
        return AbstractCellMenuPart_ReplaceChild_Group.this.getDescriptionText(parameterObject);
      }
      @Override public SNode createChildNode(      Object parameterObjectWhichActuallyAnOutputConcept,      SModel model,      String pattern){
        SNode newChild;
        if (isCustomCreateChildNode()) {
          newChild=customCreateChildNode(parameterObject,parentNode,currentChild,defaultConceptOfChild,model,context,editorContext);
        }
 else {
          newChild=super.createChildNode(parameterObject,model,pattern);
        }
        return newChild;
      }
    }
);
  }
  return actions;
}
