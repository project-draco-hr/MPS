{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("group",new BaseReferenceConstraintsDescriptor("group",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_fhfy8y_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(Scope.getScope(_context.getContextNode(),_context.getContextRole(),_context.getPosition(),SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Group"))){
            @Override public boolean isExcluded(            SNode node){
              return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node,"jetbrains.mps.build.mps.structure.BuildMps_Group"),"modules",true)).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_Solution") && BuildMps_Solution_Behavior.call_hasTestsSources_7354447573575923452(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_Solution"));
                }
              }
) == null;
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
