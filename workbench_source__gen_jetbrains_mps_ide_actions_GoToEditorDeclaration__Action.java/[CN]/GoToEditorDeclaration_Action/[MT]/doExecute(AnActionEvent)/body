{
  try {
    final Wrappers._T<Language> l=new Wrappers._T<Language>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        l.value=SModelUtil.getDeclaringLanguage(SNodeOperations.getConceptDeclaration(GoToEditorDeclaration_Action.this.node),GoToEditorDeclaration_Action.this.scope);
      }
    }
);
    if (l.value == null) {
      JOptionPane.showMessageDialog(GoToEditorDeclaration_Action.this.frame,"Couldn't find declaring language for concept " + INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.getConceptDeclaration(GoToEditorDeclaration_Action.this.node)),"Error",JOptionPane.ERROR_MESSAGE);
      return;
    }
    final Wrappers._T<ConceptDeclaration> conceptDeclaration=new Wrappers._T<ConceptDeclaration>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        conceptDeclaration.value=((ConceptDeclaration)GoToEditorDeclaration_Action.this.node.getConceptDeclarationAdapter());
      }
    }
);
    SModelDescriptor editorModel=GoToEditorDeclarationHelper.getOrCreateEditorAspect(l.value,conceptDeclaration.value,GoToEditorDeclaration_Action.this.scope);
    if (editorModel == null) {
      return;
    }
    final SNode editorNode=GoToEditorDeclarationHelper.getOrCreateEditorForConcept(editorModel,conceptDeclaration.value,GoToEditorDeclaration_Action.this.node,GoToEditorDeclaration_Action.this.scope);
    if (editorNode == null) {
      return;
    }
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        GoToEditorDeclaration_Action.this.navigateToEditorDeclaration(editorNode,new ModuleContext(l.value,GoToEditorDeclaration_Action.this.project),GoToEditorDeclaration_Action.this.editor);
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "GoToEditorDeclaration",t);
    }
  }
}
