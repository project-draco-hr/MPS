{
  if (kind != SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlVariable")) {
    return null;
  }
  List<SNode> vars=new ArrayList<SNode>();
  if ("expression".equals(SNodeOperations.getContainingLinkRole(child))) {
    ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"bindings",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return (SLinkOperations.getTarget(it,"var",true) != null);
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"var",true);
      }
    }
));
  }
 else {
    SNode stop=child;
    for (    SNode b : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"bindings",true))) {
      if (b == stop) {
        break;
      }
      ListSequence.fromList(vars).addElement(SLinkOperations.getTarget(b,"var",true));
    }
  }
  Scope ourScope=new MultipleElementsScope(vars,new _FunctionTypes._return_P1_E0<String,SNode>(){
    public String invoke(    SNode n){
      return SPropertyOperations.getString(SNodeOperations.cast(n,"jetbrains.mps.core.query.structure.MqlVariable"),"name");
    }
  }
);
  return new CompositeScope(ourScope,ScopeUtils.lazyParentScope(thisNode,kind));
}
