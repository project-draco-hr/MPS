{
  if (source == null) {
    throw new IllegalArgumentException();
  }
  CompilerOptions compilerOptions=new CompilerOptions(settings);
  final ProblemReporter problemReporter=new ProblemReporter(DefaultErrorHandlingPolicies.proceedWithAllProblems(),compilerOptions,new DefaultProblemFactory(Locale.getDefault()));
  CommentRecorderParser parser=new CommentRecorderParser(problemReporter,false);
  parser.setMethodsFullRecovery(false);
  parser.setStatementsRecovery(enabledStatementRecovery);
  ICompilationUnit sourceUnit=new CompilationUnit(source,"",compilerOptions.defaultEncoding);
  final CompilationResult compilationResult=new CompilationResult(sourceUnit,0,0,compilerOptions.maxProblemsPerUnit);
  CompilationUnitDeclaration compilationUnitDeclaration=new CompilationUnitDeclaration(problemReporter,compilationResult,length);
  ConstructorDeclaration constructorDeclaration=new ConstructorDeclaration(compilationResult);
  constructorDeclaration.sourceEnd=-1;
  constructorDeclaration.declarationSourceEnd=offset + length - 1;
  constructorDeclaration.bodyStart=offset;
  constructorDeclaration.bodyEnd=offset + length - 1;
  parser.scanner.setSource(compilationResult);
  parser.scanner.resetTo(offset,offset + length);
  parser.parse(constructorDeclaration,compilationUnitDeclaration,true);
  if (recordParsingInformation) {
    this.recordedParsingInformation=getRecordedParsingInformation(compilationResult,compilationUnitDeclaration.comments);
  }
  return constructorDeclaration;
}
