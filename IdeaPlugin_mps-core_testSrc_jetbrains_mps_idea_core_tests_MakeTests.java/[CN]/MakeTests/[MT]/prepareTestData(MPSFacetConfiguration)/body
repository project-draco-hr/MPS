{
  copyResource(null,"blProject.iml","/tests/blProject/blProject.iml");
  final IFile model=copyResource("models","main.mps","/tests/blProject/models/main.mps");
  final IFile source=model.getParent();
  configuration.getState().setModelRootPaths(new String[]{model.getParent().getPath()});
  final ModuleRootManager mrm=ModuleRootManager.getInstance(configuration.getFacet().getModule());
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel mm=mrm.getModifiableModel();
      mm.setSdk(JavaSdkImpl.getMockJdk17());
      VirtualFileSystem vfs=VirtualFileManager.getInstance().getFileSystem("file");
      VirtualFile project=vfs.findFileByPath(source.getParent().getPath());
      try {
        ContentEntry ce=mm.addContentEntry(project);
        VirtualFile contentRoot=project.findChild(source.getName());
        if (contentRoot == null)         contentRoot=project.createChildDirectory(MakeTests.this,source.getName());
        ce.addSourceFolder(contentRoot,false);
      }
 catch (      IOException e) {
      }
      mm.commit();
      CompilerModuleExtension cme=CompilerModuleExtension.getInstance(myModule);
      CompilerModuleExtension cmemm=(CompilerModuleExtension)cme.getModifiableModel(true);
      cmemm.setCompilerOutputPath(project.getUrl() + "/classes");
      cmemm.setCompilerOutputPathForTests(project.getUrl() + "/classes");
      cmemm.inheritCompilerOutputPath(false);
      cmemm.commit();
      Disposer.dispose(cmemm);
      vfs.refresh(false);
    }
  }
);
}
