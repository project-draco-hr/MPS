{
  this.myTypeByTypeVariable=MapSequence.fromMap(new HashMap<SNode,SNode>());
  this.myClassifiers=ClassifierAndSuperClassifiersCache.ClassifiersDataSet.getImplementedAndExtended(this.myTopClassifier,this.myTypeByTypeVariable);
  this.myDependsOnNodes=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode classifier : this.myClassifiers) {
    SetSequence.fromSet(this.myDependsOnNodes).addElement(classifier);
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      for (      SNode type : SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),"typeParameter",true)) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(type);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(type.getDescendants()));
      }
    }
 else {
      for (      SNode typeVariableDecl : SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(typeVariableDecl);
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept") && !(SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      SNode classifierType0=SLinkOperations.getTarget((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"superclass",true);
      if (classifierType0 != null) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType0);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(classifierType0.getDescendants()));
      }
      for (      SNode classifierType1 : SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"implementedInterface",true)) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType1);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(classifierType1.getDescendants()));
      }
    }
 else     if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
      for (      SNode classifierType : SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.Interface")),"extendedInterface",true)) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(classifierType.getDescendants()));
      }
    }
  }
}
