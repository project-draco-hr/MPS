{
  this.myFieldsByName=MapSequence.<String,SNode>fromMap(new HashMap<String,SNode>());
  this.myStaticFieldsByName=MapSequence.<String,SNode>fromMap(new HashMap<String,SNode>());
  List<SNode> allFields=new ArrayList<SNode>();
  List<SNode> classifiers=((ClassifierAndSuperClassifiersCache)this.getOwnerCache()).getClassifiers();
  for (  SNode classifier : classifiers) {
    List<SNode> staticFields=SLinkOperations.getTargets(classifier,"staticField",true);
    allFields.addAll(staticFields);
    for (    SNode staticField : staticFields) {
      String name=SPropertyOperations.getString(staticField,"name");
      if (name == null) {
        name="";
      }
      if (!(MapSequence.fromMap(myStaticFieldsByName).containsKey(name))) {
        MapSequence.<String,SNode>fromMap(myStaticFieldsByName).put(name,staticField);
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      List<SNode> fields=SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"field",true);
      ListSequence.<SNode>fromList(allFields).addSequence(ListSequence.<SNode>fromList(fields));
      for (      SNode field : fields) {
        String name=SPropertyOperations.getString(field,"name");
        if (name == null) {
          name="";
        }
        if (!(MapSequence.fromMap(myFieldsByName).containsKey(name))) {
          MapSequence.<String,SNode>fromMap(myFieldsByName).put(name,field);
        }
      }
    }
  }
  myDependsOnNodes=SetSequence.<SNode>fromSet(new HashSet<SNode>());
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.<SNode>fromList(classifiers));
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.<SNode>fromList(allFields));
}
