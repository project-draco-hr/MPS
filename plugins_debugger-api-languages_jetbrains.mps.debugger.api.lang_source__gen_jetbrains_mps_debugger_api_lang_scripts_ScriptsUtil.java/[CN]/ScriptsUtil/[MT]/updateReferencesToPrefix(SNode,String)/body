{
  SModel model=SNodeOperations.getModel(node);
  List<SReference> references=ListSequence.fromList(new ArrayList<SReference>());
  Map<SModelReference,SModelReference> modelsMap=MapSequence.fromMap(new HashMap<SModelReference,SModelReference>());
  for (  SNode snode : ListSequence.fromList(SNodeOperations.getDescendants(node,null,true,new String[]{}))) {
    for (    SReference ref : ListSequence.fromList(SNodeOperations.getReferences(snode))) {
      SModelReference targetSModelReference=ref.getTargetSModelReference();
      if (MapSequence.fromMap(modelsMap).get(targetSModelReference) != null) {
        ListSequence.fromList(references).addElement(ref);
        continue;
      }
      if (eq_bb8vid_a0e0a0e0b(targetSModelReference.getStereotype(),SModelStereotype.JAVA_STUB)) {
        if (targetSModelReference.getLongName().startsWith(prefix)) {
          SModelDescriptor descriptor=SModelRepository.getInstance().getModelDescriptor(new SModelFqName(targetSModelReference.getLongName(),null));
          ListSequence.fromList(references).addElement(ref);
          MapSequence.fromMap(modelsMap).put(targetSModelReference,descriptor.getSModelReference());
        }
      }
    }
  }
  for (  IMapping<SModelReference,SModelReference> pair : MapSequence.fromMap(modelsMap)) {
    model.deleteModelImport(pair.key());
    model.addModelImport(pair.value(),false);
  }
  for (  IModule newModule : Sequence.fromIterable(MapSequence.fromMap(modelsMap).values()).select(new ISelector<SModelReference,IModule>(){
    public IModule select(    SModelReference it){
      return SModelRepository.getInstance().getModelDescriptor(it).getModule();
    }
  }
)) {
    model.getModelDescriptor().getModule().addDependency(newModule.getModuleReference(),false);
  }
  for (  SReference ref : ListSequence.fromList(references)) {
    SModelReference oldModelReference=ref.getTargetSModelReference();
    final SModelReference newModelReference=MapSequence.fromMap(modelsMap).get(oldModelReference);
    LOG.info("replacing reference to " + oldModelReference + " with "+ newModelReference);
    final String resolveInfo=SLinkOperations.getResolveInfo(ref);
    String role=SLinkOperations.getRole(ref);
    SNode sourceNode=ref.getSourceNode();
    DynamicReference dynamicReference=new DynamicReference(role,sourceNode,newModelReference,resolveInfo);
    sourceNode.removeReferent(role);
    sourceNode.addReference(dynamicReference);
    SNode targetNode=dynamicReference.getTargetNode();
    if (targetNode != null) {
      sourceNode.setReferent(role,targetNode);
    }
  }
}
