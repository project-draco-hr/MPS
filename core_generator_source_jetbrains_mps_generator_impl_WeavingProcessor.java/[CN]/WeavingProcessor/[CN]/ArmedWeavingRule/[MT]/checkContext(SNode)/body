{
  TemplateGenerator generator=myEnv.getGenerator();
  if (contextNode == null) {
    myEnv.getLogger().error(myRule.getRuleNode(),"weaving rule: cannot find context node",GeneratorUtil.describe(myApplicableNode,"input node"));
    return false;
  }
  SNode contextRoot=contextNode.getContainingRoot();
  SModel model=contextRoot.getModel();
  if (model == null) {
    return reportErrorIfStrict("bad context for weaving rule: no root for context " + contextNode);
  }
  if (model != generator.getOutputModel()) {
    String msg="Bad context for weaving rule: context node shall belong to output model.";
    if (model == generator.getInputModel()) {
      msg+="Context specified comes from the input model. You may use 'genContext.get copied output for' operation to obtain its output model counterpart.";
    }
    myEnv.getLogger().error(myRule.getRuleNode(),msg,GeneratorUtil.describe(myApplicableNode,"input node"));
    return false;
  }
  SNode originalContextRoot=generator.getOriginalRootByGenerated(contextRoot);
  if (originalContextRoot == null) {
    return reportErrorIfStrict(String.format("bad context for weaving rule: %s is generated by 'create root' rule",contextRoot));
  }
  if (myApplicableNode.getModel() == null)   return true;
  SNode inputRoot=myApplicableNode.getContainingRoot();
  if (originalContextRoot != inputRoot) {
    String msg="bad context for weaving rule: %s is generated from %s , while input node is from %s";
    return reportErrorIfStrict(String.format(msg,contextRoot,originalContextRoot,inputRoot));
  }
  return true;
}
