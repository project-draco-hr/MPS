{
  String applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    myGenerator.showErrorMessage(null,null,rule.getRuleNode().getNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.applyToInheritors();
  Iterable<SNode> nodes=myFastNodeFinder.getNodes(applicableConcept,includeInheritors);
  for (  SNode applicableNode : nodes) {
    QueryExecutionContext executionContext=myGenerator.getExecutionContext(applicableNode);
    if (executionContext == null) {
      continue;
    }
    ReductionContext reductionContext=new ReductionContext(executionContext);
    TemplateExecutionEnvironment environment=new TemplateExecutionEnvironmentImpl(myGenerator,reductionContext,myGenerator.getOperationContext(),myGenerationTracer);
    try {
      DefaultTemplateContext context=new DefaultTemplateContext(applicableNode);
      if (executionContext.isApplicable(rule,environment,context)) {
        SNode outputContextNode=executionContext.getContextNode(rule,environment,context);
        if (!checkContext(rule,applicableNode,outputContextNode)) {
          continue;
        }
        myGenerator.setChanged();
        boolean someOutputGenerated=true;
        myGenerationTracer.pushInputNode(applicableNode);
        myGenerationTracer.pushRule(rule.getRuleNode());
        try {
          Weaving_MappingRule weavingRule=((TemplateWeavingRuleInterpreted)rule).getNode();
          RuleConsequence ruleConsequence=weavingRule.getRuleConsequence();
          if (ruleConsequence == null) {
            myGenerator.showErrorMessage(applicableNode,null,weavingRule.getNode(),"weaving rule: no rule consequence");
          }
 else {
            myGenerationTracer.pushRuleConsequence(new SNodePointer(ruleConsequence.getNode()));
            if (ruleConsequence instanceof TemplateDeclarationReference) {
              TemplateDeclaration template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
              weaveTemplateDeclaration(template,outputContextNode,weavingRule,GeneratorUtil.createTemplateContext(applicableNode,null,reductionContext,ruleConsequence,applicableNode,myGenerator),reductionContext);
            }
 else             if (ruleConsequence instanceof WeaveEach_RuleConsequence) {
              WeaveEach_RuleConsequence weaveEach=(WeaveEach_RuleConsequence)ruleConsequence;
              SourceSubstituteMacro_SourceNodesQuery query=weaveEach.getSourceNodesQuery();
              if (query == null) {
                myGenerator.showErrorMessage(applicableNode,rule.getRuleNode().getNode(),"weaving rule: cannot create list of source nodes");
                break;
              }
              TemplateDeclaration template=weaveEach.getTemplate();
              List<SNode> queryNodes=reductionContext.getQueryExecutor().evaluateSourceNodesQuery(applicableNode,weavingRule.getNode(),null,query,context);
              if (queryNodes.isEmpty()) {
                someOutputGenerated=false;
              }
              for (              SNode queryNode : queryNodes) {
                weaveTemplateDeclaration(template,outputContextNode,weavingRule,GeneratorUtil.createTemplateContext(queryNode,null,reductionContext,ruleConsequence,queryNode,myGenerator),reductionContext);
              }
            }
 else {
              myGenerator.showErrorMessage(applicableNode,null,ruleConsequence.getNode(),"weaving rule: unsupported rule consequence");
            }
          }
        }
  finally {
          if (someOutputGenerated) {
            myGenerationTracer.closeInputNode(applicableNode);
          }
 else {
            myGenerationTracer.popInputNode(applicableNode);
          }
        }
      }
    }
 catch (    GenerationException e) {
      if (e instanceof GenerationCanceledException)       throw (GenerationCanceledException)e;
      if (e instanceof GenerationFailureException)       throw (GenerationFailureException)e;
      myGenerator.showErrorMessage(null,rule.getRuleNode().getNode(),"internal error: " + e.toString());
    }
  }
}
