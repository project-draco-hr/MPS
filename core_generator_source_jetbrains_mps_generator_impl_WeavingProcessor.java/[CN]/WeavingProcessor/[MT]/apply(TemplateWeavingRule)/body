{
  String applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    myGenerator.showErrorMessage(null,null,rule.getRuleNode().resolve(MPSModuleRepository.getInstance()),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.applyToInheritors();
  Iterable<SNode> nodes=myFastNodeFinder.getNodes(applicableConcept,includeInheritors);
  for (  SNode applicableNode : nodes) {
    QueryExecutionContext executionContext=myGenerator.getExecutionContext(applicableNode);
    if (executionContext == null) {
      continue;
    }
    TemplateExecutionEnvironment environment=new TemplateExecutionEnvironmentImpl(myGenerator,executionContext);
    try {
      DefaultTemplateContext context=new DefaultTemplateContext(applicableNode);
      if (executionContext.isApplicable(rule,environment,context)) {
        SNode outputContextNode=executionContext.getContextNode(rule,environment,context);
        if (!checkContext(rule,applicableNode,outputContextNode)) {
          continue;
        }
        myGenerator.setChanged();
        boolean someOutputGenerated=true;
        myGenerationTracer.pushInputNode(GenerationTracerUtil.getSNodePointer(applicableNode));
        myGenerationTracer.pushRule(rule.getRuleNode());
        try {
          someOutputGenerated=rule.apply(environment,context,outputContextNode);
        }
 catch (        DismissTopMappingRuleException e) {
          environment.getGenerator().showErrorMessage(context.getInput(),null,rule.getRuleNode().resolve(MPSModuleRepository.getInstance()),"wrong template: dismission of weaving rule is not supported");
        }
catch (        TemplateProcessingFailureException e) {
          environment.getGenerator().showErrorMessage(context.getInput(),null,rule.getRuleNode().resolve(MPSModuleRepository.getInstance()),"weaving rule: error processing template fragment");
        }
 finally {
          if (someOutputGenerated) {
            myGenerationTracer.closeInputNode(GenerationTracerUtil.getSNodePointer(applicableNode));
          }
 else {
            myGenerationTracer.popInputNode(GenerationTracerUtil.getSNodePointer(applicableNode));
          }
        }
      }
    }
 catch (    GenerationException e) {
      if (e instanceof GenerationCanceledException)       throw (GenerationCanceledException)e;
      if (e instanceof GenerationFailureException)       throw (GenerationFailureException)e;
      myGenerator.showErrorMessage(null,rule.getRuleNode().resolve(MPSModuleRepository.getInstance()),"internal error: " + e.toString());
    }
  }
}
