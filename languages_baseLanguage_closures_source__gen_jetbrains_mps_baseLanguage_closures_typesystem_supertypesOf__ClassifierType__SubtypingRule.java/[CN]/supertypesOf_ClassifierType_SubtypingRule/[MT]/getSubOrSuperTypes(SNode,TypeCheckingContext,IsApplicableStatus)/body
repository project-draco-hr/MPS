{
  List<SNode> supertypes=ListSequence.fromList(new ArrayList<SNode>());
  SNode classifier=SLinkOperations.getTarget(ct,"classifier",false);
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(SNodeOperations.as(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass")) {
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    Iterable<SNode> cands=ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode m){
        return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
      }
    }
);
    Iterator<SNode> it=Sequence.fromIterable(cands).iterator();
    SNode mtd=(it.hasNext() ? it.next() : null);
    if (!(it.hasNext()) && (mtd != null)) {
      List<SNode> paramTypes=new ArrayList<SNode>();
      Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
      IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(ct,subs);
      for (      SNode p : SLinkOperations.getTargets(mtd,"parameter",true)) {
        SNode pt=SLinkOperations.getTarget(p,"type",true);
        if (SNodeOperations.isInstanceOf(pt,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          pt=IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(pt,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
        }
        ListSequence.fromList(paramTypes).addElement(pt);
      }
      SNode rt=SLinkOperations.getTarget(mtd,"returnType",true);
      if (SNodeOperations.isInstanceOf(rt,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
        rt=IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(rt,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
      }
      supertypes=ListSequence.fromListAndArray(new ArrayList<SNode>(),new supertypesOf_ClassifierType_SubtypingRule.QuotationClass_qen718_a1a0j0e0c0a().createNode(paramTypes,rt,typeCheckingContext));
    }
  }
  return supertypes;
}
