{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.Not");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode notNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.samples.Kaja.structure.Not");
        return SLinkOperations.setTarget(notNode,"original",_context.getSourceNode(),true);
      }
      public String getMatchingText(      String pattern){
        return "not";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
