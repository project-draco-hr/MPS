{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"heading","mark","full","wall","looking");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode expression;
            if ((item).equals("heading")) {
              expression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(331587165301851084l,-4784639992745830411l),3308300503039683649l,"jetbrains.mps.samples.Kaja.structure.Heading"));
            }
 else             if ((item).equals("mark")) {
              expression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(331587165301851084l,-4784639992745830411l),6405700485436186598l,"jetbrains.mps.samples.Kaja.structure.IsMark"));
            }
 else             if ((item).equals("full")) {
              expression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(331587165301851084l,-4784639992745830411l),859008965969439768l,"jetbrains.mps.samples.Kaja.structure.IsFull"));
            }
 else             if ((item).equals("wall")) {
              expression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(331587165301851084l,-4784639992745830411l),3308300503039647788l,"jetbrains.mps.samples.Kaja.structure.IsWall"));
            }
 else             if ((item).equals("looking")) {
              expression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(331587165301851084l,-4784639992745830411l),7060824959893078082l,"jetbrains.mps.samples.Kaja.structure.Looking"));
            }
 else {
              throw new IllegalArgumentException("Cannot find a match for " + (item));
            }
            SNode node=SNodeOperations.replaceWithAnother(_context.getSourceNode(),expression);
            return node;
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),null));
          }
        }
);
      }
    }
  }
  return result;
}
