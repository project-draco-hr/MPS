{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ecece0L,"jetbrains.mps.samples.Kaja.structure.While").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode whileNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ecece0L,"jetbrains.mps.samples.Kaja.structure.While")));
      return SLinkOperations.getTarget(whileNode,MetaAdapterFactory.getContainmentLink(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ecece0L,0x2de971c785ecece2L,"condition"));
    }
    public String getMatchingText(    String pattern){
      return "while";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ecece0L,"jetbrains.mps.samples.Kaja.structure.While").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ecece0L,"jetbrains.mps.samples.Kaja.structure.While").getDeclarationNode(),null));
    }
  }
);
  return result;
}
