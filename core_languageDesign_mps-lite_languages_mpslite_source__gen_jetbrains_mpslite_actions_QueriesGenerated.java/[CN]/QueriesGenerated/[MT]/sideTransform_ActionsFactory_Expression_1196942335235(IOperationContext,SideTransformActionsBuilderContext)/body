{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractSideTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode expr=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mpslite.structure.MPSLiteOperationExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),expr);
        SLinkOperations.setTarget(expr,"expression",_context.getSourceNode(),true);
        return expr;
      }
      public String getMatchingText(      String pattern){
        return ".mps lite operation";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
