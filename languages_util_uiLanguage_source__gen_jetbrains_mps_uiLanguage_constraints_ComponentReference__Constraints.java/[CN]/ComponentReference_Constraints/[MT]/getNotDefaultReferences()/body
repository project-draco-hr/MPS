{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("component",new BaseReferenceConstraintsDescriptor("component",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode container=SNodeOperations.getAncestorWhereConceptInList(_context.getEnclosingNode(),new String[]{"jetbrains.mps.uiLanguage.structure.ComponentController","jetbrains.mps.uiLanguage.structure.ComponentDeclaration"},true,false);
          SNode componentDeclaration=null;
          if (SNodeOperations.isInstanceOf(container,"jetbrains.mps.uiLanguage.structure.ComponentController")) {
            componentDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(container,"jetbrains.mps.uiLanguage.structure.ComponentController"),"component",false);
          }
          if (SNodeOperations.isInstanceOf(container,"jetbrains.mps.uiLanguage.structure.ComponentDeclaration")) {
            componentDeclaration=SNodeOperations.cast(container,"jetbrains.mps.uiLanguage.structure.ComponentDeclaration");
          }
          List<SNode> result=new ArrayList<SNode>();
          if (componentDeclaration != null) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(componentDeclaration,"jetbrains.mps.uiLanguage.structure.ComponentInstance",false,new String[]{})).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getString(it,"name") != null;
              }
            }
));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_bgitcy_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
