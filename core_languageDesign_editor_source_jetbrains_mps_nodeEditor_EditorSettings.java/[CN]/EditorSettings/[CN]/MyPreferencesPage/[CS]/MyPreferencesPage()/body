{
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
  JPanel fontPropertiesPanel=new JPanel(new GridLayout(0,1));
  fontPropertiesPanel.setBorder(new EmptyBorder(5,5,5,5));
  fontPropertiesPanel.add(new JLabel("Font Name : "));
  myFontsComboBox=new JComboBox(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames());
  fontPropertiesPanel.add(myFontsComboBox);
  fontPropertiesPanel.add(new JLabel("Font Size : "));
  List<String> sizes2=new ArrayList<String>();
  for (int i=1; i <= 50; i++) {
    sizes2.add("" + i);
  }
  myFontSizesComboBox=new JComboBox(sizes2.toArray());
  fontPropertiesPanel.add(myFontSizesComboBox);
  fontPropertiesPanel.add(new JLabel("Line Spacing : "));
  myLineSpacingField=new JTextField();
  fontPropertiesPanel.add(myLineSpacingField);
  fontPropertiesPanel.add(new JLabel("Text Width : "));
  List<String> sizes=new ArrayList<String>();
  for (int i=200; i < 1600; i+=100) {
    sizes.add("" + i);
  }
  myTextWidthComboBox=new JComboBox(sizes.toArray());
  fontPropertiesPanel.add(myTextWidthComboBox);
  panel.add(fontPropertiesPanel);
  JPanel useBraces=new JPanel(new FlowLayout(FlowLayout.LEFT));
  myUseBraces=new JCheckBox("Use Braces");
  useBraces.add(myUseBraces);
  panel.add(useBraces);
  JPanel antialiasingPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  myAntialiasingCheckBox=new JCheckBox("Use Antialiasing");
  antialiasingPanel.add(myAntialiasingCheckBox);
  panel.add(antialiasingPanel);
  JPanel colorSettingsPanel=new JPanel();
  Border border=BorderFactory.createEmptyBorder(5,5,0,0);
  colorSettingsPanel.setBorder(border);
  colorSettingsPanel.setLayout(new BoxLayout(colorSettingsPanel,BoxLayout.Y_AXIS));
  colorSettingsPanel.add(new JLabel("Selection Background:"));
  mySelectionBackgroundColorComponent=new MyColorComponent(getSelectionBackgroundColor()){
    protected Color getDefaultColor(){
      return getDefaultSelectionBackgroundColor();
    }
  }
;
  colorSettingsPanel.add(mySelectionBackgroundColorComponent);
  colorSettingsPanel.add(new JLabel("Selection Foreground:"));
  mySelectionForegroundColorComponent=new MyColorComponent(getSelectionForegroundColor()){
    protected Color getDefaultColor(){
      return getDefaultSelectionForegroundColor();
    }
  }
;
  colorSettingsPanel.add(mySelectionForegroundColorComponent);
  colorSettingsPanel.add(new JLabel(" "));
  colorSettingsPanel.add(new JLabel("Cursor Blinking Rate : "));
  myBlinkingRateSlider=new JSlider(1,10,5);
  colorSettingsPanel.add(myBlinkingRateSlider);
  myBlinkingDemo=createBlinkingDemo();
  colorSettingsPanel.add(myBlinkingDemo);
  for (  Component c : colorSettingsPanel.getComponents()) {
    if (c instanceof JComponent) {
      ((JComponent)c).setAlignmentX(Component.LEFT_ALIGNMENT);
    }
  }
  panel.add(colorSettingsPanel);
  myBlinkingDemo.setBackground(fontPropertiesPanel.getBackground());
  for (  Component c : panel.getComponents()) {
    if (c instanceof JComponent) {
      ((JComponent)c).setAlignmentX(Component.LEFT_ALIGNMENT);
    }
  }
  ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myBlinkingDemo.repaint();
      EditorCell rootCell=myBlinkingDemo.getRootCell();
      if (rootCell != null) {
        rootCell.switchCaretVisible();
        myTimer.setDelay(getBlinkingPeriod());
      }
    }
  }
;
  myTimer=new Timer(myCaretBlinker.getCaretBlinkingRateTimeMillis(),listener);
  myEditorSettingsPanel=new JPanel(new BorderLayout());
  myEditorSettingsPanel.add(panel,BorderLayout.NORTH);
  myTimer.start();
  reset();
  validate();
}
