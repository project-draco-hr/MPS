{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("propertyDeclaration",new BaseReferenceConstraintsDescriptor("propertyDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getReferenceNode(),"nodeExpr",true)),"jetbrains.mps.lang.smodel.structure.SNodeType"))) {
            return new ArrayList<SNode>();
          }
          return AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getReferenceNode(),"nodeExpr",true)),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_e11h12_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
