{
  final SNode referenceNode=reference.getSourceNode();
  if (referenceNode == null) {
    return false;
  }
  final SNode linkDeclaration=SModelSearchUtil.findLinkDeclaration(referenceNode.getConceptDeclarationNode(),reference.getRole());
  if (linkDeclaration == null) {
    return false;
  }
  final SNode referentConcept=SModelUtil.getLinkDeclarationTarget(linkDeclaration);
  Boolean result=TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      Scope refScope=ModelConstraintsUtil.getScope(reference,operationContext);
      if (refScope instanceof ErrorScope) {
        Resolver.LOG.error("Couldn't create referent search scope : " + ((ErrorScope)refScope).getMessage());
        return false;
      }
      SNode result=null;
      String resolveInfo=reference.getResolveInfo();
      for (      SNode node : refScope.getAvailableElements(null)) {
        if (!(node.isInstanceOfConcept(referentConcept))) {
          continue;
        }
        if (resolveInfo != null && (resolveInfo.equals(node.getName()) || resolveInfo.equals(node.getProperty("nestedName")))) {
          if (result == null) {
            result=node;
          }
 else {
            return false;
          }
        }
      }
      if (result != null) {
        ResolveResult resolveResult=new ResolveResult(referenceNode,result,reference.getRole(),null);
        results.add(resolveResult);
        if (forceResolve) {
          resolveResult.setTarget();
        }
        return true;
      }
      return false;
    }
  }
);
  return result;
}
