{
  monitor.start(getDescription(),2);
  try {
    for (    SNode nodeUsage : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",node,scope,monitor.subTask(1)))) {
      SNode directInheritor=null;
      if (SNodeOperations.isInstanceOf(nodeUsage,"jetbrains.mps.core.structure.structure.SConcept") && SLinkOperations.getTarget(SNodeOperations.cast(nodeUsage,"jetbrains.mps.core.structure.structure.SConcept"),"extends",false) == node) {
        directInheritor=SNodeOperations.cast(nodeUsage,"jetbrains.mps.core.structure.structure.SConcept");
      }
 else       if (SNodeOperations.isInstanceOf(nodeUsage,"jetbrains.mps.core.structure.structure.SInterfaceReference") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(nodeUsage),"jetbrains.mps.core.structure.structure.SAbstractConcept")) {
        directInheritor=SNodeOperations.cast(SNodeOperations.getParent(nodeUsage),"jetbrains.mps.core.structure.structure.SAbstractConcept");
      }
      if ((directInheritor != null)) {
        ListSequence.fromList(_results).addElement(directInheritor);
        for (        SNode concept : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.core.structure.findUsages.ConceptInheritors_Finder",directInheritor,scope,monitor.subTask(1)))) {
          ListSequence.fromList(_results).addElement(concept);
        }
      }
    }
  }
  finally {
    monitor.done();
  }
}
