{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return Collections.<EditorAspect>singletonList(new ActionAccessOperation_Editor());
case 1:
  return Collections.<EditorAspect>singletonList(new ActionConstructionParameterDeclaration_Editor());
case 2:
return Collections.<EditorAspect>singletonList(new ActionConstructorParameterReferenceOperation_Editor());
case 3:
return Collections.<EditorAspect>singletonList(new ActionDataParameterDeclaration_Editor());
case 4:
return Collections.<EditorAspect>singletonList(new ActionDataParameterReferenceOperation_Editor());
case 5:
return Collections.<EditorAspect>singletonList(new ActionDeclaration_Editor());
case 6:
return Collections.<EditorAspect>singletonList(new ActionGroupDeclaration_Editor());
case 7:
return Collections.<EditorAspect>singletonList(new ActionGroupRef_Editor());
case 8:
return Collections.<EditorAspect>singletonList(new ActionInstance_Editor());
case 9:
return Collections.<EditorAspect>singletonList(new ActionParameterDeclaration_Editor());
case 10:
return Collections.<EditorAspect>singletonList(new ActionParameterReferenceOperation_Editor());
case 11:
return Collections.<EditorAspect>singletonList(new ActionReference_Editor());
case 12:
return Collections.<EditorAspect>singletonList(new ActionType_Editor());
case 13:
return Collections.<EditorAspect>singletonList(new AddElementStatement_Editor());
case 14:
return Collections.<EditorAspect>singletonList(new AddKeystrokeStatement_Editor());
case 15:
return Collections.<EditorAspect>singletonList(new AddStatement_Editor());
case 16:
return Collections.<EditorAspect>singletonList(new AddTabOperation_Editor());
case 17:
return Collections.<EditorAspect>singletonList(new ButtonCreator_Editor());
case 18:
return Collections.<EditorAspect>singletonList(new CloseTabOperation_Editor());
case 19:
return Collections.<EditorAspect>singletonList(new ConceptCondition_Editor());
case 20:
return Collections.<EditorAspect>singletonList(new CreateTabBlock_Editor());
case 21:
return Collections.<EditorAspect>singletonList(new EditableModel_Editor());
case 22:
return Collections.<EditorAspect>singletonList(new EditorTab_Editor());
case 23:
return Collections.<EditorAspect>singletonList(new EditorTabReference_Editor());
case 24:
return Collections.<EditorAspect>singletonList(new ElementListContents_Editor());
case 25:
return Collections.<EditorAspect>singletonList(new EverywhereActionPlace_Editor());
case 26:
return Collections.<EditorAspect>singletonList(new GetGroupOperation_Editor());
case 27:
return Collections.<EditorAspect>singletonList(new GetSelectedTabOperation_Editor());
case 28:
return Collections.<EditorAspect>singletonList(new GroupAccessOperation_Editor());
case 29:
return Collections.<EditorAspect>singletonList(new GroupAnchor_Editor());
case 30:
return Collections.<EditorAspect>singletonList(new GroupType_Editor());
case 31:
return Collections.<EditorAspect>singletonList(new IdeaActionsDescriptor_Editor());
case 32:
return Collections.<EditorAspect>singletonList(new IdeaConfigurationXml_Editor());
case 33:
return Collections.<EditorAspect>singletonList(new IdeaInitializerDescriptor_Editor());
case 34:
return Collections.<EditorAspect>singletonList(new IdeaPluginDependency_Editor());
case 35:
return Collections.<EditorAspect>singletonList(new InterfaceExtentionPoint_Editor());
case 36:
return Collections.<EditorAspect>singletonList(new InterfaceGroup_Editor());
case 37:
return Collections.<EditorAspect>singletonList(new KeyMapKeystroke_Editor());
case 38:
return Collections.<EditorAspect>singletonList(new KeyStrokeType_Editor());
case 39:
return Collections.<EditorAspect>singletonList(new KeymapChangesDeclaration_Editor());
case 40:
return Collections.<EditorAspect>singletonList(new KeymapRef_Editor());
case 41:
return Collections.<EditorAspect>singletonList(new MPSPluginDependency_Editor());
case 42:
return Collections.<EditorAspect>singletonList(new ModificationStatement_Editor());
case 43:
return Collections.<EditorAspect>singletonList(new NonDumbAwareActions_Editor());
case 44:
return Collections.<EditorAspect>singletonList(new Order_Editor());
case 45:
return Collections.<EditorAspect>singletonList(new OrderReference_Editor());
case 46:
return Collections.<EditorAspect>singletonList(new ParameterizedShortcutChange_Editor());
case 47:
return Collections.<EditorAspect>singletonList(new PersistentPropertyDeclaration_Editor());
case 48:
return Collections.<EditorAspect>singletonList(new PersistentPropertyReference_Editor());
case 49:
return Collections.<EditorAspect>singletonList(new PopupCreator_Editor());
case 50:
return Collections.<EditorAspect>singletonList(new PreferencePage_Editor());
case 51:
return Collections.<EditorAspect>singletonList(new PreferencesComponentDeclaration_Editor());
case 52:
return Collections.<EditorAspect>singletonList(new PreferencesComponentType_Editor());
case 53:
return Collections.<EditorAspect>singletonList(new RequiredCondition_Editor());
case 54:
return Collections.<EditorAspect>singletonList(new Separator_Editor());
case 55:
return Collections.<EditorAspect>singletonList(new SimpleShortcutChange_Editor());
case 56:
return Collections.<EditorAspect>singletonList(new SmartDisposeClosureParameterDeclaration_Editor());
case 57:
return Collections.<EditorAspect>singletonList(new TabbedToolDeclaration_Editor());
case 58:
return Collections.<EditorAspect>singletonList(new ToolDeclaration_Editor());
case 59:
return Collections.<EditorAspect>singletonList(new ToolInstanceExpression_Editor());
case 60:
return Collections.<EditorAspect>singletonList(new ToolTab_Editor());
case 61:
return Collections.<EditorAspect>singletonList(new ToolType_Editor());
case 62:
return Collections.<EditorAspect>singletonList(new ToolbarCreator_Editor());
case 63:
return Collections.<EditorAspect>singletonList(new UpdateGroupBlock_Editor());
default :
}
return Collections.emptyList();
}
