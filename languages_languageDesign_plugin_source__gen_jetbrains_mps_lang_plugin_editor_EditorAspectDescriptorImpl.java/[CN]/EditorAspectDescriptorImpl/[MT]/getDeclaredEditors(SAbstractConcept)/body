{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new ActionAccessOperation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new ActionConstructionParameterDeclaration_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionConstructorParameterReferenceOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionDataParameterDeclaration_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionDataParameterReferenceOperation_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionDeclaration_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionGroupDeclaration_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionGroupRef_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionInstance_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionParameterDeclaration_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionParameterReferenceOperation_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionReference_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new ActionType_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddElementStatement_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddKeystrokeStatement_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddStatement_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddTabOperation_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new ButtonCreator_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new CloseTabOperation_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptCondition_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new CreateTabBlock_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomToolShortcut_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditableModel_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorTab_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorTabReference_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new ElementListContents_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new EverywhereActionPlace_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetGroupOperation_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetSelectedTabOperation_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new GroupAccessOperation_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new GroupAnchor_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new GroupType_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new IdeaActionsDescriptor_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new IdeaConfigurationXml_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new IdeaInitializerDescriptor_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new IdeaPluginDependency_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new InterfaceExtentionPoint_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new InterfaceGroup_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new KeyMapKeystroke_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new KeyStrokeType_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new KeymapChangesDeclaration_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new KeymapRef_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new MPSPluginDependency_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModificationStatement_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new NonDumbAwareActions_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new NumberToolShortcut_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new Order_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new OrderReference_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParameterizedShortcutChange_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentPropertyDeclaration_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentPropertyReference_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new PinTabOperation_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new PopupCreator_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new PreferencePage_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new PreferencesComponentDeclaration_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new PreferencesComponentType_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new RequiredCondition_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new Separator_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleShortcutChange_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new SmartDisposeClosureParameterDeclaration_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new TabbedToolDeclaration_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolDeclaration_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolInstanceExpression_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolKeystroke_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolTab_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolType_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToolbarCreator_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnpinTabOperation_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new UpdateGroupBlock_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
