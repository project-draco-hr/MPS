{
  this.addNodeById("1230053266583");
  this.addNodeById("1230053266604");
  InlineVariableRefactoring ref=InlineVariableRefactoring.createRefactoring(SNodeOperations.cast(this.getNodeById("1230053266591"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266584"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266605"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
