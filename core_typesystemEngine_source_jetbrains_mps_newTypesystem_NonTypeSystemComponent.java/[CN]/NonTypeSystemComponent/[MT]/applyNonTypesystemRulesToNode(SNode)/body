{
  List<Pair<NonTypesystemRule_Runtime,IsApplicableStatus>> nonTypesystemRules=myTypeChecker.getRulesManager().getNonTypesystemRules(node);
  MyEventsReadListener nodesReadListener=new MyEventsReadListener();
  if (nonTypesystemRules != null) {
    for (    Pair<NonTypesystemRule_Runtime,IsApplicableStatus> rule : nonTypesystemRules) {
      Pair<SNode,NonTypesystemRule_Runtime> nodeAndRule=new Pair<SNode,NonTypesystemRule_Runtime>(node,rule.o1);
      MyTypesReadListener typesReadListener=new MyTypesReadListener();
      MyLanguageCachesReadListener languageCachesReadListener=new MyLanguageCachesReadListener();
      if (isIncrementalMode()) {
        if (myCheckedNodesNonTypesystem.contains(nodeAndRule)) {
          continue;
        }
        nodesReadListener.clear();
        NodeReadEventsCaster.setNodesReadListener(nodesReadListener);
        TypeChecker.getInstance().addTypesReadListener(typesReadListener);
        LanguageHierarchyCache.getInstance().setReadAccessListener(languageCachesReadListener);
        myRuleAndNodeBeingChecked=new Pair<SNode,NonTypesystemRule_Runtime>(node,rule.o1);
      }
      try {
        myNodeTypesComponent.applyRuleToNode(node,rule.o1,rule.o2);
      }
  finally {
        myRuleAndNodeBeingChecked=null;
        if (isIncrementalMode()) {
          LanguageHierarchyCache.getInstance().removeReadAccessListener();
          TypeChecker.getInstance().removeTypesReadListener(typesReadListener);
          NodeReadEventsCaster.removeNodesReadListener();
        }
      }
      if (isIncrementalMode()) {
synchronized (ACCESS_LOCK) {
          nodesReadListener.setAccessReport(true);
          addDependentNodes(node,rule.o1,new HashSet<SNode>(nodesReadListener.getAccessedNodes()));
          addDependentProperties(node,rule.o1,new HashSet<Pair<SNode,String>>(nodesReadListener.myAccessedProperties));
          nodesReadListener.setAccessReport(false);
          languageCachesReadListener.setAccessReport(true);
          if (languageCachesReadListener.myIsCacheAccessed) {
            addCacheDependentNodesNonTypesystem(node,rule.o1);
          }
          languageCachesReadListener.setAccessReport(false);
          typesReadListener.setAccessReport(true);
          addDependentTypeTerms(node,rule.o1,new HashSet<SNode>(typesReadListener.myAccessedNodes));
          typesReadListener.setAccessReport(false);
        }
        nodesReadListener.clear();
      }
      myCheckedNodesNonTypesystem.add(nodeAndRule);
    }
  }
}
