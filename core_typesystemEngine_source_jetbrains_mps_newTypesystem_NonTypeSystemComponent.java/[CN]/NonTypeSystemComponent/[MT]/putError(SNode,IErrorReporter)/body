{
  Map<SNode,List<IErrorReporter>> errorMap=myNodesToErrorsMap;
  List<IErrorReporter> iErrorReporters=errorMap.get(node);
  if (iErrorReporters == null) {
    iErrorReporters=new ArrayList<IErrorReporter>(1);
    errorMap.put(node,iErrorReporters);
  }
  iErrorReporters.add(errorReporter);
  Collections.sort(iErrorReporters,new Comparator<IErrorReporter>(){
    public int compare(    IErrorReporter o1,    IErrorReporter o2){
      return o1.getMessageStatus().compareTo(o2.getMessageStatus());
    }
  }
);
  if (myRuleAndNodeBeingChecked != null) {
    SNode currentNode=myRuleAndNodeBeingChecked.o1;
    NonTypesystemRule_Runtime currentRule=myRuleAndNodeBeingChecked.o2;
    Map<NonTypesystemRule_Runtime,Set<IErrorReporter>> rulesToErrorsMap=myNodesAndNTRulesToErrors.get(currentNode);
    if (rulesToErrorsMap == null) {
      rulesToErrorsMap=new HashMap<NonTypesystemRule_Runtime,Set<IErrorReporter>>(1);
      myNodesAndNTRulesToErrors.put(currentNode,rulesToErrorsMap);
    }
    Set<IErrorReporter> errorsSet=rulesToErrorsMap.get(currentRule);
    if (errorsSet == null) {
      errorsSet=new HashSet<IErrorReporter>(1);
      rulesToErrorsMap.put(currentRule,errorsSet);
    }
    errorsSet.add(errorReporter);
  }
}
