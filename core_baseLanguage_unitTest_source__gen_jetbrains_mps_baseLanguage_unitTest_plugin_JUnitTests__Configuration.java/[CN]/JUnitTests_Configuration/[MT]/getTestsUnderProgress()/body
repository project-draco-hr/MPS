{
  final List<ITestNodeWrapper> stuffToTest=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  final JUnitRunTypes2 runTypes2=this.getRunType();
  final JUnitTests_Configuration configuration=this;
  Runnable collect=new Runnable(){
    public void run(){
      if (runTypes2 != null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            ListSequence.fromList(stuffToTest).addSequence(Sequence.fromIterable(runTypes2.collect(configuration)));
          }
        }
);
      }
    }
  }
;
  if (eq_p90f5h_a0a4a51_0(this.getRunType(),JUnitRunTypes2.PROJECT) || eq_p90f5h_a0a4a51(this.getRunType(),JUnitRunTypes2.MODULE)) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(collect,"Collecting Tests To Run",false,this.getProject());
  }
 else {
    collect.run();
  }
  return stuffToTest;
}
