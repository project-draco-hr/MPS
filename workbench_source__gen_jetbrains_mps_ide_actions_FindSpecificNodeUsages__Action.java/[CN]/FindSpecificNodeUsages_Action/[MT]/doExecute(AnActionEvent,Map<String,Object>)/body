{
  try {
    final Wrappers._T<SNode> operationNode=new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        operationNode.value=(((EditorCell)MapSequence.fromMap(_params).get("cell")) == null ? ((SNode)MapSequence.fromMap(_params).get("node")) : ((EditorCell)MapSequence.fromMap(_params).get("cell")).getSNodeWRTReference());
      }
    }
);
    final Wrappers._T<FindUsagesOptions> options=new Wrappers._T<FindUsagesOptions>(FindSpecificNodeUsages_Action.this.getOptionsComponent(_params).getDefaultSearchOptions());
    FindUsagesDialog dialog=new FindUsagesDialog(options.value,operationNode.value,((Project)MapSequence.fromMap(_params).get("project")),((Frame)MapSequence.fromMap(_params).get("frame")));
    dialog.showDialog();
    if (dialog.isCancelled()) {
      return;
    }
    options.value=dialog.getResult();
    FindSpecificNodeUsages_Action.this.getOptionsComponent(_params).setDefaultSearchOptions(options.value);
    final Wrappers._T<IResultProvider> provider=new Wrappers._T<IResultProvider>();
    final Wrappers._T<SearchQuery> query=new Wrappers._T<SearchQuery>();
    final Wrappers._T<ViewOptions> viewOptions=new Wrappers._T<ViewOptions>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        provider.value=options.value.getOption(FindersOptions.class).getResult();
        query.value=options.value.getOption(ScopeOptions.class).getResult(operationNode.value,((IOperationContext)MapSequence.fromMap(_params).get("context")),((SModelDescriptor)MapSequence.fromMap(_params).get("model")));
        viewOptions.value=options.value.getOption(ViewOptions.class);
      }
    }
);
    FindSpecificNodeUsages_Action.this.getTool(_params).findUsages(provider.value,query.value,true,viewOptions.value.myShowOneResult,viewOptions.value.myNewTab,"No usages for that node");
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "FindSpecificNodeUsages",t);
    }
  }
}
