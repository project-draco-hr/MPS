{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attributeDeclaration",new BaseReferenceConstraintsDescriptor("attributeDeclaration",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      SLinkOperations.setTarget(referenceNode,"value",SLinkOperations.getTarget(newReferentNode,"default",true),true);
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          final SNode taskCall=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.TaskCall",true,false);
          return new SequenceSearchScope(TaskCall_Behavior.call_getUndefinedAttributes_353793545802643943(taskCall)){
            @Override public boolean isInScope(            SNode node){
              if (!(SNodeOperations.isInstanceOf(node,"jetbrains.mps.build.generictasks.structure.AttributeDeclaration"))) {
                return false;
              }
              return ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SLinkOperations.getTarget(taskCall,"declaration",false),"virtual_getAttributesDeclarations_1190349257898147625",new Object[]{})).contains(SNodeOperations.cast(node,"jetbrains.mps.build.generictasks.structure.AttributeDeclaration"));
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_oyfip5_a0a1a0a0a4a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
