{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractAntiquotation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new Antiquotation_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new ListAntiquotation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilder_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderExpression_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderInitLink_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderInitPart_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderInitProperty_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderList_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderNode_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeBuilderRef_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyAntiquotation_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new Quotation_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceAntiquotation_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
