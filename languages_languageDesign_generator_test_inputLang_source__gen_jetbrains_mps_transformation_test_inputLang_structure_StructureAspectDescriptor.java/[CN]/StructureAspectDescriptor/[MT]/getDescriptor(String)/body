{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("expression to reduce to statement","generator should produce clear warning").staticScope(StaticScope.NONE).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"inputChild"},new boolean[]{true}).abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode").properties("option").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_C").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").properties("key").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"inputChild"},new boolean[]{true}).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"statementList"},new boolean[]{false}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestClass").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").references("extends").children(new String[]{"methods"},new boolean[]{true}).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"params","expressions"},new boolean[]{true,true}).create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("method").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParam").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("declaration").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
