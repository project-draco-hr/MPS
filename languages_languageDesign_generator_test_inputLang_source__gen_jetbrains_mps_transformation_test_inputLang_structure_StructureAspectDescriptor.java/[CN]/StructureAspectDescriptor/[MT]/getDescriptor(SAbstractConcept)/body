{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0r.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptExpressionToReduceToStatement;
      }
    break;
case 1:
  if (true) {
    return myConceptInputNode;
  }
break;
case 2:
if (true) {
return myConceptInputNode_A;
}
break;
case 3:
if (true) {
return myConceptInputNode_B;
}
break;
case 4:
if (true) {
return myConceptInputNode_C;
}
break;
case 5:
if (true) {
return myConceptInputRoot;
}
break;
case 6:
if (true) {
return myConceptInputRootWithStatementList;
}
break;
case 7:
if (true) {
return myConceptRefTestClass;
}
break;
case 8:
if (true) {
return myConceptRefTestExpression;
}
break;
case 9:
if (true) {
return myConceptRefTestMethod;
}
break;
case 10:
if (true) {
return myConceptRefTestMethodCall;
}
break;
case 11:
if (true) {
return myConceptRefTestParam;
}
break;
case 12:
if (true) {
return myConceptRefTestParamRef;
}
break;
default :
}
}
return null;
}
