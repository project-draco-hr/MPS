{
  this.conceptFqName=conceptFqName;
  this.superConcept=superConcept;
  this.isInterfaceConcept=isInterfaceConcept;
  this.parents=Arrays.asList(parents);
  ConceptRegistry registry=ConceptRegistry.getInstance();
  List<ConceptDescriptor> parentDescriptors=new ArrayList<ConceptDescriptor>(parents.length);
  for (  String parent : parents) {
    ConceptDescriptor descriptor=registry.getConceptDescriptor(parent);
    parentDescriptors.add(descriptor);
  }
  ancestors=new HashSet<String>(this.parents);
  ancestors.add(conceptFqName);
  for (  ConceptDescriptor parentDescriptor : parentDescriptors) {
    ancestors.addAll(parentDescriptor.getAncestorsNames());
  }
  LinkedHashSet<String> properties=new LinkedHashSet<String>();
  properties.addAll(Arrays.asList(ownPropertyNames));
  for (  ConceptDescriptor parentDescriptor : parentDescriptors) {
    properties.addAll(parentDescriptor.getPropertyNames());
  }
  propertyNames=new ArrayList<String>(properties);
  LinkedHashSet<String> references=new LinkedHashSet<String>();
  references.addAll(Arrays.asList(ownReferenceNames));
  for (  ConceptDescriptor parentDescriptor : parentDescriptors) {
    references.addAll(parentDescriptor.getReferenceNames());
  }
  referenceNames=new ArrayList<String>(references);
}
