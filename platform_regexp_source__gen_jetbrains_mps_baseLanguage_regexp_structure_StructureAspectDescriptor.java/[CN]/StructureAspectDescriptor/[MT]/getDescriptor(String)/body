{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 1:
  return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 2:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 3:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.DotRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 4:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 5:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 6:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 7:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 8:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 9:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 10:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 11:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 12:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 13:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 14:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 15:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 16:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Replacement"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Replacement"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 17:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 18:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IVariableAssignment"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.structure.IVariableAssignment","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 19:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 20:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation",new String[]{"jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"});
case 21:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement",new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Statement"});
case 22:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 23:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 24:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Replacement"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Replacement"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 25:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 26:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 27:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 28:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 29:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.OrRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 30:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 31:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 32:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 33:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.LookRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 34:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 35:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 36:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 37:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 38:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 39:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 40:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.Regexp",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 41:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 42:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 43:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 44:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",new String[]{},new String[]{},new String[]{});
case 45:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.Regexps",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 46:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock",new String[]{"jetbrains.mps.baseLanguage.structure.Closure"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Closure"});
case 47:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation",new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"});
case 48:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 49:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation",new String[]{"jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"});
case 50:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.Replacement",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 51:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp","jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 52:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 53:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SplitOperation",new String[]{"jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"},new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"});
case 54:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 55:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 56:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 57:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp","jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 58:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart",new String[]{},new String[]{},new String[]{});
case 59:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 60:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp",new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.baseLanguage.regexp.structure.Regexp"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
default :
return null;
}
}
