{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(1782411230332735017l,-6324602048325217350l),1216380990741l,1216381219207l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(1782411230332735017l,-6324602048325217350l),1216380990741l,1216381219207l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode editorComponent=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1080736578640l,"jetbrains.mps.lang.editor.structure.BaseEditorComponent"),true,false);
          SNode editedConcept=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),editorComponent,"virtual_getConceptDeclaration_7055725856388417603",new Object[]{});
          return AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(editedConcept);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_bnan1a_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
