{
  reset();
  for (  Generator generator : generators) {
    myAllMappings.addAll(generator.getOwnMappings());
  }
  myAllMappings.addAll(mappingsFromEarlierStepsToProcess);
  for (  MappingConfiguration mapping : myAllMappings) {
    myPriorityMap.put(mapping,new HashMap<MappingConfiguration,PriorityData>());
  }
  for (  Generator generator : generators) {
    GeneratorDescriptor descriptor=(GeneratorDescriptor)generator.getModuleDescriptor();
    List<MappingPriorityRule> rules;
    if (descriptorWorkingCopy != null && descriptorWorkingCopy.getGeneratorUID().equals(descriptor.getGeneratorUID())) {
      rules=descriptorWorkingCopy.getPriorityRules();
    }
 else {
      rules=descriptor.getPriorityRules();
    }
    for (    MappingPriorityRule rule : rules) {
      processRule(rule,generator);
    }
  }
{
    for (    CoherentSetData coherentSetData : myCoherentMappings) {
      Set<MappingConfiguration> coherentMappingSet=coherentSetData.myMappings;
      Map<MappingConfiguration,PriorityData> commonGrtPriMappings=new HashMap<MappingConfiguration,PriorityData>();
      for (      MappingConfiguration coherentMapping : coherentMappingSet) {
        Map<MappingConfiguration,PriorityData> grtPriMappings=myPriorityMap.get(coherentMapping);
        for (        MappingConfiguration grtPriMapping : grtPriMappings.keySet()) {
          PriorityData priorityData=grtPriMappings.get(grtPriMapping);
          PriorityData commonPriorityData=commonGrtPriMappings.get(grtPriMapping);
          if (commonPriorityData != null) {
            commonPriorityData.update(priorityData);
          }
 else {
            commonGrtPriMappings.put(grtPriMapping,new PriorityData(priorityData.isStrict(),priorityData.myCauseRules));
          }
        }
      }
      for (      MappingConfiguration coherentMapping : coherentMappingSet) {
        myPriorityMap.put(coherentMapping,commonGrtPriMappings);
      }
    }
  }
  for (  CoherentSetData coherentSetData : myCoherentMappings) {
    Set<MappingConfiguration> coherentMappingSet=coherentSetData.myMappings;
    for (    MappingConfiguration mapping : myPriorityMap.keySet()) {
      if (coherentMappingSet.contains(mapping))       continue;
      Map<MappingConfiguration,PriorityData> grtPriMappings=myPriorityMap.get(mapping);
      List<MappingConfiguration> list=CollectionUtil.intersection(coherentMappingSet,grtPriMappings.keySet());
      if (list.isEmpty())       continue;
      boolean isStrict=false;
      for (      MappingConfiguration mapping1 : list) {
        if (grtPriMappings.get(mapping1).isStrict()) {
          isStrict=true;
          break;
        }
      }
      for (      MappingConfiguration coherentMapping : coherentMappingSet) {
        PriorityData priorityData=grtPriMappings.get(coherentMapping);
        if (priorityData != null) {
          priorityData.myStrict=isStrict;
          priorityData.myCauseRules.addAll(coherentSetData.myCauseRules);
        }
 else {
          grtPriMappings.put(coherentMapping,new PriorityData(isStrict,coherentSetData.myCauseRules));
        }
      }
    }
  }
{
    Collection<Map<MappingConfiguration,PriorityData>> grtPriMappings=myPriorityMap.values();
    for (    MappingConfiguration processedMapping : mappingsFromEarlierStepsToDisable) {
      for (      Map<MappingConfiguration,PriorityData> grtPriMapping : grtPriMappings) {
        grtPriMapping.remove(processedMapping);
      }
    }
    for (    MappingConfiguration processedMapping : mappingsFromEarlierStepsToDisable) {
      if (myPriorityMap.containsKey(processedMapping) && !myPriorityMap.get(processedMapping).isEmpty()) {
        for (        PriorityData priorityData : myPriorityMap.get(processedMapping).values()) {
          myConflictingRules.addAll(priorityData.myCauseRules);
        }
      }
      myPriorityMap.remove(processedMapping);
    }
  }
  List<List<MappingConfiguration>> mappingSets=createMappingSets();
  for (  Map<MappingConfiguration,PriorityData> grtPriMappings : myPriorityMap.values()) {
    for (    PriorityData priorityData : grtPriMappings.values()) {
      myConflictingRules.addAll(priorityData.myCauseRules);
    }
  }
  return mappingSets;
}
