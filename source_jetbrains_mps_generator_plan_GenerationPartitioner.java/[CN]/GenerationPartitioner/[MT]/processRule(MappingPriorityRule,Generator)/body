{
  MappingConfig_AbstractRef greaterPriMappingRef=rule.getGreaterPriorityMapping();
  MappingConfig_AbstractRef lesserPriMappingRef=rule.getLesserPriorityMapping();
  if (greaterPriMappingRef == null || lesserPriMappingRef == null)   return;
  List<MappingConfiguration> greaterPriMappings=getMappingsFromRef(greaterPriMappingRef,generator);
  List<MappingConfiguration> lesserPriMappings=getMappingsFromRef(lesserPriMappingRef,generator);
  if (rule.getKind() == MappingPriorityRuleKind.strictly_together) {
    List<MappingConfiguration> coherentMappings=new ArrayList<MappingConfiguration>(lesserPriMappings);
    CollectionUtil.addAllNotPresent(greaterPriMappings,coherentMappings);
    myStrictlyTogetherMappings.add(new Pair<MappingPriorityRule,List<MappingConfiguration>>(rule,coherentMappings));
  }
 else {
    lesserPriMappings=CollectionUtil.substruct(lesserPriMappings,greaterPriMappings);
    for (    MappingConfiguration lesserPriMapping : lesserPriMappings) {
      Map<MappingConfiguration,PriorityData> grtPriMappings=myPriorityMap.get(lesserPriMapping);
      for (      MappingConfiguration grtPriMapping : greaterPriMappings) {
        if (!grtPriMappings.containsKey(grtPriMapping)) {
          grtPriMappings.put(grtPriMapping,new PriorityData(rule.getKind() == MappingPriorityRuleKind.strictly_before,rule));
        }
      }
    }
  }
}
