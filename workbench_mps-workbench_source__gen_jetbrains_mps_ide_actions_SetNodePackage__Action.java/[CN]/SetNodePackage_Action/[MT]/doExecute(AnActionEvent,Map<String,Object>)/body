{
  try {
    final Wrappers._T<List<String>> packages=new Wrappers._T<List<String>>();
    final Wrappers._T<String> oldPackage=new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        packages.value=SetNodePackage_Action.this.fetchExistingPackages(((List<SNode>)MapSequence.fromMap(_params).get("nodes")),_params);
        oldPackage.value=SPropertyOperations.getString(ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("nodes"))).first(),"virtualPackage");
      }
    }
);
    final SetNodePackageDialog dialog=new SetNodePackageDialog(((Project)MapSequence.fromMap(_params).get("project")),packages.value);
    dialog.setPackage(oldPackage.value);
    dialog.show();
    if (dialog.isCancelled()) {
      return;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        for (        SNode node : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("nodes")))) {
          SPropertyOperations.set(node,"virtualPackage",dialog.getPackage());
          if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) {
            for (            SNode aspect : ListSequence.fromList(BehaviorReflection.invokeNonVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration","call_findAllAspects_7754459869734028917",new Object[]{}))) {
              SPropertyOperations.set(((SNode)aspect),"virtualPackage",dialog.getPackage());
            }
          }
        }
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "SetNodePackage",t);
  }
}
