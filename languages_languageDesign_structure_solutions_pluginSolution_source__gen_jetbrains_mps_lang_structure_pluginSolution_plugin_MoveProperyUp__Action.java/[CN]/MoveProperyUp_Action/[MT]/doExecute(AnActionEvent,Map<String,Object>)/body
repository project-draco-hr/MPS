{
  try {
    final Wrappers._T<SNode> concept=new Wrappers._T<SNode>();
    ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        concept.value=SNodeOperations.getNodeAncestor(((SNode)MapSequence.fromMap(_params).get("target")),MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),false,false);
      }
    }
);
    if ((concept.value == null)) {
      return;
    }
    final SNode targetConcept=MoveUpDialog.getConcept(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),((SNode)MapSequence.fromMap(_params).get("target")),"property");
    if (targetConcept == null) {
      return;
    }
    modelAccess.runReadInEDT(new Runnable(){
      public void run(){
        SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
        if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
          return;
        }
        SNode node1=((SNode)targetConcept);
        if (!(SNodeUtil.isAccessible(node1,MPSModuleRepository.getInstance()))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.structure.refactorings.MovePropertyUp",Arrays.asList("targetConcept"),Arrays.asList(targetConcept),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MoveProperyUp",t);
    }
  }
}
