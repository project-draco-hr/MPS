{
  final Wrappers._T<List<SNode>> childrenRightAfterEvent=new Wrappers._T<List<SNode>>(event.getParent().getChildren(event.getChildRole()));
  childrenRightAfterEvent.value=ListSequence.fromList(childrenRightAfterEvent.value).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode n){
      return CopyUtil.copyAndPreserveId(n,false);
    }
  }
).toListSequence();
  runUpdateTask(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      final SNodeId parentId=event.getParent().getSNodeId();
      final String role=event.getChildRole();
      removeChanges(parentId,NodeGroupChange.class,new _FunctionTypes._return_P1_E0<Boolean,NodeGroupChange>(){
        public Boolean invoke(        NodeGroupChange ch){
          return role.equals(ch.getRole());
        }
      }
);
      removeDescendantChanges(parentId,role);
      myLastParentAndNewChildrenIds=MultiTuple.<SNodeId,List<SNodeId>>from(parentId,ListSequence.fromList(childrenRightAfterEvent.value).select(new ISelector<SNode,SNodeId>(){
        public SNodeId select(        SNode n){
          return n.getSNodeId();
        }
      }
).toListSequence());
      buildAndAddChanges(new _FunctionTypes._void_P1_E0<ChangeSetBuilder>(){
        public void invoke(        ChangeSetBuilder b){
          b.buildForNodeRole(getOldNode(parentId).getChildren(role),childrenRightAfterEvent.value);
        }
      }
);
    }
  }
,event.getParent(),event);
}
