{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10964446123L,0x10973779681L,"relationDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10964446123L,0x10973779681L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode editorComponent=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xfba0eb7c50L,"jetbrains.mps.lang.editor.structure.BaseEditorComponent"),true,false);
          SNode editedConcept=AbstractComponent__BehaviorDescriptor.getConceptDeclaration_id67EYkym$wx3.invoke(editorComponent);
          List<SNode> links=AbstractConceptDeclaration__BehaviorDescriptor.getLinkDeclarations_idhEwILKK.invoke(editedConcept);
          return ListSequence.fromList(links).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return (boolean)LinkDeclaration__BehaviorDescriptor.isSingular_idhEwIfAt.invoke(it);
            }
          }
).toListSequence();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ykculm_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
