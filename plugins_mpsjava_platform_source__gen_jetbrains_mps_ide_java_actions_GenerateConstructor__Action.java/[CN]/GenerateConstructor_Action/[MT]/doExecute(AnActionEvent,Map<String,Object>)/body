{
  try {
    SNode classConcept=SNodeOperations.getAncestor(((SNode)((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    SNode superclass;
    SNodePointer[] ctors=null;
    boolean needsShowConstructorsDialog=false;
    SNodePointer[] selectedConstructors=null;
    SNodePointer[] selectedFields=null;
    superclass=SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept,"superclass",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
    if (superclass == null) {
      superclass=SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object");
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(superclass,"constructor",true)).count() > 1) {
      needsShowConstructorsDialog=true;
      ctors=ListSequence.fromList(SLinkOperations.getTargets(superclass,"constructor",true)).select(new ISelector<SNode,SNodePointer>(){
        public SNodePointer select(        SNode it){
          return new SNodePointer(it);
        }
      }
).toGenericArray(SNodePointer.class);
    }
 else {
      selectedConstructors=new SNodePointer[]{new SNodePointer(ListSequence.fromList(SLinkOperations.getTargets(superclass,"constructor",true)).first())};
    }
    if (needsShowConstructorsDialog) {
      SelectConstructorsDialog selectConstructorsDialog=new SelectConstructorsDialog(ctors,((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
      selectConstructorsDialog.setTitle("Choose Super Class Constructor");
      selectConstructorsDialog.show();
      if (!(selectConstructorsDialog.isOK())) {
        return;
      }
      List<SNodePointer> selectedElements=selectConstructorsDialog.getSelectedElements();
      selectedConstructors=(selectedElements != null ? selectedElements.toArray(new SNodePointer[selectedElements.size()]) : new SNodePointer[0]);
    }
    boolean needsShowFieldsDialog=false;
    SNodePointer[] fields=null;
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"field",true)).isNotEmpty()) {
      needsShowFieldsDialog=true;
      fields=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"field",true)).select(new ISelector<SNode,SNodePointer>(){
        public SNodePointer select(        SNode it){
          return new SNodePointer(it);
        }
      }
).toGenericArray(SNodePointer.class);
    }
 else {
      selectedFields=new SNodePointer[0];
    }
    if (needsShowFieldsDialog) {
      SelectFieldsDialog selectFieldsDialog=new SelectFieldsDialog(fields,true,((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
      selectFieldsDialog.setTitle("Choose Fields to Initialize by Constructor");
      selectFieldsDialog.show();
      if (!(selectFieldsDialog.isOK())) {
        return;
      }
      selectedFields=Sequence.fromIterable(((Iterable<SNodePointer>)selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class);
    }
    SNode constructorDeclaration=null;
    Project project=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
    for (    SNodePointer ptr : selectedConstructors) {
      SNode selectedSuperConstructor=SNodeOperations.cast(ptr.getNode(),"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
      SNode constructor=SNodeFactoryOperations.addNewChild(classConcept,"constructor","jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
      constructorDeclaration=constructor;
      SNodeFactoryOperations.setNewChild(constructor,"body","jetbrains.mps.baseLanguage.structure.StatementList");
      if (ListSequence.fromList(SLinkOperations.getTargets(selectedSuperConstructor,"parameter",true)).isNotEmpty()) {
        SNode invocation=SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(constructor,"body",true),"statement","jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
        SLinkOperations.setTarget(invocation,"baseMethodDeclaration",selectedSuperConstructor,false);
        for (        SNode superParam : SLinkOperations.getTargets(selectedSuperConstructor,"parameter",true)) {
          SNode parameter=SNodeFactoryOperations.addNewChild(constructor,"parameter","jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
          SPropertyOperations.set(parameter,"name",SPropertyOperations.getString(superParam,"name"));
          SLinkOperations.setTarget(parameter,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(superParam,"type",true)),true);
          SNode paramReference=SNodeFactoryOperations.addNewChild(invocation,"actualArgument","jetbrains.mps.baseLanguage.structure.ParameterReference");
          SLinkOperations.setTarget(paramReference,"variableDeclaration",parameter,false);
        }
      }
      for (      SNodePointer fieldPtr : selectedFields) {
        SNode field=SNodeOperations.cast(fieldPtr.getNode(),"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
        SNode parameterDeclaration=new GenerateConstructor_Action.QuotationClass_oh4di0_a0a1a5a71a0a2().createNode(SNodeOperations.copyNode(SLinkOperations.getTarget(field,"type",true)),GenerateGettersAndSettersUtil.getParameterNameForField(field,project));
        ListSequence.fromList(SLinkOperations.getTargets(constructor,"parameter",true)).addElement(parameterDeclaration);
        SNode expressionStatement=SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(constructor,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ExpressionStatement");
        SNode assignmentExpression=SNodeFactoryOperations.setNewChild(expressionStatement,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
        SLinkOperations.setTarget(assignmentExpression,"lValue",new GenerateConstructor_Action.QuotationClass_oh4di0_a2a5a5a71a0a2().createNode(field),true);
        SLinkOperations.setTarget(assignmentExpression,"rValue",new GenerateConstructor_Action.QuotationClass_oh4di0_a2a6a5a71a0a2().createNode(parameterDeclaration),true);
      }
    }
    if (constructorDeclaration != null) {
      ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).select(constructorDeclaration);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "GenerateConstructor",t);
    }
  }
}
