{
  ListSequence.fromList(SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.samples.Kaja.structure.Script")).visitAll(new IVisitor<SNode>(){
    public void visit(    final SNode script){
      final Iterable<SNode> requireCommands=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(script,"body",true),"commands",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.samples.Kaja.structure.Require");
        }
      }
);
      Sequence.fromIterable(requireCommands).visitAll(new IVisitor<SNode>(){
        public void visit(        final SNode requireCommand){
          Iterable<SNode> definitions=SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(requireCommand,"jetbrains.mps.samples.Kaja.structure.Require"),"library",false),"definitions",true);
          final Map<SNode,SNode> newToOld=MapSequence.fromMap(new HashMap<SNode,SNode>());
          Sequence.fromIterable(definitions).visitAll(new IVisitor<SNode>(){
            public void visit(            final SNode definition){
              final SNode copy=SNodeOperations.copyNode(definition);
              MapSequence.fromMap(newToOld).put(copy,definition);
              SPropertyOperations.set(copy,"name",SPropertyOperations.getString(definition,"name") + "_from_library_" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(requireCommand,"jetbrains.mps.samples.Kaja.structure.Require"),"library",false),"name"));
              ListSequence.fromList(SLinkOperations.getTargets(script,"definitions",true)).addElement(copy);
              ListSequence.fromList(SNodeOperations.getDescendants(script,"jetbrains.mps.samples.Kaja.structure.RoutineCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SLinkOperations.getTarget(it,"definition",false) == definition;
                }
              }
).visitAll(new IVisitor<SNode>(){
                public void visit(                SNode it){
                  SLinkOperations.setTarget(it,"definition",copy,false);
                }
              }
);
            }
          }
);
          SNodeOperations.deleteNode(requireCommand);
          MapSequence.fromMap(newToOld).visitAll(new IVisitor<IMapping<SNode,SNode>>(){
            public void visit(            final IMapping<SNode,SNode> entry){
              ListSequence.fromList(SNodeOperations.getDescendants(script,"jetbrains.mps.samples.Kaja.structure.RoutineCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SLinkOperations.getTarget(it,"definition",false) == entry.value();
                }
              }
).visitAll(new IVisitor<SNode>(){
                public void visit(                SNode it){
                  SLinkOperations.setTarget(it,"definition",entry.key(),false);
                }
              }
);
            }
          }
);
        }
      }
);
    }
  }
);
}
