{
  final List<SModelDescriptor> modelsToGenerate=new ArrayList<SModelDescriptor>();
  IOperationContext invocationContext=myOperationContext;
  for (  IModule module : myModules) {
    if (module instanceof Generator) {
      module=((Generator)module).getSourceLanguage();
      invocationContext=new ModuleChangingOperationContext(module,myOperationContext);
    }
    modelsToGenerate.addAll(getModelsToGenerate(module));
  }
  Collections.sort(modelsToGenerate,new Comparator<SModelDescriptor>(){
    public int compare(    SModelDescriptor o1,    SModelDescriptor o2){
      return o1.getLongName().compareTo(o2.getLongName());
    }
  }
);
  if (modelsToGenerate.isEmpty()) {
    Project project=e.getData(PlatformDataKeys.PROJECT);
    WindowManager.getInstance().getIdeFrame(project).getStatusBar().setInfo("Nothing to generate");
    return;
  }
  final IOperationContext invocationContext1=invocationContext;
  boolean checkSuccessful=myProject.getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class).checkModelsBeforeGenerationIfNeeded(invocationContext,(List)modelsToGenerate,new Runnable(){
    public void run(){
      GeneratorManager generatorManager=myOperationContext.getComponent(GeneratorManager.class);
      IGenerationHandler generationHandler=generatorManager.getDefaultGenerationHandler();
      generatorManager.generateModelsFromDifferentModules(invocationContext1,modelsToGenerate,generationHandler,myRebuildAll);
    }
  }
);
  if (!checkSuccessful) {
    return;
  }
  GeneratorManager generatorManager=myOperationContext.getComponent(GeneratorManager.class);
  IGenerationHandler generationHandler=generatorManager.getDefaultGenerationHandler();
  generatorManager.generateModelsFromDifferentModules(invocationContext,modelsToGenerate,generationHandler,myRebuildAll);
}
