{
  Set<SNode> usedTypeVariables=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode node : Sequence.fromIterable(MapSequence.fromMap(myInnerFields).values()).concat(Sequence.fromIterable(Sequence.<SNode>singleton(myClassToRefactor)))) {
    SetSequence.fromSet(usedTypeVariables).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration")) != null);
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"));
      }
    }
));
  }
  myInnerTypeVariables=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  for (  SNode decl : ListSequence.fromList(SNodeOperations.getNodeAncestors(myClassToRefactor,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),false)).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"));
    }
  }
)) {
    if (SetSequence.fromSet(usedTypeVariables).contains(decl)) {
      MapSequence.fromMap(myInnerTypeVariables).put(decl,SNodeOperations.copyNode(decl));
    }
  }
}
