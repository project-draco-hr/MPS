{
  Set<SNode> usedTypeVariables=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode node : Sequence.fromIterable(MapSequence.fromMap(myInnerFields).values()).concat(Sequence.fromIterable(Sequence.<SNode>singleton(myClassToRefactor)))) {
    SetSequence.fromSet(usedTypeVariables).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,1109283546497l,"typeVariableDeclaration")) != null);
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,1109283546497l,"typeVariableDeclaration"));
      }
    }
));
  }
  myInnerTypeVariables=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  for (  SNode decl : ListSequence.fromList(SNodeOperations.getNodeAncestors(myClassToRefactor,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),false)).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1109279851642l,1109279881614l,"typeVariableDeclaration"));
    }
  }
)) {
    if (SetSequence.fromSet(usedTypeVariables).contains(decl)) {
      MapSequence.fromMap(myInnerTypeVariables).put(decl,SNodeOperations.copyNode(decl));
    }
  }
}
