{
  if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.myClassToRefactor,"baseMethodDeclaration",false),"parameter",true)).isNotEmpty()) {
    List<SNode> parameterReferences=ListSequence.fromList(this.mySuperConstructorParameters).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),it,"virtual_createReference_1213877517482",new Object[]{});
      }
    }
).toListSequence();
    SNode invocation=_quotation_createNode_qy1soj_a0b0a0q(parameterReferences);
    SLinkOperations.setTarget(invocation,"baseMethodDeclaration",SLinkOperations.getTarget(this.myClassToRefactor,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(constructorDeclaration,"body",true),"statement",true)).insertElement(0,invocation);
  }
  for (  SNode fieldDeclaration : SetSequence.fromSet(MapSequence.fromMap(this.myInnerConstructorParameters).keySet())) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(constructorDeclaration,"body",true),"statement",true)).addElement(_quotation_createNode_qy1soj_a0a0a1a61(SNodeOperations.getParent(constructorDeclaration),fieldDeclaration,BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),MapSequence.fromMap(this.myInnerConstructorParameters).get(fieldDeclaration),"virtual_createReference_1213877517482",new Object[]{})));
  }
}
