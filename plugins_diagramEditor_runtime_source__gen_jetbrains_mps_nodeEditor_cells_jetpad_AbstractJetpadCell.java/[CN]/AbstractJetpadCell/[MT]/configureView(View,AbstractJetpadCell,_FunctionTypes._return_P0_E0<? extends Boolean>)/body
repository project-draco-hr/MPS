{
  view.focusable().set(true);
  view.prop(RootTrait.DELETE_HANDLER).set(new DeleteHandler(){
    public boolean canDelete(){
      return canDelete.invoke();
    }
    public void delete(){
      editorCell.getEditorComponent().getSelectionManager().getSelection().executeAction(CellActionType.DELETE);
    }
  }
);
  view.addTrait(new ViewTraitBuilder().on(ViewEvents.KEY_PRESSED,new ViewEventHandler<KeyEvent>(){
    @Override public void handle(    View view,    KeyEvent e){
      if (!(view.focused().get())) {
        return;
      }
      MPSToolTipManager.getInstance().hideToolTip();
      if (e.is(Key.F1,ModifierKey.CONTROL)) {
        editorCell.getEditorComponent().getSelectionManager().getSelection().executeAction(CellActionType.SHOW_MESSAGE);
      }
    }
  }
).on(ViewEvents.MOUSE_PRESSED,new ViewEventHandler<MouseEvent>(){
    public void handle(    View view,    MouseEvent event){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          editorCell.getEditor().showPopupMenu(editorCell.getX(),editorCell.getY());
        }
      }
);
    }
  }
).build());
}
