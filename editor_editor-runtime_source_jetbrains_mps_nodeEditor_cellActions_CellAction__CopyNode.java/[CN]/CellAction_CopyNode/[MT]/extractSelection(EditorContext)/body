{
  EditorComponent editorComponent=(EditorComponent)context.getEditorComponent();
  TextBuilder textBuilder=TextRenderUtil.getTextBuilderForSelectedCellsOfEditor(editorComponent);
  SelectionManager selectionManager=editorComponent.getSelectionManager();
  List<EditorCell> selectedCells=selectionManager.getSelection().getSelectedCells();
  if (selectedCells.size() == 0) {
    return null;
  }
  if (selectedCells.size() > 1) {
    LOG.debug("Copy " + selectedCells.size() + " nodes : ");
    for (    EditorCell aCell : selectedCells) {
      LOG.debug("    " + SNodeOperations.getDebugText(aCell.getSNode()));
    }
  }
 else {
    LOG.debug("Copy node : " + SNodeOperations.getDebugText(selectedCells.get(0).getSNode()));
  }
  List<SNode> copyNodeList=new ArrayList<SNode>();
  List<SNode> deleteNodeList=new ArrayList<SNode>();
  Map<SNode,Set<SNode>> nodesAndAttributes=new HashMap<SNode,Set<SNode>>();
  for (  EditorCell selectedCell : selectedCells) {
    SNode node=selectedCell.getSNode();
    final SNode parent=node.getParent();
    if (parent != null && AttributeOperations.isAttribute(node)) {
      Condition<EditorCell> condition=new Condition<EditorCell>(){
        @Override public boolean met(        EditorCell object){
          SNode selectedNode=object.getSNode();
          return selectedNode != null && selectedNode.getParent() == parent && AttributeOperations.isAttribute(selectedNode);
        }
      }
;
      SNode nodeToDelete=node;
      Set<SNode> selectedAttributes=new HashSet<SNode>();
      selectedAttributes.add(node);
      if (selectedCell instanceof EditorCell_Collection) {
        for (        EditorCell cell : new DfsTraverserIterable(selectedCell,true,true)) {
          if (condition.met(cell)) {
            selectedAttributes.add(cell.getSNode());
          }
          if (cell.getSNode() == parent) {
            nodeToDelete=parent;
          }
        }
      }
      copyNodeList.add(parent);
      deleteNodeList.add(nodeToDelete);
      nodesAndAttributes.put(parent,selectedAttributes);
    }
 else {
      copyNodeList.add(node);
      deleteNodeList.add(node);
    }
  }
  return new MultiTuple._4<List<SNode>,List<SNode>,Map<SNode,Set<SNode>>,String>(copyNodeList,deleteNodeList,nodesAndAttributes,textBuilder.getText());
}
