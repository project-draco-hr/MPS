{
  List<ModuleReference> currentlyUsedLanguages=sModel.importedLanguages();
  List<ModuleReference> usedLanguages=myUsedLanguagesTable.getElements();
  Set<ModuleReference> languagesToRemove=new HashSet<ModuleReference>(currentlyUsedLanguages);
  languagesToRemove.removeAll(usedLanguages);
  for (  ModuleReference language : languagesToRemove) {
    sModel.deleteLanguage(language);
  }
  Set<ModuleReference> languagesToAdd=new HashSet<ModuleReference>(usedLanguages);
  languagesToAdd.removeAll(currentlyUsedLanguages);
  for (  ModuleReference language : languagesToAdd) {
    sModel.addLanguage(language);
  }
  Collection<ModuleReference> addedLanguages=new ArrayList<ModuleReference>();
  for (  ModuleReference language : usedLanguages) {
    if (module.getScope().getLanguage(language) == null) {
      module.addUsedLanguage(language);
      addedLanguages.add(language);
    }
  }
  if (module instanceof SolutionIdea) {
    Module ideaModule=((SolutionIdea)module).getIdeaModule();
    ModifiableRootModel modifiableModel=ModuleRootManager.getInstance(ideaModule).getModifiableModel();
    new ModuleRuntimeLibrariesManager(ideaModule,addedLanguages,modifiableModel).addMissingLibraries();
    modifiableModel.commit();
  }
}
