{
  if (SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
    contextNode=SNodeOperations.getParent(contextNode);
  }
  if (SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier")) {
    LOG.warning("contextNode is classifier in getContextClassifiers: " + contextNode);
    return Collections.emptyMap();
  }
  String sourceChildRole=null;
  while ((contextNode != null) && !(SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier"))) {
    sourceChildRole=contextNode.getRole();
    contextNode=SNodeOperations.getParent(contextNode);
  }
  if ((contextNode == null)) {
    return Collections.emptyMap();
  }
  _2<SNode,String> cacheKey=MultiTuple.<SNode,String>from(SNodeOperations.cast(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier"),sourceChildRole);
  if (MapSequence.fromMap(contextClassifiersCache).containsKey(cacheKey)) {
    return MapSequence.fromMap(contextClassifiersCache).get(cacheKey);
  }
  Map<String,String> result=getContextClassifiersInternal(SNodeOperations.cast(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier"),sourceChildRole);
  MapSequence.fromMap(contextClassifiersCache).put(cacheKey,result);
  return result;
}
