{
  Iterable<SNode> roots=LanguageAspect.STRUCTURE.get(myLanguage).getSModel().roots();
  Iterable<SConceptNodeAdapter> c=Sequence.fromIterable(roots).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    }
  }
).select(new ISelector<SNode,SConceptNodeAdapter>(){
    public SConceptNodeAdapter select(    SNode it){
      return new SConceptNodeAdapter(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
    }
  }
);
  Iterable<SInterfaceConceptNodeAdapter> ci=Sequence.fromIterable(roots).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
    }
  }
).select(new ISelector<SNode,SInterfaceConceptNodeAdapter>(){
    public SInterfaceConceptNodeAdapter select(    SNode it){
      return new SInterfaceConceptNodeAdapter(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"));
    }
  }
);
  return Sequence.fromIterable(c).union(Sequence.fromIterable(ci));
}
