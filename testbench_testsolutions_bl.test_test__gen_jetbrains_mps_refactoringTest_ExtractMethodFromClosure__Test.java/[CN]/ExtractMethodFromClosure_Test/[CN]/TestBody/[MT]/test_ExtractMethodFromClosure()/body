{
  this.addNodeById("5161277940733600914");
  this.addNodeById("5161277940733600960");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("5161277940733600941"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")),SNodeOperations.cast(this.getNodeById("5161277940733600950"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))));
  params.setName("foo");
  MethodParameter p0=ListSequence.fromList(params.getParameters()).getElement(0);
  MethodParameter p1=ListSequence.fromList(params.getParameters()).getElement(1);
  if (SNodeOperations.isInstanceOf(p0.getDeclaration(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7efL,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
    ListSequence.fromList(params.getParameters()).setElement(0,p1);
    ListSequence.fromList(params.getParameters()).setElement(1,p0);
  }
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("5161277940733600919"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("5161277940733600997"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
