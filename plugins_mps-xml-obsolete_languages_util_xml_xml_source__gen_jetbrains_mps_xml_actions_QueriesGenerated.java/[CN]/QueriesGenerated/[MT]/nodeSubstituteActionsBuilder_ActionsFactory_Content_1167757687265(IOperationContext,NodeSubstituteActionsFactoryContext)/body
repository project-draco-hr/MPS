{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final SNode parentElement=new Computable<SNode>(){
    public SNode compute(){
      return ElementUtil.getParentElementDeclaration(_context.getParentNode(),operationContext.getScope());
    }
  }
.compute();
  final boolean isMixed=new Computable<Boolean>(){
    public Boolean compute(){
      return (parentElement == null) || BehaviorReflection.invokeVirtual(Boolean.TYPE,parentElement,"virtual_isMixed_1213877382388",new Object[]{});
    }
  }
.compute();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.structure.Element");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return ElementUtil.getElementDeclarations(parentElement,_context.getParentNode(),operationContext.getScope());
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode prototype;
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.xml.structure.Text") && pattern.equals(SPropertyOperations.getString(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.xml.structure.Text"),"text"))) {
                prototype=null;
              }
 else {
                prototype=_context.getCurrentTargetNode();
              }
              SNode element=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.xml.structure.Element",prototype);
              SLinkOperations.setTarget(element,"elementDeclaration",(item),false);
              SPropertyOperations.set(element,"isEmpty","" + (ElementDeclaration_Behavior.call_isEmpty_1213877429867((item))));
              return element;
            }
            public String getMatchingText(            String pattern){
              return "<" + SPropertyOperations.getString((item),"elementName");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
