{
  ArrayList<String> warnings=new ArrayList<String>(5);
  HashSet<SModule> seen=new HashSet<SModule>();
  for (  SDependency dep : myModule.getDeclaredDependencies()) {
    final SModule depTarget=dep.getTarget();
    if (depTarget == null || seen.contains(depTarget) || (dep.getScope() != SDependencyScope.EXTENDS && dep.getScope() != SDependencyScope.DEFAULT)) {
      continue;
    }
    if (depTarget instanceof Generator) {
      HashSet<SModelReference> otherGeneratorModels=new HashSet<SModelReference>();
      for (      SModel m : depTarget.getModels()) {
        otherGeneratorModels.add(m.getReference());
      }
      final Language otherGenLanguage=((Generator)depTarget).getSourceLanguage();
      for (      SModel m : (otherGenLanguage == null ? Collections.<SModel>emptySet() : otherGenLanguage.getModels())) {
        otherGeneratorModels.add(m.getReference());
      }
      seen.add(depTarget);
      if (CollectionUtil.intersects(dependencies.getCrossModelReferences(),otherGeneratorModels)) {
        continue;
      }
      warnings.add(String.format("Superfluous dependency to generator %s, no generator template nor its source language's node is in use",depTarget.getModuleName()));
    }
  }
  return warnings;
}
