{
  List<String> warnings=new ArrayList<String>(super.getWarnings());
  Set<String> usedLanguages=new HashSet<String>();
  ModelDependencyScanner depScan=new ModelDependencyScanner();
  depScan.crossModelReferences(true).usedLanguages(false);
  for (  SModel model : myModule.getModels()) {
    if (!model.isLoaded()) {
      continue;
    }
    if (SModelStereotype.isGeneratorModel(model)) {
      usedLanguages.addAll(ModelContentUtil.getUsedLanguageNamespacesInTemplateModel(model));
    }
    depScan.walk(model);
  }
  Language sourceLanguage=myModule.getSourceLanguage();
  usedLanguages.remove(sourceLanguage.getModuleName());
  Set<SModule> extendedLanguages=new HashSet<SModule>();
  for (  Language language : LanguageDependenciesManager.getAllExtendedLanguages(sourceLanguage)) {
    extendedLanguages.add(language);
  }
  Set<SModule> generatesIntoLanguages=new HashSet<SModule>();
  for (  SDependency dep : sourceLanguage.getDeclaredDependencies()) {
    if (dep.getScope() == SDependencyScope.GENERATES_INTO) {
      generatesIntoLanguages.add(dep.getTarget());
    }
  }
  for (  String lang : usedLanguages) {
    Language language=ModuleRepositoryFacade.getInstance().getModule(lang,Language.class);
    if (language == null || language.getRuntimeModulesReferences().isEmpty()) {
      continue;
    }
    if (!extendedLanguages.contains(language) && !generatesIntoLanguages.contains(language)) {
      warnings.add(String.format("%s shall specify language %s as generation target",sourceLanguage,lang));
    }
  }
  HashSet<SModule> seen=new HashSet<SModule>();
  for (  SDependency dep : myModule.getDeclaredDependencies()) {
    if (seen.contains(dep.getTarget()) || (dep.getScope() != SDependencyScope.EXTENDS && dep.getScope() != SDependencyScope.DEFAULT)) {
      continue;
    }
    if (dep.getTarget() instanceof Generator) {
      HashSet<SModelReference> otherGeneratorModels=new HashSet<SModelReference>();
      for (      SModel m : dep.getTarget().getModels()) {
        otherGeneratorModels.add(m.getReference());
      }
      final Language otherGenLanguage=((Generator)dep.getTarget()).getSourceLanguage();
      for (      SModel m : (otherGenLanguage == null ? Collections.<SModel>emptySet() : otherGenLanguage.getModels())) {
        otherGeneratorModels.add(m.getReference());
      }
      if (CollectionUtil.intersects(depScan.getCrossModelReferences(),otherGeneratorModels)) {
        continue;
      }
      warnings.add(String.format("Superfluous dependency to generator %s, no generator template nor its source language's node is in use",dep.getTarget().getModuleName()));
      seen.add(dep.getTarget());
    }
  }
  return warnings;
}
