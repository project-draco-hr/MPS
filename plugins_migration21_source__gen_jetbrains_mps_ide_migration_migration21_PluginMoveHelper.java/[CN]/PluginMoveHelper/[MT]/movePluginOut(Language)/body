{
  String solutionName=makePluginSolutionName(l,SOLUTION_NAME);
  Solution s=MPSModuleRepository.getInstance().getSolution(solutionName);
  if (s == null) {
    s=NewModuleUtil.createSolution(solutionName,l.getBundleHome().getDescendant("solutions").getDescendant(SOLUTION_NAME).getPath(),myProject,false);
    StandaloneMPSProject project=(StandaloneMPSProject)myProject;
    project.setFolderFor(s,project.getFolderFor(l));
  }
  final String modelName=s.getModuleFqName() + ".plugin";
  List<SModelDescriptor> solModels=s.getOwnModelDescriptors();
  final Wrappers._T<SModelDescriptor> pluginModel=new Wrappers._T<SModelDescriptor>(ListSequence.fromList(solModels).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return it.getLongName().equals(modelName);
    }
  }
).first());
  if (pluginModel.value == null) {
    pluginModel.value=s.createModel(new SModelFqName(modelName,""),s.getSModelRoots().get(0),null);
  }
  List<SNode> nodes=IterableUtil.asList(LanguageAspect.PLUGIN.get(l).getSModel().roots());
  ListSequence.fromList(nodes).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(isFromFacetLang(it));
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNodeOperations.detachNode(it);
      pluginModel.value.getSModel().addRoot(it);
    }
  }
);
  SModelOperations.validateLanguagesAndImports(pluginModel.value.getSModel(),false,true);
  SModelRepository.getInstance().saveAll();
}
