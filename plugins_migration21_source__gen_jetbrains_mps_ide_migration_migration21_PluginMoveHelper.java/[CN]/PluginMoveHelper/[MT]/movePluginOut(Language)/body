{
  String solutionName=makePluginSolutionName(l,SOLUTION_NAME);
  Solution s=MPSModuleRepository.getInstance().getSolution(solutionName);
  if (s == null) {
    s=NewModuleUtil.createSolution(solutionName,l.getBundleHome().getDescendant("solutions").getDescendant(SOLUTION_NAME).getPath(),myProject,false);
  }
  final String modelName=s.getModuleFqName() + ".plugin";
  List<SModelDescriptor> solModels=s.getOwnModelDescriptors();
  SModelDescriptor pluginModel=ListSequence.fromList(solModels).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return it.getLongName().equals(modelName);
    }
  }
).first();
  if (pluginModel == null) {
    pluginModel=s.createModel(new SModelFqName(modelName,""),s.getSModelRoots().get(0),null);
  }
  List<SNode> nodes=IterableUtil.asList(LanguageAspect.PLUGIN.get(l).getSModel().nodes());
  new RefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(pluginModel),ListSequence.fromList(nodes).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isFromPluginLang(it);
    }
  }
).toListSequence(),myProject));
}
