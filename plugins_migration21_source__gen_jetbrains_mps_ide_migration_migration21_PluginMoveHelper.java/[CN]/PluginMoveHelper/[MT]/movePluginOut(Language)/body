{
  String solutionName=makePluginSolutionName(l,SOLUTION_NAME);
  Solution s=MPSModuleRepository.getInstance().getSolution(solutionName);
  if (s == null) {
    s=NewModuleUtil.createSolution(solutionName,l.getBundleHome().getDescendant("solutions").getDescendant(SOLUTION_NAME).getPath(),myProject,false);
    StandaloneMPSProject project=(StandaloneMPSProject)myProject;
    project.setFolderFor(s,project.getFolderFor(l));
  }
  s.getModuleDescriptor().setKind(SolutionKind.PLUGIN_OTHER);
  s.save();
  final String modelName=s.getModuleFqName() + ".plugin";
  List<SModelDescriptor> solModels=s.getOwnModelDescriptors();
  final Wrappers._T<SModelDescriptor> pluginModel=new Wrappers._T<SModelDescriptor>(ListSequence.fromList(solModels).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return it.getLongName().equals(modelName);
    }
  }
).first());
  if (pluginModel.value == null) {
    pluginModel.value=s.createModel(new SModelFqName(modelName,""),s.getSModelRoots().get(0),null);
  }
  List<SNode> nodes=IterableUtil.asList(LanguageAspect.PLUGIN.get(l).getSModel().roots());
  Iterable<SNode> nodes2Refactor=ListSequence.fromList(nodes).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(isFromFacetLang(it));
    }
  }
);
  RefactoringContext context=RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(pluginModel.value),Sequence.fromIterable(nodes2Refactor).toListSequence(),myProject);
  RefactoringContext rc=(RefactoringContext)context;
  rc.setLocal(true);
  rc.setDoesGenerateModels(false);
  new RefactoringFacade().executeSimple(context);
  jetbrains.mps.smodel.SModelOperations.validateLanguagesAndImports(pluginModel.value.getSModel(),false,true);
  SModelRepository.getInstance().saveAll();
}
