{
  List<Language> langs=myProject.getProjectModules(Language.class);
  Iterable<Language> refLangs=ListSequence.fromList(langs).where(new IWhereFilter<Language>(){
    public boolean accept(    Language it){
      return !(it.isPackaged()) && LanguageAspect.PLUGIN.get(it) != null;
    }
  }
);
  Iterable<Language> problems=Sequence.fromIterable(refLangs).where(new IWhereFilter<Language>(){
    public boolean accept(    Language it){
      return MPSModuleRepository.getInstance().getSolution(makePluginSolutionName(it,SOLUTION_NAME)) != null;
    }
  }
);
  if (Sequence.fromIterable(problems).isNotEmpty()) {
    final StringBuilder sb=new StringBuilder();
    Sequence.fromIterable(problems).visitAll(new IVisitor<Language>(){
      public void visit(      Language it){
        sb.append(makePluginSolutionName(it,SOLUTION_NAME)).append(",\n");
      }
    }
);
    if (sb.length() > 0) {
      sb.delete(sb.length() - 2,sb.length() - 1);
    }
    int result=Messages.showYesNoDialog("Solutions\n" + sb.toString() + " already exist. Nodes will be moved to existing solutions","Solution Exists","Continue","Cancel",null);
    if (result == 1) {
      return;
    }
  }
  for (  Language lang : Sequence.fromIterable(refLangs)) {
    movePluginOut(lang);
  }
  myProject.getProject().save();
  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
}
