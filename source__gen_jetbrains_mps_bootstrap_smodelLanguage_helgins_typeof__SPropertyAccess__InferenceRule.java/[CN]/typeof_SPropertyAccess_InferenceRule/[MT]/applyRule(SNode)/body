{
  if (RulesUtil.checkAppliedCorrectly_generic(argument) && (SLinkOperations.getTarget(argument,"property",false) != null)) {
    SNode inputNodeConcept=RulesUtil.get_inputNodeConcept(argument);
    if (!((inputNodeConcept != null))) {
      TypeChecker.getInstance().reportTypeError(argument,"couldn't define node concept from left expression");
    }
    List<PropertyDeclaration> declaredProperties=SModelSearchUtil_new.getPropertyDeclarationsExcludingOverridden(((AbstractConceptDeclaration)SNodeOperations.getAdapter(inputNodeConcept)));
    SNode propertyDecl=SLinkOperations.getTarget(argument,"property",false);
    if (!(declaredProperties.contains(((PropertyDeclaration)SNodeOperations.getAdapter(propertyDecl))))) {
      TypeChecker.getInstance().reportTypeError(argument,"access to property '" + SPropertyOperations.getString(propertyDecl,"name") + "' is not expected here");
    }
  }
  TypeChecker.getInstance().getRuntimeSupport().givetype(StructureLanguageUtil.adapt_PropertyDeclaration_to_Type(((PropertyDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(argument,"property",false)))),argument);
}
