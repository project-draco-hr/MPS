{
  if (RulesUtil.checkAppliedCorrectly_generic(argument) && (SLinkOperations.getTarget(argument,"property",false) != null)) {
    SNode inputNodeConcept=RulesUtil.get_inputNodeConcept(argument);
    if (!((inputNodeConcept != null))) {
      TypeChecker.getInstance().reportTypeError(argument,"couldn't define node concept from left expression");
    }
    List<PropertyDeclaration> declaredProperties=SModelSearchUtil_new.getPropertyDeclarationsExcludingOverridden(((AbstractConceptDeclaration)SNodeOperations.getAdapter(inputNodeConcept)));
    SNode property=SLinkOperations.getTarget(argument,"property",false);
    if (!(declaredProperties.contains(((PropertyDeclaration)SNodeOperations.getAdapter(property))))) {
      TypeChecker.getInstance().reportTypeError(argument,"access to property '" + SPropertyOperations.getString(property,"name") + "' is not expected here");
    }
  }
  SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(argument,"property",false),"dataType",false);
  if (dataType != null) {
    TypeChecker.getInstance().getRuntimeSupport().givetype(BehaviorManager.getInstance().invoke(SNode.class,dataType,"virtual_toBaseLanguageType_1182472765133"),argument);
  }
}
