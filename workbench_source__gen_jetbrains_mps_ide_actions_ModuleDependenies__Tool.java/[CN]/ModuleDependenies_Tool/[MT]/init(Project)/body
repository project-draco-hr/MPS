{
  super.init(project);
  ModuleDependenies_Tool.this.myComponent=new JPanel(new BorderLayout());
  ModuleDependenies_Tool.this.myLeftTree=new DependencyTree(project,ModuleDependenies_Tool.this.myComponent);
  ModuleDependenies_Tool.this.myRightTree=new DependencyPathTree();
  ActionGroup group=ActionUtils.groupFromActions(new CloseAction(ModuleDependenies_Tool.this));
  JComponent toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  Splitter splitter=new Splitter();
  ModuleDependenies_Tool.this.myComponent.add(toolbar,BorderLayout.NORTH);
  ModuleDependenies_Tool.this.myComponent.add(splitter,BorderLayout.CENTER);
  splitter.setFirstComponent(new JBScrollPane(ModuleDependenies_Tool.this.myLeftTree));
  splitter.setSecondComponent(new JBScrollPane(ModuleDependenies_Tool.this.myRightTree));
  ModuleDependenies_Tool.this.myLeftTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent p0){
      ModuleDependenies_Tool.this.myRightTree.resetDependencies();
      Map<List<IModule>,List<IModule>> dependencies=MapSequence.fromMap(new HashMap<List<IModule>,List<IModule>>());
      TreePath[] paths=ModuleDependenies_Tool.this.myLeftTree.getSelectionPaths();
      if (paths != null) {
        for (        TreePath path : paths) {
          MPSTreeNode node=(MPSTreeNode)path.getLastPathComponent();
          if (node instanceof ModuleDependencyNode) {
            ModuleDependencyNode n=(ModuleDependencyNode)node;
            List<IModule> from=check_8yoj0b_a0b0b0a0d0a0a0a0p0a(n.getFromNode());
            if (from != null) {
              if (!(MapSequence.fromMap(dependencies).containsKey(from))) {
                MapSequence.fromMap(dependencies).put(from,ListSequence.fromList(new ArrayList<IModule>()));
              }
              ListSequence.fromList(MapSequence.fromMap(dependencies).get(from)).addSequence(ListSequence.fromList(n.getModules()));
            }
          }
        }
      }
      for (      IMapping<List<IModule>,List<IModule>> dep : MapSequence.fromMap(dependencies)) {
        ModuleDependenies_Tool.this.myRightTree.addDependency(dep.key(),dep.value(),null);
      }
      ModuleDependenies_Tool.this.myRightTree.rebuildLater();
    }
  }
);
}
