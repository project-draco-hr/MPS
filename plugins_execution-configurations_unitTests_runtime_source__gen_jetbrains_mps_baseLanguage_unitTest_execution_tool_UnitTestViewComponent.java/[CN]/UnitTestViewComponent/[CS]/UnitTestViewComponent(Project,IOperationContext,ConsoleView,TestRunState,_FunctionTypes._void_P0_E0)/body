{
  this.myProject=project;
  this.myTestState=testRunState;
  StatisticsTableModel statisticsModel=new StatisticsTableModel(this.myTestState);
  this.myTreeComponent=new TestTree(this.myTestState,context,this);
  this.myTestNavigator=new FailedTestOccurenceNavigator(this.myTreeComponent);
  this.myActionToolComponent=new TestToolbarPanel(this.myTreeComponent,this.myTestNavigator);
  JComponent leftPanel=this.createTreeComponent(myActionToolComponent,myTreeComponent);
  this.myProgressLineComponent=new ProgressLine(this.myTestState);
  this.myProgressLineComponent.setMinimumSize(new Dimension(0,this.myProgressLineComponent.getMinimumSize().height));
  this.myOutputComponent=new TestOutputComponent(this.myProject,this,console,this.myTestState);
  this.myTreeComponent.addTreeSelectionListener(new TestTreeSelectionListener(this.myTreeComponent,statisticsModel,this.myOutputComponent));
  this.myTreeComponent.addMouseListener(new TestTreeRootMouseListener(this.myTreeComponent,statisticsModel,this.myOutputComponent));
  JPanel rightPanel=this.createOutputComponent(console,myProgressLineComponent,myOutputComponent.getComponent(),statisticsModel);
  Splitter splitter=new Splitter(false);
  initSplitterProportion(splitter,0.2f,"tree");
  splitter.setFirstComponent(leftPanel);
  splitter.setSecondComponent(rightPanel);
  this.setLayout(new BorderLayout());
  this.add(splitter,BorderLayout.CENTER);
  this.myTestState.addView(this.myTreeComponent);
  this.myTestState.addView(this.myProgressLineComponent);
  this.myTestState.addView(this.myOutputComponent);
  this.addCloseListener(closeListener);
}
