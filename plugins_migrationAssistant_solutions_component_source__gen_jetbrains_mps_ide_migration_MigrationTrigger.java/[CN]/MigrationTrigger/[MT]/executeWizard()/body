{
  myState.migrationRequired=false;
  final MigrationAssistantWizard wizard=new MigrationAssistantWizard(myProject,myMigrationManager);
  boolean finished=wizard.showAndGet();
  if (!(finished)) {
    return;
  }
  if (wizard.isFinishSuccessfull()) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        ProjectManagerEx.getInstance().reloadProject(myProject);
      }
    }
);
    return;
  }
  MigrationErrorStep lastStep=as_feb5zp_a0a9a23(wizard.getCurrentStepObject(),MigrationErrorStep.class);
  if (lastStep == null) {
    return;
  }
  final _FunctionTypes._void_P0_E0 afterProjectInitialized=lastStep.afterProjectInitialized();
  if (afterProjectInitialized == null) {
    return;
  }
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          afterProjectInitialized.invoke();
        }
      }
,ModalityState.NON_MODAL);
    }
  }
);
}
