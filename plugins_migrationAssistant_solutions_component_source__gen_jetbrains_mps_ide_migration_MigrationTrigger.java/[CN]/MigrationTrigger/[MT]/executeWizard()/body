{
  myState.migrationRequired=false;
  final MigrationAssistantWizard wizard=new MigrationAssistantWizard(myProject,myMigrationManager,this);
  boolean finished=wizard.showAndGet();
  restoreTipsState();
  if (!(finished)) {
    return;
  }
  if (myErrors == null) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        ProjectManagerEx.getInstance().reloadProject(myProject);
      }
    }
);
    return;
  }
  MigrationErrorWizardStep lastStep=as_feb5zp_a0a01a64(wizard.getCurrentStepObject(),MigrationErrorWizardStep.class);
  if (lastStep == null) {
    return;
  }
  final Wrappers._T<Iterable<Problem>> problems=new Wrappers._T<Iterable<Problem>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      problems.value=myErrors.getProblems();
    }
  }
);
  if (Sequence.fromIterable(problems.value).isEmpty()) {
    return;
  }
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              ModelCheckerViewer v=new ModelCheckerViewer(myProject){
                @Override protected void close(){
                  ModelCheckerTool.getInstance(myProject).closeTab(this);
                  super.close();
                }
              }
;
              final SearchResults<ModelCheckerIssue> result=new SearchResults<ModelCheckerIssue>();
              Sequence.fromIterable(problems.value).visitAll(new IVisitor<Problem>(){
                public void visit(                Problem it){
                  Object r=it.getReason();
                  ModelCheckerIssue mci;
                  if (r instanceof SNode) {
                    mci=new ModelCheckerIssue.NodeIssue(((org.jetbrains.mps.openapi.model.SNode)r),it.getMessage(),null);
                  }
 else                   if (r instanceof SModule) {
                    mci=new ModelCheckerIssue.ModuleIssue(it.getMessage(),null);
                  }
 else {
                    throw new IllegalArgumentException(r.getClass().getName());
                  }
                  result.add(new SearchResult<ModelCheckerIssue>(mci,r,it.getCategory()));
                }
              }
);
              v.setSearchResults(result);
              ModelCheckerTool.getInstance(myProject).showTabWithResults(v,"Migration issues",IdeIcons.MODULE_GROUP_CLOSED);
            }
          }
);
        }
      }
,ModalityState.NON_MODAL);
    }
  }
);
}
