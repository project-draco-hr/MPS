{
  if (!(myState.migrationRequired)) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        MPSModuleRepository.getInstance().addRepositoryListener(MigrationTrigger.this.myRepoListener);
        ClassLoaderManager.getInstance().addClassesHandler(MigrationTrigger.this.myClassesListener);
        myProject.getComponent(ProjectMigrationProperties.class).addListener(MigrationTrigger.this.myPropertiesListener);
      }
    }
);
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(myMpsProject)).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
          public void visit(          AbstractModule it){
            it.validateLanguageVersions();
          }
        }
);
        tryMigratingProject();
      }
    }
);
    return;
  }
  saveAndSetTipsState();
  StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
    public void run(){
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(myMpsProject)).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
            public void visit(            AbstractModule it){
              it.validateLanguageVersions();
            }
          }
);
        }
      }
);
      if (!(myMigrationManager.isMigrationRequired())) {
        restoreTipsState();
        return;
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          VirtualFileUtils.refreshSynchronouslyRecursively(myProject.getBaseDir());
          VirtualFileManager.getInstance().asyncRefresh(new Runnable(){
            public void run(){
              SwingUtilities.invokeLater(new Runnable(){
                public void run(){
                  ReloadManager.getInstance().flush();
                  ProjectManagerEx.getInstanceEx().unblockReloadingProjectOnExternalChanges();
                  executeWizard();
                }
              }
);
            }
          }
);
        }
      }
);
    }
  }
);
}
