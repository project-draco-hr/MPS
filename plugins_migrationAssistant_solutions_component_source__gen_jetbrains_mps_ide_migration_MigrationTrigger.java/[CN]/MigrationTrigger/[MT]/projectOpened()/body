{
  if (!(myState.migrationRequired)) {
    addListeners();
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        checkMigrationNeeded();
      }
    }
);
  }
 else {
    StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            VirtualFileUtils.refreshSynchronouslyRecursively(myProject.getBaseDir());
            VirtualFileManager.getInstance().syncRefresh();
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                ReloadManager.getInstance().flush();
                ProjectManagerEx.getInstanceEx().unblockReloadingProjectOnExternalChanges();
                myState.migrationRequired=false;
                final MigrationAssistantWizard wizard=new MigrationAssistantWizard(myProject,myMigrationManager);
                boolean finished=wizard.showAndGet();
                if (!(finished)) {
                  return;
                }
                if (wizard.isFinishSuccessfull()) {
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    public void run(){
                      ProjectManagerEx.getInstance().reloadProject(myProject);
                    }
                  }
);
                  return;
                }
                MigrationErrorStep lastStep=as_feb5zp_a0a21a0a0a0c0a0a0a0a0a0a0a0a0a0a61(wizard.getCurrentStepObject(),MigrationErrorStep.class);
                if (lastStep == null) {
                  return;
                }
                final _FunctionTypes._void_P0_E0 afterProjectInitialized=lastStep.afterProjectInitialized();
                if (afterProjectInitialized == null) {
                  return;
                }
                StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
                  public void run(){
                    ApplicationManager.getApplication().invokeLater(new Runnable(){
                      public void run(){
                        afterProjectInitialized.invoke();
                      }
                    }
,ModalityState.NON_MODAL);
                  }
                }
);
              }
            }
);
          }
        }
);
      }
    }
);
  }
}
