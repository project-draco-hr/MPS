{
  if (RuntimeFlags.getTestMode().isInsideTestEnvironment()) {
    return;
  }
  if (!(myState.migrationRequired)) {
    addListeners();
    checkMigrationNeeded();
  }
 else {
    saveAndSetTipsState();
    StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            syncRefresh();
          }
        }
);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            myState.migrationRequired=false;
            myMpsProject.getRepository().getModelAccess().runWriteAction(new Runnable(){
              public void run(){
                updateVersions(MigrationsUtil.getMigrateableModulesFromProject(myMpsProject));
              }
            }
);
            final MigrationAssistantWizard wizard=new MigrationAssistantWizard(myProject,myMigrationManager,MigrationTrigger.this);
            boolean finished=wizard.showAndGet();
            restoreTipsState();
            if (!(finished) && myErrors == null) {
              return;
            }
            if (myErrors == null) {
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                public void run(){
                  ProjectManagerEx.getInstance().reloadProject(myProject);
                }
              }
);
            }
 else {
              MigrationErrorWizardStep lastStep=as_feb5zp_a0a0a0k0a0a0a0b0a0a0a0b0a3a52(wizard.getCurrentStepObject(),MigrationErrorWizardStep.class);
              if (lastStep == null) {
                return;
              }
              StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
                public void run(){
                  final Wrappers._T<List<Problem>> problems=new Wrappers._T<List<Problem>>();
                  ProgressManager.getInstance().run(new Task.Modal(myProject,"Collecting Errors",false){
                    public void run(                    @NotNull final ProgressIndicator progressIndicator){
                      myMpsProject.getRepository().getModelAccess().runReadAction(new Runnable(){
                        public void run(){
                          problems.value=Sequence.fromIterable(myErrors.getProblems(progressIndicator)).toListSequence();
                        }
                      }
);
                    }
                  }
);
                  ApplicationManager.getApplication().invokeLater(new Runnable(){
                    public void run(){
                      myMpsProject.getRepository().getModelAccess().runReadAction(new Runnable(){
                        public void run(){
                          MigrationOutputUtil.showProblems(myProject,problems.value);
                        }
                      }
);
                    }
                  }
,ModalityState.NON_MODAL);
                }
              }
);
            }
          }
        }
);
      }
    }
);
  }
}
