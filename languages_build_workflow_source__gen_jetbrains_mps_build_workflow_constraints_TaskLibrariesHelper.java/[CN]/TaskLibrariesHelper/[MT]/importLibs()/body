{
  Set<SNode> libsSet=new LinkedHashSet<SNode>();
  for (  SNode tldep : SLinkOperations.getTargets(project,"imports",true)) {
    libsSet.add(SLinkOperations.getTarget(tldep,"target",false));
  }
  closure(libsSet);
  List<SNode> libs=new ArrayList<SNode>(libsSet);
  for (  SNode lib : libs) {
    for (    SNode n : lib.getDescendantsIterable(null,true)) {
      for (      SReference ref : n.getReferencesIterable()) {
        SNode targetNode=ref.getTargetNodeSilently();
        if (targetNode == null) {
          genContext.showErrorMessage(n,"cannot import library `" + SPropertyOperations.getString(lib,"name") + "': unresolved reference");
        }
 else         if (!(libsSet.contains(targetNode.getTopmostAncestor()))) {
          genContext.showErrorMessage(n,"cannot import library `" + SPropertyOperations.getString(lib,"name") + "': broken reference, target is not imported");
        }
      }
    }
  }
  List<SNode> parts=ListSequence.fromList(libs).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getTargets(it,"parts",true);
    }
  }
).toListSequence();
  Map<SNode,SNode> map=new HashMap<SNode,SNode>();
  parts=(List<SNode>)CopyUtil.copy((List<SNode>)parts,map);
  ListSequence.fromList(SLinkOperations.getTargets(project,"imports",true)).clear();
  for (  SNode n : project.getDescendantsIterable(null,true)) {
    for (    SReference ref : n.getReferences()) {
      SNode targetNode=ref.getTargetNodeSilently();
      if (map.containsKey(targetNode)) {
        n.setReferent(ref.getRole(),map.get(targetNode));
      }
    }
  }
  ListSequence.fromList(SLinkOperations.getTargets(project,"parts",true)).addSequence(ListSequence.fromList(parts));
}
