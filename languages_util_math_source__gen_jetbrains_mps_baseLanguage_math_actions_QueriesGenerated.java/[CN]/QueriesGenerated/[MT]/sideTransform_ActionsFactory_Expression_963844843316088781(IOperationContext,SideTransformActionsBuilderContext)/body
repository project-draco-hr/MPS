{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode result=SNodeOperations.replaceWithAnother(_context.getSourceNode(),_quotation_createNode_fo7if3_a0a0a0a0a2(_context.getSourceNode()));
        return SLinkOperations.getTarget(result,"exponent",true);
      }
      public String getMatchingText(      String pattern){
        return "^";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "Raise to power";
      }
    }
);
  }
  return result;
}
