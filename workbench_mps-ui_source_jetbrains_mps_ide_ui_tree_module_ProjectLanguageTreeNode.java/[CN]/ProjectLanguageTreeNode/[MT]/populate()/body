{
  for (  SModel m : LanguageAspectSupport.getAspectModels(getModule())) {
    add(new SModelTreeNode(m,null,false));
  }
  if (getModule().getAccessoryModels().size() > 0) {
    TextTreeNode accessories=new AccessoriesModelTreeNode(this);
    List<SModel> sortedModels=SortUtil.sortModels(getModule().getAccessoryModels());
    for (    SModel model : sortedModels) {
      SModule m=model.getModule();
      boolean currentModule=m == null || m == getModule();
      if (!currentModule) {
        accessories.add(new SModelReferenceTreeNode(model,myProject));
      }
 else {
        accessories.add(new SModelTreeNode(model,null));
      }
    }
    this.add(accessories);
  }
  for (  Generator generator : getModule().getGenerators()) {
    MPSTreeNode generatorNode=new GeneratorTreeNode(generator,myProject);
    add(generatorNode);
  }
  TextTreeNode languageRuntime=new RuntimeModulesTreeNode();
  for (  SModuleReference mr : getModule().getRuntimeModulesReferences()) {
    SModule m=ModuleRepositoryFacade.getInstance().getModule(mr);
    if (m == null || m == getModule())     continue;
    languageRuntime.add(createFor(myProject,m));
  }
  add(languageRuntime);
  if (getModule().getUtilModels().size() > 0) {
    TextTreeNode utilModels=new SModelGroupTreeNode();
    new SModelsSubtree(utilModels).create(getModule().getUtilModels());
    this.add(utilModels);
  }
  TextTreeNode allModels=new AllModelsTreeNode();
  allModels.setIcon(IdeIcons.PROJECT_MODELS_ICON,false);
  allModels.setIcon(IdeIcons.PROJECT_MODELS_EXPANDED_ICON,true);
  new SModelsSubtree(allModels,false,false).create(getModule());
  add(allModels);
}
