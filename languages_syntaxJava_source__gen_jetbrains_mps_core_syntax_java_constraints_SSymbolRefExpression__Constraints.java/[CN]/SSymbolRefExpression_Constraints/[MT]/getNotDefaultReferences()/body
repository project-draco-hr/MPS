{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("ref",new BaseReferenceConstraintsDescriptor("ref",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          String name=(isNotEmpty_c3xnmz_a0a0a0b0a0a0b0a1a0b0a(SPropertyOperations.getString(_context.getParameterNode(),"refalias")) ? SPropertyOperations.getString(_context.getParameterNode(),"refalias") : ((SPropertyOperations.getBoolean(_context.getParameterNode(),"isOptional") ? SPropertyOperations.getString(SLinkOperations.getTarget(_context.getParameterNode(),"ref",false),"name") + "opt" : SPropertyOperations.getString(SLinkOperations.getTarget(_context.getParameterNode(),"ref",false),"name"))));
          return "$" + name;
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode action=SNodeOperations.getAncestor(((_context.getReferenceNode() != null ? _context.getReferenceNode() : _context.getEnclosingNode())),"jetbrains.mps.core.syntax.java.structure.SJavaAction",true,false);
          if (action == null) {
            return null;
          }
          if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(action),"jetbrains.mps.core.syntax.structure.SRule")) {
            List<SNode> result=new ArrayList<SNode>();
            SNode curr=SNodeOperations.getPrevSibling(action);
            while (curr != null) {
              if (SNodeOperations.isInstanceOf(curr,"jetbrains.mps.core.syntax.structure.SSymbolRef")) {
                ListSequence.fromList(result).addElement(SNodeOperations.cast(curr,"jetbrains.mps.core.syntax.structure.SSymbolRef"));
              }
              curr=SNodeOperations.getPrevSibling(curr);
            }
            return result;
          }
          return null;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_c3xnmz_a0a3a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
