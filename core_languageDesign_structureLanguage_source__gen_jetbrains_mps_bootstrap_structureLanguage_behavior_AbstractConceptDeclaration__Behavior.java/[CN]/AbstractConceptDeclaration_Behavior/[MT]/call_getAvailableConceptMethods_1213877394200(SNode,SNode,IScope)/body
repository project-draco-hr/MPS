{
  List<SNode> methods=new ArrayList<SNode>();
  if (thisNode == null) {
    return methods;
  }
  SNode contextBehaviour=SNodeOperations.getAncestor(context,"jetbrains.mps.bootstrap.constraintsLanguage.structure.ConceptBehavior",true,false);
  for (  SNode concept : SConceptOperations.getConceptHierarchy(thisNode)) {
    SNode behaviour=AbstractConceptDeclaration_Behavior.call_findBehaviour_1213877394029(concept,scope);
    if (behaviour != null) {
      for (      SNode method : SLinkOperations.getTargets(behaviour,"method",true)) {
        if (SLinkOperations.getTarget(method,"overriddenMethod",false) != null) {
          continue;
        }
        if (!(SPropertyOperations.getBoolean(method,"isPrivate"))) {
          ListSequence.fromList(methods).addElement(method);
        }
 else {
          if (SNodeOperations.getContainingRoot(method) == contextBehaviour) {
            ListSequence.fromList(methods).addElement(method);
          }
        }
      }
    }
  }
  return methods;
}
