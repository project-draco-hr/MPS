{
  List<Node> sorting=TopologicalSorting.sort(graph);
  if (sorting == null) {
    throw new IllegalArgumentException("input graph has cycles");
  }
  Map<Node,Integer> numbering=new NodeMap<Integer>(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Node,Integer>fromMap(numbering).put(node,0);
  }
  for (  Node node : ListSequence.<Node>fromList(sorting)) {
    for (    Edge edge : ListSequence.<Edge>fromList(node.getOutEdges())) {
      Node target=edge.getTarget();
      MapSequence.<Node,Integer>fromMap(numbering).put(target,Math.max(MapSequence.<Node,Integer>fromMap(numbering).get(target),MapSequence.<Node,Integer>fromMap(numbering).get(node) + MapSequence.<Edge,Integer>fromMap(weights).get(edge)));
    }
  }
  return numbering;
}
