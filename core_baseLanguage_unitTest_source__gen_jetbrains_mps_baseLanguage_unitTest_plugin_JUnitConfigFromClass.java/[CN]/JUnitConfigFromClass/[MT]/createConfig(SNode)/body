{
  SNode testNode=SNodeOperations.cast(SNodeOperations.getAncestorWhereConceptInList(parameter,Sequence.fromIterable(TestNodeWrapperFactory.getWrappedRootConcepts()).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return INamedConcept_Behavior.call_getFqName_1213877404258(it);
    }
  }
).toGenericArray(String.class),true,true),"jetbrains.mps.lang.core.structure.INamedConcept");
  if (testNode == null) {
    return;
  }
  ITestNodeWrapper wrapper=TestNodeWrapperFactory.tryToWrap(testNode);
  if (wrapper == null || Sequence.fromIterable(wrapper.getTestMethods()).isEmpty()) {
    return;
  }
  JUnitConfigFromClass.this.setSourceElement(new MPSPsiElement(testNode));
{
    JUnit_ConfigurationType configType=ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP),JUnit_ConfigurationType.class);
    DefaultJUnit_Configuration _config=new DefaultJUnit_Configuration(JUnitConfigFromClass.this.getContext().getProject(),findFactory(configType,"DefaultJUnit"),"NewConfig");
    _config.setName(SPropertyOperations.getString(testNode,"name"));
    _config.getStateObject().type=JUnitRunTypes.NODE;
    _config.getStateObject().testCases=new ClonableList<String>(TestUtils.pointerToString(new SNodePointer(testNode)));
    JUnitConfigFromClass.this.myConfig=_config;
  }
}
