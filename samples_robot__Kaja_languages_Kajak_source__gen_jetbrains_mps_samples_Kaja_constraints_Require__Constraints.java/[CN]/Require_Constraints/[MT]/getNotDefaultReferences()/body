{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("library",new BaseReferenceConstraintsDescriptor("library",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_iz8172_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            final Iterable<SNode> libraries=ListSequence.fromList(SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.samples.Kaja.structure.Library")).where(new IWhereFilter<SNode>(){
              public boolean accept(              final SNode library){
                return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"jetbrains.mps.samples.Kaja.structure.Require",false,new String[]{})).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return it != _context.getContextNode();
                  }
                }
).select(new ISelector<SNode,SNode>(){
                  public SNode select(                  SNode it){
                    return SLinkOperations.getTarget(it,"library",false);
                  }
                }
).all(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return it != library;
                  }
                }
);
              }
            }
);
            return new ListScope(libraries){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,"jetbrains.mps.lang.core.structure.INamedConcept"),"name");
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
