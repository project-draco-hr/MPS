{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x3cfcda239f1a1049L,0x3cfcda239f1a104aL,"library"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x3cfcda239f1a1049L,0x3cfcda239f1a104aL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_iz8172_a0a0a0a0a1a0b0a1a4;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            final Iterable<SNode> libraries=ListSequence.fromList(SModelOperations.roots(_context.getModel(),MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x3cfcda239f19d316L,"jetbrains.mps.samples.Kaja.structure.Library"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              final SNode library){
                return ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2d523c5e4cc45746L,"jetbrains.mps.samples.Kaja.structure.Script"),true,false),MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x3cfcda239f1a1049L,"jetbrains.mps.samples.Kaja.structure.Require"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return it != _context.getContextNode();
                  }
                }
).select(new ISelector<SNode,SNode>(){
                  public SNode select(                  SNode it){
                    return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x3cfcda239f1a1049L,0x3cfcda239f1a104aL,"library"));
                  }
                }
).all(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return it != library;
                  }
                }
);
              }
            }
);
            return new ListScope(libraries){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
