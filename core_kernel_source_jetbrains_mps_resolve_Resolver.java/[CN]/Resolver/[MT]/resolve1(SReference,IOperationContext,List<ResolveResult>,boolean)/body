{
  SNode referenceNode=reference.getSourceNode();
  if (referenceNode == null)   return false;
  ConceptDeclaration referenceNodeConcept=(ConceptDeclaration)referenceNode.getConceptDeclarationAdapter();
  LinkDeclaration linkDeclaration=SModelSearchUtil.findLinkDeclaration(referenceNodeConcept,reference.getRole());
  if (linkDeclaration == null) {
    return false;
  }
  final AbstractConceptDeclaration referentConcept=linkDeclaration.getTarget();
  final String referentConceptFqName=NameUtil.nodeFQName(referentConcept);
  TypeCheckingContext typeCheckingContext=NodeTypesComponentsRepository.getInstance().createTypeCheckingContext(referenceNode);
  if (typeCheckingContext == null)   return false;
  typeCheckingContext.setInEditorQueriesMode();
  try {
    SearchScopeStatus status=ModelConstraintsUtil.getSearchScope(referenceNode.getParent(),referenceNode,referenceNodeConcept,linkDeclaration,operationContext);
    if (status.isError()) {
      LOG.error("Couldn't create referent search scope : " + status.getMessage());
      return false;
    }
    ISearchScope searchScope=status.getSearchScope();
    List<SNode> nodes=searchScope.getNodes(new Condition<SNode>(){
      public boolean met(      SNode node){
        return node.isInstanceOfConcept(referentConceptFqName);
      }
    }
);
    Condition<SNode> nameMatchesCondition=new Condition<SNode>(){
      public boolean met(      SNode object){
        String resolveInfo=reference.getResolveInfo();
        return resolveInfo != null && resolveInfo.equals(object.getName());
      }
    }
;
    List<SNode> filtered=CollectionUtil.filter(nodes,nameMatchesCondition);
    if (!filtered.isEmpty()) {
      ResolveResult resolveResult=new ResolveResult(referenceNode,filtered.get(0),reference.getRole(),null);
      results.add(resolveResult);
      if (forceResolve) {
        resolveResult.setTarget();
      }
      return true;
    }
    return false;
  }
  finally {
    typeCheckingContext.resetIsInEditorQueriesMode();
  }
}
