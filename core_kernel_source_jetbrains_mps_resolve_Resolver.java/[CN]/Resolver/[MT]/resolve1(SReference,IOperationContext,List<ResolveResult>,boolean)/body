{
  SNode referenceNode=reference.getSourceNode();
  ConceptDeclaration referenceNodeConcept=(ConceptDeclaration)referenceNode.getConceptDeclarationAdapter();
  LinkDeclaration linkDeclaration=SModelSearchUtil.findLinkDeclaration(referenceNodeConcept,reference.getRole());
  if (linkDeclaration == null) {
    LOG.error("couldn't find link declaration for role '" + reference.getRole() + "'",referenceNode);
    return false;
  }
  final AbstractConceptDeclaration referentConcept=linkDeclaration.getTarget();
  TypeCheckingContext typeCheckingContext=NodeTypesComponentsRepository.getInstance().createTypeCheckingContext(referenceNode);
  typeCheckingContext.setInEditorQueriesMode();
  try {
    SearchScopeStatus status=ModelConstraintsUtil.getSearchScope(referenceNode.getParent(),referenceNode,referenceNodeConcept,linkDeclaration,operationContext);
    if (status.isError()) {
      LOG.error("Couldn't create referent search scope : " + status.getMessage());
      return false;
    }
    ISearchScope searchScope=status.getSearchScope();
    List<SNode> nodes=searchScope.getNodes(new Condition<SNode>(){
      public boolean met(      SNode node){
        return node.isInstanceOfConcept(referentConcept);
      }
    }
);
    Condition<SNode> nameMatchesCondition=new Condition<SNode>(){
      public boolean met(      SNode object){
        String resolveInfo=reference.getResolveInfo();
        return resolveInfo != null && resolveInfo.equals(object.getName());
      }
    }
;
    List<SNode> filtered=CollectionUtil.filter(nodes,nameMatchesCondition);
    if (!filtered.isEmpty()) {
      ResolveResult resolveResult=new ResolveResult(referenceNode,filtered.get(0),reference.getRole(),null);
      results.add(resolveResult);
      if (forceResolve) {
        resolveResult.setTarget();
      }
      return true;
    }
    if (referenceNode.getParent() == null) {
      return false;
    }
    if (referenceNode.getReferences().size() > 1) {
      return false;
    }
    SNode parent=referenceNode.getParent();
    LinkDeclaration parentLinkDeclaration=SModelSearchUtil.findLinkDeclaration(parent.getConceptDeclarationAdapter(),referenceNode.getRole_());
    if (parentLinkDeclaration == null) {
      return false;
    }
    final AbstractConceptDeclaration possibleChildConceptDeclaration=parentLinkDeclaration.getTarget();
    ISearchScope conceptsSearchScope=SModelSearchUtil.createConceptsFromModelLanguagesScope(parent.getModel(),true,operationContext.getScope());
    List<SNode> applicableConcepts=conceptsSearchScope.getNodes(new Condition<SNode>(){
      public boolean met(      SNode object){
        return SModelUtil_new.isAssignableConcept((ConceptDeclaration)BaseAdapter.fromNode(object),possibleChildConceptDeclaration);
      }
    }
);
    for (    SNode node : applicableConcepts) {
      ConceptDeclaration applicableConcept=(ConceptDeclaration)BaseAdapter.fromNode(node);
      LinkDeclaration smartReference=ReferenceConceptUtil.getCharacteristicReference(applicableConcept);
      if (smartReference == null)       continue;
      List<SNode> smartReferenceTargets=getSmartReferenceTargets(applicableConcept,smartReference,parent,operationContext);
      List<SNode> filteredRefTargets=CollectionUtil.filter(smartReferenceTargets,nameMatchesCondition);
      if (!filteredRefTargets.isEmpty()) {
        SNode target=filteredRefTargets.get(0);
        ResolveResult resolveResult=new ResolveResult(referenceNode,target,SModelUtil_new.getGenuineLinkRole(smartReference),applicableConcept);
        results.add(resolveResult);
        if (forceResolve) {
          resolveResult.setTarget();
        }
        return true;
      }
    }
    return false;
  }
  finally {
    typeCheckingContext.resetIsInEditorQueriesMode();
  }
}
