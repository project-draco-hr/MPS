{
{
    InferenceRule_Runtime inferenceRule=new typeof_ArithmeticSimpleMathExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_LogicalSimpleMathExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_NotSimpleMathExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathAssignment_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathBooleanConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathFloatConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathIntegerConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathLongConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathTypedVarDeclaration_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathVarDeclaration_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SimpleMathVarReference_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_UnarySimpleMathExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathBoolean_subtypeOf_Element_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathFloatType_subtypeOf_Number_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathIntegerType_subtypeOf_Long_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathIntegerType_subtypeOf_Number_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathLongType_subtypeOf_Float_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SimpleMathNumberType_subtypeOf_Element_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
  this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider_d(MetaAdapterFactory.getConcept(0x7e282943fc6b4900L,0xada534c0024cc4f4L,0x1cc69153b8289497L,"jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression")));
  this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider_b(MetaAdapterFactory.getConcept(0x7e282943fc6b4900L,0xada534c0024cc4f4L,0x1cc69153b8289497L,"jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression")));
  this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider_a(MetaAdapterFactory.getConcept(0x7e282943fc6b4900L,0xada534c0024cc4f4L,0x1cc69153b8289497L,"jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression")));
  this.myOverloadedOperationsTypesProviders.add(new TypesystemDescriptor.CustomOverloadedOperationsTypesProvider_c(MetaAdapterFactory.getConcept(0x7e282943fc6b4900L,0xada534c0024cc4f4L,0x1cc69153b8289497L,"jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression")));
}
