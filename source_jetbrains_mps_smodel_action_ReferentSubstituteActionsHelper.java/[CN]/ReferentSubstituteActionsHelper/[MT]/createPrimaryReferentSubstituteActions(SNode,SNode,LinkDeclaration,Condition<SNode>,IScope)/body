{
  final ConceptDeclaration referentConcept=linkDeclaration.getTarget();
  if (referentConcept == null) {
    return Collections.emptyList();
  }
{
    ConceptDeclaration referenceNodeConcept=SModelUtil.getConceptDeclaration(sourceNode,scope);
    INodeReferentSearchScopeProvider scopeProvider=ModelConstraintsManager.getInstance().getNodeReferentSearchScopeProvider(referenceNodeConcept,linkDeclaration.getRole());
    if (scopeProvider != null) {
      String errorDescr=scopeProvider.canCreateNodeReferentSearchScope(sourceNode.getModel(),sourceNode.getParent(),sourceNode,referenceNodeConcept,linkDeclaration.getRole(),scope);
      if (errorDescr != null)       return Collections.emptyList();
      ISearchScope searchScope=scopeProvider.createNodeReferentSearchScope(sourceNode.getModel(),sourceNode.getParent(),sourceNode,referenceNodeConcept,linkDeclaration.getRole(),scope);
      return createDefaultReferentSubstituteActions(sourceNode,currentReferent,linkDeclaration,searchScope,filterCondition,scope);
    }
  }
  ISearchScope searchScope=SModelSearchUtil.createModelAndImportedModelsScope(sourceNode.getModel(),false,scope);
  return createDefaultReferentSubstituteActions(sourceNode,currentReferent,linkDeclaration,searchScope,filterCondition,scope);
}
