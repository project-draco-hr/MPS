{
  IScope scope=context.getScope();
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  ConceptDeclaration referenceNodeConcept=SModelUtil.getConceptDeclaration(referenceNode,scope);
  Language primaryLanguage=SModelUtil.getDeclaringLanguage(referenceNodeConcept,scope);
  if (primaryLanguage == null) {
    LOG.error("Couldn't build actions : couldn't get declaring language for concept " + referenceNodeConcept.getDebugText());
    return resultActions;
  }
  IStatus status=ModelConstraintsUtil.getReferentSearchScope(referenceNode.getParent(),referenceNode,referenceNodeConcept,linkDeclaration,context.getScope());
  if (status.isError()) {
    LOG.error("Couldn't create referent search scope : " + status.getMessage());
    return resultActions;
  }
  ISearchScope defaultSearchScope=(ISearchScope)status.getUserObject();
  String genuineReferenceRole=SModelUtil.getGenuineLinkRole(linkDeclaration);
  List<ReferentSubstituteActionsBuilder> primaryBuilders=getActionBuilders(referenceNode,primaryLanguage,referenceNodeConcept,genuineReferenceRole,context);
  if (primaryBuilders.isEmpty()) {
    resultActions=createPrimaryReferentSubstituteActions(referenceNode,currentReferent,linkDeclaration,defaultSearchScope,scope);
  }
 else {
    for (    ReferentSubstituteActionsBuilder builder : primaryBuilders) {
      resultActions.addAll(invokeActionFactory(builder,referenceNode,currentReferent,linkDeclaration,defaultSearchScope,context));
    }
  }
  List<ReferentSubstituteActionsBuilder> extendedBuilders=new LinkedList<ReferentSubstituteActionsBuilder>();
  List<Language> languages=referenceNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    if (language == primaryLanguage) {
      continue;
    }
    extendedBuilders.addAll(getActionBuilders(referenceNode,language,referenceNodeConcept,genuineReferenceRole,context));
  }
  for (  ReferentSubstituteActionsBuilder builder : extendedBuilders) {
    List<INodeSubstituteAction> addActions=invokeActionFactory(builder,referenceNode,currentReferent,linkDeclaration,defaultSearchScope,context);
    resultActions.addAll(addActions);
  }
  primaryBuilders.addAll(extendedBuilders);
  for (  ReferentSubstituteActionsBuilder builder : primaryBuilders) {
    resultActions=applyActionFilter(builder,resultActions,context);
  }
  return resultActions;
}
