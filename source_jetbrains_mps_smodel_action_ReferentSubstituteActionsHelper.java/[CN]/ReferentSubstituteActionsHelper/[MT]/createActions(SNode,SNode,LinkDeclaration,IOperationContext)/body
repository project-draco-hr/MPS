{
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  IScope scope=context.getScope();
  ConceptDeclaration sourceConcept=SModelUtil.getConceptDeclaration(sourceNode,scope);
  if (sourceConcept == null) {
    LOG.error("Couldn't build actions : couldn't get concept for source node" + sourceNode.getDebugText());
    return resultActions;
  }
  Language primaryLanguage=SModelUtil.getDeclaringLanguage(sourceConcept,scope);
  if (primaryLanguage == null) {
    LOG.error("Couldn't build actions : couldn't get declaring language for concept " + sourceConcept.getDebugText());
    return resultActions;
  }
  String referenceRole=linkDeclaration.getRole();
  List<ReferentSubstituteActionsBuilder> primaryBuilders=getActionBuilders(sourceNode,primaryLanguage,sourceConcept,referenceRole,context);
  if (primaryBuilders.isEmpty()) {
    resultActions=createPrimaryReferentSubstituteActions(sourceNode,currentReferent,linkDeclaration,TRUE_CONDITION,scope);
  }
 else {
    for (    ReferentSubstituteActionsBuilder builder : primaryBuilders) {
      resultActions.addAll(invokeActionBulder(builder,sourceNode,currentReferent,linkDeclaration,context));
    }
  }
  List<ReferentSubstituteActionsBuilder> extendedBuilders=new LinkedList<ReferentSubstituteActionsBuilder>();
  List<Language> languages=sourceNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    if (language == primaryLanguage) {
      continue;
    }
    extendedBuilders.addAll(getActionBuilders(sourceNode,language,sourceConcept,referenceRole,context));
  }
  for (  ReferentSubstituteActionsBuilder builder : extendedBuilders) {
    List<INodeSubstituteAction> addActions=invokeActionBulder(builder,sourceNode,currentReferent,linkDeclaration,context);
    resultActions.addAll(addActions);
  }
  primaryBuilders.addAll(extendedBuilders);
  for (  ReferentSubstituteActionsBuilder builder : primaryBuilders) {
    resultActions=applyActionFilter(builder,resultActions,context);
  }
  return resultActions;
}
