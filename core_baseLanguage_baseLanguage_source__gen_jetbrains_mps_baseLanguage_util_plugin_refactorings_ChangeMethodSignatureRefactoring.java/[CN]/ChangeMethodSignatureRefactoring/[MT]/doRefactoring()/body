{
  SPropertyOperations.set(this.myDeclaration,"name",SPropertyOperations.getString(this.myParameters.getDeclaration(),"name"));
  if (this.myParameters.isReturnValueChanged()) {
    SLinkOperations.setTarget(this.myDeclaration,"returnType",SNodeOperations.copyNode(SLinkOperations.getTarget(this.myParameters.getDeclaration(),"returnType",true)),true);
  }
  if (SNodeOperations.isInstanceOf(this.myDeclaration,"jetbrains.mps.baseLanguage.structure.IVisible")) {
    if (this.myParameters.isVisibilityChanged()) {
      SLinkOperations.setTarget(SNodeOperations.cast(this.myDeclaration,"jetbrains.mps.baseLanguage.structure.IVisible"),"visibility",SLinkOperations.getTarget(SNodeOperations.cast(this.myParameters.getDeclaration(),"jetbrains.mps.baseLanguage.structure.IVisible"),"visibility",true),true);
    }
  }
  this.changeParameters();
  SLinkOperations.removeAllChildren(this.myDeclaration,"throwsItem");
  for (  SNode throwItem : ListSequence.fromList(SLinkOperations.getTargets(this.myParameters.getDeclaration(),"throwsItem",true))) {
    ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration,"throwsItem",true)).addElement(SNodeOperations.copyNode(throwItem));
  }
  for (  SNode node : ListSequence.fromList(this.myUssages)) {
    MethodCallAdapter call=new MethodCallAdapter(node);
    List<SNode> oldArgs=call.getMethodArguments();
    call.removeArguments();
    for (    SNode parameter : ListSequence.fromList(SLinkOperations.getTargets(this.myParameters.getDeclaration(),"parameter",true))) {
      int index=ListSequence.fromList(this.myParameters.getIdList()).indexOf(parameter.getId());
      if (index == -1) {
        call.addArgument(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NullLiteral",null));
      }
 else {
        call.addArgument(ListSequence.fromList(oldArgs).getElement(index));
      }
    }
  }
}
