{
  this.addNodeById("1230052406798");
  this.addNodeById("1230052406829");
  SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById("1230052406839"),"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall"),"baseMethodDeclaration",SNodeOperations.cast(this.getNodeById("1230052406844"),"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),false);
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406805"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),SNodeOperations.cast(this.getNodeById("6195342755327921671"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  this.fff(ref);
  params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406818"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
  params.setName("bar");
  ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406799"),"jetbrains.mps.lang.behavior.structure.ConceptBehavior")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406830"),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"))));
}
