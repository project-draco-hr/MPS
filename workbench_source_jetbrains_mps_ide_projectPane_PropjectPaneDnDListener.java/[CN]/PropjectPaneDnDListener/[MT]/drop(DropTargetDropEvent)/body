{
  Point point=dtde.getLocation();
  TreePath treePath=myTree.getPathForLocation(point.x,point.y);
  if (treePath == null) {
    dtde.rejectDrop();
    return;
  }
  Object target=treePath.getLastPathComponent();
  if (!(target instanceof MPSTreeNode)) {
    dtde.rejectDrop();
    return;
  }
  Object source=null;
  try {
    source=dtde.getTransferable().getTransferData(myDataFlavor);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  if (!(source instanceof SNode)) {
    dtde.rejectDrop();
    return;
  }
  final SNode sourceNode=(SNode)source;
  SModelDescriptor targetModel=getTargetModel(treePath);
  final String targetPackage=getTargetVirtualPackage(treePath);
  List<SNode> nodeToMove=getNodesToMove(targetModel,targetPackage,Collections.singletonList(sourceNode));
  if (nodeToMove.isEmpty()) {
    dtde.rejectDrop();
    return;
  }
  Project project=(Project)DataManager.getInstance().getDataContext().getData(MPSDataKeys.PROJECT.getName());
  int result=JOptionPane.showConfirmDialog(WindowManager.getInstance().getFrame(project),"<html>Do you want to move node from virtual package '<b>" + getVirtualPackage(sourceNode) + "</b>' to '<b>"+ targetPackage+ "</b>'?</html>");
  if (result == JOptionPane.YES_OPTION) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        sourceNode.setProperty(SModelTreeNode.PACK,targetPackage);
        if (SNodeOperations.isInstanceOf(sourceNode,AbstractConceptDeclaration.concept)) {
          for (          SNode aspect : AbstractConceptDeclaration_Behavior.call_findAllAspects_7754459869734028917(sourceNode,GlobalScope.getInstance())) {
            aspect.setProperty(SModelTreeNode.PACK,targetPackage);
          }
        }
      }
    }
);
  }
  dtde.acceptDrop(dtde.getDropAction());
}
