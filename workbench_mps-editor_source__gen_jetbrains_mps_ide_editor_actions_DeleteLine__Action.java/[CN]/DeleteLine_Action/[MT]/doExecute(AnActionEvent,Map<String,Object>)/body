{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.deleteLine");
  if (((EditorCell)MapSequence.fromMap(_params).get("currentCell")) instanceof EditorCell_Collection) {
    EditorCell_Collection collection=(EditorCell_Collection)((EditorCell)MapSequence.fromMap(_params).get("currentCell"));
    Queue<EditorCell_Collection> collections=QueueSequence.fromQueue(new LinkedList<EditorCell_Collection>());
    QueueSequence.fromQueue(collections).addLastElement(collection);
    while (QueueSequence.fromQueue(collections).isNotEmpty()) {
      EditorCell_Collection nextCollection=QueueSequence.fromQueue(collections).removeFirstElement();
      if (nextCollection.getCellLayout() instanceof CellLayout_Vertical) {
        return;
      }
      for (      EditorCell childCell : Sequence.fromIterable(nextCollection)) {
        if (childCell instanceof EditorCell_Collection) {
          QueueSequence.fromQueue(collections).addLastElement((EditorCell_Collection)childCell);
        }
      }
    }
  }
  EditorCell current=((EditorCell)MapSequence.fromMap(_params).get("currentCell"));
  List<SNode> nodesToDelete=new ArrayList<SNode>();
  EditorCell cellToSelect=null;
  while (true) {
    if (current.getParent() == null) {
      break;
    }
    CellLayout layout=current.getParent().getCellLayout();
    if (layout instanceof CellLayout_Indent) {
      SNode currentNode=current.getSNode();
      if (SNodeOperations.isInstanceOf(currentNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement")) || (SNodeOperations.getNodeAncestor(currentNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"),false,false) == null)) {
        EditorCell root=current.getRootParent();
        if (ReadOnlyUtil.isCellOrSelectionReadOnlyInEditor(((EditorComponent)MapSequence.fromMap(_params).get("editorComponent")),root)) {
          return;
        }
        ListSequence.fromList(nodesToDelete).addElement(current.getSNode());
        if (CellLayout_Indent.isNewLineAfter(root,current)) {
          cellToSelect=CellTraversalUtil.getNextLeaf(current,CellConditions.SELECTABLE);
        }
 else {
          cellToSelect=CellTraversalUtil.getNextLeaf(current.getParent().lastCell(),CellConditions.SELECTABLE);
        }
        break;
      }
    }
 else     if (layout instanceof CellLayout_Vertical) {
      if (current.isBig()) {
        if (ReadOnlyUtil.isCellOrSelectionReadOnlyInEditor(((EditorComponent)MapSequence.fromMap(_params).get("editorComponent")),current)) {
          return;
        }
        ListSequence.fromList(nodesToDelete).addElement(current.getSNode());
        cellToSelect=CellTraversalUtil.getNextLeaf(current,CellConditions.SELECTABLE);
        break;
      }
    }
    current=current.getParent();
  }
  for (  SNode nodeToDelete : nodesToDelete) {
    if ((nodeToDelete != null) && SNodeOperations.getParent(nodeToDelete) != null) {
      SNodeOperations.deleteNode(nodeToDelete);
    }
  }
  if (cellToSelect != null) {
    ((EditorComponent)MapSequence.fromMap(_params).get("editorComponent")).changeSelection(cellToSelect);
    cellToSelect.home();
  }
}
