{
  color().set(Color.LIGHT_BLUE);
  children().add(myPolyLine);
  CellView myCellView=new CellView();
  myCell.addTrait(TextEditing.textEditing());
  myCell.textColor().set(Color.GRAY);
  myCellView.cell.set(myCell);
  children().add(myCellView);
  RectView space=new RectView();
  space.background().set(Color.LIGHT_BLUE);
  space.dimension().set(new Vector(0,5));
  children().add(space);
  myMetaText.bold().set(true);
  children().add(myMetaText);
  new Mapper<PolygonContentView,PolygonContentView>(this,this){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forProperty(myWidth,new Runnable(){
        public void run(){
          adjustPoints(myWidth.get(),myHeight.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(myWidth,new WritableProperty<Integer>(){
        public void set(        Integer value){
          setPreferredSize(value,null);
        }
      }
));
      configuration.add(Synchronizers.forProperty(myHeight,new Runnable(){
        public void run(){
          adjustPoints(myWidth.get(),myHeight.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(myHeight,new WritableProperty<Integer>(){
        public void set(        Integer value){
          setPreferredSize(null,value);
        }
      }
));
    }
  }
.attachRoot();
}
