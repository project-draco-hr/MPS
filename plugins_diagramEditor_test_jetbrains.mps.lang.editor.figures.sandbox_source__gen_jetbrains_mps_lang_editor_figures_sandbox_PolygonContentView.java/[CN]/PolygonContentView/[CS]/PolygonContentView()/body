{
  prop(JetpadUtils.PREFERRED_SIZE).set(new Vector(WIDTH,HEIGHT));
  color().set(Color.LIGHT_BLUE);
  children().add(myPolyLine);
  CellView myCellView=new CellView();
  myCell.addTrait(TextEditing.textEditing());
  myCell.textColor().set(Color.GRAY);
  myCellView.cell.set(myCell);
  children().add(myCellView);
  RectView space=new RectView();
  space.background().set(Color.LIGHT_BLUE);
  space.dimension().set(new Vector(0,5));
  children().add(space);
  myMetaText.bold().set(true);
  children().add(myMetaText);
  new Mapper<PolygonContentView,PolygonContentView>(this,this){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forProperty(myModelWidth,new WritableProperty<Integer>(){
        public void set(        Integer value){
          if (value == null) {
            return;
          }
          Property<Vector> prop=prop(JetpadUtils.PREFERRED_SIZE);
          int x=value;
          int y=(prop.get() != null ? prop.get().y : 0);
          prop.set(new Vector(x,y));
        }
      }
));
      configuration.add(Synchronizers.forProperty(myModelHeight,new WritableProperty<Integer>(){
        public void set(        Integer value){
          if (value == null) {
            return;
          }
          Property<Vector> prop=prop(JetpadUtils.PREFERRED_SIZE);
          int x=(prop.get() != null ? prop.get().x : 0);
          int y=value;
          prop.set(new Vector(x,y));
        }
      }
));
      configuration.add(Synchronizers.forProperty(prop(JetpadUtils.PREFERRED_SIZE),new WritableProperty<Vector>(){
        public void set(        Vector prefSize){
          myModelWidth.set(prefSize.x);
          myModelHeight.set(prefSize.y);
        }
      }
));
      configuration.add(Synchronizers.forProperty(prop(JetpadUtils.PREFERRED_SIZE),new WritableProperty<Vector>(){
        public void set(        Vector prefSize){
          adjustPoints(prefSize.x,prefSize.y);
        }
      }
));
    }
  }
.attachRoot();
}
