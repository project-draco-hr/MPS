{
  if (RulesUtil.checkAppliedCorrectly_generic(argument)) {
    SNode leftType=RulesUtil.typeOf_leftExpression(argument);
    if (!(SNodeOperations.isInstanceOf(leftType,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"))) {
      TypeChecker.getInstance().reportTypeError(argument,"can't compute SNodeType from left expression");
    }
    SNode leftConcept=SLinkOperations.getTarget(leftType,"concept",false);
    if (leftConcept == null) {
      leftConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
    }
    SNode conceptPropertyDecl=SLinkOperations.getTarget(argument,"conceptProperty",false);
    if (!((conceptPropertyDecl != null))) {
      TypeChecker.getInstance().reportTypeError(argument,"no concept property");
    }
    SNode declaringConcept=SNodeOperations.getParent(conceptPropertyDecl,null,false,false);
    RulesUtil.checkAssignableConcept(leftConcept,declaringConcept,argument,"operation is applied to wrong concept");
    if (SNodeOperations.isInstanceOf(conceptPropertyDecl,"jetbrains.mps.bootstrap.structureLanguage.structure.StringConceptPropertyDeclaration")) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_17().createNode(),argument);
    }
 else     if (SNodeOperations.isInstanceOf(conceptPropertyDecl,"jetbrains.mps.bootstrap.structureLanguage.structure.IntegerConceptPropertyDeclaration")) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_18().createNode(),argument);
    }
 else     if (SNodeOperations.isInstanceOf(conceptPropertyDecl,"jetbrains.mps.bootstrap.structureLanguage.structure.BooleanConceptPropertyDeclaration")) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_19().createNode(),argument);
    }
 else {
      TypeChecker.getInstance().reportTypeError(argument,"unknown type of concept property: " + conceptPropertyDecl);
    }
  }
}
