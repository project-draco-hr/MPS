{
  return new AbstractSModelIndexer<SReference,Pair<SNodeDescriptor,String>>(){
    @Override protected void updateCollection(    SModelReference modelRef,    SReference sref,    Collection<Pair<SNodeDescriptor,String>> collection){
      SNode src=sref.getSourceNode();
      String role=sref.getRole();
      SNodeDescriptor descriptor=new SNodeDescriptor(getSNodeName(src),src.getConcept(),src.getReference());
      collection.add(new Pair<SNodeDescriptor,String>(descriptor,role));
    }
    @Override protected void getObjectsToIndex(    SModel sModel,    Consumer<SReference> consumer){
      for (      SNode sNode : SNodeUtil.getDescendants(sModel)) {
        for (        SReference sref : sNode.getReferences()) {
          consumer.consume(sref);
        }
      }
    }
    @Override protected String[] getKeys(    SModel model,    SReference sref){
      SNodeId targetNodeId=sref.getTargetNodeId();
      if (targetNodeId instanceof Foreign) {
        ArrayList<String> result=new ArrayList<String>();
        String id=targetNodeId.toString();
        id=id.substring(Foreign.ID_PREFIX.length());
        int paren=id.indexOf("(");
        String firstPart=paren >= 0 ? id.substring(0,paren) : id;
        result.addAll(getKeys(firstPart));
        if (paren > 0) {
          int paren2=id.indexOf(")",paren);
          String params=id.substring(paren + 1,paren2);
          for (          String paramId : params.split(",")) {
            paramId=paramId.trim();
            if (!"".equals(paramId)) {
              result.addAll(getKeys(paramId + "."));
            }
          }
        }
        return result.toArray(new String[result.size()]);
      }
      return EMPTY;
    }
    private List<String> getKeys(    String id){
      ArrayList<String> result=new ArrayList<String>();
      for (int idx=id.indexOf("."); idx >= 0; idx=id.indexOf(".",idx + 1)) {
        result.add(id.substring(0,idx + 1));
      }
      result.add(id);
      return result;
    }
  }
;
}
