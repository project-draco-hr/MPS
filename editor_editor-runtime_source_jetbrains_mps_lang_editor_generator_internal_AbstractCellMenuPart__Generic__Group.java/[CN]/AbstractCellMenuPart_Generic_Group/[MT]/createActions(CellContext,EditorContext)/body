{
  final SNode node=(SNode)cellContext.get(BasicCellContext.EDITED_NODE);
  final IOperationContext context=editorContext.getOperationContext();
  List parameterObjects=createParameterObjects(node,context.getScope(),context,editorContext);
  if (parameterObjects == null) {
    return Collections.emptyList();
  }
  List<SubstituteAction> actions=new LinkedList<SubstituteAction>();
  for (  final Object parameterObject : parameterObjects) {
    actions.add(new AbstractNodeSubstituteAction(null,parameterObject,node){
      @Override protected String getMatchingText(      String pattern,      boolean referent_presentation,      boolean visible){
        return AbstractCellMenuPart_Generic_Group.this.getMatchingText(parameterObject);
      }
      @Override public String getDescriptionText(      String pattern){
        return AbstractCellMenuPart_Generic_Group.this.getDescriptionText(parameterObject);
      }
      @Override public boolean isReferentPresentation(){
        return AbstractCellMenuPart_Generic_Group.this.isReferentPresentation();
      }
      @Override public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        handleAction(parameterObject,node,node.getModel(),context.getScope(),context,editorContext);
        return null;
      }
    }
);
  }
  return actions;
}
