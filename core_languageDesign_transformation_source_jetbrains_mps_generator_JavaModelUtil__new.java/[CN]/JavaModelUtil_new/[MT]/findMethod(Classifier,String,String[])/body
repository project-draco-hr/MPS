{
  Iterator<InstanceMethodDeclaration> methods=classifier.methods();
  while (methods.hasNext()) {
    InstanceMethodDeclaration method=methods.next();
    if (methodName.equals(method.getName())) {
      if (areParametersCompatible(method,parmTypes)) {
        return method;
      }
    }
  }
  if (classifier instanceof ClassConcept) {
    ClassConcept extendedClass=BaseLanguageUtil.getSuperclass((ClassConcept)classifier);
    if (extendedClass != null) {
      InstanceMethodDeclaration method=findMethod(extendedClass,methodName,parmTypes);
      if (method != null) {
        return method;
      }
    }
  }
  Iterator<ClassifierType> interfaces;
  if (classifier instanceof Interface) {
    interfaces=((Interface)classifier).extendedInterfaces();
  }
 else   if (classifier instanceof ClassConcept) {
    interfaces=((ClassConcept)classifier).implementedInterfaces();
  }
 else {
    throw new RuntimeException("This can't happen");
  }
  while (interfaces.hasNext()) {
    ClassifierType classifierType=interfaces.next();
    InstanceMethodDeclaration method=findMethod(classifierType.getClassifier(),methodName,parmTypes);
    if (method != null) {
      return method;
    }
  }
  return null;
}
