{
  this.addNodeById("3852894662483077200");
  this.addNodeById("3852894662483077206");
  this.addNodeById("3852894662483228699");
  this.addNodeById("3852894662483230132");
  ParenthesisUtil.createUnmatchedLeftParenthesis(SNodeOperations.cast(this.getNodeById("2329139814027568804"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580320020l,"jetbrains.mps.baseLanguage.structure.IntegerConstant")));
  ParenthesisUtil.createUnmatchedRightParenthesis(SNodeOperations.cast(this.getNodeById("2329139814027568804"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580320020l,"jetbrains.mps.baseLanguage.structure.IntegerConstant")));
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2329139814027569571"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242863l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2329139814027568774"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242863l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
