{
  BasicConfigurator.configure();
  Logger.getRootLogger().setLevel(Level.INFO);
  IdeMain.setTestMode(TestMode.CORE_TEST);
  TestMain.configureMPS();
  Set<File> files=whatToGenerate.getMPSProjectFiles();
  final StringBuffer errorMessages=new StringBuffer();
  for (  File projectFile : files) {
    final MPSProject project=TestMain.loadProject(projectFile);
    GeneratorManager gm=project.getComponentSafe(GeneratorManager.class);
    List<SModelDescriptor> models=project.getProjectModels();
    GenerateFilesAndClassesGenerationType generationType=new GenerateFilesAndClassesGenerationType(true){
      public boolean requiresReloading(){
        return false;
      }
      public boolean requiresCompilationBeforeGeneration(){
        return false;
      }
      public boolean requiresCompilationAfterGeneration(){
        return false;
      }
      protected boolean isPutClassesOnTheDisk(){
        return false;
      }
    }
;
    gm.generateModels(models,new ProjectOperationContext(project),generationType,new EmptyProgressIndicator(),new IMessageHandler(){
      public void handle(      Message msg){
        System.out.println(msg.getKind() + ": " + msg.getText());
      }
    }
);
  }
  String finalMessage=errorMessages.toString();
  if (!finalMessage.equals("")) {
    System.err.println(finalMessage);
    throw new BuildException(finalMessage);
  }
}
