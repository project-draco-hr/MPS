{
  StringBuffer s=new StringBuffer("Generating models:");
  for (  SModelDescriptor m : models) {
    s.append("\n    ");
    s.append(m);
  }
  info(s.toString());
  GeneratorManager gm=project.getComponentSafe(GeneratorManager.class);
  final Map<IModule,List<SModelDescriptor>> moduleToModels=new HashMap<IModule,List<SModelDescriptor>>();
  List<Set<IModule>> modulesOrder=computeModulesOrder(models,moduleToModels);
  EmptyProgressIndicator emptyProgressIndicator=new EmptyProgressIndicator();
  for (  Set<IModule> modulesSet : modulesOrder) {
    List<Pair<SModelDescriptor,IOperationContext>> modelsToContext=new ArrayList<Pair<SModelDescriptor,IOperationContext>>();
    for (    IModule module : modulesSet) {
      ModuleContext moduleContext=new ModuleContext(module,project);
      List<SModelDescriptor> modelsToGenerateNow=moduleToModels.get(module);
      for (      SModelDescriptor model : modelsToGenerateNow) {
        modelsToContext.add(new Pair<SModelDescriptor,IOperationContext>(model,moduleContext));
      }
    }
    generateModulesCircle(gm,emptyProgressIndicator,modulesSet,modelsToContext);
  }
}
