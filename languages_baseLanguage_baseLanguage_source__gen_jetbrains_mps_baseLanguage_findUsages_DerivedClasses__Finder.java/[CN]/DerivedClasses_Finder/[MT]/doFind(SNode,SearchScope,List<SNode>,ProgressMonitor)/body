{
  monitor.start(getDescription(),1);
  try {
    List<SNode> derived=new ArrayList<SNode>();
    ListSequence.fromList(derived).addElement(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    int passed=0;
    while (ListSequence.fromList(derived).count() != passed) {
      SNode passingNode=ListSequence.fromList(derived).getElement(passed);
      for (      SNode classNode : FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder",passingNode,scope,monitor.subTask(1))) {
        ListSequence.fromList(derived).addElement(SNodeOperations.cast(classNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
      }
      if (passingNode != node) {
        ListSequence.fromList(_results).addElement(passingNode);
      }
      passed++;
    }
  }
  finally {
    monitor.done();
  }
}
