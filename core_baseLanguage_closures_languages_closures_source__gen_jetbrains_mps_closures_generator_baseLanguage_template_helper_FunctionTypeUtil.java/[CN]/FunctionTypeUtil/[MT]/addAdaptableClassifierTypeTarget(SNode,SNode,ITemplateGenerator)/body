{
  List<SNode> allAdaptable=FunctionTypeUtil.getAllAdaptableClassifierTypes(generator);
  if (allAdaptable == null) {
    allAdaptable=new ArrayList<SNode>();
    generator.getGeneratorSessionContext().putStepObject("all_needs_adapted",allAdaptable);
  }
  if (!(allAdaptable.contains(adaptable))) {
    allAdaptable.add(adaptable);
  }
  List<SNode> trgList=(List<SNode>)generator.getGeneratorSessionContext().getSessionObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(adaptable,"classifier",false)));
  if (trgList == null) {
    trgList=new ArrayList<SNode>();
    generator.getGeneratorSessionContext().putStepObject("needs_adapted_" + INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(adaptable,"classifier",false)),trgList);
  }
  boolean hasOneAlready=false;
  for (  SNode ct : trgList) {
    if (INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(target,"classifier",false)).equals(INamedConcept_Behavior.call_getFqName_1184686272576(SLinkOperations.getTarget(ct,"classifier",false)))) {
      hasOneAlready=true;
      break;
    }
  }
  if (!(hasOneAlready)) {
    SNode trg=SNodeOperations.copyNode(target);
    trgList.add(trg);
    ((SNode)trg).putUserObject("adaptable",adaptable);
  }
}
