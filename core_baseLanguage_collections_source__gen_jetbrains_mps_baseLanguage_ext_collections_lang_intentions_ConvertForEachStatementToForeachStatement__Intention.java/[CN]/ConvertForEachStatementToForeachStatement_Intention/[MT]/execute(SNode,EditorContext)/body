{
  final zClosureContext _zClosureContext=new zClosureContext();
  _zClosureContext.oldVariable=SLinkOperations.getTarget(node,"variable",true);
  SNode variableType=SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(_zClosureContext.oldVariable));
  SNode foreachStatement=SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.ForeachStatement");
  SLinkOperations.setTarget(foreachStatement,"body",SLinkOperations.getTarget(node,"body",true),true);
  SLinkOperations.setTarget(foreachStatement,"iterable",SLinkOperations.getTarget(node,"inputSequence",true),true);
  SPropertyOperations.set(foreachStatement,"label",SPropertyOperations.getString(node,"label"));
  SNode newVariable=SLinkOperations.setNewChild(foreachStatement,"variable","jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
  SPropertyOperations.set(newVariable,"name",SPropertyOperations.getString(_zClosureContext.oldVariable,"name"));
  SLinkOperations.setTarget(newVariable,"type",variableType,true);
{
    ICursor<SNode> _zCursor=CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(SLinkOperations.getTarget(foreachStatement,"body",true),"jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachVariableReference",false),new zPredicate(ConvertForEachStatementToForeachStatement_Intention.this,_zClosureContext)));
    try {
      while (_zCursor.moveToNext()) {
        SNode oldRef=_zCursor.getCurrent();
        SLinkOperations.setTarget(SNodeOperations.replaceWithNewChild(oldRef,"jetbrains.mps.baseLanguage.structure.LocalVariableReference"),"variableDeclaration",newVariable,false);
      }
    }
  finally {
      _zCursor.release();
    }
  }
}
