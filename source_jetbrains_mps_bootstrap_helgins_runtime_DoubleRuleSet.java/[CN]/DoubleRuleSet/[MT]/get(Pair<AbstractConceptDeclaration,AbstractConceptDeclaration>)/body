{
  AbstractConceptDeclaration c1=key.o1;
  AbstractConceptDeclaration c2=key.o2;
  if (c1 instanceof ConceptDeclaration && c2 instanceof ConceptDeclaration) {
    ConceptDeclaration conceptDeclaration1=(ConceptDeclaration)c1;
    ConceptDeclaration conceptDeclaration2=(ConceptDeclaration)c2;
    while (conceptDeclaration1 != null) {
      while (conceptDeclaration2 != null) {
        Pair<AbstractConceptDeclaration,AbstractConceptDeclaration> newKey=new Pair<AbstractConceptDeclaration,AbstractConceptDeclaration>(conceptDeclaration1,conceptDeclaration2);
        Set<T> rules=myRules.get(newKey);
        if (rules != null) {
          if (conceptDeclaration1 != key.o1 || conceptDeclaration2 != key.o2) {
            myRules.put(key,rules);
          }
          return rules;
        }
        conceptDeclaration2=conceptDeclaration2.getExtends();
      }
      conceptDeclaration1=conceptDeclaration1.getExtends();
    }
  }
  HashSet<T> hashSet=new HashSet<T>();
  myRules.put(key,hashSet);
  return hashSet;
}
