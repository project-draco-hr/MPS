{
  final String conceptName="MyVeryGoodConcept1";
  MoveConcepts moveConcepts=new MoveConcepts();
  final RefactoringContext refactoringContext=new RefactoringContext(OldRefactoringAdapter.createAdapterFor(moveConcepts));
  refactoringContext.setCurrentOperationContext(ProjectOperationContext.get(project));
  final SModelDescriptor[] targetStructureModelDescriptor=new SModelDescriptor[]{null};
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      targetStructureModelDescriptor[0]=testRefactoringTargetLanguage.getStructureModelDescriptor();
      SModel model=structureModelDescriptor.getSModel();
      SNode concept=SModelOperations.getRootByName(model,conceptName);
      refactoringContext.setSelectedProject(project);
      refactoringContext.setSelectedNode(concept);
      refactoringContext.setSelectedNodes(Arrays.asList(concept));
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter(MoveConcepts.targetModel,targetStructureModelDescriptor[0]);
    }
  }
);
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          try {
            if (sandbox1.getLoadingState() != ModelLoadingState.NOT_LOADED) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1.getSModel();
            result[0]=sModel.rootsIterator().next().getConceptFqName().equals(targetStructureModelDescriptor[0].getSModelReference().getSModelFqName() + "." + conceptName);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
            return;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
