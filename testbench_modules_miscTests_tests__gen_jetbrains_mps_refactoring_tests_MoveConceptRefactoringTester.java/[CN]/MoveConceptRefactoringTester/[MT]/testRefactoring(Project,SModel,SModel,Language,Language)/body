{
  final String conceptName="MyVeryGoodConcept1";
  final ModelAccess modelAccess=project.getRepository().getModelAccess();
  final Wrappers._T<IRefactoring> refactoring=new Wrappers._T<IRefactoring>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      refactoring.value=RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class,SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","3068114543317961454"),"virtual_getFqName_1213877404258",new Object[]{}));
    }
  }
);
  final RefactoringContext refactoringContext=new RefactoringContext(project,refactoring.value);
  refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
  final SModelReference[] targetStructureModelReference=new SModelReference[]{null};
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      SModel structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      targetStructureModelReference[0]=(jetbrains.mps.smodel.SModelReference)testRefactoringTargetLanguage.getStructureModelDescriptor().getReference();
      SModel model=structureModelDescriptor;
      SNode concept=SModelOperations.getRootByName(model,conceptName);
      refactoringContext.setSelectedNode(concept);
      refactoringContext.setSelectedNodes(Arrays.asList(concept));
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter("targetModel",targetStructureModelReference[0]);
    }
  }
);
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    @Override public void run(){
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          try {
            if (sandbox1.isLoaded()) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1;
            result[0]=sModel.getRootNodes().iterator().next().getConcept().getQualifiedName().equals(targetStructureModelReference[0].getModelName() + "." + conceptName);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
            return;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
