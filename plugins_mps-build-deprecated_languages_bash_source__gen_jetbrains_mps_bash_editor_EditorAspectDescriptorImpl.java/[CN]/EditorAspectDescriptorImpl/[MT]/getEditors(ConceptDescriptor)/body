{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return Collections.<ConceptEditor>singletonList(new AbstractCommand_Editor());
case 1:
  return Collections.<ConceptEditor>singletonList(new AppendingOutputErrorRedirection_Editor());
case 2:
return Collections.<ConceptEditor>singletonList(new AppendingOutputRedirection_Editor());
case 3:
return Collections.<ConceptEditor>singletonList(new Argument_Editor());
case 4:
return Collections.<ConceptEditor>singletonList(new ArgumentList_Editor());
case 5:
return Collections.<ConceptEditor>singletonList(new ArgumentListReference_Editor());
case 6:
return Collections.<ConceptEditor>singletonList(new ArgumentReference_Editor());
case 7:
return Collections.<ConceptEditor>singletonList(new ArithmeticCommand_Editor());
case 8:
return Collections.<ConceptEditor>singletonList(new ArithmeticExpansion_Editor());
case 9:
return Collections.<ConceptEditor>singletonList(new AsyncTerminator_Editor());
case 10:
return Collections.<ConceptEditor>singletonList(new BaseAssingmentExpression_Editor());
case 11:
return Collections.<ConceptEditor>singletonList(new BaseCommandSubstitution_Editor());
case 12:
return Collections.<ConceptEditor>singletonList(new BaseVariableAssingment_Editor());
case 13:
return Collections.<ConceptEditor>singletonList(new BasedIntegerLiteral_Editor());
case 14:
return Collections.<ConceptEditor>singletonList(new BasicParameterExpansion_Editor());
case 15:
return Collections.<ConceptEditor>singletonList(new BinaryArithmeticExpression_Editor());
case 16:
return Collections.<ConceptEditor>singletonList(new BinaryConditionalExpression_Editor());
case 17:
return Collections.<ConceptEditor>singletonList(new BracketConditionalExpression_Editor());
case 18:
return Collections.<ConceptEditor>singletonList(new BracketExpression_Editor());
case 19:
return Collections.<ConceptEditor>singletonList(new CaseClause_Editor());
case 20:
return Collections.<ConceptEditor>singletonList(new CaseCommand_Editor());
case 21:
return Collections.<ConceptEditor>singletonList(new CaseTerminator_Editor());
case 22:
return Collections.<ConceptEditor>singletonList(new CombiningConditionalExpression_Editor());
case 23:
return Collections.<ConceptEditor>singletonList(new Command_Editor());
case 24:
return Collections.<ConceptEditor>singletonList(new CommandList_Editor());
case 25:
return Collections.<ConceptEditor>singletonList(new CommandTerminator_Editor());
case 26:
return Collections.<ConceptEditor>singletonList(new CommentedCommandList_Editor());
case 27:
return Collections.<ConceptEditor>singletonList(new CommentedFollowingCommandList_Editor());
case 28:
return Collections.<ConceptEditor>singletonList(new CommentedText_Editor());
case 29:
return Collections.<ConceptEditor>singletonList(new ConditionalCommand_Editor());
case 30:
return Collections.<ConceptEditor>singletonList(new ConditionalOperation_Editor());
case 31:
return Collections.<ConceptEditor>singletonList(new DecimalConstant_Editor());
case 32:
return Collections.<ConceptEditor>singletonList(new DuplicateInputFileDiscriptor_Editor());
case 33:
return Collections.<ConceptEditor>singletonList(new DuplicateOutputFileDiscriptor_Editor());
case 34:
return Collections.<ConceptEditor>singletonList(new ElifCommand_Editor());
case 35:
return Collections.<ConceptEditor>singletonList(new ExternalCommandCall_Editor());
case 36:
return Collections.<ConceptEditor>singletonList(new ExternalCommandDeclaration_Editor());
case 37:
return Collections.<ConceptEditor>singletonList(new FollowingCommandList_Editor());
case 38:
return Collections.<ConceptEditor>singletonList(new FollowingPipeline_Editor());
case 39:
return Collections.<ConceptEditor>singletonList(new ForCommand_Editor());
case 40:
return Collections.<ConceptEditor>singletonList(new ForeachCommand_Editor());
case 41:
return Collections.<ConceptEditor>singletonList(new FreeCommand_Editor());
case 42:
return Collections.<ConceptEditor>singletonList(new FunctionCallCommand_Editor());
case 43:
return Collections.<ConceptEditor>singletonList(new FunctionDeclaration_Editor());
case 44:
return Collections.<ConceptEditor>singletonList(new GeneralizedWord_Editor());
case 45:
return Collections.<ConceptEditor>singletonList(new GroupingCommand_Editor());
case 46:
return Collections.<ConceptEditor>singletonList(new HeadCommandList_Editor());
case 47:
return Collections.<ConceptEditor>singletonList(new HeadPipeline_Editor());
case 48:
return Collections.<ConceptEditor>singletonList(new HereDocumentRedirection_Editor());
case 49:
return Collections.<ConceptEditor>singletonList(new HereStringRedirection_Editor());
case 50:
return Collections.<ConceptEditor>singletonList(new HexIntegerLiteral_Editor());
case 51:
return Collections.<ConceptEditor>singletonList(new IfCommand_Editor());
case 52:
return Collections.<ConceptEditor>singletonList(new InputLines_Editor());
case 53:
return Collections.<ConceptEditor>singletonList(new InputRedirection_Editor());
case 54:
return Collections.<ConceptEditor>singletonList(new NotCommand_Editor());
case 55:
return Collections.<ConceptEditor>singletonList(new Option_Editor());
case 56:
return Collections.<ConceptEditor>singletonList(new OptionReference_Editor());
case 57:
return Collections.<ConceptEditor>singletonList(new OptionSet_Editor());
case 58:
return Collections.<ConceptEditor>singletonList(new OptionSetReference_Editor());
case 59:
return Collections.<ConceptEditor>singletonList(new OptionWithParam_Editor());
case 60:
return Collections.<ConceptEditor>singletonList(new OptionWithParamReference_Editor());
case 61:
return Collections.<ConceptEditor>singletonList(new OutputErrorRedirection_Editor());
case 62:
return Collections.<ConceptEditor>singletonList(new OutputRedirection_Editor());
case 63:
return Collections.<ConceptEditor>singletonList(new PostVariableExpression_Editor());
case 64:
return Collections.<ConceptEditor>singletonList(new PreVariableExpression_Editor());
case 65:
return Collections.<ConceptEditor>singletonList(new QuotedWord_Editor());
case 66:
return Collections.<ConceptEditor>singletonList(new QuotesCommandSubstitution_Editor());
case 67:
return Collections.<ConceptEditor>singletonList(new ReadingWritingRedirection_Editor());
case 68:
return Collections.<ConceptEditor>singletonList(new RedirectedCommand_Editor());
case 69:
return Collections.<ConceptEditor>singletonList(new SelectCommand_Editor());
case 70:
return Collections.<ConceptEditor>singletonList(new SemicolonTerminator_Editor());
case 71:
return Collections.<ConceptEditor>singletonList(new ShellScript_Editor());
case 72:
return Collections.<ConceptEditor>singletonList(new SimpleCommand_Editor());
case 73:
return Collections.<ConceptEditor>singletonList(new SimpleWord_Editor());
case 74:
return Collections.<ConceptEditor>singletonList(new StringConditionalExpression_Editor());
case 75:
return Collections.<ConceptEditor>singletonList(new TildeExpansion_Editor());
case 76:
return Collections.<ConceptEditor>singletonList(new UnaryArithmeticExpression_Editor());
case 77:
return Collections.<ConceptEditor>singletonList(new UnaryConditionalExpression_Editor());
case 78:
return Collections.<ConceptEditor>singletonList(new UntilLoopCommand_Editor());
case 79:
return Collections.<ConceptEditor>singletonList(new VariableNameDeclaration_Editor());
case 80:
return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
case 81:
return Collections.<ConceptEditor>singletonList(new WhileLoopCommand_Editor());
case 82:
return Collections.<ConceptEditor>singletonList(new WordList_Editor());
default :
}
return Collections.emptyList();
}
