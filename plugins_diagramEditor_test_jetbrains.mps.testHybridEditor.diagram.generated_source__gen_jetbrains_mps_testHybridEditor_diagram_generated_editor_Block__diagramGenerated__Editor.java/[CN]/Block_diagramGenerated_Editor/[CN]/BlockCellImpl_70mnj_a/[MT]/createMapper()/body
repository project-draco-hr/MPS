{
  return new Mapper<SNode,DiagramNodeView>(getSNode(),createDiagramNodeView()){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forObservableRole(this,myInputPorts,getTarget().inputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode portNode){
          return ((PortCell)getDirectChildCell(portNode)).createMapper();
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,myOutputPorts,getTarget().outputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode portNode){
          return ((PortCell)getDirectChildCell(portNode)).createMapper();
        }
      }
));
      configuration.add(Synchronizers.forConstantRole(this,getSource().getNodeId().toString(),getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
        public Mapper<? extends String,? extends BlockContentView> createMapper(        String block){
          return new Mapper<String,BlockContentView>(block,new BlockContentView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              myPropertyCell_70mnj_a0a.registerSynchronizers(configuration,getTarget().text());
              myPropertyCell_70mnj_a1a.registerSynchronizers(configuration,getTarget().isClicked);
            }
          }
;
        }
      }
));
      DiagramCell diagramCell=getDiagramCell();
      if (diagramCell != null) {
        configuration.add(Synchronizers.forConstantRole(this,new Object(),diagramCell.getRootMapper().getTarget().decorationRoot().children(),new MapperFactory<Object,View>(){
          public Mapper<? extends Object,? extends View> createMapper(          Object source){
            final ReadableProperty<Rectangle> bounds=getTarget().rect.bounds();
            return new Mapper<Object,View>(source,new GroupView()){
              @Override protected void registerSynchronizers(              Mapper.SynchronizersConfiguration configuration){
                super.registerSynchronizers(configuration);
                configuration.add(Synchronizers.forObservableRole(this,myErrorItem,getTarget().children(),new MapperFactory<Boolean,View>(){
                  public Mapper<? extends Boolean,? extends View> createMapper(                  Boolean source){
                    PolyLineView errorView=createErrorView(bounds.get());
                    return new Mapper<Boolean,PolyLineView>(source,errorView){
                      @Override protected void registerSynchronizers(                      Mapper.SynchronizersConfiguration configuration){
                        super.registerSynchronizers(configuration);
                        configuration.add(Synchronizers.forProperty(bounds,new WritableProperty<Rectangle>(){
                          public void set(                          Rectangle bounds){
                            getTarget().points.clear();
                            getTarget().points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(),new Vector(bounds.origin.x,bounds.origin.y),new Vector(bounds.origin.x + bounds.dimension.x,bounds.origin.y),new Vector(bounds.origin.x + bounds.dimension.x,bounds.origin.y + bounds.dimension.y),new Vector(bounds.origin.x,bounds.origin.y + bounds.dimension.y),new Vector(bounds.origin.x,bounds.origin.y)));
                            getTarget().invalidate();
                          }
                        }
));
                      }
                    }
;
                  }
                }
));
              }
            }
;
          }
        }
));
      }
      configuration.add(Synchronizers.forProperty(getTarget().bounds(),new WritableProperty<Rectangle>(){
        public void set(        Rectangle rect){
          myXValueProperty=rect.origin.x;
          myYValueProperty=rect.origin.y;
          myWidthValueProperty=rect.dimension.x;
          myHeightValueProperty=rect.dimension.y;
        }
      }
));
      configuration.add(Synchronizers.forProperty(Properties.ifProp(getTarget().focused(),Properties.constant(Color.BLACK),Properties.constant(Color.TRANSPARENT)),getTarget().rect.border()));
      configuration.add(Synchronizers.forProperty(getTarget().focused(),new Runnable(){
        public void run(){
          if (getTarget().focused().get()) {
            SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
          }
        }
      }
));
    }
  }
;
}
