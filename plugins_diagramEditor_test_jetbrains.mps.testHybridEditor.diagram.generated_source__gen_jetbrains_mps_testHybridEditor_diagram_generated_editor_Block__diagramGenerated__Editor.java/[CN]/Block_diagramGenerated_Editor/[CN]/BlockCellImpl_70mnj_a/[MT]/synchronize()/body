{
  SNode node=getSNode();
  boolean inputPortDiffFound=false;
  ListIterator<SNode> inputPortsIterator=myInputPorts.listIterator();
  for (  SNode port : ListSequence.fromList(SLinkOperations.getTargets(node,"inputPorts",true))) {
    inputPortDiffFound=inputPortDiffFound || !(BlockCell.skipNextIfSame(inputPortsIterator,port));
    if (inputPortDiffFound) {
      EditorCell portCell=getContext().createNodeCell(port);
      if (portCell instanceof PortCell) {
        addEditorCell(portCell);
        inputPortsIterator.add(port);
      }
    }
  }
  while (inputPortsIterator.hasNext()) {
    SNode portToRemove=inputPortsIterator.next();
    removeCell((jetbrains.mps.nodeEditor.cells.EditorCell)getDirectChildCell(portToRemove));
    inputPortsIterator.remove();
  }
  boolean outputPortDiffFound=false;
  ListIterator<SNode> outputPortsIterator=myOutputPorts.listIterator();
  for (  SNode port : ListSequence.fromList(SLinkOperations.getTargets(node,"outputPorts",true))) {
    outputPortDiffFound=outputPortDiffFound || !(BlockCell.skipNextIfSame(outputPortsIterator,port));
    if (outputPortDiffFound) {
      EditorCell portCell=getContext().createNodeCell(port);
      if (portCell instanceof PortCell) {
        addEditorCell(portCell);
        outputPortsIterator.add(port);
      }
    }
  }
  while (outputPortsIterator.hasNext()) {
    SNode portToRemove=outputPortsIterator.next();
    removeCell((jetbrains.mps.nodeEditor.cells.EditorCell)getDirectChildCell(portToRemove));
    outputPortsIterator.remove();
  }
}
