{
  final AttributedMPSBlockView view=new AttributedMPSBlockView();
  final GenericViewCell editorCell=GenericViewCell.createViewCell(editorContext,node,view);
  createDiagramNode_70mnj_a0(editorCell,editorContext,node,view.text);
  createDiagramNode_70mnj_b0(editorCell,editorContext,node,view.x);
  createDiagramNode_70mnj_c0(editorCell,editorContext,node,view.y);
  for (  SNode child : ListSequence.fromList(SLinkOperations.getTargets(node,"inputPorts",true))) {
    createViewForChildNode(child,editorCell,view.inputs,editorContext);
  }
  for (  SNode child : ListSequence.fromList(SLinkOperations.getTargets(node,"outputPorts",true))) {
    createViewForChildNode(child,editorCell,view.outputs,editorContext);
  }
  view.dimension().set(Block_diagramGenerated_Editor._StyleParameter_QueryFunction_70mnj_a0a((editorCell == null ? null : editorCell.getContext()),(editorCell == null ? null : editorCell.getSNode())));
  ModelAccess.instance().runCommandInEDT(new Runnable(){
    public void run(){
      new Mapper<View,SNode>(view,node){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          configuration.add(Synchronizers.forProperty(view.text,new Runnable(){
            public void run(){
              String groupId=ModelAccess.instance().runReadAction(new Computable<String>(){
                public String compute(){
                  return editorCell.getCellId() + "_" + node.getNodeId().toString();
                }
              }
);
              ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"name",view.text.get());
                }
              }
,null,groupId,false,editorContext.getOperationContext().getProject());
            }
          }
));
          configuration.add(Synchronizers.forProperty(view.x,new Runnable(){
            public void run(){
              String groupId=ModelAccess.instance().runReadAction(new Computable<String>(){
                public String compute(){
                  return editorCell.getCellId() + "_" + node.getNodeId().toString();
                }
              }
);
              ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"x","" + (view.x.get()));
                }
              }
,null,groupId,false,editorContext.getOperationContext().getProject());
            }
          }
));
          configuration.add(Synchronizers.forProperty(view.y,new Runnable(){
            public void run(){
              String groupId=ModelAccess.instance().runReadAction(new Computable<String>(){
                public String compute(){
                  return editorCell.getCellId() + "_" + node.getNodeId().toString();
                }
              }
);
              ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"y","" + (view.y.get()));
                }
              }
,null,groupId,false,editorContext.getOperationContext().getProject());
            }
          }
));
        }
      }
.attachRoot();
    }
  }
,editorContext.getOperationContext().getProject());
  view.visible().set(true);
  editorCell.setCellId("DiagramNode_70mnj_a");
  editorCell.setBig(true);
  return editorCell;
}
