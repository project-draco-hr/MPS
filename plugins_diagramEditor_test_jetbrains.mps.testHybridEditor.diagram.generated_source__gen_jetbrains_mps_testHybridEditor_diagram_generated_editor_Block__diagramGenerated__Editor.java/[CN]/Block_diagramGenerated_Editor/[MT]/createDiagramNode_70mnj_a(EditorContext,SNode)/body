{
  final AttributedMPSBlockView view=new AttributedMPSBlockView();
  GenericViewCell editorCell=GenericViewCell.createViewCell(editorContext,node,view);
  view.text.set(SPropertyOperations.getString(node,"name"));
  view.x.set(SPropertyOperations.getInteger(node,"x"));
  view.y.set(SPropertyOperations.getInteger(node,"y"));
  for (  SNode child : ListSequence.fromList(SLinkOperations.getTargets(node,"inputPorts",true))) {
    createViewForChildNode(child,editorCell,view.inputs,editorContext);
  }
  for (  SNode child : ListSequence.fromList(SLinkOperations.getTargets(node,"outputPorts",true))) {
    createViewForChildNode(child,editorCell,view.outputs,editorContext);
  }
  view.dimension().set(Block_diagramGenerated_Editor._StyleParameter_QueryFunction_70mnj_a0a((editorCell == null ? null : editorCell.getContext()),(editorCell == null ? null : editorCell.getSNode())));
  view.addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
    @Override public void handle(    View v,    MouseEvent e){
      ModelAccess.instance().runCommandInEDT(new Runnable(){
        public void run(){
          SPropertyOperations.set(node,"name",view.text.get());
          SPropertyOperations.set(node,"x","" + (view.x.get()));
          SPropertyOperations.set(node,"y","" + (view.y.get()));
        }
      }
,editorContext.getOperationContext().getProject());
    }
  }
).build());
  view.visible().set(true);
  editorCell.setCellId("DiagramNode_70mnj_a");
  editorCell.setBig(true);
  return editorCell;
}
