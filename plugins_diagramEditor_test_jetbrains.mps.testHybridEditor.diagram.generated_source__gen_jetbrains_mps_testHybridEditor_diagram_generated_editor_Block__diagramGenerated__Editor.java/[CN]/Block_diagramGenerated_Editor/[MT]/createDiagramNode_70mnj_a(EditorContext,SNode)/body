{
  BlockCell editorCell=new BlockCell(editorContext,node,JetpadUtils.modelProperty(new Computable<Integer>(){
    public Integer compute(){
      return SNodeOperations.getIndexInParent(node) / 2 * 150 + 10;
    }
  }
),JetpadUtils.modelProperty(new Computable<Integer>(){
    public Integer compute(){
      return SPropertyOperations.getInteger(node,"y");
    }
  }
)){
    public Mapper<SNode,DiagramNodeView> getMapper(){
      final Mapper<SNode,DiagramNodeView> mapper=new Mapper<SNode,DiagramNodeView>(node,createDiagramNodeView_70mnj_a(editorContext,node,this)){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forSimpleRole(this,SLinkOperations.getTargets(node,"inputPorts",true),getTarget().inputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode mapperNode){
              EditorCell portCell=editorContext.createNodeCell(mapperNode);
              if (portCell instanceof PortCell) {
                addEditorCell(portCell);
                return ((PortCell)portCell).getMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.forSimpleRole(this,SLinkOperations.getTargets(node,"outputPorts",true),getTarget().outputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode mapperNode){
              EditorCell portCell=editorContext.createNodeCell(mapperNode);
              if (portCell instanceof PortCell) {
                addEditorCell(portCell);
                return ((PortCell)portCell).getMapper();
              }
              return null;
            }
          }
));
          registerAditionalSynchronizers(configuration,this);
        }
      }
;
      return mapper;
    }
    public void registerAditionalSynchronizers(    Mapper.SynchronizersConfiguration configuration,    final Mapper<SNode,DiagramNodeView> mapper){
      configuration.add(Synchronizers.forConstantRole(mapper,mapper.getSource().getNodeId().toString(),mapper.getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
        public Mapper<? extends String,? extends BlockContentView> createMapper(        String block){
          return new Mapper<String,BlockContentView>(block,new BlockContentView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              final PropertyMapperCell cell_70mnj_a0a=new PropertyMapperCell(editorContext,node,getTarget().text(),JetpadUtils.modelProperty(new Computable<String>(){
                public String compute(){
                  return SPropertyOperations.getString(node,"name");
                }
              }
),"name");
              addEditorCell(cell_70mnj_a0a);
              configuration.add(Synchronizers.forProperty(JetpadUtils.modelProperty(new Computable<String>(){
                public String compute(){
                  return SPropertyOperations.getString(node,"name");
                }
              }
),getTarget().text()));
              configuration.add(Synchronizers.forProperty(getTarget().text(),new Runnable(){
                public void run(){
                  cell_70mnj_a0a.updateModel();
                }
              }
));
              final PropertyMapperCell cell_70mnj_a1a=new PropertyMapperCell(editorContext,node,getTarget().isClicked,JetpadUtils.modelProperty(new Computable<Boolean>(){
                public Boolean compute(){
                  return SPropertyOperations.getBoolean(node,"myBooleanProperty");
                }
              }
),"myBooleanProperty");
              addEditorCell(cell_70mnj_a1a);
              configuration.add(Synchronizers.forProperty(JetpadUtils.modelProperty(new Computable<Boolean>(){
                public Boolean compute(){
                  return SPropertyOperations.getBoolean(node,"myBooleanProperty");
                }
              }
),getTarget().isClicked));
              configuration.add(Synchronizers.forProperty(getTarget().isClicked,new Runnable(){
                public void run(){
                  cell_70mnj_a1a.updateModel();
                }
              }
));
            }
          }
;
        }
      }
));
    }
  }
;
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"y"));
  editorCell.setCellId("DiagramNode_70mnj_a");
  editorCell.setBig(true);
  return editorCell;
}
