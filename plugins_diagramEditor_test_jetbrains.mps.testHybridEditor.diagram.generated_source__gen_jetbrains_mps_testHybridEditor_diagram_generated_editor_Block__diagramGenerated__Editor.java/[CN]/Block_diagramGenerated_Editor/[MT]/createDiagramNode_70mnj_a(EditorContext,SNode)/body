{
  final PropertyMapperCell parameterPropertyCell_70mnj_a0a=new PropertyMapperCell<String>(editorContext,node){
    protected String getModelPropertyValueImpl(){
      return SPropertyOperations.getString(node,"name");
    }
    protected void setModelPropertyValueImpl(    String value){
      SPropertyOperations.set(node,"name",value);
    }
  }
;
  final PropertyMapperCell parameterPropertyCell_70mnj_a1a=new PropertyMapperCell<Boolean>(editorContext,node){
    protected Boolean getModelPropertyValueImpl(){
      return SPropertyOperations.getBoolean(node,"myBooleanProperty");
    }
    protected void setModelPropertyValueImpl(    Boolean value){
      SPropertyOperations.set(node,"myBooleanProperty","" + (value));
    }
  }
;
  final ObservableList<SNode> inputPorts=new ObservableArrayList<SNode>();
  final ObservableList<SNode> outputPorts=new ObservableArrayList<SNode>();
  BlockCell editorCell=new BlockCell(editorContext,node){
    private final WritableModelProperty<Integer> myXPropery=new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(),getContext().getOperationContext().getProject()){
      protected Integer getModelPropertyValue(){
        return SNodeOperations.getIndexInParent(node) / 2 * 150 + 10;
      }
      protected void setModelPropertyValue(      Integer x){
      }
    }
;
    private final WritableModelProperty<Integer> myYPropery=new WritableModelProperty<Integer>(getCellId() + "_" + node.getNodeId().toString(),getContext().getOperationContext().getProject()){
      protected Integer getModelPropertyValue(){
        return SPropertyOperations.getInteger(node,"y");
      }
      protected void setModelPropertyValue(      Integer y){
        SPropertyOperations.set(node,"y","" + (y));
      }
    }
;
    protected void initPorts(){
      for (      SNode port : ListSequence.fromList(SLinkOperations.getTargets(node,"inputPorts",true))) {
        EditorCell childNodeCell=editorContext.createNodeCell(port);
        if (childNodeCell instanceof PortCell) {
          inputPorts.add(port);
          this.addEditorCell(childNodeCell);
        }
      }
      for (      SNode port : ListSequence.fromList(SLinkOperations.getTargets(node,"outputPorts",true))) {
        EditorCell childNodeCell=editorContext.createNodeCell(port);
        if (childNodeCell instanceof PortCell) {
          outputPorts.add(port);
          this.addEditorCell(childNodeCell);
        }
      }
    }
    public ReadableProperty<Integer> getXProperty(){
      return myXPropery;
    }
    public ReadableProperty<Integer> getYProperty(){
      return myYPropery;
    }
    public Mapper<SNode,DiagramNodeView> createMapper(){
      final Mapper<SNode,DiagramNodeView> mapper=new Mapper<SNode,DiagramNodeView>(node,createDiagramNodeView_70mnj_a(editorContext,node,this)){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forObservableRole(this,inputPorts,getTarget().inputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode mapperNode){
              return ((PortCell)getDirectChildCell(mapperNode)).createMapper();
            }
          }
));
          configuration.add(Synchronizers.forObservableRole(this,outputPorts,getTarget().outputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode mapperNode){
              return ((PortCell)getDirectChildCell(mapperNode)).createMapper();
            }
          }
));
          configuration.add(Synchronizers.forConstantRole(this,getSource().getNodeId().toString(),getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
            public Mapper<? extends String,? extends BlockContentView> createMapper(            String block){
              return new Mapper<String,BlockContentView>(block,new BlockContentView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  parameterPropertyCell_70mnj_a0a.registerSynchronizers(configuration,getTarget().text());
                  parameterPropertyCell_70mnj_a1a.registerSynchronizers(configuration,getTarget().isClicked);
                }
              }
;
            }
          }
));
        }
      }
;
      return mapper;
    }
  }
;
  editorCell.addEditorCell(parameterPropertyCell_70mnj_a0a);
  editorCell.addEditorCell(parameterPropertyCell_70mnj_a1a);
  parameterPropertyCell_70mnj_a0a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_70mnj_a0a,new Pair<SNodeReference,String>(new SNodePointer(node),"name"));
  parameterPropertyCell_70mnj_a1a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_70mnj_a1a,new Pair<SNodeReference,String>(new SNodePointer(node),"myBooleanProperty"));
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"y"));
  editorCell.setCellId("DiagramNode_70mnj_a");
  editorCell.setBig(true);
  return editorCell;
}
