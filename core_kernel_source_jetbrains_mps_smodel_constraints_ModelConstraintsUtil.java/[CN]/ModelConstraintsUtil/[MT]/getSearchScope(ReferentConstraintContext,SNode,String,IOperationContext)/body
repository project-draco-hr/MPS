{
  ModelAccess.assertLegalRead();
  final ReferenceScopeProvider scopeProvider=ModelConstraintsManager.getNodeReferentSearchScopeProvider(referenceNodeConcept,linkRole);
  return TypeContextManager.getInstance().runResolveAction(new Computable<SearchScopeStatus>(){
    @Override public SearchScopeStatus compute(){
      try {
        DefaultReferencePresentation referencePresentation=null;
        if (scopeProvider != null) {
          referencePresentation=scopeProvider.hasPresentation() ? new DefaultReferencePresentation(context,referentConstraintContext,scopeProvider) : null;
          ISearchScope searchScope=scopeProvider.createSearchScope(context,referentConstraintContext);
          if (!(searchScope instanceof UndefinedSearchScope)) {
            return newOK(searchScope,referencePresentation,false,scopeProvider.getSearchScopeValidatorNode());
          }
        }
        ISearchScope searchScope=SModelSearchUtil.createModelAndImportedModelsScope(referentConstraintContext.getModel(),false,context.getScope());
        return newOK(searchScope,referencePresentation,true,null);
      }
 catch (      Exception t) {
        LOG.error(t,referentConstraintContext.getReferenceNode() != null ? referentConstraintContext.getReferenceNode() : referentConstraintContext.getEnclosingNode());
        return new SearchScopeStatus.ERROR("can't create search scope for role '" + linkRole + "' in '"+ referenceNodeConcept.getName()+ "'");
      }
    }
  }
);
}
