{
  ModelAccess.assertLegalRead();
  final SModel model;
  if (enclosingNode != null) {
    model=enclosingNode.getModel();
  }
 else   if (referenceNode != null) {
    model=referenceNode.getModel();
    enclosingNode=referenceNode.getParent();
  }
 else {
    model=null;
  }
  final ReferenceScopeProvider scopeProvider=ModelConstraintsManager.getNodeReferentSearchScopeProvider(referenceNodeConcept,linkRole);
  final ReferentConstraintContext referentConstraintContext=new ReferentConstraintContext(model,enclosingNode,referenceNode,linkTarget,containingLinkDeclaration);
  return TypeContextManager.getInstance().runResolveAction(new Computable<SearchScopeStatus>(){
    @Override public SearchScopeStatus compute(){
      try {
        return getSearchScope_intern(scopeProvider,referentConstraintContext,context);
      }
 catch (      Exception t) {
        LOG.error(t,referenceNode != null ? referenceNode : referentConstraintContext.getEnclosingNode());
        return new SearchScopeStatus.ERROR("can't create search scope for role '" + linkRole + "' in '"+ referenceNodeConcept.getName()+ "'");
      }
    }
  }
);
}
