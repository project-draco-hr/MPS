{
  ModelAccess.assertLegalRead();
  SearchScopeStatus status;
  SNode scopeReference;
  if (smartConcept == null) {
    if (role == null)     throw new NullPointerException("role and smartConcept cannot be null at the same time");
    scopeReference=enclosingNode.getLinkDeclaration(role);
    if (scopeReference == null) {
      return new ErrorScope("can't find link for role '" + role + "' in '"+ enclosingNode.getConceptFqName()+ "'");
    }
    status=getSearchScope(createReferentConstraintContext(enclosingNode.getParent(),enclosingNode,SModelUtil.getLinkDeclarationTarget(scopeReference),enclosingNode.getRoleLink()),enclosingNode.getConceptDeclarationNode(),SModelUtil.getGenuineLinkRole(scopeReference),context);
  }
 else {
    scopeReference=ReferenceConceptUtil.getCharacteristicReference(smartConcept);
    SNode linkDeclaration=role != null ? enclosingNode.getLinkDeclaration(role) : null;
    if (linkDeclaration != null && SNodeUtil.getLinkDeclaration_IsReference(linkDeclaration)) {
      throw new IllegalArgumentException("for reference role smartConcept should be null");
    }
    status=getSearchScope(createReferentConstraintContext(enclosingNode,null,SModelUtil.getLinkDeclarationTarget(scopeReference),linkDeclaration),smartConcept,SModelUtil.getGenuineLinkRole(scopeReference),context);
  }
  if (status.isOk()) {
    if (status.isDefault()) {
      SNode smartTarget=SModelUtil.getLinkDeclarationTarget(scopeReference);
      return createDefaultScope(enclosingNode.getModel(),context,NameUtil.nodeFQName(smartTarget));
    }
    return new Adapter(status.getSearchScope());
  }
  return new ErrorScope(status.getMessage());
}
