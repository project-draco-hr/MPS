{
  final SNode node=selectedCell.getSNode();
  jetbrains.mps.openapi.editor.cells.EditorCell anchorCell=null;
  String anchorTag=((EditorCell)selectedCell).getRightTransformAnchorTag();
  if (anchorTag != null) {
    anchorCell=selectedCell;
  }
 else {
    jetbrains.mps.openapi.editor.cells.EditorCell nodeMainCell=((EditorCell)selectedCell).getContainingBigCell();
    jetbrains.mps.openapi.editor.cells.EditorCell defAnchorCell=CellFinderUtil.findChildByCondition(nodeMainCell,new Condition<jetbrains.mps.openapi.editor.cells.EditorCell>(){
      @Override public boolean met(      jetbrains.mps.openapi.editor.cells.EditorCell object){
        return ((EditorCell)object).hasRightTransformAnchorTag(SideTransformTagUtils.getDefaultSideTransformTag()) && object.getSNode() == node;
      }
    }
,true,true);
    if (defAnchorCell == null) {
      defAnchorCell=nodeMainCell;
    }
    if (defAnchorCell == selectedCell || CellTraversalUtil.isAncestor(defAnchorCell,selectedCell)) {
      anchorCell=defAnchorCell;
    }
  }
  if (side == CellSide.RIGHT && anchorCell != null && CellFinderUtil.findLastSelectableLeaf(anchorCell,true) != selectedCell) {
    return null;
  }
  if (side == CellSide.LEFT && anchorCell != null && CellFinderUtil.findFirstSelectableLeaf(anchorCell,true) != selectedCell) {
    return null;
  }
  return anchorCell;
}
