{
  boolean result_14532009=true;
{
    Iterable<SNode> concreteArguments=ListSequence.fromList(SLinkOperations.getTargets(subtype,"argument",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return ListSequence.fromList(SNodeOperations.getDescendants(it,"jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable",true,new String[]{})).isEmpty();
      }
    }
);
    Iterable<SNode> variableArguments=ListSequence.fromList(SLinkOperations.getTargets(subtype,"argument",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return ListSequence.fromList(SNodeOperations.getDescendants(it,"jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable",true,new String[]{})).isNotEmpty();
      }
    }
);
    for (    SNode arg : concreteArguments) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(arg,supertype)) {
        return result_14532009;
      }
    }
    if (Sequence.fromIterable(variableArguments).count() == 0) {
      return result_14532009;
    }
    if (Sequence.fromIterable(variableArguments).count() == 1) {
      result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)Sequence.fromIterable(variableArguments).first(),(SNode)supertype,true);
      return result_14532009;
    }
    SNode meet=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType",null);
    ListSequence.fromList(SLinkOperations.getTargets(meet,"argument",true)).addSequence(Sequence.fromIterable(variableArguments));
    result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)meet,(SNode)supertype,true);
  }
  return result_14532009;
}
