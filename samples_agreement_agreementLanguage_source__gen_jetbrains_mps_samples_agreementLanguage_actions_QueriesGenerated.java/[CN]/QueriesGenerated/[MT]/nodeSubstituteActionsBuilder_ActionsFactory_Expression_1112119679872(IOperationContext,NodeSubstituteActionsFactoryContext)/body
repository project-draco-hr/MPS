{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode fpConstant=SConceptOperations.createNewNode("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant",null);
          SPropertyOperations.set(fpConstant,"value","0.0");
          if (pattern.length() > 1) {
            if (pattern.endsWith(".")) {
              SPropertyOperations.set(fpConstant,"value",pattern.substring(1) + "0");
            }
 else {
              SPropertyOperations.set(fpConstant,"value",pattern.substring(1));
            }
          }
          SNode quantity=SConceptOperations.createNewNode("jetbrains.mps.samples.agreementLanguage.structure.Quantity",null);
          SPropertyOperations.set(quantity,"unit","USD");
          SLinkOperations.setTarget(quantity,"amount",fpConstant,true);
          return quantity;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.matches("\\$([0-9]+\\.?[0-9]*)?");
        }
        public String getDescriptionText(        String pattern){
          return "quantity dollars";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode fpConstant=SConceptOperations.createNewNode("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant",null);
          if (pattern.endsWith(".")) {
            SPropertyOperations.set(fpConstant,"value",pattern + 1);
          }
 else {
            SPropertyOperations.set(fpConstant,"value",pattern);
          }
          SNode quantity=SConceptOperations.createNewNode("jetbrains.mps.samples.agreementLanguage.structure.Quantity",null);
          SPropertyOperations.set(quantity,"unit","USD_KWH");
          SLinkOperations.setTarget(quantity,"amount",fpConstant,true);
          return quantity;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.matches("[0-9]+\\.?[0-9]*");
        }
        public String getDescriptionText(        String pattern){
          return "quantity";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
