{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode fpConstant=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,"jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant")));
          SPropertyOperations.set(fpConstant,MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,1113257000626l,"value"),"0.0");
          if (pattern.length() > 1) {
            if (pattern.endsWith(".")) {
              SPropertyOperations.set(fpConstant,MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,1113257000626l,"value"),pattern.substring(1) + "0");
            }
 else {
              SPropertyOperations.set(fpConstant,MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,1113257000626l,"value"),pattern.substring(1));
            }
          }
          SNode quantity=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,"jetbrains.mps.samples.agreementLanguage.structure.Quantity")));
          SPropertyOperations.set(quantity,MetaAdapterFactory.getProperty(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,1111793358083l,"unit"),"USD");
          SLinkOperations.setTarget(quantity,MetaAdapterFactory.getContainmentLink(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,1111793363741l,"amount"),fpConstant);
          return quantity;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.matches("\\$([0-9]+\\.?[0-9]*)?");
        }
        public String getDescriptionText(        String pattern){
          return "quantity dollars";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode fpConstant=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,"jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant")));
          if (pattern.endsWith(".")) {
            SPropertyOperations.set(fpConstant,MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,1113257000626l,"value"),pattern + 1);
          }
 else {
            SPropertyOperations.set(fpConstant,MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l,-8401387723420530422l),1111784926012l,1113257000626l,"value"),pattern);
          }
          SNode quantity=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,"jetbrains.mps.samples.agreementLanguage.structure.Quantity")));
          SPropertyOperations.set(quantity,MetaAdapterFactory.getProperty(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,1111793358083l,"unit"),"USD_KWH");
          SLinkOperations.setTarget(quantity,MetaAdapterFactory.getContainmentLink(new UUID(1463511629799179198l,-4743614238981921533l),1111792102248l,1111793363741l,"amount"),fpConstant);
          return quantity;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.matches("[0-9]+\\.?[0-9]*");
        }
        public String getDescriptionText(        String pattern){
          return "quantity";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
