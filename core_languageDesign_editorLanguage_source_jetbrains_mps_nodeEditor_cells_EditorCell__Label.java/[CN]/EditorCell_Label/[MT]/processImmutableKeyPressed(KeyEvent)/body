{
  if (isNotApplicableKeyEvent(keyEvent))   return false;
  myCaretIsVisible=true;
  String myText=myTextLine.getText();
  int caretPosition=myTextLine.getCaretPosition();
  AbstractEditorComponent editor=getEditorContext().getNodeEditorComponent();
  if ((keyEvent.isControlDown() && keyEvent.getKeyCode() == KeyEvent.VK_LEFT)) {
    if (caretPosition <= 0) {
      return false;
    }
    boolean isWhitespace=Character.isWhitespace(myText.charAt(caretPosition - 1));
    boolean isUnderline=myText.charAt(caretPosition - 1) == '_';
    boolean isUppercase=caretPosition - 2 >= 0 && Character.isUpperCase(myText.charAt(caretPosition - 1)) && Character.isUpperCase(myText.charAt(caretPosition - 2));
    int position=caretPosition - 1;
    while (position > 0) {
      char c=myText.charAt(position);
      if (isWhitespace) {
        if (!Character.isWhitespace(c)) {
          position++;
          break;
        }
      }
 else       if (isUnderline) {
        if (c != '_') {
          position++;
          break;
        }
      }
 else       if (isUppercase) {
        if (!Character.isUpperCase(c)) {
          position++;
          break;
        }
      }
 else {
        if (Character.isUpperCase(c)) {
          if (position - 1 >= 0 && Character.isUpperCase(myText.charAt(position - 1))) {
            position++;
          }
          break;
        }
        if (Character.isWhitespace(c)) {
          position++;
          break;
        }
        if (c == '_') {
          position++;
          break;
        }
      }
      position--;
    }
    if (isUppercase) {
      if (!Character.isUpperCase(myText.charAt(position))) {
        position++;
      }
    }
    if (!isCaretPositionAllowed(position))     return false;
    setCaretPosition(position,keyEvent.isShiftDown());
    editor.resetLastCaretX();
    ensureCaretVisible();
    return true;
  }
  if (keyEvent.isControlDown() && keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
    if (caretPosition >= myText.length())     return false;
    boolean isWhitespace=Character.isWhitespace(myText.charAt(caretPosition));
    boolean isUnderline=myText.charAt(caretPosition) == '_';
    boolean isUppercase=caretPosition + 1 < myText.length() && Character.isUpperCase(myText.charAt(caretPosition)) && Character.isUpperCase(myText.charAt(caretPosition + 1));
    int position=caretPosition + 1;
    while (position < myText.length()) {
      char c=myText.charAt(position);
      if (isWhitespace) {
        if (!Character.isWhitespace(c)) {
          break;
        }
      }
 else       if (isUnderline) {
        if (c != '_') {
          break;
        }
      }
 else       if (isUppercase) {
        if (!Character.isUpperCase(c)) {
          break;
        }
      }
 else {
        if (Character.isUpperCase(c)) {
          break;
        }
        if (Character.isWhitespace(c)) {
          break;
        }
        if (c == '_') {
          break;
        }
      }
      position++;
    }
    if (!isCaretPositionAllowed(position)) {
      return false;
    }
    setCaretPosition(position,keyEvent.isShiftDown());
    editor.resetLastCaretX();
    ensureCaretVisible();
    return true;
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_LEFT && !keyEvent.isControlDown()) {
    if (caretPosition > 0) {
      if (!isCaretPositionAllowed(caretPosition - 1))       return false;
      setCaretPosition(caretPosition - 1,keyEvent.isShiftDown());
      editor.resetLastCaretX();
      ensureCaretVisible();
      return true;
    }
 else {
      return false;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_RIGHT && !keyEvent.isControlDown()) {
    if (caretPosition < myText.length()) {
      if (!isCaretPositionAllowed(caretPosition + 1))       return false;
      setCaretPosition(caretPosition + 1,keyEvent.isShiftDown());
      editor.resetLastCaretX();
      ensureCaretVisible();
      return true;
    }
 else {
      return false;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_HOME && keyEvent.isShiftDown()) {
    if (caretPosition <= 0)     return false;
    if (!isCaretPositionAllowed(0))     return false;
    setCaretPosition(0,true);
    editor.resetLastCaretX();
    ensureCaretVisible();
    return true;
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_END && keyEvent.isShiftDown()) {
    if (caretPosition >= myText.length())     return false;
    if (!isCaretPositionAllowed(myText.length()))     return false;
    setCaretPosition(myText.length(),true);
    editor.resetLastCaretX();
    ensureCaretVisible();
    return true;
  }
  return false;
}
