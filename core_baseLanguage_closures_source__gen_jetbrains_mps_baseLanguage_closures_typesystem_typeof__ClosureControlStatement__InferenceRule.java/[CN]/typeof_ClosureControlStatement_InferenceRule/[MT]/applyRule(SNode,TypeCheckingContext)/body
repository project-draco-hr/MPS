{
  ControlMethodUtil.Info info=ControlMethodUtil.analyze(SLinkOperations.getTarget(ccs,"controlMethod",false));
  if (!(info != null)) {
    BaseIntentionProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    typeCheckingContext.reportTypeError(ccs,"Not referring to a control method","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1232453890820",intentionProvider,errorTarget);
  }
  if (info != null) {
    List<SNode> ccts=info.getControlClosureTypes();
    if (!(ccts.size() > 0)) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(ccs,"Control method should accept at least one unrestricted closure","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1232454232193",intentionProvider,errorTarget);
    }
    if (!((SLinkOperations.getTarget(ccs,"controlClosure",true) != null))) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(ccs,"Must define a control closure","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1232454314258",intentionProvider,errorTarget);
    }
    if (ccts.size() > 0) {
{
        SNode _nodeToCheck_1029348928467=ccs;
        BaseIntentionProvider intentionProvider=null;
        typeCheckingContext.createLessThanInequationStrong(typeCheckingContext.typeOf(SLinkOperations.getTarget(ccs,"controlClosure",true),"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1236533965287",true),ccts.get(ccts.size() - 1),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1236533962056",false,0,intentionProvider);
      }
    }
    List<SNode> params=SLinkOperations.getTargets(ccs,"actualParameter",true);
    List<SNode> fpts=info.getFunctionParamTypes();
    if (!(params.size() == fpts.size())) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(ccs,"Incorrect parameters number","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1232455288552",intentionProvider,errorTarget);
    }
{
      SNode pt;
      SNode param;
      Iterator<SNode> pt_iterator=fpts.iterator();
      Iterator<SNode> param_iterator=params.iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(param_iterator.hasNext())) {
          break;
        }
        pt=pt_iterator.next();
        param=param_iterator.next();
{
          SNode _nodeToCheck_1029348928467=ccs;
          BaseIntentionProvider intentionProvider=null;
          typeCheckingContext.createLessThanInequation(typeCheckingContext.typeOf(param,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1236534227246",true),pt,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1236534225483",false,0,intentionProvider);
        }
      }
    }
  }
}
