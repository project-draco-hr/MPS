{
  super(null,null);
  myNode=node;
{
    DataFlowConstructor rule=new RuleNotEqualsNull();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
{
    DataFlowConstructor rule=new RuleNullNotEquals();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
{
    DataFlowConstructor rule=new RuleNotEqualsNullAnd();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
{
    DataFlowConstructor rule=new RuleIfNullReturn();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
{
    DataFlowConstructor rule=new RuleVoidIfNullReturn();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
{
    DataFlowConstructor rule=new RuleIfNullEqualsReturn();
    String conceptName="jetbrains.mps.baseLanguage.structure.IfStatement";
    if (!(myApplicableMap.containsKey(conceptName))) {
      myApplicableMap.put(conceptName,new LinkedList<DataFlowConstructor>());
    }
    myApplicableMap.get(conceptName).add(rule);
  }
  myProgram=new MPSProgramBuilder(DataFlowManager.getInstance()).buildProgram(myNode);
  prepareProgram();
  myAnalyzer=new NullableAnalyzerRunner.NullableAnalyzer();
}
