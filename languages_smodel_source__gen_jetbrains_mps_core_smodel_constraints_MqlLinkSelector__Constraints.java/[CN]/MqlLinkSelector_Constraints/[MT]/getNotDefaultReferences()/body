{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("link",new BaseReferenceConstraintsDescriptor("link",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode type;
          if ((_context.getReferenceNode() != null)) {
            type=MqlSelector_Behavior.call_getContainerType_228266671027861723(_context.getReferenceNode());
          }
 else           if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.core.query.structure.MqlDotExpression")) {
            type=MqlExpression_Behavior.call_getType_228266671027861783(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.core.query.structure.MqlDotExpression"),"left",true));
          }
 else {
            type=null;
          }
          if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.core.smodel.structure.MqlNodeType")) {
            SNode decl=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.core.smodel.structure.MqlNodeType"),"concept",false);
            if ((decl != null)) {
              ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(decl,"linkDeclaration",true)));
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_3c55os_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
