{
  Set<Class> addedKeymaps=new HashSet<Class>();
  List<Pair<KeyMap,EditorCell>> keyMapsAndCells=new ArrayList<Pair<KeyMap,EditorCell>>();
  EditorCell keymapOwnerCell=selectedCell;
  while (keymapOwnerCell != null) {
    KeyMap keymap=keymapOwnerCell.getKeyMap();
    if (keymap != null && !addedKeymaps.contains(keymap.getClass())) {
      keyMapsAndCells.add(new Pair<KeyMap,EditorCell>(keymap,keymapOwnerCell));
      addedKeymaps.add(keymap.getClass());
    }
    keymapOwnerCell=keymapOwnerCell.getParent();
  }
  SModel model=editorContext.getModel();
  if (model != null) {
    Set<SModuleReference> importedAndExtendedLanguages=new HashSet<SModuleReference>();
    for (    SModuleReference langRef : SModelOperations.getAllImportedLanguages(model)) {
      importedAndExtendedLanguages.add(langRef);
      Language l=ModuleRepositoryFacade.getInstance().getModule(langRef,Language.class);
      if (l == null)       continue;
      importedAndExtendedLanguages.addAll(LanguageDependenciesManager.getAllExtendedLanguageReferences(l));
    }
    for (    SModuleReference ref : importedAndExtendedLanguages) {
      SModule language=ref.resolve(MPSModuleRepository.getInstance());
      if (language == null)       continue;
      if (!VisibilityUtil.isVisibleLanguage(editorContext.getModel().getModule(),SConceptRepository.getInstance().getLanguage(language.getModuleName())))       continue;
      List<KeyMap> keyMapsForNamespace=LanguagesKeymapManager.getInstance().getKeyMapsForLanguage(((Language)language));
      if (keyMapsForNamespace != null) {
        for (        KeyMap keymap : keyMapsForNamespace) {
          if (!addedKeymaps.contains(keymap.getClass())) {
            keyMapsAndCells.add(new Pair<KeyMap,EditorCell>(keymap,selectedCell));
            addedKeymaps.add(keymap.getClass());
          }
        }
      }
    }
  }
  return keyMapsAndCells;
}
