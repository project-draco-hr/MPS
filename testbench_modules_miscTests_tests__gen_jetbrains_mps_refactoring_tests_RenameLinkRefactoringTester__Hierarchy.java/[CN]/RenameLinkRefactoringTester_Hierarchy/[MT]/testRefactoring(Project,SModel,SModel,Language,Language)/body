{
  final ModelAccess modelAccess=project.getRepository().getModelAccess();
  final Wrappers._T<IRefactoring> refactoring=new Wrappers._T<IRefactoring>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      refactoring.value=RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class,SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","1347577327951781638"),"virtual_getFqName_1213877404258",new Object[]{}));
    }
  }
);
  final RefactoringContext refactoringContext=new RefactoringContext(project,refactoring.value);
  refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
  final String newLinkName="goodConcept";
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      SModel structureModelDescriptor=testRefactoringTargetLanguage.getStructureModelDescriptor();
      SModel model=structureModelDescriptor;
      SNode node=SModelOperations.getRootByName(model,"AbstractGoodConcept");
      SNode link=ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")),MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).first();
      refactoringContext.setSelectedNode(link);
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter("newName",newLinkName);
    }
  }
);
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    @Override public void run(){
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          try {
            if (sandbox1.isLoaded()) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1;
            SNode root=sModel.getRootNodes().iterator().next();
            result[0]=(IterableUtil.asCollection(root.getChildren(newLinkName)).size() == 4);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
