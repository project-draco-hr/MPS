{
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart",MetaIdFactory.conceptId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c0ef7f429L)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111791aa602L)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111791aa602L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11c22e34d8eL,"left",MetaIdFactory.conceptId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c22ec8f79L),false,false,false),new ConceptDescriptorBuilder.Link(0x11c22e2e56cL,"right",MetaIdFactory.conceptId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11c22ec8f79L),false,false,false)).children(new String[]{"left","right"},new boolean[]{false,false}).alias("&&","intersection of classes").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)","1220021842985")).create();
}
