{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AtLeastNTimesRegexp:
    return myConceptAtLeastNTimesRegexp;
case LanguageConceptSwitch.BinaryRegexp:
  return myConceptBinaryRegexp;
case LanguageConceptSwitch.CharacterSymbolClassPart:
return myConceptCharacterSymbolClassPart;
case LanguageConceptSwitch.DotRegexp:
return myConceptDotRegexp;
case LanguageConceptSwitch.FindMatchExpression:
return myConceptFindMatchExpression;
case LanguageConceptSwitch.FindMatchStatement:
return myConceptFindMatchStatement;
case LanguageConceptSwitch.ForEachMatchStatement:
return myConceptForEachMatchStatement;
case LanguageConceptSwitch.FromNToMTimesRegexp:
return myConceptFromNToMTimesRegexp;
case LanguageConceptSwitch.InlineRegexpExpression:
return myConceptInlineRegexpExpression;
case LanguageConceptSwitch.IntersectionSymbolClassPart:
return myConceptIntersectionSymbolClassPart;
case LanguageConceptSwitch.IntervalSymbolClassPart:
return myConceptIntervalSymbolClassPart;
case LanguageConceptSwitch.LazyPlusRegexp:
return myConceptLazyPlusRegexp;
case LanguageConceptSwitch.LazyQuestionRegexp:
return myConceptLazyQuestionRegexp;
case LanguageConceptSwitch.LazyStarRegexp:
return myConceptLazyStarRegexp;
case LanguageConceptSwitch.LineEndRegexp:
return myConceptLineEndRegexp;
case LanguageConceptSwitch.LineStartRegexp:
return myConceptLineStartRegexp;
case LanguageConceptSwitch.LiteralReplacement:
return myConceptLiteralReplacement;
case LanguageConceptSwitch.LookRegexp:
return myConceptLookRegexp;
case LanguageConceptSwitch.MatchParensRegexp:
return myConceptMatchParensRegexp;
case LanguageConceptSwitch.MatchRegexpExpression:
return myConceptMatchRegexpExpression;
case LanguageConceptSwitch.MatchRegexpOperation:
return myConceptMatchRegexpOperation;
case LanguageConceptSwitch.MatchRegexpStatement:
return myConceptMatchRegexpStatement;
case LanguageConceptSwitch.MatchVariableReference:
return myConceptMatchVariableReference;
case LanguageConceptSwitch.MatchVariableReferenceRegexp:
return myConceptMatchVariableReferenceRegexp;
case LanguageConceptSwitch.MatchVariableReferenceReplacement:
return myConceptMatchVariableReferenceReplacement;
case LanguageConceptSwitch.NTimesRegexp:
return myConceptNTimesRegexp;
case LanguageConceptSwitch.NegativeLookAheadRegexp:
return myConceptNegativeLookAheadRegexp;
case LanguageConceptSwitch.NegativeLookBehindRegexp:
return myConceptNegativeLookBehindRegexp;
case LanguageConceptSwitch.NegativeSymbolClassRegexp:
return myConceptNegativeSymbolClassRegexp;
case LanguageConceptSwitch.OrRegexp:
return myConceptOrRegexp;
case LanguageConceptSwitch.ParensRegexp:
return myConceptParensRegexp;
case LanguageConceptSwitch.PlusRegexp:
return myConceptPlusRegexp;
case LanguageConceptSwitch.PositiveLookAheadRegexp:
return myConceptPositiveLookAheadRegexp;
case LanguageConceptSwitch.PositiveLookBehindRegexp:
return myConceptPositiveLookBehindRegexp;
case LanguageConceptSwitch.PositiveSymbolClassRegexp:
return myConceptPositiveSymbolClassRegexp;
case LanguageConceptSwitch.PredefinedSymbolClassDeclaration:
return myConceptPredefinedSymbolClassDeclaration;
case LanguageConceptSwitch.PredefinedSymbolClassRegexp:
return myConceptPredefinedSymbolClassRegexp;
case LanguageConceptSwitch.PredefinedSymbolClassSymbolClassPart:
return myConceptPredefinedSymbolClassSymbolClassPart;
case LanguageConceptSwitch.PredefinedSymbolClasses:
return myConceptPredefinedSymbolClasses;
case LanguageConceptSwitch.QuestionRegexp:
return myConceptQuestionRegexp;
case LanguageConceptSwitch.Regexp:
return myConceptRegexp;
case LanguageConceptSwitch.RegexpDeclaration:
return myConceptRegexpDeclaration;
case LanguageConceptSwitch.RegexpDeclarationReferenceRegexp:
return myConceptRegexpDeclarationReferenceRegexp;
case LanguageConceptSwitch.RegexpExpression:
return myConceptRegexpExpression;
case LanguageConceptSwitch.RegexpUsingConstruction:
return myConceptRegexpUsingConstruction;
case LanguageConceptSwitch.Regexps:
return myConceptRegexps;
case LanguageConceptSwitch.ReplaceBlock:
return myConceptReplaceBlock;
case LanguageConceptSwitch.ReplaceRegexpOperation:
return myConceptReplaceRegexpOperation;
case LanguageConceptSwitch.ReplaceWithRegexpExpression:
return myConceptReplaceWithRegexpExpression;
case LanguageConceptSwitch.ReplaceWithRegexpOperation:
return myConceptReplaceWithRegexpOperation;
case LanguageConceptSwitch.Replacement:
return myConceptReplacement;
case LanguageConceptSwitch.SeqRegexp:
return myConceptSeqRegexp;
case LanguageConceptSwitch.SplitExpression:
return myConceptSplitExpression;
case LanguageConceptSwitch.SplitOperation:
return myConceptSplitOperation;
case LanguageConceptSwitch.StarRegexp:
return myConceptStarRegexp;
case LanguageConceptSwitch.StringLiteralRegexp:
return myConceptStringLiteralRegexp;
case LanguageConceptSwitch.SymbolClassPart:
return myConceptSymbolClassPart;
case LanguageConceptSwitch.SymbolClassRegexp:
return myConceptSymbolClassRegexp;
case LanguageConceptSwitch.SymbolClassRegexpAndPart:
return myConceptSymbolClassRegexpAndPart;
case LanguageConceptSwitch.UnaryRegexp:
return myConceptUnaryRegexp;
case LanguageConceptSwitch.UnicodeCharacterRegexp:
return myConceptUnicodeCharacterRegexp;
default :
return null;
}
}
