{
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.DotRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.OrRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.Regexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.Regexps",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.Replacement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SplitOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp",null);
}
