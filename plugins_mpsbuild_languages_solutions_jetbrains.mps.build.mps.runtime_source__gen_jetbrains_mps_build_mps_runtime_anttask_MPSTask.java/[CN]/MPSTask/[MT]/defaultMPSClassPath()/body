{
  File[] pathsToLook;
  if (isFromSources()) {
    pathsToLook=new File[]{absolutePath("core"),absolutePath("lib"),absolutePath("plugins/mpsbuild/languages/solutions/jetbrains.mps.build.mps.runtime"),absolutePath("languages/baseLanguage/closures/runtime"),absolutePath("languages/baseLanguage/collections/runtime"),absolutePath("languages/baseLanguage/baseLanguage/solutions/jetbrains.mps.baseLanguage.search"),absolutePath("workbench/typesystemUi/classes"),absolutePath("MPSPlugin/apiclasses")};
  }
 else {
    pathsToLook=new File[]{absolutePath("lib"),absolutePath("plugin"),absolutePath("plugins")};
  }
  Set<File> classPaths=new LinkedHashSet<File>();
  for (  File path : pathsToLook) {
    if (!(path.exists() && (path.isDirectory() || path.getAbsolutePath().endsWith(".jar")))) {
      throw new BuildException(myMpsHome + " is invalid MPS classpath: " + path+ " does not exist or is not a directory or a jar file.");
    }
    if (path.isDirectory()) {
      gatherAllClassesAndJarsUnder(path,classPaths);
    }
 else {
      classPaths.add(path.getAbsoluteFile());
    }
  }
  File mpsClasses=absolutePath("classes");
  if (mpsClasses.exists()) {
    classPaths.add(mpsClasses);
  }
  return classPaths;
}
