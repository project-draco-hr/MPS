{
  JPanel panel=new JPanel(new BorderLayout());
  myProject.getRepository().getModelAccess().executeCommand(new Runnable(){
    public void run(){
      final SNode baseMethodDecalration=ChangeMethodSignatureDialog.this.myParameters.getDeclaration();
      SLinkOperations.setTarget(baseMethodDecalration,"body",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null),true);
      ChangeMethodSignatureDialog.this.myEditor=new EmbeddableEditor(ChangeMethodSignatureDialog.this.myOperationContext.getProject(),new _FunctionTypes._void_P1_E0<SModel>(){
        public void invoke(        SModel m){
          m.addRootNode(baseMethodDecalration);
        }
      }
,true);
      myEditor.editNode(baseMethodDecalration);
      SModule module=ChangeMethodSignatureDialog.this.myOperationContext.getModule();
      if (module instanceof Language) {
        ChangeMethodSignatureDialog.this.myEditor.addLanguageStructureModel((Language)module);
      }
      SModule m=ChangeMethodSignatureDialog.this.myOperationContext.getModule();
      for (      Language language : CollectionSequence.fromCollection(new GlobalModuleDependenciesManager(m).getUsedLanguages())) {
        ChangeMethodSignatureDialog.this.myEditor.addLanguage(language);
      }
      SModel model=ChangeMethodSignatureDialog.this.myDeclaration.getModel();
      for (      SModelReference imported : ListSequence.fromList(SModelOperations.getImportedModelUIDs(model))) {
        ChangeMethodSignatureDialog.this.myEditor.addModel(imported);
      }
    }
  }
);
  panel.setBorder(new TitledBorder("Method signature"));
  panel.add(this.myEditor.getComponenet());
  return panel;
}
