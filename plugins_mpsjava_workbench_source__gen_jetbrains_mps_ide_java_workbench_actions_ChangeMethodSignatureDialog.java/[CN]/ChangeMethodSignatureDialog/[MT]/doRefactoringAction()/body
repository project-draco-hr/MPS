{
  final Wrappers._T<List<SNode>> methodsToRefactor=new Wrappers._T<List<SNode>>(new ArrayList<SNode>());
  ProgressManager.getInstance().run(new Task.Modal(getProject(),"Search for overriding methods",true){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      ModelAccess modelAccess=ChangeMethodSignatureDialog.this.myProject.getRepository().getModelAccess();
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          methodsToRefactor.value=MethodRefactoringUtils.findOverridingMethods(ChangeMethodSignatureDialog.this.myDeclaration,new ProgressMonitorAdapter(indicator));
        }
      }
);
    }
  }
);
  ListSequence.fromList(methodsToRefactor.value).addElement(myDeclaration);
  myRefactorings=ListSequence.fromList(new ArrayList<ChangeMethodSignatureRefactoring>());
  for (  SNode method : ListSequence.fromList(methodsToRefactor.value)) {
    ListSequence.fromList(myRefactorings).addElement(new ChangeMethodSignatureRefactoring(this.myParameters,method));
  }
  super.doRefactoringAction();
}
