{
  SNode parentNode=(SNode)cellContext.get(BasicCellContext.EDITED_NODE);
  SNode linkDeclaration=(SNode)cellContext.get(AggregationCellContext.LINK_DECLARATION);
  IChildNodeSetter setter=new DefaultChildNodeSetter(linkDeclaration);
  SNode defaultConceptOfChild=CellUtil.getLinkDeclarationTarget(linkDeclaration);
  SNode currentChild=(SNode)cellContext.getOpt(AggregationCellContext.CURRENT_CHILD_NODE);
  IOperationContext context=editorContext.getOperationContext();
  SNode childNodeConcept=getConceptOfChild(parentNode,currentChild,defaultConceptOfChild,context,editorContext);
  if (childNodeConcept == null) {
    return Collections.emptyList();
  }
  if (OldNewSubstituteUtil.areOldActionsApplicable(childNodeConcept)) {
    return ModelActions.createChildNodeSubstituteActions(parentNode,currentChild,childNodeConcept,setter,context);
  }
 else {
    SAbstractConcept concept=MetaAdapterByDeclaration.getConcept(childNodeConcept);
    if (concept == null) {
      return new ArrayList<>();
    }
    SContainmentLink containmentLink=MetaAdapterByDeclaration.getContainmentLink(linkDeclaration);
    MenuLookup<SubstituteMenu> lookup=new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()),concept);
    List<TransformationMenuItem> transformationItems=new SubstituteItemsCollector(parentNode,currentChild,containmentLink,editorContext,lookup).collect();
    return new SubstituteActionsCollector(parentNode,transformationItems).collect();
  }
}
