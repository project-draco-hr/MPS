{
  ClassType objectType=(ClassType)EvaluationUtils.findClassType("java.lang.Object",myThreadReference.virtualMachine());
  final Method method=EvaluationUtils.findMethod(objectType,name,jniSignature);
  final List<Value> argValues=MirrorUtil.getInstance().getValues(myThreadReference,args);
  return EvaluationUtils.handleInvocationExceptions(new EvaluationUtils.ThreadInvocatable<IValueProxy>(myThreadReference){
    @Override public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {
      Value result=getArrayValue().invokeMethod(myThreadReference,method,argValues,0);
      return MirrorUtil.getInstance().getValueProxy(result,myThreadReference);
    }
  }
);
}
