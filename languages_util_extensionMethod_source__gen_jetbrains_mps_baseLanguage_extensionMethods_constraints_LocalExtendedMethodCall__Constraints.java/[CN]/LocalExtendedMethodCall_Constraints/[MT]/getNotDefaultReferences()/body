{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          if (SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,false) != null) {
            return result;
          }
          SNode classifier=ExtensionMethodDeclaration_Behavior.call_getClassifier_7685333756920241018(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration",false,false));
          if (classifier == null) {
            return result;
          }
          int constraint=IClassifiersSearchScope.INSTANCE_METHOD;
          Set<String> names=SetSequence.fromSet(new HashSet<String>());
          while (classifier != null) {
            for (            SNode method : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,_context.getEnclosingNode(),constraint)) {
              if (!(SetSequence.fromSet(names).contains(SPropertyOperations.getString(method,"name")))) {
                ListSequence.fromList(result).addElement(method);
              }
            }
            for (            SNode method : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,_context.getEnclosingNode(),constraint)) {
              SetSequence.fromSet(names).addElement(SPropertyOperations.getString(method,"name"));
            }
            classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_rxyf25_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
