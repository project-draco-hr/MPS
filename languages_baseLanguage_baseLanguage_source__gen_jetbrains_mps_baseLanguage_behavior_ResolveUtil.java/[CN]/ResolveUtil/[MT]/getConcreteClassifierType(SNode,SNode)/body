{
  SNode result=SNodeOperations.copyNode(typeWithVars);
  List<SNode> varRefs=SNodeOperations.getNodeDescendants(result,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),false,new SAbstractConcept[]{});
  List<SNode> params=ListSequence.fromList(SLinkOperations.getChildren(classifierSubtype,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).toListSequence();
  for (  SNode varRef : varRefs) {
    int index=SNodeOperations.getIndexInParent(SLinkOperations.getTarget(varRef,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,1109283546497l,"typeVariableDeclaration")));
    if (index < ListSequence.fromList(params).count()) {
      SNodeOperations.replaceWithAnother(varRef,SNodeOperations.copyNode(ListSequence.fromList(params).getElement(index)));
    }
 else {
      SNodeOperations.replaceWithAnother(varRef,TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091509920(SLinkOperations.getTarget(varRef,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1109283449304l,1109283546497l,"typeVariableDeclaration"))));
    }
  }
  return result;
}
