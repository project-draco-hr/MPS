{
  if (SNodeOperations.isInstanceOf(Sequence.fromIterable(parameterTypes).last(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,"jetbrains.mps.baseLanguage.structure.VariableArityType"))) {
    if (Sequence.fromIterable(parameterTypes).count() - 1 > ListSequence.fromList(arguments).count()) {
      return false;
    }
    SNode lastArgument=ListSequence.fromList(arguments).last();
    SNode varArgType=SNodeOperations.cast(Sequence.fromIterable(parameterTypes).last(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,"jetbrains.mps.baseLanguage.structure.VariableArityType"));
    Iterator<SNode> pTypesItr=Sequence.fromIterable(parameterTypes).iterator();
    Iterator<SNode> argumentsItr=ListSequence.fromList(arguments).iterator();
    while (pTypesItr.hasNext()) {
      SNode parameterType=pTypesItr.next();
      SNode argument=(argumentsItr.hasNext() ? argumentsItr.next() : null);
      if (parameterType == varArgType) {
        if (argument == null) {
          return true;
        }
        SNode mayBeLastArgumentType=TypeChecker.getInstance().getTypeOf(argument);
        SNode varArgComponentType=SLinkOperations.getTarget(varArgType,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,1219921048460l,"componentType"));
        if ((lastArgument == argument) && SNodeOperations.isInstanceOf(mayBeLastArgumentType,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070534760951l,"jetbrains.mps.baseLanguage.structure.ArrayType")) && TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(SNodeOperations.cast(mayBeLastArgumentType,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070534760951l,"jetbrains.mps.baseLanguage.structure.ArrayType")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1070534760951l,1070534760952l,"componentType")),varArgComponentType)) {
          return true;
        }
 else {
          while (argument != null) {
            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(argument),varArgComponentType))) {
              return false;
            }
            argument=(argumentsItr.hasNext() ? argumentsItr.next() : null);
          }
          return true;
        }
      }
 else       if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(argument),parameterType))) {
        return false;
      }
    }
    return true;
  }
 else   if (Sequence.fromIterable(parameterTypes).count() == ListSequence.fromList(arguments).count()) {
{
      Iterator<SNode> parameterType_it=Sequence.fromIterable(parameterTypes).iterator();
      Iterator<SNode> argument_it=ListSequence.fromList(arguments).iterator();
      SNode parameterType_var;
      SNode argument_var;
      while (parameterType_it.hasNext() && argument_it.hasNext()) {
        parameterType_var=parameterType_it.next();
        argument_var=argument_it.next();
        if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(argument_var),parameterType_var))) {
          return false;
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}
