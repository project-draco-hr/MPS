{
  List<SNode> result=ListSequence.fromList(new LinkedList<SNode>());
  boolean containsVars=false;
  for (  SNode parameter : SLinkOperations.getChildren(method,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))) {
    if (ListSequence.fromList(SNodeOperations.getNodeDescendants(parameter,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),true,new SAbstractConcept[]{})).isNotEmpty()) {
      containsVars=true;
    }
    ListSequence.fromList(result).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(parameter,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type"))));
  }
  if (!(containsVars)) {
    return result;
  }
  List<SNode> frontier=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(frontier).addElement(instanceType);
  SNode concreteMethodClassifierType=ResolveUtil.getConcreteSuperClassifierType(frontier,classifier);
  if (concreteMethodClassifierType == null) {
    return result;
  }
  List<SNode> typeParameters=ListSequence.fromList(SLinkOperations.getChildren(concreteMethodClassifierType,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).toListSequence();
  for (  SNode paramType : ListSequence.fromListWithValues(new ArrayList<SNode>(),result)) {
    for (    SNode typeVar : SNodeOperations.getNodeDescendants(paramType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),true,new SAbstractConcept[]{})) {
      SNode variableDeclaration=SLinkOperations.getTarget(typeVar,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"));
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(variableDeclaration),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"))) {
        SNode replacement=SNodeOperations.copyNode(ListSequence.fromList(typeParameters).getElement(SNodeOperations.getIndexInParent(variableDeclaration)));
        if ((SNodeOperations.getParent(typeVar) == null)) {
          ListSequence.fromList(result).insertElement(ListSequence.fromList(result).indexOf(typeVar),replacement);
          ListSequence.fromList(result).removeElement(typeVar);
        }
 else {
          SNodeOperations.replaceWithAnother(typeVar,replacement);
        }
      }
    }
  }
  return result;
}
