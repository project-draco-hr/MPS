{
  SNode declaringClassifier=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  SNode result=SNodeOperations.copyNode(method);
  List<SNode> initialClassifierTypes=ListSequence.fromList(new ArrayList<SNode>());
  if (SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode classConcept=SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SNode superclass;
    if (SNodeOperations.isInstanceOf(classConcept,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      superclass=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      SLinkOperations.setTarget(superclass,"classifier",SLinkOperations.getTarget(SNodeOperations.cast(classConcept,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false),false);
      for (      SNode type : SLinkOperations.getTargets(SNodeOperations.cast(classConcept,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"typeParameter",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(superclass,"parameter",true)).addElement(SNodeOperations.copyNode(type));
      }
    }
 else {
      superclass=SLinkOperations.getTarget(classConcept,"superclass",true);
    }
    if ((superclass != null)) {
      ListSequence.fromList(initialClassifierTypes).addElement(superclass);
    }
    for (    SNode intfc : SLinkOperations.getTargets(classConcept,"implementedInterface",true)) {
      ListSequence.fromList(initialClassifierTypes).addElement(intfc);
    }
  }
  if (SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    SNode interfaceConcept=SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.Interface");
    for (    SNode intfc : SLinkOperations.getTargets(interfaceConcept,"extendedInterface",true)) {
      ListSequence.fromList(initialClassifierTypes).addElement(intfc);
    }
  }
  SNode concreteSuperClassifierType=getConcreteSuperClassifierType(initialClassifierTypes,declaringClassifier);
  Set<SNode> types=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(result,"returnType",true));
  for (  SNode param : SLinkOperations.getTargets(result,"parameter",true)) {
    SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(param,"type",true));
  }
  List<SNode> params=SLinkOperations.getTargets(concreteSuperClassifierType,"parameter",true);
  for (  SNode typeToModify : types) {
    for (    SNode varRef : SNodeOperations.getDescendants(typeToModify,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true,new String[]{})) {
      SNode typeVariableDeclaration=SLinkOperations.getTarget(varRef,"typeVariableDeclaration",false);
      if (SNodeOperations.getParent(typeVariableDeclaration) != result) {
        int index=SNodeOperations.getIndexInParent(typeVariableDeclaration);
        if (ListSequence.fromList(params).count() > index) {
          SNodeOperations.replaceWithAnother(varRef,SNodeOperations.copyNode(ListSequence.fromList(params).getElement(index)));
        }
 else {
          SNodeOperations.replaceWithAnother(varRef,_quotation_createNode_txu8l3_a0a0a0b0c0a0k0d());
        }
      }
    }
  }
  return result;
}
