{
  SNode declaringClassifier=SNodeOperations.getNodeAncestor(method,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false,false);
  SNode result=SNodeOperations.copyNode(method);
  List<SNode> initialClassifierTypes=ListSequence.fromList(new ArrayList<SNode>());
  if (SNodeOperations.isInstanceOf(enclosingClassifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
    SNode classConcept=SNodeOperations.cast(enclosingClassifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    SNode superclass;
    if (SNodeOperations.isInstanceOf(classConcept,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      superclass=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
      SLinkOperations.setTarget(superclass,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),SLinkOperations.getTarget(SNodeOperations.cast(classConcept,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x1107e0fd2a0L,"classifier")));
      for (      SNode type : SLinkOperations.getChildren(SNodeOperations.cast(classConcept,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x117ac45a693L,"typeParameter"))) {
        ListSequence.fromList(SLinkOperations.getChildren(superclass,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).addElement(SNodeOperations.copyNode(type));
      }
    }
 else {
      superclass=SLinkOperations.getTarget(classConcept,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0x10f6353296dL,"superclass"));
    }
    if ((superclass != null)) {
      ListSequence.fromList(initialClassifierTypes).addElement(superclass);
    }
    for (    SNode intfc : SLinkOperations.getChildren(classConcept,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0xff2ac0b419L,"implementedInterface"))) {
      ListSequence.fromList(initialClassifierTypes).addElement(intfc);
    }
  }
  if (SNodeOperations.isInstanceOf(enclosingClassifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"))) {
    SNode interfaceConcept=SNodeOperations.cast(enclosingClassifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"));
    for (    SNode intfc : SLinkOperations.getChildren(interfaceConcept,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,0x101eddadad7L,"extendedInterface"))) {
      ListSequence.fromList(initialClassifierTypes).addElement(intfc);
    }
  }
  SNode concreteSuperClassifierType=getConcreteSuperClassifierType(initialClassifierTypes,declaringClassifier);
  Set<SNode> types=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(result,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")));
  for (  SNode param : SLinkOperations.getChildren(result,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))) {
    SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(param,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type")));
  }
  List<SNode> params=SLinkOperations.getChildren(concreteSuperClassifierType,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"));
  for (  SNode typeToModify : types) {
    for (    SNode varRef : SNodeOperations.getNodeDescendants(typeToModify,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),true,new SAbstractConcept[]{})) {
      SNode typeVariableDeclaration=SLinkOperations.getTarget(varRef,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"));
      if (SNodeOperations.getParent(typeVariableDeclaration) != result) {
        int index=SNodeOperations.getIndexInParent(typeVariableDeclaration);
        if (ListSequence.fromList(params).count() > index) {
          SNodeOperations.replaceWithAnother(varRef,SNodeOperations.copyNode(ListSequence.fromList(params).getElement(index)));
        }
 else {
          SNodeOperations.replaceWithAnother(varRef,_quotation_createNode_txu8l3_a0a0a0b0c0a0k0e());
        }
      }
    }
  }
  return result;
}
