{
  if (myLoading) {
    return;
  }
  myLoading=true;
  try {
    ModelLoadResult<SModel> res=UndoHelper.getInstance().runNonUndoableAction(new Computable<ModelLoadResult<SModel>>(){
      @Override public ModelLoadResult<SModel> compute(){
        if (state == ModelLoadingState.NOT_LOADED) {
          return new ModelLoadResult<SModel>(null,ModelLoadingState.NOT_LOADED);
        }
        if (state == ModelLoadingState.INTERFACE_LOADED) {
          ModelLoadResult<jetbrains.mps.smodel.SModel> result=myLoader.doLoad(ModelLoadingState.INTERFACE_LOADED);
          if (result.getModelData() != null) {
            result.getModelData().setModelDescriptor(myModelDescriptor);
          }
          return result;
        }
        if (state == ModelLoadingState.FULLY_LOADED) {
          ModelLoadResult<SModel> fullModel=myLoader.doLoad(ModelLoadingState.FULLY_LOADED);
          if (myModel == null) {
            if (fullModel.getModelData() != null) {
              fullModel.getModelData().setModelDescriptor(myModelDescriptor);
            }
            return fullModel;
          }
          if (fullModel.getModelData() == null) {
            return fullModel;
          }
          myModel.enterUpdateMode();
          fullModel.getModelData().enterUpdateMode();
          new PartialModelUpdateFacility(myModel,fullModel.getModelData(),myModelDescriptor).update();
          fullModel.getModelData().leaveUpdateMode();
          myModel.leaveUpdateMode();
          return new ModelLoadResult<SModel>(myModel,fullModel.getState());
        }
        throw new UnsupportedOperationException();
      }
    }
);
    doReplace(res.getModelData(),res.getState());
  }
  finally {
    myLoading=false;
  }
}
