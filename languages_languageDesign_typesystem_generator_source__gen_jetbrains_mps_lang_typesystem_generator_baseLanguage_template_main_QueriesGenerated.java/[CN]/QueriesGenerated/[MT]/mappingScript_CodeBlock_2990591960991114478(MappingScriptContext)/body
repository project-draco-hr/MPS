{
  List<SNode> nodesToProcess=new ArrayList<SNode>();
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.MessageStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.TypeOfExpression")));
  for (  SNode node : nodesToProcess) {
    SModel originalModel=_context.getOriginalInputModel();
    String modelId=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix") ? jetbrains.mps.util.SNodeOperations.getModelLongName(originalModel) : originalModel.getReference().toString());
    String nodeId=_context.getOriginalCopiedInputNode(node).getNodeId().toString();
    SNode annotation=AttributeOperations.createAndSetAttrbiute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.typesystem.structure.OriginalNodeId"),"jetbrains.mps.lang.typesystem.structure.OriginalNodeId");
    SPropertyOperations.set(annotation,MetaAdapterFactory.getProperty(new UUID(8817443762339858024l,-6091446231697526094l),2990591960991114251l,2990591960991114264l,"nodeId"),nodeId);
    SPropertyOperations.set(annotation,MetaAdapterFactory.getProperty(new UUID(8817443762339858024l,-6091446231697526094l),2990591960991114251l,2990591960991114295l,"modelId"),modelId);
  }
}
