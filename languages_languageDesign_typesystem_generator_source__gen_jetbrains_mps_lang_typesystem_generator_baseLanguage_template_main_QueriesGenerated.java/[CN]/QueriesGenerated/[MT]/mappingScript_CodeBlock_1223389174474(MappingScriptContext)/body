{
  if (Language.getModelAspect(_context.getOriginalInputModel()) != LanguageAspect.TYPESYSTEM) {
    return;
  }
  final SNode csInferenceMethod=SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a6a274(),"classifier",false);
  final SNode csCheckingMethod=SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a7a274(),"classifier",false);
  for (  SNode methodCall : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.IMethodCall")) {
    SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getTargets(baseMethodDeclaration,"annotation",true);
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,"annotation",false);
      if (annotation == csInferenceMethod || annotation == csCheckingMethod) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)).insertElement(0,_quotation_createNode_x583g4_a0a0a4a8a274());
    }
  }
  for (  SNode baseMethodDeclaration : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getTargets(baseMethodDeclaration,"annotation",true);
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,"annotation",false);
      if (annotation == csInferenceMethod || annotation == csCheckingMethod) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true)).insertElement(0,_quotation_createNode_x583g4_a0a0a3a9a274());
    }
  }
}
