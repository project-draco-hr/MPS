{
  if (!((LanguageAspect.TYPESYSTEM.is(_context.getOriginalInputModel())))) {
    return;
  }
  final SNode csInferenceMethod=SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a6a474(),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
  final SNode csCheckingMethod=SLinkOperations.getTarget(_quotation_createNode_x583g4_a0a7a474(),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
  for (  SNode methodCall : SModelOperations.nodes(_context.getModel(),MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,"jetbrains.mps.baseLanguage.structure.IMethodCall"))) {
    SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getChildren(baseMethodDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6be947aL,0x114a6beb0bdL,"annotation"));
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6b4ccabL,0x114a6b85d40L,"annotation"));
      if (annotation == csInferenceMethod || annotation == csCheckingMethod) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getChildren(methodCall,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"))).insertElement(0,_quotation_createNode_x583g4_a0a0a4a8a474());
    }
  }
  for (  SNode baseMethodDeclaration : SModelOperations.nodes(_context.getModel(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getChildren(baseMethodDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6be947aL,0x114a6beb0bdL,"annotation"));
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6b4ccabL,0x114a6b85d40L,"annotation"));
      if (annotation == csInferenceMethod || annotation == csCheckingMethod) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getChildren(baseMethodDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))).insertElement(0,_quotation_createNode_x583g4_a0a0a3a9a474());
    }
  }
}
