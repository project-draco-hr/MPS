{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-8825571760360698496l,-7431307307277756308l),3655334166513314291l,4052780437578824735l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-8825571760360698496l,-7431307307277756308l),3655334166513314291l,4052780437578824735l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1jj8js_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode scopesTest=SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l,-7431307307277756308l),511191073233700873l,"jetbrains.mps.lang.test.structure.ScopesTest"));
            ModelPlusImportedScope modelPlusImportedScope=new ModelPlusImportedScope(_context.getModel(),false,BehaviorReflection.invokeVirtual(String.class,SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(scopesTest,MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l,-7431307307277756308l),511191073233700873l,5449224527592117654l,"checkingReference")))),"virtual_getFqName_1213877404258",new Object[]{}));
            return modelPlusImportedScope;
          }
        }
      }
;
    }
  }
);
  return references;
}
