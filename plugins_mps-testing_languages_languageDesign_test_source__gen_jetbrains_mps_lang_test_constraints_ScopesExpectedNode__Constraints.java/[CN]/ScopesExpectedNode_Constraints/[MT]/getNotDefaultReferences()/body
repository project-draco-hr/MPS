{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("ref",new BaseReferenceConstraintsDescriptor("ref",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1jj8js_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode scopesTest=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.lang.test.structure.ScopesTest");
            ModelPlusImportedScope modelPlusImportedScope=new ModelPlusImportedScope(_context.getModel(),false,operationContext.getScope(),BehaviorReflection.invokeVirtual(String.class,SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(scopesTest,"checkingReference",false)),"virtual_getFqName_1213877404258",new Object[]{}));
            return modelPlusImportedScope;
          }
        }
      }
;
    }
  }
);
  return references;
}
