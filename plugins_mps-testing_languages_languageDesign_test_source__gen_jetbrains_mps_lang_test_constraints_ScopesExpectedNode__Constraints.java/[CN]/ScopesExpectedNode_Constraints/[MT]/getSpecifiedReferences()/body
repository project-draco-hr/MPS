{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x32ba5b0ec25fe9f3L,0x383e5e55de89bc1fL,"ref"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x32ba5b0ec25fe9f3L,0x383e5e55de89bc1fL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1jj8js_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            if (!(SNodeOperations.isInstanceOf(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x7181d929c720809L,"jetbrains.mps.lang.test.structure.ScopesTest")))) {
              return null;
            }
            SNode scopesTest=SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x7181d929c720809L,"jetbrains.mps.lang.test.structure.ScopesTest"));
            ModelPlusImportedScope modelPlusImportedScope=new ModelPlusImportedScope(_context.getModel(),false,SNodeOperations.getConcept(SLinkOperations.getTarget(scopesTest,MetaAdapterFactory.getReferenceLink(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x7181d929c720809L,0x4b9f88d62c795596L,"checkingReference"))));
            return modelPlusImportedScope;
          }
        }
      }
;
    }
  }
);
  return references;
}
