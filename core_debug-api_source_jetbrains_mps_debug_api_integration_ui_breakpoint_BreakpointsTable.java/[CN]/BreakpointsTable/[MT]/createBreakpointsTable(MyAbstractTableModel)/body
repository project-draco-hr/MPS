{
  myBreakpointsTable.setModel(model);
  myBreakpointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myBreakpointsTable.setShowHorizontalLines(false);
  myBreakpointsTable.getColumnModel().getColumn(0).setCellEditor(new AbstractTableCellEditor(){
    JPanelWithCheckbox myPanelWithCheckBox;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      MyAbstractTableModel model=(MyAbstractTableModel)table.getModel();
      if (value != null) {
        IBreakpoint bp=model.getBreakpointAt(row);
        myPanelWithCheckBox=new JPanelWithCheckbox(bp,true);
        myPanelWithCheckBox.getCheckBox().addItemListener(new ItemListener(){
          @Override public void itemStateChanged(          ItemEvent e){
            if (stopCellEditing()) {
              fireEditingStopped();
            }
          }
        }
);
        return myPanelWithCheckBox;
      }
      return new JLabel();
    }
    @Override public Object getCellEditorValue(){
      return myPanelWithCheckBox.getCheckBox().isSelected();
    }
  }
);
  myBreakpointsTable.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      MyAbstractTableModel model=(MyAbstractTableModel)table.getModel();
      if (value != null) {
        IBreakpoint bp=model.getBreakpointAt(row);
        return new JPanelWithCheckbox(bp,isSelected);
      }
      return new JLabel();
    }
  }
);
}
