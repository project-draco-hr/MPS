{
  this.addNodeById("1230052406554");
  this.addNodeById("1230052406581");
{
    SNode c_ref=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
    SLinkOperations.setTarget(c_ref,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,1068581517664l,"variableDeclaration"),SNodeOperations.cast(this.getNodeById("1230052406612"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
    ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406572"),"jetbrains.mps.baseLanguage.structure.ReturnStatement")));
    ListSequence.fromList(params.getParameters()).getElement(0).setSelected(false);
    MethodParameter p2=ListSequence.fromList(params.getParameters()).getElement(1);
    MethodParameter p1=ListSequence.fromList(params.getParameters()).getElement(2);
    ListSequence.fromList(params.getParameters()).setElement(1,p1);
    ListSequence.fromList(params.getParameters()).setElement(2,p2);
    p1.setName("p1");
    p2.setName("p2");
    params.setName("foo");
    ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
    ref.doRefactor();
{
      List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406555"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
      List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406582"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
      Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
    }
  }
}
