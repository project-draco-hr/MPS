{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a,fqName)) {
case 11:
    return new DateFormatsTable_BehaviorDescriptor();
case 10:
  return new DateFormat_BehaviorDescriptor();
case 37:
return new LiteralFormatToken_BehaviorDescriptor();
case 33:
return null;
case 31:
return new FormatExpression_BehaviorDescriptor();
case 3:
return new ConditionalFormatToken_BehaviorDescriptor();
case 58:
return new ReferenceFormatToken_BehaviorDescriptor();
case 70:
return new TokenConditionalPair_BehaviorDescriptor();
case 43:
return new NowExpression_BehaviorDescriptor();
case 68:
return new TokenCondition_BehaviorDescriptor();
case 69:
return new TokenCondition_datetimeToFormat_BehaviorDescriptor();
case 20:
return new DateTimeType_BehaviorDescriptor();
case 72:
return null;
case 12:
return new DateTimeCompareOperation_BehaviorDescriptor();
case 59:
return new RoundDateTimeOperation_BehaviorDescriptor();
case 29:
return new FloorDateTimeOperation_BehaviorDescriptor();
case 2:
return new CeilingDateTimeOperation_BehaviorDescriptor();
case 21:
return new DateTimeWithPropertyOperation_BehaviorDescriptor();
case 57:
return new PeriodType_BehaviorDescriptor();
case 47:
return new PeriodConstant_BehaviorDescriptor();
case 28:
return new FixedLocaleFormatToken_BehaviorDescriptor();
case 18:
return new DateTimePropertyFormatToken_BehaviorDescriptor();
case 36:
return new InlineFormatExpression_BehaviorDescriptor();
case 15:
return new DateTimeOffsetFormatToken_BehaviorDescriptor();
case 27:
return new DurationTypeReference_BehaviorDescriptor();
case 13:
return new DateTimeMinusOperation_BehaviorDescriptor();
case 0:
return new AbsDateTimeMinusOperation_BehaviorDescriptor();
case 60:
return new ScheduleLiteral_BehaviorDescriptor();
case 17:
return new DateTimePlusPeriodOperation_BehaviorDescriptor();
case 14:
return new DateTimeMinusPeriodOperation_BehaviorDescriptor();
case 5:
return new ConvertToDateTimeOperation_BehaviorDescriptor();
case 16:
return null;
case 42:
return new NotNullOperation_BehaviorDescriptor();
case 44:
return new NullOperation_BehaviorDescriptor();
case 7:
return new ConvertToJavaCalendarOperation_BehaviorDescriptor();
case 8:
return new ConvertToJavaDateOperation_BehaviorDescriptor();
case 9:
return new ConvertToJodaDateTimeOperation_BehaviorDescriptor();
case 19:
return new DateTimePropetyReferenceOperation_BehaviorDescriptor();
case 41:
return new NeverExpression_BehaviorDescriptor();
case 38:
return null;
case 40:
return new MinDateTimeOperation_BehaviorDescriptor();
case 39:
return new MaxDateTimeOperation_BehaviorDescriptor();
case 24:
return new DateTimeZoneType_BehaviorDescriptor();
case 62:
return null;
case 25:
return new DefaultTimeZoneConstant_BehaviorDescriptor();
case 71:
return new UTCTimeZoneConstant_BehaviorDescriptor();
case 23:
return new DateTimeZoneCreator_BehaviorDescriptor();
case 4:
return new ConstantTimeZoneRef_BehaviorDescriptor();
case 63:
return new TimeZoneFromString_BehaviorDescriptor();
case 52:
return new PeriodInPropertyOperation_BehaviorDescriptor();
case 73:
return new WithPropertyCompareExpression_BehaviorDescriptor();
case 46:
return new ParseExpression_BehaviorDescriptor();
case 64:
return new TimeZoneIDExpression_BehaviorDescriptor();
case 67:
return new TimeZoneOffsetExpression_BehaviorDescriptor();
case 22:
return new DateTimeWithTZType_BehaviorDescriptor();
case 34:
return new InTimezoneExpression_BehaviorDescriptor();
case 45:
return new ParseDateTimeExpression_BehaviorDescriptor();
case 30:
return new FormatDateTimeExpression_BehaviorDescriptor();
case 35:
return new InlineFormatDateTimeExpression_BehaviorDescriptor();
case 26:
return new DurationType_BehaviorDescriptor();
case 6:
return new ConvertToDurationOperation_BehaviorDescriptor();
case 51:
return new PeriodInPropertyExpression_BehaviorDescriptor();
case 61:
return new TimeConstant_BehaviorDescriptor();
case 32:
return new FormatPeriodExpression_BehaviorDescriptor();
case 48:
return new PeriodFormat_BehaviorDescriptor();
case 49:
return null;
case 53:
return new PeriodLiteralFormatToken_BehaviorDescriptor();
case 50:
return new PeriodFormatsTable_BehaviorDescriptor();
case 54:
return new PeriodPropertyFormatToken_BehaviorDescriptor();
case 55:
return new PeriodReferenceFormatToken_BehaviorDescriptor();
case 56:
return new PeriodSeparatorFormatToken_BehaviorDescriptor();
case 65:
return new TimeZoneIdOperation_BehaviorDescriptor();
case 66:
return new TimeZoneNameOperation_BehaviorDescriptor();
case 1:
return new AllTimeZonesConstant_BehaviorDescriptor();
default :
return null;
}
}
