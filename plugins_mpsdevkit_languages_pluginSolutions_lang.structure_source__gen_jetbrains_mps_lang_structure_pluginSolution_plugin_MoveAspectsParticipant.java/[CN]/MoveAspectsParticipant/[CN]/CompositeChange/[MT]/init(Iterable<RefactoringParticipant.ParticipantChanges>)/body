{
  myChildParticipantStates=createChildParticipantStates();
  Sequence.fromIterable(myChildParticipantStates).visitAll(new IVisitor<RefactoringParticipant.ParticipantChanges>(){
    public void visit(    final RefactoringParticipant.ParticipantChanges it){
      if (Sequence.fromIterable(parents).any(new IWhereFilter<RefactoringParticipant.ParticipantChanges>(){
        public boolean accept(        RefactoringParticipant.ParticipantChanges parent){
          return eq_k053lg_a0a0a0a0a0a0a0a0a0a1a1f_0(parent.getParticipant(),it.getParticipant()) && eq_k053lg_a0a0a0a0a0a0a0a0a0a1a1f(parent.getInitialState(),it.getInitialState());
        }
      }
)) {
        throw new IllegalStateException("infinite recursion detected");
      }
 else {
        final Iterable<RefactoringParticipant.ParticipantChanges> appendedParents=Sequence.fromIterable(parents).concat(Sequence.fromIterable(Sequence.<RefactoringParticipant.ParticipantChanges>singleton(it)));
        Sequence.fromIterable(it.getChanges()).ofType(MoveAspectsParticipant.CompositeChange.class).visitAll(new IVisitor<MoveAspectsParticipant.CompositeChange>(){
          public void visit(          MoveAspectsParticipant.CompositeChange it){
            it.init(appendedParents);
          }
        }
);
      }
    }
  }
);
}
