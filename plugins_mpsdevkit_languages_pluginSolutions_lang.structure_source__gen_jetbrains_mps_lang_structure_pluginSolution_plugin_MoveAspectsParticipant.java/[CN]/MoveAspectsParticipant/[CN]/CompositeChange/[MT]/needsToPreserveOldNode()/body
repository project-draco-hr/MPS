{
  return Sequence.fromIterable(myChildParticipantStates).translate(new ITranslator2<RefactoringParticipant.ParticipantChanges,RefactoringParticipant.Change<Object,Object>>(){
    public Iterable<RefactoringParticipant.Change<Object,Object>> translate(    RefactoringParticipant.ParticipantChanges it){
      return it.getChanges();
    }
  }
).any(new IWhereFilter<RefactoringParticipant.Change<Object,Object>>(){
    public boolean accept(    RefactoringParticipant.Change<Object,Object> it){
      return it.needsToPreserveOldNode();
    }
  }
);
}
