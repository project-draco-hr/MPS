{
  if (!(((SNodeOperations.as(initialState.resolve(repository),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) != null) && SNodeOperations.getModel(SNodeOperations.cast(initialState.resolve(repository),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).getModule() instanceof Language))) {
    return Sequence.fromIterable(Collections.<RefactoringParticipant.Change<SNodeReference,SNodeReference>>emptyList());
  }
 else {
    SNode sourceConcept=SNodeOperations.cast(initialState.resolve(repository),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
    Language sourceLanguage=((Language)SNodeOperations.getModel(sourceConcept).getModule());
    Map<LanguageAspect,List<SNode>> aspectsMap=MoveConceptUtil.getAspectNodes(sourceLanguage,Sequence.<SNode>singleton(sourceConcept));
    return MapSequence.fromMap(aspectsMap).translate(new ITranslator2<IMapping<LanguageAspect,List<SNode>>,RefactoringParticipant.Change<SNodeReference,SNodeReference>>(){
      public Iterable<RefactoringParticipant.Change<SNodeReference,SNodeReference>> translate(      final IMapping<LanguageAspect,List<SNode>> mapping){
        return ListSequence.fromList(mapping.value()).select(new ISelector<SNode,RefactoringParticipant.Change<SNodeReference,SNodeReference>>(){
          public RefactoringParticipant.Change<SNodeReference,SNodeReference> select(          final SNode aspect){
            RefactoringParticipant.Change<SNodeReference,SNodeReference> change=new MoveAspectsParticipant.CompositeChange<SNodeReference,SNodeReference>(){
              private Iterable<MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?>> myChildParticipantStates;
              protected Iterable<RefactoringParticipant.ParticipantChanges> createChildParticipantStates(){
                myChildParticipantStates=Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?,?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects()).select(new ISelector<MoveNodeRefactoringParticipant<?,?>,MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?>>(){
                  public MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?> select(                  MoveNodeRefactoringParticipant<?,?> participant){
                    return MoveNodeRefactoringParticipant.MoveNodeParticipantState.create(participant,aspect,repository,searchScope);
                  }
                }
);
                return Sequence.fromIterable(myChildParticipantStates).select(new ISelector<MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?>,RefactoringParticipant.ParticipantChanges>(){
                  public RefactoringParticipant.ParticipantChanges select(                  MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?> it){
                    return ((RefactoringParticipant.ParticipantChanges)it);
                  }
                }
);
              }
              protected SearchResults getOwnResults(){
                SearchResults results=new SearchResults();
                results.add(new SearchResult<SNode>(aspect,"concept aspect"));
                return results;
              }
              public void confirm(              SNodeReference finalState,              final SRepository repository,              final RefactoringSession refactoringSession){
                SNode targetConcept=SNodeOperations.cast(finalState.resolve(repository),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
                Language targetLanguage=((Language)SNodeOperations.getModel(targetConcept).getModule());
                NodeLocation.NodeLocationRootWithAspectModelCreation newLocation=new NodeLocation.NodeLocationRootWithAspectModelCreation(targetLanguage,mapping.key());
                Map<SNode,SNode> copyMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
                final List<SNode> copied=CopyUtil.copyAndPreserveId(ListSequence.fromListAndArray(new ArrayList<SNode>(),aspect),copyMap);
                if (!(needsToPreserveOldNode())) {
                  SNodeOperations.detachNode(aspect);
                }
                newLocation.insertNode(repository,ListSequence.fromList(copied).first());
                Sequence.fromIterable(myChildParticipantStates).visitAll(new IVisitor<MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?>>(){
                  public void visit(                  MoveNodeRefactoringParticipant.MoveNodeParticipantState<?,?> pis){
                    pis.confirm(ListSequence.fromList(copied).first(),repository,refactoringSession);
                  }
                }
);
              }
            }
;
            return change;
          }
        }
);
      }
    }
);
  }
}
