{
{
    InferenceRule_Runtime inferenceRule=new typeof_ClosureControlStatement_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ClosureLiteral_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_CompactInvokeFunctionExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InvokeExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InvokeFunctionExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InvokeFunctionOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ReturnStatement_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_YieldAllStatement_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    NonTypesystemRule_Runtime nonTypesystemRule=new check_ClosureLiteralDataFlow_NonTypesystemRule();
    this.myNonTypesystemRules.add(nonTypesystemRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ClassifierType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_FunctionType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new wildcardtype_comparable_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new FunctionType_subtypeOf_ClassifierType_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new FunctionType_subtypeOf_FunctionType_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }
      public SNode getSourceNode(      SNode targetNode){
        return SNodeOperations.getParent(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
}
