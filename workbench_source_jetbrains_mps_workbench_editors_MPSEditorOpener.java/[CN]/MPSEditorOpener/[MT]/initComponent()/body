{
  myEditorOpenHandlers.add(new MPSEditorOpenHandler(){
    public SNode getBaseNode(    IOperationContext context,    SNode node){
      if (node == null)       return null;
      AbstractConceptDeclaration baseNode=null;
      if (node.getAdapter() instanceof ConceptEditorDeclaration) {
        baseNode=((ConceptEditorDeclaration)node.getAdapter()).getConceptDeclaration();
      }
 else       if (node.getAdapter() instanceof ConceptBehavior) {
        baseNode=((ConceptBehavior)node.getAdapter()).getConcept();
      }
 else       if (node.getAdapter() instanceof DataFlowBuilderDeclaration) {
        baseNode=((DataFlowBuilderDeclaration)node.getAdapter()).getConceptDeclaration();
      }
      if (baseNode != null && SModelUtil_new.getDeclaringLanguage(baseNode,context.getScope()) != null && (Language.getModelAspect(node.getModel().getModelDescriptor()) != null || node.getModel().getStereotype().equals(SModelStereotype.TEMPLATES))) {
        return baseNode.getNode();
      }
      return null;
    }
    public boolean canOpen(    IOperationContext context,    SNode node){
      INodeAdapter concept=BaseAdapter.fromNode(node);
      return concept instanceof AbstractConceptDeclaration && SModelUtil_new.getDeclaringLanguage((AbstractConceptDeclaration)concept,context.getScope()) != null && Language.getModelAspect(node.getModel().getModelDescriptor()) != null;
    }
    public IEditor open(    IOperationContext context,    SNode node){
      return new ConceptDeclarationEditor(context,node);
    }
  }
);
}
