{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AnonymousCellAnnotation_Editor();
case 1:
  return new AssertMatch_Editor();
case 2:
return new BootstrapActionReference_Editor();
case 3:
return new CheckDataFlowOperation_Editor();
case 4:
return new CheckNodeDataflow_Editor();
case 5:
return new CheckNodeForErrors_Editor();
case 6:
return new EditorComponentExpression_Editor();
case 7:
return new EditorExpression_Editor();
case 8:
return new EditorTestCase_Editor();
case 9:
return new ExpressionContainer_Editor();
case 10:
return new InvokeActionStatement_Editor();
case 11:
return new InvokeIntentionStatement_Editor();
case 12:
return new MPSActionReference_Editor();
case 13:
return new MockAnnotation_Editor();
case 14:
return new ModelExpression_Editor();
case 15:
return new NodeErrorPropety_Editor();
case 16:
return new NodeOperationsContainer_Editor();
case 17:
return new NodePropertiesContainer_Editor();
case 18:
return new NodeReachable_Editor();
case 19:
return new NodeTypeProperty_Editor();
case 20:
return new NodeTypeSetProperty_Editor();
case 21:
return new NodeUnreachable_Editor();
case 22:
return new NodeWarningProperty_Editor();
case 23:
return new NodesTestCase_Editor();
case 24:
return new PressKeyStatement_Editor();
case 25:
return new ProjectExpression_Editor();
case 26:
return new ScopesExpectedNode_Editor();
case 27:
return new ScopesTest_Editor();
case 28:
return new SimpleNodeTest_Editor();
case 29:
return new SwitchToInspector_Editor();
case 30:
return new TestInfo_Editor();
case 31:
return new TestNode_Editor();
case 32:
return new TestNodeAnnotation_Editor();
case 33:
return new TestNodeReference_Editor();
case 34:
return new TypeKeyStatement_Editor();
case 35:
return new TypesCheckOperation_Editor();
case 36:
return new VariableInialized_Editor();
case 37:
return new VariableLive_Editor();
default :
}
return null;
}
