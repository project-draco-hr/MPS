{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AnonymousCellAnnotation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AssertMatch_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new BootstrapActionReference_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckDataFlowOperation_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckNodeDataflow_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckNodeForErrorMessagesOperation_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckNodeForErrors_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new DragMouseStatement_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorComponentExpression_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorExpression_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorTestCase_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExpressionContainer_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new IRuleReference_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new InvokeActionStatement_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new InvokeIntentionStatement_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new LogEvent_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new MPSActionReference_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new MockAnnotation_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new MockScopeProvider_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModelExpression_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new NamedNodeReference_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeConstraintsErrorCheckOperation_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeConstraintsWarningCheckOperation_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeErrorCheckOperation_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeInfoCheckOperation_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeOperationsContainer_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodePropertiesContainer_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeReachable_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeTypeCheckOperation_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeTypeSetCheckOperation_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeTypeSystemErrorCheckOperation_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeTypeSystemWarningCheckOperation_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeUnknownErrorCheckOperation_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeUnknownWarningCheckOperation_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeUnreachable_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeWarningCheckOperation_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodesTestCase_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new PressKeyStatement_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new PressMouseStatement_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new ProjectExpression_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new ScopeEntry_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new ScopesExpectedNode_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new ScopesTest_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleNodeTest_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new SwitchToInspector_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new TestInfo_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new TestNode_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new TestNodeAnnotation_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new TestNodeReference_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeKeyStatement_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new UntypedExpression_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableAlive_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableInitialized_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
