{
  if ("jetbrains.mps.baseLanguage.regexp.structure.Regexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.Regexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new StringLiteralRegexp_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.OrRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.OrRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new RegexpDeclaration_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PredefinedSymbolClassDeclaration_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.DotRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.DotRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatchVariableReference_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.Regexps".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.Regexps"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatchVariableReferenceRegexp_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.SplitOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.SplitOperation"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatchRegexpOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ReplaceWithRegexpOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"));
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ReplaceRegexpOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new LiteralReplacement_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatchVariableReferenceReplacement_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.regexp.structure.Replacement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.regexp.structure.Replacement"));
  }
  return null;
}
