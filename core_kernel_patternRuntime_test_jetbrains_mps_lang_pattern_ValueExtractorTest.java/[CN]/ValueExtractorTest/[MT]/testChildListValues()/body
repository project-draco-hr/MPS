{
  final SNode patternNode=newNode(ourConcept1);
  patternNode.addChild(ourC1Child1,newNode(ourConcept1));
  patternNode.addChild(ourC1Child2,newNode(ourConcept2));
  ValueContainer vc=new ValueContainer();
  final NodeMatcher top=new NodeMatcher(vc);
  top.child(ourC1Child1).capture("firstList").done().child(ourC1Child2).capture("secondList");
  final SNode actualNode=newNode(ourConcept1);
  actualNode.addChild(ourC1Child1,newNode(ourConcept1));
  actualNode.addChild(ourC1Child2,newNode(ourConcept2));
  actualNode.addChild(ourC1Child1,newNode(ourConcept1));
  actualNode.addChild(ourC1Child2,newNode(ourConcept2));
  actualNode.addChild(ourC1Child1,newNode(ourConcept1));
  final boolean matched=top.match(patternNode,actualNode);
  myErrors.checkThat("Shall match",matched,Matchers.equalTo(true));
  final List<SNode> firstList=vc.getList("firstList");
  final List<SNode> secondList=vc.getList("secondList");
  myErrors.checkThat(firstList,Matchers.notNullValue());
  myErrors.checkThat(secondList,Matchers.notNullValue());
  if (firstList != null) {
    myErrors.checkThat(firstList.size(),Matchers.equalTo(3));
  }
  if (secondList != null) {
    myErrors.checkThat(secondList.size(),Matchers.equalTo(2));
  }
}
