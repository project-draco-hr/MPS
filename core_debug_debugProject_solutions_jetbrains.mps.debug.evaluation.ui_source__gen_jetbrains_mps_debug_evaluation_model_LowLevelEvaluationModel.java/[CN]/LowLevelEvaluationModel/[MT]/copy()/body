{
  final Wrappers._T<LowLevelEvaluationModel> evaluationModel=new Wrappers._T<LowLevelEvaluationModel>();
  final SNode evaluator=myEvaluator;
  ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<LowLevelEvaluationModel>(){
    public LowLevelEvaluationModel invoke(){
      return evaluationModel.value=new LowLevelEvaluationModel(myDebugSession.getProject(),myDebugSession,myAuxModule){
        @Override protected SNode createEvaluator(        SModelDescriptor model){
          SNode newEvaluator=CopyUtil.copyAndPreserveId(evaluator,true);
          model.getSModel().addRoot(newEvaluator);
          SModelOperations.validateLanguagesAndImports(model.getSModel(),false,true);
          return newEvaluator;
        }
      }
;
    }
  }
));
  return evaluationModel.value;
}
