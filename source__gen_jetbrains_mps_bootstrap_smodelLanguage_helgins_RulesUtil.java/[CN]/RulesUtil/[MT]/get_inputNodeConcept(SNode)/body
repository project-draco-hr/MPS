{
  SNode leftExpr=RulesUtil.leftExpression(op);
  if (SNodeOperations.isInstanceOf(leftExpr,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
    SNode leftOp=SLinkOperations.getTarget(leftExpr,"nodeOperation",true);
    if (SNodeOperations.isInstanceOf(leftOp,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
      return SLinkOperations.getTarget(SLinkOperations.getTarget(leftOp,"link",false),"target",false);
    }
    if (SNodeOperations.isInstanceOf(leftOp,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
      return SLinkOperations.getTarget(SLinkOperations.getTarget(leftOp,"link",false),"target",false);
    }
  }
  SNode leftType=TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpr);
  if (SNodeOperations.isInstanceOf(leftType,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType")) {
    return SLinkOperations.getTarget(leftType,"concept",false);
  }
  if (SNodeOperations.isInstanceOf(leftType,"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType")) {
    return SConceptOperations.findConceptDeclaration("jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
  }
  return null;
}
