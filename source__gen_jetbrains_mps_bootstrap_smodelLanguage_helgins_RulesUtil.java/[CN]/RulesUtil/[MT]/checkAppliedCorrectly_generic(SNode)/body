{
  if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(op),"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation")) {
    return;
  }
  final SNode leftExpression=RulesUtil.leftExpression(op);
  final SNode LeftType_typevar_1186058295229=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229),TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpression,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186058318393"),leftExpression,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186058309840");
  TypeChecker.getInstance().getRuntimeSupport().whenConcrete(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229),new Runnable(){
    public void run(){
      String applicableErrorString="operation is not applicable to expression";
      boolean isGood=false;
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_model")) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229),new QuotationClass_40().createNode(),false,false)) {
          isGood=true;
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept")) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229),new QuotationClass_41().createNode(),false,false)) {
          isGood=true;
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_node")) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType_typevar_1186058295229),new QuotationClass_42().createNode(),false,false)) {
          isGood=true;
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_link")) {
        SNode leftOp=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp),"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
          isGood=true;
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_linkList")) {
        SNode leftOp=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp),"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
          isGood=true;
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_simple_property")) {
        SNode leftOp=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp),"jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
          SNode propertyDecl=SLinkOperations.getTarget(leftOp,"property",false);
          if (DataTypeUtil.isSimple(((DataTypeDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(propertyDecl,"dataType",false))))) {
            isGood=true;
          }
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_enum_property")) {
        SNode leftOp=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp),"jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
          SNode propertyDecl=SLinkOperations.getTarget(leftOp,"property",false);
          if (DataTypeUtil.isEnum(((DataTypeDeclaration)SNodeOperations.getAdapter(SLinkOperations.getTarget(propertyDecl,"dataType",false))))) {
            isGood=true;
          }
        }
      }
      if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept_property")) {
        SNode leftOp=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOp),"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess")) {
          isGood=true;
        }
      }
      if (!(isGood)) {
        TypeChecker.getInstance().reportTypeError(leftExpression,applicableErrorString,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186067417054");
      }
    }
  }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186065634833");
}
