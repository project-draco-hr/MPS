{
  List<String> applicables=new ArrayList<String>();
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_model")) {
    SNode leftType=RulesUtil.typeOf_leftExpression(op);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new QuotationClass_48().createNode())) {
      return true;
    }
    applicables.add("model");
  }
  String applicableTo="";
  Iterator<String> iter=applicables.iterator();
  while (iter.hasNext()) {
    applicableTo=applicableTo + iter.next();
    if (iter.hasNext()) {
      applicableTo=applicableTo + ",";
    }
  }
  TypeChecker.getInstance().reportTypeError(op,"operation is only applicable to " + applicableTo);
  return false;
}
