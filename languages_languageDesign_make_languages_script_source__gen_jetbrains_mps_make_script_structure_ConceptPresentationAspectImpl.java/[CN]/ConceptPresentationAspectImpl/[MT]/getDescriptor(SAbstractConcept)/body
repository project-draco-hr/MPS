{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0ab.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AdvanceWorkStatement;
      }
    break;
case 1:
  if (true) {
    return props_AllWorkLeftExpression;
  }
break;
case 2:
if (true) {
return props_BeginWorkStatement;
}
break;
case 3:
if (true) {
return props_ConceptFunctionParameter_progressMonitor;
}
break;
case 4:
if (true) {
return props_ConfigDefinition;
}
break;
case 5:
if (true) {
return props_Expected;
}
break;
case 6:
if (true) {
return props_ExpectedInput;
}
break;
case 7:
if (true) {
return props_ExpectedOption;
}
break;
case 8:
if (true) {
return props_FinishWorkStatement;
}
break;
case 9:
if (true) {
return props_IExpected;
}
break;
case 10:
if (true) {
return props_InputResourcesParameter;
}
break;
case 11:
if (true) {
return props_JobDeclaration;
}
break;
case 12:
if (true) {
return props_JobDefinition;
}
break;
case 13:
if (true) {
return props_Option;
}
break;
case 14:
if (true) {
return props_OptionExpression;
}
break;
case 15:
if (true) {
return props_OptionType;
}
break;
case 16:
if (true) {
return props_OutputResources;
}
break;
case 17:
if (true) {
return props_PropertiesAccessorParameter;
}
break;
case 18:
if (true) {
return props_QueryDefinition;
}
break;
case 19:
if (true) {
return props_QueryParameterDeclaration;
}
break;
case 20:
if (true) {
return props_RelayQueryExpression;
}
break;
case 21:
if (true) {
return props_ReportFeedbackStatement;
}
break;
case 22:
if (true) {
return props_ResourceType;
}
break;
case 23:
if (true) {
return props_ResultStatement;
}
break;
case 24:
if (true) {
return props_Text;
}
break;
default :
}
}
throw new IllegalStateException();
}
