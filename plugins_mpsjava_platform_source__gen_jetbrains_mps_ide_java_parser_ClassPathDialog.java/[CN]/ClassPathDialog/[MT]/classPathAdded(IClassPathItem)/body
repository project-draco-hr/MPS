{
  if (classPath == null) {
    return;
  }
  ListSequence.fromList(myAdditionalClassPath).addElement(classPath);
  Set<String> resolvedFqNames=SetSequence.fromSet(new LinkedHashSet<String>());
  for (  String nextUnresolved : ListSequence.fromList(myUnresolvedClassFqNames)) {
    if (classPath.getClass(nextUnresolved) != null || classPath.getAvailableClasses(nextUnresolved).iterator().hasNext() || classPath.getSubpackages(nextUnresolved).iterator().hasNext()) {
      SetSequence.fromSet(resolvedFqNames).addElement(nextUnresolved);
    }
  }
  if (SetSequence.fromSet(resolvedFqNames).isNotEmpty()) {
    Set<String> fqNames=MapSequence.fromMap(myClassPathToClasses).get(classPath);
    if (fqNames == null) {
      fqNames=SetSequence.fromSet(new LinkedHashSet<String>());
      MapSequence.fromMap(myClassPathToClasses).put(classPath,fqNames);
    }
    SetSequence.fromSet(fqNames).addSequence(SetSequence.fromSet(resolvedFqNames));
    ListSequence.fromList(myUnresolvedClassFqNames).removeSequence(SetSequence.fromSet(resolvedFqNames));
  }
  updateLists();
}
