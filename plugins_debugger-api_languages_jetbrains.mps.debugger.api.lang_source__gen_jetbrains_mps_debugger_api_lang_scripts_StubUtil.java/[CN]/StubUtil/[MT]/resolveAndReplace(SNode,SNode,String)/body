{
  SReference reference=node.getReference(role);
  SNode provider=ListSequence.fromList(SNodeOperations.getAncestors(node,"jetbrains.mps.lang.core.structure.ScopeProvider",false)).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return BehaviorReflection.invokeVirtual(Scope.class,SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.ScopeProvider"),"virtual_getScope_3734116213129936182",new Object[]{concept,node}) != null;
    }
  }
);
  Scope scope=BehaviorReflection.invokeVirtual(Scope.class,provider,"virtual_getScope_3734116213129936182",new Object[]{concept,node});
  SNode candidate=scope.resolve(node,SLinkOperations.getResolveInfo(reference));
  if (candidate != null) {
    SModelReference oldModelReference=reference.getTargetSModelReference();
    ((jetbrains.mps.smodel.SModel)SNodeOperations.getModel(node)).deleteModelImport(oldModelReference);
    SNodeAccessUtil.setReferenceTarget(node,role,candidate);
    StubRefUtil.addRequiredImports(SNodeOperations.getModel(node),candidate);
  }
 else {
    findAndReplace(node,role,new _FunctionTypes._return_P1_E0<String,SNode>(){
      public String invoke(      SNode candidate){
        return SPropertyOperations.getString(SNodeOperations.cast(candidate,"jetbrains.mps.lang.core.structure.IResolveInfo"),"resolveInfo");
      }
    }
,BehaviorReflection.invokeVirtual(String.class,concept,"virtual_getFqName_1213877404258",new Object[]{}));
  }
}
