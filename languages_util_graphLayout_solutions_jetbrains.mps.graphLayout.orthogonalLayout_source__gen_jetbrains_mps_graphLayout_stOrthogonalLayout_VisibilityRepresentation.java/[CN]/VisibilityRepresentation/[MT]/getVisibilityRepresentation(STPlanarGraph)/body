{
  Graph graph=stPlanarGraph.getGraph();
  EmbeddedGraph embeddedGraph=stPlanarGraph.getEmbeddedGraph();
  DualGraph dualGraph=stPlanarGraph.getModifiedDualGraph();
  Face outerFace=embeddedGraph.getOuterFace();
  Node dualSource=MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(outerFace);
  Node dualTarget=dualGraph.getNode(dualGraph.getNumNodes() - 1);
  Map<Node,Integer> graphNumbering=TopologicalNumbering.number(graph);
  Map<Node,Integer> dualNumbering=TopologicalNumbering.number(dualGraph);
  Map<Object,Rectangle> rectangles=MapSequence.<Object,Rectangle>fromMap(new HashMap<Object,Rectangle>());
  Map<Face,Node> faceNodes=dualGraph.getNodesMap();
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    int y=MapSequence.<Node,Integer>fromMap(graphNumbering).get(node);
    int xLeft=MapSequence.<Node,Integer>fromMap(dualNumbering).get(MapSequence.<Face,Node>fromMap(faceNodes).get(stPlanarGraph.getLeftFace(node)));
    int xRight=MapSequence.<Node,Integer>fromMap(dualNumbering).get(MapSequence.<Face,Node>fromMap(faceNodes).get(stPlanarGraph.getRightFace(node))) - 1;
    if (stPlanarGraph.getRightFace(node) == outerFace) {
      xRight=MapSequence.<Node,Integer>fromMap(dualNumbering).get(dualTarget) - 1;
    }
    MapSequence.<Object,Rectangle>fromMap(rectangles).put(node,new Rectangle(xLeft,y,xRight - xLeft,0));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    int x=MapSequence.<Node,Integer>fromMap(dualNumbering).get(MapSequence.<Face,Node>fromMap(faceNodes).get(stPlanarGraph.getLeftFace(edge)));
    int yLeft=MapSequence.<Node,Integer>fromMap(graphNumbering).get(stPlanarGraph.getOrigNode(edge));
    int yRight=MapSequence.<Node,Integer>fromMap(graphNumbering).get(stPlanarGraph.getDestNode(edge));
    MapSequence.<Object,Rectangle>fromMap(rectangles).put(edge,new Rectangle(x,yLeft,0,yRight - yLeft));
  }
  return rectangles;
}
