{
  if (targetNodeId == null) {
    if (extResolveInfo != null) {
      int offset=extResolveInfo.indexOf('.');
      SModel.ImportElement importElement=importElementFromString(extResolveInfo,sourceNode);
      if (importElement == null)       return null;
      String localExtResolveInfo=extResolveInfo.substring(offset + 1);
      return new ExternalReference(role,sourceNode,importElement,localExtResolveInfo);
    }
    return new InternalReference(role,sourceNode,resolveInfo,targetClassResolveInfo);
  }
  int offset=targetNodeId.indexOf('.');
  SModel sourceModel=sourceNode.getModel();
  String localNodeId=targetNodeId;
  if (offset > 0) {
    SModel.ImportElement importElement=importElementFromString(targetNodeId,sourceNode);
    if (importElement == null)     return null;
    localNodeId=targetNodeId.substring(offset + 1);
    SReference resultReference=new ExternalReference(role,sourceNode,localNodeId,importElement);
    return resultReference;
  }
 else {
    SNode targetNode=sourceModel.getNodeById(localNodeId);
    if (targetNode == null && resolveInfo == null) {
      LOG.errorWithTrace("SReference.newInstance Couldn't create internal reference: \"" + role + "\" to node id:"+ localNodeId+ "\nSource node: "+ sourceNode.getDebugText());
      return null;
    }
    SReference resultReference=new InternalReference(role,sourceNode,targetNode);
    resultReference.setResolveInfo(resolveInfo);
    resultReference.setTargetClassResolveInfo(targetClassResolveInfo);
    return resultReference;
  }
}
