{
  SNode stmtNode=SNodeOperations.cast(SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.Statement",false,false),"jetbrains.mps.baseLanguage.structure.Statement");
  if (SNodeOperations.isInstanceOf(stmtNode,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
    SNode variableDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(stmtNode,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),"localVariableDeclaration",true);
    SNode eStatement=SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(variableDeclaration),"jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
    SNode assignment=SNodeFactoryOperations.setNewChild(eStatement,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    SLinkOperations.setTarget(assignment,"rValue",SLinkOperations.getTarget(variableDeclaration,"initializer",true),true);
    SNode local=SNodeFactoryOperations.setNewChild(assignment,"lValue","jetbrains.mps.baseLanguage.structure.LocalVariableReference");
    SLinkOperations.setTarget(local,"variableDeclaration",variableDeclaration,false);
    SNodeOperations.insertNextSiblingChild(stmtNode,eStatement);
    stmtNode=SNodeOperations.cast(SNodeOperations.getNextSibling(stmtNode),"jetbrains.mps.baseLanguage.structure.Statement");
  }
  SNode nodeParent=SNodeOperations.getParent(node);
  int nodeIndex=ListSequence.<SNode>fromList(SNodeOperations.getChildren(nodeParent)).indexOf(node);
  SNode nodeCopy=SNodeOperations.copyNode(node);
  SNodeOperations.replaceWithAnother(ListSequence.<SNode>fromList(SNodeOperations.getChildren(nodeParent)).getElement(nodeIndex),SLinkOperations.getTarget(nodeCopy,"ifTrue",true));
  SNode trueStmt=SNodeOperations.copyNode(stmtNode);
  SNodeOperations.replaceWithAnother(ListSequence.<SNode>fromList(SNodeOperations.getChildren(nodeParent)).getElement(nodeIndex),SLinkOperations.getTarget(nodeCopy,"ifFalse",true));
  SNode falseBlockStmt=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BlockStatement",null);
  SNodeFactoryOperations.setNewChild(falseBlockStmt,"statements","jetbrains.mps.baseLanguage.structure.StatementList");
  ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(falseBlockStmt,"statements",true),"statement",true)).insertElement(0,SNodeOperations.copyNode(stmtNode));
  SNode ifNode=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement",null);
  SLinkOperations.setTarget(ifNode,"condition",SLinkOperations.getTarget(node,"condition",true),true);
  SNodeFactoryOperations.setNewChild(ifNode,"ifTrue","jetbrains.mps.baseLanguage.structure.StatementList");
  ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ifNode,"ifTrue",true),"statement",true)).insertElement(0,trueStmt);
  SLinkOperations.setTarget(ifNode,"ifFalseStatement",falseBlockStmt,true);
  SNodeOperations.replaceWithAnother(stmtNode,ifNode);
}
