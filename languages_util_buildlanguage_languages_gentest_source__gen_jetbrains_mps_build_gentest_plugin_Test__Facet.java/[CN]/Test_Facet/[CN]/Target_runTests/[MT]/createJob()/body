{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_rwbd_a0b=null;
switch (0) {
case 0:
        monitor.currentProgress().beginWork("Testing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
      for (      IResource resource : input) {
        String fqn=((ITestResource)resource).getModule().getModuleFqName();
        monitor.currentProgress().advanceWork("Testing",1,fqn);
        ProcessBuilder pb=new ProcessBuilder(((ITestResource)resource).buildCommandLine());
        try {
          Process process=pb.start();
          UnitTestOutputReader reader=new UnitTestOutputReader(process,pa.global().properties(Target_runTests.this.getName(),Test_Facet.Target_runTests.Parameters.class).testListener());
          int exitCode=reader.start();
          if (exitCode != 0) {
            monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Process Exited With Code " + exitCode)));
          }
        }
 catch (        IOException ioe) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(ioe.getMessage())));
        }
        monitor.currentProgress().advanceWork("Testing",99,fqn);
      }
    monitor.currentProgress().finishWork("Testing");
default :
  return new IResult.SUCCESS(_output_rwbd_a0b);
}
}
}
;
}
