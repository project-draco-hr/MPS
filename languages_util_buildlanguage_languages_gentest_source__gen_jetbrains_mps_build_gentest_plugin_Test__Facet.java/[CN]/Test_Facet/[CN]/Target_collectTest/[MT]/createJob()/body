{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_rwbd_a0a=null;
      final Iterable<GResource> input=(Iterable<GResource>)(Iterable)rawInput;
switch (0) {
case 0:
        for (        final GResource gr : Sequence.fromIterable(input)) {
          final Wrappers._T<List<String>> tests=new Wrappers._T<List<String>>();
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              SModel outModel=gr.status().getOutputModel();
              tests.value=Sequence.fromIterable(new TestCollector(Sequence.<SModel>singleton(outModel)).collectTests()).toListSequence();
            }
          }
);
          if (ListSequence.fromList(tests.value).isNotEmpty()) {
            _output_rwbd_a0a=Sequence.fromIterable(_output_rwbd_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new Tester(gr.module(),tests.value))));
          }
        }
default :
      return new IResult.SUCCESS(_output_rwbd_a0a);
  }
}
}
;
}
