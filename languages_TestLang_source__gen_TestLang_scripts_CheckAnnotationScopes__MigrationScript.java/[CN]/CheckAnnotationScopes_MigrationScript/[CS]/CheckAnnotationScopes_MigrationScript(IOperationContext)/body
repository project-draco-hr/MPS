{
  super("Check annotation scopes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Testing";
    }
    public String getAdditionalInfo(){
      return "Testing";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AnnotationInstance";
    }
    public boolean isApplicableInstanceNode(    final SNode node){
      String excludingPrefix="123collection";
      String startsFrom="";
      String name=SPropertyOperations.getString(SLinkOperations.getTarget(node,"annotation",false),"name");
      if (StringUtils.isEmpty(name)) {
        return false;
      }
      if (name.startsWith(excludingPrefix)) {
        return false;
      }
      if (!(name.startsWith(startsFrom))) {
        return false;
      }
      _FunctionTypes._return_P0_E0<? extends Scope> oldScopeProvider=new _FunctionTypes._return_P0_E0<ISearchScope.Adapter>(){
        public ISearchScope.Adapter invoke(){
          return new ISearchScope.Adapter(new VisibleClassifiersScope(node,IClassifiersSearchScope.ANNOTATION,GlobalScope.getInstance()));
        }
      }
;
      _FunctionTypes._return_P0_E0<? extends Scope> newScopeProvider=new _FunctionTypes._return_P0_E0<Scope>(){
        public Scope invoke(){
          return ClassifierScopes.getAnnotationClassifiersScope(node,GlobalScope.getInstance());
        }
      }
;
      return !(Utils.checkScopes(node,Utils.getNodes("old scope",oldScopeProvider),Utils.getNodes("new scope/from ioperation",newScopeProvider),true));
    }
    public void doUpdateInstanceNode(    final SNode node){
      _FunctionTypes._return_P0_E0<? extends Scope> oldScopeProvider=new _FunctionTypes._return_P0_E0<ISearchScope.Adapter>(){
        public ISearchScope.Adapter invoke(){
          return new ISearchScope.Adapter(new VisibleClassifiersScope(node,IClassifiersSearchScope.ANNOTATION,GlobalScope.getInstance()));
        }
      }
;
      _FunctionTypes._return_P0_E0<? extends Scope> newScopeProvider=new _FunctionTypes._return_P0_E0<Scope>(){
        public Scope invoke(){
          return ClassifierScopes.getAnnotationClassifiersScope(node,GlobalScope.getInstance());
        }
      }
;
      Utils.checkScopes(node,Utils.getNodes("old scope",oldScopeProvider),Utils.getNodes("new scope/from ioperation",newScopeProvider),true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
