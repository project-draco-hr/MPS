{
  SNode marshalFunction=exportLabel.getChildren("marshal").iterator().next();
  String functionName="marshal_" + marshalFunction.getNodeId().toString();
  final SNode keeperConcept=exportLabel.getReferenceTarget("dataHolder");
  for (  SNode v : values) {
    SNode keeper=SModelUtil_new.instantiateConceptDeclaration(keeperConcept,null);
    ExportLabelContext ctx=new ExportLabelContextImpl(templateContext.getInput(),v,keeper);
    invokeExportFunction(marshalFunction.getModel(),functionName,ctx);
    SModel outputModel=v.getModel() != null ? v.getModel() : templateContext.getEnvironment().getOutputModel();
    final String modelName=SModelStereotype.withoutStereotype(outputModel.getModelName());
    SModelReference mr=PersistenceFacade.getInstance().createModelReference(null,SModelId.generate(),modelName + "@proxies");
    myVault.putValue(exportLabel,new ExportEntry(exportLabel,ctx,mr));
    final SNode exportEntry=new CrossModelUtil().newEntry(ctx,exportLabel,myExportsModel,templateContext.getEnvironment().getOutputModel());
    myExportsModel.addRootNode(exportEntry);
  }
}
