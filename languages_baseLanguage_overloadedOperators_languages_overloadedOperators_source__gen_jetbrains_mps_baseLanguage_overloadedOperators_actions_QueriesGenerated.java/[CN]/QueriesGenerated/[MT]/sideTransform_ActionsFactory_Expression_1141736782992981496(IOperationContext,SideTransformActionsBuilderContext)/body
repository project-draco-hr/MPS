{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return CustomOperatorUsage_Behavior.call_getVisibleCustomOperators_1141736782992984505(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage")),_context.getModel());
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode usage=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-248448403205894696l,-5239469005774541060l),1569627462441399919l,"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage"),null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),usage);
            SLinkOperations.setTarget(usage,MetaAdapterFactory.getReferenceLink(new UUID(-248448403205894696l,-5239469005774541060l),1569627462441399919l,1569627462441399920l,"operator"),(item));
            SLinkOperations.setTarget(usage,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,1081773367580l,"leftExpression"),_context.getSourceNode());
            return usage;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage"),null));
          }
        }
);
      }
    }
  }
  return result;
}
