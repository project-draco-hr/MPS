{
  List<SNode> result=new ArrayList<SNode>();
  SNode abstractConceptDeclaration=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",false,false),"concept",false);
  if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
    SNode cd=(SNode)abstractConceptDeclaration;
    SNode extendsNode=SLinkOperations.getTarget(cd,"extends",false);
    if (extendsNode != null) {
      ListSequence.fromList(result).addElement(extendsNode);
    }
    for (    SNode itfcRef : SLinkOperations.getTargets(cd,"implements",true)) {
      ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,"intfc",false));
    }
  }
  if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
    SNode itfc=(SNode)abstractConceptDeclaration;
    for (    SNode itfcRef : SLinkOperations.getTargets(itfc,"extends",true)) {
      ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,"intfc",false));
    }
  }
  return result;
}
