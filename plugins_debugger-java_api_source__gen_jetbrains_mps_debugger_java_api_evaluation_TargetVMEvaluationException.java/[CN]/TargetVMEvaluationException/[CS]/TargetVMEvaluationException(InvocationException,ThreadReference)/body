{
  super(e.exception().referenceType().name());
  if (threadReference == null) {
    return;
  }
  try {
    IObjectValueProxy exceptionProxy=(IObjectValueProxy)MirrorUtil.getInstance().getValueProxy(e.exception());
    IArrayValueProxy stackTrace=(IArrayValueProxy)exceptionProxy.invokeMethod("getStackTrace","()[Ljava/lang/StackTraceElement;",threadReference);
    int length=stackTrace.getLength();
    StackTraceElement[] newStackTrace=new StackTraceElement[length];
    for (int i=0; i < length; i++) {
      IObjectValueProxy stackTraceElement=(IObjectValueProxy)stackTrace.getElementAt(i);
      newStackTrace[i]=new StackTraceElement((String)stackTraceElement.getFieldValue("declaringClass").getJavaValue(),(String)stackTraceElement.getFieldValue("methodName").getJavaValue(),(String)stackTraceElement.getFieldValue("fileName").getJavaValue(),(Integer)stackTraceElement.getFieldValue("lineNumber").getJavaValue());
    }
    setStackTrace(newStackTrace);
  }
 catch (  ClassCastException exception) {
    LOG.warning("Cant create TargetVMEvaluationException for " + e,exception);
  }
catch (  EvaluationException exception) {
    LOG.warning("Cant create TargetVMEvaluationException for " + e,exception);
  }
}
