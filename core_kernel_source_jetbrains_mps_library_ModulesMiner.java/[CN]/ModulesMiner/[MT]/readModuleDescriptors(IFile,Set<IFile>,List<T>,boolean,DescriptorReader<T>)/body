{
  if (refreshFiles) {
    FileSystem.getInstance().refresh(dir);
  }
  String dirName=dir.getName();
  if (FileTypeManager.getInstance().isFileIgnored(dirName))   return;
  List<IFile> files=dir.getChildren();
  if (files == null) {
    return;
  }
  for (  IFile file : files) {
    if (hasModuleExtension(file)) {
      ModuleDescriptor moduleDescriptor=loadDescriptorOnly_internal(file,excludes);
      if (moduleDescriptor != null) {
        T descriptor=reader.read(new ModuleHandle(file,moduleDescriptor));
        if (descriptor != null) {
          result.add(descriptor);
        }
      }
    }
  }
  for (  IFile childDir : files) {
    if (FileTypeManager.getInstance().isFileIgnored(childDir.getName()))     continue;
    if (hasModuleExtension(childDir))     continue;
    if (excludes.contains(childDir))     continue;
    if (childDir.getName().endsWith(".jar")) {
      IFile moduleFile=FileSystem.getInstance().getFileByPath(childDir.getPath() + META_INF_MODULE_XML);
      IFile dirInJar=FileSystem.getInstance().getFileByPath(childDir.getPath() + "!/modules");
      if (moduleFile.exists()) {
        ModuleDescriptor moduleDescriptor=loadModuleDescriptor(moduleFile);
        if (moduleDescriptor != null) {
          T descriptor=reader.read(new ModuleHandle(moduleFile,moduleDescriptor));
          if (descriptor != null) {
            result.add(descriptor);
          }
        }
      }
 else       if (dirInJar.exists()) {
        readModuleDescriptors(dirInJar,excludes,result,refreshFiles,reader);
      }
    }
    readModuleDescriptors(childDir,excludes,result,refreshFiles,reader);
  }
}
