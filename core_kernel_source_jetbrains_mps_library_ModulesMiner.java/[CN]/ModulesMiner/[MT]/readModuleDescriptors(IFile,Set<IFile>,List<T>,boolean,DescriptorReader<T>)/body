{
  if (refreshFiles) {
    FileSystem.getInstance().refresh(file);
  }
  List<IFile> files;
  if (file.isDirectory()) {
    String dirName=file.getName();
    if (FileSystem.getInstance().isFileIgnored(dirName))     return;
    files=file.getChildren();
  }
 else {
    files=Collections.singletonList(file);
  }
  for (  IFile f : files) {
    if (!isModuleFile(f))     continue;
    ModuleDescriptor moduleDescriptor=loadDescriptorOnly_internal(f,excludes);
    if (moduleDescriptor == null)     continue;
    T descriptor=reader.read(new ModuleHandle(f,moduleDescriptor));
    if (descriptor == null)     continue;
    result.add(descriptor);
  }
  if (!file.isDirectory())   return;
  for (  IFile childDir : files) {
    if (FileSystem.getInstance().isFileIgnored(childDir.getName()))     continue;
    if (isModuleFile(childDir))     continue;
    if (excludes.contains(childDir))     continue;
    if (childDir.getName().endsWith(".jar")) {
      IFile moduleFile=FileSystem.getInstance().getFileByPath(childDir.getPath() + META_INF_MODULE_XML);
      IFile dirInJar=FileSystem.getInstance().getFileByPath(childDir.getPath() + "!/modules");
      if (moduleFile.exists()) {
        ModuleDescriptor moduleDescriptor=loadModuleDescriptor(moduleFile);
        if (moduleDescriptor != null) {
          T descriptor=reader.read(new ModuleHandle(moduleFile,moduleDescriptor));
          if (descriptor != null) {
            result.add(descriptor);
          }
        }
      }
 else       if (dirInJar.exists()) {
        readModuleDescriptors(dirInJar,excludes,result,refreshFiles,reader);
      }
    }
    readModuleDescriptors(childDir,excludes,result,refreshFiles,reader);
  }
}
