{
  IHolder objectHolder=searchQuery.getObjectHolder();
  IOperationContext operationContext;
  List<SModel> models;
  List<SModule> modules=null;
  if (objectHolder instanceof ModelsHolder) {
    ModelsHolder modelsHolder=(ModelsHolder)objectHolder;
    operationContext=modelsHolder.getOperationContext();
    models=Sequence.fromIterable(((Iterable<SModelReference>)modelsHolder.getObject())).select(new ISelector<SModelReference,SModel>(){
      public SModel select(      SModelReference ref){
        return SModelRepository.getInstance().getModelDescriptor(ref);
      }
    }
).where(new IWhereFilter<SModel>(){
      public boolean accept(      SModel it){
        return it != null;
      }
    }
).toListSequence();
  }
 else   if (objectHolder instanceof ModulesHolder) {
    ModulesHolder modulesHolder=(ModulesHolder)objectHolder;
    operationContext=modulesHolder.getOperationContext();
    models=ModelCheckerUtils.getModelDescriptors(modulesHolder.getObject());
    modules=modulesHolder.getObject();
  }
 else {
    throw new IllegalArgumentException();
  }
  int work=((modules != null ? ListSequence.fromList(modules).count() : 0)) + ListSequence.fromList(models).count() + 1;
  monitor.start("Checking",work);
  try {
    SearchResults<ModelCheckerIssue> rv=new SearchResults<ModelCheckerIssue>();
    if (modules != null) {
      ModuleChecker moduleChecker=new ModuleChecker();
      for (      SModule module : ListSequence.fromList(modules)) {
        moduleChecker.checkModule(module,monitor.subTask(1,SubProgressKind.REPLACING));
        if (monitor.isCanceled()) {
          break;
        }
      }
      rv.addAll(moduleChecker.getSearchResults());
    }
    monitor.advance(0);
    Project mpsProject=operationContext.getProject();
    ModelChecker modelChecker=new ModelChecker(mpsProject);
    modelChecker.setSpecificCheckers(getSpecificCheckers());
    monitor.advance(1);
    for (    SModel modelDescriptor : ListSequence.fromList(models)) {
      modelChecker.checkModel(modelDescriptor,monitor.subTask(1,SubProgressKind.REPLACING));
      if (monitor.isCanceled()) {
        break;
      }
    }
    rv.addAll(modelChecker.getSearchResults());
    return rv;
  }
  finally {
    monitor.done();
  }
}
