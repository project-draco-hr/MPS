{
  IHolder objectHolder=searchQuery.getObjectHolder();
  final SearchScope scope=searchQuery.getScope();
  List<SModel> models=ListSequence.fromList(new ArrayList<SModel>());
  List<SModule> modules=ListSequence.fromList(new ArrayList<SModule>());
  if (objectHolder instanceof ModelsHolder) {
    ModelsHolder modelsHolder=(ModelsHolder)objectHolder;
    for (    SModelReference ref : modelsHolder.getObject()) {
      SModel resolved=scope.resolve(ref);
      if (resolved != null) {
        ListSequence.fromList(models).addElement(resolved);
      }
    }
  }
 else   if (objectHolder instanceof ModulesHolder) {
    ModulesHolder modulesHolder=(ModulesHolder)objectHolder;
    Set<SModule> visibleModules=new HashSet<SModule>(IterableUtil.asCollection(scope.getModules()));
    visibleModules.retainAll(modulesHolder.getObject());
    ListSequence.fromList(models).addSequence(ListSequence.fromList(ModelCheckerUtils.getModelDescriptors(visibleModules)));
    ListSequence.fromList(modules).addSequence(ListSequence.fromList(modulesHolder.getObject()));
  }
 else {
    throw new IllegalArgumentException();
  }
  int work=ListSequence.fromList(modules).count() + ListSequence.fromList(models).count() + 1;
  monitor.start("Checking",work);
  try {
    SearchResults<ModelCheckerIssue> rv=new SearchResults<ModelCheckerIssue>();
    if (!(ListSequence.fromList(modules).isEmpty())) {
      ModuleChecker moduleChecker=new ModuleChecker();
      for (      SModule module : ListSequence.fromList(modules)) {
        moduleChecker.checkModule(module,monitor.subTask(1,SubProgressKind.REPLACING));
        if (monitor.isCanceled()) {
          break;
        }
      }
      rv.addAll(moduleChecker.getSearchResults());
    }
    monitor.advance(0);
    ModelChecker modelChecker=new ModelChecker(getSpecificCheckers());
    monitor.advance(1);
    for (    SModel modelDescriptor : ListSequence.fromList(models)) {
      modelChecker.checkModel(modelDescriptor,monitor.subTask(1,SubProgressKind.REPLACING));
      if (monitor.isCanceled()) {
        break;
      }
    }
    rv.addAll(modelChecker.getSearchResults());
    return rv;
  }
  finally {
    monitor.done();
  }
}
