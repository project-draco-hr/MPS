{
  this.addNodeById("1230052943818");
  this.addNodeById("1230052943833");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052943820"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).first(),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"),"b");
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052943820"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052943819"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052943834"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
