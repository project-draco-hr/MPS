{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AddMenuPart_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new ConceptRightTransformPart_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptSubstitutePart_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptsSubstituteMenuPart_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new CopyPasteHandlers_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new CopyPreProcessor_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerateCodeAction_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenericSubstituteMenuPart_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncludeRightTransformForNodePart_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new MenuPart_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new NF_Concept_NewInstance_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new NF_Model_CreateNewNodeOperation_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new NF_Model_CreateNewRootNodeOperation_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeFactories_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeFactory_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeSubstituteActions_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeSubstituteActionsBuilder_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParameterizedSideTransformMenuPart_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParameterizedSubstituteMenuPart_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new PastePostProcessor_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new PasteWrapper_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new PasteWrappers_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveByConditionPart_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveDefaultsPart_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemovePart_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveSTByConditionPart_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeCreatorAndInitializer_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTransformHintSubstituteActions_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTransformHintSubstituteActionsBuilder_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTransformVariableDeclaration_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTransform_SimpleString_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleItemSubstitutePart_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleSideTransformMenuPart_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new SmartActionParameter_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new SmartActionParameterReference_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new SmartEditorActions_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstituteNodeBuilderVariableDeclaration_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new Substitute_SimpleString_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new WrapperSubstituteMenuPart_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
