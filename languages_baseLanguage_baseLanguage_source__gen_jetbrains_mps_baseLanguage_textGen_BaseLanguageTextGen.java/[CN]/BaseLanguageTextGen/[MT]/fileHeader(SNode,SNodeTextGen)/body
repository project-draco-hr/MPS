{
  boolean topClassifier=!(Classifier_Behavior.call_isInner_521412098689998677(cls));
  if (topClassifier) {
    int wasPart=textGen.getBuffer().selectPart(TextGenBuffer.TOP);
    textGen.append("package " + BaseLanguageTextGen.getPackageName(cls,textGen) + ";");
    textGen.appendNewLine();
    textGen.appendNewLine();
    textGen.append("/*Generated by MPS */");
    textGen.appendNewLine();
    textGen.getBuffer().selectPart(wasPart);
  }
  if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.Interface")) {
    BaseLanguageTextGen.registerExtendsRelation(SLinkOperations.getTargets(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true),topClassifier,textGen);
  }
 else   if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    BaseLanguageTextGen.registerExtendsRelation(SLinkOperations.getTargets(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"implementedInterface",true),topClassifier,textGen);
    BaseLanguageTextGen.registerExtendsRelation(Sequence.fromIterable(Sequence.<SNode>singleton(SLinkOperations.getTarget(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"superclass",true))).toListSequence(),topClassifier,textGen);
  }
}
