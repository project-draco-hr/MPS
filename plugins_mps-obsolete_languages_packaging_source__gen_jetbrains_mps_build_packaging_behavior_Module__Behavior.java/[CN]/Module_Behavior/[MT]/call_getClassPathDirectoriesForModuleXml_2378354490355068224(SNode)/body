{
  List<SNode> result=new ArrayList<SNode>();
  ListSequence.fromList(result).addSequence(ListSequence.fromList(Module_Behavior.call_getClassPathDirectories_1213877515083(thisNode,true)));
  final AbstractModule module=(AbstractModule)Module_Behavior.call_getModule_1213877515148(thisNode);
  if (!(SModuleOperations.isCompileInMps(module))) {
    final String plugins="plugins";
    final String classes="classes";
    String path=Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<String>(){
      public Iterable<String> iterable(){
        return Module_Behavior.call_getClassPathExcludingIdea_2000252915626233691(thisNode,module);
      }
    }
)).findFirst(new IWhereFilter<String>(){
      public boolean accept(      String it){
        return it.contains(plugins) && it.endsWith(classes);
      }
    }
);
    if (path != null) {
      String classesPath=path.replace("\\",Util.SEPARATOR).replace("/",Util.SEPARATOR);
      if (!(classesPath.startsWith(Module_Behavior.call_getModuleDescriptorPath_4777659345280330855(thisNode)))) {
        int start=classesPath.indexOf(plugins) + plugins.length() + 1;
        int end=classesPath.indexOf(classes) - 1;
        if (start >= 0 && start < classesPath.length() && end >= 0 && end < classesPath.length() && start < end) {
          String pluginName=classesPath.substring(start,end);
          String pluginJar=classesPath.substring(0,start) + pluginName + Util.SEPARATOR+ "lib"+ Util.SEPARATOR+ pluginName+ ".jar";
          ListSequence.fromList(result).addElement(PathHolder_Behavior.createPathHolder_7235580512916878209(pluginJar,thisNode));
        }
      }
    }
  }
  return result;
}
