{
  final SNode parentNode=(SNode)cellContext.get(BasicCellContext.EDITED_NODE);
  SNode linkDeclaration=(SNode)cellContext.get(AggregationCellContext.LINK_DECLARATION);
  IChildNodeSetter setter=new DefaultChildNodeSetter(linkDeclaration);
  final SNode defaultConceptOfChild=CellUtil.getLinkDeclarationTarget(linkDeclaration);
  final SNode currentChild=(SNode)cellContext.getOpt(AggregationCellContext.CURRENT_CHILD_NODE);
  final IOperationContext context=editorContext.getOperationContext();
  return Collections.<SubstituteAction>singletonList(new DefaultChildNodeSubstituteAction(defaultConceptOfChild,parentNode,currentChild,setter,context.getScope()){
    @Override protected String getMatchingText(    String pattern,    boolean referent_presentation,    boolean visible){
      return AbstractCellMenuPart_ReplaceChild_Item.this.getMatchingText();
    }
    @Override public String getDescriptionText(    String pattern){
      return AbstractCellMenuPart_ReplaceChild_Item.this.getDescriptionText();
    }
    @Override public SNode createChildNode(    Object parameterConcept,    SModel model,    String pattern){
      SNode parameterNode=(SNode)parameterConcept;
      if (isCustomCreateChildNode()) {
        SNode newChild=AbstractCellMenuPart_ReplaceChild_Item.this.customCreateChildNode(parentNode,currentChild,defaultConceptOfChild,parentNode.getModel(),getScope(),context,editorContext);
        if (newChild != null) {
          NodeFactoryManager.setupNode(parameterNode,newChild,currentChild,parentNode,model,getScope());
        }
        return newChild;
      }
      return NodeFactoryManager.createNode(parameterNode,currentChild,parentNode,parentNode.getModel(),getScope());
    }
  }
);
}
