{
  super("Use member role for classifier members (smodel usages)");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate .field.add usages (use member role instead of field role)";
    }
    public String getAdditionalInfo(){
      return "Migrate .field.add usages (use member role instead of field role)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"))))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return NonMigratableUsagesFinder.isThisForSimpleAddOperation(node);
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","member"));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate LinkList_AddNewChildOperation";
    }
    public String getAdditionalInfo(){
      return "Migrate LinkList_AddNewChildOperation";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"))))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent((SNodeOperations.as(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")))),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation")),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1139184414036l,"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation"));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent((SNodeOperations.as(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")))),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation")),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1139184414036l,"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation"));
      if ((SLinkOperations.getTarget(operation,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1139184414036l,1139877738879l,"concept")) == null)) {
        SLinkOperations.setTarget(operation,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1139184414036l,1139877738879l,"concept"),SLinkOperations.getTarget(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link")),MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target")));
      }
      SLinkOperations.setTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","member"));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Use .fields() etc operation where it possible (replace for sequence access)";
    }
    public String getAdditionalInfo(){
      return "Use .fields() etc operation where it possible (replace for sequence access)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"))))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,5169995583184591170l,"smodelAttribute"))).isEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode methodCall=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1179409122411l,"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall"));
      SLinkOperations.setTarget(methodCall,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"),MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).get(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056282393l,1138056546658l,"link"))));
      SNodeOperations.replaceWithAnother(node,methodCall);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
