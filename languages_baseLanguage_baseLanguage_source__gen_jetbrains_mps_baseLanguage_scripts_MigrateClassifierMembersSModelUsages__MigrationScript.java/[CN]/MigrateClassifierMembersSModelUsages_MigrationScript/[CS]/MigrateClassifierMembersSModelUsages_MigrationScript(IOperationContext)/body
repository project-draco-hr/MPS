{
  super("Use member role for classifier members (smodel usages)");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Use .fields() etc operation where it possible (replace for sequence access)";
    }
    public String getAdditionalInfo(){
      return "Use .fields() etc operation where it possible (replace for sequence access)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,"link",false)))) {
        return false;
      }
      if (!(NonMigratableUsagesFinder.isSequenceNeeded(node))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return (int)ListSequence.fromList(SNodeOperations.getChildren(node)).count() == 0;
    }
    public void doUpdateInstanceNode(    SNode node){
      jetbrains.mps.smodel.SNode methodCall=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall",null);
      SLinkOperations.setTarget(methodCall,"baseMethodDeclaration",MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).get(SLinkOperations.getTarget(node,"link",false)),false);
      SNodeOperations.replaceWithAnother(node,methodCall);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate .field.add usages (use member role instead of field role)";
    }
    public String getAdditionalInfo(){
      return "Migrate .field.add usages (use member role instead of field role)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,"link",false)))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return NonMigratableUsagesFinder.isThisForSimpleAddOperation(node);
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"link",SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","member"),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate LinkList_AddNewChildOperation";
    }
    public String getAdditionalInfo(){
      return "Migrate LinkList_AddNewChildOperation";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.SLinkListAccess";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SetSequence.fromSet(MapSequence.fromMap(MembersMigrationUtil.OLD_LINK_TO_NEW_BEHAVIOR_METHOD).keySet()).contains(SLinkOperations.getTarget(node,"link",false)))) {
        return false;
      }
      if (NonMigratableUsagesFinder.isExcluded(node)) {
        return false;
      }
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent((SNodeOperations.as(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression"))),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent((SNodeOperations.as(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression"))),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation");
      if ((SLinkOperations.getTarget(operation,"concept",false) == null)) {
        SLinkOperations.setTarget(operation,"concept",SLinkOperations.getTarget(SLinkOperations.getTarget(node,"link",false),"target",false),false);
      }
      SLinkOperations.setTarget(node,"link",SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","member"),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
