{
  final List<AddContentEntryAction> list=new ArrayList<AddContentEntryAction>();
  for (  String type : ModelRootEntryPersistence.getInstance().getModelRootTypes()) {
    list.add(new AddContentEntryAction(type));
  }
  AnAction action=new IconWithTextAction(PropertiesBundle.message("mps.properties.configurable.roots.editor.contentenrieseditor.action.title"),PropertiesBundle.message("mps.properties.configurable.roots.editor.contentenrieseditor.action.tip"),Modules.AddContentEntry){
    @Override public void actionPerformed(    final AnActionEvent e){
      if (list.size() == 1) {
        MPSModuleRepository.getInstance().getModelAccess().runReadAction(new Runnable(){
          @Override public void run(){
            list.get(0).actionPerformed(e);
          }
        }
);
        return;
      }
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<AddContentEntryAction>(null,list){
        @Override public Icon getIconFor(        AddContentEntryAction aValue){
          return aValue.getTemplatePresentation().getIcon();
        }
        @Override public boolean hasSubstep(        AddContentEntryAction selectedValue){
          return false;
        }
        @Override public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        @Override public PopupStep onChosen(        final AddContentEntryAction selectedValue,        final boolean finalChoice){
          return doFinalStep(new Runnable(){
            @Override public void run(){
              selectedValue.actionPerformed(e);
            }
          }
);
        }
        @Override @NotNull public String getTextFor(        AddContentEntryAction value){
          return value.getTemplatePresentation().getText();
        }
      }
);
      popup.show(new RelativePoint(myEditorsListPanel,new Point(0,0)));
    }
  }
;
  return action;
}
