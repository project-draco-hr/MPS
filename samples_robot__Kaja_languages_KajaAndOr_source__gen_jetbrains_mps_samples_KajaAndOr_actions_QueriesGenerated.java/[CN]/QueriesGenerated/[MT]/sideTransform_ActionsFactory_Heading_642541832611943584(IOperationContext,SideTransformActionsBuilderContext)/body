{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator"),_context.getModel(),operationContext.getScope())).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return !(SPropertyOperations.getBoolean(it,"abstract"));
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode newInitializedInstance=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null);
            SLinkOperations.setTarget(newInitializedInstance,"left",SNodeOperations.copyNode(_context.getSourceNode()),true);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),newInitializedInstance);
            return SLinkOperations.getTarget(newInitializedInstance,"right",true);
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"conceptAlias");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),"name");
          }
        }
);
      }
    }
  }
  return result;
}
