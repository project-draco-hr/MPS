{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SConcept> parameterObjects=new Computable<Iterable<SConcept>>(){
      public Iterable<SConcept> compute(){
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,"jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator"),_context.getModel())).where(new IWhereFilter<SConcept>(){
          public boolean accept(          SConcept it){
            return !(it.isAbstract());
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SConcept item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode newInitializedInstance=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)),null);
            SLinkOperations.setTarget(newInitializedInstance,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460cL,"left"),SNodeOperations.copyNode(_context.getSourceNode()));
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),newInitializedInstance);
            return SLinkOperations.getTarget(newInitializedInstance,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460dL,"right"));
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString(SNodeOperations.asNode((item)),MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x46ab0ad5826c74caL,"conceptAlias"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return (item).getName();
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
