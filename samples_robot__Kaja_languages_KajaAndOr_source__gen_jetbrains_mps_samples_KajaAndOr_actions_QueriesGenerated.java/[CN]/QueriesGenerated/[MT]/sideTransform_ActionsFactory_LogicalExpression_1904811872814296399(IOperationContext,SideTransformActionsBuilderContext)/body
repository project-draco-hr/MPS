{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"and","or");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode conjuction;
            if ((item).equals("and")) {
              SNode andNode=SConceptOperations.createNewNode("jetbrains.mps.samples.KajaAndOr.structure.And",null);
              SNodeOperations.replaceWithAnother(_context.getSourceNode(),andNode);
              conjuction=andNode;
            }
 else {
              SNode orNode=SConceptOperations.createNewNode("jetbrains.mps.samples.KajaAndOr.structure.Or",null);
              SNodeOperations.replaceWithAnother(_context.getSourceNode(),orNode);
              conjuction=orNode;
            }
            SLinkOperations.setTarget(conjuction,"left",_context.getSourceNode(),true);
            return SLinkOperations.getTarget(conjuction,"right",true);
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
        }
);
      }
    }
  }
  return result;
}
