{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"and","or");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode conjuction;
            if ((item).equals("and")) {
              SNode andNode=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a460aL,"jetbrains.mps.samples.KajaAndOr.structure.And"));
              SNodeOperations.replaceWithAnother(_context.getSourceNode(),andNode);
              conjuction=andNode;
            }
 else {
              SNode orNode=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46bbL,"jetbrains.mps.samples.KajaAndOr.structure.Or"));
              SNodeOperations.replaceWithAnother(_context.getSourceNode(),orNode);
              conjuction=orNode;
            }
            SLinkOperations.setTarget(conjuction,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460cL,"left"),_context.getSourceNode());
            return SLinkOperations.getTarget(conjuction,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460dL,"right"));
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x49a08c51fe543ccL,0xbd998b46d641d7f5L,0x2de971c785ec9fc1L,"jetbrains.mps.samples.Kaja.structure.LogicalExpression").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
