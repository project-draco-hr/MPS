{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"and","or");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode conjuction;
            if ((item).equals("and")) {
              conjuction=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a460aL,"jetbrains.mps.samples.KajaAndOr.structure.And")));
            }
 else             if ((item).equals("or")) {
              conjuction=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46bbL,"jetbrains.mps.samples.KajaAndOr.structure.Or")));
            }
 else {
              throw new IllegalArgumentException("Cannot find a match for " + (item));
            }
            SLinkOperations.setTarget(conjuction,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460dL,"right"),_context.getSourceNode());
            return SLinkOperations.getTarget(conjuction,MetaAdapterFactory.getContainmentLink(0x44306fd2ef944b56L,0x9806d9ab509536dbL,0x1a6f404e630a46d9L,0x1a6f404e630a460cL,"left"));
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression"),null));
          }
        }
);
      }
    }
  }
  return result;
}
