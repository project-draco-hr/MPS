{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator"),_context.getModel(),operationContext.getScope())).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SPropertyOperations.getBoolean(it,"abstract"));
            }
          }
);
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newInitializedInstance=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null);
              SLinkOperations.setTarget(newInitializedInstance,"left",SLinkOperations.getTarget(_context.getCurrentTargetNode(),"left",true),true);
              SLinkOperations.setTarget(newInitializedInstance,"right",SLinkOperations.getTarget(_context.getCurrentTargetNode(),"right",true),true);
              return newInitializedInstance;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"conceptAlias");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
          }
);
        }
      }
    }
  }
  return result;
}
