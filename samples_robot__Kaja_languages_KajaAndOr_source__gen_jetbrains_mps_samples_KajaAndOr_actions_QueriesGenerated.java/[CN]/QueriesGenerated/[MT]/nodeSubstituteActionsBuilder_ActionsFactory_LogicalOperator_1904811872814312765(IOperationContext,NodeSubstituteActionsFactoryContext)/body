{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode orNode=SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(),"jetbrains.mps.samples.KajaAndOr.structure.Or");
          SLinkOperations.setTarget(orNode,"left",SLinkOperations.getTarget(_context.getCurrentTargetNode(),"left",true),true);
          SLinkOperations.setTarget(orNode,"right",SLinkOperations.getTarget(_context.getCurrentTargetNode(),"right",true),true);
          return orNode;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.samples.KajaAndOr.structure.And");
        }
        public String getMatchingText(        String pattern){
          return "or";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
