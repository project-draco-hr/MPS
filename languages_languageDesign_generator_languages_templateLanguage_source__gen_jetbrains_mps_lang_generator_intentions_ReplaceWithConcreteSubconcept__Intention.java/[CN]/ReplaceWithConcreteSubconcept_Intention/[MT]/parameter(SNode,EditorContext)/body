{
  return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SNodeOperations.getConceptDeclaration(node),SNodeOperations.getModel(node))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,"abstract")) && !(SConceptOperations.isSubConceptOf(it,"jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"));
    }
  }
).toListSequence();
}
