{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "collection (vertical)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null),true);
          if ((SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection",true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (vertical)";
        }
        public String getMatchingText(        String pattern){
          return "[/";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "collection (horizontal)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null),true);
          if ((SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection",true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (horizontal)";
        }
        public String getMatchingText(        String pattern){
          return "[>";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setNewChild(result,"cellLayout","jetbrains.mps.lang.editor.structure.CellLayout_Indent");
          return result;
        }
        public String getMatchingText(        String pattern){
          return "collection (indent)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setNewChild(result,"cellLayout","jetbrains.mps.lang.editor.structure.CellLayout_Indent");
          if ((SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection",true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (indent)";
        }
        public String getMatchingText(        String pattern){
          return "[-";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SNode indent=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Indent",null);
          EditorCellModel_Behavior.call_setSelectable_1241444765326(indent,false);
          SLinkOperations.insertChildFirst(result,"childCellModel",indent);
          if ((SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection",true,false) != null) && EditorCellModel_Behavior.call_isSelectable_1219420196673(result)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (with indent)";
        }
        public String getMatchingText(        String pattern){
          return "[_";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Indent",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (indent)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Indent",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "(-";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (vertical)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null),true);
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection")) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "child node cell list (vertical)";
        }
        public String getMatchingText(        String pattern){
          return "(/";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null),true);
          return result;
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (horizontal)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,"cellLayout",SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null),true);
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.CellModel_Collection")) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "child node cell list (horizontal)";
        }
        public String getMatchingText(        String pattern){
          return "(>";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefCell",_context.getCurrentTargetNode());
        }
        public String getMatchingText(        String pattern){
          return "referent node cell";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNode",_context.getCurrentTargetNode());
        }
        public String getMatchingText(        String pattern){
          return "child node cell";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Property",_context.getCurrentTargetNode());
        }
        public String getMatchingText(        String pattern){
          return "property";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty",_context.getCurrentTargetNode());
          return result;
        }
        public String getMatchingText(        String pattern){
          return "concept property";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Alternation",_context.getCurrentTargetNode());
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "alternation";
        }
        public String getMatchingText(        String pattern){
          return "if";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Constant",_context.getCurrentTargetNode());
          SPropertyOperations.set(result,"text",NameUtil.stripQuotes(pattern,"\"","\""));
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.startsWith("\"");
        }
        public String getDescriptionText(        String pattern){
          return "constant";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Error",_context.getCurrentTargetNode());
          SPropertyOperations.set(result,"text",NameUtil.stripQuotes(pattern,"!","!"));
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.startsWith("!");
        }
        public String getDescriptionText(        String pattern){
          return "Error label";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode container=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.lang.editor.structure.BaseEditorComponent",true,false);
          return BaseEditorComponent_Behavior.call_getApplicableComponents_1213877372457(container,operationContext.getScope());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode component=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Component",null);
              SLinkOperations.setTarget(component,"editorComponent",(item),false);
              return component;
            }
            public String getMatchingText(            String pattern){
              return "#" + SPropertyOperations.getString((item),"name") + "#";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
