{
  super("Migrate parameter reference instances");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate instanceOf usages";
    }
    public String getAdditionalInfo(){
      return "Migrate instanceOf usages";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"conceptArgument",true),"jetbrains.mps.lang.smodel.structure.RefConcept_Reference") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"conceptArgument",true),"jetbrains.mps.lang.smodel.structure.RefConcept_Reference"),"conceptDeclaration",false) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterReference");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=new MigrateParameterReference_MigrationScript.QuotationClass_2t56b7_a0a0a4a0a0a1a0().createNode(IOperation_Behavior.call_getOperand_1213877410070(node),IOperation_Behavior.call_getOperand_1213877410070(node));
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
