{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ExplicitHintsSpecification");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
          Set<SModel> allVisibleModels=SetSequence.fromSetWithValues(new HashSet<SModel>(),(List<SModel>)SModelOperations.allImportedModels(_context.getModel()));
          SetSequence.fromSet(allVisibleModels).addElement(_context.getModel());
          for (          SModel nextModel : SetSequence.fromSet(allVisibleModels)) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getNodes(nextModel,"jetbrains.mps.lang.editor.structure.ConceptEditorHintDeclaration")));
          }
          return result;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ExplicitHintsSpecification",null);
              SNode hintReference=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorHintDeclarationReference",null);
              SLinkOperations.setTarget(hintReference,MetaAdapterFactory.getReferenceLink(new UUID(1782411230332735017l,-6324602048325217350l),6822301196700715228l,5944657839026714445l,"hint"),(item));
              ListSequence.fromList(SLinkOperations.getChildren(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),4242538589859161874l,4242538589859162459l,"hints"))).addElement(hintReference);
              return result;
            }
          }
);
        }
      }
    }
  }
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.QueryHintsSpecification"),_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
  return result;
}
