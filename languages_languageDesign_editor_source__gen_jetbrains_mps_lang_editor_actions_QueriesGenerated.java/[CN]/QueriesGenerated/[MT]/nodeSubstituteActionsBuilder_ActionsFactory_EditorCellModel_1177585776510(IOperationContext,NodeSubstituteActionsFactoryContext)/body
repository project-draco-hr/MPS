{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "collection (vertical)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null));
          if ((SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,"jetbrains.mps.lang.editor.structure.CellModel_Collection"),true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (vertical)";
        }
        public String getMatchingText(        String pattern){
          return "[/";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "collection (horizontal)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null));
          if ((SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,"jetbrains.mps.lang.editor.structure.CellModel_Collection"),true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (horizontal)";
        }
        public String getMatchingText(        String pattern){
          return "[>";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SNodeFactoryOperations.setNewChild(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),"jetbrains.mps.lang.editor.structure.CellLayout_Indent");
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "collection (indent)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Collection",_context.getCurrentTargetNode());
          SNodeFactoryOperations.setNewChild(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,1106270802874l,"cellLayout"),"jetbrains.mps.lang.editor.structure.CellLayout_Indent");
          if ((SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,"jetbrains.mps.lang.editor.structure.CellModel_Collection"),true,false) != null)) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "collection (indent)";
        }
        public String getMatchingText(        String pattern){
          return "[-";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Indent",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (indent)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Indent",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "child node cell (indent)";
        }
        public String getMatchingText(        String pattern){
          return "(-";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (vertical)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical",null));
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,"jetbrains.mps.lang.editor.structure.CellModel_Collection"))) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "child node cell list (vertical)";
        }
        public String getMatchingText(        String pattern){
          return "(/";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "child node cell list (horizontal)";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList",_context.getCurrentTargetNode());
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),1140524381322l,1140524464360l,"cellLayout"),SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal",null));
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1073389446423l,"jetbrains.mps.lang.editor.structure.CellModel_Collection"))) {
            EditorCellModel_Behavior.call_setSelectable_1241444765326(result,false);
          }
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "child node cell list (horizontal)";
        }
        public String getMatchingText(        String pattern){
          return "(>";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefCell",_context.getCurrentTargetNode());
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "referent node cell";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_RefNode",_context.getCurrentTargetNode());
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "child node cell";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Property",_context.getCurrentTargetNode());
        }
        public String getDescriptionText(        String pattern){
          return "";
        }
        public String getMatchingText(        String pattern){
          return "property";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Alternation",_context.getCurrentTargetNode());
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "alternation";
        }
        public String getMatchingText(        String pattern){
          return "if";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Constant",_context.getCurrentTargetNode());
          SPropertyOperations.set(result,MetaAdapterFactory.getProperty(new UUID(1782411230332735017l,-6324602048325217350l),1073389577006l,1073389577007l,"text"),NameUtil.stripQuotes(pattern,"\"","\""));
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.startsWith("\"");
        }
        public String getDescriptionText(        String pattern){
          return "constant";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode constant=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Constant",_context.getCurrentTargetNode());
          SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(new UUID(1782411230332735017l,-6324602048325217350l),1073389577006l,1073389577007l,"text"),NameUtil.stripQuotes(pattern,"\"","\""));
          return constant;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return !((pattern.equals("[-") || pattern.equals("[/") || pattern.equals("[>")|| pattern.startsWith("\"")|| pattern.startsWith("<choose cell model>")));
        }
        public String getDescriptionText(        String pattern){
          return "make constant";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Error",_context.getCurrentTargetNode());
          SPropertyOperations.set(result,MetaAdapterFactory.getProperty(new UUID(1782411230332735017l,-6324602048325217350l),1075375595203l,1075375595204l,"text"),NameUtil.stripQuotes(pattern,"!","!"));
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return pattern.startsWith("!");
        }
        public String getDescriptionText(        String pattern){
          return "Error label";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorCellModel");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope scope=Scope.getScope(_context.getParentNode(),_context.getCurrentTargetNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.EditorComponentDeclaration"));
          if (scope == null) {
            return Collections.emptyList();
          }
          return Sequence.fromIterable(scope.getAvailableElements("")).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.as(it,MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),1078938745671l,"jetbrains.mps.lang.editor.structure.EditorComponentDeclaration"));
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return it != null;
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode component=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellModel_Component",null);
              SLinkOperations.setTarget(component,MetaAdapterFactory.getReferenceLink(new UUID(1782411230332735017l,-6324602048325217350l),1078939183254l,1078939183255l,"editorComponent"),(item));
              return component;
            }
            public String getMatchingText(            String pattern){
              return "#" + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + "#";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
