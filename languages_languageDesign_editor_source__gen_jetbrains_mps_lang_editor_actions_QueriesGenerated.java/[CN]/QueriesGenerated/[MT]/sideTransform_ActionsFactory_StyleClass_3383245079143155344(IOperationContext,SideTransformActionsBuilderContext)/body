{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x2ef3b3796a126f24L,"jetbrains.mps.lang.editor.structure.StyleClass").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x2ef3b3796a126f24L,0x2ef3b3796a130bd8L,"dominates"),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x22926e62b7d495a0L,"jetbrains.mps.lang.editor.structure.DominatesRecord")),null));
    }
    public String getMatchingText(    String pattern){
      return "dominates";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x2ef3b3796a126f24L,"jetbrains.mps.lang.editor.structure.StyleClass").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x2ef3b3796a126f24L,"jetbrains.mps.lang.editor.structure.StyleClass").getDeclarationNode(),null));
    }
  }
);
  return result;
}
