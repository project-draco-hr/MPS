{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode selectInEditorOperation=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,"jetbrains.mps.lang.editor.structure.SelectInEditorOperation"));
      SLinkOperations.setTarget(selectInEditorOperation,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,2701921320705252232l,"selectionEnd"),SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Expression",null));
      return SLinkOperations.getTarget(selectInEditorOperation,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,2701921320705252232l,"selectionEnd"));
    }
    public String getMatchingText(    String pattern){
      return ",";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "specify selection end position";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode selectInEditorOperation=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,"jetbrains.mps.lang.editor.structure.SelectInEditorOperation"));
      SLinkOperations.setTarget(selectInEditorOperation,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,2701921320705252232l,"selectionEnd"),SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Expression",null));
      return SLinkOperations.getTarget(selectInEditorOperation,MetaAdapterFactory.getContainmentLink(new UUID(1782411230332735017l,-6324602048325217350l),3647146066980922272l,2701921320705252232l,"selectionEnd"));
    }
    public String getMatchingText(    String pattern){
      return "selectionEnd";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "specify selection end position";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
