{
  if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(expr,"expression",true),"jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
    return;
  }
  SNode sidemost=findRightmostOrLeftmostLeafExpression(SLinkOperations.getTarget(expr,"expression",true),!(toRight));
  SNode binOp=SNodeOperations.cast(SNodeOperations.getParent(sidemost),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
  SNode sideExpr=(toRight ? SLinkOperations.getTarget(binOp,"rightExpression",true) : SLinkOperations.getTarget(binOp,"leftExpression",true));
  SNodeOperations.detachNode(sideExpr);
  SNodeOperations.replaceWithAnother(binOp,sideExpr);
  SNodeOperations.replaceWithAnother(expr,binOp);
  if (toRight) {
    SLinkOperations.setTarget(binOp,"rightExpression",expr,true);
  }
 else {
    SLinkOperations.setTarget(binOp,"leftExpression",expr,true);
  }
  ParenthesisUtil.checkOperationWRTPriority(binOp);
  selectNode(context,expr,false);
}
