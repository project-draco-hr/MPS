{
  if (UseNewUsagesViewFlag.get()) {
    List<SModelDescriptor> modelDescriptors=myProject.getScope().getModelDescriptors(namespace);
    final List<SModel> applicableModelDescriptors=new ArrayList<SModel>();
    for (    final SModelDescriptor descriptor : modelDescriptors) {
      if (!descriptor.getStereotype().equals(SModelStereotype.JAVA_STUB)) {
        applicableModelDescriptors.add(descriptor.getSModel());
      }
    }
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        try {
          NewUsagesView usagesView=getProjectWindow().getUsagesView();
          jetbrains.mps.ide.usageView.view.UsageView usageView=usagesView.createUsageView();
          usageView.setResultProvider(TreeBuilder.forFinder(new AspectMethodsFinder(applicableModelDescriptors,name)));
          ModuleContext moduleContext=new ModuleContext(BootstrapLanguages.getInstance().getBaseLanguage(),myProject);
          usageView.run(new SearchQuery(new SNodePointer((SNode)null),myProject.getScope()));
          usagesView.showTool();
        }
 catch (        Throwable t) {
          LOG.error(t);
        }
      }
    }
);
  }
 else {
    List<SModelDescriptor> modelDescriptors=myProject.getScope().getModelDescriptors(namespace);
    final List<SModelDescriptor> applicableModelDescriptors=new ArrayList<SModelDescriptor>();
    for (    final SModelDescriptor descriptor : modelDescriptors) {
      if (descriptor.getStereotype().equals(SModelStereotype.JAVA_STUB))       continue;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          try {
            UsagesModel_AspectMethods usagesModel=new UsagesModel_AspectMethods(descriptor.getSModel(),name);
            if (getProjectWindow() == null)             return;
            getProjectWindow().showUsagesView(usagesModel);
            FrameUtil.activateFrame(getMainFrame());
            if (usagesModel.getSNodes().size() > 0)             return;
          }
 catch (          Throwable t) {
            LOG.error(t);
          }
        }
      }
);
    }
  }
}
