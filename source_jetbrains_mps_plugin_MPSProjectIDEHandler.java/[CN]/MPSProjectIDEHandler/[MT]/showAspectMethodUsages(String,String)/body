{
  if (UseNewUsagesViewFlag.get()) {
    List<SModelDescriptor> modelDescriptors=myProject.getScope().getModelDescriptors(namespace);
    final List<SModel> applicableModelDescriptors=new ArrayList<SModel>();
    for (    final SModelDescriptor descriptor : modelDescriptors) {
      if (!descriptor.getStereotype().equals(SModelStereotype.JAVA_STUB)) {
        applicableModelDescriptors.add(descriptor.getSModel());
      }
    }
    new Thread(){
      public void run(){
        FindUsagesOptions options=new FindUsagesOptions();
        options.setOption(new FindersOptions(new AspectMethodsFinder(applicableModelDescriptors,name)));
        options.setOption(new QueryOptions(myProject.getScope(),new SNodePointer((SNode)null)));
        options.setOption(new ViewOptions(true,true));
        getProjectWindow().getUsagesView().findUsages(options,true);
      }
    }
.start();
  }
 else {
    List<SModelDescriptor> modelDescriptors=myProject.getScope().getModelDescriptors(namespace);
    final List<SModelDescriptor> applicableModelDescriptors=new ArrayList<SModelDescriptor>();
    for (    final SModelDescriptor descriptor : modelDescriptors) {
      if (descriptor.getStereotype().equals(SModelStereotype.JAVA_STUB))       continue;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          try {
            UsagesModel_AspectMethods usagesModel=new UsagesModel_AspectMethods(descriptor.getSModel(),name);
            if (getProjectWindow() == null)             return;
            getProjectWindow().showUsagesView(usagesModel);
            FrameUtil.activateFrame(getMainFrame());
            if (usagesModel.getSNodes().size() > 0)             return;
          }
 catch (          Throwable t) {
            LOG.error(t);
          }
        }
      }
);
    }
  }
}
