{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8qp2eq_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (!(SNodeOperations.isInstanceOf(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"))) {
            return new EmptyScope();
          }
          if ((SLinkOperations.getTarget(SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),"classConcept",false) == null)) {
            return new EmptyScope();
          }
          return Classifier_Behavior.call_getVisibleMembers_8083692786967356611(SLinkOperations.getTarget(SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),"classConcept",false),_context.getContextNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
        }
      }
;
    }
  }
);
  return references;
}
