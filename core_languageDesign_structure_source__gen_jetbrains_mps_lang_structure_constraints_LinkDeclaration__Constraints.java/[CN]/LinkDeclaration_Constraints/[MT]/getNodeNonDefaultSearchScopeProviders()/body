{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("specializedLink",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      if (_context.getReferenceNode() == null) {
        return null;
      }
      final boolean aggregation=SPropertyOperations.hasValue(_context.getReferenceNode(),"metaClass","aggregation","reference");
      List<SNode> result=new ArrayList<SNode>();
      SNode enclosingConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",true,false);
      List<SNode> directSupers=SConceptOperations.getDirectSuperConcepts(enclosingConcept,false);
      for (      SNode concept : ListSequence.fromList(directSupers)) {
        List<SNode> links=AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept);
        ListSequence.fromList(result).addSequence(ListSequence.fromList(links).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            if (aggregation) {
              return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
            }
            return SPropertyOperations.hasValue(it,"metaClass","reference","reference");
          }
        }
));
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c8959028c(jetbrains.mps.lang.structure.constraints)","1213104841302");
    }
  }
);
  return result;
}
