{
  SearchResults global_results=new SearchResults();
{
    SNode searchedNode=(SNode)searchQuery.getNode();
    global_results.getSearchedNodePointers().add(new SNodePointer(searchedNode));
    List<SearchResult> results=new ArrayList<SearchResult>();
    try {
      BaseFinder finder_=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
      boolean rightConcept=finder_.getConcept().equals(SNodeOperations.getParent(searchedNode,null,false,false).getConceptFqName());
      rightConcept=true;
      if (!(rightConcept)) {
        OverridingMethods_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + finder_.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
      }
 else {
        boolean isApplicable=finder_.isApplicable(SNodeOperations.getParent(searchedNode,null,false,false));
        if (!(isApplicable)) {
          OverridingMethods_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + finder_.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
        }
 else {
          SearchResults results_=finder_.find(new SearchQuery(SNodeOperations.getParent(searchedNode,null,false,false),searchQuery.getScope()));
          for (          SearchResult result : results_.getSearchResults()) {
            results.add(result);
          }
        }
      }
    }
 catch (    Throwable t) {
      OverridingMethods_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:"+ t.getMessage());
    }
{
      ICursor<SearchResult> _zCursor=CursorFactory.createCursor(results);
      try {
        while (_zCursor.moveToNext()) {
          SearchResult result=_zCursor.getCurrent();
{
            SNode classNode=(SNode)result.getNodePointer().getNode();
            Iterable<SNode> methodsOfSameKind;
            if (SNodeOperations.isInstanceOf(searchedNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
              methodsOfSameKind=SLinkOperations.getTargets(classNode,"method",true);
            }
 else {
              methodsOfSameKind=SLinkOperations.getTargets(classNode,"staticMethod",true);
            }
{
              ICursor<SNode> _zCursor1=CursorFactory.createCursor(methodsOfSameKind);
              try {
                while (_zCursor1.moveToNext()) {
                  SNode sMethod=_zCursor1.getCurrent();
                  if (SPropertyOperations.getString(sMethod,"name").equals(SPropertyOperations.getString(searchedNode,"name")) && SLinkOperations.getCount(sMethod,"parameter") == SLinkOperations.getCount(searchedNode,"parameter")) {
                    boolean same=true;
                    for (int i=0; i < SLinkOperations.getCount(sMethod,"parameter"); i=i + 1) {
                      String searchedParamType=Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(ListOperations.getElement(SLinkOperations.getTargets(searchedNode,"parameter",true),i),"type",true));
                      String foundParamType=Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(ListOperations.getElement(SLinkOperations.getTargets(sMethod,"parameter",true),i),"type",true));
                      if (!(foundParamType.equals(searchedParamType))) {
                        same=false;
                      }
                    }
                    if (same) {
                      global_results.getSearchResults().add(new SearchResult(new SNodePointer(sMethod),"Overriding Methods"));
                    }
                  }
                }
              }
  finally {
                _zCursor1.release();
              }
            }
          }
        }
      }
  finally {
        _zCursor.release();
      }
    }
  }
  return global_results;
}
