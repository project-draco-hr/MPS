{
  monitor.start("generating files",1);
  try {
    info("handling output...");
    IFile targetDir=FileSystem.getInstance().getFileByPath(SModuleOperations.getOutputPathFor(inputModel));
    long startJobTime=System.currentTimeMillis();
    if (status.isOk()) {
      JavaStreamHandler javaStreamHandler=new JavaStreamHandler(inputModel,targetDir,myProcessor);
      try {
        TextFacility tf=new TextFacility(status);
        tf.generateDebug(true).failNoTextGen(false);
        tf.toTextModel();
        tf.updateBaseLangDeps(javaStreamHandler);
        tf.updateDebugInfo();
        tf.serializeOutcome(javaStreamHandler);
        tf.serializeCaches(javaStreamHandler,BLDependenciesCache.getInstance().getGenerator(),TraceInfoCache.getInstance().getGenerator(),GenerationDependenciesCache.getInstance().getGenerator());
        if (!tf.getErrors().isEmpty()) {
          info("there were errors:");
          for (          IMessage m : tf.getErrors()) {
            myLogger.info(m.getText());
          }
          return false;
        }
      }
  finally {
        javaStreamHandler.dispose();
      }
    }
    if (myLogger.needsInfo()) {
      myLogger.info("output generated in " + (System.currentTimeMillis() - startJobTime) + " ms");
    }
    return true;
  }
  finally {
    monitor.done();
  }
}
