{
  SNode mtd=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(),"classifier",false),"method",true)).first();
  int idx=0;
  List<SNode> ptypes=SLinkOperations.getTargets(SNodeOperations.cast(_context.getNode(),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
  SNode cl=(SNode)Values.LITERAL.get(_context,_context.getNode());
  List<SNode> litParams=SLinkOperations.getTargets(cl,"parameter",true);
  List<SNode> res=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode pdecl : SLinkOperations.getTargets(mtd,"parameter",true)) {
    SNode pd=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
    SNode ptype=SLinkOperations.getTarget(pdecl,"type",true);
    if (SNodeOperations.isInstanceOf(ptype,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      List<SNode> psib=SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(SNodeOperations.cast(ptype,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false),false);
      SLinkOperations.setTarget(pd,"type",ClassifierTypeUtil.copyTypeRecursively(ListSequence.fromList(ptypes).getElement(ListSequence.fromList(psib).count())),true);
    }
 else {
      SLinkOperations.setTarget(pd,"type",SNodeOperations.copyNode(ptype),true);
    }
    SPropertyOperations.set(pd,"name",SPropertyOperations.getString(ListSequence.fromList(litParams).getElement(idx),"name"));
    idx++;
    ListSequence.fromList(res).addElement(pd);
  }
  return res;
}
