{
  Language language=as_gt0k3c_a0a0a1(model.getModule(),Language.class);
  if (language == null) {
    return Collections.emptyList();
  }
  Deque<Language> languagesToVisit=DequeSequence.fromDeque(new LinkedList<Language>());
  Set<Language> visibleLanguages=SetSequence.fromSet(new HashSet<Language>());
  DequeSequence.fromDeque(languagesToVisit).addLastElement(language);
  SetSequence.fromSet(visibleLanguages).addElement(language);
  while (DequeSequence.fromDeque(languagesToVisit).isNotEmpty()) {
    Language nextLanguage=DequeSequence.fromDeque(languagesToVisit).removeFirstElement();
    for (    SModuleReference extendedLangRef : SetSequence.fromSet(nextLanguage.getExtendedLanguageRefs())) {
      Language extendedLanguage=as_gt0k3c_a0a0a1a7a1(extendedLangRef.resolve(nextLanguage.getRepository()),Language.class);
      if (extendedLanguage != null && !(SetSequence.fromSet(visibleLanguages).contains(extendedLanguage))) {
        SetSequence.fromSet(visibleLanguages).addElement(extendedLanguage);
        DequeSequence.fromDeque(languagesToVisit).addLastElement(extendedLanguage);
      }
    }
  }
  return SetSequence.fromSet(visibleLanguages).select(new ISelector<Language,SModel>(){
    public SModel select(    Language it){
      return it.getStructureModelDescriptor();
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return it != null;
    }
  }
).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel it){
      return (Iterable<SNode>)it.getRootNodes();
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(metaConcept));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
    }
  }
);
}
