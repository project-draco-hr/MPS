{
  Graph graph=((Graph)layout.getGraph());
  List<Rectangle> rects=ListSequence.<Rectangle>fromList(new ArrayList<Rectangle>());
  ListSequence.<Rectangle>fromList(rects).addSequence(Sequence.<Rectangle>fromIterable(MapSequence.fromMap(layout.getNodeLayout()).values()));
  ListSequence.<Rectangle>fromList(rects).addSequence(Sequence.<Rectangle>fromIterable(MapSequence.fromMap(layout.getLabelLayout()).values()));
  for (int i=0; i < ListSequence.<Rectangle>fromList(rects).count(); i++) {
    for (int j=i + 1; j < ListSequence.<Rectangle>fromList(rects).count(); j++) {
      Assert.assertFalse(ListSequence.<Rectangle>fromList(rects).getElement(i).intersects(ListSequence.<Rectangle>fromList(rects).getElement(j)));
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    List<Point> path=layout.getEdgeLayout(edge);
    for (    Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      if (ListSequence.<Node>fromList(edge.getAdjacentNodes()).contains(node)) {
        continue;
      }
      Rectangle rect=layout.getNodeLayout(node);
      Assert.assertFalse(GeomUtil.intersects(rect,path));
    }
    for (    IEdge labeledEdge : SetSequence.<IEdge>fromSet(MapSequence.fromMap(layout.getLabelLayout()).keySet())) {
      if (labeledEdge == edge) {
        continue;
      }
      Rectangle rect=layout.getLabelLayout(labeledEdge);
      Assert.assertFalse(GeomUtil.intersects(rect,path));
    }
  }
}
