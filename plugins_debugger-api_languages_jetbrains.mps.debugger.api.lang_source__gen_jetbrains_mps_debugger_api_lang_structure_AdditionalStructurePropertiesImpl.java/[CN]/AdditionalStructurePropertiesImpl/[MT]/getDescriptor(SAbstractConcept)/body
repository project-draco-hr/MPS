{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0o.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BreakpointCreator;
      }
    break;
case 1:
  if (true) {
    return props_BreakpointableNodeItem;
  }
break;
case 2:
if (true) {
return props_ConceptDeclarationReference;
}
break;
case 3:
if (true) {
return props_ConceptFunctionParameter_Concept;
}
break;
case 4:
if (true) {
return props_ConceptFunctionParameter_Debug_Project;
}
break;
case 5:
if (true) {
return props_ConceptFunctionParameter_DebuggableNode;
}
break;
case 6:
if (true) {
return props_ConceptFunction_CreateBreakpoint;
}
break;
case 7:
if (true) {
return props_ConceptFunction_IsApplicableBreakpoint;
}
break;
case 8:
if (true) {
return props_CreateBreakpointOperation;
}
break;
case 9:
if (true) {
return props_DebuggerConfiguration;
}
break;
case 10:
if (true) {
return props_DebuggerReference;
}
break;
case 11:
if (true) {
return props_DebuggerType;
}
break;
case 12:
if (true) {
return props_GetDebuggerSettings_Function;
}
break;
default :
}
}
throw new IllegalStateException();
}
