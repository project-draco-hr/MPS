{
  final SNodeTextGen textGen=this;
  textGen.appendNewLine();
  if (isEmptyString(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")))) {
    textGen.foundError("enum constant without name");
    textGen.appendWithIndent("???");
  }
 else {
    textGen.appendWithIndent(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
  }
  textGen.append("(");
{
    Iterable<SNode> collection=SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"));
    final SNode lastItem=Sequence.fromIterable(collection).last();
    for (    SNode item : collection) {
      textGen.appendNode(item);
      if (item != lastItem) {
        textGen.append(", ");
      }
    }
  }
  textGen.append(")");
  if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc367388b3L,0x6d60019ab157734L,"method"))).isNotEmpty()) {
    textGen.append(" {");
    textGen.appendNewLine();
    textGen.increaseDepth();
    for (    SNode imd : SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc367388b3L,0x6d60019ab157734L,"method"))) {
      textGen.appendNode(imd);
    }
    textGen.decreaseDepth();
    textGen.appendNewLine();
    textGen.appendWithIndent("}");
  }
}
