{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0jb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractPrintExpression;
      }
    break;
case 1:
  if (true) {
    return props_BLCommand;
  }
break;
case 2:
if (true) {
return props_BLExpression;
}
break;
case 3:
if (true) {
return props_Command;
}
break;
case 4:
if (true) {
return props_CommandHolder;
}
break;
case 5:
if (true) {
return props_ConsoleRoot;
}
break;
case 6:
if (true) {
return props_ExceptionHolder;
}
break;
case 7:
if (true) {
return props_GeneratedCommand;
}
break;
case 8:
if (true) {
return props_HelpCommand;
}
break;
case 9:
if (true) {
return props_HelpConceptReference;
}
break;
case 10:
if (true) {
return props_History;
}
break;
case 11:
if (true) {
return props_HistoryItem;
}
break;
case 12:
if (true) {
return props_IActionHolder;
}
break;
case 13:
if (true) {
return props_IClickable;
}
break;
case 14:
if (true) {
return props_INodeWithReference;
}
break;
case 15:
if (true) {
return props_InterpretedCommand;
}
break;
case 16:
if (true) {
return props_ModifiedCommandHistoryItem;
}
break;
case 17:
if (true) {
return props_NewLineResponseItem;
}
break;
case 18:
if (true) {
return props_NodeReferencePresentation;
}
break;
case 19:
if (true) {
return props_NodeReferenceString;
}
break;
case 20:
if (true) {
return props_NodeResponseItem;
}
break;
case 21:
if (true) {
return props_NodeWithClosure;
}
break;
case 22:
if (true) {
return props_OutputConsoleRoot;
}
break;
case 23:
if (true) {
return props_PastedNodeReference;
}
break;
case 24:
if (true) {
return props_PrintExpression;
}
break;
case 25:
if (true) {
return props_PrintNodeExpression;
}
break;
case 26:
if (true) {
return props_PrintNodeReferenceExpression;
}
break;
case 27:
if (true) {
return props_PrintSequenceExpression;
}
break;
case 28:
if (true) {
return props_PrintTextExpression;
}
break;
case 29:
if (true) {
return props_ProjectExpression;
}
break;
case 30:
if (true) {
return props_ProjectScope;
}
break;
case 31:
if (true) {
return props_Response;
}
break;
case 32:
if (true) {
return props_ResponseItem;
}
break;
case 33:
if (true) {
return props_TextResponseItem;
}
break;
default :
}
}
throw new IllegalStateException();
}
