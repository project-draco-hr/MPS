{
  return calculateScope(classNode,kind,new _FunctionTypes._return_P0_E0<Scope>(){
    public Scope invoke(){
      Scope result=null;
      if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
        result=FieldDeclarationScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
 else       if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
        result=EnumConstantDeclarationScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
 else       if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.Property")) {
        result=PropertyScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
 else       if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
        result=StaticFieldDeclarationScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
 else       if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
        result=StaticMethodDeclarationScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
 else       if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
        result=InstanceMethodDeclarationScope.forClass(classNode,extendsClass,implementedInterfaces);
      }
      return result;
    }
  }
);
}
