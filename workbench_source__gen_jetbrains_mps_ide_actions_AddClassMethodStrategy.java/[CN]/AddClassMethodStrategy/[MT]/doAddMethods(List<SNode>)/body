{
  boolean insertion=myContextMethod != null && SNodeOperations.getParent(myContextMethod) == myClassConcept;
  List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> methods=new ArrayList<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>();
  for (  SNode m : baseMethods) {
    SNode methodNode=SNodeOperations.cast(m,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SNode method=((SNode)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(methodNode,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"call_getMethodToImplement_69709522611978987",new Class[]{SNode.class,SNode.class},myClassConcept));
    methods.add(new StratergyAddMethodDialog.ContainerStrategy.MethodAddition(methodNode,method));
    SPropertyOperations.set(method,"isAbstract","" + false);
    SLinkOperations.setTarget(method,"body",SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myClassConcept),"jetbrains.mps.baseLanguage.structure.StatementList",null),true);
    if (insertion) {
      ListSequence.<SNode>fromList(SLinkOperations.getTargets(myClassConcept,"method",true)).insertElement(ListSequence.<SNode>fromList(SLinkOperations.getTargets(myClassConcept,"method",true)).indexOf(myContextMethod) + 1,method);
    }
 else {
      ListSequence.<SNode>fromList(SLinkOperations.getTargets(myClassConcept,"method",true)).addElement(method);
    }
  }
  return methods;
}
