{
  if (subtype == null)   return null;
  if (pattern.match(subtype))   return subtype;
  if ("jetbrains.mps.bootstrap.helgins.structure.MeetType".equals(subtype.getConceptFqName())) {
    List<SNode> children=subtype.getChildren("argument");
    for (    SNode child : children) {
      SNode result=coerceSubtyping(child,pattern,isWeak,equationManager);
      if (result != null)       return result;
    }
    return null;
  }
  if (myTypeChecker.isGenerationMode()) {
    SubtypingCache cache=myTypeChecker.getSubtypingCache();
    if (cache != null) {
      Pair<Boolean,SNode> nodePair=cache.getCoerced(subtype,pattern);
      if (nodePair.o1) {
        return nodePair.o2;
      }
    }
  }
  CoersionMatcher coersionMatcher=new CoersionMatcher(pattern);
  boolean success=searchInSupertypes(NodeWrapper.fromNode(subtype,equationManager),coersionMatcher,null,null,isWeak);
  SNode result;
  if (!success) {
    result=null;
  }
 else {
    result=coersionMatcher.getResult();
  }
  if (myTypeChecker.isGenerationMode()) {
    SubtypingCache cache=myTypeChecker.getSubtypingCache();
    if (cache != null) {
      cache.addCacheEntry(subtype,pattern,result);
    }
  }
  return result;
}
