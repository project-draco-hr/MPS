{
  StructuralNodeSet<?> frontier=new StructuralNodeSet();
  StructuralNodeSet<?> newFrontier=new StructuralNodeSet();
  StructuralNodeSet<?> yetPassed=new StructuralNodeSet();
  if (subRepresentator == null) {
    return false;
  }
  long millisStart=System.currentTimeMillis();
  frontier.add(subRepresentator.getNode());
  while (!frontier.isEmpty()) {
    StructuralNodeSet<?> ancestors=new StructuralNodeSet();
    for (    SNode node : frontier) {
      ancestors.addAllStructurally(collectImmediateSupertypes(node,isWeak));
      yetPassed.add(node);
    }
    for (    SNode passedNode : yetPassed) {
      ancestors.removeStructurally(passedNode);
    }
    ArrayList<SNode> ancestorsSorted=new ArrayList<SNode>(ancestors);
    Collections.sort(ancestorsSorted,new Comparator<SNode>(){
      public int compare(      SNode o1,      SNode o2){
        return o2.depth() - o1.depth();
      }
    }
);
    for (    SNode ancestor : ancestorsSorted) {
      if (superRepresentator.matchesWith(NodeWrapper.createWrapperFromNode(ancestor,equationManager),equationManager,errorInfo)) {
        long millisEnd=System.currentTimeMillis();
        if (superRepresentator instanceof NodeWrapper) {
          myTypeChecker.getStatistics().addCheckedInequation(subRepresentator.getNode(),((NodeWrapper)superRepresentator).getNode(),millisEnd - millisStart);
        }
        return true;
      }
    }
    newFrontier.addAllStructurally(ancestors);
    yetPassed.addAllStructurally(ancestors);
    frontier=newFrontier;
    newFrontier=new StructuralNodeSet();
  }
  long millisEnd=System.currentTimeMillis();
  if (superRepresentator instanceof NodeWrapper) {
    myTypeChecker.getStatistics().addCheckedInequation(subRepresentator.getNode(),((NodeWrapper)superRepresentator).getNode(),millisEnd - millisStart);
  }
  return false;
}
