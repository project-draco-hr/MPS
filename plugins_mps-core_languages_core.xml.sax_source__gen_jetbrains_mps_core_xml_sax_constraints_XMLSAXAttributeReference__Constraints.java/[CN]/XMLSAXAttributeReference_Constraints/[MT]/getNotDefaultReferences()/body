{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attribute",new BaseReferenceConstraintsDescriptor("attribute",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode creator=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeCreator",true,false);
          List<SNode> n=ListSequence.fromList(new ArrayList<SNode>());
          if ((creator != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(creator),"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule")) {
            ListSequence.fromList(n).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(creator),"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule"),"attrs",true)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getBoolean(it,"isRequired");
              }
            }
));
          }
          return n;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_4osf4s_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
