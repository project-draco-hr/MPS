{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attribute",new BaseReferenceConstraintsDescriptor("attribute",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          if (SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule",true,false) != SNodeOperations.getParent(_context.getParameterNode())) {
            SNode nodeRule=SNodeOperations.as(SNodeOperations.getParent(_context.getParameterNode()),"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule");
            return ((nodeRule == null ? "<unknown>" : SPropertyOperations.getString(nodeRule,"name"))) + "." + SPropertyOperations.getString(_context.getParameterNode(),"name");
          }
          return SPropertyOperations.getString(_context.getParameterNode(),"name");
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_4osf4s_a0a2a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            Scope scope=Scope.getScope(_context.getContextNode(),_context.getContextRole(),_context.getPosition(),(SNode)SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.sax.structure.XMLSAXAttributeRule"));
            return (scope == null ? new EmptyScope() : scope);
          }
        }
      }
;
    }
  }
);
  return references;
}
