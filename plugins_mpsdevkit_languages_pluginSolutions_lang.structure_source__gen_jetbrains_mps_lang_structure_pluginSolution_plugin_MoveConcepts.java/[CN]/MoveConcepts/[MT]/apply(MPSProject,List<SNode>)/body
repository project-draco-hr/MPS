{
  final List<SNode> conceptsToMove=Sequence.fromIterable(SNodeOperations.ofConcept(nodesToMove,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).toListSequence();
  final SModel sourceModel=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
  final Language sourceLanguage=Language.getLanguageFor(sourceModel);
  MoveNodesUI moveNodesUI=MoveNodesUI.MoveNodesUIImpl.getInstance();
  final Wrappers._boolean hasGenerator=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      hasGenerator.value=ListSequence.fromList(conceptsToMove).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode node){
          return ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).isNotEmpty();
        }
      }
);
    }
  }
);
  if (hasGenerator.value) {
    moveNodesUI.showWarningDialog(project,"Generator fragments will not be moved.","Move concepts");
  }
  final Wrappers._T<List<SModelReference>> structureModels=new Wrappers._T<List<SModelReference>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<SModule> modules=project.getRepository().getModules();
      structureModels.value=Sequence.fromIterable(modules).ofType(Language.class).select(new ISelector<Language,SModelReference>(){
        public SModelReference select(        Language it){
          return it.getStructureModelDescriptor().getReference();
        }
      }
).toListSequence();
    }
  }
);
  final SModelReference targetModelRef=SModelReferenceDialog.getSelectedModel(project.getProject(),structureModels.value);
  if (targetModelRef == null) {
    return;
  }
  final MoveNodesUI.WhetherWriteMigration writeMigration=moveNodesUI.askAboutMigration(project);
  if (writeMigration == MoveNodesUI.WhetherWriteMigration.CANCEL) {
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      final SModel targetModel=targetModelRef.resolve(project.getRepository());
      if (targetModel == null) {
        return;
      }
      final Language targetLanguage=(Language)targetModel.getModule();
      final Map<LanguageAspect,List<SNode>> aspectsMap=MoveConceptUtil.getAspectNodes(sourceLanguage,conceptsToMove);
      SearchResults<SNode> searchResults=new SearchResults<SNode>();
      Iterable<SNode> aspectNodes=MapSequence.fromMap(aspectsMap).translate(new ITranslator2<IMapping<LanguageAspect,List<SNode>>,SNode>(){
        public Iterable<SNode> translate(        IMapping<LanguageAspect,List<SNode>> it){
          return it.value();
        }
      }
);
      searchResults.addAll(nodesToRefactoringResult(conceptsToMove,aspectNodes,"concept aspect"));
      Set<SReference> refUsages=findUsages(project,ListSequence.fromList(nodesToMove).concat(Sequence.fromIterable(aspectNodes)));
      searchResults.addAll(nodesToRefactoringResult(nodesToMove,SetSequence.fromSet(refUsages).select(new ISelector<SReference,SNode>(){
        public SNode select(        SReference it){
          return it.getSourceNode();
        }
      }
),"reference"));
      if (writeMigration == MoveNodesUI.WhetherWriteMigration.WRITE_MIGRATION) {
        updateReferences(project,searchResults,refUsages,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
          public void invoke(          final Set<SNode> included){
            Map<SNode,SModel> moveAspects=MapSequence.fromMap(new HashMap<SNode,SModel>());
            for (            SNode concept : ListSequence.fromList(conceptsToMove)) {
              MapSequence.fromMap(moveAspects).put(concept,targetModel);
            }
            for (            LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectsMap).keySet())) {
              SModel toModel=aspect.getOrCreate(targetLanguage);
              for (              SNode aspectNode : ListSequence.fromList(MapSequence.fromMap(aspectsMap).get(aspect)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SetSequence.fromSet(included).contains(it);
                }
              }
)) {
                MapSequence.fromMap(moveAspects).put(aspectNode,toModel);
              }
            }
            Map<SNode,SNode> copyMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
            MoveConceptUtil.copyNodesToModels(moveAspects,copyMap);
            for (            SNode concept : ListSequence.fromList(conceptsToMove)) {
              SNode oldConcept=concept;
              SNode newConcept=SNodeOperations.cast(MapSequence.fromMap(copyMap).get(concept),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
              AttributeOperations.setAttribute(oldConcept,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x11d0a70ae54L,"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")),createDeprecatedNodeAnnotation_u6ijv2_a0c0g0d0a0o0a91a4("The concept was moved to language \"" + targetModel.getModule().getModuleName() + "\""));
              MigrationScriptBuilder builder=MigrationScriptBuilder.createMigrationScript(sourceLanguage).setName("Move_concept_" + SPropertyOperations.getString(oldConcept,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
              builder.appendExecuteStatements(MoveConceptUtil.replaceExactInstances(oldConcept,newConcept,builder));
              builder.addDependency(targetModel).addDependency(SModelRepository.getInstance().getModelDescriptor("jetbrains.mps.lang.structure.plugin"));
              sourceLanguage.addDependency(targetLanguage.getModuleReference(),false);
              targetLanguage.addDependency(sourceLanguage.getModuleReference(),false);
              MigrationScriptBuilder executeAfterBuilder=MigrationScriptBuilder.createMigrationScript(targetLanguage).setName("Move_concept_" + SPropertyOperations.getString(oldConcept,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
              SNodeOperations.replaceWithAnother(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(executeAfterBuilder.getScript(),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member")),MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x59e9926e840d7db2L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.ClassLikeMemberPlaceholder"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x59e9926e840d7db2L,0x59e9926e840d7db5L,"decl")) == SNodeOperations.getNode("90746344-04fd-4286-97d5-b46ae6a81709/r:52a3d974-bd4f-4651-ba6e-a2de5e336d95(jetbrains.mps.lang.migration/jetbrains.mps.lang.migration.methods)","8260330507834347594");
                }
              }
).first(),_quotation_createNode_u6ijv2_a0a21a6a3a0a41a0t0e(builder.getScript()));
              executeAfterBuilder.addDependency(SNodeOperations.getModel(builder.getScript()));
            }
            MoveConceptUtil.setExtendsDependencies(conceptsToMove,sourceModel,sourceLanguage,targetLanguage);
          }
        }
,new MoveNodesUI.MoveNodesUIImpl());
      }
      if (writeMigration == MoveNodesUI.WhetherWriteMigration.LOCALLY) {
        final Set<SNode> instances=FindUsagesManager.getInstance().findInstances(GlobalScope.getInstance(),SetSequence.fromSetWithValues(new HashSet<SAbstractConcept>(),ListSequence.fromList(conceptsToMove).select(new ISelector<SNode,SAbstractConcept>(){
          public SAbstractConcept select(          SNode it){
            return SNodeOperations.asSConcept(it);
          }
        }
)),false,new EmptyProgressMonitor());
        updateReferences(project,searchResults,refUsages,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
          public void invoke(          final Set<SNode> included){
            Map<SAbstractConcept,Tuples._2<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>> sConceptMap=MapSequence.fromMap(new HashMap<SAbstractConcept,Tuples._2<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>>());
            for (            SNode concept : ListSequence.fromList(conceptsToMove)) {
              SAbstractConcept oldConcept=SNodeOperations.asSConcept(concept);
              MoveConcepts.ConceptInfo oldConceptInfo=new MoveConcepts.ConceptInfo(oldConcept);
              for (              SNode prop : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6cL,"propertyDeclaration")))) {
                ListSequence.fromList(oldConceptInfo.propMap).addElement(MetaAdapterByDeclaration.getProperty(prop));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"reference","reference");
                }
              }
)) {
                ListSequence.fromList(oldConceptInfo.refMap).addElement(MetaAdapterByDeclaration.getReferenceLink(link));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
                }
              }
)) {
                ListSequence.fromList(oldConceptInfo.childMap).addElement(MetaAdapterByDeclaration.getContainmentLink(link));
              }
              concept.getModel().removeRootNode(concept);
              targetModel.addRootNode(concept);
              SAbstractConcept newConcept=SNodeOperations.asSConcept(concept);
              MoveConcepts.ConceptInfo newConceptInfo=new MoveConcepts.ConceptInfo(newConcept);
              for (              SNode prop : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6cL,"propertyDeclaration")))) {
                ListSequence.fromList(newConceptInfo.propMap).addElement(MetaAdapterByDeclaration.getProperty(prop));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"reference","reference");
                }
              }
)) {
                ListSequence.fromList(newConceptInfo.refMap).addElement(MetaAdapterByDeclaration.getReferenceLink(link));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
                }
              }
)) {
                ListSequence.fromList(newConceptInfo.childMap).addElement(MetaAdapterByDeclaration.getContainmentLink(link));
              }
              MapSequence.fromMap(sConceptMap).put(oldConcept,MultiTuple.<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>from(oldConceptInfo,newConceptInfo));
            }
            for (            LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectsMap).keySet())) {
              SModel toModel=aspect.getOrCreate(targetLanguage);
              for (              SNode aspectNode : ListSequence.fromList(MapSequence.fromMap(aspectsMap).get(aspect)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SetSequence.fromSet(included).contains(it);
                }
              }
)) {
                aspectNode.getModel().removeRootNode(aspectNode);
                toModel.addRootNode(aspectNode);
              }
            }
            for (            final SNode instance : SetSequence.fromSet(instances)) {
              for (              SAbstractConcept concept : SetSequence.fromSet(MapSequence.fromMap(sConceptMap).keySet()).where(new IWhereFilter<SAbstractConcept>(){
                public boolean accept(                SAbstractConcept it){
                  return instance.isInstanceOfConcept(it);
                }
              }
)) {
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().propMap).count(); i++) {
                  RefactoringRuntime.changePropertyInstance(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().propMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().propMap).getElement(i));
                }
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().refMap).count(); i++) {
                  RefactoringRuntime.changeReferenceLinkInstances(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().refMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().refMap).getElement(i));
                }
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().childMap).count(); i++) {
                  RefactoringRuntime.changeContainmentLinkInstance(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().childMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().childMap).getElement(i));
                }
                if (instance.getConcept().equals(concept)) {
                  RefactoringRuntime.replaceWithNewConcept(instance,MapSequence.fromMap(sConceptMap).get(instance.getConcept())._1().concept);
                }
              }
            }
            MoveConceptUtil.setExtendsDependencies(conceptsToMove,sourceModel,sourceLanguage,targetLanguage);
          }
        }
,new MoveNodesUI.MoveNodesUIImpl());
      }
    }
  }
);
}
