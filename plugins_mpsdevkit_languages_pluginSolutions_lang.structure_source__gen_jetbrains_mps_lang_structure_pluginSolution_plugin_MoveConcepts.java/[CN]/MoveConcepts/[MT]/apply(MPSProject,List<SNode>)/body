{
  final List<SNode> conceptsToMove=Sequence.fromIterable(SNodeOperations.ofConcept(nodesToMove,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).toListSequence();
  final SModel sourceModel=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
  final Language sourceLanguage=Language.getLanguageFor(sourceModel);
  MoveNodesUI moveNodesUI=MoveNodesUI.MoveNodesUIImpl.getInstance();
  final Wrappers._boolean hasGenerator=new Wrappers._boolean(false);
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      hasGenerator.value=ListSequence.fromList(conceptsToMove).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode node){
          return ListSequence.fromList(AbstractConceptDeclaration_BehaviorDescriptor.findGeneratorFragments_id5zMz2aJEI4B.invoke(node)).isNotEmpty();
        }
      }
);
    }
  }
);
  if (hasGenerator.value) {
    moveNodesUI.showWarningDialog(project,"Generator fragments will not be moved.","Move concepts");
  }
  final Wrappers._T<List<SModelReference>> structureModels=new Wrappers._T<List<SModelReference>>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      Iterable<SModule> modules=project.getRepository().getModules();
      structureModels.value=Sequence.fromIterable(modules).ofType(Language.class).select(new ISelector<Language,SModelReference>(){
        public SModelReference select(        Language it){
          return it.getStructureModelDescriptor().getReference();
        }
      }
).toListSequence();
    }
  }
);
  final SModelReference targetModelRef=SModelReferenceDialog.getSelectedModel(project.getProject(),structureModels.value);
  if (targetModelRef == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      SModel targetModel=targetModelRef.resolve(project.getRepository());
      final Language targetLanguage=(Language)targetModel.getModule();
      final Map<LanguageAspect,List<SNode>> aspectsMap=MoveConceptUtil.getAspectNodes(sourceLanguage,conceptsToMove);
      List<ToMoveItem> moveAspects=ListSequence.fromList(new ArrayList<ToMoveItem>());
      ListSequence.fromList(moveAspects).addElement(new ToMoveItem(conceptsToMove,new NodeLocation.NodeLocationRoot(targetModel)));
      for (      LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectsMap).keySet())) {
        ListSequence.fromList(moveAspects).addElement(new ToMoveItem(MapSequence.fromMap(aspectsMap).get(aspect),new NodeLocation.NodeLocationRootWithAspectModelCreation(targetLanguage,aspect)));
      }
      MoveNodesDefault.doMove(project,moveAspects,new Runnable(){
        public void run(){
          for (          IMapping<LanguageAspect,List<SNode>> aspectItem : MapSequence.fromMap(aspectsMap)) {
            SModelOperations.validateLanguagesAndImports(aspectItem.key().get(targetLanguage),true,true);
          }
          sourceLanguage.addDependency(targetLanguage.getModuleReference(),false);
          targetLanguage.addDependency(sourceLanguage.getModuleReference(),false);
          MoveConceptUtil.setExtendsDependencies(conceptsToMove,sourceModel,sourceLanguage,targetLanguage);
        }
      }
);
    }
  }
);
}
