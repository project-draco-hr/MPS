{
  final List<SNode> conceptsToMove=(List<SNode>)target;
  MoveNodesUI moveNodesUI=MoveNodesUI.MoveNodesUIImpl.getIsntance();
  final Wrappers._boolean hasGenerator=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      hasGenerator.value=ListSequence.fromList(conceptsToMove).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode node){
          return ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node)).isNotEmpty();
        }
      }
);
    }
  }
);
  if (hasGenerator.value) {
    moveNodesUI.showWarningDialog(project,"Generator fragments will not be moved.","Move concepts");
  }
  final Wrappers._T<List<SModelReference>> structureModels=new Wrappers._T<List<SModelReference>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<SModule> modules=project.getRepository().getModules();
      structureModels.value=Sequence.fromIterable(modules).ofType(Language.class).select(new ISelector<Language,SModelReference>(){
        public SModelReference select(        Language it){
          return it.getStructureModelDescriptor().getReference();
        }
      }
).toListSequence();
    }
  }
);
  final SModelReference targetModelRef=SModelReferenceDialog.getSelectedModel(project.getProject(),structureModels.value);
  if (targetModelRef == null) {
    return;
  }
  final MoveNodesUI.WhetherWriteMigration writeMigration=moveNodesUI.askAboutMigration(project);
  if (writeMigration == MoveNodesUI.WhetherWriteMigration.CANCEL) {
    return;
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      for (      SNode concept : ListSequence.fromList(conceptsToMove)) {
        if (!(SNodeUtil.isAccessible(concept,project.getRepository()))) {
          return;
        }
      }
      final SModel targetModel=targetModelRef.resolve(project.getRepository());
      if (targetModel == null) {
        return;
      }
      if (writeMigration == MoveNodesUI.WhetherWriteMigration.WRITE_MIGRATION) {
        MoveConceptUtil.moveConcepts(conceptsToMove,targetModel);
      }
      if (writeMigration == MoveNodesUI.WhetherWriteMigration.LOCALLY) {
        final Set<SReference> refUsages=findUsages(project,conceptsToMove);
        SearchResults<SNode> searchResults=nodesToRefactoringResult(conceptsToMove,SetSequence.fromSet(refUsages).select(new ISelector<SReference,SNode>(){
          public SNode select(          SReference it){
            return it.getSourceNode();
          }
        }
),"reference");
        final Set<SNode> instances=FindUsagesManager.getInstance().findInstances(GlobalScope.getInstance(),SetSequence.fromSetWithValues(new HashSet<SAbstractConcept>(),ListSequence.fromList(conceptsToMove).select(new ISelector<SNode,SAbstractConcept>(){
          public SAbstractConcept select(          SNode it){
            return SNodeOperations.asSConcept(it);
          }
        }
)),false,new EmptyProgressMonitor());
        searchResults.addAll(nodesToRefactoringResult(conceptsToMove,instances,"instance"));
        RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
          public void invoke(          Set<SNode> included){
            Map<SReference,SNode> usagesMap=classifyUsages(refUsages);
            Map<SAbstractConcept,Tuples._2<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>> sConceptMap=MapSequence.fromMap(new HashMap<SAbstractConcept,Tuples._2<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>>());
            for (            SNode concept : ListSequence.fromList(conceptsToMove)) {
              SAbstractConcept oldConcept=SNodeOperations.asSConcept(concept);
              MoveConcepts.ConceptInfo oldConceptInfo=new MoveConcepts.ConceptInfo(oldConcept);
              for (              SNode prop : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6cL,"propertyDeclaration")))) {
                ListSequence.fromList(oldConceptInfo.propMap).addElement(MetaAdapterByDeclaration.getProperty(prop));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"reference","reference");
                }
              }
)) {
                ListSequence.fromList(oldConceptInfo.refMap).addElement(MetaAdapterByDeclaration.getReferenceLink(link));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
                }
              }
)) {
                ListSequence.fromList(oldConceptInfo.childMap).addElement(MetaAdapterByDeclaration.getContainmentLink(link));
              }
              concept.getModel().removeRootNode(concept);
              targetModel.addRootNode(concept);
              SAbstractConcept newConcept=SNodeOperations.asSConcept(concept);
              MoveConcepts.ConceptInfo newConceptInfo=new MoveConcepts.ConceptInfo(newConcept);
              for (              SNode prop : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6cL,"propertyDeclaration")))) {
                ListSequence.fromList(newConceptInfo.propMap).addElement(MetaAdapterByDeclaration.getProperty(prop));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"reference","reference");
                }
              }
)) {
                ListSequence.fromList(newConceptInfo.refMap).addElement(MetaAdapterByDeclaration.getReferenceLink(link));
              }
              for (              SNode link : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
                }
              }
)) {
                ListSequence.fromList(newConceptInfo.childMap).addElement(MetaAdapterByDeclaration.getContainmentLink(link));
              }
              MapSequence.fromMap(sConceptMap).put(oldConcept,MultiTuple.<MoveConcepts.ConceptInfo,MoveConcepts.ConceptInfo>from(oldConceptInfo,newConceptInfo));
            }
            for (            IMapping<SReference,SNode> mapping : MapSequence.fromMap(usagesMap)) {
              updateUsage(mapping.key(),mapping.value());
            }
            for (            final SNode instance : SetSequence.fromSet(instances)) {
              if (MapSequence.fromMap(sConceptMap).containsKey(instance.getConcept())) {
                SNode newInstance=RefactoringRuntime.copyWithNewConcept(instance,MapSequence.fromMap(sConceptMap).get(instance.getConcept())._1().concept);
                SNodeOperations.replaceWithAnother(((SNode)instance),newInstance);
              }
              for (              SAbstractConcept concept : SetSequence.fromSet(MapSequence.fromMap(sConceptMap).keySet()).where(new IWhereFilter<SAbstractConcept>(){
                public boolean accept(                SAbstractConcept it){
                  return instance.isInstanceOfConcept(it);
                }
              }
)) {
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().propMap).count(); i++) {
                  RefactoringRuntime.changePropertyInstance(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().propMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().propMap).getElement(i));
                }
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().refMap).count(); i++) {
                  RefactoringRuntime.changeReferenceLinkInstances(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().refMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().refMap).getElement(i));
                }
                for (int i=0; i < ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().childMap).count(); i++) {
                  RefactoringRuntime.changeContainmentLinkInstance(instance,ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._0().childMap).getElement(i),ListSequence.fromList(MapSequence.fromMap(sConceptMap).get(concept)._1().childMap).getElement(i));
                }
              }
            }
          }
        }
,"Move concepts");
      }
    }
  }
);
}
