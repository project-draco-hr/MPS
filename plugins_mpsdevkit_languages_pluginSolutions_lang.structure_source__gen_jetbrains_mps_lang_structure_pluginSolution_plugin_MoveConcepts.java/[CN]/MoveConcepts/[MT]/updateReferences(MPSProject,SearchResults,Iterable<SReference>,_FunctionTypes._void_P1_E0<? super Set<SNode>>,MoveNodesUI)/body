{
  RefactoringViewUtil.refactor(mpsProject,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
    public void invoke(    final Set<SNode> included){
      executeBefore.invoke(included);
      Map<SReference,SNode> usagesMap=classifyUsages(Sequence.fromIterable(refUsages).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return SetSequence.fromSet(included).contains(it.getSourceNode());
        }
      }
));
      for (      IMapping<SReference,SNode> mapping : MapSequence.fromMap(usagesMap)) {
        updateUsage(mapping.key(),mapping.value());
      }
    }
  }
,"Move concepts");
}
