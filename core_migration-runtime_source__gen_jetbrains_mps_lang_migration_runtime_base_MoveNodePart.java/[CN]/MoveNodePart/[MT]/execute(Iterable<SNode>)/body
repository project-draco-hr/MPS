{
  Sequence.fromIterable(nodes).translate(new ITranslator2<SNode,SReference>(){
    public Iterable<SReference> translate(    SNode it){
      return SNodeOperations.getReferences(it);
    }
  }
).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return eq_8rsufn_a0a0a0a0a0a0a9(myFrom,it.getTargetNodeReference());
    }
  }
).visitAll(new IVisitor<SReference>(){
    public void visit(    SReference it){
      updateUsage(it,myTo);
    }
  }
);
}
