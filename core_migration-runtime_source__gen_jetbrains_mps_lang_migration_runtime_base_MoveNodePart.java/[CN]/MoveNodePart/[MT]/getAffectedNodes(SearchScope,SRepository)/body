{
  Iterable<SReference> references;
  SNode targetFromNode=myFrom.resolve(repository);
{
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return CommandUtil.createScope(searchScope);
      }
    }
;
    if (targetFromNode != null) {
      references=CommandUtil.usages(CommandUtil.createConsoleScope(null,false,context),targetFromNode);
    }
 else {
      references=CommandUtil.references(CommandUtil.createConsoleScope(null,false,context));
    }
  }
  return Sequence.fromIterable(references).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return eq_8rsufn_a0a0a0a0a0a0d0h(myFrom,it.getTargetNodeReference());
    }
  }
).select(new ISelector<SReference,SNodeReference>(){
    public SNodeReference select(    SReference it){
      return it.getSourceNode().getReference();
    }
  }
).toListSequence();
}
