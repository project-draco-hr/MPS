{
  if (myEditedNodeReference != null) {
    e.setAttribute(EDITED_NODE,SNodePointer.serialize(myEditedNodeReference));
  }
  Element selectionStack=new Element(SELECTION_STACK);
  e.addContent(selectionStack);
  for (  SelectionInfo selectionInfo : mySelectionStack) {
    Element stackElement=new Element(STACK_ELEMENT);
    ((SelectionInfoImpl)selectionInfo).persistToXML(stackElement);
    selectionStack.addContent(stackElement);
  }
  Element errorLabels=new Element(ERROR_LABELS);
  e.addContent(errorLabels);
  for (  Entry<CellInfo,String> errorTextEntry : myErrorTexts.entrySet()) {
    Element errorLabelElement=new Element(ERROR_LABEL);
    errorLabelElement.setAttribute(ERROR_TEXT,errorTextEntry.getValue());
    ((DefaultCellInfo)errorTextEntry.getKey()).saveTo(errorLabelElement);
    errorLabels.addContent(errorLabelElement);
  }
  boolean success=true;
  Element folded=new Element(FOLDED);
  for (  CellInfo cellInfo : myFolded) {
    if (cellInfo instanceof DefaultCellInfo) {
      Element foldedElement=new Element(FOLDED_ELEMENT);
      ((DefaultCellInfo)cellInfo).saveTo(foldedElement);
      folded.addContent(foldedElement);
    }
 else {
      success=false;
      break;
    }
  }
  if (success) {
    e.addContent(folded);
  }
  e.setAttribute(VIEW_POSITION_X,String.valueOf(myViewPosition.x));
  e.setAttribute(VIEW_POSITION_Y,String.valueOf(myViewPosition.y));
  if (myEnabledHints != null) {
    Element hintsElement=new Element(ENABLED_HINTS);
    for (    String hint : myEnabledHints) {
      Element hintElement=new Element(ENABLED_HINTS_ELEMENT);
      hintElement.setAttribute(ENABLED_HINTS_ATTRIBUTE,hint);
      hintsElement.addContent(hintElement);
    }
    e.addContent(hintsElement);
  }
}
