{
  Memento memento=new Memento();
  Attribute editedNodeAttribute=e.getAttribute(EDITED_NODE);
  if (editedNodeAttribute != null) {
    memento.myEditedNodeReference=SNodePointer.deserialize(editedNodeAttribute.getValue());
  }
  Element selectionStack=e.getChild(SELECTION_STACK);
  if (selectionStack != null) {
    List children=selectionStack.getChildren(STACK_ELEMENT);
    for (    Object o : children) {
      memento.mySelectionStack.add(new SelectionInfoImpl((Element)o));
    }
  }
  Element errorMarkers=e.getChild(ERROR_MARKERS);
  if (errorMarkers != null) {
    memento.myErrors.addAll(ErrorMarker.loadMarkers(errorMarkers));
  }
  Element transactionalProperties=e.getChild(TRANSACTIONAL_PROPERTIES);
  if (transactionalProperties != null) {
    memento.myTransactionalProperties.addAll(TransactionalPropertyState.load(transactionalProperties));
  }
  Element collapsed=e.getChild(COLLAPSED);
  if (collapsed != null) {
    List<Element> children=collapsed.getChildren(COLLAPSED_ELEMENT);
    for (    Element collapsedElement : children) {
      memento.myCollapseStates.add(new Pair<CellInfo,Boolean>(DefaultCellInfo.loadFrom(collapsedElement.getChild(CELL_ID_ELEMENT)),Boolean.valueOf(collapsedElement.getAttributeValue(COLLAPSED_VALUE))));
    }
  }
  try {
    int viewPositionX=Integer.valueOf(e.getAttributeValue(VIEW_POSITION_X));
    int viewPositionY=Integer.valueOf(e.getAttributeValue(VIEW_POSITION_Y));
    memento.myViewPosition=new Point(viewPositionX,viewPositionY);
  }
 catch (  NumberFormatException nfe) {
  }
  Element hintsElement=e.getChild(ENABLED_HINTS);
  if (hintsElement != null) {
    List<String> enabledHints=new ArrayList<String>();
    List children=hintsElement.getChildren(ENABLED_HINTS_ELEMENT);
    for (    Object o : children) {
      enabledHints.add(((Element)o).getAttributeValue(ENABLED_HINTS_ATTRIBUTE));
    }
    memento.myEnabledHints=enabledHints.toArray(new String[enabledHints.size()]);
  }
  return memento;
}
