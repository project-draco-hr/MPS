{
  Memento memento=new Memento();
  Attribute editedNodeAttribute=e.getAttribute(EDITED_NODE);
  if (editedNodeAttribute != null) {
    memento.myEditedNodeReference=SNodePointer.deserialize(editedNodeAttribute.getValue());
  }
  Element selectionStack=e.getChild(SELECTION_STACK);
  if (selectionStack != null) {
    List children=selectionStack.getChildren(STACK_ELEMENT);
    for (    Object o : children) {
      memento.mySelectionStack.add(new SelectionInfoImpl((Element)o));
    }
  }
  Element errorLabels=e.getChild(ERROR_LABELS);
  if (errorLabels != null) {
    for (    Element errorLabelElement : errorLabels.getChildren(ERROR_LABEL)) {
      String errorText=errorLabelElement.getAttributeValue(ERROR_TEXT);
      CellInfo cellInfo=DefaultCellInfo.loadFrom(errorLabelElement);
      memento.myErrorTexts.put(cellInfo,errorText);
    }
  }
  Element folded=e.getChild(FOLDED);
  if (folded != null) {
    List children=folded.getChildren(FOLDED_ELEMENT);
    for (    Object o : children) {
      memento.myFolded.add(DefaultCellInfo.loadFrom((Element)o));
    }
  }
  try {
    int viewPositionX=Integer.valueOf(e.getAttributeValue(VIEW_POSITION_X));
    int viewPositionY=Integer.valueOf(e.getAttributeValue(VIEW_POSITION_Y));
    memento.myViewPosition=new Point(viewPositionX,viewPositionY);
  }
 catch (  NumberFormatException nfe) {
  }
  Element hintsElement=e.getChild(ENABLED_HINTS);
  if (hintsElement != null) {
    List<String> enabledHints=new ArrayList<String>();
    List children=hintsElement.getChildren(ENABLED_HINTS_ELEMENT);
    for (    Object o : children) {
      enabledHints.add(((Element)o).getAttributeValue(ENABLED_HINTS_ATTRIBUTE));
    }
    memento.myEnabledHints=enabledHints.toArray(new String[enabledHints.size()]);
  }
  return memento;
}
