{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.builders.structure.BuilderContainer"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{"constructor"});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{"setter"});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.Builder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BuilderContainer",null,true,new String[]{},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.baseLanguage.builders.structure.BuilderContainer","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.BuilderStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.builders.structure.BuilderContainer"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.ResultExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{"declaration"});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"child"});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression","jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression"},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration","jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"root","leaf","isAbstract"},new String[]{"extends"});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration","jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration"},new String[]{},new String[]{"extended"});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"parameter"});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression","jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{"declaration"});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent","jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue","jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression"},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"extendsBuilder"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
