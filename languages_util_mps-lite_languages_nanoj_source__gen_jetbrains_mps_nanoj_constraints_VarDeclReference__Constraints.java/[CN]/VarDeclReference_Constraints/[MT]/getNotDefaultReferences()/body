{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("declaration",new BaseReferenceConstraintsDescriptor("declaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
          SNode currentStatement=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.nanoj.structure.NanoStatement",true,false);
          while (currentStatement != null) {
            SNode currentBlock=SNodeOperations.getAncestorWhereConceptInList(currentStatement,new String[]{"jetbrains.mps.nanoj.structure.NanoStatementList"},false,false);
            if ((currentBlock == null)) {
              break;
            }
            for (            SNode statement : ListSequence.fromList(SNodeOperations.getChildren(currentBlock)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.nanoj.structure.NanoStatement");
              }
            }
)) {
              if (statement == currentStatement) {
                break;
              }
              ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(statement,"jetbrains.mps.nanoj.structure.VarDecl",false,new String[]{})));
            }
            currentStatement=SNodeOperations.getAncestor(currentBlock,"jetbrains.mps.nanoj.structure.NanoStatement",true,false);
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_6gh6zs_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
