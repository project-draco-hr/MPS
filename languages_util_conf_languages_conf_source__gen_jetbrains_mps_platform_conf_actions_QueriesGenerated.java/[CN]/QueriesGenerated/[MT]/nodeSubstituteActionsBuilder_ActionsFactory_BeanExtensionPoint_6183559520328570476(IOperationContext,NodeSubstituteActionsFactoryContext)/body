{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.BeanExtensionPoint");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return ListSequence.fromList((new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.CLASS,operationContext.getScope()).getClassifiers())).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode cls){
              return SNodeOperations.as(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept");
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode node){
              return BeanUtil.isBean(node);
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode bep=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.BeanExtensionPoint",null);
              SLinkOperations.setTarget(bep,"beanClass",(item),false);
              return bep;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.BeanExtensionPoint"),"conceptAlias") + " " + "beanClass"+ "="+ BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getFqName_1213877404258",new Object[]{});
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
