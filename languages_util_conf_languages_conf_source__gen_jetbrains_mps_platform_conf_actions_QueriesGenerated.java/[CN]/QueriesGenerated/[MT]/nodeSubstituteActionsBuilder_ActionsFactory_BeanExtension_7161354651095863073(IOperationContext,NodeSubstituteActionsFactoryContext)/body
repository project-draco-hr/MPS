{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.BeanExtension");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.platform.conf.structure.BeanExtensionPoint");
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.<INodeSubstituteAction>fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode be=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.BeanExtension",null);
              SLinkOperations.setTarget(be,"extensionPoint",(item),false);
              for (              String pn : BeanExtensionPoint_Behavior.call_propertyNames_618741292999315209((item))) {
                SNode bea=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.BeanExtensionAttribute",null);
                SPropertyOperations.set(bea,"name",pn);
                ListSequence.<SNode>fromList(SLinkOperations.getTargets(be,"attribute",true)).addElement(bea);
              }
              return be;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
