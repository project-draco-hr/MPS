{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.BeanExtensionAttribute");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          return Sequence.fromIterable(BeanExtensionPoint_Behavior.call_propertyNames_618741292999315209(SLinkOperations.getTarget(SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.platform.conf.structure.BeanExtension"),"extensionPoint",false))).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode bea=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.BeanExtensionAttribute",null);
              SPropertyOperations.set(bea,"name",(item));
              return bea;
            }
            public String getMatchingText(            String pattern){
              return (item) + "=";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
