{
  SNode c1=key.o1;
  SNode c2=key.o2;
  if (SNodeUtil.isInstanceOfConceptDeclaration(c1) && SNodeUtil.isInstanceOfConceptDeclaration(c2)) {
    SNode conceptDeclaration1=c1;
    SNode conceptDeclaration2=c2;
    while (conceptDeclaration1 != null) {
      while (conceptDeclaration2 != null) {
        Pair<SNode,SNode> newKey=new Pair<SNode,SNode>(conceptDeclaration1,conceptDeclaration2);
        Set<T> rules=myRules.get(newKey);
        if (rules != null) {
          if (conceptDeclaration1 != key.o1 || conceptDeclaration2 != key.o2) {
            myRules.put(key,rules);
          }
          return rules;
        }
        conceptDeclaration2=SNodeUtil.getConceptDeclaration_Extends(conceptDeclaration2);
      }
      conceptDeclaration2=c2;
      conceptDeclaration1=SNodeUtil.getConceptDeclaration_Extends(conceptDeclaration1);
    }
  }
  Set<T> hashSet=new THashSet<T>(1);
  myRules.put(key,hashSet);
  return hashSet;
}
