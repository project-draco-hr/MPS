{
  DataSource ds=model.getSource();
  if (ds instanceof FileDataSource) {
    IFile file=((FileDataSource)ds).getFile();
    if (!(file.exists())) {
      return null;
    }
    VirtualFile vFile=VirtualFileUtils.getVirtualFile(file);
    if (vFile == null || ProjectLevelVcsManager.getInstance(project).getVcsFor(vFile) == null) {
      return null;
    }
    Object content=BaseVersionUtil.getBaseVersionContent(vFile,project);
    if (content == null) {
      FileStatus status=FileStatusManager.getInstance(project).getStatus(vFile);
      if (status != FileStatus.NOT_CHANGED) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Base version content is null while file status is " + status);
        }
      }
      return null;
    }
    String ext=vFile.getExtension();
    return (content instanceof String ? PersistenceUtil.loadModel((String)content,ext) : PersistenceUtil.loadModel((byte[])content,ext));
  }
 else   if (ds instanceof FilePerRootDataSource) {
    FilePerRootDataSource rds=(FilePerRootDataSource)ds;
    Map<String,Object> content=MapSequence.fromMap(new HashMap<String,Object>());
    for (    String stream : rds.getAvailableStreams()) {
      IFile file=rds.getFile(stream);
      VirtualFile vFile=VirtualFileUtils.getVirtualFile(file);
      if (vFile == null) {
        continue;
      }
      Object o=BaseVersionUtil.getBaseVersionContent(vFile,project);
      if (o == null) {
        continue;
      }
      MapSequence.fromMap(content).put(stream,o);
    }
    return PersistenceUtil.loadPerRootModel(content);
  }
  return null;
}
