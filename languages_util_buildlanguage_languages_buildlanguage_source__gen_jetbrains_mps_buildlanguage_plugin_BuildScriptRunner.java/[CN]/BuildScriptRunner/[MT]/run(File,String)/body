{
  this.myComponent.setRunnerActions(null);
  List<String> parameters=ListSequence.fromList(new ArrayList<String>());
  BuildScriptRunner.addBasicParameters(parameters,file);
  BuildScriptRunner.addMacroValues(parameters);
  if (commandLine != null && StringUtils.isNotEmpty(commandLine)) {
    List<String> commandLineList=Sequence.fromIterable(Sequence.fromArray(commandLine.split("\\s+"))).toListSequence();
    ListSequence.fromList(parameters).addSequence(ListSequence.fromList(commandLineList));
  }
  ProcessBuilder builder=new ProcessBuilder(ListSequence.fromListWithValues(new ArrayList<String>(),parameters));
  builder.directory(file.getParentFile());
  try {
    final Process process=builder.start();
    this.myComponent.setRunnerActions(new BuildScriptRunnerComponent.RunnerActions(){
      public void kill(){
        process.destroy();
      }
      public void pause(){
      }
      public void play(){
      }
    }
);
    BuildScriptRunner.BaseOutputReader input=new BuildScriptRunner.BaseOutputReader(process.getInputStream()){
      protected void addMessage(      final String message){
        ModelAccess.instance().runReadInEDT(new Runnable(){
          public void run(){
            BuildScriptRunner.this.myComponent.addMessage(message);
          }
        }
);
      }
    }
;
    input.start();
    BuildScriptRunner.BaseOutputReader error=new BuildScriptRunner.BaseOutputReader(process.getErrorStream()){
      protected void addMessage(      final String message){
        ModelAccess.instance().runReadInEDT(new Runnable(){
          public void run(){
            BuildScriptRunner.this.myComponent.addError(message);
          }
        }
);
      }
    }
;
    error.start();
  }
 catch (  IOException exception) {
  }
}
