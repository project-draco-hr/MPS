{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("constraintConcept",new BaseReferenceConstraintsDescriptor("constraintConcept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SConceptPropertyOperations.getString(((SNode)_context.getParameterNode()),"alias");
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.modeling.structure.LayoutConstraint"),_context.getModel(),operationContext.getScope())).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SConceptPropertyOperations.getBoolean(it,"abstract"));
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_69bcs_a0a3a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
