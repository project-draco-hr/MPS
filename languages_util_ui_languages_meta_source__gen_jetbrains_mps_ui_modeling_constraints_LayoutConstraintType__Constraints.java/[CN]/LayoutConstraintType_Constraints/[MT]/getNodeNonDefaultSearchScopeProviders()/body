{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("constraintConcept",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      return SConceptPropertyOperations.getString(((SNode)_context.getParameterNode()),"alias");
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.modeling.structure.LayoutConstraint"),_context.getModel(),operationContext.getScope())).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SConceptPropertyOperations.getBoolean(it,"abstract"));
        }
      }
);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:3cad8b0f-ef3c-442c-8c6f-1ab422f65805(jetbrains.mps.ui.modeling.constraints)","7930737280446914702");
    }
  }
);
  return result;
}
