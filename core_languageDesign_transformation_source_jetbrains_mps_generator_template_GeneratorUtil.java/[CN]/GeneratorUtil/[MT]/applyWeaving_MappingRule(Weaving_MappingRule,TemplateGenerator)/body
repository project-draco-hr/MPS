{
  AbstractConceptDeclaration applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    generator.showErrorMessage(null,rule.getNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.getApplyToConceptInheritors();
  List<SNode> nodes=generator.getInputModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode applicableNode : nodes) {
    if (GeneratorUtil.checkCondition(rule.getConditionFunction(),false,applicableNode,rule.getNode(),generator)) {
      SNode outputContextNode=getContextNodeForWeavingingRule(applicableNode,rule,generator);
      if (outputContextNode == null) {
        generator.showErrorMessage(applicableNode,rule.getNode(),"couldn't find context node");
        continue;
      }
      generator.setChanged(true);
      boolean someOutputGenerated=true;
      generator.getGeneratorSessionContext().getGenerationTracer().pushInputNode(applicableNode);
      generator.getGeneratorSessionContext().getGenerationTracer().pushRule(rule.getNode());
      try {
        TemplateDeclaration template=rule.getTemplate();
        if (template != null) {
          weaveTemplateDeclaration(applicableNode,template,outputContextNode,rule,generator);
        }
 else {
          RuleConsequence ruleConsequence=rule.getRuleConsequence();
          if (ruleConsequence == null) {
            generator.showErrorMessage(applicableNode,null,rule.getNode(),"no rule consequence");
          }
 else {
            generator.getGeneratorSessionContext().getGenerationTracer().pushRuleConsequence(ruleConsequence.getNode());
            if (ruleConsequence instanceof TemplateDeclarationReference) {
              template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
              weaveTemplateDeclaration(applicableNode,template,outputContextNode,rule,generator);
            }
 else             if (ruleConsequence instanceof WeaveEach_RuleConsequence) {
              WeaveEach_RuleConsequence weaveEach=(WeaveEach_RuleConsequence)ruleConsequence;
              SourceSubstituteMacro_SourceNodesQuery query=weaveEach.getSourceNodesQuery();
              if (query == null) {
                generator.showErrorMessage(applicableNode,rule.getNode(),"couldn't create list of source nodes");
                break;
              }
              template=weaveEach.getTemplate();
              List<SNode> queryNodes=evaluateSourceNodesQuery(applicableNode,query,generator);
              if (queryNodes.isEmpty()) {
                someOutputGenerated=false;
              }
              for (              SNode queryNode : queryNodes) {
                weaveTemplateDeclaration(queryNode,template,outputContextNode,rule,generator);
              }
            }
 else {
              generator.showErrorMessage(applicableNode,null,ruleConsequence.getNode(),"unsapported rule consequence");
            }
          }
        }
      }
  finally {
        if (someOutputGenerated) {
          generator.getGeneratorSessionContext().getGenerationTracer().closeInputNode(applicableNode);
        }
 else {
          generator.getGeneratorSessionContext().getGenerationTracer().popInputNode(applicableNode);
        }
      }
    }
  }
}
