{
  SNode reductionTemplateNode=null;
  String ruleMappingName=getMappingName(rule,null);
  String mappingName=null;
  RuleConsequence ruleConsequence=rule.getRuleConsequence();
  if (ruleConsequence != null) {
    Pair<SNode,String> nodeAndMappingName=getTemplateNodeFromRuleConsequence(ruleConsequence,inputNode,rule.getNode(),generator);
    if (nodeAndMappingName == null) {
      generator.showErrorMessage(inputNode,null,ruleConsequence.getNode(),"error processing reduction rule consequence");
      return null;
    }
    reductionTemplateNode=nodeAndMappingName.o1;
    mappingName=nodeAndMappingName.o2 != null ? nodeAndMappingName.o2 : ruleMappingName;
  }
 else {
    TemplateDeclaration template=rule.getTemplate();
    if (template == null) {
      generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule: no template");
      return null;
    }
    TemplateFragment fragment=getFragmentFromTemplate(template,inputNode,rule.getNode(),generator);
    if (fragment != null) {
      reductionTemplateNode=fragment.getParent().getNode();
      mappingName=getMappingName(fragment,ruleMappingName);
    }
  }
  if (reductionTemplateNode == null) {
    generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule");
    return new ArrayList<SNode>();
  }
  try {
    return TemplateProcessor.createOutputNodesForTemplateNode(mappingName,reductionTemplateNode,inputNode,generator);
  }
 catch (  DismissTopMappingRuleException e) {
    throw e;
  }
catch (  TemplateProcessingFailureException e) {
    generator.showErrorMessage(inputNode,reductionTemplateNode,rule.getNode(),"error processing reduction rule");
  }
catch (  GenerationFailedException e) {
    if (e.getFailueInfo() != null)     e.getFailueInfo().setRuleNode(rule.getNode());
    throw e;
  }
catch (  Throwable t) {
    LOG.error(t,BaseAdapter.fromNode(reductionTemplateNode));
    generator.showErrorMessage(inputNode,reductionTemplateNode,rule.getNode(),"error processing reduction rule");
  }
  return new ArrayList<SNode>(1);
}
