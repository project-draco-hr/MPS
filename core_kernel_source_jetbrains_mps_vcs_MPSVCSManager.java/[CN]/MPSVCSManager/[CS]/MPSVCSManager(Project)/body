{
  myProject=project;
  myGenerationListener=new GenerationListener(){
    public void beforeGeneration(    List<Pair<SModelDescriptor,IOperationContext>> inputModels){
synchronized (myMonitor) {
        myGenerationRunning=true;
      }
    }
    public void modelsGenerated(    List<Pair<SModelDescriptor,IOperationContext>> models,    boolean success){
    }
    public void afterGeneration(    List<Pair<SModelDescriptor,IOperationContext>> inputModels){
synchronized (myMonitor) {
        myGenerationRunning=false;
        for (        Runnable task : myTasks) {
          SwingUtilities.invokeLater(task);
        }
        myTasks.clear();
      }
    }
  }
;
  myModelRepositoryListener=new SModelRepositoryAdapter(){
    @Override public void modelCreated(    SModelDescriptor modelDescriptor){
      final IFile ifile=modelDescriptor.getModelFile();
      if (ifile != null) {
        VirtualFile f=VFileSystem.getFile(ifile);
        if (f != null) {
          addInternal(Collections.singletonList(f));
        }
      }
    }
    @Override public void modelFileChanged(    IFile ifrom,    IFile ito){
      if (ifrom != null) {
        VirtualFile to=VFileSystem.getFile(ito);
        VirtualFile from=VFileSystem.getFile(ifrom);
        if (from != null) {
          renameInternal(from,to);
        }
      }
    }
    @Override public void beforeModelFileChanged(    SModelDescriptor modelDescriptor){
      Set<IModule> modules=modelDescriptor.getModules();
      for (      IModule m : modules) {
        VirtualFile file=VFileSystem.getFile(m.getGeneratorOutputPath());
        if (file != null) {
        }
      }
    }
  }
;
}
