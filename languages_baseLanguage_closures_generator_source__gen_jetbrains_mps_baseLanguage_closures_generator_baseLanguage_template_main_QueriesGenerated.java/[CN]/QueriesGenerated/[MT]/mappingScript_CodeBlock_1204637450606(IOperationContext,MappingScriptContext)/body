{
  if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
    for (    SNode cl : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(cl),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) || !(SNodeOperations.getContainingLinkRole(cl).equals("actualArgument"))) {
        continue;
      }
      SNode imco=SNodeOperations.cast(SNodeOperations.getParent(cl),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(imco),"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
        continue;
      }
      SNode de=SNodeOperations.cast(SNodeOperations.getParent(imco),"jetbrains.mps.baseLanguage.structure.DotExpression");
      if (SLinkOperations.getTarget(de,"operation",true) != imco) {
        continue;
      }
      List<SNode> args=SLinkOperations.getTargets(imco,"actualArgument",true);
      List<SNode> pdecls=SLinkOperations.getTargets(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"parameter",true);
      if ((SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(imco,"Actual arguments count != parameter declarations count");
      }
      SNode deOperandType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de,"operand",true));
      SNode operandType=SNodeOperations.as(deOperandType,"jetbrains.mps.baseLanguage.structure.ClassifierType");
      if ((operandType == null)) {
        operandType=TypeChecker.getInstance().getRuntimeSupport().coerce_(deOperandType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
      }
      Iterator<SNode> argsItr=ListSequence.fromList(args).iterator();
      for (      SNode pdecl : pdecls) {
        if (argsItr.hasNext()) {
          SNode arg=argsItr.next();
          SNode pdeclType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl,"type",true),operandType);
          FunctionTypeUtil.prepAdaptations(_context,FunctionTypeUtil.unmeet(pdeclType),arg);
        }
      }
    }
  }
 else {
    for (    SNode de : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
      if (_context.isDirty(de) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(de,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
        SNode imco=SNodeOperations.cast(SLinkOperations.getTarget(de,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
        List<SNode> args=SLinkOperations.getTargets(imco,"actualArgument",true);
        List<SNode> pdecls=SLinkOperations.getTargets(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"parameter",true);
        if ((SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(imco,"Actual arguments count != parameter declarations count");
        }
        Iterator<SNode> argsItr=ListSequence.fromList(args).iterator();
        for (        SNode pdecl : pdecls) {
          if (argsItr.hasNext()) {
            SNode arg=argsItr.next();
            if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
              if (!(SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
                continue;
              }
            }
            SNode operandType=SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de,"operand",true)),"jetbrains.mps.baseLanguage.structure.ClassifierType");
            if ((operandType == null)) {
              operandType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de,"operand",true)),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
            }
            SNode pdeclType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl,"type",true),operandType);
            FunctionTypeUtil.prepAdaptations(_context,FunctionTypeUtil.unmeet(pdeclType),arg);
          }
        }
      }
    }
  }
}
