{
  List<SNode> telist=ListSequence.fromListWithValues(new ArrayList<SNode>(),SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.ThisExpression"));
  for (  SNode te : telist) {
    if ((SLinkOperations.getTarget(te,"classConcept",false) == null)) {
      SNode cl=SNodeOperations.getAncestor(te,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",false,false);
      SNode thisCC=SNodeOperations.getAncestor(te,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
      if (SNodeOperations.isInstanceOf(thisCC,"jetbrains.mps.baseLanguage.structure.AnonymousClass") && SNodeOperations.getAncestor(cl,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) == thisCC) {
        SNode parent=SNodeOperations.getParent(te);
        if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          SNode op=SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
          if (SNodeOperations.isInstanceOf(op,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
            Flags.REMOVE_THIS.flag(_context,op);
          }
 else           if (SNodeOperations.isInstanceOf(op,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
            Flags.REMOVE_THIS.flag(_context,op);
          }
 else {
            _context.showErrorMessage(te,"'this' expression coulnd't be removed");
          }
        }
      }
    }
  }
}
