{
  SNode st;
  SNode t=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(),"expression",true));
  st=TypeChecker.getInstance().getRuntimeSupport().coerce_(t,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),true);
  if ((st == null)) {
    st=TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(t,"jetbrains.mps.lang.typesystem.structure.JoinType"),"argument",true)).getElement(0),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),true);
  }
  if ((st == null)) {
    st=TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(t,"jetbrains.mps.lang.typesystem.structure.JoinType"),"argument",true)).getElement(1),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),true);
  }
  return SLinkOperations.getTarget(st,"elementType",true);
}
