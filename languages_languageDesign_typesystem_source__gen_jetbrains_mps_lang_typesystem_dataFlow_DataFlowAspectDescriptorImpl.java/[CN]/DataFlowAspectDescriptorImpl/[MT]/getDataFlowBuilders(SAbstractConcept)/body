{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_vhxjlb_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<IDataFlowBuilder>singletonList(new AbstractCheckingRule_DataFlow());
      }
    break;
case 1:
  if (true) {
    return Collections.<IDataFlowBuilder>singletonList(new AbstractEquationStatement_DataFlow());
  }
break;
case 2:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AbstractSubtypingRule_DataFlow());
}
break;
case 3:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AddDependencyStatement_DataFlow());
}
break;
case 4:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ApplicableNodeCondition_DataFlow());
}
break;
case 5:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ApplicableNodeReference_DataFlow());
}
break;
case 6:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AssertStatement_DataFlow());
}
break;
case 7:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new CoerceExpression_DataFlow());
}
break;
case 8:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new CoerceStatement_DataFlow());
}
break;
case 9:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ComparisonRule_DataFlow());
}
break;
case 10:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ImmediateSupertypesExpression_DataFlow());
}
break;
case 11:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InequationReplacementRule_DataFlow());
}
break;
case 12:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InfoStatement_DataFlow());
}
break;
case 13:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new IsSubtypeExpression_DataFlow());
}
break;
case 14:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchStatement_DataFlow());
}
break;
case 15:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MatchStatementItem_DataFlow());
}
break;
case 16:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new MultipleForeachLoop_DataFlow());
}
break;
case 17:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new NormalTypeClause_DataFlow());
}
break;
case 18:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PatternCondition_DataFlow());
}
break;
case 19:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PropertyNameTarget_DataFlow());
}
break;
case 20:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ReferenceRoleTarget_DataFlow());
}
break;
case 21:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ReportErrorStatement_DataFlow());
}
break;
case 22:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SubstituteTypeRule_DataFlow());
}
break;
case 23:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TypeOfExpression_DataFlow());
}
break;
case 24:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TypeVarDeclaration_DataFlow());
}
break;
case 25:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TypeVarReference_DataFlow());
}
break;
case 26:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TypesystemIntention_DataFlow());
}
break;
case 27:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TypesystemIntentionArgument_DataFlow());
}
break;
case 28:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new WarningStatement_DataFlow());
}
break;
case 29:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new WhenConcreteStatement_DataFlow());
}
break;
default :
}
}
return Collections.<IDataFlowBuilder>emptyList();
}
