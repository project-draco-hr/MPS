{
  final DiagramCell diagramCell=new DiagramCell(editorContext,diagramNode){
    public Mapper<SNode,DiagramView> createMapper(    final SNode node){
      return new Mapper<SNode,DiagramView>(node,new ConnectionRoutingView(new OrthogonalRouter())){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.<SNode,View>forSimpleRole(this,SLinkOperations.getTargets(node,"blocks",true),getTarget().itemsView.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode node){
              EditorCell blockCell=editorContext.createNodeCell(node);
              if (blockCell instanceof BlockCell) {
                addEditorCell(blockCell);
                return ((BlockCell)blockCell).createMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.<SNode,Connection>forSimpleRole(this,SLinkOperations.getTargets(node,"connectors",true),getTarget().connections,new MapperFactory<SNode,Connection>(){
            public Mapper<? extends SNode,? extends Connection> createMapper(            SNode node){
              EditorCell connectorCell=editorContext.createNodeCell(node);
              if (connectorCell instanceof ConnectorCell) {
                addEditorCell(connectorCell);
                return ((ConnectorCell)connectorCell).createMapper();
              }
              return null;
            }
          }
));
        }
      }
;
    }
    public void synchronize(){
    }
    public Mapper<SNode,View> createDecorationMapper(    SNode node){
      return null;
    }
  }
;
  diagramCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext,new BasicCellContext(diagramNode),new SubstituteInfoPartExt[]{diagramCell.createNewDiagramNodeActions(diagramNode,SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","blocks"),new _FunctionTypes._void_P3_E0<SNode,Integer,Integer>(){
    public void invoke(    SNode node,    Integer x,    Integer y){
      SNode block=SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.Block");
      SPropertyOperations.set(block,"name","newBlock");
      SPropertyOperations.set(block,"x","" + (x));
      SPropertyOperations.set(block,"y","" + (y));
    }
  }
)}));
  return diagramCell;
}
