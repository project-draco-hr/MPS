{
  try {
    Migrations_ActionGroup.this.removeAll();
    Migrations_ActionGroup.this.addAction("jetbrains.mps.migration.component.plugin.ExecuteRerunnableMigrations_Action");
    Migrations_ActionGroup.this.addSeparator();
    for (    ProjectMigration pm : ListSequence.fromList(ProjectMigrationsRegistry.getInstance().getMigrations())) {
      Migrations_ActionGroup.this.addParameterizedAction(new RunProjectMigration_Action(pm),PluginId.getId("jetbrains.mps.migration.component"),pm);
    }
    Migrations_ActionGroup.this.addSeparator();
    Project project=event.getData(MPSCommonDataKeys.PROJECT);
    jetbrains.mps.project.Project mpsProject=event.getData(MPSCommonDataKeys.MPS_PROJECT);
    final MigrationComponent mc=((MigrationComponent)project.getComponent(MigrationManager.class));
    Set<SLanguage> languages=SetSequence.fromSet(new HashSet<SLanguage>());
{
      final SearchScope scope=CommandUtil.createScope(mpsProject);
      QueryExecutionContext context=new QueryExecutionContext(){
        public SearchScope getDefaultSearchScope(){
          return scope;
        }
      }
;
      for (      SModule module : Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null,false,context))).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule it){
          return MigrationsUtil.isModuleMigrateable(it);
        }
      }
)) {
        SetSequence.fromSet(languages).addSequence(SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended()));
      }
    }
    SetSequence.fromSet(languages).visitAll(new IVisitor<SLanguage>(){
      public void visit(      SLanguage it){
        for (int ver=0; ver < it.getLanguageVersion(); ver++) {
          MigrationScript script=mc.fetchMigrationScript(new MigrationScriptReference(it,ver),true);
          if (script == null) {
            continue;
          }
          Migrations_ActionGroup.this.addParameterizedAction(new RunMigration_Action(script),PluginId.getId("jetbrains.mps.migration.component"),script);
        }
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error("User group error",t);
  }
  for (  Pair<ActionPlace,Condition<BaseAction>> p : this.myPlaces) {
    this.addPlace(p.first,p.second);
  }
}
