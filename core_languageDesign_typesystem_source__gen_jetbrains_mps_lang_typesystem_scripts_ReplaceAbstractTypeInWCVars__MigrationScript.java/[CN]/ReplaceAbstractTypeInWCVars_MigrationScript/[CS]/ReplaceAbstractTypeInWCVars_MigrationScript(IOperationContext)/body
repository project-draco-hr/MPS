{
  super("replace abstract type in when concrete vars");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace abstract type in when concrete vars";
    }
    public String getAdditionalInfo(){
      return "replace abstract type in when concrete vars";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node,"type",true)),"jetbrains.mps.baseLanguage.structure.Type");
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setNewChild(node,"type","jetbrains.mps.baseLanguage.structure.UndefinedType");
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
