{
  for (  SNode classConcept : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
    if (eq_x583g4_a0a0a0a93(SLinkOperations.getTarget(classConcept,"superclass",true),SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a93().createNode(),"classifier",false)) && SPropertyOperations.getString(classConcept,"name").endsWith("_WrapperFactory")) {
      List<SNode> methodsToProcess=ListSequence.fromList(new ArrayList<SNode>());
      ListSequence.fromList(methodsToProcess).addElement(ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_x583g4_a0a0a0a0a0a0b0a0a0nb(BaseMethodDeclaration_Behavior.call_getBaseMethod_5014346297260519893(it),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a0a1a0a0a93().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false));
        }
      }
));
      ListSequence.fromList(methodsToProcess).addElement(ListSequence.fromList(SNodeOperations.getDescendants(classConcept,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_x583g4_a0a0a0a0a0a0c0a0a0nb(BaseMethodDeclaration_Behavior.call_getBaseMethod_5014346297260519893(it),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a0a2a0a0a93().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false));
        }
      }
));
      ListSequence.fromList(methodsToProcess).addElement(ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(it,"name").equals("getSubvaluesImpl");
        }
      }
));
      for (      SNode method : ListSequence.fromList(methodsToProcess)) {
        new Transformator(method,false).transform();
      }
    }
  }
}
