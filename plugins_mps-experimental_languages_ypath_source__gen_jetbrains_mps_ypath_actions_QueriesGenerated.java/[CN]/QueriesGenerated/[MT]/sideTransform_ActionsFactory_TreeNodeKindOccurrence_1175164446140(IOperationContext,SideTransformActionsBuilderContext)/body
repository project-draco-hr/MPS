{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        SNode tpoe=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",true,false);
        return (List<SNode>)ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),"jetbrains.mps.ypath.structure.TreePathAspect"),null,false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.TreeNodeKindProperty");
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.MatchPropertyOperation"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode tnko=SNodeOperations.cast(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreeNodeKindOccurrence");
            SNode mko=SNodeOperations.cast(SNodeOperations.getParent(tnko),"jetbrains.mps.ypath.structure.MatchKindOperation");
            SNode mpo=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.ypath.structure.MatchPropertyOperation",null);
            SNodeOperations.replaceWithAnother(mko,mpo);
            SLinkOperations.setTarget(SLinkOperations.getTarget(mpo,"nodeKindOccurrence",true),"nodeKind",SLinkOperations.getTarget(tnko,"nodeKind",false),false);
            SLinkOperations.setTarget(mpo,"property",(item),false);
            return mpo;
          }
          public String getMatchingText(          String pattern){
            return "." + SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "match property value";
          }
        }
);
      }
    }
  }
  return result;
}
