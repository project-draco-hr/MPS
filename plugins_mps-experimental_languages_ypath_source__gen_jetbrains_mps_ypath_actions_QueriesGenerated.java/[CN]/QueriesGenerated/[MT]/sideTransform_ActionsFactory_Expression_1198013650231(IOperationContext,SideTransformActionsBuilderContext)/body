{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<Triplet> parameterObjects=new Computable<Iterable<Triplet>>(){
      public Iterable<Triplet> compute(){
        List<Triplet> res=ListSequence.fromList(new ArrayList<Triplet>());
        SNode tpoe=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",true,false);
        if ((tpoe == null)) {
          return res;
        }
        SNode nodeType=SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.mps.ypath.structure.TreePathType"),"nodeType",true);
        for (        TraversalAxis axis : ListSequence.fromList(TraversalAxis.getConstants())) {
          ListSequence.fromList(res).addElement(new Triplet(axis,null,null));
          for (          SNode feat : Sequence.fromIterable(TreePath_Behavior.call_getFeature_1213877481312(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),nodeType))) {
            if (TraversalAxisUtil.isAcceptableFeatureForAxis(feat,axis)) {
              if (SPropertyOperations.getBoolean(feat,"default")) {
                ListSequence.fromList(res).addElement(new Triplet<TraversalAxis,SNode,SNode>(axis,feat,null));
              }
 else               if (SNodeOperations.isInstanceOf(feat,"jetbrains.mps.ypath.structure.IParamFeature")) {
                for (                SNode pw : ListSequence.fromList(IParamFeature_Behavior.call_getParameterObjects_1213877340242(SNodeOperations.cast(feat,"jetbrains.mps.ypath.structure.IParamFeature"),nodeType))) {
                  ListSequence.fromList(res).addElement(new Triplet<TraversalAxis,SNode,SNode>(axis,feat,pw));
                }
              }
 else {
                ListSequence.fromList(res).addElement(new Triplet<TraversalAxis,SNode,SNode>(axis,feat,null));
              }
            }
          }
        }
        return res;
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final Triplet item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            TraversalAxis axis=(TraversalAxis)(item).first();
            SNode feat=(SNode)(item).second();
            SNode pw=(SNode)(item).third();
            SNode tpoExp=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp,"operand",_context.getSourceNode(),true);
            SNode op=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.ypath.structure.IterateOperation",null);
            SPropertyOperations.set(SNodeFactoryOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.IterateOperation"),"axis",axis.getValue());
            if ((feat != null)) {
              SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp,"operation",true),"jetbrains.mps.ypath.structure.IterateOperation"),"usedFeature",feat,false);
              if (SPropertyOperations.getBoolean(feat,"default")) {
              }
 else               if ((pw != null)) {
                SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp,"operation",true),"jetbrains.mps.ypath.structure.IterateOperation"),"paramObject",pw,true);
              }
            }
            return tpoExp;
          }
          public String getMatchingText(          String pattern){
            TraversalAxis axis=(TraversalAxis)(item).first();
            SNode feat=(SNode)(item).second();
            SNode pw=(SNode)(item).third();
            String suffix="";
            if ((feat == null)) {
              suffix=" *";
            }
 else {
              if (SPropertyOperations.getBoolean(feat,"default")) {
                suffix="";
              }
 else               if ((pw != null)) {
                suffix=SPropertyOperations.getString(pw,"name");
              }
 else {
                suffix=SPropertyOperations.getString(feat,"name");
              }
            }
            return TraversalAxisUtil.getOperationSign(axis) + suffix;
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            TraversalAxis axis=(TraversalAxis)(item).first();
            SNode feat=(SNode)(item).second();
            SNode pw=(SNode)(item).third();
            String suffix="";
            if ((feat == null)) {
              suffix="all";
            }
 else {
              if (SPropertyOperations.getBoolean(feat,"default")) {
                suffix="default";
              }
 else               if ((pw != null)) {
                suffix=SPropertyOperations.getString(pw,"name") + " " + SPropertyOperations.getString(feat,"name");
              }
 else {
                suffix=SPropertyOperations.getString(feat,"name");
              }
            }
            return "iterate " + axis.getName() + " @"+ suffix;
          }
        }
);
      }
    }
  }
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode tpoExp=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
      SLinkOperations.setTarget(tpoExp,"operand",_context.getSourceNode(),true);
      SNodeFactoryOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.WhereOperation");
      return tpoExp;
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "where condition";
    }
  }
);
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        SNode tpoe=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",true,false);
        return (List<SNode>)ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),"jetbrains.mps.ypath.structure.TreePathAspect"),null,false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.TreeNodeKind");
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode tpoExp=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp,"operand",_context.getSourceNode(),true);
            SNode mnko=SNodeFactoryOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.MatchKindOperation");
            SLinkOperations.setTarget(SLinkOperations.getTarget(mnko,"nodeKindOccurrence",true),"nodeKind",(item),false);
            return tpoExp;
          }
          public String getMatchingText(          String pattern){
            return "[ " + SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "match node type";
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        SNode tpoe=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",true,false);
        return (List<SNode>)ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),"jetbrains.mps.ypath.structure.TreePathAspect"),null,false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.TreeNodeKindProperty") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.ypath.structure.TreeNodeKindProperty"),"default");
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode tpoExp=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp,"operand",_context.getSourceNode(),true);
            SNode mdpo=SNodeFactoryOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation");
            return tpoExp;
          }
          public String getMatchingText(          String pattern){
            return "[[ " + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent((item)),"jetbrains.mps.lang.core.structure.INamedConcept"),"name") + "."+ SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "match default property";
          }
        }
);
      }
    }
  }
  return result;
}
