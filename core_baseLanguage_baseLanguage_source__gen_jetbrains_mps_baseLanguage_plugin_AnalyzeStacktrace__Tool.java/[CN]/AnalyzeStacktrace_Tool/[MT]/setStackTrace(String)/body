{
  AnalyzeStacktrace_Tool.this.myStackTrace=str;
  AnalyzeStacktrace_Tool.this.textView.clear();
  String[] lines=str.split("\n");
  for (  String line : lines) {
    if (StringUtils.trim(line).startsWith(AnalyzeStacktrace_Tool.this.STRING_START)) {
      int start=line.indexOf(AnalyzeStacktrace_Tool.this.STRING_START) + AnalyzeStacktrace_Tool.this.STRING_START.length();
      String tmpStr=line.substring(start);
      int parenIndex=tmpStr.indexOf("(");
      String methodName=tmpStr.substring(0,parenIndex);
      int closingParenIndex=tmpStr.indexOf(")");
      String position=tmpStr.substring(parenIndex + 1,closingParenIndex);
      final SNode nodeToShow=AnalyzeStacktrace_Tool.this.getNodes(methodName,position);
      if (nodeToShow != null) {
        AnalyzeStacktrace_Tool.this.textView.print(line.substring(0,start + parenIndex + 1),ConsoleViewContentType.ERROR_OUTPUT);
        AnalyzeStacktrace_Tool.this.textView.printHyperlink(position,new HyperlinkInfo(){
          public void navigate(          Project p0){
            AnalyzeStacktrace_Tool.this.showNode(nodeToShow);
          }
        }
);
        AnalyzeStacktrace_Tool.this.textView.print(line.substring(start + closingParenIndex),ConsoleViewContentType.ERROR_OUTPUT);
        AnalyzeStacktrace_Tool.this.textView.print("\n",ConsoleViewContentType.ERROR_OUTPUT);
      }
 else {
        AnalyzeStacktrace_Tool.this.textView.print(line + "\n",ConsoleViewContentType.ERROR_OUTPUT);
      }
    }
 else {
      AnalyzeStacktrace_Tool.this.textView.print(line + "\n",ConsoleViewContentType.ERROR_OUTPUT);
    }
  }
}
