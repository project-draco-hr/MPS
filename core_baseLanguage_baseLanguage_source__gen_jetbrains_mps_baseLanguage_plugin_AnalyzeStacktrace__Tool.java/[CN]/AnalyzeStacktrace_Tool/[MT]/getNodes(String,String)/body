{
  int lastDot=method.lastIndexOf(".");
  lastDot=method.lastIndexOf(".",lastDot - 1);
  String pkg=method.substring(0,lastDot);
  for (  final SModelDescriptor descriptor : ListSequence.fromList(SModelRepository.getInstance().getModelDescriptors())) {
    if (ObjectUtils.equals(descriptor.getSModelFqName().getLongName(),pkg) && ObjectUtils.equals(descriptor.getStereotype(),"")) {
      IFile file=DebugInfo.getDebugFileOfModel(descriptor.getModule().getGeneratorOutputPath(),descriptor);
      if (file.exists()) {
        final DebugInfo result=DebugInfo.load(file);
        final Wrappers._T<SNode> nodeToShow=new Wrappers._T<SNode>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            List<SNode> nodes=result.getNodesForLine(position,descriptor.getSModel());
            for (            SNode n : ListSequence.fromList(nodes)) {
              if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.Statement")) {
                nodeToShow.value=n;
              }
            }
          }
        }
);
        return nodeToShow.value;
      }
    }
  }
  return null;
}
