{
  SNode inputSequenceType=RulesFunctions_Collections.get_inputSequenceType(argument);
  if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(SLinkOperations.getTarget(argument,"fromElement",true)),new QuotationClass_5().createNode()))) {
    TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(argument,"fromElement",true),"integer is expected");
  }
  if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(SLinkOperations.getTarget(argument,"toElement",true)),new QuotationClass_6().createNode()))) {
    TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(argument,"toElement",true),"integer is expected");
  }
  TypeChecker.getInstance().getRuntimeSupport().givetype(inputSequenceType,argument);
}
