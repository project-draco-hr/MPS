{
  final Map<Module,List<VirtualFile>> mapToFiles=CompilerUtil.buildModuleToFilesMap(context,files);
  context.getProgressIndicator().setText("Generating models ..");
  final Map<String,VirtualFile> vfile=new HashMap<String,VirtualFile>();
  final Map<MPSFacet,List<File>> moduleWithModels=new HashMap<MPSFacet,List<File>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      for (      Map.Entry<Module,List<VirtualFile>> e : mapToFiles.entrySet()) {
        MPSFacet facet=FacetManager.getInstance(e.getKey()).getFacetByType(MPSFacetType.ID);
        if (facet == null) {
          continue;
        }
        List<File> files=new ArrayList<File>();
        for (        VirtualFile file : e.getValue()) {
          final IFile modelFile=FileSystem.getInstance().getFileByPath(file.getPath());
          SModelDescriptor descr=SModelRepository.getInstance().findModel(modelFile);
          if (descr == null || !GenerationFacade.canGenerate(descr))           return;
          File iofile=new File(modelFile.getPath());
          files.add(iofile);
          vfile.put(com.intellij.openapi.util.io.FileUtil.toSystemIndependentName(iofile.getPath()),file);
        }
        if (files.size() > 0) {
          moduleWithModels.put(facet,files);
        }
      }
    }
  }
);
  if (moduleWithModels.isEmpty()) {
    return;
  }
  final Map<String,Collection<OutputItem>> outputs=new HashMap<String,Collection<OutputItem>>();
  final List<File> filesToRefresh=new ArrayList<File>();
  fakeGenerator(vfile,moduleWithModels,outputs,filesToRefresh);
  CompilerUtil.refreshIOFiles(filesToRefresh);
  for (  Map.Entry<String,Collection<OutputItem>> entry : outputs.entrySet()) {
    sink.add(entry.getKey(),entry.getValue(),VirtualFile.EMPTY_ARRAY);
  }
}
