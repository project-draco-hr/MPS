{
  for (  Map.Entry<MPSFacet,List<File>> chunk : moduleWithModels.entrySet()) {
    MPSFacet facet=chunk.getKey();
    String outputFolder=facet.getSolution().getGeneratorOutputPath();
    MessagesViewTool.log(myProject,MessageKind.INFORMATION,"Generating into " + outputFolder);
    List<OutputItem> outitems=new ArrayList<OutputItem>();
    for (    final File modelFile : chunk.getValue()) {
      final Set<File> modelsToMake=new HashSet<File>();
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          IFile file=FileSystem.getInstance().getFileByPath(modelFile.getAbsolutePath());
          EditableSModelDescriptor model=SModelRepository.getInstance().findModel(file);
          modelsToMake.add(new File(model.getModelFile().getPath()));
        }
      }
);
      MPSMakeConfiguration makeConfiguration=new MPSMakeConfiguration();
      makeConfiguration.addConfiguredModels(modelsToMake);
      makeConfiguration.addConfiguredLibrary(myProject.getName(),new File(myProject.getBaseDir().getPath()),false);
      final List<File> files=new ArrayList<File>();
      MPSMakeLauncher gl=new MPSMakeLauncher(makeConfiguration,myProject);
      gl.validate();
      if (gl.isValid()) {
        gl.launch(new MPSMakeCallback(){
          @Override public void fileWritten(          String path){
            files.add(new File(path));
          }
        }
);
      }
 else {
        MessagesViewTool.log(myProject,MessageKind.ERROR,"Invalid MPS make configuration, unable to make models");
      }
      for (      File file : files) {
        filesToRefresh.add(file);
        VirtualFile source=vfile.get(com.intellij.openapi.util.io.FileUtil.toSystemIndependentName(modelFile.getPath()));
        outitems.add(new OutputItemImpl(com.intellij.openapi.util.io.FileUtil.toSystemIndependentName(file.getPath()),source));
      }
    }
    outputs.put(outputFolder,outitems);
  }
}
