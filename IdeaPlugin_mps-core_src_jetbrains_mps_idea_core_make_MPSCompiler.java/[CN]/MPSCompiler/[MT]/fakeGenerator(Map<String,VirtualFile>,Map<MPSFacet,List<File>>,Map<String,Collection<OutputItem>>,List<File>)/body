{
  System.out.println("*** KUKU!");
  MPSGenerationLauncher gl=new MPSGenerationLauncher();
  gl.validate();
  if (gl.isValid()) {
    System.out.println("*** command line: " + gl.getCommandLine());
  }
 else {
    System.out.println("*** invalid :(");
  }
  for (  Map.Entry<MPSFacet,List<File>> chunk : moduleWithModels.entrySet()) {
    String outputFolder=chunk.getKey().getSolution().getGeneratorOutputPath();
    MessagesViewTool.log(myProject,MessageKind.INFORMATION,"Generating into " + outputFolder);
    List<OutputItem> outitems=new ArrayList<OutputItem>();
    for (    final File f : chunk.getValue()) {
      String packageName=f.getName();
      if (packageName.indexOf('.') > 0) {
        packageName=packageName.substring(0,packageName.indexOf('.'));
      }
      File output=new File(outputFolder,packageName);
      Collection<String> rootNames=ModelAccess.instance().runReadAction(new Computable<Collection<String>>(){
        @Override public Collection<String> compute(){
          IFile file=FileSystem.getInstance().getFileByPath(f.getAbsolutePath());
          EditableSModelDescriptor model=SModelRepository.getInstance().findModel(file);
          List<String> result=new ArrayList<String>();
          for (          SNode root : model.getSModel().roots()) {
            result.add(root.getName());
          }
          return result;
        }
      }
);
      for (      String root : rootNames) {
        File genFile=new File(output,root + ".java");
        String content="package " + packageName + ";\npublic class "+ root+ " {}";
        try {
          FileUtil.writeFile(genFile,content);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        filesToRefresh.add(genFile);
        VirtualFile source=vfile.get(com.intellij.openapi.util.io.FileUtil.toSystemIndependentName(f.getPath()));
        outitems.add(new OutputItemImpl(com.intellij.openapi.util.io.FileUtil.toSystemIndependentName(genFile.getPath()),source));
      }
    }
    outputs.put(outputFolder,outitems);
  }
}
