{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_8acy7z_a0a=null;
      final Iterable<MResource> input=(Iterable<MResource>)(Iterable)rawInput;
switch (0) {
case 0:
        progressMonitor.start("Copying resources",2);
      progressMonitor.step("Collecting");
    try {
      final List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
      final List<Tuples._2<IFile,IFile>> filesToCopy=ListSequence.fromList(new ArrayList<Tuples._2<IFile,IFile>>());
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Iterable<SModel> models=Sequence.fromIterable(input).translate(new ITranslator2<MResource,SModel>(){
            public Iterable<SModel> translate(            MResource res){
              return Sequence.fromIterable(res.models()).ofType(SModel.class).where(new IWhereFilter<SModel>(){
                public boolean accept(                SModel it){
                  return SModuleOperations.getOutputPathFor(it) != null;
                }
              }
);
            }
          }
);
          for (          final SModel model : Sequence.fromIterable(models)) {
            String output=SModuleOperations.getOutputPathFor(model);
            IFile outputRoot=Target_make.vars(pa.global()).pathToFile().invoke(output);
            final IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,outputRoot);
            final FilesDelta fd=new FilesDelta(outputDir);
            ListSequence.fromList(deltaList).addElement(fd);
            new StaleFilesCollector(outputDir).updateDelta(fd);
            ListSequence.fromList(SModelOperations.nodes(model,MetaAdapterFactory.getInterfaceConcept(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6caL,"jetbrains.mps.lang.resources.structure.Resource"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return isNotEmptyString(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6caL,0x7c8b08a50a39c6cbL,"path")));
              }
            }
).select(new ISelector<SNode,String>(){
              public String select(              SNode bin){
                return MacrosFactory.forModule((AbstractModule)model.getModule()).expandPath(SPropertyOperations.getString(bin,MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6caL,0x7c8b08a50a39c6cbL,"path")));
              }
            }
).where(new IWhereFilter<String>(){
              public boolean accept(              String p){
                return p != null;
              }
            }
).visitAll(new IVisitor<String>(){
              public void visit(              String it){
                IFile fromFile=FileSystem.getInstance().getFileByPath(it);
                IFile toFile=outputDir.getDescendant(fromFile.getName());
                fd.written(toFile);
                ListSequence.fromList(filesToCopy).addElement(MultiTuple.<IFile,IFile>from(fromFile,toFile));
              }
            }
);
          }
        }
      }
);
      Iterable<Tuples._2<IFile,IFile>> noSource=ListSequence.fromList(filesToCopy).where(new IWhereFilter<Tuples._2<IFile,IFile>>(){
        public boolean accept(        Tuples._2<IFile,IFile> it){
          return !(it._0().exists());
        }
      }
);
      Sequence.fromIterable(noSource).visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
        public void visit(        Tuples._2<IFile,IFile> it){
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("file not found " + it._0().getPath())));
        }
      }
);
      ListSequence.fromList(filesToCopy).removeSequence(Sequence.fromIterable(noSource));
      _output_8acy7z_a0a=Sequence.fromIterable(_output_8acy7z_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
      progressMonitor.advance(1);
      progressMonitor.step("Copying content");
      FileSystem.getInstance().runWriteTransaction(new Runnable(){
        public void run(){
          ListSequence.fromList(filesToCopy).visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
            public void visit(            Tuples._2<IFile,IFile> ftc){
              if (!(ftc._1().exists()) && !(ftc._1().createNewFile())) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("cannot write to file " + ftc._1())));
              }
 else {
                IFileUtils.copyFileContent(ftc._0(),ftc._1());
              }
            }
          }
);
        }
      }
);
    }
  finally {
      progressMonitor.done();
    }
default :
  return new IResult.SUCCESS(_output_8acy7z_a0a);
}
}
}
;
}
