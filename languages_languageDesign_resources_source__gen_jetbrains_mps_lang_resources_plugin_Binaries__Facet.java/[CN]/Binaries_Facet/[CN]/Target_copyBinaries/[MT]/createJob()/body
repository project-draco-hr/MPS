{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_8acy7z_a0a=null;
      final Iterable<MResource> input=(Iterable<MResource>)(Iterable)rawInput;
switch (0) {
case 0:
        progressMonitor.start("Copying resources",1);
      progressMonitor.step("Collecting");
    try {
      final Map<IFile,byte[]> dataToWrite=MapSequence.fromMap(new HashMap<IFile,byte[]>());
      final List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Iterable<SModel> models=Sequence.fromIterable(input).translate(new ITranslator2<MResource,SModel>(){
            public Iterable<SModel> translate(            MResource res){
              return Sequence.fromIterable(res.models()).ofType(SModel.class).where(new IWhereFilter<SModel>(){
                public boolean accept(                SModel it){
                  return SModuleOperations.getOutputPathFor(it) != null;
                }
              }
);
            }
          }
);
          for (          final SModel model : Sequence.fromIterable(models)) {
            ListSequence.fromList(SModelOperations.nodes(model,MetaAdapterFactory.getInterfaceConcept(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6caL,"jetbrains.mps.lang.resources.structure.Resource"))).visitAll(new IVisitor<SNode>(){
              public void visit(              SNode it){
                String outputRoot=SModuleOperations.getOutputPathFor(model);
                IFile outputRootFile=FileSystem.getInstance().getFileByPath(outputRoot);
                Tuples._2<IFile,byte[]> data=Resource__BehaviorDescriptor.generate_id7Mb2akaesv8.invoke(it,outputRootFile);
                if (data == null) {
                  return;
                }
                if (data._1() != null) {
                  MapSequence.fromMap(dataToWrite).put(data._0(),data._1());
                }
                FilesDelta fd=new FilesDelta(outputRootFile);
                new StaleFilesCollector(outputRootFile).updateDelta(fd);
                fd.written(data._0());
                ListSequence.fromList(deltaList).addElement(fd);
              }
            }
);
          }
        }
      }
);
      _output_8acy7z_a0a=Sequence.fromIterable(_output_8acy7z_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
      progressMonitor.advance(1);
      progressMonitor.step("Copying content");
      FileSystem.getInstance().runWriteTransaction(new Runnable(){
        public void run(){
          MapSequence.fromMap(dataToWrite).visitAll(new IVisitor<IMapping<IFile,byte[]>>(){
            public void visit(            IMapping<IFile,byte[]> ftc){
              if (!(ftc.key().createNewFile())) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("cannot write to file " + ftc.key().getPath())));
                return;
              }
              OutputStream os=null;
              try {
                os=ftc.key().openOutputStream();
                os.write(ftc.value());
              }
 catch (              IOException e) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e)));
              }
 finally {
                FileUtil.closeFileSafe(os);
              }
            }
          }
);
        }
      }
);
    }
  finally {
      progressMonitor.done();
    }
default :
  return new IResult.SUCCESS(_output_8acy7z_a0a);
}
}
}
;
}
