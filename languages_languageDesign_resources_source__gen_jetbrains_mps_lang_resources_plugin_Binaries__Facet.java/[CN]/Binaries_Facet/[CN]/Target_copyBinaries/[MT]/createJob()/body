{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_8acy7z_a0a=null;
switch (0) {
case 0:
        final List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
      final Iterable<Tuples._2<IFile,IFile>> filesToCopy=Sequence.fromIterable(input).translate(new ITranslator2<IResource,Tuples._2<IFile,IFile>>(){
        public Iterable<Tuples._2<IFile,IFile>> translate(        IResource res){
          final IModule module=((MResource)res).module();
          return Sequence.fromIterable(((MResource)res).models()).translate(new ITranslator2<SModelDescriptor,Tuples._2<IFile,IFile>>(){
            public Iterable<Tuples._2<IFile,IFile>> translate(            SModelDescriptor smd){
              SModel model=smd.getSModel();
              String output=module.getOutputFor(smd);
              if (output == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no output location for " + smd.getLongName())));
                return null;
              }
 else {
                IFile outputRoot=pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Parameters.class).pathToFile().invoke(output);
                final IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,outputRoot);
                final FilesDelta fd=new FilesDelta(outputDir);
                ListSequence.fromList(deltaList).addElement(fd);
                return ListSequence.fromList(SModelOperations.getNodes(model,"jetbrains.mps.lang.resources.structure.Resource")).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return isNotEmpty_rhbawb_a0a0a0a0a0a4a0c0a0a1a0a0a1a0b0a0a0a0a0(SPropertyOperations.getString(it,"path"));
                  }
                }
).select(new ISelector<SNode,String>(){
                  public String select(                  SNode bin){
                    return MacrosUtil.expandPath(SPropertyOperations.getString(bin,"path"),module.getModuleFqName());
                  }
                }
).where(new IWhereFilter<String>(){
                  public boolean accept(                  String p){
                    return p != null;
                  }
                }
).select(new ISelector<String,Tuples._2<IFile,IFile>>(){
                  public Tuples._2<IFile,IFile> select(                  String p){
                    IFile fromFile=FileSystem.getInstance().getFileByPath(p);
                    IFile toFile=outputDir.getDescendant(fromFile.getName());
                    if (!(fromFile.exists())) {
                      monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("file not found " + fromFile.getPath())));
                      return null;
                    }
                    if (!(toFile.exists()) && !(toFile.createNewFile())) {
                      monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("cannot write to file " + toFile)));
                      return null;
                    }
                    fd.written(toFile);
                    return MultiTuple.<IFile,IFile>from(fromFile,toFile);
                  }
                }
).where(new IWhereFilter<Tuples._2<IFile,IFile>>(){
                  public boolean accept(                  Tuples._2<IFile,IFile> it){
                    return it != null;
                  }
                }
);
              }
            }
          }
);
        }
      }
);
    _output_8acy7z_a0a=Sequence.fromIterable(_output_8acy7z_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().requireWrite(new Runnable(){
        public void run(){
          Sequence.fromIterable(filesToCopy).toListSequence().visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
            public void visit(            Tuples._2<IFile,IFile> ftc){
              IFileUtils.copyFileContent(ftc._0(),ftc._1());
            }
          }
);
        }
      }
);
    }
  }
);
default :
return new IResult.SUCCESS(_output_8acy7z_a0a);
}
}
}
;
}
