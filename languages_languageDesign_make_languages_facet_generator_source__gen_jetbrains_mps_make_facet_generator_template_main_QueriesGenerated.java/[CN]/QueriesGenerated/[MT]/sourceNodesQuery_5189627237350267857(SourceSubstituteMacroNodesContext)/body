{
  return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"dependency",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode d){
      return SPropertyOperations.getString_def(d,"qualifier","BEFORE") == SEnumOperations.getEnumMemberValue(((SNode)_context.getVariable("qualifier")));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode d){
      return SLinkOperations.getTarget(d,"dependsOn",false);
    }
  }
);
}
