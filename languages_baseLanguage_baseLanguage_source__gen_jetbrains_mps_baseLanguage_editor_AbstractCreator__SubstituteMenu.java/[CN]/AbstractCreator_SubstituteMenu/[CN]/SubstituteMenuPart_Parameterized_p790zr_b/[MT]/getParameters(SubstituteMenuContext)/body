{
  Scope scope=ClassifierScopes.getVisibleClassifiersScope(_context.getParentNode(),false);
  Iterable<SNode> list=SNodeOperations.ofConcept(scope.getAvailableElements(null),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
  List<SNode> types=new ArrayList<SNode>();
  for (  SNode classifier : Sequence.fromIterable(list)) {
    SNode type=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),null);
    SLinkOperations.setTarget(type,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),classifier);
    ListSequence.fromList(types).addElement(type);
  }
  for (  SConcept typeConcept : ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506dL,"jetbrains.mps.baseLanguage.structure.Type"),_context.getModel()))) {
    if (!(typeConcept.isAbstract())) {
      ListSequence.fromList(types).addElement(SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(typeConcept),null));
    }
  }
  return types;
}
