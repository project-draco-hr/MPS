{
  Iterable<SNode> reexportedFromModuleDependencies=Sequence.fromIterable(((Tuples._3<SNode,Iterable<SNode>,Iterable<SNode>>)_context.getVariable("var:mdeps"))._1()).concat(Sequence.fromIterable(Sequence.<SNode>singleton(_context.getNode()))).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode mod){
      return ListSequence.fromList(SLinkOperations.getTargets(mod,"dependencies",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"reexport");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"module",false);
        }
      }
);
    }
  }
);
  Set<SNode> reexportMods=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode mod : reexportedFromModuleDependencies) {
    SetSequence.fromSet(reexportMods).addElement(mod);
  }
  Iterable<SNode> directDeps=ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"dependencies",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"module",false);
    }
  }
);
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode mod : Sequence.fromIterable(reexportedFromModuleDependencies).concat(Sequence.fromIterable(directDeps))) {
    SNode loopnode=SModelOperations.createNewNode(_context.getOutputModel(),"jetbrains.mps.lang.core.structure.BaseConcept",null);
    loopnode.setReferent("targetModule",mod,false);
    if (SetSequence.fromSet(reexportMods).contains(mod)) {
      loopnode.setProperty("targetReexport","true",false);
    }
    ListSequence.fromList(result).addElement(loopnode);
  }
  return result;
}
