{
  for (  ASMMethod m : myParsedClass.getDeclaredMethods()) {
    if (shallSkip(m)) {
      continue;
    }
    if (m.isStatic()) {
      continue;
    }
    if (m.isBridge()) {
      continue;
    }
    if (m.isCompilerGenerated()) {
      continue;
    }
    SNode md=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    ((jetbrains.mps.smodel.SNode)md).setId(ASMNodeId.createId(myParsedClass,m));
    SPropertyOperations.set(md,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,0x1126a8d157dL,"isAbstract"),"" + (m.isAbstract()));
    SLinkOperations.setTarget(md,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112670d273fL,0x112670d886aL,"visibility"),createVisibility(m));
    this.updateBaseMethod(m,md,cls);
    ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member"))).addElement(md);
  }
}
