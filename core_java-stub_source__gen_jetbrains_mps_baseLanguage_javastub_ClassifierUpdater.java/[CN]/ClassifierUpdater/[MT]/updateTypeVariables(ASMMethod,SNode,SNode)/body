{
  Map<ASMTypeVariable,SNode> typeVars=MapSequence.fromMap(new HashMap<ASMTypeVariable,SNode>());
  for (  ASMTypeVariable tv : method.getTypeParameters()) {
    SNode tvd=_quotation_createNode_ol94f8_a0a0b0p(tv.getName());
    ListSequence.fromList(SLinkOperations.getChildren(result,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).addElement(tvd);
    MapSequence.fromMap(typeVars).put(tv,tvd);
  }
  for (  ASMTypeVariable tv : method.getTypeParameters()) {
    SNode tvd=MapSequence.fromMap(typeVars).get(tv);
    if (tv instanceof ASMFormalTypeParameter) {
      ASMFormalTypeParameter tp=(ASMFormalTypeParameter)tv;
      if (tp.getClassBound() != null) {
        SLinkOperations.setTarget(tvd,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae375bda0L,"bound"),getTypeByASMType(tp.getClassBound(),result,cls));
      }
      for (      ASMType act : tp.getInterfaceBounds()) {
        SNode typeByASMType=getTypeByASMType(act,result,cls);
        if (SNodeOperations.isInstanceOf(typeByASMType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
          ListSequence.fromList(SLinkOperations.getChildren(tvd,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae913a476L,"auxBounds"))).addElement(SNodeOperations.cast(typeByASMType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
        }
 else {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("ClassifierType was expected, but received: " + typeByASMType);
          }
        }
      }
    }
  }
}
