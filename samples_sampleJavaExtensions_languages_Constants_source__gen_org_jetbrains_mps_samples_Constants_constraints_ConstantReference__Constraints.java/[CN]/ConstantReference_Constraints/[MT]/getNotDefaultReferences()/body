{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("original",new BaseReferenceConstraintsDescriptor("original",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode root=SNodeOperations.getAncestor(_context.getEnclosingNode(),"org.jetbrains.mps.samples.Constants.structure.Constants",false,false);
          SNode parentConstant=SNodeOperations.getAncestor(_context.getEnclosingNode(),"org.jetbrains.mps.samples.Constants.structure.Constant",false,false);
          List<SNode> allConstants=SLinkOperations.getTargets(root,"constants",true);
          List<SNode> approved=new ArrayList<SNode>();
          for (int i=0; i < ListSequence.fromList(allConstants).count(); i++) {
            SNode candidate=ListSequence.fromList(allConstants).getElement(i);
            if (candidate != parentConstant) {
              ListSequence.fromList(approved).addElement(candidate);
            }
 else {
              return approved;
            }
          }
          return allConstants;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_nqxbkv_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
