{
  TreeFileChooser chooser=new TreeFileChooser();
  chooser.setMode(TreeFileChooser.MODE_FILES_AND_DIRECTORIES);
  List<IFile> files=chooser.showMultiSelectionDialog(null);
  List<String> result=new ArrayList<String>();
  for (  IFile file : files) {
    ListSequence.fromList(result).addElement(file.getPath());
  }
  if (ListSequence.fromList(result).isEmpty()) {
    return result;
  }
  if (myJavaOnly) {
    int res=Messages.showYesNoDialog("MPS can try creating models for the specified locations, so that class files can be referenced from MPS models directly. Would you like to import models for the specified locations?","Model Roots",Messages.getQuestionIcon());
    if (res == Messages.YES) {
      ListSequence.fromList(myRoots).addSequence(ListSequence.fromList(result).select(new ISelector<String,ModelRootDescriptor>(){
        public ModelRootDescriptor select(        String it){
          SModelRoot sme=new SModelRoot(LanguageID.JAVA_MANAGER);
          sme.setPath(it);
          return sme.toDescriptor();
        }
      }
));
    }
  }
 else {
    List<ModelRootManager> managers=ListSequence.fromList(ManagerTableCellEditor.getManagers()).where(new IWhereFilter<ModelRootManager>(){
      public boolean accept(      ModelRootManager it){
        return it != null;
      }
    }
).toListSequence();
    if (ListSequence.fromList(managers).isEmpty()) {
      return result;
    }
    final List<String> managerNames=ListSequence.fromList(managers).select(new ISelector<ModelRootManager,String>(){
      public String select(      ModelRootManager it){
        return NameUtil.shortNameFromLongName(it.getClassName());
      }
    }
).toListSequence();
    final int res=Messages.showChooseDialog("MPS can try creating models for the specified locations,\n" + "so that class files can be referenced from MPS models directly.\n" + "Would you like to import models for the specified locations?","Model Roots",ListSequence.fromList(managerNames).toGenericArray(String.class),ListSequence.fromList(managerNames).first(),Messages.getQuestionIcon());
    if (res >= 0) {
      final ModelRootManager manager=ListSequence.fromList(managers).findFirst(new IWhereFilter<ModelRootManager>(){
        public boolean accept(        ModelRootManager it){
          return NameUtil.shortNameFromLongName(it.getClassName()).equals(ListSequence.fromList(managerNames).getElement(res));
        }
      }
);
      ListSequence.fromList(myRoots).addSequence(ListSequence.fromList(result).select(new ISelector<String,ModelRootDescriptor>(){
        public ModelRootDescriptor select(        String it){
          SModelRoot sme=new SModelRoot(manager);
          sme.setPath(it);
          return sme.toDescriptor();
        }
      }
));
    }
  }
  return result;
}
