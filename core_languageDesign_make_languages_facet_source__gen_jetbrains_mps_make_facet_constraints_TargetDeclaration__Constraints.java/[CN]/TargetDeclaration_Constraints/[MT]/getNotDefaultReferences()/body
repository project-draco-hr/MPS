{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("overrides",new BaseReferenceConstraintsDescriptor("overrides",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Sequence.fromIterable(FacetDeclaration_Behavior.call_allExtends_7854369758457864780(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.make.facet.structure.FacetDeclaration"))).skip(1).<SNode>translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode fd){
              return SLinkOperations.getTargets(fd,"targetDeclaration",true);
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_5z7oj4_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
