{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  SNode anchor=SNodeOperations.getAncestor(n,"jetbrains.mps.baseLanguage.structure.Statement",true,false);
  while (anchor != null) {
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getPrevSiblings(anchor,false)));
    anchor=SNodeOperations.getAncestor(anchor,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
  }
  return ListSequence.fromList(result).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
    }
  }
).<SNode>select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),"localVariableDeclaration",true);
    }
  }
);
}
