{
  Condition<SModel> cond=new Condition<SModel>(){
    @Override public boolean met(    SModel modelDescriptor){
      boolean rightStereotype=SModelStereotype.isUserModel(modelDescriptor) || SModelStereotype.isStubModel(modelDescriptor);
      boolean hasModule=modelDescriptor.getModule() != null;
      return rightStereotype && hasModule;
    }
  }
;
  ConditionalScope localScope=new ConditionalScope(myProject.getScope(),null,cond);
  ConditionalScope globalScope=new ConditionalScope(new FilteredGlobalScope(),null,cond);
  SRepository repo=myProject.getRepository();
  ChooseByNameData<SModelReference> gotoData=new ChooseByNameData<>(new ModelsPresentation(repo));
  gotoData.derivePrompts("model").setPrompts("Import model:",gotoData.getNotFoundMessage(),gotoData.getNotInMessage());
  gotoData.setScope(new ModelScopeIterable(localScope,repo),new ModelScopeIterable(globalScope,repo));
  ChooseByNamePopup popup=MpsPopupFactory.createPackagePopup(myProject,gotoData,myInitialText);
  if (myShortcut != null) {
    popup.setCheckBoxShortcut(myShortcut);
  }
  popup.invoke(new AddImportCallback(myProject,model){
    @Override public void elementChosen(    Object element){
      if (element instanceof SModelReference) {
        doImport((SModelReference)element);
      }
    }
  }
,ModalityState.current(),false);
}
