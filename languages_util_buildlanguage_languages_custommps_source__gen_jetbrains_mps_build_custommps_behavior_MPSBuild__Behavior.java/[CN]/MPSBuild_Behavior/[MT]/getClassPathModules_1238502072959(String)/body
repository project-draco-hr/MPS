{
  List<SNode> paths=new ArrayList<SNode>();
  IFile dir=FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + File.separator + prefix.replace("/",File.separator));
  List<IModule> modulesList=MPSModuleRepository.getInstance().getAllModulesInDirectory(dir);
  Set<IModule> modulesInClasspath=SetSequence.<IModule>fromSet(new HashSet<IModule>());
  for (  IModule module : ListSequence.<IModule>fromList(modulesList)) {
    if (module instanceof Language) {
      Language language=(Language)module;
      SetSequence.fromSet(modulesInClasspath).addElement(language);
      SetSequence.fromSet(modulesInClasspath).addSequence(ListSequence.<IModule>fromList(((LanguageDependenciesManager)language.getDependenciesManager()).getRuntimeDependOnModules()));
    }
  }
  for (  IModule module : SetSequence.<IModule>fromSet(modulesInClasspath)) {
    String moduleProperName=Module_Behavior.extractModuleProperName_1235487584035(module);
    SNode path=SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath",null);
    SPropertyOperations.set(path,"path",prefix + "/" + moduleProperName+ "."+ MPSExtentions.MPS_ARCH);
    ListSequence.<SNode>fromList(paths).addElement(path);
    if (module instanceof Language) {
      Language language=(Language)module;
      List<StubPath> runtimeCP=language.getRuntimeStubPaths();
      ListSequence.<StubPath>fromList(runtimeCP).removeSequence(ListSequence.<StubPath>fromList(language.getAllStubPaths()));
      if (!(ListSequence.<StubPath>fromList(runtimeCP).isEmpty())) {
        path=SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath",null);
        SPropertyOperations.set(path,"path",prefix + "/" + moduleProperName+ "."+ MPSExtentions.RUNTIME_ARCH);
        ListSequence.<SNode>fromList(paths).addElement(path);
      }
    }
  }
  return ListSequence.<SNode>fromList(paths).sort(new ISelector<SNode,Comparable<?>>(){
    public Comparable<?> select(    SNode it){
      return SPropertyOperations.getString(it,"path");
    }
  }
,true);
}
