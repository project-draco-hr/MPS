{
  super("Editor styles");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "pre-defined-style to apply and apply-condition";
    }
    public String getAdditionalInfo(){
      return "pre-defined-style to apply and apply-condition";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.editor.structure.PreDefinedStyleClassItem";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode replacement;
      if ((SLinkOperations.getTarget(node,"query",true) != null)) {
        replacement=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ApplyStyleClassCondition",null);
        SLinkOperations.setTarget(SNodeOperations.cast(replacement,"jetbrains.mps.lang.editor.structure.ApplyStyleClassCondition"),"query",SLinkOperations.getTarget(node,"query",true),true);
      }
 else {
        replacement=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ApplyStyleClass",null);
      }
      SLinkOperations.setTarget(replacement,"target",createStyleReference_s4lgfb_a0c0a0(SLinkOperations.getTarget(node,"key",false)),true);
      SNodeOperations.replaceWithAnother(node,replacement);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "StyleSheetClass to StyleClass";
    }
    public String getAdditionalInfo(){
      return "StyleSheetClass to StyleClass";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.editor.structure.StyleSheetClass";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SLinkOperations.getTarget(node,"extendedClass",true) == null);
    }
    public void doUpdateInstanceNode(    SNode node){
      final SNode newNode=SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.StyleClass",null);
      SLinkOperations.setTarget(newNode,"overlaps",null,true);
      SPropertyOperations.set(newNode,"name",SPropertyOperations.getString(node,"name"));
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"styleItem",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"styleItem",true)));
      Set<SReference> usages=FindUsagesManager.getInstance().findUsages(new GlobalScope(),Collections.<SNode>singleton(node),new EmptyProgressMonitor());
      SetSequence.fromSet(usages).visitAll(new IVisitor<SReference>(){
        public void visit(        SReference it){
          if (SNodeOperations.hasRole(SNodeOperations.as(it.getSourceNode(),"jetbrains.mps.lang.editor.structure.StyleSheetClassReference"),"jetbrains.mps.lang.editor.structure.StyleSheetClass","extendedClass")) {
            SNode usingClass=SNodeOperations.as(SNodeOperations.getParent(SNodeOperations.as(it.getSourceNode(),"jetbrains.mps.lang.editor.structure.StyleSheetClassReference")),"jetbrains.mps.lang.editor.structure.StyleSheetClass");
            ListSequence.fromList(SLinkOperations.getTargets(usingClass,"styleItem",true)).insertElement(0,createApplyStyleClass_s4lgfb_a0a1a0a0a0h0a3(newNode));
            SLinkOperations.setTarget(usingClass,"extendedClass",null,true);
          }
 else {
            it.getSourceNode().setReferenceTarget(it.getRole(),newNode);
          }
        }
      }
);
      SNodeOperations.replaceWithAnother(node,newNode);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
