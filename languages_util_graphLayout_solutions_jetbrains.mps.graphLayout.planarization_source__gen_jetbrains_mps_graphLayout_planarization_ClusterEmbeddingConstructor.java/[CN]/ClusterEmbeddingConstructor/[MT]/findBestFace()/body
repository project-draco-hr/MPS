{
  Face bestFace=null;
  List<Tuples._2<Integer,Integer>> pos=ListSequence.<Tuples._2<Integer,Integer>>fromList(new ArrayList<Tuples._2<Integer,Integer>>());
  List<Object> outerOrder=ListSequence.<Object>fromList(new LinkedList<Object>());
  for (  Edge outerEdge : ListSequence.<Edge>fromList(myOuterEdgesOrder)) {
    ListSequence.<Object>fromList(outerOrder).addElement(getSubcluster(outerEdge));
  }
  for (  Face face : ListSequence.<Face>fromList(mySubEmbeddedGraph.getFaces())) {
    List<Object> faceOrder=ListSequence.<Object>fromList(new LinkedList<Object>());
    List<Dart> darts=face.getDarts();
    for (    Dart dart : ListSequence.<Dart>fromList(darts).reversedList()) {
      ListSequence.<Object>fromList(faceOrder).addElement(dart.getTarget());
    }
    List<Tuples._2<Integer,Integer>> facePos=SubsequenceFinder.getCyclicSubsequence(outerOrder,faceOrder);
    if (ListSequence.<Tuples._2<Integer,Integer>>fromList(facePos).count() > ListSequence.<Tuples._2<Integer,Integer>>fromList(pos).count()) {
      pos=facePos;
      bestFace=face;
    }
  }
  return MultiTuple.<Face,List<Tuples._2<Integer,Integer>>>from(bestFace,pos);
}
