{
  Node node=MapSequence.<INode,Node>fromMap(mySubclustersMap).get(subcluster);
  List<Dart> darts=mySubEmbeddedGraph.getOrderedDarts(node);
  List<Edge> subOuterEdgesOrder=ListSequence.<Edge>fromList(new ArrayList<Edge>(ListSequence.<Dart>fromList(darts).count()));
  for (  Dart dart : ListSequence.<Dart>fromList(darts)) {
    Edge edge=dart.getEdge();
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(invEdgeMap).get(edge);
    List<Edge> history=myHistoryManager.getHistory(realEdge);
    if (edge.getSource() == node) {
      realEdge=ListSequence.<Edge>fromList(history).first();
    }
 else {
      realEdge=ListSequence.<Edge>fromList(history).last();
    }
    ListSequence.<Edge>fromList(subOuterEdgesOrder).addElement(realEdge);
  }
  if (showInfo > 0) {
    for (    Dart dart : ListSequence.<Dart>fromList(darts)) {
      System.out.println("pr dart " + dart + " -> "+ MapSequence.<Edge,Edge>fromMap(invEdgeMap).get(dart.getEdge()));
    }
    System.out.println("pr " + subOuterEdgesOrder);
  }
  ClusterEmbeddingConstructor subProcessor=new ClusterEmbeddingConstructor(myGraph,subcluster,subOuterEdgesOrder);
  subProcessor.setClusterBorderMap(myClusterBorderMap);
  EmbeddedGraph subclusterEmbedding=subProcessor.constructEmbedding();
  CheckEmbeddedGraph.checkEmbeddedGraph(subclusterEmbedding,false);
  if (ListSequence.<Face>fromList(subclusterEmbedding.getFaces()).count() > 0) {
    for (    Face face : ListSequence.<Face>fromList(subclusterEmbedding.getFaces())) {
      if (subclusterEmbedding.isOuterFace(face)) {
        continue;
      }
      myEmbeddedGraph.addFace(face);
    }
    if (showInfo > 0) {
      for (      Edge edge : ListSequence.<Edge>fromList(subOuterEdgesOrder)) {
        System.out.println("order " + edge + ": "+ myHistoryManager.getHistory(edge));
      }
      for (      Dart dart : ListSequence.<Dart>fromList(darts)) {
        System.out.println("dart " + dart + " -> "+ MapSequence.<Edge,Edge>fromMap(invEdgeMap).get(dart.getEdge()));
      }
    }
    List<Edge> subclusterBorder=subProcessor.getClusterBorder();
    for (int i=0; i < ListSequence.<Dart>fromList(darts).count(); i++) {
      Edge borderEdge=ListSequence.<Edge>fromList(subclusterBorder).getElement(i);
      Edge outerEdge=ListSequence.<Edge>fromList(subOuterEdgesOrder).getElement(i);
      int next=i + 1;
      if (next == ListSequence.<Dart>fromList(darts).count()) {
        next=0;
      }
      final Edge nextOuterEdge=ListSequence.<Edge>fromList(subOuterEdgesOrder).getElement(next);
      Face face=MapSequence.<Face,Face>fromMap(myFaceMap).get(mySubEmbeddedGraph.getFace(ListSequence.<Dart>fromList(darts).getElement(i)));
      List<Dart> faceDarts=face.getDarts();
      List<Dart> nextOuterFaceDarts=ListSequence.<Dart>fromList(faceDarts).where(new IWhereFilter<Dart>(){
        public boolean accept(        Dart dart){
          return dart.getEdge() == nextOuterEdge;
        }
      }
).toListSequence();
      final Node outerNode=getOuterNode(nextOuterEdge,subcluster);
      Dart nextOuterEdgeDart=ListSequence.<Dart>fromList(nextOuterFaceDarts).findFirst(new IWhereFilter<Dart>(){
        public boolean accept(        Dart it){
          return it.getSource() == outerNode;
        }
      }
);
      if (nextOuterEdgeDart == null) {
        throw new RuntimeException("error during merging subcluster's embeddings");
      }
      face.makeStartsWith(nextOuterEdgeDart);
      ListSequence.<Dart>fromList(faceDarts).removeElementAt(0);
      ListSequence.<Dart>fromList(faceDarts).removeElementAt(0);
      Edge curOuterEdge=getOuterEdgeAfterModifications(subcluster,outerEdge);
      Edge curNextOuterEdge=getOuterEdgeAfterModifications(subcluster,nextOuterEdge);
      ListSequence.<Dart>fromList(faceDarts).insertElement(0,new Dart(curOuterEdge,borderEdge.getSource()));
      ListSequence.<Dart>fromList(faceDarts).insertElement(0,new Dart(borderEdge,borderEdge.getTarget()));
      ListSequence.<Dart>fromList(faceDarts).insertElement(0,new Dart(curNextOuterEdge,curNextOuterEdge.getOpposite(borderEdge.getTarget())));
    }
  }
}
