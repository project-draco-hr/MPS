{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.Entry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("kind").references("owner","use1","use2","use3").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.ExportLabel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("documentation").references("inputKind","outputKind","dataHolder").children(new String[]{"marshal","unmarshal"},new boolean[]{false,false}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.ExportLabelParameter_inputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("inputNode","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.ExportLabelParameter_keeper").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("keeper","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.ExportLabelParameter_outputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("outputNode","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.ExportMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").references("label").alias("$EXPOSE$","expose output node to facilitate external references to generator outcome").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.FunctionCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.FunctionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.FunctionDeclarationContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("function").children(new String[]{"function"},new boolean[]{false}).alias("","Container for a function declaraion. Two-fold, may host function declaration; provides reference to declaration (either local or externally declared)").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.GenerationContextOp_GetExport").super_("jetbrains.mps.lang.generator.generationContext.structure.GenerationContextOp_Base").parents("jetbrains.mps.lang.generator.generationContext.structure.GenerationContextOp_Base").references("label").children(new String[]{"inputNode"},new boolean[]{false}).alias("getExported","retrieve proxy object for cross-model reference target").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.MapConfigExt").super_("jetbrains.mps.lang.generator.structure.MappingConfiguration").parents("jetbrains.mps.lang.generator.structure.MappingConfiguration").children(new String[]{"exports"},new boolean[]{true}).create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.MarshalFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.NodeA").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"entries"},new boolean[]{true}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.TrivialKeeper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("string1","string2","string3","int1","int2","bool1","bool2").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.crossmodel.structure.UnmarshalFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
