{
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  quotedNode_4=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null,null,GlobalScope.getInstance(),false);
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_6=(SNode)parameter_1;
  if (quotedNode_6 != null) {
    quotedNode_5.addChild("operand",HUtil.copyIfNecessary(quotedNode_6));
  }
  quotedNode_7=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null,null,GlobalScope.getInstance(),false);
  quotedNode_7.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_7,SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.jdom(MPS.Core/org.jdom@java_stub)"),SNodeId.fromString("~Element.setAttribute(java.lang.String,java.lang.String):org.jdom.Element")));
  quotedNode_9=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_9,"value",(String)parameter_2);
  quotedNode_7.addChild("actualArgument",quotedNode_9);
  quotedNode_10=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_11,"value","");
  quotedNode_10.addChild("leftExpression",quotedNode_11);
  quotedNode_12=(SNode)parameter_3;
  if (quotedNode_12 != null) {
    quotedNode_10.addChild("rightExpression",HUtil.copyIfNecessary(quotedNode_12));
  }
  quotedNode_7.addChild("actualArgument",quotedNode_10);
  quotedNode_5.addChild("operation",quotedNode_7);
  quotedNode_4.addChild("expression",quotedNode_5);
  return quotedNode_4;
}
