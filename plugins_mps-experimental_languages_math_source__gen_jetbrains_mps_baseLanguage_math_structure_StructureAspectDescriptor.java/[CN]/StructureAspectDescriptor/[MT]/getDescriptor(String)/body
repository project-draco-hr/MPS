{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.AbsExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expr"},new boolean[]{false},false,false,"abs","Absolute value of a number","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.AbstractIndex","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigComplexType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"bigcomplex","Arbitrary precision complex number","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigDecimalType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"bigdecimal","Arbitrary precision signed decimal number","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigIntegerType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"biginteger","Arbitrary precision integer","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression","jetbrains.mps.baseLanguage.math.structure.ExtrSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"max","Maximum of expressions","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMinExpression","jetbrains.mps.baseLanguage.math.structure.ExtrSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"min","Minimum of expressions","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigProdExpression","jetbrains.mps.baseLanguage.math.structure.ArithmSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"prod","Product of expressions","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigSumExpression","jetbrains.mps.baseLanguage.math.structure.ArithmSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sum","Sum of expressions","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"real","imag"},new boolean[]{false,false},false,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"complex","Double precision complex number","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","Matrix conjugate","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.CosineExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"cos","Trigonometric cosine of a value","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{"context"},new boolean[]{false},true,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":/d","divide operation for big decimal types","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":-d","minus operation for big decimal types","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":*d","multiplication operation for big decimal types","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":+d","plus operation for bigdecimal types","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.Determinant","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"det","Matrix determinant","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"numerator","denominator"},new boolean[]{false,false},false,false,"frac","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"exp","Exponent of a value","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"expr"},new boolean[]{false},true,false,"","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":in:","is in interval","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":contains:","(?) interval contains","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"startIncluded","endIncluded"},new String[]{},new String[]{"start","end"},new boolean[]{false,false},false,false,"interval","Interval literal","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"interval","Interval type","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation","jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"},new String[]{},new String[]{},new String[]{"type_M","matrix","vector","context"},new boolean[]{false,false,false,false},false,false,"lsolve","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LiteralI","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"I","Imaginary unit","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LogExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"ln","Natural logarithm of a value","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathContext","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"roundingMode","precision","precisionSetting"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"param"},new boolean[]{false},true,false,"","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbol","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"var","expression","precondition","upperBound"},new boolean[]{false,false,false,false},true,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex","jetbrains.mps.baseLanguage.math.structure.AbstractIndex",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{},new String[]{},new String[]{"from"},new boolean[]{false},false,false,"","iterate over interval of integers","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex","jetbrains.mps.baseLanguage.math.structure.AbstractIndex",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{},new String[]{},new String[]{"iterable"},new boolean[]{false},false,false,"","iterate over arbitrary iterable class","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"indexRef"},new String[]{},new boolean[]{},false,false,"","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathTypeCast","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"target"},new String[]{},new String[]{"castedExpr"},new boolean[]{false},false,false,"","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"column"},new String[]{},new String[]{"components"},new boolean[]{true},false,false,"[","Matrix row constructor","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"expression","rowIndex","colIndex"},new boolean[]{false,false,false},false,false,"","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation","jetbrains.mps.baseLanguage.math.structure.ExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*","Wildcard index","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{},new String[]{"rowIndex","colIndex","rowsCount","colsCount","expression"},new boolean[]{false,false,false,false,false},false,false,"matrix","Matrix initializer","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"index"},new String[]{},new boolean[]{},false,false,"","","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{},new String[]{"context"},new boolean[]{false},false,false,"","Matrix inverse operation","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixNorm","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"deg"},new String[]{},new String[]{"mat"},new boolean[]{false},false,false,"norm","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"rows","columns"},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"matrix","","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixUnit","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"size"},new boolean[]{false},false,false,"identity","Identity matrix","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixZero","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"square"},new String[]{},new String[]{"rows","columns"},new boolean[]{false,false},false,false,"zero","Zero matrix","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.PowExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"base","exponent"},new boolean[]{false,false},false,false,"^","Power expression","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.SineExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sin","Trigonometric sine of a value","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.TangentExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"tan","Trigonometric tangent of a value","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.TransposeOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","Transpose operation","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorInitializer","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{},new String[]{"rowIndex","expression","rowsCount"},new boolean[]{false,false,false},false,false,"vector","Vector initializer","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"height"},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"vector","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
