{
  final IScope scope=((AbstractModule)sm.getModule()).getScope();
  List<String> validationResult=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
    public List<String> compute(){
      return new ModelValidator(sm).validate(scope);
    }
  }
);
  for (  String item : validationResult) {
    LOG.error("Error in model " + sm.getReference().getModelName() + " : "+ item);
  }
  for (  SNode node : new NodesIterable(sm)) {
    if (SModelUtil.findConceptDeclaration(node.getConcept().getId(),GlobalScope.getInstance()) == null) {
      LOG.error("Error in model " + sm.getReference().getModelName() + " : Unknown concept "+ node.getConcept().getId());
    }
  }
  for (  SNode node : new NodesIterable(sm)) {
    for (    SReference ref : node.getReferences()) {
      if (SNodeUtil.hasReferenceMacro(node,ref.getRole())) {
        continue;
      }
      if (ref.getTargetNode() == null) {
        LOG.error("Error in model " + sm.getReference().getModelName() + " : Broken reference in node "+ node);
      }
    }
  }
}
