{
  IdeMain.setTestMode(TestMode.CORE_TEST);
  TestMain.configureMPS();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      new ModuleMaker().make(new LinkedHashSet<IModule>(MPSModuleRepository.getInstance().getAllModules()),new EmptyProgressIndicator());
      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
    }
  }
);
  final List<String> errors=new ArrayList<String>();
  final List<String> fatals=new ArrayList<String>();
  ILoggingHandler handler=new ILoggingHandler(){
    public void info(    LogEntry e){
    }
    public void warning(    LogEntry e){
    }
    public void debug(    LogEntry e){
    }
    public void error(    LogEntry e){
      System.out.println("error: " + e.getMessage());
      errors.add(e.getMessage());
    }
    public void fatal(    LogEntry e){
      System.out.println("fatal: " + e.getMessage());
      fatals.add(e.getMessage());
    }
  }
;
  Logger.addLoggingHandler(handler);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SModelDescriptor sm : SModelRepository.getInstance().getModelDescriptors()) {
        if (!SModelStereotype.isUserModel(sm))         continue;
        checkModel(sm);
      }
      for (      IModule m : MPSModuleRepository.getInstance().getAllModules()) {
        checkModule(m);
      }
    }
  }
);
  Logger.removeLoggingHandler(handler);
  assertTrue(errors.isEmpty());
  assertTrue(fatals.isEmpty());
}
