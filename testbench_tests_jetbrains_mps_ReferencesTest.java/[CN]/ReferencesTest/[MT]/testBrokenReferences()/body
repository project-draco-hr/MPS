{
  IdeMain.setTestMode(TestMode.CORE_TEST);
  TestMain.configureMPS();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      new ModuleMaker().make(new LinkedHashSet<IModule>(MPSModuleRepository.getInstance().getAllModules()),new EmptyProgressMonitor());
      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    }
  }
);
  final List<String> errors=new ArrayList<String>();
  final List<String> fatals=new ArrayList<String>();
  MPSAppenderBase handler=new MPSAppenderBase(){
    @Override protected void append(    @NotNull Priority level,    @NotNull String categoryName,    @NotNull String message,    @Nullable Throwable t,    @Nullable Object hintObject){
      if (level.equals(org.apache.log4j.Level.ERROR)) {
        System.out.println("error: " + message);
        errors.add(message);
      }
 else       if (level.equals(org.apache.log4j.Level.FATAL)) {
        System.out.println("fatal: " + message);
        fatals.add(message);
      }
    }
  }
;
  handler.register();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SModel sm : SModelRepository.getInstance().getModelDescriptors()) {
        if (!SModelStereotype.isUserModel(sm))         continue;
        checkModel(sm);
      }
      for (      IModule m : MPSModuleRepository.getInstance().getAllModules()) {
        checkModule(m);
      }
    }
  }
);
  handler.unregister();
  assertTrue(errors.isEmpty());
  assertTrue(fatals.isEmpty());
}
