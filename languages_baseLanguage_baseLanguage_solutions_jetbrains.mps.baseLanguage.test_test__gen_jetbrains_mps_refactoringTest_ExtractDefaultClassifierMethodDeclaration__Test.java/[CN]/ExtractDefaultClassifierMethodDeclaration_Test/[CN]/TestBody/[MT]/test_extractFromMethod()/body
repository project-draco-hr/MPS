{
  this.addNodeById("1230052509259");
  this.addNodeById("1230052509277");
  this.addNodeById("1230052509301");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509264"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242864l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")),SNodeOperations.cast(this.getNodeById("6195342755327949995"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123155l,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))));
  params.setName("bar");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509260"),MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203071646776l,"jetbrains.mps.lang.plugin.structure.ActionDeclaration")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052509278"),MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203071646776l,"jetbrains.mps.lang.plugin.structure.ActionDeclaration")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
