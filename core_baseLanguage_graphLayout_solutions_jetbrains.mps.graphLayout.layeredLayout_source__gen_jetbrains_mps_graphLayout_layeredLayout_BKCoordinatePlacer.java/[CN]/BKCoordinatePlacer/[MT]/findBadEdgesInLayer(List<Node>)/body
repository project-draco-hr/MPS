{
  Set<Edge> badEdges=SetSequence.fromSet(new HashSet<Edge>());
  int closestInnerEdgePos=-1;
  for (int i=0; i < ListSequence.fromList(layerOrder).count(); i++) {
    Node node=ListSequence.fromList(layerOrder).getElement(i);
    if (isInnerDummy(node)) {
      closestInnerEdgePos=getOppositePos(node);
    }
 else {
      for (      Edge edge : ListSequence.fromList(node.getOutEdges())) {
        int targetPos=MapSequence.fromMap(myPosInLayer).get(edge.getTarget());
        if (targetPos < closestInnerEdgePos) {
          SetSequence.fromSet(badEdges).addElement(edge);
        }
      }
    }
  }
  closestInnerEdgePos=Integer.MAX_VALUE;
  for (int i=ListSequence.fromList(layerOrder).count() - 1; i >= 0; i--) {
    Node node=ListSequence.fromList(layerOrder).getElement(i);
    if (isInnerDummy(node)) {
      closestInnerEdgePos=getOppositePos(node);
    }
 else {
      for (      Edge edge : ListSequence.fromList(node.getOutEdges())) {
        int targetPos=MapSequence.fromMap(myPosInLayer).get(edge.getTarget());
        if (targetPos > closestInnerEdgePos) {
          SetSequence.fromSet(badEdges).addElement(edge);
        }
      }
    }
  }
  System.out.println(badEdges);
  return badEdges;
}
