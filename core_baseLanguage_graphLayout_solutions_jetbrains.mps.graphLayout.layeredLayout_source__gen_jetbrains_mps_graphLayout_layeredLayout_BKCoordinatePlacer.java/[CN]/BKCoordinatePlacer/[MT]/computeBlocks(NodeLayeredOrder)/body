{
  Graph graph=order.getGraph();
  int[] roots=new int[graph.getNumNodes()];
  for (int i=0; i < roots.length; i++) {
    roots[i]=i;
  }
  for (int layer=1; layer < order.getNumLayers(); layer++) {
    int curConnectedPos=-1;
    for (    int index : ListSequence.fromList(order.getIntOrder(layer))) {
      Node node=graph.getNode(index);
      List<Edge> sortedByPos=ListSequence.fromList(node.getInEdges()).sort(new Comparator<Edge>(){
        public int compare(        Edge a,        Edge b){
          int aSourceIndex=a.getSource().getIndex();
          int bSourceIndex=b.getSource().getIndex();
          return myPosInLayer[aSourceIndex] - myPosInLayer[bSourceIndex];
        }
      }
,true).toListSequence();
      Edge medianEdge=ListSequence.fromList(sortedByPos).getElement(ListSequence.fromList(sortedByPos).count() / 2);
      if (roots[index] == index) {
        curConnectedPos=this.tryToAddRoot(index,roots,medianEdge,curConnectedPos);
      }
      medianEdge=ListSequence.fromList(sortedByPos).getElement((ListSequence.fromList(sortedByPos).count() + 1) / 2);
      if (roots[index] == index) {
        curConnectedPos=this.tryToAddRoot(index,roots,medianEdge,curConnectedPos);
      }
    }
  }
  return roots;
}
