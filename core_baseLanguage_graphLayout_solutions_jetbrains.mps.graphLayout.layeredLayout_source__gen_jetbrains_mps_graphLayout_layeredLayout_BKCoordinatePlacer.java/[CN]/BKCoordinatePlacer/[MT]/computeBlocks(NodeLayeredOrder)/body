{
  Graph graph=order.getGraph();
  Map<Node,Node> roots=new NodeMap<Node>(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    MapSequence.fromMap(roots).put(node,node);
  }
  for (int layer=1; layer < order.getNumLayers(); layer++) {
    int curConnectedPos=-1;
    for (    Node node : ListSequence.fromList(order.getOrder(layer))) {
      List<Edge> sortedByPos=ListSequence.fromList(node.getInEdges()).sort(new Comparator<Edge>(){
        public int compare(        Edge a,        Edge b){
          Node aSource=a.getSource();
          Node bSource=b.getSource();
          return MapSequence.fromMap(myPosInLayer).get(aSource) - MapSequence.fromMap(myPosInLayer).get(bSource);
        }
      }
,true).toListSequence();
      Edge medianEdge=ListSequence.fromList(sortedByPos).getElement((ListSequence.fromList(sortedByPos).count() - 1) / 2);
      if (MapSequence.fromMap(roots).get(node) == node) {
        curConnectedPos=this.tryToAddRoot(node,roots,medianEdge,curConnectedPos);
      }
      medianEdge=ListSequence.fromList(sortedByPos).getElement((ListSequence.fromList(sortedByPos).count()) / 2);
      if (MapSequence.fromMap(roots).get(node) == node) {
        curConnectedPos=this.tryToAddRoot(node,roots,medianEdge,curConnectedPos);
      }
    }
  }
  return roots;
}
