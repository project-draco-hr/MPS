{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("linkDeclaration",new BaseReferenceConstraintsDescriptor("linkDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode messageStatement=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.MessageStatement",true,false);
          if (messageStatement == null) {
            return Sequence.fromIterable(Collections.<SNode>emptyList());
          }
          SNode nodetype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(messageStatement,"nodeToReport",true));
{
            IMatchingPattern pattern_h95xiq_d0a0=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType");
            SNode coercedNode_h95xiq_d0a0=TypeChecker.getInstance().getRuntimeSupport().coerce_(nodetype,pattern_h95xiq_d0a0);
            if (coercedNode_h95xiq_d0a0 != null) {
              return AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(coercedNode_h95xiq_d0a0,"concept",false));
            }
 else {
              return Sequence.fromIterable(Collections.<SNode>emptyList());
            }
          }
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_h95xiq_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
