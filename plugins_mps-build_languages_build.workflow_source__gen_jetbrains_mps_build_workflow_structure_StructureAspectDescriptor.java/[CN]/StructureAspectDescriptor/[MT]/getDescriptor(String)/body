{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntStatement").super_("jetbrains.mps.build.workflow.structure.BwfStatement").parents("jetbrains.mps.build.workflow.structure.BwfStatement").children(new String[]{"element"},new boolean[]{false}).alias("ant","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntTaskBundleDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").properties("resource").references("classpath").alias("ant task bundle","").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfAntTaskDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").properties("classname").references("classpath").alias("ant taskdef","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfCustomMacro").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").children(new String[]{"elements"},new boolean[]{true}).alias("custom macro","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfFileSet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"},new boolean[]{true}).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaClassPath").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").children(new String[]{"classpath"},new boolean[]{false}).alias("cp","classpath value").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaDescriptor").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").alias("java descriptor","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaLibrary").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"classpath"},new boolean[]{true}).alias("java library","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaLibraryReference").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").references("target").alias("library","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaModule").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").properties("outputFolder","generateDebugInfo","heapSize","noWarnings","compiler").children(new String[]{"sources","resources","dependencies","taskDeps"},new boolean[]{false,false,true,true}).alias("compile java module","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfJavaModuleReference").super_("jetbrains.mps.build.workflow.structure.BwfJavaDependency").parents("jetbrains.mps.build.workflow.structure.BwfJavaDependency").references("target").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfMacro").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").properties("defaultValue","exportToProperiesFile","isLocation","uninitialized").alias("macro","").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfMacroListImport").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart").properties("prefix","propertiesFile").alias("import macros","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfPathDeclaration").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"content"},new boolean[]{true}).alias("path","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfPathReference").super_("jetbrains.mps.core.xml.structure.XmlBaseElement").parents("jetbrains.mps.core.xml.structure.XmlBaseElement").references("target").alias("<pathref <{target}>>","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").properties("temporaryFolder","baseDirectory").children(new String[]{"parts","imports"},new boolean[]{true,true}).alias("build workflow project","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProjectPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfProjectPartStatement").super_("jetbrains.mps.build.workflow.structure.BwfStatement").parents("jetbrains.mps.build.workflow.structure.BwfStatement").children(new String[]{"part"},new boolean[]{false}).alias("project part","").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").alias("<empty>","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfSubTask").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"after","before","statements"},new boolean[]{true,true,true}).alias("subtask","").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfSubTaskDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTask").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"dependencies","subTasks"},new boolean[]{true,true}).alias("task","").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskLibrary").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parts","imports"},new boolean[]{true,true}).alias("build tasks library","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskLibraryDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.build.workflow.structure.BwfTaskPart").super_("jetbrains.mps.build.workflow.structure.BwfProjectPart").parents("jetbrains.mps.build.workflow.structure.BwfProjectPart","jetbrains.mps.lang.core.structure.ScopeProvider").references("task").children(new String[]{"subTasks","additionalDependencies"},new boolean[]{true,true}).alias("task part","").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
