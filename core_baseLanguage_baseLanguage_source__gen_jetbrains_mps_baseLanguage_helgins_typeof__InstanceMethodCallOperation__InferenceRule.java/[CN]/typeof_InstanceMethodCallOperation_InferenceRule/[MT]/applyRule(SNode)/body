{
  if (SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  if (!(SLinkOperations.getCount(imco,"actualArgument") == SLinkOperations.getCount(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"parameter"))) {
{
      BaseIntentionProvider intentionProvider=null;
      intentionProvider=new BaseIntentionProvider("jetbrains.mps.baseLanguage.helgins@3_0.ChooseAppropriateMethodDeclaration_QuickFix",true);
      intentionProvider.putArgument("classifier",methodClassifier);
      intentionProvider.putArgument("methodCall",imco);
      TypeChecker.getInstance().reportTypeError(imco,"wrong number of parameters","jetbrains.mps.baseLanguage.helgins@3_0","1217025183063",intentionProvider);
    }
  }
  final SNode instanceType_typevar_1204064731338=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=imco;
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),TypeChecker.getInstance().getRuntimeSupport().typeOf(IOperation_Behavior.call_getOperand_1213877410070(imco),"jetbrains.mps.baseLanguage.helgins","1204064784351",false),_nodeToCheck_1029348928467,null,"jetbrains.mps.baseLanguage.helgins","1204064763142",intentionProvider);
  }
{
    SNode _nodeToCheck_1029348928467=imco;
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequationStrong(TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),new QuotationClass_74().createNode(methodClassifier),_nodeToCheck_1029348928467,null,"jetbrains.mps.baseLanguage.helgins","1204065906120",true,0,intentionProvider);
  }
{
    final SNode _representatorVar2=TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar2,new Runnable(){
      public void run(){
        Map<SNode,List<SNode>> mmap=new HashMap<SNode,List<SNode>>();
        RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(imco,SLinkOperations.getTarget(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"returnType",true),mmap);
        RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(methodClassifier,TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),mmap);
        RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(mmap);
      }
    }
,"jetbrains.mps.baseLanguage.helgins","1204065986803");
  }
}
