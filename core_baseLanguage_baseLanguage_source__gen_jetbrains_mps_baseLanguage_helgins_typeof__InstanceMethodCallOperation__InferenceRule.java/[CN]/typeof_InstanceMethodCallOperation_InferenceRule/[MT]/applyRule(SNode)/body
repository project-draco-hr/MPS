{
  if (SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) == null) {
    return;
  }
  if (!(SLinkOperations.getCount(imco,"actualArgument") == SLinkOperations.getCount(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"parameter"))) {
    TypeChecker.getInstance().reportTypeError(imco,"wrong number of parameters","jetbrains.mps.baseLanguage.helgins","1204064546506");
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  final SNode instanceType_typevar_1204064731338=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),TypeChecker.getInstance().getRuntimeSupport().typeOf(IOperation_Behavior.call_getOperand_1197028596169(imco),"jetbrains.mps.baseLanguage.helgins","1204064784351",false),IOperation_Behavior.call_getOperand_1197028596169(imco),null,"jetbrains.mps.baseLanguage.helgins","1204064763142");
  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequationStrong(TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),new QuotationClass_84().createNode(methodClassifier),imco,null,"jetbrains.mps.baseLanguage.helgins","1204065906120",false);
{
    final SNode _representatorVar4=TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar4,new Runnable(){
      public void run(){
        Map<SNode,List<SNode>> mmap=new HashMap<SNode,List<SNode>>();
        RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(imco,SLinkOperations.getTarget(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"returnType",true),mmap);
        RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(methodClassifier,TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1204064731338),mmap);
        RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(mmap);
      }
    }
,"jetbrains.mps.baseLanguage.helgins","1204065986803");
  }
}
