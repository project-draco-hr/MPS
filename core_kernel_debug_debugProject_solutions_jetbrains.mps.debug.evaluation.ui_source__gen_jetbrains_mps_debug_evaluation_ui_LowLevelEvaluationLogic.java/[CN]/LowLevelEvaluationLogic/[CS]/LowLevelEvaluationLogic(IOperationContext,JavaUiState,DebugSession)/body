{
  super(context,state,debugSession);
  final Wrappers._T<AbstractClassifiersScope> scope=new Wrappers._T<AbstractClassifiersScope>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      scope.value=new ReachableClassifiersScope(SNodeOperations.getModel(getLocationNode()),IClassifiersSearchScope.CLASSIFFIER,context.getScope());
    }
  }
);
  myScope=scope.value;
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SLinkOperations.setNewChild(myEvaluator,"evaluatedStatement","jetbrains.mps.baseLanguage.structure.BlockStatement");
      SLinkOperations.setNewChild(SLinkOperations.getTarget(myEvaluator,"evaluatedStatement",true),AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"),"jetbrains.mps.debug.evaluation.structure.ToEvaluateAnnotation");
      JavaStackFrame javaStackFrame=myUiState.getStackFrame();
      if (javaStackFrame != null) {
        StackFrame stackFrame=javaStackFrame.getStackFrame();
        if (stackFrame != null) {
          try {
            List<LocalVariable> variables=stackFrame.visibleVariables();
            for (            LocalVariable variable : ListSequence.fromList(variables)) {
              try {
                SNode lowLevelVarNode=SConceptOperations.createNewNode("jetbrains.mps.debug.evaluation.structure.LowLevelVariable",null);
                SPropertyOperations.set(lowLevelVarNode,"name",((LocalVariable)variable).name());
                SLinkOperations.setTarget(lowLevelVarNode,"type",getMpsTypeFromJdiType(((LocalVariable)variable).type()),true);
                ListSequence.fromList(SLinkOperations.getTargets(myEvaluator,"variables",true)).addElement(lowLevelVarNode);
              }
 catch (              ClassNotLoadedException cne) {
                LOG.error(cne);
              }
            }
          }
 catch (          AbsentInformationException e) {
            LOG.error(e);
          }
        }
      }
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      IClassPathItem cpItem=getLocationModel().getModelDescriptor().getModule().getClassPathItem();
      cpItem.accept(new EachClassPathItemVisitor(){
        @Override public void visit(        JarFileClassPathItem item){
          getModule().addStubPath(item.getFile().getAbsolutePath());
        }
        @Override public void visit(        FileClassPathItem item){
          getModule().addStubPath(item.getClassPath());
        }
      }
);
      StubReloadManager.getInstance().reload();
    }
  }
);
}
