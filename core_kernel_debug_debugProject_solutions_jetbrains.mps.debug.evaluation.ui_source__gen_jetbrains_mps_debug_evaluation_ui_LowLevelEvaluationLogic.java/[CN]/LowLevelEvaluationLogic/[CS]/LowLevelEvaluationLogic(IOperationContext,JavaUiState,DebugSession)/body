{
  super(context,state,debugSession);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SLinkOperations.setNewChild(myEvaluator,"evaluatedStatement","jetbrains.mps.baseLanguage.structure.BlockStatement");
      SLinkOperations.setNewChild(SLinkOperations.getTarget(myEvaluator,"evaluatedStatement",true),AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"),"jetbrains.mps.debug.evaluation.structure.ToEvaluateAnnotation");
      SPropertyOperations.set(myEvaluator,"isRuntime","" + (true));
    }
  }
);
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          IModule module=getLocationModel().getModelDescriptor().getModule();
          IClassPathItem cpItem=AbstractModule.getDependenciesClasspath(Collections.singleton(module),true);
          cpItem.accept(new EachClassPathItemVisitor(){
            @Override public void visit(            JarFileClassPathItem item){
              String path=item.getFile().getAbsolutePath();
              getModule().addStubPath(path);
              indicator.setText2("Added " + path);
            }
            @Override public void visit(            FileClassPathItem item){
              String path=item.getClassPath();
              getModule().addStubPath(path);
              indicator.setText2("Added " + path);
            }
          }
);
          indicator.setText2("Reloading stubs...");
          StubReloadManager.getInstance().reload();
        }
      }
);
    }
  }
,"Loading stubs",false,myContext.getProject());
}
