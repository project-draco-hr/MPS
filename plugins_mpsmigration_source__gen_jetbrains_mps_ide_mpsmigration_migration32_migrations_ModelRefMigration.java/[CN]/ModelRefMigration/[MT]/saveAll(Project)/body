{
  Iterable<? extends SModule> modules=p.getModulesWithGenerators();
  List<EditableSModel> allModels=Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).ofType(EditableSModel.class).where(new IWhereFilter<EditableSModel>(){
    public boolean accept(    EditableSModel it){
      return SModelStereotype.isUserModel(it);
    }
  }
).toListSequence();
  for (  Language language : Sequence.fromIterable(modules).ofType(Language.class).where(new IWhereFilter<Language>(){
    public boolean accept(    Language it){
      return !(it.isReadOnly());
    }
  }
)) {
    for (    Generator generator : CollectionSequence.fromCollection(language.getGenerators())) {
      generator.updateModuleReferences();
    }
    language.updateSModelReferences();
    language.save();
  }
  for (  EditableSModel model : ListSequence.fromList(allModels)) {
    if (model.isReadOnly()) {
      continue;
    }
    try {
      model.load();
      model.setChanged(true);
      if (model.isChanged()) {
        model.save();
      }
    }
 catch (    Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error re-saving model " + model.getModelName(),ex);
      }
    }
  }
}
