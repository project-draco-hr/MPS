{
  mod.getDependenciesManager();
  DependenciesManager depman=mod.getDependenciesManager();
  Set<IModule> reqmods=SetSequence.<IModule>fromSetWithValues(new HashSet<IModule>(),Sequence.<Language>fromIterable(((Iterable<Language>)depman.getAllUsedLanguages())).<Generator>translate(new ITranslator2<Language,Generator>(){
    public Iterable<Generator> translate(    Language lang){
      return lang.getGenerators();
    }
  }
));
  SetSequence.fromSet(reqmods).addSequence(SetSequence.<IModule>fromSet(depman.getAllRequiredModules()));
  SetSequence.fromSet(reqmods).addSequence(SetSequence.<IModule>fromSet(depman.getAllVisibleModules()));
  Iterable<ModuleReference> reqs=SetSequence.<IModule>fromSet(reqmods).<ModuleReference>select(new ISelector<IModule,ModuleReference>(){
    public ModuleReference select(    IModule m){
      return m.getModuleReference();
    }
  }
);
  if (mod instanceof Generator) {
    reqs=Sequence.<ModuleReference>fromIterable(reqs).concat(Sequence.<ModuleReference>fromIterable(Sequence.<ModuleReference>singleton(((Generator)mod).getSourceLanguage().getModuleReference())));
  }
 else   if (mod instanceof Language) {
  }
 else   if (mod instanceof DevKit) {
  }
 else {
  }
  return Sequence.<ModuleReference>fromIterable(reqs).distinct().toListSequence();
}
