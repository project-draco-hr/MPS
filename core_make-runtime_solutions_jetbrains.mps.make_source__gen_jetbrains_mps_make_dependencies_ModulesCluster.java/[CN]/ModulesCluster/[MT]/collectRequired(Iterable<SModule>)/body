{
  Set<SModuleReference> allRequired=SetSequence.fromSetWithValues(new HashSet<SModuleReference>(),Sequence.fromIterable(MapSequence.fromMap(allDeps).values()).translate(new ITranslator2<ModulesCluster.ModuleDeps,SModuleReference>(){
    public Iterable<SModuleReference> translate(    ModulesCluster.ModuleDeps dep){
      return dep.required;
    }
  }
));
  List<SModule> available=Sequence.fromIterable(pool).toListSequence();
  int atSize;
  do {
    atSize=MapSequence.fromMap(allDeps).count();
    for (Iterator<SModule> it=ListSequence.fromList(available).iterator(); it.hasNext(); ) {
      SModule mod=it.next();
      SModuleReference mr=mod.getModuleReference();
      if (SetSequence.fromSet(allRequired).contains(mr)) {
        primAdd(mod);
        SetSequence.fromSet(allRequired).addSequence(ListSequence.fromList(MapSequence.fromMap(allDeps).get(mr).required));
        it.remove();
      }
    }
  }
 while (atSize < MapSequence.fromMap(allDeps).count());
}
