{
  List<List<SModuleReference>> order=new ModulesCluster.ModulesGraph().totalOrder();
  Iterable<? extends Iterable<SModuleReference>> compacted=Sequence.fromIterable(this.compact(order)).toListSequence();
  return Sequence.fromIterable(compacted).select(new ISelector<Iterable<SModuleReference>,IListSequence<SModule>>(){
    public IListSequence<SModule> select(    Iterable<SModuleReference> cycle){
      return Sequence.fromIterable(cycle).select(new ISelector<SModuleReference,SModule>(){
        public SModule select(        SModuleReference mr){
          return MapSequence.fromMap(modulesView).get(mr);
        }
      }
).toListSequence();
    }
  }
).toListSequence();
}
