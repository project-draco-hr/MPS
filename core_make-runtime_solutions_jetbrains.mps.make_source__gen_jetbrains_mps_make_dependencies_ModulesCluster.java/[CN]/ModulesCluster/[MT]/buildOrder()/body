{
  List<List<ModuleReference>> order=new ModulesCluster.ModulesGraph().totalOrder();
  Iterable<? extends Iterable<ModuleReference>> compacted=this.compact(order);
  return Sequence.fromIterable(compacted).<List<IModule>>select(new ISelector<Iterable<ModuleReference>,IListSequence<IModule>>(){
    public IListSequence<IModule> select(    Iterable<ModuleReference> cycle){
      return Sequence.<ModuleReference>fromIterable(cycle).<IModule>select(new ISelector<ModuleReference,IModule>(){
        public IModule select(        ModuleReference mr){
          return MapSequence.<ModuleReference,IModule>fromMap(modulesView).get(mr);
        }
      }
).toListSequence();
    }
  }
).toListSequence();
}
