{
  GlobalModuleDependenciesManager depman=new GlobalModuleDependenciesManager(mod);
  Set<SLanguage> allUsedSLanguages=new SLanguageHierarchy(myLanguageRegistry,mod.getUsedLanguages()).getExtended();
  Iterable<Language> allUsedLangs=SetSequence.fromSet(allUsedSLanguages).select(new ISelector<SLanguage,SModule>(){
    public SModule select(    SLanguage it){
      return it.getSourceModule();
    }
  }
).ofType(Language.class);
  Set<SModule> reqmods=SetSequence.fromSetWithValues(new HashSet<SModule>(),Sequence.fromIterable((allUsedLangs)).translate(new ITranslator2<Language,Generator>(){
    public Iterable<Generator> translate(    Language lang){
      return lang.getGenerators();
    }
  }
));
  SetSequence.fromSet(reqmods).addSequence(CollectionSequence.fromCollection(depman.getModules(GlobalModuleDependenciesManager.Deptype.COMPILE)));
  SetSequence.fromSet(reqmods).addSequence(CollectionSequence.fromCollection(depman.getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE)));
  Iterable<SModuleReference> reqs=SetSequence.fromSet(reqmods).select(new ISelector<SModule,SModuleReference>(){
    public SModuleReference select(    SModule m){
      return m.getModuleReference();
    }
  }
);
  if (mod instanceof Generator) {
    reqs=Sequence.fromIterable(reqs).concat(Sequence.fromIterable(Sequence.<SModuleReference>singleton(((Generator)mod).getSourceLanguage().getModuleReference())));
  }
 else   if (mod instanceof Language) {
  }
 else   if (mod instanceof DevKit) {
  }
 else {
  }
  return Sequence.fromIterable(reqs).distinct().toListSequence();
}
