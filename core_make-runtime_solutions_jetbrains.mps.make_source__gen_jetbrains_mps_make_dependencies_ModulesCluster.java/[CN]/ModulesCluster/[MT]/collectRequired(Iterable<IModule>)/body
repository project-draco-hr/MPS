{
  Set<ModuleReference> allRequired=SetSequence.<ModuleReference>fromSetWithValues(new HashSet<ModuleReference>(),Sequence.<ModulesCluster.ModuleDeps>fromIterable(MapSequence.fromMap(allDeps).values()).<ModuleReference>translate(new ITranslator2<ModulesCluster.ModuleDeps,ModuleReference>(){
    public Iterable<ModuleReference> translate(    ModulesCluster.ModuleDeps dep){
      return dep.required;
    }
  }
));
  List<IModule> available=Sequence.<IModule>fromIterable(pool).toListSequence();
  int atSize;
  do {
    atSize=MapSequence.<ModuleReference,ModulesCluster.ModuleDeps>fromMap(allDeps).count();
    for (Iterator<IModule> it=ListSequence.<IModule>fromList(available).iterator(); it.hasNext(); ) {
      IModule mod=it.next();
      ModuleReference mr=mod.getModuleReference();
      if (SetSequence.<ModuleReference>fromSet(allRequired).contains(mr)) {
        primAdd(mod);
        SetSequence.fromSet(allRequired).addSequence(ListSequence.<ModuleReference>fromList(MapSequence.<ModuleReference,ModulesCluster.ModuleDeps>fromMap(allDeps).get(mr).required));
        it.remove();
      }
    }
  }
 while (atSize < MapSequence.<ModuleReference,ModulesCluster.ModuleDeps>fromMap(allDeps).count());
}
