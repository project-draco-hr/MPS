{
  final SModule module=model.getModule();
  final Collection<SModule> moduleDeclaredDependencies=module != null ? new GlobalModuleDependenciesManager(module).getModules(Deptype.VISIBLE) : null;
  Set<SLanguage> modelDeclaredUsedLanguages=getAllLanguageImports(model);
  Set<SModelReference> importedModels=new HashSet<SModelReference>();
  for (  SModel sm : allImportedModels(model)) {
    importedModels.add(sm.getReference());
  }
  final ModelDependencyScanner modelScanner=new ModelDependencyScanner();
  modelScanner.crossModelReferences(true).usedLanguages(true).walk(model);
  for (  SLanguage language : modelScanner.getUsedLanguages()) {
    if (!modelDeclaredUsedLanguages.contains(language)) {
      modelDeclaredUsedLanguages.add(language);
      ((jetbrains.mps.smodel.SModelInternal)model).addLanguage(language);
    }
  }
  for (  SModelReference targetModelReference : modelScanner.getCrossModelReferences()) {
    if (importedModels.add(targetModelReference)) {
      if (updateModuleImports && module != null) {
        SModel targetModelDescriptor=SModelRepository.getInstance().getModelDescriptor(targetModelReference);
        SModule targetModule=targetModelDescriptor == null ? null : targetModelDescriptor.getModule();
        if (targetModule != null && !moduleDeclaredDependencies.contains(targetModule)) {
          ((AbstractModule)module).addDependency(targetModule.getModuleReference(),false);
        }
      }
      ((jetbrains.mps.smodel.SModelInternal)model).addModelImport(targetModelReference,firstVersion);
    }
  }
  importedModels.clear();
}
