{
  ModelChange.assertLegalChange(model);
  GlobalScope scope=GlobalScope.getInstance();
  SModelDescriptor modelDescriptor=model.getModelDescriptor();
  final IModule module=modelDescriptor == null ? null : modelDescriptor.getModule();
  final Collection<IModule> declaredDependencies=module != null ? new GlobalModuleDependenciesManager(module).getModules(Deptype.VISIBLE) : null;
  final Collection<Language> declaredUsedLanguages=module != null ? new GlobalModuleDependenciesManager(module).getUsedLanguages() : null;
  Set<ModuleReference> usedLanguages=getAllImportedLanguages(model);
  Set<SModelReference> importedModels=new HashSet<SModelReference>();
  for (  SModelDescriptor sm : allImportedModels(model,scope)) {
    importedModels.add(sm.getSModelReference());
  }
  for (  SNode node : model.nodes()) {
    Language lang=jetbrains.mps.util.SNodeOperations.getLanguage(node);
    if (lang == null) {
      LOG.error("Can't find language " + NameUtil.namespaceFromConceptFQName(node.getConcept().getId()));
      continue;
    }
    ModuleReference ref=lang.getModuleReference();
    if (!usedLanguages.contains(ref)) {
      if (module != null) {
        if (respectModulesScopes && !declaredUsedLanguages.contains(lang)) {
          module.addUsedLanguage(ref);
        }
      }
      usedLanguages.add(ref);
      model.addLanguage(ref);
    }
    for (    SReference reference : node.getReferences()) {
      boolean internal=model.getSModelReference().equals(reference.getTargetSModelReference());
      if (internal)       continue;
      SModelReference targetModelReference=reference.getTargetSModelReference();
      if (targetModelReference != null && !importedModels.contains(targetModelReference)) {
        if (respectModulesScopes && module != null) {
          SModelDescriptor targetModelDescriptor=SModelRepository.getInstance().getModelDescriptor(targetModelReference);
          IModule targetModule=targetModelDescriptor == null ? null : targetModelDescriptor.getModule();
          if (targetModule != null && !declaredDependencies.contains(targetModule)) {
            module.addDependency(targetModule.getModuleReference(),false);
          }
        }
        model.addModelImport(targetModelReference,firstVersion);
        importedModels.add(targetModelReference);
      }
    }
  }
  importedModels.clear();
}
