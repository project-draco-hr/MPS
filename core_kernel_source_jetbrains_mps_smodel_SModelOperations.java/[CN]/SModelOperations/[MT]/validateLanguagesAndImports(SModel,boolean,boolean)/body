{
  ModelChange.assertLegalChange_new(model);
  final SModule module=model.getModule();
  final Collection<SModule> declaredDependencies=module != null ? new GlobalModuleDependenciesManager(module).getModules(Deptype.VISIBLE) : null;
  final Collection<Language> declaredUsedLanguages=module != null ? new GlobalModuleDependenciesManager(module).getUsedLanguages() : null;
  Set<SModuleReference> usedLanguages=getAllImportedLanguages(model);
  Set<SModelReference> importedModels=new HashSet<SModelReference>();
  for (  SModel sm : allImportedModels(model)) {
    importedModels.add(sm.getReference());
  }
  final ModelDependencyScanner modelScanner=new ModelDependencyScanner();
  modelScanner.crossModelReferences(true).usedLanguages(true).walk(model);
  for (  SLanguage language : modelScanner.getUsedLanguages()) {
    Language lang=ModuleRepositoryFacade.getInstance().getModule(language.getQualifiedName(),Language.class);
    if (lang == null) {
      LOG.error("Can't find language " + language.getQualifiedName());
      continue;
    }
    SModuleReference ref=lang.getModuleReference();
    if (usedLanguages.add(ref)) {
      if (module != null) {
        if (respectModulesScopes && !declaredUsedLanguages.contains(lang)) {
          ((AbstractModule)module).addUsedLanguage(ref);
        }
      }
      ((jetbrains.mps.smodel.SModelInternal)model).addLanguage(ref);
    }
  }
  for (  SModelReference targetModelReference : modelScanner.getCrossModelReferences()) {
    if (importedModels.add(targetModelReference)) {
      if (respectModulesScopes && module != null) {
        SModel targetModelDescriptor=SModelRepository.getInstance().getModelDescriptor(targetModelReference);
        SModule targetModule=targetModelDescriptor == null ? null : targetModelDescriptor.getModule();
        if (targetModule != null && !declaredDependencies.contains(targetModule)) {
          ((AbstractModule)module).addDependency(targetModule.getModuleReference(),false);
        }
      }
      ((jetbrains.mps.smodel.SModelInternal)model).addModelImport(targetModelReference,firstVersion);
    }
  }
  importedModels.clear();
}
