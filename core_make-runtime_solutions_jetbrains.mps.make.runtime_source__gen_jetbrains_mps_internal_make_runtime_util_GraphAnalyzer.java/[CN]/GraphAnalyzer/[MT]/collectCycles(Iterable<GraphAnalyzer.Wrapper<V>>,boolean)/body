{
  final List<List<V>> cycles=ListSequence.<List<V>>fromList(new ArrayList<List<V>>());
  Sequence.<GraphAnalyzer.Wrapper<V>>fromIterable(ws).visitAll(new IVisitor<GraphAnalyzer.Wrapper<V>>(){
    public void visit(    GraphAnalyzer.Wrapper<V> w){
      w.clear();
    }
  }
);
  Sequence.<GraphAnalyzer.Wrapper<V>>fromIterable(ws).where(new IWhereFilter<GraphAnalyzer.Wrapper<V>>(){
    public boolean accept(    GraphAnalyzer.Wrapper<V> w){
      return !(w.entered);
    }
  }
).visitAll(new IVisitor<GraphAnalyzer.Wrapper<V>>(){
    public void visit(    final GraphAnalyzer.Wrapper<V> w){
      dfsVisit(w,new _FunctionTypes._void_P2_E0<GraphAnalyzer.Wrapper<V>,_FunctionTypes._void_P0_E0>(){
        public void invoke(        GraphAnalyzer.Wrapper<V> ww,        _FunctionTypes._void_P0_E0 cont){
          cont.invoke();
          if (w != ww || Sequence.<GraphAnalyzer.Wrapper<V>>fromIterable(backward.invoke(ww)).contains(ww)) {
            w.successor(ww);
          }
        }
      }
,backward);
      if (trivial || ListSequence.<GraphAnalyzer.Wrapper<V>>fromList(w.successors).isNotEmpty()) {
        ListSequence.<List<V>>fromList(cycles).addElement(collectSuccessors(w,ListSequence.<V>fromListAndArray(new ArrayList<V>(),w.vertex)));
      }
    }
  }
);
  return cycles;
}
