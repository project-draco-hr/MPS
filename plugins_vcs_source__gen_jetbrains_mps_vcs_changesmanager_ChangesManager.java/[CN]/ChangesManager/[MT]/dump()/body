{
  myCommandQueue.runTask(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          PrintStream out=System.out;
          for (          IMapping<SModelReference,ModelChangesManager> smrMcmPair : MapSequence.fromMap(myModelChanges).where(new IWhereFilter<IMapping<SModelReference,ModelChangesManager>>(){
            public boolean accept(            IMapping<SModelReference,ModelChangesManager> m){
              return !(ListSequence.fromList(m.value().getChangeList()).isEmpty());
            }
          }
)) {
            out.println("==" + smrMcmPair.key() + "==");
            for (            OldChange change : ListSequence.fromList(smrMcmPair.value().getChangeList())) {
              out.println(change);
            }
            out.println();
          }
          out.println();
          out.println("==Unchanged models==");
          for (          IMapping<SModelReference,ModelChangesManager> smrMcmPair : MapSequence.fromMap(myModelChanges).where(new IWhereFilter<IMapping<SModelReference,ModelChangesManager>>(){
            public boolean accept(            IMapping<SModelReference,ModelChangesManager> m){
              return ListSequence.fromList(m.value().getChangeList()).isEmpty() && m.value().isEnabled();
            }
          }
)) {
            out.println("- " + smrMcmPair.key());
          }
          out.println();
          out.println(MapSequence.fromMap(myModelChanges).where(new IWhereFilter<IMapping<SModelReference,ModelChangesManager>>(){
            public boolean accept(            IMapping<SModelReference,ModelChangesManager> m){
              return ListSequence.fromList(m.value().getChangeList()).isEmpty() && !(m.value().isEnabled());
            }
          }
).count() + " disabled models");
        }
      }
);
    }
  }
);
}
