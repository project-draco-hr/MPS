{
  HashMap<SNode,SNode> mapping=new HashMap<SNode,SNode>();
  final SNode copy=CopyUtil.copy(Arrays.asList(myParentNode.getContainingRoot()),mapping).get(0);
  getModelForTypechecking().addRootNode(copy);
  boolean holeIsAType=SModelUtil.isAssignableConcept(NameUtil.nodeFQName(myLink.getDeclarationNode()),"jetbrains.mps.lang.core.structure.IType");
  SNode hole=null;
  SNode parent=mapping.get(myParentNode);
  hole=SModelUtil_new.instantiateConceptDeclaration(SNodeUtil.concept_BaseConcept,null,null,true);
  if (myCurrentChild != null) {
    SNode child=mapping.get(myCurrentChild);
    parent.insertChildBefore(myLink,hole,child);
    parent.removeChild(child);
  }
 else {
    parent.addChild(myLink,hole);
  }
  InequalitySystem inequationsForHole=TypeChecker.getInstance().getInequalitiesForHole(hole,holeIsAType);
  inequationsForHole.replaceRefs(mapping);
  return inequationsForHole;
}
