{
  if (SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,"jetbrains.mps.lang.core.structure.INamedConcept"))) {
    return SPropertyOperations.getString(SNodeOperations.cast(node,MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
  }
 else {
    Iterable<SProperty> properties=SNodeOperations.getConcept(node).getProperties();
    Iterable<SProperty> stringProperties=Sequence.fromIterable(properties).where(new IWhereFilter<SProperty>(){
      public boolean accept(      SProperty it){
        SDataType type=it.getType();
        return type instanceof SPrimitiveDataType && eq_5g37n9_a0a1a0a0a0a0a1a0a0b(((SPrimitiveDataType)type).getType(),SPrimitiveDataType.STRING);
      }
    }
).toListSequence();
    if (Sequence.fromIterable(stringProperties).count() == 1) {
      return node.getProperty(Sequence.fromIterable(stringProperties).first());
    }
  }
  int nodeId=((jetbrains.mps.smodel.SNode)node).getNodeId().hashCode();
  return SNodeOperations.getConcept(node).getName() + "@" + ((nodeId >>> 16) + (nodeId << 16 >>> 16));
}
