{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            if (!(SNodeOperations.isInstanceOf(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticFieldReference"))) {
              return new EmptyScope();
            }
            if ((SLinkOperations.getTarget(SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticFieldReference"),"classifier",false) == null)) {
              return new EmptyScope();
            }
            SNode classifier=IClassifier_Behavior.call_getThisType_7405920559687254782(SLinkOperations.getTarget(SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.baseLanguage.structure.StaticFieldReference"),"classifier",false));
            return new NamedElementsScope(Sequence.fromIterable(IClassifierType_Behavior.call_getVisibleMembers_6145907390641297279(classifier,_context.getContextNode())).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
              }
            }
).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
              }
            }
));
          }
        }
      }
;
    }
  }
);
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a0a0a0a1a0b0a2a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ClassifierScopes.getClassesForStaticFieldReference(_context.getContextNode(),operationContext.getScope());
        }
      }
;
    }
  }
);
  return references;
}
