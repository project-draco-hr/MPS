{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode classifier=SNodeOperations.cast(SLinkOperations.getTarget(_context.getReferenceNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Classifier");
            if ((classifier == null)) {
              return new EmptyScope();
            }
            return new NamedElementsScope(Members.visibleStaticFields(classifier,_context.getContextNode()));
          }
        }
      }
;
    }
  }
);
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a0a0a0a1a0b0a2a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ClassifierScopes.getClassesForStaticFieldReference(_context.getContextNode(),operationContext.getScope());
        }
      }
;
    }
  }
);
  return references;
}
