{
  List<SNode> statements=SLinkOperations.getTargets(body,"statement",true);
  int size=ListSequence.fromList(statements).count();
  if (size < 2) {
    return;
  }
  SNode beforeLastStatement=ListSequence.fromList(statements).getElement(size - 2);
  if (SNodeOperations.isInstanceOf(beforeLastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
    SNode expressionStatement=SNodeOperations.cast(beforeLastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement");
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(expressionStatement,"expression",true),"jetbrains.mps.baseLanguage.structure.AssignmentExpression")) {
      SNode assignment=SNodeOperations.cast(SLinkOperations.getTarget(expressionStatement,"expression",true),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
      if ((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(assignment,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(assignment,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
        SNode reference2=SNodeOperations.cast(SLinkOperations.getTarget(assignment,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference");
        if (SLinkOperations.getTarget(variableReference,"variableDeclaration",false) == SLinkOperations.getTarget(reference2,"variableDeclaration",false)) {
          SLinkOperations.setTarget(lastReturn,"expression",SLinkOperations.getTarget(assignment,"rValue",true),true);
          SNodeOperations.deleteNode(beforeLastStatement);
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(variableReference,"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
            removeUnusedDeclaration(ListSequence.fromList(SNodeOperations.getDescendants(body,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
              }
            }
).toListSequence(),SNodeOperations.cast(SLinkOperations.getTarget(variableReference,"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
          }
        }
      }
    }
  }
}
