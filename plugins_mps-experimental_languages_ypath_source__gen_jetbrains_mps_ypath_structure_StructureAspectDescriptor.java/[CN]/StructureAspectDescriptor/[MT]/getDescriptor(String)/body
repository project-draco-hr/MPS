{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ChildrenBlock").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ExpressionFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("expression","").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.FeatureGetFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("get","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.FeatureSequenceFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("sequence","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.FeatureSizeFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("size","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.FromOperation").super_("jetbrains.mps.ypath.structure.TreePathOperation").parents("jetbrains.mps.ypath.structure.TreePathOperation").children(new String[]{"fromExpression"},new boolean[]{false}).alias("from","start tree traversal").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GFCardinalFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction").abstract_().create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GFCardinalParamFun").super_("jetbrains.mps.ypath.structure.GFCardinalFun").parents("jetbrains.mps.ypath.structure.GFCardinalFun","jetbrains.mps.ypath.structure.IParamFeatureFun","jetbrains.mps.ypath.structure.IDesignFunction").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GFGetterFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GFGetterParamFun").super_("jetbrains.mps.ypath.structure.GFGetterFun").parents("jetbrains.mps.ypath.structure.GFGetterFun","jetbrains.mps.ypath.structure.IParamFeatureFun","jetbrains.mps.ypath.structure.IDesignFunction").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GeneratorFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("generator","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GenericFeature").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.ypath.structure.IGenericFeature","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.GenericParamFeature").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.ypath.structure.IGenericFeature","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.ypath.structure.IParamFeature").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IDesignFunction").interface_().create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IFeature").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").properties("writable","default","ascending").references("opposite").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IFunctionParam").interface_().create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IGenericFeature").interface_().parents("jetbrains.mps.ypath.structure.IFeature").children(new String[]{"getter"},new boolean[]{false}).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IParamFeature").interface_().parents("jetbrains.mps.ypath.structure.IFeature").children(new String[]{"parameterType","parameterQueryFunction","targetTypeFunction","toStringFunction","cardinal"},new boolean[]{false,false,false,false,false}).create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IParamFeatureFun").interface_().create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ITreePathExpression").interface_().create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IndexFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("index","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.IterateOperation").super_("jetbrains.mps.ypath.structure.TreePathOperation").parents("jetbrains.mps.ypath.structure.TreePathOperation").properties("axis","useDefault").references("usedFeature").children(new String[]{"paramObject"},new boolean[]{false}).alias("find","traverse the tree").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.KindBlock").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.LambdaMethod").super_("jetbrains.mps.baseLanguage.structure.Closure").parents("jetbrains.mps.baseLanguage.structure.Closure").children(new String[]{"parameter"},new boolean[]{false}).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.LambdaMethodParameter").super_("jetbrains.mps.baseLanguage.structure.ClosureParameter").parents("jetbrains.mps.baseLanguage.structure.ClosureParameter").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ListFeature").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"getFunction","sizeFunction"},new boolean[]{false,false}).alias("list feature","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation").super_("jetbrains.mps.ypath.structure.TreePathOperation").parents("jetbrains.mps.ypath.structure.TreePathOperation").children(new String[]{"matchExpression"},new boolean[]{false}).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.MatchKindOperation").super_("jetbrains.mps.ypath.structure.TreePathOperation").parents("jetbrains.mps.ypath.structure.TreePathOperation").references("nodeKind").children(new String[]{"nodeKindOccurrence"},new boolean[]{false}).create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.MatchPropertyOperation").super_("jetbrains.mps.ypath.structure.MatchKindOperation").parents("jetbrains.mps.ypath.structure.MatchKindOperation").references("property").children(new String[]{"matchExpression"},new boolean[]{false}).create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.NodeFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node","").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.NodeKindCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"statementList"},new boolean[]{false}).abstract_().create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.NodeKindDefaultCase").super_("jetbrains.mps.ypath.structure.NodeKindCase").parents("jetbrains.mps.ypath.structure.NodeKindCase").alias("default:","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.NodeKindSpecificCase").super_("jetbrains.mps.ypath.structure.NodeKindCase").parents("jetbrains.mps.ypath.structure.NodeKindCase").references("treeNodeKind").alias("case <{treeNodeKind}>:","").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.NodeTypeFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("nodeType","").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamFeatureGetFun").super_("jetbrains.mps.ypath.structure.FeatureGetFun").parents("jetbrains.mps.ypath.structure.FeatureGetFun","jetbrains.mps.ypath.structure.IParamFeatureFun").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamFeatureSequenceFun").super_("jetbrains.mps.ypath.structure.FeatureSequenceFun").parents("jetbrains.mps.ypath.structure.FeatureSequenceFun","jetbrains.mps.ypath.structure.IParamFeatureFun").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamFeatureSizeFun").super_("jetbrains.mps.ypath.structure.FeatureSizeFun").parents("jetbrains.mps.ypath.structure.FeatureSizeFun","jetbrains.mps.ypath.structure.IParamFeatureFun").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("param","").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamListFeature").super_("jetbrains.mps.ypath.structure.ListFeature").parents("jetbrains.mps.ypath.structure.ListFeature","jetbrains.mps.ypath.structure.IParamFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"getFunction","sizeFunction"},new boolean[]{false,false}).alias("parameterized list feature","").create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParamSequenceFeature").super_("jetbrains.mps.ypath.structure.SequenceFeature").parents("jetbrains.mps.ypath.structure.SequenceFeature","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.ypath.structure.IParamFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"paramSequenceFunction","paramSizeFunction"},new boolean[]{false,false}).alias("parameterized sequence feature","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParameterQueryFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction").alias("getParameters","").create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParameterWrapper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("paramValue").references("paramRef").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ParentBlock").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.PropertyGetter").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.SequenceFeature").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"sequenceFunction","sizeFunction"},new boolean[]{false,false}).alias("sequence feature","").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.SwitchNodeKindStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"nodeExpression","nodeKindCase"},new boolean[]{false,true}).alias("switch node kind","").create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TargetTypeFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction").alias("getTargetType","").create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ToStringFun").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreeNodeKind").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"trigger","properties"},new boolean[]{false,true}).create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreeNodeKindOccurrence").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("nodeKind").create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreeNodeKindProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("default").children(new String[]{"getter"},new boolean[]{false}).create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreeNodeKindReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("treePathAspect","treeNodeKind").alias("treeNodeKindFilter","reference to tree node kind").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePath").interface_().references("defaultFeature").children(new String[]{"treePathType","parentBlock","childrenBlock","features"},new boolean[]{false,false,false,true}).create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathAdapterExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("treepathAspect").children(new String[]{"expression"},new boolean[]{false}).create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathAspect").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.ypath.structure.TreePath").children(new String[]{"nodeKinds"},new boolean[]{true}).create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.ypath.structure.TreePath").alias("treepath initializer","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathOperationExpression").super_("jetbrains.mps.baseLanguage.structure.DotExpression").parents("jetbrains.mps.baseLanguage.structure.DotExpression","jetbrains.mps.ypath.structure.ITreePathExpression").children(new String[]{"operand","operation"},new boolean[]{false,false}).create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.TreePathType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"nodeType"},new boolean[]{false}).alias("treepath","").create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.ValueFunctionParam").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("value","").create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitBlock").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").children(new String[]{"expression","visitParameterDeclarationList"},new boolean[]{false,false}).alias("visit","").create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitChildrenExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"actualArgument"},new boolean[]{true}).alias("visit children","").create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitNodesStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"visitBlock"},new boolean[]{false}).alias("visit","").create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitParameterDeclarationList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"visitParameterDeclaration"},new boolean[]{true}).create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.VisitParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("visitParameterDeclaration").create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.WhereBlock").super_("jetbrains.mps.ypath.structure.LambdaMethod").parents("jetbrains.mps.ypath.structure.LambdaMethod").create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.ypath.structure.WhereOperation").super_("jetbrains.mps.ypath.structure.TreePathOperation").parents("jetbrains.mps.ypath.structure.TreePathOperation").children(new String[]{"whereBlock","filter"},new boolean[]{false,false}).alias("where","filter the tree").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
