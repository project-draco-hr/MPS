{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ChildrenBlock","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ExpressionFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"expression","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.FeatureGetFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"get","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.FeatureSequenceFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sequence","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.FeatureSizeFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"size","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.FromOperation","jetbrains.mps.ypath.structure.TreePathOperation",false,new String[]{"jetbrains.mps.ypath.structure.TreePathOperation"},new String[]{},new String[]{},new String[]{"fromExpression"},new boolean[]{false},false,false,"from","start tree traversal","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GFCardinalFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GFCardinalParamFun","jetbrains.mps.ypath.structure.GFCardinalFun",false,new String[]{"jetbrains.mps.ypath.structure.GFCardinalFun","jetbrains.mps.ypath.structure.IParamFeatureFun","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GFGetterFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GFGetterParamFun","jetbrains.mps.ypath.structure.GFGetterFun",false,new String[]{"jetbrains.mps.ypath.structure.GFGetterFun","jetbrains.mps.ypath.structure.IParamFeatureFun","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GeneratorFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"generator","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GenericFeature","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.ypath.structure.IGenericFeature","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.GenericParamFeature","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.ypath.structure.IGenericFeature","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.ypath.structure.IParamFeature"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IDesignFunction",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IFeature",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"writable","default","ascending"},new String[]{"opposite"},new String[]{},new boolean[]{},false,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IFunctionParam",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IGenericFeature",null,true,new String[]{"jetbrains.mps.ypath.structure.IFeature"},new String[]{},new String[]{},new String[]{"getter"},new boolean[]{false},false,false,"","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IParamFeature",null,true,new String[]{"jetbrains.mps.ypath.structure.IFeature"},new String[]{},new String[]{},new String[]{"parameterType","parameterQueryFunction","targetTypeFunction","toStringFunction","cardinal"},new boolean[]{false,false,false,false,false},false,false,"","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IParamFeatureFun",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ITreePathExpression",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IndexFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"index","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.IterateOperation","jetbrains.mps.ypath.structure.TreePathOperation",false,new String[]{"jetbrains.mps.ypath.structure.TreePathOperation"},new String[]{"axis","useDefault"},new String[]{"usedFeature"},new String[]{"paramObject"},new boolean[]{false},false,false,"find","traverse the tree","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.KindBlock","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.LambdaMethod","jetbrains.mps.baseLanguage.structure.Closure",false,new String[]{"jetbrains.mps.baseLanguage.structure.Closure"},new String[]{},new String[]{},new String[]{"parameter"},new boolean[]{false},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.LambdaMethodParameter","jetbrains.mps.baseLanguage.structure.ClosureParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClosureParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ListFeature","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"getFunction","sizeFunction"},new boolean[]{false,false},false,false,"list feature","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation","jetbrains.mps.ypath.structure.TreePathOperation",false,new String[]{"jetbrains.mps.ypath.structure.TreePathOperation"},new String[]{},new String[]{},new String[]{"matchExpression"},new boolean[]{false},false,false,"","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.MatchKindOperation","jetbrains.mps.ypath.structure.TreePathOperation",false,new String[]{"jetbrains.mps.ypath.structure.TreePathOperation"},new String[]{},new String[]{"nodeKind"},new String[]{"nodeKindOccurrence"},new boolean[]{false},false,false,"","","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.MatchPropertyOperation","jetbrains.mps.ypath.structure.MatchKindOperation",false,new String[]{"jetbrains.mps.ypath.structure.MatchKindOperation"},new String[]{},new String[]{"property"},new String[]{"matchExpression"},new boolean[]{false},false,false,"","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.NodeFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"node","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.NodeKindCase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"statementList"},new boolean[]{false},true,false,"","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.NodeKindDefaultCase","jetbrains.mps.ypath.structure.NodeKindCase",false,new String[]{"jetbrains.mps.ypath.structure.NodeKindCase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"default:","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.NodeKindSpecificCase","jetbrains.mps.ypath.structure.NodeKindCase",false,new String[]{"jetbrains.mps.ypath.structure.NodeKindCase"},new String[]{},new String[]{"treeNodeKind"},new String[]{},new boolean[]{},false,false,"case <{treeNodeKind}>:","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.NodeTypeFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"nodeType","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamFeatureGetFun","jetbrains.mps.ypath.structure.FeatureGetFun",false,new String[]{"jetbrains.mps.ypath.structure.FeatureGetFun","jetbrains.mps.ypath.structure.IParamFeatureFun"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamFeatureSequenceFun","jetbrains.mps.ypath.structure.FeatureSequenceFun",false,new String[]{"jetbrains.mps.ypath.structure.FeatureSequenceFun","jetbrains.mps.ypath.structure.IParamFeatureFun"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamFeatureSizeFun","jetbrains.mps.ypath.structure.FeatureSizeFun",false,new String[]{"jetbrains.mps.ypath.structure.FeatureSizeFun","jetbrains.mps.ypath.structure.IParamFeatureFun"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.ypath.structure.IFunctionParam","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"param","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamListFeature","jetbrains.mps.ypath.structure.ListFeature",false,new String[]{"jetbrains.mps.ypath.structure.ListFeature","jetbrains.mps.ypath.structure.IParamFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"getFunction","sizeFunction"},new boolean[]{false,false},false,false,"parameterized list feature","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParamSequenceFeature","jetbrains.mps.ypath.structure.SequenceFeature",false,new String[]{"jetbrains.mps.ypath.structure.SequenceFeature","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.ypath.structure.IParamFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"paramSequenceFunction","paramSizeFunction"},new boolean[]{false,false},false,false,"parameterized sequence feature","","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParameterQueryFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"getParameters","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParameterWrapper","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"paramValue"},new String[]{"paramRef"},new String[]{},new boolean[]{},false,false,"","","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ParentBlock","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.PropertyGetter","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.SequenceFeature","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ypath.structure.IFeature","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"sequenceFunction","sizeFunction"},new boolean[]{false,false},false,false,"sequence feature","","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.SwitchNodeKindStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"nodeExpression","nodeKindCase"},new boolean[]{false,true},false,false,"switch node kind","","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TargetTypeFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"getTargetType","","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ToStringFun","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ypath.structure.IDesignFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreeNodeKind","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"trigger","properties"},new boolean[]{false,true},false,false,"","","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreeNodeKindOccurrence","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"nodeKind"},new String[]{},new boolean[]{},false,false,"","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreeNodeKindProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"default"},new String[]{},new String[]{"getter"},new boolean[]{false},false,false,"","","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreeNodeKindReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"treePathAspect","treeNodeKind"},new String[]{},new boolean[]{},false,false,"treeNodeKindFilter","reference to tree node kind","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePath",null,true,new String[]{},new String[]{},new String[]{"defaultFeature"},new String[]{"treePathType","parentBlock","childrenBlock","features"},new boolean[]{false,false,false,true},false,false,"","","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathAdapterExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"treepathAspect"},new String[]{"expression"},new boolean[]{false},false,false,"","","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathAspect","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.ypath.structure.TreePath"},new String[]{},new String[]{},new String[]{"nodeKinds"},new boolean[]{true},false,false,"","","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.ypath.structure.TreePath"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"treepath initializer","","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathOperationExpression","jetbrains.mps.baseLanguage.structure.DotExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.DotExpression","jetbrains.mps.ypath.structure.ITreePathExpression"},new String[]{},new String[]{},new String[]{"operand","operation"},new boolean[]{false,false},false,false,"","","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.TreePathType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"nodeType"},new boolean[]{false},false,false,"treepath","","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.ValueFunctionParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"value","","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitBlock","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{"expression","visitParameterDeclarationList"},new boolean[]{false,false},false,false,"visit","","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitChildrenExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"actualArgument"},new boolean[]{true},false,false,"visit children","","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitNodesStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"visitBlock"},new boolean[]{false},false,false,"visit","","");
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitParameterDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitParameterDeclarationList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"visitParameterDeclaration"},new boolean[]{true},false,false,"","","");
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.VisitParameterReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference"},new String[]{},new String[]{"visitParameterDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.WhereBlock","jetbrains.mps.ypath.structure.LambdaMethod",false,new String[]{"jetbrains.mps.ypath.structure.LambdaMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.ypath.structure.WhereOperation","jetbrains.mps.ypath.structure.TreePathOperation",false,new String[]{"jetbrains.mps.ypath.structure.TreePathOperation"},new String[]{},new String[]{},new String[]{"whereBlock","filter"},new boolean[]{false,false},false,false,"where","filter the tree","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
