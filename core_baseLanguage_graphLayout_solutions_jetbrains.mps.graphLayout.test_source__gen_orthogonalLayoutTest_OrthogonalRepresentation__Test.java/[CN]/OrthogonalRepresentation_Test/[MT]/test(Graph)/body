{
  EmbeddedGraph embeddedGraph=new PQPlanarizationFinder().find(graph);
  checkFullEmbedding(embeddedGraph);
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  OrthogonalRepresentationChecker.checkBends(graph,bends);
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  OrthogonalRepresentationChecker.checkBends(graph,bends);
  for (  Dart bend : SetSequence.fromSet(MapSequence.fromMap(bends).keySet())) {
    Assert.assertTrue(MapSequence.fromMap(bends).get(bend) == 0);
  }
  System.out.println(embeddedGraph);
  Map<Dart,Integer> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  for (  final Node node : ListSequence.fromList(graph.getNodes())) {
    System.out.println("node: " + node);
    for (    Dart dart : SetSequence.fromSet(MapSequence.fromMap(bends).keySet()).where(new IWhereFilter<Dart>(){
      public boolean accept(      Dart it){
        return it.getSource() == node;
      }
    }
)) {
      System.out.println("  -> dart " + dart + ": "+ MapSequence.fromMap(angles).get(dart)+ ", direction: "+ getDirection(MapSequence.fromMap(directions).get(dart)));
    }
  }
  EdgeLengthComputer placer=new EdgeLengthComputer();
  placer.compute(embeddedGraph,directions);
}
