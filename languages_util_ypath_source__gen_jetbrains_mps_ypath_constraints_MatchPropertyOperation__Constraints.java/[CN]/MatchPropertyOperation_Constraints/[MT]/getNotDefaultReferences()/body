{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode nk=SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getReferenceNode(),"nodeKindOccurrence",true),"nodeKind",false);
          return (List<SNode>)ListSequence.fromList(SNodeOperations.getDescendants(nk,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.TreeNodeKindProperty");
            }
          }
).toListSequence();
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_cb3j36_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
