{
  ITemplateProcessor templateProcessor=env.getTemplateProcessor();
  for (  SNode templateFragment : myFragments) {
    SNode templateFragmentNode=templateFragment.getParent();
    SNode contextParentNode=null;
    try {
      contextParentNode=env.getQueryExecutor().getContextNodeForTemplateFragment(templateFragmentNode,outputContextNode,context);
    }
 catch (    Exception e) {
      env.getLogger().handleException(e);
    }
    if (contextParentNode != null) {
      try {
        String tfMapLabel=GeneratorUtilEx.getMappingName_TemplateFragment(templateFragment,null);
        List<SNode> outputNodesToWeave=templateProcessor.apply(templateFragmentNode,context.subContext(tfMapLabel));
        String childRole=templateFragmentNode.getRoleInParent();
        for (        SNode outputNodeToWeave : outputNodesToWeave) {
          env.weaveNode(contextParentNode,childRole,outputNodeToWeave,new jetbrains.mps.smodel.SNodePointer(templateFragment),context.getInput());
        }
      }
 catch (      DismissTopMappingRuleException e) {
        env.getLogger().error(templateFragment.getReference(),"bad template: dismiss in weave is not supported",GeneratorUtil.describe(myTemplateNode,"template node"),GeneratorUtil.describe(context.getInput(),"input node"),GeneratorUtil.describe(contextParentNode,"output context node"));
      }
catch (      TemplateProcessingFailureException ex) {
        ProblemDescription[] pd=new ProblemDescription[]{GeneratorUtil.describe(myTemplateNode,"template node"),GeneratorUtil.describe(context.getInput(),"input node"),GeneratorUtil.describe(contextParentNode,"output context node")};
        env.getLogger().error(templateFragment.getReference(),"error processing template fragment",GeneratorUtil.concat(pd,ex.asProblemDescription()));
      }
    }
 else {
      env.getLogger().error(templateFragment.getReference(),"couldn't define 'context' for template fragment",GeneratorUtil.describe(myTemplateNode,"template node"),GeneratorUtil.describe(context.getInput(),"input node"));
    }
  }
}
