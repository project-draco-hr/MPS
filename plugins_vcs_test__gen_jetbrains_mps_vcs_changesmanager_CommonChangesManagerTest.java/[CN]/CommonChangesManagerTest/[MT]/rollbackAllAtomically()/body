{
  String stringBeforeAll=getChangeSetString(myUiDiff.getChangeSet());
  final SModel model=myUiDiff.getModelDescriptor().getSModel();
  List<SNodePointer> affectedRootPointers=ListSequence.fromList(myUiDiff.getChangeSet().getModelChanges()).select(new ISelector<ModelChange,SNodePointer>(){
    public SNodePointer select(    ModelChange ch){
      return new SNodePointer(myUiDiff.getModelDescriptor().getSModelReference(),ch.getRootId());
    }
  }
).distinct().toListSequence();
  final List<ModelChange> oppositeChanges=ListSequence.fromList(myUiDiff.getChangeSet().getModelChanges()).select(new ISelector<ModelChange,ModelChange>(){
    public ModelChange select(    ModelChange ch){
      return ch.getOppositeChange();
    }
  }
).toListSequence();
  runCommandAndWait(new Runnable(){
    public void run(){
      final NodeCopier nc=new NodeCopier(model);
      ListSequence.fromList(oppositeChanges).where(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange ch){
          return ch instanceof NodeGroupChange;
        }
      }
).visitAll(new IVisitor<ModelChange>(){
        public void visit(        ModelChange ch){
          ((NodeGroupChange)ch).prepare();
        }
      }
);
      ListSequence.fromList(oppositeChanges).visitAll(new IVisitor<ModelChange>(){
        public void visit(        ModelChange ch){
          ch.apply(model,nc);
        }
      }
);
      nc.restoreIds(true);
    }
  }
);
  waitAndCheck(myUiDiff);
  Assert.assertTrue(ListSequence.fromList(myUiDiff.getChangeSet().getModelChanges()).isEmpty());
  undoAndCheck(myUiDiff,Arrays.asList(ListSequence.fromList(affectedRootPointers).first()),false);
  Assert.assertEquals(stringBeforeAll,getChangeSetString(myUiDiff.getChangeSet()));
}
