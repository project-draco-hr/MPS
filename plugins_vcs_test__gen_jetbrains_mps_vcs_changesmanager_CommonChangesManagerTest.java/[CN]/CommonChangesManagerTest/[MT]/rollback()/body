{
  List<VcsException> exceptions=ListSequence.fromList(new ArrayList<VcsException>());
  myGitVcs.getRollbackEnvironment().rollbackChanges(Arrays.asList(myChangeListManager.getChange(myUtilVirtualFile)),exceptions,RollbackProgressListener.EMPTY);
  if (ListSequence.fromList(exceptions).isNotEmpty()) {
    throw ListSequence.fromList(exceptions).first();
  }
  myChangeListManager.ensureUpToDate(false);
  FileStatusManager.getInstance(myIdeaProject).fileStatusChanged(myUtilVirtualFile);
  waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_orwzer_a0a7a41(myUtilDiff.getChangeSet())).isEmpty());
  SetSequence.fromSet(MapSequence.fromMap(myExpectedFileStatuses).keySet()).where(new IWhereFilter<String>(){
    public boolean accept(    String k){
      return k.startsWith("util.");
    }
  }
).toListSequence().visitAll(new IVisitor<String>(){
    public void visit(    String k){
      MapSequence.fromMap(myExpectedFileStatuses).removeKey(k);
    }
  }
);
  checkRootStatuses();
}
