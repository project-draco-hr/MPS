{
  Random random=new Random(239);
  String stringBeforeAll=getChangeSetString(myUiDiff.getChangeSet());
  final SModel model=myUiDiff.getModelDescriptor().getSModel();
  List<SNodePointer> affectedNodePointers=ListSequence.fromList(new ArrayList<SNodePointer>());
  while (true) {
    List<ModelChange> changesBefore=ListSequence.fromListWithValues(new ArrayList<ModelChange>(),myUiDiff.getChangeSet().getModelChanges());
    if (ListSequence.fromList(changesBefore).isEmpty()) {
      break;
    }
    final ModelChange changeToPick=ListSequence.fromList(changesBefore).getElement(random.nextInt(ListSequence.fromList(changesBefore).count()));
    runCommandAndWait(new Runnable(){
      public void run(){
        changeToPick.getOppositeChange().apply(model,new NodeCopier(model));
      }
    }
);
    waitAndCheck(myUiDiff);
    ListSequence.fromList(changesBefore).removeElement(changeToPick);
    Assert.assertEquals(getChangeSetString(changesBefore),getChangeSetString(myUiDiff.getChangeSet()));
    ListSequence.fromList(affectedNodePointers).addElement(new SNodePointer(myUiDiff.getModelDescriptor().getSModelReference(),changeToPick.getRootId()));
  }
  undoAndCheck(myUiDiff,affectedNodePointers,false);
  Assert.assertEquals(stringBeforeAll,getChangeSetString(myUiDiff.getChangeSet()));
}
