{
  TestMain.testOnProjectCopy(PROJECT_ARCHIVE,DESTINATION_PROJECT_DIR,PROJECT_FILE,new TestMain.ProjectRunnable(){
    public boolean execute(    Project project){
      try {
        myRegistry=CurrentDifferenceRegistry.getInstance(ProjectHelper.toIdeaProject(project));
        waitForChangesManager();
        CurrentDifference html=getCurrentDifference("html");
        CurrentDifference ui=getCurrentDifference("ui");
        CurrentDifference util=getCurrentDifference("util");
        Assert.assertNull(html.getChangeSet());
        Assert.assertNull(ui.getChangeSet());
        Assert.assertNull(util.getChangeSet());
        html.setEnabled(true);
        ui.setEnabled(true);
        util.setEnabled(true);
        waitForChangesManager();
        Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a61a0a3a0a3(html.getChangeSet())).isEmpty());
        Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a71a0a3a0a3(ui.getChangeSet())).isEmpty());
        Assert.assertNull(util.getChangeSet());
        ModelAccess.instance().runWriteActionInCommand(new Runnable(){
          public void run(){
            SModel model=getModel("util").getSModel();
            SNode root=ListSequence.fromList(SModelOperations.getRoots(model,"jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode r){
                return "SearchPanel".equals(SPropertyOperations.getString(r,"name"));
              }
            }
);
            SPropertyOperations.set(root,"name","SearchPanelModified");
            SNodeOperations.deleteNode(SLinkOperations.getTarget(root,"superclass",true));
            ListSequence.fromList(SLinkOperations.getTargets(root,"field",true)).clear();
          }
        }
);
        waitForChangesManager();
        Assert.assertFalse(ListSequence.fromList(check_orwzer_a0a22a0a3a0a3(util.getChangeSet())).isEmpty());
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
        return false;
      }
    }
  }
,"jetbrains.mps.vcs","Git4Idea","jetbrains.mps.ide.make");
}
