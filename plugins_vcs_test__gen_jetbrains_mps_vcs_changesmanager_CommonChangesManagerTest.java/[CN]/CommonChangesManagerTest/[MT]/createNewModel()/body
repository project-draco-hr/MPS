{
  final Wrappers._T<CurrentDifference> newModelDiff=new Wrappers._T<CurrentDifference>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      String modelName="newmodel";
      IModule module=myUiDiff.getModelDescriptor().getModule();
      module.createModel(SModelFqName.fromString(MODEL_PREFIX + modelName),module.getSModelRoots().get(0),null);
      newModelDiff.value=getCurrentDifference(modelName);
    }
  }
);
  final EditableSModelDescriptor md=newModelDiff.value.getModelDescriptor();
  ModelAccess.instance().runWriteInEDT(new Runnable(){
    public void run(){
      md.getSModel();
      md.save();
    }
  }
);
  ModelAccess.instance().flushEventQueue();
  VirtualFile vf=VirtualFileUtils.getVirtualFile(md.getModelFile());
  VcsDirtyScopeManager.getInstance(myIdeaProject).fileDirty(vf);
  myChangeListManager.ensureUpToDate(false);
  FileStatusManager.getInstance(myIdeaProject).fileStatusChanged(vf);
  newModelDiff.value.setEnabled(true);
  waitForChangesManager();
  Assert.assertTrue((int)ListSequence.fromList(newModelDiff.value.getChangeSet().getModelChanges()).count() == 0);
  runCommandAndWait(new Runnable(){
    public void run(){
      createNewRoot(md.getSModel());
    }
  }
);
  waitForChangesManager();
  List<ModelChange> changes=newModelDiff.value.getChangeSet().getModelChanges();
  Assert.assertEquals(1,ListSequence.fromList(changes).count());
  Assert.assertTrue(ListSequence.fromList(changes).first() instanceof AddRootChange);
}
