{
  ModelAccess.instance().runCommandInEDT(new Runnable(){
    public void run(){
      final SModelDescriptor descriptor=BuildGeneratorImpl.this.getSModelDescriptor(new EmptyProgressIndicator());
      final String projectName=BuildGeneratorImpl.this.getProjectName();
      final String projectBasedirPath=BuildGeneratorImpl.this.myProject.getBaseDir().getPath();
      final List<NodeData> modules=BuildGeneratorImpl.this.getModules();
      final List<ModuleReference> moduleReferencesToAdd=BuildGeneratorImpl.this.getModuleReferencesToAdd();
      Runnable runnable;
      Solution solution=(Solution)descriptor.getModule();
      for (      ModuleReference ref : ListSequence.fromList(moduleReferencesToAdd)) {
        (solution).getModuleDescriptor().getUsedLanguages().add(ref);
      }
      for (      ModuleReference ref : ListSequence.fromList(moduleReferencesToAdd)) {
        descriptor.getSModel().addLanguage(ref);
      }
      runnable=BuildGeneratorImpl.this.generate(((EditableSModelDescriptor)descriptor),projectName,projectBasedirPath,modules);
      runnable.run();
      final MPSProject project=BuildGeneratorImpl.this.myProject.getComponent(MPSProject.class);
      project.getProjectDescriptor().addModule(solution.getDescriptorFile().getPath());
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          ProgressManager.getInstance().run(new Task.Modal(BuildGeneratorImpl.this.myProject,"Reloading Classes",false){
            public void run(            @NotNull ProgressIndicator progressIndicator){
              progressIndicator.setIndeterminate(true);
              progressIndicator.setText("Reloading Classes... Please Wait");
              ModelAccess.instance().runWriteAction(new Runnable(){
                public void run(){
                  project.update();
                }
              }
);
            }
          }
);
        }
      }
,ModalityState.NON_MODAL);
    }
  }
,myProject);
}
