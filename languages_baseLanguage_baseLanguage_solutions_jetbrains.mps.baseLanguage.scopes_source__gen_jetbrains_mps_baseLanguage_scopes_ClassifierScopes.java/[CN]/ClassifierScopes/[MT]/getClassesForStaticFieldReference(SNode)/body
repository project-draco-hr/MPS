{
  final Set<SNode> enclosingClassifierAncestors=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.fromList(SNodeOperations.getNodeAncestors(contextNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false)));
  return new FilteringScope(ClassifierScopes.getVisibleClassifiersScope(contextNode,true)){
    @Override public boolean isExcluded(    SNode node){
      if (SetSequence.fromSet(enclosingClassifierAncestors).contains(node)) {
        return false;
      }
      SNode classifier=SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
      if (!(IClassifierMember_BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(classifier))) {
        return true;
      }
      List<SNode> ancestors=SNodeOperations.getNodeAncestors(classifier,null,true);
      return ListSequence.fromList(ancestors).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")));
        }
      }
).isNotEmpty() && ListSequence.fromList(ancestors).intersect(SetSequence.fromSet(enclosingClassifierAncestors)).isEmpty();
    }
  }
;
}
