{
  final Set<SNode> enclosingClassifierAncestors=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.fromList(SNodeOperations.getNodeAncestors(contextNode,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier"),false)));
  return new FilteringScope(ClassifierScopes.getVisibleClassifiersScope(contextNode,true)){
    @Override public boolean isExcluded(    SNode node){
      if (SetSequence.fromSet(enclosingClassifierAncestors).contains(node)) {
        return false;
      }
      SNode classifier=SNodeOperations.cast(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier"));
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,classifier,"virtual_isStatic_7405920559687241224",new Object[]{}))) {
        return true;
      }
      List<SNode> ancestors=SNodeOperations.getNodeAncestors(classifier,null,true);
      return ListSequence.fromList(ancestors).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier")));
        }
      }
).isNotEmpty() && ListSequence.fromList(ancestors).intersect(SetSequence.fromSet(enclosingClassifierAncestors)).isEmpty();
    }
  }
;
}
