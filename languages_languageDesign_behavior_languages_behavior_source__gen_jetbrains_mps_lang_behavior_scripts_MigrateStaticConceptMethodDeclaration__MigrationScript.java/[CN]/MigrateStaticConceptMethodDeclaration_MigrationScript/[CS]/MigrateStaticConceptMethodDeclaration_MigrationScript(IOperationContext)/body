{
  super("Migrate StaticConceptMethodDeclaration to static, non-virtual ConceptMethodDeclaration");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate StaticConceptMethodDeclaration declaration";
    }
    public String getAdditionalInfo(){
      return "Migrate StaticConceptMethodDeclaration declaration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode behavior=StaticConceptMethodDeclaration_Behavior.call_getBehavior_1225196403935(node);
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration",null);
      SPropertyOperations.set(result,"isStatic","" + (true));
      SPropertyOperations.set(result,"isPrivate","" + (SPropertyOperations.getBoolean(node,"isPrivate")));
      SPropertyOperations.set(result,"isAbstract","" + (false));
      SLinkOperations.setTarget(result,"body",SLinkOperations.getTarget(node,"body",true),true);
      SLinkOperations.setTarget(result,"returnType",SLinkOperations.getTarget(node,"returnType",true),true);
      ListSequence.fromList(SLinkOperations.getTargets(result,"parameter",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)));
      ListSequence.fromList(SLinkOperations.getTargets(result,"annotation",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"annotation",true)));
      SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(node,"visibility",true),true);
      SPropertyOperations.set(result,"name",SPropertyOperations.getString(node,"name"));
      ListSequence.fromList(SLinkOperations.getTargets(result,"smodelAttribute",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"smodelAttribute",true)));
      ((jetbrains.mps.smodel.SNode)result).setId(node.getNodeId());
      SNodeOperations.deleteNode(node);
      ListSequence.fromList(SLinkOperations.getTargets(behavior,"method",true)).addElement(result);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate StaticConceptMethodDeclaration calls";
    }
    public String getAdditionalInfo(){
      return "Migrate StaticConceptMethodDeclaration calls";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=_quotation_createNode_63ygf9_a0a0a2(SLinkOperations.getTargets(node,"actualArgument",true),SLinkOperations.getTarget(node,"baseMethodDeclaration",false),SLinkOperations.getTarget(node,"concept",false));
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
