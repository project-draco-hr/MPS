{
  return new MapperFactory<Boolean,GroupView>(){
    public Mapper<? extends Boolean,? extends GroupView> createMapper(    Boolean selected){
      return new Mapper<Boolean,ResizableSelectionFrameView>(selected,new ResizableSelectionFrameView()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forProperty(new DependentProperty<Rectangle>(myInternalsBounds,boundsDelta),getTarget().internalsBounds));
          configuration.add(Synchronizers.forProperty(getTarget().boundsDelta,new WritableProperty<Rectangle>(){
            public void set(            Rectangle internalsBoundsDelta){
              if (internalsBoundsDelta == null) {
                return;
              }
              Rectangle oldBounds=bounds.get();
              Rectangle newBounds=new Rectangle(oldBounds.origin.add(internalsBoundsDelta.origin),oldBounds.dimension.add(internalsBoundsDelta.dimension));
              Vector min=null;
              Vector max=null;
              for (              Vector nextPoint : newBounds.getBoundPoints()) {
                min=(min == null ? nextPoint : min.min(nextPoint));
                max=(max == null ? nextPoint : max.max(nextPoint));
              }
              newBounds=new Rectangle(min,max.sub(min));
              boundsDelta.set(new Rectangle(newBounds.origin.sub(oldBounds.origin),newBounds.dimension.sub(oldBounds.dimension)));
            }
          }
));
          configuration.add(Synchronizers.forProperty(resizable,getTarget().resizable));
          configuration.add(Synchronizers.forProperty(Properties.ifProp(hasError,AbstractExternalFrameView.getHalfWidth(ERROR_FRAME_WIDTH),AbstractExternalFrameView.getHalfWidth(getTarget().selectionLineWidth.get())),getTarget().frameWidth));
        }
      }
;
    }
  }
;
}
