{
  if (!(ListSequence.fromList(selectedOptions).contains(RenameReferencesParticipant.OPTION))) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,String>>());
  }
{
    final SearchScope scope=CommandUtil.createScope(searchScope);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    final SNode movingNode=initialState.resolve(repository);
    Collection<SReference> usages;
    if (movingNode != null) {
      usages=CommandUtil.usages(CommandUtil.createConsoleScope(null,false,context),movingNode);
    }
 else {
      usages=Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null,false,context))).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return eq_xv67ae_a0a0a0a0a0a0a0a4a1a8(it.getTargetNodeReference(),initialState);
        }
      }
).toListSequence();
    }
    return CollectionSequence.fromCollection(usages).select(new ISelector<SReference,RefactoringParticipant.Change<SNodeReference,String>>(){
      public RefactoringParticipant.Change<SNodeReference,String> select(      SReference ref){
        final SNodeReference containingNode=ref.getSourceNode().getReference();
        final SReferenceLink role=ref.getLink();
        final SearchResults searchResults=new SearchResults(SetSequence.fromSetAndArray(new HashSet<SNode>(),movingNode),ListSequence.fromListAndArray(new ArrayList<SearchResult<SNode>>(),new SearchResult<SNode>(ref.getSourceNode(),"reference")));
        RefactoringParticipant.Change<SNodeReference,String> change=new RefactoringParticipant.Change<SNodeReference,String>(){
          public SearchResults getSearchResults(){
            return searchResults;
          }
          public boolean needsToPreserveOldNode(){
            return false;
          }
          public void confirm(          final String finalState,          final SRepository repository,          RefactoringSession refactoringSession){
            refactoringSession.registerChange(new Runnable(){
              public void run(){
                SNode node=containingNode.resolve(repository);
                if (node == null) {
                  return;
                }
                if (node.getModel() instanceof EditableSModel && node.getReference(role) instanceof jetbrains.mps.smodel.SReference) {
                  ((jetbrains.mps.smodel.SReference)node.getReference(role)).setResolveInfo(finalState);
                  as_xv67ae_a0a1a2a0a0a0a0a2a0a0d0a0a0a0a5a1a8(node.getModel(),EditableSModel.class).setChanged(true);
                }
              }
            }
);
          }
        }
;
        return change;
      }
    }
).toListSequence();
  }
}
