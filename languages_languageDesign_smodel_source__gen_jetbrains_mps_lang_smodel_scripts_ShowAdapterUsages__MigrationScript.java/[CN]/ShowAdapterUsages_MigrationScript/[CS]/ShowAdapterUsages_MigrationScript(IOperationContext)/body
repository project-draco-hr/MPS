{
  super("Show Adapter Usages");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find java util refrences";
    }
    public String getAdditionalInfo(){
      return "find java util refrences";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      for (      SReference ref : node.getReferences()) {
        String targetModelFQName=ref.getTargetSModelReference().getModelName();
        if (targetModelFQName.endsWith(".structure@java_stub")) {
          return true;
        }
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find adapter class usages";
    }
    public String getAdditionalInfo(){
      return "find adapter class usages";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if ((SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")) == null)) {
        return false;
      }
      String className=NameUtil.nodeFQName(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")));
      String namespace=NameUtil.namespaceFromLongName(className);
      return namespace.endsWith(".structure");
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
