{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("opposite",new BaseReferenceConstraintsDescriptor("opposite",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          final SNode feature=_context.getReferenceNode();
          final boolean isGeneric=SNodeOperations.isInstanceOf(feature,"jetbrains.mps.ypath.structure.IGenericFeature");
          return ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(feature),"jetbrains.mps.ypath.structure.TreePathAspect"),"features",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return it != feature && ((isGeneric ? SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature") : !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature"))));
            }
          }
).toListSequence();
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8bykki_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
