{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("quickFixArgument",new BaseReferenceConstraintsDescriptor("quickFixArgument",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=new ArrayList<SNode>();
          SNode helginsIntention=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.TypesystemIntention",true,false);
          if (helginsIntention != null) {
            ListSequence.<SNode>fromList(nodes).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(helginsIntention,"quickFix",false),"quickFixArgument",true)));
          }
          return nodes;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8vu3gr_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
