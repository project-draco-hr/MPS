{
  final int sizeL1=(int)(maxSize * FIRST_LEVEL_RATIO);
  final int sizeL2=(int)(maxSize * (1. - FIRST_LEVEL_RATIO));
  roomLeftFirstLevel=new AtomicInteger(sizeL1);
  roomLeftSecondLevel=new AtomicInteger(sizeL2);
  firstLevelCache=new ConcurrentHashMap<K,K>(sizeL1 * 4 / 3);
  secondLevelCache=new ConcurrentHashMap<K,K>(sizeL2 * 4 / 3);
  promotesBeforeCleanupInitialValue=(int)(maxSize * CLEANUP_Q1_RATIO);
  promotesBeforeCleanup=new AtomicInteger(promotesBeforeCleanupInitialValue);
}
