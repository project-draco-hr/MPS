{
  if (left == right) {
    return true;
  }
  if (left == null || right == null) {
    return false;
  }
  final Set<Pair<SNode,SNode>> childEQs=new HashSet<Pair<SNode,SNode>>();
  boolean result=MatchingUtil.matchNodes(left,right,new IMatchModifier(){
    public boolean accept(    SNode node1,    SNode node2){
      return HUtil.isRuntimeTypeVariable(node1) || HUtil.isRuntimeTypeVariable(node2);
    }
    public boolean acceptList(    List<SNode> nodes1,    List<SNode> nodes2){
      return false;
    }
    public void performAction(    SNode node1,    SNode node2){
      childEQs.add(new Pair<SNode,SNode>(node1,node2));
    }
    public void performGroupAction(    List<SNode> nodes1,    List<SNode> nodes2){
    }
  }
,false);
  if (!checkOnly && result) {
    if (equations != null) {
      equations.addEquations(childEQs,info);
    }
  }
  return result;
}
