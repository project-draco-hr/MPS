{
  ConstraintsDescriptor newDescriptor=ConceptRegistry.getInstance().getConstraintsDescriptor(node.getConcept().getQualifiedName());
  final CheckingNodeContext checkingNodeContext=new jetbrains.mps.smodel.runtime.impl.CheckingNodeContext();
  if (SNodeOperations.getParent(node) != null) {
    component.addDependency(SNodeOperations.getParent(node));
  }
  if (SNodeOperations.getParent(node) != null && !(jetbrains.mps.util.SNodeOperations.isUnknown(SNodeOperations.getParent(node)))) {
    final SNode link=SNodeOperations.getContainingLinkDeclaration(node);
    if (link == null) {
      component.addError(node,"Incorrect child role used: LinkDeclaration with role \"" + SNodeOperations.getContainingLinkRole(node) + "\" was not found in parent node's concept: "+ BehaviorReflection.invokeVirtual(String.class,SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(node))),"virtual_getFqName_1213877404258",new Object[]{}),null);
      return;
    }
    boolean canBeChild=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ModelConstraints.canBeChild(node.getConcept().getQualifiedName(),SNodeOperations.getParent(node),link,node,checkingNodeContext);
      }
    }
);
    if (!(canBeChild)) {
      SNode rule=getBreakingNodeAndClearContext(checkingNodeContext);
      component.addError(node,"Node " + node + " cannot be child of node "+ SNodeOperations.getParent(node),rule);
    }
  }
  if (jetbrains.mps.util.SNodeOperations.isRoot(node)) {
    boolean canBeRoot=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ModelConstraints.canBeRoot(node.getConcept().getQualifiedName(),SNodeOperations.getModel(node),checkingNodeContext);
      }
    }
);
    if (!(canBeRoot)) {
      SNode rule=getBreakingNodeAndClearContext(checkingNodeContext);
      component.addError(node,"Not rootable concept added as root",rule);
    }
  }
  if (SNodeOperations.getConceptDeclaration(node) == null) {
    component.addError(node,"Concept of a node was not found",null);
  }
  for (  final SNode child : SNodeOperations.getChildren(node)) {
    component.addDependency(child);
    final SNode childConcept=SNodeOperations.getConceptDeclaration(child);
    final SNode childLink=SNodeOperations.getContainingLinkDeclaration(child);
    if (childConcept == null || childLink == null) {
      continue;
    }
    boolean canBeParent=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ModelConstraints.canBeParent(node,childConcept,childLink,child,checkingNodeContext);
      }
    }
);
    if (!(canBeParent)) {
      SNode rule=getBreakingNodeAndClearContext(checkingNodeContext);
      component.addError(node,"Node " + node + " cannot be parent of node "+ child,rule);
    }
    boolean canBeAncestor=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ModelConstraints.canBeAncestor(node,child,childConcept,checkingNodeContext);
      }
    }
);
    if (!(canBeAncestor)) {
      SNode rule=SNodeOperations.cast(getBreakingNodeAndClearContext(checkingNodeContext),MetaAdapterFactory.getConcept(new UUID(4560956707034974760l,-8426014792598182751l),7855321458717464197l,"jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor"));
      component.addError(child,"Concept " + SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(rule),MetaAdapterFactory.getConcept(new UUID(4560956707034974760l,-8426014792598182751l),1213093968558l,"jetbrains.mps.lang.constraints.structure.ConceptConstraints")),MetaAdapterFactory.getReferenceLink(new UUID(4560956707034974760l,-8426014792598182751l),1213093968558l,1213093996982l,"concept")) + " cannot be ancestor of node "+ child,rule);
    }
  }
  SNode concept=SNodeOperations.getConceptDeclaration(node);
  component.addDependency(concept);
  ConceptAndSuperConceptsScope chs=new ConceptAndSuperConceptsScope(concept);
  for (  SNode parentConcept : chs.getConcepts()) {
    component.addDependency(parentConcept);
  }
  List<SNode> props=((List<SNode>)chs.getNodes(new Condition<SNode>(){
    public boolean met(    SNode n){
      return SNodeOperations.isInstanceOf(n,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288299l,"jetbrains.mps.lang.structure.structure.PropertyDeclaration"));
    }
  }
));
  for (  SNode p : ListSequence.fromList(props)) {
    final PropertySupport ps=PropertySupport.getPropertySupport(p);
    final String propertyName=SPropertyOperations.getString(p,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
    if (propertyName == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Property declaration has a null name, declaration id: " + p.getNodeId() + ", model: "+ SNodeOperations.getModel(p).getReference().getModelName());
      }
      continue;
    }
    final String value=ps.fromInternalValue(SNodeAccessUtil.getProperty(node,propertyName));
    final PropertyConstraintsDescriptor propertyDescriptor=newDescriptor.getProperty(propertyName);
    boolean canSetValue=(propertyDescriptor == null ? false : component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ps.canSetValue(propertyDescriptor,node,propertyName,value);
      }
    }
));
    if (!(canSetValue)) {
      if ("name".equals(SPropertyOperations.getString(p,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))) && ("AnonymousClass".equals(SPropertyOperations.getString(concept,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))) || "InternalAnonymousClass".equals(SPropertyOperations.getString(concept,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))))) {
        continue;
      }
      component.addError(node,"Property constraint violation for property \"" + SPropertyOperations.getString(p,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + "\"",null,new PropertyMessageTarget(SPropertyOperations.getString(p,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))));
    }
  }
}
