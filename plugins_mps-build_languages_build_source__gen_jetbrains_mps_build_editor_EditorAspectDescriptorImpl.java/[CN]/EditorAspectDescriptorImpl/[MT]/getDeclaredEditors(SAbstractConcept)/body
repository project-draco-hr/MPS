{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new BuildAspect_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new BuildCompositePath_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildCustomWorkflow_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildDependency_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildExternalLayout_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildExternalLayoutDependency_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildFileExcludeSelector_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildFileIncludeSelector_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildFileIncludesSelector_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildFileSelector_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildFolderMacro_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildInputFiles_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildInputFolders_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildInputResourceSet_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildInputSingleFile_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildInputSingleFolder_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildJavaPlugin_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_AbstractCopy_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Comment_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CompileOutputOf_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterFixCRLF_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterReplaceRegex_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFilterReplaceTokens_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyFlattenMapper_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyGlobMapper_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyHandler_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CopyRegexMapper_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_CustomCopy_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_EchoProperties_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_EchoPropertyEntry_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_EchoXml_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_ExportAsJavaLibrary_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_File_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_FileStub_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Filemode_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Files_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_FilesOf_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Import_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_ImportContent_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Attribute_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_JarManifest_Section_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_NamedContainer_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Node_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_Tar_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildLayout_TransparentContainer_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMacro_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildNamedLayout_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildPlugin_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildProject_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildProjectDependency_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildProjectPart_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSourceArchiveRelativePath_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSourceMacroRelativePath_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSourcePath_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSourceProjectRelativePath_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaCP_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaClassFolder_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaContentFolder_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaContentRoot_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependency_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyExternalJar_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyExternalJarInFolder_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyFileset_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyJar_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyLibrary_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaDependencyModule_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaExternalJarFolderRef_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaExternalJarRef_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaFiles_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaJar_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaJars_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibrary_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryCP_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryElement_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryExternalJar_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaLibraryExternalJarFolder_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaModule_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaModuleOptions_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaOptions_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaResources_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildSource_JavaSources_Editor());
}
break;
case 83:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildString_Editor());
}
break;
case 84:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildStringNotEmpty_Editor());
}
break;
case 85:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildStringPart_Editor());
}
break;
case 86:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildTextStringPart_Editor());
}
break;
case 87:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVarRefStringPart_Editor());
}
break;
case 88:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVariableMacro_Editor());
}
break;
case 89:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitValue_Editor());
}
break;
case 90:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithDate_Editor());
}
break;
case 91:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithString_Editor());
}
break;
case 92:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildVariableMacroInitWithValueFromFile_Editor());
}
break;
case 93:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_Folder_Editor());
}
break;
case 94:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JarFolder_Editor());
}
break;
case 95:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaJar_Editor());
}
break;
case 96:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaLibrary_Editor());
}
break;
case 97:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_JavaModule_Editor());
}
break;
case 98:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSource_SingleFile_Editor());
}
break;
case 99:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_IWorkflowParticipantReference_Editor());
}
break;
case 100:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_IWorkfowParticipants_Editor());
}
break;
case 101:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_LibraryArtifacts_Editor());
}
break;
case 102:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_ProjectDependency_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
