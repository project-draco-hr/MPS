{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new BuildAspect_Editor();
case 1:
  return new BuildCompositePath_Editor();
case 2:
return new BuildCustomWorkflow_Editor();
case 3:
return new BuildDependency_Editor();
case 4:
return new BuildExternalLayout_Editor();
case 5:
return new BuildExternalLayoutDependency_Editor();
case 6:
return new BuildFileExcludeSelector_Editor();
case 7:
return new BuildFileIncludeSelector_Editor();
case 8:
return new BuildFileIncludesSelector_Editor();
case 9:
return new BuildFileSelector_Editor();
case 10:
return new BuildFolderMacro_Editor();
case 11:
return new BuildInputFiles_Editor();
case 12:
return new BuildInputFolders_Editor();
case 13:
return new BuildInputResourceSet_Editor();
case 14:
return new BuildInputSingleFile_Editor();
case 15:
return new BuildInputSingleFolder_Editor();
case 16:
return new BuildJavaPlugin_Editor();
case 17:
return new BuildLayout_Editor();
case 18:
return new BuildLayout_AbstractCopy_Editor();
case 19:
return new BuildLayout_Comment_Editor();
case 20:
return new BuildLayout_CompileOutputOf_Editor();
case 21:
return new BuildLayout_CopyFilterFixCRLF_Editor();
case 22:
return new BuildLayout_CopyFilterReplaceRegex_Editor();
case 23:
return new BuildLayout_CopyFilterReplaceTokens_Editor();
case 24:
return new BuildLayout_CopyFlattenMapper_Editor();
case 25:
return new BuildLayout_CopyGlobMapper_Editor();
case 26:
return new BuildLayout_CopyHandler_Editor();
case 27:
return new BuildLayout_CopyRegexMapper_Editor();
case 28:
return new BuildLayout_CustomCopy_Editor();
case 29:
return new BuildLayout_EchoProperties_Editor();
case 30:
return new BuildLayout_EchoPropertyEntry_Editor();
case 31:
return new BuildLayout_EchoXml_Editor();
case 32:
return new BuildLayout_ExportAsJavaLibrary_Editor();
case 33:
return new BuildLayout_File_Editor();
case 34:
return new BuildLayout_FileStub_Editor();
case 35:
return new BuildLayout_Filemode_Editor();
case 36:
return new BuildLayout_Files_Editor();
case 37:
return new BuildLayout_FilesOf_Editor();
case 38:
return new BuildLayout_Import_Editor();
case 39:
return new BuildLayout_ImportContent_Editor();
case 40:
return new BuildLayout_JarManifest_Editor();
case 41:
return new BuildLayout_JarManifest_Attribute_Editor();
case 42:
return new BuildLayout_JarManifest_Section_Editor();
case 43:
return new BuildLayout_NamedContainer_Editor();
case 44:
return new BuildLayout_Node_Editor();
case 45:
return new BuildLayout_Tar_Editor();
case 46:
return new BuildLayout_TransparentContainer_Editor();
case 47:
return new BuildMacro_Editor();
case 48:
return new BuildNamedLayout_Editor();
case 49:
return new BuildPlugin_Editor();
case 50:
return new BuildProject_Editor();
case 51:
return new BuildProjectDependency_Editor();
case 52:
return new BuildProjectPart_Editor();
case 53:
return new BuildSourceArchiveRelativePath_Editor();
case 54:
return new BuildSourceMacroRelativePath_Editor();
case 55:
return new BuildSourcePath_Editor();
case 56:
return new BuildSourceProjectRelativePath_Editor();
case 57:
return new BuildSource_JavaCP_Editor();
case 58:
return new BuildSource_JavaClassFolder_Editor();
case 59:
return new BuildSource_JavaContentFolder_Editor();
case 60:
return new BuildSource_JavaContentRoot_Editor();
case 61:
return new BuildSource_JavaDependency_Editor();
case 62:
return new BuildSource_JavaDependencyExternalJar_Editor();
case 63:
return new BuildSource_JavaDependencyExternalJarInFolder_Editor();
case 64:
return new BuildSource_JavaDependencyFileset_Editor();
case 65:
return new BuildSource_JavaDependencyJar_Editor();
case 66:
return new BuildSource_JavaDependencyLibrary_Editor();
case 67:
return new BuildSource_JavaDependencyModule_Editor();
case 68:
return new BuildSource_JavaExternalJarFolderRef_Editor();
case 69:
return new BuildSource_JavaExternalJarRef_Editor();
case 70:
return new BuildSource_JavaFiles_Editor();
case 71:
return new BuildSource_JavaJar_Editor();
case 72:
return new BuildSource_JavaJars_Editor();
case 73:
return new BuildSource_JavaLibrary_Editor();
case 74:
return new BuildSource_JavaLibraryCP_Editor();
case 75:
return new BuildSource_JavaLibraryElement_Editor();
case 76:
return new BuildSource_JavaLibraryExternalJar_Editor();
case 77:
return new BuildSource_JavaLibraryExternalJarFolder_Editor();
case 78:
return new BuildSource_JavaModule_Editor();
case 79:
return new BuildSource_JavaModuleOptions_Editor();
case 80:
return new BuildSource_JavaOptions_Editor();
case 81:
return new BuildSource_JavaResources_Editor();
case 82:
return new BuildSource_JavaSources_Editor();
case 83:
return new BuildString_Editor();
case 84:
return new BuildStringNotEmpty_Editor();
case 85:
return new BuildStringPart_Editor();
case 86:
return new BuildTextStringPart_Editor();
case 87:
return new BuildVarRefStringPart_Editor();
case 88:
return new BuildVariableMacro_Editor();
case 89:
return new BuildVariableMacroInitValue_Editor();
case 90:
return new BuildVariableMacroInitWithDate_Editor();
case 91:
return new BuildVariableMacroInitWithString_Editor();
case 92:
return new BuildVariableMacroInitWithValueFromFile_Editor();
case 93:
return new GeneratorInternal_BuildSource_JavaJar_Editor();
case 94:
return new GeneratorInternal_BuildSource_JavaLibrary_Editor();
case 95:
return new GeneratorInternal_BuildSource_JavaModule_Editor();
case 96:
return new GeneratorInternal_BuildSource_SingleFile_Editor();
case 97:
return new GeneratorInternal_IWorkflowParticipantReference_Editor();
case 98:
return new GeneratorInternal_IWorkfowParticipants_Editor();
case 99:
return new GeneratorInternal_ProjectDependency_Editor();
default :
}
return null;
}
