{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0ec,descriptor.getConceptFqName())) {
case 0:
    return getAbsDateTimeMinusOperationEditorAspect();
case 1:
  return getAllTimeZonesConstantEditorAspect();
case 2:
return getConditionalFormatTokenEditorAspect();
case 3:
return getConstantTimeZoneRefEditorAspect();
case 4:
return getConvertToDateTimeOperationEditorAspect();
case 5:
return getConvertToDurationOperationEditorAspect();
case 6:
return getDateFormatEditorAspect();
case 7:
return getDateFormatsTableEditorAspect();
case 8:
return getDateTimeCompareOperationEditorAspect();
case 9:
return getDateTimeMinusOperationEditorAspect();
case 10:
return getDateTimeMinusPeriodOperationEditorAspect();
case 11:
return getDateTimeOffsetFormatTokenEditorAspect();
case 12:
return getDateTimeOperationEditorAspect();
case 13:
return getDateTimePlusPeriodOperationEditorAspect();
case 14:
return getDateTimePropertyFormatTokenEditorAspect();
case 15:
return getDateTimePropetyReferenceOperationEditorAspect();
case 16:
return getDateTimeWithPropertyOperationEditorAspect();
case 17:
return getDateTimeZoneCreatorEditorAspect();
case 18:
return getDurationTypeReferenceEditorAspect();
case 19:
return getFixedLocaleFormatTokenEditorAspect();
case 20:
return getFormatDateTimeExpressionEditorAspect();
case 21:
return getFormatExpressionEditorAspect();
case 22:
return getFormatPeriodExpressionEditorAspect();
case 23:
return getFormatTokenEditorAspect();
case 24:
return getInTimezoneExpressionEditorAspect();
case 25:
return getInlineFormatDateTimeExpressionEditorAspect();
case 26:
return getInlineFormatExpressionEditorAspect();
case 27:
return getLiteralFormatTokenEditorAspect();
case 28:
return getMathDateTimeOperationEditorAspect();
case 29:
return getNeverExpressionEditorAspect();
case 30:
return getNowExpressionEditorAspect();
case 31:
return getParseDateTimeExpressionEditorAspect();
case 32:
return getParseExpressionEditorAspect();
case 33:
return getPeriodConstantEditorAspect();
case 34:
return getPeriodFormatEditorAspect();
case 35:
return getPeriodFormatsTableEditorAspect();
case 36:
return getPeriodInPropertyExpressionEditorAspect();
case 37:
return getPeriodInPropertyOperationEditorAspect();
case 38:
return getPeriodLiteralFormatTokenEditorAspect();
case 39:
return getPeriodPropertyFormatTokenEditorAspect();
case 40:
return getPeriodReferenceFormatTokenEditorAspect();
case 41:
return getPeriodSeparatorFormatTokenEditorAspect();
case 42:
return getReferenceFormatTokenEditorAspect();
case 43:
return getRoundDateTimeOperationEditorAspect();
case 44:
return getScheduleLiteralEditorAspect();
case 45:
return getTimeConstantEditorAspect();
case 46:
return getTimeZoneConstantEditorAspect();
case 47:
return getTimeZoneFromStringEditorAspect();
case 48:
return getTimeZoneIDExpressionEditorAspect();
case 49:
return getTimeZoneIdOperationEditorAspect();
case 50:
return getTimeZoneNameOperationEditorAspect();
case 51:
return getTimeZoneOffsetExpressionEditorAspect();
case 52:
return getTokenConditionEditorAspect();
case 53:
return getTokenConditionalPairEditorAspect();
case 54:
return getUnaryDateTimeOperationEditorAspect();
case 55:
return getWithPropertyCompareExpressionEditorAspect();
default :
}
return null;
}
