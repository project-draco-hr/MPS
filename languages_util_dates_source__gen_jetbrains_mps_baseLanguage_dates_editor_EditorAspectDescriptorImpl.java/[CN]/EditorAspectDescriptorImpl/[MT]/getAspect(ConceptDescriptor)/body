{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbsDateTimeMinusOperation_Editor();
case 1:
  return new AllTimeZonesConstant_Editor();
case 2:
return new ConditionalFormatToken_Editor();
case 3:
return new ConstantTimeZoneRef_Editor();
case 4:
return new ConvertToDateTimeOperation_Editor();
case 5:
return new ConvertToDurationOperation_Editor();
case 6:
return new DateFormat_Editor();
case 7:
return new DateFormatsTable_Editor();
case 8:
return new DateTimeCompareOperation_Editor();
case 9:
return new DateTimeMinusOperation_Editor();
case 10:
return new DateTimeMinusPeriodOperation_Editor();
case 11:
return new DateTimeOffsetFormatToken_Editor();
case 12:
return new DateTimeOperation_Editor();
case 13:
return new DateTimePlusPeriodOperation_Editor();
case 14:
return new DateTimePropertyFormatToken_Editor();
case 15:
return new DateTimePropetyReferenceOperation_Editor();
case 16:
return new DateTimeWithPropertyOperation_Editor();
case 17:
return new DateTimeZoneCreator_Editor();
case 18:
return new DurationTypeReference_Editor();
case 19:
return new FixedLocaleFormatToken_Editor();
case 20:
return new FormatDateTimeExpression_Editor();
case 21:
return new FormatExpression_Editor();
case 22:
return new FormatPeriodExpression_Editor();
case 23:
return new FormatToken_Editor();
case 24:
return new InTimezoneExpression_Editor();
case 25:
return new InlineFormatDateTimeExpression_Editor();
case 26:
return new InlineFormatExpression_Editor();
case 27:
return new LiteralFormatToken_Editor();
case 28:
return new MathDateTimeOperation_Editor();
case 29:
return new NeverExpression_Editor();
case 30:
return new NowExpression_Editor();
case 31:
return new ParseDateTimeExpression_Editor();
case 32:
return new ParseExpression_Editor();
case 33:
return new PeriodConstant_Editor();
case 34:
return new PeriodFormat_Editor();
case 35:
return new PeriodFormatsTable_Editor();
case 36:
return new PeriodInPropertyExpression_Editor();
case 37:
return new PeriodInPropertyOperation_Editor();
case 38:
return new PeriodLiteralFormatToken_Editor();
case 39:
return new PeriodPropertyFormatToken_Editor();
case 40:
return new PeriodReferenceFormatToken_Editor();
case 41:
return new PeriodSeparatorFormatToken_Editor();
case 42:
return new ReferenceFormatToken_Editor();
case 43:
return new RoundDateTimeOperation_Editor();
case 44:
return new ScheduleLiteral_Editor();
case 45:
return new TimeConstant_Editor();
case 46:
return new TimeZoneConstant_Editor();
case 47:
return new TimeZoneFromString_Editor();
case 48:
return new TimeZoneIDExpression_Editor();
case 49:
return new TimeZoneIdOperation_Editor();
case 50:
return new TimeZoneNameOperation_Editor();
case 51:
return new TimeZoneOffsetExpression_Editor();
case 52:
return new TokenCondition_Editor();
case 53:
return new TokenConditionalPair_Editor();
case 54:
return new UnaryDateTimeOperation_Editor();
case 55:
return new WithPropertyCompareExpression_Editor();
default :
}
return null;
}
