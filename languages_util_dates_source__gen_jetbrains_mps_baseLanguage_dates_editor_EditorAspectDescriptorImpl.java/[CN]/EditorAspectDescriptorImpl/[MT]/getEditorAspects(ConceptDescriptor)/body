{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return Collections.<EditorAspect>singletonList(new AbsDateTimeMinusOperation_Editor());
case 1:
  return Collections.<EditorAspect>singletonList(new AllTimeZonesConstant_Editor());
case 2:
return Collections.<EditorAspect>singletonList(new ConditionalFormatToken_Editor());
case 3:
return Collections.<EditorAspect>singletonList(new ConstantTimeZoneRef_Editor());
case 4:
return Collections.<EditorAspect>singletonList(new ConvertToDateTimeOperation_Editor());
case 5:
return Collections.<EditorAspect>singletonList(new ConvertToDurationOperation_Editor());
case 6:
return Collections.<EditorAspect>singletonList(new DateFormat_Editor());
case 7:
return Collections.<EditorAspect>singletonList(new DateFormatsTable_Editor());
case 8:
return Collections.<EditorAspect>singletonList(new DateTimeCompareOperation_Editor());
case 9:
return Collections.<EditorAspect>singletonList(new DateTimeMinusOperation_Editor());
case 10:
return Collections.<EditorAspect>singletonList(new DateTimeMinusPeriodOperation_Editor());
case 11:
return Collections.<EditorAspect>singletonList(new DateTimeOffsetFormatToken_Editor());
case 12:
return Collections.<EditorAspect>singletonList(new DateTimeOperation_Editor());
case 13:
return Collections.<EditorAspect>singletonList(new DateTimePlusPeriodOperation_Editor());
case 14:
return Collections.<EditorAspect>singletonList(new DateTimePropertyFormatToken_Editor());
case 15:
return Collections.<EditorAspect>singletonList(new DateTimePropetyReferenceOperation_Editor());
case 16:
return Collections.<EditorAspect>singletonList(new DateTimeWithPropertyOperation_Editor());
case 17:
return Collections.<EditorAspect>singletonList(new DateTimeZoneCreator_Editor());
case 18:
return Collections.<EditorAspect>singletonList(new DurationTypeReference_Editor());
case 19:
return Collections.<EditorAspect>singletonList(new FixedLocaleFormatToken_Editor());
case 20:
return Collections.<EditorAspect>singletonList(new FormatDateTimeExpression_Editor());
case 21:
return Collections.<EditorAspect>singletonList(new FormatExpression_Editor());
case 22:
return Collections.<EditorAspect>singletonList(new FormatPeriodExpression_Editor());
case 23:
return Collections.<EditorAspect>singletonList(new FormatToken_Editor());
case 24:
return Collections.<EditorAspect>singletonList(new InTimezoneExpression_Editor());
case 25:
return Collections.<EditorAspect>singletonList(new InlineFormatDateTimeExpression_Editor());
case 26:
return Collections.<EditorAspect>singletonList(new InlineFormatExpression_Editor());
case 27:
return Collections.<EditorAspect>singletonList(new LiteralFormatToken_Editor());
case 28:
return Collections.<EditorAspect>singletonList(new MathDateTimeOperation_Editor());
case 29:
return Collections.<EditorAspect>singletonList(new NeverExpression_Editor());
case 30:
return Collections.<EditorAspect>singletonList(new NowExpression_Editor());
case 31:
return Collections.<EditorAspect>singletonList(new ParseDateTimeExpression_Editor());
case 32:
return Collections.<EditorAspect>singletonList(new ParseExpression_Editor());
case 33:
return Collections.<EditorAspect>singletonList(new PeriodConstant_Editor());
case 34:
return Collections.<EditorAspect>singletonList(new PeriodFormat_Editor());
case 35:
return Collections.<EditorAspect>singletonList(new PeriodFormatsTable_Editor());
case 36:
return Collections.<EditorAspect>singletonList(new PeriodInPropertyExpression_Editor());
case 37:
return Collections.<EditorAspect>singletonList(new PeriodInPropertyOperation_Editor());
case 38:
return Collections.<EditorAspect>singletonList(new PeriodLiteralFormatToken_Editor());
case 39:
return Collections.<EditorAspect>singletonList(new PeriodPropertyFormatToken_Editor());
case 40:
return Collections.<EditorAspect>singletonList(new PeriodReferenceFormatToken_Editor());
case 41:
return Collections.<EditorAspect>singletonList(new PeriodSeparatorFormatToken_Editor());
case 42:
return Collections.<EditorAspect>singletonList(new ReferenceFormatToken_Editor());
case 43:
return Collections.<EditorAspect>singletonList(new RoundDateTimeOperation_Editor());
case 44:
return Collections.<EditorAspect>singletonList(new ScheduleLiteral_Editor());
case 45:
return Collections.<EditorAspect>singletonList(new TimeConstant_Editor());
case 46:
return Collections.<EditorAspect>singletonList(new TimeZoneConstant_Editor());
case 47:
return Collections.<EditorAspect>singletonList(new TimeZoneFromString_Editor());
case 48:
return Collections.<EditorAspect>singletonList(new TimeZoneIDExpression_Editor());
case 49:
return Collections.<EditorAspect>singletonList(new TimeZoneIdOperation_Editor());
case 50:
return Collections.<EditorAspect>singletonList(new TimeZoneNameOperation_Editor());
case 51:
return Collections.<EditorAspect>singletonList(new TimeZoneOffsetExpression_Editor());
case 52:
return Collections.<EditorAspect>singletonList(new TokenCondition_Editor());
case 53:
return Collections.<EditorAspect>singletonList(new TokenConditionalPair_Editor());
case 54:
return Collections.<EditorAspect>singletonList(new UnaryDateTimeOperation_Editor());
case 55:
return Collections.<EditorAspect>singletonList(new WithPropertyCompareExpression_Editor());
default :
}
return Collections.emptyList();
}
