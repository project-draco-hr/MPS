{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          return Sequence.fromIterable(Sequence.fromArray(new String[]{"fileset","pathelement","dirset"})).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode res=SModelOperations.createNewNode(model,null,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,"jetbrains.mps.core.xml.structure.XmlElement")));
              SPropertyOperations.set(res,MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,0x5c842a42c54b10b6L,"tagName"),(item));
              SPropertyOperations.set(res,MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L,0x9139d910cb22f298L,0x5c842a42c54b10b2L,0x61218fae7b61b5d5L,"shortEmptyNotation"),"" + (true));
              return res;
            }
            public String getMatchingText(            String pattern){
              return "<" + (item) + "/>";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
