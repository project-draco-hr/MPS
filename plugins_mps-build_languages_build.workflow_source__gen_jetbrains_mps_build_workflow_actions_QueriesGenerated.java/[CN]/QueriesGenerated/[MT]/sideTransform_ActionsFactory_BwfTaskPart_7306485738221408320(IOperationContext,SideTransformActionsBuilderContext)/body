{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfTaskPart");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"additionalDependencies",true)).addElement(SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.build.workflow.structure.BwfTaskDependency"));
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "depends";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
