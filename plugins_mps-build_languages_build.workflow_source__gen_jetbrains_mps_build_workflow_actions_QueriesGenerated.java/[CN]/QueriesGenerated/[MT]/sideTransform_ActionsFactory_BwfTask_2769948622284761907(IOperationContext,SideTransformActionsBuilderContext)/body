{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6273L,"jetbrains.mps.build.workflow.structure.BwfTask").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      ListSequence.fromList(SLinkOperations.getChildren(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6273L,0x2670d5989d5ace5eL,"dependencies"))).addElement(SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5ace56L,"jetbrains.mps.build.workflow.structure.BwfTaskDependency")));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "depends";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6273L,"jetbrains.mps.build.workflow.structure.BwfTask").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6273L,"jetbrains.mps.build.workflow.structure.BwfTask").getDeclarationNode(),null));
    }
  }
);
  return result;
}
