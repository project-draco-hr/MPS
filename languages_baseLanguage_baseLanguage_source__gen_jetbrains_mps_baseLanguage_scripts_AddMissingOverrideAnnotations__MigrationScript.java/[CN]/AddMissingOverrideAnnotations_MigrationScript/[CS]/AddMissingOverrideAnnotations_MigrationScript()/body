{
  super("Add missing @Override annotations");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "add @Override annotations";
    }
    @Override public String getAdditionalInfo(){
      return "add @Override annotations";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      List<SNode> instanceMethods=Sequence.fromIterable(OverridingMethodsFinder.getInstanceMethods(node)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return OverridingMethodsFinder.canOverride(it) && ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6be947aL,0x114a6beb0bdL,"annotation"))).all(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !("java.lang.Override".equals(INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6b4ccabL,0x114a6b85d40L,"annotation")))));
            }
          }
);
        }
      }
).toListSequence();
      if (ListSequence.fromList(instanceMethods).isEmpty()) {
        return false;
      }
      OverridingMethodsFinder finder=new OverridingMethodsFinder(node,instanceMethods);
      return SetSequence.fromSet(finder.getOverridingMethods()).isNotEmpty();
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      List<SNode> instanceMethods=Sequence.fromIterable(OverridingMethodsFinder.getInstanceMethods(node)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return OverridingMethodsFinder.canOverride(it) && ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6be947aL,0x114a6beb0bdL,"annotation"))).all(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !("java.lang.Override".equals(INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6b4ccabL,0x114a6b85d40L,"annotation")))));
            }
          }
);
        }
      }
).toListSequence();
      OverridingMethodsFinder finder=new OverridingMethodsFinder(node,instanceMethods);
      for (      SNode meth : SetSequence.fromSet(finder.getOverridingMethods())) {
        ListSequence.fromList(SLinkOperations.getChildren(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6be947aL,0x114a6beb0bdL,"annotation"))).addElement(createAnnotationInstance_eltaeh_a0a0a2a0a());
      }
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
