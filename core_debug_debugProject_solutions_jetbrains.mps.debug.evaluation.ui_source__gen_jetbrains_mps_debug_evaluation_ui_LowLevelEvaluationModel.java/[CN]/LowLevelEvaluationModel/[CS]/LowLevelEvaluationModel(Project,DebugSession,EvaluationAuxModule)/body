{
  super(project,session,module);
  myContext=new StackFrameContext(myUiState);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SLinkOperations.setNewChild(myEvaluator,"evaluatedStatement","jetbrains.mps.baseLanguage.structure.BlockStatement");
      SLinkOperations.setNewChild(SLinkOperations.getTarget(myEvaluator,"evaluatedStatement",true),AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"),"jetbrains.mps.debug.evaluation.structure.ToEvaluateAnnotation");
      SPropertyOperations.set(myEvaluator,"isRuntime","" + (true));
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      IClassPathItem classPath=myContext.getClassPathItem();
      final Set<StubPath> pathsToAdd=SetSequence.fromSet(new HashSet<StubPath>());
      classPath.accept(new EachClassPathItemVisitor(){
        @Override public void visit(        JarFileClassPathItem item){
          String path=item.getFile().getAbsolutePath();
          StubPath stubPath=myAuxModule.addStubPath(path);
          if (stubPath != null) {
            SetSequence.fromSet(pathsToAdd).addElement(stubPath);
          }
        }
        @Override public void visit(        FileClassPathItem item){
          String path=item.getClassPath();
          StubPath stubPath=myAuxModule.addStubPath(path);
          if (stubPath != null) {
            SetSequence.fromSet(pathsToAdd).addElement(stubPath);
          }
        }
      }
);
      StubReloadManager.getInstance().loadImmediately(myAuxModule,pathsToAdd);
    }
  }
);
}
