{
  CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  final List<String> errorMessages=new ArrayList<String>();
  myProject.getMessageBus().connect().subscribe(CustomBuilderMessageHandler.TOPIC,new RefreshFilesCompilationStatusListener());
  myProject.getMessageBus().connect().subscribe(CustomBuilderMessageHandler.TOPIC,new NavigateToNodesWithErrors(errorMessages));
  compilerManager.addCompilableFileType(MPSFileTypeFactory.MPS_FILE_TYPE);
  compilerManager.addCompilableFileType(MPSFileTypeFactory.MPS_ROOT_FILE_TYPE);
  compilerManager.addBeforeTask(new CompileTask(){
    @Override public boolean execute(    final CompileContext context){
      final CompileScope compileScope=context.getCompileScope();
      if (compileScope == null)       return true;
      final File repositoryCache=new File(CompilerPaths.getCompilerSystemDirectory(myProject),"mps_repository.dat");
      final long start=System.nanoTime();
      ProjectHelper.toMPSProject(myProject).getModelAccess().runReadAction(new Runnable(){
        @Override public void run(){
          CachedRepositoryData cachedRepositoryData=MPSRepositoryUtil.buildData(LibraryInitializer.getInstance().getModuleHandles());
          ModelOutputStream mos=null;
          try {
            mos=new ModelOutputStream(new FileOutputStream(repositoryCache));
            cachedRepositoryData.save(mos);
            compileScope.putUserData(MPSMakeConstants.MPS_REPOSITORY,repositoryCache.getPath());
          }
 catch (          IOException e) {
            context.addMessage(CompilerMessageCategory.INFORMATION,"cannot save cache for MPS, generation may be slow",null,0,0);
          }
 finally {
            jetbrains.mps.util.FileUtil.closeFileSafe(mos);
          }
        }
      }
);
      long result=(System.nanoTime() - start) / 1000000;
      if (CompilerWorkspaceConfiguration.getInstance(myProject).COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS.contains("-Dmps.jps.debug=true")) {
        context.addMessage(CompilerMessageCategory.INFORMATION,"repository cache saved in " + result + " ms",null,0,0);
      }
      return true;
    }
  }
);
  compilerManager.addAfterTask(new CompileTask(){
    @Override public boolean execute(    CompileContext context){
      for (      String errmsg : errorMessages) {
        ModelNodeNavigatable navigatable=ModelNodeNavigatable.extractNavigatable(errmsg,context.getProject(),null);
        context.addMessage(CompilerMessageCategory.ERROR,errmsg,null,-1,-1,navigatable);
      }
      boolean noErrors=errorMessages.isEmpty();
      errorMessages.clear();
      return noErrors;
    }
  }
);
}
