{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAfterPosition;
case 1:
  return myConceptBaseEmitJumpStatement;
case 2:
return myConceptBaseEmitVariableStatement;
case 3:
return myConceptBaseInstructionOperation;
case 4:
return myConceptBeforePosition;
case 5:
return myConceptBooleanInstructionOperation;
case 6:
return myConceptBuilderBlock;
case 7:
return myConceptDataFlowBuilderDeclaration;
case 8:
return myConceptEmitCodeForStatement;
case 9:
return myConceptEmitIfJumpStatement;
case 10:
return myConceptEmitJumpStatement;
case 11:
return myConceptEmitLabelStatement;
case 12:
return myConceptEmitMayBeUnreachable;
case 13:
return myConceptEmitNopStatement;
case 14:
return myConceptEmitReadStatement;
case 15:
return myConceptEmitRetStatement;
case 16:
return myConceptEmitStatement;
case 17:
return myConceptEmitTryFinallyStatement;
case 18:
return myConceptEmitWriteStatement;
case 19:
return myConceptGetCodeForExpression;
case 20:
return myConceptIBuilderMode;
case 21:
return myConceptInsertAfter;
case 22:
return myConceptInsertBefore;
case 23:
return myConceptInsertPosition;
case 24:
return myConceptInstructionGetSourceOperation;
case 25:
return myConceptInstructionIsJump;
case 26:
return myConceptInstructionIsNop;
case 27:
return myConceptInstructionIsRet;
case 28:
return myConceptInstructionType;
case 29:
return myConceptIntraProcedural_BuilderMode;
case 30:
return myConceptLabelPosition;
case 31:
return myConceptNodeParameter;
case 32:
return myConceptPosition;
case 33:
return myConceptRelativePosition;
default :
throw new IllegalStateException();
}
}
