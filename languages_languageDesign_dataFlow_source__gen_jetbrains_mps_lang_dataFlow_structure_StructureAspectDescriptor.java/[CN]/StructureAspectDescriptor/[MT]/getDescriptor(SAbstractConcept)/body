{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0kb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAfterPosition;
      }
    break;
case 1:
  if (true) {
    return myConceptBaseEmitJumpStatement;
  }
break;
case 2:
if (true) {
return myConceptBaseEmitVariableStatement;
}
break;
case 3:
if (true) {
return myConceptBaseInstructionOperation;
}
break;
case 4:
if (true) {
return myConceptBeforePosition;
}
break;
case 5:
if (true) {
return myConceptBooleanInstructionOperation;
}
break;
case 6:
if (true) {
return myConceptBuilderBlock;
}
break;
case 7:
if (true) {
return myConceptDataFlowBuilderDeclaration;
}
break;
case 8:
if (true) {
return myConceptEmitCodeForStatement;
}
break;
case 9:
if (true) {
return myConceptEmitIfJumpStatement;
}
break;
case 10:
if (true) {
return myConceptEmitJumpStatement;
}
break;
case 11:
if (true) {
return myConceptEmitLabelStatement;
}
break;
case 12:
if (true) {
return myConceptEmitMayBeUnreachable;
}
break;
case 13:
if (true) {
return myConceptEmitNopStatement;
}
break;
case 14:
if (true) {
return myConceptEmitReadStatement;
}
break;
case 15:
if (true) {
return myConceptEmitRetStatement;
}
break;
case 16:
if (true) {
return myConceptEmitStatement;
}
break;
case 17:
if (true) {
return myConceptEmitTryFinallyStatement;
}
break;
case 18:
if (true) {
return myConceptEmitWriteStatement;
}
break;
case 19:
if (true) {
return myConceptGetCodeForExpression;
}
break;
case 20:
if (true) {
return myConceptInsertAfter;
}
break;
case 21:
if (true) {
return myConceptInsertBefore;
}
break;
case 22:
if (true) {
return myConceptInsertPosition;
}
break;
case 23:
if (true) {
return myConceptInstructionGetSourceOperation;
}
break;
case 24:
if (true) {
return myConceptInstructionIsJump;
}
break;
case 25:
if (true) {
return myConceptInstructionIsNop;
}
break;
case 26:
if (true) {
return myConceptInstructionIsRet;
}
break;
case 27:
if (true) {
return myConceptInstructionType;
}
break;
case 28:
if (true) {
return myConceptLabelPosition;
}
break;
case 29:
if (true) {
return myConceptNodeParameter;
}
break;
case 30:
if (true) {
return myConceptPosition;
}
break;
case 31:
if (true) {
return myConceptRelativePosition;
}
break;
default :
}
}
return null;
}
