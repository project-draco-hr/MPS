{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.AfterPosition","jetbrains.mps.lang.dataFlow.structure.RelativePosition",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.RelativePosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{"jumpTo"},new boolean[]{false});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{"variable"},new boolean[]{false});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BeforePosition","jetbrains.mps.lang.dataFlow.structure.RelativePosition",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.RelativePosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation","jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.BuilderBlock","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{"conceptDeclaration"},new String[]{"builderBlock"},new boolean[]{false});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{"codeFor"},new boolean[]{false});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement","jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement","jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.Closureoid"},new String[]{},new String[]{},new String[]{"emitStatement"},new boolean[]{false});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitNopStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitReadStatement","jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitRetStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"position"},new boolean[]{false});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement","jetbrains.mps.lang.dataFlow.structure.EmitStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.EmitStatement"},new String[]{},new String[]{},new String[]{"tryPart","finallyPart"},new boolean[]{false,false});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement","jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InsertAfter","jetbrains.mps.lang.dataFlow.structure.InsertPosition",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.InsertPosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InsertBefore","jetbrains.mps.lang.dataFlow.structure.InsertPosition",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.InsertPosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InsertPosition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"instruction"},new boolean[]{false});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InstructionGetSourceOperation","jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InstructionIsJump","jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InstructionIsNop","jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InstructionIsRet","jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.InstructionType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.LabelPosition","jetbrains.mps.lang.dataFlow.structure.Position",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.Position"},new String[]{},new String[]{"label"},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.NodeParameter","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.Position","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.structure.RelativePosition","jetbrains.mps.lang.dataFlow.structure.Position",false,new String[]{"jetbrains.mps.lang.dataFlow.structure.Position"},new String[]{},new String[]{},new String[]{"relativeTo"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
