{
  ObjectReference value=getObjectValue();
  List<Method> methods=myReferenceType.methodsByName(name,jniSignature);
  if (methods.isEmpty()) {
    LOG.error("method not found");
    return null;
  }
  List<Value> argValues=new ArrayList<Value>();
  for (  Object arg : args) {
    Value v;
    if (arg instanceof ValueProxy) {
      v=((ValueProxy)arg).getJDIValue();
    }
 else {
      v=MirrorUtil.getValue(arg,myThreadReference.virtualMachine());
    }
    argValues.add(v);
  }
  Value result;
  try {
    result=value.invokeMethod(myThreadReference,methods.get(0),argValues,0);
  }
 catch (  Throwable t) {
    LOG.error("method invocation failed",t);
    return null;
  }
  return MirrorUtil.getValueProxy(result,myThreadReference);
}
