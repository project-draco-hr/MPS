{
  Set<SModule> projectModules=SetSequence.fromSet(new HashSet<SModule>());
  for (  IModule module : ListSequence.fromList(((MPSProject)MapSequence.fromMap(_params).get("project")).getModules())) {
    SetSequence.fromSet(projectModules).addElement(module);
  }
  System.out.println("Method usages for " + classifier);
  for (  SNode method : ListSequence.fromList(SLinkOperations.getTargets(classifier,"member",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    }
  }
)) {
    SearchResults<SNode> result=FindUtils.getSearchResults(new EmptyProgressMonitor(),method,((MPSProject)MapSequence.fromMap(_params).get("project")).getScope(),"jetbrains.mps.baseLanguage.findUsages.AllMethodUsages_Finder");
    List<SNode> projectResults=ListSequence.fromList(new ArrayList<SNode>());
    for (    SearchResult<SNode> searchResult : ListSequence.fromList(result.getSearchResults())) {
      SNode node=searchResult.getObject();
      SModule module=node.getModel().getModelDescriptor().getModule();
      if (SetSequence.fromSet(projectModules).contains(module)) {
        ListSequence.fromList(projectResults).addElement(node);
      }
    }
    System.out.println(method + " | " + ListSequence.fromList(projectResults).count());
  }
  System.out.println('\n');
}
