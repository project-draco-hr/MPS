{
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      try {
        SNode node=(SNode)getUserObject();
        List<SNode> descendants=new ArrayList<SNode>(myHierarchyTree.getAbstractChildren(node,myVisited));
        Collections.sort(descendants,new Comparator<SNode>(){
          @Override public int compare(          SNode o1,          SNode o2){
            return ("" + o1.getPresentation()).compareTo(o2.getPresentation());
          }
        }
);
        Set<SNode> visited=new HashSet<SNode>(myVisited);
        visited.add(node);
        for (        SNode descendant : descendants) {
          ChildHierarchyTreeNode childHierarchyTreeNode=new ChildHierarchyTreeNode(descendant,myHierarchyTree,visited);
          add(childHierarchyTreeNode);
        }
      }
 catch (      CircularHierarchyException ex) {
        SNode errorNode=(SNode)ex.getRepeatedObject();
        final String message=ex.getMessage();
        HierarchyTreeNode errorTreeNode=new HierarchyTreeNode(errorNode,myHierarchyTree){
          @Override protected void doUpdatePresentation(){
            super.doUpdatePresentation();
            setIcon(Icons.ERROR_ICON);
            setColor(Color.RED);
          }
          @Override protected String calculateAdditionalText(){
            return message;
          }
        }
;
        add(errorTreeNode);
      }
      myInitialized=true;
    }
  }
);
}
