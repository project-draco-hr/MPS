{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_ixa0pj_a0b=null;
      final Iterable<GResource> input=(Iterable<GResource>)((Iterable)rawInput);
switch (0) {
case 0:
        pa.global().properties(Target_collectScriptDirectories.this.getName(),CopyGeneratedScripts_Facet.Target_collectScriptDirectories.Parameters.class).fileNameToDestination(MapSequence.fromMap(new HashMap<SModelReference,Map<String,String>>()));
      for (      final GResource gres : Sequence.fromIterable(input)) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            MapSequence.fromMap(pa.global().properties(Target_collectScriptDirectories.this.getName(),CopyGeneratedScripts_Facet.Target_collectScriptDirectories.Parameters.class).fileNameToDestination()).put(gres.model().getReference(),MapSequence.fromMap(new HashMap<String,String>()));
            Iterable<SNode> buildScriptDescendants=ListSequence.fromList(SModelOperations.getRoots(((SModel)gres.status().getOutputModel()),null)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                Object userObject=it.getUserObject(GenerationUtil.SCRIPTS_TARGET_PROPERTY);
                return userObject != null && userObject instanceof String;
              }
            }
);
            for (            SNode descendant : Sequence.fromIterable(buildScriptDescendants)) {
              String fileName=TextGenerator.getFileName(descendant);
              String targetXml=((String)descendant.getUserObject(GenerationUtil.SCRIPTS_TARGET_PROPERTY));
              if (!(fileName.endsWith(".xml"))) {
                String ext=Utils.getExtensionWithDot(fileName);
                if ((ext == null || ext.length() == 0)) {
                  monitor.reportFeedback(new IFeedback.WARNING(String.valueOf("Ignored " + fileName)));
                  continue;
                }
                targetXml=Utils.withoutExtension(targetXml) + ext;
              }
              MapSequence.fromMap(MapSequence.fromMap(pa.global().properties(Target_collectScriptDirectories.this.getName(),CopyGeneratedScripts_Facet.Target_collectScriptDirectories.Parameters.class).fileNameToDestination()).get(gres.model().getReference())).put(fileName,targetXml);
            }
          }
        }
);
        _output_ixa0pj_a0b=Sequence.fromIterable(_output_ixa0pj_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(gres)));
      }
default :
    return new IResult.SUCCESS(_output_ixa0pj_a0b);
}
}
}
;
}
