{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull ProgressMonitor progressMonitor){
      Iterable<IResource> _output_ixa0pj_a0a=null;
switch (0) {
case 0:
        for (        IResource resource : input) {
          final List<Tuples._2<IFile,IFile>> toCopy=ListSequence.fromList(new ArrayList<Tuples._2<IFile,IFile>>());
          final TResource tres=(TResource)resource;
          new DeltaReconciler(tres.delta()).visitAll(new FilesDelta.Visitor(){
            @Override public boolean acceptWritten(            IFile file){
              if (!(Sequence.fromIterable(Sequence.fromArray(new String[]{"dependencies","generated","trace.info"})).contains(file.getName()))) {
                String destPath=MapSequence.fromMap(MapSequence.fromMap(pa.global().properties(new ITarget.Name("jetbrains.mps.build.CopyGeneratedScripts.collectScriptDirectories"),CopyGeneratedScripts_Facet.Target_collectScriptDirectories.Parameters.class).fileNameToDestination()).get(tres.modelDescriptor().getSModelReference())).get(file.getName());
                if ((destPath != null && destPath.length() > 0)) {
                  IFile destFile=FileSystem.getInstance().getFileByPath(destPath);
                  ListSequence.fromList(toCopy).addElement(MultiTuple.<IFile,IFile>from(file,destFile));
                  monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Copying " + ListSequence.fromList(toCopy).last())));
                }
              }
              return true;
            }
          }
);
          FileSystem.getInstance().runWriteTransaction(new Runnable(){
            public void run(){
              ModelAccess.instance().requireWrite(new Runnable(){
                public void run(){
                  ListSequence.fromList(toCopy).visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
                    public void visit(                    Tuples._2<IFile,IFile> ftc){
                      IFileUtils.copyFileContent(ftc._0(),ftc._1());
                    }
                  }
);
                }
              }
);
            }
          }
);
          _output_ixa0pj_a0a=Sequence.fromIterable(_output_ixa0pj_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
        }
default :
      return new IResult.SUCCESS(_output_ixa0pj_a0a);
  }
}
}
;
}
