{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_ixa0pj_a0a=null;
      final Iterable<TextGenOutcomeResource> input=(Iterable<TextGenOutcomeResource>)(Iterable)rawInput;
switch (0) {
case 0:
        final FileProcessor fp=new FileProcessor();
      List<FilesDelta> deltas=ListSequence.fromList(new ArrayList<FilesDelta>());
    monitor.currentProgress().beginWork("Build language ANT files",Sequence.fromIterable(input).count() + 2,monitor.currentProgress().workLeft());
  for (  TextGenOutcomeResource res : Sequence.fromIterable(input)) {
    monitor.currentProgress().advanceWork("Build language ANT files",1,res.getModel().getModelName());
    TextGenResult textGenResult=res.getTextGenResult();
    for (    TextUnit tu : textGenResult.getUnits()) {
      Object userObject=tu.getStartNode().getUserObject(GenerationUtil.SCRIPTS_TARGET_PROPERTY);
      if (userObject instanceof String) {
        String fileName=tu.getFileName();
        String targetXml=((String)userObject);
        if (!(fileName.endsWith(".xml"))) {
          String ext=Utils.getExtensionWithDot(fileName);
          if ((ext == null || ext.length() == 0)) {
            monitor.reportFeedback(new IFeedback.WARNING(String.valueOf("Ignored " + fileName)));
            continue;
          }
          targetXml=Utils.withoutExtension(targetXml) + ext;
        }
        monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(String.format("copy generated script: %s --> %s",fileName,targetXml))));
        IFile destFile=FileSystem.getInstance().getFileByPath(targetXml);
        boolean changed=fp.saveContent(destFile,tu.getBytes());
        FilesDelta d=new FilesDelta(destFile.getParent());
        if (changed) {
          d.written(destFile);
        }
 else {
          d.kept(destFile);
        }
        ListSequence.fromList(deltas).addElement(d);
      }
    }
  }
IDelta folded=ListSequence.fromList(deltas).ofType(IDelta.class).reduceLeft(new ILeftCombinator<IDelta,IDelta>(){
  public IDelta combine(  IDelta a,  IDelta b){
    return a.merge(b);
  }
}
);
_output_ixa0pj_a0a=Sequence.fromIterable(_output_ixa0pj_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(Sequence.<IDelta>singleton(folded)))));
monitor.currentProgress().advanceWork("Build language ANT files",1,"writing...");
FileSystem.getInstance().runWriteTransaction(new Runnable(){
@Override public void run(){
fp.flushChanges();
}
}
);
monitor.currentProgress().finishWork("Build language ANT files");
default :
return new IResult.SUCCESS(_output_ixa0pj_a0a);
}
}
}
;
}
