{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AndOperation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new Constant_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new EqualsOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new Expression_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new FloatingPointConstant_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new Formula_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new Function_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new GreaterThanOperation_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new IfFunction_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new IsNullOperation_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new LessThanOperation_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new MinusOperation_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultOperation_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new NotOperation_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new NullConstant_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new Operation_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new OrOperation_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParenthisizedExpression_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new PlusOperation_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reference_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringConstant_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
