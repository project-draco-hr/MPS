{
  ParseResult res=new ParseResult();
  char[] chars=src.toCharArray();
  int i0=-1, i1=chars.length;
  if (hasmodel) {
    while (++i0 < i1)     if (!Character.isDigit(chars[i0]))     break;
    if (i0 == i1 || chars[i0] != MODEL_SEPARATOR_CHAR)     i0=-1;
  }
  while (i0 < --i1)   if (!Character.isDigit(chars[i1]))   break;
  if (i0 == i1 || chars[i1] != VERSION_SEPARATOR_CHAR)   i1=chars.length;
  res.text=src.substring(i0 + 1,i1);
  res.modelID=i0 > 0 ? Integer.parseInt(src.substring(0,i0)) : -1;
  res.version=i1 < chars.length - 1 ? Integer.parseInt(src.substring(i1 + 1)) : -1;
  if (hasmodel && !AttributesRolesUtil.isAttributeRole(res.text)) {
    ImportElement elem=myImports.get(getSModelReference(res.modelID));
    if (elem == null || res.version != myImports.get(getSModelReference(res.modelID)).getUsedVersion()) {
      LOG.error("wrong version of " + src + ", model="+ getSModelReference(res.modelID)+ ". Possible reason: merge conflict was not resolved.");
    }
  }
  return res;
}
