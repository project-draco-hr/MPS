{
  ActionListener l=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (false == e.getSource() instanceof JCheckBoxMenuItem) {
        return;
      }
      final GenTraceSettings settings=GenerationSettings.getInstance().getTraceSettings();
      boolean value=((JCheckBoxMenuItem)e.getSource()).isSelected();
switch (Integer.parseInt(e.getActionCommand())) {
case 1:
        settings.setGroupByStep(value);
      break;
case 2:
    settings.setCompactTemplates(value);
  break;
case 3:
settings.setShowEmptySteps(value);
break;
}
viewSettingsChanged();
}
}
;
final GenTraceSettings settings=GenerationSettings.getInstance().getTraceSettings();
final JPopupMenu menu=new JPopupMenu();
JCheckBoxMenuItem menuItem=new JCheckBoxMenuItem("Group changes by step");
menuItem.setSelected(settings.isGroupByStep());
menuItem.setActionCommand(String.valueOf(1));
menuItem.addActionListener(l);
menu.add(menuItem);
menuItem=new JCheckBoxMenuItem("Show change-specific templates only");
menuItem.setSelected(settings.isCompactTemplates());
menuItem.setActionCommand(String.valueOf(2));
menuItem.addActionListener(l);
menu.add(menuItem);
menuItem=new JCheckBoxMenuItem("Show steps without changes");
menuItem.setSelected(settings.isShowEmptySteps());
menuItem.setActionCommand(String.valueOf(3));
menuItem.addActionListener(l);
menu.add(menuItem);
return menu;
}
