{
  List<SNode> modules=new ArrayList<SNode>();
  Graph<CycleHelper.Module> graph=new Graph();
  ListSequence.fromList(modules).addSequence(ListSequence.fromList(SLinkOperations.getTargets(project,"parts",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.workflow.structure.BwfJavaModule");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.build.workflow.structure.BwfJavaModule");
    }
  }
));
  for (  SNode jm : modules) {
    CycleHelper.Module module=new CycleHelper.Module(jm);
    map.put(jm,module);
    if (StringUtils.isEmpty(SPropertyOperations.getString(jm,"outputFolder"))) {
      genContext.showErrorMessage(jm,"empty output path");
    }
 else     if (SPropertyOperations.getString(jm,"outputFolder").endsWith("/") || SPropertyOperations.getString(jm,"outputFolder").endsWith("\\")) {
      genContext.showErrorMessage(jm,"output path shouldn't end with slash");
    }
  }
  for (  CycleHelper.Module module : map.values()) {
    graph.add(module);
  }
  List<List<CycleHelper.Module>> cycles=Graphs.findStronglyConnectedComponents(graph);
  Collections.reverse(cycles);
  int cycleCounter=0;
  for (  List<CycleHelper.Module> cycle : cycles) {
    if (cycle.size() < 2) {
      continue;
    }
    final Set<SNode> cycleModules=new HashSet<SNode>();
    for (    CycleHelper.Module m : cycle) {
      cycleModules.add(m.getModule());
    }
    Collections.sort(cycle,new Comparator<CycleHelper.Module>(){
      public int compare(      CycleHelper.Module m1,      CycleHelper.Module m2){
        return new Integer(SNodeOperations.getIndexInParent(m1.getModule())).compareTo(SNodeOperations.getIndexInParent(m2.getModule()));
      }
    }
);
    SNode first=cycle.get(0).getModule();
    SModel model=SNodeOperations.getModel(first);
    SNode cycleX=SModelOperations.createNewNode(model,"jetbrains.mps.build.workflow.structure.BwfJavaModule",null);
    SPropertyOperations.set(cycleX,"name","java.modules.cycle." + ++cycleCounter);
    SPropertyOperations.set(cycleX,"outputFolder",SPropertyOperations.getString(project,"temporaryFolder") + "/" + SPropertyOperations.getString(cycleX,"name"));
    SNodeOperations.insertPrevSiblingChild(first,cycleX);
    Set<String> sources=new LinkedHashSet<String>();
    Set<String> cpDeps=new LinkedHashSet<String>();
    Set<SNode> moduleDeps=new LinkedHashSet<SNode>();
    for (    CycleHelper.Module m : cycle) {
      SNode module=m.getModule();
      ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).removeWhere(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.workflow.structure.BwfJavaModuleReference") && cycleModules.contains(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.workflow.structure.BwfJavaModuleReference"),"target",false));
        }
      }
);
      for (      SNode dep : SLinkOperations.getTargets(module,"dependencies",true)) {
        if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.workflow.structure.BwfJavaModuleReference")) {
          moduleDeps.add(SLinkOperations.getTarget(SNodeOperations.cast(dep,"jetbrains.mps.build.workflow.structure.BwfJavaModuleReference"),"target",false));
        }
 else         if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.workflow.structure.BwfJavaClassPath")) {
          cpDeps.add(SPropertyOperations.getString(SNodeOperations.cast(dep,"jetbrains.mps.build.workflow.structure.BwfJavaClassPath"),"path"));
        }
 else {
          genContext.showErrorMessage(dep,"unexpected dependency type");
        }
      }
      SNode mref=SModelOperations.createNewNode(model,"jetbrains.mps.build.workflow.structure.BwfJavaModuleReference",null);
      SLinkOperations.setTarget(mref,"target",cycleX,false);
      ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).addElement(mref);
      sources.addAll(ListSequence.fromList(SLinkOperations.getTargets(module,"sources",true)).select(new ISelector<SNode,String>(){
        public String select(        SNode it){
          return SPropertyOperations.getString(it,"path");
        }
      }
).toListSequence());
    }
    for (    String src : sources) {
      SNode path=SModelOperations.createNewNode(model,"jetbrains.mps.build.workflow.structure.BwfPath",null);
      SPropertyOperations.set(path,"path",src);
      ListSequence.fromList(SLinkOperations.getTargets(cycleX,"sources",true)).addElement(path);
    }
    for (    String cp : cpDeps) {
      SNode newcp=SModelOperations.createNewNode(model,"jetbrains.mps.build.workflow.structure.BwfJavaClassPath",null);
      SPropertyOperations.set(newcp,"path",cp);
      ListSequence.fromList(SLinkOperations.getTargets(cycleX,"dependencies",true)).addElement(newcp);
    }
    for (    SNode jm : moduleDeps) {
      SNode nref=SConceptOperations.createNewNode("jetbrains.mps.build.workflow.structure.BwfJavaModuleReference",null);
      SLinkOperations.setTarget(nref,"target",jm,false);
      ListSequence.fromList(SLinkOperations.getTargets(cycleX,"dependencies",true)).addElement(nref);
    }
  }
}
