{
  SNode ifTrue=SLinkOperations.getTarget(node,"ifTrue",true);
  List<SNode> vars=new ArrayList<SNode>();
  for (  SNode expression : NullableUtil.getOrConditions(node)) {
    if (SNodeOperations.isInstanceOf(expression,"jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
      SNode notNullNode=NullableUtil.getOtherThanNull(SNodeOperations.cast(expression,"jetbrains.mps.baseLanguage.structure.EqualsExpression"));
      if (notNullNode != null) {
        ListSequence.<SNode>fromList(vars).addElement(notNullNode);
      }
    }
  }
  if (!(ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.<SNode>fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).first(),"jetbrains.mps.baseLanguage.structure.ReturnStatement"))) {
    for (    SNode var : vars) {
{
        Object object=SLinkOperations.getTarget(node,"ifTrue",true);
        if (((Program)o).contains(object)) {
          boolean before=true;
          int position=((Program)(o)).getStart(SLinkOperations.getTarget(node,"ifTrue",true));
          Instruction instruction=new nullableInstruction(var);
          instruction.setSource(node);
          ((Program)(o)).insert(instruction,position,true,before);
        }
      }
    }
  }
  if (SLinkOperations.getTargets(node,"elsifClauses",true) != null) {
    for (    SNode var : vars) {
{
        Object object=ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"elsifClauses",true)).first();
        if (((Program)o).contains(object)) {
          boolean before=true;
          int position=((Program)(o)).getStart(ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"elsifClauses",true)).first());
          Instruction instruction=new notNullInstruction(var);
          instruction.setSource(node);
          ((Program)(o)).insert(instruction,position,true,before);
        }
      }
    }
  }
  for (  SNode var : vars) {
{
      Object object=SNodeOperations.getParent(var);
      if (((Program)o).contains(object)) {
        boolean before=false;
        int position=((Program)(o)).getEnd(object);
        Instruction instruction=new notNullInstruction(var);
        instruction.setSource(node);
        ((Program)(o)).insert(instruction,position,true,before);
      }
    }
  }
}
