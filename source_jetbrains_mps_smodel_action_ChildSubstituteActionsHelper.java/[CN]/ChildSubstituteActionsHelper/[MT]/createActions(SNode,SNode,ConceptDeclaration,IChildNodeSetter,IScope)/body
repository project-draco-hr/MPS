{
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  if (childConcept == null) {
    return resultActions;
  }
  Language primaryLanguage=SModelUtil.getDeclaringLanguage(childConcept,scope);
  if (primaryLanguage == null) {
    LOG.error("Couldn't build actions : couldn't get declaring language for concept " + childConcept.getDebugText());
    return resultActions;
  }
  List<NodeSubstituteActionsBuilder> primaryBuilders=getActionBuilders(parentNode,primaryLanguage,childConcept,scope);
  if (primaryBuilders.isEmpty()) {
    resultActions=createPrimaryChildSubstituteActions(parentNode,currentChild,childConcept,childSetter,TRUE_CONDITION,scope);
  }
 else {
    for (    NodeSubstituteActionsBuilder builder : primaryBuilders) {
      resultActions.addAll(invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,scope));
    }
  }
  List<NodeSubstituteActionsBuilder> extendedBuilders=new LinkedList<NodeSubstituteActionsBuilder>();
  List<Language> languages=parentNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    if (language == primaryLanguage) {
      continue;
    }
    extendedBuilders.addAll(getActionBuilders(parentNode,language,childConcept,scope));
  }
  for (  NodeSubstituteActionsBuilder builder : extendedBuilders) {
    List<INodeSubstituteAction> addActions=invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,scope);
    resultActions.addAll(addActions);
  }
  primaryBuilders.addAll(extendedBuilders);
  for (  NodeSubstituteActionsBuilder builder : primaryBuilders) {
    resultActions=applyActionFilter(builder,resultActions,scope);
  }
  return resultActions;
}
