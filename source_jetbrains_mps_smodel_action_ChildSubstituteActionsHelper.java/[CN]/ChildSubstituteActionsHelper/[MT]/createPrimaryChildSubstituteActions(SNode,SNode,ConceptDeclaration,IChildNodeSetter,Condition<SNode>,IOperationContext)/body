{
  if (childConcept == null) {
    return Collections.emptyList();
  }
  final IScope scope=context.getScope();
  ISearchScope conceptsSearchScope=SModelSearchUtil.createConceptsFromModelLanguagesScope(parentNode.getModel(),true,scope);
  List<SNode> applicableConcepts=conceptsSearchScope.getNodes(new Condition<SNode>(){
    public boolean met(    SNode object){
      return isDefaultSubstitutableConcept((ConceptDeclaration)object,childConcept,scope) && filter.met(object);
    }
  }
);
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  for (  SNode applicableConcept : applicableConcepts) {
    actions.add(new DefaultChildNodeSubstituteAction(applicableConcept,parentNode,currentChild,childSetter,scope));
  }
  List<SNode> applicableConcepts1=conceptsSearchScope.getNodes(new Condition<SNode>(){
    public boolean met(    SNode object){
      if (!SModelUtil.hasConceptProperty(object,ABSTRACT,scope)) {
        return SModelUtil.isAssignableConcept((ConceptDeclaration)object,childConcept) && filter.met(object);
      }
      return false;
    }
  }
);
  for (  SNode applicableConcept1 : applicableConcepts1) {
    List<INodeSubstituteAction> smartActions=createSmartReferenceActions((ConceptDeclaration)applicableConcept1,parentNode,currentChild,childSetter,scope);
    if (smartActions != null) {
      actions.addAll(smartActions);
    }
  }
  return actions;
}
