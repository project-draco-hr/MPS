{
  if (childConcept == null) {
    return Collections.emptyList();
  }
  final IScope scope=context.getScope();
  List<ConceptDeclaration> nodes=SModelUtil.conceptsFromModelLanguages(parentNode.getModel(),new Condition<ConceptDeclaration>(){
    public boolean met(    ConceptDeclaration concept){
      if (!concept.isRoot())       return false;
      return isDefaultSubstitutableConcept(concept,childConcept,scope) && filter.met(concept);
    }
  }
,scope);
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  for (  SNode node : nodes) {
    actions.add(new DefaultChildNodeSubstituteAction(node,parentNode,currentChild,childSetter,scope));
  }
  return actions;
}
