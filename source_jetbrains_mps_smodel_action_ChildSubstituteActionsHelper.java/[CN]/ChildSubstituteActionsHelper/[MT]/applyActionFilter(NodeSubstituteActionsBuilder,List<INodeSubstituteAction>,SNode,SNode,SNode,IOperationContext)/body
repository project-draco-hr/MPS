{
  Set<SNode> conceptsToRemove=new HashSet<SNode>();
  for (  RemovePart rp : substituteActionsBuilder.getSubnodes(RemovePart.class)) {
    conceptsToRemove.add(rp.getConceptToRemove().getNode());
  }
  if (!conceptsToRemove.isEmpty()) {
    Iterator<INodeSubstituteAction> it=actions.iterator();
    while (it.hasNext()) {
      INodeSubstituteAction action=it.next();
      Object parameterObject=action.getParameterObject();
      if (parameterObject instanceof SNode && ((SNode)parameterObject).getAdapter() instanceof AbstractConceptDeclaration) {
        if (conceptsToRemove.contains(((SNode)parameterObject))) {
          it.remove();
        }
      }
 else       if (parameterObject instanceof AbstractConceptDeclaration) {
        if (conceptsToRemove.contains(((AbstractConceptDeclaration)parameterObject).getNode())) {
          it.remove();
        }
      }
    }
  }
  List<RemoveByConditionPart> removesByCondition=substituteActionsBuilder.getSubnodes(RemoveByConditionPart.class);
  for (  RemoveByConditionPart part : removesByCondition) {
    String methodName="removeActionsByCondition_" + part.getId();
    try {
      QueryMethodGenerated.invoke(methodName,context,new RemoveSubstituteActionByConditionContext(actions.iterator(),parentNode,currentChild,childConcept),substituteActionsBuilder.getModel());
    }
 catch (    Throwable t) {
      LOG.error(t);
    }
  }
  return actions;
}
