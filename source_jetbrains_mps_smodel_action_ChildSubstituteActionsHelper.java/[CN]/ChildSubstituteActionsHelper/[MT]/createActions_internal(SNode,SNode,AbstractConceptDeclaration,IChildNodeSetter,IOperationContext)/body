{
  List<INodeSubstituteAction> resultActions=new ArrayList<INodeSubstituteAction>();
  if (childConcept == null) {
    return resultActions;
  }
  IScope scope=context.getScope();
  Language primaryLanguage=SModelUtil_new.getDeclaringLanguage(childConcept,scope);
  if (primaryLanguage == null) {
    LOG.error("Couldn't build actions : couldn't get declaring language for concept " + childConcept.getDebugText());
    return resultActions;
  }
  List<NodeSubstituteActionsBuilder> allBuilders=new ArrayList<NodeSubstituteActionsBuilder>();
  List<NodeSubstituteActionsBuilder> primaryBuilders=getActionsBuilders(parentNode,primaryLanguage,childConcept,context);
  allBuilders.addAll(primaryBuilders);
  for (  NodeSubstituteActionsBuilder builder : primaryBuilders) {
    resultActions.addAll(invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context));
  }
  if (!containsLegacyQueries(primaryBuilders) && !containsRemoveDefaults(primaryBuilders)) {
    List<NodeSubstituteActionsBuilder> buildersFromSubconcepts=new ArrayList<NodeSubstituteActionsBuilder>();
    final List<AbstractConceptDeclaration> excludedConcepts=new ArrayList<AbstractConceptDeclaration>();
    List<Language> languages=parentNode.getModel().getLanguages(scope);
    for (    NodeSubstituteActionsBuilder actionsBuilder : getAllActionsBuilders(languages)) {
      AbstractConceptDeclaration applicableConcept=actionsBuilder.getApplicableConcept();
      if (applicableConcept == null)       continue;
      if (applicableConcept == childConcept)       continue;
      if (SModelUtil_new.isAssignableConcept(applicableConcept,childConcept)) {
        excludedConcepts.add(applicableConcept);
        if (satisfiesPrecondition(actionsBuilder,parentNode,applicableConcept,context)) {
          buildersFromSubconcepts.add(actionsBuilder);
        }
      }
    }
    allBuilders.addAll(buildersFromSubconcepts);
    for (    NodeSubstituteActionsBuilder builder : buildersFromSubconcepts) {
      List<INodeSubstituteAction> actions=invokeActionFactory(builder,parentNode,currentChild,builder.getApplicableConcept(),childSetter,context);
      resultActions.addAll(actions);
    }
    Condition<SNode> filter=TRUE_CONDITION;
    if (excludedConcepts.size() > 0) {
      filter=new Condition<SNode>(){
        public boolean met(        SNode node){
          for (          AbstractConceptDeclaration excluded : excludedConcepts) {
            if (SModelUtil_new.isAssignableConcept((AbstractConceptDeclaration)BaseAdapter.fromNode(node),excluded)) {
              return false;
            }
          }
          return true;
        }
      }
;
    }
    resultActions.addAll(createPrimaryChildSubstituteActions(parentNode,currentChild,childConcept,childSetter,filter,context));
  }
  List<NodeSubstituteActionsBuilder> extendedBuilders=new ArrayList<NodeSubstituteActionsBuilder>();
  List<Language> languages=parentNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    if (language == primaryLanguage) {
      continue;
    }
    extendedBuilders.addAll(getActionsBuilders(parentNode,language,childConcept,context));
  }
  allBuilders.addAll(extendedBuilders);
  for (  NodeSubstituteActionsBuilder builder : extendedBuilders) {
    List<INodeSubstituteAction> addActions=invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context);
    resultActions.addAll(addActions);
  }
  for (  NodeSubstituteActionsBuilder builder : allBuilders) {
    resultActions=applyActionFilter(builder,resultActions,parentNode,currentChild,childConcept.getNode(),context);
  }
  return resultActions;
}
