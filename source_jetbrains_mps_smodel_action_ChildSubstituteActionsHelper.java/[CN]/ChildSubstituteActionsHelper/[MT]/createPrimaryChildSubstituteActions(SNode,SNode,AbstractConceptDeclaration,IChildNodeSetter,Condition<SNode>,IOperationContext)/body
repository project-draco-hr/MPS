{
  if (childConcept == null) {
    return Collections.emptyList();
  }
  final IScope scope=context.getScope();
  ISearchScope conceptsSearchScope=SModelSearchUtil_new.createConceptsFromModelLanguagesScope(parentNode.getModel(),true,scope);
  List<SNode> applicableConcepts=conceptsSearchScope.getNodes(new Condition<SNode>(){
    public boolean met(    SNode object){
      return isDefaultSubstitutableConcept((ConceptDeclaration)BaseAdapter.fromNode(object),childConcept,scope) && filter.met(object);
    }
  }
);
  List<INodeSubstituteAction> actions=new ArrayList<INodeSubstituteAction>();
  for (  SNode applicableConcept : applicableConcepts) {
    actions.addAll(createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode(applicableConcept),parentNode,currentChild,childSetter,scope));
  }
  return actions;
}
