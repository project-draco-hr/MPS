{
  IStatus status=ModelConstraintsUtil.getReferentSearchScope(parentNode,null,referenceNodeConcept,smartReference,scope);
  if (status.isError())   return null;
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  final LinkDeclaration referenceLink_final=smartReference;
  ISearchScope searchScope=(ISearchScope)status.getUserObject();
  final ConceptDeclaration targetConcept=smartReference.getTarget();
  List<SNode> referentNodes=searchScope.getNodes();
  Class adapterClass=getAdapterClass(targetConcept);
  String conceptFqName=NameUtil.conceptFqName(targetConcept);
  if (adapterClass == null) {
    for (    SNode referentNode : referentNodes) {
      if (referentNode.isInstanceOfConcept(targetConcept,scope)) {
        actions.add(new SmartRefChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,scope,referenceNodeConcept,referenceLink_final));
      }
    }
  }
 else {
    for (    SNode referentNode : referentNodes) {
      String rcfqn=referentNode.getConceptFqName();
      if (rcfqn.equals(conceptFqName) || adapterClass.isInstance(referentNode.getAdapter())) {
        actions.add(new SmartRefChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,scope,referenceNodeConcept,referenceLink_final));
      }
    }
  }
  return actions;
}
