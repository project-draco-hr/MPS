{
  IStatus status=ModelConstraintsUtil.getReferentSearchScope(parentNode,null,referenceNodeConcept,smartReference,scope);
  if (status.isError())   return null;
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  final LinkDeclaration referenceLink_final=smartReference;
  ISearchScope searchScope=(ISearchScope)status.getUserObject();
  final ConceptDeclaration targetConcept=smartReference.getTarget();
  Class targetConceptClass;
  try {
    targetConceptClass=Class.forName(JavaNameUtil.className(targetConcept),true,ClassLoaderManager.getInstance().getClassLoader());
  }
 catch (  ClassNotFoundException ex) {
    throw new RuntimeException(ex);
  }
  List<SNode> referentNodes=searchScope.getNodes();
  for (  final SNode referentNode : referentNodes) {
    if (targetConceptClass.isInstance(referentNode)) {
      actions.add(new DefaultChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,scope){
        String myMatchingText=null;
        public String getMatchingText(        String pattern){
          if (myMatchingText == null) {
            myMatchingText=getSmartMatchingText(referenceNodeConcept,(SNode)getParameterObject(),getScope());
          }
          return myMatchingText;
        }
        public String getDescriptionText(        String pattern){
          BaseConcept parameterNode=(BaseConcept)BaseAdapter.fromNode((SNode)getParameterObject());
          if (parameterNode.getShortDescription() == null) {
            return "(smart ref:" + referenceNodeConcept.getName() + ") "+ NodePresentationUtil.descriptionText(parameterNode,true);
          }
          return "(smart ref:" + NodePresentationUtil.descriptionText(parameterNode,true) + ")";
        }
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode childNode=SModelUtil_new.instantiateConceptDeclaration((ConceptDeclaration)referenceNodeConcept,model).getNode();
          String referentRole=SModelUtil_new.getGenuineLinkRole(referenceLink_final);
          childNode.setReferent(referentRole,(SNode)parameterObject);
          NodeFactoryManager.setupNode((jetbrains.mps.bootstrap.structureLanguage.ConceptDeclaration)BaseAdapter.fromAdapter(referenceNodeConcept),childNode,currentChild,parentNode,model,getScope());
          return childNode;
        }
      }
);
    }
  }
  return actions;
}
