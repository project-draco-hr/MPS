{
  IStatus status=ModelConstraintsUtil.getReferentSearchScope(parentNode,null,referenceNodeConcept,smartReference,scope);
  if (status.isError())   return null;
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  final LinkDeclaration referenceLink_final=smartReference;
  ISearchScope searchScope=(ISearchScope)status.getUserObject();
  ConceptDeclaration targetConcept=smartReference.getTarget();
  List<SNode> referentNodes=searchScope.getNodes();
  for (  SNode referentNode : referentNodes) {
    if (SModelUtil.isInstanceOfConcept(referentNode,targetConcept,scope)) {
      actions.add(new DefaultChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,scope){
        public String getMatchingText(        String pattern){
          return getSmartMatchingText(referenceNodeConcept,getParameterNode(),getScope());
        }
        public String getDescriptionText(        String pattern){
          String prefix="(smart ref:" + referenceNodeConcept.getName() + ") ";
          return prefix + NodePresentationUtil.descriptionText(getParameterNode(),null,NodePresentationUtil.REFERENT_PRESENTATION,getScope());
        }
        public SNode createChildNode(        SNode parameterNode,        SModel model,        String pattern){
          SNode childNode=super.createChildNode(referenceNodeConcept,model,pattern);
          String referentRole=SModelUtil.getGenuineLinkRole(referenceLink_final);
          childNode.setReferent(referentRole,parameterNode);
          return childNode;
        }
      }
);
    }
  }
  return actions;
}
