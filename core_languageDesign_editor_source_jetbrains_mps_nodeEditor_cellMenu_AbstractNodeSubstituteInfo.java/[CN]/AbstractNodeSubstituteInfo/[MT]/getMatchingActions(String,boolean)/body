{
  return ModelAccess.instance().runReadAction(new Computable<List<INodeSubstituteAction>>(){
    public List<INodeSubstituteAction> compute(){
      Pair<String,List<INodeSubstituteAction>> pair=getPatternAndActions(pattern,strictMatching);
      List<INodeSubstituteAction> result=pair.o2;
      Iterator<INodeSubstituteAction> iterator=result.iterator();
      while (iterator.hasNext()) {
        INodeSubstituteAction item=iterator.next();
        if (strictMatching) {
          if (item.canSubstituteStrictly(pattern))           continue;
          iterator.remove();
        }
 else {
          if (item.canSubstitute(pattern))           continue;
          iterator.remove();
        }
      }
      if (strictMatching) {
        myStrictPatternsToActionListsCache.put(pattern,new ArrayList<INodeSubstituteAction>(result));
      }
 else {
        myPatternsToActionListsCache.put(pattern,new ArrayList<INodeSubstituteAction>(result));
      }
      return (List)result;
    }
  }
);
}
