{
  myElementsTableModel=new MpsElementsTableModel<T>(getComparator(),getRendererClass(),getColumnTitle());
  JBTable table=new JBTable(myElementsTableModel);
  table.setShowGrid(false);
  table.setDragEnabled(false);
  table.setShowHorizontalLines(false);
  table.setShowVerticalLines(false);
  table.setIntercellSpacing(new Dimension(0,0));
  table.setBorder(new LineBorder(UIUtil.getBorderColor()));
  table.setDefaultRenderer(getRendererClass(),createDefaultRenderer());
  table.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myElementsTable=table;
  new SpeedSearchBase<JBTable>(myElementsTable){
    public int getSelectedIndex(){
      return myElementsTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return myElementsTable.convertRowIndexToModel(viewIndex);
    }
    public Object[] getAllElements(){
      final int count=myElementsTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myElementsTableModel.getValueAt(0,idx);
      }
      return elements;
    }
    public String getElementText(    Object element){
      return getText((T)element);
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myElementsTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myElementsTableModel.getValueAt(0,row))) {
          final int viewRow=myElementsTable.convertRowIndexToView(row);
          myElementsTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(myElementsTable);
          break;
        }
      }
    }
  }
;
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myElementsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      ModelAccess.instance().runReadInEDT(new Runnable(){
        @Override public void run(){
          final java.util.List<T> allElements=getAllVisibleElements();
          allElements.removeAll(getElements());
          Collections.sort(allElements,getComparator());
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              ChooseElementsDialog<T> chooseElementsDialog=new ChooseElementsDialog<T>(myElementsTable,allElements,getChooserMessage()){
                @Override protected String getItemText(                T item){
                  return getText(item);
                }
                @Override protected Icon getItemIcon(                T item){
                  return getIcon(item);
                }
              }
;
              chooseElementsDialog.show();
              Set<T> elementsToAdd=new HashSet<T>(chooseElementsDialog.getChosenElements());
              doAddElements(elementsToAdd);
            }
          }
);
        }
      }
);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(myElementsTable);
      myElementsTableModel.fireTableDataChanged();
    }
  }
);
  return postDecoratePanel(decorator.createPanel());
}
