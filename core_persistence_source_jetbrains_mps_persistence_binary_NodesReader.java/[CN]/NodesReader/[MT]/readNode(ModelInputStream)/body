{
  SConceptId cid=readConceptId(is);
  SNodeId nodeId=is.readNodeId();
  String linkStr=is.readString();
  SContainmentLinkId nodeRole=SContainmentLinkId.deserialize(linkStr);
  byte nodeInfo=is.readByte();
  if (is.readByte() != '{') {
    throw new IOException("bad stream, no '{'");
  }
  boolean interfaceNode=false;
  if (myInterfaceOnly) {
    ConceptKind kind=getConceptKind(nodeInfo);
    interfaceNode=(kind == ConceptKind.INTERFACE || nodeRole == null);
  }
  SConceptAdapterById c=new SConceptAdapterById(cid,DebugRegistry.getInstance().getConceptName(cid));
  jetbrains.mps.smodel.SNode node=interfaceNode ? new InterfaceSNode(c) : new jetbrains.mps.smodel.SNode(c);
  node.setId(nodeId);
  readProperties(is,node);
  readReferences(is,node);
  readChildren(is,node);
  readUserObjects(is,node);
  if (is.readByte() != '}') {
    throw new IOException("bad stream, no '}'");
  }
  return new Pair<SContainmentLink,jetbrains.mps.smodel.SNode>(new SContainmentLinkAdapterById(nodeRole,DebugRegistry.getInstance().getConceptName(nodeRole.getConceptId()),DebugRegistry.getInstance().getLinkName(nodeRole)),node);
}
