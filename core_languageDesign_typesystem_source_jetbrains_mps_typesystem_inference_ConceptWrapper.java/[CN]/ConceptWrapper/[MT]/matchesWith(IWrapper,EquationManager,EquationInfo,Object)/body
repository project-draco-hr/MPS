{
  if (wrapper == null)   return false;
  if (wrapper instanceof NodeWrapper) {
    if (matchParameter instanceof Pair && ((Pair)matchParameter).o1 instanceof SubtypingManager) {
      return false;
    }
    final Set<Pair<SNode,SNode>> childEQs=new HashSet<Pair<SNode,SNode>>();
    SNode otherNode=wrapper.getNode();
    if (otherNode == null) {
      return false;
    }
    if (!otherNode.getConceptFqName().equals(myConceptFQName)) {
      return false;
    }
    for (    String role : myChildRolesToNodes.keySet()) {
      childEQs.add(new Pair<SNode,SNode>(myChildRolesToNodes.get(role),otherNode.getChild(role)));
    }
    for (    Pair<String,Integer> pair : myChildRolesAndIndicesToNodes.keySet()) {
      List<SNode> children=otherNode.getChildren(pair.o1);
      if (pair.o2 >= children.size()) {
        return false;
      }
      childEQs.add(new Pair<SNode,SNode>(myChildRolesAndIndicesToNodes.get(pair),children.get(pair.o2)));
    }
    for (    String role : myReferentRolesToNodes.keySet()) {
      childEQs.add(new Pair<SNode,SNode>(myReferentRolesToNodes.get(role),otherNode.getReferent(role)));
    }
    if (equationManager != null) {
      equationManager.addChildEquations(childEQs,errorInfo);
    }
    return true;
  }
  return wrapper.matchesWith(this,equationManager,errorInfo);
}
