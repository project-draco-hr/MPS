{
  largeModel=true;
  ToolTipManager.sharedInstance().registerComponent(this);
  setCellRenderer(new MPSTreeCellRenderer());
  addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    TreeExpansionEvent event) throws ExpandVetoException {
      TreePath path=event.getPath();
      Object node=path.getLastPathComponent();
      MPSTreeNode treeNode=(MPSTreeNode)node;
      if (!treeNode.isInitialized()) {
        treeNode.init();
      }
    }
    public void treeWillCollapse(    TreeExpansionEvent event) throws ExpandVetoException {
    }
  }
);
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myMousePressed(e);
    }
    public void mouseReleased(    MouseEvent e){
      myMouseReleased(e);
    }
    public void mouseEntered(    MouseEvent e){
      myTooltipManagerRecentInitialDelay=ToolTipManager.sharedInstance().getInitialDelay();
      ToolTipManager.sharedInstance().setInitialDelay(10);
    }
    public void mouseExited(    MouseEvent e){
      ToolTipManager.sharedInstance().setInitialDelay(myTooltipManagerRecentInitialDelay);
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      TreePath[] paths=getSelectionPaths();
      TreePath selPath=getSelectionPath();
      if (selPath == null)       return;
      MPSTreeNode selNode=(MPSTreeNode)selPath.getLastPathComponent();
      if (selNode == null)       return;
      List<MPSTreeNode> nodes=new ArrayList<MPSTreeNode>();
      for (      TreePath path : paths) {
        MPSTreeNode node=(MPSTreeNode)path.getLastPathComponent();
        nodes.add(node);
        node.keyPressed(e);
      }
      KeyStroke eventKeyStroke=KeyStroke.getKeyStrokeForEvent(e);
      Pair pair=new Pair(eventKeyStroke,selNode.getClass());
      final MPSAction action=myKeyStrokesToActionsMap.get(pair);
      if (action != null) {
        final ActionContext context=getActionContext(selNode,nodes);
        if (action.executeInsideCommand()) {
          CommandProcessor.instance().executeCommand(new Runnable(){
            public void run(){
              action.execute(context);
            }
          }
);
        }
 else {
          action.execute(context);
        }
      }
 else {
        for (        TreePath p : paths) {
          MPSTreeNode lastNode=(MPSTreeNode)p.getLastPathComponent();
          JPopupMenu menu=lastNode.getPopupMenu();
          for (int i=0; i < menu.getComponentCount(); i++) {
            if (menu.getComponent(i) instanceof JMenuItem) {
              JMenuItem item=(JMenuItem)menu.getComponent(i);
              KeyStroke keyStroke=item.getAccelerator();
              if (eventKeyStroke.equals(keyStroke)) {
                item.getAction().actionPerformed(new ActionEvent(this,0,""));
              }
            }
          }
        }
      }
    }
  }
);
  AbstractAction openNodeAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TreePath selPath=getSelectionPath();
      if (selPath == null)       return;
      MPSTreeNode selNode=(MPSTreeNode)selPath.getLastPathComponent();
      selNode.doubleClick();
    }
  }
;
  registerKeyboardAction(openNodeAction,KeyStroke.getKeyStroke("ENTER"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(openNodeAction,KeyStroke.getKeyStroke("F4"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TreePath path=getSelectionPath();
      if (path == null)       return;
      int rowNum=getRowForPath(path);
      Rectangle r=getRowBounds(rowNum);
      showPopup(r.x,r.y);
    }
  }
,KeyStroke.getKeyStroke("CONTEXT_MENU"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}
