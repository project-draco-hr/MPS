{
  Queue<Node> queue=QueueSequence.<Node>fromQueue(new LinkedList<Node>());
  QueueSequence.fromQueue(queue).addLastElement(node);
  MapSequence.<Node,Integer>fromMap(myLayers).put(node,0);
  int nodeClass=MapSequence.<Node,Integer>fromMap(myClasses).get(node);
  myShift[nodeClass]=Integer.MAX_VALUE;
  while (QueueSequence.<Node>fromQueue(queue).count() > 0) {
    Node cur=QueueSequence.fromQueue(queue).removeFirstElement();
    for (    Edge edge : ListSequence.<Edge>fromList(cur.getOutEdges())) {
      Node target=edge.getTarget();
      if (MapSequence.<Node,Integer>fromMap(myClasses).get(node) == MapSequence.<Node,Integer>fromMap(myClasses).get(target)) {
        MapSequence.<Node,Integer>fromMap(myNumInEdges).put(target,MapSequence.<Node,Integer>fromMap(myNumInEdges).get(target) - 1);
        if (MapSequence.<Node,Integer>fromMap(myNumInEdges).get(target) == 0) {
          MapSequence.<Node,Integer>fromMap(myLayers).put(target,MapSequence.<Node,Integer>fromMap(myLayers).get(cur) + 1);
          QueueSequence.fromQueue(queue).addLastElement(target);
        }
      }
 else {
        myShift[nodeClass]=Math.min(myShift[nodeClass],myLayers.get(target) - myLayers.get(cur) - 1);
      }
    }
  }
}
