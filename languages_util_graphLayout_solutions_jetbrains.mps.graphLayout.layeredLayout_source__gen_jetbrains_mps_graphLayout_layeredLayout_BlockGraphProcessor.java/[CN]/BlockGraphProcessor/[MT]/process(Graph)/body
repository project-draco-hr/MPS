{
  myMaxClass=0;
  myClasses=new NodeMap<Integer>(blockGraph);
  myNumInEdges=new NodeMap<Integer>(blockGraph);
  BlockGraphProcessor.ClassesFinder finder=new BlockGraphProcessor.ClassesFinder();
  finder.doDfs(blockGraph);
  int curClass=1;
  myShift=new int[myMaxClass + 1];
  myLayers=new NodeMap<Integer>(blockGraph);
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    if (MapSequence.fromMap(myClasses).get(node) == curClass) {
      processClass(node);
      if (myShift[MapSequence.fromMap(myClasses).get(node)] == Integer.MAX_VALUE) {
        myShift[MapSequence.fromMap(myClasses).get(node)]=0;
      }
      curClass++;
    }
  }
  int minPos=Integer.MAX_VALUE;
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    MapSequence.fromMap(myLayers).put(node,MapSequence.fromMap(myLayers).get(node) + myShift[MapSequence.fromMap(myClasses).get(node)]);
    minPos=Math.min(minPos,myLayers.get(node));
  }
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    MapSequence.fromMap(myLayers).put(node,MapSequence.fromMap(myLayers).get(node) - minPos);
  }
  return myLayers;
}
