{
  SNode classNode=SNodeOperations.getAncestor(this.myMoving,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  for (  SNode call : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(this.myMoving,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall",false,new String[]{}))) {
    if (SLinkOperations.getTarget(call,"baseMethodDeclaration",false) != this.myMoving) {
      SNode newCall=new MoveStaticMethodRefactoring.QuotationClass_f5lqsg_a0a0a0a1a1().createNode(classNode,SLinkOperations.getTarget(call,"baseMethodDeclaration",false));
      ListSequence.<SNode>fromList(SLinkOperations.getTargets(newCall,"actualArgument",true)).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(call,"actualArgument",true)));
      ListSequence.<SNode>fromList(SLinkOperations.getTargets(newCall,"typeArgument",true)).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(call,"typeArgument",true)));
      SNodeOperations.replaceWithAnother(call,newCall);
    }
  }
}
