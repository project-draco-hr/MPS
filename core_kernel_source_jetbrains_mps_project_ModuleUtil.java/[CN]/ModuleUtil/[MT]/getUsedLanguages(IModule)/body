{
  Iterable<Language> dependencies=new TranslatingIterator<ModuleReference,Language>(module.getUsedLanguagesReferences().iterator()){
    @Override protected Language translate(    ModuleReference ref){
      return MPSModuleRepository.getInstance().getLanguage(ref);
    }
  }
;
  Iterable<Language> languagesFromDevkits=new TranslatingIterator<ModuleReference,Language>(new CollectingManyIterator<DevKit,ModuleReference>(includingExtended(usedDevkits(module)).iterator()){
    @Override protected Iterator<ModuleReference> translate(    DevKit devkit){
      return devkit.getExportedLanguages_internal().iterator();
    }
  }
){
    @Override protected Language translate(    ModuleReference node){
      return MPSModuleRepository.getInstance().getLanguage(node);
    }
  }
;
  Language core=BootstrapLanguages.coreLanguage();
  return includingExtendedLanguages(IterableUtil.merge(dependencies,languagesFromDevkits,Collections.singleton(core)));
}
