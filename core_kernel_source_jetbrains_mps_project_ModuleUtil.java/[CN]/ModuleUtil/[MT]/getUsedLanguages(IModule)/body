{
  Iterable<Language> dependencies=new TranslatingIterator<SModuleReference,Language>(module.getUsedLanguagesReferences().iterator()){
    @Override protected Language translate(    SModuleReference ref){
      return ModuleRepositoryFacade.getInstance().getModule(ref,Language.class);
    }
  }
;
  Iterable<Language> languagesFromDevkits=new TranslatingIterator<SModuleReference,Language>(new CollectingManyIterator<DevKit,SModuleReference>(includingExtended(usedDevkits(module)).iterator()){
    @Override protected Iterator<SModuleReference> translate(    DevKit devkit){
      return devkit.getExportedLanguages_internal().iterator();
    }
  }
){
    @Override protected Language translate(    SModuleReference node){
      return ModuleRepositoryFacade.getInstance().getModule(node,Language.class);
    }
  }
;
  Language core=BootstrapLanguages.coreLanguage();
  return includingExtendedLanguages(IterableUtil.merge(dependencies,languagesFromDevkits,Collections.singleton(core)));
}
