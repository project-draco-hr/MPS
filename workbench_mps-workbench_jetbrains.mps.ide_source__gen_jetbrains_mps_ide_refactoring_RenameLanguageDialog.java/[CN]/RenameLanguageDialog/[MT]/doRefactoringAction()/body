{
  final boolean needToRegenerate=myRegenerateLanguage.getModel().isSelected();
  final String fqName=getCurrentValue();
  if (MPSModuleRepository.getInstance().getModuleByFqName(fqName) != null) {
    setErrorText("Duplicate language name");
    return;
  }
  if (!((SourceVersion.isName(fqName)))) {
    setErrorText("Language namespace should be valid Java package");
    return;
  }
  final LanguageRenamer renamer=new LanguageRenamer(myProject,myLanguage,fqName);
  ModelAccess modelAccess=myProject.getModelAccess();
  modelAccess.executeCommand(new Runnable(){
    public void run(){
      renamer.rename(needToRegenerate);
      renamer.update();
    }
  }
);
  if (needToRegenerate) {
    final Map<SModule,List<SModel>> langs=new LinkedHashMap<SModule,List<SModel>>();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        RefactoringUtil.fillLanguageAndItsExtendingLanguageModels(myLanguage,langs);
      }
    }
);
    for (    final List<SModel> models : langs.values()) {
      MakeSession sess=new MakeSession(myProject,null,false);
      if (IMakeService.INSTANCE.get().openNewSession(sess)) {
        IMakeService.INSTANCE.get().make(sess,new ModelsToResources(models).resources(false));
      }
    }
  }
  super.doRefactoringAction();
}
