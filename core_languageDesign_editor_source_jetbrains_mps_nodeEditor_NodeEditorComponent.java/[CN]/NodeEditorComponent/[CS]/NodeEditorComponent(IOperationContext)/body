{
  super(operationContext,false);
  myExternalComponent=new JPanel(new BorderLayout());
  myExternalComponent.add(super.getExternalComponent(),BorderLayout.CENTER);
  myExternalComponent.add(getMessagesGutter(),BorderLayout.EAST);
  addCellSelectionListener(new CellSelectionListener(){
    public void selectionChanged(    EditorComponent editor,    EditorCell oldSelection,    EditorCell newSelection){
      final SNode[] toSelect=new SNode[1];
      if (newSelection != null) {
        toSelect[0]=newSelection.getSNode();
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          if (isDisplayable() || IdeMain.getTestMode() != TestMode.NO_TEST) {
            inspect(toSelect[0]);
          }
        }
      }
);
    }
  }
);
  addHierarchyListener(new HierarchyListener(){
    public void hierarchyChanged(    HierarchyEvent hierarchyEvent){
      if (HierarchyEvent.SHOWING_CHANGED != (hierarchyEvent.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED))       return;
      if (!isShowing())       return;
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          SNode selectedNode=getSelectedNode();
          if (selectedNode == null) {
            inspect(null);
            return;
          }
          if (selectedNode.getModel().isDisposed())           return;
          inspect(selectedNode);
        }
      }
);
    }
  }
);
}
