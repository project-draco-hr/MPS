{
  super(operationContext,false);
  myExternalComponent=new JPanel(new BorderLayout());
  myExternalComponent.add(super.getExternalComponent(),BorderLayout.CENTER);
  myExternalComponent.add(getMessagesGutter(),BorderLayout.EAST);
  addCellSelectionListener(new CellSelectionListener(){
    public void selectionChanged(    EditorComponent editor,    EditorCell oldSelection,    EditorCell newSelection){
      final SNode[] toSelect=new SNode[1];
      if (newSelection != null) {
        toSelect[0]=newSelection.getSNode();
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          inspect(toSelect[0]);
        }
      }
);
    }
  }
);
  addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (getSelectedNode() != null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            inspect(getSelectedNode());
          }
        }
);
      }
    }
  }
);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      InspectorTool inspectorTool=getInspectorTool();
      if (inspectorTool == null)       return;
      inspectorTool.openTool(true);
    }
  }
,INSPECT_SHORTCUT,WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}
