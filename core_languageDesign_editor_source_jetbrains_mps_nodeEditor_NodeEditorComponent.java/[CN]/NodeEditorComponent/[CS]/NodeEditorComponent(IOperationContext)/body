{
  super(operationContext,true);
  getSelectionManager().addSelectionListener(new SingularSelectionListenerAdapter(){
    @Override protected void selectionChangedTo(    EditorComponent editorComponent,    SingularSelection newSelection){
      final SNode[] toSelect=new SNode[]{newSelection.getEditorCell().getSNode()};
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          if (isShowing() || IdeMain.getTestMode() != TestMode.NO_TEST) {
            inspect(toSelect[0]);
          }
        }
      }
);
    }
  }
);
  addHierarchyListener(new HierarchyListener(){
    public void hierarchyChanged(    HierarchyEvent hierarchyEvent){
      if (HierarchyEvent.SHOWING_CHANGED != (hierarchyEvent.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED)) {
        return;
      }
      if (!isShowing())       return;
      ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(operationContext.getProject());
      toolWindowManager.getFocusManager().requestFocus(NodeEditorComponent.this,false);
      adjustInspector();
    }
  }
);
}
