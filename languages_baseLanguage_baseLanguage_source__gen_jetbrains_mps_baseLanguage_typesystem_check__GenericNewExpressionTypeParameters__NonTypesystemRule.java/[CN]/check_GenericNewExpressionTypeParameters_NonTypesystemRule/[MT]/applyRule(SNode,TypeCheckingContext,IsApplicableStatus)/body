{
  if ((SLinkOperations.getTarget(genericNE,"creator",true) == null)) {
    return;
  }
  SNode classifier;
  List<SNode> parameters;
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator")) {
    classifier=SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.Classifier");
    parameters=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"typeParameter",true);
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.DefaultClassCreator")) {
    classifier=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.DefaultClassCreator"),"classifier",false);
    parameters=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.DefaultClassCreator"),"typeParameter",true);
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator")) {
    classifier=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator"),"cls",true),"classifier",false);
    parameters=SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,"creator",true),"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator"),"cls",true),"typeParameter",true);
  }
 else {
    return;
  }
  Map<SNode,SNode> typeParamsToArgs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Map<SNode,SNode> substitutions=MapSequence.fromMap(new HashMap<SNode,SNode>());
{
    SNode typeParameter;
    SNode typeVar;
    Iterator<SNode> typeParameter_iterator=ListSequence.fromList(parameters).iterator();
    Iterator<SNode> typeVar_iterator=ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).iterator();
    while (true) {
      if (!(typeParameter_iterator.hasNext())) {
        break;
      }
      if (!(typeVar_iterator.hasNext())) {
        break;
      }
      typeParameter=typeParameter_iterator.next();
      typeVar=typeVar_iterator.next();
      MapSequence.fromMap(typeParamsToArgs).put(typeVar,typeParameter);
      MapSequence.fromMap(substitutions).put(typeVar,typeParameter);
    }
  }
  for (  SNode typeParameter : parameters) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeParameter,SLinkOperations.getTarget(_quotation_createNode_nhxavr_a1a0a0a8a1(),"descriptor",false),false)))) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeParameter,"primitive types not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144089199522",null,errorTarget);
    }
  }
  if (ListSequence.fromList(parameters).count() == ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).count()) {
{
      Iterator<SNode> typeArgument_it=ListSequence.fromList(parameters).iterator();
      Iterator<SNode> typeVar_it=ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).iterator();
      SNode typeArgument_var;
      SNode typeVar_var;
      while (typeArgument_it.hasNext() && typeVar_it.hasNext()) {
        typeArgument_var=typeArgument_it.next();
        typeVar_var=typeVar_it.next();
        if ((SLinkOperations.getTarget(typeVar_var,"bound",true) != null)) {
          if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,SLinkOperations.getTarget(typeVar_var,"bound",true),"virtual_isSupersetOf_9029841626175335449",new Object[]{typeArgument_var,substitutions}))) {
{
              MessageTarget errorTarget=new NodeMessageTarget();
              IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument_var,"The type " + typeArgument_var + " is not a valid substitute for the bounded parameter "+ typeVar_var,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144095798837",null,errorTarget);
            }
          }
        }
        for (        SNode auxBound : SLinkOperations.getTargets(typeVar_var,"auxBounds",true)) {
          SNode concreteBound=RulesFunctions_BaseLanguage.concretifyType(auxBound,typeParamsToArgs);
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument_var,concreteBound))) {
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument_var,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144089199592",null,errorTarget);
          }
        }
      }
    }
  }
}
