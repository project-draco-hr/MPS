{
  if ((SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")) == null)) {
    return;
  }
  SNode classifier;
  List<SNode> parameters;
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator"))) {
    classifier=SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"))),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
    parameters=SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,0x11a59c8ffe0L,"typeParameter"));
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2724644c0ac833a5L,"jetbrains.mps.baseLanguage.structure.DefaultClassCreator"))) {
    classifier=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2724644c0ac833a5L,"jetbrains.mps.baseLanguage.structure.DefaultClassCreator")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2724644c0ac833a5L,0x2724644c0ac833a6L,"classifier"));
    parameters=SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2724644c0ac833a5L,"jetbrains.mps.baseLanguage.structure.DefaultClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2724644c0ac833a5L,0x2724644c0accfdb3L,"typeParameter"));
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator"))) {
    classifier=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x1107e0fd2a0L,"classifier"));
    parameters=SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(genericNE,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,0x10ab847b486L,"creator")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x117ac45a693L,"typeParameter"));
  }
 else {
    return;
  }
  Map<SNode,SNode> typeParamsToArgs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Map<SNode,SNode> substitutions=MapSequence.fromMap(new HashMap<SNode,SNode>());
{
    SNode typeParameter;
    SNode typeVar;
    Iterator<SNode> typeParameter_iterator=ListSequence.fromList(parameters).iterator();
    Iterator<SNode> typeVar_iterator=ListSequence.fromList(SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).iterator();
    while (true) {
      if (!(typeParameter_iterator.hasNext())) {
        break;
      }
      if (!(typeVar_iterator.hasNext())) {
        break;
      }
      typeParameter=typeParameter_iterator.next();
      typeVar=typeVar_iterator.next();
      MapSequence.fromMap(typeParamsToArgs).put(typeVar,typeParameter);
      MapSequence.fromMap(substitutions).put(typeVar,typeParameter);
    }
  }
  for (  SNode typeParameter : parameters) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeParameter,SLinkOperations.getTarget(_quotation_createNode_nhxavr_a1a0a0a8a1(),MetaAdapterFactory.getReferenceLink(0xed6d7656532c4bc2L,0x81d1af945aeb8280L,0x10de9cbf8e8L,0x10de9cbf8e7L,"descriptor")),false)))) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeParameter,"primitive types not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144089199522",null,errorTarget);
    }
  }
  if (ListSequence.fromList(parameters).count() == ListSequence.fromList(SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).count()) {
{
      Iterator<SNode> typeArgument_it=ListSequence.fromList(parameters).iterator();
      Iterator<SNode> typeVar_it=ListSequence.fromList(SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).iterator();
      SNode typeArgument_var;
      SNode typeVar_var;
      while (typeArgument_it.hasNext() && typeVar_it.hasNext()) {
        typeArgument_var=typeArgument_it.next();
        typeVar_var=typeVar_it.next();
        if ((SLinkOperations.getTarget(typeVar_var,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae375bda0L,"bound")) != null)) {
          if (!(Type__BehaviorDescriptor.isSupersetOf_id7PgshREdQKp.invoke(SLinkOperations.getTarget(typeVar_var,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae375bda0L,"bound")),typeArgument_var,substitutions))) {
{
              MessageTarget errorTarget=new NodeMessageTarget();
              IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument_var,"The type " + typeArgument_var + " is not a valid substitute for the bounded parameter "+ typeVar_var,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144095798837",null,errorTarget);
            }
          }
        }
        for (        SNode auxBound : SLinkOperations.getChildren(typeVar_var,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1024639ed74L,0x11ae913a476L,"auxBounds"))) {
          SNode concreteBound=RulesFunctions_BaseLanguage.concretifyType(auxBound,typeParamsToArgs);
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument_var,concreteBound))) {
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument_var,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4853049144089199592",null,errorTarget);
          }
        }
      }
    }
  }
}
