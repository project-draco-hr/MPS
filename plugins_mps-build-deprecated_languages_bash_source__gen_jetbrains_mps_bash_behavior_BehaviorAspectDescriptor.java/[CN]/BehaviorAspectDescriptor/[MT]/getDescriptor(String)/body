{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b,fqName)) {
case 32:
    return new CommandList_BehaviorDescriptor();
case 80:
  return new InputLines_BehaviorDescriptor();
case 136:
return new ShellScript_BehaviorDescriptor();
case 137:
return new SimpleCommand_BehaviorDescriptor();
case 158:
return new WordList_BehaviorDescriptor();
case 13:
return new AsyncOperator_BehaviorDescriptor();
case 135:
return new SemicolonTerminator_BehaviorDescriptor();
case 14:
return new AsyncTerminator_BehaviorDescriptor();
case 150:
return new UntilLoopCommand_BehaviorDescriptor();
case 156:
return new WhileLoopCommand_BehaviorDescriptor();
case 60:
return new ForeachCommand_BehaviorDescriptor();
case 154:
return new VariableNameDeclaration_BehaviorDescriptor();
case 59:
return new ForCommand_BehaviorDescriptor();
case 76:
return new IfCommand_BehaviorDescriptor();
case 49:
return new ElifCommand_BehaviorDescriptor();
case 27:
return new CaseClause_BehaviorDescriptor();
case 28:
return new CaseCommand_BehaviorDescriptor();
case 43:
return new DoubleSemicolon_BehaviorDescriptor();
case 133:
return new SemicolonEt_BehaviorDescriptor();
case 44:
return new DoubleSemicolonEt_BehaviorDescriptor();
case 132:
return new SelectCommand_BehaviorDescriptor();
case 22:
return new BraceGrouping_BehaviorDescriptor();
case 25:
return new BracketGrouping_BehaviorDescriptor();
case 96:
return new MulExpression_BehaviorDescriptor();
case 41:
return new DivExpression_BehaviorDescriptor();
case 95:
return new ModExpression_BehaviorDescriptor();
case 0:
return new AddExpression_BehaviorDescriptor();
case 144:
return new SubExpression_BehaviorDescriptor();
case 10:
return new ArithmeticCommand_BehaviorDescriptor();
case 121:
return new PostIncExpression_BehaviorDescriptor();
case 120:
return new PostDecExpression_BehaviorDescriptor();
case 123:
return new PreIncExpression_BehaviorDescriptor();
case 122:
return new PreDecExpression_BehaviorDescriptor();
case 149:
return new UnaryPlusExpression_BehaviorDescriptor();
case 148:
return new UnaryMinusExpression_BehaviorDescriptor();
case 91:
return new LogicalNegationExpression_BehaviorDescriptor();
case 18:
return new BitwiseNegationExpression_BehaviorDescriptor();
case 56:
return new ExpExpression_BehaviorDescriptor();
case 83:
return new LeftBitwiseShiftExpression_BehaviorDescriptor();
case 129:
return new RightBitwiseShiftExpression_BehaviorDescriptor();
case 50:
return new EqualityExpression_BehaviorDescriptor();
case 77:
return new InequalityExpression_BehaviorDescriptor();
case 17:
return new BitwiseAndExpression_BehaviorDescriptor();
case 19:
return new BitwiseOrExpression_BehaviorDescriptor();
case 20:
return new BitwiseXorExpression_BehaviorDescriptor();
case 90:
return new LogicalAndExpression_BehaviorDescriptor();
case 92:
return new LogicalOrExpression_BehaviorDescriptor();
case 30:
return new CommaExpression_BehaviorDescriptor();
case 38:
return new DecimalConstant_BehaviorDescriptor();
case 75:
return new HexIntegerLiteral_BehaviorDescriptor();
case 15:
return new BasedIntegerLiteral_BehaviorDescriptor();
case 24:
return new BracketExpression_BehaviorDescriptor();
case 65:
return new GreaterThanExpression_BehaviorDescriptor();
case 85:
return new LessThanExpression_BehaviorDescriptor();
case 68:
return new GreaterThanOrEqualExpression_BehaviorDescriptor();
case 87:
return new LessThanOrEqualExpression_BehaviorDescriptor();
case 37:
return new ConditionalOperation_BehaviorDescriptor();
case 12:
return new AssingmentExpression_BehaviorDescriptor();
case 119:
return new PlusAssingmentExpression_BehaviorDescriptor();
case 93:
return new MinusAssingmentExpression_BehaviorDescriptor();
case 97:
return new MusAssingmentExpression_BehaviorDescriptor();
case 40:
return new DivAssingmentExpression_BehaviorDescriptor();
case 94:
return new ModAssingmentExpression_BehaviorDescriptor();
case 84:
return new LeftShiftAssingmentExpression_BehaviorDescriptor();
case 130:
return new RightShiftAssingmentExpression_BehaviorDescriptor();
case 1:
return new AndAssingmentExpression_BehaviorDescriptor();
case 109:
return new OrAssingmentExpression_BehaviorDescriptor();
case 160:
return new XorAssingmentExpression_BehaviorDescriptor();
case 153:
return new VariableAssingment_BehaviorDescriptor();
case 16:
return new BasicParameterExpansion_BehaviorDescriptor();
case 11:
return new ArithmeticExpansion_BehaviorDescriptor();
case 147:
return new TildeExpansion_BehaviorDescriptor();
case 64:
return new GeneralizedWord_BehaviorDescriptor();
case 138:
return new SimpleWord_BehaviorDescriptor();
case 124:
return new QuotesCommandSubstitution_BehaviorDescriptor();
case 26:
return new BuckCommandSubstitution_BehaviorDescriptor();
case 127:
return new RedirectedCommand_BehaviorDescriptor();
case 81:
return new InputRedirection_BehaviorDescriptor();
case 115:
return new OutputRedirection_BehaviorDescriptor();
case 5:
return new AppendingOutputRedirection_BehaviorDescriptor();
case 114:
return new OutputErrorRedirection_BehaviorDescriptor();
case 4:
return new AppendingOutputErrorRedirection_BehaviorDescriptor();
case 73:
return new HereDocumentRedirection_BehaviorDescriptor();
case 74:
return new HereStringRedirection_BehaviorDescriptor();
case 45:
return new DuplicateInputFileDiscriptor_BehaviorDescriptor();
case 46:
return new DuplicateOutputFileDiscriptor_BehaviorDescriptor();
case 126:
return new ReadingWritingRedirection_BehaviorDescriptor();
case 63:
return new FunctionDeclaration_BehaviorDescriptor();
case 62:
return new FunctionCallCommand_BehaviorDescriptor();
case 58:
return new ExternalCommandDeclaration_BehaviorDescriptor();
case 57:
return new ExternalCommandCall_BehaviorDescriptor();
case 104:
return new OptionSet_BehaviorDescriptor();
case 102:
return new Option_BehaviorDescriptor();
case 106:
return new OptionWithParam_BehaviorDescriptor();
case 105:
return new OptionSetReference_BehaviorDescriptor();
case 103:
return new OptionReference_BehaviorDescriptor();
case 107:
return new OptionWithParamReference_BehaviorDescriptor();
case 9:
return new ArgumentReference_BehaviorDescriptor();
case 6:
return new Argument_BehaviorDescriptor();
case 7:
return new ArgumentList_BehaviorDescriptor();
case 8:
return new ArgumentListReference_BehaviorDescriptor();
case 36:
return new ConditionalCommand_BehaviorDescriptor();
case 139:
return new SingleQuote_BehaviorDescriptor();
case 42:
return new DoubleQuote_BehaviorDescriptor();
case 157:
return new WordExpression_BehaviorDescriptor();
case 33:
return new CommentedCommandList_BehaviorDescriptor();
case 71:
return new HeadCommandList_BehaviorDescriptor();
case 3:
return new AndOperator_BehaviorDescriptor();
case 111:
return new OrOperator_BehaviorDescriptor();
case 34:
return new CommentedFollowingCommandList_BehaviorDescriptor();
case 72:
return new HeadPipeline_BehaviorDescriptor();
case 117:
return new PipelineOperatorConnection_BehaviorDescriptor();
case 118:
return new PipelineOperatorErrorConnection_BehaviorDescriptor();
case 35:
return new CommentedText_BehaviorDescriptor();
case 31:
return new Command_BehaviorDescriptor();
case 155:
return new VariableReference_BehaviorDescriptor();
case 55:
return new ExistConditionalExpression_BehaviorDescriptor();
case 21:
return new BlockFileConditionalExpression_BehaviorDescriptor();
case 29:
return new CharFileConditionalExpression_BehaviorDescriptor();
case 39:
return new DirectoryConditionalExpression_BehaviorDescriptor();
case 112:
return new OtherExistConditionalExpression_BehaviorDescriptor();
case 128:
return new RegularFileConditionalExpression_BehaviorDescriptor();
case 70:
return new GroupIdConditionalExpression_BehaviorDescriptor();
case 145:
return new SymlinkConditionalExpression_BehaviorDescriptor();
case 142:
return new StickyBitConditionalExpression_BehaviorDescriptor();
case 116:
return new PipeConditionalExpression_BehaviorDescriptor();
case 125:
return new ReadTestConditionalExpression_BehaviorDescriptor();
case 140:
return new SizeConditionalExpression_BehaviorDescriptor();
case 146:
return new TerminalConditionalExpression_BehaviorDescriptor();
case 151:
return new UserIdConditionalExpression_BehaviorDescriptor();
case 159:
return new WriteTestConditionalExpression_BehaviorDescriptor();
case 54:
return new ExecTestConditionalExpression_BehaviorDescriptor();
case 48:
return new EffectiveUserIdConditionalExpression_BehaviorDescriptor();
case 47:
return new EffectiveGroupIdConditionalExpression_BehaviorDescriptor();
case 113:
return new OtherSymlinkConditionalExpression_BehaviorDescriptor();
case 141:
return new SocketConditionalExpression_BehaviorDescriptor();
case 82:
return new LastReadConditionalExpression_BehaviorDescriptor();
case 108:
return new OptnameStringConditionalExpression_BehaviorDescriptor();
case 161:
return new ZeroStringConditionalExpression_BehaviorDescriptor();
case 99:
return new NonZeroStringConditionalExpression_BehaviorDescriptor();
case 143:
return new StringConditionalExpression_BehaviorDescriptor();
case 98:
return new NewerThan_BehaviorDescriptor();
case 101:
return new OlderThan_BehaviorDescriptor();
case 131:
return new SameReference_BehaviorDescriptor();
case 52:
return new EqualityStrings_BehaviorDescriptor();
case 79:
return new InequalityStrings_BehaviorDescriptor();
case 89:
return new LessThanString_BehaviorDescriptor();
case 69:
return new GreaterThanString_BehaviorDescriptor();
case 61:
return new FreeCommand_BehaviorDescriptor();
case 134:
return new SemicolonOperator_BehaviorDescriptor();
case 152:
return new VariableAddAssingment_BehaviorDescriptor();
case 100:
return new NotCommand_BehaviorDescriptor();
case 78:
return new InequalityNumber_BehaviorDescriptor();
case 51:
return new EqualityNumber_BehaviorDescriptor();
case 86:
return new LessThanNumber_BehaviorDescriptor();
case 88:
return new LessThanOrEqualNumber_BehaviorDescriptor();
case 66:
return new GreaterThanNumber_BehaviorDescriptor();
case 67:
return new GreaterThanOrEqual_BehaviorDescriptor();
case 2:
return new AndCombiningComditionalExpression_BehaviorDescriptor();
case 110:
return new OrCombiningConditionalExpression_BehaviorDescriptor();
case 23:
return new BracketConditionalExpression_BehaviorDescriptor();
case 53:
return new EqualityStrings2_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
