{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Arrays.asList(new ConceptEditor[]{new Diagram1_DiagramTestTextual_Editor(),new Diagram1_Editor()});
      }
    break;
case 1:
  if (true) {
    return Arrays.asList(new ConceptEditor[]{new Diagram2_DiagramTestTextual_Editor(),new Diagram2_Editor()});
  }
break;
case 2:
if (true) {
return Arrays.asList(new ConceptEditor[]{new InputPort_DiagramTestTextual_Editor(),new InputPort_Editor()});
}
break;
case 3:
if (true) {
return Arrays.asList(new ConceptEditor[]{new Node_DiagramTestTextual_Editor(),new Node_Editor()});
}
break;
case 4:
if (true) {
return Arrays.asList(new ConceptEditor[]{new NodeWithName_DiagramTestTextual_Editor(),new NodeWithName_Editor()});
}
break;
case 5:
if (true) {
return Arrays.asList(new ConceptEditor[]{new NodeWithPortQueries_DiagramTestTextual_Editor(),new NodeWithPortQueries_Editor()});
}
break;
case 6:
if (true) {
return Arrays.asList(new ConceptEditor[]{new NodeWithPorts_DiagramTestTextual_Editor(),new NodeWithPorts_Editor()});
}
break;
case 7:
if (true) {
return Arrays.asList(new ConceptEditor[]{new NodeWithSize_DiagramTestTextual_Editor(),new NodeWithSize_Editor()});
}
break;
case 8:
if (true) {
return Arrays.asList(new ConceptEditor[]{new OutputPort_DiagramTestTextual_Editor(),new OutputPort_Editor()});
}
break;
case 9:
if (true) {
return Arrays.asList(new ConceptEditor[]{new OutputToInputPortConnector_DiagramTestTextual_Editor(),new OutputToInputPortConnector_Editor()});
}
break;
case 10:
if (true) {
return Arrays.asList(new ConceptEditor[]{new RectangleNode_DiagramTestTextual_Editor(),new RectangleNode_Editor()});
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
