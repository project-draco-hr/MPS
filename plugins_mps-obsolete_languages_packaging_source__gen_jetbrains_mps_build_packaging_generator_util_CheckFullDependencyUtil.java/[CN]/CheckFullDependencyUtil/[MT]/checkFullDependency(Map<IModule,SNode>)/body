{
  Map<IModule,Iterable<IModule>> missingDependencyResult=MapSequence.fromMap(new LinkedHashMap<IModule,Iterable<IModule>>(16,(float)0.75,false));
  Set<IModule> coreModules=SetSequence.fromSet(new HashSet<IModule>());
  SetSequence.fromSet(coreModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<IModule>(){
    public boolean accept(    IModule it){
      return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) == null);
    }
  }
));
  for (  IModule module : SetSequence.fromSet(coreModules)) {
    List<IModule> dependencyToCheck=CheckFullDependencyUtil.getDependencyToCheck(module);
    Iterable<IModule> missingDependency=ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(coreModules));
    if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
      MapSequence.fromMap(missingDependencyResult).put(module,missingDependency);
    }
  }
  Set<IModule> pluginModules=SetSequence.fromSet(new HashSet<IModule>());
  SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<IModule>(){
    public boolean accept(    IModule it){
      return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
    }
  }
));
  for (  IModule module : SetSequence.fromSet(pluginModules)) {
    List<IModule> dependencyToCheck=CheckFullDependencyUtil.getDependencyToCheck(module);
    Iterable<IModule> missingDependency=ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()));
    if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
      MapSequence.fromMap(missingDependencyResult).put(module,missingDependency);
    }
  }
  return missingDependencyResult;
}
