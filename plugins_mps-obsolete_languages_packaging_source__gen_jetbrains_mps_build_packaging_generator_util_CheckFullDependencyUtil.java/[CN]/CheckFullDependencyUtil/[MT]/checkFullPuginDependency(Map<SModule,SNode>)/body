{
  Map<SNode,Iterable<SNode>> result=MapSequence.fromMap(new LinkedHashMap<SNode,Iterable<SNode>>(16,(float)0.75,false));
  final Set<SModule> pluginModules=SetSequence.fromSet(new HashSet<SModule>());
  SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
    }
  }
));
  Map<SNode,List<SModule>> plugins=MapSequence.fromMap(new LinkedHashMap<SNode,List<SModule>>(16,(float)0.75,false));
  for (  SModule pluginModule : SetSequence.fromSet(pluginModules)) {
    SNode containingPlugin=getContainingPlugin(MapSequence.fromMap(modules).get(pluginModule));
    if (MapSequence.fromMap(plugins).get(containingPlugin) == null) {
      MapSequence.fromMap(plugins).put(containingPlugin,ListSequence.fromList(new ArrayList<SModule>()));
    }
    ListSequence.fromList(MapSequence.fromMap(plugins).get(containingPlugin)).addElement(pluginModule);
  }
  for (  final SNode plugin : SetSequence.fromSet(MapSequence.fromMap(plugins).keySet())) {
    Iterable<SNode> dependency=ListSequence.fromList(MapSequence.fromMap(plugins).get(plugin)).translate(new ITranslator2<SModule,SModule>(){
      public Iterable<SModule> translate(      SModule it){
        return ListSequence.fromList(getDependencyToCheck(it)).intersect(SetSequence.fromSet(pluginModules));
      }
    }
).select(new ISelector<SModule,SNode>(){
      public SNode select(      SModule it){
        return getContainingPlugin(MapSequence.fromMap(modules).get(it));
      }
    }
).distinct();
    Iterable<SNode> missing=Sequence.fromIterable(dependency).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return !(isDependent(plugin,it));
      }
    }
);
    if (Sequence.fromIterable(missing).isNotEmpty()) {
      MapSequence.fromMap(result).put(plugin,missing);
    }
  }
  return result;
}
