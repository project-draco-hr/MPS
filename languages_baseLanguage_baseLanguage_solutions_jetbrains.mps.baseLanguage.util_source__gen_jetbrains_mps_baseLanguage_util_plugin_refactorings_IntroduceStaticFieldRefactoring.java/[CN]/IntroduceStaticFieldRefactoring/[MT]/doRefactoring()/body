{
  this.findDuplicates();
  SNode newDeclaration;
  SNode expressionType=SNodeOperations.copyNode(this.getExpressionType());
  String name=this.getName();
  SNode expression=SNodeOperations.copyNode(this.getExpression());
  if (myFieldInitialization == FieldInitializationPlace.FIELD) {
    newDeclaration=_quotation_createNode_282g55_a0a0g0a(myVisibilityLevel.getNode(),expressionType,name,expression);
  }
 else {
    newDeclaration=_quotation_createNode_282g55_a0a0a6a0(myVisibilityLevel.getNode(),expressionType,name);
  }
  if (myIsFinal) {
    SPropertyOperations.set(newDeclaration,"isFinal","" + (true));
  }
  SNode classConcept=SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  MemberInsertingUtils.insertClassifierMemberInBestPlace(classConcept,newDeclaration);
  SNode assignExp=_quotation_createNode_282g55_a0k0a(expression,newDeclaration);
  SNode assignmentStatement=_quotation_createNode_282g55_a0l0a(assignExp);
  if (this.myFieldInitialization == FieldInitializationPlace.METHOD) {
    SNodeOperations.insertPrevSiblingChild(SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.Statement",false,false),SNodeOperations.copyNode(assignmentStatement));
  }
  if (this.myFieldInitialization == FieldInitializationPlace.STATICINIT) {
    SNode declaration=SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    Iterable<SNode> staticInitializers=BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)(Object.class)),declaration,"jetbrains.mps.baseLanguage.structure.ClassConcept","call_staticInitializers_3136320261464948039",new Object[]{});
    SNode initializer;
    if (Sequence.fromIterable(staticInitializers).isNotEmpty()) {
      initializer=Sequence.fromIterable(staticInitializers).first();
    }
 else {
      initializer=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticInitializer",null);
      SLinkOperations.setTarget(initializer,"statementList",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null),true);
      ListSequence.fromList(SLinkOperations.getTargets(declaration,"member",true)).addElement(initializer);
    }
    List<SNode> statement=SLinkOperations.getTargets(SLinkOperations.getTarget(initializer,"statementList",true),"statement",true);
    if (ListSequence.fromList(statement).isNotEmpty()) {
      SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statement).first(),SNodeOperations.copyNode(assignmentStatement));
    }
 else {
      ListSequence.fromList(statement).addElement(SNodeOperations.copyNode(assignmentStatement));
    }
  }
  replaceNode(this.getExpression(),newDeclaration);
  if (myIsReplacingAll) {
    for (    SNode duplicate : ListSequence.fromList(myDuplicates)) {
      replaceNode(duplicate,newDeclaration);
    }
  }
  return newDeclaration;
}
