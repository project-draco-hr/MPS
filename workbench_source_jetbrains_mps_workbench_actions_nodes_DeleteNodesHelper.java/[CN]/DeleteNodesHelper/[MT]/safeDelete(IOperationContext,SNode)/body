{
  String refactoringClass;
  if (node == null) {
    return;
  }
 else   if (node.isInstanceOfConcept(ConceptDeclaration.concept)) {
    refactoringClass=SafeDeleteConcept.class.getName();
  }
 else   if (node.isInstanceOfConcept(LinkDeclaration.concept)) {
    refactoringClass=SafeDeleteLink.class.getName();
  }
 else {
    refactoringClass=SafeDelete.class.getName();
  }
  final IRefactoring refactoring=RefactoringUtil.getRefactoringByClassName(refactoringClass);
  final RefactoringContext refactoringContext=new RefactoringContext(refactoring);
  refactoringContext.setCurrentOperationContext(context);
  refactoringContext.setSelectedNode(node);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      refactoringContext.setSelectedModel(SNodeOperations.getModel(node).getModelDescriptor());
    }
  }
);
  refactoringContext.setSelectedModule(context.getModule());
  refactoringContext.setSelectedProject(context.getProject());
  new Thread(){
    public void run(){
      new RefactoringFacade().execute(refactoring,refactoringContext);
    }
  }
.start();
}
