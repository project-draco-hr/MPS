{
  SNode e=MathTypeUtil.getElementType(vT);
  if (TypeChecker.getInstance().getSubtypingManager().isSubtype(e,scalarType)) {
    e=scalarType;
  }
  do {
    SNode matchedNode_5052_1=vT;
{
      boolean matches_5052_2=false;
{
        SNode matchingNode_5052_2=vT;
        if (matchingNode_5052_2 != null) {
          matches_5052_2=SModelUtil_new.isAssignableConcept(matchingNode_5052_2.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.MatrixType");
        }
      }
      if (matches_5052_2) {
{
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.MatrixType",null);
          SPropertyOperations.set(result,"rows","" + SPropertyOperations.getInteger(matchedNode_5052_1,"rows"));
          SPropertyOperations.set(result,"columns","" + SPropertyOperations.getInteger(matchedNode_5052_1,"columns"));
          SLinkOperations.setTarget(result,"elementType",e,true);
          return result;
        }
      }
    }
{
      boolean matches_5052_3=false;
{
        SNode matchingNode_5052_3=vT;
        if (matchingNode_5052_3 != null) {
          matches_5052_3=SModelUtil_new.isAssignableConcept(matchingNode_5052_3.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.VectorType");
        }
      }
      if (matches_5052_3) {
{
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.VectorType",null);
          SPropertyOperations.set(result,"height","" + SPropertyOperations.getInteger(matchedNode_5052_1,"height"));
          SLinkOperations.setTarget(result,"elementType",e,true);
          return result;
        }
      }
    }
    return null;
  }
 while (false);
}
