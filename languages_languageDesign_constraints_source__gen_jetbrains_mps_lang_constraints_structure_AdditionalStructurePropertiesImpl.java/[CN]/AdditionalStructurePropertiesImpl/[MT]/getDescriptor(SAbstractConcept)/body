{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0sb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_ConceptConstraints;
      }
    break;
case 1:
  if (true) {
    return props_ConceptParameter_ReferentSearchScope_enclosingNode;
  }
break;
case 2:
if (true) {
return props_ConstraintFunctionParameter_checkedNode;
}
break;
case 3:
if (true) {
return props_ConstraintFunctionParameter_childConcept;
}
break;
case 4:
if (true) {
return props_ConstraintFunctionParameter_childNode;
}
break;
case 5:
if (true) {
return props_ConstraintFunctionParameter_containingLink;
}
break;
case 6:
if (true) {
return props_ConstraintFunctionParameter_contextNode;
}
break;
case 7:
if (true) {
return props_ConstraintFunctionParameter_contextRole;
}
break;
case 8:
if (true) {
return props_ConstraintFunctionParameter_exists;
}
break;
case 9:
if (true) {
return props_ConstraintFunctionParameter_inEditor;
}
break;
case 10:
if (true) {
return props_ConstraintFunctionParameter_link;
}
break;
case 11:
if (true) {
return props_ConstraintFunctionParameter_linkTarget;
}
break;
case 12:
if (true) {
return props_ConstraintFunctionParameter_newReferentNode;
}
break;
case 13:
if (true) {
return props_ConstraintFunctionParameter_oldReferentNode;
}
break;
case 14:
if (true) {
return props_ConstraintFunctionParameter_parameterNode;
}
break;
case 15:
if (true) {
return props_ConstraintFunctionParameter_parentNode;
}
break;
case 16:
if (true) {
return props_ConstraintFunctionParameter_position;
}
break;
case 17:
if (true) {
return props_ConstraintFunctionParameter_referenceNode;
}
break;
case 18:
if (true) {
return props_ConstraintFunctionParameter_smartReference;
}
break;
case 19:
if (true) {
return props_ConstraintFunctionParameter_visible;
}
break;
case 20:
if (true) {
return props_ConstraintFunction_CanBeAChild;
}
break;
case 21:
if (true) {
return props_ConstraintFunction_CanBeAParent;
}
break;
case 22:
if (true) {
return props_ConstraintFunction_CanBeARoot;
}
break;
case 23:
if (true) {
return props_ConstraintFunction_CanBeAnAncestor;
}
break;
case 24:
if (true) {
return props_ConstraintFunction_GetAlternativeIcon;
}
break;
case 25:
if (true) {
return props_ConstraintFunction_GetInstanceIcon;
}
break;
case 26:
if (true) {
return props_ConstraintFunction_PropertyGetter;
}
break;
case 27:
if (true) {
return props_ConstraintFunction_PropertySetter;
}
break;
case 28:
if (true) {
return props_ConstraintFunction_PropertyValidator;
}
break;
case 29:
if (true) {
return props_ConstraintFunction_RefSetHandlerKeepsReference;
}
break;
case 30:
if (true) {
return props_ConstraintFunction_ReferentSearchScope_AbstractBase;
}
break;
case 31:
if (true) {
return props_ConstraintFunction_ReferentSearchScope_Factory;
}
break;
case 32:
if (true) {
return props_ConstraintFunction_ReferentSearchScope_Presentation;
}
break;
case 33:
if (true) {
return props_ConstraintFunction_ReferentSearchScope_Scope;
}
break;
case 34:
if (true) {
return props_ConstraintFunction_ReferentSearchScope_Validator;
}
break;
case 35:
if (true) {
return props_ConstraintFunction_ReferentSetHandler;
}
break;
case 36:
if (true) {
return props_ConstraintsFunctionParameter_node;
}
break;
case 37:
if (true) {
return props_ConstraintsFunctionParameter_propertyValue;
}
break;
case 38:
if (true) {
return props_InheritedNodeScopeFactory;
}
break;
case 39:
if (true) {
return props_NodeDefaultSearchScope;
}
break;
case 40:
if (true) {
return props_NodePropertyConstraint;
}
break;
case 41:
if (true) {
return props_NodeReferentConstraint;
}
break;
case 42:
if (true) {
return props_NodeScopeFactory;
}
break;
default :
}
}
throw new IllegalStateException();
}
