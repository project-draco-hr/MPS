{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlArithmetic","jetbrains.mps.core.query.structure.MqlBinaryExpr",false,new String[]{"jetbrains.mps.core.query.structure.MqlBinaryExpr"},new String[]{"kind"},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlAssignment","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression","jetbrains.mps.core.query.structure.MqlVariableContainer"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlBinaryExpr","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlBoolLiteral","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{"value"},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlBoolType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlClosure","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression","jetbrains.mps.core.query.structure.MqlParametersContainer","jetbrains.mps.core.query.structure.MqlScopeProvider"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlCollectionProperty","jetbrains.mps.core.query.structure.MqlSelector",false,new String[]{"jetbrains.mps.core.query.structure.MqlSelector"},new String[]{"kind"},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlCollectionSelector","jetbrains.mps.core.query.structure.MqlSelector",false,new String[]{"jetbrains.mps.core.query.structure.MqlSelector"},new String[]{"kind"},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlCollectionSelectorVar","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlCollectionSelectorVarRef","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{"var"});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlComma","jetbrains.mps.core.query.structure.MqlBinaryExpr",false,new String[]{"jetbrains.mps.core.query.structure.MqlBinaryExpr","jetbrains.mps.core.query.structure.MqlScopeProvider"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlCondition","jetbrains.mps.core.query.structure.MqlBinaryExpr",false,new String[]{"jetbrains.mps.core.query.structure.MqlBinaryExpr"},new String[]{"kind"},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlDotExpression","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlFunctionType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlImport","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"target"});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlIntLiteral","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{"value"},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlIntType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlListLiteral","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlListType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlNoContextQueryCall","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{"query"});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlNodeType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{"concept"});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlNullLiteral","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlNullType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlPackage","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.core.query.structure.MqlScopeProvider","jetbrains.mps.core.query.structure.MqlScopeExporter"},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlParameterReference","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{"parameter"});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlParametersContainer",null,true,new String[]{},new String[]{},new String[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlParentheses","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlQuery","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.core.query.structure.MqlParametersContainer","jetbrains.mps.core.query.structure.MqlScopeProvider"},new String[]{"isCached"},new String[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlScopeExporter",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlScopeProvider",null,true,new String[]{},new String[]{},new String[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlSelector","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlStringLiteral","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{"value"},new String[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlStringType","jetbrains.mps.core.query.structure.MqlType",false,new String[]{"jetbrains.mps.core.query.structure.MqlType"},new String[]{},new String[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlThis","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlTriplex","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlType","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlUnary","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{"kind"},new String[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlVariable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlVariableContainer",null,true,new String[]{},new String[]{},new String[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.core.query.structure.MqlVariableReference","jetbrains.mps.core.query.structure.MqlExpression",false,new String[]{"jetbrains.mps.core.query.structure.MqlExpression"},new String[]{},new String[]{"var"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
