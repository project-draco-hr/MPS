{
  SModule module=getModule();
  if (module instanceof Generator) {
    module=((Generator)module).getSourceLanguage();
  }
  if (module == null) {
    return super.loadModels();
  }
  CachedModuleData moduleData=myCachedRepository.getModuleData(module.getModuleReference());
  if (moduleData == null) {
    return super.loadModels();
  }
  List<CachedModelData> models=moduleData.getModels(this);
  if (models == null) {
    return super.loadModels();
  }
  List<SModel> result=new ArrayList<SModel>();
  Map<String,String> options=new HashMap<String,String>();
  options.put(ModelFactory.OPTION_MODULEREF,module.getModuleReference().toString());
  for (  CachedModelData mdata : models) {
    IFile file=myFileSystem.getFile(mdata.getFile());
    FileDataSource source=new FileDataSource(file,this);
    Object header=mdata.getHeader();
    if (mdata.getCacheKind() == CachedModelData.Kind.Binary) {
      result.add(BinaryModelPersistence.createFromHeader(((SModelHeader)header),source));
    }
 else     if (mdata.getCacheKind() == CachedModelData.Kind.Regular) {
      result.add(DefaultModelPersistence.createFromHeader((SModelHeader)header,source));
    }
 else {
      String fileName=file.getName();
      String extension=FileUtil.getExtension(fileName);
      if (extension == null)       continue;
      ModelFactory modelFactory=PersistenceFacade.getInstance().getModelFactory(extension);
      if (modelFactory == null)       continue;
      fillOptions(file,options);
      try {
        SModel model=modelFactory.load(source,Collections.unmodifiableMap(options));
        result.add(model);
      }
 catch (      IOException e) {
      }
    }
  }
  return result;
}
