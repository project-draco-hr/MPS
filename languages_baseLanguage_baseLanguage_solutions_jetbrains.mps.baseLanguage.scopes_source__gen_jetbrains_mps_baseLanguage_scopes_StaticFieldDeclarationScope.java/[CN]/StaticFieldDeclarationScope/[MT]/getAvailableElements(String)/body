{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(MapSequence.fromMap(nameToField).values()));
  Map<String,List<SNode>> groups=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode field : Sequence.fromIterable(extendsScopes).translate(new ITranslator2<Scope,SNode>(){
    public Iterable<SNode> translate(    Scope it){
      return Sequence.fromIterable(it.getAvailableElements(prefix)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
        }
      }
);
    }
  }
)) {
    if (!(MapSequence.fromMap(nameToField).containsKey(SPropertyOperations.getString(field,"name")))) {
      if (MapSequence.fromMap(groups).containsKey(SPropertyOperations.getString(field,"name"))) {
        ListSequence.fromList(MapSequence.fromMap(groups).get(SPropertyOperations.getString(field,"name"))).addElement(field);
      }
 else {
        MapSequence.fromMap(groups).put(SPropertyOperations.getString(field,"name"),ListSequence.fromListAndArray(new ArrayList<SNode>(),field));
      }
    }
  }
  for (  IMapping<String,List<SNode>> group : MapSequence.fromMap(groups)) {
    if ((int)ListSequence.fromList(group.value()).count() == 1) {
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(group.value()));
    }
  }
  return result;
}
