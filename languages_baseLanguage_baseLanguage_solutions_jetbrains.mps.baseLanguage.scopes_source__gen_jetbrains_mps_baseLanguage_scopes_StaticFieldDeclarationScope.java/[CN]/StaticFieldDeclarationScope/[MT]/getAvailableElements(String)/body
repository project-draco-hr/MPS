{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  if ((prefix == null || prefix.length() == 0)) {
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(MapSequence.fromMap(nameToField).values()));
  }
 else {
    ListSequence.fromList(result).addSequence(MapSequence.fromMap(nameToField).where(new IWhereFilter<IMapping<String,SNode>>(){
      public boolean accept(      IMapping<String,SNode> it){
        return it.key().startsWith(prefix);
      }
    }
).select(new ISelector<IMapping<String,SNode>,SNode>(){
      public SNode select(      IMapping<String,SNode> it){
        return it.value();
      }
    }
));
  }
  Map<String,List<SNode>> groups=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode field : Sequence.fromIterable(extendsScopes).translate(new ITranslator2<Scope,SNode>(){
    public Iterable<SNode> translate(    Scope it){
      return Sequence.fromIterable(it.getAvailableElements(prefix)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93c84351fL,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));
        }
      }
);
    }
  }
)) {
    if (!(MapSequence.fromMap(nameToField).containsKey(SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))))) {
      if (MapSequence.fromMap(groups).containsKey(SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")))) {
        ListSequence.fromList(MapSequence.fromMap(groups).get(SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")))).addElement(field);
      }
 else {
        MapSequence.fromMap(groups).put(SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),ListSequence.fromListAndArray(new ArrayList<SNode>(),field));
      }
    }
  }
  for (  IMapping<String,List<SNode>> group : MapSequence.fromMap(groups)) {
    if (ListSequence.fromList(group.value()).count() == 1) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(group.value()));
    }
  }
  return result;
}
