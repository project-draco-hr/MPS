{
  final SRepository repo=p.getRepository();
  GenerationOptions options=GenerationOptions.getDefaults().generateInParallel(false,1).rebuildAll(true).strictMode(true).reporting(false,true,false,2).incremental(new DefaultNonIncrementalStrategy()).create();
  GenerationFacade.generateModels(p,Collections.singletonList(descr),null,new NoOpHandler(),new EmptyProgressMonitor(),new TestMessageHandler(),options,new TransientModelsProvider(repo,null));
  options=GenerationOptions.getDefaults().generateInParallel(false,1).rebuildAll(true).strictMode(true).reporting(false,true,false,2).incremental(new DefaultNonIncrementalStrategy()).create();
  long start=System.nanoTime();
  GenerationFacade.generateModels(p,Collections.singletonList(descr),null,new NoOpHandler(),new EmptyProgressMonitor(),new TestMessageHandler(),options,new TransientModelsProvider(repo,null));
  long singleThread=System.nanoTime() - start;
  options=GenerationOptions.getDefaults().generateInParallel(true,threads).rebuildAll(true).strictMode(true).reporting(false,true,false,2).incremental(new DefaultNonIncrementalStrategy()).create();
  start=System.nanoTime();
  GenerationFacade.generateModels(p,Collections.singletonList(descr),null,new NoOpHandler(),new EmptyProgressMonitor(),new TestMessageHandler(),options,new TransientModelsProvider(repo,null));
  long severalThreads=System.nanoTime() - start;
  String prefix=myTestName.getMethodName();
  ourStats.report(prefix + ".single",singleThread);
  ourStats.report(prefix + ".parallel",severalThreads);
  ourStats.reportPercent(prefix + ".parallelVsSingle",severalThreads / 1000000,singleThread / 1000000);
  if (DEBUG) {
    System.out.println("Single thread: " + singleThread / 1000000 / 1000. + ", 4 threads: " + severalThreads / 1000000 / 1000.);
  }
}
