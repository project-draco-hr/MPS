{
  Graph graph=embeddedGraph.getGraph();
  List<Edge> oldEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(oldEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  List<Node> oldNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  ListSequence.<Node>fromList(oldNodes).addSequence(ListSequence.<Node>fromList(graph.getNodes()));
  Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentationWithNodesProcessing.getRepresentation(embeddedGraph,MapSequence.fromMap(modifier.getNodeFaces()).values(),bends,angles);
  OrthogonalRepresentationWithNodesProcessing.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  modifier.setDartDirections(directions);
  modifier.makeRectangularFaces();
  if (FlowLayoutWithNodeProcessing.SHOW_lOG > 0) {
    System.out.println("after making faces rectangular: ");
    printEmbeddedGraphWithDirections(embeddedGraph,directions);
  }
  EdgeLengthComputer lengthComputer=new EdgeLengthComputer();
  lengthComputer.setUnitLength(2);
  Map<Edge,Integer> lengths=lengthComputer.compute(embeddedGraph,directions);
  CoordinatePlacer placer=new CoordinatePlacer(embeddedGraph,lengths,directions);
  Map<Node,Point> coordinates=placer.getCoordinates();
  GraphPointLayout graphLayout=new GraphPointLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(oldNodes)) {
    graphLayout.setLayoutFor(node,MapSequence.<Node,Point>fromMap(coordinates).get(node));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(oldEdges)) {
    List<Edge> history=historyManager.getHistory(edge);
    List<Point> edgeLayout=ListSequence.<Point>fromList(new ArrayList<Point>());
    Node cur=edge.getSource();
    ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(coordinates).get(cur));
    for (    Edge historyEdge : ListSequence.<Edge>fromList(history)) {
      Node next=historyEdge.getOpposite(cur);
      ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(coordinates).get(next));
      cur=next;
    }
    graphLayout.setLayoutFor(edge,edgeLayout);
  }
  GraphPointLayout copyLayout=new GraphPointLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    copyLayout.setLayoutFor(node,MapSequence.<Node,Point>fromMap(coordinates).get(node));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    List<Point> edgeLayout=ListSequence.<Point>fromList(new ArrayList<Point>());
    ListSequence.<Point>fromList(edgeLayout).addElement(new Point(MapSequence.<Node,Point>fromMap(coordinates).get(edge.getSource())));
    ListSequence.<Point>fromList(edgeLayout).addElement(new Point(MapSequence.<Node,Point>fromMap(coordinates).get(edge.getTarget())));
    copyLayout.setLayoutFor(edge,edgeLayout);
  }
  return graphLayout;
}
