{
  Graph graph=embeddedGraph.getGraph();
  List<Edge> initialEdges=ListSequence.fromList(new ArrayList<Edge>());
  List<Node> initialNodes=ListSequence.fromList(new ArrayList<Node>());
  ListSequence.fromList(initialEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  ListSequence.fromList(initialNodes).addSequence(ListSequence.fromList(graph.getNodes()));
  EmbeddedGraphModifier modifier=new EmbeddedGraphModifier(embeddedGraph);
  Map<Edge,Edge> replacedEdges=MapSequence.fromMap(new HashMap<Edge,Edge>());
  modifier.reduceNodesDegree(MapSequence.fromMap(new HashMap<Node,List<Node>>()),replacedEdges,true);
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentationWithNodesProcessing.getRepresentation(embeddedGraph,MapSequence.fromMap(modifier.getNodeFaces()).values(),bends,angles);
  OrthogonalRepresentationWithNodesProcessing.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
}
