{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("var",new BaseReferenceConstraintsDescriptor("var",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode current=_context.getEnclosingNode();
          if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.query.structure.MqlComma")) {
            SNode left=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.query.structure.MqlComma"),"left",true);
            if (SNodeOperations.isInstanceOf(left,"jetbrains.mps.query.structure.MqlAssignment")) {
              ListSequence.fromList(result).addElement(SNodeOperations.cast(left,"jetbrains.mps.query.structure.MqlAssignment"));
            }
          }
          while ((current != null)) {
            if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current),"jetbrains.mps.query.structure.MqlComma")) {
              SNode left=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current),"jetbrains.mps.query.structure.MqlComma"),"left",true);
              if (left != current && SNodeOperations.isInstanceOf(left,"jetbrains.mps.query.structure.MqlAssignment")) {
                ListSequence.fromList(result).addElement(SNodeOperations.cast(left,"jetbrains.mps.query.structure.MqlAssignment"));
              }
            }
            current=SNodeOperations.getParent(current);
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_97d4g1_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
