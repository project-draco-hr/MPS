{
  GenerationSettingsProvider.getInstance().setGenerationSettings(new DefaultModifiableGenerationSettings());
  final Iterable<IMResource> resources=Sequence.fromIterable(collectResources(myToMake.keySet())).toListSequence();
  ISequence<SModule> mpsModules=Sequence.fromIterable(resources).select(new ISelector<IMResource,SModule>(){
    @Override public SModule select(    IMResource r){
      return r.module();
    }
  }
);
  ModuleOutputPaths outputPaths=new ModuleOutputPaths(mpsModules);
  myForeignRootPaths=new MyForeignRootPaths(outputPaths.getOutputPaths());
  myRedirects=new JpsRedirects();
  Set<ModuleBuildTarget> processed=new HashSet<ModuleBuildTarget>();
  for (  ModuleBuildTarget target : myToMake.values()) {
    if (processed.contains(target))     continue;
    processed.add(target);
    JpsMPSModuleExtension mpsModule=JpsMPSExtensionService.getInstance().getExtension(target.getModule());
    if (mpsModule == null)     continue;
    File outputTmpRoot=getTmpOutputRoot(mpsModule.getModule(),myContext.getProjectDescriptor().dataManager);
    File cachesOutputRoot=getCachesOutputRoot(mpsModule.getModule(),myContext.getProjectDescriptor().dataManager);
    boolean useTransientOutputFolder=mpsModule.getConfiguration().isUseTransientOutputFolder();
    myRedirects.addRedirects(outputPaths,outputTmpRoot.getAbsolutePath(),cachesOutputRoot.getAbsolutePath(),useTransientOutputFolder);
    File generatorOutputRoot=new File(mpsModule.getConfiguration().getGeneratorOutputPath());
    File outputRoot=useTransientOutputFolder ? outputTmpRoot : generatorOutputRoot;
    myOutputRootsPerTarget.put(target,outputRoot);
    if (useTransientOutputFolder || !isGenOutputUnderSourceRoot(target,mpsModule)) {
      BuildRootIndex buildRootIndex=myContext.getProjectDescriptor().getBuildRootIndex();
      buildRootIndex.associateTempRoot(myContext,target,new JavaSourceRootDescriptor(outputRoot,target,true,true,"",Collections.<File>emptySet()));
    }
  }
  GenerationDependenciesCache.getInstance().registerCachePathRedirect(new GenerationDependenciesCache.CachePathRedirect(){
    @Override public IFile redirectTo(    IFile outputPath){
      return myRedirects.getRedirect(outputPath.getPath());
    }
  }
);
  GeneratorPathsComponent.getInstance().registerForeignPathsProvider(new ForeignPathsProvider(){
    @Override public String belongsToForeignPath(    IFile path){
      return myForeignRootPaths != null ? myForeignRootPaths.findForeignPrefix(path.getPath()) : null;
    }
  }
);
  BuildMakeService bms=new BuildMakeService();
  MakeSession ms=new MakeSession(myProject,myMessageHandler,true){
    @Override public IScript toScript(    ScriptBuilder scriptBuilder){
      scriptBuilder.withFacetNames(new IFacet.Name("jetbrains.mps.make.reduced.ReportFiles"),new IFacet.Name("jetbrains.mps.make.reduced.CollectHashes"));
      return scriptBuilder.toScript();
    }
  }
;
  ReducedMakeFacetConfiguration makeFacetConfiguration=new ReducedMakeFacetConfiguration(myRedirects,!JavaBuilderUtil.isCompileJavaIncrementally(myContext),new Stub(),new IJobMonitor.Stub(){
    @Override public void reportFeedback(    IFeedback fdbk){
      myMessageFeedbackStrategy.reportFeedback(fdbk);
    }
  }
);
  IScriptController scriptCtl=makeFacetConfiguration.configureFacets(ms);
  boolean success;
  try {
    Future<IResult> res=bms.make(ms,resources,null,scriptCtl);
    success=res.get().isSucessful();
    success=processFiles(success,makeFacetConfiguration);
  }
 catch (  InterruptedException e) {
    reportError(e);
    success=false;
  }
catch (  ExecutionException e) {
    reportError(e);
    success=false;
  }
  return success;
}
