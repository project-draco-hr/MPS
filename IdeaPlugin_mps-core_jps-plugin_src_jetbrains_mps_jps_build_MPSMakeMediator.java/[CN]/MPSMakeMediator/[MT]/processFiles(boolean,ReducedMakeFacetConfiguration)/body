{
  ProjectBuilderLogger logger=myContext.getLoggingManager().getProjectBuilderLogger();
  if (logger.isEnabled()) {
    try {
      logger.logCompiledPaths(makeFacetConfiguration.getWrittenFiles(),MPSMakeConstants.BUILDER_ID,"Written files:");
    }
 catch (    IOException ignored) {
    }
  }
  for (  String writtenFile : makeFacetConfiguration.getWrittenFiles()) {
    SModel source=makeFacetConfiguration.getSource(writtenFile);
    ModuleBuildTarget target=myToMake.get(source);
    File file=new File(writtenFile);
    if (source != null) {
      DataSource dataSource=source.getSource();
      if (!(dataSource instanceof FileDataSource || dataSource instanceof FilePerRootDataSource)) {
        throw new IllegalArgumentException("MPS Idea plugin does not support the data source root formats other than FileDataSource and FilePerRootDataSource");
      }
      if (isJava(file)) {
        String location=dataSource.getLocation();
        try {
          myOutputConsumer.registerOutputFile(target,file,Arrays.asList(location));
        }
 catch (        IOException e) {
          reportError("IO problem while registering output for source",e);
          success=false;
        }
      }
    }
    if (isJava(file)) {
      try {
        FSOperations.markDirty(myContext,CompilationRound.CURRENT,new File(writtenFile));
      }
 catch (      IOException e) {
        reportError("IO problem while marking java sources dirty",e);
        success=false;
      }
    }
 else {
      if (!myRedirects.isInCacheOutput(writtenFile)) {
        try {
          copyResource(target,file);
        }
 catch (        IOException e) {
          reportError("IO problem during resources copying",e);
          success=false;
        }
      }
    }
    myRefreshComponent.refresh(writtenFile);
  }
  for (  String keptFile : makeFacetConfiguration.getKeptFiles()) {
    File file=new File(keptFile);
    if (isJava(file)) {
      try {
        FSOperations.markDirty(myContext,CompilationRound.CURRENT,file);
      }
 catch (      IOException e) {
        reportError("IO problem during marking kept java sources dirty",e);
        success=false;
      }
    }
  }
  List<String> deletedFiles=makeFacetConfiguration.getDeletedFiles();
  if (logger.isEnabled()) {
    logger.logDeletedFiles(deletedFiles);
  }
  for (  String deletedFile : deletedFiles) {
    try {
      FSOperations.markDeleted(myContext,new File(deletedFile));
    }
 catch (    IOException e) {
      reportError("IO problem while deleting files with FS",e);
      success=false;
    }
  }
  myRefreshComponent.removed(deletedFiles);
  return success;
}
