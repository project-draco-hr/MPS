{
  ProjectBuilderLogger logger=myContext.getLoggingManager().getProjectBuilderLogger();
  if (logger.isEnabled()) {
    try {
      logger.logCompiledPaths(makeFacetConfiguration.getWrittenFiles(),MPSMakeConstants.BUILDER_ID,"MPS generated files:");
    }
 catch (    IOException ignored) {
    }
  }
  for (  String writtenFile : makeFacetConfiguration.getWrittenFiles()) {
    SModel source=makeFacetConfiguration.getSource(writtenFile);
    ModuleBuildTarget target=myToMake.get(source);
    File file=new File(writtenFile);
    try {
      FSOperations.markDirty(myContext,CompilationRound.CURRENT,new File(writtenFile));
      myOutputConsumer.registerOutputFile(target,file,getFilesFromDataSource(source.getSource()));
    }
 catch (    IOException e) {
      reportError(BUNDLE.getString("io.problem.while.marking.java.sources.dirty"),e);
      success=false;
    }
    if (isJava(file)) {
    }
 else {
      if (!myRedirects.isInCacheOutput(writtenFile)) {
        try {
          copyResource(target,file);
        }
 catch (        IOException e) {
          reportError(BUNDLE.getString("io.problem.during.resources.copying"),e);
          success=false;
        }
      }
    }
    myRefreshComponent.refresh(writtenFile);
  }
  List<String> deletedFiles=makeFacetConfiguration.getDeletedFiles();
  if (logger.isEnabled()) {
    logger.logDeletedFiles(deletedFiles);
  }
  for (  String deletedFile : deletedFiles) {
    try {
      FSOperations.markDeleted(myContext,new File(deletedFile));
    }
 catch (    IOException e) {
      reportError(BUNDLE.getString("io.problem.while.deleting.files.with.fs"),e);
      success=false;
    }
  }
  myRefreshComponent.removed(deletedFiles);
  return success;
}
