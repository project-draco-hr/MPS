{
  String[] parts=parameter.split(",");
  if (parts.length < 2) {
    error("Wrong parameter " + parameter);
    return;
  }
  final ModuleReference moduleRef=ModuleReference.fromString(parts[0]);
  IModule module=ModelAccess.instance().runReadAction(new Computable<IModule>(){
    public IModule compute(){
      return MPSModuleRepository.getInstance().getModule(moduleRef);
    }
  }
);
  String xmlfilePath=parts[1];
  IFile xmlfile=FileSystem.getInstance().getFileByPath(xmlfilePath);
  Element moduleElem=new Element("module");
  moduleElem.setAttribute("namespace",moduleRef.getModuleFqName());
  moduleElem.setAttribute("uuid",moduleRef.getModuleId().toString());
  moduleElem.setAttribute("type",(module instanceof Solution ? "solution" : (module instanceof Language ? "language" : "unknown")));
  Element depElem=new Element("dependencies");
  moduleElem.addContent(depElem);
  List<IModule> dependencies=ListSequence.fromListWithValues(new ArrayList<IModule>(),new GlobalModuleDependenciesManager(module).getModules(Deptype.COMPILE));
  for (  ModuleReference ref : ListSequence.fromList(dependencies).select(new ISelector<IModule,ModuleReference>(){
    public ModuleReference select(    IModule it){
      return it.getModuleReference();
    }
  }
)) {
    depElem.addContent(new Element("module").setAttribute("ref",ref.toString()));
  }
  try {
    JDOMUtil.writeDocument(new Document(moduleElem),xmlfile);
  }
 catch (  IOException e) {
    error("Error writing to " + xmlfilePath);
  }
}
