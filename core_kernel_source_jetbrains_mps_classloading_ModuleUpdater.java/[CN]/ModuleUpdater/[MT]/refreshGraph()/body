{
  myRepository.getModelAccess().checkReadAccess();
synchronized (LOCK) {
    final long beginTime=System.nanoTime();
    LOG.debug(String.format("Refreshing classloading graph adding: %d, removing %d, updating %d",myModulesToAdd.size(),myModulesToRemove.size(),myModulesToReload.size()));
    try {
      myChangedFlag=false;
      UsedModulesCollector usedModulesCollector=new UsedModulesCollector();
      myDepGraph.checkGraphsCorrectness();
      int wasEdges=myDepGraph.getEdgesCount();
      int wasVertices=myDepGraph.getVerticesCount();
      myModulesWithAbsentDeps.clear();
      boolean updated=!myModulesToAdd.isEmpty() || !myModulesToRemove.isEmpty();
      updateRemoved(myModulesToRemove);
      updateAdded(myModulesToAdd,usedModulesCollector);
      updated|=updateReloaded(myModulesToReload,usedModulesCollector);
      myModulesToRemove.clear();
      myModulesToAdd.clear();
      myModulesToReload.clear();
      LOG.debug("Difference in the vertex count after validation " + (myDepGraph.getVerticesCount() - wasVertices));
      LOG.debug("Difference in the edge count after validation " + (myDepGraph.getEdgesCount() - wasEdges));
      return updated;
    }
  finally {
      LOG.info(String.format("Refreshing graph took %.3f s",(System.nanoTime() - beginTime) / 1e9));
    }
  }
}
