{
  this.addNodeById("1230052903027");
  this.addNodeById("1230052903036");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052903029"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  SLinkOperations.setTarget(params.getDeclaration(),"returnType",SNodeOperations.copyNode(SNodeOperations.cast(this.getNodeById("1188338037704648623"),"jetbrains.mps.baseLanguage.structure.StringType")),true);
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052903029"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903028"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903037"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
