{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final ProgressMonitor monitor=indicator != null ? new ProgressMonitorAdapter(indicator) : new EmptyProgressMonitor();
  LOG.info("Making modules on startup");
  monitor.start("Making modules",10);
  try {
    MPSCompilationResult mpsCompilationResult=new ModelComputeRunnable<MPSCompilationResult>(new Computable<MPSCompilationResult>(){
      @Override public MPSCompilationResult compute(){
        monitor.advance(1);
        final ModuleMaker maker=new ModuleMaker(new DefaultMessageHandler(myProject),MessageKind.ERROR);
        return myReloadManager.computeNoReload(new Computable<MPSCompilationResult>(){
          @Override public MPSCompilationResult compute(){
            return maker.make(IterableUtil.asCollection(getModules()),monitor.subTask(9),JavaCompilerOptionsComponent.getInstance().getJavaCompilerOptions(myMPSProject));
          }
        }
);
      }
    }
).runRead(myMPSProject.getModelAccess());
    if (mpsCompilationResult.isReloadingNeeded()) {
      reloadClasses(mpsCompilationResult,indicator,early);
    }
  }
  finally {
    monitor.done();
  }
  LOG.info("Compilation on startup is finished");
}
