{
  Map<SNode,SNode> participantForTask=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  List<SNode> list=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode participant : ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.build.structure.IWorkflowParticipant",false,new String[]{})).reversedList()) {
    SNode targetTask=IWorkflowParticipant_Behavior.call_getTargetTask_6854204111265837872(participant);
    if (MapSequence.fromMap(participantForTask).get(targetTask) == null) {
      MapSequence.fromMap(participantForTask).put(targetTask,SConceptOperations.createNewNode("jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants",null));
      SLinkOperations.setTarget(MapSequence.fromMap(participantForTask).get(targetTask),"for",targetTask,false);
      ListSequence.fromList(list).addElement(MapSequence.fromMap(participantForTask).get(targetTask));
    }
    SNode ref=SConceptOperations.createNewNode("jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference",null);
    SLinkOperations.setTarget(ref,"participant",participant,false);
    ListSequence.fromList(SLinkOperations.getTargets(MapSequence.fromMap(participantForTask).get(targetTask),"participant",true)).addElement(ref);
  }
  return list;
}
