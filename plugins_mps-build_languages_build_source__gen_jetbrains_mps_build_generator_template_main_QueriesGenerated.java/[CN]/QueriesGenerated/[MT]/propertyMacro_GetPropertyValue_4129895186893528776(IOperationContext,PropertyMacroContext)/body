{
  if ((SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(),"jetbrains.mps.build.structure.BuildProjectDependency"),"artifacts",true) != null)) {
    return BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(),"jetbrains.mps.build.structure.BuildProjectDependency"),"artifacts",true));
  }
  if (((String)_context.getVariable("var:basePath")) == null) {
    return ".";
  }
  SNode script=SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(),"jetbrains.mps.build.structure.BuildProjectDependency"),"script",false);
  String filePath=BuildProject_Behavior.call_getBasePath_4959435991187146924(script,Context.defaultContext(_context));
  if (filePath == null) {
    _context.showErrorMessage(script,"no base path for required script " + SPropertyOperations.getString(script,"name"));
    return ".";
  }
  try {
    String relative=new RelativePathHelper(((String)_context.getVariable("var:basePath"))).makeRelative(filePath);
    if (StringUtils.isEmpty(relative)) {
      return "${build.dir}/artifacts/" + SPropertyOperations.getString(script,"name");
    }
    if (!(relative.endsWith("/"))) {
      relative+="/";
    }
    return relative + "build/artifacts/" + SPropertyOperations.getString(script,"name");
  }
 catch (  RelativePathHelper.PathException ex) {
    _context.showErrorMessage(_context.getNode(),"cannot calculate relative path: " + ex.getMessage());
    return ".";
  }
}
