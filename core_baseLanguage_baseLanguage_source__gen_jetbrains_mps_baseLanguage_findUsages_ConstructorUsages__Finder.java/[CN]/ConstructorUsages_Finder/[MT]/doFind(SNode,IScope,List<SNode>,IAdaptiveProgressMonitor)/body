{
{
    ICursor<SNode> _zCursor17=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",node,scope,monitor));
    try {
      while (_zCursor17.moveToNext()) {
        SNode nodeUsage=_zCursor17.getCurrent();
        ListOperations.addElement(_results,nodeUsage);
      }
    }
  finally {
      _zCursor17.release();
    }
  }
{
    ICursor<SNode> _zCursor18=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder",SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),scope,monitor));
    try {
      while (_zCursor18.moveToNext()) {
        SNode subclassResult=_zCursor18.getCurrent();
{
          ICursor<SNode> _zCursor19=CursorFactory.createCursor(SLinkOperations.getTargets(subclassResult,"constructor",true));
          try {
            while (_zCursor19.moveToNext()) {
              SNode constructorNode=_zCursor19.getCurrent();
{
                ICursor<SNode> _zCursor20=CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(constructorNode,null,false),new zPredicate(null,null)));
                try {
                  while (_zCursor20.moveToNext()) {
                    SNode invocation=_zCursor20.getCurrent();
{
                      boolean thisConstructor=true;
                      SNode invocationNode=(SNode)invocation;
                      if (SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode,"actualArgument",true)) == SequenceOperations.getSize(SLinkOperations.getTargets(node,"parameter",true))) {
                        for (int i=0; i < SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode,"actualArgument",true)); i=i + 1) {
                          SNode actualArgument=ListOperations.getElement(SLinkOperations.getTargets(invocationNode,"actualArgument",true),i);
                          SNode formalArgument=ListOperations.getElement(SLinkOperations.getTargets(node,"parameter",true),i);
                          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
                            thisConstructor=false;
                          }
                        }
                        if (thisConstructor) {
                          ListOperations.addElement(_results,invocationNode);
                        }
                      }
                    }
                  }
                }
  finally {
                  _zCursor20.release();
                }
              }
            }
          }
  finally {
            _zCursor19.release();
          }
        }
      }
    }
  finally {
      _zCursor18.release();
    }
  }
  SNode enumNode=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.EnumClass",false,false);
  if (enumNode != null) {
{
      ICursor<SNode> _zCursor21=CursorFactory.createCursor(SLinkOperations.getTargets(enumNode,"enumConstant",true));
      try {
        while (_zCursor21.moveToNext()) {
          SNode enumConstant=_zCursor21.getCurrent();
{
            boolean thisConstructor=true;
            if (SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant,"actualArgument",true)) == SequenceOperations.getSize(SLinkOperations.getTargets(node,"parameter",true))) {
              for (int i=0; i < SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant,"actualArgument",true)); i=i + 1) {
                SNode actualArgument=ListOperations.getElement(SLinkOperations.getTargets(enumConstant,"actualArgument",true),i);
                SNode formalArgument=ListOperations.getElement(SLinkOperations.getTargets(node,"parameter",true),i);
                if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
                  thisConstructor=false;
                }
              }
              if (thisConstructor) {
                ListOperations.addElement(_results,enumConstant);
              }
            }
          }
        }
      }
  finally {
        _zCursor21.release();
      }
    }
  }
}
