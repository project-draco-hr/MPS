{
  for (  SNode nodeUsage : ListSequence.<SNode>fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",node,scope,indicator))) {
    ListSequence.<SNode>fromList(_results).addElement(nodeUsage);
  }
  for (  SNode subclassResult : ListSequence.<SNode>fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder",SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),scope,indicator))) {
    for (    SNode constructorNode : ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(subclassResult,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"constructor",true))) {
      for (      SNode invocation : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(constructorNode,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
        }
      }
)) {
        boolean thisConstructor=true;
        SNode invocationNode=SNodeOperations.cast(invocation,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
        if (ListSequence.<SNode>fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).count() == ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"parameter",true)).count()) {
          for (int i=0; i < ListSequence.<SNode>fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).count(); i++) {
            SNode actualArgument=ListSequence.<SNode>fromList(SLinkOperations.getTargets(invocationNode,"actualArgument",true)).getElement(i);
            SNode formalArgument=ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"parameter",true)).getElement(i);
            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
              thisConstructor=false;
            }
          }
          if (thisConstructor) {
            ListSequence.<SNode>fromList(_results).addElement(invocationNode);
          }
        }
      }
    }
  }
  SNode enumNode=SNodeOperations.cast(SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.EnumClass",false,false),"jetbrains.mps.baseLanguage.structure.EnumClass");
  if (enumNode != null) {
    for (    SNode enumConstant : ListSequence.<SNode>fromList(SLinkOperations.getTargets(enumNode,"enumConstant",true))) {
      boolean thisConstructor=true;
      if (ListSequence.<SNode>fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).count() == ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"parameter",true)).count()) {
        for (int i=0; i < ListSequence.<SNode>fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).count(); i++) {
          SNode actualArgument=ListSequence.<SNode>fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).getElement(i);
          SNode formalArgument=ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"parameter",true)).getElement(i);
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
            thisConstructor=false;
          }
        }
        if (thisConstructor) {
          ListSequence.<SNode>fromList(_results).addElement(enumConstant);
        }
      }
    }
  }
}
