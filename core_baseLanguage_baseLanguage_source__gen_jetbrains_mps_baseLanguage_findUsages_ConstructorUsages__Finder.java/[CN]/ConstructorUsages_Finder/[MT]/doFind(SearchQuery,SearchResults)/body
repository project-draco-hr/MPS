{
  SNode queryNode=(SNode)searchQuery.getNode();
  results.getSearchedNodePointers().add(new SNodePointer(queryNode));
  List<SearchResult> straightUsagesRes=new ArrayList<SearchResult>();
  try {
    GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
    SNode _node=queryNode;
    IScope _scope;
    _scope=searchQuery.getScope();
    boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.core.structure.BaseConcept");
    if (!(rightConcept)) {
      ConstructorUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
    }
 else {
      boolean isApplicable=_finder.isApplicable(_node);
      if (!(isApplicable)) {
        ConstructorUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
      }
 else {
        SearchResults results_16=_finder.find(new SearchQuery(_node,_scope));
        for (        SearchResult result : results_16.getSearchResults()) {
          straightUsagesRes.add(result);
        }
      }
    }
  }
 catch (  Throwable t) {
    ConstructorUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:"+ t.getMessage());
  }
{
    ICursor<SearchResult> _zCursor11=CursorFactory.createCursor(straightUsagesRes);
    try {
      while (_zCursor11.moveToNext()) {
        SearchResult usage=_zCursor11.getCurrent();
        results.getSearchResults().add(new SearchResult(new SNodePointer(usage.getNode()),"Constructor Usages"));
      }
    }
  finally {
      _zCursor11.release();
    }
  }
  List<SearchResult> strightSubclassesRes=new ArrayList<SearchResult>();
  try {
    GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder").newInstance();
    SNode _node=SNodeOperations.getAncestor(queryNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    IScope _scope;
    _scope=searchQuery.getScope();
    boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ClassConcept");
    if (!(rightConcept)) {
      ConstructorUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
    }
 else {
      boolean isApplicable=_finder.isApplicable(_node);
      if (!(isApplicable)) {
        ConstructorUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
      }
 else {
        SearchResults results_17=_finder.find(new SearchQuery(_node,_scope));
        for (        SearchResult result : results_17.getSearchResults()) {
          strightSubclassesRes.add(result);
        }
      }
    }
  }
 catch (  Throwable t) {
    ConstructorUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder" + "\"  Message:"+ t.getMessage());
  }
{
    ICursor<SearchResult> _zCursor12=CursorFactory.createCursor(strightSubclassesRes);
    try {
      while (_zCursor12.moveToNext()) {
        SearchResult subclassResult=_zCursor12.getCurrent();
{
          SNode classNode=(SNode)subclassResult.getNode();
{
            ICursor<SNode> _zCursor13=CursorFactory.createCursor(SLinkOperations.getTargets(classNode,"constructor",true));
            try {
              while (_zCursor13.moveToNext()) {
                SNode constructorNode=_zCursor13.getCurrent();
{
                  ICursor<SNode> _zCursor14=CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(constructorNode,null,false),new zPredicate(null,null)));
                  try {
                    while (_zCursor14.moveToNext()) {
                      SNode invocation=_zCursor14.getCurrent();
{
                        boolean thisConstructor=true;
                        SNode invocationNode=(SNode)invocation;
                        if (SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode,"actualArgument",true)) == SequenceOperations.getSize(SLinkOperations.getTargets(queryNode,"parameter",true))) {
                          for (int i=0; i < SequenceOperations.getSize(SLinkOperations.getTargets(invocationNode,"actualArgument",true)); i=i + 1) {
                            SNode actualArgument=ListOperations.getElement(SLinkOperations.getTargets(invocationNode,"actualArgument",true),i);
                            SNode formalArgument=ListOperations.getElement(SLinkOperations.getTargets(queryNode,"parameter",true),i);
                            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
                              thisConstructor=false;
                            }
                          }
                          if (thisConstructor) {
                            results.getSearchResults().add(new SearchResult(new SNodePointer(invocationNode),"Constructor Usages"));
                          }
                        }
                      }
                    }
                  }
  finally {
                    _zCursor14.release();
                  }
                }
              }
            }
  finally {
              _zCursor13.release();
            }
          }
        }
      }
    }
  finally {
      _zCursor12.release();
    }
  }
  SNode enumNode=SNodeOperations.getAncestor(queryNode,"jetbrains.mps.baseLanguage.structure.EnumClass",false,false);
  if (enumNode != null) {
{
      ICursor<SNode> _zCursor15=CursorFactory.createCursor(SLinkOperations.getTargets(enumNode,"enumConstant",true));
      try {
        while (_zCursor15.moveToNext()) {
          SNode enumConstant=_zCursor15.getCurrent();
{
            boolean thisConstructor=true;
            if (SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant,"actualArgument",true)) == SequenceOperations.getSize(SLinkOperations.getTargets(queryNode,"parameter",true))) {
              for (int i=0; i < SequenceOperations.getSize(SLinkOperations.getTargets(enumConstant,"actualArgument",true)); i=i + 1) {
                SNode actualArgument=ListOperations.getElement(SLinkOperations.getTargets(enumConstant,"actualArgument",true),i);
                SNode formalArgument=ListOperations.getElement(SLinkOperations.getTargets(queryNode,"parameter",true),i);
                if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(actualArgument),SLinkOperations.getTarget(formalArgument,"type",true)))) {
                  thisConstructor=false;
                }
              }
              if (thisConstructor) {
                results.getSearchResults().add(new SearchResult(new SNodePointer(enumConstant),"Constructor Usages"));
              }
            }
          }
        }
      }
  finally {
        _zCursor15.release();
      }
    }
  }
}
