{
  try {
    SNode child=mapNode();
    if (child != null) {
      Language childLang=jetbrains.mps.util.SNodeOperations.getLanguage(child);
      if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(childLang)) {
        if (!childLang.getGenerators().isEmpty()) {
          myLogger.error(child,"language of output node is '" + childLang.getModuleFqName() + "' - this language did not show up when computing generation steps!",GeneratorUtil.describe(myContext.getInput(),"input"),GeneratorUtil.describe(getMapSrcMacro(),"template"),new ProblemDescription(null,"workaround: add the language '" + childLang.getModuleFqName() + "' to list of 'Languages Engaged On Generation' in model '"+ myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName()+ "'"));
        }
      }
      if (jetbrains.mps.util.SNodeOperations.isRegistered(child)) {
        child=CopyUtil.copy(child);
      }
      validateReferences(child);
      SNode parent=myChildToReplace.getParent();
      if (parent == null) {
        if (myChildToReplace.isRoot()) {
          myChildToReplace.getModel().addRoot(child);
          myChildToReplace.getModel().removeRoot(myChildToReplace);
          myGenerator.rootReplaced(myChildToReplace,child);
        }
      }
 else {
        String childRole=parent.getRoleOf(myChildToReplace);
        RoleValidationStatus status=myGenerator.validateChild(parent,childRole,child);
        if (status != null) {
          status.reportProblem(false,"",GeneratorUtil.describe(myContext.getInput(),"input"),GeneratorUtil.describe(getMapSrcMacro(),"template"));
        }
        org.jetbrains.mps.openapi.model.SNodeUtil.replaceWithAnother(myChildToReplace,child);
      }
      myGenerator.getGeneratorSessionContext().getGenerationTracer().replaceOutputNode(myChildToReplace,child);
      postProcess(child);
    }
  }
 catch (  Throwable t) {
    myGenerator.showErrorMessage(myContext.getInput(),getMapSrcMacro(),"mapping failed: '" + t.getMessage() + "'");
    myLogger.handleException(t);
  }
}
