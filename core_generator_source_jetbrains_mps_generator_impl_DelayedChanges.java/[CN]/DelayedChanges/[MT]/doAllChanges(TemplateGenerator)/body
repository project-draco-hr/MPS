{
  SNode[] newOutputNodes=new SNode[myPostProcessors.size()];
  int i=0;
  for (  NodePostProcessor p : myPostProcessors) {
    SNode child=p.substitute();
    if (child != p.getOutputAnchor()) {
      ChildAdopter ca=new ChildAdopter(generator);
      ca.checkIsExpectedLanguage(Collections.singletonList(child),p.getTemplateNode(),p.getTemplateContext());
      child=ca.adopt(child,p.getTemplateContext());
      generator.replacePlaceholderNode(p,child);
    }
    newOutputNodes[i++]=child;
  }
  i=0;
  for (  NodePostProcessor p : myPostProcessors) {
    p.postProcess(newOutputNodes[i++]);
  }
  myPostProcessors.clear();
}
