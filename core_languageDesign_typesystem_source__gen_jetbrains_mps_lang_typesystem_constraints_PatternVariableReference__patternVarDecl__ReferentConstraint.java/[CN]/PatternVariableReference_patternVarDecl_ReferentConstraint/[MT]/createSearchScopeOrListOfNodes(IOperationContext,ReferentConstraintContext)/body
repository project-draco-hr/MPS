{
  List<SNode> result=ListOperations.<SNode>createList();
  SNode rule=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.AbstractRule",false,false);
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.PatternCondition")) {
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SLinkOperations.getTarget(rule,"applicableNode",true),"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false)));
  }
  if (SNodeOperations.isInstanceOf(rule,"jetbrains.mps.lang.typesystem.structure.InequationReplacementRule")) {
    SNode supertypeNode=SLinkOperations.getTarget(rule,"supertypeNode",true);
    if (SNodeOperations.isInstanceOf(supertypeNode,"jetbrains.mps.lang.typesystem.structure.PatternCondition")) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(supertypeNode,"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false)));
    }
  }
  if (SNodeOperations.isInstanceOf(rule,"jetbrains.mps.lang.typesystem.structure.ComparisonRule")) {
    SNode anotherNode=SLinkOperations.getTarget(rule,"anotherNode",true);
    if (SNodeOperations.isInstanceOf(anotherNode,"jetbrains.mps.lang.typesystem.structure.PatternCondition")) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(anotherNode,"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false)));
    }
  }
  SNode coerceStatement=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.CoerceStatement",false,false);
  while (coerceStatement != null) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(coerceStatement,"pattern",true),"jetbrains.mps.lang.typesystem.structure.PatternCondition")) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SLinkOperations.getTarget(coerceStatement,"pattern",true),"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false)));
    }
    coerceStatement=SNodeOperations.getAncestor(coerceStatement,"jetbrains.mps.lang.typesystem.structure.CoerceStatement",false,false);
  }
  SNode matchStatementItem=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.MatchStatementItem",false,false);
  while (matchStatementItem != null) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(matchStatementItem,"condition",true),"jetbrains.mps.lang.typesystem.structure.PatternCondition")) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SLinkOperations.getTarget(matchStatementItem,"condition",true),"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false)));
    }
    matchStatementItem=SNodeOperations.getAncestor(matchStatementItem,"jetbrains.mps.lang.typesystem.structure.MatchStatementItem",false,false);
  }
  return new SimpleSearchScope(result);
}
