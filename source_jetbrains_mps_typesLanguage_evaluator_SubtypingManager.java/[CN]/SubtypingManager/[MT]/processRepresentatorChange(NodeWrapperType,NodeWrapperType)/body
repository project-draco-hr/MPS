{
  Set<NodeWrapperType> ancestors=myTypesToAncestorsMap.get(oldRepresentator);
  Set<NodeWrapperType> newAncestors=myTypesToAncestorsMap.get(newRepresentator);
  if (ancestors != null) {
    if (newAncestors == null) {
      newAncestors=new HashSet<NodeWrapperType>();
      myTypesToAncestorsMap.put(newRepresentator,newAncestors);
    }
    for (    NodeWrapperType ancestor : ancestors) {
      Set<NodeWrapperType> ancestorDescendants=myTypesToDescendantsMap.get(ancestor);
      if (ancestorDescendants != null && ancestorDescendants.contains(oldRepresentator)) {
        ancestorDescendants.remove(oldRepresentator);
        ancestorDescendants.add(newRepresentator);
      }
      newAncestors.add(ancestor);
    }
    myTypesToAncestorsMap.remove(oldRepresentator);
  }
  Set<NodeWrapperType> descendants=myTypesToDescendantsMap.get(oldRepresentator);
  Set<NodeWrapperType> newDescendants=myTypesToDescendantsMap.get(newRepresentator);
  if (descendants != null) {
    if (newDescendants == null) {
      newDescendants=new HashSet<NodeWrapperType>();
      myTypesToDescendantsMap.put(newRepresentator,newDescendants);
    }
    for (    NodeWrapperType descendant : descendants) {
      Set<NodeWrapperType> descendantAncestors=myTypesToAncestorsMap.get(descendant);
      if (descendantAncestors != null && descendantAncestors.contains(oldRepresentator)) {
        descendantAncestors.remove(oldRepresentator);
        descendantAncestors.add(newRepresentator);
      }
      newDescendants.add(descendant);
    }
    myTypesToDescendantsMap.remove(oldRepresentator);
  }
}
