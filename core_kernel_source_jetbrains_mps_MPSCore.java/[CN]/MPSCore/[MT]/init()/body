{
  super.init();
  init(new PersistenceRegistry());
  init(new FacetsRegistry());
  init(new ConceptRepository());
  ClassLoaderManager classLoaderManager=init(new ClassLoaderManager());
  myModelRepository=init(new SModelRepository(classLoaderManager));
  myModuleRepository=init(new MPSModuleRepository(classLoaderManager));
  myGlobalSModelEventsManager=init(new GlobalSModelEventsManager(myModelRepository));
  init(new SModelFileTracker(myModelRepository,myGlobalSModelEventsManager));
  init(new ModuleRepositoryFacade(myModuleRepository));
  init(new ModuleFileTracker(myModuleRepository));
  init(new CleanupManager(classLoaderManager));
  init(new PathMacros());
  init(new LibraryInitializer(myModuleRepository,classLoaderManager));
  init(new GlobalScope(myModuleRepository,myModelRepository));
  init(new ImmatureReferences(myModelRepository));
  init(new QueryMethodGenerated(classLoaderManager));
  ConceptRegistry conceptRegistry=init(new ConceptRegistry());
  init(new LanguageRegistry(myModuleRepository,classLoaderManager,conceptRegistry));
  init(new ExtensionRegistry(classLoaderManager,myModuleRepository));
  init(new LanguageHierarchyCache(myModuleRepository));
  init(new StructureAspectInterpreted());
  init(new SModelUtil_new(classLoaderManager,myGlobalSModelEventsManager));
  init(new CachesManager(classLoaderManager,myModelRepository));
  init(new LanguageDescriptorModelProvider(myModuleRepository,myModelRepository));
  init(new ProjectStructureModule(myModuleRepository,myModelRepository));
  init(new CopyPasteManager(classLoaderManager));
  init(new PasteWrappersManager(classLoaderManager));
  init(new BLDependenciesCache(myModelRepository));
  init(new DataFlowManager(classLoaderManager,myModuleRepository));
  init(new ResolverComponent());
  init(new CheckersComponent());
  init(new ValidationSettings());
  init(new FastFindUsagesRegistry());
  init(new FastGoToRegistry());
}
