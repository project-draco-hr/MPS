{
  final Wrappers._T<String> report=new Wrappers._T<String>("");
  final SRepository repo=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
  final Task.Modal task=new Task.Modal(((Project)MapSequence.fromMap(_params).get("ideaProject")),"Optimizing module imports",true){
    public void run(    @NotNull ProgressIndicator indicator){
      ProgressMonitorAdapter monitor=new ProgressMonitorAdapter(indicator);
      try {
        int modulesNumber=((List<SModule>)MapSequence.fromMap(_params).get("modules")).size();
        monitor.start("Optimizing the imports of the " + modulesNumber + " modules",modulesNumber + 1);
        WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable(){
          public void run(){
          }
        }
);
        final OptimizeImportsHelper helper=new OptimizeImportsHelper(repo);
        for (        final SModule module : ((List<SModule>)MapSequence.fromMap(_params).get("modules"))) {
          monitor.step("Optimizing imports of the " + module);
          ApplicationManager.getApplication().invokeAndWait(new Runnable(){
            public void run(){
              repo.getModelAccess().executeCommand(new Runnable(){
                public void run(){
                  if (module instanceof Solution) {
                    report.value+=helper.optimizeSolutionImports(((Solution)module));
                  }
 else                   if (module instanceof Language) {
                    report.value+=helper.optimizeLanguageImports(((Language)module));
                  }
                }
              }
);
            }
          }
,ModalityState.any());
          monitor.advance(1);
          if (monitor.isCanceled()) {
            return;
          }
        }
        monitor.step("Saving...");
        WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable(){
          public void run(){
            repo.getModelAccess().executeCommand(new Runnable(){
              public void run(){
                repo.saveAll();
              }
            }
);
          }
        }
);
        monitor.advance(1);
      }
  finally {
        monitor.done();
      }
    }
  }
;
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      ProgressManager.getInstance().run(task);
      Messages.showMessageDialog(((Project)MapSequence.fromMap(_params).get("ideaProject")),(report.value.equals("") ? "Nothing to optimize" : report.value),"Optimize Imports",Messages.getInformationIcon());
    }
  }
,ModalityState.defaultModalityState());
}
