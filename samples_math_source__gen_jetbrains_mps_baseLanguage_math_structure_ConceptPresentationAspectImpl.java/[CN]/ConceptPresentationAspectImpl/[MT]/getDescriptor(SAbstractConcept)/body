{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbsExpression;
case 1:
  return props_AbstractIndex;
case 2:
return props_ArithmSymbol;
case 3:
return props_BigComplexType;
case 4:
return props_BigDecimalType;
case 5:
return props_BigIntegerType;
case 6:
return props_BigMaxExpression;
case 7:
return props_BigMinExpression;
case 8:
return props_BigProdExpression;
case 9:
return props_BigSumExpression;
case 10:
return props_ComplexLiteral;
case 11:
return props_ComplexType;
case 12:
return props_ConjugateOperation;
case 13:
return props_CosineExpression;
case 14:
return props_DecimalBinaryOperation;
case 15:
return props_DecimalDivExpression;
case 16:
return props_DecimalMinusExpression;
case 17:
return props_DecimalMulExpression;
case 18:
return props_DecimalPlusExpression;
case 19:
return props_Determinant;
case 20:
return props_DivExpressionFraction;
case 21:
return props_ExponentExpression;
case 22:
return props_ExponentialOperation;
case 23:
return props_ExtrSymbol;
case 24:
return props_InIntervalExpression;
case 25:
return props_IntervalContainsExpression;
case 26:
return props_IntervalLiteral;
case 27:
return props_IntervalType;
case 28:
return props_LinearSolveOperation;
case 29:
return props_LiteralI;
case 30:
return props_LogExpression;
case 31:
return props_MathContext;
case 32:
return props_MathFuncExpression;
case 33:
return props_MathPrimitiveType;
case 34:
return props_MathSymbol;
case 35:
return props_MathSymbolFromToIndex;
case 36:
return props_MathSymbolIndex;
case 37:
return props_MathSymbolIndexReference;
case 38:
return props_MathTypeCast;
case 39:
return props_MatrixConstructor;
case 40:
return props_MatrixElementAccessExpression;
case 41:
return props_MatrixExponentialOperation;
case 42:
return props_MatrixIndexWildcard;
case 43:
return props_MatrixInitializer;
case 44:
return props_MatrixInitializerIndex;
case 45:
return props_MatrixInitializerIndexReference;
case 46:
return props_MatrixInverseOperation;
case 47:
return props_MatrixNorm;
case 48:
return props_MatrixOrVectorInitializer;
case 49:
return props_MatrixOrVectorType;
case 50:
return props_MatrixType;
case 51:
return props_MatrixUnit;
case 52:
return props_MatrixZero;
case 53:
return props_PowExpression;
case 54:
return props_SineExpression;
case 55:
return props_TangentExpression;
case 56:
return props_TransposeOperation;
case 57:
return props_VectorInitializer;
case 58:
return props_VectorType;
}
throw new IllegalStateException("Unknown concept " + c);
}
