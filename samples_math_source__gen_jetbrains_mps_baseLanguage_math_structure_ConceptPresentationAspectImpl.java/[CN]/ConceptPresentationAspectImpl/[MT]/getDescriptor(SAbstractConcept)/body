{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case LanguageConceptSwitch.AbsExpression:
    return props_AbsExpression;
case LanguageConceptSwitch.AbstractIndex:
  return props_AbstractIndex;
case LanguageConceptSwitch.ArithmSymbol:
return props_ArithmSymbol;
case LanguageConceptSwitch.BigComplexType:
return props_BigComplexType;
case LanguageConceptSwitch.BigDecimalType:
return props_BigDecimalType;
case LanguageConceptSwitch.BigIntegerType:
return props_BigIntegerType;
case LanguageConceptSwitch.BigMaxExpression:
return props_BigMaxExpression;
case LanguageConceptSwitch.BigMinExpression:
return props_BigMinExpression;
case LanguageConceptSwitch.BigProdExpression:
return props_BigProdExpression;
case LanguageConceptSwitch.BigSumExpression:
return props_BigSumExpression;
case LanguageConceptSwitch.ComplexLiteral:
return props_ComplexLiteral;
case LanguageConceptSwitch.ComplexType:
return props_ComplexType;
case LanguageConceptSwitch.ConjugateOperation:
return props_ConjugateOperation;
case LanguageConceptSwitch.CosineExpression:
return props_CosineExpression;
case LanguageConceptSwitch.DecimalBinaryOperation:
return props_DecimalBinaryOperation;
case LanguageConceptSwitch.DecimalDivExpression:
return props_DecimalDivExpression;
case LanguageConceptSwitch.DecimalMinusExpression:
return props_DecimalMinusExpression;
case LanguageConceptSwitch.DecimalMulExpression:
return props_DecimalMulExpression;
case LanguageConceptSwitch.DecimalPlusExpression:
return props_DecimalPlusExpression;
case LanguageConceptSwitch.Determinant:
return props_Determinant;
case LanguageConceptSwitch.DivExpressionFraction:
return props_DivExpressionFraction;
case LanguageConceptSwitch.ExponentExpression:
return props_ExponentExpression;
case LanguageConceptSwitch.ExponentialOperation:
return props_ExponentialOperation;
case LanguageConceptSwitch.ExtrSymbol:
return props_ExtrSymbol;
case LanguageConceptSwitch.InIntervalExpression:
return props_InIntervalExpression;
case LanguageConceptSwitch.IntervalContainsExpression:
return props_IntervalContainsExpression;
case LanguageConceptSwitch.IntervalLiteral:
return props_IntervalLiteral;
case LanguageConceptSwitch.IntervalType:
return props_IntervalType;
case LanguageConceptSwitch.LinearSolveOperation:
return props_LinearSolveOperation;
case LanguageConceptSwitch.LiteralI:
return props_LiteralI;
case LanguageConceptSwitch.LogExpression:
return props_LogExpression;
case LanguageConceptSwitch.MathContext:
return props_MathContext;
case LanguageConceptSwitch.MathFuncExpression:
return props_MathFuncExpression;
case LanguageConceptSwitch.MathPrimitiveType:
return props_MathPrimitiveType;
case LanguageConceptSwitch.MathSymbol:
return props_MathSymbol;
case LanguageConceptSwitch.MathSymbolFromToIndex:
return props_MathSymbolFromToIndex;
case LanguageConceptSwitch.MathSymbolIndex:
return props_MathSymbolIndex;
case LanguageConceptSwitch.MathSymbolIndexReference:
return props_MathSymbolIndexReference;
case LanguageConceptSwitch.MathTypeCast:
return props_MathTypeCast;
case LanguageConceptSwitch.MatrixConstructor:
return props_MatrixConstructor;
case LanguageConceptSwitch.MatrixElementAccessExpression:
return props_MatrixElementAccessExpression;
case LanguageConceptSwitch.MatrixExponentialOperation:
return props_MatrixExponentialOperation;
case LanguageConceptSwitch.MatrixIndexWildcard:
return props_MatrixIndexWildcard;
case LanguageConceptSwitch.MatrixInitializer:
return props_MatrixInitializer;
case LanguageConceptSwitch.MatrixInitializerIndex:
return props_MatrixInitializerIndex;
case LanguageConceptSwitch.MatrixInitializerIndexReference:
return props_MatrixInitializerIndexReference;
case LanguageConceptSwitch.MatrixInverseOperation:
return props_MatrixInverseOperation;
case LanguageConceptSwitch.MatrixNorm:
return props_MatrixNorm;
case LanguageConceptSwitch.MatrixOrVectorInitializer:
return props_MatrixOrVectorInitializer;
case LanguageConceptSwitch.MatrixOrVectorType:
return props_MatrixOrVectorType;
case LanguageConceptSwitch.MatrixType:
return props_MatrixType;
case LanguageConceptSwitch.MatrixUnit:
return props_MatrixUnit;
case LanguageConceptSwitch.MatrixZero:
return props_MatrixZero;
case LanguageConceptSwitch.PowExpression:
return props_PowExpression;
case LanguageConceptSwitch.SineExpression:
return props_SineExpression;
case LanguageConceptSwitch.TangentExpression:
return props_TangentExpression;
case LanguageConceptSwitch.TransposeOperation:
return props_TransposeOperation;
case LanguageConceptSwitch.VectorInitializer:
return props_VectorInitializer;
case LanguageConceptSwitch.VectorType:
return props_VectorType;
}
return null;
}
