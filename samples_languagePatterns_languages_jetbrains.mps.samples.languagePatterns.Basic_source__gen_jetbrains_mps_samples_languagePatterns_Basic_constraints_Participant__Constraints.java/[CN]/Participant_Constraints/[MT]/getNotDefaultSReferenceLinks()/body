{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78e59fbL,0x34c8853ae78e59fcL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78e59fbL,0x34c8853ae78e59fcL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_wflc39_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            final SNode concert=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c45L,"jetbrains.mps.samples.languagePatterns.Basic.structure.Concert"),false,false);
            final SNode performance=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78de950L,"jetbrains.mps.samples.languagePatterns.Basic.structure.CombinedPerformance"),true,false);
            final SNode me=(_context.isExists() ? SNodeOperations.as(_context.getContextNode(),MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78e59fbL,"jetbrains.mps.samples.languagePatterns.Basic.structure.Participant")) : null);
            final List<SNode> allSingers=SLinkOperations.getChildren(concert,MetaAdapterFactory.getContainmentLink(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c45L,0x34c8853ae7895c8bL,"performers"));
            final Iterable<SNode> alreadyParticipatingSingersButMe=ListSequence.fromList(SLinkOperations.getChildren(performance,MetaAdapterFactory.getContainmentLink(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78de950L,0x34c8853ae78de9acL,"participants"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return neq_wflc39_a0a0a0a0a0a0g0a0b0a0a0b0a1a0b0b(it,me);
              }
            }
).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode participant){
                return SLinkOperations.getTarget(participant,MetaAdapterFactory.getReferenceLink(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae78e59fbL,0x34c8853ae78e59fcL,"singer"));
              }
            }
);
            Iterable<SNode> candidates=ListSequence.fromList(allSingers).where(new IWhereFilter<SNode>(){
              public boolean accept(              final SNode singer){
                return Sequence.fromIterable(alreadyParticipatingSingersButMe).all(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode participatingSinger){
                    return neq_wflc39_a0a0a0a0a0a0a0a0a0a8a0a1a0a0a1a0b0a1a1(participatingSinger,singer);
                  }
                }
);
              }
            }
);
            return new ListScope(candidates){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c8dL,"jetbrains.mps.samples.languagePatterns.Basic.structure.Singer")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
