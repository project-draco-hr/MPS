{
  final SNodeMembersAccessModifier modifier=SNodeMembersAccessModifier.getInstance();
  refactoringContext.setUpMembersAccessModifier(modifier);
  for (  IModule sourceModule : sourceModels.keySet()) {
    try {
      IOperationContext operationContext=new ModuleContext(sourceModule,context.getOperationContext().getProject());
      final List<SModel> models=sourceModels.get(sourceModule);
      CommandProcessor.instance().executeLightweightCommand(new Runnable(){
        public void run(){
          modifier.startModificationMode(models);
        }
      }
);
      new GeneratorManager().generateModels(models,null,operationContext,IGenerationType.FILES,new IGenerationScript(){
        public GenerationStatus doGenerate(        IGenerationScriptContext context) throws Exception {
          return context.doGenerate(context.getSourceModelDescriptor(),context.getTargetLanguage(),null);
        }
      }
,IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR,new DefaultMessageHandler(operationContext.getProject()),false);
    }
  finally {
      CommandProcessor.instance().executeLightweightCommand(new Runnable(){
        public void run(){
          modifier.clear();
        }
      }
);
    }
  }
}
