{
  final RefactoringContext refactoringContext=new RefactoringContext();
  boolean success=myRefactoring.askForInfo(context,refactoringContext);
  if (!success)   return;
  if (myRefactoring.showsAffectedNodes()) {
    final SearchResults[] usagesContainer=new SearchResults[]{null};
    Thread thread=new Thread(){
      public void run(){
        final boolean toReturn[]=new boolean[]{false};
        CommandProcessor.instance().executeLightweightCommand(new Runnable(){
          public void run(){
            try {
              usagesContainer[0]=myRefactoring.getAffectedNodes(context,refactoringContext);
            }
 catch (            Throwable t) {
              ThreadUtils.runInUIThreadAndWait(new Runnable(){
                public void run(){
                  int promptResult=JOptionPane.showConfirmDialog(context.getFrame(),"An exception occurred during searching affected nodes. Do you want to continue anyway?","Exception",JOptionPane.YES_NO_OPTION);
                  toReturn[0]=promptResult == JOptionPane.NO_OPTION;
                }
              }
);
            }
          }
        }
);
        if (toReturn[0])         return;
        ThreadUtils.runInUIThreadAndWait(new Runnable(){
          public void run(){
            SearchResults usages=usagesContainer[0];
            if (usages != null) {
              refactoringContext.setUsages(usages);
              NewRefactoringView.showRefactoringView(GenericRefactoring.this,context,refactoringContext);
            }
 else {
              doExecute(context,refactoringContext);
            }
          }
        }
);
      }
    }
;
    thread.start();
  }
 else {
    doExecute(context,refactoringContext);
  }
}
