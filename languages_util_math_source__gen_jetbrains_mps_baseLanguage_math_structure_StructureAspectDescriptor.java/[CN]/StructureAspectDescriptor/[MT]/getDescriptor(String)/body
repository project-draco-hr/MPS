{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.AbsExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.AbstractIndex","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigComplexType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigDecimalType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigIntegerType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression","jetbrains.mps.baseLanguage.math.structure.ExtrSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMinExpression","jetbrains.mps.baseLanguage.math.structure.ExtrSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigProdExpression","jetbrains.mps.baseLanguage.math.structure.ArithmSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.BigSumExpression","jetbrains.mps.baseLanguage.math.structure.ArithmSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.CosineExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression","jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.Determinant","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"startIncluded","endIncluded"},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation","jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"},new String[]{},new String[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LiteralI","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.LogExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathContext","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"roundingMode","precision","precisionSetting"},new String[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbol","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex","jetbrains.mps.baseLanguage.math.structure.AbstractIndex",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{},new String[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex","jetbrains.mps.baseLanguage.math.structure.AbstractIndex",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{},new String[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"indexRef"});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MathTypeCast","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"target"},new String[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"column"},new String[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation","jetbrains.mps.baseLanguage.math.structure.ExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"},new String[]{},new String[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"index"});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixNorm","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"deg"},new String[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer",null,true,new String[]{},new String[]{},new String[]{});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType",null,true,new String[]{},new String[]{},new String[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"rows","columns"},new String[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixUnit","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixZero","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"square"},new String[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.PowExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.SineExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.TangentExpression","jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{},new String[]{});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.TransposeOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{},new String[]{});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorInitializer","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{},new String[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorType","jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"height"},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
