{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.AbsExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 1:
  return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.AbstractIndex",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.BaseConcept"});
case 2:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 3:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigComplexType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 4:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigDecimalType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 5:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigIntegerType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 6:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 7:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigMinExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExtrSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 8:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigProdExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 9:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.BigSumExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ArithmSymbol","jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 10:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 11:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ComplexType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 12:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation",new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 13:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.CosineExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 14:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation",new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 15:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 16:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 17:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 18:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 19:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.Determinant",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 20:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 21:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 22:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 23:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathSymbol"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 24:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression",new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 25:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression",new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"});
case 26:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 27:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.IntervalType",new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 28:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation",new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"});
case 29:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.LiteralI",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 30:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.LogExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 31:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathContext",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 32:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 33:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType",new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 34:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbol",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 35:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex",new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{"jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.BaseConcept"});
case 36:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex",new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{"jetbrains.mps.baseLanguage.math.structure.AbstractIndex"},new String[]{"jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.BaseConcept"});
case 37:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 38:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MathTypeCast",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 39:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 40:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 41:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation",new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 42:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 43:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 44:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 45:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 46:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation",new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 47:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixNorm",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 48:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer",new String[]{},new String[]{},new String[]{});
case 49:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType",new String[]{},new String[]{},new String[]{});
case 50:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
case 51:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixUnit",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 52:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.MatrixZero",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 53:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.PowExpression",new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 54:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.SineExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 55:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.TangentExpression",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 56:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.TransposeOperation",new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.math.structure.ExponentialOperation","jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 57:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorInitializer",new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"},new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
case 58:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.baseLanguage.math.structure.VectorType",new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType","jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"},new String[]{"jetbrains.mps.baseLanguage.structure.Type"});
default :
return null;
}
}
