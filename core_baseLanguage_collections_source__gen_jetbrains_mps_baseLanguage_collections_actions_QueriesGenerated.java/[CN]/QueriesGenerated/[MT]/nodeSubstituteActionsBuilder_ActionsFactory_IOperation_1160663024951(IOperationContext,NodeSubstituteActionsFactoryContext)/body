{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromArray();
  final ApplicableTypesInfo applicableTypesInfo;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=null;
        if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        }
        if ((leftExpression != null)) {
          SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),false) != null) {
            result.myApplicableToSequence=true;
          }
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.ListType"),false) != null) {
            result.myApplicableToList=true;
          }
        }
        return result;
      }
    }
;
    applicableTypesInfo=(ApplicableTypesInfo)calc.calculate();
  }
  return result;
}
