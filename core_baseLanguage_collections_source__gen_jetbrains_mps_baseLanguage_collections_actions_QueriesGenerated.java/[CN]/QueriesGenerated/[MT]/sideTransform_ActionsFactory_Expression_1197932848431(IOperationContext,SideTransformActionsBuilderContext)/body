{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MapElement");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode mapElement=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.collections.structure.MapElement");
        SLinkOperations.setTarget(mapElement,"map",_context.getSourceNode(),true);
        return mapElement;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
