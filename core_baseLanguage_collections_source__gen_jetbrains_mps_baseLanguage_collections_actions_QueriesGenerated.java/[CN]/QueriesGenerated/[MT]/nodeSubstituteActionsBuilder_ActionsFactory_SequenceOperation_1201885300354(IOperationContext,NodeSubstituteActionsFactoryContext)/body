{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode mo=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation",null);
          SNode cl=SLinkOperations.setNewChild(mo,"closure","jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
          SNode scpd=SLinkOperations.addNewChild(cl,"parameter","jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration");
          SPropertyOperations.set(scpd,"name","it");
          return mo;
        }
        public String getDescriptionText(        String pattern){
          return "mapping operation with closure";
        }
        public String getMatchingText(        String pattern){
          return "map";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
