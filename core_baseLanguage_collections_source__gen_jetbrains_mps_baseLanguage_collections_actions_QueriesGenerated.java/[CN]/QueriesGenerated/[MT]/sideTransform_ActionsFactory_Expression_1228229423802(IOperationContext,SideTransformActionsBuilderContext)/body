{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode de=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.collections.structure.DowncastExpression");
        SLinkOperations.setTarget(de,"expression",_context.getSourceNode(),true);
        return de;
      }
      public String getMatchingText(      String pattern){
        return "/";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "downcast to lower level";
      }
    }
);
  }
  return result;
}
