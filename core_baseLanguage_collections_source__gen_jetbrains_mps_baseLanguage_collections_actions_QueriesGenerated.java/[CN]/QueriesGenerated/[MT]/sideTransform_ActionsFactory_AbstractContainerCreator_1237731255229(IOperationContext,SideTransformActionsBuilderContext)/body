{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNodeFactoryOperations.addNewChild(_context.getSourceNode(),"initValue","jetbrains.mps.baseLanguage.structure.Expression");
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "{";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "initialize with values";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"copyFrom","jetbrains.mps.baseLanguage.structure.Expression");
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "(copy:";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "copy elements from sequence";
      }
    }
);
  }
  return result;
}
