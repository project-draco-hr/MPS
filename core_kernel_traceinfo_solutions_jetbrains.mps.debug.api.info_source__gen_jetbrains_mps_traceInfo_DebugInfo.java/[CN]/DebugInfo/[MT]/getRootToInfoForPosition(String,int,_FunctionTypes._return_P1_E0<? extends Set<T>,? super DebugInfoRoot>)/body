{
  Map<DebugInfoRoot,List<T>> result=MapSequence.fromMap(new LinkedHashMap<DebugInfoRoot,List<T>>(16,(float)0.75,false));
  for (  DebugInfoRoot root : Sequence.fromIterable(MapSequence.fromMap(myRoots).values()).where(new IWhereFilter<DebugInfoRoot>(){
    public boolean accept(    DebugInfoRoot it){
      return SetSequence.fromSet(it.getFileNames()).contains(file);
    }
  }
)) {
    List<T> list=MapSequence.fromMap(result).get(root);
    for (    T element : SetSequence.fromSet(getAllPositionsForRoot.invoke(root))) {
      if (element.isPositionInside(file,line)) {
        if (list == null) {
          list=ListSequence.fromList(new ArrayList<T>());
          MapSequence.fromMap(result).put(root,list);
        }
        ListSequence.fromList(list).addElement(element);
      }
    }
    if (list != null) {
      MapSequence.fromMap(result).put(root,ListSequence.fromList(list).sort(new ISelector<T,Integer>(){
        public Integer select(        T it){
          return it.getStartLine();
        }
      }
,false).toListSequence());
    }
  }
  return result;
}
