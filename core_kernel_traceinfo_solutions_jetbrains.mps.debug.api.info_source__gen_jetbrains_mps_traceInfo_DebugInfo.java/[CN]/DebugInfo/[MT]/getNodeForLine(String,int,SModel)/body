{
  List<TraceablePositionInfo> resultList=getInfoForPosition(file,line,new _FunctionTypes._return_P1_E0<Set<TraceablePositionInfo>,DebugInfoRoot>(){
    public Set<TraceablePositionInfo> invoke(    DebugInfoRoot root){
      return root.getPositions();
    }
  }
);
  if (ListSequence.fromList(resultList).isEmpty()) {
    return null;
  }
  Iterable<TraceablePositionInfo> sorted=ListSequence.fromList(resultList).sort(new ISelector<TraceablePositionInfo,Comparable<?>>(){
    public Comparable<?> select(    TraceablePositionInfo it){
      return it;
    }
  }
,true);
  return model.getNodeById(Sequence.fromIterable(sorted).first().getNodeId());
}
