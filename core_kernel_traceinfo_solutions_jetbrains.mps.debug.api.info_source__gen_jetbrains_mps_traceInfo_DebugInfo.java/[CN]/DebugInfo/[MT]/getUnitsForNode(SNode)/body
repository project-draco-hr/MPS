{
  final Tuples._2<String,String> tuple=tupleFrom(node);
  DebugInfoRoot debugInfoRoot=MapSequence.fromMap(myRoots).get(tupleFrom(SNodeOperations.getContainingRoot(node)));
  if (debugInfoRoot != null) {
    return SetSequence.fromSet(debugInfoRoot.getUnitPositions()).sort(new ISelector<UnitPositionInfo,Integer>(){
      public Integer select(      UnitPositionInfo position){
        return position.getStartLine();
      }
    }
,false).where(new IWhereFilter<UnitPositionInfo>(){
      public boolean accept(      UnitPositionInfo it){
        return eq_exfyrk_a0a0a0a0a0a0a2a01(it.getNodeId(),tuple._0());
      }
    }
).toListSequence();
  }
  return ListSequence.fromList(new ArrayList<UnitPositionInfo>());
}
