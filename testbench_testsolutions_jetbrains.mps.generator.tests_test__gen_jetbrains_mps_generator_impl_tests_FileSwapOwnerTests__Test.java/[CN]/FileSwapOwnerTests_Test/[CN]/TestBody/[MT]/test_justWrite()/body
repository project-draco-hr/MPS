{
  this.addNodeById("1732396662099564446");
  try {
    SModel model=TemporaryModels.getInstance().create(false,false,TempModuleOptions.forDefaultModule());
    try {
      SNode node=FileSwapOwner.writeAndReadNode(SNodeOperations.cast(this.getNodeById("1732396662099564449"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242864l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
      model.addRootNode(node);
{
        List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1732396662099564449"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242864l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
        List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),node);
        Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
      }
    }
  finally {
      TemporaryModels.getInstance().dispose(model);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    org.junit.Assert.fail(e.getMessage());
  }
}
