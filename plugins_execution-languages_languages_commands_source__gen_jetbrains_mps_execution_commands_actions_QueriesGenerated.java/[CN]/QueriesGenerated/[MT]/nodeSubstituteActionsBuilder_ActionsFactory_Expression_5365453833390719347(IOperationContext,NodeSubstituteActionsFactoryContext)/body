{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0xbe3a0d5ba1a2bf4L,"jetbrains.mps.execution.commands.structure.CommandBuilderExpression").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0x550ea9458ea107acL,"jetbrains.mps.execution.commands.structure.ExecuteCommandPart"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode builder=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0xbe3a0d5ba1a2bf4L,"jetbrains.mps.execution.commands.structure.CommandBuilderExpression")),null);
              SLinkOperations.setTarget(builder,MetaAdapterFactory.getReferenceLink(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0xbe3a0d5ba1a2bf4L,0x550ea9458ea1ac11L,"commandPart"),(item));
              return builder;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "command builder expression";
            }
          }
);
        }
      }
    }
  }
  return result;
}
