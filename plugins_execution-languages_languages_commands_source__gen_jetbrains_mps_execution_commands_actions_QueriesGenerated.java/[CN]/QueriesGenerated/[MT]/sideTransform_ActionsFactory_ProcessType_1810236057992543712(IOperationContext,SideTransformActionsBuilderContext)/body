{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0x87f99370d7e1ea3L,"jetbrains.mps.execution.commands.structure.CommandProcessType").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0x87f99370d7e1ea3L,"jetbrains.mps.execution.commands.structure.CommandProcessType")));
    }
    public String getMatchingText(    String pattern){
      return "<";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "command process";
    }
    public SNode getActionType(    String pattern){
      return createCommandProcessType_5e23hz_a0a0a0a();
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0x87f99370d7e1ea3L,"jetbrains.mps.execution.commands.structure.CommandProcessType").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0x87f99370d7e1ea3L,"jetbrains.mps.execution.commands.structure.CommandProcessType").getDeclarationNode(),null));
    }
  }
);
  return result;
}
