{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.ReportExecutionError");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-921973991802319051l,-8446196034130110353l),856705193941281790l,"jetbrains.mps.execution.commands.structure.ReportExecutionError")),null);
        }
        public String getDescriptionText(        String pattern){
          return "report execution error";
        }
        public String getMatchingText(        String pattern){
          return "report";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
