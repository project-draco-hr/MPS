{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.RedirectOutputExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode redirect=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0xbe3a0d5ba1a2c14L,"jetbrains.mps.execution.commands.structure.RedirectOutputExpression")),null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),redirect);
      SLinkOperations.setTarget(redirect,MetaAdapterFactory.getContainmentLink(0xf3347d8a0e794f35L,0x8ac91574f25c986fL,0xbe3a0d5ba1a2c14L,0xbe3a0d5ba1a2c15L,"processHandler"),_context.getSourceNode());
      return redirect;
    }
    public String getMatchingText(    String pattern){
      return ">";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.RedirectOutputExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.RedirectOutputExpression"),null));
    }
  }
);
  return result;
}
