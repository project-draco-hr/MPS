{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.ListCommandPart");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode node=SConceptOperations.createNewNode("jetbrains.mps.execution.commands.structure.ListCommandPart",null);
          SLinkOperations.setNewChild(node,"list","jetbrains.mps.baseLanguage.structure.Expression");
          return node;
        }
        public String getDescriptionText(        String pattern){
          return "list command part from list";
        }
        public String getMatchingText(        String pattern){
          return "<list";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.ListCommandPart");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode node=SConceptOperations.createNewNode("jetbrains.mps.execution.commands.structure.ListCommandPart",null);
          SLinkOperations.addNewChild(node,"items","jetbrains.mps.baseLanguage.structure.Expression");
          return node;
        }
        public String getDescriptionText(        String pattern){
          return "list command part from items";
        }
        public String getMatchingText(        String pattern){
          return "<items";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
