{
  if (file.isReadOnly()) {
    if (log.isErrorEnabled()) {
      log.error("Cant't save " + file.getPath());
    }
    return;
  }
  Element languageElement=new Element("language");
  languageElement.setAttribute("namespace",descriptor.getNamespace());
  String uuid=descriptor.getUUID();
  if (uuid != null) {
    languageElement.setAttribute("uuid",uuid);
  }
  if (descriptor.getGenPath() != null) {
    languageElement.setAttribute("generatorOutputPath",macroHelper.shrinkPath(descriptor.getGenPath()));
  }
  Element models=new Element("models");
  ModuleDescriptorPersistence.saveModelRoots(models,descriptor.getModelRoots(),macroHelper);
  languageElement.addContent(models);
  Element accessoryModels=new Element("accessoryModels");
  for (  SModelReference model : SetSequence.fromSet(descriptor.getAccessoryModels())) {
    jetbrains.mps.project.persistence.JDOMUtil.tagWithAttribute(accessoryModels,"model","modelUID",model.toString());
  }
  languageElement.addContent(accessoryModels);
  Element generators=new Element("generators");
  for (  GeneratorDescriptor generatorDescriptor : ListSequence.fromList(descriptor.getGenerators())) {
    GeneratorDescriptorPersistence.saveGeneratorDescriptor(generators,generatorDescriptor,macroHelper);
  }
  languageElement.addContent(generators);
  if (!(descriptor.getStubModelEntries().isEmpty())) {
    Element stubModelEntries=new Element("stubModelEntries");
    ModuleDescriptorPersistence.saveStubModelEntries(stubModelEntries,descriptor.getStubModelEntries(),macroHelper);
    languageElement.addContent(stubModelEntries);
  }
  if (!(descriptor.getRuntimeStubModels().isEmpty())) {
    Element runtimeStubModels=new Element("runtimeStubModels");
    for (    ModelRoot entry : SetSequence.fromSet(descriptor.getRuntimeStubModels())) {
      Element stubModelEntry=new Element("stubModelEntry");
      stubModelEntry.setAttribute("path",macroHelper.shrinkPath(entry.getPath()));
      jetbrains.mps.project.persistence.JDOMUtil.tagWithAttributes(stubModelEntry,"manager","moduleId",entry.getManager().getModuleId(),"className",entry.getManager().getClassName());
      runtimeStubModels.addContent(stubModelEntry);
    }
    languageElement.addContent(runtimeStubModels);
  }
  if (!(descriptor.getStubSolutions().isEmpty())) {
    Element stubSolutions=new Element("stubSolutions");
    for (    StubSolution entry : SetSequence.fromSet(descriptor.getStubSolutions())) {
      jetbrains.mps.project.persistence.JDOMUtil.tagWithAttributes(stubSolutions,"stubSolution","moduleName",entry.getName(),"moduleId",entry.getId().toString());
    }
    languageElement.addContent(stubSolutions);
  }
  Element sourcePath=new Element("sourcePath");
  for (  String p : CollectionSequence.fromCollection(descriptor.getSourcePaths())) {
    jetbrains.mps.project.persistence.JDOMUtil.tagWithAttribute(sourcePath,"source","path",macroHelper.shrinkPath(p));
  }
  languageElement.addContent(sourcePath);
  ModuleDescriptorPersistence.saveDependencies(languageElement,descriptor);
  Element extendedLanguages=new Element("extendedLanguages");
  for (  ModuleReference ref : SetSequence.fromSet(descriptor.getExtendedLanguages())) {
    jetbrains.mps.project.persistence.JDOMUtil.tagWithText(extendedLanguages,"extendedLanguage",ref.toString());
  }
  languageElement.addContent(extendedLanguages);
  try {
    OutputStream os=file.openOutputStream();
    JDOMUtil.writeDocument(new Document(languageElement),os);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error("",e);
    }
  }
  ModuleDescriptorPersistence.setTimestamp(descriptor,file);
}
