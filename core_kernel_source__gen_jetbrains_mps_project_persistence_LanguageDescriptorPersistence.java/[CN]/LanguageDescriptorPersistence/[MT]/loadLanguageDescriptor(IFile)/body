{
  final Macros macros=Macros.languageDescriptor();
  LanguageDescriptor descriptor;
  try {
    Document document=JDOMUtil.loadDocument(file);
    final Element languageElement=((Element)document.getRootElement());
    descriptor=new _FunctionTypes._return_P0_E0<LanguageDescriptor>(){
      public LanguageDescriptor invoke(){
        LanguageDescriptor result_5080_0=new LanguageDescriptor();
        String result_5080_1=languageElement.getAttributeValue("namespace");
        result_5080_0.setNamespace(result_5080_1);
        if (languageElement.getAttributeValue("uuid") != null) {
          String result_5080_2=languageElement.getAttributeValue("uuid");
          result_5080_0.setUUID(result_5080_2);
        }
        boolean result_5080_3=AttributeUtils.booleanWithDefault(languageElement.getAttributeValue("java-stubs-enabled"),false);
        result_5080_0.setEnableJavaStubs(result_5080_3);
        if (languageElement.getAttributeValue("generatorOutputPath") != null) {
          String result_5080_4=macros.expandPath(languageElement.getAttributeValue("generatorOutputPath"),file);
          result_5080_0.setGenPath(result_5080_4);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"models")).isNotEmpty()) {
          result_5080_0.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"models")).first(),"modelRoot"),file,macros));
        }
 else {
          result_5080_0.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(languageElement,"modelRoot"),file,macros));
        }
        ModuleDescriptorPersistence.loadDependencies(result_5080_0,languageElement);
        for (        Element extendedLanguage : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"extendedLanguages")).first(),"extendedLanguage"))) {
          result_5080_0.getExtendedLanguages().add(ModuleReference.fromString(extendedLanguage.getText()));
        }
        Element autoImports=ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"accessoryModels")).first();
        if (autoImports == null) {
          autoImports=ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"library")).first();
        }
        for (        Element modelElement : ListSequence.fromList(AttributeUtils.elementChildren(autoImports,"model"))) {
          result_5080_0.getAccessoryModels().add(SModelReference.fromString(modelElement.getAttributeValue("modelUID")));
        }
        for (        Element generatorElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"generators")).first(),"generator"))) {
          result_5080_0.getGenerators().add(GeneratorDescriptorPersistence.loadGeneratorDescriptor(generatorElement,file,macros));
        }
        for (        Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"classPath")).first(),"entry")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"runtimeClassPath")).first(),"entry")))) {
          ClassPathEntry result_5080_5=new ClassPathEntry();
          String result_5080_6=macros.expandPath(entryElement.getAttributeValue("path"),file);
          result_5080_5.setPath(result_5080_6);
          boolean result_5080_7=AttributeUtils.booleanWithDefault(entryElement.getAttributeValue("include"),false);
          result_5080_5.setIncludedInVCS(result_5080_7);
          result_5080_0.getClassPaths().add(result_5080_5);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"stubModelEntries")).isNotEmpty()) {
          result_5080_0.getStubModelEntries().addAll(ModuleDescriptorPersistence.loadStubModelEntries(AttributeUtils.elementChildren(languageElement,"stubModelEntries"),file,macros));
        }
        for (        Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"languageRuntimeClassPath")).first(),"entry"))) {
          ClassPathEntry result_5080_8=new ClassPathEntry();
          String result_5080_9=macros.expandPath(entryElement.getAttributeValue("path"),file);
          result_5080_8.setPath(result_5080_9);
          boolean result_5080_10=AttributeUtils.booleanWithDefault(entryElement.getAttributeValue("include"),false);
          result_5080_8.setIncludedInVCS(result_5080_10);
          result_5080_0.getRuntimeClassPaths().add(result_5080_8);
        }
        for (        Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(languageElement,"sourcePath")).first(),"source"))) {
          result_5080_0.getSourcePaths().add(macros.expandPath(entryElement.getAttributeValue("path"),file));
        }
        boolean result_5080_11=AttributeUtils.booleanWithDefault(languageElement.getAttributeValue("compileInMPS"),false);
        result_5080_0.setCompileInMPS(result_5080_11);
        return result_5080_0;
      }
    }
.invoke();
  }
 catch (  Exception e) {
    throw new ModuleReadException(e);
  }
  ModuleDescriptorPersistence.setTimestamp(descriptor,file,false);
  return descriptor;
}
