{
  SNode list=SNodeOperations.getAncestor(ListSequence.fromList(myPartToExtract).getElement(0),"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(list),"jetbrains.mps.baseLanguage.structure.Statement")) {
    list=SNodeOperations.getAncestor(list,"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  }
  Program program=DataFlowManager.getInstance().buildProgramFor(list);
  Set<Instruction> nodeInstructions=SetSequence.fromSet(new HashSet<Instruction>());
  for (  SNode node : ListSequence.fromList(myPartToExtract)) {
    SetSequence.fromSet(nodeInstructions).addSequence(ListSequence.fromList(program.getInstructionsFor(node)));
  }
  AnalysisResult<Set<WriteInstruction>> reachability=program.analyze(new ReachingDefinitionsAnalyzer());
  for (  Instruction instruction : SetSequence.fromSet(nodeInstructions).where(new IWhereFilter<Instruction>(){
    public boolean accept(    Instruction it){
      return it instanceof ReadInstruction;
    }
  }
)) {
    final ReadInstruction read=(ReadInstruction)instruction;
    Set<WriteInstruction> writes=reachability.get(read);
    if (SetSequence.fromSet(writes).where(new IWhereFilter<WriteInstruction>(){
      public boolean accept(      WriteInstruction it){
        return it.getVariable() == read.getVariable();
      }
    }
).isEmpty()) {
      SNode declaration=((SNode)read.getVariable());
      if (MapSequence.fromMap(result).containsKey(declaration)) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
        continue;
      }
      SNode type=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(declaration),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"),true);
      SNode reference;
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
        reference=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)(Object.class)),SNodeOperations.cast(declaration,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"virtual_createReference_1213877517482",new Object[]{});
      }
 else {
        reference=((SNode)read.getSource());
      }
      if (SNodeOperations.isInstanceOf(reference,"jetbrains.mps.baseLanguage.structure.Expression")) {
        MapSequence.fromMap(result).put(declaration,new MethodParameter(declaration,type,SPropertyOperations.getString(declaration,"name"),reference));
      }
    }
  }
}
