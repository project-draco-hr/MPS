{
  SNode list=SNodeOperations.getNodeAncestor(ListSequence.fromList(myPartToExtract).getElement(0),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"),false,false);
  while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(list),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"))) {
    list=SNodeOperations.getNodeAncestor(list,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"),false,false);
  }
  Program program=new MPSProgramBuilder(((SRepository)null)).buildProgram(list);
  Set<Instruction> nodeInstructions=SetSequence.fromSet(new HashSet<Instruction>());
  for (  SNode node : ListSequence.fromList(myPartToExtract)) {
    SetSequence.fromSet(nodeInstructions).addSequence(ListSequence.fromList(program.getInstructionsFor(node)));
  }
  AnalysisResult<Set<WriteInstruction>> reachability=program.analyze(new ReachingDefinitionsAnalyzer());
  for (  Instruction instruction : SetSequence.fromSet(nodeInstructions).where(new IWhereFilter<Instruction>(){
    public boolean accept(    Instruction it){
      return it instanceof ReadInstruction;
    }
  }
)) {
    final ReadInstruction read=(ReadInstruction)instruction;
    Set<WriteInstruction> writes=reachability.get(read);
    if (SetSequence.fromSet(writes).where(new IWhereFilter<WriteInstruction>(){
      public boolean accept(      WriteInstruction it){
        return it.getVariable() == read.getVariable();
      }
    }
).isEmpty()) {
      SNode declaration=((SNode)read.getVariable());
      if (MapSequence.fromMap(result).containsKey(declaration)) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(declaration,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca68L,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) || SNodeOperations.isInstanceOf(declaration,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93c84351fL,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
        continue;
      }
      SNode type=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(declaration),HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506dL,"jetbrains.mps.baseLanguage.structure.Type")),true);
      SNode reference;
      if (SNodeOperations.isInstanceOf(declaration,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"))) {
        reference=((SNode)BHReflection.invoke(SNodeOperations.cast(declaration,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")),SMethodTrimmedId.create("createReference",null,"hEwJfME")));
      }
 else {
        reference=((SNode)read.getSource());
      }
      if (SNodeOperations.isInstanceOf(reference,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"))) {
        MapSequence.fromMap(result).put(declaration,new MethodParameter(declaration,type,SPropertyOperations.getString(declaration,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),reference));
      }
    }
  }
}
