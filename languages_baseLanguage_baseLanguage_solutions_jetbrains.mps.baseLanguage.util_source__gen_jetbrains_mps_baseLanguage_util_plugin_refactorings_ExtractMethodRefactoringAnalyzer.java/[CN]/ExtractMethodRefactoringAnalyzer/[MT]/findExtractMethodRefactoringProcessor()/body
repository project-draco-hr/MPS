{
  shouldChooseOuterContainer=false;
  SNode first=ListSequence.fromList(this.myPartToExtract).first();
  SNode classConcept=SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false,false);
  if (classConcept != null) {
    this.myProcessor=new ClassExtractMethodRefactoringProcessor(classConcept,this.myPartToExtract);
  }
 else   if (SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l,-6610165693999523818l),1221393582612l,"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"),false,false) != null) {
    SNode extractable=SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l,-6610165693999523818l),1221393582612l,"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"),false,false);
    this.myProcessor=BehaviorReflection.invokeVirtual(IExtractMethodRefactoringProcessor.class,extractable,"virtual_getExtractMethodRefactoringProcessor_1221393367929",new Object[]{this.myPartToExtract});
  }
 else {
    this.myProcessor=new AbstractExtractMethodRefactoringProcessor(null,this.myPartToExtract);
    shouldChooseOuterContainer=true;
  }
}
