{
  shouldChooseOuterContainer=false;
  SNode first=ListSequence.fromList(this.myPartToExtract).first();
  SNode classConcept=SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false,false);
  if (classConcept != null) {
    this.myProcessor=new ClassExtractMethodRefactoringProcessor(classConcept,this.myPartToExtract);
  }
 else   if (SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11c60bb0a14L,"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"),false,false) != null) {
    SNode extractable=SNodeOperations.getNodeAncestor(first,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11c60bb0a14L,"jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"),false,false);
    this.myProcessor=((IExtractMethodRefactoringProcessor)BHReflection.invoke(extractable,SMethodTrimmedId.create("getExtractMethodRefactoringProcessor",null,"hLwHWdT"),this.myPartToExtract));
  }
 else {
    this.myProcessor=new AbstractExtractMethodRefactoringProcessor(null,this.myPartToExtract);
    shouldChooseOuterContainer=true;
  }
}
