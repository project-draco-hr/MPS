{
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode node : ListSequence.fromList(this.myPartToExtract)) {
    List<SNode> returns=SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.ReturnStatement",true,new String[]{});
    for (    SNode ret : ListSequence.fromList(returns)) {
      SNode a1=SNodeOperations.getAncestor(ret,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
      SNode a2=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
      if (a1 == a2) {
        ListSequence.fromList(result).addElement(ret);
      }
    }
    List<SNode> statements=new ArrayList<SNode>();
    ListSequence.fromList(statements).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.BreakStatement",false,new String[]{})));
    ListSequence.fromList(statements).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.ContinueStatement",false,new String[]{})));
    for (    SNode st : ListSequence.fromList(statements)) {
      SNode a1=SNodeOperations.getAncestor(st,"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,false);
      SNode a2=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,false);
      if (a1 == a2) {
        ListSequence.fromList(result).addElement(st);
      }
    }
  }
  return result;
}
