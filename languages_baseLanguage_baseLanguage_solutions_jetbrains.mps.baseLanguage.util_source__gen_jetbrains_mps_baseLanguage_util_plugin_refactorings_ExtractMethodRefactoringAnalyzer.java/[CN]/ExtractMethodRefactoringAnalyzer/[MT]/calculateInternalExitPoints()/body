{
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode node : ListSequence.fromList(this.myPartToExtract)) {
    List<SNode> returns=SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,"jetbrains.mps.baseLanguage.structure.ReturnStatement"),true,new SAbstractConcept[]{});
    for (    SNode ret : ListSequence.fromList(returns)) {
      SNode a1=SNodeOperations.getNodeAncestor(ret,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),false,false);
      SNode a2=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),false,false);
      if (a1 == a2) {
        ListSequence.fromList(result).addElement(ret);
      }
    }
    List<SNode> statements=new ArrayList<SNode>();
    ListSequence.fromList(statements).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbe39a867fL,"jetbrains.mps.baseLanguage.structure.BreakStatement"),false,new SAbstractConcept[]{})));
    ListSequence.fromList(statements).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbf3043726L,"jetbrains.mps.baseLanguage.structure.ContinueStatement"),false,new SAbstractConcept[]{})));
    for (    SNode st : ListSequence.fromList(statements)) {
      SNode a1=SNodeOperations.getNodeAncestor(st,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cb1ac5adeL,"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"),false,false);
      SNode a2=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cb1ac5adeL,"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"),false,false);
      if (a1 == a2) {
        ListSequence.fromList(result).addElement(st);
      }
    }
  }
  return result;
}
