{
  List<SNode> result=new ArrayList<SNode>();
  SNode rule=SNodeOperations.getAncestor(enclosingNode,"jetbrains.mps.bootstrap.helgins.structure.AbstractRule",false,false);
  if (rule != null) {
    SNode appNode=SLinkOperations.getTarget(rule,"applicableNode",true);
    ListOperations.addElement(result,appNode);
    if (SNodeOperations.isInstanceOf(rule,"jetbrains.mps.bootstrap.helgins.structure.ComparisonRule")) {
      SNode appNode2=SLinkOperations.getTarget(rule,"anotherNode",true);
      ListOperations.addElement(result,appNode2);
    }
    if (SNodeOperations.isInstanceOf(rule,"jetbrains.mps.bootstrap.helgins.structure.InequationReplacementRule")) {
      SNode appNode2=SLinkOperations.getTarget(rule,"supertypeNode",true);
      ListOperations.addElement(result,appNode2);
    }
  }
  SNode coerceStatement=SNodeOperations.getAncestor(enclosingNode,"jetbrains.mps.bootstrap.helgins.structure.CoerceStatement",false,false);
  while (coerceStatement != null) {
    ListOperations.addElement(result,SLinkOperations.getTarget(coerceStatement,"pattern",true));
    coerceStatement=SNodeOperations.getAncestor(coerceStatement,"jetbrains.mps.bootstrap.helgins.structure.CoerceStatement",false,false);
  }
  SNode matchStatementItem=SNodeOperations.getAncestor(enclosingNode,"jetbrains.mps.bootstrap.helgins.structure.MatchStatementItem",false,false);
  while (matchStatementItem != null) {
    ListOperations.addElement(result,SLinkOperations.getTarget(matchStatementItem,"condition",true));
    matchStatementItem=SNodeOperations.getAncestor(matchStatementItem,"jetbrains.mps.bootstrap.helgins.structure.MatchStatementItem",false,false);
  }
  return new SimpleSearchScope(result);
}
