{
  EditorComponent editorComponent=editorContext.getNodeEditorComponent();
  SNode root=node.getContainingRoot();
  LanguageErrorsComponent errorsComponent=MapSequence.fromMap(myRootsToComponents).get(root);
  if (errorsComponent == null) {
    errorsComponent=new LanguageErrorsComponent(editorComponent.getEditedNode());
    MapSequence.fromMap(myRootsToComponents).put(root,errorsComponent);
  }
  if (!(editorComponent instanceof InspectorEditorComponent) && !(SetSequence.fromSet(myEditorComponents).contains(editorComponent))) {
    SetSequence.fromSet(myEditorComponents).addElement(editorComponent);
    editorComponent.addDisposeListener(myDisposeListener);
  }
  SModelDescriptor descriptor=SNodeOperations.getModel(root).getModelDescriptor();
  addModelListener(descriptor);
  boolean changed=errorsComponent.check(node,myRules,operationContext);
  myMessagesChanged=changed;
  Set<EditorMessage> result=SetSequence.fromSet(new HashSet<EditorMessage>());
  for (  IErrorReporter errorReporter : errorsComponent.getErrors()) {
    MessageStatus status=errorReporter.getMessageStatus();
    String errorString=errorReporter.reportError();
    HighlighterMessage message=HighlightUtil.createHighlighterMessage(errorReporter.getSNode(),NameUtil.capitalize(status.getPresentation()) + ": " + errorString,errorReporter,LanguageChecker.this,editorContext);
    SetSequence.fromSet(result).addElement(message);
  }
  return result;
}
