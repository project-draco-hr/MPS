{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  BaseLanguageTextGen.blClassifierRef(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass","classifier")),this);
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).isNotEmpty()) {
    this.append("<");
{
      Iterable<SNode> collection=SLinkOperations.getTargets(node,"typeParameter",true);
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
    this.append(">");
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).isNotEmpty()) {
    this.append("(");
{
      Iterable<SNode> collection=SLinkOperations.getTargets(node,"parameter",true);
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
    this.append(")");
  }
 else {
    this.append("(");
{
      Iterable<SNode> collection=SLinkOperations.getTargets(node,"actualArgument",true);
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
    this.append(")");
  }
  this.append(" ");
  BaseClassConceptTextGen.membersWithBrackets(node,false,this);
  if (getBuffer().hasPositionsSupport()) {
{
      String unitName=null;
      try {
        unitName=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate unit name for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillUnitInfo(this,node,unitName);
    }
  }
}
