{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0ng.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractNodeRefExpression;
      }
    break;
case 1:
  if (true) {
    return props_AbstractOperationParameter;
  }
break;
case 2:
if (true) {
return props_AbstractTypeCastExpression;
}
break;
case 3:
if (true) {
return props_AllAttributeQualifier;
}
break;
case 4:
if (true) {
return props_AsNodeOperation;
}
break;
case 5:
if (true) {
return props_AsSConcept;
}
break;
case 6:
if (true) {
return props_AttributeAccess;
}
break;
case 7:
if (true) {
return props_AttributeQualifier;
}
break;
case 8:
if (true) {
return props_BootstrapAwareMetaObject;
}
break;
case 9:
if (true) {
return props_CheckedModuleQualifiedName;
}
break;
case 10:
if (true) {
return props_CheckedModuleReference;
}
break;
case 11:
if (true) {
return props_ChildAttributeQualifier;
}
break;
case 12:
if (true) {
return props_ChildNodeRefExpression;
}
break;
case 13:
if (true) {
return props_ConceptAliasOperation;
}
break;
case 14:
if (true) {
return props_ConceptFqNameRefExpression;
}
break;
case 15:
if (true) {
return props_ConceptId;
}
break;
case 16:
if (true) {
return props_ConceptIdRefExpression;
}
break;
case 17:
if (true) {
return props_ConceptIdentity;
}
break;
case 18:
if (true) {
return props_ConceptNodeType;
}
break;
case 19:
if (true) {
return props_ConceptRefExpression;
}
break;
case 20:
if (true) {
return props_ConceptReference;
}
break;
case 21:
if (true) {
return props_ConceptShortDescriptionOperation;
}
break;
case 22:
if (true) {
return props_ConceptSwitchStatement;
}
break;
case 23:
if (true) {
return props_Concept_GetAllSubConcepts;
}
break;
case 24:
if (true) {
return props_Concept_GetAllSuperConcepts;
}
break;
case 25:
if (true) {
return props_Concept_GetDirectSuperConcepts;
}
break;
case 26:
if (true) {
return props_Concept_GetHierarchy;
}
break;
case 27:
if (true) {
return props_Concept_IsExactlyOperation;
}
break;
case 28:
if (true) {
return props_Concept_IsSubConceptOfOperation;
}
break;
case 29:
if (true) {
return props_Concept_IsSuperConceptOfOperation;
}
break;
case 30:
if (true) {
return props_Concept_NewInstance;
}
break;
case 31:
if (true) {
return props_EnumMemberReference;
}
break;
case 32:
if (true) {
return props_EnumMemberValueRefExpression;
}
break;
case 33:
if (true) {
return props_EnumMember_NameOperation;
}
break;
case 34:
if (true) {
return props_EnumMember_ValueOperation;
}
break;
case 35:
if (true) {
return props_EqualsStructurallyExpression;
}
break;
case 36:
if (true) {
return props_ExactConceptCase;
}
break;
case 37:
if (true) {
return props_GeneratorIdentity;
}
break;
case 38:
if (true) {
return props_GeneratorModulePointer;
}
break;
case 39:
if (true) {
return props_IConceptSwitchCase;
}
break;
case 40:
if (true) {
return props_ILinkAccess;
}
break;
case 41:
if (true) {
return props_ILinkAccessQualifier;
}
break;
case 42:
if (true) {
return props_ILinkAccessQualifierContainer;
}
break;
case 43:
if (true) {
return props_ILinkQualifier;
}
break;
case 44:
if (true) {
return props_IPropertyQualifier;
}
break;
case 45:
if (true) {
return props_IRefConceptArg;
}
break;
case 46:
if (true) {
return props_IReferenceOperation;
}
break;
case 47:
if (true) {
return props_IfInstanceOfStatement;
}
break;
case 48:
if (true) {
return props_IfInstanceOfVarReference;
}
break;
case 49:
if (true) {
return props_IfInstanceOfVariable;
}
break;
case 50:
if (true) {
return props_LanguageId;
}
break;
case 51:
if (true) {
return props_LanguageIdentity;
}
break;
case 52:
if (true) {
return props_LanguageRefExpression;
}
break;
case 53:
if (true) {
return props_LanguageReferenceExpression;
}
break;
case 54:
if (true) {
return props_LinkAttributeQualifier;
}
break;
case 55:
if (true) {
return props_LinkIdRefExpression;
}
break;
case 56:
if (true) {
return props_LinkList_AddNewChildOperation;
}
break;
case 57:
if (true) {
return props_LinkNameRefExpression;
}
break;
case 58:
if (true) {
return props_LinkQualifier;
}
break;
case 59:
if (true) {
return props_LinkRefExpression;
}
break;
case 60:
if (true) {
return props_LinkRefQualifier;
}
break;
case 61:
if (true) {
return props_Link_SetNewChildOperation;
}
break;
case 62:
if (true) {
return props_Link_SetTargetOperation;
}
break;
case 63:
if (true) {
return props_ModelReferenceExpression;
}
break;
case 64:
if (true) {
return props_Model_AddRootOperation;
}
break;
case 65:
if (true) {
return props_Model_CreateNewNodeOperation;
}
break;
case 66:
if (true) {
return props_Model_CreateNewRootNodeOperation;
}
break;
case 67:
if (true) {
return props_Model_GetLongNameOperation;
}
break;
case 68:
if (true) {
return props_Model_GetModule;
}
break;
case 69:
if (true) {
return props_Model_NodesIncludingImportedOperation;
}
break;
case 70:
if (true) {
return props_Model_NodesOperation;
}
break;
case 71:
if (true) {
return props_Model_RootsIncludingImportedOperation;
}
break;
case 72:
if (true) {
return props_Model_RootsOperation;
}
break;
case 73:
if (true) {
return props_ModuleIdentity;
}
break;
case 74:
if (true) {
return props_ModulePointer;
}
break;
case 75:
if (true) {
return props_ModuleRefExpression;
}
break;
case 76:
if (true) {
return props_ModuleReferenceExpression;
}
break;
case 77:
if (true) {
return props_NodeAttributeQualifier;
}
break;
case 78:
if (true) {
return props_NodePointerExpression;
}
break;
case 79:
if (true) {
return props_NodeRefExpression;
}
break;
case 80:
if (true) {
return props_Node_ConceptMethodCall;
}
break;
case 81:
if (true) {
return props_Node_CopyOperation;
}
break;
case 82:
if (true) {
return props_Node_DeleteOperation;
}
break;
case 83:
if (true) {
return props_Node_DetachOperation;
}
break;
case 84:
if (true) {
return props_Node_GetAllSiblingsOperation;
}
break;
case 85:
if (true) {
return props_Node_GetAncestorOperation;
}
break;
case 86:
if (true) {
return props_Node_GetAncestorsOperation;
}
break;
case 87:
if (true) {
return props_Node_GetChildrenAndChildAttributesOperation;
}
break;
case 88:
if (true) {
return props_Node_GetChildrenOperation;
}
break;
case 89:
if (true) {
return props_Node_GetConceptOperation;
}
break;
case 90:
if (true) {
return props_Node_GetContainingLinkOperation;
}
break;
case 91:
if (true) {
return props_Node_GetContainingRoleOperation;
}
break;
case 92:
if (true) {
return props_Node_GetContainingRootOperation;
}
break;
case 93:
if (true) {
return props_Node_GetDescendantsOperation;
}
break;
case 94:
if (true) {
return props_Node_GetIndexInParentOperation;
}
break;
case 95:
if (true) {
return props_Node_GetModelOperation;
}
break;
case 96:
if (true) {
return props_Node_GetNextSiblingOperation;
}
break;
case 97:
if (true) {
return props_Node_GetNextSiblingsOperation;
}
break;
case 98:
if (true) {
return props_Node_GetParentOperation;
}
break;
case 99:
if (true) {
return props_Node_GetPrevSiblingOperation;
}
break;
case 100:
if (true) {
return props_Node_GetPrevSiblingsOperation;
}
break;
case 101:
if (true) {
return props_Node_GetReferenceOperation;
}
break;
case 102:
if (true) {
return props_Node_GetReferencesOperation;
}
break;
case 103:
if (true) {
return props_Node_GetReferentSearchScopeOperation;
}
break;
case 104:
if (true) {
return props_Node_GetSConceptOperation;
}
break;
case 105:
if (true) {
return props_Node_InsertNewNextSiblingOperation;
}
break;
case 106:
if (true) {
return props_Node_InsertNewPrevSiblingOperation;
}
break;
case 107:
if (true) {
return props_Node_InsertNextSiblingOperation;
}
break;
case 108:
if (true) {
return props_Node_InsertPrevSiblingOperation;
}
break;
case 109:
if (true) {
return props_Node_IsAttributeOperation;
}
break;
case 110:
if (true) {
return props_Node_IsInstanceOfOperation;
}
break;
case 111:
if (true) {
return props_Node_IsNotNullOperation;
}
break;
case 112:
if (true) {
return props_Node_IsNullOperation;
}
break;
case 113:
if (true) {
return props_Node_IsRoleOperation;
}
break;
case 114:
if (true) {
return props_Node_PointerOperation;
}
break;
case 115:
if (true) {
return props_Node_ReplaceWithAnotherOperation;
}
break;
case 116:
if (true) {
return props_Node_ReplaceWithNewOperation;
}
break;
case 117:
if (true) {
return props_OfConceptOperation;
}
break;
case 118:
if (true) {
return props_OperationParm_Concept;
}
break;
case 119:
if (true) {
return props_OperationParm_ConceptList;
}
break;
case 120:
if (true) {
return props_OperationParm_Inclusion;
}
break;
case 121:
if (true) {
return props_OperationParm_LinkQualifier;
}
break;
case 122:
if (true) {
return props_OperationParm_Root;
}
break;
case 123:
if (true) {
return props_OperationParm_SameMetaLevel;
}
break;
case 124:
if (true) {
return props_OperationParm_StopConceptList;
}
break;
case 125:
if (true) {
return props_PoundExpression;
}
break;
case 126:
if (true) {
return props_PropertyAttributeQualifier;
}
break;
case 127:
if (true) {
return props_PropertyId;
}
break;
case 128:
if (true) {
return props_PropertyIdRefExpression;
}
break;
case 129:
if (true) {
return props_PropertyIdentity;
}
break;
case 130:
if (true) {
return props_PropertyNameRefExpression;
}
break;
case 131:
if (true) {
return props_PropertyQualifier;
}
break;
case 132:
if (true) {
return props_Property_HasValue_Enum;
}
break;
case 133:
if (true) {
return props_Property_HasValue_Simple;
}
break;
case 134:
if (true) {
return props_Property_RemoveOperation;
}
break;
case 135:
if (true) {
return props_Property_SetOperation;
}
break;
case 136:
if (true) {
return props_RefConcept_Reference;
}
break;
case 137:
if (true) {
return props_Reference_GetLinkDeclarationOperation;
}
break;
case 138:
if (true) {
return props_Reference_GetResolveInfo;
}
break;
case 139:
if (true) {
return props_Reference_GetRoleOperation;
}
break;
case 140:
if (true) {
return props_Reference_GetTargetOperation;
}
break;
case 141:
if (true) {
return props_SConceptOperation;
}
break;
case 142:
if (true) {
return props_SConceptType;
}
break;
case 143:
if (true) {
return props_SConceptTypeCastExpression;
}
break;
case 144:
if (true) {
return props_SEnumMemberOperation;
}
break;
case 145:
if (true) {
return props_SEnumMemberType;
}
break;
case 146:
if (true) {
return props_SEnumOperation;
}
break;
case 147:
if (true) {
return props_SEnumOperationInvocation;
}
break;
case 148:
if (true) {
return props_SEnum_MemberForNameOperation;
}
break;
case 149:
if (true) {
return props_SEnum_MemberForValueOperation;
}
break;
case 150:
if (true) {
return props_SEnum_MemberOperation;
}
break;
case 151:
if (true) {
return props_SEnum_MembersOperation;
}
break;
case 152:
if (true) {
return props_SLinkAccess;
}
break;
case 153:
if (true) {
return props_SLinkImplicitSelect;
}
break;
case 154:
if (true) {
return props_SLinkListAccess;
}
break;
case 155:
if (true) {
return props_SModelType;
}
break;
case 156:
if (true) {
return props_SNodeCreator;
}
break;
case 157:
if (true) {
return props_SNodeListCreator;
}
break;
case 158:
if (true) {
return props_SNodeListType;
}
break;
case 159:
if (true) {
return props_SNodeOperation;
}
break;
case 160:
if (true) {
return props_SNodeType;
}
break;
case 161:
if (true) {
return props_SNodeTypeCastExpression;
}
break;
case 162:
if (true) {
return props_SPropertyAccess;
}
break;
case 163:
if (true) {
return props_SReferenceType;
}
break;
case 164:
if (true) {
return props_SearchScopeType;
}
break;
case 165:
if (true) {
return props_SearchScope_ContainsOperation;
}
break;
case 166:
if (true) {
return props_SemanticDowncastExpression;
}
break;
case 167:
if (true) {
return props_SubconceptCase;
}
break;
default :
}
}
throw new IllegalStateException();
}
