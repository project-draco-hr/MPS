{
  if (keyEvent.isConsumed())   return;
  if (keyEvent.getKeyCode() == KeyEvent.VK_Z && keyEvent.isControlDown()) {
    if (keyEvent.isShiftDown()) {
      if (UndoManager.instance().isRedoAvailable()) {
        UndoManager.instance().redo(getEditorContext());
      }
    }
 else {
      if (UndoManager.instance().isUndoAvailable()) {
        UndoManager.instance().undo(getEditorContext());
      }
    }
    keyEvent.consume();
    return;
  }
  if (keyEvent.isControlDown() && keyEvent.isAltDown()) {
    if (keyEvent.getKeyCode() == KeyEvent.VK_LEFT) {
      getEditorOpener().openPrevEditorInHistory(myOperationContext);
      keyEvent.consume();
      return;
    }
    if (keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
      getEditorOpener().openNextEditorInHistory(myOperationContext);
      keyEvent.consume();
      return;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_F5 && keyEvent.getModifiers() == 0) {
    CommandProcessor.instance().tryToExecuteLightweightCommand(new Runnable(){
      public void run(){
        SNode sNode=getRootCell().getSNode();
        if (sNode == null) {
          return;
        }
        Highlighter highlighter=getOperationContext().getComponent(Highlighter.class);
        if (highlighter != null) {
          highlighter.resetCheckedState(AbstractEditorComponent.this);
        }
        TypeChecker.getInstance().checkRoot(sNode.getContainingRoot(),true);
        rebuildEditorContent();
      }
    }
);
    keyEvent.consume();
    return;
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_F11 && keyEvent.getModifiers() == 0) {
    relayout();
    keyEvent.consume();
    return;
  }
  CommandProcessor.instance().executeCommand(getEditorContext(),new Runnable(){
    public void run(){
      updateMPSActionsWithKeyStrokes(createActionContext());
      EditorContext editorContext=getEditorContext();
      if (editorContext == null) {
        return;
      }
      if (peekKeyboardHandler().processKeyPressed(editorContext,keyEvent)) {
        keyEvent.consume();
      }
    }
  }
);
  revalidateAndRepaint(false);
}
