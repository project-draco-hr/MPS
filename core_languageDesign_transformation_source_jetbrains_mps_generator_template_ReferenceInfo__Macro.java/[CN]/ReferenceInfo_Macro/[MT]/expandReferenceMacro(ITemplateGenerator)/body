{
  String linkRole=getReferenceRole();
  ReferenceMacro_GetReferent function=myReferenceMacro.getReferentFunction();
  if (function == null) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    return;
  }
  String methodName=TemplateFunctionMethodName.referenceMacro_GetReferent(function.getNode());
  try {
    Object result;
    result=QueryMethodGenerated.invoke(methodName,generator.getGeneratorSessionContext(),new ReferenceMacroContext(getInputNode(),getOutputSourceNode(),myReferenceMacro.getNode(),generator),myReferenceMacro.getModel());
    if (result instanceof SNode) {
      myOutputTargetNode=(SNode)result;
    }
 else     if (result != null) {
      String resolveInfo=(String)result;
      if (resolveInfo.startsWith("[")) {
        String[] modelNameAndTheRest=resolveInfo.split("]");
        if (modelNameAndTheRest.length > 1 || (modelNameAndTheRest.length == 1 && resolveInfo.endsWith("]"))) {
          resolveInfo=resolveInfo.substring(resolveInfo.indexOf("]") + 1).trim();
          String modelName=modelNameAndTheRest[0].substring(1).trim();
          if (modelName.length() > 0) {
            if (!modelName.equals(generator.getOutputModel().getLongName())) {
              myExternalTargetModelReference=ClassPathModelProvider.uidForPackage(modelName);
            }
          }
        }
      }
      myResolveInfoForDynamicResolve=resolveInfo;
    }
  }
 catch (  Throwable t) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    Logger.getLogger(this.getClass()).error(t,myReferenceMacro.getNode());
  }
  if (myOutputTargetNode == null) {
    return;
  }
  if (myOutputTargetNode.getModel() == generator.getInputModel()) {
    SNode outputTargetNode_output=generator.findCopiedOutputNodeForInputNode(myOutputTargetNode);
    if (outputTargetNode_output != null) {
      myOutputTargetNode=outputTargetNode_output;
    }
 else {
      generator.showWarningMessage(getOutputSourceNode(),"reference '" + linkRole + "' to input model in output node "+ getOutputSourceNode().getDebugText());
      generator.showInformationMessage(myOutputTargetNode," -- referent node: " + myOutputTargetNode.getDebugText());
      generator.showInformationMessage(myReferenceMacro.getNode()," -- template node: " + myReferenceMacro.getNode().getDebugText());
      generator.getGeneratorSessionContext().addTransientModelToKeep(generator.getInputModel());
    }
  }
}
