{
  String linkRole=getReferenceRole();
  ReferenceMacro_GetReferent function=myReferenceMacro.getReferentFunction();
  if (function == null) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    return;
  }
  String methodName=TemplateFunctionMethodName.referenceMacro_GetReferent(function.getNode());
  try {
    Object result;
    result=QueryMethodGenerated.invoke(methodName,generator.getGeneratorSessionContext(),new ReferenceMacroContext(getInputNode(),myTemplateReferenceNode,getOutputSourceNode(),generator.getInputModel(),generator),myReferenceMacro.getModel());
    if (result instanceof SNode) {
      myOutputTargetNode=(SNode)result;
    }
 else {
      myResolveInfoForDynamicResolve=(String)result;
    }
  }
 catch (  Throwable t) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    Logger.getLogger(this.getClass()).error(t,myReferenceMacro.getNode());
  }
  if (myOutputTargetNode == null) {
    return;
  }
  if (myOutputTargetNode.getModel() == generator.getInputModel()) {
    SNode outputTargetNode_output=generator.findCopiedOutputNodeForInputNode(myOutputTargetNode);
    if (outputTargetNode_output != null) {
      myOutputTargetNode=outputTargetNode_output;
    }
 else {
      generator.showWarningMessage(getOutputSourceNode(),"reference '" + linkRole + "' to input model in output node "+ getOutputSourceNode().getDebugText());
      generator.showInformationMessage(myOutputTargetNode," -- referent node: " + myOutputTargetNode.getDebugText());
      generator.showInformationMessage(myReferenceMacro.getNode()," -- template node: " + myReferenceMacro.getNode().getDebugText());
      generator.getGeneratorSessionContext().addTransientModelToKeep(generator.getInputModel());
    }
  }
}
