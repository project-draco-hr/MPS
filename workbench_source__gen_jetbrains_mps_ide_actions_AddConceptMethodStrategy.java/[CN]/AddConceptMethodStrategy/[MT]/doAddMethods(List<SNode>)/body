{
  boolean insertion=(myContextMethod != null) && SNodeOperations.getParent(myContextMethod) == myBehavior;
  List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> methods=new ArrayList<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>();
  for (  SNode methodNode : baseMethods) {
    SNode behaviorNode=myBehavior;
    SNode method=ResolveUtil.processMethodToImplement(behaviorNode,methodNode);
    methods.add(new StratergyAddMethodDialog.ContainerStrategy.MethodAddition(SNodeOperations.cast(methodNode,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),method));
    SPropertyOperations.set(method,"isAbstract","" + false);
    SLinkOperations.setTarget(method,"body",SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myBehavior),"jetbrains.mps.baseLanguage.structure.StatementList",null),true);
    SLinkOperations.setTarget(method,"overriddenMethod",SNodeOperations.cast(methodNode,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),false);
    SPropertyOperations.set(method,"isVirtual","" + false);
    if (insertion) {
      ListSequence.fromList(SLinkOperations.getTargets(myBehavior,"method",true)).insertElement(ListSequence.fromList(SLinkOperations.getTargets(myBehavior,"method",true)).indexOf(myContextMethod) + 1,method);
    }
 else {
      ListSequence.fromList(SLinkOperations.getTargets(myBehavior,"method",true)).addElement(method);
    }
  }
  return methods;
}
