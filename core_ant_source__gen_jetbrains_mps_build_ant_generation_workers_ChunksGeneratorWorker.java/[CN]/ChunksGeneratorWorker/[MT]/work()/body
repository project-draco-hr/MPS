{
  ChunksGeneratorWorker.MyEnvironment environment=new ChunksGeneratorWorker.MyEnvironment();
  Map<String,File> libraries=MapSequence.fromMap(new LinkedHashMap<String,File>(16,(float)0.75,false));
  for (  String jar : ListSequence.fromList(myWhatToDo.getLibraryJars())) {
    MapSequence.fromMap(libraries).put(jar,new File(jar));
  }
  for (  Map.Entry<String,File> entry : SetSequence.fromSet(myWhatToDo.getLibraries().entrySet())) {
    MapSequence.fromMap(libraries).put(entry.getKey(),entry.getValue());
  }
  environment.init(myWhatToDo.getMacro(),false,libraries,myWhatToDo.getLogLevel(),new MpsWorker.MyMessageHandlerAppender());
  setEnvironment(environment);
  setupEnvironment();
  setGenerationProperties();
  boolean doneSomething=false;
  Project project=createDummyProject();
  for (  IMapping<List<String>,Boolean> chunk : MapSequence.fromMap(myWhatToDo.getChunks())) {
    List<String> modulePaths=chunk.key();
    LinkedHashSet<IModule> modules=new LinkedHashSet<IModule>();
    for (    String modulePath : ListSequence.fromList(modulePaths)) {
      processModuleFile(new File(modulePath),modules);
    }
    Boolean bootstrap=chunk.value();
    if (bootstrap) {
      warning("Found bootstrap chunk " + chunk.key() + ". Generation may be impossible.");
    }
    MpsWorker.ObjectsToProcess go=new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET,modules,Collections.EMPTY_SET);
    if (go.hasAnythingToGenerate()) {
      generate(project,go);
      doneSomething=true;
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
        }
      }
);
    }
  }
  if (!(doneSomething)) {
    error("Could not find anything to generate.");
  }
  dispose();
  showStatistic();
}
