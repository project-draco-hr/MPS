{
  this.myFieldsByName=MapSequence.fromMap(new HashMap<String,SNode>());
  this.myStaticFieldsByName=MapSequence.fromMap(new HashMap<String,SNode>());
  List<SNode> allFields=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> classifiers=((ClassifierAndSuperClassifiersCache)this.getOwnerCache()).getClassifiers();
  for (  SNode classifier : classifiers) {
    Iterable<SNode> staticFields=((Iterable<SNode>)BHReflection.invoke(classifier,SMethodTrimmedId.create("staticFields",MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),"4_LVZ3pBr7M")));
    ListSequence.fromList(allFields).addSequence(Sequence.fromIterable(staticFields));
    for (    SNode staticField : staticFields) {
      String name=SPropertyOperations.getString(staticField,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
      if (name == null) {
        name="";
      }
      if (!(MapSequence.fromMap(myStaticFieldsByName).containsKey(name))) {
        MapSequence.fromMap(myStaticFieldsByName).put(name,staticField);
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      Iterable<SNode> fields=((Iterable<SNode>)BHReflection.invoke((SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))),SMethodTrimmedId.create("fields",MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"4_LVZ3pC27C")));
      ListSequence.fromList(allFields).addSequence(Sequence.fromIterable(fields));
      for (      SNode field : fields) {
        String name=SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        if (name == null) {
          name="";
        }
        if (!(MapSequence.fromMap(myFieldsByName).containsKey(name))) {
          MapSequence.fromMap(myFieldsByName).put(name,field);
        }
      }
    }
  }
  myDependsOnNodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.fromList(classifiers));
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.fromList(allFields));
}
