{
  this.myFieldsByName=MapSequence.fromMap(new HashMap<String,SNode>());
  this.myStaticFieldsByName=MapSequence.fromMap(new HashMap<String,SNode>());
  List<SNode> allFields=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> classifiers=((ClassifierAndSuperClassifiersCache)this.getOwnerCache()).getClassifiers();
  for (  SNode classifier : classifiers) {
    Iterable<SNode> staticFields=BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),classifier,"jetbrains.mps.baseLanguage.structure.Classifier","call_staticFields_5292274854859223538",new Object[]{});
    ListSequence.fromList(allFields).addSequence(Sequence.fromIterable(staticFields));
    for (    SNode staticField : staticFields) {
      String name=SPropertyOperations.getString(staticField,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
      if (name == null) {
        name="";
      }
      if (!(MapSequence.fromMap(myStaticFieldsByName).containsKey(name))) {
        MapSequence.fromMap(myStaticFieldsByName).put(name,staticField);
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      Iterable<SNode> fields=BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"jetbrains.mps.baseLanguage.structure.ClassConcept","call_fields_5292274854859383272",new Object[]{});
      ListSequence.fromList(allFields).addSequence(Sequence.fromIterable(fields));
      for (      SNode field : fields) {
        String name=SPropertyOperations.getString(field,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
        if (name == null) {
          name="";
        }
        if (!(MapSequence.fromMap(myFieldsByName).containsKey(name))) {
          MapSequence.fromMap(myFieldsByName).put(name,field);
        }
      }
    }
  }
  myDependsOnNodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.fromList(classifiers));
  SetSequence.fromSet(myDependsOnNodes).addSequence(ListSequence.fromList(allFields));
}
