{
  this.myTypeByTypeVariable=MapSequence.fromMap(new HashMap<SNode,SNode>());
  this.myClassifiers=ClassifierAndSuperClassifiersCache.ClassifiersDataSet.getImplementedAndExtended(this.myTopClassifier,this.myTypeByTypeVariable);
  this.myDependsOnNodes=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode classifier : this.myClassifiers) {
    SetSequence.fromSet(this.myDependsOnNodes).addElement(classifier);
    if (SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      for (      SNode type : SLinkOperations.getChildren((SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x117ac45a693L,"typeParameter"))) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(type);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(type,null,false,new SAbstractConcept[]{})));
      }
    }
 else {
      for (      SNode typeVariableDecl : SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(typeVariableDecl);
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")) && !(SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")))) {
      SNode classifierType0=SLinkOperations.getTarget((SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0x10f6353296dL,"superclass"));
      if (classifierType0 != null) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType0);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(classifierType0,null,false,new SAbstractConcept[]{})));
      }
      for (      SNode classifierType1 : SLinkOperations.getChildren((SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0xff2ac0b419L,"implementedInterface"))) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType1);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(classifierType1,null,false,new SAbstractConcept[]{})));
      }
    }
 else     if (SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"))) {
      for (      SNode classifierType : SLinkOperations.getChildren((SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"))),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,0x101eddadad7L,"extendedInterface"))) {
        SetSequence.fromSet(this.myDependsOnNodes).addElement(classifierType);
        SetSequence.fromSet(this.myDependsOnNodes).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(classifierType,null,false,new SAbstractConcept[]{})));
      }
    }
  }
}
