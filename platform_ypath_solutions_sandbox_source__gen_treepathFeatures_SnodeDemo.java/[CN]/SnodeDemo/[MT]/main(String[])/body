{
  final zClosureContext _zClosureContext3=new zClosureContext();
  _zClosureContext3.foo=null;
  TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new SNODE().startTraversal(_zClosureContext3.foo),TreeTraversalFactory.Axis("CHILDREN"),SNODE.child("implements")),TreeTraversalFactory.Axis("CHILDREN"),SNODE.link("intfc")),TreeTraversalFactory.Axis("CHILDREN"),SNODE.child("extends"));
  SLinkOperations.getTargets(SLinkOperations.getTarget(SequenceOperations.getFirst(SLinkOperations.getTargets(_zClosureContext3.foo,"implements",true)),"intfc",false),"extends",true);
  SequenceOperations.map(SequenceOperations.map((SLinkOperations.getTargets(_zClosureContext3.foo,"implements",true)),new zMapper(null,_zClosureContext3)),new zMapper1(null,_zClosureContext3));
  SequenceOperations.map(SequenceOperations.map(SLinkOperations.getTargets(_zClosureContext3.foo,"implements",true),new zMapper2(null,_zClosureContext3)),new zMapper3(null,_zClosureContext3));
  TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new SNODE().startTraversal(_zClosureContext3.foo),TreeTraversalFactory.Axis("CHILDREN"),SNODE.link("extends")),TreeTraversalFactory.Axis("CHILDREN"),SNODE.link("intfc"));
  SequenceOperations.map(SLinkOperations.getTargets(_zClosureContext3.foo,"implements",true),new zMapper4(null,_zClosureContext3));
  new SequenceWithSupplier<SNode>(new zValueSupplier1(null,_zClosureContext3));
  TreeTraversalFactory.Traverse(new SNODE().startTraversal(_zClosureContext3.foo),TreeTraversalFactory.Axis("CHILDREN"));
}
