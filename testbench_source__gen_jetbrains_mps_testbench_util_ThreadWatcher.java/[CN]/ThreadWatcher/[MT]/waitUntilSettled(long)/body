{
  if (base == null) {
    return true;
  }
  if (errors != null) {
    throw new IllegalStateException("Settled already");
  }
  ThreadWatcher.ThreadState current=new ThreadWatcher.ThreadState();
  ThreadWatcher.ThreadState[] diff;
  long step=100;
  long leftMillis=millis;
  do {
    current.captureState();
    diff=current.diff(base);
    if (diff[0].allThreads.isEmpty() && diff[1].allThreads.isEmpty()) {
      return true;
    }
    if (diff[0].allThreads.isEmpty()) {
      break;
    }
    try {
      Thread.sleep(step);
    }
 catch (    InterruptedException ignore) {
    }
    leftMillis-=step;
  }
 while (leftMillis >= 0);
  StringBuilder sb=new StringBuilder();
  sb.append("After ").append(millis).append(" ms. --\n");
  StringBuilder sb2=new StringBuilder();
  String sep2="";
  String pr2="no";
  if (!(diff[0].allThreads.isEmpty())) {
    sb2.append(String.valueOf(diff[0].allThreads.size())).append(" new");
    sep2=", ";
    pr2="";
    sb.append("  New:\n");
    diff[0].dump(sb,"    ");
    sb.append("\n");
  }
  if (!(diff[1].allThreads.isEmpty())) {
    sb2.append(sep2).append(String.valueOf(diff[1].allThreads.size())).append(" killed");
    pr2="";
    sb.append("  Killed:\n");
    diff[1].dump(sb,"    ");
    sb.append("\n");
  }
  sb2.append(pr2).append(" threads");
  this.desc=sb2.toString();
  this.errors=sb.toString();
  return false;
}
