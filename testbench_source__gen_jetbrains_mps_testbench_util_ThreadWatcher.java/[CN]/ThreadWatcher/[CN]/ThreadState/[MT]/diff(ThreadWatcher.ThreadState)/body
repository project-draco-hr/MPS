{
  ThreadWatcher.ThreadState newDiff=new ThreadWatcher.ThreadState();
  ThreadWatcher.ThreadState oldDiff=new ThreadWatcher.ThreadState();
  for (  long id : this.myAllThreads.keys()) {
    if (!((baseLine.myAllThreads.containsKey(id)))) {
      newDiff.myAllThreads.put(id,this.myAllThreads.get(id));
      if (this.myRunningThreads.containsKey(id)) {
        newDiff.myRunningThreads.put(id,myRunningThreads.get(id));
      }
    }
  }
  for (  long id : baseLine.myAllThreads.keys()) {
    if (!((this.myAllThreads.containsKey(id)))) {
      oldDiff.myAllThreads.put(id,baseLine.myAllThreads.get(id));
      if (baseLine.myRunningThreads.containsKey(id)) {
        oldDiff.myRunningThreads.put(id,baseLine.myRunningThreads.get(id));
      }
    }
  }
  for (  long id : this.myRunningThreads.keys()) {
    if (!((baseLine.myRunningThreads.containsKey(id)))) {
      newDiff.myRunningThreads.put(id,this.myRunningThreads.get(id));
      newDiff.myAllThreads.put(id,this.myAllThreads.get(id));
    }
  }
  for (  long id : baseLine.myRunningThreads.keys()) {
    if (!((this.myRunningThreads.containsKey(id)))) {
      oldDiff.myRunningThreads.put(id,baseLine.myRunningThreads.get(id));
      oldDiff.myAllThreads.put(id,baseLine.myAllThreads.get(id));
    }
  }
  return new ThreadWatcher.ThreadState[]{newDiff,oldDiff};
}
