{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractCellSelector;
case 1:
  return myConceptAbstractComponent;
case 2:
return myConceptAbstractPaddingStyleClassItem;
case 3:
return myConceptAbstractStyledTextOperation;
case 4:
return myConceptAppendTextOperation;
case 5:
return myConceptApplyStyleClass;
case 6:
return myConceptApplyStyleClassCondition;
case 7:
return myConceptAttributeStyleClassItem;
case 8:
return myConceptAutoDeletableStyleClassItem;
case 9:
return myConceptBackgroundColorStyleClassItem;
case 10:
return myConceptBaseEditorComponent;
case 11:
return myConceptBaseLineCell;
case 12:
return myConceptBooleanStyleSheetItem;
case 13:
return myConceptBracketColorStyleClassItem;
case 14:
return myConceptCaretPositionParameter;
case 15:
return myConceptCellActionMapDeclaration;
case 16:
return myConceptCellActionMapItem;
case 17:
return myConceptCellActionMap_CanExecuteFunction;
case 18:
return myConceptCellActionMap_ExecuteFunction;
case 19:
return myConceptCellActionMap_FunctionParm_selectedNode;
case 20:
return myConceptCellIdReferenceSelector;
case 21:
return myConceptCellKeyMapDeclaration;
case 22:
return myConceptCellKeyMapItem;
case 23:
return myConceptCellKeyMapKeystroke;
case 24:
return myConceptCellKeyMap_AbstractFunction;
case 25:
return myConceptCellKeyMap_ExecuteFunction;
case 26:
return myConceptCellKeyMap_FunctionParm_selectedNode;
case 27:
return myConceptCellKeyMap_FunctionParm_selectedNodes;
case 28:
return myConceptCellKeyMap_IsApplicableFunction;
case 29:
return myConceptCellLayout;
case 30:
return myConceptCellLayout_Flow;
case 31:
return myConceptCellLayout_Horizontal;
case 32:
return myConceptCellLayout_Indent;
case 33:
return myConceptCellLayout_Indent_Old;
case 34:
return myConceptCellLayout_Superscript;
case 35:
return myConceptCellLayout_Table;
case 36:
return myConceptCellLayout_Vertical;
case 37:
return myConceptCellLayout_VerticalGrid;
case 38:
return myConceptCellMenuComponent;
case 39:
return myConceptCellMenuComponentFeature;
case 40:
return myConceptCellMenuComponentFeature_Link;
case 41:
return myConceptCellMenuComponentFeature_Property;
case 42:
return myConceptCellMenuDescriptor;
case 43:
return myConceptCellMenuPart_Abstract;
case 44:
return myConceptCellMenuPart_AbstractGroup;
case 45:
return myConceptCellMenuPart_AbstractGroup_DescriptionText;
case 46:
return myConceptCellMenuPart_AbstractGroup_MatchingText;
case 47:
return myConceptCellMenuPart_AbstractGroup_Query;
case 48:
return myConceptCellMenuPart_AbstractGroup_parameterObject;
case 49:
return myConceptCellMenuPart_Abstract_editedNode;
case 50:
return myConceptCellMenuPart_ApplySideTransforms;
case 51:
return myConceptCellMenuPart_CellMenuComponent;
case 52:
return myConceptCellMenuPart_Generic_Group;
case 53:
return myConceptCellMenuPart_Generic_Group_Handler;
case 54:
return myConceptCellMenuPart_Generic_Item;
case 55:
return myConceptCellMenuPart_Generic_Item_Handler;
case 56:
return myConceptCellMenuPart_PropertyPostfixHints;
case 57:
return myConceptCellMenuPart_PropertyPostfixHints_GetPostfixes;
case 58:
return myConceptCellMenuPart_PropertyValues;
case 59:
return myConceptCellMenuPart_PropertyValues_GetValues;
case 60:
return myConceptCellMenuPart_ReferentPrimary;
case 61:
return myConceptCellMenuPart_ReplaceChildPrimary;
case 62:
return myConceptCellMenuPart_ReplaceChild_CustomChildConcept;
case 63:
return myConceptCellMenuPart_ReplaceChild_CustomChildConcept_Query;
case 64:
return myConceptCellMenuPart_ReplaceChild_Group;
case 65:
return myConceptCellMenuPart_ReplaceChild_Group_Create;
case 66:
return myConceptCellMenuPart_ReplaceChild_Group_Query;
case 67:
return myConceptCellMenuPart_ReplaceChild_Item;
case 68:
return myConceptCellMenuPart_ReplaceChild_Item_Create;
case 69:
return myConceptCellMenuPart_ReplaceChild_currentChild;
case 70:
return myConceptCellMenuPart_ReplaceChild_defaultConceptOfChild;
case 71:
return myConceptCellMenuPart_ReplaceNode_CustomNodeConcept;
case 72:
return myConceptCellMenuPart_ReplaceNode_Group;
case 73:
return myConceptCellMenuPart_ReplaceNode_Group_Create;
case 74:
return myConceptCellModel_AbstractLabel;
case 75:
return myConceptCellModel_Alternation;
case 76:
return myConceptCellModel_AttributedLinkCell;
case 77:
return myConceptCellModel_AttributedNodeCell;
case 78:
return myConceptCellModel_AttributedPropertyCell;
case 79:
return myConceptCellModel_Block;
case 80:
return myConceptCellModel_BlockEnd;
case 81:
return myConceptCellModel_BlockStart;
case 82:
return myConceptCellModel_Collection;
case 83:
return myConceptCellModel_Component;
case 84:
return myConceptCellModel_Constant;
case 85:
return myConceptCellModel_ContextAssistant;
case 86:
return myConceptCellModel_Custom;
case 87:
return myConceptCellModel_Empty;
case 88:
return myConceptCellModel_Error;
case 89:
return myConceptCellModel_Image;
case 90:
return myConceptCellModel_Indent;
case 91:
return myConceptCellModel_JComponent;
case 92:
return myConceptCellModel_ListWithRole;
case 93:
return myConceptCellModel_ModelAccess;
case 94:
return myConceptCellModel_NextEditor;
case 95:
return myConceptCellModel_NonEmptyProperty;
case 96:
return myConceptCellModel_Property;
case 97:
return myConceptCellModel_ReadOnlyModelAccessor;
case 98:
return myConceptCellModel_RefCell;
case 99:
return myConceptCellModel_RefNode;
case 100:
return myConceptCellModel_RefNodeList;
case 101:
return myConceptCellModel_ReferencePresentation;
case 102:
return myConceptCellModel_TransactionalProperty;
case 103:
return myConceptCellModel_URL;
case 104:
return myConceptCellModel_WithRole;
case 105:
return myConceptColorStyleClassItem;
case 106:
return myConceptConceptEditorContextHints;
case 107:
return myConceptConceptEditorDeclaration;
case 108:
return myConceptConceptEditorHintDeclaration;
case 109:
return myConceptConceptEditorHintDeclarationReference;
case 110:
return myConceptConceptEditorHintDeclarationReferenceExpression;
case 111:
return myConceptConceptFunctionParameter_StyledText;
case 112:
return myConceptConceptFunctionParameter_childNode;
case 113:
return myConceptConceptFunctionParameter_editorContext;
case 114:
return myConceptConceptFunctionParameter_nextNode;
case 115:
return myConceptConceptFunctionParameter_node;
case 116:
return myConceptConceptFunctionParameter_oldText;
case 117:
return myConceptConceptFunctionParameter_parameterObject;
case 118:
return myConceptConceptFunctionParameter_prevNode;
case 119:
return myConceptConceptFunctionParameter_selectedNode;
case 120:
return myConceptConceptFunctionParameter_text;
case 121:
return myConceptContextAssistantMenu;
case 122:
return myConceptContextAssistantMenuContribution;
case 123:
return myConceptContextAssistantMenuPart;
case 124:
return myConceptContextAssistantMenuPart_Action;
case 125:
return myConceptContextAssistantMenuPart_Conditional;
case 126:
return myConceptContextAssistantMenuPart_IncludeMenu;
case 127:
return myConceptContextAssistantMenuPart_SubMenu;
case 128:
return myConceptContextAssistantMenuPart_Super;
case 129:
return myConceptContextAssistantMenuReference;
case 130:
return myConceptContextAssistantMenuReference_Default;
case 131:
return myConceptContextAssistantMenuReference_Named;
case 132:
return myConceptContextAssistantMenu_Default;
case 133:
return myConceptContextAssistantMenu_Named;
case 134:
return myConceptContextExpression_ContextAssistantCondition;
case 135:
return myConceptContextHintsSpecification;
case 136:
return myConceptContextVariable;
case 137:
return myConceptContextVariable_EditorContext;
case 138:
return myConceptContextVariable_Node;
case 139:
return myConceptDefaultBaseLine;
case 140:
return myConceptDefaultCaretPositionStyleClassItem;
case 141:
return myConceptDominatesRecord;
case 142:
return myConceptDrawBorderStyleClassItem;
case 143:
return myConceptDrawBracketsStyleClassItem;
case 144:
return myConceptEditableStyleClassItem;
case 145:
return myConceptEditorCellId;
case 146:
return myConceptEditorCellModel;
case 147:
return myConceptEditorComponentDeclaration;
case 148:
return myConceptEditorComponentDeclarationReference;
case 149:
return myConceptExplicitHintsSpecification;
case 150:
return myConceptFirstPositionAllowedStyleClassItem;
case 151:
return myConceptFloatStyleClassItem;
case 152:
return myConceptFontSizeStyleClassItem;
case 153:
return myConceptFontStyleStyleClassItem;
case 154:
return myConceptForegroundColorStyleClassItem;
case 155:
return myConceptForegroundNullColorStyleClassItem;
case 156:
return myConceptHorizontalAlign;
case 157:
return myConceptHorizontalGapStyleClassItem;
case 158:
return myConceptICellStyle;
case 159:
return myConceptIEditorContextProvider;
case 160:
return myConceptINamedContextAssistantItems;
case 161:
return myConceptINodeProvider;
case 162:
return myConceptIQueryFunction_Color;
case 163:
return myConceptIStyle;
case 164:
return myConceptIStyleContainer;
case 165:
return myConceptIStyleSheetItem;
case 166:
return myConceptIStyleSheetMember;
case 167:
return myConceptIdSelector;
case 168:
return myConceptImagePathProvider;
case 169:
return myConceptIndentLayoutIndentAnchorStyleClassItem;
case 170:
return myConceptIndentLayoutIndentStyleClassItem;
case 171:
return myConceptIndentLayoutNewLineChildrenStyleClassItem;
case 172:
return myConceptIndentLayoutNewLineStyleClassItem;
case 173:
return myConceptIndentLayoutNoWrapClassItem;
case 174:
return myConceptIndentLayoutOnNewLineStyleClassItem;
case 175:
return myConceptIndentLayoutWrapAnchorStyleClassItem;
case 176:
return myConceptInlineEditorComponent;
case 177:
return myConceptInlineStyleDeclaration;
case 178:
return myConceptLastPositionAllowedStyleClassItem;
case 179:
return myConceptLayoutConstraintStyleClassItem;
case 180:
return myConceptMatchingLabelStyleClassItem;
case 181:
return myConceptMaxWidthStyleClassItem;
case 182:
return myConceptModelAccessor;
case 183:
return myConceptNavigatableNodeStyleClassItem;
case 184:
return myConceptNavigatableReferenceStyleClassItem;
case 185:
return myConceptPaddingBottomStyleClassItem;
case 186:
return myConceptPaddingLeftStyleClassItem;
case 187:
return myConceptPaddingRightStyleClassItem;
case 188:
return myConceptPaddingTopStyleClassItem;
case 189:
return myConceptParametersInformationQuery;
case 190:
return myConceptParametersInformationStyleClassItem;
case 191:
return myConceptPositionChildrenStyleClassItem;
case 192:
return myConceptPositionStyleClassItem;
case 193:
return myConceptPreDefinedStyleClassItem;
case 194:
return myConceptPredefinedSelector;
case 195:
return myConceptPropertyDeclarationCellSelector;
case 196:
return myConceptPropertyExpressionCellSelector;
case 197:
return myConceptPunctuationLeftStyleClassItem;
case 198:
return myConceptPunctuationRightStyleClassItem;
case 199:
return myConceptQueryFunction_AttributeStyleParameter;
case 200:
return myConceptQueryFunction_Boolean;
case 201:
return myConceptQueryFunction_CellProvider;
case 202:
return myConceptQueryFunction_Color;
case 203:
return myConceptQueryFunction_ColorComposit;
case 204:
return myConceptQueryFunction_ContextAssistant;
case 205:
return myConceptQueryFunction_ContextAssistantCondition;
case 206:
return myConceptQueryFunction_ContextAssistantExecuteFunction;
case 207:
return myConceptQueryFunction_ContextAssistantTargetNode;
case 208:
return myConceptQueryFunction_ContextAssistantText;
case 209:
return myConceptQueryFunction_ContextAssistant_node;
case 210:
return myConceptQueryFunction_FontStyle;
case 211:
return myConceptQueryFunction_ImagePath;
case 212:
return myConceptQueryFunction_Integer;
case 213:
return myConceptQueryFunction_IsMethodCurrent;
case 214:
return myConceptQueryFunction_JComponent;
case 215:
return myConceptQueryFunction_MethodPresentation;
case 216:
return myConceptQueryFunction_ModelAccess_Getter;
case 217:
return myConceptQueryFunction_ModelAccess_Setter;
case 218:
return myConceptQueryFunction_ModelAccess_Validator;
case 219:
return myConceptQueryFunction_ModuleAndPath;
case 220:
return myConceptQueryFunction_NodeCondition;
case 221:
return myConceptQueryFunction_NodeFactory;
case 222:
return myConceptQueryFunction_NodeListFilter;
case 223:
return myConceptQueryFunction_ParametersList;
case 224:
return myConceptQueryFunction_SNode;
case 225:
return myConceptQueryFunction_SeparatorText;
case 226:
return myConceptQueryFunction_String;
case 227:
return myConceptQueryFunction_Style;
case 228:
return myConceptQueryFunction_StyleParameter;
case 229:
return myConceptQueryFunction_Underlined;
case 230:
return myConceptQueryHintsSpecification;
case 231:
return myConceptRGBColor;
case 232:
return myConceptReadOnlyModelAccessor;
case 233:
return myConceptReadOnlyStyleClassItem;
case 234:
return myConceptRightTransformAnchorTagWrapper;
case 235:
return myConceptScriptKindClassItem;
case 236:
return myConceptSelectInEditorOperation;
case 237:
return myConceptSelectParameter;
case 238:
return myConceptSelectPositionParameter;
case 239:
return myConceptSelectableStyleSheetItem;
case 240:
return myConceptSetBoldOperation;
case 241:
return myConceptSideTransformAnchorTagStyleClassItem;
case 242:
return myConceptStrikeOutStyleSheet;
case 243:
return myConceptStubCellModel_Alternation;
case 244:
return myConceptStubCellModel_Block;
case 245:
return myConceptStubCellModel_Collection;
case 246:
return myConceptStubCellModel_Component;
case 247:
return myConceptStubCellModel_Constant;
case 248:
return myConceptStubCellModel_ContextAssistant;
case 249:
return myConceptStubCellModel_Custom;
case 250:
return myConceptStubCellModel_Error;
case 251:
return myConceptStubCellModel_Image;
case 252:
return myConceptStubCellModel_JComponent;
case 253:
return myConceptStubCellModel_ModelAccess;
case 254:
return myConceptStubCellModel_NonEmptyProperty;
case 255:
return myConceptStubCellModel_Property;
case 256:
return myConceptStubCellModel_ReadOnlyModelAccessor;
case 257:
return myConceptStubCellModel_RefCell;
case 258:
return myConceptStubCellModel_RefNode;
case 259:
return myConceptStubCellModel_RefNodeList;
case 260:
return myConceptStubCellModel_ReferencePresentation;
case 261:
return myConceptStubCellModel_Table;
case 262:
return myConceptStubCellModel_TransactionalProperty;
case 263:
return myConceptStubCellModel_URL;
case 264:
return myConceptStubEditorCellModel;
case 265:
return myConceptStyleAttributeDeclaration;
case 266:
return myConceptStyleAttributeReferenceExpression;
case 267:
return myConceptStyleClass;
case 268:
return myConceptStyleClassItem;
case 269:
return myConceptStyleClassReference;
case 270:
return myConceptStyleClassReferenceList;
case 271:
return myConceptStyleKey;
case 272:
return myConceptStyleKeyPack;
case 273:
return myConceptStyleReference;
case 274:
return myConceptStyleSheet;
case 275:
return myConceptStyleSheetClass;
case 276:
return myConceptStyleSheetClassReference;
case 277:
return myConceptStyledTextType;
case 278:
return myConceptSynchronizeable;
case 279:
return myConceptTableComponentStyleClassItem;
case 280:
return myConceptTextBackgroundColorSelectedStyleClassItem;
case 281:
return myConceptTextBackgroundColorStyleClassItem;
case 282:
return myConceptTransactionPropertyHandler_newValue;
case 283:
return myConceptTransactionPropertyHandler_oldValue;
case 284:
return myConceptTransactionalPropertyHandler;
case 285:
return myConceptUnapplyStyle;
case 286:
return myConceptUnderlinedStyleClassItem;
default :
throw new IllegalStateException();
}
}
