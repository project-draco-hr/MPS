{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0fl.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractCellSelector;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractComponent;
  }
break;
case 2:
if (true) {
return myConceptAbstractPaddingStyleClassItem;
}
break;
case 3:
if (true) {
return myConceptAbstractStyledTextOperation;
}
break;
case 4:
if (true) {
return myConceptAppendTextOperation;
}
break;
case 5:
if (true) {
return myConceptApplyStyleClass;
}
break;
case 6:
if (true) {
return myConceptApplyStyleClassCondition;
}
break;
case 7:
if (true) {
return myConceptAttributeStyleClassItem;
}
break;
case 8:
if (true) {
return myConceptAutoDeletableStyleClassItem;
}
break;
case 9:
if (true) {
return myConceptBackgroundColorStyleClassItem;
}
break;
case 10:
if (true) {
return myConceptBaseEditorComponent;
}
break;
case 11:
if (true) {
return myConceptBaseLineCell;
}
break;
case 12:
if (true) {
return myConceptBooleanStyleSheetItem;
}
break;
case 13:
if (true) {
return myConceptBracketColorStyleClassItem;
}
break;
case 14:
if (true) {
return myConceptCaretPositionParameter;
}
break;
case 15:
if (true) {
return myConceptCellActionMapDeclaration;
}
break;
case 16:
if (true) {
return myConceptCellActionMapItem;
}
break;
case 17:
if (true) {
return myConceptCellActionMap_CanExecuteFunction;
}
break;
case 18:
if (true) {
return myConceptCellActionMap_ExecuteFunction;
}
break;
case 19:
if (true) {
return myConceptCellActionMap_FunctionParm_selectedNode;
}
break;
case 20:
if (true) {
return myConceptCellIdReferenceSelector;
}
break;
case 21:
if (true) {
return myConceptCellKeyMapDeclaration;
}
break;
case 22:
if (true) {
return myConceptCellKeyMapItem;
}
break;
case 23:
if (true) {
return myConceptCellKeyMapKeystroke;
}
break;
case 24:
if (true) {
return myConceptCellKeyMap_AbstractFunction;
}
break;
case 25:
if (true) {
return myConceptCellKeyMap_ExecuteFunction;
}
break;
case 26:
if (true) {
return myConceptCellKeyMap_FunctionParm_selectedNode;
}
break;
case 27:
if (true) {
return myConceptCellKeyMap_FunctionParm_selectedNodes;
}
break;
case 28:
if (true) {
return myConceptCellKeyMap_IsApplicableFunction;
}
break;
case 29:
if (true) {
return myConceptCellLayout;
}
break;
case 30:
if (true) {
return myConceptCellLayout_Flow;
}
break;
case 31:
if (true) {
return myConceptCellLayout_Horizontal;
}
break;
case 32:
if (true) {
return myConceptCellLayout_Indent;
}
break;
case 33:
if (true) {
return myConceptCellLayout_Indent_Old;
}
break;
case 34:
if (true) {
return myConceptCellLayout_Superscript;
}
break;
case 35:
if (true) {
return myConceptCellLayout_Table;
}
break;
case 36:
if (true) {
return myConceptCellLayout_Vertical;
}
break;
case 37:
if (true) {
return myConceptCellLayout_VerticalGrid;
}
break;
case 38:
if (true) {
return myConceptCellMenuComponent;
}
break;
case 39:
if (true) {
return myConceptCellMenuComponentFeature;
}
break;
case 40:
if (true) {
return myConceptCellMenuComponentFeature_Link;
}
break;
case 41:
if (true) {
return myConceptCellMenuComponentFeature_Property;
}
break;
case 42:
if (true) {
return myConceptCellMenuDescriptor;
}
break;
case 43:
if (true) {
return myConceptCellMenuPart_Abstract;
}
break;
case 44:
if (true) {
return myConceptCellMenuPart_AbstractGroup;
}
break;
case 45:
if (true) {
return myConceptCellMenuPart_AbstractGroup_DescriptionText;
}
break;
case 46:
if (true) {
return myConceptCellMenuPart_AbstractGroup_MatchingText;
}
break;
case 47:
if (true) {
return myConceptCellMenuPart_AbstractGroup_Query;
}
break;
case 48:
if (true) {
return myConceptCellMenuPart_AbstractGroup_parameterObject;
}
break;
case 49:
if (true) {
return myConceptCellMenuPart_Abstract_editedNode;
}
break;
case 50:
if (true) {
return myConceptCellMenuPart_ApplySideTransforms;
}
break;
case 51:
if (true) {
return myConceptCellMenuPart_CellMenuComponent;
}
break;
case 52:
if (true) {
return myConceptCellMenuPart_Generic_Group;
}
break;
case 53:
if (true) {
return myConceptCellMenuPart_Generic_Group_Handler;
}
break;
case 54:
if (true) {
return myConceptCellMenuPart_Generic_Item;
}
break;
case 55:
if (true) {
return myConceptCellMenuPart_Generic_Item_Handler;
}
break;
case 56:
if (true) {
return myConceptCellMenuPart_PropertyPostfixHints;
}
break;
case 57:
if (true) {
return myConceptCellMenuPart_PropertyPostfixHints_GetPostfixes;
}
break;
case 58:
if (true) {
return myConceptCellMenuPart_PropertyValues;
}
break;
case 59:
if (true) {
return myConceptCellMenuPart_PropertyValues_GetValues;
}
break;
case 60:
if (true) {
return myConceptCellMenuPart_ReferentPrimary;
}
break;
case 61:
if (true) {
return myConceptCellMenuPart_ReplaceChildPrimary;
}
break;
case 62:
if (true) {
return myConceptCellMenuPart_ReplaceChild_CustomChildConcept;
}
break;
case 63:
if (true) {
return myConceptCellMenuPart_ReplaceChild_CustomChildConcept_Query;
}
break;
case 64:
if (true) {
return myConceptCellMenuPart_ReplaceChild_Group;
}
break;
case 65:
if (true) {
return myConceptCellMenuPart_ReplaceChild_Group_Create;
}
break;
case 66:
if (true) {
return myConceptCellMenuPart_ReplaceChild_Group_Query;
}
break;
case 67:
if (true) {
return myConceptCellMenuPart_ReplaceChild_Item;
}
break;
case 68:
if (true) {
return myConceptCellMenuPart_ReplaceChild_Item_Create;
}
break;
case 69:
if (true) {
return myConceptCellMenuPart_ReplaceChild_currentChild;
}
break;
case 70:
if (true) {
return myConceptCellMenuPart_ReplaceChild_defaultConceptOfChild;
}
break;
case 71:
if (true) {
return myConceptCellMenuPart_ReplaceNode_CustomNodeConcept;
}
break;
case 72:
if (true) {
return myConceptCellMenuPart_ReplaceNode_Group;
}
break;
case 73:
if (true) {
return myConceptCellMenuPart_ReplaceNode_Group_Create;
}
break;
case 74:
if (true) {
return myConceptCellModel_AbstractLabel;
}
break;
case 75:
if (true) {
return myConceptCellModel_Alternation;
}
break;
case 76:
if (true) {
return myConceptCellModel_AttributedLinkCell;
}
break;
case 77:
if (true) {
return myConceptCellModel_AttributedNodeCell;
}
break;
case 78:
if (true) {
return myConceptCellModel_AttributedPropertyCell;
}
break;
case 79:
if (true) {
return myConceptCellModel_Block;
}
break;
case 80:
if (true) {
return myConceptCellModel_BlockEnd;
}
break;
case 81:
if (true) {
return myConceptCellModel_BlockStart;
}
break;
case 82:
if (true) {
return myConceptCellModel_Collection;
}
break;
case 83:
if (true) {
return myConceptCellModel_Component;
}
break;
case 84:
if (true) {
return myConceptCellModel_Constant;
}
break;
case 85:
if (true) {
return myConceptCellModel_ContextAssistant;
}
break;
case 86:
if (true) {
return myConceptCellModel_Custom;
}
break;
case 87:
if (true) {
return myConceptCellModel_Empty;
}
break;
case 88:
if (true) {
return myConceptCellModel_Error;
}
break;
case 89:
if (true) {
return myConceptCellModel_Image;
}
break;
case 90:
if (true) {
return myConceptCellModel_Indent;
}
break;
case 91:
if (true) {
return myConceptCellModel_JComponent;
}
break;
case 92:
if (true) {
return myConceptCellModel_ListWithRole;
}
break;
case 93:
if (true) {
return myConceptCellModel_ModelAccess;
}
break;
case 94:
if (true) {
return myConceptCellModel_NextEditor;
}
break;
case 95:
if (true) {
return myConceptCellModel_NonEmptyProperty;
}
break;
case 96:
if (true) {
return myConceptCellModel_Property;
}
break;
case 97:
if (true) {
return myConceptCellModel_ReadOnlyModelAccessor;
}
break;
case 98:
if (true) {
return myConceptCellModel_RefCell;
}
break;
case 99:
if (true) {
return myConceptCellModel_RefNode;
}
break;
case 100:
if (true) {
return myConceptCellModel_RefNodeList;
}
break;
case 101:
if (true) {
return myConceptCellModel_ReferencePresentation;
}
break;
case 102:
if (true) {
return myConceptCellModel_TransactionalProperty;
}
break;
case 103:
if (true) {
return myConceptCellModel_URL;
}
break;
case 104:
if (true) {
return myConceptCellModel_WithRole;
}
break;
case 105:
if (true) {
return myConceptColorStyleClassItem;
}
break;
case 106:
if (true) {
return myConceptConceptEditorContextHints;
}
break;
case 107:
if (true) {
return myConceptConceptEditorDeclaration;
}
break;
case 108:
if (true) {
return myConceptConceptEditorHintDeclaration;
}
break;
case 109:
if (true) {
return myConceptConceptEditorHintDeclarationReference;
}
break;
case 110:
if (true) {
return myConceptConceptEditorHintDeclarationReferenceExpression;
}
break;
case 111:
if (true) {
return myConceptConceptFunctionParameter_StyledText;
}
break;
case 112:
if (true) {
return myConceptConceptFunctionParameter_childNode;
}
break;
case 113:
if (true) {
return myConceptConceptFunctionParameter_editorContext;
}
break;
case 114:
if (true) {
return myConceptConceptFunctionParameter_nextNode;
}
break;
case 115:
if (true) {
return myConceptConceptFunctionParameter_node;
}
break;
case 116:
if (true) {
return myConceptConceptFunctionParameter_oldText;
}
break;
case 117:
if (true) {
return myConceptConceptFunctionParameter_parameterObject;
}
break;
case 118:
if (true) {
return myConceptConceptFunctionParameter_prevNode;
}
break;
case 119:
if (true) {
return myConceptConceptFunctionParameter_selectedNode;
}
break;
case 120:
if (true) {
return myConceptConceptFunctionParameter_text;
}
break;
case 121:
if (true) {
return myConceptContextAssistantMenu;
}
break;
case 122:
if (true) {
return myConceptContextAssistantMenuContribution;
}
break;
case 123:
if (true) {
return myConceptContextAssistantMenuPart;
}
break;
case 124:
if (true) {
return myConceptContextAssistantMenuPart_Action;
}
break;
case 125:
if (true) {
return myConceptContextAssistantMenuPart_Conditional;
}
break;
case 126:
if (true) {
return myConceptContextAssistantMenuPart_IncludeMenu;
}
break;
case 127:
if (true) {
return myConceptContextAssistantMenuPart_SubMenu;
}
break;
case 128:
if (true) {
return myConceptContextAssistantMenuPart_Super;
}
break;
case 129:
if (true) {
return myConceptContextAssistantMenuReference;
}
break;
case 130:
if (true) {
return myConceptContextAssistantMenuReference_Default;
}
break;
case 131:
if (true) {
return myConceptContextAssistantMenuReference_Named;
}
break;
case 132:
if (true) {
return myConceptContextAssistantMenu_Default;
}
break;
case 133:
if (true) {
return myConceptContextAssistantMenu_Named;
}
break;
case 134:
if (true) {
return myConceptContextExpression_ContextAssistantCondition;
}
break;
case 135:
if (true) {
return myConceptContextHintsSpecification;
}
break;
case 136:
if (true) {
return myConceptContextVariable;
}
break;
case 137:
if (true) {
return myConceptContextVariable_EditorContext;
}
break;
case 138:
if (true) {
return myConceptContextVariable_Node;
}
break;
case 139:
if (true) {
return myConceptDefaultBaseLine;
}
break;
case 140:
if (true) {
return myConceptDefaultCaretPositionStyleClassItem;
}
break;
case 141:
if (true) {
return myConceptDominatesRecord;
}
break;
case 142:
if (true) {
return myConceptDrawBorderStyleClassItem;
}
break;
case 143:
if (true) {
return myConceptDrawBracketsStyleClassItem;
}
break;
case 144:
if (true) {
return myConceptEditableStyleClassItem;
}
break;
case 145:
if (true) {
return myConceptEditorCellId;
}
break;
case 146:
if (true) {
return myConceptEditorCellModel;
}
break;
case 147:
if (true) {
return myConceptEditorComponentDeclaration;
}
break;
case 148:
if (true) {
return myConceptEditorComponentDeclarationReference;
}
break;
case 149:
if (true) {
return myConceptExplicitHintsSpecification;
}
break;
case 150:
if (true) {
return myConceptFirstPositionAllowedStyleClassItem;
}
break;
case 151:
if (true) {
return myConceptFloatStyleClassItem;
}
break;
case 152:
if (true) {
return myConceptFontSizeStyleClassItem;
}
break;
case 153:
if (true) {
return myConceptFontStyleStyleClassItem;
}
break;
case 154:
if (true) {
return myConceptForegroundColorStyleClassItem;
}
break;
case 155:
if (true) {
return myConceptForegroundNullColorStyleClassItem;
}
break;
case 156:
if (true) {
return myConceptHorizontalAlign;
}
break;
case 157:
if (true) {
return myConceptHorizontalGapStyleClassItem;
}
break;
case 158:
if (true) {
return myConceptICellStyle;
}
break;
case 159:
if (true) {
return myConceptIEditorContextProvider;
}
break;
case 160:
if (true) {
return myConceptINamedContextAssistantItems;
}
break;
case 161:
if (true) {
return myConceptINodeProvider;
}
break;
case 162:
if (true) {
return myConceptIQueryFunction_Color;
}
break;
case 163:
if (true) {
return myConceptIStyle;
}
break;
case 164:
if (true) {
return myConceptIStyleContainer;
}
break;
case 165:
if (true) {
return myConceptIStyleSheetItem;
}
break;
case 166:
if (true) {
return myConceptIStyleSheetMember;
}
break;
case 167:
if (true) {
return myConceptIdSelector;
}
break;
case 168:
if (true) {
return myConceptImagePathProvider;
}
break;
case 169:
if (true) {
return myConceptIndentLayoutIndentAnchorStyleClassItem;
}
break;
case 170:
if (true) {
return myConceptIndentLayoutIndentStyleClassItem;
}
break;
case 171:
if (true) {
return myConceptIndentLayoutNewLineChildrenStyleClassItem;
}
break;
case 172:
if (true) {
return myConceptIndentLayoutNewLineStyleClassItem;
}
break;
case 173:
if (true) {
return myConceptIndentLayoutNoWrapClassItem;
}
break;
case 174:
if (true) {
return myConceptIndentLayoutOnNewLineStyleClassItem;
}
break;
case 175:
if (true) {
return myConceptIndentLayoutWrapAnchorStyleClassItem;
}
break;
case 176:
if (true) {
return myConceptInlineEditorComponent;
}
break;
case 177:
if (true) {
return myConceptInlineStyleDeclaration;
}
break;
case 178:
if (true) {
return myConceptLastPositionAllowedStyleClassItem;
}
break;
case 179:
if (true) {
return myConceptLayoutConstraintStyleClassItem;
}
break;
case 180:
if (true) {
return myConceptMatchingLabelStyleClassItem;
}
break;
case 181:
if (true) {
return myConceptMaxWidthStyleClassItem;
}
break;
case 182:
if (true) {
return myConceptModelAccessor;
}
break;
case 183:
if (true) {
return myConceptNavigatableNodeStyleClassItem;
}
break;
case 184:
if (true) {
return myConceptNavigatableReferenceStyleClassItem;
}
break;
case 185:
if (true) {
return myConceptPaddingBottomStyleClassItem;
}
break;
case 186:
if (true) {
return myConceptPaddingLeftStyleClassItem;
}
break;
case 187:
if (true) {
return myConceptPaddingRightStyleClassItem;
}
break;
case 188:
if (true) {
return myConceptPaddingTopStyleClassItem;
}
break;
case 189:
if (true) {
return myConceptParametersInformationQuery;
}
break;
case 190:
if (true) {
return myConceptParametersInformationStyleClassItem;
}
break;
case 191:
if (true) {
return myConceptPositionChildrenStyleClassItem;
}
break;
case 192:
if (true) {
return myConceptPositionStyleClassItem;
}
break;
case 193:
if (true) {
return myConceptPreDefinedStyleClassItem;
}
break;
case 194:
if (true) {
return myConceptPredefinedSelector;
}
break;
case 195:
if (true) {
return myConceptPropertyDeclarationCellSelector;
}
break;
case 196:
if (true) {
return myConceptPropertyExpressionCellSelector;
}
break;
case 197:
if (true) {
return myConceptPunctuationLeftStyleClassItem;
}
break;
case 198:
if (true) {
return myConceptPunctuationRightStyleClassItem;
}
break;
case 199:
if (true) {
return myConceptQueryFunction_AttributeStyleParameter;
}
break;
case 200:
if (true) {
return myConceptQueryFunction_Boolean;
}
break;
case 201:
if (true) {
return myConceptQueryFunction_CellProvider;
}
break;
case 202:
if (true) {
return myConceptQueryFunction_Color;
}
break;
case 203:
if (true) {
return myConceptQueryFunction_ColorComposit;
}
break;
case 204:
if (true) {
return myConceptQueryFunction_ContextAssistant;
}
break;
case 205:
if (true) {
return myConceptQueryFunction_ContextAssistantCondition;
}
break;
case 206:
if (true) {
return myConceptQueryFunction_ContextAssistantExecuteFunction;
}
break;
case 207:
if (true) {
return myConceptQueryFunction_ContextAssistantTargetNode;
}
break;
case 208:
if (true) {
return myConceptQueryFunction_ContextAssistantText;
}
break;
case 209:
if (true) {
return myConceptQueryFunction_ContextAssistant_node;
}
break;
case 210:
if (true) {
return myConceptQueryFunction_FontStyle;
}
break;
case 211:
if (true) {
return myConceptQueryFunction_ImagePath;
}
break;
case 212:
if (true) {
return myConceptQueryFunction_Integer;
}
break;
case 213:
if (true) {
return myConceptQueryFunction_IsMethodCurrent;
}
break;
case 214:
if (true) {
return myConceptQueryFunction_JComponent;
}
break;
case 215:
if (true) {
return myConceptQueryFunction_MethodPresentation;
}
break;
case 216:
if (true) {
return myConceptQueryFunction_ModelAccess_Getter;
}
break;
case 217:
if (true) {
return myConceptQueryFunction_ModelAccess_Setter;
}
break;
case 218:
if (true) {
return myConceptQueryFunction_ModelAccess_Validator;
}
break;
case 219:
if (true) {
return myConceptQueryFunction_ModuleAndPath;
}
break;
case 220:
if (true) {
return myConceptQueryFunction_NodeCondition;
}
break;
case 221:
if (true) {
return myConceptQueryFunction_NodeFactory;
}
break;
case 222:
if (true) {
return myConceptQueryFunction_NodeListFilter;
}
break;
case 223:
if (true) {
return myConceptQueryFunction_ParametersList;
}
break;
case 224:
if (true) {
return myConceptQueryFunction_SNode;
}
break;
case 225:
if (true) {
return myConceptQueryFunction_SeparatorText;
}
break;
case 226:
if (true) {
return myConceptQueryFunction_String;
}
break;
case 227:
if (true) {
return myConceptQueryFunction_Style;
}
break;
case 228:
if (true) {
return myConceptQueryFunction_StyleParameter;
}
break;
case 229:
if (true) {
return myConceptQueryFunction_Underlined;
}
break;
case 230:
if (true) {
return myConceptQueryHintsSpecification;
}
break;
case 231:
if (true) {
return myConceptRGBColor;
}
break;
case 232:
if (true) {
return myConceptReadOnlyModelAccessor;
}
break;
case 233:
if (true) {
return myConceptReadOnlyStyleClassItem;
}
break;
case 234:
if (true) {
return myConceptRightTransformAnchorTagWrapper;
}
break;
case 235:
if (true) {
return myConceptScriptKindClassItem;
}
break;
case 236:
if (true) {
return myConceptSelectInEditorOperation;
}
break;
case 237:
if (true) {
return myConceptSelectParameter;
}
break;
case 238:
if (true) {
return myConceptSelectPositionParameter;
}
break;
case 239:
if (true) {
return myConceptSelectableStyleSheetItem;
}
break;
case 240:
if (true) {
return myConceptSetBoldOperation;
}
break;
case 241:
if (true) {
return myConceptSideTransformAnchorTagStyleClassItem;
}
break;
case 242:
if (true) {
return myConceptStrikeOutStyleSheet;
}
break;
case 243:
if (true) {
return myConceptStubCellModel_Alternation;
}
break;
case 244:
if (true) {
return myConceptStubCellModel_Block;
}
break;
case 245:
if (true) {
return myConceptStubCellModel_Collection;
}
break;
case 246:
if (true) {
return myConceptStubCellModel_Component;
}
break;
case 247:
if (true) {
return myConceptStubCellModel_Constant;
}
break;
case 248:
if (true) {
return myConceptStubCellModel_ContextAssistant;
}
break;
case 249:
if (true) {
return myConceptStubCellModel_Custom;
}
break;
case 250:
if (true) {
return myConceptStubCellModel_Error;
}
break;
case 251:
if (true) {
return myConceptStubCellModel_Image;
}
break;
case 252:
if (true) {
return myConceptStubCellModel_JComponent;
}
break;
case 253:
if (true) {
return myConceptStubCellModel_ModelAccess;
}
break;
case 254:
if (true) {
return myConceptStubCellModel_NonEmptyProperty;
}
break;
case 255:
if (true) {
return myConceptStubCellModel_Property;
}
break;
case 256:
if (true) {
return myConceptStubCellModel_ReadOnlyModelAccessor;
}
break;
case 257:
if (true) {
return myConceptStubCellModel_RefCell;
}
break;
case 258:
if (true) {
return myConceptStubCellModel_RefNode;
}
break;
case 259:
if (true) {
return myConceptStubCellModel_RefNodeList;
}
break;
case 260:
if (true) {
return myConceptStubCellModel_ReferencePresentation;
}
break;
case 261:
if (true) {
return myConceptStubCellModel_Table;
}
break;
case 262:
if (true) {
return myConceptStubCellModel_TransactionalProperty;
}
break;
case 263:
if (true) {
return myConceptStubCellModel_URL;
}
break;
case 264:
if (true) {
return myConceptStubEditorCellModel;
}
break;
case 265:
if (true) {
return myConceptStyleAttributeDeclaration;
}
break;
case 266:
if (true) {
return myConceptStyleAttributeReferenceExpression;
}
break;
case 267:
if (true) {
return myConceptStyleClass;
}
break;
case 268:
if (true) {
return myConceptStyleClassItem;
}
break;
case 269:
if (true) {
return myConceptStyleClassReference;
}
break;
case 270:
if (true) {
return myConceptStyleClassReferenceList;
}
break;
case 271:
if (true) {
return myConceptStyleKey;
}
break;
case 272:
if (true) {
return myConceptStyleKeyPack;
}
break;
case 273:
if (true) {
return myConceptStyleReference;
}
break;
case 274:
if (true) {
return myConceptStyleSheet;
}
break;
case 275:
if (true) {
return myConceptStyleSheetClass;
}
break;
case 276:
if (true) {
return myConceptStyleSheetClassReference;
}
break;
case 277:
if (true) {
return myConceptStyledTextType;
}
break;
case 278:
if (true) {
return myConceptSynchronizeable;
}
break;
case 279:
if (true) {
return myConceptTableComponentStyleClassItem;
}
break;
case 280:
if (true) {
return myConceptTextBackgroundColorSelectedStyleClassItem;
}
break;
case 281:
if (true) {
return myConceptTextBackgroundColorStyleClassItem;
}
break;
case 282:
if (true) {
return myConceptTransactionPropertyHandler_newValue;
}
break;
case 283:
if (true) {
return myConceptTransactionPropertyHandler_oldValue;
}
break;
case 284:
if (true) {
return myConceptTransactionalPropertyHandler;
}
break;
case 285:
if (true) {
return myConceptUnapplyStyle;
}
break;
case 286:
if (true) {
return myConceptUnderlinedStyleClassItem;
}
break;
default :
}
}
return null;
}
