{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  try {
    Iterable<SModelDescriptor> models=CollectionSequence.fromCollection(scope.getModules()).translate(new ITranslator2<IModule,SModelDescriptor>(){
      public Iterable<SModelDescriptor> translate(      IModule it){
        return it.getOwnModelDescriptors();
      }
    }
).concat(CollectionSequence.fromCollection(scope.getModels()));
    List<SNode> roots=Sequence.fromIterable(models).translate(new ITranslator2<SModelDescriptor,SNode>(){
      public Iterable<SNode> translate(      SModelDescriptor it){
        return it.getSModel().roots();
      }
    }
).concat(CollectionSequence.fromCollection(scope.getRoots())).toListSequence();
    monitor.start("searching references in " + scope.getPresentation(),ListSequence.fromList(roots).count());
    for (    SNode root : ListSequence.fromList(roots)) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(((SNode)root),null,true,new String[]{})));
      if (monitor.isCanceled()) {
        return result;
      }
      monitor.advance(1);
    }
  }
  finally {
    monitor.done();
  }
  return result;
}
