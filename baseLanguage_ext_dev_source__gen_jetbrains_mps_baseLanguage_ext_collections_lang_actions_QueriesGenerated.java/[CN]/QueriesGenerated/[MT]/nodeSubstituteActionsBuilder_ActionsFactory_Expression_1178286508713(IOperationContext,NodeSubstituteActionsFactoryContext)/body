{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_parameterObject.getParentNode(),_parameterObject.getCurrentTargetNode(),_parameterObject.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode direction=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",_parameterObject.getCurrentTargetNode());
        SPropertyOperations.set(direction,"value","" + (true));
        return direction;
      }
      public String getDescriptionText(      String pattern){
        return "Sort in ascending order";
      }
      public String getMatchingText(      String pattern){
        return "asc";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_parameterObject.getParentNode(),_parameterObject.getCurrentTargetNode(),_parameterObject.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode direction=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",_parameterObject.getCurrentTargetNode());
        SPropertyOperations.set(direction,"value","" + (false));
        return direction;
      }
      public String getDescriptionText(      String pattern){
        return "Sort in descending order";
      }
      public String getMatchingText(      String pattern){
        return "desc";
      }
    }
);
  }
  return result;
}
