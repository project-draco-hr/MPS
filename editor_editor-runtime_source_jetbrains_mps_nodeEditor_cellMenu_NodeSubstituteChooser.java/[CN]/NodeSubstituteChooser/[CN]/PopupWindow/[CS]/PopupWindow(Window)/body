{
  super(owner);
  getOwner().addComponentListener(myComponentListener);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setFont(EditorSettings.getInstance().getDefaultEditorFont());
  myList.setBackground(BACKGROUND_COLOR);
  myList.setForeground(FOREGROUND_COLOR);
  myList.setSelectionBackground(SELECTED_BACKGROUND_COLOR);
  myList.setSelectionForeground(SELECTED_FOREGROUND_COLOR);
  myList.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      repaintPopupMenu();
    }
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable(){
          @Override public void run(){
            doSubstituteSelection();
          }
        }
);
      }
    }
  }
);
  myList.setCellRenderer(getCellRenderer());
  add(myScroller);
  myScroller.getHorizontalScrollBar().setFocusable(false);
  myScroller.getVerticalScrollBar().setFocusable(false);
  myList.setFocusable(false);
  setLayout(new AbstractLayoutManager(){
    @Override public Dimension preferredLayoutSize(    Container parent){
      int height=myScroller.getPreferredSize().height;
      int width=myScroller.getPreferredSize().width;
      if (myList.getModel().getSize() > myList.getVisibleRowCount()) {
        height-=myList.getFixedCellHeight() / 2;
      }
      return new Dimension(width,height);
    }
    @Override public void layoutContainer(    Container parent){
      relayout();
    }
  }
);
}
