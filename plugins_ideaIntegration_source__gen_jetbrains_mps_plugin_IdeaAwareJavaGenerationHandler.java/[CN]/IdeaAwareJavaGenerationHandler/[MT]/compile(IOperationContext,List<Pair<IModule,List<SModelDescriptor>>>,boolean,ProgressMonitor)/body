{
  try {
    int amount=2;
    if (generationOK) {
      amount+=input.size() + 1;
    }
    monitor.start("Compiling in IDEA",amount);
    boolean compiledSuccessfully=generationOK;
    boolean[] ideaIsFresh=new boolean[]{false};
    writeFiles(monitor.subTask(1));
    monitor.advance(0);
    IProjectHandler projectHandler=getProjectHandler(operationContext.getProject());
    if (generationOK) {
      long compilationStart=System.currentTimeMillis();
      boolean needToReload=false;
      for (      Pair<IModule,List<SModelDescriptor>> moduleListPair : input) {
        IModule module=moduleListPair.o1;
        if (module != null && module.reloadClassesAfterGeneration()) {
          needToReload=true;
        }
        boolean compilationResult=compileModule(module,projectHandler,ideaIsFresh,monitor.subTask(1));
        monitor.advance(0);
        compiledSuccessfully=compiledSuccessfully && compilationResult;
      }
      if (compiledSuccessfully && needToReload) {
        reloadClasses(monitor.subTask(1));
        monitor.advance(0);
      }
 else {
        monitor.advance(1);
      }
      info("Compilation finished in " + (System.currentTimeMillis() - compilationStart) + " ms");
    }
    if (isIDEAPresent(projectHandler) && !(ideaIsFresh[0])) {
      projectHandler.refreshFS();
      monitor.advance(1);
    }
    return compiledSuccessfully;
  }
  finally {
    monitor.done();
  }
}
