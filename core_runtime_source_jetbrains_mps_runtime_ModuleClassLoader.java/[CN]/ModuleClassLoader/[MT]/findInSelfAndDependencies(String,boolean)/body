{
  if (myModule.canLoadFromSelf()) {
synchronized (LOADING_LOCK) {
      Class c=findLoadedClass(name);
      if (c != null)       return c;
      byte[] bytes=myModule.findClassBytes(name);
      if (bytes != null) {
        String pack=NameUtil.namespaceFromLongName(name);
        if (getPackage(pack) == null) {
          definePackage(pack,null,null,null,null,null,null,null);
        }
        ClassLoaderManager.getInstance().classLoaded(name,((ClassLoadingModule)myModule).getModuleReference());
        return defineClass(name,bytes,0,bytes.length,ProtectionDomainUtil.loadedClassDomain());
      }
    }
  }
  if (selfOnly)   throw new ClassNotFoundException(name);
  List<IClassLoadingModule> queue=new ArrayList<IClassLoadingModule>();
  for (  IClassLoadingModule m : myModule.getClassLoadingDependencies()) {
    if (m.equals(myModule))     continue;
    if (!m.canLoad())     continue;
    if (m.canLoadFromSelf() && m.canFindClass(name)) {
      return m.getClassLoader().findInSelfAndDependencies(name,true);
    }
 else {
      queue.add(m);
    }
  }
  for (  IClassLoadingModule m : queue) {
    try {
      return m.getClassLoader().findInSelfAndDependencies(name,false);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  if (getParent() == ModuleClassLoader.class.getClassLoader())   throw new ClassNotFoundException(name);
  return getParent().loadClass(name);
}
