{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0ee.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbandonInput_RuleConsequence;
      }
    break;
case 1:
  if (true) {
    return props_AbstractMacro;
  }
break;
case 2:
if (true) {
return props_BaseMappingRule;
}
break;
case 3:
if (true) {
return props_BaseMappingRule_Condition;
}
break;
case 4:
if (true) {
return props_ContextVariableDeclaration;
}
break;
case 5:
if (true) {
return props_ContextVariableProvider;
}
break;
case 6:
if (true) {
return props_CopySrcListMacro;
}
break;
case 7:
if (true) {
return props_CopySrcNodeMacro;
}
break;
case 8:
if (true) {
return props_CreateRootRule;
}
break;
case 9:
if (true) {
return props_CreateRootRule_Condition;
}
break;
case 10:
if (true) {
return props_DismissTopMappingRule;
}
break;
case 11:
if (true) {
return props_DropAttributeRule;
}
break;
case 12:
if (true) {
return props_DropAttributeRule_Condition;
}
break;
case 13:
if (true) {
return props_DropRootRule;
}
break;
case 14:
if (true) {
return props_DropRootRule_Condition;
}
break;
case 15:
if (true) {
return props_ExportEntry;
}
break;
case 16:
if (true) {
return props_ExportLabel;
}
break;
case 17:
if (true) {
return props_ExportLabelParameter_inputNode;
}
break;
case 18:
if (true) {
return props_ExportLabelParameter_keeper;
}
break;
case 19:
if (true) {
return props_ExportLabelParameter_outputNode;
}
break;
case 20:
if (true) {
return props_ExportMacro;
}
break;
case 21:
if (true) {
return props_GeneratorDebug_LabelEntry;
}
break;
case 22:
if (true) {
return props_GeneratorDebug_Mappings;
}
break;
case 23:
if (true) {
return props_GeneratorDebug_NodeMapEntry;
}
break;
case 24:
if (true) {
return props_GeneratorDebug_NodeRef;
}
break;
case 25:
if (true) {
return props_GeneratorInternal_AbstractReferenceDescriptor;
}
break;
case 26:
if (true) {
return props_GeneratorInternal_InternalReferenceDescriptor;
}
break;
case 27:
if (true) {
return props_GeneratorInternal_PropertyDescriptor;
}
break;
case 28:
if (true) {
return props_GeneratorInternal_ReferenceDescriptor;
}
break;
case 29:
if (true) {
return props_GeneratorMessage;
}
break;
case 30:
if (true) {
return props_GeneratorParameterReference;
}
break;
case 31:
if (true) {
return props_IGeneratorParameter;
}
break;
case 32:
if (true) {
return props_IParameterizedTemplate;
}
break;
case 33:
if (true) {
return props_ITemplateCall;
}
break;
case 34:
if (true) {
return props_IfMacro;
}
break;
case 35:
if (true) {
return props_IfMacro_Condition;
}
break;
case 36:
if (true) {
return props_IncludeMacro;
}
break;
case 37:
if (true) {
return props_InlineSwitch_Case;
}
break;
case 38:
if (true) {
return props_InlineSwitch_RuleConsequence;
}
break;
case 39:
if (true) {
return props_InlineTemplateWithContext_RuleConsequence;
}
break;
case 40:
if (true) {
return props_InlineTemplate_RuleConsequence;
}
break;
case 41:
if (true) {
return props_InsertMacro;
}
break;
case 42:
if (true) {
return props_InsertMacro_CreateNodeQuery;
}
break;
case 43:
if (true) {
return props_LabelMacro;
}
break;
case 44:
if (true) {
return props_LoopMacro;
}
break;
case 45:
if (true) {
return props_MapSrcListMacro;
}
break;
case 46:
if (true) {
return props_MapSrcMacro_MapperFunction;
}
break;
case 47:
if (true) {
return props_MapSrcMacro_PostMapperFunction;
}
break;
case 48:
if (true) {
return props_MapSrcNodeMacro;
}
break;
case 49:
if (true) {
return props_MappingConfiguration;
}
break;
case 50:
if (true) {
return props_MappingConfiguration_Condition;
}
break;
case 51:
if (true) {
return props_MappingLabelDeclaration;
}
break;
case 52:
if (true) {
return props_MappingScript;
}
break;
case 53:
if (true) {
return props_MappingScriptReference;
}
break;
case 54:
if (true) {
return props_MappingScript_CodeBlock;
}
break;
case 55:
if (true) {
return props_MarshalFunction;
}
break;
case 56:
if (true) {
return props_ModelIdentity;
}
break;
case 57:
if (true) {
return props_NodeIdentity;
}
break;
case 58:
if (true) {
return props_NodeMacro;
}
break;
case 59:
if (true) {
return props_PatternReduction_MappingRule;
}
break;
case 60:
if (true) {
return props_PropertyMacro;
}
break;
case 61:
if (true) {
return props_PropertyMacro_GetPropertyValue;
}
break;
case 62:
if (true) {
return props_ReductionRule;
}
break;
case 63:
if (true) {
return props_Reduction_MappingRule;
}
break;
case 64:
if (true) {
return props_ReferenceMacro;
}
break;
case 65:
if (true) {
return props_ReferenceMacro_GetReferent;
}
break;
case 66:
if (true) {
return props_RootTemplateAnnotation;
}
break;
case 67:
if (true) {
return props_Root_MappingRule;
}
break;
case 68:
if (true) {
return props_RuleConsequence;
}
break;
case 69:
if (true) {
return props_SourceSubstituteMacro;
}
break;
case 70:
if (true) {
return props_SourceSubstituteMacro_SourceNodeQuery;
}
break;
case 71:
if (true) {
return props_SourceSubstituteMacro_SourceNodesQuery;
}
break;
case 72:
if (true) {
return props_TemplateArgumentLinkPatternRefExpression;
}
break;
case 73:
if (true) {
return props_TemplateArgumentParameterExpression;
}
break;
case 74:
if (true) {
return props_TemplateArgumentPatternRef;
}
break;
case 75:
if (true) {
return props_TemplateArgumentPatternVarRefExpression;
}
break;
case 76:
if (true) {
return props_TemplateArgumentPropertyPatternRefExpression;
}
break;
case 77:
if (true) {
return props_TemplateArgumentQuery;
}
break;
case 78:
if (true) {
return props_TemplateArgumentQueryExpression;
}
break;
case 79:
if (true) {
return props_TemplateArgumentVariableRefExpression;
}
break;
case 80:
if (true) {
return props_TemplateCallMacro;
}
break;
case 81:
if (true) {
return props_TemplateDeclaration;
}
break;
case 82:
if (true) {
return props_TemplateDeclarationReference;
}
break;
case 83:
if (true) {
return props_TemplateFragment;
}
break;
case 84:
if (true) {
return props_TemplateFragment_ContextNodeQuery;
}
break;
case 85:
if (true) {
return props_TemplateFunctionParameter_mainContextNode;
}
break;
case 86:
if (true) {
return props_TemplateFunctionParameter_outputNode;
}
break;
case 87:
if (true) {
return props_TemplateFunctionParameter_parentOutputNode;
}
break;
case 88:
if (true) {
return props_TemplateFunctionParameter_sourceNode;
}
break;
case 89:
if (true) {
return props_TemplateFunctionParameter_templatePropertyValue;
}
break;
case 90:
if (true) {
return props_TemplateFunctionParameter_templateReferent;
}
break;
case 91:
if (true) {
return props_TemplateParameterDeclaration;
}
break;
case 92:
if (true) {
return props_TemplateQueryBase;
}
break;
case 93:
if (true) {
return props_TemplateSwitch;
}
break;
case 94:
if (true) {
return props_TemplateSwitchMacro;
}
break;
case 95:
if (true) {
return props_TemplateSwitchReference;
}
break;
case 96:
if (true) {
return props_TraceMacro;
}
break;
case 97:
if (true) {
return props_TrivialModelId;
}
break;
case 98:
if (true) {
return props_TrivialNodeId;
}
break;
case 99:
if (true) {
return props_UnmarshalFunction;
}
break;
case 100:
if (true) {
return props_VarMacro;
}
break;
case 101:
if (true) {
return props_VarMacro_ValueQuery;
}
break;
case 102:
if (true) {
return props_WeaveEach_RuleConsequence;
}
break;
case 103:
if (true) {
return props_WeaveMacro;
}
break;
case 104:
if (true) {
return props_WeavingAnchorQuery;
}
break;
case 105:
if (true) {
return props_Weaving_MappingRule;
}
break;
case 106:
if (true) {
return props_Weaving_MappingRule_ContextNodeQuery;
}
break;
default :
}
}
throw new IllegalStateException();
}
