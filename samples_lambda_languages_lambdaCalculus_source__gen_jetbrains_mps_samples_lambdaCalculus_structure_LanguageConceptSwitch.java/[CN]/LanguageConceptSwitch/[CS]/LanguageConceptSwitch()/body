{
  LanguageConceptIndexBuilder builder=new LanguageConceptIndexBuilder(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L);
  builder.put(0x37d11ba7d7fe548fL,AbstractionVarRef);
  builder.put(0x37d11ba7d7eccf81L,AbstractionVariable);
  builder.put(0x1ad829a6925a0969L,AddOperation);
  builder.put(0x1a34313bb1413cb4L,BinaryNumericOperation);
  builder.put(0x1ad829a6925a095bL,BinaryOperation);
  builder.put(0x1a34313bb1413cb6L,BinaryStringOperation);
  builder.put(0x1a34313bb1413cb8L,ConcatenateOperation);
  builder.put(0x5c3aaf5269584eeeL,DivideOperation);
  builder.put(0x3ee0e3dd7c1afae8L,FunctionType);
  builder.put(0x37d11ba7d7eccf80L,LambdaAbstraction);
  builder.put(0x37d11ba7d7ee2dddL,LambdaApplication);
  builder.put(0x37d11ba7d7ec98e9L,LambdaExpression);
  builder.put(0x3ee0e3dd7c1afad8L,LambdaType);
  builder.put(0x448ba254edbfc79fL,LetExpression);
  builder.put(0x448ba254edc7216cL,LetRef);
  builder.put(0x74076973acb52e68L,LetVariable);
  builder.put(0x15b75b54f176d1a3L,MultipleExpression);
  builder.put(0x5c3aaf5269584eeaL,MultiplyOperation);
  builder.put(0x3ee0e3dd7c1afadaL,NumberType);
  builder.put(0x37d11ba7d7ee2dd5L,NumericConstant);
  builder.put(0x3735fdad52687b59L,ParenthesisExpression);
  builder.put(0x37d11ba7d7fc0389L,Program);
  builder.put(0x37d11ba7d7ee2dc8L,StringConstant);
  builder.put(0x3ee0e3dd7c1afae1L,StringType);
  builder.put(0x5c3aaf5269584eecL,SubtractOperation);
  builder.put(0x48db75d5dc496b12L,Variable);
  builder.put(0x48db75d5dc496a4fL,VariableOwner);
  builder.put(0x48db75d5dc496b08L,VariableReference);
  myIndex=builder.seal();
}
