{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0ef.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BuildAspect;
      }
    break;
case 1:
  if (true) {
    return props_BuildCompositePath;
  }
break;
case 2:
if (true) {
return props_BuildCustomWorkflow;
}
break;
case 3:
if (true) {
return props_BuildDependency;
}
break;
case 4:
if (true) {
return props_BuildExternalDependency;
}
break;
case 5:
if (true) {
return props_BuildExternalLayout;
}
break;
case 6:
if (true) {
return props_BuildExternalLayoutDependency;
}
break;
case 7:
if (true) {
return props_BuildFileExcludeSelector;
}
break;
case 8:
if (true) {
return props_BuildFileIncludeSelector;
}
break;
case 9:
if (true) {
return props_BuildFileIncludesSelector;
}
break;
case 10:
if (true) {
return props_BuildFileSelector;
}
break;
case 11:
if (true) {
return props_BuildFileSelectorInAttribute;
}
break;
case 12:
if (true) {
return props_BuildFolderMacro;
}
break;
case 13:
if (true) {
return props_BuildInputFileSet;
}
break;
case 14:
if (true) {
return props_BuildInputFiles;
}
break;
case 15:
if (true) {
return props_BuildInputFolderSet;
}
break;
case 16:
if (true) {
return props_BuildInputFolders;
}
break;
case 17:
if (true) {
return props_BuildInputResourceSet;
}
break;
case 18:
if (true) {
return props_BuildInputSingleFile;
}
break;
case 19:
if (true) {
return props_BuildInputSingleFolder;
}
break;
case 20:
if (true) {
return props_BuildJavaPlugin;
}
break;
case 21:
if (true) {
return props_BuildLayout;
}
break;
case 22:
if (true) {
return props_BuildLayout_AbstractContainer;
}
break;
case 23:
if (true) {
return props_BuildLayout_AbstractCopy;
}
break;
case 24:
if (true) {
return props_BuildLayout_Comment;
}
break;
case 25:
if (true) {
return props_BuildLayout_CompileOutputOf;
}
break;
case 26:
if (true) {
return props_BuildLayout_Container;
}
break;
case 27:
if (true) {
return props_BuildLayout_ContainerAcceptingFileSet;
}
break;
case 28:
if (true) {
return props_BuildLayout_Copy;
}
break;
case 29:
if (true) {
return props_BuildLayout_CopyFilter;
}
break;
case 30:
if (true) {
return props_BuildLayout_CopyFilterFixCRLF;
}
break;
case 31:
if (true) {
return props_BuildLayout_CopyFilterReplaceRegex;
}
break;
case 32:
if (true) {
return props_BuildLayout_CopyFilterReplaceTokens;
}
break;
case 33:
if (true) {
return props_BuildLayout_CopyFlattenMapper;
}
break;
case 34:
if (true) {
return props_BuildLayout_CopyGlobMapper;
}
break;
case 35:
if (true) {
return props_BuildLayout_CopyHandler;
}
break;
case 36:
if (true) {
return props_BuildLayout_CopyMapper;
}
break;
case 37:
if (true) {
return props_BuildLayout_CopyParameter;
}
break;
case 38:
if (true) {
return props_BuildLayout_CopyProcessor;
}
break;
case 39:
if (true) {
return props_BuildLayout_CopyRegexMapper;
}
break;
case 40:
if (true) {
return props_BuildLayout_CustomCopy;
}
break;
case 41:
if (true) {
return props_BuildLayout_EchoProperties;
}
break;
case 42:
if (true) {
return props_BuildLayout_EchoPropertyEntry;
}
break;
case 43:
if (true) {
return props_BuildLayout_EchoXml;
}
break;
case 44:
if (true) {
return props_BuildLayout_ExportAsJavaLibrary;
}
break;
case 45:
if (true) {
return props_BuildLayout_File;
}
break;
case 46:
if (true) {
return props_BuildLayout_FileSet;
}
break;
case 47:
if (true) {
return props_BuildLayout_FileStub;
}
break;
case 48:
if (true) {
return props_BuildLayout_Filemode;
}
break;
case 49:
if (true) {
return props_BuildLayout_Files;
}
break;
case 50:
if (true) {
return props_BuildLayout_FilesOf;
}
break;
case 51:
if (true) {
return props_BuildLayout_Folder;
}
break;
case 52:
if (true) {
return props_BuildLayout_Import;
}
break;
case 53:
if (true) {
return props_BuildLayout_ImportContent;
}
break;
case 54:
if (true) {
return props_BuildLayout_InJarNode;
}
break;
case 55:
if (true) {
return props_BuildLayout_Jar;
}
break;
case 56:
if (true) {
return props_BuildLayout_JarManifest;
}
break;
case 57:
if (true) {
return props_BuildLayout_JarManifest_Attribute;
}
break;
case 58:
if (true) {
return props_BuildLayout_JarManifest_Part;
}
break;
case 59:
if (true) {
return props_BuildLayout_JarManifest_Section;
}
break;
case 60:
if (true) {
return props_BuildLayout_NamedContainer;
}
break;
case 61:
if (true) {
return props_BuildLayout_Node;
}
break;
case 62:
if (true) {
return props_BuildLayout_PathElement;
}
break;
case 63:
if (true) {
return props_BuildLayout_PureNode;
}
break;
case 64:
if (true) {
return props_BuildLayout_Tar;
}
break;
case 65:
if (true) {
return props_BuildLayout_TransparentContainer;
}
break;
case 66:
if (true) {
return props_BuildLayout_War;
}
break;
case 67:
if (true) {
return props_BuildLayout_Zip;
}
break;
case 68:
if (true) {
return props_BuildMacro;
}
break;
case 69:
if (true) {
return props_BuildNamedLayout;
}
break;
case 70:
if (true) {
return props_BuildPlugin;
}
break;
case 71:
if (true) {
return props_BuildProject;
}
break;
case 72:
if (true) {
return props_BuildProjectDependency;
}
break;
case 73:
if (true) {
return props_BuildProjectPart;
}
break;
case 74:
if (true) {
return props_BuildRelativePath;
}
break;
case 75:
if (true) {
return props_BuildSourceArchiveRelativePath;
}
break;
case 76:
if (true) {
return props_BuildSourceMacroRelativePath;
}
break;
case 77:
if (true) {
return props_BuildSourcePath;
}
break;
case 78:
if (true) {
return props_BuildSourceProjectRelativePath;
}
break;
case 79:
if (true) {
return props_BuildSourceSetContainer;
}
break;
case 80:
if (true) {
return props_BuildSource_CompilablePart;
}
break;
case 81:
if (true) {
return props_BuildSource_FilesetProjectPart;
}
break;
case 82:
if (true) {
return props_BuildSource_JavaCP;
}
break;
case 83:
if (true) {
return props_BuildSource_JavaClassFolder;
}
break;
case 84:
if (true) {
return props_BuildSource_JavaContentFolder;
}
break;
case 85:
if (true) {
return props_BuildSource_JavaContentRoot;
}
break;
case 86:
if (true) {
return props_BuildSource_JavaDependency;
}
break;
case 87:
if (true) {
return props_BuildSource_JavaDependencyExternalJar;
}
break;
case 88:
if (true) {
return props_BuildSource_JavaDependencyExternalJarInFolder;
}
break;
case 89:
if (true) {
return props_BuildSource_JavaDependencyFileset;
}
break;
case 90:
if (true) {
return props_BuildSource_JavaDependencyJar;
}
break;
case 91:
if (true) {
return props_BuildSource_JavaDependencyLibrary;
}
break;
case 92:
if (true) {
return props_BuildSource_JavaDependencyModule;
}
break;
case 93:
if (true) {
return props_BuildSource_JavaExternalJarFolderRef;
}
break;
case 94:
if (true) {
return props_BuildSource_JavaExternalJarRef;
}
break;
case 95:
if (true) {
return props_BuildSource_JavaFiles;
}
break;
case 96:
if (true) {
return props_BuildSource_JavaJar;
}
break;
case 97:
if (true) {
return props_BuildSource_JavaJars;
}
break;
case 98:
if (true) {
return props_BuildSource_JavaLibrary;
}
break;
case 99:
if (true) {
return props_BuildSource_JavaLibraryCP;
}
break;
case 100:
if (true) {
return props_BuildSource_JavaLibraryElement;
}
break;
case 101:
if (true) {
return props_BuildSource_JavaLibraryExternalJar;
}
break;
case 102:
if (true) {
return props_BuildSource_JavaLibraryExternalJarFolder;
}
break;
case 103:
if (true) {
return props_BuildSource_JavaModule;
}
break;
case 104:
if (true) {
return props_BuildSource_JavaModuleOptions;
}
break;
case 105:
if (true) {
return props_BuildSource_JavaOptions;
}
break;
case 106:
if (true) {
return props_BuildSource_JavaResources;
}
break;
case 107:
if (true) {
return props_BuildSource_JavaSources;
}
break;
case 108:
if (true) {
return props_BuildSource_SingleFile;
}
break;
case 109:
if (true) {
return props_BuildSource_SingleFolder;
}
break;
case 110:
if (true) {
return props_BuildString;
}
break;
case 111:
if (true) {
return props_BuildStringContainer;
}
break;
case 112:
if (true) {
return props_BuildStringNotEmpty;
}
break;
case 113:
if (true) {
return props_BuildStringPart;
}
break;
case 114:
if (true) {
return props_BuildTextStringPart;
}
break;
case 115:
if (true) {
return props_BuildVarRefStringPart;
}
break;
case 116:
if (true) {
return props_BuildVariableMacro;
}
break;
case 117:
if (true) {
return props_BuildVariableMacroInitValue;
}
break;
case 118:
if (true) {
return props_BuildVariableMacroInitWithDate;
}
break;
case 119:
if (true) {
return props_BuildVariableMacroInitWithString;
}
break;
case 120:
if (true) {
return props_BuildVariableMacroInitWithValueFromFile;
}
break;
case 121:
if (true) {
return props_GeneratorInternal_BuildSource_Folder;
}
break;
case 122:
if (true) {
return props_GeneratorInternal_BuildSource_JarFolder;
}
break;
case 123:
if (true) {
return props_GeneratorInternal_BuildSource_JavaJar;
}
break;
case 124:
if (true) {
return props_GeneratorInternal_BuildSource_JavaLibrary;
}
break;
case 125:
if (true) {
return props_GeneratorInternal_BuildSource_JavaModule;
}
break;
case 126:
if (true) {
return props_GeneratorInternal_BuildSource_SingleFile;
}
break;
case 127:
if (true) {
return props_GeneratorInternal_IWorkflowParticipantReference;
}
break;
case 128:
if (true) {
return props_GeneratorInternal_IWorkfowParticipants;
}
break;
case 129:
if (true) {
return props_GeneratorInternal_LibraryArtifacts;
}
break;
case 130:
if (true) {
return props_GeneratorInternal_Mapping;
}
break;
case 131:
if (true) {
return props_GeneratorInternal_ProjectDependency;
}
break;
case 132:
if (true) {
return props_IWorkflowParticipant;
}
break;
default :
}
}
throw new IllegalStateException();
}
