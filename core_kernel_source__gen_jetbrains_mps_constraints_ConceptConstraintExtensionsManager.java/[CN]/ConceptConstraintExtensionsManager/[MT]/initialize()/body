{
  if (myInitialized) {
    return;
  }
  myCanBeChildExtensions=MapSequence.fromMap(new HashMap<SNode,List<AbstractManager.Descriptor>>());
  myCanBeParentExtensions=MapSequence.fromMap(new HashMap<SNode,List<AbstractManager.Descriptor>>());
  myCanBeRootExtensions=MapSequence.fromMap(new HashMap<SNode,List<AbstractManager.Descriptor>>());
  for (  Language language : MPSModuleRepository.getInstance().getAllLanguages()) {
    SModelDescriptor constraintsModelDescriptor=language.getConstraintsModelDescriptor();
    if (constraintsModelDescriptor != null) {
      List<SNode> roots=constraintsModelDescriptor.getSModel().getRoots();
      for (      SNode constraintsExtension : ListSequence.fromList(roots).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.constraints.structure.ConceptConstraintsExtension");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.lang.constraints.structure.ConceptConstraintsExtension");
        }
      }
)) {
        SNode constraintExtensionConcept=SLinkOperations.getTarget(constraintsExtension,"concept",false);
        AbstractManager.Descriptor descriptor=new AbstractManager.Descriptor(INamedConcept_Behavior.call_getFqName_1213877404258(constraintsExtension),language,LOG);
        if (SLinkOperations.getTarget(constraintsExtension,"canBeChild",true) != null) {
          ListSequence.fromList(safeGet(myCanBeChildExtensions,constraintExtensionConcept)).addElement(descriptor);
        }
        if (SLinkOperations.getTarget(constraintsExtension,"canBeParent",true) != null) {
          ListSequence.fromList(safeGet(myCanBeParentExtensions,constraintExtensionConcept)).addElement(descriptor);
        }
        if (SLinkOperations.getTarget(constraintsExtension,"canBeRoot",true) != null) {
          ListSequence.fromList(safeGet(myCanBeRootExtensions,constraintExtensionConcept)).addElement(descriptor);
        }
      }
    }
  }
}
