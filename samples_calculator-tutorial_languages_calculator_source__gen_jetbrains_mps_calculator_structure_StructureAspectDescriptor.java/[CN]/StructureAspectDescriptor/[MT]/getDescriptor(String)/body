{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.calculator.structure.Calculator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.execution.util.structure.IMainClass","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"inputField","outputField"},new boolean[]{true,true}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.calculator.structure.InputField").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.calculator.structure.InputFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("field").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.calculator.structure.OutputField").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"},new boolean[]{false}).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
