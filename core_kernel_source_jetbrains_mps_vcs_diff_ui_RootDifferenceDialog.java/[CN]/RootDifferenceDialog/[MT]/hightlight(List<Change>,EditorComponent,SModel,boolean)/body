{
  final List resultChanges=new ArrayList<Change>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      Change change : revertChanges) {
        if (change instanceof SetReferenceChange) {
          SetReferenceChange referenceChange=(SetReferenceChange)change;
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",RootDifferenceDialog.this);
          message.setRole(referenceChange.getRole());
          resultChanges.add(message);
          editorComponent.getHighlightManager().mark(message);
        }
        if (change instanceof MoveNodeChange || change instanceof ChangeConceptChange) {
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",RootDifferenceDialog.this);
          resultChanges.add(message);
          editorComponent.getHighlightManager().mark(message);
        }
        if (change instanceof NewNodeChange) {
          if (!isNew) {
            SNode removedNode=model.getNodeById(change.getAffectedNodeId());
            ChangeEditorMessage message=new ChangeEditorMessage(change,removedNode,DELETE_COLOR,"",RootDifferenceDialog.this);
            resultChanges.add(message);
            editorComponent.getHighlightManager().mark(message);
          }
        }
        if (change instanceof SetPropertyChange) {
          SetPropertyChange propertyChange=(SetPropertyChange)change;
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",RootDifferenceDialog.this);
          message.setProperty(propertyChange.getProperty());
          resultChanges.add(message);
          editorComponent.getHighlightManager().mark(message);
        }
        if (change instanceof DeleteNodeChange) {
          if (isNew) {
            SNode removedNode=model.getNodeById(change.getAffectedNodeId());
            ChangeEditorMessage message=new ChangeEditorMessage(change,removedNode,NEW_COLOR,"",RootDifferenceDialog.this);
            resultChanges.add(message);
            editorComponent.getHighlightManager().mark(message);
          }
        }
      }
    }
  }
);
  return resultChanges;
}
