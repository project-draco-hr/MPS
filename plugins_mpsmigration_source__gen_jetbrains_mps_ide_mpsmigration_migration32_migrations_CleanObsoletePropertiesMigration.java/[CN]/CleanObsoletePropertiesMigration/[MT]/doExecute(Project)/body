{
  Iterable<? extends SModule> modules=p.getModulesWithGenerators();
  Iterable<SNode> nodes=Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).ofType(EditableSModel.class).where(new IWhereFilter<EditableSModel>(){
    public boolean accept(    EditableSModel it){
      return !(it.isReadOnly());
    }
  }
).translate(new ITranslator2<EditableSModel,SNode>(){
    public Iterable<SNode> translate(    EditableSModel it){
      return SModelOperations.nodes(((SModel)it),null);
    }
  }
);
  Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNode n=it;
      if (n.hasProperty("right_transform_hint")) {
        n.setProperty("right_transform_hint",null);
      }
      if (n.hasProperty("left_transform_hint")) {
        n.setProperty("left_transform_hint",null);
      }
    }
  }
);
  return true;
}
