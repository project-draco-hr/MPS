{
  Iterable<String> scriptNames=ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(script),"jetbrains.mps.samples.Kaja.structure.Script")).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
);
  Iterable<String> libraryNames=ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(script),"jetbrains.mps.samples.Kaja.structure.Library")).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
);
  List<String> allNames=ListSequence.fromListWithValues(new ArrayList<String>(),scriptNames);
  ListSequence.fromList(allNames).addSequence(Sequence.fromIterable(libraryNames));
  if (ListSequence.fromList(allNames).where(new IWhereFilter<String>(){
    public boolean accept(    String it){
      return it != null && it.equals(SPropertyOperations.getString(script,"name"));
    }
  }
).count() > 1) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(script,"Script and Library names must be unique","r:af5f8eb9-49c0-4279-87d3-3c80b1a56988(jetbrains.mps.samples.Kaja.typesystem)","1904811872814168191",null,errorTarget);
    }
  }
}
