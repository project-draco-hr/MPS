{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("elementDeclaration",new BaseReferenceConstraintsDescriptor("elementDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          ISearchScope searchScope;
          SNode element=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.xml.structure.Element",false,false);
          List<SNode> elementDeclarations=ElementUtil.getElementDeclarations(SLinkOperations.getTarget(element,"elementDeclaration",false),_context.getEnclosingNode(),operationContext.getScope());
          if (ListSequence.<SNode>fromList(elementDeclarations).isEmpty()) {
            searchScope=SModelSearchUtil.createModelAndImportedModelsScope(_context.getModel(),operationContext.getScope());
          }
 else {
            searchScope=new SimpleSearchScope(elementDeclarations);
          }
          return searchScope;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_o20hw9_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
