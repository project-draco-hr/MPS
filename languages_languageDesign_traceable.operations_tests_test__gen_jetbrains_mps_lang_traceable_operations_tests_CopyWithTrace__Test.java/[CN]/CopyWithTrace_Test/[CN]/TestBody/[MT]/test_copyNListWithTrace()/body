{
  this.addNodeById("7327404875649026841");
  List<SNode> copy=TracingUtil.copyWithTrace(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7327404875649026848"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),SNodeOperations.cast(this.getNodeById("7327404875649026875"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")));
  SNode utilityCopy=ListSequence.fromList(copy).getElement(0);
  SNode callingCopy=ListSequence.fromList(copy).getElement(1);
  Assert.assertEquals(SNodeOperations.cast(this.getNodeById("7327404875649026848"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),TracingUtil.getInput(utilityCopy).resolve(MPSModuleRepository.getInstance()));
  Assert.assertEquals(SNodeOperations.cast(this.getNodeById("7327404875649026875"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),TracingUtil.getInput(callingCopy).resolve(MPSModuleRepository.getInstance()));
  Assert.assertEquals(SLinkOperations.getTarget(ListSequence.fromList(SNodeOperations.getDescendants(callingCopy,"jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    }
  }
).toListSequence().first(),"baseMethodDeclaration",false),utilityCopy);
}
