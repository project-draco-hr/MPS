{
  File scriptFile=getScriptFile();
  String[] lines;
  if (SystemInfo.isWindows) {
    lines=new String[]{"@ECHO OFF","SHIFT","SHIFT",String.format("%s --svn %8 %7 %9 %4 %2 %6",MergeDriverMain.getCommandLine())};
  }
 else {
    lines=new String[]{"#/bin/sh",String.format("%s --svn ${10} $9 ${11} $6 $4 $8",MergeDriverMain.getCommandLine())};
  }
  try {
    if (dryRun) {
      if (scriptFile.exists()) {
        List<String> linesInFile=StringsIO.readLines(scriptFile);
        if (ListSequence.fromList(linesInFile).count() == lines.length) {
          for (int i=0; i < lines.length; i++) {
            if (neq_k2wvr2_a0a0a0b0a0a0d0b(ListSequence.fromList(linesInFile).getElement(i),lines[i])) {
              return AbstractInstaller.State.OUTDATED;
            }
          }
          return AbstractInstaller.State.INSTALLED;
        }
 else {
          return AbstractInstaller.State.OUTDATED;
        }
      }
 else {
        return AbstractInstaller.State.NOT_INSTALLED;
      }
    }
    StringsIO.writeLines(scriptFile,Sequence.fromArray(lines));
    if (SystemInfo.isUnix && !(scriptFile.setExecutable(true))) {
      throw new IOException("can't make script executable");
    }
    return AbstractInstaller.State.INSTALLED;
  }
 catch (  IOException e) {
    Messages.showErrorDialog(myProject,"Can't create merger script: " + e.getMessage(),"Can't Create Merger Script");
    return AbstractInstaller.State.NOT_INSTALLED;
  }
}
