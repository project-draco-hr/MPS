{
  Graph originalGraph=this.getGraph();
  List<Edge> split=originalGraph.splitEdge(edge);
  ListSequence.fromList(newEdges).addSequence(ListSequence.fromList(split));
  Node newNode=ListSequence.fromList(split).getElement(0).getTarget();
  List<Face> facesToProcess=ListSequence.fromList(new ArrayList<Face>());
  ListSequence.fromList(facesToProcess).addSequence(ListSequence.fromList(getAdjacentFaces(edge)));
  List<Edge> addOrder=null;
  for (  Face face : ListSequence.fromList(facesToProcess)) {
    List<Dart> darts=face.getDarts();
    int numDartsToRemove=ListSequence.fromList(darts).where(new IWhereFilter<Dart>(){
      public boolean accept(      Dart it){
        return it.getEdge() == edge;
      }
    }
).count();
    for (int dartNum=0; dartNum < numDartsToRemove; dartNum++) {
      int pos=0;
      while (ListSequence.fromList(darts).getElement(pos).getEdge() != edge) {
        pos++;
      }
      Dart dartToReplace=ListSequence.fromList(darts).getElement(pos);
      if (addOrder == null) {
        addOrder=newEdges;
        if (dartToReplace.getSource() != edge.getSource()) {
          addOrder=ListSequence.fromList(newEdges).reversedList();
        }
      }
 else {
        addOrder=ListSequence.fromList(addOrder).reversedList();
      }
      setDart(face,pos,new Dart(ListSequence.fromList(addOrder).getElement(0),dartToReplace.getSource()));
      insertDart(face,pos + 1,new Dart(ListSequence.fromList(addOrder).getElement(1),newNode));
    }
  }
  return newNode;
}
