{
  if (ImportOptions.getInstance().isNeedUpdateDeclarations()) {
    String name=this.myNamesMap.getNameForClass(ci.getDeclarationClass());
    if ((declaration.getName() == null) || !(declaration.getName().equals(name))) {
      declaration.setName(name);
      System.out.format("Declaration %s name has been set to %s.\n",ci.getDeclarationClass().getName(),name);
    }
    if (declaration.getClassname() == null) {
      declaration.setClassname(ci.getDeclarationClass().getName());
    }
    if (declaration.getAbstract() != ci.isAbstract()) {
      System.out.format("Declaration %s abstract proprety has been set to %b.\n",ci.getDeclarationClass().getName(),ci.isAbstract());
      declaration.setAbstract(ci.isAbstract());
    }
    if (declaration.getCanHaveInternalText() != ci.canHaveInternalText()) {
      System.out.format("Declaration %s can have internal name proprety has been set to %b.\n",ci.getDeclarationClass().getName(),ci.canHaveInternalText());
      declaration.setCanHaveInternalText(ci.canHaveInternalText());
    }
    if (!(declaration.getDepracated()) && ci.isDeprecated()) {
      declaration.setDepracated(ci.isDeprecated());
      System.out.format("Declaration %s has been set deprecated.\n",ci.getDeclarationClass().getName());
    }
  }
}
