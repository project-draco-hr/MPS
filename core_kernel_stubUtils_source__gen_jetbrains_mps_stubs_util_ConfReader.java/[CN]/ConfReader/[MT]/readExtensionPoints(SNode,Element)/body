{
  for (  Element ep : elements(eps,EXTENSION_POINT)) {
    if (Namespace.NO_NAMESPACE.equals(ep.getNamespace())) {
      String bc=ep.getAttributeValue(BEAN_CLASS);
      String ifc=ep.getAttributeValue(INTERFACE);
      if (bc != null) {
        SNode bep=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.BeanExtensionPoint",null);
        bep.setId(createForeignId(resolveInfo(EXTENSION_POINT,ep.getAttributeValue(NAME))));
        ListSequence.fromList(SLinkOperations.getTargets(node,"fragment",true)).addElement(bep);
        setProperty("name",bep,ep.getAttributeValue(NAME));
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.BeanExtensionPoint","beanClass"),bep,bc);
      }
 else       if (ifc != null) {
        SNode iep=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint",null);
        iep.setId(createForeignId(resolveInfo(EXTENSION_POINT,ep.getAttributeValue(NAME))));
        ListSequence.fromList(SLinkOperations.getTargets(node,"fragment",true)).addElement(iep);
        setProperty("name",iep,ep.getAttributeValue(NAME));
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint","iface"),iep,ifc);
      }
 else {
        throw new IllegalStateException();
      }
    }
 else     if (XI.equals(ep.getNamespace())) {
      readInclude(node,ep);
    }
  }
}
