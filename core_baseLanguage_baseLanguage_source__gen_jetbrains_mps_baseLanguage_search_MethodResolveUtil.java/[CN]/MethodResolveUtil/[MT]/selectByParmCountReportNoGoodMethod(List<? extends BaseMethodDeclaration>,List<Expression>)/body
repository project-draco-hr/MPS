{
  int minParmCountDiff=Integer.MAX_VALUE;
  int[] parmCountDiffs=new int[methods.size()];
  boolean[] varargs=new boolean[methods.size()];
  int index=0;
  for (  BaseMethodDeclaration method : methods) {
    int parmCountDiff;
    int count=method.getParametersCount();
    int actualArgsCount=actualArgs.size();
    boolean vararg=false;
    if (count > 0 && method.getParameters().get(count - 1).getType() instanceof VariableArityType) {
      vararg=true;
      if (actualArgsCount < count - 1) {
        parmCountDiff=(count - 1) - actualArgsCount;
      }
 else {
        parmCountDiff=0;
      }
    }
 else {
      parmCountDiff=Math.abs(actualArgsCount - count);
    }
    varargs[index]=vararg;
    parmCountDiffs[index++]=parmCountDiff;
    minParmCountDiff=Math.min(minParmCountDiff,parmCountDiff);
  }
  boolean good=true;
  List<BaseMethodDeclaration> result=new ArrayList<BaseMethodDeclaration>(methods.size());
  for (int i=0; i < parmCountDiffs.length; i++) {
    if (minParmCountDiff == parmCountDiffs[i]) {
      BaseMethodDeclaration method=methods.get(i);
      if (varargs[i]) {
        result.add(method);
      }
 else {
        result.add(0,method);
      }
      if (minParmCountDiff > 0) {
        good=false;
        break;
      }
    }
  }
  return new Pair<List<? extends BaseMethodDeclaration>,Boolean>(result,good);
}
