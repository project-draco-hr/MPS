{
  int index=0;
  SNode methodCallNode=(SNode)methodCall.getNode();
  List<BaseMethodDeclaration> goodMethods=new ArrayList<BaseMethodDeclaration>();
  List<BaseMethodDeclaration> badMethods=new ArrayList<BaseMethodDeclaration>();
  for (  BaseMethodDeclaration method : methods) {
    SNode methodNode=(SNode)method.getNode();
    if (method instanceof IVisible) {
      IVisible visible=(IVisible)method;
      Visibility visibility=visible.getVisibility();
      if (visibility instanceof PublicVisibility) {
        goodMethods.add(method);
      }
 else       if (visibility instanceof PrivateVisibility) {
        if (SNodeOperations.getContainingRoot(methodCallNode) == SNodeOperations.getContainingRoot(methodNode)) {
          goodMethods.add(method);
        }
 else {
          badMethods.add(method);
        }
      }
 else       if (visibility instanceof ProtectedVisibility) {
        if (SNodeOperations.getModel(methodCallNode) == SNodeOperations.getModel(methodNode)) {
          goodMethods.add(method);
        }
 else {
          SNode desc=SNodeOperations.getAncestor(methodCallNode,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          SNode anc=SNodeOperations.getAncestor(methodNode,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          if (Classifier_Behavior.call_isDescendant_7165541881557222913(desc,anc)) {
            goodMethods.add(method);
          }
 else {
            badMethods.add(method);
          }
        }
      }
 else {
        if (SNodeOperations.getModel(methodCallNode) == SNodeOperations.getModel(methodNode)) {
          goodMethods.add(method);
        }
 else {
          badMethods.add(method);
        }
      }
    }
 else {
      goodMethods.add(method);
    }
  }
  if (!(goodMethods.isEmpty())) {
    return new Pair<List<? extends BaseMethodDeclaration>,Boolean>(goodMethods,true);
  }
 else {
    return new Pair<List<? extends BaseMethodDeclaration>,Boolean>(badMethods,false);
  }
}
