{
  if (getTree() == null)   return;
  DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
  for (  SNode removed : removedNodes) {
    SNodeTreeNode node=(SNodeTreeNode)myTreeNode.findDescendantWith(removed.getSNodeId().toString());
    if (node == null)     continue;
    treeModel.removeNodeFromParent(node);
  }
  outer:   for (  SNode added : addedNodes) {
    if (added.getModel() == null)     continue;
    if (added.getParent() == null)     continue;
    SNodeTreeNode parent=(SNodeTreeNode)myTreeNode.findDescendantWith(added.getParent().getSNodeId().toString());
    if (parent == null)     continue;
    if (!parent.isInitialized())     continue;
    SNode parentNode=parent.getSNode();
    int indexof=parentNode.getChildren().indexOf(added);
    Enumeration children=parent.children();
    while (children.hasMoreElements()) {
      Object child=children.nextElement();
      if (!(child instanceof SNodeTreeNode))       continue;
      SNodeTreeNode childNode=(SNodeTreeNode)child;
      int index=parentNode.getChildren().indexOf(childNode.getSNode());
      if (index <= indexof)       continue;
      SNodeTreeNode newTreeNode=new SNodeTreeNode(added,added.getRole(),getOperationContext());
      treeModel.insertNodeInto(newTreeNode,parent,treeModel.getIndexOfChild(parent,childNode));
      continue outer;
    }
    treeModel.insertNodeInto(new SNodeTreeNode(added,added.getRole(),getOperationContext()),parent,parent.getChildCount());
  }
}
