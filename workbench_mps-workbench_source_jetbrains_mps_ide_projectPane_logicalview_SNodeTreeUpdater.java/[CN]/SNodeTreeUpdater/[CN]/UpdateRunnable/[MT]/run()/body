{
  if (myProject.isDisposed())   return;
  final Set<SNode> addedRoots=new LinkedHashSet<SNode>();
  final Set<SNode> removedRoots=new LinkedHashSet<SNode>();
  final Set<SNode> addedNodes=new LinkedHashSet<SNode>();
  final Set<SNode> removedNodes=new LinkedHashSet<SNode>();
  final Set<SNode> nodesWithChangedPresentations=new LinkedHashSet<SNode>();
  final Set<SNode> nodesWithChangedPackages=new LinkedHashSet<SNode>();
  final Set<SNode> nodesWithChangedRefs=new LinkedHashSet<SNode>();
  final Set<SNode> changedNodes=new LinkedHashSet<SNode>();
  for (  SModelEvent event : myEvents) {
    event.accept(new SModelEventVisitorAdapter(){
      public void visitRootEvent(      SModelRootEvent event){
        changedNodes.add(event.getRoot());
        if (event.isAdded()) {
          addedRoots.add(event.getRoot());
          removedRoots.remove(event.getRoot());
        }
        if (event.isRemoved()) {
          removedRoots.add(event.getRoot());
          addedRoots.remove(event.getRoot());
        }
      }
      public void visitChildEvent(      SModelChildEvent event){
        changedNodes.add(event.getParent());
        changedNodes.add(event.getChild());
        if (event.isAdded()) {
          addedNodes.add(event.getChild());
        }
        if (event.isRemoved()) {
          removedNodes.add(event.getChild());
        }
      }
      public void visitPropertyEvent(      SModelPropertyEvent event){
        changedNodes.add(event.getNode());
        nodesWithChangedPresentations.add(event.getNode());
        if (SModelTreeNode.PACK.equals(event.getPropertyName()) && event.getNode().getModel() != null && event.getNode().getModel().isRoot(event.getNode())) {
          nodesWithChangedPackages.add(event.getNode());
        }
      }
      public void visitReferenceEvent(      SModelReferenceEvent event){
        changedNodes.add(event.getReference().getSourceNode());
        nodesWithChangedRefs.add(event.getReference().getSourceNode());
      }
    }
);
  }
  Set<SNodeTreeNode> treeNodesToUpdate=new LinkedHashSet<SNodeTreeNode>();
  for (  SNode changedNode : changedNodes) {
    if (myDependencyRecorder != null) {
      treeNodesToUpdate.addAll(myDependencyRecorder.getDependOn(changedNode));
    }
  }
  for (  SNodeTreeNode n : treeNodesToUpdate) {
    nodesWithChangedPresentations.add(n.getSNode());
  }
  addAndRemoveRoots(removedRoots,addedRoots);
  addAndRemoveVisibleChildren(removedNodes,addedNodes);
  updateChangedPresentations(nodesWithChangedPresentations);
  updateChangedRefs(nodesWithChangedRefs);
  updateNodesWithChangedPackages(nodesWithChangedPackages);
  updateAncestorsPresentationInTree();
}
