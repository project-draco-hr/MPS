{
  String conceptFQName=concept.getQualifiedName();
  final CacheNodeHandler subtypeHandler=new CacheNodeHandler(subtype);
  ConcurrentMap<String,SNode> map=(isWeak ? myCoerceToConceptsCacheWeak : myCoerceToConceptsCache).get(subtypeHandler);
  if (map != null) {
    SNode value=map.get(conceptFQName);
    if (value != null) {
      SNode result=postprocessGetNode(value);
      if (result != null && !org.jetbrains.mps.openapi.model.SNodeUtil.isAccessible(result,MPSModuleRepository.getInstance())) {
        map.remove(conceptFQName);
      }
 else {
        return new Pair<Boolean,SNode>(true,result);
      }
    }
  }
  map=(isWeak ? myCoerceToConceptsCache : myCoerceToConceptsCacheWeak).get(subtypeHandler);
  if (map != null) {
    SNode value=map.get(conceptFQName);
    if (value != null) {
      SNode result=postprocessGetNode(value);
      if (isWeak) {
        if (result != null)         return new Pair<Boolean,SNode>(true,result);
      }
 else {
        if (result == null)         return new Pair<Boolean,SNode>(true,null);
      }
    }
  }
  return null;
}
