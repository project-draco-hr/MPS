{
  boolean answer=result != null;
  boolean bothMaps=answer != isWeak;
  ConcurrentHashMap<CacheNodeHandler,ConcurrentHashMap<String,SNode>> cache1=isWeak ? myCoerceToConceptsCacheWeak : myCoerceToConceptsCache;
  ConcurrentHashMap<CacheNodeHandler,ConcurrentHashMap<String,SNode>> cache2=isWeak ? myCoerceToConceptsCache : myCoerceToConceptsCacheWeak;
  CacheNodeHandler subtypeHandler=new CacheNodeHandler(subtype);
  ConcurrentHashMap<String,SNode> map2=null;
  CacheNodeHandler subtypeHandler2=null;
  ConcurrentHashMap<String,SNode> map=cache1.get(subtypeHandler);
  if (bothMaps) {
    subtypeHandler2=new CacheNodeHandler(subtype);
    map2=cache2.get(subtypeHandler2);
  }
  if (map == null || (bothMaps && map2 == null)) {
synchronized (myCoerceToConceptsCacheLock) {
      map=cache1.get(subtypeHandler);
      if (map == null) {
        map=new ConcurrentHashMap<String,SNode>();
        cache1.put(subtypeHandler,map);
      }
      if (bothMaps) {
        map2=cache2.get(subtypeHandler2);
        if (map2 == null) {
          map2=new ConcurrentHashMap<String,SNode>();
          cache2.put(subtypeHandler2,map2);
        }
      }
    }
  }
  map.put(conceptFQName,preprocessPutNode(result));
}
