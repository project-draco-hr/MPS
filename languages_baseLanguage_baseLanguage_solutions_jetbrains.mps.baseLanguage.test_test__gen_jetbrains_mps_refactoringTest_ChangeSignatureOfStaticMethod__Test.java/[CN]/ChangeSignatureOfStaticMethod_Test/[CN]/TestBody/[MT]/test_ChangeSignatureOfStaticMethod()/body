{
  this.addNodeById("1230052903079");
  this.addNodeById("1230052903110");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052903099"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  SNode p1=ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).first();
  SNode p0=ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).getElement(1);
  ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).clear();
  ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).addElement(p0);
  ListSequence.fromList(SLinkOperations.getChildren(params.getDeclaration(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).addElement(p1);
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052903099"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  List<SNode> ussages=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(ussages).addElement(SNodeOperations.cast(this.getNodeById("1230052903086"),"jetbrains.mps.baseLanguage.structure.LocalMethodCall"));
  ListSequence.fromList(ussages).addElement(SNodeOperations.cast(this.getNodeById("1230052903093"),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
  ref.setUsages(ussages);
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903080"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903111"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
