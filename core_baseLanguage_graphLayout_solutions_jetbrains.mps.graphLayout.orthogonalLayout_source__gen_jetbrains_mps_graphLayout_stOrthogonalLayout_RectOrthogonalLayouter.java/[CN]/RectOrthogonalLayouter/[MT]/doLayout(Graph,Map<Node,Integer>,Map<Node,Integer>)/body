{
  Map<Node,Integer> components=ConnectivityComponents.getComponents(graph);
  int maxComponent=0;
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    maxComponent=Math.max(maxComponent,MapSequence.fromMap(components).get(node));
  }
  Map<Node,Node> newNodes=new NodeMap<Node>(graph);
  List<Graph> subgraphs=ListSequence.fromList(new ArrayList<Graph>());
  Map<Graph,Map<Node,Integer>> xSizes=MapSequence.fromMap(new HashMap<Graph,Map<Node,Integer>>());
  Map<Graph,Map<Node,Integer>> ySizes=MapSequence.fromMap(new HashMap<Graph,Map<Node,Integer>>());
  for (int i=0; i <= maxComponent; i++) {
    Graph subgraph=ListSequence.fromList(subgraphs).addElement(new Graph());
    MapSequence.fromMap(xSizes).put(subgraph,MapSequence.fromMap(new HashMap<Node,Integer>()));
    MapSequence.fromMap(ySizes).put(subgraph,MapSequence.fromMap(new HashMap<Node,Integer>()));
  }
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Graph subgraph=ListSequence.fromList(subgraphs).getElement(MapSequence.fromMap(components).get(node));
    Node newNode=subgraph.addNode();
    MapSequence.fromMap(newNodes).put(node,newNode);
    MapSequence.fromMap(MapSequence.fromMap(xSizes).get(subgraph)).put(newNode,MapSequence.fromMap(xSize).get(node) + myEdgeDistance);
    MapSequence.fromMap(MapSequence.fromMap(ySizes).get(subgraph)).put(newNode,MapSequence.fromMap(ySize).get(node));
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    MapSequence.fromMap(newNodes).get(edge.getSource()).addEdgeTo(MapSequence.fromMap(newNodes).get(edge.getTarget()));
  }
  Graph sub0=ListSequence.fromList(subgraphs).getElement(0);
  return findSTLayout(sub0,MapSequence.fromMap(xSizes).get(sub0),MapSequence.fromMap(ySizes).get(sub0));
}
