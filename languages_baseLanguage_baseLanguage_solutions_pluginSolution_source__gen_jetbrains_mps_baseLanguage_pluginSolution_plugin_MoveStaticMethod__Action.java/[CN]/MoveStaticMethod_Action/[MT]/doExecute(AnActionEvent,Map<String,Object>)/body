{
  try {
    final Wrappers._T<SNode> whereToMove=new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        whereToMove.value=MoveNodeDialog.getSelectedObject(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),((SNode)MapSequence.fromMap(_params).get("target")),new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node"){
          public boolean check(          SNode selectedObject,          SNode nodeToMove,          SModelDescriptor modelOfSelectedNode){
            return SNodeOperations.isInstanceOf(selectedObject,"jetbrains.mps.baseLanguage.structure.ClassConcept") && !(ListSequence.fromList(SNodeOperations.getAncestors(nodeToMove,null,false)).contains(selectedObject));
          }
        }
);
      }
    }
);
    if (whereToMove.value == null) {
      return;
    }
    RefactoringFacade.getInstance().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.MoveStaticMethod",Arrays.asList("destination"),Arrays.asList(whereToMove.value),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "MoveStaticMethod",t);
    }
  }
}
