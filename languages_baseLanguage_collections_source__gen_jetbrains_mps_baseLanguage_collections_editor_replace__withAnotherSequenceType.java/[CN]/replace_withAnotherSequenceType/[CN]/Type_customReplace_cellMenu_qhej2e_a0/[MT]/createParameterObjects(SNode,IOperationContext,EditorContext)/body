{
  List<SNode> others=ListSequence.fromListAndArray(new ArrayList<SNode>(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SetType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SortedSetType"));
  SNode act=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType");
  return ListSequence.fromList(SConceptOperations.getAllSubConcepts(act,SNodeOperations.getModel(node))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,4628067390765956802l,"abstract")));
    }
  }
).concat(ListSequence.fromList(others)).toListSequence();
}
