{
  List<SNode> others=ListSequence.fromListAndArray(new ArrayList<SNode>(),MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x10c260e9444L,"jetbrains.mps.baseLanguage.collections.structure.SequenceType").getDeclarationNode(),MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x10c25fb076aL,"jetbrains.mps.baseLanguage.collections.structure.ListType").getDeclarationNode(),MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x11d91cbbcd0L,"jetbrains.mps.baseLanguage.collections.structure.SetType").getDeclarationNode(),MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c482dd1aL,"jetbrains.mps.baseLanguage.collections.structure.SortedSetType").getDeclarationNode());
  SNode act=MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x4eec26fcbaf8c39bL,"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").getDeclarationNode();
  return ListSequence.fromList(SConceptOperations.getAllSubConcepts(act,SNodeOperations.getModel(node))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x403a32c5772c7ec2L,"abstract")));
    }
  }
).concat(ListSequence.fromList(others)).toListSequence();
}
