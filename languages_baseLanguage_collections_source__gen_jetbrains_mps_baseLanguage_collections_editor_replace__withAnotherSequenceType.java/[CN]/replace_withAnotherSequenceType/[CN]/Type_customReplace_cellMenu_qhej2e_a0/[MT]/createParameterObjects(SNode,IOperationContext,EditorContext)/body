{
  List<SNode> others=ListSequence.fromListAndArray(new ArrayList<SNode>(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SetType"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SortedSetType"));
  SNode act=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType");
  return ListSequence.fromList(SConceptOperations.getAllSubConcepts(act,SNodeOperations.getModel(node))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0x403a32c5772c7ec2L,"abstract")));
    }
  }
).concat(ListSequence.fromList(others)).toListSequence();
}
