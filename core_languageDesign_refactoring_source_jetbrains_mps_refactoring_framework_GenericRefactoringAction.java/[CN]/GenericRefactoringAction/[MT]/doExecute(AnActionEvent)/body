{
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  boolean isOneTarget=myRefactoring.isOneTargetOnly();
  final RefactoringContext context=new RefactoringContext(myRefactoring);
  context.setCurrentOperationContext(e.getData(MPSDataKeys.OPERATION_CONTEXT));
  context.setSelectedNode(e.getData(MPSDataKeys.NODE));
  context.setSelectedNodes(toList(getNodes(e,isOneTarget)));
  context.setSelectedModel(e.getData(MPSDataKeys.MODEL));
  context.setSelectedModels(toList(getModels(e,isOneTarget)));
  context.setSelectedModule(e.getData(MPSDataKeys.MODULE));
  context.setSelectedModules(toList(getModules(e,isOneTarget)));
  context.setSelectedMPSProject(e.getData(MPSDataKeys.MPS_PROJECT));
  context.setCurrentScope(e.getData(MPSDataKeys.SCOPE));
  new Thread(){
    public void run(){
      new RefactoringProcessor().execute(myRefactoring,context);
    }
  }
.start();
}
