{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a,fqName)) {
case 17:
    return new Layout_BehaviorDescriptor();
case 13:
  return new File_BehaviorDescriptor();
case 16:
return new Jar_BehaviorDescriptor();
case 15:
return new Folder_BehaviorDescriptor();
case 23:
return new Module_BehaviorDescriptor();
case 10:
return new Copy_BehaviorDescriptor();
case 41:
return new Zip_BehaviorDescriptor();
case 8:
return new Configuration_BehaviorDescriptor();
case 9:
return new ConfigurationReference_BehaviorDescriptor();
case 11:
return new Delete_BehaviorDescriptor();
case 32:
return new PathHolder_BehaviorDescriptor();
case 12:
return new Echo_BehaviorDescriptor();
case 39:
return new Variable_BehaviorDescriptor();
case 37:
return new SimpleString_BehaviorDescriptor();
case 40:
return new VariableReference_BehaviorDescriptor();
case 7:
return new CompositeString_BehaviorDescriptor();
case 0:
return new Antcall_BehaviorDescriptor();
case 4:
return new BuildLanguageTargetReference_BehaviorDescriptor();
case 36:
return new Replace_BehaviorDescriptor();
case 29:
return new Pair_BehaviorDescriptor();
case 24:
return new ModuleCycle_BehaviorDescriptor();
case 26:
return new NewModuleReference_BehaviorDescriptor();
case 19:
return new Macro_BehaviorDescriptor();
case 30:
return new Path_BehaviorDescriptor();
case 31:
return new PathComponent_BehaviorDescriptor();
case 6:
return new CompositePathComponent_BehaviorDescriptor();
case 20:
return new MacroReference_BehaviorDescriptor();
case 1:
return new BaseDirPath_BehaviorDescriptor();
case 18:
return new MPSLayoutConfigurationReferencePropertyValueExpression_BehaviorDescriptor();
case 14:
return new FileExistsCondition_BehaviorDescriptor();
case 28:
return new NotCondition_BehaviorDescriptor();
case 27:
return new NonExistingPath_BehaviorDescriptor();
case 38:
return new Space_BehaviorDescriptor();
case 21:
return new Manifest_BehaviorDescriptor();
case 22:
return new ManifestAttribute_BehaviorDescriptor();
case 5:
return new ComponentsList_BehaviorDescriptor();
case 35:
return new PropertyNodeImport_BehaviorDescriptor();
case 34:
return new PropertyFileImport_BehaviorDescriptor();
case 3:
return new BlockReference_BehaviorDescriptor();
case 2:
return new Block_BehaviorDescriptor();
case 25:
return new ModuleCycleReference_BehaviorDescriptor();
case 33:
return new Plugin_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
