{
  Iterable<? extends SModule> modulesWithGenerators=event.getData(MPSCommonDataKeys.MPS_PROJECT).getModulesWithGenerators();
  Sequence.fromIterable(modulesWithGenerators).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).select(new ISelector<SModel,DataSource>(){
    public DataSource select(    SModel it){
      return it.getSource();
    }
  }
).select(new ISelector<DataSource,IFile>(){
    public IFile select(    DataSource it){
      if (it instanceof FileDataSource) {
        IFile modelFile=as_wouwxe_a0a0a0a0a0a0a0a0b0e(it,FileDataSource.class).getFile();
        String modelPath=modelFile.getPath();
        return FileSystem.getInstance().getFileByPath(modelPath.substring(0,modelPath.length() - MPSExtentions.DOT_MODEL.length()) + MPSExtentions.DOT_REFACTORINGS);
      }
 else       if (it instanceof FilePerRootDataSource) {
        return as_wouwxe_a0a0a0a0a0a0a0a0b0e_0(it,FilePerRootDataSource.class).getFile(MPSExtentions.DOT_REFACTORINGS);
      }
 else {
        return null;
      }
    }
  }
).where(new IWhereFilter<IFile>(){
    public boolean accept(    IFile it){
      return it != null && it.exists();
    }
  }
).visitAll(new IVisitor<IFile>(){
    public void visit(    IFile it){
      it.delete();
    }
  }
);
}
