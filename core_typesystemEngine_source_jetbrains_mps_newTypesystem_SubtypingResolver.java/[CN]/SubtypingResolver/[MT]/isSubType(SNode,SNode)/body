{
  if (null == subType || null == superType)   return false;
  if (subType == superType)   return true;
  if (TypesUtil.isVariable(subType))   return false;
  if (TypesUtil.isVariable(superType))   return false;
  boolean canAskCache=(!TypesUtil.hasVariablesInside(superType) && !TypesUtil.hasVariablesInside(subType));
  if (canAskCache) {
    Boolean answer=getIsSubTypeCacheAnswer(subType,superType,myWeak);
    if (answer != null) {
      return answer;
    }
  }
  if (TypesUtil.match(subType,superType,myMatchingPairs)) {
    return true;
  }
  Pair<Boolean,Boolean> byReplacementRules=TypeChecker.getInstance().getSubtypingManager().isSubTypeByReplacementRulesAuth(subType,superType,myWeak);
  if (byReplacementRules.o2) {
    return addToCache(subType,superType,byReplacementRules.o1,myWeak);
  }
  if (meetsAndJoins(subType,superType,myWeak)) {
    return addToCache(subType,superType,true,myWeak);
  }
  return searchInSuperTypes(subType,new SupertypeMatcher(superType,myMatchingPairs),myWeak,canAskCache);
}
