{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractFunctionType:
    return myConceptAbstractFunctionType;
case LanguageConceptSwitch.ClosureArgReference:
  return myConceptClosureArgReference;
case LanguageConceptSwitch.ClosureControlStatement:
return myConceptClosureControlStatement;
case LanguageConceptSwitch.ClosureLiteral:
return myConceptClosureLiteral;
case LanguageConceptSwitch.ClosureLiteralType:
return myConceptClosureLiteralType;
case LanguageConceptSwitch.CompactInvokeFunctionExpression:
return myConceptCompactInvokeFunctionExpression;
case LanguageConceptSwitch.ControlAbstractionContainer:
return myConceptControlAbstractionContainer;
case LanguageConceptSwitch.ControlAbstractionDeclaration:
return myConceptControlAbstractionDeclaration;
case LanguageConceptSwitch.ControlClosureLiteral:
return myConceptControlClosureLiteral;
case LanguageConceptSwitch.FunctionMethodDeclaration:
return myConceptFunctionMethodDeclaration;
case LanguageConceptSwitch.FunctionType:
return myConceptFunctionType;
case LanguageConceptSwitch.InvokeExpression:
return myConceptInvokeExpression;
case LanguageConceptSwitch.InvokeFunctionExpression:
return myConceptInvokeFunctionExpression;
case LanguageConceptSwitch.InvokeFunctionOperation:
return myConceptInvokeFunctionOperation;
case LanguageConceptSwitch.PairOfInts:
return myConceptPairOfInts;
case LanguageConceptSwitch.StringPropertyHolder:
return myConceptStringPropertyHolder;
case LanguageConceptSwitch.UnboundClosureParameterDeclaration:
return myConceptUnboundClosureParameterDeclaration;
case LanguageConceptSwitch.UnrestrictedClosureLiteral:
return myConceptUnrestrictedClosureLiteral;
case LanguageConceptSwitch.UnrestrictedFunctionType:
return myConceptUnrestrictedFunctionType;
case LanguageConceptSwitch.YieldAllStatement:
return myConceptYieldAllStatement;
case LanguageConceptSwitch.YieldStatement:
return myConceptYieldStatement;
default :
return null;
}
}
