{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"parameterType","resultType"},new boolean[]{true,false});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"controlMethod"},new String[]{"controlClosure","actualParameter"},new boolean[]{false,true});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IFinalWrapper","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{"forceMultiLine"},new String[]{},new String[]{"parameter","body"},new boolean[]{true,false});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"function","parameter"},new boolean[]{false,true});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer","jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{"jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"controlAbstraction"},new boolean[]{true});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration","jetbrains.mps.baseLanguage.structure.GenericDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.HasAnnotation"},new String[]{},new String[]{},new String[]{"parameter","body"},new boolean[]{true,false});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral","jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.FunctionType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{"runtimeIface"},new String[]{"parameterType","resultType","throwsType"},new boolean[]{true,false,true});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.InvokeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"parameter"},new boolean[]{true});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDeprecatable","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"function","parameter"},new boolean[]{false,true});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{"parameter"},new boolean[]{true});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.PairOfInts","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"first","second"},new String[]{},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration","jetbrains.mps.baseLanguage.structure.ParameterDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.ParameterDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral","jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType","jetbrains.mps.baseLanguage.closures.structure.FunctionType",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.FunctionType"},new String[]{},new String[]{},new String[]{"terminateType"},new boolean[]{false});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.closures.structure.YieldStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
