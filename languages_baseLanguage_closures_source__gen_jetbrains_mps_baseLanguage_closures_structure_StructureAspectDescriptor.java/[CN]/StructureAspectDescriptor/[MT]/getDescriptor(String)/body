{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"parameterType","resultType"},new boolean[]{true,false}).alias("{ ~~> }","abstract function type").staticScope(StaticScope.NONE).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"original"},new boolean[]{false}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("controlMethod").children(new String[]{"controlClosure","actualParameter"},new boolean[]{false,true}).staticScope(StaticScope.NONE).create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IFinalWrapper","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter","jetbrains.mps.lang.core.structure.ScopeProvider").properties("forceMultiLine").children(new String[]{"parameter","body"},new boolean[]{true,false}).alias("{ => <body> }","closure literal").staticScope(StaticScope.NONE).create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"function","parameter"},new boolean[]{false,true}).alias("","invoke function").staticScope(StaticScope.NONE).create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"controlAbstraction"},new boolean[]{true}).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.HasAnnotation").children(new String[]{"parameter","body"},new boolean[]{true,false}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral").super_("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").parents("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").staticScope(StaticScope.NONE).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").alias("function","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.FunctionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").references("runtimeIface").children(new String[]{"parameterType","resultType","throwsType"},new boolean[]{true,false,true}).alias("{ => }","function type").staticScope(StaticScope.NONE).create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"parameter"},new boolean[]{true}).alias("invoke","this function invocation expression").staticScope(StaticScope.NONE).create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDeprecatable","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"function","parameter"},new boolean[]{false,true}).alias("invoke","function invocation expression").staticScope(StaticScope.NONE).create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"parameter"},new boolean[]{true}).alias("invoke","invoke function").staticScope(StaticScope.NONE).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.PairOfInts").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("first","second").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").parents("jetbrains.mps.baseLanguage.structure.ParameterDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().alias("? <name>","unbound closure parameter declaration").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").super_("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").parents("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").alias("{ ==> <body> }","unrestricted closure literal").staticScope(StaticScope.NONE).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType").super_("jetbrains.mps.baseLanguage.closures.structure.FunctionType").parents("jetbrains.mps.baseLanguage.closures.structure.FunctionType").children(new String[]{"terminateType"},new boolean[]{false}).alias("{ ==> }","unrestricted function type").staticScope(StaticScope.NONE).create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"},new boolean[]{false}).alias("yieldAll","yield all elements in a sequence").staticScope(StaticScope.NONE).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.YieldStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"},new boolean[]{false}).alias("yield","yield next element").staticScope(StaticScope.NONE).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
