{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0z.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractFunctionType;
      }
    break;
case 1:
  if (true) {
    return myConceptClosureArgReference;
  }
break;
case 2:
if (true) {
return myConceptClosureControlStatement;
}
break;
case 3:
if (true) {
return myConceptClosureLiteral;
}
break;
case 4:
if (true) {
return myConceptClosureLiteralType;
}
break;
case 5:
if (true) {
return myConceptCompactInvokeFunctionExpression;
}
break;
case 6:
if (true) {
return myConceptControlAbstractionContainer;
}
break;
case 7:
if (true) {
return myConceptControlAbstractionDeclaration;
}
break;
case 8:
if (true) {
return myConceptControlClosureLiteral;
}
break;
case 9:
if (true) {
return myConceptFunctionMethodDeclaration;
}
break;
case 10:
if (true) {
return myConceptFunctionType;
}
break;
case 11:
if (true) {
return myConceptInvokeExpression;
}
break;
case 12:
if (true) {
return myConceptInvokeFunctionExpression;
}
break;
case 13:
if (true) {
return myConceptInvokeFunctionOperation;
}
break;
case 14:
if (true) {
return myConceptPairOfInts;
}
break;
case 15:
if (true) {
return myConceptStringPropertyHolder;
}
break;
case 16:
if (true) {
return myConceptUnboundClosureParameterDeclaration;
}
break;
case 17:
if (true) {
return myConceptUnrestrictedClosureLiteral;
}
break;
case 18:
if (true) {
return myConceptUnrestrictedFunctionType;
}
break;
case 19:
if (true) {
return myConceptYieldAllStatement;
}
break;
case 20:
if (true) {
return myConceptYieldStatement;
}
break;
default :
}
}
return null;
}
