{
  SNode line=SNodeOperations.cast(SNodeOperations.getParent(thisNode),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
  int index=SNodeOperations.getIndexInParent(thisNode);
  Iterable<SNode> lines=SLinkOperations.getTargets(thisNode,"line",true);
  if (Sequence.fromIterable(lines).count() == 0) {
    SNodeOperations.deleteNode(thisNode);
    CommentLine_Behavior.call_tryMergeToRight_439148907936414403(line,index - 1);
  }
 else {
    for (    SNode part : ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"line",true)).first(),"part",true))) {
      SNodeOperations.insertPrevSiblingChild(thisNode,part);
    }
    SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getTargets(thisNode,"line",true)).first());
    CommentLine_Behavior.call_tryMergeToRight_439148907936414403(line,index - 1);
    SNode lastElementLine=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"line",true)).last();
    for (    SNode elementLine : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"line",true)).reversedList()) {
      SNodeOperations.insertNextSiblingChild(line,elementLine);
    }
    if ((lastElementLine == null)) {
      index=SNodeOperations.getIndexInParent(thisNode);
      SNodeOperations.deleteNode(thisNode);
      CommentLine_Behavior.call_tryMergeToRight_439148907936414403(line,index - 1);
    }
 else {
      index=ListSequence.fromList(SLinkOperations.getTargets(lastElementLine,"part",true)).count() - 1;
      for (      SNode linePart : ListSequence.fromList(SNodeOperations.getNextSiblings(thisNode,false))) {
        SLinkOperations.addChild(lastElementLine,"part",SNodeOperations.cast(linePart,"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"));
      }
      SNodeOperations.deleteNode(thisNode);
      CommentLine_Behavior.call_tryMergeToRight_439148907936414403(lastElementLine,index);
    }
  }
}
