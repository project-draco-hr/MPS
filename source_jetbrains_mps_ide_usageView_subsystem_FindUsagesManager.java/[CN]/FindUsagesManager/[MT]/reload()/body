{
  myFinders.clear();
  for (  Language l : MPSModuleRepository.getInstance().getAllLanguages()) {
    SModelDescriptor findUsagesModelDescriptor=l.getFindUsagesModelDescriptor();
    if (findUsagesModelDescriptor != null) {
      SModel smodel=findUsagesModelDescriptor.getSModel();
      for (      FinderDeclaration finderDeclaration : smodel.getRootsAdapters(FinderDeclaration.class)) {
        String className=smodel.getUID().getLongName() + "." + FinderDeclaration_Behavior.call_getGeneratedName_1197390200701(finderDeclaration.getNode());
        String conceptName=FinderDeclaration_Behavior.call_getConceptName_1197390200711(finderDeclaration.getNode());
        try {
          Class<?> cls=l.getClass(className);
          if (cls != null) {
            Object finder=cls.newInstance();
            Set<BaseFinder> finders=myFinders.get(conceptName);
            if (finders == null) {
              finders=new HashSet<BaseFinder>();
            }
            finders.add((BaseFinder)finder);
            myFinders.put(conceptName,finders);
          }
 else {
            LOG.warning("Finder is registered but isn't compiled " + NameUtil.nodeFQName(finderDeclaration),finderDeclaration);
          }
        }
 catch (        Exception e) {
          LOG.error(e,finderDeclaration);
        }
      }
    }
  }
}
