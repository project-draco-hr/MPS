{
  if (myInitialized)   return;
  if (myInitializationInProgress)   return;
  myInitializationInProgress=true;
  Set<IModule> visibleModules=new HashSet<IModule>();
  visibleModules.addAll(getInitialModules());
  for (  IModule module : getInitialModules()) {
    myOwnModelDescriptors.addAll(module.getOwnModelDescriptors());
    for (    Dependency d : module.getDependOn()) {
      IModule dependency=MPSModuleRepository.getInstance().getModule(d.getModuleRef());
      if (dependency != null) {
        visibleModules.add(dependency);
      }
    }
  }
  Set<Language> usedLanguages=new HashSet<Language>();
  usedLanguages.addAll(getInitialUsedLanguages());
  Set<DevKit> usedDevkits=new HashSet<DevKit>();
  usedDevkits.addAll(LibraryManager.getInstance().getBootstrapModules(DevKit.class));
  for (  IModule m : getInitialModules()) {
    if (m instanceof DevKit) {
      DevKit dk=(DevKit)m;
      usedDevkits.add(dk);
    }
    usedDevkits.addAll(ModuleUtil.refsToDevkits(m.getUsedDevkitReferences()));
  }
  for (  DevKit dk : usedDevkits) {
    usedLanguages.addAll(dk.getAllExportedLanguages());
    visibleModules.addAll(dk.getAllExportedSolutions());
  }
  boolean changed=true;
  while (changed) {
    changed=false;
    for (    IModule module : new HashSet<IModule>(visibleModules)) {
      if (module instanceof Language) {
        Language language=(Language)module;
        for (        Language l : language.getExtendedLanguages()) {
          if (!visibleModules.contains(l)) {
            visibleModules.add(l);
            changed=true;
          }
        }
      }
      for (      Dependency dep : module.getDependOn()) {
        if (dep.isReexport()) {
          IModule dependency=MPSModuleRepository.getInstance().getModule(dep.getModuleRef());
          if (dependency != null) {
            if (!visibleModules.contains(dependency)) {
              visibleModules.add(dependency);
              changed=true;
            }
          }
 else {
            LOG.error("Can't find module " + dep.getModuleRef().getModuleFqName() + " in "+ this);
          }
        }
      }
    }
    for (    Language language : new ArrayList<Language>(usedLanguages)) {
      for (      Language extendedLanguage : language.getExtendedLanguages()) {
        if (extendedLanguage == null) {
          LOG.error("One of extended language of " + language.getModuleFqName() + " in "+ this+ " is null.");
        }
 else         if (!usedLanguages.contains(extendedLanguage)) {
          usedLanguages.add(extendedLanguage);
          changed=true;
        }
      }
      for (      Dependency dep : language.getDependOn()) {
        IModule dependency=MPSModuleRepository.getInstance().getModule(dep.getModuleRef());
        if (dependency != null) {
          if (dep.isReexport() && !visibleModules.contains(dependency)) {
            visibleModules.add(dependency);
            changed=true;
          }
        }
      }
    }
  }
  myVisibleModules=visibleModules;
  myFqNameToDevKit=new HashMap<String,DevKit>();
  for (  DevKit dk : usedDevkits) {
    myFqNameToDevKit.put(dk.getModuleFqName(),dk);
    if (dk.getModuleReference().getModuleId() != null) {
      myIdToDevKit.put(dk.getModuleReference().getModuleId(),dk);
    }
  }
  myFqNameToLanguage=new HashMap<String,Language>();
  for (  Language l : usedLanguages) {
    myFqNameToLanguage.put(l.getModuleFqName(),l);
    if (l.getModuleReference().getModuleId() != null) {
      myIdToLanguage.put(l.getModuleReference().getModuleId(),l);
    }
  }
  for (  IModule module : visibleModules) {
    for (    SModelDescriptor sm : module.getOwnModelDescriptors()) {
      addDescriptor(sm);
    }
  }
  for (  Language l : usedLanguages) {
    for (    SModelDescriptor accessory : l.getAccessoryModels()) {
      addDescriptor(accessory);
    }
  }
  myInitializationInProgress=false;
  myInitialized=true;
}
