{
  if (myInitialized)   return;
  if (myInitializationInProgress)   return;
  myInitializationInProgress=true;
  Set<IModule> visibleModules=new HashSet<IModule>();
  visibleModules.addAll(getInitialModules());
  for (  IModule module : getInitialModules()) {
    for (    Dependency d : module.getDependOn()) {
      IModule dependency=MPSModuleRepository.getInstance().getModuleByUID(d.getModuleUID());
      if (dependency != null) {
        visibleModules.add(dependency);
      }
 else {
        LOG.error("Can't find a module " + d.getModuleUID() + " in "+ this);
      }
    }
  }
  Set<Language> usedLanguages=new HashSet<Language>();
  usedLanguages.addAll(getInitialUsedLanguages());
  Set<DevKit> usedDevkits=new HashSet<DevKit>();
  for (  IModule m : getInitialModules()) {
    for (    DevKit dk : m.getUsedDevkits()) {
      usedDevkits.add(dk);
      usedLanguages.addAll(dk.getAllExportedLanguages());
      visibleModules.addAll(dk.getAllExportedSolutions());
    }
  }
  boolean changed=true;
  while (changed) {
    changed=false;
    for (    IModule module : new HashSet<IModule>(visibleModules)) {
      if (module instanceof Language) {
        Language language=(Language)module;
        for (        Language l : language.getExtendedLanguages()) {
          if (!visibleModules.contains(l)) {
            visibleModules.add(l);
            changed=true;
          }
        }
      }
      for (      Dependency dep : module.getDependOn()) {
        if (dep.isREExport()) {
          IModule dependency=MPSModuleRepository.getInstance().getModuleByUID(dep.getModuleUID());
          if (dependency != null) {
            if (!visibleModules.contains(dependency)) {
              visibleModules.add(dependency);
              changed=true;
            }
          }
 else {
            LOG.error("Can't find a module " + dep.getModuleUID() + " in "+ this);
          }
        }
      }
    }
    for (    Language language : new ArrayList<Language>(usedLanguages)) {
      for (      Language extendedLanguage : language.getExtendedLanguages()) {
        if (extendedLanguage == null) {
          LOG.error("One of extended language of " + language.getModuleUID() + " in "+ this+ " is null.");
        }
 else         if (!usedLanguages.contains(extendedLanguage)) {
          usedLanguages.add(extendedLanguage);
          changed=true;
        }
      }
      for (      Dependency dep : language.getDependOn()) {
        IModule dependency=MPSModuleRepository.getInstance().getModuleByUID(dep.getModuleUID());
        if (dependency != null) {
          if (dep.isREExport() && !visibleModules.contains(dependency)) {
            visibleModules.add(dependency);
            changed=true;
          }
        }
 else {
          LOG.error("Can't load " + dep.getModuleUID() + " from "+ language);
        }
      }
    }
  }
  myVisibleModules=visibleModules;
  myDevkits=new HashMap<String,DevKit>();
  for (  DevKit dk : usedDevkits) {
    myDevkits.put(dk.getModuleUID(),dk);
  }
  myLanguages=new HashMap<String,Language>();
  for (  Language l : usedLanguages) {
    myLanguages.put(l.getNamespace(),l);
  }
  for (  IModule module : visibleModules) {
    for (    SModelDescriptor sm : module.getOwnModelDescriptors()) {
      addDescriptor(sm);
    }
  }
  for (  Language l : usedLanguages) {
    for (    SModelDescriptor accessory : l.getAccessoryModels()) {
      addDescriptor(accessory);
    }
  }
  myInitializationInProgress=false;
  myInitialized=true;
}
