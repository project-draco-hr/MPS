{
synchronized (LOCK) {
    if (myInitialized)     return;
    if (myInitializationInProgress)     return;
    myInitializationInProgress=true;
    myVisibleModules=new HashSet<IModule>();
    myUsedLanguages=new HashSet<Language>();
    myUsedDevkits=new HashSet<DevKit>();
    Set<IModule> initialModules=getInitialModules();
    myVisibleModules.addAll(initialModules);
    for (    IModule module : initialModules) {
      for (      Dependency d : module.getDependOn()) {
        IModule dependency=MPSModuleRepository.getInstance().getModule(d.getModuleRef());
        if (dependency != null) {
          myVisibleModules.add(dependency);
        }
      }
    }
    myUsedLanguages.addAll(getInitialUsedLanguages());
    for (    IModule m : initialModules) {
      if (m instanceof DevKit) {
        DevKit dk=(DevKit)m;
        myUsedDevkits.add(dk);
        myUsedDevkits.addAll(dk.getAllExtendedDevkits());
      }
      myUsedDevkits.addAll(ModuleUtil.refsToDevkits(m.getUsedDevkitReferences()));
    }
    for (    DevKit dk : myUsedDevkits) {
      myUsedLanguages.addAll(dk.getAllExportedLanguages());
      myVisibleModules.addAll(dk.getAllExportedSolutions());
    }
    boolean changed=true;
    while (changed) {
      changed=false;
      for (      IModule module : new HashSet<IModule>(myVisibleModules)) {
        if (module instanceof Language) {
          Language language=(Language)module;
          for (          Language l : language.getExtendedLanguages()) {
            if (!myVisibleModules.contains(l)) {
              myVisibleModules.add(l);
              changed=true;
            }
          }
        }
        for (        Dependency dep : module.getDependOn()) {
          if (dep.isReexport()) {
            IModule dependency=MPSModuleRepository.getInstance().getModule(dep.getModuleRef());
            if (dependency != null) {
              if (!myVisibleModules.contains(dependency)) {
                myVisibleModules.add(dependency);
                changed=true;
              }
            }
 else {
              LOG.error("Can't find module " + dep.getModuleRef().getModuleFqName() + " in "+ this);
            }
          }
        }
      }
      for (      Language language : new ArrayList<Language>(myUsedLanguages)) {
        for (        Language extendedLanguage : language.getExtendedLanguages()) {
          if (extendedLanguage == null) {
            LOG.error("One of extended language of " + language.getModuleFqName() + " in "+ this+ " is null.");
          }
 else           if (!myUsedLanguages.contains(extendedLanguage)) {
            myUsedLanguages.add(extendedLanguage);
            changed=true;
          }
        }
        for (        Dependency dep : language.getDependOn()) {
          IModule dependency=MPSModuleRepository.getInstance().getModule(dep.getModuleRef());
          if (dependency != null) {
            if (dep.isReexport() && !myVisibleModules.contains(dependency)) {
              myVisibleModules.add(dependency);
              changed=true;
            }
          }
        }
      }
    }
    myInitializationInProgress=false;
    myInitialized=true;
  }
}
