{
  try {
    final Set<String> usedConcepts=SetSequence.fromSet(new HashSet<String>());
    InternalActionsUtils.executeActionOnAllNodesInModal("find used concepts",((Project)MapSequence.fromMap(_params).get("ideaProject")),new _FunctionTypes._void_P1_E0<SNode>(){
      public void invoke(      SNode node){
        SetSequence.fromSet(usedConcepts).addSequence(SetSequence.fromSet(ConceptRegistry.getInstance().getConceptDescriptor(node.getConcept().getQualifiedName()).getAncestorsNames()));
      }
    }
);
    List<SNodeReference> concepts=ListSequence.fromList(InternalActionsUtils.getAllConcepts()).where(new IWhereFilter<SNodeReference>(){
      public boolean accept(      final SNodeReference it){
        final Wrappers._boolean isOk=new Wrappers._boolean(false);
        ((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runReadAction(new Runnable(){
          public void run(){
            SNode concept=SNodeOperations.cast(((SNodePointer)it).resolve(MPSModuleRepository.getInstance()),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
            isOk.value=(concept != null) && (BehaviorReflection.invokeVirtual(Boolean.TYPE,concept,"virtual_isDeprecated_1224609060727",new Object[]{}) || !(SetSequence.fromSet(usedConcepts).contains(NameUtil.nodeFQName(concept))));
          }
        }
);
        return isOk.value;
      }
    }
).toListSequence();
    InternalActionsUtils.showUsagesViewForNodes(((Project)MapSequence.fromMap(_params).get("ideaProject")),concepts);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "FindUnusedAndDeprecatedConcepts",t);
    }
  }
}
