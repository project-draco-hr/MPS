{
  AbstractConceptDeclaration concept=node.getConceptDeclarationAdapter();
  if (!(concept instanceof ConceptDeclaration))   return;
  List<Method> methodsToCall=new ArrayList<Method>();
  while (concept != null) {
    String fqName=NameUtil.nodeFQName(concept);
    String behaviourClass=fqName.replaceAll("(.*)\\.structure\\.(\\w+)$","$1.constraints.$2_Behaviour");
    try {
      Class cls=Class.forName(behaviourClass,true,ClassLoaderManager.getInstance().getClassLoader());
      Method method=cls.getMethod("init",SNode.class);
      methodsToCall.add(method);
    }
 catch (    ClassNotFoundException e) {
    }
catch (    NoSuchMethodException e) {
    }
    concept=((ConceptDeclaration)concept).getExtends();
  }
  for (int i=methodsToCall.size() - 1; i >= 0; i--) {
    try {
      methodsToCall.get(i).invoke(null,node);
    }
 catch (    IllegalAccessException e) {
      LOG.error(e);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}
