{
  myInNode=new NodeMap<Node>(graph);
  myOutNode=new NodeMap<Node>(graph);
  myFakeEdges=new NodeMap<Edge>(graph);
  myEdgesMap=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  Graph modifiedGraph=new Graph();
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Node,Node>fromMap(myInNode).put(node,modifiedGraph.createNode());
    MapSequence.<Node,Node>fromMap(myOutNode).put(node,modifiedGraph.createNode());
    MapSequence.<Node,Edge>fromMap(myFakeEdges).put(node,modifiedGraph.connect(MapSequence.<Node,Node>fromMap(myInNode).get(node),MapSequence.<Node,Node>fromMap(myOutNode).get(node)));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Edge,Edge>fromMap(myEdgesMap).put(edge,modifiedGraph.connect(MapSequence.<Node,Node>fromMap(myOutNode).get(edge.getSource()),MapSequence.<Node,Node>fromMap(myInNode).get(edge.getTarget())));
  }
  return modifiedGraph;
}
