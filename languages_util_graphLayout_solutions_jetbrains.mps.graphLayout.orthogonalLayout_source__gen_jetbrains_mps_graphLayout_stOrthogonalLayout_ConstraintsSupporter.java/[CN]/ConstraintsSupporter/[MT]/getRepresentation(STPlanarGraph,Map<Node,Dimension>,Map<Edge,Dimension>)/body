{
  myStPlanarGraph=stPlanarGraph;
  Graph graph=myStPlanarGraph.getGraph();
  myModifiedGraph=splitNodes(graph);
  myModifiedDualGraph=modifyDualGraph(stPlanarGraph);
  Map<Edge,Integer> edgeWeights=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Edge,Integer>fromMap(edgeWeights).put(MapSequence.<Node,Edge>fromMap(myFakeEdges).get(node),MapSequence.<Node,Dimension>fromMap(nodeConstraints).get(node).height);
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Edge,Integer>fromMap(edgeWeights).put(MapSequence.<Edge,Edge>fromMap(myEdgesMap).get(edge),MapSequence.<Edge,Dimension>fromMap(edgeConstraints).get(edge).height);
  }
  Map<Edge,Integer> dualEdgeWeights=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Edge,Integer>fromMap(dualEdgeWeights).put(MapSequence.<Node,Edge>fromMap(myFakeDualEdges).get(node),MapSequence.<Node,Dimension>fromMap(nodeConstraints).get(node).width);
  }
  for (  Edge edge : ListSequence.<Edge>fromList(myModifiedDualGraph.getEdges())) {
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(myModifiedDualGraph.getEdgesMap()).get(edge);
    Dimension dimension=MapSequence.<Edge,Dimension>fromMap(edgeConstraints).get(realEdge);
    if (dimension != null) {
      MapSequence.<Edge,Integer>fromMap(dualEdgeWeights).put(edge,dimension.width);
    }
  }
  myVerNumbering=WeightedTopologicalNumbering.number(myModifiedGraph,edgeWeights);
  myHorNumbering=WeightedTopologicalNumbering.number(myModifiedDualGraph,dualEdgeWeights);
  Map<Object,Rectangle> representation=MapSequence.<Object,Rectangle>fromMap(new HashMap<Object,Rectangle>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Object,Rectangle>fromMap(representation).put(node,getRectangle(node,MapSequence.<Node,Edge>fromMap(myFakeEdges).get(node)));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Object,Rectangle>fromMap(representation).put(edge,getRectangle(edge,MapSequence.<Edge,Edge>fromMap(myEdgesMap).get(edge)));
  }
  return representation;
}
