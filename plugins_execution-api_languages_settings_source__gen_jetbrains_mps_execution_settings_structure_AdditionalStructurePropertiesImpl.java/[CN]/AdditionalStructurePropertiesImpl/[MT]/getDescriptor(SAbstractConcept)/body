{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0fb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_ApplyTo_Function;
      }
    break;
case 1:
  if (true) {
    return props_CheckProperitesOperation;
  }
break;
case 2:
if (true) {
return props_CheckProperties_Function;
}
break;
case 3:
if (true) {
return props_Configuration_Parameter;
}
break;
case 4:
if (true) {
return props_CreateEditor_Function;
}
break;
case 5:
if (true) {
return props_DeprecatedAnnotation;
}
break;
case 6:
if (true) {
return props_Dispose_Function;
}
break;
case 7:
if (true) {
return props_EditorExpression;
}
break;
case 8:
if (true) {
return props_EditorOperationCall;
}
break;
case 9:
if (true) {
return props_EditorOperationDeclaration;
}
break;
case 10:
if (true) {
return props_EditorPropertyDeclaration;
}
break;
case 11:
if (true) {
return props_EditorPropertyReference;
}
break;
case 12:
if (true) {
return props_GetEditorOperation;
}
break;
case 13:
if (true) {
return props_GridBagConstraints;
}
break;
case 14:
if (true) {
return props_IPersistentPropertyHolder;
}
break;
case 15:
if (true) {
return props_PersistentConfiguration;
}
break;
case 16:
if (true) {
return props_PersistentConfigurationAssistent;
}
break;
case 17:
if (true) {
return props_PersistentConfigurationMethod;
}
break;
case 18:
if (true) {
return props_PersistentConfigurationTemplate;
}
break;
case 19:
if (true) {
return props_PersistentConfigurationTemplateInitializer;
}
break;
case 20:
if (true) {
return props_PersistentConfigurationType;
}
break;
case 21:
if (true) {
return props_PersistentPropertyDeclaration;
}
break;
case 22:
if (true) {
return props_PersistentPropertyReferenceOperation;
}
break;
case 23:
if (true) {
return props_ReportConfigurationErrorStatement;
}
break;
case 24:
if (true) {
return props_ResetFrom_Function;
}
break;
case 25:
if (true) {
return props_SettingsEditor;
}
break;
case 26:
if (true) {
return props_SettingsEditorType;
}
break;
case 27:
if (true) {
return props_TemplateParameter;
}
break;
case 28:
if (true) {
return props_TemplateParameterReference;
}
break;
case 29:
if (true) {
return props_TemplatePersistentConfigurationType;
}
break;
default :
}
}
throw new IllegalStateException();
}
