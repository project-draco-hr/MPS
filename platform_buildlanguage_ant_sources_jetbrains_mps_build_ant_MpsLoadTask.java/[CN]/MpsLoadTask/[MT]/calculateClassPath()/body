{
  File[] pathsToLook;
  if (new File(myMpsHome.getAbsolutePath() + File.separator + "classes").exists()) {
    pathsToLook=new File[]{new File(myMpsHome.getAbsolutePath() + File.separator + "core"),new File(myMpsHome.getAbsolutePath() + File.separator + "workbench"),new File(myMpsHome.getAbsolutePath() + File.separator + "lib"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "buildlanguage"+ File.separator+ "ant"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "uiLanguage"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "xml"),new File(myMpsHome.getAbsolutePath() + File.separator + "MPSPlugin"+ File.separator+ "MPSSupport")};
  }
 else {
    pathsToLook=new File[]{new File(myMpsHome.getAbsolutePath() + File.separator + "lib"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "generate.ant.task.jar"),new File(myMpsHome.getAbsolutePath() + File.separator + "plugin")};
  }
  Set<File> classPaths=new LinkedHashSet<File>();
  for (  File path : pathsToLook) {
    if (!path.exists() || (!path.isDirectory() && !path.getAbsolutePath().endsWith(".jar"))) {
      throw new BuildException(myMpsHome + " is invalid MPS home path: path " + path+ " does not exist or is not a directory or a jar file.");
    }
 else     if (!path.isDirectory()) {
      classPaths.add(path.getAbsoluteFile());
    }
 else {
      gatherAllClassesAndJarsUnder(path,classPaths);
    }
  }
  File mpsClasses=new File(myMpsHome + File.separator + "classes");
  if (mpsClasses.exists()) {
    classPaths.add(mpsClasses);
  }
  return classPaths;
}
