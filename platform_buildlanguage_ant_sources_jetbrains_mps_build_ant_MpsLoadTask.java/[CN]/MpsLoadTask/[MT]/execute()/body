{
  checkMpsHome();
  Set<File> classPaths=calculateClassPath();
  if (myUsePropertiesAsMacro) {
    Hashtable properties=getProject().getProperties();
    for (    Object name : properties.keySet()) {
      Object value=properties.get(name);
      myWhatToGenerate.addMacro((String)name,(String)value);
    }
  }
  if (myFork) {
    String currentClassPathString=System.getProperty("java.class.path");
    List<String> commandLine=new ArrayList<String>();
    commandLine.add(JavaEnvUtils.getJreExecutable("java"));
    if (myJvmArgs.isEmpty()) {
      commandLine.add("-Xss1024k");
      commandLine.add("-Xmx512m");
      commandLine.add("-XX:MaxPermSize=92m");
    }
 else {
      commandLine.addAll(myJvmArgs);
    }
    StringBuffer sb=new StringBuffer();
    String pathSeparator=System.getProperty("path.separator");
    for (    File cp : classPaths) {
      sb.append(pathSeparator);
      sb.append(cp.getAbsolutePath());
    }
    commandLine.add("-classpath");
    commandLine.add(currentClassPathString + sb.toString());
    commandLine.add(getGeneratorClass().getCanonicalName());
    try {
      commandLine.add(myWhatToGenerate.dumpToTmpFile().getAbsolutePath());
    }
 catch (    FileNotFoundException e) {
      throw new BuildException(e);
    }
    Execute exe=new Execute(getExecuteStreamHandler());
    exe.setAntRun(this.getProject());
    exe.setWorkingDirectory(this.getProject().getBaseDir());
    exe.setCommandline(commandLine.toArray(new String[commandLine.size()]));
    try {
      int i=exe.execute();
      if (i != 0) {
        throw new BuildException("Process exited with code " + i + ".");
      }
    }
 catch (    IOException e) {
      log(e,Project.MSG_ERR);
    }
  }
 else {
    List<URL> classPathUrls=new ArrayList<URL>();
    for (    File path : classPaths) {
      try {
        classPathUrls.add(new URL("file:///" + path + (path.isDirectory() ? "/" : "")));
      }
 catch (      MalformedURLException e) {
        throw new BuildException(e);
      }
    }
    URLClassLoader classLoader=new URLClassLoader(classPathUrls.toArray(new URL[classPathUrls.size()]),ProjectComponent.class.getClassLoader());
    try {
      Class<?> whatToGenerateClass=classLoader.loadClass(WhatToGenerate.class.getCanonicalName());
      Object whatToGenerate=whatToGenerateClass.newInstance();
      myWhatToGenerate.cloneTo(whatToGenerate);
      Class<?> generatorClass=classLoader.loadClass(getGeneratorClass().getCanonicalName());
      Constructor<?> constructor=generatorClass.getConstructor(whatToGenerateClass,ProjectComponent.class);
      Object generator=constructor.newInstance(whatToGenerate,this);
      Method method=generatorClass.getMethod("generate");
      method.invoke(generator);
    }
 catch (    ClassNotFoundException e) {
      throw new BuildException(e.getMessage() + "\n" + "Used class path: "+ classPathUrls.toString());
    }
catch (    NoSuchMethodException e) {
      throw new BuildException(e);
    }
catch (    InvocationTargetException e) {
      throw new BuildException(e.getTargetException());
    }
catch (    IllegalAccessException e) {
      throw new BuildException(e);
    }
catch (    InstantiationException e) {
      throw new BuildException(e);
    }
  }
}
