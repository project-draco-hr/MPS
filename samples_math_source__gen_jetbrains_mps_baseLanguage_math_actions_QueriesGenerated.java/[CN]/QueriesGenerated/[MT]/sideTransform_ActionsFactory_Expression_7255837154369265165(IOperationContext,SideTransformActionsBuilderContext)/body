{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SAbstractConcept> parameterObjects=new Computable<Iterable<SAbstractConcept>>(){
      public Iterable<SAbstractConcept> compute(){
        List<SAbstractConcept> result=ListSequence.fromList(new ArrayList<SAbstractConcept>());
        for (        SAbstractConcept a : ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x64b1e972e647ad7dL,"jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"),_context.getModel()))) {
          if (!(a.isAbstract())) {
            ListSequence.fromList(result).addElement(a);
          }
        }
        return result;
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SAbstractConcept item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            return SNodeOperations.replaceWithAnother(_context.getSourceNode(),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)),_context.getSourceNode()));
          }
          public String getMatchingText(          String pattern){
            return "^" + ExponentialOperation__BehaviorDescriptor.getOperationSymbol_id1653mnvAgnB.invoke(SNodeOperations.asSConcept((item)));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SConceptOperations.shortDescription((item));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
