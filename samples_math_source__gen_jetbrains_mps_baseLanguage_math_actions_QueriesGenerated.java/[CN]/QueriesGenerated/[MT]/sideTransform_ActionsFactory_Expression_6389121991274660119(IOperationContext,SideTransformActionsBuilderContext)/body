{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x58aab8999c8f432aL,"jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression")),null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x58aab8999c8f432aL,0x58aab8999c8f433cL,"expression"),_context.getSourceNode());
      return SLinkOperations.getTarget(result,MetaAdapterFactory.getContainmentLink(0x3304fc6e7c6b401eL,0xa016b944934bb21fL,0x58aab8999c8f432aL,0x58aab8999c8f433dL,"rowIndex"));
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "Matrix element access";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
