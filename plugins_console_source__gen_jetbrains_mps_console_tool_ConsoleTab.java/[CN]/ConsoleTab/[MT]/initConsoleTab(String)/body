{
  Project project=ProjectHelper.toMPSProject(myTool.getProject());
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      ConsoleTab.this.myModel=TemporaryModels.getInstance().create(false,TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
      if (myModel == null) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Error on loading history: model does not exist");
        }
        return;
      }
      loadHistory(history);
      ConsoleTab.this.myEditor=new UIEditorComponent(ProjectHelper.toMPSProject(myTool.getProject()).getRepository(),null){
        @Nullable @Override public Object getData(        @NonNls String key){
          if (PlatformDataKeys.FILE_EDITOR.is(key)) {
            return myFileEditor;
          }
          if (PlatformDataKeys.PASTE_PROVIDER.is(key)) {
            return new ConsoleTab.MyPasteProvider((PasteProvider)super.getData(key));
          }
          return super.getData(key);
        }
        @Override public boolean isReadOnly(){
          final SNode selectedNode=getSelectedNode();
          final Wrappers._boolean editable=new Wrappers._boolean(false);
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              if (selectedNode != null) {
                EditorCell selectedCell=getSelectedCell();
                if (eq_doiu7j_a0a1a0a0a0a0a2a1a0a0e0a0a0a0b0bb(check_doiu7j_a0a1a0a0c0b0a0a4a0b0bb(selectedCell),SLinkOperations.getTarget(myRoot,"commandHolder",true)) && check_doiu7j_a0b0a0a2a1a0a0e0a1a72(selectedCell)) {
                  editable.value=false;
                }
 else {
                  editable.value=SNodeOperations.getAncestor(selectedNode,"jetbrains.mps.console.base.structure.CommandHolder",true,false) == SLinkOperations.getTarget(myRoot,"commandHolder",true);
                }
              }
 else {
                List<SNode> selectedNodes=getSelectedNodes();
                if (selectedNodes != null) {
                  editable.value=ListSequence.fromList(selectedNodes).all(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode it){
                      return SNodeOperations.getAncestor(it,"jetbrains.mps.console.base.structure.CommandHolder",false,false) == SLinkOperations.getTarget(myRoot,"commandHolder",true);
                    }
                  }
);
                }
              }
            }
          }
);
          return !(editable.value);
        }
      }
;
      myFileEditor=new ConsoleFileEditor(myEditor);
      addBuiltInImports();
      myEditor.editNode(myRoot);
    }
  }
);
  this.setLayout(new BorderLayout());
  this.add(initToolbarComponent(project),BorderLayout.WEST);
  JPanel editorPanel=new JPanel(new BorderLayout());
  editorPanel.add(myEditor);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(editorPanel);
  scrollPane.getVerticalScrollBar().setBlockIncrement(10);
  this.add(scrollPane,BorderLayout.CENTER);
  this.add(myEditor.getUpperPanel(),BorderLayout.NORTH);
  myHighlighter=check_doiu7j_a0m0bb(myTool.getProject());
  myHighlighter.addAdditionalEditorComponent(myEditor);
}
