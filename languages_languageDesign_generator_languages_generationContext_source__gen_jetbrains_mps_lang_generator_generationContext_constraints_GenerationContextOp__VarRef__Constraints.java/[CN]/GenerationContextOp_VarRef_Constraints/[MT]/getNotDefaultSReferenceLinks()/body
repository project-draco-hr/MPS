{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x25c655ce6e80fdd8L,0x25c655ce6e80fddaL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x25c655ce6e80fdd8L,0x25c655ce6e80fddaL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contextNode=(_context.getReferenceNode() == null ? _context.getEnclosingNode() : _context.getReferenceNode());
          List<SNode> vars=new ArrayList<SNode>();
          while ((contextNode != null)) {
            if (SNodeOperations.isInstanceOf(contextNode,MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0x45991daad6a3d34eL,"jetbrains.mps.lang.generator.structure.VarMacro"))) {
              ListSequence.fromList(vars).addElement(SNodeOperations.cast(contextNode,MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0x45991daad6a3d34eL,"jetbrains.mps.lang.generator.structure.VarMacro")));
            }
            contextNode=TraverseUtil.parent(contextNode);
          }
          return vars;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_m6rnzp_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
