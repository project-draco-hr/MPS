{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-2922713684555708516l,-6639802755577912107l),2721957369897614808l,2721957369897614810l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-2922713684555708516l,-6639802755577912107l),2721957369897614808l,2721957369897614810l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contextNode=(_context.getReferenceNode() == null ? _context.getEnclosingNode() : _context.getReferenceNode());
          List<SNode> vars=new ArrayList<SNode>();
          while ((contextNode != null)) {
            if (SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.lang.generator.structure.VarMacro")) {
              ListSequence.fromList(vars).addElement(SNodeOperations.cast(contextNode,"jetbrains.mps.lang.generator.structure.VarMacro"));
            }
            contextNode=TraverseUtil.parent(contextNode);
          }
          return vars;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_m6rnzp_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
