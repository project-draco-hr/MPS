{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x5252d9021b8b45a8L,0x7cd422dbfa7b06f8L,"requestedAspect"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x5252d9021b8b45a8L,0x7cd422dbfa7b06f8L),this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      SLinkOperations.setTarget(referenceNode,MetaAdapterFactory.getReferenceLink(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x5252d9021b8b45a8L,0x5252d9021b8c25b0L,"requestedAspect_old"),null);
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_srl38n_a0a0a0a0a4a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            Iterable<SModule> modules=_context.getModel().getModule().getRepository().getModules();
            return new ModelsScope(Sequence.fromIterable(modules).select(new ISelector<SModule,SModel>(){
              public SModel select(              SModule it){
                return SModuleOperations.getAspect(it,"plugin");
              }
            }
),true,MetaAdapterFactory.getReferenceLink(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x5252d9021b8b45a8L,0x7cd422dbfa7b06f8L,"requestedAspect").getTargetConcept());
          }
        }
      }
;
    }
  }
);
  return references;
}
