{
  for (  SNode usedComponent : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(dependency,"to",false),"dep",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"to",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"to",false);
    }
  }
)) {
    final Set<SNode> visitedComponents=SetSequence.fromSet(new HashSet<SNode>());
    Queue<SNode> queue=QueueSequence.fromQueue(new LinkedList<SNode>());
    QueueSequence.fromQueue(queue).addLastElement(usedComponent);
    while (QueueSequence.fromQueue(queue).isNotEmpty()) {
      SNode nextComponent=QueueSequence.fromQueue(queue).removeFirstElement();
      SetSequence.fromSet(visitedComponents).addElement(nextComponent);
      if (nextComponent == SLinkOperations.getTarget(dependency,"to",false)) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(dependency,"Cyclic Dependnecy","r:6c7cc4eb-60e9-407a-94da-5f4d6ac9650c(jetbrains.mps.samples.componentDependencies.typesystem)","8153794773742437575",null,errorTarget);
        }
        return;
      }
      QueueSequence.fromQueue(queue).addSequence(ListSequence.fromList(SLinkOperations.getTargets(nextComponent,"dep",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"to",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"to",false);
        }
      }
).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SetSequence.fromSet(visitedComponents).contains(it));
        }
      }
));
    }
  }
}
