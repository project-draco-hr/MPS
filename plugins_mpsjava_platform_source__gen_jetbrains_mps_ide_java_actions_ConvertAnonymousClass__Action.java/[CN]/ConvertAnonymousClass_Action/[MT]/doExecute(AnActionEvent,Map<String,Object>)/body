{
  try {
    final Wrappers._T<String> classifierName=new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        classifierName.value=SPropertyOperations.getString(SLinkOperations.getTarget(((SNode)MapSequence.fromMap(_params).get("target")),"classifier",false),"name");
      }
    }
);
    final String newName=StringChooserDialog.getString(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),"Convert Anonymous Class","Class Name","My" + classifierName.value);
    if (newName == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      public void run(){
        SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
        if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)((SNode)MapSequence.fromMap(_params).get("target"))))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.ConvertAnonymousClass",Arrays.asList("name"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "ConvertAnonymousClass",t);
    }
  }
}
