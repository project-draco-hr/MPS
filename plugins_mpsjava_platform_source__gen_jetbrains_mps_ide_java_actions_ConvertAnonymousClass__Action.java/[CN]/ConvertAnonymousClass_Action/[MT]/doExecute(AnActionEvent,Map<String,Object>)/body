{
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  final Wrappers._T<String> classifierName=new Wrappers._T<String>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      classifierName.value=SPropertyOperations.getString(SLinkOperations.getTarget(((SNode)MapSequence.fromMap(_params).get("target")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x1107e0fd2a0L,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    }
  }
);
  final String newName=StringChooserDialog.getString(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),"Convert Anonymous Class","Class Name","My" + classifierName.value);
  if (newName == null) {
    return;
  }
  modelAccess.runReadInEDT(new Runnable(){
    @Override public void run(){
      SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
      if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
        return;
      }
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.ConvertAnonymousClass",Arrays.asList("name"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
    }
  }
);
}
