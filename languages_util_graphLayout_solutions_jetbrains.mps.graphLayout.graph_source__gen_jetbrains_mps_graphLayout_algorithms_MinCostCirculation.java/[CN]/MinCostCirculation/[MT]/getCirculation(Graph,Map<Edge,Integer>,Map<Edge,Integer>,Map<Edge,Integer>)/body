{
  Map<Edge,Integer> capacity=MapSequence.fromMap(new HashMap<Edge,Integer>());
  Node source=graph.createNode();
  Node target=graph.createNode();
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    MapSequence.fromMap(capacity).put(edge,MapSequence.fromMap(initialCapacity).get(edge) - MapSequence.fromMap(low).get(edge));
  }
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    if (node == source || node == target) {
      continue;
    }
    int diff=0;
    for (    Edge edge : ListSequence.fromList(node.getInEdges())) {
      diff+=MapSequence.fromMap(low).get(edge);
    }
    for (    Edge edge : ListSequence.fromList(node.getOutEdges())) {
      diff-=MapSequence.fromMap(low).get(edge);
    }
    Edge newEdge=null;
    if (diff > 0) {
      newEdge=graph.connect(source,node);
    }
    if (diff < 0) {
      newEdge=graph.connect(node,target);
    }
    if (newEdge != null) {
      MapSequence.fromMap(capacity).put(newEdge,Math.abs(diff));
      MapSequence.fromMap(cost).put(newEdge,0);
    }
  }
  Map<Edge,Integer> flow;
  if (TEST_MODE > 0) {
    flow=MinCostMaxFlowWithPotentials.getFlow(graph,source,target,capacity,cost);
  }
 else {
    flow=MinCostMaxFlow.getFlow(graph,source,target,capacity,cost);
  }
  for (  Edge edge : ListSequence.fromList(source.getEdges()).concat(ListSequence.fromList(target.getEdges()))) {
    MapSequence.fromMap(flow).removeKey(edge);
  }
  graph.deleteNode(source);
  graph.deleteNode(target);
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    MapSequence.fromMap(flow).put(edge,MapSequence.fromMap(flow).get(edge) + MapSequence.fromMap(low).get(edge));
  }
  return flow;
}
