{
  super(new BorderLayout());
  myTree=new UsagesTree(UsagesTreeComponent.this.getProject());
  myOccurenceNavigator=new OccurenceNavigatorSupport(myTree){
    protected Navigatable createDescriptorForNode(    DefaultMutableTreeNode node){
      if (node.getChildCount() > 0)       return null;
      if (!(node instanceof UsagesTreeNode))       return null;
      UsagesTreeNode treeNode=(UsagesTreeNode)node;
      if (treeNode.getUserObject() == null) {
        return null;
      }
      final BaseNodeData data=treeNode.getUserObject().getData();
      Navigatable n=toNavigatable(data);
      return n != null && n.canNavigate() ? n : null;
    }
    public String getNextOccurenceActionName(){
      return UsageViewBundle.message("action.next.occurrence");
    }
    public String getPreviousOccurenceActionName(){
      return UsageViewBundle.message("action.previous.occurrence");
    }
  }
;
  myTree.setBorder(new EmptyBorder(3,5,3,5));
  JScrollPane treePane=ScrollPaneFactory.createScrollPane(myTree);
  myPathProvider.add(PathItemRole.ROLE_MAIN_RESULTS);
  myPathProvider.add(PathItemRole.ROLE_TARGET_NODE);
  myViewToolbar=new ViewToolbar();
  myActionsToolbar=new ActionsToolbar();
  myDefaultOptions=defaultOptions;
  myViewOptions.setValues(myDefaultOptions);
  setComponentsViewOptions(myViewOptions);
  add(treePane,BorderLayout.CENTER);
  myContents.addChangeListener(this);
  myContents.startListening();
}
