{
  String currentTestName=myBuildServerMessageFormat.escapeBuildMessage("generate " + modulesSet);
  System.out.println(myBuildServerMessageFormat.formatTestStart(currentTestName));
  final EditorGenerateType generationType=new EditorGenerateType(true);
  gm.generateModels(modelsToContext,generationType,emptyProgressIndicator,myMessageHandler,false);
  List<String> diffReports;
  if (Boolean.parseBoolean(myWhatToDo.getProperty(TestGenerationOnTeamcity.SHOW_DIFF))) {
    diffReports=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
      public List<String> compute(){
        return DiffReporter.createDiffReports(generationType);
      }
    }
);
  }
 else {
    diffReports=new ArrayList<String>();
  }
  List<CompilationResult> compilationResult;
  if (Boolean.parseBoolean(myWhatToDo.getProperty(GenerateTask.COMPILE))) {
    compilationResult=ModelAccess.instance().runReadAction(new Computable<List<CompilationResult>>(){
      public List<CompilationResult> compute(){
        return generationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
      }
    }
);
  }
 else {
    compilationResult=Collections.EMPTY_LIST;
  }
  List<TestFailure> testResults;
  if (Boolean.parseBoolean(myWhatToDo.getProperty(TestGenerationOnTeamcity.INVOKE_TESTS)) && Boolean.parseBoolean(myWhatToDo.getProperty(GenerateTask.COMPILE))) {
    final List<SModel> models=new ArrayList<SModel>();
    for (    Pair<SModelDescriptor,IOperationContext> pair : modelsToContext) {
      models.add(pair.o1.getSModel());
    }
    testResults=ModelAccess.instance().runReadAction(new Computable<List<TestFailure>>(){
      public List<TestFailure> compute(){
        return ProjectTester.invokeTests(generationType,models);
      }
    }
);
  }
 else {
    testResults=Collections.EMPTY_LIST;
  }
  StringBuffer sb=createDetailedReport(compilationResult,testResults,diffReports);
  myMessageHandler.clean();
  if (sb.length() > 0) {
    myTestFailed=true;
    System.out.println(myBuildServerMessageFormat.formatTestFailure(currentTestName,"Generation Errors",sb.toString()));
  }
  System.out.println(myBuildServerMessageFormat.formatTestFinifsh(currentTestName));
}
