{
  String currentTestName=myBuildServerMessageFormat.escapeBuildMessage(new StringBuffer(cycle.toString())).toString();
  System.out.println(myBuildServerMessageFormat.formatTestStart(currentTestName));
  cycle.generate(gm,myGenerationType,myMessageHandler);
  List<String> diffReports;
  if (Boolean.parseBoolean(myWhatToDo.getProperty(TestGenerationOnTeamcity.SHOW_DIFF))) {
    diffReports=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
      public List<String> compute(){
        return DiffReporter.createDiffReports(myGenerationType);
      }
    }
);
  }
 else {
    diffReports=new ArrayList<String>();
  }
  final List<SModel> outputModels=new ArrayList<SModel>();
  outputModels.addAll(myGenerationType.getOutputModels());
  List<CompilationResult> compilationResult;
  if (Boolean.parseBoolean(myWhatToDo.getProperty(GenerateTask.COMPILE))) {
    compilationResult=ModelAccess.instance().runReadAction(new Computable<List<CompilationResult>>(){
      public List<CompilationResult> compute(){
        return myGenerationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
      }
    }
);
  }
 else {
    compilationResult=Collections.EMPTY_LIST;
  }
  StringBuffer sb=createDetailedReport(compilationResult,diffReports);
  myMessageHandler.clean();
  if (sb.length() > 0) {
    myTestFailed=true;
    System.out.append(myBuildServerMessageFormat.formatTestFailure(currentTestName,"Generation Errors",sb));
    System.out.println("");
  }
  System.out.println(myBuildServerMessageFormat.formatTestFinish(currentTestName));
  if (invokeTests()) {
    TestResult testResult=new TestResult();
    testResult.addListener(new MyTestListener());
    ProjectTester.invokeTests(myGenerationType,outputModels,testResult,cycle.getClassLoader());
  }
  myGenerationType.clean();
}
