{
  String currentTestName=myBuildServerMessageFormat.escapeBuildMessage(new StringBuffer(cycle.toString())).toString();
  System.out.println(myBuildServerMessageFormat.formatTestStart(currentTestName));
  cycle.generate(gm,myGenerationHandler,myMessageHandler);
  List<String> diffReports;
  boolean generationOk=myMessageHandler.getGenerationErrors().isEmpty();
  if (generationOk && Boolean.parseBoolean(myWhatToDo.getProperty(TestGenerationOnTeamcity.SHOW_DIFF))) {
    diffReports=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
      public List<String> compute(){
        return DiffReporter.createDiffReports(myGenerationHandler);
      }
    }
);
  }
 else {
    diffReports=new ArrayList<String>();
  }
  final List<SModel> outputModels=new ArrayList<SModel>();
  outputModels.addAll(myGenerationHandler.getOutputModels());
  final List<CompilationResult> compilationResult=new ArrayList<CompilationResult>();
  if (generationOk && isCompileSet()) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        CompilationResultAdapter listener=new CompilationResultAdapter(){
          public void onCompilationResult(          CompilationResult r){
            compilationResult.add(r);
          }
        }
;
        myGenerationHandler.getCompiler().addCompilationResultListener(listener);
        myGenerationHandler.compile(ITaskProgressHelper.EMPTY);
        myGenerationHandler.getCompiler().removeCompilationResultListener(listener);
      }
    }
);
  }
  boolean compilatonOk=true;
  for (  CompilationResult r : compilationResult) {
    if (r.hasErrors()) {
      compilatonOk=false;
      break;
    }
  }
  StringBuffer sb=createDetailedReport(compilationResult,diffReports);
  myMessageHandler.clean();
  if (sb.length() > 0) {
    myTestFailed=true;
    System.out.append(myBuildServerMessageFormat.formatTestFailure(currentTestName,"Errors During Generation Testing",sb));
    System.out.println("");
  }
  System.out.println(myBuildServerMessageFormat.formatTestFinish(currentTestName));
  if (isSaveGeneratedFilesOnDisk() && generationOk && compilatonOk&& !diffReports.isEmpty()) {
    info("Saving files generated from " + cycle.toString() + " on disk.");
    myGenerationHandler.saveGeneratedFilesOnDisk();
  }
  if (isInvokeTestsSet() && ((ModelCycle)cycle).isUserModel()) {
    runTests(cycle.getClassPath(),myGenerationHandler,outputModels);
  }
  myGenerationHandler.clean();
}
