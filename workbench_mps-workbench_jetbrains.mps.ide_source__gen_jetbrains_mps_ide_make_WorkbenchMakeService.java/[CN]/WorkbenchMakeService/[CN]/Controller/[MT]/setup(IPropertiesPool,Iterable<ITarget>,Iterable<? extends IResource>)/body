{
  ppool.setPredecessor(predParamPool);
  predParamPool=ppool;
  Tuples._3<jetbrains.mps.project.Project,IOperationContext,Boolean> vars=(Tuples._3<jetbrains.mps.project.Project,IOperationContext,Boolean>)ppool.properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Object.class);
  if (vars != null) {
    vars._0(getSession().getProject());
    vars._1(getSession().getContext());
    vars._2(getSession().isCleanMake());
  }
  Tuples._2<jetbrains.mps.project.Project,Boolean> varsForJavaCompile=(Tuples._2<jetbrains.mps.project.Project,Boolean>)ppool.properties(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.auxCompile"),Object.class);
  if (varsForJavaCompile != null) {
    varsForJavaCompile._0(getSession().getProject());
  }
  IModifiableGenerationSettings genSettings=GenerationSettingsProvider.getInstance().getGenerationSettings();
  new TextGenFacetInitializer().failNoTextGen(genSettings.isFailOnMissingTextGen()).generateDebugInfo(genSettings.isGenerateDebugInfo()).populate(ppool);
  new JavaCompileFacetInitializer().setJavaCompileOptions(JavaCompilerOptionsComponent.getInstance().getJavaCompilerOptions(getSession().getProject())).populate(ppool);
  if (delegateScrCtr != null) {
    delegateScrCtr.setup(ppool,targets,input);
  }
}
