{
  File tmpDir=FileUtil.createTmpDir();
  FileUtil.delete(getFile());
  Iterable<String> classpathDirs=getClasspath(false);
  Iterable<String> classPathJars=Sequence.fromIterable(classpathDirs).where(new IWhereFilter<String>(){
    public boolean accept(    String cpd){
      return cpd.endsWith(".jar");
    }
  }
);
  internalPack(classPathJars,tmpDir,false);
  if (InternalFlag.isInternalMode()) {
    Iterable<String> classpathInternal=Sequence.fromIterable(classpathDirs).where(new IWhereFilter<String>(){
      public boolean accept(      String cpd){
        return !(cpd.endsWith(".jar"));
      }
    }
);
    File tmpDirRT=FileUtil.createTmpDir();
    internalPack(classpathInternal,tmpDirRT,true);
    FileUtil.zip(tmpDirRT,new File(tmpDir + File.separator + MERGER_RT));
    FileUtil.delete(tmpDirRT);
  }
  FileUtil.copyDir(tmpDir,getFile());
  FileUtil.delete(tmpDir);
}
