{
  Set<String> classpathItems=SetSequence.fromSet(new LinkedHashSet<String>());
  if (isFromSources()) {
    SetSequence.fromSet(classpathItems).addSequence(SetSequence.fromSet(getClasspathInternal()));
  }
 else {
    final String mpsCorePath=getMPSCorePath();
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsLibJars).select(new ISelector<String,String>(){
      public String select(      String it){
        return mpsCorePath + File.separator + it;
      }
    }
));
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String,String>(){
      public String select(      String it){
        return mpsCorePath + File.separator + it;
      }
    }
));
    SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "lib"+ File.separator+ getVCSCoreFileName());
  }
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(ideaLibJars).select(new ISelector<String,String>(){
    public String select(    String it){
      return PathManager.getLibPath() + File.separator + it;
    }
  }
));
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(getSvnJars()));
  return classpathItems;
}
