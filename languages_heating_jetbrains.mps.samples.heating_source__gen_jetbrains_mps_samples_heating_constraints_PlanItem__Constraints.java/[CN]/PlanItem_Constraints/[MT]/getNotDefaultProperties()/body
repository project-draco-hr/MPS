{
  Map<String,PropertyConstraintsDescriptor> properties=new HashMap();
  properties.put("start",new BasePropertyConstraintsDescriptor("start",this){
    @Override public boolean hasOwnValidator(){
      return true;
    }
    @Override public boolean validateValue(    final SNode node,    final String propertyValue){
      String propertyName="start";
      return (SPropertyOperations.getInteger(propertyValue)) >= 0 && (SPropertyOperations.getInteger(propertyValue)) <= 24 && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.samples.heating.structure.DailyPlan"),"items",true)).all(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_uqqdrd_a0a0a0a0a0a0a0b0b0a1a0b0b(it,node) || SPropertyOperations.getInteger(it,"start") != (SPropertyOperations.getInteger(propertyValue));
        }
      }
);
    }
  }
);
  properties.put("temperature",new BasePropertyConstraintsDescriptor("temperature",this){
    @Override public boolean hasOwnValidator(){
      return true;
    }
    @Override public boolean validateValue(    SNode node,    String propertyValue){
      String propertyName="temperature";
      return (SPropertyOperations.getInteger(propertyValue)) >= 12 && (SPropertyOperations.getInteger(propertyValue)) <= 30;
    }
  }
);
  return properties;
}
