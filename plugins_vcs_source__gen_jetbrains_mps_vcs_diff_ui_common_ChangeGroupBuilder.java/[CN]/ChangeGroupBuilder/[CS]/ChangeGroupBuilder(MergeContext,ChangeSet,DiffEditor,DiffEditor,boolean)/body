{
  myConflictChecker=new ChangeEditorMessage.ConflictChecker(){
    public boolean isChangeConflicted(    ModelChange ch){
      return Sequence.fromIterable(mergeContext.getConflictedWith(ch)).isNotEmpty();
    }
  }
;
  myChangeSet=changeSet;
  myLeftEditor=leftEditor;
  myRightEditor=rightEditor;
  myInspector=inspector;
  if (myInspector) {
    EditorComponent.RebuildListener rebuildListener=new EditorComponent.RebuildListener(){
      public void editorRebuilt(      EditorComponent editor){
        invalidate();
      }
    }
;
    myLeftEditor.getInspector().addRebuildListener(rebuildListener);
    myRightEditor.getInspector().addRebuildListener(rebuildListener);
  }
}
