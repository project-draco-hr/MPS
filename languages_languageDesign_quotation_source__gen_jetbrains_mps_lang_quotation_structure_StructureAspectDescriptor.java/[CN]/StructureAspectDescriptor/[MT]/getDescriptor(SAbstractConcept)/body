{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0v.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractAntiquotation;
      }
    break;
case 1:
  if (true) {
    return myConceptAntiquotation;
  }
break;
case 2:
if (true) {
return myConceptGeneratorInternal_InternalReferenceHolder;
}
break;
case 3:
if (true) {
return myConceptGeneratorInternal_PropertyDescriptor;
}
break;
case 4:
if (true) {
return myConceptGeneratorInternal_ReferenceDescriptor;
}
break;
case 5:
if (true) {
return myConceptListAntiquotation;
}
break;
case 6:
if (true) {
return myConceptNodeBuilder;
}
break;
case 7:
if (true) {
return myConceptNodeBuilderExpression;
}
break;
case 8:
if (true) {
return myConceptNodeBuilderInitLink;
}
break;
case 9:
if (true) {
return myConceptNodeBuilderInitPart;
}
break;
case 10:
if (true) {
return myConceptNodeBuilderInitProperty;
}
break;
case 11:
if (true) {
return myConceptNodeBuilderList;
}
break;
case 12:
if (true) {
return myConceptNodeBuilderNode;
}
break;
case 13:
if (true) {
return myConceptNodeBuilderRef;
}
break;
case 14:
if (true) {
return myConceptPropertyAntiquotation;
}
break;
case 15:
if (true) {
return myConceptQuotation;
}
break;
case 16:
if (true) {
return myConceptReferenceAntiquotation;
}
break;
default :
}
}
return null;
}
