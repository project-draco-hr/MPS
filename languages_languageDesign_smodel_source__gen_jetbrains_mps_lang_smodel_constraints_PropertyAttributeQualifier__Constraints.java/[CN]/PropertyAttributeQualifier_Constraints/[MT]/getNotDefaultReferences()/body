{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attributeConcept",new BaseReferenceConstraintsDescriptor("attributeConcept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          try {
            String role=AttributeDesignTimeOperations.getAttributeRole(_context.getParameterNode());
            if (role != null) {
              return role;
            }
          }
 catch (          Exception ex) {
          }
          return SPropertyOperations.getString(_context.getParameterNode(),"name");
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return AttributeDesignTimeOperations.getApplicableAttributes(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.lang.smodel.structure.AttributeAccess"),SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","3364660638048049750"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_s2rzt9_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
