{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attributeConcept",new BaseReferenceConstraintsDescriptor("attributeConcept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return BehaviorReflection.invokeVirtualStatic(String.class,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode)_context.getParameterNode()))),"virtual_getRole_1262430001741497900",new Object[]{});
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return AttributeQualifier_Behavior.call_getApplicableRoles_959482772563105834(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.AttributeQualifier"))),_context.getEnclosingNode(),"jetbrains.mps.lang.core.structure.PropertyAttribute",_context.getModel(),operationContext.getScope());
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_s2rzt9_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
