{
  String ruleMappingName=getMappingName(rule,null);
  RuleConsequence ruleConsequence=rule.getRuleConsequence();
  if (ruleConsequence == null) {
    generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule: no rule consequence");
    return null;
  }
  Pair<SNode,String> nodeAndMappingName=getTemplateNodeFromRuleConsequence(ruleConsequence,inputNode,rule.getNode(),generator);
  if (nodeAndMappingName == null) {
    generator.showErrorMessage(inputNode,null,ruleConsequence.getNode(),"error processing reduction rule consequence");
    return null;
  }
  SNode reductionTemplateNode=nodeAndMappingName.o1;
  String mappingName=nodeAndMappingName.o2 != null ? nodeAndMappingName.o2 : ruleMappingName;
  if (reductionTemplateNode == null) {
    generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule");
    return new ArrayList<SNode>();
  }
  try {
    return TemplateProcessor.createOutputNodesForTemplateNode(mappingName,reductionTemplateNode,inputNode,generator);
  }
 catch (  DismissTopMappingRuleException e) {
    throw e;
  }
catch (  TemplateProcessingFailureException e) {
    generator.showErrorMessage(inputNode,reductionTemplateNode,rule.getNode(),"error processing reduction rule");
  }
catch (  GenerationFailureException e) {
    throw e;
  }
catch (  GenerationCanceledException e) {
    throw e;
  }
catch (  Throwable t) {
    LOG.error(t,BaseAdapter.fromNode(reductionTemplateNode));
    generator.showErrorMessage(inputNode,reductionTemplateNode,rule.getNode(),"error processing reduction rule");
  }
  return new ArrayList<SNode>(1);
}
