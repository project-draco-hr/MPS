{
  monitor.start("Checking " + SModelOperations.getModelName(model) + " model properties...",1);
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  SModelDescriptor modelDescriptor=model.getModelDescriptor();
  IScope scope=check_t4d01o_a0f0a(check_t4d01o_a0a5a0(modelDescriptor));
  if (scope != null) {
    List<String> errors=new ModelValidator(modelDescriptor.getSModel()).validate(scope);
    if (!(ListSequence.fromList(errors).isEmpty())) {
      String extraMessage=ListSequence.fromList(errors).getElement(0);
      if (ListSequence.fromList(errors).count() == 2) {
        extraMessage+="; " + ListSequence.fromList(errors).getElement(1);
      }
 else       if (ListSequence.fromList(errors).count() > 2) {
        extraMessage+="; ...";
      }
      ListSequence.fromList(results).addElement(ModelCheckerIssue.getSearchResultForModel(model,SModelOperations.getModelName(model) + ": " + NameUtil.formatNumericalString(ListSequence.fromList(errors).count(),"unresolved dependency")+ " ("+ extraMessage+ "; see model properties)",null,ModelChecker.SEVERITY_ERROR,"Model properties"));
    }
  }
  monitor.done();
  return results;
}
