{
  if (SwingUtilities.isEventDispatchThread()) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("Must be called not from EDT");
    }
    return false;
  }
  IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"),new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
  IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(){
    @Override public <T extends IOption>T relayQuery(    IQuery<T> query){
      return query.defaultOption();
    }
  }
,new IJobMonitor.Stub());
  final MessagesViewTool mvt=project.getComponent(MessagesViewTool.class);
  final String messagesListName="Console Make";
  mvt.getAvailableList(messagesListName,true).setWarningsEnabled(false);
  mvt.getAvailableList(messagesListName,true).setInfoEnabled(false);
  MakeSession session=new MakeSession(project,mvt.newHandler(messagesListName),true);
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(Sequence.<SModel>singleton(model)).resources(false),scr,ctl);
    try {
      return future.get().isSucessful();
    }
 catch (    InterruptedException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error on making temporary model",e);
      }
    }
catch (    ExecutionException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error on making temporary model",e);
      }
    }
  }
  return false;
}
