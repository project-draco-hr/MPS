{
  if (quotationNode == null) {
    return null;
  }
  SNode aq=AttributeOperations.getAttribute(quotationNode,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.Antiquotation")));
  if ((aq != null)) {
    SNode expr=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression",null);
    SLinkOperations.setTarget(expr,"expression",SLinkOperations.getTarget(aq,"expression",true),true);
    return expr;
  }
  SNode la=AttributeOperations.getAttribute(quotationNode,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.ListAntiquotation")));
  if ((la != null)) {
    SNode expr=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression",null);
    SLinkOperations.setTarget(expr,"expression",SLinkOperations.getTarget(la,"expression",true),true);
    return expr;
  }
  SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderNode",null);
  SLinkOperations.setTarget(result,"concept",SNodeOperations.getConceptDeclaration(quotationNode),false);
  List<String> propertyNames=ListSequence.fromListWithValues(new ArrayList<String>(),quotationNode.getPropertyNames());
  Collections.sort(propertyNames);
  for (  String property : propertyNames) {
    SNode attribute=AttributeOperations.getAttribute(quotationNode,new IAttributeDescriptor.PropertyAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation"),property));
    SNode pval=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty",null);
    SLinkOperations.setTarget(pval,"property",AbstractConceptDeclaration_Behavior.call_findPropertyDeclaration_1219835742593(SLinkOperations.getTarget(result,"concept",false),property),false);
    if (attribute != null) {
      SLinkOperations.setTarget(pval,"expression",SLinkOperations.getTarget(attribute,"expression",true),true);
    }
 else {
      SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(pval,"property",false),"dataType",false);
      SLinkOperations.setTarget(pval,"expression",(DataTypeDeclaration_Behavior.call_isSimpleBoolean_1220268891062(dataType) ? new QuotationConverter.QuotationClass_aytayy_a0c0b0a3a11a1().createNode(Boolean.toString(quotationNode.getBooleanProperty(property))) : (DataTypeDeclaration_Behavior.call_isSimpleInteger_1220268868375(dataType) ? new QuotationConverter.QuotationClass_aytayy_a0a2a1a0d0l0b().createNode(Integer.toString(quotationNode.getIntegerProperty(property))) : new QuotationConverter.QuotationClass_aytayy_a0a2a1a0d0l0b_0().createNode(NameUtil.escapeString(quotationNode.getProperty(property))))),true);
    }
    ListSequence.fromList(SLinkOperations.getTargets(result,"values",true)).addElement(pval);
  }
  Set<String> seenRoles=SetSequence.fromSet(new HashSet<String>());
  for (  SReference ref : ListSequence.fromList(SNodeOperations.getReferences(quotationNode))) {
    SetSequence.fromSet(seenRoles).addElement(SLinkOperations.getRole(ref));
    SNode refattr=AttributeOperations.getAttribute(quotationNode,new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation"),SLinkOperations.getRole(ref)));
    SNode lval=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink",null);
    SLinkOperations.setTarget(lval,"link",SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result,"concept",false),SLinkOperations.getRole(ref)),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),false);
    if (refattr != null) {
      SNode nbexpr=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression",null);
      SLinkOperations.setTarget(nbexpr,"expression",SLinkOperations.getTarget(refattr,"expression",true),true);
      SLinkOperations.setTarget(lval,"expression",nbexpr,true);
    }
 else {
      SLinkOperations.setTarget(lval,"expression",SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderRef",null),true);
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(lval,"expression",true),"jetbrains.mps.lang.quotation.structure.NodeBuilderRef"),"target",SNodeOperations.as(SLinkOperations.getTargetNode(ref),"jetbrains.mps.lang.core.structure.INamedConcept"),false);
    }
    ListSequence.fromList(SLinkOperations.getTargets(result,"values",true)).addElement(lval);
  }
  for (  SNode refAQ : ListSequence.fromList(SNodeOperations.getChildren(quotationNode)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation");
    }
  }
)) {
    if (!(seenRoles.add(SPropertyOperations.getString(refAQ,"linkRole")))) {
      continue;
    }
    seenRoles.add(SPropertyOperations.getString(refAQ,"linkRole"));
    SNode lval=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink",null);
    SLinkOperations.setTarget(lval,"link",SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result,"concept",false),SPropertyOperations.getString(refAQ,"linkRole")),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),false);
    SNode nbexpr=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression",null);
    SLinkOperations.setTarget(nbexpr,"expression",SLinkOperations.getTarget(refAQ,"expression",true),true);
    SLinkOperations.setTarget(lval,"expression",nbexpr,true);
    ListSequence.fromList(SLinkOperations.getTargets(result,"values",true)).addElement(lval);
  }
  Map<SNode,SNode> map=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode child : SNodeOperations.getChildren(quotationNode)) {
    if (SNodeOperations.isInstanceOf(child,"jetbrains.mps.lang.quotation.structure.AbstractAntiquotation")) {
      continue;
    }
    SNode link=SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result,"concept",false),SNodeOperations.getContainingLinkRole(child)),"jetbrains.mps.lang.structure.structure.LinkDeclaration");
    if ((link == null)) {
      LOG.error("cannot find link `" + SNodeOperations.getContainingLinkRole(child) + "' in "+ INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(result,"concept",false)));
    }
    boolean multipleLink=link != null && !(LinkDeclaration_Behavior.call_isSingular_1213877254557(link));
    SNode c=convert(child);
    SNode lval;
    if (MapSequence.fromMap(map).containsKey(link)) {
      lval=MapSequence.fromMap(map).get(link);
    }
 else {
      lval=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink",null);
      SLinkOperations.setTarget(lval,"link",link,false);
      ListSequence.fromList(SLinkOperations.getTargets(result,"values",true)).addElement(lval);
      if (multipleLink) {
        MapSequence.fromMap(map).put(link,lval);
        SLinkOperations.setTarget(lval,"expression",SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderList",null),true);
      }
    }
    if (multipleLink) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(lval,"expression",true),"jetbrains.mps.lang.quotation.structure.NodeBuilderList"),"nodes",true)).addElement(c);
    }
 else {
      SLinkOperations.setTarget(lval,"expression",c,true);
    }
  }
  return result;
}
