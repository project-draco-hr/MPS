{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be47c5L,"jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be47c5L,"jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement")));
    }
    public String getMatchingText(    String pattern){
      return "ifjump";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be47c5L,"jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be47c5L,"jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be8165L,"jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be8165L,"jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement")));
    }
    public String getMatchingText(    String pattern){
      return "jump";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be8165L,"jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5be8165L,"jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement").getDeclarationNode(),null));
    }
  }
);
  return result;
}
