{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5a42658L,"jetbrains.mps.lang.dataFlow.structure.EmitStatement").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5a42658L,0x1160a375bea5106L,"position"),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x75c73261efe5e666L,"jetbrains.mps.lang.dataFlow.structure.InsertPosition")),null));
    }
    public String getMatchingText(    String pattern){
      return "insert";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5a42658L,"jetbrains.mps.lang.dataFlow.structure.EmitStatement").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7fa12e9cb9494976L,0xb4fa19accbc320b4L,0x118e5a42658L,"jetbrains.mps.lang.dataFlow.structure.EmitStatement").getDeclarationNode(),null));
    }
  }
);
  return result;
}
