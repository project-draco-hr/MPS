{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("typeVariableDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      boolean isStaticContext=false;
      SNode nearestMember=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.ClassifierMember",true,false);
      if (nearestMember != null && ClassifierMember_Behavior.call_isStatic_8986964027630462944(nearestMember)) {
        isStaticContext=true;
      }
      List<SNode> declarations=new ArrayList<SNode>();
      for (      SNode genericDeclaration : ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.GenericDeclaration",true))) {
        if (isStaticContext && SNodeOperations.isInstanceOf(genericDeclaration,"jetbrains.mps.baseLanguage.structure.Classifier")) {
          continue;
        }
        ListSequence.fromList(declarations).addSequence(ListSequence.fromList(SLinkOperations.getTargets(genericDeclaration,"typeVariableDeclaration",true)));
      }
      return declarations;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","1213104844543");
    }
  }
);
  return result;
}
