{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("typeVariableDeclaration",new BaseReferenceConstraintsDescriptor("typeVariableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          boolean isStaticContext=false;
          SNode nearestMember=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.ClassifierMember",true,false);
          if (nearestMember != null && ClassifierMember_Behavior.call_isStatic_8986964027630462944(nearestMember)) {
            isStaticContext=true;
          }
          List<SNode> declarations=new ArrayList<SNode>();
          for (          SNode genericDeclaration : ListSequence.<SNode>fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.GenericDeclaration",true))) {
            if (isStaticContext && SNodeOperations.isInstanceOf(genericDeclaration,"jetbrains.mps.baseLanguage.structure.Classifier")) {
              continue;
            }
            ListSequence.<SNode>fromList(declarations).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(genericDeclaration,"typeVariableDeclaration",true)));
          }
          return declarations;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_69suw6_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
