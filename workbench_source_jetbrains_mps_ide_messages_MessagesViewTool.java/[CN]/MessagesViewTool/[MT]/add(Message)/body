{
  if (IdeMain.getTestMode() == TestMode.CORE_TEST) {
    return;
  }
  myMessagesInProgress.incrementAndGet();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      int messages=myMessagesInProgress.decrementAndGet();
      if (myMessages.size() >= MAX_MESSAGES_SIZE) {
        Message toRemove=myMessages.remove();
        updateMessageCounters(message,-1);
        if (isVisible(toRemove)) {
          myModel.removeFirst();
        }
      }
      if (isVisible(message)) {
        myModel.add(message);
        int index=myModel.getSize() - 1;
        myList.getSelectionModel().setSelectionInterval(index,index);
        if (messages == 0) {
          myList.ensureIndexIsVisible(index);
        }
      }
      myMessages.add(message);
      updateMessageCounters(message,1);
      int width=getMessageWidth(message);
      if (width > myList.getFixedCellWidth()) {
        myList.setFixedCellWidth(width);
      }
      updateActions();
    }
    private void updateMessageCounters(    Message m,    int delta){
      if (m.getKind() == MessageKind.ERROR) {
        myErrors+=delta;
      }
      if (m.getKind() == MessageKind.WARNING) {
        myWarnings+=delta;
      }
      if (m.getKind() == MessageKind.INFORMATION) {
        myInfos+=delta;
      }
      if (m.getHintObject() != null) {
        myHintObjects+=delta;
      }
    }
  }
);
}
