{
  INodeSubstituteInfo substituteInfo=cell.getSubstituteInfo();
  if (substituteInfo == null) {
    substituteInfo=new NullSubstituteInfo();
  }
  EditorCell cellForNewNode;
  SNode newNode;
  if (cell.isValidText(smallPattern) && !"".equals(smallPattern) && substituteInfo.hasExactlyNActions(smallPattern + tail,false,0)) {
    newNode=cell.getSNode();
    cellForNewNode=cell;
  }
 else   if (uniqueAction(substituteInfo,smallPattern,tail)) {
    List<INodeSubstituteAction> matchingActions=substituteInfo.getMatchingActions(smallPattern,true);
    INodeSubstituteAction item=matchingActions.get(0);
    newNode=item.doSubstitute(smallPattern);
    cellForNewNode=editorContext.createNodeCellInAir(newNode,ourServiceEditorManager);
  }
 else {
    return;
  }
  EditorCellAction rtAction=EditorUtil.getCellAction(cellForNewNode,EditorCellAction.RIGHT_TRANSFORM,editorContext);
  if (rtAction == null) {
    final CellInfo cellInfo=cellForNewNode.getCellInfo();
    CommandProcessor.instance().invokeNowOrLater(new Runnable(){
      public void run(){
        AbstractEditorComponent component=editorContext.getNodeEditorComponent();
        EditorCell cellToSelect=cellInfo.findCell(component);
        if (cellToSelect != null) {
          EditorCell errorCell=EditorUtil.findErrorCell(cellToSelect);
          if (errorCell instanceof EditorCell_Label) {
            EditorCell_Label label=(EditorCell_Label)errorCell;
            if (label.isEditable() && !(label instanceof EditorCell_Constant)) {
              label.changeText(label.getText() + tail);
            }
            label.getRenderedTextLine().setCaretPositionToLast();
          }
        }
      }
    }
);
    return;
  }
  UndoManager.instance().markPlaceInCurrentUndoActionsWithObject(ourMarker);
  rtAction.execute(editorContext);
  final CellFounder cellFounder=new CellFounder(editorContext,newNode,tail);
  EditorCell newCellForNewNode=editorContext.createNodeCellInAir(newNode,ourServiceEditorManager);
  if (cellForNewNode.isInspectorCell()) {
    System.err.println("oy, vey!!!");
  }
  cellFounder.run(newCellForNewNode);
  EditorCell foundCell=cellFounder.getFoundCell();
  if (foundCell != null) {
    INodeSubstituteInfo rtSubstituteInfo=foundCell.getSubstituteInfo();
    if (rtSubstituteInfo == null) {
      rtSubstituteInfo=new NullSubstituteInfo();
    }
    List<INodeSubstituteAction> rtMatchingActions=rtSubstituteInfo.getMatchingActions(tail,true);
    if (rtSubstituteInfo.hasNoActionsWithPrefix(tail)) {
      if (newNode != null) {
        newNode.removeRightTransformHint();
        UndoManager.instance().removeActionsAfterObject(ourMarker);
        final CellInfo cellInfo=cellForNewNode.getCellInfo();
        CommandProcessor.instance().invokeNowOrLater(new Runnable(){
          public void run(){
            AbstractEditorComponent component=editorContext.getNodeEditorComponent();
            EditorCell cellToSelect=cellInfo.findCell(component);
            if (cellToSelect != null) {
              component.changeSelection(cellToSelect);
            }
            if (cellToSelect instanceof EditorCell_Label) {
              EditorCell_Label label=(EditorCell_Label)cellToSelect;
              if (label.isEditable() && !(label instanceof EditorCell_Constant)) {
                label.changeText(label.getRenderedText() + tail);
              }
              label.getRenderedTextLine().setCaretPositionToLast();
            }
          }
        }
);
      }
      return;
    }
    if (!uniqueAction(rtSubstituteInfo,tail,"")) {
      CommandProcessor.instance().invokeLater(cellFounder);
      return;
    }
    INodeSubstituteAction rtItem=rtMatchingActions.get(0);
    final SNode yetNewNode=rtItem.doSubstitute(smallPattern);
    CommandProcessor.instance().invokeLater(new Runnable(){
      public void run(){
        AbstractEditorComponent editor=editorContext.getNodeEditorComponent();
        EditorCell yetNewNodeCell=editor.findNodeCell(yetNewNode);
        EditorCell errorOrEditableCell=editor.findErrorOrEditableCell(yetNewNodeCell);
        editor.changeSelectionWRTFocusPolicy(errorOrEditableCell);
      }
    }
);
  }
 else {
    CommandProcessor.instance().invokeLater(cellFounder);
  }
}
