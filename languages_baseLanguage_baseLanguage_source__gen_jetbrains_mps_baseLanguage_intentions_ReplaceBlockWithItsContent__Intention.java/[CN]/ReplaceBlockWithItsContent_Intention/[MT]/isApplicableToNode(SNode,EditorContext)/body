{
  boolean applicable=false;
  SContainmentLink containmentLink=node.getContainmentLink();
  if (containmentLink != null && SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement")),SNodeOperations.asSConcept((SAbstractConcept)containmentLink.getTargetConcept()))) {
    int statementsCount=ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc092b6b77L,0xfc092b6b78L,"statements")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).count();
switch (statementsCount) {
case 0:
      applicable=containmentLink.isOptional();
    break;
case 1:
  applicable=true;
break;
default :
applicable=containmentLink.isMultiple();
}
}
return applicable;
}
