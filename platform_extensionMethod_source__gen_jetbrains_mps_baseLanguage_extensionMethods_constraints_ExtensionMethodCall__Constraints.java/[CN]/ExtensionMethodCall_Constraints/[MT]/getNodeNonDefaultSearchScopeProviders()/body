{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new AbstractSearchScope(){
        @NotNull public List<SNode> getNodes(        Condition<SNode> p0){
          List<SNode> result=new ArrayList<SNode>();
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          for (          SNode extension : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension"))) {
            if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_Behavior.call_getLooseType_5744862332972792015(SLinkOperations.getTarget(extension,"type",true)))) {
              for (              SNode method : ListSequence.fromList(SLinkOperations.getTargets(extension,"methods",true))) {
                if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                  ListSequence.fromList(result).addElement(method);
                }
              }
            }
          }
          for (          SNode container : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer"))) {
            for (            SNode method : ListSequence.fromList(SLinkOperations.getTargets(container,"methods",true))) {
              if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_Behavior.call_getLooseType_5744862332972792015(SLinkOperations.getTarget(method,"extendedType",true)))) {
                if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                  ListSequence.fromList(result).addElement(method);
                }
              }
            }
          }
          return ListSequence.fromListWithValues(new ArrayList<SNode>(),result);
        }
        @Override public boolean isInScope(        SNode node){
          SNode extMethod=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration");
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          return TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_Behavior.call_getLooseType_5744862332972792015(ExtensionMethodDeclaration_Behavior.call_getThisType_8022092943109893938(extMethod))) && VisibilityUtil.isVisible(_context.getReferenceNode(),extMethod);
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:8a519067-4481-4fce-a84b-d7a47e974dd7(jetbrains.mps.baseLanguage.extensionMethods.constraints)","7997068947889524884");
    }
  }
);
  return result;
}
