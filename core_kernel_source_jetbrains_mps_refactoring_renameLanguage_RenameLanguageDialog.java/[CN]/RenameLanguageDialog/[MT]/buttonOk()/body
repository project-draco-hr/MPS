{
  final boolean needToRegenerate=myRegenerateLanguage.getModel().isSelected();
  boolean renamed=ModelAccess.instance().runWriteActionInCommand(new Computable<Boolean>(){
    public Boolean compute(){
      final String fqName=myLanguageNameField.getText();
      if (MPSModuleRepository.getInstance().getModuleByUID(fqName) != null) {
        setErrorText("Duplicate language name");
        return false;
      }
      new LanguageRenamer(myProject,myLanguage,fqName).rename(needToRegenerate);
      return true;
    }
  }
);
  if (!renamed) {
    return;
  }
  if (needToRegenerate) {
    final Set<Language> langs=new LinkedHashSet<Language>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        langs.add(myLanguage);
        langs.addAll(MPSModuleRepository.getInstance().getAllExtendingLanguages(myLanguage));
      }
    }
);
    for (    final Language l : langs) {
      final MPSProject mpsProject=myProject.getComponent(MPSProjectHolder.class).getMPSProject();
      GenParameters params=ModelAccess.instance().runReadAction(new Computable<GenParameters>(){
        public GenParameters compute(){
          ModuleTestConfiguration languageConfig=new ModuleTestConfiguration();
          languageConfig.setModuleRef(l.getModuleReference());
          languageConfig.setName("tmp");
          try {
            return languageConfig.getGenParams(mpsProject,true);
          }
 catch (          IllegalGeneratorConfigurationException e) {
            return null;
          }
        }
      }
);
      if (params == null) {
        setErrorText("Generator configuration is invalid");
        return;
      }
      myProject.getComponent(GeneratorManager.class).generateModelsFromDifferentModules(new ModuleContext(myLanguage,mpsProject),params.getModels(),IGenerationType.FILES);
    }
  }
  dispose();
}
