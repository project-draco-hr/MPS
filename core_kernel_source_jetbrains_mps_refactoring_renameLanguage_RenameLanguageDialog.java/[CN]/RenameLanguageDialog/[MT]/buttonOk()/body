{
  final boolean needToRegenerate=myRegenerateLanguage.getModel().isSelected();
  boolean renamed=ModelAccess.instance().runWriteActionInCommand(new Computable<Boolean>(){
    public Boolean compute(){
      final String fqName=myLanguageNameField.getText();
      if (MPSModuleRepository.getInstance().getModuleByUID(fqName) != null) {
        setErrorText("Duplicate language name");
        return false;
      }
      new LanguageRenamer(myProject,myLanguage,fqName).rename(needToRegenerate);
      return true;
    }
  }
);
  if (!renamed) {
    return;
  }
  if (needToRegenerate) {
    final MPSProject mpsProject=myProject.getComponent(MPSProjectHolder.class).getMPSProject();
    GenParameters params=ModelAccess.instance().runReadAction(new Computable<GenParameters>(){
      public GenParameters compute(){
        SModel model=AuxilaryRuntimeModel.getDescriptor().getSModel();
        LanguageGeneratorConfiguration languageConfig=LanguageGeneratorConfiguration.newInstance(model);
        languageConfig.setLanguageNamespace(myLanguage.getNamespace());
        languageConfig.setName("tmp");
        return GeneratorConfigUtil.calculate(mpsProject,languageConfig,true);
      }
    }
);
    myProject.getComponent(GeneratorManager.class).generateModelsFromDifferentModules(new ModuleContext(myLanguage,mpsProject),params.getModels(),IGenerationType.FILES);
  }
  dispose();
}
