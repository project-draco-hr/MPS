{
  return (List<SNode>)(ListSequence.fromList(myTargetConcepts).translate(new ITranslator2<Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>,SNode>(){
    public Iterable<SNode> translate(    Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> it){
      SNode targetConcept=it._0();
      final _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> function=it._1();
      SAbstractConcept concept=SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(targetConcept));
      Set<SNode> instances=((Set)manager.findInstances(myScope,Collections.singleton(concept),false,monitor));
      if (function == null) {
        return ListSequence.fromListWithValues(new ArrayList<SNode>(),instances);
      }
 else {
        return ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(),instances)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return function.invoke(it);
          }
        }
).toListSequence();
      }
    }
  }
).toListSequence());
}
