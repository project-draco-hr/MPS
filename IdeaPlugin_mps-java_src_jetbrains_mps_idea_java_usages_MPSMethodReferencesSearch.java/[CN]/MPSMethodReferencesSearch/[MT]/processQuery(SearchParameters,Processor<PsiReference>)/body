{
  if (!(queryParameters.getScope() instanceof GlobalSearchScope)) {
    return;
  }
  final GlobalSearchScope scope=(GlobalSearchScope)queryParameters.getScope();
  final PsiMethod method=queryParameters.getMethod();
  if (method instanceof MPSPsiNodeBase)   return;
  final SModuleReference blModule=PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)");
  final GeneratedFinder finder=method.isConstructor() ? FindUtils.getFinderByClass(new ModuleClassReference<GeneratedFinder>(blModule,"jetbrains.mps.baseLanguage.findUsages.ConstructorUsages_Finder")) : FindUtils.getFinderByClass(new ModuleClassReference<GeneratedFinder>(blModule,"jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder"));
  if (finder == null) {
    LOG.warning("MPS finder not found; MethodReferenceSearch will not work");
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      if (DumbService.getInstance(method.getProject()).isDumb()) {
        return;
      }
      if (method instanceof LightMethod) {
        if (method.getContainingClass().isEnum() && ("values".equals(method.getName()) || "valueOf".equals(method.getName()))) {
        }
        return;
      }
      final SNode methodNode=MPSReferenceSearch.getNodeForElement(method);
      if (methodNode == null) {
        return;
      }
      SearchQuery query=new SearchQuery(methodNode,new IdeaSearchScope(scope));
      SearchResults<SNode> results;
      try {
        results=FindUtils.makeProvider(finder).getResults(query,null);
      }
 catch (      IndexNotReadyException e) {
        return;
      }
      for (      SearchResult<SNode> result : results.getSearchResults()) {
        SNode usageNode=result.getObject();
        for (        SReference sref : usageNode.getReferences()) {
          SNode refTarget=sref.getTargetNode();
          if (refTarget == null)           continue;
          if (refTarget.getConcept().isSubConceptOf(MetaAdapterFactoryByName.getConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
            String role=sref.getRole();
            PsiElement usagePsiElement=MPSPsiProvider.getInstance(method.getProject()).getPsi(usageNode);
            if (!(usagePsiElement instanceof MPSPsiNode))             continue;
            for (            PsiElement e : usagePsiElement.getChildren()) {
              if (!(e instanceof MPSPsiRef))               continue;
              if (role.equals(((MPSPsiRef)e).getRole())) {
                consumer.process(e.getReference());
              }
            }
          }
        }
      }
    }
  }
);
}
