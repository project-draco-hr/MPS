{
  if (!(queryParameters.getScope() instanceof GlobalSearchScope)) {
    return;
  }
  final GlobalSearchScope scope=(GlobalSearchScope)queryParameters.getScope();
  final GeneratedFinder finder=FindUtils.getFinderByClass(new ModuleClassReference<GeneratedFinder>(new ModuleReference("jetbrains.mps.baseLanguage"),"jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder"));
  if (finder == null) {
    LOG.warning("MPS finder for base method usages not found; MethodReferenceSearch will not work");
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      PsiMethod method=queryParameters.getMethod();
      final SNode methodNode=MPSReferenceSearch.getNodeForElement(method);
      if (methodNode == null) {
        return;
      }
      SearchQuery query=new SearchQuery(methodNode,new BaseScope(){
        @Override public Iterable<SModule> getModules(){
          List<SModule> result=new ArrayList<SModule>();
          for (          SModule mod : MPSModuleRepository.getInstance().getModules()) {
            if (mod instanceof SolutionIdea) {
              Module ideaModule=((SolutionIdea)mod).getIdeaModule();
              if (scope.isSearchInModuleContent(ideaModule)) {
                result.add(mod);
              }
            }
 else {
              if (scope.isSearchInLibraries()) {
                result.add(mod);
              }
            }
          }
          return result;
        }
      }
);
      SearchResults<SNode> results;
      try {
        results=FindUtils.makeProvider(finder).getResults(query,null);
      }
 catch (      ProcessCanceledException e) {
        return;
      }
      for (      SearchResult<SNode> result : results.getSearchResults()) {
        SNode usageNode=result.getObject();
        for (        SReference sref : usageNode.getReferences()) {
          SNode refTarget=sref.getTargetNode();
          if (refTarget == null)           continue;
          if (refTarget.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
            String role=sref.getRole();
            PsiElement usagePsiElement=MPSPsiProvider.getInstance(method.getProject()).getPsi(usageNode);
            if (!(usagePsiElement instanceof MPSPsiNode))             continue;
            for (            PsiElement e : usagePsiElement.getChildren()) {
              if (!(e instanceof MPSPsiRef))               continue;
              if (role.equals(((MPSPsiRef)e).getContainingRole())) {
                consumer.process(((MPSPsiRef)e).getReference());
              }
            }
          }
        }
      }
    }
  }
);
}
