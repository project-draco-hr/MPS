{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_4wv567_a0a=null;
switch (0) {
case 0:
        final Map<IFile,IFile> toCopy=MapSequence.fromMap(new HashMap<IFile,IFile>());
      for (      IResource resource : input) {
        TResource tres=(TResource)resource;
        final IFile classesGen=tres.module().getClassesGen();
        String pluginRoot=pa.forResource(tres).properties(Target_copyClasses.this.getName(),CopyPluginClasses_Facet.Target_copyClasses.Parameters.class).ideaPluginRoot();
        if (pluginRoot != null) {
          final IFile pluginClasses=FileSystem.getInstance().getFileByPath(MacrosFactory.moduleDescriptor(tres.module()).expandPath(pluginRoot,tres.module().getDescriptorFile())).getDescendant("classes");
          MapSequence.fromMap(toCopy).put(classesGen,pluginClasses);
        }
 else {
          LOG.warning("Property null for " + tres.module());
        }
        _output_4wv567_a0a=Sequence.fromIterable(_output_4wv567_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
      }
    ThreadUtils.runInUIThreadAndWait(new Runnable(){
      public void run(){
        ModelAccess.instance().requireWrite(new Runnable(){
          public void run(){
            MapSequence.fromMap(toCopy).visitAll(new IVisitor<IMapping<IFile,IFile>>(){
              public void visit(              IMapping<IFile,IFile> it){
                IFile dest=it.value();
                if (dest.exists()) {
                  dest.mkdirs();
                }
 else {
                  String to=dest.getPath();
                  LOG.info("Cleaning " + to);
                  for (                  IFile child : ListSequence.fromList(dest.getChildren())) {
                    child.delete();
                  }
                }
              }
            }
);
            MapSequence.fromMap(toCopy).visitAll(new IVisitor<IMapping<IFile,IFile>>(){
              public void visit(              IMapping<IFile,IFile> it){
                String from=it.key().getPath();
                String to=it.value().getPath();
                LOG.info("Copy " + from + " to "+ to);
                FileUtil.copyDir(new File(from),new File(to));
              }
            }
);
          }
        }
);
      }
    }
);
default :
  return new IResult.SUCCESS(_output_4wv567_a0a);
}
}
}
;
}
