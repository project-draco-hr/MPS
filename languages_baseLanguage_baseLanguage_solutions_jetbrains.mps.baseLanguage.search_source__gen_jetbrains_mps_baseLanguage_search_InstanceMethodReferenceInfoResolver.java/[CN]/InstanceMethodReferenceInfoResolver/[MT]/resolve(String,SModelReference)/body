{
  if (referenceInfo == null) {
    return null;
  }
  List<SNode> methods=this.mySearchScope.getMethodsByName(referenceInfo);
  if (methods.isEmpty()) {
    return null;
  }
  if (methods.size() == 1) {
    return ListSequence.fromList(methods).first();
  }
  methods=MethodResolveUtil.selectByParmCount(methods,this.myActualArguments);
  if (methods.size() == 1) {
    return ListSequence.fromList(methods).first();
  }
  SNode classifier=SLinkOperations.getTarget(this.myInstanceType,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
  List<SNode> typeParameters=SLinkOperations.getChildren(this.myInstanceType,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"));
  Map<SNode,SNode> typeByTypeVar=MethodResolveUtil.getTypesByTypeVars(classifier,typeParameters);
  return MethodResolveUtil.chooseByParameterType(methods,this.myActualArguments,typeByTypeVar);
}
