{
  super("Edit",ID);
  this.setIsInternal(false);
  this.setPopup(false);
  try {
    this.addSeparator();
    if (BaseGroup.class.isAssignableFrom(CopyNodeAction.class)) {
      this.add(new CopyNodeAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(CopyNodeAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(CopyNodeReferenceAction.class)) {
      this.add(new CopyNodeReferenceAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(CopyNodeReferenceAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(PasteNodeAction.class)) {
      this.add(new PasteNodeAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(PasteNodeAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(CutNodeAction.class)) {
      this.add(new CutNodeAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(CutNodeAction.class,null));
    }
    this.addSeparator();
    if (BaseGroup.class.isAssignableFrom(AddModelImportAction.class)) {
      this.add(new AddModelImportAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(AddModelImportAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(AddModelImportByRootNodeAction.class)) {
      this.add(new AddModelImportByRootNodeAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(AddModelImportByRootNodeAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(AddLanguageImportAction.class)) {
      this.add(new AddLanguageImportAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(AddLanguageImportAction.class,null));
    }
    this.addSeparator();
    this.addAnchor(Edit_ActionGroup.LABEL_ID_custom);
  }
 catch (  Throwable t) {
    LOG.error("User group error",t);
  }
}
