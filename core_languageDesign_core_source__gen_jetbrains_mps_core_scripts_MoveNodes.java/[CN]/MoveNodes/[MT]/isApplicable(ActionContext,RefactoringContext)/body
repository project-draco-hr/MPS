{
  if (actionContext.getNodes().isEmpty()) {
    return false;
  }
  if (((Object)refactoringContext.getParameter("target")) instanceof SNode) {
    SNode targetNode=((SNode)((Object)refactoringContext.getParameter("target")));
    SNode concept=SNodeOperations.getConceptDeclaration(targetNode);
    ConceptAndSuperConceptsScope superConceptsScope=new ConceptAndSuperConceptsScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(concept)));
    List<LinkDeclaration> linkDeclarations=superConceptsScope.getLinkDeclarationsExcludingOverridden();
    Iterable<SNode> childLinkDeclarations=SequenceOperations.select(SequenceOperations.where(linkDeclarations,new zPredicate(null,null)),new zSelector(null,null));
    Iterable<String> childLinksRoles=SequenceOperations.select(childLinkDeclarations,new zSelector1(null,null));
    for (    SNode node : actionContext.getNodes()) {
      String childRole=node.getRole_();
      if (!(SequenceOperations.contains(childLinksRoles,childRole))) {
        return false;
      }
      for (      SNode linkDeclaration : childLinkDeclarations) {
        if (SPropertyOperations.getString(linkDeclaration,"role").equals(childRole)) {
          if (!(AbstractConceptDeclaration_Behavior.call_isAssignableFrom_1198080700262(SLinkOperations.getTarget(linkDeclaration,"target",false),SNodeOperations.getConceptDeclaration(node)))) {
            return false;
          }
        }
      }
    }
    return true;
  }
  if (((Object)refactoringContext.getParameter("target")) instanceof SModelDescriptor) {
    for (    SNode node : actionContext.getNodes()) {
      if (!(SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(node),"rootable"))) {
        return false;
      }
    }
    return true;
  }
  return false;
}
