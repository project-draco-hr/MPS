{
  String loseTest=this.state.getLoseClass();
  String loseMethod=this.state.getLoseMethod();
  String test=this.state.getCurrentClass();
  String method=this.state.getCurrentMethod();
  if (loseTest != null && loseMethod != null) {
    TestMethodTreeNode node=this.get(loseTest,loseMethod);
    if (node != null) {
      node.setState(TestState.ERROR);
    }
  }
 else {
    TestMethodTreeNode node=this.get(test,method);
    if (node != null) {
      if (TestEvent.START_TEST_PREFIX.equals(this.state.getToken())) {
        node.setState(TestState.IN_PROGRESS);
        if (this.getPreferences().getStateObject().isTrackRunning) {
          this.setCurrentNode(node);
        }
      }
 else       if (TestEvent.END_TEST_PREFIX.equals(this.state.getToken())) {
        node.setState(TestState.PASSED);
        TestMethodRow row=this.state.getTestMethodRow(test,method);
        if (row != null) {
          row.setSucceed();
        }
      }
 else       if (TestEvent.FAILURE_TEST_PREFIX.equals(this.state.getToken())) {
        node.setState(TestState.FAILED);
      }
 else       if (TestEvent.ERROR_TEST_PREFIX.equals(this.state.getToken())) {
        node.setState(TestState.ERROR);
      }
    }
    if (node != null && this.getPreferences().getStateObject().isSelectFirstFailed && node.getNextLeaf() == null) {
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          TestTree.this.selectFirstDefectNode();
        }
      }
);
    }
  }
}
