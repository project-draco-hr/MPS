{
  String loseTest=this.state.getLoseClass();
  String loseMethod=this.state.getLoseMethod();
  String test=this.state.getCurrentClass();
  String method=this.state.getCurrentMethod();
  final Wrappers._T<TestMethodTreeNode> methodNode=new Wrappers._T<TestMethodTreeNode>();
  if (loseTest != null && loseMethod != null) {
    methodNode.value=this.get(loseTest,loseMethod);
    if (methodNode.value != null) {
      methodNode.value.setState(TestState.ERROR);
    }
  }
 else {
    methodNode.value=this.get(test,method);
    TestCaseTreeNode testCaseNode=this.get(test);
    if (methodNode.value != null && testCaseNode != null) {
      if (this.state.isTerminated()) {
        this.updateState(methodNode.value,testCaseNode,TestState.TERMINATED);
      }
 else       if (TestEvent.START_TEST_PREFIX.equals(this.state.getToken())) {
        this.updateState(methodNode.value,testCaseNode,TestState.IN_PROGRESS);
        if (this.getPreferences().getStateObject().isTrackRunning) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              TestTree.this.setCurrentNode(methodNode.value);
            }
          }
);
        }
      }
 else       if (TestEvent.END_TEST_PREFIX.equals(this.state.getToken())) {
        if (TestState.IN_PROGRESS.equals(methodNode.value.getState())) {
          this.updateState(methodNode.value,testCaseNode,TestState.PASSED);
          TestMethodRow row=this.state.getTestMethodRow(test,method);
          if (row != null) {
            row.setSucceed();
          }
        }
      }
 else       if (TestEvent.FAILURE_TEST_PREFIX.equals(this.state.getToken())) {
        this.updateState(methodNode.value,testCaseNode,TestState.FAILED);
      }
 else       if (TestEvent.ERROR_TEST_PREFIX.equals(this.state.getToken())) {
        methodNode.value.setState(TestState.ERROR);
        this.updateState(methodNode.value,testCaseNode,TestState.ERROR);
      }
    }
  }
  if (isFailed(methodNode.value) && this.getPreferences().getStateObject().isSelectFirstFailed) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        TestTree.this.selectFirstDefectNode();
      }
    }
);
  }
  if (this.getPreferences().getStateObject().isHidePassed) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        TestTree.this.hidePassed(true);
      }
    }
);
  }
}
