{
  Set<EditorMessage> messages=new LinkedHashSet<EditorMessage>();
  if (rootNode.getModel() == null || rootNode.getModel().getModelDescriptor() == null) {
    return messages;
  }
  if (rootNode.getModel().isTransient()) {
    return messages;
  }
  List<SReference> yetBadReferences=new ArrayList<SReference>();
  SReference.disableLogging();
  final ArrayList<ResolveResult> resolveResultArrayList=new ArrayList<ResolveResult>();
  try {
    Set<SReference> badReferences=collectBadReferences(rootNode);
    if (!(badReferences.isEmpty())) {
      yetBadReferences=Resolver.resolveReferences(badReferences,editorContext.getOperationContext(),resolveResultArrayList,false);
      for (Iterator<ResolveResult> it=resolveResultArrayList.iterator(); it.hasNext(); ) {
        ResolveResult resolveResult=it.next();
        if (isNewTargetFromAnotherModel(resolveResult)) {
          yetBadReferences.add(getResolvedReference(resolveResult));
          it.remove();
        }
      }
    }
  }
  finally {
    SReference.enableLogging();
  }
  ThreadUtils.runInUIThreadNoWait(new Runnable(){
    public void run(){
      if (resolveResultArrayList.isEmpty()) {
        return;
      }
      Project p=(editorContext != null && editorContext.getOperationContext() != null ? editorContext.getOperationContext().getProject() : null);
      if (p == null) {
        return;
      }
      ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
        public void run(){
          for (          ResolveResult resolveResult : resolveResultArrayList) {
            resolveResult.setTarget();
          }
        }
      }
,p);
    }
  }
);
  for (  SReference ref : yetBadReferences) {
    EditorMessage message=HighlightUtil.createHighlighterMessage(ref.getSourceNode(),"unresolved reference",this,editorContext);
    messages.add(message);
  }
  return messages;
}
