{
  if (this.myType == null) {
    List<String> result=ListSequence.fromList(new ArrayList<String>());
    return result;
  }
  SubtypingManager manager=TypeChecker.getInstance().getSubtypingManager();
  StructuralNodeSet<?> frontier=new StructuralNodeSet();
  List<SNode> found=new ArrayList<SNode>();
  frontier.add(this.myType);
  while (!(frontier.isEmpty())) {
    StructuralNodeSet<?> ancestors=new StructuralNodeSet();
    for (    SNode node : SetSequence.fromSet(frontier)) {
      ancestors.addAllStructurally(manager.collectImmediateSupertypes(node,false));
      ListSequence.fromList(found).addElement(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Type"));
    }
    for (    SNode passed : ListSequence.fromList(found)) {
      ancestors.removeStructurally(passed);
    }
    frontier=ancestors;
  }
  List<String> result=ListSequence.fromList(new ArrayList<String>());
  for (  SNode node : ListSequence.fromList(found)) {
    ListSequence.fromList(result).addElement(node.toString());
    MapSequence.fromMap(this.myTypesMap).put(node.toString(),node);
  }
  return result;
}
