{
  if (this.myType == null) {
    List<String> result=ListSequence.<String>fromList(new ArrayList<String>());
    return result;
  }
  SubtypingManager manager=TypeChecker.getInstance().getSubtypingManager();
  StructuralNodeSet<?> frontier=new StructuralNodeSet();
  List<SNode> found=new ArrayList<SNode>();
  frontier.add(this.myType);
  while (!(frontier.isEmpty())) {
    StructuralNodeSet<?> ancestors=new StructuralNodeSet();
    for (    SNode node : SetSequence.<SNode>fromSet(frontier)) {
      ancestors.addAllStructurally(manager.collectImmediateSupertypes(node,false));
      ListSequence.<SNode>fromList(found).addElement(node);
    }
    for (    SNode passed : ListSequence.<SNode>fromList(found)) {
      ancestors.removeStructurally(passed);
    }
    frontier=ancestors;
  }
  List<String> result=ListSequence.<String>fromList(new ArrayList<String>());
  for (  SNode node : ListSequence.<SNode>fromList(found)) {
    ListSequence.<String>fromList(result).addElement(node.toString());
    MapSequence.<String,SNode>fromMap(this.myTypesMap).put(node.toString(),node);
  }
  return result;
}
