{
  this.addNodeById("1230052684687");
  this.addNodeById("1230052684697");
  this.addNodeById("1230052684705");
  this.addNodeById("1230052684709");
  SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
  SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(this.getNodeById("1230052684711"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),false);
  SLinkOperations.setTarget(call,"classConcept",SNodeOperations.cast(this.getNodeById("1230052684710"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
  SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById("1230052684702"),"jetbrains.mps.baseLanguage.structure.IntegerConstant"),call);
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052684691"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),SNodeOperations.cast(this.getNodeById("6195342755327940882"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.setStaticContainer(SNodeOperations.cast(this.getNodeById("1230052684706"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  ref.doRefactor();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052684688"),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),SNodeOperations.cast(this.getNodeById("1230052684706"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052684698"),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),SNodeOperations.cast(this.getNodeById("1230052684710"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
