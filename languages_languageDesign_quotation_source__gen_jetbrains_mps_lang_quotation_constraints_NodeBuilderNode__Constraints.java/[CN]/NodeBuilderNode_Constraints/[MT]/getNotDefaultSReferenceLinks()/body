{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(4184707567256882268l,-4914423608129972907l),5455284157993863840l,5455284157993910961l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(4184707567256882268l,-4914423608129972907l),5455284157993863840l,5455284157993910961l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ij2gcp_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode n=_context.getContextNode();
            while (n != null) {
              if (SNodeOperations.isInstanceOf(n,MetaAdapterFactory.getConcept(new UUID(4184707567256882268l,-4914423608129972907l),5455284157994012186l,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink")) || SNodeOperations.isInstanceOf(n,MetaAdapterFactory.getConcept(new UUID(4184707567256882268l,-4914423608129972907l),5455284157993863837l,"jetbrains.mps.lang.quotation.structure.NodeBuilder"))) {
                break;
              }
              n=SNodeOperations.getParent(n);
            }
            if (SNodeOperations.isInstanceOf(n,MetaAdapterFactory.getConcept(new UUID(4184707567256882268l,-4914423608129972907l),5455284157994012186l,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink"))) {
              SNode target=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(n,MetaAdapterFactory.getConcept(new UUID(4184707567256882268l,-4914423608129972907l),5455284157994012186l,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink")),MetaAdapterFactory.getReferenceLink(new UUID(4184707567256882268l,-4914423608129972907l),5455284157994012186l,5455284157994012188l,"link")),MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"));
              List<SNode> result=new ArrayList<SNode>();
              for (              String cname : LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(BehaviorReflection.invokeVirtual(String.class,target,"virtual_getFqName_1213877404258",new Object[]{}))) {
                SNode cc=SModelUtil.findConceptDeclaration(cname);
                SModel model=SNodeOperations.getModel(cc).getReference().resolve(MPSModuleRepository.getInstance());
                SModule currentModule=SNodeOperations.getModel(_context.getContextNode()).getModule();
                Collection<SModule> visModules=new GlobalModuleDependenciesManager(currentModule).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
                if ((cc != null) && visModules.contains(model.getModule())) {
                  ListSequence.fromList(result).addElement(cc);
                }
              }
              return ListScope.forNamedElements(result);
            }
 else {
              return new ModelPlusImportedScope(_context.getModel(),true,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
            }
          }
        }
      }
;
    }
  }
);
  return references;
}
