{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("concept",new BaseReferenceConstraintsDescriptor("concept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ij2gcp_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode n=_context.getContextNode();
            while (n != null) {
              if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink") || SNodeOperations.isInstanceOf(n,"jetbrains.mps.lang.quotation.structure.NodeBuilder")) {
                break;
              }
              n=SNodeOperations.getParent(n);
            }
            if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink")) {
              SNode target=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(n,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink"),"link",false),"target",false);
              List<SNode> result=new ArrayList<SNode>();
              for (              String cname : LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(BehaviorReflection.invokeVirtual(String.class,target,"virtual_getFqName_1213877404258",new Object[]{}))) {
                SNode cc=SModelUtil.findConceptDeclaration(cname,GlobalScope.getInstance());
                if ((cc != null) && operationContext.getScope().getModelDescriptor(SNodeOperations.getModel(cc).getReference()) != null) {
                  ListSequence.fromList(result).addElement(cc);
                }
              }
              return ListScope.forNamedElements(result);
            }
 else {
              return new ModelPlusImportedScope(_context.getModel(),true,operationContext.getScope(),"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
            }
          }
        }
      }
;
    }
  }
);
  return references;
}
