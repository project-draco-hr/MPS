{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_2=null;
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  SNode quotedNode_13=null;
  SNode quotedNode_14=null;
  SNode quotedNode_15=null;
  SNode quotedNode_16=null;
  SNode quotedNode_17=null;
  SNode quotedNode_18=null;
  SNode quotedNode_19=null;
  quotedNode_2=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.blCommand.structure.BLExpression",null,null,false);
  quotedNode_3=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,false);
  quotedNode_4=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,false);
  quotedNode_6=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.blCommand.structure.InstancesExpression",null,null,false);
  quotedNode_9=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.blCommand.structure.QueryParameterList",null,null,false);
  quotedNode_6.addChild("parameter",quotedNode_9);
  quotedNode_10=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference",null,null,false);
  SNodeAccessUtil.setReferenceTarget(quotedNode_10,"conceptDeclaration",(SNode)parameter_1);
  quotedNode_6.addChild("conceptArg",quotedNode_10);
  quotedNode_4.addChild("operand",quotedNode_6);
  quotedNode_7=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.WhereOperation",null,null,false);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_11,"forceMultiLine","true");
  quotedNode_14=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList",null,null,false);
  quotedNode_17=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null,null,false);
  quotedNode_19=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_19,"value","true");
  quotedNode_17.addChild("expression",quotedNode_19);
  quotedNode_14.addChild("statement",quotedNode_17);
  quotedNode_11.addChild("body",quotedNode_14);
  quotedNode_15=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_15,"name","it");
  quotedNode_18=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UndefinedType",null,null,false);
  quotedNode_15.addChild("type",quotedNode_18);
  quotedNode_11.addChild("parameter",quotedNode_15);
  quotedNode_7.addChild("closure",quotedNode_11);
  quotedNode_4.addChild("operation",quotedNode_7);
  quotedNode_3.addChild("operand",quotedNode_4);
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.scripts.structure.RefactorOperation",null,null,false);
  quotedNode_8=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_8,"forceMultiLine","true");
  quotedNode_12=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList",null,null,false);
  quotedNode_8.addChild("body",quotedNode_12);
  quotedNode_13=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_13,"name","node");
  quotedNode_16=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UndefinedType",null,null,false);
  quotedNode_13.addChild("type",quotedNode_16);
  quotedNode_8.addChild("parameter",quotedNode_13);
  quotedNode_5.addChild("closure",quotedNode_8);
  quotedNode_3.addChild("operation",quotedNode_5);
  quotedNode_2.addChild("expression",quotedNode_3);
  return quotedNode_2;
}
