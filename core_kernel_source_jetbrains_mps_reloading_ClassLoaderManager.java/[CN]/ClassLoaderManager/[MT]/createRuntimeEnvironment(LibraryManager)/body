{
  final Set<String> excludedPackages=new HashSet<String>();
  final Set<String> generatorPrefixes=new HashSet<String>();
  for (  Language l : libraryManager.getBootstrapModules(Language.class)) {
    for (    LanguageAspect aspect : LanguageAspect.values()) {
      if (aspect == LanguageAspect.STRUCTURE)       continue;
      excludedPackages.add(l.getNamespace() + "." + aspect.getName());
    }
    generatorPrefixes.add(l.getNamespace() + ".generator");
  }
  final Set<String> nonBootstrapPackages=new HashSet();
  final Set<String> reportedViolations=new HashSet();
  for (  Language l : MPSModuleRepository.getInstance().getAllModules(Language.class)) {
    if (generatorPrefixes.contains(l.getNamespace() + ".generator")) {
      continue;
    }
    for (    LanguageAspect aspect : LanguageAspect.values()) {
      nonBootstrapPackages.add(l.getNamespace() + "." + aspect.getName());
    }
  }
  return new RuntimeEnvironment<ModuleReference>(){
    public Class loadFromParent(    String cls,    RBundle<ModuleReference> bundle){
      IModule module=MPSModuleRepository.getInstance().getModule(bundle.getId());
      if (module instanceof Solution) {
        return null;
      }
      String pack=NameUtil.namespaceFromLongName(cls);
      if (excludedPackages.contains(pack)) {
        return null;
      }
      for (      String prefix : generatorPrefixes) {
        if (cls.startsWith(prefix)) {
          return null;
        }
      }
      Class classFromParent=getFromParent(cls);
      if (classFromParent != null && !reportedViolations.contains(cls)) {
        if (nonBootstrapPackages.contains(pack)) {
          LOG.warning("Non bootstrap class was loaded via bootstrap classloader: " + cls);
          reportedViolations.add(cls);
        }
      }
      return classFromParent;
    }
  }
;
}
