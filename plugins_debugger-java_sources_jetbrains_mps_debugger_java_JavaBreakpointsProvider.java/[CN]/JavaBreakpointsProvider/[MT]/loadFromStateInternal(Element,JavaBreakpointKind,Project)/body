{
switch (kind) {
case LINE_BREAKPOINT:
{
      final JavaBreakpointInfo breakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
      if (!breakpointInfo.isValid())       return null;
      SNodePointer pointer=new SNodePointer(breakpointInfo.myModelReference,breakpointInfo.myNodeId);
      LineBreakpoint breakpoint=new LineBreakpoint(pointer,project);
      breakpointInfo.initBreakpoint(breakpoint);
      return breakpoint;
    }
case EXCEPTION_BREAKPOINT:
{
    ExceptionBreakpointInfo exceptionBreakpointInfo=XmlSerializer.deserialize(state,ExceptionBreakpointInfo.class);
    ExceptionBreakpoint exceptionBreakpoint=new ExceptionBreakpoint(exceptionBreakpointInfo.myExceptionName,project);
    exceptionBreakpointInfo.initBreakpoint(exceptionBreakpoint);
    return exceptionBreakpoint;
  }
case METHOD_BREAKPOINT:
{
  final JavaBreakpointInfo lineBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
  if (!lineBreakpointInfo.isValid())   return null;
  SNodePointer pointer=new SNodePointer(lineBreakpointInfo.myModelReference,lineBreakpointInfo.myNodeId);
  LineBreakpoint lineBreakpoint=new LineBreakpoint(pointer,project);
  lineBreakpointInfo.initBreakpoint(lineBreakpoint);
  return lineBreakpoint;
}
case FIELD_BREAKPOINT:
{
final JavaBreakpointInfo fieldBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
if (!fieldBreakpointInfo.isValid()) return null;
SNodePointer pointer=new SNodePointer(fieldBreakpointInfo.myModelReference,fieldBreakpointInfo.myNodeId);
FieldBreakpoint fieldBreakpoint=new FieldBreakpoint(pointer,project);
fieldBreakpointInfo.initBreakpoint(fieldBreakpoint);
return fieldBreakpoint;
}
}
return null;
}
