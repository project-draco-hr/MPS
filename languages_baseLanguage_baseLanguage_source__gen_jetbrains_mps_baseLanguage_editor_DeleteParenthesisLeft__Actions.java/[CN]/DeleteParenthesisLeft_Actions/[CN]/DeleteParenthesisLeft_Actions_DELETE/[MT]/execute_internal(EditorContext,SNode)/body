{
  int unmatchedLeftParens=((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null) ? SPropertyOperations.getInteger(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")),MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1071364028384826861l,1071364028384826862l,"count")) : 0);
  int unmatchedRightParens=((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null) ? SPropertyOperations.getInteger(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")),MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1071364028384826861l,1071364028384826862l,"count")) : 0);
  SNode replacing=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1079359253375l,1079359253376l,"expression"));
  SNode rightMostNode=EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing,true);
  SNodeOperations.replaceWithAnother(node,replacing);
  SNode leftMostNode=EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing,false);
  ParenthesisUtil.checkWholeExpressionPriorities(replacing);
  ParenthesisUtil.createUnmatchedRightParenthesis(rightMostNode);
  if (unmatchedLeftParens > 0) {
    for (int i=0; i < unmatchedLeftParens; i++) {
      ParenthesisUtil.createUnmatchedLeftParenthesis(leftMostNode);
    }
  }
  if (unmatchedRightParens > 0) {
    for (int i=0; i < unmatchedRightParens; i++) {
      ParenthesisUtil.createUnmatchedRightParenthesis(rightMostNode);
    }
  }
  SelectionUtil.selectLabelCellAnSetCaret(editorContext,leftMostNode,SelectionManager.FIRST_CELL,0);
}
