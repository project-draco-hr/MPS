{
  FakeLanguageRuntime base=new FakeLanguageRuntime().withNamespace("base namespace").withAspect(context.mock(EditorAspectDescriptor.class,"base descriptor"));
  FakeLanguageRuntime extending=new FakeLanguageRuntime().withNamespace("extending namespace").withAspect(context.mock(EditorAspectDescriptor.class,"extending descriptor"));
  base.extendWith(extending);
  EditorAspectContributionsCache<Object,String> descriptorToString=new EditorAspectContributionsCache<Object,String>(base){
    @NotNull @Override protected Collection<String> getDeclaredContributions(    EditorAspectDescriptor descriptor,    Object key){
      return Collections.singleton(descriptor.toString());
    }
  }
;
  Object irrelevantKey=new Object();
  Collection<String> contributions=descriptorToString.getInLanguages(irrelevantKey,CollectionUtil.set("base namespace","extending namespace"));
  assertThat(contributions,containsInAnyOrder("base descriptor","extending descriptor"));
}
