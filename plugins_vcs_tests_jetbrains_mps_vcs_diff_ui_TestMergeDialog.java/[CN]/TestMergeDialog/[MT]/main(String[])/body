{
  IdeMain.setTestMode(TestMode.NO_TEST);
  TestMain.configureMPS();
  IconLoader.activate();
  final SModel models[]=new SModel[3];
  String resultFile;
  if (args.length == 2) {
    final SModel[] zipped=MergeBackupUtil.loadZippedModels(new File(args[0]),MergeVersion.values());
    models[0]=zipped[0];
    models[1]=zipped[1];
    models[2]=zipped[2];
    resultFile=args[1];
  }
 else   if (args.length == 4) {
    models[0]=ModelPersistence.readModel(FileSystem.getInstance().getFileByPath(args[0]),false);
    models[1]=ModelPersistence.readModel(FileSystem.getInstance().getFileByPath(args[1]),false);
    models[2]=ModelPersistence.readModel(FileSystem.getInstance().getFileByPath(args[2]),false);
    resultFile=args[3];
  }
 else {
    System.err.println("There must be 2 or 4 parameters");
    return;
  }
  final String finalResultFile=resultFile;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      final MergeModelsDialog dialog=ModelAccess.instance().runReadAction(new Computable<MergeModelsDialog>(){
        public MergeModelsDialog compute(){
          return new MergeModelsDialog(models[0],models[1],models[2],new SimpleDiffRequest(ourProject,"Local Version","Merge Result","Remote Version"));
        }
      }
);
      dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
      dialog.showDialog();
      final SModel result=dialog.getResultModel();
      if (result == null) {
        dialog.dispose();
        System.exit(0);
      }
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          IFile iFile=FileSystem.getInstance().getFileByPath(finalResultFile);
          if (!iFile.exists())           iFile.createNewFile();
          ModelPersistence.saveModel(result,iFile);
        }
      }
);
      dialog.dispose();
      System.exit(0);
    }
  }
);
}
