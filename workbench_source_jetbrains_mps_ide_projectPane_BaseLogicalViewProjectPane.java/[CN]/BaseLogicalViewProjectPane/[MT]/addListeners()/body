{
  DragSource.getDefaultDragSource().createDefaultDragGestureRecognizer(getTree(),DnDConstants.ACTION_MOVE,new DragGestureListener(){
    public void dragGestureRecognized(    DragGestureEvent dge){
      if ((dge.getDragAction() & DnDConstants.ACTION_COPY_OR_MOVE) == 0)       return;
      ProjectView projectView=ProjectView.getInstance(getProject());
      if (projectView == null)       return;
      final AbstractProjectViewPane currentPane=projectView.getCurrentProjectViewPane();
      if (!(currentPane instanceof BaseLogicalViewProjectPane))       return;
      final SNode node=getSelectedSNode();
      if (node == null)       return;
      try {
        dge.startDrag(DragSource.DefaultMoveNoDrop,new MyTransferable(node),new MyDragSourceListener());
      }
 catch (      InvalidDnDOperationException ignored) {
      }
    }
  }
);
  new DropTarget(myTree,new PropjectPaneDnDListener(myTree,new MyTransferable(null).getTransferDataFlavors()[0]));
  myTree.enableDnd(this);
  VirtualFileManager.getInstance().addVirtualFileManagerListener(myRefreshListener);
  SModelRepository.getInstance().addModelRepositoryListener(mySModelRepositoryListener);
  CommandProcessor.getInstance().addCommandListener(myCommandListener);
  MPSModuleRepository.getInstance().addModuleRepositoryListener(myRepositoryListener);
  getMPSProject().getComponent(GeneratorManager.class).addGenerationListener(myGenerationListener);
  ClassLoaderManager.getInstance().addReloadHandler(myReloadListener);
}
