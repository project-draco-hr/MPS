{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return myInIntervalExpression_BehaviorDescriptor;
case 1:
  return myIntervalContainsExpression_BehaviorDescriptor;
case 2:
return myMathSymbol_BehaviorDescriptor;
case 3:
return myBigProdExpression_BehaviorDescriptor;
case 4:
return myBigMaxExpression_BehaviorDescriptor;
case 5:
return myBigMinExpression_BehaviorDescriptor;
case 6:
return myBigSumExpression_BehaviorDescriptor;
case 7:
return myDecimalBinaryOperation_BehaviorDescriptor;
case 8:
return myDecimalDivExpression_BehaviorDescriptor;
case 9:
return myDecimalMulExpression_BehaviorDescriptor;
case 10:
return myDecimalPlusExpression_BehaviorDescriptor;
case 11:
return myDecimalMinusExpression_BehaviorDescriptor;
case 12:
return myMatrixInverseOperation_BehaviorDescriptor;
case 13:
return myMathContext_BehaviorDescriptor;
case 14:
return myMatrixType_BehaviorDescriptor;
case 15:
return myMatrixConstructor_BehaviorDescriptor;
case 16:
return myMatrixElementAccessExpression_BehaviorDescriptor;
case 17:
return myExponentialOperation_BehaviorDescriptor;
case 18:
return myMatrixExponentialOperation_BehaviorDescriptor;
case 19:
return myConjugateOperation_BehaviorDescriptor;
case 20:
return myTransposeOperation_BehaviorDescriptor;
default :
return null;
}
}
