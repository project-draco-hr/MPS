{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0y.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myBigMaxExpression__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myBigMinExpression__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myBigProdExpression__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myBigSumExpression__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myConjugateOperation__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myDecimalBinaryOperation__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myDecimalDivExpression__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myDecimalMinusExpression__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myDecimalMulExpression__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myDecimalPlusExpression__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myExponentialOperation__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myInIntervalExpression__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myIntervalContainsExpression__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myMathContext__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myMathSymbol__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myMatrixConstructor__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myMatrixElementAccessExpression__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myMatrixExponentialOperation__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myMatrixInverseOperation__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myMatrixType__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myTransposeOperation__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
