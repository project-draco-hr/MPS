{
  this.addNodeById("7568753874916167815");
  this.addNodeById("7568753874916167870");
  IntroduceLocalVariableRefactoring refactoring=new IntroduceLocalVariableRefactoring();
  refactoring.init(SNodeOperations.cast(this.getNodeById("7568753874916167842"),"jetbrains.mps.baseLanguage.structure.DotExpression"),null);
  refactoring.setName("i");
  refactoring.setReplacingAll(true);
  refactoring.doRefactoring();
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("7568753874916167816"),"jetbrains.mps.baseLanguage.structure.ClassConcept") + "' and '"+ SNodeOperations.cast(this.getNodeById("7568753874916167891"),"jetbrains.mps.baseLanguage.structure.ClassConcept")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7568753874916167816"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7568753874916167891"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
