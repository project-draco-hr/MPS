{
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(((BaseAction)ActionManager.getInstance().getAction("jetbrains.mps.debugger.api.ui.actions.GoToBreakpointSourceAction_Action")));
  group.add(((BaseAction)ActionManager.getInstance().getAction("jetbrains.mps.debugger.api.ui.actions.ViewBreakpointSourceAction_Action")));
  group.add(createAddActionGroup());
  group.add(((BaseAction)ActionManager.getInstance().getAction("jetbrains.mps.debugger.api.ui.actions.DeleteBreakpointAction_Action")));
  group.add(new Separator());
  group.add(new ToggleAction("Tree View","Toggle Tree/List View",Icons.BREAKPOINTS_DIALOG_TREE_VIEW){
    @Override public boolean isSelected(    AnActionEvent e){
      return isTreeView();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      switchView();
      e.getPresentation().setText(myViews[1 - myCurrentViewIndex].getTitle());
    }
  }
);
  group.add(new ToggleAction("Group By Module","Group By Module",Icons.BREAKPOINTS_DIALOG_GROUP_BY_MODULE){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!(isTreeView())) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isModuleGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleModuleGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Model","Group By Model",Icons.BREAKPOINTS_DIALOG_GROUP_BY_MODEL){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!(isTreeView())) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isModelGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleModelGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Root","Group By Root",Icons.BREAKPOINTS_DIALOG_GROUP_BY_ROOT){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!(isTreeView())) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isRootGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleRootGroup(state);
      tree.update();
    }
  }
);
  group.add(new AnAction("Expand All","Expand All",jetbrains.mps.ide.findusages.view.icons.Icons.EXPAND_ICON){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      if (!(isTreeView())) {
        return;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.expandAll();
    }
  }
);
  group.add(new AnAction("Collapse All","Collapse All",jetbrains.mps.ide.findusages.view.icons.Icons.COLLAPSE_ICON){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      if (!(isTreeView())) {
        return;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.collapseAll();
    }
  }
);
  return group;
}
