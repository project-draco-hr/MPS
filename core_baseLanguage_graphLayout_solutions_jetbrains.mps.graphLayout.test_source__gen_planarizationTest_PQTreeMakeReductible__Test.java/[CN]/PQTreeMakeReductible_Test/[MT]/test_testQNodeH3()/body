{
  PQTree tree=new PQTree();
  List<Leaf> leaves=ListSequence.fromList(new ArrayList<Leaf>());
  this.createSampleTree(tree,leaves,3,ListSequence.fromListAndArray(new ArrayList<Integer>(),2,2,3));
  ListSequence.fromList(leaves).getElement(0).setState(PQNode.State.FULL);
  ListSequence.fromList(leaves).getElement(2).setState(PQNode.State.FULL);
  ListSequence.fromList(leaves).getElement(4).setState(PQNode.State.FULL);
  ListSequence.fromList(leaves).getElement(5).setState(PQNode.State.FULL);
  System.out.println(tree);
  System.out.println("after:");
  tree.makeReducible();
  System.out.println(tree);
  Assert.assertTrue(ListSequence.fromList(tree.getLeaves()).where(new IWhereFilter<Leaf>(){
    public boolean accept(    Leaf it){
      return it.getState() == PQNode.State.FULL;
    }
  }
).count() == 3);
}
