{
  Thread thread=myShowIntentionsThread.get();
  if (thread != null) {
    thread.interrupt();
  }
  hideLightBulb();
  myShowIntentionsThread.set(new Thread("Intentions"){
    public void run(){
      try {
        Thread.sleep(IntentionsSupport.INTENTION_SHOW_DELAY);
        if (interrupted()) {
          return;
        }
        boolean show=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
          public Boolean compute(){
            if (isInconsistentEditor() || myEditor.isReadOnly())             return false;
            return TypeContextManager.getInstance().runTypeCheckingComputation(myEditor,myEditor.getEditedNode(),new Computation<Boolean>(){
              @Override public Boolean compute(              TypeCheckingContext context){
                return IntentionsManager.getInstance().hasAvailableBaseIntentions(myEditor.getSelectedNode(),myEditor.getEditorContext());
              }
            }
);
          }
        }
);
        if (!show || interrupted()) {
          return;
        }
        ModelAccess.instance().runReadInEDT(new Runnable(){
          public void run(){
            if (isInconsistentEditor() || myEditor.isReadOnly() || interrupted())             return;
            if (myEditor.getSelectedCell() == null) {
              hideLightBulb();
            }
 else {
              adjustLightBulbLocation();
              showLightBulb(new Computable<Boolean>(){
                public Boolean compute(){
                  return interrupted();
                }
              }
);
            }
          }
        }
);
      }
 catch (      InterruptedException e) {
      }
catch (      RuntimeInterruptedException e) {
      }
 finally {
        myShowIntentionsThread.compareAndSet(this,null);
      }
    }
  }
);
  myShowIntentionsThread.get().start();
}
