{
  Icon icon=intention.getDescriptor().getType().getIcon();
  final IntentionsManager intentionsManager=IntentionsManager.getInstance();
  final DefaultActionGroup intentionActionGroup=new DefaultActionGroup(intention.getDescription(node,myEditor.getEditorContext()),true){
    @Override public boolean canBePerformed(    DataContext c){
      return true;
    }
    @Override public void actionPerformed(    AnActionEvent e){
      Project project=myEditor.getOperationContext().getProject();
      if (project == null) {
        return;
      }
      ModelAccess.instance().runCommandInEDT(new Runnable(){
        public void run(){
          intention.execute(node,myEditor.getEditorContext());
        }
      }
,project);
    }
  }
;
  intentionActionGroup.add(new BaseAction("Go to Intention Declaration","Go to declaration of this intention",icon){
    @Override protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      ModelAccess.instance().runWriteInEDT(new Runnable(){
        public void run(){
          SNode intentionNode=((SNodeReference)intention.getDescriptor().getIntentionNodeReference()).resolve(MPSModuleRepository.getInstance());
          if (intentionNode == null) {
            Messages.showErrorDialog(ProjectHelper.toIdeaProject(myEditor.getOperationContext().getProject()),"Could not find declaration for " + intention.getClass().getSimpleName() + " intention ("+ intention.getClass().getName()+ ")","Intention Declaration");
          }
 else {
            NavigationSupport.getInstance().openNode(myEditor.getOperationContext(),intentionNode,true,true);
            NavigationSupport.getInstance().selectInTree(myEditor.getOperationContext(),intentionNode,false);
          }
        }
      }
);
    }
  }
);
  intentionActionGroup.add(new BaseAction("Disable This Intention","Disables  this intention type",icon){
    @Override protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      intentionsManager.disableIntention(intention.getDescriptor().getPersistentStateKey());
    }
  }
);
  intentionActionGroup.getTemplatePresentation().setIcon(icon);
  return intentionActionGroup;
}
