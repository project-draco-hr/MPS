{
  SNode node=myEditor.getEditedNode();
  if (node == null || node.getModel().isDisposed() || node.getModel().isNotEditable())   return;
  Set<IntentionType> availableIntentionTypes=TypeContextManager.getInstance().runTypeCheckingComputation(myEditor,myEditor.getEditedNode(),new Computation<Set<IntentionType>>(){
    @Override public Set<IntentionType> compute(    TypeCheckingContext context){
      return IntentionsManager.getInstance().getAvailableBaseIntentionTypes(myEditor.getSelectedNode(),myEditor.getEditorContext());
    }
  }
);
  if (availableIntentionTypes.isEmpty()) {
    return;
  }
  if (terminated.compute()) {
    return;
  }
  IntentionType typeToShow=IntentionType.getLowestPriorityType();
  for (  IntentionType intentionType : availableIntentionTypes) {
    if (intentionType.getPriority() < typeToShow.getPriority()) {
      typeToShow=intentionType;
    }
  }
  if (terminated.compute()) {
    return;
  }
  showLightBulbComponent(typeToShow == IntentionType.NORMAL ? Icons.INTENTION : typeToShow.getIcon());
}
