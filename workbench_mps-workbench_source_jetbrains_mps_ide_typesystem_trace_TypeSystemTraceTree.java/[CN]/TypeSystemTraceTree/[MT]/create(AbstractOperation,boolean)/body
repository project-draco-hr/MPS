{
  if (!(filterNodeType(operation))) {
    return null;
  }
  final boolean showNode=showNodeRecursively(operation);
  List<TypeSystemTraceTreeNode> children=new ArrayList<TypeSystemTraceTreeNode>();
  if (withChildren) {
    for (    AbstractOperation consequence : operation.getConsequences()) {
      TypeSystemTraceTreeNode node=create(consequence,false);
      if (node != null) {
        children.add(node);
      }
    }
  }
 else   if (!(showNode)) {
    if (!(operation.getConsequences().iterator().hasNext())) {
      return null;
    }
  }
  final boolean hasAnError=hasAnErrorAsConsequence(operation);
  TypeSystemTraceTreeNode result=new TypeSystemTraceTreeNode(operation,myContextTracker.getCurrentState(),myEditorComponent){
    @Override public void doUpdatePresentation(){
      super.doUpdatePresentation();
      if (!(showNode)) {
        setColor(JBColor.GRAY);
      }
 else       if (hasAnError) {
        setColor(JBColor.RED);
      }
    }
  }
;
  for (  TypeSystemTraceTreeNode node : children) {
    result.add(node);
  }
  if (hasAnError) {
    myErrorNodes.add(result);
  }
  return result;
}
