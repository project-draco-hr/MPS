{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(5910632049497948789l,-4896964971953436952l),8707387027762047761l,8707387027762047762l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(5910632049497948789l,-4896964971953436952l),8707387027762047761l,8707387027762047762l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> variables=SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.pattern.testLang.structure.PatternTest",false,false),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false,new String[]{});
          List<SNode> result=new ArrayList<SNode>();
          Set<String> names=new HashSet();
          for (          SNode var : variables) {
            if (!(names.contains(SPropertyOperations.getString(var,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))))) {
              ListSequence.fromList(result).addElement(var);
              names.add(SPropertyOperations.getString(var,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
            }
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_t68zsq_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
