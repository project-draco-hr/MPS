{
  final SNode mdecl=SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false);
  if (mdecl == null) {
    return;
  }
  final List<SNode> argTypes=new ArrayList<SNode>();
  for (  SNode a : ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true))) {
    ListSequence.fromList(argTypes).addElement(typeCheckingContext.typeOf(a,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042630",true));
  }
  final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,staticMethodCall,"virtual_isInTypeInferenceContext_4837286298388660615",new Object[]{}))) {
    for (    SNode tvd : ListSequence.fromList(BaseMethodDeclaration_Behavior.call_getInferrableTypeVars_6848250892784543828(mdecl))) {
      MapSequence.fromMap(subs).put(tvd,((SLinkOperations.getTarget(tvd,"bound",true) == null) ? _quotation_createNode_twb6p4_a0a1a0a9a1() : SNodeOperations.copyNode(SLinkOperations.getTarget(tvd,"bound",true))));
    }
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"typeArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).isNotEmpty()) {
    for (    SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true))) {
      if (!(MapSequence.fromMap(subs).containsKey(tvd))) {
        final SNode T_typevar_9029841626189042720=typeCheckingContext.createNewRuntimeTypesVariable();
        MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_9029841626189042720));
      }
    }
  }
 else {
{
      Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).iterator();
      Iterator<SNode> targ_it=ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"typeArgument",true)).iterator();
      SNode tvd_var;
      SNode targ_var;
      while (tvd_it.hasNext() && targ_it.hasNext()) {
        tvd_var=tvd_it.next();
        targ_var=targ_it.next();
        MapSequence.fromMap(subs).put(tvd_var,targ_var);
        if (SNodeOperations.isInstanceOf(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
        }
      }
    }
  }
  List<SNode> typel=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),mdecl,"virtual_getTypeApplicationParameters_8277080359323839095",new Object[]{ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).count()});
  for (  SNode type : ListSequence.fromList(typel)) {
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
      BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
    }
  }
  SNode retType=SLinkOperations.getTarget(mdecl,"returnType",true);
  if (SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
    BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
    retType=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_expandGenerics_4107091686347199582",new Object[]{subs});
  }
{
    SNode _nodeToCheck_1029348928467=staticMethodCall;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042832",0,null);
    typeCheckingContext.createLessThanInequality((SNode)retType,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042834",true),false,true,_info_12389875345);
  }
  List<SNode> actualArguments=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(actualArguments).addSequence(ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)));
{
    Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
    Iterator<SNode> argt_it=ListSequence.fromList(argTypes).iterator();
    SNode type_var;
    SNode argt_var;
    while (type_it.hasNext() && argt_it.hasNext()) {
      type_var=type_it.next();
      argt_var=argt_it.next();
      final SNode actualArgument=ListSequence.fromList(actualArguments).removeElementAt(0);
      final SNode _type=type_var;
      if (SNodeOperations.isInstanceOf(_type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
{
          final SNode A=argt_var;
          typeCheckingContext.whenConcrete(A,new Runnable(){
            public void run(){
{
                SNode _nodeToCheck_1029348928467=staticMethodCall;
                EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042876",0,null);
{
                  BaseQuickFixProvider intentionProvider=null;
                  intentionProvider=new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.AddCast_QuickFix",false);
                  intentionProvider.putArgument("desiredType",_type);
                  intentionProvider.putArgument("expression",actualArgument);
                  _info_12389875345.addIntentionProvider(intentionProvider);
                }
                typeCheckingContext.createGreaterThanInequality((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(_type,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_expandGenerics_4107091686347199582",new Object[]{subs}),(SNode)typeCheckingContext.getExpandedNode(A),false,true,_info_12389875345);
              }
            }
          }
,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042874",false,false);
        }
      }
 else {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
{
            SNode _nodeToCheck_1029348928467=argt_var;
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042899",0,null);
{
              BaseQuickFixProvider intentionProvider=null;
              intentionProvider=new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.AddCast_QuickFix",false);
              intentionProvider.putArgument("desiredType",_type);
              intentionProvider.putArgument("expression",actualArgument);
              _info_12389875345.addIntentionProvider(intentionProvider);
            }
            typeCheckingContext.createGreaterThanInequality((SNode)_type,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9029841626189042906",true),true,true,_info_12389875345);
          }
        }
      }
    }
  }
  TypeVariableMatchUtil.checkTypeParametersMatchingTypeArguments(typeCheckingContext,mdecl,staticMethodCall,subs);
}
