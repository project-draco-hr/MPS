{
  this.addNodeById("1230053302525");
  this.addNodeById("1230053302541");
  this.addNodeById("1230053302545");
  this.addNodeById("1230053302552");
  MoveStaticMethodRefactoring ref=new MoveStaticMethodRefactoring(SNodeOperations.cast(this.getNodeById("1230053302530"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),SNodeOperations.cast(this.getNodeById("1230053302542"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053302526"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("1230053302542"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053302546"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("1230053302553"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
