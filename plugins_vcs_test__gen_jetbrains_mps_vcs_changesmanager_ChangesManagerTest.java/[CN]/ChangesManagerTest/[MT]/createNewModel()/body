{
  final Wrappers._T<CurrentDifference> newModelDiff=new Wrappers._T<CurrentDifference>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      String modelName="newmodel";
      SModule module=myUiDiff.getModelDescriptor().getModule();
      SModuleOperations.createModelWithAdjustments(MODEL_PREFIX + modelName,module.getModelRoots().iterator().next());
      newModelDiff.value=getCurrentDifference(modelName);
    }
  }
);
  final EditableSModel md=newModelDiff.value.getModelDescriptor();
  ModelAccess.instance().runWriteInEDT(new Runnable(){
    public void run(){
      md.load();
      md.save();
    }
  }
);
  ModelAccess.instance().flushEventQueue();
  final VirtualFile vf=VirtualFileUtils.getVirtualFile(((FileDataSource)md.getSource()).getFile());
  doSomethingAndWaitForFileStatusChange(new Runnable(){
    public void run(){
    }
  }
,vf,FileStatus.UNKNOWN);
  newModelDiff.value.setEnabled(true);
  waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_4gxggu_a0a11a85(newModelDiff.value.getChangeSet())).isEmpty());
  checkRootStatuses();
  runCommandAndWait(new Runnable(){
    public void run(){
      ((SModelInternal)md).addLanguage(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"));
      createNewRoot(md);
    }
  }
);
  checkOneAddedRoot(newModelDiff.value);
  MapSequence.fromMap(myExpectedFileStatuses).put("newmodel.NewRoot",FileStatus.UNKNOWN);
  checkRootStatuses();
  doSomethingAndWaitForFileStatusChange(new Runnable(){
    public void run(){
      myChangeListManager.addUnversionedFiles(myChangeListManager.getDefaultChangeList(),Arrays.asList(vf));
    }
  }
,vf,null);
  myChangeListManager.ensureUpToDate(false);
  checkOneAddedRoot(newModelDiff.value);
  MapSequence.fromMap(myExpectedFileStatuses).put("newmodel.NewRoot",FileStatus.ADDED);
  checkRootStatuses();
}
