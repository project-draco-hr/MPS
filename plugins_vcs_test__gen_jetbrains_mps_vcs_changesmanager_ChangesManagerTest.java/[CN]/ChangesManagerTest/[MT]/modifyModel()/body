{
  runCommandAndWait(new Runnable(){
    public void run(){
      SModel model=myUtilDiff.getModelDescriptor();
      SNode root=ListSequence.fromList(SModelOperations.getRoots(model,"jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode r){
          return "ImageLoader".equals(SPropertyOperations.getString(r,"name"));
        }
      }
);
      SPropertyOperations.set(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),root,"jetbrains.mps.baseLanguage.structure.Classifier","call_methods_5292274854859311639",new Object[]{})).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode m){
          return "getImageAttempts".equals(SPropertyOperations.getString(m,"name"));
        }
      }
),"name","getImageAttempts2");
      ListSequence.fromList(SLinkOperations.getTargets(root,"member",true)).removeWhere(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
        }
      }
);
    }
  }
);
  waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_4gxggu_a0a3a13(myUtilDiff.getChangeSet())).isNotEmpty());
  MapSequence.fromMap(myExpectedFileStatuses).put("util.ImageLoader",FileStatus.MODIFIED);
  checkRootStatuses();
}
