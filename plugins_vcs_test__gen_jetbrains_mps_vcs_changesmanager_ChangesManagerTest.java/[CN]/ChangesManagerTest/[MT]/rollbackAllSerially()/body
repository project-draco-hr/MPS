{
  checkRootStatuses();
  Random random=new Random(239);
  String stringBeforeAll=getChangeSetString(myUiDiff.getChangeSet());
  final SModel model=myUiDiff.getModelDescriptor();
  List<SNodeReference> affectedNodePointers=ListSequence.fromList(new ArrayList<SNodeReference>());
  while (true) {
    List<ModelChange> changesBefore=ListSequence.fromListWithValues(new ArrayList<ModelChange>(),myUiDiff.getChangeSet().getModelChanges());
    if (ListSequence.fromList(changesBefore).isEmpty()) {
      break;
    }
    final ModelChange changeToPick=ListSequence.fromList(changesBefore).getElement(random.nextInt(ListSequence.fromList(changesBefore).count()));
    runCommandAndWait(new Runnable(){
      public void run(){
        changeToPick.getOppositeChange().apply(model,new NodeCopier(((BaseSModelDescriptor)model).getSModelInternal()));
      }
    }
);
    waitAndCheck(myUiDiff);
    Assert.assertEquals(ListSequence.fromList(changesBefore).count() - 1,ListSequence.fromList(check_4gxggu_a1a6a8a55(myUiDiff.getChangeSet())).count());
    ListSequence.fromList(affectedNodePointers).addElement(new SNodePointer(myUiDiff.getModelDescriptor().getReference(),changeToPick.getRootId()));
  }
  MapSequence.fromMap(myExpectedFileStatuses).removeKey("ui.DocumentLayout");
  MapSequence.fromMap(myExpectedFileStatuses).removeKey("ui.HTMLPanel");
  checkRootStatuses();
  undoAndCheck(myUiDiff,affectedNodePointers,false);
  Assert.assertEquals(stringBeforeAll,getChangeSetString(myUiDiff.getChangeSet()));
  MapSequence.fromMap(myExpectedFileStatuses).put("ui.DocumentLayout",FileStatus.MODIFIED);
  MapSequence.fromMap(myExpectedFileStatuses).put("ui.HTMLPanel",FileStatus.MODIFIED);
  checkRootStatuses();
}
