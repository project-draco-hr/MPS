{
  setAutoaddPolicy(VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY);
  checkRootStatuses();
  final EditableSModel md=myUiDiff.getModelDescriptor();
  String changeSetStringBefore=getChangeSetString(myUiDiff.getChangeSet());
  runCommandAndWait(new Runnable(){
    public void run(){
      DeleteModelHelper.deleteModel(myIdeaProject,md.getModule(),md,false,true);
    }
  }
);
  waitForChangesManager();
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        UndoManager.getInstance(myIdeaProject).undo(null);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail();
  }
  waitForReloadFinished();
  ModelAccess.instance().flushEventQueue();
  waitForChangesManager();
  myUiDiff=getCurrentDifference("ui");
  myUiDiff.setEnabled(true);
  waitForChangesManager();
  doSomethingAndWaitForFileStatusChange(new Runnable(){
    public void run(){
    }
  }
,VirtualFileUtils.getVirtualFile(((BaseEditableSModelDescriptor)myUiDiff.getModelDescriptor()).getSource().getFile()),FileStatus.MODIFIED);
  waitForChangesManager();
  Assert.assertEquals(changeSetStringBefore,getChangeSetString(myUiDiff.getChangeSet()));
  checkRootStatuses();
  setAutoaddPolicy(VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY);
}
