{
  final Wrappers._T<SNode> root=new Wrappers._T<SNode>();
  final Wrappers._T<SNode> field=new Wrappers._T<SNode>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      root.value=getDocumentLayoutRoot();
      field.value=Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),root.value,"jetbrains.mps.baseLanguage.structure.ClassConcept","call_fields_5292274854859383272",new Object[]{})).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode f){
          return "textPositions".equals(SPropertyOperations.getString(f,"name"));
        }
      }
);
    }
  }
);
  Assert.assertNotNull(field.value);
  _FunctionTypes._return_P0_E0<? extends SNode> moveUpTwice=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      SNodeOperations.insertPrevSiblingChild(field.value,SNodeOperations.getPrevSibling(field.value));
      SNodeOperations.insertPrevSiblingChild(field.value,SNodeOperations.getPrevSibling(field.value));
      return SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  _FunctionTypes._return_P0_E0<? extends SNode> moveDown=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      SNodeOperations.insertNextSiblingChild(field.value,SNodeOperations.getNextSibling(field.value));
      return SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  _FunctionTypes._return_P0_E0<? extends SNode> moveToOtherClass=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      SNode inner=SNodeOperations.cast(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),root.value,"jetbrains.mps.baseLanguage.structure.Classifier","call_nestedClassifiers_5292274854859193142",new Object[]{})).first(),"jetbrains.mps.baseLanguage.structure.ClassConcept");
      ListSequence.fromList(SLinkOperations.getTargets(inner,"member",true)).addElement(field.value);
      return SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  List<_FunctionTypes._return_P0_E0<? extends SNode>> tasks=ListSequence.fromList(new ArrayList<_FunctionTypes._return_P0_E0<? extends SNode>>());
  for (int i=0; i < 3; i++) {
    ListSequence.fromList(tasks).addElement(moveUpTwice);
  }
  for (int i=0; i < 19; i++) {
    ListSequence.fromList(tasks).addElement(moveDown);
  }
  ListSequence.fromList(tasks).addElement(moveToOtherClass);
  doSomethingAndUndo(myUiDiff,false,tasks);
}
