{
  int changesBefore=ListSequence.fromList(check_4gxggu_a0a0a53(myUtilDiff.getChangeSet())).count();
  final jetbrains.mps.smodel.SModel modelContent=ModelPersistence.readModel(myUtilDiff.getModelDescriptor().getSource(),false);
  createNewRoot(modelContent.getModelDescriptor());
  final EditableSModel modelDescriptor=myUtilDiff.getModelDescriptor();
  waitForSomething(new Runnable(){
    public void run(){
      SModelRepository.getInstance().addModelRepositoryListener(new SModelRepositoryAdapter(){
        @Override public void modelsReplaced(        Set<SModel> modelDescriptors){
          if (modelDescriptors.contains(modelDescriptor)) {
            SModelRepository.getInstance().removeModelRepositoryListener(this);
          }
          waitCompleted();
        }
      }
);
      ModelAccess.instance().runWriteInEDT(new Runnable(){
        public void run(){
          try {
            myUtilVirtualFile.setBinaryContent(ModelPersistence.modelToString(modelContent).getBytes(FileUtil.DEFAULT_CHARSET));
          }
 catch (          IOException e) {
            throw new AssertionError(e);
          }
        }
      }
);
      ModelAccess.instance().flushEventQueue();
    }
  }
);
  waitForChangesManager();
  Assert.assertEquals(changesBefore + 1,ListSequence.fromList(check_4gxggu_a1a6a53(myUtilDiff.getChangeSet())).count());
  MapSequence.fromMap(myExpectedFileStatuses).put("util.NewRoot",FileStatus.ADDED);
  checkRootStatuses();
}
