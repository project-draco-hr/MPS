{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.BreakpointCreator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"breakpointableConcepts"},new boolean[]{true},false,false,"breakpoint creators","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.BreakpointableNodeItem","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"isComplex"},new String[]{"declaration"},new String[]{"createBreakpoint","isApplicable","conceptsToCreateBreakpoint"},new boolean[]{false,false,true},false,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptDeclarationReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Concept","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"concept","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_Debug_Project","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"project","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptFunctionParameter_DebuggableNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"debuggableNode","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptFunction_CreateBreakpoint","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.ConceptFunction_IsApplicableToConcept","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"isApplicable","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.CreateBreakpointOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{"kindName","kindPresentation"},new String[]{},new String[]{"nodeExpression","projectExpression"},new boolean[]{false,false},false,false,"create breakpoint","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.DebuggerConfiguration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"debugger","getSettings"},new boolean[]{false,false},false,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.DebuggerReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"debuggerName"},new String[]{},new String[]{},new boolean[]{},false,false,"debugger","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.DebuggerType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{"name"},new String[]{},new String[]{},new boolean[]{},false,false,"debugger type","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.api.lang.structure.GetDebuggerSettings_Function","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"get debugger settings","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
