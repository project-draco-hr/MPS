{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("method",new BaseReferenceConstraintsDescriptor("method",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_7tm0hp_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new MethodsScope(SLinkOperations.getTargets(SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false),LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true));
        }
      }
;
    }
  }
);
  return references;
}
