{
  RuleManager ruleManager=new RuleManager(this);
  RuleUtil ruleUtil=new RuleUtil(ruleManager);
  ruleManager.getReductionRuleManager().setRuleUtil(ruleUtil);
  if (isPrimary) {
    for (    CreateRootRule createRootRule : ruleManager.getCreateRootRules()) {
      ruleUtil.applyRootRule(createRootRule);
    }
  }
  for (  MappingRule mappingRule : ruleManager.getMappingRules()) {
    ruleUtil.applyMappingRule(mappingRule);
  }
  for (  Root_MappingRule rootMappingRule : ruleManager.getRoot_MappingRules()) {
    ruleUtil.applyRoot_MappingRule(rootMappingRule);
  }
  List<SNode> copiedRoots=copyRootsFromInputModel(ruleManager);
  for (  WeavingRule weavingRule : ruleManager.getWeavingRules()) {
    ruleUtil.applyWeavingRule(weavingRule);
  }
  for (  Weaving_MappingRule weavingMappingRule : ruleManager.getWeaving_MappingRules()) {
    ruleUtil.applyWeavingMappingRule(weavingMappingRule);
  }
  updateAllReferences();
  for (  SNode outputRootNode : copiedRoots) {
    ruleManager.getReductionRuleManager().applyReductionRules(findInputNodeByOutputNodeWithSameId(outputRootNode));
  }
  for (  SNode rootNode : myNewRootNodes) {
    myOutputModel.addRoot(rootNode);
  }
  myDelayedChanges.doAllChanges();
  updateAllReferences();
  validateReferencesInCopiedRoots(copiedRoots);
}
