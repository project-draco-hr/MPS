{
  RuleManager ruleManager=new RuleManager(this);
  for (  CreateRootRule createRootRule : ruleManager.getCreateRootRules()) {
    RuleUtil.applyRootRule(this,myModel,createRootRule);
  }
  for (  MappingRule mappingRule : ruleManager.getMappingRules()) {
    RuleUtil.applyMappingRule(this,myModel,mappingRule);
  }
  for (  Root_MappingRule rootMappingRule : ruleManager.getRoot_MappingRules()) {
    RuleUtil.applyRoot_MappingRule(this,myModel,rootMappingRule);
  }
  for (  WeavingRule weavingRule : ruleManager.getWeavingRules()) {
    RuleUtil.applyWeavingRule(this,myModel,weavingRule);
  }
  for (  Weaving_MappingRule weavingMappingRule : ruleManager.getWeaving_MappingRules()) {
    RuleUtil.applyWeavingMappingRule(this,myModel,weavingMappingRule);
  }
  for (  SNode rootNode : myNewRootNodes) {
    myModel.addRoot(rootNode);
  }
  for (  SNode rootNode : myRootsToDelete) {
    myModel.removeRoot(rootNode);
  }
  for (  SNode rootNode : myModel.getRoots()) {
    List<ConceptDeclaration> abandonedRootConcepts=ruleManager.getAbandonedRootConcepts();
    for (    ConceptDeclaration abandonedRootConcept : abandonedRootConcepts) {
      if (rootNode.isInstanceOfConcept(abandonedRootConcept,getScope())) {
        myModel.removeRoot(rootNode);
      }
    }
  }
  myDelayedChanges.doAllChanges();
  for (  ReferenceInfo referenceInfo : myReferenceInfos) {
    referenceInfo.execute(this);
  }
}
