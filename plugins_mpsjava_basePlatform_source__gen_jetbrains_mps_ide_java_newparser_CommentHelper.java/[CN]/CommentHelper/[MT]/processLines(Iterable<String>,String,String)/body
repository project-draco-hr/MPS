{
  List<String> result=ListSequence.fromListWithValues(new ArrayList<String>(),lines);
  if (ListSequence.fromList(result).isEmpty()) {
    return result;
  }
  if (trim_rf742u_a0a4a2(ListSequence.fromList(result).first()).equals(start)) {
    ListSequence.fromList(result).removeElementAt(0);
  }
 else   if (ListSequence.fromList(result).first().startsWith(start)) {
    String trimmed=ListSequence.fromList(result).getElement(0).substring(start.length());
    if (trimmed.startsWith(" ")) {
      trimmed=trimmed.substring(1);
    }
    ListSequence.fromList(result).setElement(0,trimmed);
  }
  if (ListSequence.fromList(result).isEmpty()) {
    return result;
  }
  if ((end != null && end.length() > 0)) {
    if (trim_rf742u_a0a0a6a2(ListSequence.fromList(result).last()).equals(end)) {
      ListSequence.fromList(result).removeLastElement();
    }
 else     if (ListSequence.fromList(result).last().endsWith(end)) {
      String trimmed=ListSequence.fromList(result).last();
      trimmed=trimmed.substring(0,trimmed.length() - end.length());
      ListSequence.fromList(result).setElement(ListSequence.fromList(result).count() - 1,trimmed);
    }
  }
  if (ListSequence.fromList(result).isNotEmpty()) {
    int mintrim=ListSequence.fromList(result).first().length();
    for (    String line : ListSequence.fromList(result)) {
      if ((line != null && line.length() > 0)) {
        mintrim=Math.min(mintrim,whitespaceOrStar(line));
      }
    }
    boolean trimok=mintrim > 0;
    String prefix=ListSequence.fromList(result).first().substring(0,mintrim);
    for (    String line : ListSequence.fromList(result)) {
      if ((line != null && line.length() > 0)) {
        trimok=trimok && line.startsWith(prefix);
      }
    }
    ListIterator<String> iter=result.listIterator();
    while (iter.hasNext()) {
      String line=iter.next();
      iter.set((trimok && (line != null && line.length() > 0) ? line.substring(mintrim) : line));
    }
  }
  return result;
}
