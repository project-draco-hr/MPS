{
  List<String> result=ListSequence.fromList(new ArrayList<String>());
  if (Sequence.fromIterable(lines).isEmpty()) {
    return result;
  }
  if (trim_rf742u_a0a4a2(Sequence.fromIterable(lines).first()).equals(start)) {
    lines=Sequence.fromIterable(lines).skip(1);
  }
 else   if (Sequence.fromIterable(lines).first().startsWith(start)) {
    ListSequence.fromList(result).addElement(Sequence.fromIterable(lines).first().substring(start.length()));
    lines=Sequence.fromIterable(lines).skip(1);
  }
  if (Sequence.fromIterable(lines).isEmpty()) {
    return result;
  }
  if ((end != null && end.length() > 0)) {
    if (trim_rf742u_a0a0a6a2(Sequence.fromIterable(lines).last()).equals(end)) {
      lines=Sequence.fromIterable(lines).take(Sequence.fromIterable(lines).count() - 1);
    }
 else     if (Sequence.fromIterable(lines).last().endsWith(end)) {
      String last=Sequence.fromIterable(lines).last();
      last=last.substring(0,last.length() - end.length());
      lines=Sequence.fromIterable(lines).take(Sequence.fromIterable(lines).count() - 1).concat(Sequence.fromIterable(Sequence.<String>singleton(last)));
    }
  }
  if (Sequence.fromIterable(lines).isNotEmpty()) {
    int mintrim=Sequence.fromIterable(lines).first().length();
    for (    String line : Sequence.fromIterable(lines)) {
      if ((line != null && line.length() > 0)) {
        mintrim=Math.min(mintrim,whitespaceOrStar(line));
      }
    }
    boolean trimok=mintrim > 0;
    String prefix=Sequence.fromIterable(lines).first().substring(0,mintrim);
    for (    String line : Sequence.fromIterable(lines)) {
      if ((line != null && line.length() > 0)) {
        trimok=trimok && line.startsWith(prefix);
      }
    }
    for (    String line : Sequence.fromIterable(lines)) {
      ListSequence.fromList(result).addElement((trimok && (line != null && line.length() > 0) ? line.substring(mintrim) : line));
    }
  }
  return result;
}
