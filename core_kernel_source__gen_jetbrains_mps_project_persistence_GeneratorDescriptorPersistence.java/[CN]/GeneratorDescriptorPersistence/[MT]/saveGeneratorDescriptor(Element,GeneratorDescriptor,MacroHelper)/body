{
  Element generator=new Element("generator");
  if (descriptor.getNamespace() != null) {
    generator.setAttribute("name",descriptor.getNamespace());
  }
  if (descriptor.getGeneratorUID() != null) {
    generator.setAttribute("generatorUID",descriptor.getGeneratorUID());
  }
  if (descriptor.getUUID() != null) {
    generator.setAttribute("uuid",descriptor.getUUID());
  }
  if (descriptor.isGenerateTemplates()) {
    generator.setAttribute("generate-templates",Boolean.toString(descriptor.isGenerateTemplates()));
  }
  Element models=new Element("models");
  ModuleDescriptorPersistence.saveModelRoots(models,descriptor.getModelRootDescriptors(),macroHelper);
  generator.addContent(models);
  if (!(descriptor.getModuleFacetDescriptors().isEmpty())) {
    Element facets=new Element("facets");
    ModuleDescriptorPersistence.saveFacets(facets,descriptor.getModuleFacetDescriptors(),macroHelper);
    generator.addContent(facets);
  }
  Element extTemplates=new Element("external-templates");
  for (  SModuleReference generatorReference : SetSequence.fromSet(descriptor.getDepGenerators())) {
    XmlUtil.tagWithAttribute(extTemplates,"generator","generatorUID",generatorReference.toString());
  }
  generator.addContent(extTemplates);
  ModuleDescriptorPersistence.saveDependencies(generator,descriptor);
  Element mapPrio=new Element("mapping-priorities");
  for (  MappingPriorityRule rule : ListSequence.fromList(descriptor.getPriorityRules())) {
    Element ruleElement=new Element("mapping-priority-rule");
    ruleElement.setAttribute("kind",rule.getType().getName());
    Element gpm=new Element("greater-priority-mapping");
    saveGeneratorMappingConfigRef(rule.getLeft(),gpm);
    ruleElement.addContent(gpm);
    Element lpm=new Element("lesser-priority-mapping");
    saveGeneratorMappingConfigRef(rule.getRight(),lpm);
    ruleElement.addContent(lpm);
    mapPrio.addContent(ruleElement);
  }
  generator.addContent(mapPrio);
  languageGeneratorsElement.addContent(generator);
}
