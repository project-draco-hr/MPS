{
  GeneratorDescriptor descriptor=new _FunctionTypes._return_P0_E0<GeneratorDescriptor>(){
    public GeneratorDescriptor invoke(){
      final GeneratorDescriptor result_wk2vdq_a0a0a0a=new GeneratorDescriptor();
      String genUID=generatorElement.getAttributeValue("generatorUID");
      final String result_wk2vdq_a1a0a0a0a=genUID;
      result_wk2vdq_a0a0a0a.setGeneratorUID(result_wk2vdq_a1a0a0a0a);
      final boolean result_wk2vdq_a2a0a0a0a=AttributeUtils.booleanWithDefault(generatorElement.getAttributeValue("generate-templates"),false);
      result_wk2vdq_a0a0a0a.setGenerateTemplates(result_wk2vdq_a2a0a0a0a);
      if (generatorElement.getAttributeValue("uuid") != null) {
        final String result_wk2vdq_a0a4a0a0a0a=generatorElement.getAttributeValue("uuid");
        result_wk2vdq_a0a0a0a.setUUID(result_wk2vdq_a0a4a0a0a0a);
      }
      if (generatorElement.getAttributeValue("name") != null) {
        final String result_wk2vdq_a0a6a0a0a0a=generatorElement.getAttributeValue("name");
        result_wk2vdq_a0a0a0a.setNamespace(result_wk2vdq_a0a6a0a0a0a);
      }
      if (ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"models")).isNotEmpty()) {
        result_wk2vdq_a0a0a0a.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"models")).first(),"modelRoot"),file,macros));
      }
 else {
        result_wk2vdq_a0a0a0a.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(generatorElement,"modelRoot"),file,macros));
      }
      ModuleDescriptorPersistence.loadDependencies(result_wk2vdq_a0a0a0a,generatorElement);
      for (      Element refGenerator : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"external-templates")).first(),"generator"))) {
        result_wk2vdq_a0a0a0a.getDepGenerators().add(ModuleReference.fromString(refGenerator.getAttributeValue("generatorUID")));
      }
      for (      Element ruleElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"mapping-priorities")).first(),"mapping-priority-rule"))) {
        final MappingPriorityRule result_wk2vdq_a0a61a0a0a0a=new MappingPriorityRule();
        try {
          final RuleType result_wk2vdq_a0a1a0a61a0a0a0a=RuleType.parse(ruleElement.getAttributeValue("kind").trim());
          result_wk2vdq_a0a61a0a0a0a.setType(result_wk2vdq_a0a1a0a61a0a0a0a);
        }
 catch (        IllegalArgumentException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getMessage() + " Rule type for generator " + genUID+ " is set to EQUALS. You can change this in Generator Properties dialog.",e);
          }
          final RuleType result_wk2vdq_a1a0b0a0q0a0a0a0=RuleType.STRICTLY_TOGETHER;
          result_wk2vdq_a0a61a0a0a0a.setType(result_wk2vdq_a1a0b0a0q0a0a0a0);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"greater-priority-mapping")).isNotEmpty()) {
          final MappingConfig_AbstractRef result_wk2vdq_a0a3a0a61a0a0a0a=loadGeneratorMappingConfigRef(ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"greater-priority-mapping")).first(),genUID,false);
          result_wk2vdq_a0a61a0a0a0a.setLeft(result_wk2vdq_a0a3a0a61a0a0a0a);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"lesser-priority-mapping")).isNotEmpty()) {
          final MappingConfig_AbstractRef result_wk2vdq_a0a4a0a61a0a0a0a=loadGeneratorMappingConfigRef(ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"lesser-priority-mapping")).first(),genUID,false);
          result_wk2vdq_a0a61a0a0a0a.setRight(result_wk2vdq_a0a4a0a61a0a0a0a);
        }
        result_wk2vdq_a0a0a0a.getPriorityRules().add(result_wk2vdq_a0a61a0a0a0a);
      }
      return result_wk2vdq_a0a0a0a;
    }
  }
.invoke();
  ModuleDescriptorPersistence.setTimestamp(descriptor,file);
  return descriptor;
}
