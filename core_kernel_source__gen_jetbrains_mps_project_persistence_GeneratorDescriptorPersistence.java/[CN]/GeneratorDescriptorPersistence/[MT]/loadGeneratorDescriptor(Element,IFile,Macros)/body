{
  GeneratorDescriptor descriptor=new _FunctionTypes._return_P0_E0<GeneratorDescriptor>(){
    public GeneratorDescriptor invoke(){
      GeneratorDescriptor result_9427_0=new GeneratorDescriptor();
      String genUID=generatorElement.getAttributeValue("generatorUID");
      String result_9427_1=genUID;
      result_9427_0.setGeneratorUID(result_9427_1);
      if (generatorElement.getAttributeValue("uuid") != null) {
        String result_9427_2=generatorElement.getAttributeValue("uuid");
        result_9427_0.setUUID(result_9427_2);
      }
      if (generatorElement.getAttributeValue("name") != null) {
        String result_9427_3=generatorElement.getAttributeValue("name");
        result_9427_0.setNamespace(result_9427_3);
      }
      if (ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"models")).isNotEmpty()) {
        result_9427_0.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"models")).first(),"modelRoot"),file,macros));
      }
 else {
        result_9427_0.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(generatorElement,"modelRoot"),file,macros));
      }
      ModuleDescriptorPersistence.loadDependencies(result_9427_0,generatorElement);
      for (      Element refGenerator : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"external-templates")).first(),"generator"))) {
        result_9427_0.getDepGenerators().add(ModuleReference.fromString(refGenerator.getAttributeValue("generatorUID")));
      }
      for (      Element ruleElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(generatorElement,"mapping-priorities")).first(),"mapping-priority-rule"))) {
        MappingPriorityRule result_9427_4=new MappingPriorityRule();
        try {
          RuleType result_9427_5=RuleType.parse(ruleElement.getAttributeValue("kind").trim());
          result_9427_4.setType(result_9427_5);
        }
 catch (        IllegalArgumentException e) {
          if (log.isErrorEnabled()) {
            log.error(e.getMessage() + " Rule type for generator " + genUID+ " is set to EQUALS. You can change this in Generator Properties dialog.",e);
          }
          RuleType result_9427_6=RuleType.STRICTLY_TOGETHER;
          result_9427_4.setType(result_9427_6);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"greater-priority-mapping")).isNotEmpty()) {
          MappingConfig_AbstractRef result_9427_7=loadGeneratorMappingConfigRef(ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"greater-priority-mapping")).first(),genUID,false);
          result_9427_4.setLeft(result_9427_7);
        }
        if (ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"lesser-priority-mapping")).isNotEmpty()) {
          MappingConfig_AbstractRef result_9427_8=loadGeneratorMappingConfigRef(ListSequence.fromList(AttributeUtils.elementChildren(ruleElement,"lesser-priority-mapping")).first(),genUID,false);
          result_9427_4.setRight(result_9427_8);
        }
        result_9427_0.getPriorityRules().add(result_9427_4);
      }
      return result_9427_0;
    }
  }
.invoke();
  ModuleDescriptorPersistence.setTimestamp(descriptor,file,false);
  return descriptor;
}
