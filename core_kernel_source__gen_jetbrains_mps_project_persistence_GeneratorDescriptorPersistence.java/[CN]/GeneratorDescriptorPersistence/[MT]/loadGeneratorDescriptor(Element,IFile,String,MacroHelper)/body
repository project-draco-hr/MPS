{
  GeneratorDescriptor descriptor=new _FunctionTypes._return_P0_E0<GeneratorDescriptor>(){
    public GeneratorDescriptor invoke(){
      final GeneratorDescriptor result_wk2vdq_a0a0a0b=new GeneratorDescriptor();
      String genUID=generatorElement.getAttributeValue("generatorUID");
      final String result_wk2vdq_a1a0a0a0b=genUID;
      result_wk2vdq_a0a0a0b.setGeneratorUID(result_wk2vdq_a1a0a0a0b);
      final boolean result_wk2vdq_a2a0a0a0b=XmlUtil.booleanWithDefault(generatorElement,"generate-templates",false);
      result_wk2vdq_a0a0a0b.setGenerateTemplates(result_wk2vdq_a2a0a0a0b);
      String uuid=generatorElement.getAttributeValue("uuid");
      if (uuid != null) {
        final String result_wk2vdq_a0a5a0a0a0b=uuid;
        result_wk2vdq_a0a0a0b.setUUID(result_wk2vdq_a0a5a0a0a0b);
      }
      String generatorName=generatorElement.getAttributeValue("name");
      if (generatorName != null) {
        final String result_wk2vdq_a0a8a0a0a0b=generatorName;
        result_wk2vdq_a0a0a0b.setNamespace(result_wk2vdq_a0a8a0a0a0b);
      }
      Element models=XmlUtil.first(generatorElement,"models");
      if (models != null) {
        result_wk2vdq_a0a0a0b.getModelRootDescriptors().addAll(ModuleDescriptorPersistence.loadModelRoots(XmlUtil.children(models,"modelRoot"),contentRoot,macroHelper));
      }
 else {
        result_wk2vdq_a0a0a0b.getModelRootDescriptors().addAll(ModuleDescriptorPersistence.loadModelRoots(XmlUtil.children(generatorElement,"modelRoot"),contentRoot,macroHelper));
      }
      Element facets=XmlUtil.first(generatorElement,"facets");
      if (facets != null) {
        result_wk2vdq_a0a0a0b.getModuleFacetDescriptors().addAll(ModuleDescriptorPersistence.loadFacets(XmlUtil.children(facets,"facet"),macroHelper));
      }
      ModuleDescriptorPersistence.loadDependencies(result_wk2vdq_a0a0a0b,generatorElement);
      for (      Element refGenerator : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(generatorElement,"external-templates"),"generator"))) {
        result_wk2vdq_a0a0a0b.getDepGenerators().add(jetbrains.mps.project.structure.modules.ModuleReference.fromString(refGenerator.getAttributeValue("generatorUID")));
      }
      for (      Element ruleElement : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(generatorElement,"mapping-priorities"),"mapping-priority-rule"))) {
        final MappingPriorityRule result_wk2vdq_a0a12a0a0a0b=new MappingPriorityRule();
        try {
          final RuleType result_wk2vdq_a0a1a0a12a0a0a0b=RuleType.parse(ruleElement.getAttributeValue("kind"));
          result_wk2vdq_a0a12a0a0a0b.setType(result_wk2vdq_a0a1a0a12a0a0a0b);
        }
 catch (        IllegalArgumentException e) {
          LOG.error(e.getMessage() + " Rule type for generator " + genUID+ " is set to EQUALS. You can change this in Generator Properties dialog.",e);
          final RuleType result_wk2vdq_a1a0b0a0v0a0a0a1=RuleType.STRICTLY_TOGETHER;
          result_wk2vdq_a0a12a0a0a0b.setType(result_wk2vdq_a1a0b0a0v0a0a0a1);
        }
        Element greaterPM=XmlUtil.first(ruleElement,"greater-priority-mapping");
        if (greaterPM != null) {
          final MappingConfig_AbstractRef result_wk2vdq_a0a4a0a12a0a0a0b=loadGeneratorMappingConfigRef(greaterPM,genUID,false);
          result_wk2vdq_a0a12a0a0a0b.setLeft(result_wk2vdq_a0a4a0a12a0a0a0b);
        }
        Element lesserPM=XmlUtil.first(ruleElement,"lesser-priority-mapping");
        if (lesserPM != null) {
          final MappingConfig_AbstractRef result_wk2vdq_a0a6a0a12a0a0a0b=loadGeneratorMappingConfigRef(lesserPM,genUID,false);
          result_wk2vdq_a0a12a0a0a0b.setRight(result_wk2vdq_a0a6a0a12a0a0a0b);
        }
        result_wk2vdq_a0a0a0b.getPriorityRules().add(result_wk2vdq_a0a12a0a0a0b);
      }
      return result_wk2vdq_a0a0a0b;
    }
  }
.invoke();
  ModuleDescriptorPersistence.setTimestamp(descriptor,file);
  return descriptor;
}
