{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("target",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      final SNode td=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.make.facet.structure.TargetDeclaration",false,false);
      SNode fd=SNodeOperations.cast(SNodeOperations.getParent(td),"jetbrains.mps.make.facet.structure.FacetDeclaration");
      return ListSequence.fromList(SLinkOperations.getTargets(fd,"targetDeclaration",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode sibl){
          return sibl != td;
        }
      }
).concat(ListSequence.fromList(SLinkOperations.getTargets(fd,"required",true)).<SNode>translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode rfd){
          return SLinkOperations.getTargets(SLinkOperations.getTarget(rfd,"facet",false),"targetDeclaration",true);
        }
      }
));
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:6df86908-c97f-4644-97f0-5eff375e8e15(jetbrains.mps.make.facet.constraints)","3344436107830239604");
    }
  }
);
  return result;
}
