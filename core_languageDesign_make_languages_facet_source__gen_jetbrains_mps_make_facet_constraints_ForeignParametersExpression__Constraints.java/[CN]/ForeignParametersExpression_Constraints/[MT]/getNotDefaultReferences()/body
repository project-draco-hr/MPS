{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          final SNode td=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.make.facet.structure.TargetDeclaration",false,false);
          SNode fd=SNodeOperations.cast(SNodeOperations.getParent(td),"jetbrains.mps.make.facet.structure.FacetDeclaration");
          return ListSequence.<SNode>fromList(SLinkOperations.getTargets(fd,"targetDeclaration",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode sibl){
              return sibl != td;
            }
          }
).concat(ListSequence.<SNode>fromList(SLinkOperations.getTargets(fd,"required",true)).<SNode>translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode rfd){
              return SLinkOperations.getTargets(SLinkOperations.getTarget(rfd,"facet",false),"targetDeclaration",true);
            }
          }
));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_3lfdwm_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
