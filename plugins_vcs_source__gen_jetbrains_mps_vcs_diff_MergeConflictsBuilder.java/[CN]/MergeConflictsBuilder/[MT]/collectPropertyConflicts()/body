{
  Map<Tuples._2<SNodeId,String>,SetPropertyChange> minePropertyChanges=arrangePropertyChanges(myMineChangeSet);
  Map<Tuples._2<SNodeId,String>,SetPropertyChange> repositoryPropertyChanges=arrangePropertyChanges(myRepositoryChangeSet);
  for (  Tuples._2<SNodeId,String> nodeName : SetSequence.fromSet(MapSequence.fromMap(minePropertyChanges).keySet()).intersect(SetSequence.fromSet(MapSequence.fromMap(repositoryPropertyChanges).keySet()))) {
    SetPropertyChange mineChange=MapSequence.fromMap(minePropertyChanges).get(nodeName);
    SetPropertyChange repositoryChange=MapSequence.fromMap(repositoryPropertyChanges).get(nodeName);
    if (ObjectUtils.equals(mineChange.getNewValue(),repositoryChange.getNewValue())) {
      addSymmetric(mineChange,repositoryChange);
    }
 else {
      addConflict(mineChange,repositoryChange);
    }
  }
}
