{
  Map<Tuples._2<SNodeId,String>,SetReferenceChange> mineReferenceChanges=arrangeReferenceChanges(myMineChangeSet);
  Map<Tuples._2<SNodeId,String>,SetReferenceChange> repositoryReferenceChanges=arrangeReferenceChanges(myRepositoryChangeSet);
  for (  Tuples._2<SNodeId,String> nodeName : SetSequence.fromSet(MapSequence.fromMap(mineReferenceChanges).keySet()).intersect(SetSequence.fromSet(MapSequence.fromMap(repositoryReferenceChanges).keySet()))) {
    SetReferenceChange mineChange=MapSequence.fromMap(mineReferenceChanges).get(nodeName);
    SetReferenceChange repositoryChange=MapSequence.fromMap(repositoryReferenceChanges).get(nodeName);
    if (ObjectUtils.equals(mineChange.getTargetNodeId(),repositoryChange.getTargetNodeId()) && ObjectUtils.equals(mineChange.getTargetModelReference(),repositoryChange.getTargetModelReference()) && ObjectUtils.equals(mineChange.getResolveInfo(),repositoryChange.getResolveInfo())) {
      addSymmetric(mineChange,repositoryChange);
    }
 else {
      addConflict(mineChange,repositoryChange);
    }
  }
}
