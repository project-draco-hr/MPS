{
  List<SNode> actualArgs=SLinkOperations.getChildren(methodCall,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"));
  SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
  Pair<List<SNode>,Boolean> parmCountPair=MethodResolveUtil.selectByVisibilityReportNoGoodMethodNode(Sequence.fromIterable(candidates).toListSequence(),methodCall);
  List<SNode> methodDeclarationsGoodParams=parmCountPair.o1;
  if (methodDeclarationsGoodParams.size() == 1) {
    return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(),parmCountPair.o2);
  }
 else {
    parmCountPair=MethodResolveUtil.selectByParmCountReportNoGoodMethodNode(methodDeclarationsGoodParams,actualArgs);
    methodDeclarationsGoodParams=parmCountPair.o1;
    if (methodDeclarationsGoodParams.size() == 1) {
      return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(),parmCountPair.o2);
    }
 else {
      if (typeByTypeVar == null) {
        return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(),false);
      }
      Pair<SNode,Boolean> parmTypesPair=MethodResolveUtil.chooseByParameterTypeReportNoGoodMethodNode(baseMethodDeclaration,methodDeclarationsGoodParams,actualArgs,typeByTypeVar);
      return MultiTuple.<SNode,Boolean>from(parmTypesPair.o1,parmTypesPair.o2);
    }
  }
}
