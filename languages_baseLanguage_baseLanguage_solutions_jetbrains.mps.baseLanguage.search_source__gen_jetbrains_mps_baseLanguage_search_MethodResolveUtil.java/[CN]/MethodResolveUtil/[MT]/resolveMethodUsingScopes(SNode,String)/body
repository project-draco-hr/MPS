{
  if (SNodeOperations.getReference(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")) == null) {
    return MultiTuple.<SNode,Boolean>from((SNode)null,false);
  }
  Scope scope=ModelConstraints.getScope(SNodeOperations.getReference(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")));
  SNode resolvedMethod=SNodeOperations.cast(scope.resolve(methodCall,name),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
  if ((resolvedMethod != null)) {
    return MultiTuple.<SNode,Boolean>from(resolvedMethod,true);
  }
 else {
    return resolveMethodByCandidatesAndTypes(methodCall,Sequence.fromIterable(((Iterable<SNode>)scope.getAvailableElements(name))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return eq_zegw12_a0a0a0a0a1a0a0e0d(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),name);
      }
    }
),null);
  }
}
