{
  List<SNode> goodMethods=new ArrayList<SNode>();
  List<SNode> badMethods=new ArrayList<SNode>();
  for (  SNode method : methods) {
    if (SNodeOperations.isInstanceOf(method,"jetbrains.mps.baseLanguage.structure.IVisible")) {
      SNode visibility=SLinkOperations.getTarget(SNodeOperations.cast(method,"jetbrains.mps.baseLanguage.structure.IVisible"),"visibility",true);
      if (SNodeOperations.isInstanceOf(visibility,"jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
        goodMethods.add(method);
      }
 else       if (SNodeOperations.isInstanceOf(visibility,"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        if (SNodeOperations.getContainingRoot(methodCall) == SNodeOperations.getContainingRoot(method)) {
          goodMethods.add(method);
        }
 else {
          badMethods.add(method);
        }
      }
 else       if (SNodeOperations.isInstanceOf(visibility,"jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
        if (hasEqualsFQName(SNodeOperations.getModel(methodCall),SNodeOperations.getModel(method))) {
          goodMethods.add(method);
        }
 else {
          SNode desc=SNodeOperations.getAncestor(methodCall,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          SNode anc=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          if (((Boolean)BehaviorManager.getInstance().invoke(Boolean.class,desc,"virtual_isDescendant_7165541881557222913",new Class[]{SNode.class,SNode.class},anc))) {
            goodMethods.add(method);
          }
 else {
            badMethods.add(method);
          }
        }
      }
 else {
        if (hasEqualsFQName(SNodeOperations.getModel(methodCall),SNodeOperations.getModel(method))) {
          goodMethods.add(method);
        }
 else {
          badMethods.add(method);
        }
      }
    }
 else {
      goodMethods.add(method);
    }
  }
  if (goodMethods.isEmpty()) {
    return new Pair<List<SNode>,Boolean>(badMethods,false);
  }
 else {
    return new Pair<List<SNode>,Boolean>(goodMethods,true);
  }
}
