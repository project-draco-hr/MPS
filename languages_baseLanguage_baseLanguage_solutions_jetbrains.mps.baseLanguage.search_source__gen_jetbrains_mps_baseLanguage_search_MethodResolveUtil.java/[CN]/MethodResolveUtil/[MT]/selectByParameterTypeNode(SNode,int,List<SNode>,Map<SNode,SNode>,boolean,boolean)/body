{
  List<SNode> result=new ArrayList<SNode>();
  StructuralNodeMap<Set<SNode>> typesOfParamToMethods=new StructuralNodeMap<Set<SNode>>();
  SubtypingManager subtypingManager=TypeChecker.getInstance().getSubtypingManager();
  for (  SNode candidate : candidates) {
    boolean varArg=false;
    List<SNode> params=SLinkOperations.getChildren(candidate,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"));
    SNode type=SLinkOperations.getTarget(ListSequence.fromList(params).last(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4972933694980447171l,5680397130376446158l,"type"));
    if (SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,"jetbrains.mps.baseLanguage.structure.VariableArityType"))) {
      if (ListSequence.fromList(params).count() - 1 <= indexOfArg) {
        varArg=true;
      }
    }
 else {
      if (ListSequence.fromList(params).count() <= indexOfArg) {
        continue;
      }
    }
    List<SNode> methodTypeVariableDecls=SLinkOperations.getChildren(candidate,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1109279851642l,1109279881614l,"typeVariableDeclaration"));
    for (    SNode tvd : ListSequence.fromList(methodTypeVariableDecls)) {
      typeByTypeVar.put(tvd,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1171903607971l,"jetbrains.mps.baseLanguage.structure.WildCardType"))));
    }
    SNode typeOfParam=(varArg ? SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,"jetbrains.mps.baseLanguage.structure.VariableArityType")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1219920932475l,1219921048460l,"componentType")) : SLinkOperations.getTarget(ListSequence.fromList(params).getElement(indexOfArg),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4972933694980447171l,5680397130376446158l,"type")));
    if ((typeOfParam == null)) {
      continue;
    }
    typeOfParam=GenericTypesUtil.getTypeWithResolvedTypeVars(typeOfParam,typeByTypeVar);
    ListSequence.fromList(methodTypeVariableDecls).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode tvd){
        typeByTypeVar.remove(tvd);
      }
    }
);
    if (subtypingManager.isSubtype(typeOfArg,typeOfParam,isWeak)) {
      Set<SNode> methods=typesOfParamToMethods.get(typeOfParam);
      if (methods == null) {
        methods=new HashSet<SNode>();
        typesOfParamToMethods.put(typeOfParam,methods);
      }
      methods.add(candidate);
      result.add(candidate);
    }
  }
  if (mostSpecific) {
    Set<SNode> goodParamTypes=typesOfParamToMethods.keySet();
    Set<SNode> mostSpecificTypes=SubtypingUtil.mostSpecificTypes(goodParamTypes);
    if (!(mostSpecificTypes.isEmpty())) {
      result=new ArrayList<SNode>();
      for (      SNode mostSpecificType : mostSpecificTypes) {
        result.addAll(typesOfParamToMethods.get(mostSpecificType));
      }
    }
  }
  return result;
}
