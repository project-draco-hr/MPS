{
  List<SModelTreeNode> result=new ArrayList<SModelTreeNode>();
  List<SModelDescriptor> sortedModels=SortUtil.sortModels(models);
  Map<SModelDescriptor,SModelTreeNode> map=new LinkedHashMap<SModelDescriptor,SModelTreeNode>();
  for (  SModelDescriptor md : sortedModels) {
    SModelTreeNode treeNode=new SModelTreeNode(md,null,context,false){
      @Override public boolean isPackageLikeView(){
        return true;
      }
    }
;
    map.put(md,treeNode);
    result.add(treeNode);
  }
  if (!map.values().isEmpty()) {
    int rootIndex=0;
    while (rootIndex < sortedModels.size() - 1) {
      SModelTreeNode treeNode=map.get(sortedModels.get(rootIndex));
      rootIndex=buildChildModels(treeNode,result,map,rootIndex);
    }
  }
  return result;
}
