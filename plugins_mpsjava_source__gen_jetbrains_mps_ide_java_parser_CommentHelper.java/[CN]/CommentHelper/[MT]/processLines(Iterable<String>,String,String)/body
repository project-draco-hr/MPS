{
  List<String> result=ListSequence.<String>fromList(new ArrayList<String>());
  if (Sequence.<String>fromIterable(lines).isEmpty()) {
    return result;
  }
  if (StringUtils.trim(Sequence.<String>fromIterable(lines).first()).equals(start)) {
    lines=Sequence.<String>fromIterable(lines).skip(1);
  }
 else   if (Sequence.<String>fromIterable(lines).first().startsWith(start)) {
    ListSequence.<String>fromList(result).addElement(Sequence.<String>fromIterable(lines).first().substring(start.length()));
    lines=Sequence.<String>fromIterable(lines).skip(1);
  }
  if (Sequence.<String>fromIterable(lines).isNotEmpty()) {
    int mintrim=Sequence.<String>fromIterable(lines).first().length();
    for (    String line : Sequence.<String>fromIterable(lines)) {
      if (StringUtils.isNotEmpty(line)) {
        mintrim=Math.min(mintrim,line.length() - StringUtils.stripStart(line," \n\r\t").length());
      }
    }
    boolean trimok=mintrim > 0;
    String prefix=Sequence.<String>fromIterable(lines).first().substring(0,mintrim);
    for (    String line : Sequence.<String>fromIterable(lines)) {
      if (StringUtils.isNotEmpty(line)) {
        trimok=trimok && line.startsWith(prefix);
      }
    }
    for (    String line : Sequence.<String>fromIterable(lines)) {
      ListSequence.<String>fromList(result).addElement((trimok && StringUtils.isNotEmpty(line) ? line.substring(mintrim) : line));
    }
  }
  if (StringUtils.isNotEmpty(end) && ListSequence.<String>fromList(result).isNotEmpty()) {
    if (StringUtils.trim(ListSequence.<String>fromList(result).last()).equals(end)) {
      ListSequence.<String>fromList(result).removeLastElement();
    }
 else     if (ListSequence.<String>fromList(result).last().endsWith(end)) {
      String last=ListSequence.<String>fromList(result).removeLastElement();
      ListSequence.<String>fromList(result).addElement(last.substring(0,last.length() - end.length()));
    }
  }
  return result;
}
