{
  final Module module2=addModuleAndSetupFixture(myProjectBuilder);
  final MPSFacet mpsFacet2=addMPSFacet(module2);
  Computable<List<SDependency>> getDependencies=new Computable<List<SDependency>>(){
    @Override public List<SDependency> compute(){
      return IterableUtil.asList(mpsFacet2.getSolution().getDeclaredDependencies());
    }
  }
;
  int originalDependCount=runModelRead(getDependencies).size();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel rootModel=ModuleRootManager.getInstance(module2).getModifiableModel();
      rootModel.addModuleOrderEntry(myModule);
      rootModel.commit();
    }
  }
);
  flushEDT();
  List<SDependency> solution2Dependencies=runModelRead(getDependencies);
  assertEquals(originalDependCount + 1,solution2Dependencies.size());
  boolean found=false;
  for (  SDependency dependency : solution2Dependencies) {
    if (myFacet.getSolution().getModuleReference().equals(dependency.getTargetModule())) {
      found=true;
      break;
    }
  }
  assertTrue("Cross-Module dependency was not exposed in faced dependencies",found);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel rootModel=ModuleRootManager.getInstance(module2).getModifiableModel();
      for (      OrderEntry orderEntry : rootModel.getOrderEntries()) {
        if (orderEntry instanceof ModuleOrderEntry && myModule.equals(((ModuleOrderEntry)orderEntry).getModule())) {
          rootModel.removeOrderEntry(orderEntry);
          break;
        }
      }
      rootModel.commit();
    }
  }
);
  flushEDT();
  int finalDependenciesCount=runModelRead(getDependencies).size();
  assertEquals(originalDependCount,finalDependenciesCount);
}
