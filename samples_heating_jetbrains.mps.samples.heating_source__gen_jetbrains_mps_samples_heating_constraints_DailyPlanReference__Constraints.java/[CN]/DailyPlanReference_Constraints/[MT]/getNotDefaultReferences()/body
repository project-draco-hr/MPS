{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),"displayName");
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_y2k5og_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ListScope(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.samples.heating.structure.HeatingPlan",false,false),"dailyPlans",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return neq_y2k5og_a0a0a0a0a0a0a0a0a3a0a0a1a0b0a1a1(it,_context.getContextNode());
            }
          }
)){
            public String getName(            SNode child){
              return BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(SNodeOperations.cast(child,"jetbrains.mps.samples.heating.structure.DailyPlan"),"applicability",true),"virtual_getPresentation_1213877396640",new Object[]{});
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
