{
  MPSProject mpsProject=(MPSProject)context.getSelectedProject();
  MPSPsiProvider psiProvider=MPSPsiProvider.getInstance(mpsProject.getProject());
  Map<SNode,PsiElement> sourcePsiElements=new HashMap<SNode,PsiElement>();
  for (  SNode node : myNodes) {
    sourcePsiElements.put(node,psiProvider.getPsi(node));
  }
  List<UsageInfo> usageInfos=new ArrayList<UsageInfo>();
  SearchResults<SNode> usages=(SearchResults<SNode>)context.getUsages();
  for (  SearchResult<SNode> result : usages.getSearchResults()) {
    if (!((result instanceof PsiSearchResult))) {
      continue;
    }
    PsiReference psiRef=((PsiSearchResult)result).getReference();
    usageInfos.add(new MoveRenameUsageInfo(psiRef,psiRef.resolve()));
  }
  super.refactor(context);
  SModel targetModel;
  Iterable<? extends SNode> children;
  if (myLocation instanceof SModel) {
    targetModel=(SModel)myLocation;
    children=targetModel.getRootNodes();
  }
 else   if (myLocation instanceof SNode) {
    targetModel=((SNode)myLocation).getModel();
    children=((SNode)myLocation).getChildren();
  }
 else {
    return;
  }
  psiProvider.getPsi(targetModel).reloadAll();
  Map<PsiElement,PsiElement> oldToNew=new HashMap<PsiElement,PsiElement>();
  for (  SNode node : myNodes) {
    String name=node.getName();
    if (name == null)     continue;
    for (    SNode candidate : children) {
      if (name.equals(candidate.getName())) {
        oldToNew.put(sourcePsiElements.get(node),psiProvider.getPsi(candidate));
        break;
      }
    }
  }
  CommonMoveUtil.retargetUsages(usageInfos.toArray(UsageInfo.EMPTY_ARRAY),oldToNew);
}
