{
  super("Migrate MPS Logger to log4j (may break code compilation)");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migrate logger fields";
    }
    public String getAdditionalInfo(){
      return "Migrate logger fields";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) || !(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0a0a0a(),"classifier",false))) {
        return false;
      }
      SNode initializer=SLinkOperations.getTarget(node,"initializer",true);
      if (!(SNodeOperations.isInstanceOf(initializer,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"))) {
        return false;
      }
      return SLinkOperations.getTarget(SNodeOperations.cast(initializer,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),"baseMethodDeclaration",false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0f0a0(),"baseMethodDeclaration",false) || SLinkOperations.getTarget(SNodeOperations.cast(initializer,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),"baseMethodDeclaration",false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0f0a0_0(),"baseMethodDeclaration",false);
    }
    public void doUpdateInstanceNode(    final SNode node){
      SLinkOperations.setTarget(node,"type",_quotation_createNode_t030w_a0a0a0a(),true);
      SNode methodCall=SNodeOperations.cast(SLinkOperations.getTarget(node,"initializer",true),"jetbrains.mps.baseLanguage.structure.StaticMethodCall");
      if (SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a2a0a(),"baseMethodDeclaration",false)) {
        SNodeOperations.replaceWithAnother(methodCall,_quotation_createNode_t030w_a0a0a2a0a(SLinkOperations.getTargets(methodCall,"actualArgument",true)));
      }
 else       if (SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0c0a0(),"baseMethodDeclaration",false)) {
        SNodeOperations.replaceWithAnother(methodCall,_quotation_createNode_t030w_a0a0a0c0a0(SLinkOperations.getTargets(methodCall,"actualArgument",true)));
      }
      SModelOperations.validateLanguagesAndImports(SNodeOperations.getModel(node),true,true);
      SNode containingRoot=SNodeOperations.getContainingRoot(node);
      Iterable<SNode> references=ListSequence.fromList(SNodeOperations.getDescendants(containingRoot,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"variableDeclaration",false) == node && SNodeOperations.isInstanceOf(SNodeOperations.getParent(it),"jetbrains.mps.baseLanguage.structure.DotExpression");
        }
      }
);
      ScopeResolver resolver=new ScopeResolver();
      ModuleOperationContext context=new ModuleOperationContext(SNodeOperations.getModel(node).getModule());
      for (      SNode ref : Sequence.fromIterable(references)) {
        SNode operation=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(ref),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
          MigrationUtil.migrateInstanceMethodCall(SNodeOperations.cast(operation,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),resolver,context);
        }
 else {
          for (          SReference r : Sequence.fromIterable(SNodeOperations.getReferences(operation))) {
            resolver.resolve(r,operation,context);
          }
        }
      }
      SModelOperations.validateLanguagesAndImports(SNodeOperations.getModel(node),true,true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
