{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_2=null;
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  quotedNode_2=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null,null,GlobalScope.getInstance(),false);
  quotedNode_2.setReference("baseMethodDeclaration",jetbrains.mps.smodel.SReference.create("baseMethodDeclaration",quotedNode_2,facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"),facade.createNodeId("~LogManager.getLogger(java.lang.Class):org.apache.log4j.Logger")));
  quotedNode_2.setReference("classConcept",jetbrains.mps.smodel.SReference.create("classConcept",quotedNode_2,facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"),facade.createNodeId("~LogManager")));
{
    List<SNode> nodes=(List<SNode>)parameter_1;
    for (    SNode child : nodes) {
      quotedNode_2.addChild("actualArgument",HUtil.copyIfNecessary(child));
    }
  }
  return quotedNode_2;
}
