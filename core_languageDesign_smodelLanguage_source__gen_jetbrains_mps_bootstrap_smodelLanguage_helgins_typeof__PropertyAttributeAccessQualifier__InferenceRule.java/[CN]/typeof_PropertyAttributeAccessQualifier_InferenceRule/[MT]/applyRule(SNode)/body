{
  SNode annotationLink=SLinkOperations.getTarget(nodeToCheck,"annotationLink",false);
  if (annotationLink == null) {
    return;
  }
  SNode T=SConceptOperations.createNewNode("jetbrains.mps.bootstrap.smodelLanguage.structure._LinkAccessT",null);
  SLinkOperations.setTarget(T,"targetConcept",SLinkOperations.getTarget(annotationLink,"target",false),false);
  SPropertyOperations.set(T,"singularCradinality","" + (SPropertyOperations.hasValue(annotationLink,"sourceCardinality","0..1","0..1")));
  SPropertyOperations.set(T,"aggregation","" + (true));
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1205276553448",true),T,nodeToCheck,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1205276553446");
  if (!(SPropertyOperations.hasValue(annotationLink,"stereotype","property","node"))) {
    TypeChecker.getInstance().reportTypeError(nodeToCheck,"property annotation link is expected","jetbrains.mps.bootstrap.smodelLanguage.helgins","1204832870610");
  }
  final SNode propQ=SLinkOperations.getTarget(nodeToCheck,"propertyQualifier",true);
  if (SNodeOperations.isInstanceOf(propQ,"jetbrains.mps.bootstrap.smodelLanguage.structure.ExpressionQualifier")) {
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(propQ,"expression",true),"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204835998062",false),new QuotationClass_76().createNode(),SLinkOperations.getTarget(propQ,"expression",true),null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204835998060");
  }
 else   if (SNodeOperations.isInstanceOf(propQ,"jetbrains.mps.bootstrap.smodelLanguage.structure.PropertyRefQualifier")) {
    final SNode property=SLinkOperations.getTarget(propQ,"property",false);
    final SNode C_typevar_1204914077372=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(C_typevar_1204914077372),RulesUtil.get_inputNodeConcept(SNodeOperations.getAncestor(nodeToCheck,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation",false,false)),nodeToCheck,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204914077373");
{
      final SNode _representatorVar9=TypeChecker.getInstance().getEquationManager().getRepresentator(C_typevar_1204914077372);
      TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar9,new Runnable(){
        public void run(){
          SNode inputNodeConcept=TypeChecker.getInstance().getEquationManager().getRepresentator(C_typevar_1204914077372);
          List<PropertyDeclaration> declaredProperties=SModelSearchUtil_new.getPropertyDeclarationsExcludingOverridden(((AbstractConceptDeclaration)SNodeOperations.getAdapter(inputNodeConcept)));
          if (!(declaredProperties.contains(((PropertyDeclaration)SNodeOperations.getAdapter(property))))) {
            TypeChecker.getInstance().reportTypeError(propQ,"access to property '" + SPropertyOperations.getString(property,"name") + "' is not expected here","jetbrains.mps.bootstrap.smodelLanguage.helgins","1204914077394");
          }
        }
      }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204914077379");
    }
  }
}
