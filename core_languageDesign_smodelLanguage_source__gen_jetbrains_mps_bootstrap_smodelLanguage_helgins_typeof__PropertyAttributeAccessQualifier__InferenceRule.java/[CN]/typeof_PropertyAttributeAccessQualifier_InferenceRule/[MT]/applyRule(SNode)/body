{
  SNode annotationLink=SLinkOperations.getTarget(nodeToCheck,"annotationLink",false);
  if (annotationLink == null) {
    return;
  }
{
    SNode _nodeToCheck_1029348928467=nodeToCheck;
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1206103035534",true),new QuotationClass_76().createNode(SPropertyOperations.hasValue(annotationLink,"sourceCardinality","0..1","0..1") + "",SLinkOperations.getTarget(annotationLink,"target",false)),_nodeToCheck_1029348928467,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1206103041053",intentionProvider);
  }
  if (!(SPropertyOperations.hasValue(annotationLink,"stereotype","property","node"))) {
    TypeChecker.getInstance().reportTypeError(nodeToCheck,"property annotation link is expected","jetbrains.mps.bootstrap.smodelLanguage.helgins","1204832870610");
  }
  final SNode propQ=SLinkOperations.getTarget(nodeToCheck,"propertyQualifier",true);
  if (SNodeOperations.isInstanceOf(propQ,"jetbrains.mps.bootstrap.smodelLanguage.structure.PoundExpression")) {
{
      SNode _nodeToCheck_1029348928467=SLinkOperations.getTarget(propQ,"expression",true);
      BaseIntentionProvider intentionProvider=null;
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204835998062",false),new QuotationClass_64().createNode(),_nodeToCheck_1029348928467,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204835998060",false,0,intentionProvider);
    }
  }
 else   if (SNodeOperations.isInstanceOf(propQ,"jetbrains.mps.bootstrap.smodelLanguage.structure.PropertyRefQualifier")) {
    final SNode property=SLinkOperations.getTarget(propQ,"property",false);
    final SNode Concept_typevar_1204914077372=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
    RulesUtil.equate_inputNodeConcept(SNodeOperations.getAncestor(nodeToCheck,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation",false,false),TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1204914077372));
{
      final SNode C=TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1204914077372);
      TypeChecker.getInstance().getRuntimeSupport().whenConcrete(C,new Runnable(){
        public void run(){
          SNode inputNodeConcept=TypeChecker.getInstance().getEquationManager().getRepresentator(C);
          List<SNode> declaredProperties=AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(inputNodeConcept);
          if (!(ListSequence.fromList(declaredProperties).contains(property))) {
            TypeChecker.getInstance().reportTypeError(propQ,"access to property '" + SPropertyOperations.getString(property,"name") + "' is not expected here","jetbrains.mps.bootstrap.smodelLanguage.helgins","1204914077394");
          }
        }
      }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1204914077379");
    }
  }
}
