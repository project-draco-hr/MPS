{
  if (target == null) {
    return null;
  }
  SNode mapped=MapSequence.fromMap(map).get(target);
  if (mapped != null) {
    if (!(SNodeOperations.isInstanceOf(mapped,NameUtil.nodeFQName(concept)))) {
      error("target element of `" + target.getPresentation() + "' is not sub-concept of "+ NameUtil.nodeFQName(concept));
      return null;
    }
    return mapped;
  }
  if (SNodeOperations.getModel(target).getModelDescriptor().getModule() == language) {
    error("broken local reference: " + target.getPresentation());
    return null;
  }
  if (SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.core.structure.structure.SAbstractConcept")) {
    if (!(SNodeOperations.isInstanceOf(target,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
      error("AbstractConceptDeclaration is expected: " + target.getConceptFqName());
      return null;
    }
    SNode conceptByQualifiedName=ConceptUtil.getConceptByQualifiedName(NameUtil.nodeFQName(target));
    if ((conceptByQualifiedName == null)) {
      error("cannot resolve concept `" + NameUtil.nodeFQName(target) + "'");
    }
    return conceptByQualifiedName;
  }
  if (SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.core.structure.structure.SEnumeration")) {
    if (!(SNodeOperations.isInstanceOf(target,"jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration"))) {
      error("EnumerationDataTypeDeclaration is expected: " + target.getConceptFqName());
      return null;
    }
    SNode enumByQualifiedName=ConceptUtil.getEnumByQualifiedName(NameUtil.nodeFQName(target));
    if ((enumByQualifiedName == null)) {
      error("cannot resolve enum `" + NameUtil.nodeFQName(target) + "'");
    }
    return enumByQualifiedName;
  }
  error("cannot resolve: " + NameUtil.nodeFQName(concept));
  return null;
}
