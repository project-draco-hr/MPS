{
  SPropertyOperations.set(destination,"name",SPropertyOperations.getString(source,"name"));
  List<SNode> properties=new ArrayList<SNode>();
  for (  SNode property : SLinkOperations.getTargets(source,"propertyDeclaration",true)) {
    properties.add(convertProperty(property));
  }
  if (ListSequence.fromList(properties).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(ListSequence.fromList(properties));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  Iterable<SNode> links=ListSequence.fromList(SLinkOperations.getTargets(source,"linkDeclaration",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return convertLinkDeclaration(it);
    }
  }
);
  if (Sequence.fromIterable(links).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(Sequence.fromIterable(links));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  Iterable<SNode> conceptProperties=ListSequence.fromList(SLinkOperations.getTargets(source,"conceptProperty",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return convertConceptProperty(it);
    }
  }
);
  if (Sequence.fromIterable(conceptProperties).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(new LanguageConverter.QuotationClass_hm9xms_a0a0a0o0g().createNode());
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(Sequence.fromIterable(conceptProperties));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  Iterable<SNode> conceptLinks=ListSequence.fromList(SLinkOperations.getTargets(source,"conceptLink",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return convertConceptLink(it);
    }
  }
);
  if (Sequence.fromIterable(conceptLinks).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(new LanguageConverter.QuotationClass_hm9xms_a0a0a0s0g().createNode());
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(Sequence.fromIterable(conceptLinks));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  Iterable<SNode> conceptPropertyAndLinkDeclarations=ListSequence.fromList(SLinkOperations.getTargets(source,"conceptPropertyDeclaration",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
    }
  }
).concat(ListSequence.fromList(SLinkOperations.getTargets(source,"conceptLinkDeclaration",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
    }
  }
)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return new LanguageConverter.QuotationClass_hm9xms_a0a0a0a0a0a12a6().createNode(SPropertyOperations.getString(it,"name"));
    }
  }
);
  if (Sequence.fromIterable(conceptPropertyAndLinkDeclarations).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(new LanguageConverter.QuotationClass_hm9xms_a0a0a0w0g().createNode());
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(Sequence.fromIterable(conceptPropertyAndLinkDeclarations));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  removeLastChild(destination);
}
