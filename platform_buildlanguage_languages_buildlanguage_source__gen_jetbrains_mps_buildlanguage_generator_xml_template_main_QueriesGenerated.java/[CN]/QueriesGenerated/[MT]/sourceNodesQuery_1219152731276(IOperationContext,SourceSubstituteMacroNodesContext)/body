{
  List<SNode> references=SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.buildlanguage.structure.PropertyReference",false,new String[]{});
  Iterable<SNode> externalReferences=ListSequence.fromList(references).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      SNode propertyDeclaration=SLinkOperations.getTarget(it,"propertyDeclaration",false);
      return SNodeOperations.isInstanceOf(propertyDeclaration,"jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration") && !(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"propertyList",true)).contains(propertyDeclaration)) && !(SPropertyOperations.getBoolean(SNodeOperations.cast(propertyDeclaration,"jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration"),"checkOnStart"));
    }
  }
);
  Iterable<SNode> decls=Sequence.fromIterable(externalReferences).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"propertyDeclaration",false);
    }
  }
);
  return Sequence.fromIterable(decls).distinct();
}
