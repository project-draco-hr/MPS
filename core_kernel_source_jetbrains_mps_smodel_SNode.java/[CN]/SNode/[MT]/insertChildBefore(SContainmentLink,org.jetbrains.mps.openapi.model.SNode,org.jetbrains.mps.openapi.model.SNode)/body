{
  assertCanChange();
  final SNode schild1=(SNode)child;
  SNode parentOfChild=schild1.getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(schild1) + " already has parent: " + org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(parentOfChild)+ "\n"+ "Couldn't add it to: "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(this));
  }
  if (getContainingRoot() == child) {
    throw new RuntimeException("Trying to create a cyclic tree");
  }
  if (anchor != null) {
    if (anchor.getParent() != this) {
      throw new RuntimeException("anchor is not a child of this node" + " | " + "this: " + org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(this) + " | "+ "anchor: "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(anchor));
    }
  }
  schild1.myRoleInParent=role;
  children_insertBefore(((SNode)anchor),schild1);
  UnregisteredNodes un=UnregisteredNodes.instance();
  if (un.contains(child) && myModelForUndo == null && !un.contains(this)) {
    startUndoTracking(getContainingRoot(),((SNode)child).myRepository);
  }
  if (myModel == null) {
    if (schild1.myModel != null) {
      schild1.clearModel();
    }
  }
 else {
    schild1.registerInModel(myModel);
  }
  performUndoableAction(new Computable<SNodeUndoableAction>(){
    @Override public SNodeUndoableAction compute(){
      return new InsertChildAtUndoableAction(SNode.this,anchor,role.getRole(),schild1);
    }
  }
);
  SNode schild=schild1;
  if (needFireEvent()) {
    myModel.fireChildAddedEvent(this,role.getRole(),schild,((SNode)anchor));
  }
  nodeAdded(role,child);
}
