{
  if (ourMemberAccessModifier != null) {
    role=ourMemberAccessModifier.getNewChildRole(myModel,myConceptFqName,role);
  }
  final SNode schild=(SNode)child;
  SNode parentOfChild=schild.getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(schild) + " already has parent: " + org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(parentOfChild)+ "\n"+ "Couldn't add it to: "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(this));
  }
  if (getTopmostAncestor() == child) {
    throw new RuntimeException("Trying to create a cyclic tree");
  }
  ModelChange.assertLegalNodeChange(myModel,this);
  children_insertAfter(((SNode)anchor),schild);
  schild.setRoleInParent(role);
  SModel model=getModelInternal();
  if (model != null) {
    schild.registerInModel(model);
  }
 else {
    schild.clearModel();
  }
  if (model == null)   return;
  final String finalRole=role;
  model.performUndoableAction(new Computable<SNodeUndoableAction>(){
    @Override public SNodeUndoableAction compute(){
      return new InsertChildAtUndoableAction(SNode.this,anchor,finalRole,schild);
    }
  }
);
  if (ModelChange.needFireEvents(model,this)) {
    model.fireChildAddedEvent(this,role,schild,((SNode)anchor));
  }
}
