{
  enforceModelLoad();
  if (ourMemberAccessModifier != null) {
    role=ourMemberAccessModifier.getNewChildRole(myModel,myConceptFqName,role);
  }
  SNode parentOfChild=((SNode)child).getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(((SNode)child)) + " already has parent: " + org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(parentOfChild)+ "\n"+ "Couldn't add it to: "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(this));
  }
  if (getTopmostAncestor() == child) {
    throw new RuntimeException("Trying to create a cyclic tree");
  }
  ModelChange.assertLegalNodeChange(myModel,this);
  children_insertAfter(((SNode)anchor),((SNode)child));
  ((SNode)child).setRoleInParent(role);
  SModel model=getModel();
  if (model != null) {
    ((SNode)child).registerInModel(model);
  }
 else {
    ((SNode)child).changeModel(model);
  }
  if (model == null)   return;
  model.performUndoableAction(new InsertChildAtUndoableAction(this,((SNode)anchor),role,((SNode)child)));
  if (ModelChange.needFireEvents(model,this)) {
    model.fireChildAddedEvent(this,role,((SNode)child),((SNode)anchor));
  }
}
