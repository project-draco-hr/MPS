{
  if (ourMemberAccessModifier != null) {
    role=ourMemberAccessModifier.getNewChildRole(getModel(),myConceptFqName,role);
  }
  final SNode schild=(SNode)child;
  SNode parentOfChild=schild.getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(schild) + " already has parent: " + org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(parentOfChild)+ "\n"+ "Couldn't add it to: "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(this));
  }
  if (getTopmostAncestor() == child) {
    throw new RuntimeException("Trying to create a cyclic tree");
  }
  ModelChange.assertLegalNodeChange(getModel(),this);
  children_insertAfter(((SNode)anchor),schild);
  schild.setRoleInParent(role);
  if (myModel == null) {
    if (schild.myModel != null) {
      schild.clearModel();
    }
  }
 else {
    schild.registerInModel(myModel);
    final String finalRole=role;
    myModel.performUndoableAction(new Computable<SNodeUndoableAction>(){
      @Override public SNodeUndoableAction compute(){
        return new InsertChildAtUndoableAction(SNode.this,anchor,finalRole,schild);
      }
    }
);
    if (ModelChange.needFireEvents(getModel(),this)) {
      myModel.fireChildAddedEvent(this,role,schild,((SNode)anchor));
    }
  }
  nodeAdded(role,child);
}
