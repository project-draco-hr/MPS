{
  assertCanChange();
  String name=MPSModuleRepository.getInstance().getDebugRegistry().getPropertyName(property);
  if (name == null) {
    name=property.toString();
  }
  propertyValue=InternUtil.intern(propertyValue);
  int index=getPropertyIndex(property);
  final String oldValue=index == -1 ? null : (String)myNewProperties[index + 1];
  if (EqualUtil.equals(oldValue,propertyValue))   return;
  if (propertyValue == null) {
    Object[] oldProperties=myNewProperties;
    int newLength=oldProperties.length - 2;
    if (newLength == 0) {
      myNewProperties=null;
    }
 else {
      myNewProperties=new String[newLength];
      System.arraycopy(oldProperties,0,myNewProperties,0,index);
      System.arraycopy(oldProperties,index + 2,myNewProperties,index,newLength - index);
    }
  }
 else   if (oldValue == null) {
    Object[] oldProperties=myNewProperties == null ? EMPTY_ARRAY : myNewProperties;
    myNewProperties=new String[oldProperties.length + 2];
    System.arraycopy(oldProperties,0,myNewProperties,0,oldProperties.length);
    myNewProperties[myNewProperties.length - 2]=name;
    myNewProperties[myNewProperties.length - 1]=propertyValue;
  }
 else {
    myNewProperties[index + 1]=propertyValue;
  }
  final String finalPropertyValue=propertyValue;
  final String finalPropertyName=name;
  performUndoableAction(new Computable<SNodeUndoableAction>(){
    @Override public SNodeUndoableAction compute(){
      return new PropertyChangeUndoableAction(SNode.this,finalPropertyName,oldValue,finalPropertyValue);
    }
  }
);
  if (needFireEvent()) {
    myModel.firePropertyChangedEvent(this,name,oldValue,propertyValue);
  }
  propertyChanged(name,oldValue,propertyValue);
}
