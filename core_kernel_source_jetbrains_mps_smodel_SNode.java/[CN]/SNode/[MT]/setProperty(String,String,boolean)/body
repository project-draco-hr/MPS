{
  propertyName=InternUtil.intern(propertyName);
  ModelChange.assertLegalNodeChange(this);
  propertyValue=InternUtil.intern(propertyValue);
  if (usePropertySetter) {
    Set<Pair<SNode,String>> threadSet=ourPropertySettersInProgress.get();
    Pair<SNode,String> pair=new Pair<SNode,String>(this,propertyName);
    if (!threadSet.contains(pair) && !myModel.isLoading()) {
      INodePropertySetter setter=CONSTRAINTS_MANAGER.getNodePropertySetter(this.getConceptFqName(),propertyName);
      if (setter != null) {
        threadSet.add(pair);
        try {
          setter.execPropertySet(this,propertyName,propertyValue,GlobalScope.getInstance());
          return;
        }
 catch (        Exception t) {
          LOG.error(t);
        }
 finally {
          threadSet.remove(pair);
        }
      }
    }
  }
  if (ourMemberAccessModifier != null) {
    propertyName=ourMemberAccessModifier.getNewPropertyName(myModel,myConceptFqName,propertyName);
  }
  int index=getPropertyIndex(propertyName);
  final String oldValue=index == -1 ? null : myProperties[index + 1];
  if (propertyValue == null && oldValue == null)   return;
  if (propertyValue == null) {
    removeProperty(index);
  }
 else   if (oldValue == null) {
    addProperty(propertyName,propertyValue);
  }
 else {
    myProperties[index + 1]=propertyValue;
  }
  if (UndoHelper.getInstance().needRegisterUndo(getModel())) {
    UndoHelper.getInstance().addUndoableAction(new PropertyChangeUndoableAction(this,propertyName,oldValue,propertyValue));
  }
  if (ModelChange.needFireEvents(getModel(),this)) {
    getModel().firePropertyChangedEvent(this,propertyName,oldValue,propertyValue);
  }
}
