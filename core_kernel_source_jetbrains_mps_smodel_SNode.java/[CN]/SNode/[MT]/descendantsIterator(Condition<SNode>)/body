{
  return new Iterator<SNode>(){
    private SNode current=myFirstChild.myFirstChild;
    @Override public boolean hasNext(){
      return current != null;
    }
    @Override public SNode next(){
      SNode result=current;
      do {
        current=nextInternal(current);
      }
 while (current != null && condition != null && !condition.met(current));
      return result;
    }
    private SNode nextInternal(    SNode current){
      if (current == null) {
        return null;
      }
      if (current.myFirstChild != null) {
        return current.myFirstChild;
      }
      do {
        if (current.myNextSibling != null) {
          return current.myNextSibling;
        }
        current=current.myParent;
      }
 while (current != myFirstChild);
      return null;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
