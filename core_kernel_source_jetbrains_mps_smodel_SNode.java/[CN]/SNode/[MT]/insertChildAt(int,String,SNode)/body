{
  SNode parentOfChild=child.getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(child.getDebugText() + " already has parent: " + parentOfChild.getDebugText()+ "\n"+ "Couldn't add it to: "+ this.getDebugText());
  }
  if (child.isRoot()) {
    throw new RuntimeException(child.getDebugText() + " is root node. Can't add it as a child");
  }
  ModelChange.assertLegalNodeChange(this);
  _children();
  if (myChildren == null)   myChildren=new ArrayList<SNode>(1);
  myChildren.add(index,child);
  child.myRoleInParent=InternUtil.intern(role);
  child.myParent=this;
  if (isRegistered()) {
    child.registerInModel(getModel());
  }
 else {
    child.changeModel(getModel());
  }
  if (ModelChange.needRegisterUndo(getModel())) {
    UndoManager.instance().undoableActionPerformed(new NodeUndoableAction(){
      public void undo() throws UnexpectedUndoException {
        removeChildAt(index);
      }
      public String toString(){
        return "insert child " + child.getId() + " at role "+ role;
      }
    }
);
  }
  if (ModelChange.needFireEvents(getModel(),this)) {
    getModel().fireChildAddedEvent(this,role,child,index);
  }
}
