{
  if (ourMemberAccessModifier != null) {
    _role=ourMemberAccessModifier.getNewChildRole(myModel,myConceptFqName,_role);
  }
  final String role=_role;
  SNode parentOfChild=child.getParent();
  if (parentOfChild != null) {
    throw new RuntimeException(child.getDebugText() + " already has parent: " + parentOfChild.getDebugText()+ "\n"+ "Couldn't add it to: "+ this.getDebugText());
  }
  if (child.isRoot()) {
    throw new RuntimeException(child.getDebugText() + " is root node. Can't add it as a child");
  }
  ModelChange.assertLegalNodeChange(this);
  _children().add(index,child);
  child.myRoleInParent=InternUtil.intern(role);
  child.myParent=this;
  if (isRegistered()) {
    child.registerInModel(getModel());
  }
 else {
    child.changeModel(getModel());
  }
  if (ModelChange.needRegisterUndo(getModel())) {
    UndoUtil.addUndoableAction(new InsertChildAtUndoableAction(this,index,_role,child));
  }
  if (ModelChange.needFireEvents(getModel(),this)) {
    getModel().fireChildAddedEvent(this,role,child,index);
  }
}
