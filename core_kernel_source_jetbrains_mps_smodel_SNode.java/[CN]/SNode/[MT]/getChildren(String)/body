{
  ModelAccess.assertLegalRead(this);
  if (ourMemberAccessModifier != null) {
    role=ourMemberAccessModifier.getNewChildRole(myModel,myConceptFqName,role);
  }
  fireNodeReadAccess();
  fireNodeUnclassifiedReadAccess();
  SNode firstChild=getFirstChild();
  if (firstChild == null)   return Collections.emptyList();
  List<SNode> result=new ArrayList<SNode>();
  boolean isOldAttributeRole=AttributesRolesUtil.isAttributeRole(role);
  for (SNode child=firstChild; child != null; child=child.myNextSibling) {
    if (role.equals(child.getRole_())) {
      result.add(child);
      child.fireNodeReadAccess();
      NodeReadEventsCaster.fireNodeChildReadAccess(this,role,child);
    }
 else     if (isOldAttributeRole && AttributeOperations.isNewAttributeInOldRole(child,role)) {
      result.add(child);
      child.fireNodeReadAccess();
      NodeReadEventsCaster.fireNodeChildReadAccess(this,role,child);
    }
  }
  return result;
}
