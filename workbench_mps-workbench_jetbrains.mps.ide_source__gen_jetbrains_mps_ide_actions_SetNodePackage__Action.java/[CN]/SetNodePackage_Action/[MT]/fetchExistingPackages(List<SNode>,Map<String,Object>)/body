{
  Set<SModel> models=SetSequence.fromSetWithValues(new HashSet<SModel>(),ListSequence.fromList(nlist).select(new ISelector<SNode,SModel>(){
    public SModel select(    SNode n){
      return SNodeOperations.getModel(n);
    }
  }
));
  Set<String> packages=SetSequence.fromSetWithValues(new HashSet<String>(),SetSequence.fromSet(models).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel m){
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.roots(m,MetaAdapterFactory.getConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,"jetbrains.mps.lang.core.structure.BaseConcept"));
    }
  }
).select(new ISelector<SNode,String>(){
    public String select(    SNode r){
      return SPropertyOperations.getString(r,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x115eca8579fL,"virtualPackage"));
    }
  }
).where(new IWhereFilter<String>(){
    public boolean accept(    String p){
      return p != null;
    }
  }
));
  List<String> result=ListSequence.fromListWithValues(new ArrayList<String>(),packages);
  Collections.sort(result);
  return result;
}
