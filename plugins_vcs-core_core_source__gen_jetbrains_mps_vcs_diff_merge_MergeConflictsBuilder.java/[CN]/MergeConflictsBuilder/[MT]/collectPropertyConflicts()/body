{
  Tuples._2<Map<Tuples._2<SNodeId,String>,SetPropertyChange>,Map<Tuples._2<SNodeId,String>,SetPropertyChange>> arranged;
  arranged=this.<Tuples._2<SNodeId,String>,SetPropertyChange>arrangeChanges(new _FunctionTypes._return_P1_E0<Tuples._2<SNodeId,String>,SetPropertyChange>(){
    public Tuples._2<SNodeId,String> invoke(    SetPropertyChange spc){
      return MultiTuple.<SNodeId,String>from(spc.getAffectedNodeId(),spc.getPropertyName());
    }
  }
,SetPropertyChange.class);
  for (  Tuples._2<SNodeId,String> nodeName : SetSequence.fromSet(MapSequence.fromMap(arranged._0()).keySet()).intersect(SetSequence.fromSet(MapSequence.fromMap(arranged._1()).keySet()))) {
    SetPropertyChange mineChange=MapSequence.fromMap(arranged._0()).get(nodeName);
    SetPropertyChange repositoryChange=MapSequence.fromMap(arranged._1()).get(nodeName);
    if (EqualUtil.equals(mineChange.getNewValue(),repositoryChange.getNewValue())) {
      addSymmetric(mineChange,repositoryChange);
    }
 else {
      addConflict(mineChange,repositoryChange);
    }
  }
}
