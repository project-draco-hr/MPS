{
  SearchResults global_results=new SearchResults();
{
    SNode searchedNode=(SNode)searchQuery.getNode();
    global_results.getSearchedNodePointers().add(new SNodePointer(searchedNode));
    List<SNode> nodes=new ArrayList<SNode>();
    List<SearchResult> results=new ArrayList<SearchResult>();
    try {
      BaseFinder _finder=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
      SNode _node=SNodeOperations.getParent(searchedNode,null,false,false);
      IScope _scope;
      _scope=searchQuery.getScope();
      boolean rightConcept=true;
      if (!(rightConcept)) {
        OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
      }
 else {
        boolean isApplicable=_finder.isApplicable(_node);
        if (!(isApplicable)) {
          OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
        }
 else {
          SearchResults results_9=_finder.find(new SearchQuery(_node,_scope));
          for (          SNodePointer nodePointer : results_9.getSearchedNodePointers()) {
            ListOperations.addElement(nodes,nodePointer.getNode());
          }
          for (          SearchResult result : results_9.getSearchResults()) {
            results.add(result);
          }
        }
      }
    }
 catch (    Throwable t) {
      OverridingFields_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:"+ t.getMessage());
    }
{
      ICursor<SearchResult> _zCursor3=CursorFactory.createCursor(results);
      try {
        while (_zCursor3.moveToNext()) {
          SearchResult result=_zCursor3.getCurrent();
{
            SNode classNode=(SNode)result.getNode();
            Iterable<SNode> fieldsOfSameKind;
            if (SNodeOperations.isInstanceOf(searchedNode,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
              fieldsOfSameKind=SLinkOperations.getTargets(classNode,"field",true);
            }
 else {
              fieldsOfSameKind=SLinkOperations.getTargets(classNode,"staticField",true);
            }
{
              ICursor<SNode> _zCursor4=CursorFactory.createCursor(fieldsOfSameKind);
              try {
                while (_zCursor4.moveToNext()) {
                  SNode field=_zCursor4.getCurrent();
                  if (SPropertyOperations.getString(field,"name").equals(SPropertyOperations.getString(searchedNode,"name")) && Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(field,"type",true)).equals(Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(searchedNode,"type",true)))) {
                    global_results.getSearchResults().add(new SearchResult(new SNodePointer(field),"Overriding Fields"));
                  }
                }
              }
  finally {
                _zCursor4.release();
              }
            }
          }
        }
      }
  finally {
        _zCursor3.release();
      }
    }
  }
  return global_results;
}
