{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode dot=IOperation_Behavior.call_getDotExpression_1224687669172(_context.getSourceNode());
        SNode checkedDot=SNodeFactoryOperations.replaceWithNewChild(dot,"jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression");
        SLinkOperations.setTarget(checkedDot,"operand",SLinkOperations.getTarget(dot,"operand",true),true);
        SLinkOperations.setTarget(checkedDot,"operation",SLinkOperations.getTarget(dot,"operation",true),true);
        return checkedDot;
      }
      public String getMatchingText(      String pattern){
        return "?";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
