{
  boolean can=false;
  SNode expressionType=TypeChecker.getInstance().getTypeOf(expression);
  can=TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_5533_l523emned34v().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_5533_l523emned36s().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_5533_l523emned38q().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_5533_l523emned3ao().createNode());
  can=can || DateTypeUtil.isInstanceOfPeriod(expression);
  return can;
}
