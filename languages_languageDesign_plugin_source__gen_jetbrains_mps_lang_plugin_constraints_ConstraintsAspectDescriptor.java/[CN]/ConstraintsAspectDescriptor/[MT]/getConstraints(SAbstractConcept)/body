{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_2qnle6_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new ActionConstructionParameterDeclaration_Constraints();
      }
    break;
case 1:
  if (true) {
    return new ActionDataParameterDeclaration_Constraints();
  }
break;
case 2:
if (true) {
return new ActionDeclaration_Constraints();
}
break;
case 3:
if (true) {
return new ActionGroupDeclaration_Constraints();
}
break;
case 4:
if (true) {
return new ActionInstance_Constraints();
}
break;
case 5:
if (true) {
return new ActionParameterDeclaration_Constraints();
}
break;
case 6:
if (true) {
return new ActionParameterReference_Constraints();
}
break;
case 7:
if (true) {
return new AddElementStatement_Constraints();
}
break;
case 8:
if (true) {
return new AddStatement_Constraints();
}
break;
case 9:
if (true) {
return new BaseProjectOperation_Constraints();
}
break;
case 10:
if (true) {
return new ConceptCondition_Constraints();
}
break;
case 11:
if (true) {
return new EditableModel_Constraints();
}
break;
case 12:
if (true) {
return new GroupAnchor_Constraints();
}
break;
case 13:
if (true) {
return new IdeaInitializerDescriptor_Constraints();
}
break;
case 14:
if (true) {
return new InterfaceExtentionPoint_Constraints();
}
break;
case 15:
if (true) {
return new ModificationStatement_Constraints();
}
break;
case 16:
if (true) {
return new Separator_Constraints();
}
break;
case 17:
if (true) {
return new ShortcutChange_Constraints();
}
break;
case 18:
if (true) {
return new SmartDisposeClosureParameterDeclaration_Constraints();
}
break;
case 19:
if (true) {
return new TabbedToolOperation_Constraints();
}
break;
case 20:
if (true) {
return new ToolInstanceExpression_Constraints();
}
break;
case 21:
if (true) {
return new UpdateBlock_Constraints();
}
break;
default :
}
}
return new BaseConstraintsDescriptor(concept);
}
