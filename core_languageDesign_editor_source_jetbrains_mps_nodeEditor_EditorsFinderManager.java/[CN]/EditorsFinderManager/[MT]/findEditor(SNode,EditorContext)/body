{
  return NodeReadAccessCaster.runReadTransparentAction(new Computable<INodeEditor>(){
    public INodeEditor compute(){
      IScope scope=context.getOperationContext().getScope();
      AbstractConceptDeclaration abstractConcept=(AbstractConceptDeclaration)BaseAdapter.fromNode(BaseAdapter.fromAdapter(nodeToEdit.getConceptDeclarationAdapter()));
      if (abstractConcept == null) {
        LOG.error("error loading editor for node " + nodeToEdit.getDebugText() + "\n"+ "couldn't find node concept in scope "+ scope);
        return null;
      }
      if (abstractConcept instanceof InterfaceConceptDeclaration) {
        return new DefaultInterfaceEditor();
      }
      List<AbstractConceptDeclaration> currentConcepts=new ArrayList<AbstractConceptDeclaration>();
      List<AbstractConceptDeclaration> newFrontier=new ArrayList<AbstractConceptDeclaration>();
      Set<AbstractConceptDeclaration> processed=new HashSet<AbstractConceptDeclaration>();
      currentConcepts.add(abstractConcept);
      while (!currentConcepts.isEmpty()) {
        for (        AbstractConceptDeclaration currentConcept : currentConcepts) {
          if (processed.contains(currentConcept)) {
            continue;
          }
          INodeEditor nodeEditor=findEditor(currentConcept,scope);
          if (nodeEditor != null) {
            return nodeEditor;
          }
          if (currentConcept instanceof ConceptDeclaration) {
            ConceptDeclaration conceptDeclaration=(ConceptDeclaration)currentConcept;
            ConceptDeclaration anExtends=conceptDeclaration.getExtends();
            if (anExtends != null) {
              newFrontier.add(anExtends);
            }
            for (            InterfaceConceptReference reference : conceptDeclaration.getImplementses()) {
              newFrontier.add(reference.getIntfc());
            }
          }
 else           if (currentConcept instanceof InterfaceConceptDeclaration) {
            InterfaceConceptDeclaration interfaceConcept=(InterfaceConceptDeclaration)currentConcept;
            for (            InterfaceConceptReference reference : interfaceConcept.getExtendses()) {
              newFrontier.add(reference.getIntfc());
            }
          }
          processed.add(currentConcept);
        }
        currentConcepts=newFrontier;
        newFrontier=new ArrayList<AbstractConceptDeclaration>();
      }
      LOG.error("Couldn't load editor for node " + nodeToEdit.getDebugText());
      return null;
    }
  }
);
}
