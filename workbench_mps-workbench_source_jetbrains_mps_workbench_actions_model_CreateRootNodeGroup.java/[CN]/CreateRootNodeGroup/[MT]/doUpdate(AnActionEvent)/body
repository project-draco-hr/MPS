{
  removeAll();
  SModelDescriptor modelDescriptor=event.getData(MPSDataKeys.CONTEXT_MODEL);
  if (modelDescriptor == null) {
    setEnabledState(event.getPresentation(),false);
    return;
  }
  if (!(modelDescriptor instanceof EditableSModelDescriptor) || (((EditableSModelDescriptor)modelDescriptor).isReadOnly())) {
    event.getPresentation().setEnabled(false);
    event.getPresentation().setVisible(false);
    return;
  }
  IScope scope=event.getData(MPSDataKeys.SCOPE);
  IOperationContext context=event.getData(MPSDataKeys.OPERATION_CONTEXT);
  boolean isStubModel=SModelStereotype.isStubModelStereotype(modelDescriptor.getStereotype());
  if (scope == null || context == null || isStubModel) {
    setEnabledState(event.getPresentation(),false);
    return;
  }
  boolean inEditor=event.getData(MPSDataKeys.LOGICAL_VIEW_SELECTION_SIZE) == null;
  if (!inEditor) {
    Integer selectedItemsCount=event.getData(MPSDataKeys.LOGICAL_VIEW_SELECTION_SIZE);
    boolean singleItemSelected=selectedItemsCount != null && selectedItemsCount == 1;
    if (!singleItemSelected) {
      setEnabledState(event.getPresentation(),false);
      return;
    }
    TreeNode treeNode=event.getData(MPSDataKeys.LOGICAL_VIEW_NODE);
    if (!(treeNode instanceof PackageNode)) {
      myPackage=null;
    }
 else {
      final PackageNode node=(PackageNode)treeNode;
      myPackage=node.getPackage();
    }
  }
 else {
    SNode node=event.getData(MPSDataKeys.NODE);
    myPackage=null;
    if (node != null) {
      SNode root=node.getTopmostAncestor();
      myPackage=root.getProperty(SNodeUtil.property_BaseConcept_virtualPackage);
    }
  }
  setEnabledState(event.getPresentation(),true);
  List<Language> modelLanguages=SModelOperations.getLanguages(modelDescriptor.getSModel(),scope);
  if (modelLanguages.size() == 0) {
    add(ActionManager.getInstance().getAction("jetbrains.mps.ide.editor.actions.AddLanguageImport_Action"));
  }
  LanguageAspect aspect=Language.getModelAspect(modelDescriptor);
  if (aspect != null) {
    ModuleReference ref=aspect.getMainLanguage();
    Language lang=scope.getLanguage(ref);
    if (lang != null) {
      modelLanguages.remove(lang);
      for (      SNode conceptDeclaration : lang.getConceptDeclarations()) {
        if (ModelConstraintsManager.canBeRoot(context,NameUtil.nodeFQName(conceptDeclaration),modelDescriptor.getSModel())) {
          add(new NewRootNodeAction(new SNodePointer(conceptDeclaration),modelDescriptor));
        }
      }
      addSeparator();
    }
  }
  Collections.sort(modelLanguages,new ToStringComparator());
  List<Language> languagesWithRoots=new ArrayList<Language>();
  for (  final Language language : modelLanguages) {
    for (    SNode conceptDeclaration : language.getConceptDeclarations()) {
      if (ModelConstraintsManager.canBeRoot(context,NameUtil.nodeFQName(conceptDeclaration),modelDescriptor.getSModel())) {
        languagesWithRoots.add(language);
        break;
      }
    }
  }
  boolean plain=myPlain || (languagesWithRoots.size() == 1 && aspect == null);
  for (  final Language language : languagesWithRoots) {
    String name=language.getModuleFqName();
    Icon icon=IconManager.getIconForNamespace(language.getModuleFqName());
    BaseGroup langRootsGroup;
    if (!plain) {
      langRootsGroup=new BaseGroup(NameUtil.compactNamespace(name),name,icon);
      langRootsGroup.setPopup(true);
    }
 else {
      langRootsGroup=this;
    }
    for (    SNode conceptDeclaration : language.getConceptDeclarations()) {
      if (ModelConstraintsManager.getInstance().canBeRoot(context,NameUtil.nodeFQName(conceptDeclaration),modelDescriptor.getSModel())) {
        langRootsGroup.add(new NewRootNodeAction(new SNodePointer(conceptDeclaration),modelDescriptor));
      }
    }
    if (!plain) {
      this.add(langRootsGroup);
    }
 else {
      this.addSeparator();
    }
  }
}
