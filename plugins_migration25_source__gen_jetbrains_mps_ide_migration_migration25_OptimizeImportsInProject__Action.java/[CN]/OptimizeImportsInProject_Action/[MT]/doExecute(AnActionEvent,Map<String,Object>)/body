{
  try {
    final Queue<IModule> modules=QueueSequence.fromQueueWithValues(new LinkedList<IModule>(),((Project)MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModules());
    final List<SModel> modelsToFix=ListSequence.fromList(new ArrayList<SModel>());
    final CountDownLatch latch=new CountDownLatch(1);
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        try {
          while (QueueSequence.fromQueue(modules).isNotEmpty()) {
            IModule module=QueueSequence.fromQueue(modules).removeFirstElement();
            if (module.isReadOnly()) {
              continue;
            }
            if (module instanceof Language) {
              QueueSequence.fromQueue(modules).addSequence(CollectionSequence.fromCollection(((Language)module).getGenerators()));
            }
            IScope moduleScope=module.getScope();
            for (            SModel model : ListSequence.fromIterable(module.getModels())) {
              if (!(SModelStereotype.isUserModel(model))) {
                continue;
              }
              if (!(model instanceof EditableSModel)) {
                continue;
              }
              List<SModelReference> imports=SModelOperations.getImportedModelUIDs(model);
              ListSequence.fromList(modelsToFix).addElement(model);
            }
          }
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await();
    }
 catch (    InterruptedException ignore) {
    }
    if (ListSequence.fromList(modelsToFix).isNotEmpty()) {
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          new OptimizeImportsHelper(((IOperationContext)MapSequence.fromMap(_params).get("context"))).optimizeModelsImports(modelsToFix);
          SModelRepository.getInstance().saveAll();
        }
      }
);
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "OptimizeImportsInProject",t);
  }
}
