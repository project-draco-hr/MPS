{
  GenerationTracer generationTracer=myGenerator.getGeneratorSessionContext().getGenerationTracer();
  List<SNode> outputNodes=new ArrayList<SNode>();
  String mappingName=GeneratorUtil.getMappingName(nodeMacro,null);
  if (nodeMacro instanceof LoopMacro) {
    List<SNode> newInputNodes=MacroUtil.getNewInputNodes(nodeMacro,inputNode,myGenerator);
    for (    SNode newInputNode : newInputNodes) {
      boolean inputChanged=(newInputNode != inputNode);
      if (inputChanged) {
        pushInputHistory(inputNode);
        generationTracer.pushInputNode(newInputNode);
      }
      try {
        List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
        if (_outputNodes != null)         outputNodes.addAll(_outputNodes);
      }
  finally {
        if (inputChanged) {
          popInputHistory();
          generationTracer.closeInputNode(newInputNode);
        }
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof CopySrcNodeMacro || nodeMacro instanceof CopySrcListMacro) {
    List<SNode> newInputNodes=MacroUtil.getNewInputNodes(nodeMacro,inputNode,myGenerator);
    for (    SNode newInputNode : newInputNodes) {
      List<SNode> _outputNodes=copyNodeFromInputNode(mappingName,templateNode,newInputNode);
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof IfMacro) {
    List<SNode> _outputNodes=null;
    if (MacroUtil.checkConditionForIfMacro(inputNode,(IfMacro)nodeMacro,myGenerator)) {
      _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,inputNode,nodeMacrosToSkip + 1);
    }
 else {
      RuleConsequence altConsequence=((IfMacro)nodeMacro).getAlternativeConsequence();
      if (altConsequence != null) {
        try {
          Pair<SNode,String> nodeAndMappingName=GeneratorUtil.getTemplateNodeFromRuleConsequence(altConsequence,inputNode,nodeMacro.getNode(),myGenerator);
          if (nodeAndMappingName == null) {
            myGenerator.showErrorMessage(inputNode,null,nodeMacro.getNode(),"error processing $IF$/alternative");
            return null;
          }
          SNode altTemplateNode=nodeAndMappingName.o1;
          if (nodeAndMappingName.o2 != null) {
            mappingName=nodeAndMappingName.o2;
          }
          _outputNodes=createOutputNodesForExternalTemplateNode(mappingName,altTemplateNode,inputNode);
        }
 catch (        AbandonRuleInputException e) {
        }
      }
    }
    if (_outputNodes != null)     outputNodes.addAll(_outputNodes);
    return outputNodes;
  }
 else   if (nodeMacro instanceof MapSrcNodeMacro || nodeMacro instanceof MapSrcListMacro) {
    MapSrcMacro_MapperFunction macro_mapperFunction;
    if (nodeMacro instanceof MapSrcNodeMacro) {
      macro_mapperFunction=((MapSrcNodeMacro)nodeMacro).getMapperFunction();
    }
 else {
      macro_mapperFunction=((MapSrcListMacro)nodeMacro).getMapperFunction();
    }
    List<SNode> newInputNodes=MacroUtil.getNewInputNodes(nodeMacro,inputNode,myGenerator);
    for (    SNode newInputNode : newInputNodes) {
      boolean inputChanged=(newInputNode != inputNode);
      if (inputChanged) {
        pushInputHistory(inputNode);
        generationTracer.pushInputNode(newInputNode);
      }
      try {
        if (macro_mapperFunction != null) {
          SNode childToReplaceLater=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
          generationTracer.pushOutputNodeToReplaceLater(childToReplaceLater);
          outputNodes.add(childToReplaceLater);
          putInputNodeByMappingName(mappingName,newInputNode);
          myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(nodeMacro,childToReplaceLater,newInputNode,new HashMap<String,SNode>(myInputNodesByMappingName),myGenerator);
        }
 else {
          List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
          if (_outputNodes != null)           outputNodes.addAll(_outputNodes);
        }
      }
  finally {
        if (inputChanged) {
          popInputHistory();
          generationTracer.closeInputNode(newInputNode);
        }
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof SwitchMacro) {
    TemplateSwitch templateSwitch=((SwitchMacro)nodeMacro).getTemplateSwitch();
    if (templateSwitch == null) {
      myGenerator.showErrorMessage(inputNode,nodeMacro.getNode(),"error processing $SWITCH$ - bad TemplateSwitch reference");
      return null;
    }
    SNode newInputNode=MacroUtil.getNewInputNode(nodeMacro,inputNode,myGenerator);
    if (newInputNode == null) {
      return outputNodes;
    }
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    generationTracer.pushSwitch(templateSwitch.getNode());
    try {
      RuleConsequence consequenceForCase=(RuleConsequence)myGenerator.getConsequenceForSwitchCase(newInputNode,templateSwitch);
      SNode templateNodeForCase=null;
      if (consequenceForCase != null) {
        Pair<SNode,String> nodeAndMappingName=GeneratorUtil.getTemplateNodeFromRuleConsequence(consequenceForCase,newInputNode,nodeMacro.getNode(),myGenerator);
        if (nodeAndMappingName == null) {
          myGenerator.showErrorMessage(newInputNode,nodeMacro.getNode(),consequenceForCase.getNode(),"error processing $SWITCH$");
          return null;
        }
        templateNodeForCase=nodeAndMappingName.o1;
        if (nodeAndMappingName.o2 != null) {
          mappingName=nodeAndMappingName.o2;
        }
      }
      List<SNode> _outputNodes;
      if (templateNodeForCase != null) {
        _outputNodes=createOutputNodesForExternalTemplateNode(mappingName,templateNodeForCase,newInputNode);
      }
 else {
        _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
      }
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
 catch (    AbandonRuleInputException e) {
    }
 finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
    return outputNodes;
  }
 else   if (nodeMacro instanceof IncludeMacro) {
    SNode newInputNode=MacroUtil.getNewInputNode(nodeMacro,inputNode,myGenerator);
    if (newInputNode == null) {
      return outputNodes;
    }
    IncludeMacro includeMacro=(IncludeMacro)nodeMacro;
    TemplateDeclaration includeTemplate=includeMacro.getIncludeTemplate();
    if (includeTemplate == null) {
      myGenerator.showErrorMessage(newInputNode,null,nodeMacro.getNode(),"error processing $INCLIDE$ : no 'include template'");
      return null;
    }
    TemplateFragment fragment=GeneratorUtil.getFragmentFromTemplate(includeTemplate,newInputNode,nodeMacro.getNode(),myGenerator);
    if (fragment == null) {
      myGenerator.showErrorMessage(newInputNode,null,nodeMacro.getNode(),"error processing $INCLIDE$");
      return null;
    }
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    generationTracer.pushTemplateNode(includeTemplate.getNode());
    try {
      SNode templateForInclude=fragment.getParent().getNode();
      mappingName=GeneratorUtil.getMappingName(fragment,mappingName);
      List<SNode> _outputNodes=createOutputNodesForExternalTemplateNode(mappingName,templateForInclude,newInputNode);
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
  finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
    return outputNodes;
  }
  List<SNode> newInputNodes=MacroUtil.getNewInputNodes(nodeMacro,inputNode,myGenerator);
  for (  SNode newInputNode : newInputNodes) {
    boolean inputChanged=(newInputNode != inputNode);
    if (inputChanged) {
      pushInputHistory(inputNode);
      generationTracer.pushInputNode(newInputNode);
    }
    try {
      List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName,templateNode,newInputNode,nodeMacrosToSkip + 1);
      if (_outputNodes != null)       outputNodes.addAll(_outputNodes);
    }
  finally {
      if (inputChanged) {
        popInputHistory();
        generationTracer.closeInputNode(newInputNode);
      }
    }
  }
  return outputNodes;
}
