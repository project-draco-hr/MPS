{
  graphics.setFont(myFont);
  EditorComponent.turnOnAliasingIfPossible((Graphics2D)graphics);
  Map<AnnotationAspectSubcolumn,Integer> subcolumnToX=MapSequence.<AnnotationAspectSubcolumn,Integer>fromMap(new HashMap<AnnotationAspectSubcolumn,Integer>());
  int x=getX() + 1;
  for (  AnnotationAspectSubcolumn subcolumn : ListSequence.<AnnotationAspectSubcolumn>fromList(myAspectSubcolumns)) {
    MapSequence.<AnnotationAspectSubcolumn,Integer>fromMap(subcolumnToX).put(subcolumn,x);
    if (subcolumn.isEnabled() || myShowAdditionalInfo) {
      x+=subcolumn.getWidth() + mySubcolumnInterval;
    }
  }
  for (int pseudoLine=0; pseudoLine < ListSequence.<Integer>fromList(myPseudoLinesY).count(); pseudoLine++) {
    if (SetSequence.<Integer>fromSet(myCurrentPseudoLines).contains(pseudoLine)) {
      continue;
    }
    int fileLine=ListSequence.<Integer>fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
    int height=(pseudoLine == ListSequence.<Integer>fromList(myPseudoLinesY).count() - 1 ? getEditorComponent().getHeight() - ListSequence.<Integer>fromList(myPseudoLinesY).last() : ListSequence.<Integer>fromList(myPseudoLinesY).getElement(pseudoLine + 1) - ListSequence.<Integer>fromList(myPseudoLinesY).getElement(pseudoLine));
    if (myAuthorAnnotationAspect != null && ViewAction.isSet(ViewAction.COLORS)) {
      String author=myAuthorAnnotationAspect.getValue(fileLine);
      graphics.setColor(MapSequence.<String,Color>fromMap(myAuthorsToColors).get(author));
      graphics.fillRect(getX(),ListSequence.<Integer>fromList(myPseudoLinesY).getElement(pseudoLine),getWidth(),height);
    }
    graphics.setColor(ANNOTATION_COLOR);
    if (myRevisionRange.isFileLineHighlighted(fileLine)) {
      graphics.setFont(myFont.deriveFont(Font.BOLD));
    }
 else {
      graphics.setFont(myFont);
    }
    FontMetrics metrics=graphics.getFontMetrics();
    if (height < metrics.getHeight()) {
      continue;
    }
    for (    AnnotationAspectSubcolumn subcolumn : ListSequence.<AnnotationAspectSubcolumn>fromList(myAspectSubcolumns).where(new IWhereFilter<AnnotationAspectSubcolumn>(){
      public boolean accept(      AnnotationAspectSubcolumn s){
        return myShowAdditionalInfo || s.isEnabled();
      }
    }
)) {
      String text=subcolumn.getTextForFileLine(fileLine);
      int textX=MapSequence.<AnnotationAspectSubcolumn,Integer>fromMap(subcolumnToX).get(subcolumn);
      if (subcolumn.isRightAligned()) {
        textX+=subcolumn.getWidth() - metrics.stringWidth(text);
      }
      graphics.drawString(text,textX,metrics.getAscent() + ListSequence.<Integer>fromList(myPseudoLinesY).getElement(pseudoLine));
    }
  }
}
