{
  super(leftEditorHighlighter);
  Set<SNodeId> descendantIds=SetSequence.fromSetWithValues(new HashSet<SNodeId>(),ListSequence.fromList(SNodeOperations.getDescendants(root,null,true,new String[]{})).select(new ISelector<SNode,SNodeId>(){
    public SNodeId select(    SNode n){
      return n.getSNodeId();
    }
  }
));
  SModel model=SNodeOperations.getModel(root);
  myFileAnnotation=fileAnnotation;
  for (  VcsFileRevision rev : ListSequence.fromList(fileAnnotation.getRevisions())) {
    MapSequence.fromMap(myRevisionNumberToRevision).put(rev.getRevisionNumber(),rev);
  }
  final Wrappers._T<ModelReadException> mre=new Wrappers._T<ModelReadException>(null);
  try {
    myFileLineToContent=ModelPersistence.getLineToContentMap(myFileAnnotation.getAnnotatedContent());
  }
 catch (  ModelReadException e) {
    mre.value=e;
  }
  if (myFileLineToContent == null) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        String msg="Couldn't show annotation";
        if (mre.value != null && mre.value.getCause() != null) {
          msg+=": " + mre.value.getCause().getMessage();
        }
        ToolWindowManager.getInstance(vcs.getProject()).notifyByBalloon(ChangesViewContentManager.TOOLWINDOW_ID,MessageType.WARNING,msg);
        close();
      }
    }
);
    return;
  }
  myFileAnnotation.addListener(myAnnotationListener);
  myAuthorAnnotationAspect=Sequence.fromIterable(Sequence.fromArray(myFileAnnotation.getAspects())).findFirst(new IWhereFilter<LineAnnotationAspect>(){
    public boolean accept(    LineAnnotationAspect a){
      return LineAnnotationAspect.AUTHOR.equals(a.getId());
    }
  }
);
  Map<SNodeId,Integer> nodeIdToFileLine=MapSequence.fromMap(new HashMap<SNodeId,Integer>());
  for (int line=0; line < ListSequence.fromList(myFileLineToContent).count(); line++) {
    SNode node=null;
    SNodeId id=check_5mnya_a0b0l0a(ListSequence.fromList(myFileLineToContent).getElement(line));
    if (id != null && SetSequence.fromSet(descendantIds).contains(id)) {
      node=model.getNodeById(id);
    }
    if (node == null) {
      continue;
    }
    if (MapSequence.fromMap(nodeIdToFileLine).containsKey(id)) {
      MapSequence.fromMap(nodeIdToFileLine).put(id,getFileLineWithMaxRevision(MapSequence.fromMap(nodeIdToFileLine).get(id),line));
    }
 else {
      MapSequence.fromMap(nodeIdToFileLine).put(id,line);
    }
  }
  ListSequence.fromList(myAspectSubcolumns).addSequence(Sequence.fromIterable(Sequence.fromArray(fileAnnotation.getAspects())).select(new ISelector<LineAnnotationAspect,AnnotationAspectSubcolumn>(){
    public AnnotationAspectSubcolumn select(    LineAnnotationAspect a){
      return new AnnotationAspectSubcolumn(AnnotationColumn.this,a);
    }
  }
));
  ListSequence.fromList(myAspectSubcolumns).addElement(new CommitNumberSubcolumn(this,myFileAnnotation));
  for (  VcsFileRevision revision : ListSequence.fromList(myFileAnnotation.getRevisions())) {
    String author=revision.getAuthor();
    if (!(MapSequence.fromMap(myAuthorsToColors).containsKey(author))) {
      MapSequence.fromMap(myAuthorsToColors).put(author,AnnotationColors.BG_COLORS[MapSequence.fromMap(myAuthorsToColors).count() % AnnotationColors.BG_COLORS.length]);
    }
  }
  myViewActionGroup=new ViewActionGroup(this,myAspectSubcolumns);
  myRevisionRange=new VcsRevisionRange(this,myFileAnnotation);
  ListSequence.fromList(myAspectSubcolumns).addElement(new HighlightRevisionSubcolumn(this,myRevisionRange));
  myModelVirtualFile=modelVirtualFile;
  myModelDescriptor=(EditableSModelDescriptor)model.getModelDescriptor();
  myVcs=vcs;
  final OldChangesManager changesManager=OldChangesManager.getInstance(getProject());
  changesManager.getCommandQueue().runTask(new Runnable(){
    public void run(){
      OldModelChangesManager modelChangesManager=changesManager.getModelChangesManager(myModelDescriptor);
      ListSequence.fromList(modelChangesManager.getChangeList()).visitAll(new IVisitor<OldChange>(){
        public void visit(        OldChange ch){
          saveChange(ch);
        }
      }
);
      modelChangesManager.addChangeListener(myChangeListener);
    }
  }
);
  myMessageBusConnection=getProject().getMessageBus().connect();
  myMessageBusConnection.subscribe(EditorComponentCreateListener.EDITOR_COMPONENT_CREATION,new AnnotationColumn.MyEditorComponentCreateListener());
}
