{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  if (SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1101757c8faL,0x110175cdb2bL,"value")) != null) {
    this.appendNewLine();
    this.appendWithIndent("// ");
    this.append(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1101757c8faL,0x110175cdb2bL,"value")));
  }
 else {
    this.appendNewLine();
    this.appendWithIndent("// ");
  }
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L,0xbfd948636cfe8bc3L,0x465516cf87c705a3L,"jetbrains.mps.lang.traceable.structure.TraceableConcept")),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
