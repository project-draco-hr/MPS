{
  if (SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck,"labelDeclaration",false),"sourceConcept",false) != null) {
    if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck,"labelDeclaration",false),"sourceConcept",false),NameUtil.nodeFQName(SLinkOperations.getTarget(nodeToCheck,"applicableConcept",false))))) {
{
        BaseIntentionProvider intentionProvider=null;
        IErrorTarget errorTarget=new NodeErrorTarget();
        typeCheckingContext.reportTypeError(nodeToCheck,"Label has incorrect type","r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)","1203556587912",intentionProvider,errorTarget);
      }
    }
{
      SNode _nodeToCheck_1029348928467=nodeToCheck;
      BaseIntentionProvider intentionProvider=null;
      typeCheckingContext.createLessThanInequationStrong((SNode)new _Quotations.QuotationClass_2().createNode(BaseMappingRule_Behavior.call_getTemplateType_1213877498511(nodeToCheck),typeCheckingContext),(SNode)new _Quotations.QuotationClass_1().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck,"labelDeclaration",false),"targetConcept",false),typeCheckingContext),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)","1200922039515",false,0,intentionProvider);
    }
  }
}
