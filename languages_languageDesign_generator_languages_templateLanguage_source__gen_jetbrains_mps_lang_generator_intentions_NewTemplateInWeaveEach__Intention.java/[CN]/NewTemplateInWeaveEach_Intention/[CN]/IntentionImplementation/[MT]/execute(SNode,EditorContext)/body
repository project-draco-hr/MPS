{
  SNode applicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.lang.generator.structure.Weaving_MappingRule"),"applicableConcept",false);
  String name=CreateFromUsageUtil.getText(editorContext);
  if (name == null || name.length() == 0) {
    name="weave_";
    if (applicableConcept != null) {
      name+=SPropertyOperations.getString(applicableConcept,"name");
    }
  }
  SNode t=SNodeFactoryOperations.createNewRootNode(SNodeOperations.getModel(node),"jetbrains.mps.lang.generator.structure.TemplateDeclaration",null);
  SPropertyOperations.set(t,"name",name);
  SLinkOperations.setTarget(t,"applicableConcept",applicableConcept,false);
  t.setProperty(SNodeUtil.property_BaseConcept_virtualPackage,SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getContainingRoot(node),"jetbrains.mps.lang.core.structure.BaseConcept"),"virtualPackage"));
  SNode ownerRule=SNodeOperations.getAncestor(node,"jetbrains.mps.lang.generator.structure.Weaving_MappingRule",false,false);
  SNode contextNodeType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(ownerRule,"jetbrains.mps.lang.generator.structure.Weaving_MappingRule"),"contextNodeQuery",true));
  if (SNodeOperations.isInstanceOf(contextNodeType,"jetbrains.mps.lang.smodel.structure.SNodeType")) {
    SNode contextNodeConcept=SLinkOperations.getTarget(SNodeOperations.cast(contextNodeType,"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false);
    if (contextNodeConcept != SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")) {
      if (!(SNodeOperations.isInstanceOf(contextNodeConcept,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"))) {
        SLinkOperations.setTarget(t,"contentNode",SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(contextNodeConcept),null),true);
      }
    }
  }
  SLinkOperations.setTarget(node,"template",t,false);
}
