{
  Set<VirtualFile> unModifiedModelFiles=SetSequence.<VirtualFile>fromSet(new HashSet<VirtualFile>());
  List<SNode> modifiedClasses=ListSequence.<SNode>fromList(new ArrayList<SNode>());
  List<SNode> modifiedInterfaces=ListSequence.<SNode>fromList(new ArrayList<SNode>());
  for (  SModelDescriptor md : scope.getModelDescriptors()) {
    if (!((md instanceof EditableSModelDescriptor))) {
      continue;
    }
    EditableSModelDescriptor emd=(EditableSModelDescriptor)md;
    IFile modelFile=emd.getModelFile();
    if (modelFile == null) {
      continue;
    }
    if (emd.isChanged()) {
      SModel sModel=md.getSModel();
      for (      SNode sNode : ListSequence.<SNode>fromList(SModelOperations.getNodes(sModel,null))) {
        if (SNodeOperations.isInstanceOf(sNode,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          ListSequence.<SNode>fromList(modifiedClasses).addElement(SNodeOperations.cast(sNode,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
        }
 else         if (SNodeOperations.isInstanceOf(sNode,"jetbrains.mps.baseLanguage.structure.Interface")) {
          ListSequence.<SNode>fromList(modifiedInterfaces).addElement(SNodeOperations.cast(sNode,"jetbrains.mps.baseLanguage.structure.Interface"));
        }
      }
    }
 else {
      SetSequence.fromSet(unModifiedModelFiles).addElement(VirtualFileUtils.getVirtualFile(modelFile));
    }
  }
  List<SNode> result=new ArrayList<SNode>();
  Queue<SNode> queue=QueueSequence.<SNode>fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(queue).addLastElement(classifier);
  ClassifierSuccessorsFinder.ValueProcessor valueProcessor=new ClassifierSuccessorsFinder.ValueProcessor(result,queue);
  ClassifierSuccessorsFinder.ModifiedsuccessorFinder modifiedSuccessorFinder=new ClassifierSuccessorsFinder.ModifiedsuccessorFinder(modifiedClasses,modifiedInterfaces,result,queue);
  ClassifierSuccessorsFinder.SearchScope unModifiedFilesSearchScope=new ClassifierSuccessorsFinder.SearchScope(unModifiedModelFiles);
  while (!(QueueSequence.<SNode>fromQueue(queue).isEmpty())) {
    SNode nextClassifier=QueueSequence.fromQueue(queue).removeFirstElement();
    FileBasedIndex.getInstance().processValues(ClassifierSuccessorsIndexer.NAME,new GlobalSNodeId(nextClassifier),null,valueProcessor,unModifiedFilesSearchScope);
    modifiedSuccessorFinder.process(nextClassifier);
  }
  return result;
}
