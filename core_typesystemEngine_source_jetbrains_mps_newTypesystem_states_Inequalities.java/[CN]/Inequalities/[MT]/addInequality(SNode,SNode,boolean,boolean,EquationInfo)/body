{
  subType=myState.getRepresentative(subType);
  superType=myState.getRepresentative(superType);
  if (subType == null || superType == null || subType == superType) {
    return;
  }
  if (!myState.isConcrete(subType) && solveOnlyConcrete || TypesUtil.isVariable(superType)) {
    addSubTyping(subType,superType,isWeak,check,info);
    return;
  }
  TypeChecker typeChecker=myState.getTypeCheckingContext().getTypeChecker();
  for (  Pair<InequationReplacementRule_Runtime,IsApplicable2Status> inequalityReplacementRule : typeChecker.getRulesManager().getReplacementRules(subType,superType)) {
    InequationReplacementRule_Runtime rule=inequalityReplacementRule.o1;
    IsApplicable2Status status=inequalityReplacementRule.o2;
    myState.executeOperation(new AddRemarkOperation(subType + " is subtype of " + superType+ " by replacement rule"),true);
    ((AbstractInequationReplacementRule_Runtime)rule).processInequation(subType,superType,info,myState.getTypeCheckingContext(),status);
    myState.popOperation();
    return;
  }
  subType=myState.getEquations().expandNode(subType);
  superType=myState.getEquations().expandNode(superType);
  SubTyping subTyping=myState.getTypeCheckingContext().getSubTyping();
  AddRemarkOperation difference=new AddRemarkOperation(subType + " is subtype of " + superType);
  myState.executeOperation(difference,true);
  if (subTyping.isSubType(subType,superType,info,isWeak,false)) {
    myState.popOperation();
  }
 else {
    myState.removeLastOperation(difference);
    myState.getNodeMaps().reportSubTypeError(subType,superType,info,isWeak);
  }
}
