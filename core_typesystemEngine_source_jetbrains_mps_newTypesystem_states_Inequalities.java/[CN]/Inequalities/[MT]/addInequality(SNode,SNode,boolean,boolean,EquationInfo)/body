{
  Equations equations=myState.getEquations();
  subType=equations.getRepresentative(subType);
  superType=equations.getRepresentative(superType);
  if (subType == null || superType == null || subType == superType) {
    return;
  }
  if (!myState.isConcrete(subType) || !myState.isConcrete(superType)) {
    addSubTyping(subType,superType,isWeak,check,info);
    return;
  }
  TypeChecker typeChecker=myState.getTypeCheckingContext().getTypeChecker();
  for (  Pair<InequationReplacementRule_Runtime,IsApplicable2Status> inequalityReplacementRule : typeChecker.getRulesManager().getReplacementRules(subType,superType)) {
    InequationReplacementRule_Runtime rule=inequalityReplacementRule.o1;
    IsApplicable2Status status=inequalityReplacementRule.o2;
    ((AbstractInequationReplacementRule_Runtime)rule).processInequation(subType,superType,info,myState.getTypeCheckingContext(),status);
    myState.addDifference(new StringDifference("Replacement rule:" + subType + " <: "+ superType),false);
    return;
  }
  SubTyping subTyping=myState.getTypeCheckingContext().getSubTyping();
  if (subTyping.isSubType(subType,superType,info,isWeak,myState)) {
    return;
  }
  reportError(subType,superType,info,isWeak);
}
