{
  left=myState.getRepresentative(left);
  right=myState.getRepresentative(right);
  if (left == null || right == null || left == right) {
    return;
  }
  if (!myState.isConcrete(left) || !myState.isConcrete(right)) {
    addComparable(left,right,isWeak,info);
    return;
  }
  left=myState.expand(left);
  right=myState.expand(right);
  SubTyping subTyping=myState.getTypeCheckingContext().getSubTyping();
  if (subTyping.isComparableByRules(left,right,info,isWeak) || subTyping.isSubTypeByReplacementRules(left,right) || subTyping.isSubTypeByReplacementRules(right,left)|| subTyping.isSubType(left,right,info,isWeak,true)|| subTyping.isSubType(right,left,info,isWeak,true)) {
    myState.executeOperation(new AddRemarkOperation(left + " is comparable with " + right));
    return;
  }
  myState.getNodeMaps().reportComparableError(left,right,info,isWeak);
}
