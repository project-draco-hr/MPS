{
  SNode meth=getFunctionMethod(literal,targetIfaceErase);
  SNode funType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(literal),"jetbrains.mps.baseLanguage.closures.structure.FunctionType");
  Adaptation.TypeMatcher matcher=new Adaptation.TypeMatcher();
  if ((SLinkOperations.getTarget(meth,"returnType",true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(meth,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
    matcher.matchReturnType(SLinkOperations.getTarget(meth,"returnType",true),FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(funType));
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(meth,"returnType",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode absRetCT=SNodeOperations.copyNode(SNodeOperations.cast(SLinkOperations.getTarget(meth,"returnType",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"));
      SNode ftResCT=FunctionTypeUtil.unmeet(FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(funType));
      String adapterName=JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(absRetCT,"classifier",false),"name")) + JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(FunctionTypeUtil.unbound(ftResCT),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"name")) + "Adapter";
      for (      SNode cls : SModelOperations.getNodes(SNodeOperations.getModel(SLinkOperations.getTarget(absRetCT,"classifier",false)),"jetbrains.mps.baseLanguage.structure.Classifier")) {
        if (adapterName.equals(JavaNameUtil.shortName(SPropertyOperations.getString(cls,"name")))) {
          SNode newRetCT=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
          SLinkOperations.setTarget(newRetCT,"classifier",cls,false);
          Values.RETURN_TYPE.set(genContext,targetIfaceErase,newRetCT);
          break;
        }
      }
    }
  }
{
    Iterator<SNode> funParamIt=ListSequence.fromList(FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(funType)).iterator();
    Iterator<SNode> methParamIt=ListSequence.fromList(SLinkOperations.getTargets(meth,"parameter",true)).iterator();
    while (funParamIt.hasNext() && methParamIt.hasNext()) {
      matcher.matchType(SLinkOperations.getTarget(methParamIt.next(),"type",true),funParamIt.next());
    }
    if (funParamIt.hasNext() || methParamIt.hasNext()) {
      genContext.showErrorMessage(literal,"Closure parameters count doesn't match method '" + SPropertyOperations.getString(meth,"name") + "' in "+ JavaNameUtil.fqClassName(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),SPropertyOperations.getString(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),"name")));
    }
  }
{
    Iterator<SNode> funThrIt=ListSequence.fromList(FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(funType)).iterator();
    Iterator<SNode> methThrIt=ListSequence.fromList(FunctionTypeUtil.normalizeThrowsTypes(SLinkOperations.getTargets(meth,"throwsItem",true))).iterator();
    while (funThrIt.hasNext() && methThrIt.hasNext()) {
      matcher.matchType(methThrIt.next(),funThrIt.next());
    }
    if (funThrIt.hasNext() || methThrIt.hasNext()) {
      genContext.showWarningMessage(null,"Closure generic throws types count doesn't match method '" + SPropertyOperations.getString(meth,"name") + "' in "+ JavaNameUtil.fqClassName(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),SPropertyOperations.getString(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),"name")));
    }
  }
  Values.TYPE_MAP.set(genContext,targetIfaceErase,matcher.getMap());
  Map<SNode,SNode> map=matcher.getMap();
  if (map != null) {
    List<SNode> varDecls=SLinkOperations.getTargets(SLinkOperations.getTarget(targetIfaceErase,"classifier",false),"typeVariableDeclaration",true);
    int idx=0;
    for (    SNode rtp : reifiedTargetIfaceTypeParams) {
      List<SNode> queue=ListSequence.fromListAndArray(new LinkedList<SNode>(),ListSequence.fromList(SLinkOperations.getTargets(targetIfaceErase,"parameter",true)).addElement(SNodeOperations.copyNode(rtp)));
      while (!(ListSequence.fromList(queue).isEmpty())) {
        SNode n=ListSequence.fromList(queue).removeElementAt(0);
        if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
          if (idx < ListSequence.fromList(varDecls).count() && MapSequence.fromMap(map).containsKey(ListSequence.fromList(varDecls).getElement(idx))) {
            SNodeOperations.replaceWithAnother(n,MapSequence.fromMap(map).get(ListSequence.fromList(varDecls).getElement(idx)));
          }
        }
 else {
          if (n != null && (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.UpperBoundType") || SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.LowerBoundType"))) {
            ListSequence.fromList(queue).addSequence(ListSequence.fromList(SNodeOperations.getChildren(n)));
          }
        }
      }
      idx++;
    }
  }
}
