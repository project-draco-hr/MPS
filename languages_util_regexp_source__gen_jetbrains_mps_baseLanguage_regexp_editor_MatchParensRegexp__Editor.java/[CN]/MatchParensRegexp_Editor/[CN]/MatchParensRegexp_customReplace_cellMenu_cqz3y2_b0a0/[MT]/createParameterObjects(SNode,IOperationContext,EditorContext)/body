{
  List<SNode> res=ListSequence.fromList(new LinkedList<SNode>());
  ListSequence.fromList(res).addElement(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118de1f935L,"jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp").getDeclarationNode());
  ListSequence.fromList(res).addElement(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118de6e3f6L,"jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp").getDeclarationNode());
  ListSequence.fromList(res).addElement(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118ddfb973L,"jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp").getDeclarationNode());
  ListSequence.fromList(res).addElement(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118de6742fL,"jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp").getDeclarationNode());
  ListSequence.fromList(res).addElement(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp").getDeclarationNode());
  return res;
}
