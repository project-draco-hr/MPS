{
  final DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode();
  final Ref<Integer> count=new Ref<Integer>(0);
  final FactoryMap<Object,ParentNode> map=new FactoryMap<Object,ParentNode>(){
    protected ParentNode create(    final Object key){
      if (key instanceof SNodePointer) {
        SNode el=((SNodePointer)key).getNode();
        if (el != null) {
          final ContainerNode containerNode=new ContainerNode(rootNode,(SNodePointer)key,getText(el),getIcon(el),count);
          myContainerNodes.add(containerNode);
          return containerNode;
        }
        return new ParentNode(rootNode,null,"<unknown>",null,count);
      }
      if (key instanceof String) {
        return new ParentNode(rootNode,null,(String)key,null,count);
      }
      throw new IllegalArgumentException();
    }
  }
;
  for (  SNodePointer object : myElements) {
    SNode node=object.getNode();
    Object group=getGroupNode(node);
    if (group == null)     group=getGroupTitle(node);
    final ParentNode parentNode=map.get(group);
    final MemberNode elementNode=new MemberNode(parentNode,object,getText(node),getIcon(node),count);
    myNodeToParentMap.put(elementNode,parentNode);
    myElementToNodeMap.put(object,elementNode);
  }
  return new DefaultTreeModel(rootNode);
}
