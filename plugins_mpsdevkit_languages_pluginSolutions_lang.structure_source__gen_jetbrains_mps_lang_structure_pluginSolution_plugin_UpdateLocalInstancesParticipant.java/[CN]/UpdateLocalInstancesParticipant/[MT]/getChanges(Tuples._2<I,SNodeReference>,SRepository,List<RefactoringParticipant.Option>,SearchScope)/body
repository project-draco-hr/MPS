{
  if (initialState == null || !(ListSequence.fromList(selectedOptions).contains(OPTION))) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>>>());
  }
  Collection<SNode> instances=myStructureSpecialization.findInstances(initialState._0(),searchScope);
  return CollectionSequence.fromCollection(instances).select(new ISelector<SNode,RefactoringParticipant.Change<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>>>(){
    public RefactoringParticipant.Change<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>> select(    SNode instance){
      final SNodeReference nodeRef=instance.getReference();
      final SearchResults searchResults=new SearchResults();
      searchResults.add(new SearchResult<SNode>(instance,"instance"));
      RefactoringParticipant.Change<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>> change=new RefactoringParticipant.Change<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>>(){
        public MoveNodeRefactoringParticipant<Tuples._2<I,SNodeReference>,Tuples._2<F,SNodeReference>> getParticipant(){
          return UpdateLocalInstancesParticipant.this;
        }
        public SearchResults getSearchResults(){
          return searchResults;
        }
        public boolean needsToPreserveOldNode(){
          return false;
        }
        public void confirm(        final Tuples._2<F,SNodeReference> finalState,        final SRepository repository,        final RefactoringSession refactoringSession){
          refactoringSession.registerChange(new Runnable(){
            public void run(){
              SNode node=nodeRef.resolve(repository);
              MoveNodesActionBase.CopyMapObject copyMap=MoveNodesActionBase.CopyMapObject.getCopyMap(refactoringSession);
              if (node == null || MapSequence.fromMap(copyMap.getCopyMap()).containsKey(node)) {
                myStructureSpecialization.doReplaceInstance(MapSequence.fromMap(copyMap.getCopyMap()).get(node),initialState._0(),finalState._0());
              }
              myStructureSpecialization.doReplaceInstance(node,initialState._0(),finalState._0());
            }
          }
);
        }
      }
;
      return change;
    }
  }
).toListSequence();
}
