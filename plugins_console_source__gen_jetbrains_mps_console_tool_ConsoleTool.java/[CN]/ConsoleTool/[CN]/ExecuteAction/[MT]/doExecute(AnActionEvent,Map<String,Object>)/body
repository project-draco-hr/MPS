{
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      myCursor=null;
      TemporaryModels.getInstance().addMissingImports(myModel);
      final SNode lastCmd=SLinkOperations.getTarget(myCommandRoot,"command",true);
      if ((lastCmd == null)) {
        return;
      }
      final SNode willBeLastHist=SNodeOperations.copyNode(myCommandRoot);
      final SNode res=SConceptOperations.createNewNode("jetbrains.mps.console.base.structure.CommandResult",null);
      SLinkOperations.addNewChild(res,"line","jetbrains.mps.console.base.structure.CommandResultLine");
      final SearchScope scope=(myScopeCombo.getSelectedItem() == ConsoleTool.PROJECT_SCOPE ? new ProjectScope(myProject) : GlobalScope.getInstance());
      BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(lastCmd,"jetbrains.mps.console.base.structure.Command"),"virtual_execute_757553790980855637",new Object[]{new ConsoleContext(){
        public jetbrains.mps.project.Project getProject(){
          return myProject;
        }
        public SearchScope getScope(){
          return scope;
        }
      }
,new ConsoleStream(){
        public void addText(        String text){
          checkResultAvailable();
          Scanner scanner=new Scanner(text);
          while (scanner.hasNextLine()) {
            String line=scanner.nextLine();
            if ((line != null && line.length() > 0)) {
              ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res,"line",true)).last(),"part",true)).addElement(_quotation_createNode_xg3v07_a0a0a1a2a0a0b0a9a0a0c25(line));
            }
            if (scanner.hasNextLine() || text.charAt(text.length() - 1) == '\n') {
              SLinkOperations.addNewChild(res,"line","jetbrains.mps.console.base.structure.CommandResultLine");
            }
          }
        }
        public void addNodeReference(        SNode node){
          checkResultAvailable();
          SModuleReference usedLanguage=node.getConcept().getLanguage().getSourceModule().getModuleReference();
          if (!(((SModelInternal)myModel).importedLanguages().contains(usedLanguage))) {
            ((SModelInternal)myModel).addLanguage(usedLanguage);
            ((AbstractModule)myModel.getModule()).addUsedLanguage(usedLanguage);
          }
          SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res,"line",true)).last(),"part","jetbrains.mps.console.base.structure.NodeReferenceResultPart"),"target",node,false);
        }
        public void addNode(        SNode node){
          checkResultAvailable();
          for (          SNode subNode : ListSequence.fromList(SNodeOperations.getDescendants(node,null,true,new String[]{}))) {
            SModuleReference usedLanguage=subNode.getConcept().getLanguage().getSourceModule().getModuleReference();
            if (!(((SModelInternal)myModel).importedLanguages().contains(usedLanguage))) {
              ((SModelInternal)myModel).addLanguage(usedLanguage);
              ((AbstractModule)myModel.getModule()).addUsedLanguage(usedLanguage);
            }
          }
          SLinkOperations.setTarget(SLinkOperations.addNewChild(ListSequence.fromList(SLinkOperations.getTargets(res,"line",true)).last(),"part","jetbrains.mps.console.base.structure.NodeResultPart"),"node",node,true);
        }
        public void addClosure(        SNode nodeWithClosure,        _FunctionTypes._void_P0_E0 closure){
          checkResultAvailable();
          ClosureHoldingNodeUtil.getInstance().register(nodeWithClosure,closure);
          ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(res,"line",true)).last(),"part",true)).addElement(nodeWithClosure);
        }
        private void checkResultAvailable(){
          if ((SNodeOperations.getNextSibling(willBeLastHist) == null)) {
            SNodeOperations.insertNextSiblingChild(willBeLastHist,res);
          }
        }
      }
,new Runnable(){
        public void run(){
          ListSequence.fromList(SLinkOperations.getTargets(myHistRoot,"item",true)).addElement(willBeLastHist);
          SLinkOperations.setTarget(myCommandRoot,"command",null,true);
          myCursor=null;
          myNewCommand=null;
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              myCommandEditor.scrollRectToVisible(myCommandEditor.getBounds());
            }
          }
);
        }
      }
});
    }
  }
);
}
