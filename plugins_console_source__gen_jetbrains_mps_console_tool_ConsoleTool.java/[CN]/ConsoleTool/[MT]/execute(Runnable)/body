{
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      myCursor=null;
      TemporaryModels.getInstance().addMissingImports(myModel);
      final SNode lastCmd=SLinkOperations.getTarget(SLinkOperations.getTarget(myRoot,"commandHolder",true),"command",true);
      if ((lastCmd == null)) {
        return;
      }
      BehaviorReflection.invokeVirtual(Void.class,lastCmd,"virtual_execute_6854397602732226506",new Object[]{new ConsoleContext(){
        public jetbrains.mps.project.Project getProject(){
          return ProjectHelper.toMPSProject(ConsoleTool.this.getProject());
        }
        public SModel getConsoleModel(){
          return myModel;
        }
      }
,new ConsoleStream(){
        public void addText(        String text){
          Scanner scanner=new Scanner(text);
          while (scanner.hasNextLine()) {
            String line=scanner.nextLine();
            if ((line != null && line.length() > 0)) {
              ListSequence.fromList(SLinkOperations.getTargets(getLastReponse(),"item",true)).addElement(_quotation_createNode_xg3v07_a0a0a1a1a0a0b0a4a0a0yb(line));
            }
            if (scanner.hasNextLine() || text.charAt(text.length() - 1) == '\n') {
              SLinkOperations.addNewChild(getLastReponse(),"item","jetbrains.mps.console.base.structure.NewLineResponseItem");
            }
          }
        }
        public void addNode(        SNode node){
          for (          SNode subNode : ListSequence.fromList(SNodeOperations.getDescendants(node,null,true,new String[]{}))) {
            SModuleReference usedLanguage=subNode.getConcept().getLanguage().getSourceModule().getModuleReference();
            if (!(((SModelInternal)myModel).importedLanguages().contains(usedLanguage))) {
              ((SModelInternal)myModel).addLanguage(usedLanguage);
              ((AbstractModule)myModel.getModule()).addUsedLanguage(usedLanguage);
            }
          }
          SLinkOperations.setTarget(SLinkOperations.addNewChild(getLastReponse(),"item","jetbrains.mps.console.base.structure.NodeResponseItem"),"node",node,true);
        }
      }
,new Runnable(){
        public void run(){
          ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(myRoot,"history",true),"item",true)).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(myRoot,"commandHolder",true)));
          SNodeOperations.deleteNode(SLinkOperations.getTarget(SLinkOperations.getTarget(myRoot,"commandHolder",true),"command",true));
          myNewCommand=null;
        }
      }
,new Runnable(){
        public void run(){
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              TemporaryModels.getInstance().addMissingImports(myModel);
            }
          }
);
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ProjectHelper.toIdeaProject(ProjectHelper.toMPSProject(ConsoleTool.this.getProject())).getComponent(ConsoleTool.class).getToolWindow().activate(new Runnable(){
                public void run(){
                  setSelection();
                }
              }
);
              check_xg3v07_a1a0a2a0a0d0a4a0a0yb(executeAfter);
            }
          }
);
        }
      }
});
    }
  }
);
}
