{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_1=null;
  SNode quotedNode_2=null;
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  quotedNode_1=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResult",null,null,GlobalScope.getInstance(),false);
  quotedNode_2=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResultLine",null,null,GlobalScope.getInstance(),false);
  quotedNode_4=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_4,"text","type an expression or {statements} to execute");
  quotedNode_2.addChild("part",quotedNode_4);
  quotedNode_1.addChild("line",quotedNode_2);
  quotedNode_3=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.CommandResultLine",null,null,GlobalScope.getInstance(),false);
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.console.base.structure.TextResultPart",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_5,"text","type ? for a list of commands");
  quotedNode_3.addChild("part",quotedNode_5);
  quotedNode_1.addChild("line",quotedNode_3);
  return quotedNode_1;
}
