{
  final jetbrains.mps.project.Project project=ProjectHelper.toMPSProject(getProject());
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      loadHistory();
      ConsoleTool.this.myHistEditor=new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(),null){
        @Override public boolean isReadOnly(){
          return true;
        }
      }
;
      myHistEditor.setFocusable(false);
      ConsoleTool.this.myCommandEditor=new UIEditorComponent(ProjectHelper.toMPSProject(getProject()).getRepository(),null){
        @Nullable @Override public Object getData(        @NonNls String key){
          if (PlatformDataKeys.FILE_EDITOR.equals(key)) {
            return myCommandFileEditor;
          }
          return super.getData(key);
        }
      }
;
      myCommandFileEditor=new ConsoleFileEditor(myCommandEditor);
      Language base=ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("de1ad86d-6e50-4a02-b306-d4d17f64c375(jetbrains.mps.console.base)"),Language.class);
      Collection<Language> languages=ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
      for (      Language l : CollectionSequence.fromCollection(languages)) {
        if (l != base && !(l.getAllExtendedLanguages().contains(base))) {
          continue;
        }
        ((SModelInternal)myModel).addLanguage(l.getModuleReference());
        ((AbstractModule)myModel.getModule()).addUsedLanguage(l.getModuleReference());
      }
      ((SModelInternal)myModel).addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
      ((AbstractModule)myModel.getModule()).addUsedDevkit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
      ConsoleTool.this.myContext=new ModuleContext(myModel.getModule(),project);
      myHistEditor.editNode(myHistRoot,myContext);
      myCommandEditor.editNode(myCommandRoot,myContext);
    }
  }
);
  myMainComponent=new JPanel();
  myMainComponent.setLayout(new BorderLayout());
  myMainComponent.add(createScopeComponent(),BorderLayout.SOUTH);
  myMainComponent.add(getToolbarComponent(project),BorderLayout.WEST);
  myMainComponent.add(createEditorsComponent(),BorderLayout.CENTER);
}
