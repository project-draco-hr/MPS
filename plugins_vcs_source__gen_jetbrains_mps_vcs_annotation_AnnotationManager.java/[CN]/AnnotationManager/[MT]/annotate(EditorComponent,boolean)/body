{
  final LeftEditorHighlighter leftEditorHighlighter=editorComponent.getLeftEditorHighlighter();
  if (MapSequence.fromMap(myEditorToColumn).containsKey(editorComponent)) {
    if (!(dryRun)) {
      leftEditorHighlighter.removeTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
      MapSequence.fromMap(myEditorToColumn).removeKey(editorComponent);
    }
    return true;
  }
  final SNode root=editorComponent.getEditedNode();
  SModel model=root.getModel();
  SModelDescriptor modelDescriptor=model.getModelDescriptor();
  if (!((modelDescriptor instanceof EditableSModelDescriptor))) {
    return false;
  }
  IFile modelFile=((EditableSModelDescriptor)modelDescriptor).getModelFile();
  if (modelFile == null) {
    return false;
  }
  final VirtualFile file=VirtualFileUtils.getVirtualFile(modelFile);
  final AbstractVcs vcs=myProjectLevelVcsManager.getVcsFor(file);
  if (vcs == null) {
    return false;
  }
  FileStatus fileStatus=FileStatusManager.getInstance(myProject).getStatus(file);
  if (fileStatus == FileStatus.UNKNOWN || fileStatus == FileStatus.ADDED || fileStatus == FileStatus.IGNORED) {
    return false;
  }
  if (ChangesManager.getInstance(myProject).getModelChangesManager(model).isAddedNode(new SNodePointer(root))) {
    return false;
  }
  final AnnotationProvider annotationProvider=vcs.getAnnotationProvider();
  if (annotationProvider == null) {
    return false;
  }
  if (dryRun) {
    return true;
  }
  Task.Backgroundable annotateTask=new Task.Backgroundable(myProject,"Retrieving annotations",true,BackgroundFromStartOption.getInstance()){
    private FileAnnotation myFileAnnotation;
    private VcsException myException;
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        myFileAnnotation=annotationProvider.annotate(file);
      }
 catch (      VcsException e) {
        myException=e;
      }
    }
    @Override public void onCancel(){
      onSuccess();
    }
    @Override public void onSuccess(){
      if (myException != null) {
        AbstractVcsHelper.getInstance(myProject).showErrors(Arrays.asList(myException),"Exception on retrieving annotation");
      }
      if (myFileAnnotation != null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            MapSequence.fromMap(myEditorToColumn).put(editorComponent,new AnnotationColumn(leftEditorHighlighter,root,myFileAnnotation,vcs,file));
            leftEditorHighlighter.addTextColumn(MapSequence.fromMap(myEditorToColumn).get(editorComponent));
          }
        }
);
      }
    }
  }
;
  ProgressManager.getInstance().run(annotateTask);
  return true;
}
