{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_ActionTestAbstractChild;
case 1:
  return props_ActionTestAbstractChildWrapper;
case 2:
return props_ActionTestChild1;
case 3:
return props_ActionTestChild1Child;
case 4:
return props_ActionTestChild1SubConcept;
case 5:
return props_ActionTestChild2;
case 6:
return props_ActionTestChildToWrap1;
case 7:
return props_ActionTestChildToWrap2;
case 8:
return props_ActionTestChildWrapper;
case 9:
return props_ActionTestContainer;
case 10:
return props_ActionTestDefaultAbstractChild;
case 11:
return props_ActionTestDefaultChild1;
case 12:
return props_ActionTestDefaultChild2;
case 13:
return props_ActionTestSidetransformAbstractChild;
case 14:
return props_ActionTestSidetransformAddConceptAbstractChild;
case 15:
return props_ActionTestSidetransformAddConceptChild;
case 16:
return props_ActionTestSidetransformAnotherAbstractChild;
case 17:
return props_ActionTestSidetransformAnotherChild1;
case 18:
return props_ActionTestSidetransformAnotherChild2;
case 19:
return props_ActionTestSidetransformAnotherChildCommonSuperConcept;
case 20:
return props_ActionTestSidetransformChild1;
case 21:
return props_ActionTestSidetransformTestAncestor;
case 22:
return props_ActionTestSidetransformTestContainer;
}
throw new IllegalStateException("Unknown concept " + c);
}
