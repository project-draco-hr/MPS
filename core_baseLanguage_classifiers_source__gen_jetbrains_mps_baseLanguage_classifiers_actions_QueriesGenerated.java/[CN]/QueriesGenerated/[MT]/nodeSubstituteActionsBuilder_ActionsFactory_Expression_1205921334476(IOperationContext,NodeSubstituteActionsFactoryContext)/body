{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final SNode contextClassifier;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode contextPart=SNodeOperations.getAncestorWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier","jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart"},true,false);
        if (SNodeOperations.isInstanceOf(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier")) {
          return contextPart;
        }
 else {
          return IClassifierPart_Behavior.call_getMainClassifier_1213877255428(contextPart);
        }
      }
    }
;
    contextClassifier=(SNode)calc.calculate();
  }
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return IClassifier_Behavior.call_getMembers_1213877528020(contextClassifier,_context.getParentNode());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SLinkOperations.setNewChild(result,"operand","jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpresson");
              SLinkOperations.setTarget(result,"operation",IMember_Behavior.call_createOperation_1213877353000((item)),true);
              return result;
            }
          }
);
        }
      }
    }
  }
  return result;
}
