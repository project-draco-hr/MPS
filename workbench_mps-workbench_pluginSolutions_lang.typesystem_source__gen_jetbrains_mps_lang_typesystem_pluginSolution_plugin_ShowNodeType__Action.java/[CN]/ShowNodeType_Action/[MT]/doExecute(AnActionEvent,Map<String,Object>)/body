{
  final Wrappers._T<IErrorReporter> error=new Wrappers._T<IErrorReporter>();
  final Wrappers._T<SNode> type=new Wrappers._T<SNode>();
  ((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runWriteAction(new Runnable(){
    public void run(){
      ShowNodeType_Action.this.runTypecheckingAction(new ITypechecking.Action(){
        public void run(        TypeCheckingContext typeCheckingContext){
          if (!(typeCheckingContext.isCheckedRoot(false))) {
            typeCheckingContext.checkIfNotChecked(((SNode)MapSequence.fromMap(_params).get("node")),false);
          }
          type.value=typeCheckingContext.getTypeDontCheck(((SNode)MapSequence.fromMap(_params).get("node")));
          error.value=typeCheckingContext.getTypeMessageDontCheck(((SNode)MapSequence.fromMap(_params).get("node")));
          if (error.value == null && TypesUtil.hasVariablesInside(type.value)) {
            error.value=new NullErrorReporter(){
              @Override public String reportError(){
                return "Type was not fully instantiated";
              }
            }
;
          }
        }
      }
,_params);
    }
  }
);
  if (type.value == null) {
    ToolWindowManager manager=ToolWindowManager.getInstance(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject());
    manager.notifyByBalloon("Messages",MessageType.INFO,"Selected node has no type");
    return;
  }
  final Wrappers._T<SModel> tmpModel=new Wrappers._T<SModel>();
  try {
    ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
      public void run(){
        tmpModel.value=TemporaryModels.getInstance().create(true,TempModuleOptions.forDefaultModule());
        tmpModel.value.addRootNode(type.value);
        TemporaryModels.getInstance().addMissingImports(tmpModel.value);
      }
    }
);
    new MyBaseNodeDialog(((IOperationContext)MapSequence.fromMap(_params).get("context")),((SNode)MapSequence.fromMap(_params).get("node")),type.value,error.value).show();
  }
  finally {
    ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
      public void run(){
        tmpModel.value.removeRootNode(type.value);
        TemporaryModels.getInstance().dispose(tmpModel.value);
      }
    }
);
  }
}
