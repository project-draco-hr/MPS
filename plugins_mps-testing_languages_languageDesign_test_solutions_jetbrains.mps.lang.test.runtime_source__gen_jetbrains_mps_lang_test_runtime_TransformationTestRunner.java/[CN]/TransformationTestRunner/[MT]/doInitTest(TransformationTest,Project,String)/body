{
  if (LOG.isInfoEnabled()) {
    LOG.info("Initializing test...");
  }
  test.setProject(testProject);
  TransformationTest cachedTest=TestModelSaver.getInstance().getTest();
  SModel cachedModel=check_ovzmet_a0e0l(cachedTest);
  SModel cachedTransientModel=check_ovzmet_a0f0l(cachedTest);
  String cachedModelName=check_ovzmet_a0g0l(check_ovzmet_a0a6a11(cachedModel));
  if (cachedModelName != null && cachedModelName.equals(modelName)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Using cached model");
    }
    test.setModelDescriptor(cachedModel);
    test.setTransientModelDescriptor(cachedTransientModel);
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Recaching the model again");
    }
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        testProject.getModelAccess().executeCommand(new Runnable(){
          @Override public void run(){
            initialize(test,modelName);
          }
          private void initialize(          final TransformationTest test,          final String modelName){
            SModel modelDescriptor=findModel(modelName);
            test.setModelDescriptor(modelDescriptor);
            test.init();
          }
          private SModel findModel(          final String modelName){
            SModel modelDescriptor=SModelRepository.getInstance().getModelDescriptor(PersistenceFacade.getInstance().createModelReference(modelName));
            if (modelDescriptor == null) {
              Assert.fail("Can't find model " + modelName + " in projects "+ Arrays.toString(ProjectManager.getInstance().getOpenProjects())+ ".");
            }
            return modelDescriptor;
          }
        }
);
      }
    }
);
    TestModelSaver.getInstance().clean();
    TestModelSaver.getInstance().setTest(test);
  }
}
