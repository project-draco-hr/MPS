{
  Map<SModelReference,SModelReference> models=MapSequence.fromMap(new HashMap<SModelReference,SModelReference>());
  List<SReference> toResolve=getReferencesToResolve(model,models);
  if (ListSequence.fromList(toResolve).isEmpty()) {
    return;
  }
  Iterable<SModelReference> modelsToAdd=Sequence.fromIterable(MapSequence.fromMap(models).values()).where(new IWhereFilter<SModelReference>(){
    public boolean accept(    SModelReference it){
      return !(jetbrains.mps.smodel.SModelOperations.getImportedModelUIDs(model).contains(it));
    }
  }
);
  Sequence.fromIterable(modelsToAdd).visitAll(new IVisitor<SModelReference>(){
    public void visit(    SModelReference it){
      ((ABCDE)model).addModelImport(it,false);
    }
  }
);
  if (Sequence.fromIterable(modelsToAdd).isNotEmpty()) {
    new MissingDependenciesFixer(model.getModelDescriptor()).fix(false);
  }
  int cnt=StubResolver.resolveReferences(toResolve,models,context);
  new OptimizeImportsHelper(context).optimizeModelImports(model.getModelDescriptor());
  LOG.info(cnt + " stub references were re-resolved in model " + SModelOperations.getModelName(model)+ ". ("+ ListSequence.fromList(toResolve).count()+ ")");
}
