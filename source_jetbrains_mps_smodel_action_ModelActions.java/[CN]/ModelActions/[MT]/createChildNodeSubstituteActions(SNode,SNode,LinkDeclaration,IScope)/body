{
  final ConceptDeclaration targetConcept=linkDeclaration.getTarget();
  List<ConceptDeclaration> targetConcepts=SModelUtil.allConceptDeclarations(sourceNode.getModel(),scope,new Condition<ConceptDeclaration>(){
    public boolean met(    ConceptDeclaration node){
      if (!SModelUtil.hasConceptProperty(node,"abstract",scope)) {
        return SModelUtil.isAssignableType(targetConcept,node);
      }
      return false;
    }
  }
);
  List<INodeSubstituteAction> defaultActions=new LinkedList<INodeSubstituteAction>();
  for (  ConceptDeclaration conceptDeclaration : targetConcepts) {
    defaultActions.add(new DefaultChildNodeSubstituteAction(conceptDeclaration,sourceNode,currentTargetNode,linkDeclaration,scope));
  }
  List<NodeSubstituteActionsBuilder> substituteActionsBuilders=new LinkedList<NodeSubstituteActionsBuilder>();
  SModel model=sourceNode.getModel();
  List<Language> languages=model.getLanguages(scope);
  for (  Language language : languages) {
    SModelDescriptor actionsModelDescr=language.getActionsModelDescriptor();
    if (actionsModelDescr != null) {
      List<SNode> roots=actionsModelDescr.getSModel().getRoots();
      for (      SNode root : roots) {
        if (root instanceof NodeSubstituteActions) {
          Iterator<NodeSubstituteActionsBuilder> iterator=((NodeSubstituteActions)root).actionsBuilders();
          while (iterator.hasNext()) {
            NodeSubstituteActionsBuilder substituteActionsBuilder=iterator.next();
            if (substituteActionsBuilder.getApplicableLinkMetaclass() == LinkMetaclass.aggregation && substituteActionsBuilder.getApplicableConcept() == targetConcept) {
              substituteActionsBuilders.add(substituteActionsBuilder);
            }
          }
        }
      }
    }
  }
  if (substituteActionsBuilders.size() == 0) {
    return defaultActions;
  }
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  List<INodeSubstituteAction> filteredActions=filterActions(defaultActions,substituteActionsBuilders,null,scope);
  resultActions.addAll(filteredActions);
  for (  NodeSubstituteActionsBuilder nodeSubstituteActionsBuilder : substituteActionsBuilders) {
    List<INodeSubstituteAction> addActions=createActions(nodeSubstituteActionsBuilder,sourceNode,currentTargetNode,linkDeclaration,scope);
    addActions=filterActions(addActions,substituteActionsBuilders,nodeSubstituteActionsBuilder,scope);
    resultActions.addAll(addActions);
  }
  return resultActions;
}
