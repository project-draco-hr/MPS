{
  ConceptDeclaration targetConcept=linkDeclaration.getTarget();
  List<ConceptDeclaration> targetConcepts=getDefaultSubstitutableConcepts(sourceNode.getModel(),scope,targetConcept);
  List<INodeSubstituteAction> defaultActions=new LinkedList<INodeSubstituteAction>();
  for (  ConceptDeclaration conceptDeclaration : targetConcepts) {
    defaultActions.add(new DefaultChildNodeSubstituteAction(conceptDeclaration,sourceNode,currentTargetNode,linkDeclaration,scope));
  }
  List<NodeSubstituteActionsBuilder> substituteActionsBuilders=getNodeSubstituteActionBuilders(LinkMetaclass.aggregation,targetConcept,sourceNode.getModel(),scope);
  if (substituteActionsBuilders.size() == 0) {
    return defaultActions;
  }
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  List<INodeSubstituteAction> filteredActions=filterActions(defaultActions,substituteActionsBuilders,null,scope);
  resultActions.addAll(filteredActions);
  for (  NodeSubstituteActionsBuilder nodeSubstituteActionsBuilder : substituteActionsBuilders) {
    List<INodeSubstituteAction> addActions=createActions(nodeSubstituteActionsBuilder,sourceNode,currentTargetNode,linkDeclaration,scope);
    addActions=filterActions(addActions,substituteActionsBuilders,nodeSubstituteActionsBuilder,scope);
    resultActions.addAll(addActions);
  }
  return resultActions;
}
