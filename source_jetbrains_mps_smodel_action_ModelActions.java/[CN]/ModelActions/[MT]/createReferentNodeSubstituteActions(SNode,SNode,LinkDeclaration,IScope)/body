{
  final ConceptDeclaration targetConcept=linkDeclaration.getTarget();
  List<NodeSubstituteActionsBuilder> substituteActionsBuilders=getNodeSubstituteActionBuilders(LinkMetaclass.reference,targetConcept,sourceNode.getModel(),scope);
  if (substituteActionsBuilders.size() == 0) {
    ISearchScope searchScope=GenericSearchScope.createModelAndImportedModelsScope(sourceNode.getModel(),scope);
    List<SNode> nodes=searchScope.getNodes(new Condition<SNode>(){
      public boolean met(      SNode node){
        return SModelUtil.isInstanceOfConcept(node,targetConcept,scope);
      }
    }
);
    List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
    for (    SNode node : nodes) {
      actions.add(new DefaultReferentNodeSubstituteAction(node,sourceNode,currentTargetNode,linkDeclaration,scope));
    }
    return actions;
  }
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  for (  NodeSubstituteActionsBuilder nodeSubstituteActionsBuilder : substituteActionsBuilders) {
    List<INodeSubstituteAction> addActions=createActions(nodeSubstituteActionsBuilder,sourceNode,currentTargetNode,linkDeclaration,scope);
    addActions=filterActions(addActions,substituteActionsBuilders,nodeSubstituteActionsBuilder,scope);
    resultActions.addAll(addActions);
  }
  return resultActions;
}
