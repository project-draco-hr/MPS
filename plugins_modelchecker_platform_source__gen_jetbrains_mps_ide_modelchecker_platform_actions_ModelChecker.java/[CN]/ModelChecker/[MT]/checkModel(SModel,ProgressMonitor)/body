{
  final Wrappers._T<List<SpecificChecker>> specificCheckers=new Wrappers._T<List<SpecificChecker>>(mySpecificCheckers);
  if (specificCheckers.value == null) {
    specificCheckers.value=ModelCheckerSettings.getInstance().getSpecificCheckers();
  }
  monitor.start("Checking " + model.getModelName(),ListSequence.fromList(specificCheckers.value).count());
  try {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        SModule module=model.getModule();
        Project project=myOperationContext.getProject();
        if (module == null) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Module is null for " + model.getModelName() + " model");
          }
        }
        if (project == null) {
          if (LOG.isEnabledFor(Priority.WARN)) {
            LOG.warn("Project is null for IOperationContext in " + model.getModelName() + " model");
          }
        }
        if (module != null && project != null) {
          IOperationContext operationContext=new ModelChecker.ModelCheckerOperationContext(project,module);
          for (          SpecificChecker specificChecker : ListSequence.fromList(specificCheckers.value)) {
            try {
              List<SearchResult<ModelCheckerIssue>> specificCheckerResults=specificChecker.checkModel(model,monitor.subTask(1,SubProgressKind.AS_COMMENT),operationContext);
              myResults.getSearchResults().addAll(specificCheckerResults);
            }
 catch (            Throwable t) {
              if (LOG.isEnabledFor(Priority.ERROR)) {
                LOG.error("Error while " + model.getModelName() + " model checking",t);
              }
            }
            if (monitor.isCanceled()) {
              break;
            }
          }
        }
      }
    }
);
  }
  finally {
    monitor.done();
  }
}
