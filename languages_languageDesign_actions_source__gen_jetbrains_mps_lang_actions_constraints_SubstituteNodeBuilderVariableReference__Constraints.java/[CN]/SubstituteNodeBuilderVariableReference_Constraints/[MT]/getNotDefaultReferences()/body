{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode builder=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder",false,false);
          List<SNode> vars=new ArrayList<SNode>();
          if (builder != null) {
            ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(builder,"variable",true)));
          }
          return vars;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_vdmjo3_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
