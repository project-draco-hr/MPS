{
  List<SNode> nested=new ArrayList<SNode>();
  ListSequence.fromList(nested).addSequence(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),node,"jetbrains.mps.baseLanguage.structure.Classifier","call_nestedClassifiers_5292274854859193142",new Object[]{})).sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
,true));
  ListSequence.fromList(SLinkOperations.getTargets(node,"member",true)).removeWhere(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Classifier");
    }
  }
);
  ListSequence.fromList(SLinkOperations.getTargets(node,"member",true)).addSequence(ListSequence.fromList(nested));
}
