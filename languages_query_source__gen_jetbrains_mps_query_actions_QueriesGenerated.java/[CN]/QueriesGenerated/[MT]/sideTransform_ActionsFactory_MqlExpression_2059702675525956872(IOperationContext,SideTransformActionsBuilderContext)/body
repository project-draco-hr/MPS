{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlDotExpression");
    ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode dotexpr=SNodeOperations.replaceWithAnother(_context.getSourceNode(),SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.query.structure.MqlDotExpression",null));
        SLinkOperations.setTarget(dotexpr,"left",_context.getSourceNode(),true);
        SNodeFactoryOperations.setNewChild(dotexpr,"right","jetbrains.mps.query.structure.MqlSelector");
        return dotexpr;
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "dot expression";
      }
    }
);
  }
  return result;
}
