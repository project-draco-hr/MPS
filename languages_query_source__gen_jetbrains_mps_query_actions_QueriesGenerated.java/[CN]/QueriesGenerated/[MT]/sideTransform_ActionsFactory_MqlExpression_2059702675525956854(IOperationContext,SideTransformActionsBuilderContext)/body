{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlTriplex");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode to=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.query.structure.MqlTriplex",null);
        SNode current=_context.getSourceNode();
        while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current),"jetbrains.mps.query.structure.MqlBinaryExpr") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current),"jetbrains.mps.query.structure.MqlBinaryExpr"),"right",true) == current) {
          current=SNodeOperations.cast(SNodeOperations.getParent(current),"jetbrains.mps.query.structure.MqlExpression");
        }
        SNodeOperations.replaceWithAnother(current,to);
        SLinkOperations.setTarget(to,"condition",current,true);
        return to;
      }
      public String getMatchingText(      String pattern){
        return "?";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "triplex operator";
      }
    }
);
  }
  return result;
}
