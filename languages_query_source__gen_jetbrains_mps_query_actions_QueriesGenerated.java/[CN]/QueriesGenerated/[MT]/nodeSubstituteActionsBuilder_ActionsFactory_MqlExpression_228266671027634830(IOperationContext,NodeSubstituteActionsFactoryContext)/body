{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlIntLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.<INodeSubstituteAction>fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode intConst=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.query.structure.MqlIntLiteral",null);
          try {
            SPropertyOperations.set(intConst,"value","" + (Integer.parseInt(pattern)));
          }
 catch (          NumberFormatException e) {
            SPropertyOperations.set(intConst,"value","" + (0));
          }
          return intConst;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          if (strictly) {
            return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a7.matcher(pattern).matches();
          }
 else {
            return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0h.matcher(pattern).matches();
          }
        }
        public String getDescriptionText(        String pattern){
          return "integer literal";
        }
        public String getMatchingText(        String pattern){
          return (StringUtils.isEmpty(pattern) ? "0" : pattern);
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlBoolLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.<INodeSubstituteAction>fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.query.structure.MqlBoolLiteral",null);
          SPropertyOperations.set(result,"value","" + (true));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "true literal";
        }
        public String getMatchingText(        String pattern){
          return "true";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlBoolLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.<INodeSubstituteAction>fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.query.structure.MqlBoolLiteral",null);
          SPropertyOperations.set(result,"value","" + (false));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "false literal";
        }
        public String getMatchingText(        String pattern){
          return "false";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
