{
  List<Integer> adjNodesOrder=ListSequence.<Integer>fromList(new ArrayList<Integer>());
  for (  Edge edge : ListSequence.<Edge>fromList(node.getEdges(dir))) {
    ListSequence.<Integer>fromList(adjNodesOrder).addElement(MapSequence.<Node,Integer>fromMap(nodesOrder).get(edge.getTarget(dir)));
  }
  if (ListSequence.<Integer>fromList(adjNodesOrder).count() == 0) {
    return -1;
  }
  adjNodesOrder=ListSequence.<Integer>fromList(adjNodesOrder).sort(new ISelector<Integer,Comparable<?>>(){
    public Comparable<?> select(    Integer it){
      return it;
    }
  }
,true).toListSequence();
  if (ListSequence.<Integer>fromList(adjNodesOrder).count() % 2 == 1) {
    return ListSequence.<Integer>fromList(adjNodesOrder).getElement(ListSequence.<Integer>fromList(adjNodesOrder).count() / 2);
  }
 else {
    return (ListSequence.<Integer>fromList(adjNodesOrder).getElement(ListSequence.<Integer>fromList(adjNodesOrder).count() / 2) + ListSequence.<Integer>fromList(adjNodesOrder).getElement(ListSequence.<Integer>fromList(adjNodesOrder).count() / 2 - 1)) / 2;
  }
}
