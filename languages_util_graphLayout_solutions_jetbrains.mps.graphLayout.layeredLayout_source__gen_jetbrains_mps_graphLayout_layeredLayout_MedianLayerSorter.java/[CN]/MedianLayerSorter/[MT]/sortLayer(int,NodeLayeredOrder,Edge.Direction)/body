{
  Graph graph=nodeLayeredOrder.getGraph();
  List<Node> fixedLayer;
  if (dir == Edge.Direction.FRONT) {
    fixedLayer=nodeLayeredOrder.getOrder(layerToSort + 1);
  }
 else {
    fixedLayer=nodeLayeredOrder.getOrder(layerToSort - 1);
  }
  Map<Node,Integer> nodesOrder=MapSequence.fromMap(new HashMap<Node,Integer>());
  for (int i=0; i < ListSequence.fromList(fixedLayer).count(); i++) {
    MapSequence.fromMap(nodesOrder).put(ListSequence.fromList(fixedLayer).getElement(i),i);
  }
  final Map<Node,Integer> median=MapSequence.fromMap(new HashMap<Node,Integer>());
  final Map<Node,Double> barycenter=MapSequence.fromMap(new HashMap<Node,Double>());
  List<Node> layerOrder=nodeLayeredOrder.getOrder(layerToSort);
  for (  Node node : ListSequence.fromList(layerOrder)) {
    MapSequence.fromMap(median).put(node,computeMedian(node,nodesOrder,dir));
    MapSequence.fromMap(barycenter).put(node,computeBarycenter(node,nodesOrder,dir));
  }
  layerOrder=ListSequence.fromList(layerOrder).sort(new Comparator<Node>(){
    public int compare(    Node a,    Node b){
      int ma=MapSequence.fromMap(median).get(a);
      int mb=MapSequence.fromMap(median).get(b);
      if (ma != mb) {
        return ma - mb;
      }
      double d=MapSequence.fromMap(barycenter).get(a) - MapSequence.fromMap(barycenter).get(b);
      if (d < 0) {
        return -1;
      }
      if (d > 0) {
        return 1;
      }
      return 0;
    }
  }
,true).toListSequence();
  nodeLayeredOrder.setLayer(layerOrder,layerToSort);
}
