{
  final StringBuilder error_22042010=new StringBuilder();
  try {
    String paramsReport=DefaultPackagingLanguageApplication_Configuration.this.getStateObject().myJavaRunParameters.getErrorReport();
    if (paramsReport != null) {
      error_22042010.append(paramsReport).append("\n");
    }
    final SNode node;
    String errorReport;
{
      Tuples._2<SNode,String> _tmp_xsfjxy_e0a0b0b=DefaultPackagingLanguageApplication_Configuration.this.checkNode();
      node=_tmp_xsfjxy_e0a0b0b._0();
      errorReport=_tmp_xsfjxy_e0a0b0b._1();
    }
    if (node == null) {
      throw new RuntimeConfigurationException(errorReport);
    }
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        if (StringUtils.isEmpty(DefaultPackagingLanguageApplication_Configuration.this.getStateObject().configurationId)) {
          error_22042010.append("configuration to run is not selected").append("\n");
        }
 else         if (DefaultPackagingLanguageApplication_Configuration.this.getConfiguration(node) == null) {
          error_22042010.append("can not find configuration with id " + DefaultPackagingLanguageApplication_Configuration.this.getStateObject().configurationId).append("\n");
        }
      }
    }
);
  }
 catch (  Throwable t_22042010) {
    if (t_22042010 instanceof RuntimeConfigurationException) {
      throw (RuntimeConfigurationException)t_22042010;
    }
    if (t_22042010 instanceof RuntimeConfigurationError) {
      throw (RuntimeConfigurationError)t_22042010;
    }
    Logger.getLogger(DefaultPackagingLanguageApplication_Configuration.class).error(t_22042010);
  }
  if (error_22042010.length() != 0) {
    throw new RuntimeConfigurationException(error_22042010.toString());
  }
}
