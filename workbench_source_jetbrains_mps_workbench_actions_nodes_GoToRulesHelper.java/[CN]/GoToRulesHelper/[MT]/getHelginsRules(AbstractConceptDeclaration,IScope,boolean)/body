{
  Language language=SModelUtil_new.getDeclaringLanguage(conceptDeclaration,scope);
  List<SNode> rules=new ArrayList<SNode>();
  if (language != null && LanguageAspect.TYPESYSTEM.get(language) != null) {
    SModelDescriptor helginsDescriptor=LanguageAspect.TYPESYSTEM.get(language);
    if (helginsDescriptor != null) {
      Condition<SNode> cond=new Condition<SNode>(){
        public boolean met(        SNode n){
          INodeAdapter object=BaseAdapter.fromNode(n);
          if (!(object instanceof AbstractRule))           return false;
          AbstractRule rule=(AbstractRule)object;
          if (exactConcept) {
            return maybeApplicableExact(conceptDeclaration,rule.getApplicableNode(),scope);
          }
 else {
            return maybeApplicable_new(conceptDeclaration,rule.getApplicableNode(),scope);
          }
        }
      }
;
      rules.addAll(helginsDescriptor.getSModel().getRoots(cond));
    }
  }
  return rules;
}
