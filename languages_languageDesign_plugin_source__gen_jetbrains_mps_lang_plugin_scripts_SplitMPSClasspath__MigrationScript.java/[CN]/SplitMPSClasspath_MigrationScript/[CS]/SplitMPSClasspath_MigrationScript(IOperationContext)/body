{
  super("Split MPS.Classpath Stubs");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "MPS.Classpath -> MPS.Core / .Editor / .Workbench";
    }
    public String getAdditionalInfo(){
      return "MPS.Classpath -> MPS.Core / .Editor / .Workbench";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return it.getTargetSModelReference().getSModelFqName().toString().contains("MPS.Classpath");
        }
      }
).isNotEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      MpsClasspathRefUtil.updateReferencesToMpsClasspath(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
