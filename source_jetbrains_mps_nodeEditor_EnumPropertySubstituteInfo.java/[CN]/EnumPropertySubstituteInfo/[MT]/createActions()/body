{
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  EnumerationDataTypeDeclaration dataType=(EnumerationDataTypeDeclaration)myPropertyDeclaration.getDataType();
  Iterator<EnumerationMemberDeclaration> iterator=dataType.members();
  while (iterator.hasNext()) {
    EnumerationMemberDeclaration memberDeclaration=iterator.next();
    actions.add(new AbstractNodeSubstituteAction(memberDeclaration,myNode){
      public String getMatchingText(      String pattern){
        return ((EnumerationMemberDeclaration)getParameterNode()).getExternalValue();
      }
      public SNode doSubstitute(      String pattern){
        getSourceNode().setProperty(myPropertyDeclaration.getName(),((EnumerationMemberDeclaration)getParameterNode()).getInternalValue());
        return null;
      }
    }
);
  }
  return (List)actions;
}
