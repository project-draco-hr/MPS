{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      if (_context.getInEditor()) {
        return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SNodeOperations.cast(SNodeOperations.getParent(_context.getParameterNode()),"jetbrains.mps.baseLanguage.structure.Classifier"),_context.getEnclosingNode());
      }
      if (_context.getVisible()) {
        return ConstructorDeclaration_Behavior.call_getPresentationInContext_983626226385657373(_context.getParameterNode(),_context.getEnclosingNode());
      }
 else {
        return SPropertyOperations.getString(_context.getParameterNode(),"name");
      }
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new VisibleClassConstructorsScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),operationContext.getScope());
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","1213104844200");
    }
  }
);
  return result;
}
