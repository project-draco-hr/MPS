{
  if (myProject == null || myProject.isDisposed()) {
    return new TextTreeNode("Empty");
  }
  MPSTreeNode root=new TextTreeNode("Empty");
  ProjectTreeNode projectRoot=new ProjectTreeNode(myProject);
  setRootVisible(false);
  List<MPSTreeNode> moduleNodes=new ArrayList<MPSTreeNode>();
  for (  Class<? extends SModule> cl : new Class[]{Solution.class,Language.class,DevKit.class}) {
    for (    SModule module : myProject.getProjectModules(cl)) {
      moduleNodes.add(ProjectModuleTreeNode.createFor(myProject,module,false));
    }
  }
  ModulesNamespaceTreeBuilder builder=new ModulesNamespaceTreeBuilder(myProject);
  for (  MPSTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(projectRoot);
  myModulesPoolTreeNode=new ProjectModulesPoolTreeNode(myProject);
  root.add(projectRoot);
  root.add(myModulesPoolTreeNode);
  if (!IMakeService.INSTANCE.isSessionActive()) {
    final TransientModelsProvider tmc=myProject.getComponent(TransientModelsProvider.class);
    if (tmc != null) {
      for (      TransientModelsModule module : tmc.getModules()) {
        root.add(new TransientModelsTreeNode(myProject,module));
      }
    }
  }
 else {
    if (myMakeNotificationListener.compareAndSet(null,new Stub(){
      @Override public void sessionClosed(      MakeNotification notification){
        rebuildLater();
        IMakeService.INSTANCE.get().removeListener(this);
        myMakeNotificationListener.set(null);
      }
    }
)) {
      IMakeService.INSTANCE.get().addListener(myMakeNotificationListener.get());
    }
  }
  myProjectTreeNode=projectRoot;
  return root;
}
