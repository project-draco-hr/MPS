{
  return (Iterable<SNode>)((SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(type),"jetbrains.mps.baseLanguage.collections.structure.MapType") ? Sequence.fromIterable(containerDeclarations(model,type)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode ccd){
      SNode cmc=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator",null);
      SLinkOperations.setTarget(cmc,"containerDeclaration",ccd,false);
      List<SNode> tvds=SLinkOperations.getTargets(ccd,"typeVariableDeclaration",true);
      List<SNode> ctParams=ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ccd,"containerType",true),"jetbrains.mps.baseLanguage.collections.structure.MapType"),"keyType",true),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ccd,"containerType",true),"jetbrains.mps.baseLanguage.collections.structure.MapType"),"valueType",true));
      List<SNode> typeParams=ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(SNodeOperations.as(type,"jetbrains.mps.baseLanguage.collections.structure.MapType"),"keyType",true),SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.collections.structure.MapType"),"valueType",true));
      with_ctParams:       for (int idx=0; idx < ListSequence.fromList(ctParams).count(); idx++) {
        SNode c=ListSequence.fromList(ctParams).getElement(idx);
        if (SNodeOperations.isInstanceOf(c,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
          SNode pt=ListSequence.fromList(typeParams).getElement((ListSequence.fromList(tvds).count() > 1 ? ListSequence.fromList(tvds).indexOf(SLinkOperations.getTarget(SNodeOperations.cast(c,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false)) : idx));
switch (idx) {
case 0:
            SLinkOperations.setTarget(cmc,"keyType",SNodeOperations.copyNode(pt),true);
          break;
case 1:
        SLinkOperations.setTarget(cmc,"valueType",SNodeOperations.copyNode(pt),true);
      break;
default :
    break with_ctParams;
}
}
}
return cmc;
}
}
) : Sequence.fromIterable(containerDeclarations(model,type)).select(new ISelector<SNode,SNode>(){
public SNode select(SNode ccd){
SNode ccc=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator",null);
SLinkOperations.setTarget(ccc,"containerDeclaration",ccd,false);
if (ListSequence.fromList(SLinkOperations.getTargets(ccd,"typeVariableDeclaration",true)).count() == 1) {
SLinkOperations.setTarget(ccc,"elementType",SNodeOperations.as(ListSequence.fromList(SNodeOperations.getChildren(type)).first(),"jetbrains.mps.baseLanguage.structure.Type"),true);
}
return ccc;
}
}
)));
}
