{
  try {
    String globalConfigPath=WorkbenchPathManager.getUserHome() + File.separator + ".gitconfig";
    if (!(new File(globalConfigPath).exists())) {
      Messages.showErrorDialog(((Project)MapSequence.fromMap(_params).get("project")),"Git config (~/.gitconfig) file is not present","No Git Config");
      return;
    }
    boolean globalAlreadyInstalled=false;
    Scanner sc=new Scanner(new File(globalConfigPath));
    while (sc.hasNextLine()) {
      String line=sc.nextLine();
      if (line.matches("\\s*\\[merge\\s+\"mps\"\\]\\s*")) {
        globalAlreadyInstalled=true;
        break;
      }
    }
    sc.close();
    if (!(globalAlreadyInstalled)) {
      RandomAccessFile raf=null;
      try {
        raf=new RandomAccessFile(globalConfigPath,"rw");
        raf.seek(raf.length());
        raf.write(("\n" + "[merge \"mps\"]\n" + "\tname = MPS merge driver\n"+ "\tdriver = " + MergeDriverMain.getCommandLine() + " %O %A %B %L\n").getBytes("utf-8"));
        raf.close();
      }
 catch (      IOException e) {
        if (log.isErrorEnabled()) {
          log.error("Writing gitconfig file failed",e);
        }
        Messages.showErrorDialog(((Project)MapSequence.fromMap(_params).get("project")),"Writing gitconfig file failed because of IOException:" + e.getMessage(),"Writing .gitconfig Failed");
        return;
      }
 finally {
        if (raf != null) {
          try {
            raf.close();
          }
 catch (          IOException e) {
            if (log.isErrorEnabled()) {
              log.error("Exception during close",e);
            }
          }
        }
      }
    }
    String globalMessage=(globalAlreadyInstalled ? "Global merge driver is already installed." : "Global merge driver have been successfully installed.");
    Iterable<VcsRoot> rootsToUpdate=Sequence.fromIterable(Sequence.fromArray(((Project)MapSequence.fromMap(_params).get("project")).getComponent(ProjectLevelVcsManager.class).getAllVcsRoots())).where(new IWhereFilter<VcsRoot>(){
      public boolean accept(      VcsRoot root){
        return "Git".equals(root.vcs.getName()) && !(InstallCustomMergeDriver_Action.this.isAlreadyInstalled(root.path,_params));
      }
    }
);
    if (Sequence.fromIterable(rootsToUpdate).isEmpty()) {
      Messages.showInfoMessage(((Project)MapSequence.fromMap(_params).get("project")),globalMessage,"Merge Driver");
      return;
    }
    String repositories=NameUtil.formatNumericalString(Sequence.fromIterable(rootsToUpdate).count(),"Git repository");
    int answer=Messages.showYesNoDialog(((Project)MapSequence.fromMap(_params).get("project")),globalMessage + "\nDo you want to to update MPS files attributes in the following Git repositories?\n" + StringUtils.join(Sequence.fromIterable(rootsToUpdate).<String>select(new ISelector<VcsRoot,String>(){
      public String select(      VcsRoot r){
        return r.path.getPath();
      }
    }
).toListSequence(),"\n"),"Update Git " + ((Sequence.fromIterable(rootsToUpdate).count() == 1 ? "Repository" : "Repositories")),null);
    if (answer == 0) {
      Sequence.fromIterable(rootsToUpdate).visitAll(new IVisitor<VcsRoot>(){
        public void visit(        VcsRoot root){
          InstallCustomMergeDriver_Action.this.install(root.path,_params);
        }
      }
);
      Messages.showInfoMessage(((Project)MapSequence.fromMap(_params).get("project")),"Successfully updated attributes for " + repositories,"Attributes");
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "InstallCustomMergeDriver",t);
    }
  }
}
