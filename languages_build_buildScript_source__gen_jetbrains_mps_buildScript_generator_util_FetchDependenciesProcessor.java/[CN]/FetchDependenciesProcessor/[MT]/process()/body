{
  VisibleArtifacts artifacts=new VisibleArtifacts(project,genContext);
  artifacts.collect();
  for (  SNode dep : SNodeOperations.getDescendants(project,"jetbrains.mps.buildScript.structure.BuildExternalDependency",false,new String[]{})) {
    Iterable<SNode> dependencyTargets=BuildExternalDependency_Behavior.call_getDependencyTargets_841011766566205095(dep,artifacts);
    if (dependencyTargets == null) {
      continue;
    }
    for (    SNode node : dependencyTargets) {
      if (SNodeOperations.getModel(node).isTransient()) {
        genContext.showErrorMessage(dep,"returned dependency in transient model: " + node.getDebugText());
        continue;
      }
      if (!(artifacts.contains(node))) {
        genContext.showErrorMessage(dep,"returned node which is not available in dependencies: " + node.getDebugText());
        continue;
      }
      requiredArtifacts.add(node);
    }
  }
  UnpackHelper helper=new UnpackHelper(artifacts,requiredArtifacts,genContext);
  helper.eval();
  List<SNode> statements=helper.getStatements();
  if (!(ListSequence.fromList(statements).isEmpty())) {
    SNode wf=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.buildScript.structure.BuildCustomWorkflow",null);
    SNode taskpart=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.build.workflow.structure.BwfTaskPart",null);
    SLinkOperations.setTarget(taskpart,"task",SLinkOperations.getTarget(new FetchDependenciesProcessor.QuotationClass_t02zqv_a0a0c0h0a().createNode(),"target",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(wf,"parts",true)).addElement(taskpart);
    SNode stask=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.build.workflow.structure.BwfSubTask",null);
    ListSequence.fromList(SLinkOperations.getTargets(taskpart,"subTasks",true)).addElement(stask);
    ListSequence.fromList(SLinkOperations.getTargets(stask,"statements",true)).addSequence(ListSequence.fromList(statements));
    ListSequence.fromList(SLinkOperations.getTargets(project,"aspects",true)).addElement(wf);
  }
}
