{
  ThreadReference thread=event.thread();
  LOG.assertLog(thread.isSuspended());
  preprocessEvent(suspendContext,thread);
  SuspendContextCommand suspendCommand=new SuspendContextCommand(suspendContext){
    @Override protected void action() throws Exception {
    }
  }
;
  final SuspendManager suspendManager=mySuspendManager;
  SuspendContext pausedContext=getSuspendManager().getPausedContext();
  if (pausedContext != null && pausedContext.isEvaluating()) {
    suspendManager.voteResume(suspendContext);
    return;
  }
  final LocatableEventRequestor requestor=(LocatableEventRequestor)getRequestManager().findRequestor(event.request());
  boolean resumePreferred=requestor != null && EventRequest.SUSPEND_NONE == requestor.getSuspendPolicy();
  boolean requestHit=false;
  try {
    requestHit=(requestor != null) && requestor.processLocatableEvent(suspendCommand,event);
  }
 catch (  Throwable t) {
    LOG.error(t);
  }
  if (requestHit && requestor instanceof LineBreakpoint) {
    myBreakpointManager.processBreakpointHit((LineBreakpoint)requestor);
  }
  if (!requestHit || resumePreferred) {
    suspendManager.voteResume(suspendContext);
  }
 else {
    suspendManager.voteSuspend(suspendContext);
  }
}
