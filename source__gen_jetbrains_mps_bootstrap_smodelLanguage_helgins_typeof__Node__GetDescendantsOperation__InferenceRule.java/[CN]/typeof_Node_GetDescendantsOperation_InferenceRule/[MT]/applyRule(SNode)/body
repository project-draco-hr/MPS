{
  RulesFunctions.fun_check_isAppliedTo_SLinkAccessOrNode(argument);
{
    SNode parm;
    Iterator<SNode> parm_iterator=SLinkOperations.getTargets(argument,"parameter",true).iterator();
    while (true) {
      if (!(parm_iterator.hasNext())) {
        break;
      }
      parm=parm_iterator.next();
      if (!((Boolean)Queries.CustomExpression_check_isApplicableOperationParameter(argument,parm))) {
        TypeChecker.getInstance().reportTypeError(parm,"not expected here");
      }
    }
  }
  TypeChecker.getInstance().getRuntimeSupport().givetype((SNode)Queries.CustomExpression_get_SNodeListType_forOperation_withOpeartionParameter_concept(argument),argument);
}
