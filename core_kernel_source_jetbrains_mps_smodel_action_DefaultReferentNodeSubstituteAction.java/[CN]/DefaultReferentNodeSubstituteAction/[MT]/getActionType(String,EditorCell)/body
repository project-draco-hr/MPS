{
  HashMap<SNode,SNode> mapping=new HashMap<SNode,SNode>();
  SModel auxModel=AuxilaryRuntimeModel.getDescriptor().getSModel();
  SNode sourceNodePeer=getSourceNode();
  SNode nodeCopyRoot=CopyUtil.copy(CollectionUtil.list(sourceNodePeer.getContainingRoot()),mapping).get(0);
  boolean wasLoading=auxModel.isLoading();
  auxModel.setLoading(true);
  try {
    if (!nodeCopyRoot.isRoot()) {
      auxModel.addRoot(nodeCopyRoot);
    }
    String role=SModelUtil_new.getGenuineLinkRole(myLinkDeclaration);
    SNode sourceNode=mapping.get(sourceNodePeer);
    SNode nodeToEquatePeer=sourceNodePeer;
    TypeChecker typeChecker=TypeChecker.getInstance();
    while (nodeToEquatePeer != null && typeChecker.getTypeOf(nodeToEquatePeer) == null) {
      nodeToEquatePeer=nodeToEquatePeer.getParent();
    }
    if (nodeToEquatePeer == null) {
      return null;
    }
    SNode nodeToEquate=mapping.get(nodeToEquatePeer);
    SNode parent=nodeToEquate.getParent();
    if (parent == null) {
      return null;
    }
    sourceNode.setReferent(role,(SNode)getParameterObject());
    SNode type=TypeChecker.getInstance().getTypeOf(nodeToEquate);
    auxModel.removeRoot(nodeCopyRoot);
    return type;
  }
  finally {
    auxModel.setLoading(wasLoading);
  }
}
