{
  this.addNodeById("1230052406554");
  this.addNodeById("1230052406581");
{
    SNode c_ref=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
    SLinkOperations.setTarget(c_ref,"variableDeclaration",SNodeOperations.cast(this.getNodeById("1230052406612"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"),false);
    SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById("1230052406630"),"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression"),c_ref);
    ExtractMethodRefactoringParameters params=new ExtractMethodRefactoringParameters(ListSequence.<SNode>fromArray(SNodeOperations.cast(this.getNodeById("1230052406572"),"jetbrains.mps.baseLanguage.structure.ReturnStatement")));
    ListSequence.fromList(params.getParameters()).getElement(0).setSelected(false);
    MethodParameter p2=ListSequence.fromList(params.getParameters()).getElement(1);
    MethodParameter p1=ListSequence.fromList(params.getParameters()).getElement(2);
    ListSequence.fromList(params.getParameters()).setElement(1,p1);
    ListSequence.fromList(params.getParameters()).setElement(2,p2);
    p1.setName("p1");
    p2.setName("p2");
    params.setName("foo");
    ExtractMethodRefactoring ref=ExtractMethodFabric.createRefactoring(params);
    ref.doRefactor();
    Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.<SNode>fromArray(SNodeOperations.cast(this.getNodeById("1230052406555"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.<SNode>fromArray(SNodeOperations.cast(this.getNodeById("1230052406582"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
  }
}
