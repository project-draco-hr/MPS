{
  if (isEmpty()) {
    return new String[]{"empty"};
  }
  String[] result=new String[myEquals.size() + mySubTypes.size() + mySuperTypes.size()+ myStrongSubTypes.size()+ myStrongSuperTypes.size()];
  int i=0;
  for (  SNode wrapper : myEquals) {
    result[i++]="* == " + wrapper.toString();
  }
  for (  SNode wrapper : mySubTypes) {
    result[i++]=wrapper.toString() + " < *";
  }
  for (  SNode wrapper : myStrongSubTypes) {
    result[i++]=wrapper.toString() + " << *";
  }
  for (  SNode wrapper : mySuperTypes) {
    result[i++]="* < " + wrapper.toString();
  }
  for (  SNode wrapper : myStrongSuperTypes) {
    result[i++]="* << " + wrapper.toString();
  }
  for (  SNode wrapper : myComparableTypes) {
    result[i++]=" ~ " + wrapper.toString();
  }
  for (  SNode wrapper : myStrongComparableTypes) {
    result[i++]=" *~ " + wrapper.toString();
  }
  return result;
}
