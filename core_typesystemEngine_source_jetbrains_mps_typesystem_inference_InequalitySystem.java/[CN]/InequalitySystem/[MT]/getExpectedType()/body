{
  if (isEmpty())   return null;
  SubTypingManagerNew subtypingManager=(SubTypingManagerNew)TypeChecker.getInstance().getSubtypingManager();
  List<SNode> superTypes=new LinkedList<SNode>();
  expandAll(myState.getEquations());
  superTypes.addAll(mySuperTypes);
  superTypes.addAll(myStrongSuperTypes);
  if (superTypes.isEmpty()) {
    superTypes.addAll(myComparableTypes);
    superTypes.addAll(myStrongComparableTypes);
  }
  return SubtypingUtil.createLeastCommonSupertype(superTypes,myState.getTypeCheckingContext());
}
