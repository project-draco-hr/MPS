{
  SNode node=(SNode)cellContext.get(PropertyCellContext.EDITED_NODE);
  SNode parent=node.getParent();
  if (parent == null) {
    return Collections.emptyList();
  }
  String replacementConceptFqName=getReplacementConceptName();
  IOperationContext context=editorContext.getOperationContext();
  SNode replacementConcept=SModelUtil.findConceptDeclaration(replacementConceptFqName,context.getScope());
  List<SubstituteAction> actions=ModelActions.createChildNodeSubstituteActions(parent,node,replacementConcept,this,context);
  List<SubstituteAction> result=new ArrayList<SubstituteAction>(actions.size());
  for (  SubstituteAction a : actions) {
    result.add(new NodeSubstituteActionWrapper(a){
      @Override public SNode substitute(      @Nullable EditorContext context,      String pattern){
        String selectedCellId=null;
        if (context != null) {
          selectedCellId=context.getSelectedCell().getCellId();
        }
        SNode result=super.substitute(context,pattern);
        if (selectedCellId != null) {
          EditorCell toSelect=context.getEditorComponent().findCellWithId(result,selectedCellId);
          if (toSelect != null) {
            context.select(result,selectedCellId);
            if (context.getSelectedCell() instanceof EditorCell_Label) {
              context.getSelectedCell().end();
            }
          }
        }
        return result;
      }
    }
);
  }
  return result;
}
