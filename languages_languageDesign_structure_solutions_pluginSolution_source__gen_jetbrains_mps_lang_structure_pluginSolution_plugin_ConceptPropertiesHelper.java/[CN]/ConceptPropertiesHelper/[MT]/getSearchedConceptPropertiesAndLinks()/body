{
  Set<SNode> result=SetSequence.fromSet(new HashSet<SNode>());
  for (  Language module : SetSequence.fromSet(getProjectLanguages())) {
    for (    SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
      if (SModelStereotype.isStubModelStereotype(modelDescriptor.getStereotype())) {
        continue;
      }
      SModel model=modelDescriptor.getSModel();
      if (!(LanguageAspect.STRUCTURE.is(model))) {
        continue;
      }
      for (      SNode abstractConceptDeclaration : ListSequence.fromList(SModelOperations.getNodes(model,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
        List<SNode> conceptPropertyDeclaration=SLinkOperations.getTargets(abstractConceptDeclaration,"conceptPropertyDeclaration",true);
        SetSequence.fromSet(result).addSequence(ListSequence.fromList(conceptPropertyDeclaration).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return (AttributeOperations.getAttribute(it,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation"))) == null);
          }
        }
));
        SetSequence.fromSet(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(abstractConceptDeclaration,"conceptLinkDeclaration",true)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration") && (AttributeOperations.getAttribute(it,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation"))) == null);
          }
        }
));
      }
    }
  }
  return result;
}
