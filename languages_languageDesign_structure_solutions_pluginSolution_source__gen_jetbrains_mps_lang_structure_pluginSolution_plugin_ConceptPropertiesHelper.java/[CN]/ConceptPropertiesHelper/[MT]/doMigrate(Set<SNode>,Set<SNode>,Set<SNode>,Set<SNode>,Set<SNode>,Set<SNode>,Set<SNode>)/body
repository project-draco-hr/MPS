{
  Map<SNode,SNode> cplToMethodMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode conceptPropertyDecl : SetSequence.fromSet(conceptPropertyDeclarations)) {
    SNode method=replaceConceptPropertyDeclarations(conceptPropertyDecl,conceptPropertyUsages);
    if (method == null) {
      LOG.error("ERROR. Concept property declaration" + SPropertyOperations.getString(conceptPropertyDecl,"name") + " in "+ SNodeOperations.getAncestor(conceptPropertyDecl,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false)+ " was not migrated. Its instances and accesses won't be migrated too");
      continue;
    }
    SNode migratedToMethodAnnotation=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation",null);
    SNode deprecatedNodeAnnotation=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation",null);
    MapSequence.fromMap(cplToMethodMap).put(conceptPropertyDecl,method);
    SLinkOperations.setTarget(migratedToMethodAnnotation,"method",method,false);
    AttributeOperations.setAttribute(SNodeOperations.cast(conceptPropertyDecl,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")),deprecatedNodeAnnotation);
    AttributeOperations.setAttribute(SNodeOperations.cast(conceptPropertyDecl,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation")),migratedToMethodAnnotation);
  }
  Map<SNode,List<SNode>> completedConceptsByDeclaration=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  for (  SNode conceptLinkDecl : SetSequence.fromSet(conceptLinkDeclarations)) {
    SNode method=replaceConceptLinkDeclaration(SNodeOperations.cast(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"),conceptLinkUsages);
    if (method == null) {
      LOG.error("ERROR. Concept link declaration" + SPropertyOperations.getString(conceptLinkDecl,"name") + " in "+ SNodeOperations.getAncestor(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false)+ " was not migrated. Its instances and accesses won't be migrated too");
      continue;
    }
    SNode migratedToMethodAnnotation=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation",null);
    SNode deprecatedNodeAnnotation=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation",null);
    MapSequence.fromMap(cplToMethodMap).put(SNodeOperations.cast(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"),method);
    MapSequence.fromMap(completedConceptsByDeclaration).put(SNodeOperations.cast(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"),ListSequence.fromList(new ArrayList<SNode>()));
    SLinkOperations.setTarget(migratedToMethodAnnotation,"method",method,false);
    AttributeOperations.setAttribute(SNodeOperations.cast(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")),deprecatedNodeAnnotation);
    AttributeOperations.setAttribute(SNodeOperations.cast(conceptLinkDecl,"jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation")),migratedToMethodAnnotation);
  }
  for (  SNode conceptProperty : SetSequence.fromSet(conceptPropertyUsages)) {
    replaceConceptPropertyUsages(conceptProperty,getMethodFromMapOrFromAnnotation(cplToMethodMap,SLinkOperations.getTarget(conceptProperty,"conceptPropertyDeclaration",false)));
  }
  for (  SNode access : SetSequence.fromSet(accessUsages)) {
    replaceAccessUsages(access,getMethodFromMapOrFromAnnotation(cplToMethodMap,SLinkOperations.getTarget(access,"conceptProperty",false)));
  }
  for (  SNode cell : SetSequence.fromSet(cellUsages)) {
    replaceCellUsages(cell,getMethodFromMapOrFromAnnotation(cplToMethodMap,SLinkOperations.getTarget(cell,"relationDeclaration",false)));
  }
  for (  SNode conceptLink : SetSequence.fromSet(conceptLinkUsages)) {
    replaceConceptLinkUsages(conceptLink,getMethodFromMapOrFromAnnotation(cplToMethodMap,SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false)),completedConceptsByDeclaration);
  }
  for (  SNode access : SetSequence.fromSet(accessLinkUsages)) {
    replaceAccessLinkUsages(access,getMethodFromMapOrFromAnnotation(cplToMethodMap,SLinkOperations.getTarget(access,"conceptLinkDeclaration",false)));
  }
}
