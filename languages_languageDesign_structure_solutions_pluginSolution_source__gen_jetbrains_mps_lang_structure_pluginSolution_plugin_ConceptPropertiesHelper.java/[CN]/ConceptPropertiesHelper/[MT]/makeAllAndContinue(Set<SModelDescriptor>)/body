{
  if (SetSequence.fromSet(sourceModels).isEmpty()) {
    return;
  }
  final List<org.jetbrains.mps.openapi.model.SModel> descriptors=new ArrayList<org.jetbrains.mps.openapi.model.SModel>();
  SModelRepository.getInstance().saveAll();
  Iterable<SModelDescriptor> allModels=SModelRepository.getInstance().getModelDescriptors();
  ListSequence.fromList(descriptors).addSequence(Sequence.fromIterable(allModels).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return it.isGeneratable() && LanguageAspect.BEHAVIOR.is(it);
    }
  }
));
  ListSequence.fromList(descriptors).addSequence(SetSequence.fromSet(sourceModels).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return it != null && !(it.getSModel().isDisposed()) && it.isGeneratable();
    }
  }
));
  final IOperationContext operationContext=new ProjectOperationContext(project);
  new Thread(){
    public void run(){
      MakeSession sess=new MakeSession(operationContext);
      if (IMakeService.INSTANCE.get().openNewSession(sess)) {
        Future<IResult> result=IMakeService.INSTANCE.get().make(sess,new ModelsToResources(operationContext,descriptors).resources(false));
        try {
          result.get();
        }
 catch (        InterruptedException e) {
        }
catch (        CancellationException ignore) {
        }
catch (        ExecutionException e) {
          e.printStackTrace();
        }
 finally {
          step++;
          migrateNextStep();
        }
      }
    }
  }
.start();
}
