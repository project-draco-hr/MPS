{
  final Set<SNode> conceptPropertiesAndLinks=SetSequence.fromSet(new HashSet<SNode>());
  Set<SNode> usages=FindUsagesManager.getInstance().findUsages(nodesToFind(),SearchType.INSTANCES,scope,new EmptyProgressMonitor());
  final Set<SearchResult<SNode>> allUsages=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  for (  SNode usage : SetSequence.fromSet(usages)) {
    if (SNodeOperations.isInstanceOf(usage,"jetbrains.mps.lang.structure.structure.ConceptProperty") && SNodeOperations.isInstanceOf(usage,"jetbrains.mps.lang.structure.structure.ConceptLink")) {
      SetSequence.fromSet(conceptPropertiesAndLinks).addElement(usage);
      SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(usage,""));
    }
  }
  Set<SNode> searchedNodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(searchedNodes).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptProperty"));
  SetSequence.fromSet(searchedNodes).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptLink"));
  final SearchResults searchResults=new SearchResults<SNode>(((Set<SNode>)searchedNodes),SetSequence.fromSet(allUsages).toListSequence());
  showRefactoringView(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      for (      SNode conceptProperty : SetSequence.fromSet(conceptPropertiesAndLinks)) {
        SNodeOperations.deleteNode(conceptProperty);
      }
    }
  }
,searchResults);
}
