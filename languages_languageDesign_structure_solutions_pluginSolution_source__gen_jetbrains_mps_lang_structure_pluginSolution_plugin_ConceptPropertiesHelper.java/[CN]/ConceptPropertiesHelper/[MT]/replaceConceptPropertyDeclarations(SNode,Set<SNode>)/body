{
  SNode conceptNode=SNodeOperations.getAncestor(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false);
  if (SConceptOperations.isExactly(((SNode)conceptNode),"jetbrains.mps.lang.core.structure.BaseConcept") && (SPropertyOperations.getString(conceptPropertyDeclaration,"name").equals("abstract") || SPropertyOperations.getString(conceptPropertyDeclaration,"name").equals("final") || SPropertyOperations.getString(conceptPropertyDeclaration,"name").equals("shortDescription")|| SPropertyOperations.getString(conceptPropertyDeclaration,"name").equals("alias"))) {
    return null;
  }
  boolean valueIsDefault=true;
  SNode sameConceptProperty=null;
  for (  SNode conceptProperty : ListSequence.fromList(SLinkOperations.getTargets(conceptNode,"conceptProperty",true))) {
    if (SLinkOperations.getTarget(conceptProperty,"conceptPropertyDeclaration",false) == conceptPropertyDeclaration) {
      valueIsDefault=false;
      sameConceptProperty=conceptProperty;
      break;
    }
  }
  String name;
  SNode returnType;
  SNode returnStatement;
  if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.IntegerConceptPropertyDeclaration")) {
    returnType=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a9a9().createNode();
    name="get" + NameUtil.capitalize(SPropertyOperations.getString(conceptPropertyDeclaration,"name"));
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
    if (!(valueIsDefault)) {
      SPropertyOperations.set(result,"value","" + (SPropertyOperations.getInteger(SNodeOperations.cast(sameConceptProperty,"jetbrains.mps.lang.structure.structure.IntegerConceptProperty"),"value")));
    }
 else {
      SPropertyOperations.set(result,"value","" + (0));
    }
    returnStatement=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a4a9a9().createNode(result);
  }
 else   if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.StringConceptPropertyDeclaration")) {
    returnType=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0j0j().createNode();
    name="get" + NameUtil.capitalize(SPropertyOperations.getString(conceptPropertyDeclaration,"name"));
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral",null);
    if (!(valueIsDefault)) {
      SPropertyOperations.set(result,"value",SPropertyOperations.getString(SNodeOperations.cast(sameConceptProperty,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"value"));
    }
 else {
      SPropertyOperations.set(result,"value",null);
    }
    returnStatement=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a4a0j0j().createNode(result);
  }
 else   if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration")) {
    returnType=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a1j0j().createNode();
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
    SPropertyOperations.set(result,"value","" + (!(valueIsDefault)));
    returnStatement=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a3a1j0j().createNode(result);
    name="get" + NameUtil.capitalize(SPropertyOperations.getString(conceptPropertyDeclaration,"name"));
  }
 else {
    return null;
  }
  SNode method=createMethod(name,true,null,returnType);
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(returnStatement);
  if (!(valueIsDefault)) {
    SetSequence.fromSet(conceptProperties).removeElement(sameConceptProperty);
  }
  if (!(addMethodToBehavior(conceptNode,method))) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration") && !(SPropertyOperations.getBoolean(conceptPropertyDeclaration,"inheritable")) && !(valueIsDefault)) {
    createBooleanMethodForChilds(conceptNode,conceptPropertyDeclaration,method);
  }
  return method;
}
