{
  SNode conceptNode=SNodeOperations.getAncestor(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false);
  String conceptName=SPropertyOperations.getString(conceptPropertyDeclaration,"name");
  if (SConceptOperations.isExactly(((SNode)conceptNode),"jetbrains.mps.lang.core.structure.BaseConcept") && (eq_azpnkk_a0a0a0a0c0y_0(conceptName,abstractName) || eq_azpnkk_a0a0a0a0c0y(conceptName,finalName) || eq_azpnkk_a0a0a0a2a42(conceptName,shortDescriptionName)|| eq_azpnkk_a0a0a0c0y(conceptName,aliasName)|| eq_azpnkk_a0a0a2a42(conceptName,dontSubstituteName))) {
    return null;
  }
  boolean valueIsDefault=true;
  SNode sameConceptProperty=null;
  for (  SNode conceptProperty : ListSequence.fromList(SLinkOperations.getTargets(conceptNode,"conceptProperty",true))) {
    if (SLinkOperations.getTarget(conceptProperty,"conceptPropertyDeclaration",false) == conceptPropertyDeclaration) {
      valueIsDefault=false;
      sameConceptProperty=conceptProperty;
      break;
    }
  }
  String name;
  SNode returnType;
  SNode returnStatement;
  if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.IntegerConceptPropertyDeclaration")) {
    returnType=_quotation_createNode_azpnkk_a0a0k0y();
    name="get" + NameUtil.capitalize(conceptName);
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
    if (!(valueIsDefault)) {
      SPropertyOperations.set(result,"value","" + (SPropertyOperations.getInteger(SNodeOperations.cast(sameConceptProperty,"jetbrains.mps.lang.structure.structure.IntegerConceptProperty"),"value")));
    }
 else {
      SPropertyOperations.set(result,"value","" + (0));
    }
    returnStatement=_quotation_createNode_azpnkk_a0e0k0y(result);
  }
 else   if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.StringConceptPropertyDeclaration")) {
    returnType=_quotation_createNode_azpnkk_a0a0a01a42();
    name="get" + NameUtil.capitalize(conceptName);
    SNode result;
    if (!(valueIsDefault)) {
      result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral",null);
      SPropertyOperations.set(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.StringLiteral"),"value",SPropertyOperations.getString(SNodeOperations.cast(sameConceptProperty,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"value"));
    }
 else {
      result=_quotation_createNode_azpnkk_a0a0a3a0k0y();
    }
    returnStatement=_quotation_createNode_azpnkk_a0e0a01a42(result);
  }
 else   if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration")) {
    returnType=_quotation_createNode_azpnkk_a0a0b01a42();
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
    SPropertyOperations.set(result,"value","" + (!(valueIsDefault)));
    returnStatement=_quotation_createNode_azpnkk_a0d0b01a42(result);
    name=conceptName;
  }
 else {
    return null;
  }
  SNode method=createMethod(name,true,null,returnType);
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(returnStatement);
  if (!(valueIsDefault)) {
    SetSequence.fromSet(conceptProperties).removeElement(sameConceptProperty);
  }
  if (!(addMethodToBehavior(conceptNode,method))) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration,"jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration") && !(SPropertyOperations.getBoolean(conceptPropertyDeclaration,"inheritable")) && !(valueIsDefault)) {
    createBooleanMethodForChilds(conceptNode,conceptPropertyDeclaration,method);
  }
  return method;
}
