{
  final Set<SNode> conceptUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> accessUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SearchResult<SNode>> allUsages=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  SNode aliasDecl=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0d0b().createNode(),"operation",true),"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"),"conceptProperty",false);
  final Set<SNode> searchedNodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(searchedNodes).addElement(aliasDecl);
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(searchedNodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  for (  SReference usage : SetSequence.fromSet(usages)) {
    SNode node=usage.getSourceNode();
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.StringConceptProperty")) {
      SetSequence.fromSet(conceptUsages).addElement(SNodeOperations.getAncestor(SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"jetbrains.mps.lang.structure.structure.ConceptDeclaration",false,false));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess")) {
      SetSequence.fromSet(accessUsages).addElement(SNodeOperations.cast(node,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"));
    }
    SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(node,""));
  }
  RefactoringAccess.getInstance().showRefactoringView(ideaProject,new RefactoringViewAction(){
    public void performAction(    RefactoringViewItem refactoringViewItem){
      for (      SNode concept : SetSequence.fromSet(conceptUsages)) {
        SPropertyOperations.set(concept,"conceptAlias",SConceptPropertyOperations.getString(concept,"alias"));
      }
      for (      SNode node : SetSequence.fromSet(accessUsages)) {
        SNodeOperations.replaceWithAnother(node,SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0a1a0a0b0a9a1().createNode(),"operation",true));
      }
      refactoringViewItem.close();
    }
  }
,new SearchResults<SNode>(searchedNodes,SetSequence.fromSet(allUsages).toListSequence()),false,"remove alias");
}
