{
  final Set<SNode> conceptUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> accessUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> cellUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SearchResult<SNode>> allUsages=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  SNode aliasDecl=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0e0c().createNode(),"operation",true),"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"),"conceptProperty",false);
  final Set<SNode> searchedNodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(searchedNodes).addElement(aliasDecl);
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(searchedNodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  for (  SReference usage : SetSequence.fromSet(usages)) {
    SNode source=usage.getSourceNode();
    if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.structure.structure.StringConceptProperty")) {
      SetSequence.fromSet(conceptUsages).addElement(SNodeOperations.getAncestor(SNodeOperations.cast(source,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"jetbrains.mps.lang.structure.structure.ConceptDeclaration",false,false));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess") && needToMigrate(source)) {
      SetSequence.fromSet(accessUsages).addElement(SNodeOperations.getParent(source));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty")) {
      SetSequence.fromSet(cellUsages).addElement(SNodeOperations.cast(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty"));
    }
    SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(source,""));
  }
  final SearchResults searchResults=new SearchResults<SNode>(searchedNodes,SetSequence.fromSet(allUsages).toListSequence());
  RefactoringAccess.getInstance().showRefactoringView(ideaProject,new RefactoringViewAction(){
    public void performAction(    final RefactoringViewItem refactoringViewItem){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          for (          SNode concept : SetSequence.fromSet(conceptUsages)) {
            SPropertyOperations.set(concept,"conceptAlias",SConceptPropertyOperations.getString(concept,"alias"));
            SNode alias=ListSequence.fromList(SLinkOperations.getTargets(concept,"conceptProperty",true)).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty") && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"conceptPropertyDeclaration",false),"name").equals("alias");
              }
            }
);
            SNodeOperations.deleteNode(alias);
          }
          for (          SNode node : SetSequence.fromSet(accessUsages)) {
            replaceAccessUsages(node);
          }
          for (          SNode node : SetSequence.fromSet(cellUsages)) {
            replaceCellUsages(node);
          }
          refactoringViewItem.close();
          makeAll(searchResults);
        }
      }
);
    }
    private void replaceCellUsages(    SNode node){
      SNode modelComponent=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a1a0b0a21a2().createNode(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)","2900100530630621651"));
      SLinkOperations.setTarget(modelComponent,"renderingCondition",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"renderingCondition",true)),true);
      SLinkOperations.setTarget(modelComponent,"menuDescriptor",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"menuDescriptor",true)),true);
      SLinkOperations.setTarget(modelComponent,"cellBackgroundFunction",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"cellBackgroundFunction",true)),true);
      SLinkOperations.setTarget(modelComponent,"focusPolicyApplicable",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"focusPolicyApplicable",true)),true);
      SLinkOperations.setTarget(modelComponent,"actionMap",SLinkOperations.getTarget(node,"actionMap",false),false);
      SLinkOperations.setTarget(modelComponent,"keyMap",SLinkOperations.getTarget(node,"keyMap",false),false);
      SLinkOperations.setTarget(modelComponent,"styleClass",SLinkOperations.getTarget(node,"styleClass",false),false);
{
        Iterator<SNode> nodeChild_it=ListSequence.fromList(SLinkOperations.getTargets(modelComponent,"styleItem",true)).iterator();
        SNode nodeChild_var;
        while (nodeChild_it.hasNext()) {
          nodeChild_var=nodeChild_it.next();
          ListSequence.fromList(SLinkOperations.getTargets(modelComponent,"styleItem",true)).addElement(SNodeOperations.copyNode(nodeChild_var));
        }
      }
      SPropertyOperations.set(modelComponent,"attractsFocus","" + (SPropertyOperations.getInteger_def(node,"attractsFocus","0")));
      SNodeOperations.replaceWithAnother(node,modelComponent);
    }
    private void replaceAccessUsages(    SNode node){
      SNode parent=SNodeOperations.getParent(node);
      SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
      if (SNodeUtil.isInstanceOfAbstractConceptDeclaration(operand)) {
        SNodeOperations.replaceWithAnother(node,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a2a2a0b0a21a2().createNode(operand));
      }
 else {
        SNodeOperations.replaceWithAnother(node,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a0c0c0a1a0m0c().createNode(operand));
      }
      if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation")) {
        SNode setOperation=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation");
        SNodeOperations.replaceWithAnother(setOperation,SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0b0b0d0c0a1a0m0c().createNode(SLinkOperations.getTarget(setOperation,"value",true)),"operation",true));
      }
    }
  }
,searchResults,false,"remove alias");
}
