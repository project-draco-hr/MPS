{
  if (overridenMethod == null) {
    return;
  }
  SNode conceptNode=SNodeOperations.getAncestor(conceptLink,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",false,false);
  List<SNode> completed=MapSequence.fromMap(completedConceptsByLinkDeclaration).get(SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false));
  if (ListSequence.fromList(completed).contains(conceptNode)) {
    return;
  }
  Set<SNode> allLinks=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode link : ListSequence.fromList(SLinkOperations.getTargets(conceptNode,"conceptLink",true))) {
    if (SLinkOperations.getTarget(link,"conceptLinkDeclaration",false) == SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false)) {
      SetSequence.fromSet(allLinks).addElement(link);
    }
  }
  SNode method=createMethod(SPropertyOperations.getString(overridenMethod,"name"),false,overridenMethod,SNodeOperations.copyNode(SLinkOperations.getTarget(overridenMethod,"returnType",true)));
  SNode declaration=_quotation_createNode_azpnkk_a0h0l(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false),"targetType",false),SLinkOperations.getTarget(SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false),"targetType",false));
  SNode reference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
  SLinkOperations.setTarget(reference,"variableDeclaration",SLinkOperations.getTarget(declaration,"localVariableDeclaration",true),false);
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(declaration);
  for (  SNode link : SetSequence.fromSet(allLinks)) {
    SNode refExpression=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeRefExpression",null);
    SLinkOperations.setTarget(refExpression,"referentNode",SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(link,"jetbrains.mps.lang.structure.structure.ReferenceConceptLink"),"target",false),"jetbrains.mps.lang.core.structure.INamedConcept"),false);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(_quotation_createNode_azpnkk_a0a2a11a11(reference,refExpression));
  }
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(_quotation_createNode_azpnkk_a0a21a11(reference));
  ListSequence.fromList(MapSequence.fromMap(completedConceptsByLinkDeclaration).get(SLinkOperations.getTarget(conceptLink,"conceptLinkDeclaration",false))).addElement(conceptNode);
  addMethodToBehavior(conceptNode,method);
}
