{
  final Set<SearchResult<SNode>> allUsages=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  final Set<SNode> searchedNodes=getSearchedNodes();
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(searchedNodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  boolean usageIsFound;
  for (  SReference usage : SetSequence.fromSet(usages)) {
    usageIsFound=true;
    SNode source=usage.getSourceNode();
    if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.structure.structure.ConceptProperty")) {
      SetSequence.fromSet(conceptUsages).addElement(SNodeOperations.getAncestor(SNodeOperations.cast(source,"jetbrains.mps.lang.structure.structure.ConceptProperty"),"jetbrains.mps.lang.structure.structure.ConceptDeclaration",false,false));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess") && needToMigrate(source)) {
      SetSequence.fromSet(accessUsages).addElement(SNodeOperations.cast(source,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty")) {
      SetSequence.fromSet(cellUsages).addElement(SNodeOperations.cast(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty"));
    }
 else {
      usageIsFound=false;
    }
    if (usageIsFound) {
      SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(source,""));
    }
  }
  final SearchResults searchResults=new SearchResults<SNode>(searchedNodes,SetSequence.fromSet(allUsages).toListSequence());
  final Set<SModelDescriptor> sourceModels=new HashSet<SModelDescriptor>();
  for (  SModel model : ((Set<SModel>)searchResults.getAffectedModels())) {
    sourceModels.add(model.getModelDescriptor());
  }
  RefactoringAccess.getInstance().showRefactoringView(ideaProject,new RefactoringViewAction(){
    public void performAction(    final RefactoringViewItem refactoringViewItem){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          doMigrate(cellUsages,accessUsages,conceptUsages);
          refactoringViewItem.close();
          makeAll(sourceModels);
          step=2;
          migrate();
        }
      }
);
    }
  }
,searchResults,false,"remove alias");
}
