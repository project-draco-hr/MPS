{
  final Set<SNode> conceptUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> accessUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> cellUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SearchResult<SNode>> allUsages=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  final Set<SNode> searchedNodes=getSearchedNodes();
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(searchedNodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  boolean usageIsFound;
  for (  SReference usage : SetSequence.fromSet(usages)) {
    usageIsFound=true;
    SNode source=usage.getSourceNode();
    if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.structure.structure.ConceptProperty")) {
      SetSequence.fromSet(conceptUsages).addElement(SNodeOperations.getAncestor(SNodeOperations.cast(source,"jetbrains.mps.lang.structure.structure.ConceptProperty"),"jetbrains.mps.lang.structure.structure.ConceptDeclaration",false,false));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess") && needToMigrate(source)) {
      SetSequence.fromSet(accessUsages).addElement(SNodeOperations.cast(source,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"));
    }
 else     if (SNodeOperations.isInstanceOf(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty")) {
      SetSequence.fromSet(cellUsages).addElement(SNodeOperations.cast(source,"jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty"));
    }
 else {
      usageIsFound=false;
    }
    if (usageIsFound) {
      SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(source,""));
    }
  }
  final SearchResults searchResults=new SearchResults<SNode>(searchedNodes,SetSequence.fromSet(allUsages).toListSequence());
  final Set<SModelDescriptor> sourceModels=new HashSet<SModelDescriptor>();
  for (  SModel model : ((Set<SModel>)searchResults.getAffectedModels())) {
    sourceModels.add(model.getModelDescriptor());
  }
  RefactoringAccess.getInstance().showRefactoringView(ideaProject,new RefactoringViewAction(){
    public void performAction(    final RefactoringViewItem refactoringViewItem){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          doMigrate(cellUsages,accessUsages,conceptUsages);
          refactoringViewItem.close();
          makeAll(sourceModels);
        }
      }
);
    }
    private void doMigrate(    final Set<SNode> cellUsages,    final Set<SNode> accessUsages,    final Set<SNode> conceptUsages){
      for (      SNode concept : SetSequence.fromSet(conceptUsages)) {
        replaceConceptUsages(concept);
      }
      for (      SNode node : SetSequence.fromSet(accessUsages)) {
        replaceAccessUsages(node);
      }
      for (      SNode node : SetSequence.fromSet(cellUsages)) {
        replaceCellUsages(node);
      }
    }
    private void replaceConceptUsages(    SNode concept){
      SPropertyOperations.set(concept,"conceptAlias",SConceptPropertyOperations.getString(concept,"alias"));
      SPropertyOperations.set(concept,"shortDescription",SConceptPropertyOperations.getString(concept,"shortDescription"));
      SPropertyOperations.set(concept,"abstract","" + (SConceptPropertyOperations.getBoolean(concept,"abstract")));
      SPropertyOperations.set(concept,"final","" + (SConceptPropertyOperations.getBoolean(concept,"final")));
    }
    private void replaceAccessUsages(    SNode accessOperation){
      SNode source=SNodeOperations.cast(SNodeOperations.getParent(accessOperation),"jetbrains.mps.baseLanguage.structure.DotExpression");
      SNode operand=SLinkOperations.getTarget(source,"operand",true);
      SNode parent=SNodeOperations.getParent(source);
      String accessName=SPropertyOperations.getString(SLinkOperations.getTarget(accessOperation,"conceptProperty",false),"name");
      if (eq_azpnkk_a0e0d0a1a0p0b(accessName,"alias")) {
        migrateAccess(source,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a4a3a0b0a51a1().createNode(operand),new ConceptPropertiesHelper.QuotationClass_azpnkk_a2a0a4a3a0b0a51a1().createNode(operand));
      }
 else       if (eq_azpnkk_a0a4a3a0b0a51a1(accessName,"shortDescription")) {
        migrateAccess(source,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a0e0d0a1a0p0b().createNode(operand),new ConceptPropertiesHelper.QuotationClass_azpnkk_a2a0a0e0d0a1a0p0b().createNode(operand));
      }
 else       if (eq_azpnkk_a0b4a3a0b0a51a1(accessName,"final")) {
        migrateAccess(source,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a1e0d0a1a0p0b().createNode(operand),new ConceptPropertiesHelper.QuotationClass_azpnkk_a2a0a1e0d0a1a0p0b().createNode(operand));
      }
 else       if (eq_azpnkk_a0c4a3a0b0a51a1(accessName,"abstract")) {
        migrateAccess(source,new ConceptPropertiesHelper.QuotationClass_azpnkk_a1a0a2e0d0a1a0p0b().createNode(operand),new ConceptPropertiesHelper.QuotationClass_azpnkk_a2a0a2e0d0a1a0p0b().createNode(operand));
      }
      if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation")) {
        SNode setOperation=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(source,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation");
        SNodeOperations.replaceWithAnother(setOperation,SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0b0b0h0d0a1a0p0b().createNode(SLinkOperations.getTarget(setOperation,"value",true)),"operation",true));
      }
    }
    private void migrateAccess(    SNode source,    SNode conceptExpression,    SNode expression){
      SNode operand=SLinkOperations.getTarget(source,"operand",true);
      SNode type=TypeChecker.getInstance().getTypeOf(operand);
      if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SConceptType") || (SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SNodeType") && SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
        SNodeOperations.replaceWithAnother(source,conceptExpression);
      }
 else {
        SNodeOperations.replaceWithAnother(source,expression);
      }
    }
    private void replaceCellUsages(    SNode cell){
      SNode modelComponent;
      if (eq_azpnkk_a0b0f0a1a0p0b(SPropertyOperations.getString(SLinkOperations.getTarget(cell,"relationDeclaration",false),"name"),"alias")) {
        modelComponent=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a1a5a0b0a51a1().createNode(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)","2900100530630621651"));
      }
 else       if (eq_azpnkk_a0a1a5a0b0a51a1(SPropertyOperations.getString(SLinkOperations.getTarget(cell,"relationDeclaration",false),"name"),"shortDescription")) {
        modelComponent=new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0b0f0a1a0p0b().createNode(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)","6639471181490591356"));
      }
 else {
        return;
      }
      SLinkOperations.setTarget(modelComponent,"renderingCondition",SNodeOperations.copyNode(SLinkOperations.getTarget(cell,"renderingCondition",true)),true);
      SLinkOperations.setTarget(modelComponent,"menuDescriptor",SNodeOperations.copyNode(SLinkOperations.getTarget(cell,"menuDescriptor",true)),true);
      SLinkOperations.setTarget(modelComponent,"cellBackgroundFunction",SNodeOperations.copyNode(SLinkOperations.getTarget(cell,"cellBackgroundFunction",true)),true);
      SLinkOperations.setTarget(modelComponent,"focusPolicyApplicable",SNodeOperations.copyNode(SLinkOperations.getTarget(cell,"focusPolicyApplicable",true)),true);
      SLinkOperations.setTarget(modelComponent,"actionMap",SLinkOperations.getTarget(cell,"actionMap",false),false);
      SLinkOperations.setTarget(modelComponent,"keyMap",SLinkOperations.getTarget(cell,"keyMap",false),false);
      SLinkOperations.setTarget(modelComponent,"styleClass",SLinkOperations.getTarget(cell,"styleClass",false),false);
{
        Iterator<SNode> nodeChild_it=ListSequence.fromList(SLinkOperations.getTargets(modelComponent,"styleItem",true)).iterator();
        SNode nodeChild_var;
        while (nodeChild_it.hasNext()) {
          nodeChild_var=nodeChild_it.next();
          ListSequence.fromList(SLinkOperations.getTargets(modelComponent,"styleItem",true)).addElement(SNodeOperations.copyNode(nodeChild_var));
        }
      }
      SPropertyOperations.set(modelComponent,"attractsFocus","" + (SPropertyOperations.getInteger_def(cell,"attractsFocus","0")));
      SNodeOperations.replaceWithAnother(cell,modelComponent);
    }
  }
,searchResults,false,"remove alias");
}
