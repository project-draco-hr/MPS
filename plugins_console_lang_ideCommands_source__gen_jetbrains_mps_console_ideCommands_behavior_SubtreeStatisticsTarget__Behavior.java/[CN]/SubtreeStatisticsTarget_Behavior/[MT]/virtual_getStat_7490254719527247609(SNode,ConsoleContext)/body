{
  SNode targetNode=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getContainmentLink(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x1cf75b72b0b3962bL,0x1cf75b72b0b396c6L,"target")),"virtual_getTargetNode_3575813534625153815",new Object[]{});
  List<SNode> subNodes=SNodeOperations.getNodeDescendants(targetNode,null,false,new SAbstractConcept[]{});
  int references=0;
  int properties=0;
  for (  SNode node : subNodes) {
    references+=IterableUtil.asCollection(node.getReferences()).size();
    properties+=jetbrains.mps.util.SNodeOperations.getProperties(node).keySet().size();
  }
  List<Tuples._2<String,Integer>> result=ListSequence.fromList(new ArrayList<Tuples._2<String,Integer>>());
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Nodes",ListSequence.fromList(subNodes).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("References",references));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Properties",properties));
  return result;
}
