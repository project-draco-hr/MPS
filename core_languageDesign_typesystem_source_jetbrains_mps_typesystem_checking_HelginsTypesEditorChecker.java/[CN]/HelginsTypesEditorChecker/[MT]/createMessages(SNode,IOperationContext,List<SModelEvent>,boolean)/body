{
  Set<EditorMessage> messages=new LinkedHashSet<EditorMessage>();
  if (!wasCheckedOnce || hasNonPropertyDramaticalEvent(events)) {
    if (!TypeChecker.getInstance().isCheckedRoot(node.getContainingRoot())) {
      try {
        TypeChecker.getInstance().checkRoot(node.getContainingRoot());
      }
 catch (      Throwable t) {
        LOG.error(t);
        TypeChecker.getInstance().markAsChecked(node.getContainingRoot());
        return messages;
      }
    }
  }
  NodeTypesComponent typesComponent=getNodeTypesComponent(node);
  try {
    typesComponent.applyNonTypesystemRulesToRoot();
  }
 catch (  Throwable t) {
    LOG.error(t);
  }
  for (  Pair<SNode,IErrorReporter> errorNode : typesComponent.getNodesWithErrorStrings()) {
    MessageStatus status=errorNode.o2.getMessageStatus();
    Color color=getMessageColor(status);
    String errorString=errorNode.o2.reportError();
    DefaultEditorMessage message=new HighlighterMessage(errorNode.o1,status,errorNode.o2.getErrorTarget(),color,"Typesystem " + status.getPresentation() + ": "+ errorString,typesComponent);
    IntentionProvider intentionProvider=errorNode.o2.getIntentionProvider();
    message.putUserObject(ERROR_INFO,errorNode.o2);
    if (intentionProvider != null && intentionProvider.isExecutedImmediately()) {
      final QuickFix_Runtime intention=intentionProvider.getQuickFix();
      if (intention != null) {
        ThreadUtils.runInUIThreadNoWait(new Runnable(){
          public void run(){
            ModelAccess.instance().runWriteActionInCommand(new Runnable(){
              public void run(){
                intention.execute(node);
              }
            }
);
          }
        }
);
      }
    }
 else {
      message.setIntentionProvider(intentionProvider);
    }
    messages.add(message);
  }
  return messages;
}
