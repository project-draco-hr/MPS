{
  fireReadAccessPerformed();
synchronized (myParentsNamesLock) {
    InternAwareStringSet result=myParentsNamesMap.get(conceptFqName);
    if (result == null) {
      result=NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<InternAwareStringSet>(){
        public InternAwareStringSet compute(){
          AbstractConceptDeclaration declaration=SModelUtil_new.findConceptDeclaration(conceptFqName,GlobalScope.getInstance());
          if (declaration == null) {
            return EMPTY_INTERN_AWARE_STRING_SET;
          }
          InternAwareStringSet result=new InternAwareStringSet();
          if (declaration instanceof ConceptDeclaration) {
            ConceptDeclaration cd=(ConceptDeclaration)declaration;
            if (cd.getExtends() != null) {
              result.add(NameUtil.nodeFQName(cd.getExtends()));
            }
 else             if (!BaseConcept.concept.equals(NameUtil.nodeFQName(cd))) {
              result.add(BaseConcept.concept);
            }
            for (            InterfaceConceptReference icr : cd.getImplementses()) {
              result.add(NameUtil.nodeFQName(icr.getIntfc()));
            }
          }
          if (declaration instanceof InterfaceConceptDeclaration) {
            InterfaceConceptDeclaration icd=(InterfaceConceptDeclaration)declaration;
            for (            InterfaceConceptReference icr : icd.getExtendses()) {
              result.add(NameUtil.nodeFQName(icr.getIntfc()));
            }
          }
          return result;
        }
      }
);
      myParentsNamesMap.put(InternUtil.intern(conceptFqName),result);
    }
    return Collections.unmodifiableSet(result);
  }
}
