{
  fireReadAccessPerformed();
synchronized (myParentsNamesLock) {
    InternAwareStringSet result=myParentsNamesMap.get(conceptFqName);
    if (result == null) {
      result=NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<InternAwareStringSet>(){
        public InternAwareStringSet compute(){
          SNode declaration=SModelUtil.findConceptDeclaration(conceptFqName,GlobalScope.getInstance());
          if (declaration == null) {
            return EMPTY_INTERN_AWARE_STRING_SET;
          }
          InternAwareStringSet result=new InternAwareStringSet();
          if (SNodeUtil.isInstanceOfConceptDeclaration(declaration)) {
            SNode superConcept=SNodeUtil.getConceptDeclaration_Extends(declaration);
            if (superConcept != null) {
              result.add(NameUtil.nodeFQName(superConcept));
            }
 else             if (!SNodeUtil.CONCEPT_BaseConcept.equals(NameUtil.nodeFQName(declaration))) {
              result.add(SNodeUtil.CONCEPT_BaseConcept);
            }
            for (            SNode interfaceConcept : SNodeUtil.getConceptDeclaration_Implements(declaration)) {
              result.add(NameUtil.nodeFQName(interfaceConcept));
            }
          }
 else           if (SNodeUtil.isInstanceOfInterfaceConceptDeclaration(declaration)) {
            for (            SNode interfaceConcept : SNodeUtil.getInterfaceConceptDeclaration_Extends(declaration)) {
              result.add(NameUtil.nodeFQName(interfaceConcept));
            }
          }
          return result;
        }
      }
);
      myParentsNamesMap.put(InternUtil.intern(conceptFqName),result);
    }
    return Collections.unmodifiableSet(result);
  }
}
