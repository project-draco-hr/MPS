{
  SNode n=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer",true,false);
  List<SNode> indices=new ArrayList<SNode>();
  while (n != null) {
    do {
      SNode matchedNode_0=n;
{
        boolean matches_0=false;
{
          SNode matchingNode_0=n;
          if (matchingNode_0 != null) {
            matches_0=SModelUtil_new.isAssignableConcept(matchingNode_0.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.MatrixInitializer");
          }
        }
        if (matches_0) {
          ListSequence.fromList(indices).addElement(SLinkOperations.getTarget(matchedNode_0,"colIndex",true));
          ListSequence.fromList(indices).addElement(SLinkOperations.getTarget(matchedNode_0,"rowIndex",true));
          break;
        }
      }
{
        boolean matches_1=false;
{
          SNode matchingNode_1=n;
          if (matchingNode_1 != null) {
            matches_1=SModelUtil_new.isAssignableConcept(matchingNode_1.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.VectorInitializer");
          }
        }
        if (matches_1) {
          ListSequence.fromList(indices).addElement(SLinkOperations.getTarget(matchedNode_0,"rowIndex",true));
          break;
        }
      }
    }
 while (false);
    n=SNodeOperations.getAncestor(n,"jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer",false,false);
  }
  return indices;
}
