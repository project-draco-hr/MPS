{
  myModule.addModelToKeep(cpState.getCheckpointModel().getReference(),true);
  ModelCheckpoints checkpoints=getTransientCheckpoints(originalModel,cpState.getCheckpoint().getPlan());
  if (checkpoints == null) {
    myTransientCheckpoints.put(originalModel,new ModelCheckpoints(cpState));
  }
 else {
    CheckpointState replaced=checkpoints.updateAndDiscardOutdated(cpState);
    if (replaced == null) {
      return;
    }
    HashSet<SModelReference> forgottenCheckpoints=new HashSet<SModelReference>();
    ArrayDeque<CheckpointState> discarded=new ArrayDeque<>();
    discarded.add(replaced);
    do {
      CheckpointState next=discarded.removeFirst();
      SModelReference cpReference=next.getCheckpointModel().getReference();
      forgottenCheckpoints.add(cpReference);
      myModule.forgetModel(cpReference,true);
      for (      ModelCheckpoints mcp : myTransientCheckpoints.values()) {
        mcp.discardOutdated(forgottenCheckpoints,discarded);
      }
    }
 while (!discarded.isEmpty());
  }
}
