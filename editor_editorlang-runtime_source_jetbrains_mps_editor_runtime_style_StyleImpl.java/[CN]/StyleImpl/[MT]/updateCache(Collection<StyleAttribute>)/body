{
  if (attributes.isEmpty()) {
    return;
  }
  Set<StyleAttribute> changedAttributes=new StyleAttributeSet();
  for (  StyleAttribute<Object> attribute : attributes) {
    Collection<IntPair<Object>> parentValues=getParentStyle() == null ? null : getParentStyle().getAllCached(attribute);
    Collection<IntPair<Object>> currentValues=getAttribute(attribute).isEmpty() ? null : getAttribute(attribute).get().getAll();
    Collection<IntPair<Object>> oldValues=getCachedAttribute(attribute).isEmpty() ? null : getCachedAttribute(attribute).get().getAll();
    Iterator<IntPair<Object>> parentIterator=parentValues == null ? new EmptyIterator<IntPair<Object>>() : parentValues.iterator();
    Iterator<IntPair<Object>> currentIterator=currentValues == null ? new EmptyIterator<IntPair<Object>>() : currentValues.iterator();
    Iterator<IntPair<Object>> oldIterator=oldValues == null ? new EmptyIterator<IntPair<Object>>() : oldValues.iterator();
    IntPair<Object> parentValue;
    IntPair<Object> currentValue;
    IntPair<Object> oldValue;
    Object newValue;
    int newIndex;
    parentValue=parentIterator.hasNext() ? parentIterator.next() : null;
    currentValue=currentIterator.hasNext() ? currentIterator.next() : null;
    oldValue=oldIterator.hasNext() ? oldIterator.next() : null;
    while (parentValue != null || currentValue != null || oldValue != null) {
      if (oldValue != null && (parentValue == null || oldValue.index < parentValue.index) && (currentValue == null || oldValue.index < currentValue.index)) {
        newValue=null;
        newIndex=oldValue.index;
        oldValue=oldIterator.hasNext() ? oldIterator.next() : null;
      }
 else       if (parentValue != null && (currentValue == null || parentValue.index < currentValue.index) && (oldValue == null || parentValue.index < oldValue.index)) {
        newValue=attribute.combine(parentValue.value,null);
        newIndex=parentValue.index;
        parentValue=parentIterator.hasNext() ? parentIterator.next() : null;
      }
 else       if (currentValue != null && (parentValue == null || currentValue.index < parentValue.index) && (oldValue == null || currentValue.index < oldValue.index)) {
        newValue=attribute.combine(null,currentValue.value);
        newIndex=currentValue.index;
        currentValue=currentIterator.hasNext() ? currentIterator.next() : null;
      }
 else       if (parentValue != null && currentValue != null && oldValue != null && parentValue.index == oldValue.index && currentValue.index == oldValue.index) {
        newValue=attribute.combine(parentValue.value,currentValue.value);
        newIndex=currentValue.index;
        parentValue=parentIterator.hasNext() ? parentIterator.next() : null;
        currentValue=currentIterator.hasNext() ? currentIterator.next() : null;
        oldValue=oldIterator.hasNext() ? oldIterator.next() : null;
      }
 else       if (parentValue != null && currentValue != null && parentValue.index == currentValue.index) {
        newValue=attribute.combine(parentValue.value,currentValue.value);
        newIndex=currentValue.index;
        parentValue=parentIterator.hasNext() ? parentIterator.next() : null;
        currentValue=currentIterator.hasNext() ? currentIterator.next() : null;
      }
 else       if (parentValue != null && oldValue != null && parentValue.index == oldValue.index) {
        newValue=attribute.combine(parentValue.value,null);
        newIndex=parentValue.index;
        parentValue=parentIterator.hasNext() ? parentIterator.next() : null;
        oldValue=oldIterator.hasNext() ? oldIterator.next() : null;
      }
 else       if (currentValue != null && oldValue != null && currentValue.index == oldValue.index) {
        newValue=attribute.combine(null,currentValue.value);
        newIndex=currentValue.index;
        currentValue=currentIterator.hasNext() ? currentIterator.next() : null;
        oldValue=oldIterator.hasNext() ? oldIterator.next() : null;
      }
 else {
        throw new IllegalStateException();
      }
      if (!EqualUtil.equals(newValue,getCached(attribute,newIndex))) {
        changedAttributes.add(attribute);
      }
      setCached(attribute,newIndex,newValue);
    }
  }
  if (!changedAttributes.isEmpty()) {
    if (myChildren != null) {
      for (      Style style : myChildren) {
        style.setParent(this,changedAttributes);
      }
    }
    fireStyleChanged(new StyleChangeEvent(this,changedAttributes));
  }
}
