{
  AbstractConceptDeclaration concept=node.getConceptDeclarationAdapter();
  while (concept != null) {
    String fqName=NameUtil.nodeFQName(concept);
    String behaviorClass=behaviorClassByConceptFqName(fqName);
    try {
      Class cls=Class.forName(behaviorClass,true,ClassLoaderManager.getInstance().getClassLoader());
      List<Class> paramTypes=new ArrayList<Class>();
      paramTypes.add(SNode.class);
      paramTypes.addAll(parametersTypes);
      Method method=cls.getMethod(methodName,paramTypes.toArray(new Class[0]));
      List<Object> params=new ArrayList<Object>();
      params.add(node);
      params.addAll(Arrays.asList(parameters));
      if (params.size() != paramTypes.size()) {
        System.out.println("!!!!");
      }
      return (T)method.invoke(null,params.toArray());
    }
 catch (    ClassNotFoundException e) {
    }
catch (    NoSuchMethodException e) {
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
    concept=((ConceptDeclaration)concept).getExtends();
  }
  throw new RuntimeException("Can't invoke_old a method " + methodName + " on node "+ node);
}
