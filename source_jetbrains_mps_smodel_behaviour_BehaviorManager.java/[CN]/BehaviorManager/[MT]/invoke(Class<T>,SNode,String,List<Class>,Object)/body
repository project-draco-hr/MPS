{
  AbstractConceptDeclaration concept=node.getConceptDeclarationAdapter();
  Method method=null;
  List<Class> paramTypes=new ArrayList<Class>();
  paramTypes.add(SNode.class);
  paramTypes.addAll(parametersTypes);
  Class[] parameterTypeArray=paramTypes.toArray(new Class[0]);
  for (  AbstractConceptDeclaration conceptDeclaration : SModelUtil_new.getConceptHierarchy(concept)) {
    method=getMethod(conceptDeclaration,methodName,parameterTypeArray);
    if (method != null) {
      break;
    }
  }
  if (method != null) {
    List<Object> params=new ArrayList<Object>();
    params.add(node);
    params.addAll(Arrays.asList(parameters));
    if (params.size() != paramTypes.size()) {
      System.out.println("!!!!");
    }
    try {
      return (T)method.invoke(null,params.toArray());
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
  }
  throw new RuntimeException("Can't invoke_old a method " + methodName + " on node "+ node);
}
