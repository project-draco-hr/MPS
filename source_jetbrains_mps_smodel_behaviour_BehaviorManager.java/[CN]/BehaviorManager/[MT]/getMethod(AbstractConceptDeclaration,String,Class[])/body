{
  System.out.println("concept = " + concept);
  System.out.println("methodName = " + methodName);
  Language l=SModelUtil_new.getDeclaringLanguage(concept,GlobalScope.getInstance());
  Method method=null;
  String fqName=NameUtil.nodeFQName(concept);
  MethodInfo mi=new MethodInfo(fqName,methodName,parameterTypes);
  if (myMethods.containsKey(mi)) {
    Method method1=myMethods.get(mi);
    System.out.println("method1 = " + method1);
    return method1;
  }
  String behaviorClass=behaviorClassByConceptFqName(fqName);
  System.out.println("behaviorClass = " + behaviorClass);
  try {
    Class cls=Class.forName(behaviorClass,true,ClassLoaderManager.getInstance().getClassLoaderFor(l));
    System.out.println("cls = " + cls);
    for (    Class parameterType : parameterTypes) {
      System.out.println("parameterType = " + parameterType);
    }
    method=cls.getMethod(methodName,parameterTypes);
    System.out.println("method = " + method);
  }
 catch (  ClassNotFoundException e) {
  }
catch (  NoSuchMethodException e) {
  }
  if (method != null) {
    method.setAccessible(true);
    myMethods.put(mi,method);
  }
  return method;
}
