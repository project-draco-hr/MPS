{
  if (getNodes().size() != 0) {
    AbstractEditorComponent editor=editorContext.getNodeEditorComponent();
    SemanticNode node=getNodes().get(0);
    EditorCell cell=editor.findNodeCell(node);
    List<EditorCellKeyMapAction> actions=EditorUtil.getKeyMapActionsForEvent(cell,keyEvent,editorContext);
    if (actions != null) {
      if (actions.size() == 1) {
        actions.get(0).execute(keyEvent,editorContext);
        return true;
      }
 else {
        EditorUtil.showActionsMenu(actions,keyEvent,editorContext,cell);
        return true;
      }
    }
  }
  String actionType=myEditorComponent.getActionType(keyEvent,editorContext);
  if (actionType == null) {
    if (keyEvent.getKeyCode() == KeyEvent.VK_DELETE) {
      actionType=EditorCellAction.DELETE;
    }
  }
  if (actionType != null) {
    if (actionType == EditorCellAction.DELETE) {
      doDeleteNodes(editorContext);
      return true;
    }
    if (actionType == EditorCellAction.COPY) {
      myEditorComponent.executeComponentAction(EditorCellAction.COPY);
      return true;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_ESCAPE) {
    deactivate();
    return true;
  }
  if (!isSelectionKeystroke(keyEvent)) {
    if (keyEvent.getKeyCode() == KeyEvent.VK_UP || keyEvent.getKeyCode() == KeyEvent.VK_DOWN || keyEvent.getKeyCode() == KeyEvent.VK_LEFT || keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
      deactivate();
    }
    return true;
  }
  boolean next=(keyEvent.getKeyCode() == KeyEvent.VK_RIGHT || keyEvent.getKeyCode() == KeyEvent.VK_DOWN);
  SemanticNode newLastNode=null;
  Iterator<SemanticNode> iterator=myParentNode.children(myRole);
  while (iterator.hasNext()) {
    SemanticNode semanticNode=iterator.next();
    if (semanticNode == myLastNode) {
      if (next) {
        if (iterator.hasNext()) {
          newLastNode=iterator.next();
        }
 else {
          newLastNode=null;
        }
      }
      break;
    }
    newLastNode=semanticNode;
  }
  if (newLastNode != null) {
    myLastNode=newLastNode;
    myEditorComponent.repaint();
  }
  return true;
}
