{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractOperationParameter_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AllAttributeQualifier_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new AttributeAccess_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckedModuleQualifiedName_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new CheckedModuleReference_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new ChildAttributeQualifier_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new ChildNodeRefExpression_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptFqNameRefExpression_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptIdRefExpression_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptNodeType_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptRefExpression_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptReference_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptSwitchStatement_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_GetAllSubConcepts_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_GetAllSuperConcepts_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_GetDirectSuperConcepts_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_GetHierarchy_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_IsExactlyOperation_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_IsSubConceptOfOperation_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_IsSuperConceptOfOperation_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concept_NewInstance_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumMemberReference_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumMemberValueRefExpression_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumMember_NameOperation_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumMember_ValueOperation_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new EqualsStructurallyExpression_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExactConceptCase_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new IfInstanceOfStatement_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new IfInstanceOfVariable_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new LanguageId_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new LanguageRefExpression_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkAttributeQualifier_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkIdRefExpression_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkList_AddNewChildOperation_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkNameRefExpression_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkQualifier_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkRefExpression_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkRefQualifier_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new Link_SetNewChildOperation_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new Link_SetTargetOperation_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModelReferenceExpression_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_AddRootOperation_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_CreateNewNodeOperation_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_CreateNewRootNodeOperation_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_GetModule_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_NodesIncludingImportedOperation_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_NodesOperation_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_RootsIncludingImportedOperation_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new Model_RootsOperation_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModulePointer_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModuleRefExpression_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new ModuleReferenceExpression_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeAttributeQualifier_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodePointerExpression_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeRefExpression_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_ConceptMethodCall_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_CopyOperation_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_DeleteOperation_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_DetachOperation_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetAllSiblingsOperation_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetAncestorOperation_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetAncestorsOperation_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetChildrenAndChildAttributesOperation_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetChildrenOperation_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetConceptOperation_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetContainingLinkOperation_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetContainingRoleOperation_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetContainingRootOperation_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetDescendantsOperation_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetIndexInParentOperation_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetModelOperation_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingOperation_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingsOperation_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetParentOperation_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingOperation_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingsOperation_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetReferenceOperation_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetReferencesOperation_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetReferentSearchScopeOperation_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_GetSConceptOperation_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_InsertNewNextSiblingOperation_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_InsertNewPrevSiblingOperation_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_InsertNextSiblingOperation_Editor());
}
break;
case 83:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_InsertPrevSiblingOperation_Editor());
}
break;
case 84:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_IsAttributeOperation_Editor());
}
break;
case 85:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_IsInstanceOfOperation_Editor());
}
break;
case 86:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_IsNotNullOperation_Editor());
}
break;
case 87:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_IsNullOperation_Editor());
}
break;
case 88:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_IsRoleOperation_Editor());
}
break;
case 89:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_PointerOperation_Editor());
}
break;
case 90:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithAnotherOperation_Editor());
}
break;
case 91:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithNewOperation_Editor());
}
break;
case 92:
if (true) {
return Collections.<ConceptEditor>singletonList(new OfConceptOperation_Editor());
}
break;
case 93:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationParm_Concept_Editor());
}
break;
case 94:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationParm_ConceptList_Editor());
}
break;
case 95:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationParm_LinkQualifier_Editor());
}
break;
case 96:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationParm_StopConceptList_Editor());
}
break;
case 97:
if (true) {
return Collections.<ConceptEditor>singletonList(new PoundExpression_Editor());
}
break;
case 98:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyAttributeQualifier_Editor());
}
break;
case 99:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyIdRefExpression_Editor());
}
break;
case 100:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyNameRefExpression_Editor());
}
break;
case 101:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyQualifier_Editor());
}
break;
case 102:
if (true) {
return Collections.<ConceptEditor>singletonList(new Property_HasValue_Enum_Editor());
}
break;
case 103:
if (true) {
return Collections.<ConceptEditor>singletonList(new Property_HasValue_Simple_Editor());
}
break;
case 104:
if (true) {
return Collections.<ConceptEditor>singletonList(new Property_SetOperation_Editor());
}
break;
case 105:
if (true) {
return Collections.<ConceptEditor>singletonList(new RefConcept_Reference_Editor());
}
break;
case 106:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reference_GetLinkDeclarationOperation_Editor());
}
break;
case 107:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reference_GetResolveInfo_Editor());
}
break;
case 108:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reference_GetRoleOperation_Editor());
}
break;
case 109:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reference_GetTargetOperation_Editor());
}
break;
case 110:
if (true) {
return Collections.<ConceptEditor>singletonList(new SConceptOperation_Editor());
}
break;
case 111:
if (true) {
return Collections.<ConceptEditor>singletonList(new SConceptType_Editor());
}
break;
case 112:
if (true) {
return Collections.<ConceptEditor>singletonList(new SConceptTypeCastExpression_Editor());
}
break;
case 113:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnumMemberType_Editor());
}
break;
case 114:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnumOperationInvocation_Editor());
}
break;
case 115:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnum_MemberForNameOperation_Editor());
}
break;
case 116:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnum_MemberForValueOperation_Editor());
}
break;
case 117:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnum_MemberOperation_Editor());
}
break;
case 118:
if (true) {
return Collections.<ConceptEditor>singletonList(new SEnum_MembersOperation_Editor());
}
break;
case 119:
if (true) {
return Collections.<ConceptEditor>singletonList(new SLinkAccess_Editor());
}
break;
case 120:
if (true) {
return Collections.<ConceptEditor>singletonList(new SLinkImplicitSelect_Editor());
}
break;
case 121:
if (true) {
return Collections.<ConceptEditor>singletonList(new SLinkListAccess_Editor());
}
break;
case 122:
if (true) {
return Collections.<ConceptEditor>singletonList(new SModelType_Editor());
}
break;
case 123:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeCreator_Editor());
}
break;
case 124:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeListCreator_Editor());
}
break;
case 125:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeListType_Editor());
}
break;
case 126:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeOperation_Editor());
}
break;
case 127:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeType_Editor());
}
break;
case 128:
if (true) {
return Collections.<ConceptEditor>singletonList(new SNodeTypeCastExpression_Editor());
}
break;
case 129:
if (true) {
return Collections.<ConceptEditor>singletonList(new SPropertyAccess_Editor());
}
break;
case 130:
if (true) {
return Collections.<ConceptEditor>singletonList(new SReferenceType_Editor());
}
break;
case 131:
if (true) {
return Collections.<ConceptEditor>singletonList(new SearchScopeType_Editor());
}
break;
case 132:
if (true) {
return Collections.<ConceptEditor>singletonList(new SearchScope_ContainsOperation_Editor());
}
break;
case 133:
if (true) {
return Collections.<ConceptEditor>singletonList(new SemanticDowncastExpression_Editor());
}
break;
case 134:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubconceptCase_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
