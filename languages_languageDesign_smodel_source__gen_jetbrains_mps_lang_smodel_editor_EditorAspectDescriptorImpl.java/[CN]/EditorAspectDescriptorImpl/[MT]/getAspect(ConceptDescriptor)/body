{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbstractOperationParameter_Editor();
case 1:
  return new AllAttributeQualifier_Editor();
case 2:
return new AttributeAccess_Editor();
case 3:
return new CheckedModuleReference_Editor();
case 4:
return new ChildNodeRefExpression_Editor();
case 5:
return new ConceptFqNameRefExpression_Editor();
case 6:
return new ConceptPropertyNameRefExpression_Editor();
case 7:
return new ConceptProperty_SetOperation_Editor();
case 8:
return new ConceptRefExpression_Editor();
case 9:
return new ConceptReference_Editor();
case 10:
return new ConceptSwitchStatement_Editor();
case 11:
return new ConceptSwitchStatementCase_Editor();
case 12:
return new Concept_FindInstances_Editor();
case 13:
return new Concept_GetAllSubConcepts_Editor();
case 14:
return new Concept_GetAllSuperConcepts_Editor();
case 15:
return new Concept_GetDirectSuperConcepts_Editor();
case 16:
return new Concept_GetHierarchy_Editor();
case 17:
return new Concept_IsExactlyOperation_Editor();
case 18:
return new Concept_IsSubConceptOfOperation_Editor();
case 19:
return new Concept_IsSuperConceptOfOperation_Editor();
case 20:
return new Concept_NewInstance_Editor();
case 21:
return new EnumMemberReference_Editor();
case 22:
return new EnumMemberValueRefExpression_Editor();
case 23:
return new EnumMember_NameOperation_Editor();
case 24:
return new EnumMember_ValueOperation_Editor();
case 25:
return new EqualsStructurallyExpression_Editor();
case 26:
return new IfInstanceOfStatement_Editor();
case 27:
return new IfInstanceOfVariable_Editor();
case 28:
return new LinkAttributeQualifier_Editor();
case 29:
return new LinkList_AddAllOperation_Editor();
case 30:
return new LinkList_AddChildOperation_Editor();
case 31:
return new LinkList_AddNewChildOperation_Editor();
case 32:
return new LinkList_InsertChildFirstOperation_Editor();
case 33:
return new LinkList_RemoveAllChildrenOperation_Editor();
case 34:
return new LinkNameRefExpression_Editor();
case 35:
return new LinkQualifier_Editor();
case 36:
return new LinkRefExpression_Editor();
case 37:
return new LinkRefQualifier_Editor();
case 38:
return new Link_DeleteChildOperation_Editor();
case 39:
return new Link_SetNewChildOperation_Editor();
case 40:
return new Link_SetTargetOperation_Editor();
case 41:
return new ModelReferenceExpression_Editor();
case 42:
return new Model_AddRootOperation_Editor();
case 43:
return new Model_CreateNewNodeOperation_Editor();
case 44:
return new Model_CreateNewRootNodeOperation_Editor();
case 45:
return new Model_GetModule_Editor();
case 46:
return new Model_NodesIncludingImportedOperation_Editor();
case 47:
return new Model_NodesOperation_Editor();
case 48:
return new Model_RootsIncludingImportedOperation_Editor();
case 49:
return new Model_RootsOperation_Editor();
case 50:
return new ModuleReferenceExpression_Editor();
case 51:
return new NodeAttributeQualifier_Editor();
case 52:
return new NodePointerExpression_Editor();
case 53:
return new NodeRefExpression_Editor();
case 54:
return new Node_ConceptMethodCall_Editor();
case 55:
return new Node_CopyOperation_Editor();
case 56:
return new Node_DeleteOperation_Editor();
case 57:
return new Node_DetachOperation_Editor();
case 58:
return new Node_GetAllSiblingsOperation_Editor();
case 59:
return new Node_GetAncestorOperation_Editor();
case 60:
return new Node_GetAncestorsOperation_Editor();
case 61:
return new Node_GetChildrenOperation_Editor();
case 62:
return new Node_GetConceptOperation_Editor();
case 63:
return new Node_GetContainingLinkOperation_Editor();
case 64:
return new Node_GetContainingRoleOperation_Editor();
case 65:
return new Node_GetContainingRootOperation_Editor();
case 66:
return new Node_GetDescendantsOperation_Editor();
case 67:
return new Node_GetIndexInParentOperation_Editor();
case 68:
return new Node_GetModelOperation_Editor();
case 69:
return new Node_GetNextSiblingOperation_Editor();
case 70:
return new Node_GetNextSiblingsOperation_Editor();
case 71:
return new Node_GetParentOperation_Editor();
case 72:
return new Node_GetPrevSiblingOperation_Editor();
case 73:
return new Node_GetPrevSiblingsOperation_Editor();
case 74:
return new Node_GetReferenceOperation_Editor();
case 75:
return new Node_GetReferencesOperation_Editor();
case 76:
return new Node_GetReferentSearchScopeOperation_Editor();
case 77:
return new Node_InsertNewNextSiblingOperation_Editor();
case 78:
return new Node_InsertNewPrevSiblingOperation_Editor();
case 79:
return new Node_InsertNextSiblingOperation_Editor();
case 80:
return new Node_InsertPrevSiblingOperation_Editor();
case 81:
return new Node_IsAttributeOperation_Editor();
case 82:
return new Node_IsInstanceOfOperation_Editor();
case 83:
return new Node_IsNotNullOperation_Editor();
case 84:
return new Node_IsNullOperation_Editor();
case 85:
return new Node_IsRoleOperation_Editor();
case 86:
return new Node_ReplaceWithAnotherOperation_Editor();
case 87:
return new Node_ReplaceWithNewOperation_Editor();
case 88:
return new OperationParm_Concept_Editor();
case 89:
return new OperationParm_ConceptList_Editor();
case 90:
return new OperationParm_LinkQualifier_Editor();
case 91:
return new OperationParm_StopConceptList_Editor();
case 92:
return new PoundExpression_Editor();
case 93:
return new PropertyAttributeQualifier_Editor();
case 94:
return new PropertyNameRefExpression_Editor();
case 95:
return new PropertyQualifier_Editor();
case 96:
return new Property_HasValue_Enum_Editor();
case 97:
return new Property_HasValue_Simple_Editor();
case 98:
return new Property_SetOperation_Editor();
case 99:
return new ReadConceptReferenceExpression_Editor();
case 100:
return new RefConcept_Reference_Editor();
case 101:
return new Reference_GetLinkDeclarationOperation_Editor();
case 102:
return new Reference_GetResolveInfo_Editor();
case 103:
return new Reference_GetRoleOperation_Editor();
case 104:
return new Reference_GetTargetOperation_Editor();
case 105:
return new SConceptLinkAccess_Editor();
case 106:
return new SConceptPropertyAccess_Editor();
case 107:
return new SConceptType_Editor();
case 108:
return new SEnumMemberType_Editor();
case 109:
return new SEnumOperationInvocation_Editor();
case 110:
return new SEnum_MemberForNameOperation_Editor();
case 111:
return new SEnum_MemberForValueOperation_Editor();
case 112:
return new SEnum_MemberOperation_Editor();
case 113:
return new SEnum_MembersOperation_Editor();
case 114:
return new SLinkAccess_Editor();
case 115:
return new SLinkImplicitSelect_Editor();
case 116:
return new SLinkListAccess_Editor();
case 117:
return new SModelType_Editor();
case 118:
return new SNodeCreator_Editor();
case 119:
return new SNodeListCreator_Editor();
case 120:
return new SNodeListType_Editor();
case 121:
return new SNodeOperation_Editor();
case 122:
return new SNodeType_Editor();
case 123:
return new SNodeTypeCastExpression_Editor();
case 124:
return new SPropertyAccess_Editor();
case 125:
return new SReferenceType_Editor();
case 126:
return new SearchScopeType_Editor();
case 127:
return new SearchScope_ContainsOperation_Editor();
case 128:
return new SemanticDowncastExpression_Editor();
case 129:
return new StaticConceptMethodCall_Editor();
case 130:
return new _LinkAccessT_Editor();
default :
}
return null;
}
