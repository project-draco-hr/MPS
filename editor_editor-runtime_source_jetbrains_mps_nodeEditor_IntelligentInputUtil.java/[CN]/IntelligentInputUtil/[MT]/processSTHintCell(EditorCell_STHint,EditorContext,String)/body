{
  SubstituteInfo info=cell.getSubstituteInfo();
  String smallPattern=pattern.substring(0,pattern.length() - 1);
  String tail="" + pattern.charAt(pattern.length() - 1);
  EditorCell nextCell=CellTraversalUtil.getNextLeaf(cell);
  while (nextCell != null && !nextCell.isSelectable()) {
    nextCell=CellTraversalUtil.getNextLeaf(nextCell);
  }
  if (canCompleteSmallPatternImmediately(info,pattern,"") || canCompleteSmallPatternImmediately(info,trimLeft(pattern),"")) {
    if (!canCompleteSmallPatternImmediately(info,pattern,"")) {
      pattern=trimLeft(pattern);
    }
    info.getMatchingActions(pattern,true).get(0).substitute(editorContext,pattern);
    return true;
  }
 else   if (pattern.length() > 0 && (canCompleteSmallPatternImmediately(info,smallPattern,tail) || canCompleteSmallPatternImmediately(info,trimLeft(smallPattern),tail))) {
    if (!canCompleteSmallPatternImmediately(info,smallPattern,tail)) {
      smallPattern=trimLeft(smallPattern);
    }
    List<SubstituteAction> matchingActions=info.getMatchingActions(smallPattern,true);
    SubstituteAction item=matchingActions.get(0);
    SNode newNode=item.substitute(editorContext,smallPattern);
    if (newNode == null) {
      newNode=editorContext.getSelectedNode();
    }
    editorContext.flushEvents();
    EditorCell cellForNewNode;
    cellForNewNode=editorContext.getEditorComponent().findNodeCell(newNode);
    if (cellForNewNode != null) {
      EditorCell_Label target=null;
      EditorCell errorCell=CellFinderUtil.findChildByManyFinders(cellForNewNode,true,Finder.FIRST_ERROR);
      if (errorCell instanceof EditorCell_Label) {
        target=(EditorCell_Label)errorCell;
      }
      if (target != null) {
        target.changeText(tail);
        target.end();
        if (target.isErrorState()) {
          target.validate(true,false);
        }
        editorContext.flushEvents();
        if (editorContext.getSelectedCell() instanceof EditorCell_Label) {
          EditorCell_Label label=(EditorCell_Label)editorContext.getSelectedCell();
          label.end();
        }
      }
    }
    return true;
  }
 else   if (info.getMatchingActions(pattern,false).isEmpty() && info.getMatchingActions(trimLeft(pattern),false).isEmpty() && nextCell != null && nextCell.isErrorState() && nextCell instanceof EditorCell_Label && ((EditorCell_Label)nextCell).isEditable()) {
    SideTransformInfoUtil.removeTransformInfo(cell.getSNode());
    EditorCell_Label label=(EditorCell_Label)nextCell;
    label.changeText(pattern);
    label.end();
    editorContext.getEditorComponent().changeSelection(label);
    return true;
  }
 else   if (isInOneStepAmbigousPosition(info,smallPattern + tail)) {
    activateNodeSubstituteChooser(editorContext,cell,info);
  }
  return false;
}
