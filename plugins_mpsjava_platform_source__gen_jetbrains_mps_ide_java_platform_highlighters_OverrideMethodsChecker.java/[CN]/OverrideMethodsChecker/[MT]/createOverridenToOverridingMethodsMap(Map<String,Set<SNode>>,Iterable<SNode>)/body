{
  Map<SNode,Set<SNode>> result=MapSequence.fromMap(new HashMap<SNode,Set<SNode>>());
  for (  SNode derivedClassifier : Sequence.fromIterable(derivedClassifiers)) {
    for (    final SNode derivedClassifierMethod : Sequence.fromIterable(OverridingMethodsFinder.getInstanceMethods(derivedClassifier)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return OverridingMethodsFinder.canOverride(it);
      }
    }
)) {
      Set<SNode> similarMethods=MapSequence.fromMap(nameToMethodsMap).get(SPropertyOperations.getString(derivedClassifierMethod,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
      if (similarMethods == null) {
        continue;
      }
      SNode overridenMethod=SetSequence.fromSet(similarMethods).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ((boolean)(Boolean)BHReflection.invoke(it,SMethodTrimmedId.create("hasSameSignature",MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"hEwIB0z"),derivedClassifierMethod));
        }
      }
);
      if (overridenMethod != null) {
        Set<SNode> overridingMethods=OverridingMethodsFinder.safeGet(result,overridenMethod);
        SetSequence.fromSet(overridingMethods).addElement(derivedClassifierMethod);
        if (SetSequence.fromSet(overridingMethods).count() > MAX_MESSAGE_NUMBER) {
          SetSequence.fromSet(similarMethods).removeElement(overridenMethod);
          if (SetSequence.fromSet(similarMethods).isEmpty()) {
            MapSequence.fromMap(nameToMethodsMap).removeKey(SPropertyOperations.getString(derivedClassifierMethod,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
            if (MapSequence.fromMap(nameToMethodsMap).isEmpty()) {
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}
