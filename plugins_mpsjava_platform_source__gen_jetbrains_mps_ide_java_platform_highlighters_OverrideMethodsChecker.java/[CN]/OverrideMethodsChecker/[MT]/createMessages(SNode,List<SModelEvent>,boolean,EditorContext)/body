{
  Iterable<SNode> classifiers=ListSequence.fromList(SNodeOperations.getNodeDescendants(rootNode,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier"),true,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")) || SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"));
    }
  }
);
  this.myIndexWasNotReady=!(ClassifierSuccessors.getInstance().isIndexReady(editorContext.getOperationContext().getProject()));
  if (Sequence.fromIterable(classifiers).isEmpty() || this.myIndexWasNotReady) {
    return Collections.<EditorMessage>emptySet();
  }
  Set<EditorMessage> result=SetSequence.fromSet(new HashSet<EditorMessage>());
  for (  SNode containedClassifier : Sequence.fromIterable(classifiers)) {
    try {
      collectOverridenMethods(containedClassifier,result);
    }
 catch (    IndexNotReadyException indexNotReady) {
      myIndexWasNotReady=true;
    }
    collectOverridingMethods(containedClassifier,result);
  }
  return result;
}
