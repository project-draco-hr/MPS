{
  for (  SNode livingThrowable : new HashSet<SNode>(throwables)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(livingThrowable,new QuotationClass_85().createNode()) || TypeChecker.getInstance().getSubtypingManager().isSubtype(livingThrowable,new QuotationClass_84().createNode())) {
      throwables.remove(livingThrowable);
    }
  }
  if (throwables.isEmpty()) {
    return;
  }
  List<SNode> statementLists=SNodeOperations.getAncestors(mainNode,"jetbrains.mps.baseLanguage.structure.StatementList",false);
  for (  SNode statementList : statementLists) {
    SNode parent=SNodeOperations.getParent(statementList);
    if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.TryStatement") && SLinkOperations.getTarget(parent,"body",true) == statementList) {
      SNode tryStatement=parent;
      for (      SNode catchClause : SLinkOperations.getTargets(tryStatement,"catchClause",true)) {
        SNode throwableType=SLinkOperations.getTarget(SLinkOperations.getTarget(catchClause,"throwable",true),"type",true);
        for (        SNode livingThrowable : new HashSet<SNode>(throwables)) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(livingThrowable,throwableType)) {
            throwables.remove(livingThrowable);
          }
        }
      }
    }
    if (throwables.isEmpty()) {
      return;
    }
    if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.TryCatchStatement") && SLinkOperations.getTarget(parent,"body",true) == statementList) {
      SNode tryCatchStatement=parent;
      for (      SNode catchClause : SLinkOperations.getTargets(tryCatchStatement,"catchClause",true)) {
        SNode throwableType=SLinkOperations.getTarget(SLinkOperations.getTarget(catchClause,"throwable",true),"type",true);
        for (        SNode livingThrowable : new HashSet<SNode>(throwables)) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(livingThrowable,throwableType)) {
            throwables.remove(livingThrowable);
          }
        }
      }
    }
    if (throwables.isEmpty()) {
      return;
    }
    if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && SLinkOperations.getTarget(parent,"body",true) == statementList) {
      SNode baseMethodDeclaration=parent;
      for (      SNode throwableType : SLinkOperations.getTargets(baseMethodDeclaration,"throwsItem",true)) {
        for (        SNode livingThrowable : new HashSet<SNode>(throwables)) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(livingThrowable,throwableType)) {
            throwables.remove(livingThrowable);
          }
        }
      }
      if (!(throwables.isEmpty())) {
        String errorString="uncaught exceptions:";
        for (        SNode exc : throwables) {
          errorString=errorString + " " + exc;
        }
{
          BaseIntentionProvider intentionProvider=null;
          intentionProvider=new BaseIntentionProvider("r:3204e7cc-2952-479f-ae21-4ccc1704141f(jetbrains.mps.baseLanguage.helgins@3_0).AddExceptionToMethodSignature_QuickFix",false);
          intentionProvider.putArgument("throwableType",throwables.iterator().next());
          TypeChecker.getInstance().reportTypeError(mainNode,errorString,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.helgins)","1210182111558",intentionProvider);
        }
      }
      return;
    }
  }
}
