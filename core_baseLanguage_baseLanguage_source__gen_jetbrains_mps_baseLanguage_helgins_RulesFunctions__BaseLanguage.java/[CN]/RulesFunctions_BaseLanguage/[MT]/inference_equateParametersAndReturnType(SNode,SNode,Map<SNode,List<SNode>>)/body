{
  List<SNode> parameterDeclarations=SLinkOperations.getTargets(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"parameter",true);
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(parameterDeclarations).last(),"type",true),"jetbrains.mps.baseLanguage.structure.VariableArityType")) {
    Iterator<SNode> formalIterator=ListSequence.fromList(parameterDeclarations).iterator();
    Iterator<SNode> actualIterator=ListSequence.fromList(SLinkOperations.getTargets(mc,"actualArgument",true)).iterator();
    SNode formalParam=null;
    SNode actualParam=null;
    while (true) {
      if (!(actualIterator.hasNext())) {
        break;
      }
      if (!(formalIterator.hasNext())) {
        break;
      }
      formalParam=formalIterator.next();
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(formalParam,"type",true),"jetbrains.mps.baseLanguage.structure.VariableArityType")) {
        break;
      }
      actualParam=actualIterator.next();
      SNode matchedType=inference_matchTypeWithTypeVariables(SLinkOperations.getTarget(formalParam,"type",true),mmap);
{
        SNode _nodeToCheck_1029348928467=actualParam;
        BaseIntentionProvider intentionProvider=null;
        intentionProvider=new BaseIntentionProvider("r:1222085007939(jetbrains.mps.baseLanguage.helgins@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
        intentionProvider.putArgument("methodCall",mc);
        intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(actualParam,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1219947530380",true),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1219947530376",false,1,intentionProvider);
      }
    }
    do {
      SNode matchedNode_3=SLinkOperations.getTarget(formalParam,"type",true);
{
        boolean matches_3=false;
{
          SNode matchingNode_3=SLinkOperations.getTarget(formalParam,"type",true);
          if (matchingNode_3 != null) {
            matches_3=SModelUtil_new.isAssignableConcept(matchingNode_3.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.VariableArityType");
          }
        }
        if (matches_3) {
{
            SNode componentType=SLinkOperations.getTarget(matchedNode_3,"componentType",true);
            final SNode matchedType=inference_matchTypeWithTypeVariables(componentType,mmap);
            if (SLinkOperations.getCount(mc,"actualArgument") == ListSequence.fromList(parameterDeclarations).count()) {
              final SNode actual=actualIterator.next();
{
                final SNode actualType=TypeChecker.getInstance().getRuntimeSupport().typeOf(actual,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1220347108709",true);
                TypeChecker.getInstance().getRuntimeSupport().whenConcrete(actualType,new Runnable(){
                  public void run(){
                    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getEquationManager().getRepresentator(actualType),"jetbrains.mps.baseLanguage.structure.ArrayType")) {
{
                        SNode _nodeToCheck_1029348928467=actual;
                        BaseIntentionProvider intentionProvider=null;
                        intentionProvider=new BaseIntentionProvider("r:1222085007939(jetbrains.mps.baseLanguage.helgins@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
                        intentionProvider.putArgument("methodCall",mc);
                        intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
                        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(SLinkOperations.getTarget(TypeChecker.getInstance().getEquationManager().getRepresentator(actualType),"componentType",true),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1220347279318",false,1,intentionProvider);
                      }
                    }
 else {
                      SNode _nodeToCheck_1029348928467=actual;
                      BaseIntentionProvider intentionProvider=null;
                      intentionProvider=new BaseIntentionProvider("r:1222085007939(jetbrains.mps.baseLanguage.helgins@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
                      intentionProvider.putArgument("methodCall",mc);
                      intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
                      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(actualType),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1220347200873",false,1,intentionProvider);
                    }
                  }
                }
,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1220347102532");
              }
            }
 else {
              while (actualIterator.hasNext()) {
                SNode actual=actualIterator.next();
{
                  SNode _nodeToCheck_1029348928467=actual;
                  BaseIntentionProvider intentionProvider=null;
                  intentionProvider=new BaseIntentionProvider("r:1222085007939(jetbrains.mps.baseLanguage.helgins@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
                  intentionProvider.putArgument("methodCall",mc);
                  intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
                  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(actual,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1219947702426",true),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1219947702422",false,1,intentionProvider);
                }
              }
            }
          }
          break;
        }
      }
    }
 while (false);
  }
 else {
{
      SNode arg;
      SNode param;
      Iterator<SNode> arg_iterator=SLinkOperations.getTargets(mc,"actualArgument",true).iterator();
      Iterator<SNode> param_iterator=SLinkOperations.getTargets(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"parameter",true).iterator();
      while (true) {
        if (!(arg_iterator.hasNext())) {
          break;
        }
        if (!(param_iterator.hasNext())) {
          break;
        }
        arg=arg_iterator.next();
        param=param_iterator.next();
{
          SNode matchedType=inference_matchTypeWithTypeVariables(SLinkOperations.getTarget(param,"type",true),mmap);
{
            SNode _nodeToCheck_1029348928467=arg;
            BaseIntentionProvider intentionProvider=null;
            intentionProvider=new BaseIntentionProvider("r:1222085007939(jetbrains.mps.baseLanguage.helgins@3_0).ChooseAppropriateMethodDeclaration_QuickFix",true);
            intentionProvider.putArgument("methodCall",mc);
            intentionProvider.putArgument("classifier",SNodeOperations.getAncestor(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false));
            TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(arg,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1203441371331",true),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1203441371327",false,1,intentionProvider);
          }
        }
      }
    }
  }
  if (returnType != null) {
    SNode matchedType=inference_matchTypeWithTypeVariables(returnType,mmap);
{
      SNode _nodeToCheck_1029348928467=mc;
      BaseIntentionProvider intentionProvider=null;
      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(mc,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1203441371361",true),matchedType,_nodeToCheck_1029348928467,null,"r:1222075024069(jetbrains.mps.baseLanguage.helgins)","1203441371359",intentionProvider);
    }
  }
}
