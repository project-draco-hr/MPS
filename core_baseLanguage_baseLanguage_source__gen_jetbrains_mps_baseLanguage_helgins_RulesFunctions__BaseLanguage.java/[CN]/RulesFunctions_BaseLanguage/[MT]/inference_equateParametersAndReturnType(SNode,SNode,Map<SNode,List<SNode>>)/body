{
{
    SNode arg;
    SNode param;
    Iterator<SNode> arg_iterator=SLinkOperations.getTargets(mc,"actualArgument",true).iterator();
    Iterator<SNode> param_iterator=SLinkOperations.getTargets(SLinkOperations.getTarget(mc,"baseMethodDeclaration",false),"parameter",true).iterator();
    while (true) {
      if (!(arg_iterator.hasNext())) {
        break;
      }
      if (!(param_iterator.hasNext())) {
        break;
      }
      arg=arg_iterator.next();
      param=param_iterator.next();
{
        SNode matchedType=RulesFunctions_BaseLanguage.inference_matchTypeWithTypeVariables(SLinkOperations.getTarget(param,"type",true),mmap);
        if (TRACE_METHOD_TYPES) {
          System.out.println("-1- TYPEOF(" + BaseConcept_Behavior.call_getPresentation_1180102203531(arg) + ") :<=: "+ BaseConcept_Behavior.call_getPresentation_1180102203531(matchedType));
        }
        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(arg,"jetbrains.mps.baseLanguage.helgins","1203441371331",true),matchedType,arg,null,"jetbrains.mps.baseLanguage.helgins","1203441371327",false);
      }
    }
  }
  if (returnType != null) {
    Pair<SNode,Map<SNode,List<SNode>>> pair;
    SNode matchedType=RulesFunctions_BaseLanguage.inference_matchTypeWithTypeVariables(returnType,mmap);
    if (TRACE_METHOD_TYPES) {
      System.out.println("-1- TYPEOF(" + BaseConcept_Behavior.call_getPresentation_1180102203531(mc) + ") :==: "+ BaseConcept_Behavior.call_getPresentation_1180102203531(matchedType));
    }
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(mc,"jetbrains.mps.baseLanguage.helgins","1203441371361",true),matchedType,mc,null,"jetbrains.mps.baseLanguage.helgins","1203441371359");
  }
}
