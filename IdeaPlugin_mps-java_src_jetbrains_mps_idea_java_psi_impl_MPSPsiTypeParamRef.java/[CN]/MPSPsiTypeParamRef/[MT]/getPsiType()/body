{
  return new PsiClassType(LanguageLevel.JDK_1_6){
    private PsiTypeParameter resolved;
    private void resolveRef(){
      if (resolved == null) {
        resolved=getReferenceTarget("typeVariableDeclaration",MPSPsiTypeParameter.class);
      }
    }
    @Override public <A>A accept(    @NotNull PsiTypeVisitor<A> visitor){
      return visitor.visitClassType(this);
    }
    @Nullable @Override public PsiTypeParameter resolve(){
      resolveRef();
      return resolved;
    }
    @Override public String getClassName(){
      resolveRef();
      if (resolved == null)       return null;
      return resolved.getName();
    }
    @NotNull @Override public PsiType[] getParameters(){
      return PsiType.EMPTY_ARRAY;
    }
    @NotNull @Override public ClassResolveResult resolveGenerics(){
      final PsiTypeParameter typeParameter=resolve();
      return new ClassResolveResult(){
        @Override public PsiClass getElement(){
          return typeParameter;
        }
        @Override public PsiSubstitutor getSubstitutor(){
          return PsiSubstitutor.EMPTY;
        }
        @Override public boolean isPackagePrefixPackageReference(){
          return false;
        }
        @Override public boolean isAccessible(){
          return typeParameter != null;
        }
        @Override public boolean isStaticsScopeCorrect(){
          return true;
        }
        @Override public PsiElement getCurrentFileResolveScope(){
          return null;
        }
        @Override public boolean isValidResult(){
          return typeParameter != null;
        }
      }
;
    }
    @NotNull @Override public PsiClassType rawType(){
      return this;
    }
    @Override public String getPresentableText(){
      return getClassName();
    }
    @Override public String getCanonicalText(){
      return getClassName();
    }
    @Override public String getInternalCanonicalText(){
      return "Type parameter " + getClassName();
    }
    @Override public boolean isValid(){
      resolveRef();
      return resolved != null;
    }
    @Override public boolean equalsToText(    @NonNls String text){
      String name=getClassName();
      return name == null ? false : name.equals(text);
    }
    @NotNull @Override public GlobalSearchScope getResolveScope(){
      return GlobalSearchScope.allScope(getProject());
    }
    @NotNull @Override public LanguageLevel getLanguageLevel(){
      return myLanguageLevel;
    }
    @NotNull @Override public PsiClassType setLanguageLevel(    @NotNull LanguageLevel languageLevel){
      return this;
    }
  }
;
}
