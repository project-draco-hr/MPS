{
  TextMPSTreeNode root=new TextMPSTreeNode("",null);
  setRootVisible(false);
  if (myTraces == null) {
    return root;
  }
  Collections.sort(myTraces,new Comparator<List<IModule>>(){
    @Override public int compare(    List<IModule> o1,    List<IModule> o2){
      return o1.size() - o2.size();
    }
  }
);
  for (  List<IModule> trace : myTraces) {
    MPSTreeNode prev=root;
    for (    IModule m : trace) {
      Enumeration children=prev.children();
      DependencyTreeNode found=null;
      while (children.hasMoreElements()) {
        DependencyTreeNode treeChild=(DependencyTreeNode)children.nextElement();
        if (treeChild.getModule() == m) {
          found=treeChild;
        }
      }
      if (found == null) {
        Color color=new Color(0);
        if (myTarget == m) {
          color=new Color(0,170,0);
          if (myTarget == myModule) {
            color=new Color(180,0,0);
          }
        }
        DependencyTreeNode treeNode=new DependencyTreeNode(m,null,color);
        prev.add(treeNode);
        prev=treeNode;
      }
 else {
        prev=found;
      }
    }
  }
  return root;
}
