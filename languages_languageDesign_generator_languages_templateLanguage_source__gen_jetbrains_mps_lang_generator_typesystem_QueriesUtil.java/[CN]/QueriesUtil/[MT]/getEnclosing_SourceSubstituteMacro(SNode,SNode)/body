{
  if (node == null) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence") || SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
    SNode parent=SNodeOperations.getParent(node);
    if ((parent == null) || !(SNodeOperations.isInstanceOf(parent,"jetbrains.mps.lang.generator.structure.IfMacro")) || SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.lang.generator.structure.IfMacro"),"alternativeConsequence",true) != node) {
      return null;
    }
  }
  List<SNode> attributes=(currMacroNode == null ? AttributeOperations.getAttributeList(node,new IAttributeDescriptor.AllAttributes()) : SNodeOperations.getPrevSiblings(currMacroNode,false));
  SNode prevMacro=SNodeOperations.as(ListSequence.fromList(attributes).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      if (!(SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.SourceSubstituteMacro"))) {
        return false;
      }
      if (SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro") && (SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.generator.structure.MapSrcNodeMacro"),"sourceNodeQuery",true) == null)) {
        return false;
      }
      if (SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.SwitchMacro") && (SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.generator.structure.SwitchMacro"),"sourceNodeQuery",true) == null)) {
        return false;
      }
      if (SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro") && (SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.generator.structure.TemplateSwitchMacro"),"sourceNodeQuery",true) == null)) {
        return false;
      }
      return true;
    }
  }
).last(),"jetbrains.mps.lang.generator.structure.SourceSubstituteMacro");
  if (prevMacro != null) {
    return prevMacro;
  }
  return getEnclosing_SourceSubstituteMacro(SNodeOperations.getParent(node),null);
}
