{
  final List<TextUnit> textUnits=breakdownToUnits(model);
  if (textUnits.size() == 0) {
    resultQueue.offer(new TextGenResult(model,textUnits));
  }
  final ModelAccess modelAccess=model.getRepository() != null ? model.getRepository().getModelAccess() : null;
  final AtomicInteger unitsCount=new AtomicInteger(textUnits.size());
  for (  final TextUnit tu : textUnits) {
    final Runnable tuGenerate=new Runnable(){
      @Override public void run(){
        try {
          tu.generate();
        }
 catch (        Exception ex) {
          myMessages.handle(new Message(MessageKind.ERROR,String.format("TextGen threw an exception for model %s",model.getName())).setException(ex));
        }
        if (unitsCount.decrementAndGet() == 0) {
          try {
            resultQueue.put(new TextGenResult(model,textUnits));
          }
 catch (          InterruptedException ex) {
            myMessages.handle(new Message(MessageKind.WARNING,String.format("TextGen interrupted for model %s",model.getModelName())).setException(ex));
          }
        }
      }
    }
;
    myExecutor.execute(modelAccess == null ? tuGenerate : new ModelReadRunnable(modelAccess,tuGenerate));
  }
}
