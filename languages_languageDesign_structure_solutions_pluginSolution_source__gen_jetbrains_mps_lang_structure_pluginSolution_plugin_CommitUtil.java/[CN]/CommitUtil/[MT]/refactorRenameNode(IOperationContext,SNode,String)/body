{
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  ModelAccess.instance().runReadInEDT(new Runnable(){
    @Override public void run(){
      IRefactoring refactoring;
      SNode refactoringNode=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration") ? SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","1347577327951781517") : (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.PropertyDeclaration") ? SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","1347577327951781764") : (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.LinkDeclaration") ? SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)","1347577327951781638") : null)));
      refactoring=(refactoringNode != null ? RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class,refactoringNode,"virtual_getFqName_1213877404258",new Object[]{})) : null);
      if (refactoring == null) {
        return;
      }
      final RefactoringContext refactoringContext=new RefactoringContext(refactoring);
      refactoringContext.setCurrentOperationContext(context);
      refactoringContext.setSelectedNode(node);
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          refactoringContext.setSelectedModel(SNodeOperations.getModel(node).getModelDescriptor());
        }
      }
);
      refactoringContext.setSelectedModule(context.getModule());
      refactoringContext.setSelectedProject(context.getProject());
      refactoringContext.setParameter("newName",newName);
      final IRefactoring fRefactoring=refactoring;
      refactoringContext.setRefactoring(fRefactoring);
      RefactoringAccess.getInstance().getRefactoringFacade().execute(refactoringContext);
    }
  }
);
}
