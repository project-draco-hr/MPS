{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("conceptPropertyDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode enclosingConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",true,false);
      final boolean isConcept=SNodeOperations.isInstanceOf(enclosingConcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      return (List<SNode>)new ConceptAndSuperConceptsScope(enclosingConcept).getNodes(new Condition<SNode>(){
        public boolean met(        SNode node){
          return SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration") && (isConcept || SPropertyOperations.getBoolean(SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"),"inheritable"));
        }
      }
);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c8959028c(jetbrains.mps.lang.structure.constraints)","1213104860719");
    }
  }
);
  return result;
}
