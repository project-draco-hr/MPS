{
  Iterable<Integer> in=this.input10();
  int sum=Sequence.fromIterable(in).reduceRight(new IRightCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      return a + b;
    }
  }
);
  Assert.assertSame(1 + 2 + 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10,sum);
  int sub=Sequence.fromIterable(in).reduceRight(new IRightCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      return a - b;
    }
  }
);
  Assert.assertSame(1 - (2 - (3 - (4 - (5 - (6 - (7 - (8 - (9 - 10)))))))),sub);
  Iterable<Integer> single=Sequence.<Integer>singleton(42);
  Assert.assertSame(42,Sequence.fromIterable(single).reduceRight(new IRightCombinator<Integer,Integer>(){
    public Integer combine(    Integer b,    Integer a){
      return b + a;
    }
  }
));
  Iterable<Integer> empty=Sequence.fromIterable(Collections.<Integer>emptyList());
  Assert.assertNull(Sequence.fromIterable(empty).reduceRight(new IRightCombinator<Integer,Integer>(){
    public Integer combine(    Integer b,    Integer a){
      throw new RuntimeException();
    }
  }
));
}
