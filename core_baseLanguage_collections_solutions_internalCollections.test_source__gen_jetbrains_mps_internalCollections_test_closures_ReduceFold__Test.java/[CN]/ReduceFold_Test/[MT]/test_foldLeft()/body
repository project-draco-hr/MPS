{
  Iterable<Integer> in=this.input10();
  Assert.assertEquals("12345678910",Sequence.<Integer>fromIterable(in).foldLeft("",new ILeftCombinator<Integer,String>(){
    public String combine(    String s,    Integer it){
      return "" + s + it;
    }
  }
));
  _FunctionTypes._return_P2_E0<? extends String,? super String,? super Integer> cl=new _FunctionTypes._return_P2_E0<String,String,Integer>(){
    public String invoke(    String s,    Integer it){
      return "" + s + it;
    }
  }
;
  Assert.assertEquals("12345678910",Sequence.<Integer>fromIterable(in).foldLeft("",cl));
  Iterable<Integer> single=Sequence.<Integer>singleton(42);
  Assert.assertEquals("bar42",Sequence.<Integer>fromIterable(single).foldLeft("bar",new ILeftCombinator<Integer,String>(){
    public String combine(    String s,    Integer it){
      return "" + s + it;
    }
  }
));
  Iterable<Integer> empty=Sequence.<Integer>fromIterable(Collections.<Integer>emptyList());
  Assert.assertEquals("ack",Sequence.<Integer>fromIterable(empty).foldLeft("ack",new ILeftCombinator<Integer,String>(){
    public String combine(    String s,    Integer it){
      int i=0;
      if (i == 0) {
        throw new RuntimeException();
      }
      return "foo";
    }
  }
));
}
