{
  ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(myModule);
  final Map<ModuleReference,Boolean> modules=new HashMap<ModuleReference,Boolean>();
  moduleRootManager.orderEntries().forEach(new Processor<OrderEntry>(){
    public boolean process(    OrderEntry oe){
      if (!(oe instanceof LibraryOrderEntry)) {
        return true;
      }
      LibraryOrderEntry loe=(LibraryOrderEntry)oe;
      Library library=loe.getLibrary();
      if (loe.isModuleLevel() || library == null) {
        return true;
      }
      if (SolutionLibraryType.isSolutionLibrary(library)) {
        Set<ModuleReference> moduleReferences=SolutionLibrariesIndex.getInstance(myModule.getProject()).getModules(library);
        for (        ModuleReference moduleReference : moduleReferences) {
          if (modules.containsKey(moduleReference)) {
            if (loe.isExported()) {
              modules.put(moduleReference,true);
            }
          }
 else {
            modules.put(moduleReference,loe.isExported());
          }
        }
      }
 else {
        Solution s=(Solution)MPSModuleRepository.getInstance().getModuleById(ModuleId.foreign(library.getName()));
        if (s != null) {
          modules.put(s.getModuleReference(),loe.isExported());
        }
      }
      return true;
    }
  }
);
  for (  Entry<ModuleReference,Boolean> entry : modules.entrySet()) {
    dependencies.add(new Dependency(entry.getKey(),entry.getValue()));
  }
}
