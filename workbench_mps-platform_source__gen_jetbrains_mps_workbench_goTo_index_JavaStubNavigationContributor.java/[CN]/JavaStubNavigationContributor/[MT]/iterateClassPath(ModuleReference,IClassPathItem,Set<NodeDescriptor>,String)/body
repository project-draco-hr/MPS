{
  final SModelReference model=StubHelper.uidForPackageInStubs(pName,LanguageID.JAVA,module,false);
  for (  final String cls : item.getRootClasses(pName)) {
    result.add(new NodeDescriptor(){
      public String getName(){
        return cls;
      }
      public SNodeReference getNodeReference(){
        return new SNodePointer(model,new jetbrains.mps.smodel.SNodeId.Foreign(jetbrains.mps.smodel.SNodeId.Foreign.ID_PREFIX + NameUtil.shortNameFromLongName(cls)));
      }
      public SConcept getConcept(){
        String name="jetbrains.mps.baseLanguage.structure.ClassConcept";
        ClassifierKind kind=item.getClassifierKind(("".equals(pName) ? cls : pName + "." + cls));
        if (kind == ClassifierKind.CLASS) {
          name="jetbrains.mps.baseLanguage.structure.ClassConcept";
        }
 else         if (kind == ClassifierKind.INTERFACE) {
          name="jetbrains.mps.baseLanguage.structure.Interface";
        }
 else         if (kind == ClassifierKind.ANNOTATIONS) {
          name="jetbrains.mps.baseLanguage.structure.Annotation";
        }
 else         if (kind == ClassifierKind.ENUM) {
          name="jetbrains.mps.baseLanguage.structure.EnumClass";
        }
        return SConceptRepository.getInstance().getConcept(name);
      }
    }
);
  }
  for (  String subpack : item.getSubpackages(pName)) {
    iterateClassPath(module,item,result,subpack);
  }
}
