{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1116615150612l,1116615189566l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1116615150612l,1116615189566l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          String nameInContext=Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(_context.getParameterNode(),_context.getEnclosingNode());
          if (_context.getSmartReference()) {
            return nameInContext + ".class";
          }
          return nameInContext;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_w155fn_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ClassifierScopes.getWithClassExpressionClassifiers(_context.getContextNode());
        }
      }
;
    }
  }
);
  return references;
}
