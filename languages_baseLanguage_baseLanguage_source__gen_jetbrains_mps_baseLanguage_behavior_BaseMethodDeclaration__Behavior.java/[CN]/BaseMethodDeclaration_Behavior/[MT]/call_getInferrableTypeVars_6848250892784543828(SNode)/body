{
  List<SNode> returnTypeVars=ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(thisNode,"returnType",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getParent(it) == thisNode;
    }
  }
).toListSequence();
  List<SNode> boundTypeVars=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"parameter",true)).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode p){
      return SNodeOperations.getDescendants(p,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{});
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getParent(it) == thisNode;
    }
  }
).toListSequence();
  return ListSequence.fromList(returnTypeVars).subtract(ListSequence.fromList(boundTypeVars)).toListSequence();
}
