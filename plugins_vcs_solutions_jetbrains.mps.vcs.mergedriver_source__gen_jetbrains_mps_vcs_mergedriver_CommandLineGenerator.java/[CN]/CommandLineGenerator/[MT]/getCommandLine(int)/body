{
  Iterable<String> classpath=getClasspath(vcs == ScriptGenerator.SVN);
  if (InternalFlag.isInternalMode()) {
    classpath=Sequence.fromIterable(classpath).where(new IWhereFilter<String>(){
      public boolean accept(      String cpi){
        return cpi.endsWith(".jar");
      }
    }
).concat(ListSequence.fromList(Arrays.asList(InternalRuntimePacker.getPath())));
  }
  String javaExecutable=System.getProperty("java.home") + File.separator + "bin"+ File.separator+ "java";
  if (SystemInfo.isWindows) {
    javaExecutable=adaptPathForMsysGit(javaExecutable + ".exe");
  }
  String classpathString=StringUtils.join(Sequence.fromIterable(classpath).toListSequence(),File.pathSeparator);
  String escapedLogPath=(PathManager.getLogPath() + File.separator + "mergedriver.log").replace("\\","\\\\");
  return String.format("\"%s\" -D%s=\"%s\" -cp \"%s\" %s",javaExecutable,MergeDriverMain.LOG_PROPERTY,escapedLogPath,classpathString,MergeDriverMain.class.getName());
}
