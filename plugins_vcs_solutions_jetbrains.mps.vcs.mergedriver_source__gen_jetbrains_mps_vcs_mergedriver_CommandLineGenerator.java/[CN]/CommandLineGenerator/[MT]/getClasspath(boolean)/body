{
  Set<String> classpathItems=SetSequence.fromSet(new LinkedHashSet<String>());
  final Iterable<String> OTHER_CLASSES=Arrays.asList("com.intellij.ide.projectView.impl.ProjectViewImpl","jetbrains.mps.internal.collections.runtime.ListSequence","jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes","org.apache.commons.logging.Log","org.apache.log4j.Logger","com.intellij.util.containers.ConcurrentHashSet","gnu.trove.THash","org.jdom.JDOMException","com.intellij.openapi.components.ApplicationComponent","com.intellij.idea.IdeaTestApplication","org.picocontainer.Disposable","com.intellij.openapi.extensions.Extensions","com.intellij.ide.ClassloaderUtil","jetbrains.mps.generator.TransientModelsComponent","org.apache.xmlrpc.XmlRpcServer","jetbrains.mps.typesystem.inference.TypeChecker","jetbrains.mps.debug.customViewers.CustomViewersManager","jetbrains.mps.debug.api.breakpoints.BreakpointProvidersManager","jetbrains.mps.editor.runtime.impl.LanguagesKeymapManager","jetbrains.mps.intentions.IntentionsManager","jetbrains.mps.ide.findusages.FindersManager","jetbrains.mps.baseLanguage.index.ClassifierSuccessorsIndexer","jetbrains.mps.execution.impl.configurations.runners.MPSProgramRunner","com.google.common.collect.ImmutableList","jetbrains.mps.analyzers.runtime.framework.CustomAnalyzerRunner","jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin","jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple");
  Iterable<Class> classes=Arrays.<Class>asList(MergeDriverMain.class,FileUtil.class,MergeContext.class,SModel.class,StringUtils.class,IdeMain.class);
  classes=Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String,Class>(){
    public Class select(    String cn){
      try {
        return (Class)Class.forName(cn);
      }
 catch (      ClassNotFoundException e) {
        if (log.isErrorEnabled()) {
          log.error("",e);
        }
        return null;
      }
    }
  }
).concat(Sequence.fromIterable(classes));
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(classes).select(new ISelector<Class,String>(){
    public String select(    Class c){
      return PathUtil.getJarPathForClass(c);
    }
  }
));
  SetSequence.fromSet(classpathItems).addElement(jetbrains.mps.util.PathManager.getHomePath() + File.separator + "lib"+ File.separator+ "resources.jar");
  SetSequence.fromSet(classpathItems).addElement(jetbrains.mps.util.PathManager.getHomePath() + File.separator + "lib"+ File.separator+ "resources_en.jar");
  SetSequence.fromSet(classpathItems).addElement(jetbrains.mps.util.PathManager.getHomePath() + File.separator + "lib"+ File.separator+ "icons.jar");
  if (withSvnkit) {
    SetSequence.fromSet(classpathItems).addElement(getSvnkitJar());
  }
  return classpathItems;
}
