{
  final List<SNode> blocks=ListSequence.fromList(new ArrayList<SNode>());
  final List<SNode> connectors=ListSequence.fromList(new ArrayList<SNode>());
  createChildCells_tb7paq_c0(SLinkOperations.getTargets(node,"blocks",true),editorContext,blocks,connectors);
  createChildCells_tb7paq_c0(SLinkOperations.getTargets(node,"connectors",true),editorContext,blocks,connectors);
  jetbrains.mps.openapi.editor.cells.EditorCell_Collection wrappingCollection=EditorCell_Collection.createIndent2(editorContext,node);
  wrappingCollection.setSelectable(false);
  final DiagramCell editorCell=new DiagramCell(editorContext,node){
    public Mapper<SNode,DiagramView> createMapper(){
      return new Mapper<SNode,DiagramView>(node,new ConnectionRoutingView(new OrthogonalRouter())){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.<SNode,View>forSimpleRole(this,blocks,getTarget().itemsView.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            SNode node){
              EditorCell blockCell=editorContext.createNodeCell(node);
              if (blockCell instanceof BlockCell) {
                addEditorCell(blockCell);
                return ((BlockCell)blockCell).createMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.<SNode,Connection>forSimpleRole(this,connectors,getTarget().connections,new MapperFactory<SNode,Connection>(){
            public Mapper<? extends SNode,? extends Connection> createMapper(            SNode node){
              EditorCell connectorCell=editorContext.createNodeCell(node);
              if (connectorCell instanceof ConnectorCell) {
                addEditorCell(connectorCell);
                return ((ConnectorCell)connectorCell).createMapper();
              }
              return null;
            }
          }
));
          configuration.add(Synchronizers.forObservableRole(this,myConnectionSingleList,getTarget().connections,new MapperFactory<PolyLineConnection,Connection>(){
            public Mapper<? extends PolyLineConnection,? extends Connection> createMapper(            PolyLineConnection source){
              return new Mapper<PolyLineConnection,Connection>(source,source){
              }
;
            }
          }
));
        }
      }
;
    }
  }
;
  editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext,new BasicCellContext(node),new SubstituteInfoPartExt[]{editorCell.createNewDiagramNodeActions(node,SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","blocks"),new _FunctionTypes._void_P3_E0<SNode,Integer,Integer>(){
    public void invoke(    SNode node,    Integer x,    Integer y){
      SNode a=SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.Block");
      SNodeFactoryOperations.addNewChild(a,"inputPorts","jetbrains.mps.testHybridEditor.structure.InputPort");
      SNodeFactoryOperations.addNewChild(a,"outputPorts","jetbrains.mps.testHybridEditor.structure.OutputPort");
      SPropertyOperations.set(a,"x","" + (x));
      SPropertyOperations.set(a,"y","" + (y));
    }
  }
),editorCell.createNewDiagramConnectorActions(node,SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Connector"),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","connectors"),new _FunctionTypes._return_P4_E0<Boolean,SNode,Object,SNode,Object>(){
    public Boolean invoke(    SNode from,    Object fromId,    SNode to,    Object toId){
      return SNodeOperations.isInstanceOf(from,"jetbrains.mps.testHybridEditor.structure.OutputPort") && SNodeOperations.isInstanceOf(to,"jetbrains.mps.testHybridEditor.structure.InputPort");
    }
  }
,new _FunctionTypes._void_P5_E0<SNode,SNode,Object,SNode,Object>(){
    public void invoke(    SNode node,    SNode from,    Object fromId,    SNode to,    Object toId){
      SNode connector=SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.Connector");
      SLinkOperations.setTarget(connector,"outputPort",SNodeOperations.cast(from,"jetbrains.mps.testHybridEditor.structure.OutputPort"),false);
      SLinkOperations.setTarget(connector,"inputPort",SNodeOperations.cast(to,"jetbrains.mps.testHybridEditor.structure.InputPort"),false);
    }
  }
)}));
  editorCell.getRootMapper().attachRoot();
  editorCell.setCellId("Diagram_tb7paq_c0");
  wrappingCollection.addEditorCell(editorCell);
  return wrappingCollection;
}
