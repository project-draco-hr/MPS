{
  super(editorContext,node);
  setCommonSubstituteInfo(new CompositeSubstituteInfo(editorContext,new BasicCellContext(node),new SubstituteInfoPartExt[]{createNewDiagramNodeActions(getSNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Block"),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","blocks"),new _FunctionTypes._void_P3_E0<SNode,Integer,Integer>(){
    public void invoke(    SNode node,    Integer x,    Integer y){
      SNode a=SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.Block");
      SNodeFactoryOperations.addNewChild(a,"inputPorts","jetbrains.mps.testHybridEditor.structure.InputPort");
      SNodeFactoryOperations.addNewChild(a,"outputPorts","jetbrains.mps.testHybridEditor.structure.OutputPort");
      SPropertyOperations.set(a,"x","" + (x));
      SPropertyOperations.set(a,"y","" + (y));
    }
  }
),createNewDiagramConnectorActions(getSNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.Connector"),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","connectors"),new _FunctionTypes._return_P4_E0<Boolean,SNode,Object,SNode,Object>(){
    public Boolean invoke(    SNode from,    Object fromId,    SNode to,    Object toId){
      return SNodeOperations.isInstanceOf(from,"jetbrains.mps.testHybridEditor.structure.OutputPort") && SNodeOperations.isInstanceOf(to,"jetbrains.mps.testHybridEditor.structure.InputPort");
    }
  }
,new _FunctionTypes._void_P5_E0<SNode,SNode,Object,SNode,Object>(){
    public void invoke(    SNode node,    SNode from,    Object fromId,    SNode to,    Object toId){
      SNode connector=SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.Connector");
      SLinkOperations.setTarget(connector,"outputPort",SNodeOperations.cast(from,"jetbrains.mps.testHybridEditor.structure.OutputPort"),false);
      SLinkOperations.setTarget(connector,"inputPort",SNodeOperations.cast(to,"jetbrains.mps.testHybridEditor.structure.InputPort"),false);
    }
  }
)}));
  synchronize();
}
