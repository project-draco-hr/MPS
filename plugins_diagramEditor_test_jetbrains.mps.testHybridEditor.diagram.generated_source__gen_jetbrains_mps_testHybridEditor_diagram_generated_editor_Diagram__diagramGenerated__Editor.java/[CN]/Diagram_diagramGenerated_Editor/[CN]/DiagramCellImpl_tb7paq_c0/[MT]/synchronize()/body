{
  Set<SNode> existingBlocks=new HashSet<SNode>(myBlocks);
  ListIterator<SNode> blocksIterator=myBlocks.listIterator();
  Set<SNode> existingConnectors=new HashSet<SNode>(myConnectors);
  ListIterator<SNode> connectorsIterator=myConnectors.listIterator();
  for (  SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(),"blocks",true))) {
    if (existingBlocks.contains(nextElement)) {
      syncToNextNode(blocksIterator,existingBlocks,nextElement);
      getDirectChildCell(nextElement).synchronize();
      continue;
    }
 else     if (existingConnectors.contains(nextElement)) {
      syncToNextNode(connectorsIterator,existingConnectors,nextElement);
      getDirectChildCell(nextElement).synchronize();
      continue;
    }
    EditorCell cell=getContext().createNodeCell(nextElement);
    if (cell instanceof BlockCell) {
      addEditorCell(cell);
      blocksIterator.add(nextElement);
      existingBlocks.add(nextElement);
    }
 else     if (cell instanceof ConnectorCell) {
      addEditorCell(cell);
      connectorsIterator.add(nextElement);
      existingConnectors.add(nextElement);
    }
  }
  for (  SNode nextElement : ListSequence.fromList(SLinkOperations.getTargets(getSNode(),"connectors",true))) {
    if (existingBlocks.contains(nextElement)) {
      syncToNextNode(blocksIterator,existingBlocks,nextElement);
      getDirectChildCell(nextElement).synchronize();
      continue;
    }
 else     if (existingConnectors.contains(nextElement)) {
      syncToNextNode(connectorsIterator,existingConnectors,nextElement);
      getDirectChildCell(nextElement).synchronize();
      continue;
    }
    EditorCell cell=getContext().createNodeCell(nextElement);
    if (cell instanceof BlockCell) {
      addEditorCell(cell);
      blocksIterator.add(nextElement);
      existingBlocks.add(nextElement);
    }
 else     if (cell instanceof ConnectorCell) {
      addEditorCell(cell);
      connectorsIterator.add(nextElement);
      existingConnectors.add(nextElement);
    }
  }
  purgeTailNodes(blocksIterator);
  purgeTailNodes(connectorsIterator);
}
