{
  this.myMethod=method;
  this.myReturnType=TypeUtil.fromType(Type.getReturnType(method.desc));
  if (method.signature != null) {
    this.myTypeVariables=((List<ASMTypeVariable>)((List)Collections.unmodifiableList(TypeUtil.getFormalTypeParameters(method.signature))));
  }
 else {
    this.myTypeVariables=((List<ASMTypeVariable>)((List)Collections.emptyList()));
  }
  if (method.signature != null) {
    this.myGenericReturnType=TypeUtil.getReturnType(method.signature);
  }
 else {
    this.myGenericReturnType=this.myReturnType;
  }
  Type[] argumentTypes=Type.getArgumentTypes(method.desc);
  this.myParameterTypes=(argumentTypes.length > 0 ? new ArrayList<ASMType>(argumentTypes.length) : ((List<ASMType>)((List)Collections.emptyList())));
  for (  Type t : argumentTypes) {
    this.myParameterTypes.add(TypeUtil.fromType(t));
  }
  if (method.signature != null) {
    this.myGenericParameterTypes=TypeUtil.getParameterTypes(method.signature);
  }
 else {
    this.myGenericParameterTypes=this.myParameterTypes;
  }
  if (this.isVarArg()) {
    int lastIndex=this.myGenericParameterTypes.size() - 1;
    ASMType lastParamType=this.myGenericParameterTypes.get(lastIndex);
    if (lastParamType instanceof ASMArrayType) {
      this.myGenericParameterTypes.set(lastIndex,new ASMVarArgType(((ASMArrayType)lastParamType).getElementType()));
    }
    if (this.myGenericParameterTypes != this.myParameterTypes) {
      lastIndex=this.myParameterTypes.size() - 1;
      lastParamType=this.myParameterTypes.get(lastIndex);
      if (lastParamType instanceof ASMArrayType) {
        this.myParameterTypes.set(lastIndex,new ASMVarArgType(((ASMArrayType)lastParamType).getElementType()));
      }
    }
  }
  this.myParameterAnnotations=new ArrayList<List<ASMAnnotation>>(this.myParameterTypes.size());
  for (int i=0; i < this.myParameterTypes.size(); i++) {
    List<ASMAnnotation> annotations=null;
    if (this.myMethod.visibleParameterAnnotations != null && this.myMethod.visibleParameterAnnotations[i] != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myMethod.visibleParameterAnnotations[i]) {
        if (annotations == null) {
          annotations=new ArrayList<ASMAnnotation>();
        }
        annotations.add(new ASMAnnotation(an));
      }
    }
    if (this.myMethod.invisibleParameterAnnotations != null && this.myMethod.invisibleParameterAnnotations[i] != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myMethod.invisibleParameterAnnotations[i]) {
        if (annotations == null) {
          annotations=new ArrayList<ASMAnnotation>();
        }
        annotations.add(new ASMAnnotation(an));
      }
    }
    this.myParameterAnnotations.add((annotations == null ? ((List<ASMAnnotation>)((List)Collections.emptyList())) : annotations));
  }
  List<ASMType> exceptions=new ArrayList<ASMType>(0);
  if (method.signature != null) {
    exceptions=TypeUtil.getExceptionTypes(method.signature);
  }
  if (!(exceptions.isEmpty())) {
    this.myExceptions=exceptions;
  }
 else {
    this.myExceptions=new ArrayList<ASMType>(this.myMethod.exceptions.size());
    for (    String s : (List<String>)this.myMethod.exceptions) {
      this.myExceptions.add(new ASMClassType(s.replace('/','.')));
    }
  }
  if (this.myMethod.visibleAnnotations != null || this.myMethod.invisibleAnnotations != null) {
    int size=((this.myMethod.visibleAnnotations != null ? this.myMethod.visibleAnnotations.size() : 0)) + ((this.myMethod.invisibleAnnotations != null ? this.myMethod.invisibleAnnotations.size() : 0));
    this.myAnnotations=new ArrayList<ASMAnnotation>(size);
    if (this.myMethod.visibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myMethod.visibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        this.myAnnotations.add(aa);
      }
    }
    if (this.myMethod.invisibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myMethod.invisibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        this.myAnnotations.add(aa);
      }
    }
  }
  if (!(this.myParameterTypes.isEmpty())) {
    this.myParameterNames=new ArrayList<String>(this.myParameterTypes.size());
    if (GET_PARAMETER_NAMES_FROM_DEBUG_INFO && method.localVariables != null && this.myParameterTypes.size() < method.localVariables.size()) {
      int offset=(!(this.isStatic()) ? 1 : 0);
      for (int i=offset; i < this.myParameterTypes.size() + offset; i++) {
        LocalVariableNode node=((LocalVariableNode)method.localVariables.get(i));
        this.myParameterNames.add(node.name);
      }
    }
 else {
      for (int i=0; i < this.myParameterTypes.size(); i++) {
        this.myParameterNames.add("p" + i);
      }
    }
  }
}
