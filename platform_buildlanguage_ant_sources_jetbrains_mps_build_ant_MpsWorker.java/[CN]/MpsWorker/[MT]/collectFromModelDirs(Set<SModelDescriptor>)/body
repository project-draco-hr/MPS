{
  final Set<File> probablyModelFiles=new LinkedHashSet<File>();
  for (  File f : myWhatToGenerate.getModelDirectories()) {
    com.intellij.openapi.util.io.FileUtil.processFilesRecursively(f,new Processor<File>(){
      public boolean process(      File file){
        if (file.getPath().endsWith(MPSExtentions.DOT_MODEL)) {
          probablyModelFiles.add(file);
        }
        return true;
      }
    }
);
  }
  for (  File f : probablyModelFiles) {
    final IFile ifile=FileSystem.getFile(f);
    SModelDescriptor model=SModelRepository.getInstance().findModel(ifile);
    if (model != null) {
      modelDescriptors.add(model);
      info("Found model " + model);
      continue;
    }
    try {
      SModel smodel=ModelAccess.instance().runReadAction(new Computable<SModel>(){
        public SModel compute(){
          return ModelPersistence.readModel(ifile);
        }
      }
);
      info("Read model " + smodel);
      SModelDescriptor smodelDescriptor=new DefaultSModelDescriptor(new DefaultModelRootManager(),ifile,smodel.getSModelReference());
      modelDescriptors.add(smodelDescriptor);
    }
 catch (    ModelFileReadException e) {
      log(e);
    }
  }
}
