{
  if (!(StringUtils.trimBoth(line).startsWith(JavaStackTraceFilter.STRING_START))) {
    return null;
  }
  int start=line.indexOf(JavaStackTraceFilter.STRING_START) + JavaStackTraceFilter.STRING_START.length();
  String tmpStr=line.substring(start);
  int parenIndex=tmpStr.indexOf("(");
  if (parenIndex == -1) {
    return null;
  }
  final String methodName=tmpStr.substring(0,parenIndex);
  int closingParenIndex=tmpStr.indexOf(")");
  if (closingParenIndex == -1) {
    return null;
  }
  final String position=tmpStr.substring(parenIndex + 1,closingParenIndex);
  int lastDot=methodName.lastIndexOf(".");
  final String unitName=((lastDot == -1 ? "" : methodName.substring(0,lastDot)));
  String[] split=position.split(":");
  if (split.length < 2) {
    return null;
  }
  final String fileName=split[0];
  final int lineNumber;
  try {
    lineNumber=Integer.parseInt(split[1]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  final SNodePointer nodeToShow=ModelAccess.instance().runReadAction(new Computable<SNodePointer>(){
    public SNodePointer compute(){
      SNode node=TraceInfoUtil.getJavaNode(unitName,fileName,lineNumber);
      if (node == null) {
        return null;
      }
      return new SNodePointer(node);
    }
  }
);
  if (nodeToShow != null) {
    return new Filter.Result(start + parenIndex + 1+ offset,start + closingParenIndex + offset,new HyperlinkInfo(){
      public void navigate(      Project project){
        if (nodeToShow != null) {
          new NodeNavigatable(ProjectHelper.toMPSProject(project),nodeToShow).navigate(true);
        }
      }
    }
);
  }
  if (project != null) {
    final VirtualFile virtualFile=FileOpenUtil.findFile(project,unitName,fileName);
    if (virtualFile == null) {
      return null;
    }
    return new Filter.Result(start + parenIndex + 1+ offset,start + closingParenIndex + offset,new HyperlinkInfo(){
      public void navigate(      Project project){
        FileOpenUtil.openFile(project,virtualFile,lineNumber);
      }
    }
);
  }
  return null;
}
