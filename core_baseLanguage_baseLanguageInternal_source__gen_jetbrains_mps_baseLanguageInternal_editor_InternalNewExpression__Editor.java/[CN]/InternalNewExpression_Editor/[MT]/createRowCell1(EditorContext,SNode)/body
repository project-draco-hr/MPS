{
  EditorCell_Collection editorCell=EditorCell_Collection.createFlow(context,node);
  InternalNewExpression_Editor.setupBasic_RowCell1(editorCell,node,context);
  editorCell.setGridLayout(false);
  editorCell.setUsesBraces(false);
  editorCell.setCanBeFolded(false);
  editorCell.addEditorCell(this.createConstantCell3(context,node,"Package"));
  editorCell.addEditorCell(this.createConstantCell4(context,node,"name"));
  editorCell.addEditorCell(this.createConstantCell5(context,node,"may"));
  editorCell.addEditorCell(this.createConstantCell6(context,node,"be"));
  editorCell.addEditorCell(this.createConstantCell7(context,node,"splitted"));
  editorCell.addEditorCell(this.createConstantCell8(context,node,"from"));
  editorCell.addEditorCell(this.createConstantCell9(context,node,"short"));
  editorCell.addEditorCell(this.createConstantCell10(context,node,"class"));
  editorCell.addEditorCell(this.createConstantCell11(context,node,"name"));
  editorCell.addEditorCell(this.createConstantCell12(context,node,"with"));
  editorCell.addEditorCell(this.createConstantCell13(context,node,"either"));
  editorCell.addEditorCell(this.createConstantCell14(context,node,"'.'"));
  editorCell.addEditorCell(this.createConstantCell15(context,node,"or"));
  editorCell.addEditorCell(this.createConstantCell16(context,node,"'!'"));
  return editorCell;
}
