{
  final SNode methodClassifier=SNodeOperations.getAncestor(enumConstantDeclaration,"jetbrains.mps.baseLanguage.structure.EnumClass",false,false);
  SNode constructedType=new typeOf_EnumConstantDeclaration_InferenceRule.QuotationClass_4rqj66_a0a1a0().createNode(methodClassifier,typeCheckingContext);
{
    SNode _nodeToCheck_1029348928467=enumConstantDeclaration;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1241009438604",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1241009438608",true),(SNode)constructedType,_info_12389875345);
  }
  final SNode instanceType_typevar_1241009438611=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=enumConstantDeclaration;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1241009438612",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getRepresentative(instanceType_typevar_1241009438611),(SNode)constructedType,_info_12389875345);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,enumConstantDeclaration,null,mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getRepresentative(instanceType_typevar_1241009438611),mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
