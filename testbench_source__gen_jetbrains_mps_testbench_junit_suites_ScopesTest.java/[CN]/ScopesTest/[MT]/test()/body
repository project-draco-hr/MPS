{
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      SReference reference=null;
      for (      SReference ref : SNodeOperations.getReferences(SNodeOperations.getParent(ScopesTest.this.myNode))) {
        if (SLinkOperations.getTargetNode(ref) == SLinkOperations.getTarget(ScopesTest.this.myNode,MetaAdapterFactory.getReferenceLink(new UUID(-8825571760360698496l,-7431307307277756308l),511191073233700873l,5449224527592117654l,"checkingReference"))) {
          reference=ref;
          break;
        }
      }
      Scope scope=ModelConstraints.getScope(reference);
      List<SNode> expected=ScopesTest.this.getExpectedNodes(myNode);
      List<SNode> scopeSet=ScopesTest.this.getScopeNodes(scope);
      List<SNode> unExpected=CollectionUtil.subtract(expected,scopeSet);
      List<SNode> notFounded=CollectionUtil.subtract(scopeSet,expected);
      Assert.assertTrue(ScopesTest.this.getFailMessage(unExpected,notFounded).toString(),unExpected.isEmpty() && notFounded.isEmpty());
    }
  }
);
}
