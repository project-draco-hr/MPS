{
  super(mergeModelsDialog.getProject());
  setTitle("Merging " + rootName);
  myConflictChecker=new ChangeEditorMessage.ConflictChecker(){
    public boolean isChangeConflicted(    ModelChange ch){
      return Sequence.fromIterable(myMergeSession.getConflictedWith(ch)).isNotEmpty();
    }
  }
;
  myModelsDialog=mergeModelsDialog;
  myMergeSession=mergeSession;
  myRootId=rootId;
  myStateToRestore=myMergeSession.getCurrentState();
  myMineEditor=addEditor(0,myMergeSession.getMyModel());
  myResultEditor=addEditor(1,myMergeSession.getResultModel());
  myRepositoryEditor=addEditor(2,myMergeSession.getRepositoryModel());
  linkEditors(true,false);
  linkEditors(false,false);
  linkEditors(true,true);
  linkEditors(false,true);
  myMergeSession.setChangesInvalidateHandler(new MergeSession.ChangesInvalidateHandler(){
    public void someChangesInvalidated(){
      ModelAccess.instance().runWriteInEDT(new Runnable(){
        public void run(){
          rehighlight();
        }
      }
);
    }
  }
);
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,myTopPanel,myBottomPanel);
  splitPane.setResizeWeight(0.7);
  MergeRootsDialog.MyGoToNeighbourRootActions neighbourActions=new MergeRootsDialog.MyGoToNeighbourRootActions();
  NextPreviousTraverser neighbourTraverser=new NextPreviousTraverser(myChangeGroupLayouts,myResultEditor.getMainEditor());
  myActionGroup=ActionUtils.groupFromActions(new ApplyNonConflictsForRoot(this),Separator.getInstance(),neighbourActions.previous(),neighbourActions.next(),Separator.getInstance(),neighbourTraverser.previousAction(),neighbourTraverser.nextAction());
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,myActionGroup,true);
  neighbourTraverser.setActionToolbar(toolbar);
  myContainer.add(toolbar.getComponent(),BorderLayout.NORTH);
  myContainer.add(splitPane,BorderLayout.CENTER);
  myContainer.add(this.myStatusBar,BorderLayout.SOUTH);
  highlightAllChanges();
  neighbourTraverser.goToFirstChangeLater();
  DisplayMode displayMode=check_3816sg_a0hb0a(check_3816sg_a0a33a0(GraphicsEnvironment.getLocalGraphicsEnvironment()));
  int width=(displayMode == null ? 800 : displayMode.getWidth());
  int height=(displayMode == null ? 600 : displayMode.getHeight());
  final Dimension size=DimensionService.getInstance().getSize(getDimensionServiceKey());
  if (size == null) {
    DimensionService.getInstance().setSize(getDimensionServiceKey(),new Dimension(width - 100,height - 100));
  }
  setLocation(50,50);
  init();
}
