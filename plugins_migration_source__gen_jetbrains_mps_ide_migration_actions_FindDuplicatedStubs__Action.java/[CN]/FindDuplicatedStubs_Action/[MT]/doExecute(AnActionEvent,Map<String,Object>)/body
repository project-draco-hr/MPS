{
  try {
    final Map<String,List<SModelReference>> n2m=MapSequence.fromMap(new HashMap<String,List<SModelReference>>());
    Iterable<SModelDescriptor> models=((Project)MapSequence.fromMap(_params).get("project")).getComponent(ProjectScope.class).getModelDescriptors();
    Sequence.fromIterable(models).where(new IWhereFilter<SModelDescriptor>(){
      public boolean accept(      SModelDescriptor it){
        return SModelStereotype.isStubModelStereotype(it.getStereotype());
      }
    }
).visitAll(new IVisitor<SModelDescriptor>(){
      public void visit(      SModelDescriptor it){
        List<SModelReference> refs=MapSequence.fromMap(n2m).get(it.getLongName());
        if (refs == null) {
          MapSequence.fromMap(n2m).put(it.getLongName(),ListSequence.fromList(new ArrayList<SModelReference>()));
        }
        ListSequence.fromList(MapSequence.fromMap(n2m).get(it.getLongName())).addElement(it.getSModelReference());
      }
    }
);
    MapSequence.fromMap(n2m).where(new IWhereFilter<IMapping<String,List<SModelReference>>>(){
      public boolean accept(      IMapping<String,List<SModelReference>> it){
        return ListSequence.fromList(it.value()).count() > 1;
      }
    }
).visitAll(new IVisitor<IMapping<String,List<SModelReference>>>(){
      public void visit(      IMapping<String,List<SModelReference>> it){
        System.out.print(it.key() + ":\n");
        ListSequence.fromList(it.value()).visitAll(new IVisitor<SModelReference>(){
          public void visit(          SModelReference el){
            System.out.print("  " + el + ":\n");
          }
        }
);
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "FindDuplicatedStubs",t);
    }
  }
}
