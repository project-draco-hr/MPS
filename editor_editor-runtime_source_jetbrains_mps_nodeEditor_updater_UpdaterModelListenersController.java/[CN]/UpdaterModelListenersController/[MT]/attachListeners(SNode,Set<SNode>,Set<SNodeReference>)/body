{
  if (myModelListener == null) {
    myModelListener=new UpdaterModelListener(myUpdater);
  }
  final SRepository repository=myUpdater.getEditorContext().getRepository();
  Set<SModel> modelsToListen=new HashSet<SModel>();
  if (relatedNodes != null) {
    for (    SNode node : relatedNodes) {
      SModel model=node.getModel();
      if (model == null) {
        continue;
      }
      modelsToListen.add(model);
    }
  }
  if (relatedRefTargets != null) {
    for (    SNodeReference nodeProxy : relatedRefTargets) {
      final SModelReference modelRef=nodeProxy.getModelReference();
      SModel model=modelRef == null ? null : modelRef.resolve(repository);
      if (model != null) {
        modelsToListen.add(model);
      }
    }
  }
  for (  SModel nextModelToListen : modelsToListen) {
    if (!myListeningModels.contains(nextModelToListen)) {
      myModelListener.startListeningToModel(nextModelToListen);
    }
  }
  for (  SModel nextListeningModel : myListeningModels) {
    if (!modelsToListen.contains(nextListeningModel)) {
      myModelListener.stopListeningToModel(nextListeningModel);
    }
  }
  myListeningModels=modelsToListen;
  if (myRepositoryListener == null) {
    myRepositoryListener=new UpdaterRepositoryContentAdapter(myUpdater.getEditorComponent());
    new RepoListenerRegistrar(repository,myRepositoryListener).attach();
  }
  myRepositoryListener.setUsedModels(modelsToListen);
  myRepositoryListener.setMainModel(mainNode.getModel());
  assertListenerAdded(mainNode);
}
