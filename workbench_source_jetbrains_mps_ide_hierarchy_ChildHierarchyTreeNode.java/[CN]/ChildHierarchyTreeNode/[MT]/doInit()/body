{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      try {
        List<T> descendants=new ArrayList<T>(myHierarchyTree.getAbstractChildren((T)getUserObject()));
        Collections.sort(descendants,new Comparator<T>(){
          public int compare(          T o1,          T o2){
            return ("" + o1.toString()).compareTo(o2.toString());
          }
        }
);
        for (        T descendant : descendants) {
          ChildHierarchyTreeNode childHierarchyTreeNode=new ChildHierarchyTreeNode(descendant,getOperationContext(),myHierarchyTree);
          add(childHierarchyTreeNode);
        }
      }
 catch (      CircularHierarchyException ex) {
        T errorNode=(T)ex.getRepeatedObject();
        final String message=ex.getMessage();
        HierarchyTreeNode<T> errorTreeNode=new HierarchyTreeNode<T>(errorNode,getOperationContext(),myHierarchyTree){
          @Override protected void doUpdatePresentation(){
            super.doUpdatePresentation();
            setIcon(Icons.ERROR_ICON);
            setColor(Color.RED);
          }
          @Override protected String calculateAdditionalText(){
            return message;
          }
        }
;
        add(errorTreeNode);
      }
      myInitialized=true;
    }
  }
);
}
