{
  results.getSearchedNodePointers().add(new SNodePointer(node));
  List<SNode> derived=new ArrayList<SNode>();
  ListOperations.addElement(derived,node);
  int passed=0;
  while (SequenceOperations.getSize(derived) != passed) {
    List<SearchResult> nodeUsagesRes=new ArrayList<SearchResult>();
    SNode passingNode=ListOperations.getElement(derived,passed);
    try {
      GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
      SNode _node=passingNode;
      IScope _scope;
      _scope=scope;
      boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.core.structure.BaseConcept");
      if (!(rightConcept)) {
        DerivedInterfaces_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
      }
 else {
        boolean isApplicable=_finder.isApplicable(_node);
        if (!(isApplicable)) {
          DerivedInterfaces_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
        }
 else {
          SearchResults results_4=_finder.find(new SearchQuery(_node,_scope));
          for (          SearchResult result : results_4.getSearchResults()) {
            nodeUsagesRes.add(result);
          }
        }
      }
    }
 catch (    Throwable t) {
      DerivedInterfaces_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:"+ t.getMessage());
    }
    for (    SearchResult result : nodeUsagesRes) {
      SNode resNode=result.getNode();
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(resNode,null,false,false),"jetbrains.mps.baseLanguage.structure.Interface")) {
        if (SNodeOperations.hasRole(resNode,"jetbrains.mps.baseLanguage.structure.Interface","extendedInterface")) {
          ListOperations.addElement(derived,SNodeOperations.getParent(resNode,null,false,false));
        }
      }
    }
    if (passingNode != node) {
      results.getSearchResults().add(new SearchResult(new SNodePointer(passingNode),"Derived Interfaces"));
    }
    passed=passed + 1;
  }
}
