{
  if (value instanceof ModuleReference) {
    final ModuleReference moduleReference=(ModuleReference)value;
    if (!myModelProperties.getUsedLanguageRemoveCondition().met(moduleReference)) {
      int result=Messages.showYesNoCancelDialog(ProjectHelper.toIdeaProject(myProject),"<html>This language is used by model.<br>Do you really what to delete it?<br><font color=\"red\"><b>Model state will become inconsistent</b></font></html>","Delete used language","&View usages","&Delete anyway","Ca&ncel",Messages.getQuestionIcon());
switch (result) {
case Messages.YES:
        findUsages(value);
      return false;
case Messages.NO:
    return true;
case Messages.CANCEL:
  return false;
}
}
}
 else if (value instanceof SModelReference) {
final SModelReference modelReference=(SModelReference)value;
if (!myModelProperties.getImportedModelsRemoveCondition().met((jetbrains.mps.smodel.SModelReference)modelReference)) {
int result=Messages.showYesNoCancelDialog(ProjectHelper.toIdeaProject(myProject),"<html>This model is used in model.<br>Do you really what to delete it?<br><font color=\"red\"><b>Model state will become inconsistent</b></font></html>","Delete imported model","&View usages","&Delete anyway","Ca&ncel",Messages.getQuestionIcon());
switch (result) {
case Messages.YES:
findUsages(value);
return false;
case Messages.NO:
return true;
case Messages.CANCEL:
return false;
}
}
}
return super.confirmRemove(value);
}
