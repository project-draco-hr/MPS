{
  return new DependencyTableCellRender(getScope()){
    @Override protected ModelTableCellRender getModelTableCellRender(    IScope scope){
      return new ModelTableCellRender(scope){
        @Override protected DependencyCellState getDependencyCellState(        SModelReference modelReference){
          if (!StateUtil.isAvailable((jetbrains.mps.smodel.SModelReference)modelReference)) {
            return DependencyCellState.NOT_AVALIABLE;
          }
          if (!StateUtil.isInScope(myScope,(jetbrains.mps.smodel.SModelReference)modelReference)) {
            return DependencyCellState.NOT_IN_SCOPE;
          }
          if ((myModelProperties.getImportedModelsRemoveCondition().met((jetbrains.mps.smodel.SModelReference)modelReference))) {
            return DependencyCellState.UNUSED;
          }
          return super.getDependencyCellState(modelReference);
        }
      }
;
    }
    @Override protected ModuleTableCellRender getModuleTableCellRender(){
      return new InModelModuleTableCellRender();
    }
  }
;
}
