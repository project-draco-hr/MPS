{
  ToolbarDecorator decorator=super.createToolbar(usedLangsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      Iterable<SModule> modules=new ConditionalIterable<SModule>(getProjectModules(),new ModuleInstanceCondition(Language.class,DevKit.class));
      modules=new ConditionalIterable<SModule>(modules,new VisibleModuleCondition());
      ComputeRunnable<List<SModuleReference>> c=new ComputeRunnable<List<SModuleReference>>(new ModuleCollector(modules));
      myProject.getModelAccess().runReadAction(c);
      List<SModuleReference> list=CommonChoosers.showModuleSetChooser(myProject,"Choose Language or DevKit",c.getResult());
      for (      SModuleReference reference : list) {
        myUsedLangsTableModel.addItem(reference);
      }
      myUsedLangsTableModel.fireTableDataChanged();
    }
  }
).setRemoveAction(new RemoveEntryAction(usedLangsTable){
    @Override protected boolean confirmRemove(    int row){
      Object value=myUsedLangsTableModel.getValueAt(row,UsedLangsTableModel.ITEM_COLUMN);
      final UsedLangsTableModel.Import entry=(UsedLangsTableModel.Import)value;
      boolean inActualUse=new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return myInUseCondition.met(entry);
        }
      }
);
      if (inActualUse) {
        ViewUsagesDeleteDialog viewUsagesDeleteDialog=new ViewUsagesDeleteDialog(ProjectHelper.toIdeaProject(myProject),"Delete used language","This language is used by model. Do you really what to delete it?","Model state will become inconsistent"){
          @Override public void doViewAction(){
            findUsages(entry);
          }
        }
;
        viewUsagesDeleteDialog.show();
        return viewUsagesDeleteDialog.isOK();
      }
      return true;
    }
  }
);
  decorator.addExtraAction(new FindActionButton(usedLangsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      final SearchScope scope=new ModelsScope(myModelDescriptor);
      final List<SLanguage> languages=getSelectedLanguages();
      final SearchQuery query=new SearchQuery(new GenericHolder<Collection<SLanguage>>(languages,"Languages"),scope);
      final IResultProvider provider=FindUtils.makeProvider(new CompositeFinder(new LanguageUsagesFinder()));
      showUsageImpl(query,provider);
      forceCancelCloseDialog();
    }
  }
);
  return decorator;
}
