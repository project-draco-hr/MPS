{
  return new FindAnActionButton(table){
    @Override public void actionPerformed(    AnActionEvent e){
      final SearchQuery[] query=new SearchQuery[1];
      final IResultProvider[] provider=new IResultProvider[1];
      final SearchScope scope=new ModelsScope(myModelDescriptor);
      myProject.getModelAccess().runReadAction(new Runnable(){
        @Override public void run(){
          List<SModule> modules=new LinkedList<SModule>();
          for (          int i : myTable.getSelectedRows()) {
            Object value=myUsedLangsTableModel.getValueAt(i,UsedLangsTableModel.ITEM_COLUMN);
            if (value instanceof UsedLangsTableModel.Import) {
              final Import entry=(Import)value;
              if (entry.myLanguage != null) {
                modules.add(entry.myLanguage.getSourceModule());
              }
 else {
                final SModule devkit=entry.myDevKit.resolve(myProject.getRepository());
                if (devkit instanceof DevKit) {
                  modules.addAll(((DevKit)devkit).getAllExportedLanguages());
                }
              }
            }
          }
          query[0]=new SearchQuery(new MyModulesHolder(modules),scope);
          provider[0]=FindUtils.makeProvider(new LanguageUsagesFinder(){
            @Override public SearchResults find(            SearchQuery query,            ProgressMonitor monitor){
              if (!(query.getObjectHolder() instanceof ModulesHolder))               return super.find(query,monitor);
              SearchResults searchResults=new SearchResults();
              ModulesHolder modulesHolder=(ModulesHolder)query.getObjectHolder();
              for (              SModule searchedModule : modulesHolder.getObject()) {
                SearchQuery searchQuery=new SearchQuery(searchedModule,query.getScope());
                searchResults.addAll(super.find(searchQuery,monitor));
              }
              return searchResults;
            }
          }
);
        }
      }
);
      UsagesViewTool usagesViewTool=myProject.getComponent(UsagesViewTool.class);
      usagesViewTool.findUsages(provider[0],query[0],true,true,true,"No usages found");
      forceCancelCloseDialog();
    }
  }
;
}
