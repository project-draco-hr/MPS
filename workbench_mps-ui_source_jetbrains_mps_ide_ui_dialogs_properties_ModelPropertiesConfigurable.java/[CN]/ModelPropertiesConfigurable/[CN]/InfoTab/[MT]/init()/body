{
  int rowsCount=myIsDefSModelDescr ? 6 : 5;
  int rowIndex=0;
  final JPanel panel=new JPanel();
  panel.setLayout(new GridLayoutManager(rowsCount,1,INSETS,-1,-1));
  myDoNotGenerateCheckBox=new JBCheckBox(PropertiesBundle.message("mps.properties.model.info.checkboxDNG"),myModelProperties.isDoNotGenerate());
  panel.add(myDoNotGenerateCheckBox,new GridConstraints(rowIndex++,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  if (myIsDefSModelDescr) {
    myGenerateIntoModelFolderCheckBox=new JBCheckBox(PropertiesBundle.message("mps.properties.model.info.checkboxGIMF"),myModelProperties.isGenerateIntoModelFolder());
    panel.add(myGenerateIntoModelFolderCheckBox,new GridConstraints(rowIndex++,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  }
  panel.add(new JBLabel(PropertiesBundle.message("mps.properties.common.filepathlabel")),new GridConstraints(rowIndex++,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  String filePath="(not editable model)";
  if (myModelDescriptor instanceof EditableSModel) {
    DataSource source=myModelDescriptor.getSource();
    if (source instanceof FileDataSource) {
      filePath=FileUtil.getCanonicalPath(((FileDataSource)source).getFile().getPath());
    }
 else     if (source instanceof FolderDataSource) {
      filePath=FileUtil.getCanonicalPath(((FolderDataSource)source).getFolder().getPath());
    }
  }
  JTextField textField=new JTextField();
  textField.setEditable(false);
  textField.setText(filePath);
  panel.add(textField,new GridConstraints(rowIndex++,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  final JBTable languagesTable=new JBTable();
  languagesTable.setShowHorizontalLines(false);
  languagesTable.setShowVerticalLines(false);
  languagesTable.setAutoCreateRowSorter(false);
  languagesTable.setAutoscrolls(true);
  languagesTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myEngagedLanguagesModel=new UsedLangsTableModel(myProject.getRepository(),"Languages engaged on generation");
  ArrayList<SLanguage> engagedLanguages=new ArrayList<SLanguage>();
  for (  SModuleReference moduleReference : myModelProperties.getLanguagesEngagedOnGeneration()) {
    engagedLanguages.add(MetaAdapterFactory.getLanguage(moduleReference));
  }
  myEngagedLanguagesModel.init(engagedLanguages,Collections.<SModuleReference>emptyList());
  languagesTable.setModel(myEngagedLanguagesModel);
  LanguageTableCellRenderer cellRenderer=new LanguageTableCellRenderer(myProject.getRepository());
  Set<SLanguage> languagesInUse=new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new ComputeUsedLanguages(myModelDescriptor));
  IsLanguageInUse inUseCondition=new IsLanguageInUse(languagesInUse,Collections.<SLanguage>emptySet());
  cellRenderer.addCellState(inUseCondition,DependencyCellState.SUPERFLUOUS_ENGAGED);
  cellRenderer.registerIn(languagesTable);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(languagesTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      Iterable<SModule> modules=new ConditionalIterable<SModule>(getProjectModules(),new ModuleInstanceCondition(Language.class));
      modules=new ConditionalIterable<SModule>(modules,new VisibleModuleCondition());
      ComputeRunnable<List<SModuleReference>> c=new ComputeRunnable<List<SModuleReference>>(new ModuleCollector(modules));
      myProject.getModelAccess().runReadAction(c);
      List<SModuleReference> list=CommonChoosers.showModuleSetChooser(myProject,"Choose languages",c.getResult());
      for (      SModuleReference reference : list) {
        myEngagedLanguagesModel.addItem(reference);
      }
      myEngagedLanguagesModel.fireTableDataChanged();
    }
  }
).setRemoveAction(new RemoveEntryAction(languagesTable));
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  panel.add(table,new GridConstraints(rowIndex,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new TableColumnSearch(languagesTable,0).setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(panel);
}
