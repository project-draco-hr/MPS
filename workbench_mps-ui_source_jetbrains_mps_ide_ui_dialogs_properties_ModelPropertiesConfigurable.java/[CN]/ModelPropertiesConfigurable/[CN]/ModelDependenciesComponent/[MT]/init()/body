{
  myImportedModelsComponent=new JPanel();
  myImportedModelsComponent.setLayout(new GridLayoutManager(2,1,MPSPropertiesConfigurable.INSETS,-1,-1));
  final JBTable importedModelsTable=new JBTable();
  importedModelsTable.setShowHorizontalLines(false);
  importedModelsTable.setShowVerticalLines(false);
  importedModelsTable.setAutoCreateRowSorter(false);
  importedModelsTable.setAutoscrolls(true);
  importedModelsTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  importedModelsTable.setModel(myImportedModels);
  importedModelsTable.setDefaultRenderer(SModelReference.class,new ModelTableCellRender(){
    @Override protected DependencyCellState getDependencyCellState(    final org.jetbrains.mps.openapi.model.SModelReference modelReference){
      DependencyCellState res=ModelAccess.instance().runReadAction(new Computable<DependencyCellState>(){
        @Override public DependencyCellState compute(){
          if (!StateUtil.isAvailable(modelReference)) {
            return DependencyCellState.NOT_AVAILABLE;
          }
          if (!VisibilityUtil.isVisible(myModelDescriptor.getModule(),modelReference.resolve(MPSModuleRepository.getInstance()))) {
            return DependencyCellState.NOT_IN_SCOPE;
          }
          if ((myModelProperties.getImportedModelsRemoveCondition().met(modelReference))) {
            return DependencyCellState.UNUSED;
          }
          return null;
        }
      }
);
      if (res != null)       return res;
      return super.getDependencyCellState(modelReference);
    }
  }
);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(importedModelsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<SModelReference> list=new ModelChooser().compute();
      for (      SModelReference reference : list) {
        if (!myModelDescriptor.getReference().equals(reference)) {
          myImportedModels.addItem(reference);
        }
      }
    }
  }
).setRemoveAction(new RemoveEntryAction(importedModelsTable){
    @Override protected boolean confirmRemove(    int row){
      return ModelDependenciesComponent.this.confirmRemove(importedModelsTable.getValueAt(row,0));
    }
  }
).addExtraAction(myFindAnActionButton=new FindAnActionButton(importedModelsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      final SearchScope scope=new ModelsScope(myModelDescriptor);
      final List<SModelReference> modelReferences=new ArrayList<SModelReference>();
      for (      int i : myTable.getSelectedRows()) {
        Object value=myImportedModels.getValueAt(i,0);
        if (value instanceof SModelReference) {
          modelReferences.add((SModelReference)value);
        }
      }
      ModelsHolder modelsHolder=new ModelsHolder(modelReferences){
        @Override public void read(        Element element,        Project project) throws CantLoadSomethingException {
        }
        @Override public void write(        Element element,        Project project) throws CantSaveSomethingException {
        }
      }
;
      final SearchQuery query=new SearchQuery(modelsHolder,scope);
      final IResultProvider provider=FindUtils.makeProvider(new CompositeFinder(new ModelUsagesFinder()));
      final UsageToolOptions uvOpt=new UsageToolOptions().allowRunAgain(true).forceNewTab(true).navigateIfSingle(false);
      UsagesViewTool.showUsages(ProjectHelper.toIdeaProject(myProject),provider,query,uvOpt);
      forceCancelCloseDialog();
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  myImportedModelsComponent.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new TableColumnSearch(importedModelsTable,0).setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(myImportedModelsComponent);
}
