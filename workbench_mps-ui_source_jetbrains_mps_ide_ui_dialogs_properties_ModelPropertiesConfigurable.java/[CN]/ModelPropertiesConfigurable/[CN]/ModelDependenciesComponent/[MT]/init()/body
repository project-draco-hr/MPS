{
  myImportedModelsComponent=new JPanel();
  myImportedModelsComponent.setLayout(new GridLayoutManager(2,1,JBInsets.NONE,-1,-1));
  final JBTable importedModelsTable=new JBTable();
  importedModelsTable.setShowHorizontalLines(false);
  importedModelsTable.setShowVerticalLines(false);
  importedModelsTable.setAutoCreateRowSorter(false);
  importedModelsTable.setAutoscrolls(true);
  importedModelsTable.setModel(myImportedModels);
  importedModelsTable.setDefaultRenderer(SModelReference.class,new ModelTableCellRender(getScope()){
    @Override protected DependencyCellState getDependencyCellState(    org.jetbrains.mps.openapi.model.SModelReference modelReference){
      if (!StateUtil.isAvailable((jetbrains.mps.smodel.SModelReference)modelReference)) {
        return DependencyCellState.NOT_AVALIABLE;
      }
      if (!StateUtil.isInScope(myScope,(jetbrains.mps.smodel.SModelReference)modelReference)) {
        return DependencyCellState.NOT_IN_SCOPE;
      }
      if ((myModelProperties.getImportedModelsRemoveCondition().met((jetbrains.mps.smodel.SModelReference)modelReference))) {
        return DependencyCellState.UNUSED;
      }
      return super.getDependencyCellState(modelReference);
    }
  }
);
  importedModelsTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(importedModelsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<SModelReference> list=(new ModelChooser()).compute();
      for (      SModelReference reference : list)       myImportedModels.addItem(reference);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      int first=importedModelsTable.getSelectionModel().getMinSelectionIndex();
      if (!confirmRemove(importedModelsTable.getValueAt(first,0))) {
        return;
      }
      int last=importedModelsTable.getSelectionModel().getMaxSelectionIndex();
      TableUtil.removeSelectedItems(importedModelsTable);
      myImportedModels.fireTableRowsDeleted(first,last);
    }
  }
).addExtraAction(new FindAnActionButton(importedModelsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myImportedModels.getValueAt(importedModelsTable.getSelectionModel().getMinSelectionIndex(),0));
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  myImportedModelsComponent.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new SpeedSearchBase<JBTable>(importedModelsTable){
    @Override public int getSelectedIndex(){
      return importedModelsTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return importedModelsTable.convertRowIndexToModel(viewIndex);
    }
    @Override public Object[] getAllElements(){
      final int count=myImportedModels.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myImportedModels.getValueAt(idx);
      }
      return elements;
    }
    @Override public String getElementText(    Object element){
      if (!(element instanceof SModelReference))       return "";
      return element.toString();
    }
    @Override public void selectElement(    Object element,    String selectedText){
      final int count=myImportedModels.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myImportedModels.getValueAt(row))) {
          final int viewRow=importedModelsTable.convertRowIndexToView(row);
          importedModelsTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(importedModelsTable);
          break;
        }
      }
    }
  }
.setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(myImportedModelsComponent);
}
