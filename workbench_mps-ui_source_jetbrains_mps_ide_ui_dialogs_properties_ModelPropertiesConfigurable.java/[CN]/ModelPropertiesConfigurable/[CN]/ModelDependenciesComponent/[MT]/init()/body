{
  myImportedModelsComponent=new JPanel();
  myImportedModelsComponent.setLayout(new GridLayoutManager(2,1,MPSPropertiesConfigurable.INSETS,-1,-1));
  final JBTable importedModelsTable=new JBTable();
  importedModelsTable.setShowHorizontalLines(false);
  importedModelsTable.setShowVerticalLines(false);
  importedModelsTable.setAutoCreateRowSorter(false);
  importedModelsTable.setAutoscrolls(true);
  importedModelsTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  importedModelsTable.setModel(myImportedModels);
  ModelTableCellRender cellRender=new ModelTableCellRender(myProject.getRepository());
  cellRender.addCellState(new Condition<SModel>(){
    @Override public boolean met(    SModel m){
      return m == null;
    }
  }
,DependencyCellState.NOT_AVAILABLE);
  cellRender.addCellState(new Condition<SModel>(){
    @Override public boolean met(    SModel m){
      return !VisibilityUtil.isVisible(myModelDescriptor.getModule(),m);
    }
  }
,DependencyCellState.NOT_IN_SCOPE);
  final Set<SModelReference> actualCrossModelRefs=getActualCrossModelReferences();
  cellRender.addCellState(new Condition<SModel>(){
    @Override public boolean met(    SModel m){
      return !actualCrossModelRefs.contains(m.getReference());
    }
  }
,DependencyCellState.UNUSED);
  importedModelsTable.setDefaultRenderer(SModelReference.class,cellRender);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(importedModelsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<SModelReference> list=new ModelChooser(myProject).compute();
      for (      SModelReference reference : list) {
        if (!myModelDescriptor.getReference().equals(reference)) {
          myImportedModels.addItem(reference);
        }
      }
    }
  }
).setRemoveAction(new RemoveEntryAction(importedModelsTable){
    @Override protected boolean confirmRemove(    int row){
      return ModelDependenciesComponent.this.confirmRemove(importedModelsTable.getValueAt(row,0));
    }
  }
).addExtraAction(myFindActionButton=new FindActionButton(importedModelsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      final SearchScope scope=new ModelsScope(myModelDescriptor);
      final List<SModelReference> modelReferences=new ArrayList<SModelReference>();
      for (      int i : myTable.getSelectedRows()) {
        modelReferences.add(myImportedModels.getValueAt(i));
      }
      final SearchQuery query=new SearchQuery(new ModelsHolder(modelReferences),scope);
      final IResultProvider provider=FindUtils.makeProvider(new CompositeFinder(new ModelUsagesFinder()));
      showUsageImpl(query,provider);
      forceCancelCloseDialog();
    }
  }
).addExtraAction(new AnActionButton(){
{
      getTemplatePresentation().setIcon(MPSIcons.General.ModelChecker);
      getTemplatePresentation().setText("Remove unused model imports");
    }
    @Override public void actionPerformed(    AnActionEvent e){
      final Set<SModelReference> xmodelRefs=getActualCrossModelReferences();
      boolean anyRemoved=false;
      for (int row=myImportedModels.getRowCount() - 1; row >= 0; row--) {
        if (!xmodelRefs.contains(myImportedModels.getValueAt(row))) {
          myImportedModels.removeRow(row);
          anyRemoved=true;
        }
      }
      if (anyRemoved) {
        myImportedModels.fireTableDataChanged();
        importedModelsTable.clearSelection();
      }
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  myImportedModelsComponent.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new TableColumnSearch(importedModelsTable,0).setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(myImportedModelsComponent);
}
