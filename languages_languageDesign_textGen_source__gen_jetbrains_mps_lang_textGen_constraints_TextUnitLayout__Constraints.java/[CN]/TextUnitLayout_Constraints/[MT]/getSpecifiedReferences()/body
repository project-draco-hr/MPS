{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xb83431fe5c8f40bcL,0x8a3665e25f4dd253L,0x2bad879ac8f27dc9L,0x2bad879ac8f27dcdL,"active"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xb83431fe5c8f40bcL,0x8a3665e25f4dd253L,0x2bad879ac8f27dc9L,0x2bad879ac8f27dcdL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_g51ca1_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SimpleRoleScope.forNamedElements(_context.getContextNode(),MetaAdapterFactory.getContainmentLink(0xb83431fe5c8f40bcL,0x8a3665e25f4dd253L,0x2bad879ac8f27dc9L,0x2bad879ac8f27dcbL,"parts"));
        }
      }
;
    }
  }
);
  return references;
}
