{
  List<SNode> nodes=SLinkOperations.getTargets(node,"statement",true);
  SLinkOperations.addNewChild(node,"statement","jetbrains.mps.baseLanguage.structure.Statement");
  SLinkOperations.addNewChild(node,"statement","jetbrains.mps.baseLanguage.structure.Statement");
  ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).addElement(null);
  ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).addSequence(null);
  ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).insertElement(0,SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement",null));
  int c1=ListSequence.fromList(SLinkOperations.getTargets(node,"statement",true)).count();
  List<SNode> macros=AttributeOperations.getAttributeList(SNodeOperations.cast(node,""),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")));
  AttributeOperations.createAndAddAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")),"jetbrains.mps.lang.generator.structure.NodeMacro");
  AttributeOperations.createAndAddAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")),"jetbrains.mps.lang.generator.structure.NodeMacro");
  ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).addElement(null);
  ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).addSequence(null);
  ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).insertElement(0,null);
  int c2=ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).count();
  int c3=ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).count();
  int all=ListSequence.fromList(AttributeOperations.getAttributeList(node,new IAttributeDescriptor.AllAttributes())).count();
  SNodeOperations.copyNode(AttributeOperations.getAttribute(node,new IAttributeDescriptor.PropertyAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.PropertyMacro"),"alias")));
}
