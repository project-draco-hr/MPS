{
  try {
    final Set<IClassPathItem> classpaths=new HashSet<IClassPathItem>();
    for (    Language language : this.myLanguages) {
      IClassPathItem item=language.getClassPathItem();
      classpaths.add(item);
    }
    String path=PathManager.getHomePath() + NameUtil.pathFromNamespace(".lib.tools.") + "tools.jar";
    classpaths.add(ClassPathFactory.getInstance().createFromPath(path));
    GeneratorManager manager=new GeneratorManager(myContext.getProject(),new GenerationSettings()){
      protected boolean generateRequirements(){
        return false;
      }
    }
;
    InMemoryJavaGenerationHandler handler=new AbstractEvaluationLogic.MyInMemoryJavaGenerationHandler(false,true,classpaths);
    Project ideaProject=this.myAuxModule.getMPSProject().getProject();
    DefaultMessageHandler messageHandler=new DefaultMessageHandler(ideaProject);
    ProgressWindow progressWindow=new ProgressWindow(false,ideaProject);
    boolean successful=manager.generateModels(ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(),this.myAuxModel),myContext,handler,progressWindow,messageHandler,true);
    Disposer.dispose(progressWindow);
    String fullClassName=this.myAuxModel.getLongName() + "." + EVALUATOR_NAME;
    String source=handler.getSources().get(fullClassName);
    if (successful || StringUtils.isNotEmpty(source)) {
      if (isDeveloperMode()) {
        System.err.println(source);
      }
      ClassLoader loader=handler.getCompiler().getClassLoader(this.myUiState.getClass().getClassLoader());
      Class clazz=Class.forName(fullClassName,true,loader);
      Evaluator evaluator;
      try {
        evaluator=(Evaluator)clazz.getConstructor(JavaUiState.class).newInstance(this.myUiState);
      }
 catch (      InvocationTargetException e) {
        myUiState=myDebugSession.refresh();
        evaluator=(Evaluator)clazz.getConstructor(JavaUiState.class).newInstance(this.myUiState);
      }
      IValueProxy value=evaluator.evaluate();
      return value;
    }
 else {
      throw new EvaluationException("Errors during generation.");
    }
  }
 catch (  InvocationTargetException e) {
    throw new InvocationTargetEvaluationException(e.getCause());
  }
catch (  EvaluationException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new EvaluationException(t);
  }
}
