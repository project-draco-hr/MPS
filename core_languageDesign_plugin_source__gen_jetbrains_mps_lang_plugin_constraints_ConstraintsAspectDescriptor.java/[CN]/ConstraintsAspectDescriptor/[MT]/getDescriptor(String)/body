{
switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a,fqName)) {
case 3:
    return new ActionDeclaration_Constraints();
case 19:
  return new ModificationStatement_Constraints();
case 8:
return new AddElementStatement_Constraints();
case 30:
return new ToolInstanceExpression_Constraints();
case 20:
return new ProjectOperation_Constraints();
case 17:
return new GroupAnchor_Constraints();
case 26:
return new Separator_Constraints();
case 4:
return new ActionGroupDeclaration_Constraints();
case 18:
return new InterfaceExtentionPoint_Constraints();
case 2:
return new ActionDataParameterDeclaration_Constraints();
case 6:
return new ActionParameterDeclaration_Constraints();
case 9:
return new AddStatement_Constraints();
case 27:
return new ShortcutChange_Constraints();
case 16:
return new ExecuteSpecific_Constraints();
case 22:
return new ReportErrorStatement_Constraints();
case 12:
return new ComponentReference_Constraints();
case 21:
return new PropertyRefExpression_Constraints();
case 25:
return new RunConfigPropertyInstance_Constraints();
case 23:
return new RunConfigMainNodeStatement_Constraints();
case 13:
return new CreateRunConfigStatement_Constraints();
case 31:
return new UpdateBlock_Constraints();
case 29:
return new TabbedToolOperation_Constraints();
case 28:
return new SmartDisposeClosureParameterDeclaration_Constraints();
case 10:
return new AskStatement_Constraints();
case 32:
return new VariableNodeExpression_Constraints();
case 24:
return new RunConfigParameterReferenceOperation_Constraints();
case 15:
return new ExecuteParameterQuery_Constraints();
case 11:
return new BaseProjectOperation_Constraints();
case 0:
return new AbstractCheckConfigBlock_Constraints();
case 7:
return new ActionParameterReference_Constraints();
case 5:
return new ActionInstance_Constraints();
case 1:
return new ActionConstructionParameterDeclaration_Constraints();
case 14:
return new EditableModel_Constraints();
default :
return new BaseConstraintsDescriptor(fqName);
}
}
