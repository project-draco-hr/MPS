{
{
    final SearchScope scope=CommandUtil.createScope(searchScope);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    SNode movedNode=initialState.reference().resolve(repository);
    Collection<SReference> usages;
    if (movedNode != null) {
      usages=CommandUtil.usages(CommandUtil.createConsoleScope(null,false,context),movedNode);
    }
 else {
      usages=Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null,false,context))).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return eq_k8iioh_a0a0a0a0a0a0a0a4a0a7(it.getTargetNodeReference(),initialState.reference());
        }
      }
).toListSequence();
    }
    return CollectionSequence.fromCollection(usages).select(new ISelector<SReference,RefactoringParticipant.Change<NamedNodeReference>>(){
      public RefactoringParticipant.Change<NamedNodeReference> select(      SReference ref){
        final SNodeReference containingNode=ref.getSourceNode().getReference();
        final SReferenceLink role=ref.getLink();
        final String resolveInfo=SLinkOperations.getResolveInfo(ref);
        final SearchResult<SNode> searchResult=new SearchResult<SNode>(ref.getSourceNode(),"reference");
        RefactoringParticipant.Change<NamedNodeReference> change=new RefactoringParticipant.Change<NamedNodeReference>(){
          public SearchResult getSearchResult(){
            return searchResult;
          }
          public boolean needsToPreserveOldNode(){
            return false;
          }
          public void confirm(          final NamedNodeReference finalState,          final SRepository repository,          RefactoringSession refactoringSession){
            refactoringSession.registerChange(new Runnable(){
              public void run(){
                SNode node=containingNode.resolve(repository);
                node.setReference(role,jetbrains.mps.smodel.SReference.create(role,node,finalState.reference().getModelReference(),finalState.reference().getNodeId(),resolveInfo));
              }
            }
);
          }
        }
;
        return change;
      }
    }
).toListSequence();
  }
}
