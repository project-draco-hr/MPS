{
  if (!(ListSequence.fromList(selectedOptions).contains(OPTION))) {
    return ListSequence.fromList(initialStates).select(new ISelector<NamedNodeReference,List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>>(){
      public List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>> select(      NamedNodeReference it){
        return (List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>)Collections.<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>emptyList();
      }
    }
).toListSequence();
  }
  Collection<SReference> usages;
  List<SNode> movedNodes=ListSequence.fromList(initialStates).select(new ISelector<NamedNodeReference,SNode>(){
    public SNode select(    NamedNodeReference it){
      return it.reference().resolve(repository);
    }
  }
).toListSequence();
{
    final SearchScope scope=CommandUtil.createScope(searchScope);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    if (movedNodes != null) {
      progressMonitor.start("References in current project",1);
      usages=(Set<SReference>)FindUsagesFacade.getInstance().findUsages(searchScope,SetSequence.fromSetWithValues(new HashSet<SNode>(),movedNodes),progressMonitor.subTask(1));
    }
 else {
      progressMonitor.start("References in current project",Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null,false,context))).count());
      usages=CollectionSequence.fromCollection(new ArrayList<SReference>());
      for (      SReference ref : Sequence.fromIterable(CommandUtil.references(CommandUtil.createConsoleScope(null,false,context)))) {
        if (ListSequence.fromList(initialStates).select(new ISelector<NamedNodeReference,SNodeReference>(){
          public SNodeReference select(          NamedNodeReference it){
            return it.reference();
          }
        }
).contains(ref.getTargetNodeReference())) {
          CollectionSequence.fromCollection(usages).addElement(ref);
        }
        progressMonitor.advance(1);
        if (progressMonitor.isCanceled()) {
          return null;
        }
      }
    }
  }
  final Map<SNodeReference,List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>> result=MapSequence.fromMap(new HashMap<SNodeReference,List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>>());
  for (  SReference ref : CollectionSequence.fromCollection(usages)) {
    final SNodeReference containingNode=ref.getSourceNode().getReference();
    final SNode movingNode=ref.getTargetNode();
    final SReferenceLink role=ref.getLink();
    final String resolveInfo=SLinkOperations.getResolveInfo(ref);
    final SearchResults searchResults=new SearchResults(SetSequence.fromSetAndArray(new HashSet<SNode>(),ref.getTargetNode()),ListSequence.fromListAndArray(new ArrayList<SearchResult<SNode>>(),new SearchResult<SNode>(ref.getSourceNode(),"reference")));
    RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference> change=new RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>(){
      public MoveNodeRefactoringParticipant<NamedNodeReference,NamedNodeReference> getParticipant(){
        return UpdateReferencesParticipant.this;
      }
      public SearchResults getSearchResults(){
        return searchResults;
      }
      public boolean needsToPreserveOldNode(){
        return false;
      }
      public void confirm(      final NamedNodeReference finalState,      final SRepository repository,      final RefactoringSession refactoringSession){
        refactoringSession.registerChange(new Runnable(){
          public void run(){
            SNode node=containingNode.resolve(repository);
            MoveNodesDefault.CopyMapObject copyMap=MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);
            if (node == null || (MapSequence.fromMap(copyMap.getCopyMap()).containsKey(node) && movingNode != null && movingNode.getModel() != null)) {
              return;
            }
            node.setReference(role,jetbrains.mps.smodel.SReference.create(role,node,finalState.reference().getModelReference(),finalState.reference().getNodeId(),resolveInfo));
            if (ListSequence.fromList(selectedOptions).contains(UpdateModelImports.OPTION)) {
              UpdateModelImports.addModelImport(node.getModel(),finalState.reference().getModelReference().resolve(repository));
            }
          }
        }
);
      }
    }
;
    if (MapSequence.fromMap(result).get(ref.getTargetNodeReference()) == null) {
      MapSequence.fromMap(result).put(ref.getTargetNodeReference(),ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>()));
    }
    ListSequence.fromList(MapSequence.fromMap(result).get(ref.getTargetNodeReference())).addElement(change);
  }
  return ListSequence.fromList(initialStates).select(new ISelector<NamedNodeReference,List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>>>(){
    public List<RefactoringParticipant.Change<NamedNodeReference,NamedNodeReference>> select(    NamedNodeReference initialState){
      return MapSequence.fromMap(result).get(initialState.reference());
    }
  }
).toListSequence();
}
