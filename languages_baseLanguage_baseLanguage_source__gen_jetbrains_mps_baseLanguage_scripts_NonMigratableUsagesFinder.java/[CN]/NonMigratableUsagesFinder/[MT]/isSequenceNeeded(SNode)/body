{
  SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(nodeUsage),"jetbrains.mps.baseLanguage.structure.DotExpression");
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    SNode operation=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
    if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") && !(SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"))) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect")) {
      return true;
    }
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"),"rightExpression",true) == dotExpression) {
    return true;
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement")) {
    if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"inputSequence",true) == dotExpression) {
      return true;
    }
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ForeachStatement")) {
    if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"iterable",true) == dotExpression) {
      return true;
    }
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.CollectionAppendPart") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.CollectionAppendPart"),"list",true) == dotExpression) {
    return true;
  }
  SNode expectedType=calcExpectedType(nodeUsage);
  if (SNodeOperations.getConceptDeclaration(expectedType) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType")) {
    return true;
  }
  if (SNodeOperations.getConceptDeclaration(expectedType) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(expectedType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Iterable")) {
    return true;
  }
  return false;
}
