{
  this.addNodeById("1230052480439");
  this.addNodeById("1230052480459");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052480448"),"jetbrains.mps.baseLanguage.structure.IfStatement")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  Assert.assertTrue(ref instanceof ExtractMethodWithExitPoints);
  ref.doRefactor();
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("1230052480440"),"jetbrains.mps.baseLanguage.structure.ClassConcept") + "' and '"+ SNodeOperations.cast(this.getNodeById("1230052480460"),"jetbrains.mps.baseLanguage.structure.ClassConcept")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052480440"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052480460"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
