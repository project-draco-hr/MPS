{
  setLayout(new BorderLayout());
  myContext=context;
  myModelTree=new OldModelDifferenceComponent.MyModelTree(context);
  myModelTreeActionGroup=new DefaultActionGroup();
  myChangesTreeActionGroup=new DefaultActionGroup();
  createToolBarAndActions(myModelTree,myModelTreeActionGroup,"Model");
  createToolBarAndActions(myChangesTree,myChangesTreeActionGroup,"Changes");
  myModelTreeToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,myModelTreeActionGroup,true);
  myChangesTreeToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,myChangesTreeActionGroup,true);
  myModelTreeToolBar.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  myChangesTreeToolBar.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  JPanel modelPanel=new JPanel(new BorderLayout());
  modelPanel.add(myModelTreeToolBar.getComponent(),BorderLayout.NORTH);
  modelPanel.add(ScrollPaneFactory.createScrollPane(myModelTree),BorderLayout.CENTER);
  JPanel changesPanel=new JPanel(new BorderLayout());
  changesPanel.add(myChangesTreeToolBar.getComponent(),BorderLayout.NORTH);
  changesPanel.add(ScrollPaneFactory.createScrollPane(myChangesTree),BorderLayout.CENTER);
  JSplitPane splitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT,modelPanel,changesPanel);
  splitter.setDividerLocation(500);
  add(splitter,BorderLayout.CENTER);
  updateView();
}
