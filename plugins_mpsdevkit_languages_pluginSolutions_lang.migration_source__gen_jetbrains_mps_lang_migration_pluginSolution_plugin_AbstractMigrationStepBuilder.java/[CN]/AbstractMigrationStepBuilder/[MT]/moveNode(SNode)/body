{
  SNode nodeFrom=NodeReferenceUtil.makeReflection(from);
  final SNode moveNodeItem=createMoveNode_sympyp_a0c0i(SNodeOperations.cast(HUtil.copyIfNecessary(nodeFrom),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")),SNodeOperations.cast(HUtil.copyIfNecessary(null),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));
  Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>(){
    public void visit(    MoveNodesContributor it){
      it.adjustMoveNodesItem(moveNodeItem,SNodeOperations.getModel(from).getModule().getRepository());
    }
  }
);
  ListSequence.fromList(SLinkOperations.getChildren(myStep,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x67236d4a5836cabbL,0x67236d4a5836d7f3L,"part"))).addElement(moveNodeItem);
  return new MoveNodesBuilder.IncompleteMoveNode(){
    public void setTarget(    SNode to){
      SLinkOperations.setTarget(moveNodeItem,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x67236d4a5830221eL,0x67236d4a58343d17L,"toNode"),NodeReferenceUtil.makeReflection(to));
    }
  }
;
}
