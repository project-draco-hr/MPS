{
  final Wrappers._T<SNode> nodeToSelect=new Wrappers._T<SNode>(null);
  final Wrappers._int caret=new Wrappers._int(-1);
  EditorCell_Label selectedCell=((EditorCell_Label)editorContext.getSelectedCell());
  if (StringUtils.isNotEmpty(selectedCell.getSelectedText())) {
    selectedCell.deleteSelection();
    if (StringUtils.isEmpty(selectedCell.getText())) {
      if ((SNodeOperations.getNextSibling(node) == null)) {
        CommentLine_Behavior.call_tryMergeToRight_439148907936414403(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"),SNodeOperations.getIndexInParent(node));
      }
 else {
        nodeToSelect.value=SNodeOperations.getNextSibling(node);
        SNodeOperations.deleteNode(node);
      }
    }
    editorContext.selectWRTFocusPolicy(nodeToSelect.value);
    return;
  }
 else   if (selectedCell.getCaretPosition() == selectedCell.getText().length()) {
    final Wrappers._boolean isLastPart=new Wrappers._boolean();
    final Wrappers._boolean isLastLine=new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        isLastPart.value=(SNodeOperations.getNextSibling(node) == null);
        isLastLine.value=(SNodeOperations.getNextSibling(SNodeOperations.getParent(node)) == null);
      }
    }
);
    if (isLastPart.value) {
      if (isLastLine.value) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
        }
 else         if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
          NodeCaretPair nodeCaret=CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"),false);
          editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
          ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
        }
        return;
      }
 else {
        ModelAccess.instance().runWriteActionInCommand(new Runnable(){
          public void run(){
            SNode curLine=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
            SNode nextLine=SNodeOperations.cast(SNodeOperations.getNextSibling(curLine),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
            nodeToSelect.value=ListSequence.fromList(SLinkOperations.getTargets(curLine,"part",true)).last();
            int index=SNodeOperations.getIndexInParent(node);
            ListSequence.fromList(SLinkOperations.getTargets(curLine,"part",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(nextLine,"part",true)));
            if (SNodeOperations.isInstanceOf(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && StringUtils.isNotEmpty(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text"))) {
              caret.value=SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text").length();
            }
 else {
              caret.value=0;
            }
            CommentLine_Behavior.call_tryMergeToRight_439148907936414403(curLine,index);
            SNodeOperations.deleteNode(nextLine);
            editorContext.selectWRTFocusPolicy(nodeToSelect.value);
            ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(caret.value);
          }
        }
);
        return;
      }
    }
 else {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
        nodeToSelect.value=SNodeOperations.getNextSibling(node);
        if (StringUtils.isEmpty(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text"))) {
          SNodeOperations.deleteNode(nodeToSelect.value);
          nodeToSelect.value=node;
        }
 else {
          SPropertyOperations.set(SNodeOperations.cast(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text",SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text").substring(1));
        }
        editorContext.selectWRTFocusPolicy(nodeToSelect.value);
        ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(caret.value);
      }
 else       if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
        NodeCaretPair nodeCaret=CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getNextSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"),true);
        editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
        ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
      }
      return;
    }
  }
 else {
    SPropertyOperations.set(node,"text",SPropertyOperations.getString(node,"text").substring(0,selectedCell.getCaretPosition()) + SPropertyOperations.getString(node,"text").substring(selectedCell.getCaretPosition() + 1));
    return;
  }
}
