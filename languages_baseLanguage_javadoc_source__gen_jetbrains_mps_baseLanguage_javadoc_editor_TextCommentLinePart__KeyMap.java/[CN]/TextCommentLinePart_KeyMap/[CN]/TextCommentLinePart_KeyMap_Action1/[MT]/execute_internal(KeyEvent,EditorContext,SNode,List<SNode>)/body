{
  boolean isFirstPart;
  boolean isFirstLine;
  SNode nodeToSelect;
  int caret;
  isFirstPart=(SNodeOperations.getPrevSibling(node) == null);
  isFirstLine=(SNodeOperations.getPrevSibling(SNodeOperations.getParent(node)) == null);
  if (isFirstPart) {
    if (isFirstLine) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
      }
 else       if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
        NodeCaretPair nodeCaret=BehaviorReflection.invokeVirtual(NodeCaretPair.class,SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(node)),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"),"virtual_smartDelete_9042833497008205283",new Object[]{true});
        editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
        ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
      }
      return;
    }
 else {
      SNode curLine=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
      SNode prevLine=SNodeOperations.cast(SNodeOperations.getPrevSibling(curLine),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
      nodeToSelect=ListSequence.fromList(SLinkOperations.getTargets(prevLine,"part",true)).last();
      int index=ListSequence.fromList(SLinkOperations.getTargets(prevLine,"part",true)).count() - 1;
      ListSequence.fromList(SLinkOperations.getTargets(prevLine,"part",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(curLine,"part",true)));
      if (SNodeOperations.isInstanceOf(nodeToSelect,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && isNotEmpty_yh032p_a0a6a0a0h0d1(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text"))) {
        caret=SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"),"text").length();
      }
 else {
        caret=0;
      }
      CommentLine_Behavior.call_tryMergeToRight_439148907936414403(prevLine,index);
      SNodeOperations.deleteNode(curLine);
      editorContext.selectWRTFocusPolicy(nodeToSelect);
      ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(caret);
      return;
    }
  }
 else {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
      nodeToSelect=SNodeOperations.getPrevSibling(node);
      SNode linePart=SNodeOperations.cast(nodeToSelect,"jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
      if (isEmpty_yh032p_a0c0b0a7a3b(SPropertyOperations.getString(linePart,"text"))) {
        SNodeOperations.deleteNode(nodeToSelect);
        nodeToSelect=node;
      }
 else {
        SPropertyOperations.set(linePart,"text",SPropertyOperations.getString(linePart,"text").substring(0,SPropertyOperations.getString(linePart,"text").length() - 1));
      }
      editorContext.selectWRTFocusPolicy(nodeToSelect);
    }
 else     if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
      NodeCaretPair nodeCaret=BehaviorReflection.invokeVirtual(NodeCaretPair.class,SNodeOperations.cast(SNodeOperations.getPrevSibling(node),"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"),"virtual_smartDelete_9042833497008205283",new Object[]{false});
      editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
      ((EditorCell_Label)editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
    }
    return;
  }
}
