{
  List<MappingScript> postMappingScripts=ruleManager.getPostMappingScripts();
  if (postMappingScripts.isEmpty()) {
    return currentModel;
  }
  boolean needToCloneModel=!myDiscardTransients;
  SModel toRecycle=null;
  if (needToCloneModel) {
    ttrace.push("model clone",false);
    SModel currentOutputModel_clone=createTransientModel();
    if (myLogger.needsInfo()) {
      myLogger.info("clone model '" + currentModel.getSModelFqName() + "' --> '"+ currentOutputModel_clone.getSModelFqName()+ "'");
    }
    CloneUtil.cloneModel(currentModel,currentOutputModel_clone,false);
    ttrace.pop();
    mySessionContext.getGenerationTracer().registerPostMappingScripts(currentModel,currentOutputModel_clone,postMappingScripts);
    toRecycle=currentModel;
    currentModel=currentOutputModel_clone;
  }
  boolean postProcessed=false;
  for (  MappingScript postMappingScript : postMappingScripts) {
    if (postMappingScript.getScriptKind() != MappingScriptKind.post_process_output_model) {
      myLogger.warning(postMappingScript.getNode(),"skip script '" + postMappingScript + "' ("+ postMappingScript.getModel().getSModelFqName()+ ") - wrong script kind");
      continue;
    }
    if (myLogger.needsInfo()) {
      myLogger.info(postMappingScript.getNode(),"post-process '" + postMappingScript + "' ("+ postMappingScript.getModel().getLongName()+ ")");
    }
    TemplateGenerator templateGenerator=new TemplateGenerator(mySessionContext,myProgressMonitor,myLogger,ruleManager,currentModel,currentModel,myGenerationContext,myDependenciesData,ttrace);
    templateGenerator.getDefaultExecutor().executeMappingScript(postMappingScript,currentModel);
    postProcessed=true;
  }
  if (needToCloneModel) {
    myDependenciesData.scriptApplied(currentModel);
    recycleWasteModel(toRecycle);
  }
  if (myLogger.needsInfo() && postProcessed) {
    myLogger.info("post-processing finished");
  }
  return currentModel;
}
