{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AfterPosition;
case 1:
  return props_BaseEmitJumpStatement;
case 2:
return props_BaseEmitVariableStatement;
case 3:
return props_BaseInstructionOperation;
case 4:
return props_BeforePosition;
case 5:
return props_BooleanInstructionOperation;
case 6:
return props_BuilderBlock;
case 7:
return props_DataFlowBuilderDeclaration;
case 8:
return props_EmitCodeForStatement;
case 9:
return props_EmitIfJumpStatement;
case 10:
return props_EmitJumpStatement;
case 11:
return props_EmitLabelStatement;
case 12:
return props_EmitMayBeUnreachable;
case 13:
return props_EmitNopStatement;
case 14:
return props_EmitReadStatement;
case 15:
return props_EmitRetStatement;
case 16:
return props_EmitStatement;
case 17:
return props_EmitTryFinallyStatement;
case 18:
return props_EmitWriteStatement;
case 19:
return props_GetCodeForExpression;
case 20:
return props_IBuilderMode;
case 21:
return props_InsertAfter;
case 22:
return props_InsertBefore;
case 23:
return props_InsertPosition;
case 24:
return props_InstructionGetSourceOperation;
case 25:
return props_InstructionIsJump;
case 26:
return props_InstructionIsNop;
case 27:
return props_InstructionIsRet;
case 28:
return props_InstructionType;
case 29:
return props_IntraProcedural_BuilderMode;
case 30:
return props_LabelPosition;
case 31:
return props_NodeParameter;
case 32:
return props_Position;
case 33:
return props_RelativePosition;
}
throw new IllegalStateException("Unknown concept " + c);
}
