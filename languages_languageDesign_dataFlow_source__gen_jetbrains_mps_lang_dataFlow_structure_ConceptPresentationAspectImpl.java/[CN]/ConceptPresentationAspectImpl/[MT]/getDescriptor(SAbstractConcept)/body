{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0jb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AfterPosition;
      }
    break;
case 1:
  if (true) {
    return props_BaseEmitJumpStatement;
  }
break;
case 2:
if (true) {
return props_BaseEmitVariableStatement;
}
break;
case 3:
if (true) {
return props_BaseInstructionOperation;
}
break;
case 4:
if (true) {
return props_BeforePosition;
}
break;
case 5:
if (true) {
return props_BooleanInstructionOperation;
}
break;
case 6:
if (true) {
return props_BuilderBlock;
}
break;
case 7:
if (true) {
return props_DataFlowBuilderDeclaration;
}
break;
case 8:
if (true) {
return props_EmitCodeForStatement;
}
break;
case 9:
if (true) {
return props_EmitIfJumpStatement;
}
break;
case 10:
if (true) {
return props_EmitJumpStatement;
}
break;
case 11:
if (true) {
return props_EmitLabelStatement;
}
break;
case 12:
if (true) {
return props_EmitMayBeUnreachable;
}
break;
case 13:
if (true) {
return props_EmitNopStatement;
}
break;
case 14:
if (true) {
return props_EmitReadStatement;
}
break;
case 15:
if (true) {
return props_EmitRetStatement;
}
break;
case 16:
if (true) {
return props_EmitStatement;
}
break;
case 17:
if (true) {
return props_EmitTryFinallyStatement;
}
break;
case 18:
if (true) {
return props_EmitWriteStatement;
}
break;
case 19:
if (true) {
return props_GetCodeForExpression;
}
break;
case 20:
if (true) {
return props_IBuilderMode;
}
break;
case 21:
if (true) {
return props_InsertAfter;
}
break;
case 22:
if (true) {
return props_InsertBefore;
}
break;
case 23:
if (true) {
return props_InsertPosition;
}
break;
case 24:
if (true) {
return props_InstructionGetSourceOperation;
}
break;
case 25:
if (true) {
return props_InstructionIsJump;
}
break;
case 26:
if (true) {
return props_InstructionIsNop;
}
break;
case 27:
if (true) {
return props_InstructionIsRet;
}
break;
case 28:
if (true) {
return props_InstructionType;
}
break;
case 29:
if (true) {
return props_IntraProcedural_BuilderMode;
}
break;
case 30:
if (true) {
return props_LabelPosition;
}
break;
case 31:
if (true) {
return props_NodeParameter;
}
break;
case 32:
if (true) {
return props_Position;
}
break;
case 33:
if (true) {
return props_RelativePosition;
}
break;
default :
}
}
throw new IllegalStateException();
}
