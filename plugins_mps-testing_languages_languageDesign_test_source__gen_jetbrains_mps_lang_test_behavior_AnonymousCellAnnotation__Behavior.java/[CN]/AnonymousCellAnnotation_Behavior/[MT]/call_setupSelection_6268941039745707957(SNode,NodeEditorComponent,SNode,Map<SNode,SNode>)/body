{
  final Wrappers._T<EditorComponent> editorComponent=new Wrappers._T<EditorComponent>(nodeEditorComponent);
  final Wrappers._T<EditorCell> cellWithId=new Wrappers._T<EditorCell>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (SPropertyOperations.getBoolean(thisNode,MetaAdapterFactory.getProperty(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x11e31babe12L,0x1b73330fb1241e01L,"isInInspector"))) {
        editorComponent.value=AnonymousCellAnnotation_Behavior.call_setupInspector_5681471431307922086(thisNode,node,nodeEditorComponent);
      }
      cellWithId.value=editorComponent.value.findCellWithId(node,SPropertyOperations.getString(thisNode,MetaAdapterFactory.getProperty(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x11e31babe12L,0x11e31babe13L,"cellId")));
      if (cellWithId.value == null) {
        throw new RuntimeException("No cell " + thisNode);
      }
      AnonymousCellAnnotation_Behavior.call_setupCaretAndSelection_9114978211826243747(thisNode,cellWithId.value);
    }
  }
);
  editorComponent.value.changeSelection(cellWithId.value);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getReferenceLink(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x11e31babe12L,0x1ad0cd452e1f9accL,"nodeRangeSelectionStart")) != null) {
        SNode selectionStart=MapSequence.fromMap(map).get(SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getReferenceLink(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x11e31babe12L,0x1ad0cd452e1f9accL,"nodeRangeSelectionStart")));
        SNode selectionEnd=MapSequence.fromMap(map).get(SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getReferenceLink(0x8585453e6bfb4d80L,0x98deb16074f1d86cL,0x11e31babe12L,0x1ad0cd452e1f9acdL,"nodeRangeSelectionEnd")));
        SelectionManager selectionManager=editorComponent.value.getSelectionManager();
        selectionManager.pushSelection(selectionManager.createRangeSelection(selectionStart,selectionEnd));
      }
    }
  }
);
}
