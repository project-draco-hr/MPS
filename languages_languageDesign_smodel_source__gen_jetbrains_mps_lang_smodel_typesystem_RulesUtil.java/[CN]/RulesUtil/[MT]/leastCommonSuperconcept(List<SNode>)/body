{
  SubtypingManager subtypingManager=TypeChecker.getInstance().getSubtypingManager();
  List<SNode> allTypes=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode concept : concepts) {
    ListSequence.fromList(allTypes).addElement(new RulesUtil.QuotationClass_yxkngc_a0a0a0c0k().createNode(concept));
  }
  List<SNode> leastCommonSupertypes=SubtypingUtil.leastCommonSuperTypes(allTypes,null);
  if (leastCommonSupertypes.isEmpty() || !(SNodeOperations.isInstanceOf(leastCommonSupertypes.iterator().next(),"jetbrains.mps.lang.smodel.structure.SNodeType")) || SLinkOperations.getTarget(SNodeOperations.cast(leastCommonSupertypes.iterator().next(),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false) == null) {
    return SLinkOperations.getTarget(new RulesUtil.QuotationClass_yxkngc_a0a0a4a01().createNode(),"concept",false);
  }
  return SLinkOperations.getTarget(SNodeOperations.cast(leastCommonSupertypes.iterator().next(),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false);
}
