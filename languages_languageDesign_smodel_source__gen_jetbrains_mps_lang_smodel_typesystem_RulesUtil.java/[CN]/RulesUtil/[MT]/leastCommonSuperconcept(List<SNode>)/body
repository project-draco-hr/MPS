{
  SubtypingManager subtypingManager=TypeChecker.getInstance().getSubtypingManager();
  Set<SNode> set=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode concept : concepts) {
    SetSequence.fromSet(set).addElement(new RulesUtil.QuotationClass_yxkngc_a0a0a0c0k().createNode(concept));
  }
  Set<SNode> leastCommonSupertypes=subtypingManager.leastCommonSupertypes(set,true);
  if (leastCommonSupertypes.isEmpty() || SLinkOperations.getTarget(SNodeOperations.cast(leastCommonSupertypes.iterator().next(),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false) == null) {
    return SLinkOperations.getTarget(new RulesUtil.QuotationClass_yxkngc_a0a0a4a01().createNode(),"concept",false);
  }
  return SLinkOperations.getTarget(SNodeOperations.cast(leastCommonSupertypes.iterator().next(),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false);
}
