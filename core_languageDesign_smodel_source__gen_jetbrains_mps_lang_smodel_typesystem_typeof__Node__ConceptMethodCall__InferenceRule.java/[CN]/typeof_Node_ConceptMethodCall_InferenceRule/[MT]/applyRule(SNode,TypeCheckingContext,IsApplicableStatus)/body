{
  if (!((SLinkOperations.getTarget(conceptMethodCall,"baseMethodDeclaration",false) != null))) {
    BaseQuickFixProvider intentionProvider=null;
    MessageTarget errorTarget=new NodeMessageTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(conceptMethodCall,"no method declaration","r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179410829052",intentionProvider,errorTarget);
  }
  int actCount=ListSequence.fromList(SLinkOperations.getTargets(conceptMethodCall,"actualArgument",true)).count();
  int expCount=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(conceptMethodCall,"baseMethodDeclaration",false),"parameter",true)).count();
  if (!(actCount == expCount)) {
    BaseQuickFixProvider intentionProvider=null;
    MessageTarget errorTarget=new NodeMessageTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(conceptMethodCall,"Wrong parameters number: expected " + expCount + ", actual "+ actCount,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179410886099",intentionProvider,errorTarget);
  }
{
    SNode arg;
    SNode parameter;
    Iterator<SNode> arg_iterator=ListSequence.fromList(SLinkOperations.getTargets(conceptMethodCall,"actualArgument",true)).iterator();
    Iterator<SNode> parameter_iterator=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(conceptMethodCall,"baseMethodDeclaration",false),"parameter",true)).iterator();
    while (true) {
      if (!(arg_iterator.hasNext())) {
        break;
      }
      if (!(parameter_iterator.hasNext())) {
        break;
      }
      arg=arg_iterator.next();
      parameter=parameter_iterator.next();
{
        SNode _nodeToCheck_1029348928467=arg;
        BaseQuickFixProvider intentionProvider=null;
        EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179411081637",0,intentionProvider);
        _info_12389875345.setInequationGroup("");
        typeCheckingContext.createLessThanInequation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179411075565",true),(SNode)typeCheckingContext.typeOf(parameter,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179411084134",true),false,_info_12389875345);
      }
    }
  }
{
    SNode _nodeToCheck_1029348928467=conceptMethodCall;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179410535708",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1179410528345",true),(SNode)SLinkOperations.getTarget(SLinkOperations.getTarget(conceptMethodCall,"baseMethodDeclaration",false),"returnType",true),_info_12389875345);
  }
}
