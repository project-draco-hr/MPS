{
  if (!(this.fillFieldsIfNecessary(context))) {
    return;
  }
{
    NodeTypesComponent component=NodeTypesComponentsRepository.getInstance().getNodeTypesComponent(SNodeOperations.getContainingRoot(this.node));
    if (component == null) {
      return;
    }
    Set<Pair<String,String>> rulesIds=component.getRulesWhichAffectNodeType(this.node);
    if (rulesIds == null) {
      return;
    }
    List<SNode> rules=new ArrayList<SNode>();
{
      ICursor<Pair<String,String>> _zCursor1=CursorFactory.createCursor(rulesIds);
      try {
        while (_zCursor1.moveToNext()) {
          Pair<String,String> ruleId=_zCursor1.getCurrent();
{
            SModelDescriptor modelDescriptor=SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString(ruleId.o1));
            if (modelDescriptor == null) {
              continue;
            }
            SNode rule=modelDescriptor.getSModel().getNodeById(ruleId.o2);
            if (rule != null) {
              rules.add(rule);
            }
          }
        }
      }
  finally {
        _zCursor1.release();
      }
    }
    IEditor currentEditor=this.editorsPane.getCurrentEditor();
    if (rules.size() == 1) {
      NavigationActionProcessor.executeNavigationAction(new EditorNavigationCommand(rules.get(0),currentEditor,this.editorsPane),this.project);
      return;
    }
    MyMenu m=new MyMenu(rules,this.operationContext);
    int x=0;
    int y=0;
    EditorCell cell=context.get(EditorCell.class);
    if (cell != null) {
      x=cell.getX();
      y=cell.getY();
    }
    Component invoker;
    if (currentEditor == null) {
      invoker=context.getFrame();
    }
 else {
      invoker=currentEditor.getCurrentEditorComponent();
    }
    m.show(invoker,x,y);
  }
}
