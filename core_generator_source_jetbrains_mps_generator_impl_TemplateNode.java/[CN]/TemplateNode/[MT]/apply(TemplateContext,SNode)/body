{
  final TemplateExecutionEnvironment env=context.getEnvironment();
  final TemplateGenerator generator=env.getGenerator();
  if (myMold == null) {
synchronized (this) {
      if (myMold == null) {
        myMold=new Mold(myNode,generator.getQuerySource(),generator.getLogger());
      }
    }
  }
  for (int i=0; i < myMold.myTemplateProperties.length; ) {
    outputNode.setProperty(myMold.myTemplateProperties[i++],myMold.myTemplateProperties[i++]);
  }
  for (  PropertyMacro pm : myMold.myMacroProperties) {
    pm.expand(context,outputNode);
  }
  for (  Map.Entry<String,MacroResolver> e : myMold.myMacroRefs.entrySet()) {
    final String refMacroRole=e.getKey();
    final MacroResolver mr=e.getValue();
    ReferenceInfo_Macro refInfo=new ReferenceInfo_Macro(mr,outputNode,refMacroRole,context);
    PostponedReference postponedReference=generator.register(new PostponedReference(refInfo));
    postponedReference.setReferenceInOutputSourceNode();
  }
  for (  RefInfo r : myMold.myStaticRefs) {
    SReference newReference=new StaticReference(r.role,outputNode,r.targetModel,r.targetId,r.resolveInfo);
    outputNode.setReference(r.role,newReference);
  }
  for (  RefInfo r : myMold.myInnerRefs) {
    ReferenceInfo_Template refInfo=new ReferenceInfo_Template(outputNode,r.role,getTemplateNodeReference(),GeneratorUtil.getTemplateNodeId(r.targetNode),r.resolveInfo,context);
    PostponedReference postponedReference=generator.register(new PostponedReference(refInfo));
    postponedReference.setReferenceInOutputSourceNode();
  }
  for (  RefInfo r : myMold.myOtherRefs) {
    outputNode.setReferenceTarget(r.role,r.targetNode);
  }
}
