{
  final ArrayList<String> propsHandledWithMacro=new ArrayList<String>();
  final ArrayList<SNode> templateChildNodes=new ArrayList<SNode>();
  final ArrayList<PropertyMacro> propertyMacros=new ArrayList<PropertyMacro>();
  final HashMap<String,MacroResolver> refMacros=new HashMap<String,MacroResolver>();
  for (  SNode templateChildNode : templateNode.getChildren()) {
    String templateChildNodeConcept=templateChildNode.getConcept().getQualifiedName();
    if (GeneratorUtilEx.isTemplateLanguageElement(templateChildNodeConcept)) {
      if (templateChildNodeConcept.equals(RuleUtil.concept_PropertyMacro)) {
        final String propertyName=AttributeOperations.getPropertyName(templateChildNode);
        propsHandledWithMacro.add(propertyName);
        final PropertyValueQuery q=gqps.getQueryProvider(templateChildNode.getReference()).getPropertyValueQuery(templateChildNode);
        propertyMacros.add(new PropertyMacro(q,templateChildNode.getReference()));
      }
 else       if (templateChildNodeConcept.equals(RuleUtil.concept_ReferenceMacro)) {
        final String refMacroRole=AttributeOperations.getLinkRole(templateChildNode);
        MacroResolver mr=new MacroResolver(templateChildNode,templateNode.getReferenceTarget(refMacroRole));
        refMacros.put(refMacroRole,mr);
      }
    }
 else {
      templateChildNodes.add(templateChildNode);
    }
  }
  myChildTemplates=templateChildNodes.isEmpty() ? Collections.<SNode>emptyList() : Arrays.asList(templateChildNodes.toArray(new SNode[templateChildNodes.size()]));
  myMacroRefs=refMacros.isEmpty() ? Collections.<String,MacroResolver>emptyMap() : refMacros;
  myMacroProperties=propertyMacros.toArray(new PropertyMacro[propertyMacros.size()]);
  final ArrayList<String> templateProps=new ArrayList<String>();
  for (  String name : templateNode.getPropertyNames()) {
    if (propsHandledWithMacro.contains(name)) {
      continue;
    }
    templateProps.add(name);
    templateProps.add(templateNode.getProperty(name));
  }
  myTemplateProperties=templateProps.toArray(new String[templateProps.size()]);
  final ArrayList<RefInfo> externalStaticRefs=new ArrayList<RefInfo>();
  final ArrayList<RefInfo> internalRefs=new ArrayList<RefInfo>();
  final ArrayList<RefInfo> otherRefs=new ArrayList<RefInfo>();
  final SModel templateModel=templateNode.getModel();
  final SModelReference templateModelReference=templateModel.getReference();
  for (  SReference reference : templateNode.getReferences()) {
    if (refMacros.containsKey(reference.getRole())) {
      continue;
    }
    if (reference instanceof StaticReference) {
      SModelReference targetModelReference=reference.getTargetSModelReference();
      if (targetModelReference != null && !(templateModelReference.equals(targetModelReference))) {
        externalStaticRefs.add(new RefInfo(reference.getRole(),((StaticReference)reference).getResolveInfo(),targetModelReference,reference.getTargetNodeId()));
        continue;
      }
    }
    SNode templateReferentNode=reference.getTargetNode();
    if (templateReferentNode == null) {
      String msg="cannot resolve reference in template model; role: %s in %s";
      log.error(templateNode.getReference(),String.format(msg,reference.getRole(),SNodeOperations.getDebugText(templateNode)));
      continue;
    }
    if (templateReferentNode.getModel() == templateModel) {
      String resolveInfo=SNodeOperations.getResolveInfo(templateReferentNode);
      internalRefs.add(new RefInfo(reference.getRole(),resolveInfo,templateReferentNode));
    }
 else {
      otherRefs.add(new RefInfo(reference.getRole(),null,templateReferentNode));
    }
  }
  myStaticRefs=externalStaticRefs.toArray(new RefInfo[externalStaticRefs.size()]);
  myInnerRefs=internalRefs.toArray(new RefInfo[internalRefs.size()]);
  myOtherRefs=otherRefs.toArray(new RefInfo[otherRefs.size()]);
}
