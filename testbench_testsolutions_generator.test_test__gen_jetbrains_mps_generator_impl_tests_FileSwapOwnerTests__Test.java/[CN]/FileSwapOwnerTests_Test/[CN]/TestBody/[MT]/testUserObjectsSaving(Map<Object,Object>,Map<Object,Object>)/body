{
  SNode var1732396662099564454=getNodeById("1732396662099564449");
  try {
    for (    IMapping<Object,Object> object : MapSequence.fromMap(userObjects)) {
      SNodeOperations.cast(getNodeById("1732396662099564449"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")).putUserObject(object.key(),object.value());
    }
    SNode readNode=FileSwapOwner.writeAndReadNode(SNodeOperations.cast(getNodeById("1732396662099564449"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
    SModel model=TemporaryModels.getInstance().create(false,false,TempModuleOptions.forDefaultModule());
    try {
      model.addRootNode(readNode);
{
        List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("1732396662099564449"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")));
        List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),readNode);
        Assert.assertNull("The nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",new NodesMatcher().match(nodesBefore,nodesAfter));
      }
      for (      IMapping<Object,Object> object : MapSequence.fromMap(userObjects)) {
        if (MapSequence.fromMap(userObjectsToLoose).contains(object)) {
          Assert.assertNull("User object " + object + " should have been lost.",readNode.getUserObject(object.key()));
        }
 else {
          Assert.assertEquals("User object " + object + " was lost.",object.value(),readNode.getUserObject(object.key()));
        }
      }
    }
  finally {
      TemporaryModels.getInstance().dispose(model);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    org.junit.Assert.fail(e.getMessage());
  }
}
