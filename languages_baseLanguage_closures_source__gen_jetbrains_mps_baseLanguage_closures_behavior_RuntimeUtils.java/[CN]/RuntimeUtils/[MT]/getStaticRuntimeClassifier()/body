{
synchronized (RuntimeUtils.class) {
    if (STATIC_RUNTIME_CLASSIFIERS == null) {
      STATIC_RUNTIME_CLASSIFIERS=MapSequence.fromMap(new HashMap<String,SNode>());
      for (      SNode cls : ListSequence.fromList(SModelOperations.getRoots(getStaticRuntimeModel(),"jetbrains.mps.baseLanguage.structure.Classifier")).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SLinkOperations.getTargets(it,"member",true);
        }
      }
).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Classifier");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Classifier");
        }
      }
)) {
        MapSequence.fromMap(STATIC_RUNTIME_CLASSIFIERS).put(SPropertyOperations.getString(cls,"nestedName"),cls);
      }
      ClassLoaderManager.getInstance().addClassesHandler(new MPSClassesListenerAdapter(){
        @Override public void beforeClassesUnloaded(        Set<SModule> modules){
synchronized (RuntimeUtils.class) {
            STATIC_RUNTIME_CLASSIFIERS=null;
          }
          ClassLoaderManager.getInstance().removeClassesHandler(this);
        }
      }
);
    }
  }
  return STATIC_RUNTIME_CLASSIFIERS;
}
