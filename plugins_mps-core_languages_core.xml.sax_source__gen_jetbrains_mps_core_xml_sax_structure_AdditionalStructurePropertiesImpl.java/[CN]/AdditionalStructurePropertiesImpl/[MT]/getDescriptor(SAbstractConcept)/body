{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0bb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_XMLSAXAttributeHandler;
      }
    break;
case 1:
  if (true) {
    return props_XMLSAXAttributeHandler_value;
  }
break;
case 2:
if (true) {
return props_XMLSAXAttributeReference;
}
break;
case 3:
if (true) {
return props_XMLSAXAttributeRule;
}
break;
case 4:
if (true) {
return props_XMLSAXBreakStatement;
}
break;
case 5:
if (true) {
return props_XMLSAXChildHandler;
}
break;
case 6:
if (true) {
return props_XMLSAXChildHandler_childObject;
}
break;
case 7:
if (true) {
return props_XMLSAXChildRule;
}
break;
case 8:
if (true) {
return props_XMLSAXChildRuleCondition;
}
break;
case 9:
if (true) {
return props_XMLSAXDefaultChildHandler;
}
break;
case 10:
if (true) {
return props_XMLSAXDefaultChildHandler_tagName;
}
break;
case 11:
if (true) {
return props_XMLSAXDefaultChildRule;
}
break;
case 12:
if (true) {
return props_XMLSAXFieldDeclaration;
}
break;
case 13:
if (true) {
return props_XMLSAXFieldReference;
}
break;
case 14:
if (true) {
return props_XMLSAXHandlerFunction;
}
break;
case 15:
if (true) {
return props_XMLSAXHandler_resultObject;
}
break;
case 16:
if (true) {
return props_XMLSAXLocatorExpression;
}
break;
case 17:
if (true) {
return props_XMLSAXNodeCreator;
}
break;
case 18:
if (true) {
return props_XMLSAXNodeRule;
}
break;
case 19:
if (true) {
return props_XMLSAXNodeRuleParam;
}
break;
case 20:
if (true) {
return props_XMLSAXNodeRuleParamRef;
}
break;
case 21:
if (true) {
return props_XMLSAXNodeValidator;
}
break;
case 22:
if (true) {
return props_XMLSAXParser;
}
break;
case 23:
if (true) {
return props_XMLSAXTextHandler;
}
break;
case 24:
if (true) {
return props_XMLSAXTextHandler_value;
}
break;
case 25:
if (true) {
return props_XMLSAXTextRule;
}
break;
default :
}
}
throw new IllegalStateException();
}
