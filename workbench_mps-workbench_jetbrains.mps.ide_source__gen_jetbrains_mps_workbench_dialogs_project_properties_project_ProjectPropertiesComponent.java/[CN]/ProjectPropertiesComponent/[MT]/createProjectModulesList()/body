{
  final JBList list=new JBList(new ProjectPropertiesComponent.PathsListModel());
  list.setCellRenderer(new PathRenderer());
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(list);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final TreeFileChooser chooser=new TreeFileChooser();
      chooser.setExtensionFileFilter(MPSExtentions.DOT_LANGUAGE,MPSExtentions.DOT_SOLUTION,MPSExtentions.DOT_LIBRARY,MPSExtentions.DOT_DEVKIT);
      chooser.setInitialFile(VirtualFileUtils.toIFile(myProject.getProject().getBaseDir()));
      final IFile file=chooser.showDialog();
      if (file == null) {
        return;
      }
      ModulePath path=new ModulePath(file.toPath().toString());
      for (      ModulePath p : ((ProjectPropertiesComponent.PathsListModel)list.getModel()).getPaths()) {
        if (p.getPath().equals(path.getPath())) {
          list.setSelectedValue(p,true);
          return;
        }
      }
      ((ProjectPropertiesComponent.PathsListModel)list.getModel()).addPath(path);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      ((ProjectPropertiesComponent.PathsListModel)list.getModel()).removePath(list.getSelectedValue());
    }
  }
).disableUpAction().disableDownAction();
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel panel=decorator.createPanel();
  panel.setBorder(IdeBorderFactory.createTitledBorder("Modules",false));
  return panel;
}
