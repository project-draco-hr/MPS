{
  FastNodeFinder fnf=FastNodeFinderManager.get(model);
  Translate<SNode,SNode> parentExtractor=new Translate<SNode,SNode>(){
    @Override public SNode translate(    SNode t){
      return t.getParent();
    }
  }
;
  Translate<SNode,SNode> inlineTemplateExtractor=new Translate<SNode,SNode>(){
    @Override public SNode translate(    SNode rc){
      return RuleUtil.getInlineTemplate_templateNode(rc);
    }
  }
;
  processTemplateNode(fnf.getNodes(RuleUtil.concept_TemplateFragment,false),parentExtractor);
  processTemplateNode(fnf.getNodes(RuleUtil.concept_RootTemplateAnnotation,false),parentExtractor);
  processTemplateNode(fnf.getNodes(RuleUtil.concept_InlineTemplate_RuleConsequence,false),inlineTemplateExtractor);
  scanScriptsForChangeOperations(fnf);
  processQueryNodes(fnf.getNodes(RuleUtil.concept_TemplateQueryBase,true));
  if (!fnf.getNodes(RuleUtil.concept_PatternExpression,true).isEmpty()) {
    myQueryLanguages.add(RuleUtil.getPatternLanguage());
  }
  return this;
}
