{
  monitor.start(getDescription(),2);
  try {
    SNode nodeParentMethod=SNodeOperations.getNodeAncestorWhereConceptInList(node,new SConcept[]{MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081236700938l,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")},false,false);
    List<SNode> overridingMethods=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope,monitor.subTask(1));
    ListSequence.fromList(overridingMethods).addElement(nodeParentMethod);
    for (    SNode methodNode : ListSequence.fromList(overridingMethods)) {
      SNode parameterNode=ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(methodNode,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).getElement(SNodeOperations.getIndexInParent(node));
      for (      SNode parameterUsage : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",parameterNode,scope,monitor.subTask(1)))) {
        ListSequence.fromList(_results).addElement(parameterUsage);
      }
    }
  }
  finally {
    monitor.done();
  }
}
