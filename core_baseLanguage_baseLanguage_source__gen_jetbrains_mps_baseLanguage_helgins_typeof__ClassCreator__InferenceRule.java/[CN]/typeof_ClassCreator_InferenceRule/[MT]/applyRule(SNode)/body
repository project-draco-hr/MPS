{
  if (SLinkOperations.getTarget(creator,"baseMethodDeclaration",false) == null) {
    return;
  }
  if (!(SLinkOperations.getCount(creator,"actualArgument") == SLinkOperations.getCount(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"parameter"))) {
    TypeChecker.getInstance().reportTypeError(creator,"wrong number of arguments","jetbrains.mps.baseLanguage.helgins","1212781605955");
  }
  if (!(SLinkOperations.getCount(creator,"typeParameter") == 0 || SLinkOperations.getCount(creator,"typeParameter") == SLinkOperations.getCount(SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),"typeVariableDeclaration"))) {
    TypeChecker.getInstance().reportTypeError(creator,"wrong number of type parameters","jetbrains.mps.baseLanguage.helgins","1212781605971");
  }
  for (  SNode parameter : SLinkOperations.getTargets(creator,"typeParameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(parameter,SLinkOperations.getTarget(new QuotationClass_99().createNode(),"descriptor",false),false,false)))) {
      TypeChecker.getInstance().reportTypeError(parameter,"primitive type not allowed","jetbrains.mps.baseLanguage.helgins","1212781606006");
    }
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  SNode constructedType=new QuotationClass_100().createNode(SLinkOperations.getTargets(creator,"typeParameter",true),methodClassifier);
{
    SNode _nodeToCheck_1029348928467=creator;
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(_nodeToCheck_1029348928467,"jetbrains.mps.baseLanguage.helgins","1212781606043",true),constructedType,_nodeToCheck_1029348928467,null,"jetbrains.mps.baseLanguage.helgins","1212781606039");
  }
  final SNode instanceType_typevar_1212781606045=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=creator;
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1212781606045),constructedType,_nodeToCheck_1029348928467,null,"jetbrains.mps.baseLanguage.helgins","1212781606046");
  }
{
    final SNode _representatorVar3=TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1212781606045);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(_representatorVar3,new Runnable(){
      public void run(){
        Map<SNode,List<SNode>> mmap=new HashMap<SNode,List<SNode>>();
        RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(creator,null,mmap);
        RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(methodClassifier,TypeChecker.getInstance().getEquationManager().getRepresentator(instanceType_typevar_1212781606045),mmap);
        RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(mmap);
      }
    }
,"jetbrains.mps.baseLanguage.helgins","1212781606052");
  }
}
