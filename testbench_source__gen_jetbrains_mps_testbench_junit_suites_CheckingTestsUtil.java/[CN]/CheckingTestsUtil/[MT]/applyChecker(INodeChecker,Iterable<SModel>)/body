{
  final List<String> errors=new ArrayList<String>();
  for (  SModel sm : models) {
    if (!(SModelStereotype.isUserModel(sm))) {
      continue;
    }
    if (SModelStereotype.isGeneratorModel(sm)) {
      continue;
    }
    for (    SNode root : SModelOperations.roots(((SModel)sm),null)) {
      Set<IErrorReporter> errorReporters=null;
      try {
        errorReporters=checker.getErrors(root,sm.getRepository());
      }
 catch (      IllegalStateException e) {
        errors.add(e.getMessage());
      }
      for (      IErrorReporter reporter : errorReporters) {
        if (!(ErrorReportUtil.shouldReportError(reporter.getSNode()))) {
          continue;
        }
        if (reporter.getMessageStatus().equals(MessageStatus.ERROR)) {
          if (reporter.reportError().startsWith("a class should have")) {
            continue;
          }
          SNode node=reporter.getSNode();
          if (!(CheckingTestsUtil.filterIssue(node))) {
            continue;
          }
          myStats.reportError();
          errors.add("Error message: " + reporter.reportError() + "   model: "+ SNodeOperations.getModelLongName(node.getModel())+ " root: "+ node.getContainingRoot()+ " node: "+ node);
        }
        if (reporter.getMessageStatus().equals(MessageStatus.WARNING)) {
          myStats.reportWarning();
        }
      }
    }
  }
  return errors;
}
