{
  final StringBuilder errorMessages=new StringBuilder();
  errorMessages.append("errors in model: ").append(sm.getReference().toString()).append("\n");
  final Wrappers._boolean withErrors=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      ValidationUtil.validateModel(sm,new Consumer<ValidationProblem>(){
        public void consume(        ValidationProblem problem){
          if (problem.getSeverity() != ValidationProblem.Severity.ERROR) {
            return;
          }
          withErrors.value=true;
          errorMessages.append("\t").append(problem.getMessage()).append("\n");
        }
      }
);
    }
  }
);
  for (  SNode node : SNodeUtil.getDescendants(sm)) {
    if (SModelUtil.findConceptDeclaration(node.getConcept().getQualifiedName()) == null) {
      errorMessages.append("Unknown concept ");
      errorMessages.append(node.getConcept().getQualifiedName());
      errorMessages.append("\n");
    }
  }
  for (  SNode node : SNodeUtil.getDescendants(sm)) {
    for (    SReference ref : node.getReferences()) {
      if (jetbrains.mps.smodel.SNodeUtil.hasReferenceMacro(node,ref.getRole())) {
        continue;
      }
      if (SNodeOperations.getTargetNodeSilently(ref) == null) {
        errorMessages.append("Broken reference in model {").append(SNodeOperations.getModelLongName(node.getModel())).append("}").append(" node ").append(node.getNodeId().toString()).append("(").append(node).append(")\n");
      }
    }
  }
  return errorMessages;
}
