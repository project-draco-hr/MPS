{
  StringBuilder errorMessages=new StringBuilder();
  List<String> validationResult=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
    public List<String> compute(){
      return new ModelValidator(sm).validate();
    }
  }
);
  if (!(validationResult.isEmpty())) {
    errorMessages.append("errors in model: ").append(sm.getReference().toString()).append("\n");
    for (    String item : validationResult) {
      errorMessages.append("\t");
      errorMessages.append(item);
      errorMessages.append("\n");
    }
  }
  for (  SNode node : SNodeUtil.getDescendants(sm)) {
    if (SModelUtil.findConceptDeclaration(node.getConcept().getQualifiedName(),GlobalScope.getInstance()) == null) {
      errorMessages.append("Unknown concept ");
      errorMessages.append(node.getConcept().getQualifiedName());
      errorMessages.append("\n");
    }
  }
  for (  SNode node : SNodeUtil.getDescendants(sm)) {
    for (    SReference ref : node.getReferences()) {
      if (jetbrains.mps.smodel.SNodeUtil.hasReferenceMacro(node,ref.getRole())) {
        continue;
      }
      if (SNodeOperations.getTargetNodeSilently(ref) == null) {
        errorMessages.append("Broken reference in model {").append(SNodeOperations.getModelLongName(node.getModel())).append("}").append(" node ").append(node.getNodeId().toString()).append("(").append(node).append(")\n");
      }
    }
  }
  return errorMessages;
}
