{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b,fqName)) {
case 19:
    return new InIntervalExpression_BehaviorDescriptor();
case 20:
  return new IntervalContainsExpression_BehaviorDescriptor();
case 21:
return new IntervalLiteral_BehaviorDescriptor();
case 22:
return new IntervalType_BehaviorDescriptor();
case 42:
return new PowExpression_BehaviorDescriptor();
case 31:
return new MatrixConstructor_BehaviorDescriptor();
case 47:
return new VectorType_BehaviorDescriptor();
case 38:
return new MatrixNorm_BehaviorDescriptor();
case 39:
return new MatrixType_BehaviorDescriptor();
case 26:
return new MathContext_BehaviorDescriptor();
case 41:
return new MatrixZero_BehaviorDescriptor();
case 24:
return new LiteralI_BehaviorDescriptor();
case 13:
return new DecimalMinusExpression_BehaviorDescriptor();
case 28:
return new MathSymbolIndex_BehaviorDescriptor();
case 43:
return new SineExpression_BehaviorDescriptor();
case 14:
return new DecimalMulExpression_BehaviorDescriptor();
case 45:
return new TransposeOperation_BehaviorDescriptor();
case 34:
return new MatrixInitializer_BehaviorDescriptor();
case 23:
return new LinearSolveOperation_BehaviorDescriptor();
case 30:
return new MathTypeCast_BehaviorDescriptor();
case 44:
return new TangentExpression_BehaviorDescriptor();
case 17:
return new DivExpressionFraction_BehaviorDescriptor();
case 0:
return new AbsExpression_BehaviorDescriptor();
case 27:
return new MathSymbolFromToIndex_BehaviorDescriptor();
case 25:
return new LogExpression_BehaviorDescriptor();
case 12:
return new DecimalDivExpression_BehaviorDescriptor();
case 29:
return new MathSymbolIndexReference_BehaviorDescriptor();
case 40:
return new MatrixUnit_BehaviorDescriptor();
case 16:
return new Determinant_BehaviorDescriptor();
case 6:
return new BigProdExpression_BehaviorDescriptor();
case 7:
return new BigSumExpression_BehaviorDescriptor();
case 37:
return new MatrixInverseOperation_BehaviorDescriptor();
case 11:
return new CosineExpression_BehaviorDescriptor();
case 2:
return new BigDecimalType_BehaviorDescriptor();
case 1:
return new BigComplexType_BehaviorDescriptor();
case 5:
return new BigMinExpression_BehaviorDescriptor();
case 8:
return new ComplexLiteral_BehaviorDescriptor();
case 9:
return new ComplexType_BehaviorDescriptor();
case 33:
return new MatrixIndexWildcard_BehaviorDescriptor();
case 46:
return new VectorInitializer_BehaviorDescriptor();
case 3:
return new BigIntegerType_BehaviorDescriptor();
case 18:
return new ExponentExpression_BehaviorDescriptor();
case 4:
return new BigMaxExpression_BehaviorDescriptor();
case 15:
return new DecimalPlusExpression_BehaviorDescriptor();
case 35:
return new MatrixInitializerIndex_BehaviorDescriptor();
case 32:
return new MatrixElementAccessExpression_BehaviorDescriptor();
case 36:
return new MatrixInitializerIndexReference_BehaviorDescriptor();
case 10:
return new ConjugateOperation_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
