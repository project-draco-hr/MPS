{
  try {
    final List<String> finders=ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        for (        String finderClass : GoToOverridingMethod_Action.this.finderClasses) {
          GeneratedFinder finder=FindUtils.getFinderByClassName(finderClass);
          if (finder.isApplicable(GoToOverridingMethod_Action.this.methodNode)) {
            ListSequence.fromList(finders).addElement(finderClass);
          }
        }
      }
    }
);
    final Set<SNode> nodes=SetSequence.fromSet(new HashSet<SNode>());
    ProgressManager.getInstance().run(new Task.Modal(GoToOverridingMethod_Action.this.project,"Searching...",true){
      public void run(      @NotNull final ProgressIndicator p){
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            String finder : ListSequence.fromList(finders)) {
              SetSequence.fromSet(nodes).addSequence(ListSequence.fromList(FindUtils.executeFinder(finder,GoToOverridingMethod_Action.this.methodNode,GlobalScope.getInstance(),p)));
            }
          }
        }
);
      }
    }
);
    RelativePoint relativePoint;
    if (event.getInputEvent() instanceof MouseEvent) {
      relativePoint=new RelativePoint((MouseEvent)event.getInputEvent());
    }
 else {
      Rectangle cellBounds=GoToOverridingMethod_Action.this.editorContext.getSelectedCell().getBounds();
      Point point=new Point(((int)cellBounds.getMinX()),((int)cellBounds.getMaxY()));
      relativePoint=new RelativePoint(GoToOverridingMethod_Action.this.editorComponent,point);
    }
    GoToHelper.showOverridingMethodsMenu(SetSequence.fromSet(nodes).toListSequence(),relativePoint,GoToOverridingMethod_Action.this.project);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GoToOverridingMethod",t);
  }
}
