{
  try {
    final List<String> finders=ListSequence.<String>fromList(new ArrayList<String>());
    final String[] methodName=new String[1];
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        methodName[0]=SPropertyOperations.getString(((SNode)MapSequence.<String,Object>fromMap(_params).get("methodNode")),"name");
        for (        String finderClass : GoToOverridingMethod_Action.this.finderClasses) {
          GeneratedFinder finder=FindUtils.getFinderByClassName(finderClass);
          if (finder.isApplicable(((SNode)MapSequence.<String,Object>fromMap(_params).get("methodNode")))) {
            ListSequence.<String>fromList(finders).addElement(finderClass);
          }
        }
      }
    }
);
    final Set<SNode> nodes=SetSequence.<SNode>fromSet(new HashSet<SNode>());
    ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.<String,Object>fromMap(_params).get("project")),"Searching...",true){
      public void run(      @NotNull final ProgressIndicator p){
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            String finder : ListSequence.<String>fromList(finders)) {
              SetSequence.fromSet(nodes).addSequence(ListSequence.<SNode>fromList(FindUtils.executeFinder(finder,((SNode)MapSequence.<String,Object>fromMap(_params).get("methodNode")),GlobalScope.getInstance(),p)));
            }
          }
        }
);
      }
    }
);
    Rectangle cellBounds=((EditorContext)MapSequence.<String,Object>fromMap(_params).get("editorContext")).getSelectedCell().getBounds();
    Point point=new Point(((int)cellBounds.getMinX()),((int)cellBounds.getMaxY()));
    RelativePoint relPoint=new RelativePoint(((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")),point);
    GoToHelper.showOverridingMethodsMenu(SetSequence.<SNode>fromSet(nodes).toListSequence(),relPoint,((Project)MapSequence.<String,Object>fromMap(_params).get("project")),methodName[0]);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GoToOverridingMethod",t);
  }
}
