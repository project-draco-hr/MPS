{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0al.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractClassifierReference;
      }
    break;
case 1:
  if (true) {
    return props_AbstractCreator;
  }
break;
case 2:
if (true) {
return props_AbstractForStatement;
}
break;
case 3:
if (true) {
return props_AbstractLoopStatement;
}
break;
case 4:
if (true) {
return props_AbstractOperation;
}
break;
case 5:
if (true) {
return props_AbstractUnaryNumberOperation;
}
break;
case 6:
if (true) {
return props_AdditionalForLoopVariable;
}
break;
case 7:
if (true) {
return props_AndAssignmentExpression;
}
break;
case 8:
if (true) {
return props_AndExpression;
}
break;
case 9:
if (true) {
return props_Annotation;
}
break;
case 10:
if (true) {
return props_AnnotationInstance;
}
break;
case 11:
if (true) {
return props_AnnotationInstanceExpression;
}
break;
case 12:
if (true) {
return props_AnnotationInstanceValue;
}
break;
case 13:
if (true) {
return props_AnnotationMethodDeclaration;
}
break;
case 14:
if (true) {
return props_AnonymousClass;
}
break;
case 15:
if (true) {
return props_AnonymousClassCreator;
}
break;
case 16:
if (true) {
return props_ArrayAccessExpression;
}
break;
case 17:
if (true) {
return props_ArrayClassExpression;
}
break;
case 18:
if (true) {
return props_ArrayCloneOperation;
}
break;
case 19:
if (true) {
return props_ArrayCreator;
}
break;
case 20:
if (true) {
return props_ArrayCreatorWithInitializer;
}
break;
case 21:
if (true) {
return props_ArrayLengthOperation;
}
break;
case 22:
if (true) {
return props_ArrayLiteral;
}
break;
case 23:
if (true) {
return props_ArrayType;
}
break;
case 24:
if (true) {
return props_AsExpression;
}
break;
case 25:
if (true) {
return props_AssertStatement;
}
break;
case 26:
if (true) {
return props_AssignmentExpression;
}
break;
case 27:
if (true) {
return props_BLBottomType;
}
break;
case 28:
if (true) {
return props_BaseAssignmentExpression;
}
break;
case 29:
if (true) {
return props_BaseMethodCall;
}
break;
case 30:
if (true) {
return props_BaseMethodDeclaration;
}
break;
case 31:
if (true) {
return props_BaseStringOperation;
}
break;
case 32:
if (true) {
return props_BaseVariableDeclaration;
}
break;
case 33:
if (true) {
return props_BaseVariableReference;
}
break;
case 34:
if (true) {
return props_BinaryBitwiseOperation;
}
break;
case 35:
if (true) {
return props_BinaryCompareOperation;
}
break;
case 36:
if (true) {
return props_BinaryOperation;
}
break;
case 37:
if (true) {
return props_BitwiseAndExpression;
}
break;
case 38:
if (true) {
return props_BitwiseNotExpression;
}
break;
case 39:
if (true) {
return props_BitwiseOrExpression;
}
break;
case 40:
if (true) {
return props_BitwiseXorExpression;
}
break;
case 41:
if (true) {
return props_BlockStatement;
}
break;
case 42:
if (true) {
return props_BooleanConstant;
}
break;
case 43:
if (true) {
return props_BooleanType;
}
break;
case 44:
if (true) {
return props_BreakStatement;
}
break;
case 45:
if (true) {
return props_ByteType;
}
break;
case 46:
if (true) {
return props_CastExpression;
}
break;
case 47:
if (true) {
return props_CatchClause;
}
break;
case 48:
if (true) {
return props_CharConstant;
}
break;
case 49:
if (true) {
return props_CharType;
}
break;
case 50:
if (true) {
return props_ClassConcept;
}
break;
case 51:
if (true) {
return props_ClassCreator;
}
break;
case 52:
if (true) {
return props_Classifier;
}
break;
case 53:
if (true) {
return props_ClassifierClassExpression;
}
break;
case 54:
if (true) {
return props_ClassifierMember;
}
break;
case 55:
if (true) {
return props_ClassifierType;
}
break;
case 56:
if (true) {
return props_Closure;
}
break;
case 57:
if (true) {
return props_ClosureParameter;
}
break;
case 58:
if (true) {
return props_ClosureParameterReference;
}
break;
case 59:
if (true) {
return props_Closureoid;
}
break;
case 60:
if (true) {
return props_CommentPart;
}
break;
case 61:
if (true) {
return props_CommentedStatement;
}
break;
case 62:
if (true) {
return props_CommentedStatementsBlock;
}
break;
case 63:
if (true) {
return props_ConceptFunction;
}
break;
case 64:
if (true) {
return props_ConceptFunctionParameter;
}
break;
case 65:
if (true) {
return props_ConstructorDeclaration;
}
break;
case 66:
if (true) {
return props_ConstructorInvocationStatement;
}
break;
case 67:
if (true) {
return props_ContextClassifierKind;
}
break;
case 68:
if (true) {
return props_ContinueStatement;
}
break;
case 69:
if (true) {
return props_CustomPropertyImplementation;
}
break;
case 70:
if (true) {
return props_CustomSetterPropertyImplementation;
}
break;
case 71:
if (true) {
return props_DefaultClassCreator;
}
break;
case 72:
if (true) {
return props_DefaultGetAccessor;
}
break;
case 73:
if (true) {
return props_DefaultPropertyImplementation;
}
break;
case 74:
if (true) {
return props_DefaultSetAccessor;
}
break;
case 75:
if (true) {
return props_DimensionExpression;
}
break;
case 76:
if (true) {
return props_DivAssignmentExpression;
}
break;
case 77:
if (true) {
return props_DivExpression;
}
break;
case 78:
if (true) {
return props_DoWhileStatement;
}
break;
case 79:
if (true) {
return props_DotExpression;
}
break;
case 80:
if (true) {
return props_DoubleType;
}
break;
case 81:
if (true) {
return props_ElsifClause;
}
break;
case 82:
if (true) {
return props_EnumClass;
}
break;
case 83:
if (true) {
return props_EnumConstantDeclaration;
}
break;
case 84:
if (true) {
return props_EnumConstantReference;
}
break;
case 85:
if (true) {
return props_EnumValueOfExpression;
}
break;
case 86:
if (true) {
return props_EnumValuesExpression;
}
break;
case 87:
if (true) {
return props_EqualsExpression;
}
break;
case 88:
if (true) {
return props_EscapeOperation;
}
break;
case 89:
if (true) {
return props_Expression;
}
break;
case 90:
if (true) {
return props_ExpressionStatement;
}
break;
case 91:
if (true) {
return props_FieldDeclaration;
}
break;
case 92:
if (true) {
return props_FieldReferenceOperation;
}
break;
case 93:
if (true) {
return props_FloatType;
}
break;
case 94:
if (true) {
return props_FloatingPointConstant;
}
break;
case 95:
if (true) {
return props_FloatingPointFloatConstant;
}
break;
case 96:
if (true) {
return props_ForStatement;
}
break;
case 97:
if (true) {
return props_ForeachStatement;
}
break;
case 98:
if (true) {
return props_GenericDeclaration;
}
break;
case 99:
if (true) {
return props_GenericNewExpression;
}
break;
case 100:
if (true) {
return props_GetAccessor;
}
break;
case 101:
if (true) {
return props_GreaterThanExpression;
}
break;
case 102:
if (true) {
return props_GreaterThanOrEqualsExpression;
}
break;
case 103:
if (true) {
return props_HasAnnotation;
}
break;
case 104:
if (true) {
return props_HexIntegerLiteral;
}
break;
case 105:
if (true) {
return props_IAnonymousClass;
}
break;
case 106:
if (true) {
return props_IBLDeprecatable;
}
break;
case 107:
if (true) {
return props_IBinaryLike;
}
break;
case 108:
if (true) {
return props_IClassifier;
}
break;
case 109:
if (true) {
return props_IClassifierMember;
}
break;
case 110:
if (true) {
return props_IClassifierType;
}
break;
case 111:
if (true) {
return props_IConditional;
}
break;
case 112:
if (true) {
return props_IContainsStatementList;
}
break;
case 113:
if (true) {
return props_IControlFlowInterrupter;
}
break;
case 114:
if (true) {
return props_IExtractMethodAvailable;
}
break;
case 115:
if (true) {
return props_IFinalWrapper;
}
break;
case 116:
if (true) {
return props_IGenericType;
}
break;
case 117:
if (true) {
return props_IHasModifiers;
}
break;
case 118:
if (true) {
return props_IIncompleteParen;
}
break;
case 119:
if (true) {
return props_IInternalType;
}
break;
case 120:
if (true) {
return props_ILocalDeclaration;
}
break;
case 121:
if (true) {
return props_ILocalReference;
}
break;
case 122:
if (true) {
return props_ILocalVariableElement;
}
break;
case 123:
if (true) {
return props_ILocalVariableElementList;
}
break;
case 124:
if (true) {
return props_IMemberContainer;
}
break;
case 125:
if (true) {
return props_IMethodCall;
}
break;
case 126:
if (true) {
return props_IMethodLike;
}
break;
case 127:
if (true) {
return props_IOperation;
}
break;
case 128:
if (true) {
return props_IParameter;
}
break;
case 129:
if (true) {
return props_ISkipsReturn;
}
break;
case 130:
if (true) {
return props_IStatementListContainer;
}
break;
case 131:
if (true) {
return props_IStaticContainerForMethods;
}
break;
case 132:
if (true) {
return props_IThisExpression;
}
break;
case 133:
if (true) {
return props_ITryCatchStatement;
}
break;
case 134:
if (true) {
return props_ITypeApplicable;
}
break;
case 135:
if (true) {
return props_IValidIdentifier;
}
break;
case 136:
if (true) {
return props_IVariableAssignment;
}
break;
case 137:
if (true) {
return props_IVariableDeclaration;
}
break;
case 138:
if (true) {
return props_IVariableReference;
}
break;
case 139:
if (true) {
return props_IVisible;
}
break;
case 140:
if (true) {
return props_IWillBeClassifier;
}
break;
case 141:
if (true) {
return props_IYetUnresolved;
}
break;
case 142:
if (true) {
return props_IfStatement;
}
break;
case 143:
if (true) {
return props_ImplicitAnnotationInstanceValue;
}
break;
case 144:
if (true) {
return props_ImplicitAnnotationMethodKind;
}
break;
case 145:
if (true) {
return props_IncompleteLeftParen;
}
break;
case 146:
if (true) {
return props_IncompleteMemberDeclaration;
}
break;
case 147:
if (true) {
return props_IncompleteRightParen;
}
break;
case 148:
if (true) {
return props_InstanceInitializer;
}
break;
case 149:
if (true) {
return props_InstanceMethodCallOperation;
}
break;
case 150:
if (true) {
return props_InstanceMethodDeclaration;
}
break;
case 151:
if (true) {
return props_InstanceOfExpression;
}
break;
case 152:
if (true) {
return props_IntegerConstant;
}
break;
case 153:
if (true) {
return props_IntegerLiteral;
}
break;
case 154:
if (true) {
return props_IntegerType;
}
break;
case 155:
if (true) {
return props_Interface;
}
break;
case 156:
if (true) {
return props_IsEmptyOperation;
}
break;
case 157:
if (true) {
return props_IsNotEmptyOperation;
}
break;
case 158:
if (true) {
return props_JavaImport;
}
break;
case 159:
if (true) {
return props_JavaImports;
}
break;
case 160:
if (true) {
return props_LeftShiftAssignmentExpression;
}
break;
case 161:
if (true) {
return props_LessThanExpression;
}
break;
case 162:
if (true) {
return props_LessThanOrEqualsExpression;
}
break;
case 163:
if (true) {
return props_LocalInstanceFieldReference;
}
break;
case 164:
if (true) {
return props_LocalInstanceMethodCall;
}
break;
case 165:
if (true) {
return props_LocalMethodCall;
}
break;
case 166:
if (true) {
return props_LocalPropertyReference;
}
break;
case 167:
if (true) {
return props_LocalStaticFieldReference;
}
break;
case 168:
if (true) {
return props_LocalStaticMethodCall;
}
break;
case 169:
if (true) {
return props_LocalToMethodKind;
}
break;
case 170:
if (true) {
return props_LocalVariableDeclaration;
}
break;
case 171:
if (true) {
return props_LocalVariableDeclarationStatement;
}
break;
case 172:
if (true) {
return props_LocalVariableReference;
}
break;
case 173:
if (true) {
return props_LongLiteral;
}
break;
case 174:
if (true) {
return props_LongType;
}
break;
case 175:
if (true) {
return props_LoopLabel;
}
break;
case 176:
if (true) {
return props_LoopLabelReference;
}
break;
case 177:
if (true) {
return props_LowerBoundType;
}
break;
case 178:
if (true) {
return props_MethodDeclaration;
}
break;
case 179:
if (true) {
return props_MinusAssignmentExpression;
}
break;
case 180:
if (true) {
return props_MinusExpression;
}
break;
case 181:
if (true) {
return props_Modifier;
}
break;
case 182:
if (true) {
return props_MulAssignmentExpression;
}
break;
case 183:
if (true) {
return props_MulExpression;
}
break;
case 184:
if (true) {
return props_NPEEqualsExpression;
}
break;
case 185:
if (true) {
return props_NPENotEqualsExpression;
}
break;
case 186:
if (true) {
return props_NestedNewExpression;
}
break;
case 187:
if (true) {
return props_NotEqualsExpression;
}
break;
case 188:
if (true) {
return props_NotExpression;
}
break;
case 189:
if (true) {
return props_NullLiteral;
}
break;
case 190:
if (true) {
return props_NullType;
}
break;
case 191:
if (true) {
return props_Number;
}
break;
case 192:
if (true) {
return props_OperationAssignmentExpression;
}
break;
case 193:
if (true) {
return props_OrAssignmentExpression;
}
break;
case 194:
if (true) {
return props_OrExpression;
}
break;
case 195:
if (true) {
return props_ParameterDeclaration;
}
break;
case 196:
if (true) {
return props_ParameterReference;
}
break;
case 197:
if (true) {
return props_ParenthesizedExpression;
}
break;
case 198:
if (true) {
return props_PlaceholderMember;
}
break;
case 199:
if (true) {
return props_PlusAssignmentExpression;
}
break;
case 200:
if (true) {
return props_PlusExpression;
}
break;
case 201:
if (true) {
return props_PostfixDecrementExpression;
}
break;
case 202:
if (true) {
return props_PostfixIncrementExpression;
}
break;
case 203:
if (true) {
return props_PrefixDecrementExpression;
}
break;
case 204:
if (true) {
return props_PrefixIncrementExpression;
}
break;
case 205:
if (true) {
return props_PrimitiveClassExpression;
}
break;
case 206:
if (true) {
return props_PrimitiveType;
}
break;
case 207:
if (true) {
return props_PrivateVisibility;
}
break;
case 208:
if (true) {
return props_Property;
}
break;
case 209:
if (true) {
return props_PropertyImplementation;
}
break;
case 210:
if (true) {
return props_PropertyReference;
}
break;
case 211:
if (true) {
return props_PropertyValueReference;
}
break;
case 212:
if (true) {
return props_ProtectedVisibility;
}
break;
case 213:
if (true) {
return props_PublicVisibility;
}
break;
case 214:
if (true) {
return props_QualifiedSuperMethodCall;
}
break;
case 215:
if (true) {
return props_RemAssignmentExpression;
}
break;
case 216:
if (true) {
return props_RemExpression;
}
break;
case 217:
if (true) {
return props_RemarkStatement;
}
break;
case 218:
if (true) {
return props_ReturnStatement;
}
break;
case 219:
if (true) {
return props_RightShiftAssignmentExpression;
}
break;
case 220:
if (true) {
return props_SetAccessor;
}
break;
case 221:
if (true) {
return props_ShiftLeftExpression;
}
break;
case 222:
if (true) {
return props_ShiftRightExpression;
}
break;
case 223:
if (true) {
return props_ShiftRightUnsignedExpression;
}
break;
case 224:
if (true) {
return props_ShortType;
}
break;
case 225:
if (true) {
return props_SingleLineComment;
}
break;
case 226:
if (true) {
return props_Statement;
}
break;
case 227:
if (true) {
return props_StatementCommentPart;
}
break;
case 228:
if (true) {
return props_StatementList;
}
break;
case 229:
if (true) {
return props_StaticFieldDeclaration;
}
break;
case 230:
if (true) {
return props_StaticFieldReference;
}
break;
case 231:
if (true) {
return props_StaticInitializer;
}
break;
case 232:
if (true) {
return props_StaticKind;
}
break;
case 233:
if (true) {
return props_StaticMethodCall;
}
break;
case 234:
if (true) {
return props_StaticMethodDeclaration;
}
break;
case 235:
if (true) {
return props_StringBooleanOperation;
}
break;
case 236:
if (true) {
return props_StringLiteral;
}
break;
case 237:
if (true) {
return props_StringToken;
}
break;
case 238:
if (true) {
return props_StringType;
}
break;
case 239:
if (true) {
return props_StubStatementList;
}
break;
case 240:
if (true) {
return props_SubstringExpression;
}
break;
case 241:
if (true) {
return props_SuperConstructorInvocation;
}
break;
case 242:
if (true) {
return props_SuperConstructorKind;
}
break;
case 243:
if (true) {
return props_SuperInerfaceKind;
}
break;
case 244:
if (true) {
return props_SuperMethodCall;
}
break;
case 245:
if (true) {
return props_SuperMethodKind;
}
break;
case 246:
if (true) {
return props_SwitchCase;
}
break;
case 247:
if (true) {
return props_SwitchStatement;
}
break;
case 248:
if (true) {
return props_SynchronizedStatement;
}
break;
case 249:
if (true) {
return props_TernaryOperatorExpression;
}
break;
case 250:
if (true) {
return props_TextCommentPart;
}
break;
case 251:
if (true) {
return props_ThisConstructorInvocation;
}
break;
case 252:
if (true) {
return props_ThisConstructorKind;
}
break;
case 253:
if (true) {
return props_ThisExpression;
}
break;
case 254:
if (true) {
return props_ThrowStatement;
}
break;
case 255:
if (true) {
return props_Tokens;
}
break;
case 256:
if (true) {
return props_TrimOperation;
}
break;
case 257:
if (true) {
return props_TryCatchStatement;
}
break;
case 258:
if (true) {
return props_TryStatement;
}
break;
case 259:
if (true) {
return props_Type;
}
break;
case 260:
if (true) {
return props_TypeAnnotable;
}
break;
case 261:
if (true) {
return props_TypeDerivable;
}
break;
case 262:
if (true) {
return props_TypeVariableDeclaration;
}
break;
case 263:
if (true) {
return props_TypeVariableReference;
}
break;
case 264:
if (true) {
return props_UnaryMinus;
}
break;
case 265:
if (true) {
return props_UndefinedType;
}
break;
case 266:
if (true) {
return props_UnknownConsCall;
}
break;
case 267:
if (true) {
return props_UnknownDotCall;
}
break;
case 268:
if (true) {
return props_UnknownLocalCall;
}
break;
case 269:
if (true) {
return props_UnknownNameRef;
}
break;
case 270:
if (true) {
return props_UnknownNew;
}
break;
case 271:
if (true) {
return props_UnresolvedNameReference;
}
break;
case 272:
if (true) {
return props_UnsignedRightShiftAssignmentExpression;
}
break;
case 273:
if (true) {
return props_UpperBoundType;
}
break;
case 274:
if (true) {
return props_UsingStatement;
}
break;
case 275:
if (true) {
return props_ValueParameter;
}
break;
case 276:
if (true) {
return props_VarType;
}
break;
case 277:
if (true) {
return props_VariableArityType;
}
break;
case 278:
if (true) {
return props_VariableDeclaration;
}
break;
case 279:
if (true) {
return props_VariableReference;
}
break;
case 280:
if (true) {
return props_Visibility;
}
break;
case 281:
if (true) {
return props_VoidType;
}
break;
case 282:
if (true) {
return props_WhileStatement;
}
break;
case 283:
if (true) {
return props_WildCardType;
}
break;
case 284:
if (true) {
return props_XorAssignmentExpression;
}
break;
default :
}
}
throw new IllegalStateException();
}
