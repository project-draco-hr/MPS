{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractClassifierReference;
case 1:
  return props_AbstractCreator;
case 2:
return props_AbstractForStatement;
case 3:
return props_AbstractLoopStatement;
case 4:
return props_AbstractOperation;
case 5:
return props_AbstractUnaryNumberOperation;
case 6:
return props_AdditionalForLoopVariable;
case 7:
return props_AndAssignmentExpression;
case 8:
return props_AndExpression;
case 9:
return props_Annotation;
case 10:
return props_AnnotationInstance;
case 11:
return props_AnnotationInstanceExpression;
case 12:
return props_AnnotationInstanceValue;
case 13:
return props_AnnotationMethodDeclaration;
case 14:
return props_AnonymousClass;
case 15:
return props_AnonymousClassCreator;
case 16:
return props_ArrayAccessExpression;
case 17:
return props_ArrayClassExpression;
case 18:
return props_ArrayCloneOperation;
case 19:
return props_ArrayCreator;
case 20:
return props_ArrayCreatorWithInitializer;
case 21:
return props_ArrayLengthOperation;
case 22:
return props_ArrayLiteral;
case 23:
return props_ArrayType;
case 24:
return props_AsExpression;
case 25:
return props_AssertStatement;
case 26:
return props_AssignmentExpression;
case 27:
return props_BLBottomType;
case 28:
return props_BaseAssignmentExpression;
case 29:
return props_BaseMethodCall;
case 30:
return props_BaseMethodDeclaration;
case 31:
return props_BaseStringOperation;
case 32:
return props_BaseVariableDeclaration;
case 33:
return props_BaseVariableReference;
case 34:
return props_BinaryBitwiseOperation;
case 35:
return props_BinaryCompareOperation;
case 36:
return props_BinaryOperation;
case 37:
return props_BitwiseAndExpression;
case 38:
return props_BitwiseNotExpression;
case 39:
return props_BitwiseOrExpression;
case 40:
return props_BitwiseXorExpression;
case 41:
return props_BlockStatement;
case 42:
return props_BooleanConstant;
case 43:
return props_BooleanType;
case 44:
return props_BreakStatement;
case 45:
return props_ByteType;
case 46:
return props_CastExpression;
case 47:
return props_CatchClause;
case 48:
return props_CharConstant;
case 49:
return props_CharType;
case 50:
return props_ClassConcept;
case 51:
return props_ClassCreator;
case 52:
return props_Classifier;
case 53:
return props_ClassifierClassExpression;
case 54:
return props_ClassifierMember;
case 55:
return props_ClassifierType;
case 56:
return props_Closure;
case 57:
return props_ClosureParameter;
case 58:
return props_ClosureParameterReference;
case 59:
return props_Closureoid;
case 60:
return props_CommentPart;
case 61:
return props_CommentedStatement;
case 62:
return props_CommentedStatementsBlock;
case 63:
return props_ConceptFunction;
case 64:
return props_ConceptFunctionParameter;
case 65:
return props_ConstructorDeclaration;
case 66:
return props_ConstructorInvocationStatement;
case 67:
return props_ContextClassifierKind;
case 68:
return props_ContinueStatement;
case 69:
return props_CustomPropertyImplementation;
case 70:
return props_CustomSetterPropertyImplementation;
case 71:
return props_DefaultClassCreator;
case 72:
return props_DefaultGetAccessor;
case 73:
return props_DefaultPropertyImplementation;
case 74:
return props_DefaultSetAccessor;
case 75:
return props_DimensionExpression;
case 76:
return props_DivAssignmentExpression;
case 77:
return props_DivExpression;
case 78:
return props_DoWhileStatement;
case 79:
return props_DotExpression;
case 80:
return props_DoubleType;
case 81:
return props_ElsifClause;
case 82:
return props_EnumClass;
case 83:
return props_EnumConstantDeclaration;
case 84:
return props_EnumConstantReference;
case 85:
return props_EnumValueOfExpression;
case 86:
return props_EnumValuesExpression;
case 87:
return props_EqualsExpression;
case 88:
return props_EscapeOperation;
case 89:
return props_Expression;
case 90:
return props_ExpressionStatement;
case 91:
return props_FieldDeclaration;
case 92:
return props_FieldReferenceOperation;
case 93:
return props_FloatType;
case 94:
return props_FloatingPointConstant;
case 95:
return props_FloatingPointFloatConstant;
case 96:
return props_ForStatement;
case 97:
return props_ForeachStatement;
case 98:
return props_GenericDeclaration;
case 99:
return props_GenericNewExpression;
case 100:
return props_GetAccessor;
case 101:
return props_GreaterThanExpression;
case 102:
return props_GreaterThanOrEqualsExpression;
case 103:
return props_HasAnnotation;
case 104:
return props_HexIntegerLiteral;
case 105:
return props_IAnonymousClass;
case 106:
return props_IBLDeprecatable;
case 107:
return props_IBinaryLike;
case 108:
return props_IClassifier;
case 109:
return props_IClassifierMember;
case 110:
return props_IClassifierType;
case 111:
return props_IConditional;
case 112:
return props_IContainsStatementList;
case 113:
return props_IControlFlowInterrupter;
case 114:
return props_IExtractMethodAvailable;
case 115:
return props_IFinalWrapper;
case 116:
return props_IGenericType;
case 117:
return props_IHasModifiers;
case 118:
return props_IIncompleteParen;
case 119:
return props_IInternalType;
case 120:
return props_ILocalDeclaration;
case 121:
return props_ILocalReference;
case 122:
return props_ILocalVariableElement;
case 123:
return props_ILocalVariableElementList;
case 124:
return props_IMemberContainer;
case 125:
return props_IMethodCall;
case 126:
return props_IMethodLike;
case 127:
return props_IOperation;
case 128:
return props_IParameter;
case 129:
return props_ISkipsReturn;
case 130:
return props_IStatementListContainer;
case 131:
return props_IStaticContainerForMethods;
case 132:
return props_IThisExpression;
case 133:
return props_ITryCatchStatement;
case 134:
return props_ITypeApplicable;
case 135:
return props_IValidIdentifier;
case 136:
return props_IVariableAssignment;
case 137:
return props_IVariableDeclaration;
case 138:
return props_IVariableReference;
case 139:
return props_IVisible;
case 140:
return props_IWillBeClassifier;
case 141:
return props_IYetUnresolved;
case 142:
return props_IfStatement;
case 143:
return props_ImplicitAnnotationInstanceValue;
case 144:
return props_ImplicitAnnotationMethodKind;
case 145:
return props_IncompleteLeftParen;
case 146:
return props_IncompleteMemberDeclaration;
case 147:
return props_IncompleteRightParen;
case 148:
return props_InstanceInitializer;
case 149:
return props_InstanceMethodCallOperation;
case 150:
return props_InstanceMethodDeclaration;
case 151:
return props_InstanceOfExpression;
case 152:
return props_IntegerConstant;
case 153:
return props_IntegerLiteral;
case 154:
return props_IntegerType;
case 155:
return props_Interface;
case 156:
return props_IsEmptyOperation;
case 157:
return props_IsNotEmptyOperation;
case 158:
return props_JavaImport;
case 159:
return props_JavaImports;
case 160:
return props_LeftShiftAssignmentExpression;
case 161:
return props_LessThanExpression;
case 162:
return props_LessThanOrEqualsExpression;
case 163:
return props_LocalInstanceFieldReference;
case 164:
return props_LocalInstanceMethodCall;
case 165:
return props_LocalMethodCall;
case 166:
return props_LocalPropertyReference;
case 167:
return props_LocalStaticFieldReference;
case 168:
return props_LocalStaticMethodCall;
case 169:
return props_LocalToMethodKind;
case 170:
return props_LocalVariableDeclaration;
case 171:
return props_LocalVariableDeclarationStatement;
case 172:
return props_LocalVariableReference;
case 173:
return props_LongLiteral;
case 174:
return props_LongType;
case 175:
return props_LoopLabel;
case 176:
return props_LoopLabelReference;
case 177:
return props_LowerBoundType;
case 178:
return props_MethodDeclaration;
case 179:
return props_MinusAssignmentExpression;
case 180:
return props_MinusExpression;
case 181:
return props_Modifier;
case 182:
return props_MulAssignmentExpression;
case 183:
return props_MulExpression;
case 184:
return props_NPEEqualsExpression;
case 185:
return props_NPENotEqualsExpression;
case 186:
return props_NestedNewExpression;
case 187:
return props_NotEqualsExpression;
case 188:
return props_NotExpression;
case 189:
return props_NullLiteral;
case 190:
return props_NullType;
case 191:
return props_Number;
case 192:
return props_OperationAssignmentExpression;
case 193:
return props_OrAssignmentExpression;
case 194:
return props_OrExpression;
case 195:
return props_ParameterDeclaration;
case 196:
return props_ParameterReference;
case 197:
return props_ParenthesizedExpression;
case 198:
return props_PlaceholderMember;
case 199:
return props_PlusAssignmentExpression;
case 200:
return props_PlusExpression;
case 201:
return props_PostfixDecrementExpression;
case 202:
return props_PostfixIncrementExpression;
case 203:
return props_PrefixDecrementExpression;
case 204:
return props_PrefixIncrementExpression;
case 205:
return props_PrimitiveClassExpression;
case 206:
return props_PrimitiveType;
case 207:
return props_PrivateVisibility;
case 208:
return props_Property;
case 209:
return props_PropertyImplementation;
case 210:
return props_PropertyReference;
case 211:
return props_PropertyValueReference;
case 212:
return props_ProtectedVisibility;
case 213:
return props_PublicVisibility;
case 214:
return props_QualifiedSuperMethodCall;
case 215:
return props_RemAssignmentExpression;
case 216:
return props_RemExpression;
case 217:
return props_RemarkStatement;
case 218:
return props_ReturnStatement;
case 219:
return props_RightShiftAssignmentExpression;
case 220:
return props_SetAccessor;
case 221:
return props_ShiftLeftExpression;
case 222:
return props_ShiftRightExpression;
case 223:
return props_ShiftRightUnsignedExpression;
case 224:
return props_ShortType;
case 225:
return props_SingleLineComment;
case 226:
return props_Statement;
case 227:
return props_StatementCommentPart;
case 228:
return props_StatementList;
case 229:
return props_StaticFieldDeclaration;
case 230:
return props_StaticFieldReference;
case 231:
return props_StaticInitializer;
case 232:
return props_StaticKind;
case 233:
return props_StaticMethodCall;
case 234:
return props_StaticMethodDeclaration;
case 235:
return props_StringBooleanOperation;
case 236:
return props_StringLiteral;
case 237:
return props_StringToken;
case 238:
return props_StringType;
case 239:
return props_StubStatementList;
case 240:
return props_SubstringExpression;
case 241:
return props_SuperConstructorInvocation;
case 242:
return props_SuperConstructorKind;
case 243:
return props_SuperInerfaceKind;
case 244:
return props_SuperMethodCall;
case 245:
return props_SuperMethodKind;
case 246:
return props_SwitchCase;
case 247:
return props_SwitchStatement;
case 248:
return props_SynchronizedStatement;
case 249:
return props_TernaryOperatorExpression;
case 250:
return props_TextCommentPart;
case 251:
return props_ThisConstructorInvocation;
case 252:
return props_ThisConstructorKind;
case 253:
return props_ThisExpression;
case 254:
return props_ThrowStatement;
case 255:
return props_Tokens;
case 256:
return props_TrimOperation;
case 257:
return props_TryCatchStatement;
case 258:
return props_TryStatement;
case 259:
return props_Type;
case 260:
return props_TypeAnnotable;
case 261:
return props_TypeDerivable;
case 262:
return props_TypeVariableDeclaration;
case 263:
return props_TypeVariableReference;
case 264:
return props_UnaryMinus;
case 265:
return props_UndefinedType;
case 266:
return props_UnknownConsCall;
case 267:
return props_UnknownDotCall;
case 268:
return props_UnknownLocalCall;
case 269:
return props_UnknownNameRef;
case 270:
return props_UnknownNew;
case 271:
return props_UnresolvedNameReference;
case 272:
return props_UnsignedRightShiftAssignmentExpression;
case 273:
return props_UpperBoundType;
case 274:
return props_UsingStatement;
case 275:
return props_ValueParameter;
case 276:
return props_VarType;
case 277:
return props_VariableArityType;
case 278:
return props_VariableDeclaration;
case 279:
return props_VariableReference;
case 280:
return props_Visibility;
case 281:
return props_VoidType;
case 282:
return props_WhileStatement;
case 283:
return props_WildCardType;
case 284:
return props_XorAssignmentExpression;
}
throw new IllegalStateException("Unknown concept " + c);
}
