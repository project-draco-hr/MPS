{
  this.findDuplicates();
  SNode newDeclaration;
  if (this.myFieldInitialization == FieldInitializationPlace.FIELD) {
    newDeclaration=_quotation_createNode_baxqxe_a0a0c0b(myVisibilityLevel.getNode(),SNodeOperations.copyNode(this.getExpressionType()),SNodeOperations.copyNode(this.getExpression()),this.getName());
  }
 else {
    newDeclaration=_quotation_createNode_baxqxe_a0a0a2a1(myVisibilityLevel.getNode(),SNodeOperations.copyNode(this.getExpressionType()),this.getName());
  }
  if (myIsFinal) {
    SPropertyOperations.set(newDeclaration,"isFinal","" + (true));
  }
  SNode classConcept=SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  ListSequence.fromList(SLinkOperations.getTargets(classConcept,"member",true)).addElement(newDeclaration);
  SNode assignStatement=_quotation_createNode_baxqxe_a0g0b(newDeclaration,SNodeOperations.copyNode(this.getExpression()));
  if (this.myFieldInitialization == FieldInitializationPlace.METHOD) {
    SNodeOperations.insertPrevSiblingChild(SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.Statement",false,false),SNodeOperations.copyNode(assignStatement));
  }
  if (this.myFieldInitialization == FieldInitializationPlace.CONSTRUCTOR) {
    SNode declaration=SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    for (    SNode constructor : Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),declaration,"jetbrains.mps.baseLanguage.structure.ClassConcept","call_constructors_5292274854859503373",new Object[]{}))) {
      List<SNode> statement=SLinkOperations.getTargets(SLinkOperations.getTarget(constructor,"body",true),"statement",true);
      if (ListSequence.fromList(statement).isNotEmpty()) {
        SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statement).first(),SNodeOperations.copyNode(assignStatement));
      }
 else {
        ListSequence.fromList(statement).addElement(SNodeOperations.copyNode(assignStatement));
      }
    }
  }
  replaceNode(this.getExpression(),newDeclaration);
  if (myIsReplacingAll) {
    for (    SNode duplicate : ListSequence.fromList(myDuplicates)) {
      replaceNode(duplicate,newDeclaration);
    }
  }
  return newDeclaration;
}
