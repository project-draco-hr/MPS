{
  try {
    ScriptBuilder scb=new ScriptBuilder();
    final UIQueryRelayStrategy relayStrat=new UIQueryRelayStrategy();
    final LoggingProgressStrategy logStrat=new LoggingProgressStrategy();
    final LoggingFeedbackStrategy feedbackStrat=new LoggingFeedbackStrategy();
    final IJobMonitor jmon=new IJobMonitor(){
      public boolean pleaseStop(){
        return false;
      }
      public IProgress currentProgress(){
        return logStrat.currentProgress();
      }
      public void reportFeedback(      IFeedback fdbk){
        feedbackStrat.reportFeedback(fdbk);
      }
    }
;
    final IConfigMonitor cmon=new IConfigMonitor(){
      public <T extends IOption>T relayQuery(      IQuery<T> query){
        return relayStrat.relayQuery(query,MakeOrBuild_Action.this.context);
      }
    }
;
    final Wrappers._T<ProgressIndicator> pind=new Wrappers._T<ProgressIndicator>(null);
    final _FunctionTypes._return_P0_E0<? extends ProgressIndicator> pindGet=new _FunctionTypes._return_P0_E0<ProgressIndicator>(){
      public ProgressIndicator invoke(){
        return pind.value;
      }
    }
;
    final IScript scr=scb.withFacets(new IFacet.Name("Generate"),new IFacet.Name("TextGen"),new IFacet.Name("JavaCompile"),new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).withInit(new _FunctionTypes._void_P1_E0<IParametersPool>(){
      public void invoke(      IParametersPool pool){
        Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars=(Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>>)pool.parameters(new ITarget.Name("checkParameters"),Object.class);
        vars._0(MakeOrBuild_Action.this.context.getProject());
        vars._1(MakeOrBuild_Action.this.context);
        vars._2(MakeOrBuild_Action.this.cleanMake);
        vars._3(pindGet);
      }
    }
).withMonitors(new IMonitors.Stub(cmon,jmon){
      @Override public void runJobWithMonitor(      final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
        IdeEventQueue.getInstance().flushQueue();
        ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
          public void run(          ProgressIndicator realInd){
            pind.value=new JobMonitorProgressIndicator(jmon);
            code.invoke(jmon);
          }
        }
,"Script",true,MakeOrBuild_Action.this.context.getProject());
      }
    }
).toScript();
    if (!(scr.isValid())) {
      return;
    }
    final Iterable<MResource> inputRes=MakeOrBuild_Action.this.collectInput(!(MakeOrBuild_Action.this.cleanMake));
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        SModelRepository.getInstance().saveAll();
      }
    }
);
    final Wrappers._T<IResult> res=new Wrappers._T<IResult>();
    ModelCheckerTool_Tool mct=MakeOrBuild_Action.this.context.getProject().getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class);
    if (mct.checkModelsBeforeGenerationIfNeeded(MakeOrBuild_Action.this.context,MakeOrBuild_Action.this.models,new Runnable(){
      public void run(){
        res.value=scr.execute(inputRes);
      }
    }
)) {
      new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return res.value=scr.execute(inputRes);
        }
      }
.invoke();
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "MakeOrBuild",t);
  }
}
