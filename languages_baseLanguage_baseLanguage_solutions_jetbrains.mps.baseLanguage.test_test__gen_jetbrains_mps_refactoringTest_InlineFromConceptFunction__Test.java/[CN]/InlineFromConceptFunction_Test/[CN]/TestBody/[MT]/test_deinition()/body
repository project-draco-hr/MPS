{
  this.addNodeById("1230053266366");
  this.addNodeById("1230053266380");
  InlineVariableRefactoring ref=new InlineVariableAssignmentRefactoring(SNodeOperations.cast(this.getNodeById("1230053266370"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
  ref.doRefactoring();
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("1230053266367"),"jetbrains.mps.baseLanguage.structure.ConceptFunction") + "' and '"+ SNodeOperations.cast(this.getNodeById("1230053266381"),"jetbrains.mps.baseLanguage.structure.ConceptFunction")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266367"),"jetbrains.mps.baseLanguage.structure.ConceptFunction")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266381"),"jetbrains.mps.baseLanguage.structure.ConceptFunction"))));
}
