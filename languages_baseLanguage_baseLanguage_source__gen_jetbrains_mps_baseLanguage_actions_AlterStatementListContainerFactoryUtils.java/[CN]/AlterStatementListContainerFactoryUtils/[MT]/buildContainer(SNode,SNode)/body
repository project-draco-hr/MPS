{
  ListSequence.fromList(SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(sampleNode),"statement",true)).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      ListSequence.fromList(SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(newNode),"statement",true)).addElement(SNodeOperations.copyNode(it));
    }
  }
);
  if (hasCondition(sampleNode) && hasCondition(newNode)) {
    SNode originalCondition=getCondition(sampleNode);
    if (originalCondition != null) {
      SNodeOperations.replaceWithAnother(getCondition(newNode),SNodeOperations.copyNode(originalCondition));
    }
  }
  if (SNodeOperations.isInstanceOf(newNode,"jetbrains.mps.baseLanguage.structure.ForStatement")) {
    SNode inputSequence;
    final Wrappers._T<SNode> loopVariable=new Wrappers._T<SNode>();
    SNode varType;
    SNode collectionType;
    if (SNodeOperations.isInstanceOf(sampleNode,"jetbrains.mps.baseLanguage.structure.ForeachStatement")) {
      inputSequence=SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"iterable",true));
      loopVariable.value=SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"variable",true);
      varType=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"variable",true),"type",true);
      collectionType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"iterable",true));
    }
 else     if (SNodeOperations.isInstanceOf(sampleNode,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement")) {
      inputSequence=SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"inputSequence",true));
      loopVariable.value=SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"variable",true);
      varType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"variable",true)),"jetbrains.mps.baseLanguage.structure.Type");
      collectionType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(sampleNode,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"inputSequence",true));
    }
 else {
      return;
    }
    SNode forStatement=SNodeOperations.cast(newNode,"jetbrains.mps.baseLanguage.structure.ForStatement");
    SNode iteratorVar=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",null);
    SPropertyOperations.set(iteratorVar,"name","forLoopIterator");
    SLinkOperations.setTarget(iteratorVar,"initializer",createDotExpression_kz5t2g_a0a8a2a2(),true);
    SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(iteratorVar,"initializer",true),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",inputSequence,true);
    SNode f=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    if (SNodeOperations.isInstanceOf(collectionType,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
      System.out.println("AAAAAA");
    }
 else {
      SLinkOperations.setTarget(f,"classifier",SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~Iterator"),false);
      SLinkOperations.setTarget(iteratorVar,"type",f,true);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(iteratorVar,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)).addElement(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),varType,"virtual_getUnboxedType_1213877337320",new Object[]{}));
      SLinkOperations.setTarget(forStatement,"variable",iteratorVar,true);
      SLinkOperations.setTarget(forStatement,"condition",createDotExpression_kz5t2g_a0a5a0l0c0c(),true);
      SLinkOperations.setTarget(SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(forStatement,"condition",true),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null),true),"variableDeclaration",iteratorVar,false);
      final SNode vd=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement",null);
      SPropertyOperations.set(SLinkOperations.getTarget(vd,"localVariableDeclaration",true),"name","localLoopVariable");
      SLinkOperations.setTarget(SLinkOperations.getTarget(vd,"localVariableDeclaration",true),"type",TypeChecker.getInstance().getTypeOf(loopVariable.value),true);
      SLinkOperations.setTarget(SLinkOperations.getTarget(vd,"localVariableDeclaration",true),"initializer",createDotExpression_kz5t2g_a0a11a0l0c0c(),true);
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(vd,"localVariableDeclaration",true),"initializer",true),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",iteratorVar,false);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(forStatement,"body",true),"statement",true)).insertElement(0,vd);
      ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(forStatement,"body",true),"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"variableDeclaration",false) == loopVariable.value;
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SLinkOperations.setTarget(it,"variableDeclaration",SLinkOperations.getTarget(vd,"localVariableDeclaration",true),false);
        }
      }
);
      ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(forStatement,"body",true),"jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"variable",false) == loopVariable.value;
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SLinkOperations.setTarget(SNodeFactoryOperations.replaceWithNewChild(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",SLinkOperations.getTarget(vd,"localVariableDeclaration",true),false);
        }
      }
);
    }
  }
}
