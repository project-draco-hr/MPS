{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildInputSingleFolder");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        public SNode wrapNode(        SNode nodeToWrap,        SModel model){
          SNode res=SModelOperations.createNewNode(model,"jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource",null);
          SLinkOperations.setTarget(res,"folder",nodeToWrap,true);
          return res;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc){
          SNode wrappedNode=this.wrapNode(nc,nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          }
 else {
            return wrappedNode;
          }
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
