{
  List<LanguageHierarchiesComponent.ConceptContainer> result=new ArrayList<LanguageHierarchiesComponent.ConceptContainer>();
  Map<SNode,LanguageHierarchiesComponent.ConceptContainer> processed=new HashMap<SNode,LanguageHierarchiesComponent.ConceptContainer>();
  SModel structureModel=myLanguage.getStructureModelDescriptor();
  SNode baseConcept=MetaAdapterFactory.getConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,"jetbrains.mps.lang.core.structure.BaseConcept").getDeclarationNode();
  outer:   for (  SNode concept : SModelOperations.roots(structureModel,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
    SNode parentConcept=concept;
    LanguageHierarchiesComponent.ConceptContainer prevConceptContainer=null;
    while (parentConcept != null && parentConcept != baseConcept && !((mySkipAncestors && SNodeOperations.getModel(parentConcept) != structureModel))) {
      LanguageHierarchiesComponent.ConceptContainer newConceptContainer=processed.get(parentConcept);
      if (newConceptContainer == null) {
        newConceptContainer=new LanguageHierarchiesComponent.ConceptContainer(parentConcept,this,SNodeOperations.getModel(parentConcept) != structureModel);
      }
      newConceptContainer.addChild(prevConceptContainer);
      prevConceptContainer=newConceptContainer;
      if (processed.containsKey(parentConcept)) {
        continue outer;
      }
      processed.put(parentConcept,newConceptContainer);
      parentConcept=SLinkOperations.getTarget(parentConcept,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0xf979be93cfL,"extends"));
    }
    if (prevConceptContainer != null) {
      result.add(prevConceptContainer);
    }
  }
  return result;
}
