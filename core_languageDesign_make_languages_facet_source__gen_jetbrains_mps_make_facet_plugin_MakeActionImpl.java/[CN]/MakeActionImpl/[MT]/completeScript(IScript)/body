{
  final ProgressIndicatorProgressStrategy progStrat=new ProgressIndicatorProgressStrategy();
  final IJobMonitor jmon=new IJobMonitor(){
    public boolean stopRequested(){
      return (progStrat.getProgressIndicator() != null ? progStrat.getProgressIndicator().isCanceled() : false);
    }
    public IProgress currentProgress(){
      return progStrat.currentProgress();
    }
    public void reportFeedback(    IFeedback fdbk){
      new LoggingFeedbackStrategy().reportFeedback(fdbk);
    }
  }
;
  final IConfigMonitor cmon=new IConfigMonitor(){
    public <T extends IOption>T relayQuery(    IQuery<T> query){
      return new UIQueryRelayStrategy().relayQuery(query,MakeActionImpl.this.context);
    }
  }
;
  final Wrappers._T<ProgressIndicator> pind=new Wrappers._T<ProgressIndicator>(null);
  final IMonitors mons=new IMonitors.Stub(cmon,jmon){
    @Override public void runJobWithMonitor(    final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
      IdeEventQueue.getInstance().flushQueue();
      ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
        public void run(        ProgressIndicator realInd){
          progStrat.setProgressIndicator(realInd);
          pind.value=new JobMonitorProgressIndicator(jmon);
          code.invoke(jmon);
        }
      }
,(cleanMake ? "Rebuild" : "Make"),true,MakeActionImpl.this.context.getProject());
    }
  }
;
  final _FunctionTypes._return_P0_E0<? extends ProgressIndicator> pindGet=new _FunctionTypes._return_P0_E0<ProgressIndicator>(){
    public ProgressIndicator invoke(){
      return pind.value;
    }
  }
;
  final _FunctionTypes._void_P1_E0<? super IParametersPool> init=new _FunctionTypes._void_P1_E0<IParametersPool>(){
    public void invoke(    IParametersPool pool){
      Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars=(Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>>)pool.parameters(new ITarget.Name("checkParameters"),Object.class);
      vars._0(MakeActionImpl.this.context.getProject());
      vars._1(MakeActionImpl.this.context);
      vars._2(MakeActionImpl.this.cleanMake);
      vars._3(pindGet);
    }
  }
;
  return new IScript.StubBoss(scr){
    @Override public void init(    IParametersPool ppool){
      init.invoke(ppool);
    }
    @Override public IMonitors monitors(){
      return mons;
    }
  }
;
}
