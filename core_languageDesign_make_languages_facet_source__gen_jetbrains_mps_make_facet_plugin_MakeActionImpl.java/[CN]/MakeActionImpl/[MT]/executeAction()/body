{
  ScriptBuilder scb=new ScriptBuilder();
  final UIQueryRelayStrategy relayStrat=new UIQueryRelayStrategy();
  final ProgressIndicatorProgressStrategy progStrat=new ProgressIndicatorProgressStrategy();
  final LoggingFeedbackStrategy feedbackStrat=new LoggingFeedbackStrategy();
  final Wrappers._T<ProgressIndicator> pind=new Wrappers._T<ProgressIndicator>(null);
  final IJobMonitor jmon=new IJobMonitor(){
    public boolean stopRequested(){
      return (progStrat.getProgressIndicator() != null ? progStrat.getProgressIndicator().isCanceled() : false);
    }
    public IProgress currentProgress(){
      return progStrat.currentProgress();
    }
    public void reportFeedback(    IFeedback fdbk){
      feedbackStrat.reportFeedback(fdbk);
    }
  }
;
  final IConfigMonitor cmon=new IConfigMonitor(){
    public <T extends IOption>T relayQuery(    IQuery<T> query){
      return relayStrat.relayQuery(query,MakeActionImpl.this.context);
    }
  }
;
  final _FunctionTypes._return_P0_E0<? extends ProgressIndicator> pindGet=new _FunctionTypes._return_P0_E0<ProgressIndicator>(){
    public ProgressIndicator invoke(){
      return pind.value;
    }
  }
;
  final IScript scr=scb.withFacets(new IFacet.Name("Generate"),new IFacet.Name("TextGen"),new IFacet.Name("JavaCompile"),new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).withInit(new _FunctionTypes._void_P1_E0<IParametersPool>(){
    public void invoke(    IParametersPool pool){
      Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars=(Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>>)pool.parameters(new ITarget.Name("checkParameters"),Object.class);
      vars._0(MakeActionImpl.this.context.getProject());
      vars._1(MakeActionImpl.this.context);
      vars._2(MakeActionImpl.this.cleanMake);
      vars._3(pindGet);
    }
  }
).withMonitors(new IMonitors.Stub(cmon,jmon){
    @Override public void runJobWithMonitor(    final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
      IdeEventQueue.getInstance().flushQueue();
      ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
        public void run(        ProgressIndicator realInd){
          progStrat.setProgressIndicator(realInd);
          pind.value=new JobMonitorProgressIndicator(jmon);
          code.invoke(jmon);
        }
      }
,(cleanMake ? "Rebuild" : "Make"),true,MakeActionImpl.this.context.getProject());
    }
  }
).toScript();
  if (!(scr.isValid())) {
    return;
  }
  final Iterable<MResource> inputRes=params.collectInput(!(this.cleanMake));
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  final Wrappers._T<IResult> res=new Wrappers._T<IResult>();
  ModelCheckerTool_Tool mct=this.context.getProject().getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class);
  if (mct.checkModelsBeforeGenerationIfNeeded(this.context,Sequence.fromIterable(inputRes).<SModelDescriptor>translate(new ITranslator2<MResource,SModelDescriptor>(){
    public Iterable<SModelDescriptor> translate(    MResource it){
      return it.models();
    }
  }
).toListSequence(),new Runnable(){
    public void run(){
      res.value=scr.execute(inputRes);
    }
  }
)) {
    new _FunctionTypes._return_P0_E0<IResult>(){
      public IResult invoke(){
        return res.value=scr.execute(inputRes);
      }
    }
.invoke();
  }
}
