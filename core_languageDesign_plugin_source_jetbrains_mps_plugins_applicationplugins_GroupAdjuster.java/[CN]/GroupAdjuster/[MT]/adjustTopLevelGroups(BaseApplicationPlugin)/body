{
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_NODE_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_SNODE,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_MODEL_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_SMODEL,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_LANGUAGE_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_LANGUAGE,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_DEVKIT_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_DEVKIT,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_PROJECT_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_PROJECT,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_SOLUTION_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_SOLUTION,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_GENERATOR_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_GENERATOR,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_TRANSIENT_MODULES_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_TRANSIENT_MODULES,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_PACKAGE_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_PACKAGE,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_NAMESPACE_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_NAMESPACE,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_RUNTIME_FOLDER_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_RUNTIME_FOLDER,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_PANE_ACCESSORIES_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_ACCESSORIES,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.PROJECT_NEW_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_PROJECT,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.SOLUTION_NEW_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_SOLUTION,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.LANGUAGE_NEW_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_LANGUAGE,null);
  ActionUtils.getGroup(ProjectPaneActionGroups.GENERATOR_NEW_ACTIONS).addPlace(ActionPlace.PROJECT_PANE_GENERATOR,null);
  List<BaseGroup> editorGroups=new ArrayList<BaseGroup>();
  editorGroups.add(ActionUtils.getGroup(EditorComponent.EDITOR_POPUP_MENU_ACTIONS));
  for (  BaseGroup group : editorGroups) {
    group.addPlace(ActionPlace.EDITOR,null);
  }
  List<BaseGroup> mainMenuGroups=new ArrayList<BaseGroup>();
  DefaultActionGroup mainMenuGroup=ActionUtils.getDefaultGroup(IdeActions.GROUP_MAIN_MENU);
  ActionManagerEx manager=ActionManagerEx.getInstanceEx();
  for (  String id : manager.getPluginActions(((Ide_ApplicationPlugin)idePlugin).myId)) {
    AnAction action=manager.getAction(id);
    if (!(action instanceof BaseGroup))     continue;
    BaseGroup group=((BaseGroup)action);
    if (ActionUtils.contains(mainMenuGroup,group)) {
      mainMenuGroups.add(group);
    }
  }
  for (  BaseGroup group : mainMenuGroups) {
    group.addPlace(null,new Condition<BaseAction>(){
      public boolean met(      BaseAction action){
        return action.getPlaces().isEmpty();
      }
    }
);
  }
}
