{
  System.err.println("preparing arguments for refactoring");
  RenameProperty renameProperty=new RenameProperty();
  final RefactoringContext refactoringContext=new RefactoringContext(OldRefactoringAdapter.createAdapterFor(renameProperty));
  refactoringContext.setCurrentOperationContext(ProjectOperationContext.get(project));
  final String newPropertyName="niceProperty";
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      SNode node=structureModelDescriptor.getSModel().getRootByName("YetAnotherGoodConcept");
      ConceptDeclaration concept=(ConceptDeclaration)BaseAdapter.fromNode(node);
      SNode property=concept.getPropertyDeclarations().get(0).getNode();
      refactoringContext.setSelectedProject(project);
      refactoringContext.setSelectedNode(property);
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter(RenameProperty.newName,newPropertyName);
    }
  }
);
  System.err.println("executing a refactoring");
  new RefactoringProcessor().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          try {
            System.err.println("checking a model");
            if (sandbox1.isInitialized()) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1.getSModel();
            SNode root=sModel.getRoots().get(0);
            SNode firstChild=root.getChildren("anotherGoodConcept").get(0);
            String propertyValue=firstChild.getProperty(newPropertyName);
            result[0]="cat".equals(propertyValue);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
            return;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
