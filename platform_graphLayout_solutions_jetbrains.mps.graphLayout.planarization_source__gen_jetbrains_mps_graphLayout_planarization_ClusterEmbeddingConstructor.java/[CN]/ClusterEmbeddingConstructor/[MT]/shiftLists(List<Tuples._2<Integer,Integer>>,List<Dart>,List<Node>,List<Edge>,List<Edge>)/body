{
  Tuples._2<Integer,Integer> first=ListSequence.fromList(pos).first();
  int firstBorderPos=(int)first._0();
  for (int i=0; i < firstBorderPos; i++) {
    ListSequence.fromList(borderNodes).addElement(ListSequence.fromList(borderNodes).removeElementAt(0));
    ListSequence.fromList(outerEdges).addElement(ListSequence.fromList(outerEdges).removeElementAt(0));
    ListSequence.fromList(borderEdges).addElement(ListSequence.fromList(borderEdges).removeElementAt(0));
  }
  int firstDartPos=(int)first._1();
  for (int i=0; i < firstDartPos; i++) {
    ListSequence.fromList(darts).addElement(ListSequence.fromList(darts).removeElementAt(0));
  }
  List<Tuples._2<Integer,Integer>> newPos=ListSequence.fromList(new ArrayList<Tuples._2<Integer,Integer>>(ListSequence.fromList(pos).count()));
  for (  Tuples._2<Integer,Integer> p : ListSequence.fromList(pos)) {
    int p0=(int)p._0() - firstBorderPos;
    int p1=(int)p._1() - firstDartPos;
    if (p1 < 0) {
      p1+=ListSequence.fromList(darts).count();
    }
    ListSequence.fromList(newPos).addElement(MultiTuple.<Integer,Integer>from(p0,p1));
  }
  return newPos;
}
