{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("klass",new BaseReferenceConstraintsDescriptor("klass",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          IScope ms=ModuleSuite_Behavior.call_scope_1280144168199518341(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false));
          return new VisibleClassifiersScope(_context.getEnclosingNode(),IClassifiersSearchScope.CLASS,(ms != null ? ms : operationContext.getScope())){
            @NotNull @Override public List<SNode> getClassifiers(){
              final SNode testAnn=SLinkOperations.getTarget(_quotation_createNode_qd3c0x_a0a0a0a0a1a0a(),"annotation",false);
              List<SNode> res=super.getClassifiers();
              for (Iterator<SNode> it=ListSequence.fromList(res).iterator(); it.hasNext(); ) {
                if (!(Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(it.next())).translate(new ITranslator2<SNode,SNode>(){
                  public Iterable<SNode> translate(                  SNode m){
                    return SLinkOperations.getTargets(m,"annotation",true);
                  }
                }
).any(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode ann){
                    return SLinkOperations.getTarget(ann,"annotation",false) == testAnn;
                  }
                }
))) {
                  it.remove();
                }
              }
              return res;
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_qd3c0x_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
