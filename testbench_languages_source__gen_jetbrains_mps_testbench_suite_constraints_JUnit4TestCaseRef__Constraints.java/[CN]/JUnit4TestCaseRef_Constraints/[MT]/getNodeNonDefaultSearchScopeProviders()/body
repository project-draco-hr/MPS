{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("klass",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      IScope ms=ModuleSuite_Behavior.call_scope_1280144168199518341(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false));
      return new VisibleClassifiersScope(_context.getEnclosingNode(),IClassifiersSearchScope.CLASS,(ms != null ? ms : operationContext.getScope())){
        @NotNull @Override public List<SNode> getClassifiers(){
          final SNode testAnn=SLinkOperations.getTarget(new JUnit4TestCaseRef_Constraints.QuotationClass_qd3c0x_a0a0a0a0a0b0c0a1a0b0i().createNode(),"annotation",false);
          List<SNode> res=super.getClassifiers();
          for (Iterator<SNode> it=ListSequence.fromList(res).iterator(); it.hasNext(); ) {
            if (!(ListSequence.fromList(SLinkOperations.getTargets(it.next(),"method",true)).<SNode>translate(new ITranslator2<SNode,SNode>(){
              public Iterable<SNode> translate(              SNode m){
                return SLinkOperations.getTargets(m,"annotation",true);
              }
            }
).any(new IWhereFilter<SNode>(){
              public boolean accept(              SNode ann){
                return SLinkOperations.getTarget(ann,"annotation",false) == testAnn;
              }
            }
))) {
              it.remove();
            }
          }
          return res;
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:137cc691-13a2-4fdd-885a-88f9405e83c0(jetbrains.mps.testbench.suite.constraints)","4504141816188599492");
    }
  }
);
  return result;
}
