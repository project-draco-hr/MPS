{
  List<SModel> result=ListSequence.fromList(new ArrayList<SModel>());
  Project project=refactoringContext.getSelectedProject();
  Language sourceLanguage=Language.getLanguageFor(SNodeOperations.getModel(refactoringContext.getSelectedNode()));
  if (sourceLanguage != null) {
    Map<SModule,List<SModel>> models=RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project,sourceLanguage);
    for (    List<SModel> list : CollectionSequence.fromCollection(models.values())) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>)list));
    }
  }
  Language targetLanguage=Language.getLanguageFor(SNodeOperations.getModel(((SNode)refactoringContext.getParameter("targetConcept"))));
  if (targetLanguage != null) {
    Map<SModule,List<SModel>> models=RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project,targetLanguage);
    for (    List<SModel> list : CollectionSequence.fromCollection(models.values())) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>)list));
    }
  }
  return result;
}
