{
  super.doValidate(context);
  Vector prefSize=prop(PREFERRED_SIZE).get();
  AbstractVerticalLayoutFigure.Insets insets=getInsets();
  int width=0;
  int height=insets.top + insets.bottom;
  for (  View nextChild : ListSequence.fromList(children())) {
    if (isExcludedFromLayout(nextChild)) {
      continue;
    }
    Rectangle childBounds=nextChild.bounds().get();
    width=Math.max(width,childBounds.dimension.x);
    height+=childBounds.dimension.y;
  }
  width+=insets.left + insets.right;
  if (width < prefSize.x) {
    width=prefSize.x;
  }
  if (height < prefSize.y) {
    height=prefSize.y;
  }
  int yOffset=bounds().get().origin.y + insets.top;
  int xOrigin=bounds().get().origin.x;
  for (  View nextChild : ListSequence.fromList(children())) {
    if (isExcludedFromLayout(nextChild)) {
      continue;
    }
    Rectangle childBounds=nextChild.bounds().get();
    nextChild.moveTo(new Vector(xOrigin + (width - childBounds.dimension.x) / 2,yOffset));
    yOffset+=childBounds.dimension.y;
  }
  figureWidth.set(width);
  figureHeight.set(height);
  Vector newDimension=new Vector(width,height);
  if (!(newDimension.equals(dimension().get()))) {
    dimension().set(newDimension);
    super.validate();
  }
}
