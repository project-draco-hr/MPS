{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_vhxjlb_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<IDataFlowBuilder>singletonList(new AbstractUnaryNumberOperation_DataFlow());
      }
    break;
case 1:
  if (true) {
    return Collections.<IDataFlowBuilder>singletonList(new AndExpression_DataFlow());
  }
break;
case 2:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AnonymousClassCreator_DataFlow());
}
break;
case 3:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ArrayAccessExpression_DataFlow());
}
break;
case 4:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ArrayCreator_DataFlow());
}
break;
case 5:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ArrayCreatorWithInitializer_DataFlow());
}
break;
case 6:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ArrayLiteral_DataFlow());
}
break;
case 7:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AsExpression_DataFlow());
}
break;
case 8:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AssertStatement_DataFlow());
}
break;
case 9:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new AssignmentExpression_DataFlow());
}
break;
case 10:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BaseAssignmentExpression_DataFlow());
}
break;
case 11:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BaseMethodCall_DataFlow());
}
break;
case 12:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BaseMethodDeclaration_DataFlow());
}
break;
case 13:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BinaryOperation_DataFlow());
}
break;
case 14:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BitwiseNotExpression_DataFlow());
}
break;
case 15:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BlockStatement_DataFlow());
}
break;
case 16:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new BreakStatement_DataFlow());
}
break;
case 17:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new CastExpression_DataFlow());
}
break;
case 18:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new CatchClause_DataFlow());
}
break;
case 19:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Closure_DataFlow());
}
break;
case 20:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new CommentedStatementsBlock_DataFlow());
}
break;
case 21:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ConceptFunction_DataFlow());
}
break;
case 22:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ContinueStatement_DataFlow());
}
break;
case 23:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new DimensionExpression_DataFlow());
}
break;
case 24:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new DoWhileStatement_DataFlow());
}
break;
case 25:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new DotExpression_DataFlow());
}
break;
case 26:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ElsifClause_DataFlow());
}
break;
case 27:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Expression_DataFlow());
}
break;
case 28:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ExpressionStatement_DataFlow());
}
break;
case 29:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new FieldReferenceOperation_DataFlow());
}
break;
case 30:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ForStatement_DataFlow());
}
break;
case 31:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ForeachStatement_DataFlow());
}
break;
case 32:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new GenericNewExpression_DataFlow());
}
break;
case 33:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new IMethodCall_DataFlow());
}
break;
case 34:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new IfStatement_DataFlow());
}
break;
case 35:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InstanceInitializer_DataFlow());
}
break;
case 36:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InstanceMethodCallOperation_DataFlow());
}
break;
case 37:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new InstanceOfExpression_DataFlow());
}
break;
case 38:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new LocalVariableDeclaration_DataFlow());
}
break;
case 39:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new LocalVariableDeclarationStatement_DataFlow());
}
break;
case 40:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new NotExpression_DataFlow());
}
break;
case 41:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new OrExpression_DataFlow());
}
break;
case 42:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ParameterDeclaration_DataFlow());
}
break;
case 43:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ParenthesizedExpression_DataFlow());
}
break;
case 44:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PostfixDecrementExpression_DataFlow());
}
break;
case 45:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PostfixIncrementExpression_DataFlow());
}
break;
case 46:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PrefixDecrementExpression_DataFlow());
}
break;
case 47:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PrefixIncrementExpression_DataFlow());
}
break;
case 48:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new RemarkStatement_DataFlow());
}
break;
case 49:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ReturnStatement_DataFlow());
}
break;
case 50:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new StatementList_DataFlow());
}
break;
case 51:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new StaticInitializer_DataFlow());
}
break;
case 52:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new StaticMethodCall_DataFlow());
}
break;
case 53:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new StubStatementList_DataFlow());
}
break;
case 54:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SubstringExpression_DataFlow());
}
break;
case 55:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SwitchCase_DataFlow());
}
break;
case 56:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SwitchStatement_DataFlow());
}
break;
case 57:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SynchronizedStatement_DataFlow());
}
break;
case 58:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TernaryOperatorExpression_DataFlow());
}
break;
case 59:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ThrowStatement_DataFlow());
}
break;
case 60:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TryCatchStatement_DataFlow());
}
break;
case 61:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new TryStatement_DataFlow());
}
break;
case 62:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new VariableDeclaration_DataFlow());
}
break;
case 63:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new VariableReference_DataFlow());
}
break;
case 64:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new WhileStatement_DataFlow());
}
break;
default :
}
}
return Collections.<IDataFlowBuilder>emptyList();
}
