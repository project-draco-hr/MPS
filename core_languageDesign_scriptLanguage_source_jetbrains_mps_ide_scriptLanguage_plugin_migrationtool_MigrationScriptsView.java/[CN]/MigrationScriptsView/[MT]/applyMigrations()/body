{
  LOG.checkEDT();
  final List<SearchResult<SNode>> aliveIncludedResults=new ArrayList<SearchResult<SNode>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      List<SNodePointer> includedNodes=myUsagesVew.getIncludedResultNodes();
      Set<SNode> aliveIncludedNodes=new HashSet<SNode>();
      for (      SNodePointer includedNode : includedNodes) {
        if (includedNode.getNode() != null) {
          aliveIncludedNodes.add(includedNode.getNode());
        }
      }
      List<SearchResult<SNode>> aliveResults=myFinder.getLastSearchResults().getAliveResults();
      for (      SearchResult<SNode> aliveResult : aliveResults) {
        if (aliveIncludedNodes.contains(aliveResult.getObject())) {
          aliveIncludedResults.add(aliveResult);
        }
      }
    }
  }
);
  if (aliveIncludedResults.size() == 0) {
    JOptionPane.showMessageDialog(myTool.getComponent(),"No job");
    return;
  }
  final JProgressBar progress=new JProgressBar(0,aliveIncludedResults.size());
  progress.setString("applying migrations...");
  progress.setStringPainted(true);
  progress.setBorderPainted(false);
  updateControls(false,progress);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          int progressCount=0;
          for (          SearchResult<SNode> aliveIncludedResult : aliveIncludedResults) {
            progress.setValue((progressCount++));
            progress.paintImmediately(new Rectangle(progress.getSize()));
            SNode node=aliveIncludedResult.getObject();
            if (node != null && node.isRegistered()) {
              AbstractMigrationRefactoring migrationRefactoring=myFinder.getRefactoring(aliveIncludedResult);
              if (MigrationScriptUtil.isApplicableRefactoring(node,migrationRefactoring)) {
                MigrationScriptUtil.performRefactoring(node,migrationRefactoring);
              }
            }
          }
          progress.setValue(aliveIncludedResults.size());
          progress.paintImmediately(new Rectangle(progress.getSize()));
          checkMigrationResults();
        }
      }
);
    }
  }
);
}
