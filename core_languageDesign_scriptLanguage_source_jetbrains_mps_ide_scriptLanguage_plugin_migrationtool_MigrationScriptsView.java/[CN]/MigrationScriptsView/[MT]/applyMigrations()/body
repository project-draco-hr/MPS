{
  LOG.checkEDT();
  final int aliveResultCount=myFinder.getLastSearchResults().getAliveResults().size();
  if (aliveResultCount == 0) {
    updateControls(false,new JLabel("done"));
    return;
  }
  final JProgressBar progress=new JProgressBar(0,aliveResultCount);
  progress.setString("applying migrations...");
  progress.setStringPainted(true);
  progress.setBorderPainted(false);
  updateControls(false,progress);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          List<SearchResult<SNode>> aliveResults=myFinder.getLastSearchResults().getAliveResults();
          if (!aliveResults.isEmpty()) {
            int progressCount=0;
            for (            SearchResult<SNode> aliveResult : aliveResults) {
              progress.setValue((progressCount++));
              progress.paintImmediately(new Rectangle(progress.getSize()));
              SNode node=aliveResult.getObject();
              if (node != null && node.isRegistered()) {
                AbstractMigrationRefactoring migrationRefactoring=myFinder.getRefactoring(aliveResult);
                if (MigrationScriptUtil.isApplicableRefactoring(node,migrationRefactoring)) {
                  MigrationScriptUtil.performRefactoring(node,migrationRefactoring);
                }
              }
            }
            progress.setValue(aliveResultCount);
            progress.paintImmediately(new Rectangle(progress.getSize()));
            checkMigrationResults();
          }
        }
      }
);
    }
  }
);
}
