{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new AbstractSearchScope(){
            @NotNull @Override public List<SNode> getNodes(            Condition<SNode> p0){
              List<SNode> result=new ArrayList<SNode>();
              SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
              for (              SNode extension : ListSequence.fromList(SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x1a4abaca2a94ce10L,"jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension")))) {
                if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_BehaviorDescriptor.getLooseType_id4YTQtEKnnzf.invoke(SLinkOperations.getTarget(extension,MetaAdapterFactory.getContainmentLink(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x1a4abaca2a94ce10L,0x1a4abaca2a959cfeL,"type")),SetSequence.fromSet(new HashSet<SNode>())))) {
                  for (                  SNode method : ListSequence.fromList(SLinkOperations.getChildren(extension,MetaAdapterFactory.getContainmentLink(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x6f5433076549f519L,0x6f5433076549f51bL,"methods")))) {
                    if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                      ListSequence.fromList(result).addElement(method);
                    }
                  }
                }
              }
              for (              SNode container : ListSequence.fromList(SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x6f5433076532f593L,"jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer")))) {
                for (                SNode method : ListSequence.fromList(SLinkOperations.getChildren(container,MetaAdapterFactory.getContainmentLink(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x6f5433076549f519L,0x6f5433076549f51bL,"methods")))) {
                  if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_BehaviorDescriptor.getLooseType_id4YTQtEKnnzf.invoke(SLinkOperations.getTarget(method,MetaAdapterFactory.getContainmentLink(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x1583d1b63365e7f9L,0x6f54330765374812L,"extendedType")),SetSequence.fromSet(new HashSet<SNode>())))) {
                    if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                      ListSequence.fromList(result).addElement(method);
                    }
                  }
                }
              }
              return ListSequence.fromListWithValues(new ArrayList<SNode>(),result);
            }
            @Override public boolean isInScope(            SNode node){
              SNode extMethod=SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L,0x81928b5ce1f69f80L,0x1583d1b63365e7f9L,"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration"));
              SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
              return TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),Type_BehaviorDescriptor.getLooseType_id4YTQtEKnnzf.invoke(ExtensionMethodDeclaration_BehaviorDescriptor.getThisType_id6XkcKt_eUWM.invoke(extMethod),SetSequence.fromSet(new HashSet<SNode>()))) && VisibilityUtil.isVisible(_context.getReferenceNode(),extMethod);
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1t8qmy_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
