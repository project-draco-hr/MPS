{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new AbstractSearchScope(){
            @NotNull public List<SNode> getNodes(            Condition<SNode> p0){
              List<SNode> result=new ArrayList<SNode>();
              SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
              for (              SNode extension : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension"))) {
                if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(extension,"type",true),"virtual_getLooseType_5744862332972792015",new Object[]{SetSequence.fromSet(new HashSet<SNode>())}))) {
                  for (                  SNode method : ListSequence.fromList(SLinkOperations.getTargets(extension,"methods",true))) {
                    if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                      ListSequence.fromList(result).addElement(method);
                    }
                  }
                }
              }
              for (              SNode container : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer"))) {
                for (                SNode method : ListSequence.fromList(SLinkOperations.getTargets(container,"methods",true))) {
                  if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(method,"extendedType",true),"virtual_getLooseType_5744862332972792015",new Object[]{SetSequence.fromSet(new HashSet<SNode>())}))) {
                    if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
                      ListSequence.fromList(result).addElement(method);
                    }
                  }
                }
              }
              return ListSequence.fromListWithValues(new ArrayList<SNode>(),result);
            }
            @Override public boolean isInScope(            SNode node){
              SNode extMethod=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration");
              SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
              return TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),ExtensionMethodDeclaration_Behavior.call_getThisType_8022092943109893938(extMethod),"virtual_getLooseType_5744862332972792015",new Object[]{SetSequence.fromSet(new HashSet<SNode>())})) && VisibilityUtil.isVisible(_context.getReferenceNode(),extMethod);
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1t8qmy_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
