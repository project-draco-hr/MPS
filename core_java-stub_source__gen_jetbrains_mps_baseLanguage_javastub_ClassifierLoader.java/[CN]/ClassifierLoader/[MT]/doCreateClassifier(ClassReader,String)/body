{
  final ClassifierKind kind=ClassifierKind.getClassifierKind(classReader);
  final SNodeId nodeId=ASMNodeId.createId(className);
  final String shortName=NameUtil.shortNameFromLongName(className.replace('$','.'));
  SNode lazyRoot;
switch (kind) {
case CLASS:
    lazyRoot=new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"),nodeId);
  break;
case INTERFACE:
lazyRoot=new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"),nodeId);
break;
case ENUM:
lazyRoot=new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc367070a5L,"jetbrains.mps.baseLanguage.structure.EnumClass"),nodeId);
break;
case ANNOTATIONS:
lazyRoot=new LazySNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a69dc80cL,"jetbrains.mps.baseLanguage.structure.Annotation"),nodeId);
break;
default :
return null;
}
SNode rv=SNodeOperations.as(lazyRoot,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
SPropertyOperations.set(rv,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"),shortName);
return rv;
}
