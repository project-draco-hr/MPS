{
  List<SModel> m=((List<SModel>)MapSequence.fromMap(_params).get("models"));
  final Iterable<SModel> seq=ListSequence.fromList(m).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return !(it.isReadOnly()) && it.getSource() instanceof FileDataSource;
    }
  }
);
  final SRepository repo=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
  final FolderModelFactory filePerRootFactory=PersistenceRegistry.getInstance().getFolderModelFactory("file-per-root");
  repo.getModelAccess().runWriteAction(new Runnable(){
    public void run(){
      repo.saveAll();
      for (      SModel smodel : Sequence.fromIterable(seq)) {
        IFile oldFile=((FileDataSource)smodel.getSource()).getFile();
        ModelRoot modelRoot=smodel.getModelRoot();
        if (!(modelRoot instanceof FileBasedModelRoot)) {
          continue;
        }
        SModel newModel=PersistenceUtil.loadModel(oldFile);
        if (newModel == null) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("cannot read " + smodel);
          }
          continue;
        }
        Iterable<SModel.Problem> problems=Sequence.fromIterable(((Iterable<SModel.Problem>)newModel.getProblems())).where(new IWhereFilter<SModel.Problem>(){
          public boolean accept(          SModel.Problem it){
            return it.isError();
          }
        }
);
        if (Sequence.fromIterable(problems).isNotEmpty()) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("cannot read " + smodel + ": "+ Sequence.fromIterable(problems).first().getText());
          }
          continue;
        }
        try {
          DataSource newSource=filePerRootFactory.createNewSource((FileBasedModelRoot)modelRoot,null,newModel.getModelName(),new HashMap<String,String>());
          SModule module=smodel.getModule();
          filePerRootFactory.save(newModel,newSource);
          if (module != null) {
            ((SModuleBase)module).unregisterModel((SModelBase)smodel);
          }
          oldFile.delete();
          ((AbstractModule)module).updateModelsSet();
        }
 catch (        IOException ex) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("cannot write " + smodel,ex);
          }
        }
catch (        ModelSaveException ex) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("cannot write " + smodel,ex);
          }
        }
      }
    }
  }
);
}
