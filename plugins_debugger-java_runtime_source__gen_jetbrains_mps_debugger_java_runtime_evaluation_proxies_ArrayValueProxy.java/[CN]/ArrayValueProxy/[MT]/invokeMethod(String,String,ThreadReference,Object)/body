{
  ClassType objectType=(ClassType)EvaluationUtils.getInstance().findClassType("java.lang.Object",myValue.virtualMachine());
  final Method method=EvaluationUtils.getInstance().findMethod(objectType,name,jniSignature);
  final List<Value> argValues=MirrorUtil.getInstance().getValues(myValue.virtualMachine(),args);
  return EvaluationUtils.handleInvocationExceptions(new EvaluationUtils.ThreadInvocatable<IValueProxy>(threadReference){
    @Override public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {
      Value result=getArrayValue().invokeMethod(threadReference,method,argValues,0);
      return MirrorUtil.getInstance().getValueProxy(result);
    }
  }
);
}
