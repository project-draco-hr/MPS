{
  Set<SNodeId> descendantIds=SetSequence.fromSetWithValues(new HashSet<SNodeId>(),ListSequence.fromList(SNodeOperations.getDescendants(root,null,true,new String[]{})).select(new ISelector<SNode,SNodeId>(){
    public SNodeId select(    SNode n){
      return n.getSNodeId();
    }
  }
));
  SModel model=SNodeOperations.getModel(root);
  myFileAnnotation=fileAnnotation;
  for (int line=0; line < ListSequence.fromList(fileLineToId).count(); line++) {
    SNode node=null;
    SNodeId id=ListSequence.fromList(fileLineToId).getElement(line);
    if (id != null && SetSequence.fromSet(descendantIds).contains(id)) {
      node=model.getNodeById(id);
    }
    if (node == null) {
      continue;
    }
    if (MapSequence.fromMap(myNodeIdToFileLine).containsKey(id)) {
      MapSequence.fromMap(myNodeIdToFileLine).put(id,getFileLineWithMaxRevision(MapSequence.fromMap(myNodeIdToFileLine).get(id),line));
    }
 else {
      MapSequence.fromMap(myNodeIdToFileLine).put(id,line);
    }
  }
  myModelVirtualFile=modelVirtualFile;
  myModelDescriptor=model.getModelDescriptor();
  myFileLineToId=fileLineToId;
  myVcs=vcs;
}
