{
  graphics.setFont(myFont);
  graphics.setColor(Color.BLACK);
  Map<AnnotationAspectSubcolumn,Integer> subcolumnToX=MapSequence.fromMap(new HashMap<AnnotationAspectSubcolumn,Integer>());
  int x=1;
  for (  AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
    MapSequence.fromMap(subcolumnToX).put(subcolumn,x);
    x+=subcolumn.getWidth();
  }
  for (int i=0; i < ListSequence.fromList(myPseudoLinesY).count(); i++) {
    if (myAuthorAnnotationAspect != null) {
      String author=myAuthorAnnotationAspect.getValue(ListSequence.fromList(myPseudoLinesToFileLines).getElement(i));
      graphics.setColor(MapSequence.fromMap(myAuthorsToColors).get(author));
      int height=(i == ListSequence.fromList(myPseudoLinesY).count() - 1 ? component.getHeight() - ListSequence.fromList(myPseudoLinesY).last() : ListSequence.fromList(myPseudoLinesY).getElement(i + 1) - ListSequence.fromList(myPseudoLinesY).getElement(i));
      graphics.fillRect(0,ListSequence.fromList(myPseudoLinesY).getElement(i),getWidth(),height);
    }
    graphics.setColor(StyleAttributes.TEXT_COLOR.combine(null,null));
    for (    AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
      graphics.drawString(subcolumn.getTextForFileLine(ListSequence.fromList(myPseudoLinesToFileLines).getElement(i)),MapSequence.fromMap(subcolumnToX).get(subcolumn),graphics.getFontMetrics().getAscent() + ListSequence.fromList(myPseudoLinesY).getElement(i));
    }
  }
}
