{
  graphics.setFont(myFont);
  graphics.setColor(Color.BLACK);
  final Map<AnnotationAspectSubcolumn,Integer> subcolumnToX=MapSequence.fromMap(new HashMap<AnnotationAspectSubcolumn,Integer>());
  int x=1;
  for (  AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
    MapSequence.fromMap(subcolumnToX).put(subcolumn,x);
    x+=subcolumn.getWidth();
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
synchronized (myCurrentPseudoLinesLock) {
        assureCurrentPseudoLinesCalculated(component);
        for (int pseudoLine=0; pseudoLine < ListSequence.fromList(myPseudoLinesY).count(); pseudoLine++) {
          int fileLine=ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
          if (!(SetSequence.fromSet(myCurrentPseudoLines).contains(pseudoLine))) {
            if (myAuthorAnnotationAspect != null) {
              String author=myAuthorAnnotationAspect.getValue(fileLine);
              graphics.setColor(MapSequence.fromMap(myAuthorsToColors).get(author));
              int height=(pseudoLine == ListSequence.fromList(myPseudoLinesY).count() - 1 ? component.getHeight() - ListSequence.fromList(myPseudoLinesY).last() : ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine + 1) - ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine));
              graphics.fillRect(0,ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine),getWidth(),height);
            }
            graphics.setColor(StyleAttributes.TEXT_COLOR.combine(null,null));
            for (            AnnotationAspectSubcolumn subcolumn : ListSequence.fromList(myAspectSubcolumns)) {
              graphics.drawString(subcolumn.getTextForFileLine(fileLine),MapSequence.fromMap(subcolumnToX).get(subcolumn),graphics.getFontMetrics().getAscent() + ListSequence.fromList(myPseudoLinesY).getElement(pseudoLine));
            }
          }
        }
      }
    }
  }
);
}
