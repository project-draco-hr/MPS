{
  if (component == null || component.isDisposed()) {
    return;
  }
  Iterable<EditorCell> nonTrivialCells=Sequence.fromIterable(EditorUtils.getCellDescendants(component.getRootCell())).where(new IWhereFilter<EditorCell>(){
    public boolean accept(    EditorCell cell){
      return cell.getWidth() * cell.getHeight() != 0;
    }
  }
);
  Set<Integer> yCoordinatesSet=SetSequence.fromSetWithValues(new HashSet<Integer>(),Sequence.fromIterable(nonTrivialCells).select(new ISelector<EditorCell,Integer>(){
    public Integer select(    EditorCell cell){
      return cell.getY();
    }
  }
));
  myPseudoLinesY=SetSequence.fromSet(yCoordinatesSet).sort(new ISelector<Integer,Comparable<?>>(){
    public Comparable<?> select(    Integer y){
      return y;
    }
  }
,true).toListSequence();
  myPseudoLinesToFileLines=ListSequence.fromList(new ArrayList<Integer>());
  ListSequence.fromList(myPseudoLinesY).visitAll(new IVisitor<Integer>(){
    public void visit(    Integer t){
      ListSequence.fromList(myPseudoLinesToFileLines).addElement(-1);
    }
  }
);
  myWidth=0;
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModel model=component.getEditedNode().getModel();
      for (      IMapping<SNodeId,Integer> nodeIdToFileLine : MapSequence.fromMap(myNodeIdToFileLine)) {
        final SNode node=model.getNodeById(nodeIdToFileLine.key());
        int fileLine=nodeIdToFileLine.value();
        EditorCell cell=ListSequence.fromList(SNodeOperations.getAncestors(node,null,true)).select(new ISelector<SNode,EditorCell>(){
          public EditorCell select(          SNode n){
            return component.findNodeCell(node);
          }
        }
).findFirst(new IWhereFilter<EditorCell>(){
          public boolean accept(          EditorCell c){
            return c != null;
          }
        }
);
        if (cell == null) {
          continue;
        }
        int startPseudoLine=Collections.binarySearch(myPseudoLinesY,cell.getY());
        int endPseudoLine=Collections.binarySearch(myPseudoLinesY,cell.getY() + cell.getHeight());
        if (endPseudoLine < 0) {
          endPseudoLine=-endPseudoLine - 1;
        }
        for (int pseudoLine=startPseudoLine; pseudoLine < endPseudoLine; pseudoLine++) {
          int currentFileLine=ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
          if (currentFileLine != -1) {
            VcsRevisionNumber currentRevision=myFileAnnotation.getLineRevisionNumber(currentFileLine);
            VcsRevisionNumber newRevision=myFileAnnotation.getLineRevisionNumber(fileLine);
            if (currentRevision == null) {
            }
 else             if (newRevision == null || newRevision.compareTo(currentRevision) <= 0) {
              continue;
            }
          }
          ListSequence.fromList(myPseudoLinesToFileLines).setElement(pseudoLine,fileLine);
        }
        int widthCandidate=component.getGraphics().getFontMetrics(myFont).stringWidth(getTextForFileLine(fileLine)) + 3;
        myWidth=Math.max(myWidth,widthCandidate);
      }
    }
  }
);
}
