{
  if (component == null || component.isDisposed() || component.getGraphics() == null) {
    return;
  }
  Iterable<EditorCell> nonTrivialCells=Sequence.fromIterable(EditorUtils.getCellDescendants(component.getRootCell())).where(new IWhereFilter<EditorCell>(){
    public boolean accept(    EditorCell cell){
      return cell.getWidth() * cell.getHeight() != 0;
    }
  }
);
  Set<Integer> yCoordinatesSet=SetSequence.fromSetWithValues(new HashSet<Integer>(),Sequence.fromIterable(nonTrivialCells).select(new ISelector<EditorCell,Integer>(){
    public Integer select(    EditorCell cell){
      return cell.getY();
    }
  }
));
  myPseudoLinesY=SetSequence.fromSet(yCoordinatesSet).sort(new ISelector<Integer,Comparable<?>>(){
    public Comparable<?> select(    Integer y){
      return y;
    }
  }
,true).toListSequence();
  myPseudoLinesToFileLines=ListSequence.fromList(new ArrayList<Integer>());
  ListSequence.fromList(myPseudoLinesY).visitAll(new IVisitor<Integer>(){
    public void visit(    Integer t){
      ListSequence.fromList(myPseudoLinesToFileLines).addElement(-1);
    }
  }
);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModel model=component.getEditedNode().getModel();
      SNode editedNode=component.getEditedNode();
      for (int fileLine=0; fileLine < ListSequence.fromList(myFileLineToContent).count(); fileLine++) {
        LineContent content=ListSequence.fromList(myFileLineToContent).getElement(fileLine);
        if (content == null) {
          continue;
        }
        SNode node=model.getNodeById(content.getNodeId());
        if (node == null || !(node.isDescendantOf(editedNode,true))) {
          continue;
        }
        EditorCell cell=findCellForNodeAndContent(component,node,content);
        if (cell == null) {
          continue;
        }
        int startPseudoLine=Collections.binarySearch(myPseudoLinesY,cell.getY());
        int endPseudoLine=Collections.binarySearch(myPseudoLinesY,cell.getY() + cell.getHeight());
        if (endPseudoLine < 0) {
          endPseudoLine=-endPseudoLine - 1;
        }
        for (int pseudoLine=startPseudoLine; pseudoLine < endPseudoLine; pseudoLine++) {
          int currentFileLine=ListSequence.fromList(myPseudoLinesToFileLines).getElement(pseudoLine);
          ListSequence.fromList(myPseudoLinesToFileLines).setElement(pseudoLine,getFileLineWithMaxRevision(currentFileLine,fileLine));
        }
      }
    }
  }
);
  for (  AnnotationAspectSubcolumn aspectSubcolumn : ListSequence.fromList(myAspectSubcolumns)) {
    aspectSubcolumn.computeWidth(component.getGraphics().getFontMetrics(myFont),myPseudoLinesToFileLines);
  }
}
