{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.AbstractCall","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.buildlanguage.structure.IProjectComponent","jetbrains.mps.buildlanguage.structure.ICommented"},new String[]{},new String[]{},new String[]{"nested","internalText"},new boolean[]{true,false},true,false,"task","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.AbstractImportProject","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"import abstract project","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.AbstractImportProperties","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"import-properties","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.buildlanguage.structure.IProjectComponent","jetbrains.mps.buildlanguage.structure.ICommented"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false},true,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.BinaryOperation","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{},new String[]{"left","right"},new boolean[]{false,false},true,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.BooleanLiteral","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"boolean literal","boolean literal in build language","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.BooleanType","jetbrains.mps.buildlanguage.structure.PropertyType",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"boolean","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.CallReference","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{"call"},new String[]{},new boolean[]{},false,false,"","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.CallReferenceType","jetbrains.mps.buildlanguage.structure.PropertyType",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"reference","reference to a call","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.Enum","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"constants"},new boolean[]{true},true,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration","jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration",false,new String[]{"jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration"},new String[]{"checkOnStart"},new String[]{},new String[]{},new boolean[]{},false,false,"external property","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.FileName","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false},false,false,"file (","file in build language","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.FileType","jetbrains.mps.buildlanguage.structure.PropertyType",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"file","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IAntScript",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ICommented",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IDeclaration",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IProjectComponent",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IPropertyHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ISource",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ITargetReference",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ImportProject","jetbrains.mps.buildlanguage.structure.AbstractImportProject",false,new String[]{"jetbrains.mps.buildlanguage.structure.AbstractImportProject"},new String[]{},new String[]{"project"},new String[]{},new boolean[]{},false,false,"import","import buildlanguage project","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ImportPropertiesFromFile","jetbrains.mps.buildlanguage.structure.AbstractImportProperties",false,new String[]{"jetbrains.mps.buildlanguage.structure.AbstractImportProperties"},new String[]{},new String[]{},new String[]{"propertyFile"},new boolean[]{false},false,false,"import-properties","import properties from file","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.ImportPropertyNode","jetbrains.mps.buildlanguage.structure.AbstractImportProperties",false,new String[]{"jetbrains.mps.buildlanguage.structure.AbstractImportProperties","jetbrains.mps.buildlanguage.structure.IProjectComponent"},new String[]{},new String[]{"propertyNode"},new String[]{},new boolean[]{},false,false,"import-properties","import property node","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IntLiteral","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"integer literal","integer literal in build language","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IntegerEnum","jetbrains.mps.buildlanguage.structure.Enum",false,new String[]{"jetbrains.mps.buildlanguage.structure.Enum"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"{ int }","enum of integer","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.IntegerType","jetbrains.mps.buildlanguage.structure.PropertyType",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"integer","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.MultiLineString","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"stringExpression"},new boolean[]{true},false,false,"multi-line expression","multi-line expression in buildlanguage","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.PlusOperation","jetbrains.mps.buildlanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.buildlanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"plus operation","plus operation in build language","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.Project","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.buildlanguage.structure.IPropertyHolder","jetbrains.mps.buildlanguage.structure.IAntScript"},new String[]{},new String[]{},new String[]{"target","default","importProject","paths","importProperties","basedir","property"},new boolean[]{true,false,true,true,true,false,true},false,false,"project","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.PropertyDeclaration","jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration",false,new String[]{"jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration"},new String[]{},new String[]{},new String[]{"propertyValue"},new boolean[]{false},false,false,"property","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.PropertyReference","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"propertyDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.PropertyType","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.buildlanguage.structure.ISource"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.StringEnum","jetbrains.mps.buildlanguage.structure.Enum",false,new String[]{"jetbrains.mps.buildlanguage.structure.Enum"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"{ string }","enum of string","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.StringLiteral","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"\"\"","string literal in build language","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.StringType","jetbrains.mps.buildlanguage.structure.PropertyType",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"string","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.TargetDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.buildlanguage.structure.IProjectComponent","jetbrains.mps.buildlanguage.structure.IPropertyHolder","jetbrains.mps.buildlanguage.structure.ICommented"},new String[]{"if","unless"},new String[]{},new String[]{"taskCall","depends","propertyList"},new boolean[]{true,true,true},false,false,"target","","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.TargetReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"targetDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.buildlanguage.structure.ITargetReference"},new String[]{"fullName"},new String[]{"declaration"},new String[]{},new boolean[]{},false,false,"","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.buildlanguage.structure.XmlStringLiteral","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{},new String[]{"xml"},new boolean[]{false},false,false,"","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
