{
  if (clsfr instanceof ClassConcept) {
    final ClassConcept cls=(ClassConcept)clsfr;
    if (ac.isPublic()) {
      cls.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));
    }
 else {
      cls.setVisibility(null);
    }
    cls.setAbstractClass(ac.isAbstract());
    cls.setIsDeprecated(ac.isDeprecated());
    updateAnnotations(ac,cls);
    updateTypeVariables(ac,cls.getModel(),cls);
    updateExtendsAndImplements(ac,cls);
    updateInstanceFields(ac,cls);
    updateStaticFields(ac,cls);
    updateConstructors(ac,cls);
    updateInstanceMethods(ac,cls);
    updateStaticMethods(ac,cls);
    updateInnerClassifiers(ac,cls);
    cls.setIsFinal(ac.isFinal());
  }
  if (clsfr instanceof Annotation) {
    final Annotation annotation=(Annotation)clsfr;
    if (ac.isPublic()) {
      annotation.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));
    }
 else {
      annotation.setVisibility(null);
    }
    updateAnnotationMethods(ac,annotation);
    updateAnnotations(ac,annotation);
  }
  if (clsfr instanceof Interface && !((clsfr instanceof Annotation))) {
    final Interface intfc=(Interface)clsfr;
    if (ac.isPublic()) {
      intfc.setVisibility(PublicVisibility.newInstance(clsfr.getModel()));
    }
 else {
      intfc.setVisibility(null);
    }
    updateAnnotations(ac,intfc);
    updateTypeVariables(ac,intfc.getModel(),intfc);
    updateExtendsForInterface(ac,intfc);
    updateStaticFields(ac,intfc);
    updateInstanceMethods(ac,intfc);
    updateInnerClassifiers(ac,intfc);
    intfc.setIsDeprecated(ac.isDeprecated());
  }
}
