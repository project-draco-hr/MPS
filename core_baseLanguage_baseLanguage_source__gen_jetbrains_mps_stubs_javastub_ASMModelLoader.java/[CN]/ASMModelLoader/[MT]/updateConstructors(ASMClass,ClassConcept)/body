{
  SModel model=cls.getModel();
  for (  ASMMethod c : ac.getDeclaredConstructors()) {
    if (c.isPrivate() && SKIP_PRIVATE) {
      continue;
    }
    ConstructorDeclaration constructor=ConstructorDeclaration.newInstance(model);
    constructor.getNode().setId(ASMNodeId.createId(ac,c));
    constructor.setBody(((StatementList)((StubStatementList)SNodeOperations.getAdapter((SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList",null))))));
    constructor.setVisibility(createVisibility(c,model));
    constructor.setIsDeprecated(c.isDeprecated());
    for (    ASMTypeVariable tv : c.getTypeParameters()) {
      TypeVariableDeclaration typeVariableDeclaration=TypeVariableDeclaration.newInstance(cls.getModel());
      typeVariableDeclaration.setName(tv.getName());
      constructor.addTypeVariableDeclaration(typeVariableDeclaration);
    }
    constructor.setName(cls.getName());
    List<ASMType> parameterType=c.getGenericParameterTypes();
    List<String> parameterNames=c.getParameterNames();
    for (int i=0; i < parameterType.size(); i++) {
      ASMType pt=parameterType.get(i);
      ParameterDeclaration pd=ParameterDeclaration.newInstance(model);
      pd.setName(parameterNames.get(i));
      pd.setType(getTypeByASMType(pt,constructor,cls,model));
      addAnnotationsToParameter(pd,c.getParameterAnnotations().get(i));
      constructor.addParameter(pd);
    }
    for (    ASMAnnotation annotation : c.getAnnotations()) {
      constructor.addAnnotation(createAnnotation(annotation,model));
    }
    for (    ASMType exception : c.getExceptionTypes()) {
      constructor.addThrowsItem(getTypeByASMType(exception,constructor,cls,model));
    }
    cls.addConstructor(constructor);
  }
}
