{
  if (value instanceof Byte) {
    Byte b=(Byte)value;
    IntegerConstant res=IntegerConstant.newInstance(model);
    res.setValue(b);
    return res;
  }
  if (value instanceof Boolean) {
    Boolean b=(Boolean)value;
    BooleanConstant res=BooleanConstant.newInstance(model);
    res.setValue(b);
    return res;
  }
  if (value instanceof Character) {
    return null;
  }
  if (value instanceof Short) {
    Short s=(Short)value;
    IntegerConstant res=IntegerConstant.newInstance(model);
    res.setValue(s);
    return res;
  }
  if (value instanceof Integer) {
    Integer i=(Integer)value;
    IntegerConstant res=IntegerConstant.newInstance(model);
    res.setValue(i);
    return res;
  }
  if (value instanceof Long) {
    return null;
  }
  if (value instanceof Float) {
    Float f=(Float)value;
    FloatingPointConstant res=FloatingPointConstant.newInstance(model);
    res.setValue("" + f);
    return res;
  }
  if (value instanceof Double) {
    Double d=(Double)value;
    FloatingPointConstant res=FloatingPointConstant.newInstance(model);
    res.setValue("" + d);
    return res;
  }
  if (value instanceof String) {
    String s=(String)value;
    StringLiteral res=StringLiteral.newInstance(model);
    res.setValue(s);
    return res;
  }
  if (value instanceof List) {
    List<Object> list=(List)value;
    ArrayLiteral res=ArrayLiteral.newInstance(model);
    for (    Object o : list) {
      Expression annotationValue=this.getAnnotationValue(o,model);
      if (annotationValue != null) {
        res.addItem(annotationValue);
      }
    }
    return res;
  }
  if (value instanceof ASMEnumValue) {
    ASMEnumValue enumValue=(ASMEnumValue)value;
    EnumConstantReference res=EnumConstantReference.newInstance(model);
    ASMClassType c=(ASMClassType)enumValue.getType();
    this.addClassifierReference(res.getNode(),EnumConstantReference.ENUM_CLASS,c);
    this.addEnumConstReference(res.getNode(),EnumConstantReference.ENUM_CONSTANT_DECLARATION,enumValue);
    return res;
  }
  if (value instanceof ASMAnnotation) {
    ASMAnnotation annotation=(ASMAnnotation)value;
    AnnotationInstanceExpression res=AnnotationInstanceExpression.newInstance(model);
    res.setAnnotationInstance(this.createAnnotation(annotation,model));
    return res;
  }
  if (value instanceof ASMClassType) {
    ASMClassType classType=(ASMClassType)value;
    ClassifierClassExpression res=ClassifierClassExpression.newInstance(model);
    this.addClassifierReference(res.getNode(),ClassifierClassExpression.CLASSIFIER,classType);
    return res;
  }
  LOG.error("couldn't create annotation value from " + ((value == null ? "" : value.getClass().getName())) + " : "+ value);
  return null;
}
