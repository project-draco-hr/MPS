{
  SModel model=cls.getModel();
  for (  ASMMethod m : ac.getDeclaredMethods()) {
    if (m.isPrivate()) {
      continue;
    }
    if (m.isStatic()) {
      continue;
    }
    if (m.isBridge()) {
      continue;
    }
    if (m.isCompilerGenerated()) {
      continue;
    }
    InstanceMethodDeclaration methodDeclaration=InstanceMethodDeclaration.newInstance(model);
    methodDeclaration.getNode().setId(ASMNodeId.createId(ac,m));
    methodDeclaration.setBody(((StatementList)((StubStatementList)SNodeOperations.getAdapter((SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList",null))))));
    methodDeclaration.setVisibility(createVisibility(m,model));
    methodDeclaration.setIsFinal(m.isFinal());
    methodDeclaration.setIsAbstract(m.isAbstract());
    methodDeclaration.setIsDeprecated(m.isDeprecated());
    updateTypeVariables(m,model,methodDeclaration,cls);
    methodDeclaration.setName(m.getName());
    methodDeclaration.setReturnType(getTypeByASMType(m.getGenericReturnType(),methodDeclaration,cls,model));
    List<ASMType> parameterTypes=m.getGenericParameterTypes();
    List<String> parameterNames=m.getParameterNames();
    for (int i=0; i < parameterTypes.size(); i++) {
      ASMType paramType=parameterTypes.get(i);
      ParameterDeclaration parameterDeclaration=ParameterDeclaration.newInstance(model);
      parameterDeclaration.setName(parameterNames.get(i));
      parameterDeclaration.setType(getTypeByASMType(paramType,methodDeclaration,cls,model));
      addAnnotationsToParameter(parameterDeclaration,m.getParameterAnnotations().get(i));
      methodDeclaration.addParameter(parameterDeclaration);
    }
    for (    ASMType exception : m.getExceptionTypes()) {
      methodDeclaration.addThrowsItem(getTypeByASMType(exception,methodDeclaration,cls,model));
    }
    for (    ASMAnnotation annotation : m.getAnnotations()) {
      methodDeclaration.addAnnotation(createAnnotation(annotation,model));
    }
    cls.addMethod(methodDeclaration);
  }
}
