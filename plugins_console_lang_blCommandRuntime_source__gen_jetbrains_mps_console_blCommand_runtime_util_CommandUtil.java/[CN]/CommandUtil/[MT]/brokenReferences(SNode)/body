{
  return ListSequence.fromList(SNodeOperations.getDescendants(scopeSubTree,null,false,new String[]{})).translate(new ITranslator2<SNode,SReference>(){
    public Iterable<SReference> translate(    SNode it){
      return SNodeOperations.getReferences(it);
    }
  }
).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(it) == null;
    }
  }
).toListSequence();
}
