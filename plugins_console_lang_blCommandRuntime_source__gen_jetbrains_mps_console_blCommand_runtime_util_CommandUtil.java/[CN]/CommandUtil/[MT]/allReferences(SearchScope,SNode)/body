{
  return Sequence.fromIterable(nodes(scope,null)).translate(new ITranslator2<SNode,SReference>(){
    public Iterable<SReference> translate(    SNode it){
      return SNodeOperations.getReferences(it);
    }
  }
).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return check_1pinza_a0a0a0a0d(check_1pinza_a0a0a0a0a3(it),concept);
    }
  }
);
}
