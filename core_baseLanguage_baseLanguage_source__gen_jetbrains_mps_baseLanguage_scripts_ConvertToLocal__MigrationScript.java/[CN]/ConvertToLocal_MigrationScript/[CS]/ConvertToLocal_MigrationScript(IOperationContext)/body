{
  super("convert to local");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ConvertLocalFieldReference";
    }
    public String getAdditionalInfo(){
      return "ConvertLocalFieldReference";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SNodeOperations.isInstanceOf(IOperation_Behavior.call_getOperand_1213877410070(node),"jetbrains.mps.baseLanguage.structure.ThisExpression"))) {
        return false;
      }
      List<SNode> param=new ParameterScope(node).getNodes();
      List<SNode> vars=new LocalVariablesScope(node).getNodes();
      vars.addAll(param);
      SNode field=SLinkOperations.getTarget(node,"fieldDeclaration",false);
      if (field == null) {
        return false;
      }
      for (      SNode var : vars) {
        if (SNodeOperations.isInstanceOf(var,"jetbrains.mps.lang.core.structure.INamedConcept") && SPropertyOperations.getString(SNodeOperations.cast(var,"jetbrains.mps.lang.core.structure.INamedConcept"),"name").equals(SPropertyOperations.getString(field,"name")) && ListSequence.fromList(SNodeOperations.getAncestors(SNodeOperations.getAncestor(field,"jetbrains.mps.baseLanguage.structure.Classifier",false,false),"jetbrains.mps.baseLanguage.structure.Classifier",true)).contains(SNodeOperations.getAncestor(var,"jetbrains.mps.baseLanguage.structure.Classifier",false,false))) {
          return false;
        }
      }
      if (SLinkOperations.getTarget(SNodeOperations.cast(IOperation_Behavior.call_getOperand_1213877410070(node),"jetbrains.mps.baseLanguage.structure.ThisExpression"),"classConcept",false) == null) {
        return true;
      }
      SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(node);
      SNode declarationClassifier=SNodeOperations.getAncestor(field,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
      if (!(classifier == declarationClassifier || ListSequence.fromList(SNodeOperations.getAncestors(classifier,null,false)).contains(declarationClassifier))) {
        return false;
      }
      int constraint=IClassifiersSearchScope.INSTANCE_FIELD;
      while (classifier != declarationClassifier) {
        for (        SNode fieldDeclaration : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,node,constraint)) {
          if (SPropertyOperations.getString(fieldDeclaration,"name") != null && SPropertyOperations.getString(fieldDeclaration,"name").equals(SPropertyOperations.getString(field,"name"))) {
            return false;
          }
        }
        classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode fieldReference=SNodeOperations.replaceWithNewChild(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference");
      SLinkOperations.setTarget(fieldReference,"variableDeclaration",SLinkOperations.getTarget(node,"fieldDeclaration",false),false);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ConvertLocalInstanceMethodCall";
    }
    public String getAdditionalInfo(){
      return "ConvertLocalInstanceMethodCall";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SNodeOperations.isInstanceOf(IOperation_Behavior.call_getOperand_1213877410070(node),"jetbrains.mps.baseLanguage.structure.ThisExpression"))) {
        return false;
      }
      if (SLinkOperations.getTarget(SNodeOperations.cast(IOperation_Behavior.call_getOperand_1213877410070(node),"jetbrains.mps.baseLanguage.structure.ThisExpression"),"classConcept",false) == null) {
        return true;
      }
      SNode declaration=SLinkOperations.getTarget(node,"baseMethodDeclaration",false);
      SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(node);
      SNode declarationClassifier=SNodeOperations.getAncestor(declaration,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
      if (!(classifier == declarationClassifier || ListSequence.fromList(SNodeOperations.getAncestors(classifier,null,false)).contains(declarationClassifier))) {
        return false;
      }
      int constraint=IClassifiersSearchScope.INSTANCE_METHOD;
      while (classifier != declarationClassifier) {
        for (        SNode method : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,node,constraint)) {
          if (SPropertyOperations.getString(method,"name").equals(SPropertyOperations.getString(declaration,"name"))) {
            return false;
          }
        }
        classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode methodCall=SNodeOperations.replaceWithNewChild(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall");
      SLinkOperations.setTarget(methodCall,"baseMethodDeclaration",SLinkOperations.getTarget(node,"baseMethodDeclaration",false),false);
      ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)));
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
