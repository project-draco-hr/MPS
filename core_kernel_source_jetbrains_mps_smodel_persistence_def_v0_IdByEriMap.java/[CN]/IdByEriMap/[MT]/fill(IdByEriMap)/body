{
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]addClosingParenthesis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Expression]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~ParenthesisUtil.addClosingParenthesis(jetbrains.mps.baseLanguage.structure.Expression,boolean,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRight((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~ParenthesisUtil.moveParenthesisToTheRight(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeft((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~ParenthesisUtil.moveParenthesisToTheLeft(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheLeftInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~ParenthesisUtil.moveParenthesisToTheLeftInside(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]moveParenthesisToTheRightInside((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ParenthesizedExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~ParenthesisUtil.moveParenthesisToTheRightInside(jetbrains.mps.baseLanguage.structure.ParenthesizedExpression,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("static method ([Classifier]ParenthesisUtil).([StaticMethodDeclaration]checkOperationWRTPriority((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ParenthesisUtil.checkOperationWRTPriority(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]PresentationManager).([StaticMethodDeclaration]toString_1((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~PresentationManager.toString_1(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]setCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CheckPermissionAnnotation])))","~CheckPermission_AnnotationLink.setCheckPermission(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.webr.userManagement.structure.CheckPermissionAnnotation):void");
  idByEriMap.put("static method ([Classifier]CheckPermission_AnnotationLink).([StaticMethodDeclaration]getCheckPermission((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))","~CheckPermission_AnnotationLink.getCheckPermission(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.webr.userManagement.structure.CheckPermissionAnnotation");
  idByEriMap.put("method ([Classifier]AbstractDateTime).([InstanceMethodDeclaration]toCalendar((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))","~AbstractDateTime.toCalendar(java.util.Locale):java.util.Calendar");
  idByEriMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))","~Date.<init>(long)");
  idByEriMap.put("constructor [Classifier]Text[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Text.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]DevKit).([InstanceMethodDeclaration]getName())","~DevKit.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]FileItem).([InstanceMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~FileItem.getString(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setSizeMax((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~FileUploadBase.setSizeMax(long):void");
  idByEriMap.put("method ([Classifier]FileUploadBase).([InstanceMethodDeclaration]setHeaderEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~FileUploadBase.setHeaderEncoding(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]FileUploadBase).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))","~FileUploadBase.isMultipartContent(javax.servlet.http.HttpServletRequest):boolean");
  idByEriMap.put("constructor [Classifier]NotificationTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Map$Entry, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]]))","~NotificationTemplateCallHandler.<init>(webr.framework.textBuilder.TextBuilder,java.util.Map$Entry[])");
  idByEriMap.put("method ([Classifier]NotificationTemplateCallHandler).([InstanceMethodDeclaration]render())","~NotificationTemplateCallHandler.render():java.lang.String");
  idByEriMap.put("constructor [Classifier]MapEntry[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any))","~MapEntry.<init>(java.lang.Object,java.lang.Object)");
  idByEriMap.put("method ([Classifier]ITraversal).([InstanceMethodDeclaration]yieldValue((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~ITraversal.yieldValue(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]ITraversal).([InstanceMethodDeclaration]stopCursor())","~ITraversal.stopCursor():void");
  idByEriMap.put("static method ([Classifier]CursorFactory).([StaticMethodDeclaration]createCursor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~CursorFactory.createCursor(java.lang.Iterable):jetbrains.mps.baseLanguage.ext.collections.internal.ICursor");
  idByEriMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]moveToNext())","~ICursor.moveToNext():boolean");
  idByEriMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]getCurrent())","~ICursor.getCurrent():java.lang.Object");
  idByEriMap.put("method ([Classifier]ICursor).([InstanceMethodDeclaration]release())","~ICursor.release():void");
  idByEriMap.put("constructor [Classifier]SequenceWithSupplier[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IValuesSupplier, <any_>]))","~SequenceWithSupplier.<init>(jetbrains.mps.baseLanguage.ext.collections.internal.IValuesSupplier)");
  idByEriMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setDefaultBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HostToBaseUrlConfiguration.setDefaultBaseUrl(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]MatchingUtil).([StaticMethodDeclaration]matchNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~MatchingUtil.matchNodes(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]isPatternApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~PatternAddingUtil.isPatternApplicable(jetbrains.mps.nodeEditor.EditorContext):boolean");
  idByEriMap.put("static method ([Classifier]PatternAddingUtil).([StaticMethodDeclaration]addVariablePattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~PatternAddingUtil.addVariablePattern(jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())","~TraversalAxis.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())","~TraversalAxis.getValue():java.lang.String");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())","~TraversalAxis.getConstants():java.util.List");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TraversalAxis.parseValue(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
  idByEriMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]getOutputStream())","~ServletResponse.getOutputStream():javax.servlet.ServletOutputStream");
  idByEriMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setCharacterEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServletResponse.setCharacterEncoding(java.lang.String):void");
  idByEriMap.put("method ([Classifier]ServletResponse).([InstanceMethodDeclaration]setContentType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServletResponse.setContentType(java.lang.String):void");
  idByEriMap.put("method ([Classifier]GenericServlet).([InstanceMethodDeclaration]init((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ServletConfig])))","~GenericServlet.init(javax.servlet.ServletConfig):void");
  idByEriMap.put("method ([Classifier]ServletRequestWrapper).([InstanceMethodDeclaration]getParameterMap())","~ServletRequestWrapper.getParameterMap():java.util.Map");
  idByEriMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServletRequest.getAttribute(java.lang.String):java.lang.Object");
  idByEriMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getInputStream())","~ServletRequest.getInputStream():javax.servlet.ServletInputStream");
  idByEriMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]getParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServletRequest.getParameter(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]ServletRequest).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~ServletRequest.setAttribute(java.lang.String,java.lang.Object):void");
  idByEriMap.put("constructor [Classifier]String[ConstructorDeclaration] ()","~String.<init>()");
  idByEriMap.put("constructor [Classifier]QueryParameter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))","~QueryParameter.<init>(java.lang.String,java.lang.Object)");
  idByEriMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]getImageWritersByMIMEType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ImageIO.getImageWritersByMIMEType(java.lang.String):java.util.Iterator");
  idByEriMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]read((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))","~ImageIO.read(java.io.File):java.awt.image.BufferedImage");
  idByEriMap.put("static method ([Classifier]ImageIO).([StaticMethodDeclaration]write((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RenderedImage]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))","~ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream):boolean");
  idByEriMap.put("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]getOriginatingProvider())","~ImageWriter.getOriginatingProvider():javax.imageio.spi.ImageWriterSpi");
  idByEriMap.put("method ([Classifier]ImageWriter).([InstanceMethodDeclaration]dispose())","~ImageWriter.dispose():void");
  idByEriMap.put("constructor [Classifier]ByteArrayOutputStream[ConstructorDeclaration] ()","~ByteArrayOutputStream.<init>()");
  idByEriMap.put("method ([Classifier]ByteArrayOutputStream).([InstanceMethodDeclaration]toByteArray())","~ByteArrayOutputStream.toByteArray():byte[]");
  idByEriMap.put("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]))","~InputStreamReader.<init>(java.io.InputStream)");
  idByEriMap.put("constructor [Classifier]InputStreamReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~InputStreamReader.<init>(java.io.InputStream,java.lang.String)");
  idByEriMap.put("method ([Classifier]InputStreamReader).([InstanceMethodDeclaration]read())","~InputStreamReader.read():int");
  idByEriMap.put("method ([Classifier]OutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))","~OutputStream.write(byte[]):void");
  idByEriMap.put("constructor [Classifier]ByteArrayInputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))","~ByteArrayInputStream.<init>(byte[])");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~PrintStream.print(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println())","~PrintStream.println():void");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~PrintStream.println(boolean):void");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrintStream.println(java.lang.String):void");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]println((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~PrintStream.println(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]PrintStream).([InstanceMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrintStream.print(java.lang.String):void");
  idByEriMap.put("constructor [Classifier]BufferedReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader]))","~BufferedReader.<init>(java.io.Reader)");
  idByEriMap.put("method ([Classifier]BufferedReader).([InstanceMethodDeclaration]readLine())","~BufferedReader.readLine():java.lang.String");
  idByEriMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]read())","~InputStream.read():int");
  idByEriMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]reset())","~InputStream.reset():void");
  idByEriMap.put("constructor [Classifier]StringReader[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~StringReader.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]StringWriter[ConstructorDeclaration] ()","~StringWriter.<init>()");
  idByEriMap.put("method ([Classifier]StringWriter).([InstanceMethodDeclaration]getBuffer())","~StringWriter.getBuffer():java.lang.StringBuffer");
  idByEriMap.put("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~File.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]File[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~File.<init>(java.io.File,java.lang.String)");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getName())","~File.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getParentFile())","~File.getParentFile():java.io.File");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getAbsolutePath())","~File.getAbsolutePath():java.lang.String");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]exists())","~File.exists():boolean");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]isDirectory())","~File.isDirectory():boolean");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]isFile())","~File.isFile():boolean");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]length())","~File.length():long");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]listFiles())","~File.listFiles():java.io.File[]");
  idByEriMap.put("static method ([Classifier]File).([StaticMethodDeclaration]createTempFile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~File.createTempFile(java.lang.String,java.lang.String):java.io.File");
  idByEriMap.put("constructor [Classifier]FileOutputStream[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))","~FileOutputStream.<init>(java.io.File)");
  idByEriMap.put("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]write((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))","~FileOutputStream.write(byte[]):void");
  idByEriMap.put("method ([Classifier]FileOutputStream).([InstanceMethodDeclaration]close())","~FileOutputStream.close():void");
  idByEriMap.put("constructor [Classifier]BigDecimal[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~BigDecimal.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~MethodInvoker.setTargetObject(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]MethodInvoker).([InstanceMethodDeclaration]setTargetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MethodInvoker.setTargetMethod(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]EditorNavigationUtil).([StaticMethodDeclaration]navigateTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~EditorNavigationUtil.navigateTo(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext):void");
  idByEriMap.put("method ([Classifier]FileClassPathItem).([InstanceMethodDeclaration]getClassPath())","~FileClassPathItem.getClassPath():java.lang.String");
  idByEriMap.put("method ([Classifier]CompositeClassPathItem).([InstanceMethodDeclaration]getChildren())","~CompositeClassPathItem.getChildren():java.util.List");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ReflectionUtil.forName(jetbrains.mps.smodel.SNode):java.lang.Class");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Class]])))","~ReflectionUtil.getMethod(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.Class[]):java.lang.reflect.Method");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]staticInvoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~ReflectionUtil.staticInvoke(java.lang.reflect.Method,java.lang.Object[]):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Method]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~ReflectionUtil.invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ReflectionUtil.getEnum(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.Enum");
  idByEriMap.put("static method ([Classifier]ReflectionUtil).([StaticMethodDeclaration]getConstant((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ReflectionUtil.getConstant(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.Object");
  idByEriMap.put("method ([Classifier]ClassLoaderManager).([InstanceMethodDeclaration]getJavaStubsClassPathItem())","~ClassLoaderManager.getJavaStubsClassPathItem():jetbrains.mps.reloading.IClassPathItem");
  idByEriMap.put("static method ([Classifier]ClassLoaderManager).([StaticMethodDeclaration]getInstance())","~ClassLoaderManager.getInstance():jetbrains.mps.reloading.ClassLoaderManager");
  idByEriMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())","~Document.getRootElement():webr.xml.structure.BaseElement");
  idByEriMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]getBean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServiceLocator.getBean(java.lang.String):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]close())","~ServiceLocator.close():void");
  idByEriMap.put("static method ([Classifier]ServiceLocator).([StaticMethodDeclaration]init((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))","~ServiceLocator.init(java.lang.String[]):void");
  idByEriMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalStateException.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Replacer])))","~RegexpOperations.replace(java.lang.String,java.util.regex.Pattern,jetbrains.mps.regexp.runtime.Replacer):java.lang.String");
  idByEriMap.put("static method ([Classifier]RegexpOperations).([StaticMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern])))","~RegexpOperations.split(java.lang.String,java.util.regex.Pattern):java.util.List");
  idByEriMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getName())","~CompareType.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValueAsString())","~CompareType.getValueAsString():java.lang.String");
  idByEriMap.put("method ([Classifier]CompareType).([InstanceMethodDeclaration]getValue())","~CompareType.getValue():java.lang.String");
  idByEriMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CompareType.valueOf(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.lang.structure.CompareType");
  idByEriMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]getConstants())","~CompareType.getConstants():java.util.List");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityMetaDataImpl.setType(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setSuperType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityMetaDataImpl.setSuperType(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setDestructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DestructorRef])))","~EntityMetaDataImpl.setDestructor(com.jetbrains.teamsys.database.DestructorRef):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setInitializer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))","~EntityMetaDataImpl.setInitializer(java.lang.Runnable):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistory((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EntityMetaDataImpl.setHistory(boolean):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setHistoryIgnoredFields((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))","~EntityMetaDataImpl.setHistoryIgnoredFields(java.util.Set):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRemoveOrphan((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EntityMetaDataImpl.setRemoveOrphan(boolean):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setAssociationEnds((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [AssociationEndMetaData]>])))","~EntityMetaDataImpl.setAssociationEnds(java.util.Set):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setUniqueProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))","~EntityMetaDataImpl.setUniqueProperties(java.util.Set):void");
  idByEriMap.put("method ([Classifier]EntityMetaDataImpl).([InstanceMethodDeclaration]setRequiredProperties((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>])))","~EntityMetaDataImpl.setRequiredProperties(java.util.Set):void");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~EntityOperations.remove(com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~EntityOperations.getHistory(com.jetbrains.teamsys.database.Entity):java.util.List");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~EntityOperations.getVersion(com.jetbrains.teamsys.database.Entity):int");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getPreviousVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~EntityOperations.getPreviousVersion(com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getNextVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~EntityOperations.getNextVersion(com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~EntityOperations.equals(com.jetbrains.teamsys.database.Entity,java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]cast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityOperations.cast(java.lang.Object,java.lang.String):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityOperations.instanceOfType(java.lang.Object,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]instanceOfDiscriminator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityOperations.instanceOfDiscriminator(java.lang.Object,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EntityOperations.getElement(java.lang.Iterable,int):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~EntityOperations.getSize(java.lang.Iterable):int");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EntityOperations.skip(java.lang.Iterable,int):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EntityOperations.sort(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.String,java.lang.String,java.lang.Iterable,java.util.Comparator,boolean):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EntityOperations.sort(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable,java.util.Comparator,boolean):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~EntityOperations.distinct(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~EntityOperations.intersect(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~EntityOperations.union(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]EntityOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~EntityOperations.exclude(com.jetbrains.teamsys.database.TransientStoreSession,java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]commit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))","~TransientStoreUtil.commit(com.jetbrains.teamsys.database.TransientStoreSession):void");
  idByEriMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]suspend((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))","~TransientStoreUtil.suspend(com.jetbrains.teamsys.database.TransientStoreSession):void");
  idByEriMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))","~TransientStoreUtil.abort(java.lang.Throwable,com.jetbrains.teamsys.database.TransientStoreSession):void");
  idByEriMap.put("static method ([Classifier]TransientStoreUtil).([StaticMethodDeclaration]abortIfOpened((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession])))","~TransientStoreUtil.abortIfOpened(com.jetbrains.teamsys.database.TransientStoreSession):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AssociationEndMetaDataImpl.setName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndCardinality])))","~AssociationEndMetaDataImpl.setCardinality(com.jetbrains.teamsys.database.AssociationEndCardinality):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationMetaData])))","~AssociationEndMetaDataImpl.setAssociationMetaData(com.jetbrains.teamsys.database.AssociationMetaData):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setAssociationEndType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationEndType])))","~AssociationEndMetaDataImpl.setAssociationEndType(com.jetbrains.teamsys.database.AssociationEndType):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setCascadeDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~AssociationEndMetaDataImpl.setCascadeDelete(boolean):void");
  idByEriMap.put("method ([Classifier]AssociationEndMetaDataImpl).([InstanceMethodDeclaration]setClearOnDelete((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~AssociationEndMetaDataImpl.setClearOnDelete(boolean):void");
  idByEriMap.put("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]setEntityMetaDatas((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [EntityMetaData]>])))","~ModelMetaDataImpl.setEntityMetaDatas(java.util.Set):void");
  idByEriMap.put("method ([Classifier]ModelMetaDataImpl).([InstanceMethodDeclaration]init())","~ModelMetaDataImpl.init():void");
  idByEriMap.put("method ([Classifier]AssociationMetaDataImpl).([InstanceMethodDeclaration]setType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AssociationType])))","~AssociationMetaDataImpl.setType(com.jetbrains.teamsys.database.AssociationType):void");
  idByEriMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setPersistentStore((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityStore])))","~TransientEntityStoreImpl.setPersistentStore(com.jetbrains.teamsys.database.EntityStore):void");
  idByEriMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAbortSessionsOnClose((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TransientEntityStoreImpl.setAbortSessionsOnClose(boolean):void");
  idByEriMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setAttachToCurrentOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TransientEntityStoreImpl.setAttachToCurrentOnBeginIfExists(boolean):void");
  idByEriMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]setResumeOnBeginIfExists((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TransientEntityStoreImpl.setResumeOnBeginIfExists(boolean):void");
  idByEriMap.put("method ([Classifier]TransientEntityStoreImpl).([InstanceMethodDeclaration]close())","~TransientEntityStoreImpl.close():void");
  idByEriMap.put("method ([Classifier]Severity).([InstanceMethodDeclaration]getValueAsString())","~Severity.getValueAsString():java.lang.String");
  idByEriMap.put("static method ([Classifier]Severity).([StaticMethodDeclaration]getConstants())","~Severity.getConstants():java.util.List");
  idByEriMap.put("constructor [Classifier]NodeListIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))","~NodeListIterableAdapter.<init>(org.w3c.dom.NodeList)");
  idByEriMap.put("constructor [Classifier]NamedNodeMapIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))","~NamedNodeMapIterableAdapter.<init>(org.w3c.dom.NamedNodeMap)");
  idByEriMap.put("constructor [Classifier]ChainedIterable[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]]))","~ChainedIterable.<init>(java.lang.Iterable[])");
  idByEriMap.put("method ([Classifier]EditorCellModel).([InstanceMethodDeclaration]getSelectable())","~EditorCellModel.getSelectable():jetbrains.mps.bootstrap.editorLanguage.structure._YesNoDefault_Enum");
  idByEriMap.put("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getName())","~CellActionId.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]CellActionId).([InstanceMethodDeclaration]getValue())","~CellActionId.getValue():java.lang.String");
  idByEriMap.put("static method ([Classifier]CellActionId).([StaticMethodDeclaration]getConstants())","~CellActionId.getConstants():java.util.List");
  idByEriMap.put("static method ([Classifier]PersistentClassUtils).([StaticMethodDeclaration]isPersistentClassOrEnumExpr((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~PersistentClassUtils.isPersistentClassOrEnumExpr(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~IFeatureDesign.getParameters(jetbrains.mps.smodel.SNode):java.lang.Iterable");
  idByEriMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]getTargetType((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~IFeatureDesign.getTargetType(java.lang.Object,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]IFeatureDesign).([InstanceMethodDeclaration]parameterToString((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~IFeatureDesign.parameterToString(java.lang.Object):java.lang.String");
  idByEriMap.put("static method ([Classifier]HelginsJudgement_AnnotationLink).([StaticMethodDeclaration]setHelginsJudgement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HelginsJudgement])))","~HelginsJudgement_AnnotationLink.setHelginsJudgement(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.bootstrap.helgins.structure.HelginsJudgement):void");
  idByEriMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]setReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReferenceAntiquotation])))","~ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String,jetbrains.mps.bootstrap.helgins.structure.ReferenceAntiquotation):void");
  idByEriMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]getReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ReferenceAntiquotation_AnnotationLink.getReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String):jetbrains.mps.bootstrap.helgins.structure.ReferenceAntiquotation");
  idByEriMap.put("static method ([Classifier]Antiquotation_AnnotationLink).([StaticMethodDeclaration]getAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))","~Antiquotation_AnnotationLink.getAntiquotation(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.bootstrap.helgins.structure.Antiquotation");
  idByEriMap.put("method ([Classifier]AbstractAntiquotation).([InstanceMethodDeclaration]getExpression())","~AbstractAntiquotation.getExpression():jetbrains.mps.baseLanguage.structure.Expression");
  idByEriMap.put("static method ([Classifier]Format).([StaticMethodDeclaration]getPrettyFormat())","~Format.getPrettyFormat():org.jdom.output.Format");
  idByEriMap.put("constructor [Classifier]XMLOutputter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Format]))","~XMLOutputter.<init>(org.jdom.output.Format)");
  idByEriMap.put("method ([Classifier]XMLOutputter).([InstanceMethodDeclaration]output((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Element]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Writer])))","~XMLOutputter.output(org.jdom.Element,java.io.Writer):void");
  idByEriMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getTarget())","~LinkDeclaration.getTarget():jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
  idByEriMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]getMetaClass())","~LinkDeclaration.getMetaClass():jetbrains.mps.bootstrap.structureLanguage.structure.LinkMetaclass");
  idByEriMap.put("method ([Classifier]LinkDeclaration).([InstanceMethodDeclaration]setMetaClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkMetaclass])))","~LinkDeclaration.setMetaClass(jetbrains.mps.bootstrap.structureLanguage.structure.LinkMetaclass):void");
  idByEriMap.put("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getName())","~Cardinality.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]Cardinality).([InstanceMethodDeclaration]getValueAsString())","~Cardinality.getValueAsString():java.lang.String");
  idByEriMap.put("static method ([Classifier]Cardinality).([StaticMethodDeclaration]getConstants())","~Cardinality.getConstants():java.util.List");
  idByEriMap.put("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]setInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InlineAnnotation])))","~Inline_AnnotationLink.setInline(jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration,jetbrains.mps.baseLanguage.ext.util.structure.InlineAnnotation):void");
  idByEriMap.put("static method ([Classifier]Inline_AnnotationLink).([StaticMethodDeclaration]getInline((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseMethodDeclaration])))","~Inline_AnnotationLink.getInline(jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration):jetbrains.mps.baseLanguage.ext.util.structure.InlineAnnotation");
  idByEriMap.put("static method ([Classifier]EntityFieldHandler).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityId]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityFieldHandler.create(com.jetbrains.teamsys.database.EntityId,java.lang.String):com.jetbrains.teamsys.database.exceptions.EntityFieldHandler");
  idByEriMap.put("method ([Classifier]DataIntegrityViolationException).([InstanceMethodDeclaration]relatesTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientEntity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~DataIntegrityViolationException.relatesTo(com.jetbrains.teamsys.database.TransientEntity,java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]IFilter).([InstanceMethodDeclaration]accept((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~IFilter.accept(java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]From((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [UsagesTreePath, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~TreeTraversalFactory.From(java.lang.Object,jetbrains.mps.ypath.runtime.UsagesTreePath):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Traverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TraversalAxis])))","~TreeTraversalFactory.Traverse(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.TraversalAxis):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Filter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFilter, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~TreeTraversalFactory.Filter(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.IFilter):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Axis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TreeTraversalFactory.Axis(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
  idByEriMap.put("constructor [Classifier]UsagesTreePath[ConstructorDeclaration] ()","~UsagesTreePath.<init>()");
  idByEriMap.put("method ([Classifier]UsagesTreePath).([InstanceMethodDeclaration]registerFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFeatureDescriptor, <any_>])))","~UsagesTreePath.registerFeature(jetbrains.mps.ypath.runtime.IFeatureDescriptor):void");
  idByEriMap.put("method ([Classifier]UsagesTreePath).([InstanceMethodDeclaration]startTraversal((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~UsagesTreePath.startTraversal(java.lang.Object):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("constructor [Classifier]CompositeFilter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [IFilter, <any_>]]))","~CompositeFilter.<init>(jetbrains.mps.ypath.runtime.IFilter[])");
  idByEriMap.put("method ([Classifier]ITreeTraversal).([InstanceMethodDeclaration]getTreePath())","~ITreeTraversal.getTreePath():jetbrains.mps.ypath.runtime.ITreePath");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())","~TraversalAxis.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())","~TraversalAxis.getValue():java.lang.String");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())","~TraversalAxis.getConstants():java.util.List");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TraversalAxis.parseValue(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
  idByEriMap.put("static method ([Classifier]PathUtil).([StaticMethodDeclaration]getPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PathUtil.getPath(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]ExpressionTextUtil).([StaticMethodDeclaration]getExpressionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ExpressionTextUtil.getExpressionText(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]VariableNameUtil).([StaticMethodDeclaration]getSingularName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~VariableNameUtil.getSingularName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("constructor [Classifier]UsagesTreePath[ConstructorDeclaration] ()","~UsagesTreePath.<init>()");
  idByEriMap.put("method ([Classifier]Log).([InstanceMethodDeclaration]debug((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable])))","~Log.debug(java.lang.Object,java.lang.Throwable):void");
  idByEriMap.put("method ([Classifier]Log).([InstanceMethodDeclaration]isDebugEnabled())","~Log.isDebugEnabled():boolean");
  idByEriMap.put("static method ([Classifier]LogFactory).([StaticMethodDeclaration]getLog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))","~LogFactory.getLog(java.lang.Class):org.apache.commons.logging.Log");
  idByEriMap.put("constructor [Classifier]InstanceMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassifierType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InstanceMethodCall]))","~InstanceMethodCall_InstanceMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassifierType,jetbrains.mps.baseLanguage.structure.InstanceMethodCall)");
  idByEriMap.put("constructor [Classifier]SuperMethodCall_InstanceMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SuperMethodCall]))","~SuperMethodCall_InstanceMethodScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.baseLanguage.structure.SuperMethodCall)");
  idByEriMap.put("constructor [Classifier]NewExpression_ClassConstructorScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NewExpression]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~NewExpression_ClassConstructorScope.<init>(jetbrains.mps.baseLanguage.structure.NewExpression,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StaticMethodCall]))","~StaticMethodCall_StaticMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassConcept,jetbrains.mps.baseLanguage.structure.StaticMethodCall)");
  idByEriMap.put("constructor [Classifier]StaticMethodCall_StaticMethodScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LocalStaticMethodCall]))","~StaticMethodCall_StaticMethodScope.<init>(jetbrains.mps.baseLanguage.structure.ClassConcept,jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall)");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNodeOperation_ConceptList_concepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))","~_QueriesUtil.getNodeOperation_ConceptList_concepts(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SConceptPropertyAccess_GetMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SConceptPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.get_SConceptPropertyAccess_GetMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_simple_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.get_SPropertyAccess_simple_getterMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_getterMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SPropertyAccess]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.get_SPropertyAccess_enum_getterMethod(jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]get_SPropertyAccess_enum_defaultValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.get_SPropertyAccess_enum_defaultValue(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Inclusion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationHasParm_Inclusion(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Root((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationHasParm_Root(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_Concept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationHasParm_Concept(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationHasParm_ConceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationHasParm_ConceptExpression(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_Concept_conceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationGetParm_Concept_conceptFqName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]operationGetParm_ConceptExpression_conceptExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_QueriesUtil.operationGetParm_ConceptExpression_conceptExpression(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))","~EntityIterable.intersect(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))","~EntityIterable.union(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]EntityIterable).([InstanceMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))","~EntityIterable.minus(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]createPersistentEntityIterableWrapper((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable])))","~TransientStoreSession.createPersistentEntityIterableWrapper(com.jetbrains.teamsys.database.EntityIterable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]suspend())","~TransientStoreSession.suspend():void");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateCommit())","~TransientStoreSession.intermediateCommit():void");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]intermediateAbort())","~TransientStoreSession.intermediateAbort():void");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getId())","~TransientStoreSession.getId():java.lang.Object");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]addSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~TransientStoreSession.addSessionLocalEntity(java.lang.String,com.jetbrains.teamsys.database.Entity):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("method ([Classifier]TransientStoreSession).([InstanceMethodDeclaration]getSessionLocalEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TransientStoreSession.getSessionLocalEntity(java.lang.String):com.jetbrains.teamsys.database.TransientEntity");
  idByEriMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]beginSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~TransientEntityStore.beginSession(java.lang.String,java.lang.Object):com.jetbrains.teamsys.database.TransientStoreSession");
  idByEriMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]isSessionExists((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~TransientEntityStore.isSessionExists(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]resumeSession((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~TransientEntityStore.resumeSession(java.lang.Object):com.jetbrains.teamsys.database.TransientStoreSession");
  idByEriMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]setModelMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelMetaData])))","~TransientEntityStore.setModelMetaData(com.jetbrains.teamsys.database.ModelMetaData):void");
  idByEriMap.put("method ([Classifier]TransientEntityStore).([InstanceMethodDeclaration]addListener((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSessionListener])))","~TransientEntityStore.addListener(com.jetbrains.teamsys.database.TransientStoreSessionListener):void");
  idByEriMap.put("method ([Classifier]EntityMetaData).([InstanceMethodDeclaration]getInitializer())","~EntityMetaData.getInitializer():java.lang.Runnable");
  idByEriMap.put("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]commit())","~StoreTransaction.commit():void");
  idByEriMap.put("method ([Classifier]StoreTransaction).([InstanceMethodDeclaration]abort())","~StoreTransaction.abort():void");
  idByEriMap.put("method ([Classifier]ModelMetaData).([InstanceMethodDeclaration]getEntitiesMetaData())","~ModelMetaData.getEntitiesMetaData():java.lang.Iterable");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]close())","~BerkeleyDbEntityStore.close():void");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BerkeleyDbEntityStore.setBackupOnShutdown(boolean):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setBackupPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BerkeleyDbEntityStore.setBackupPath(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]getBackupPath())","~BerkeleyDbEntityStore.getBackupPath():java.lang.String");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]setStableSort((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BerkeleyDbEntityStore.setStableSort(boolean):void");
  idByEriMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]getThreadSession())","~EntityStore.getThreadSession():com.jetbrains.teamsys.database.StoreSession");
  idByEriMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]isNew())","~TransientEntity.isNew():boolean");
  idByEriMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]getRealType())","~TransientEntity.getRealType():java.lang.String");
  idByEriMap.put("method ([Classifier]TransientEntity).([InstanceMethodDeclaration]hasChanges())","~TransientEntity.hasChanges():boolean");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFileHandleCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setFileHandleCacheSize(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLogIteratorReadSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setLogIteratorReadSize(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setFairLatchers((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BerkeleyDbStoreConfig.setFairLatchers(boolean):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setLockTimeout(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMinUtilization((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setMinUtilization(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCleanerLockTimeout(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCleanerDeadlockRetry(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerThreads((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCleanerThreads(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCleanerlookAheadCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCleanerlookAheadCacheSize(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorLockTimeout((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCompressorLockTimeout(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setCompressorDeadlockRetry((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setCompressorDeadlockRetry(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingConsoleHandlerOn((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BerkeleyDbStoreConfig.setLoggingConsoleHandlerOn(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setLoggingLevel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BerkeleyDbStoreConfig.setLoggingLevel(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setWriteNoSync((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BerkeleyDbStoreConfig.setWriteNoSync(boolean):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setMaxSimutaneousTxns((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setMaxSimutaneousTxns(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntitiesCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setEntitiesCacheSize(int):void");
  idByEriMap.put("method ([Classifier]BerkeleyDbStoreConfig).([InstanceMethodDeclaration]setEntityIterableCacheSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BerkeleyDbStoreConfig.setEntityIterableCacheSize(int):void");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]newEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.newEntity(java.lang.String):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getEntityTypes())","~StoreSession.getEntityTypes():java.util.List");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.getAll(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))","~StoreSession.find(java.lang.String,java.lang.String,java.lang.Comparable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]find((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))","~StoreSession.find(java.lang.String,java.lang.String,java.lang.Comparable,java.lang.Comparable):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.startsWith(java.lang.String,java.lang.String,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.findLinks(java.lang.String,com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]findLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityIterable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.findLinks(java.lang.String,com.jetbrains.teamsys.database.EntityIterable,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]clearHistory((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.clearHistory(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EntityId).([InstanceMethodDeclaration]toString())","~EntityId.toString():java.lang.String");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getStore())","~Entity.getStore():com.jetbrains.teamsys.database.EntityStore");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getId())","~Entity.getId():com.jetbrains.teamsys.database.EntityId");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getType())","~Entity.getType():java.lang.String");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getVersion())","~Entity.getVersion():int");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Entity.getProperty(java.lang.String):java.lang.Comparable");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getPropertyNames())","~Entity.getPropertyNames():java.util.List");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Entity.getLinks(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getLinkNames())","~Entity.getLinkNames():java.util.List");
  idByEriMap.put("method ([Classifier]GenerationPlans).([InstanceMethodDeclaration]getPlans())","~GenerationPlans.getPlans():java.util.Collection");
  idByEriMap.put("constructor [Classifier]SecurityViolationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~SecurityViolationException.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ScriptNameUtil.getClassName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]ScriptNameUtil).([StaticMethodDeclaration]getMigrationScriptClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ScriptNameUtil.getMigrationScriptClassName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]setTypeConverters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TypeConverter]>])))","~TypeConvertManager.setTypeConverters(java.util.List):void");
  idByEriMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~TypeConvertManager.toString(java.lang.Object):java.lang.String");
  idByEriMap.put("method ([Classifier]TypeConvertManager).([InstanceMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TypeConvertManager.fromString(java.lang.String,java.lang.String):java.lang.Object");
  idByEriMap.put("constructor [Classifier]FixedClassConverter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]))","~FixedClassConverter.<init>(java.lang.Class)");
  idByEriMap.put("constructor [Classifier]VisibleClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~VisibleClassifiersScope.<init>(jetbrains.mps.smodel.SModel,int,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]ClassifierAndSuperClassifiersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~ClassifierAndSuperClassifiersScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,int)");
  idByEriMap.put("method ([Classifier]IClassifiersSearchScope).([InstanceMethodDeclaration]getClassifierNodes())","~IClassifiersSearchScope.getClassifierNodes():java.util.List");
  idByEriMap.put("constructor [Classifier]VisibleClassifierMembersScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~ClassifierVisibleMembersScope.<init>(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.smodel.SNode,int)");
  idByEriMap.put("constructor [Classifier]LocalVariablesScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~LocalVariablesScope.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("constructor [Classifier]ByteArrayOutputStream[ConstructorDeclaration] ()","~ByteArrayOutputStream.<init>()");
  idByEriMap.put("method ([Classifier]ByteArrayOutputStream).([InstanceMethodDeclaration]toByteArray())","~ByteArrayOutputStream.toByteArray():byte[]");
  idByEriMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterName())","~BaseParameterException.getParameterName():java.lang.String");
  idByEriMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getParameterType())","~BaseParameterException.getParameterType():java.lang.String");
  idByEriMap.put("method ([Classifier]BaseParameterException).([InstanceMethodDeclaration]getValueAsString())","~BaseParameterException.getValueAsString():java.lang.String");
  idByEriMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplatePath())","~TemplateComponent.getTemplatePath():java.lang.String");
  idByEriMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getFullLabeledInputName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TemplateComponent.getFullLabeledInputName(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]getTemplateVariables())","~TemplateComponent.getTemplateVariables():java.util.Map");
  idByEriMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsForm())","~TemplateComponent.containsForm():boolean");
  idByEriMap.put("method ([Classifier]TemplateComponent).([InstanceMethodDeclaration]containsFileInput())","~TemplateComponent.containsFileInput():boolean");
  idByEriMap.put("method ([Classifier]TemplateActionController).([InstanceMethodDeclaration]getActionVariables())","~TemplateActionController.getActionVariables():java.util.Map");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertTrue(java.lang.String,boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertTrue(boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertFalse((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertFalse(boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]fail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Assert.fail(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertEquals(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertNull((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertNull(java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertSame((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertSame(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]RequestProcessorContainer).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))","~RequestProcessorContainer.setRequestProcessors(java.util.List):void");
  idByEriMap.put("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))","~RequestProcessor.isApplicable(webr.framework.url.RequestUri):boolean");
  idByEriMap.put("method ([Classifier]RequestProcessor).([InstanceMethodDeclaration]processRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RequestUri])))","~RequestProcessor.processRequest(webr.framework.url.RequestUri):webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())","~Document.getRootElement():jetbrains.mps.xml.structure.Element");
  idByEriMap.put("method ([Classifier]ImageReaderWriterSpi).([InstanceMethodDeclaration]getFormatNames())","~ImageReaderWriterSpi.getFormatNames():java.lang.String[]");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren())","~Node.getChildren():java.util.Set");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getSourceModel())","~ITemplateGenerator.getSourceModel():jetbrains.mps.smodel.SModel");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getTargetModel())","~ITemplateGenerator.getTargetModel():jetbrains.mps.smodel.SModel");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findOutputNodeByInputNodeAndMappingName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplateGenerator.findOutputNodeByInputNodeAndMappingName(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findCopiedOutputNodeForInputNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ITemplateGenerator.findCopiedOutputNodeForInputNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getCurrentBuilder())","~ITemplateGenerator.getCurrentBuilder():jetbrains.mps.generator.template.INodeBuilder");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]showErrorMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplateGenerator.showErrorMessage(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getGeneratorSessionContext())","~ITemplateGenerator.getGeneratorSessionContext():jetbrains.mps.generator.GenerationSessionContext");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]getScope())","~ITemplateGenerator.getScope():jetbrains.mps.smodel.IScope");
  idByEriMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]getTargetNode())","~INodeBuilder.getTargetNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findChildBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [INodeBuilder]>])))","~INodeBuilder.findChildBuilder(jetbrains.mps.util.Condition):jetbrains.mps.generator.template.INodeBuilder");
  idByEriMap.put("method ([Classifier]INodeBuilder).([InstanceMethodDeclaration]findSubSourceNodeForParentMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeBuilder.findSubSourceNodeForParentMapping(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setCorePoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ThreadPoolTaskExecutor.setCorePoolSize(int):void");
  idByEriMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setMaxPoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ThreadPoolTaskExecutor.setMaxPoolSize(int):void");
  idByEriMap.put("static method ([Classifier]MessageDigestUtil).([StaticMethodDeclaration]sha256((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MessageDigestUtil.sha256(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]ErrorMessageManager$Severity).([InstanceMethodDeclaration]getStyleClass())","~ErrorMessageManager$Severity.getStyleClass():java.lang.String");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventName())","~ControllerOperations.getEventName():java.lang.String");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ControllerOperations.getEventParameter(java.lang.String,java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getLabeledInputValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ControllerOperations.getLabeledInputValue(java.lang.String,java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getEventSource())","~ControllerOperations.getEventSource():java.lang.String");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ControllerOperations.getTransactionId(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getTransactionId())","~ControllerOperations.getTransactionId():java.lang.String");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ControllerOperations.getRedirectResponseAction(java.lang.String):webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectBackResponseAction())","~ControllerOperations.getRedirectBackResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectSelfResponseAction())","~ControllerOperations.getRedirectSelfResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRedirectToRootResponseAction())","~ControllerOperations.getRedirectToRootResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getDefaultResponseAction())","~ControllerOperations.getDefaultResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHtmlRenderResponseAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))","~ControllerOperations.getHtmlRenderResponseAction(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent,webr.framework.textBuilder.TBuilderContext):webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getHeartBeatResponseAction())","~ControllerOperations.getHeartBeatResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]ControllerOperations).([StaticMethodDeclaration]getRefreshResponseAction((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]])))","~ControllerOperations.getRefreshResponseAction(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent[]):webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))","~BaseApplication.setRequest(javax.servlet.http.HttpServletRequest):void");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getRequest())","~BaseApplication.getRequest():javax.servlet.http.HttpServletRequest");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseApplication.getSessionField(java.lang.String):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setSessionField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~BaseApplication.setSessionField(java.lang.String,java.lang.Object):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseApplication.getCookieField(java.lang.String,java.lang.String):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~BaseApplication.getCookieField(java.lang.String,java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCookieField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~BaseApplication.setCookieField(java.lang.String,java.lang.Object):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]getCurrentWindowId())","~BaseApplication.getCurrentWindowId():java.lang.String");
  idByEriMap.put("static method ([Classifier]BaseApplication).([StaticMethodDeclaration]setCurrentWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseApplication.setCurrentWindowId(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]addMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Serializable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ErrorMessageManager$Severity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ErrorMessageManager.addMessage(java.io.Serializable,webr.framework.controller.ErrorMessageManager$Severity,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]ErrorMessageManager).([StaticMethodDeclaration]isEmpty())","~ErrorMessageManager.isEmpty():boolean");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setRequestProcessors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [RequestProcessor]>])))","~CentralManager.setRequestProcessors(java.lang.Iterable):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setTypeConvertManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TypeConvertManager])))","~CentralManager.setTypeConvertManager(jetbrains.mps.webr.runtime.converter.TypeConvertManager):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultControllerName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CentralManager.setDefaultControllerName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setDefaultActionNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))","~CentralManager.setDefaultActionNames(java.util.Map):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~CentralManager.toIdString(java.lang.Object):java.lang.String");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setApplicationName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CentralManager.setApplicationName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setAppicationVersion((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CentralManager.setAppicationVersion(java.lang.String):void");
  idByEriMap.put("method ([Classifier]CentralManager).([InstanceMethodDeclaration]setFreemarkerConfiguration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Configuration])))","~CentralManager.setFreemarkerConfiguration(freemarker.template.Configuration):void");
  idByEriMap.put("constructor [Classifier]XmlTemplateCallHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]))","~XmlTemplateCallHandler.<init>(webr.framework.textBuilder.TextBuilder)");
  idByEriMap.put("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]putTemplateArgument((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~XmlTemplateCallHandler.putTemplateArgument(java.lang.String,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]XmlTemplateCallHandler).([InstanceMethodDeclaration]getResponseAction())","~XmlTemplateCallHandler.getResponseAction():webr.framework.runtime.response.ResponseAction");
  idByEriMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]getLinkDeclaration())","~RefNodeListHandler.getLinkDeclaration():jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
  idByEriMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createNodeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~RefNodeListHandler.createNodeCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]RefNodeListHandler).([InstanceMethodDeclaration]createEmptyCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~RefNodeListHandler.createEmptyCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("constructor [Classifier]AggregationCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]))","~AggregationCellContext.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration)");
  idByEriMap.put("constructor [Classifier]RefNodeListHandlerElementKeyMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellListHandler]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~RefNodeListHandlerElementKeyMap.<init>(jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler,java.lang.String)");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]propertyMacro_CellMenuPart_PropertyPostfixHints_generatedClass_name((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~Queries.propertyMacro_CellMenuPart_PropertyPostfixHints_generatedClass_name(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]conceptEditorClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptEditorDeclaration])))","~_QueriesUtil.conceptEditorClassName(jetbrains.mps.bootstrap.editorLanguage.structure.ConceptEditorDeclaration):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapDeclaration])))","~_QueriesUtil.actionMapClassName(jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapDeclaration):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]actionMapActionClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellActionMapItem])))","~_QueriesUtil.actionMapActionClassName(jetbrains.mps.bootstrap.editorLanguage.structure.CellActionMapItem):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]_getCellName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))","~_QueriesUtil_new._getCellName(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createColorFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil_new.createColorFieldReference(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.StaticFieldReference");
  idByEriMap.put("static method ([Classifier]_QueriesUtil_new).([StaticMethodDeclaration]createFontStyleFieldReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil_new.createFontStyleFieldReference(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.StaticFieldReference");
  idByEriMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]descriptionText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~NodePresentationUtil.descriptionText(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getAliasOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~NodePresentationUtil.getAliasOrConceptName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]NodePresentationUtil).([StaticMethodDeclaration]getRoleInParentOrConceptName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~NodePresentationUtil.getRoleInParentOrConceptName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]CopyUtil).([StaticMethodDeclaration]copy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~CopyUtil.copy(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))","~PropertySupport.isString(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))","~PropertySupport.isInteger(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]PropertySupport).([StaticMethodDeclaration]isBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrimitiveDataTypeDeclaration])))","~PropertySupport.isBoolean(jetbrains.mps.bootstrap.structureLanguage.structure.PrimitiveDataTypeDeclaration):boolean");
  idByEriMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getModuleByUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MPSModuleRepository.getModuleByUID(java.lang.String):jetbrains.mps.project.IModule");
  idByEriMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllLanguages())","~MPSModuleRepository.getAllLanguages():java.util.List");
  idByEriMap.put("method ([Classifier]MPSModuleRepository).([InstanceMethodDeclaration]getAllModules())","~MPSModuleRepository.getAllModules():java.util.List");
  idByEriMap.put("static method ([Classifier]MPSModuleRepository).([StaticMethodDeclaration]getInstance())","~MPSModuleRepository.getInstance():jetbrains.mps.smodel.MPSModuleRepository");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getNode())","~BaseAdapter.getNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getParent())","~BaseAdapter.getParent():jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]hasConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~BaseAdapter.hasConceptProperty(java.lang.String,jetbrains.mps.smodel.IScope):boolean");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getProperty(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.setProperty(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getBooleanProperty(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setBooleanProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BaseAdapter.setBooleanProperty(java.lang.String,boolean):void");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getIntegerProperty(java.lang.String):int");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setIntegerProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~BaseAdapter.setIntegerProperty(java.lang.String,int):void");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~BaseAdapter.setChild(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getChild(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getChildCount(java.lang.String):int");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseAdapter.getReferent(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~BaseAdapter.setReferent(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]toNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))","~BaseAdapter.toNodes(java.util.List):java.util.List");
  idByEriMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~BaseAdapter.fromNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]fromAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~BaseAdapter.fromAdapter(jetbrains.mps.smodel.INodeAdapter):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]BaseAdapter).([StaticMethodDeclaration]isInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <? extends jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]>])))","~BaseAdapter.isInstance(jetbrains.mps.smodel.SNode,java.lang.Class):boolean");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetModelUID())","~SReference.getTargetModelUID():jetbrains.mps.smodel.SModelUID");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))","~SReference.setTargetModelUID(jetbrains.mps.smodel.SModelUID):void");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]setTargetNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SReference.setTargetNodeId(java.lang.String):void");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getRole())","~SReference.getRole():java.lang.String");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getSourceNode())","~SReference.getSourceNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNode())","~SReference.getTargetNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SReference).([InstanceMethodDeclaration]getTargetNodeId())","~SReference.getTargetNodeId():java.lang.String");
  idByEriMap.put("static method ([Classifier]SReference).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeId])))","~SReference.create(java.lang.String,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModelUID,jetbrains.mps.smodel.SNodeId):jetbrains.mps.smodel.SReference");
  idByEriMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]toString())","~SModelUID.toString():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getLongName())","~SModelUID.getLongName():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getNamespace())","~SModelUID.getNamespace():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelUID).([InstanceMethodDeclaration]getStereotype())","~SModelUID.getStereotype():java.lang.String");
  idByEriMap.put("static method ([Classifier]SModelUID).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelUID.fromString(java.lang.String):jetbrains.mps.smodel.SModelUID");
  idByEriMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnTemplateModels())","~Generator.getOwnTemplateModels():java.util.List");
  idByEriMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getOwnMappings())","~Generator.getOwnMappings():java.util.List");
  idByEriMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getAlias())","~Generator.getAlias():java.lang.String");
  idByEriMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getModuleUID())","~Generator.getModuleUID():java.lang.String");
  idByEriMap.put("method ([Classifier]Generator).([InstanceMethodDeclaration]getGeneratorDescriptor())","~Generator.getGeneratorDescriptor():jetbrains.mps.projectLanguage.structure.GeneratorDescriptor");
  idByEriMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]childRoleFromAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AttributesRolesUtil.childRoleFromAttributeRole(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getLinkRoleFromLinkAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AttributesRolesUtil.getLinkRoleFromLinkAttributeRole(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]AttributesRolesUtil).([StaticMethodDeclaration]getPropertyNameFromPropertyAttributeRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AttributesRolesUtil.getPropertyNameFromPropertyAttributeRole(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getUID())","~SModel.getUID():jetbrains.mps.smodel.SModelUID");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getShortName())","~SModel.getShortName():java.lang.String");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getStereotype())","~SModel.getStereotype():java.lang.String");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getLongName())","~SModel.getLongName():java.lang.String");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters())","~SModel.getRootsAdapters():java.util.List");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootsAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SModel.getRootsAdapters(java.lang.Class):java.util.List");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]addRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SModel.addRoot(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getModelDescriptor())","~SModel.getModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModel.getLanguages(jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]allImportedModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModel.allImportedModels(jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]toString())","~SModel.toString():java.lang.String");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getNodeById((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModel.getNodeById(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]allAdaptersIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SModel.allAdaptersIncludingImported(jetbrains.mps.smodel.IScope,java.lang.Class):java.util.List");
  idByEriMap.put("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getLanguage())","~Language$LanguageAspectStatus.getLanguage():jetbrains.mps.smodel.Language");
  idByEriMap.put("method ([Classifier]Language$LanguageAspectStatus).([InstanceMethodDeclaration]getAspectKind())","~Language$LanguageAspectStatus.getAspectKind():jetbrains.mps.smodel.Language$LanguageAspectStatus$AspectKind");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelUtil_new.findConceptDeclaration(java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findNodeByFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelUtil_new.findNodeByFQName(java.lang.String,java.lang.Class,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.BaseAdapter");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getBaseConcept())","~SModelUtil_new.getBaseConcept():jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))","~SModelUtil_new.isAssignableConcept(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]isAssignableConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelUtil_new.isAssignableConcept(java.lang.String,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))","~SModelUtil_new.getGenuineLinkDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))","~SModelUtil_new.getGenuineLinkRole(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):java.lang.String");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getGenuineLinkSourceCardinality((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration])))","~SModelUtil_new.getGenuineLinkSourceCardinality(jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.Cardinality");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~SModelUtil_new.instantiateConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SModelUtil_new.instantiateConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SModel,boolean):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]instantiateConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SModelUtil_new.instantiateConceptDeclaration(java.lang.String,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getAdapterClassConceptForConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelUtil_new.getAdapterClassConceptForConceptDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.IScope):jetbrains.mps.baseLanguage.structure.ClassConcept");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getDeclaringLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelUtil_new.getDeclaringLanguage(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.Language");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getSubconcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelUtil_new.getSubconcepts(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]findLinkDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelUtil_new.findLinkDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
  idByEriMap.put("static method ([Classifier]SModelUtil_new).([StaticMethodDeclaration]getStringConceptProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelUtil_new.getStringConceptProperty(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getSModel())","~SModelDescriptor.getSModel():jetbrains.mps.smodel.SModel");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getModelUID())","~SModelDescriptor.getModelUID():jetbrains.mps.smodel.SModelUID");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getName())","~SModelDescriptor.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getLongName())","~SModelDescriptor.getLongName():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]getStereotype())","~SModelDescriptor.getStereotype():java.lang.String");
  idByEriMap.put("method ([Classifier]SModelDescriptor).([InstanceMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SModelDescriptor.findUsages(jetbrains.mps.smodel.SNode):java.util.Set");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getNode())","~INodeAdapter.getNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.addChild(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]insertChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.insertChild(jetbrains.mps.smodel.INodeAdapter,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getChildren(java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]children((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.children(java.lang.String):java.util.Iterator");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getAttribute(java.lang.String):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getAttributes(java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.setAttribute(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.addAttribute(java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getPropertyAttribute(java.lang.String,java.lang.String):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getPropertyAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getPropertyAttributes(java.lang.String,java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.setPropertyAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.addPropertyAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getLinkAttribute(java.lang.String,java.lang.String):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]setLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.setLinkAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]addLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~INodeAdapter.addLinkAttribute(java.lang.String,java.lang.String,jetbrains.mps.smodel.INodeAdapter):void");
  idByEriMap.put("method ([Classifier]INodeAdapter).([InstanceMethodDeclaration]getLinkAttributes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~INodeAdapter.getLinkAttributes(java.lang.String,java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))","~IScope.getModelDescriptor(jetbrains.mps.smodel.SModelUID):jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getModelDescriptors())","~IScope.getModelDescriptors():java.util.List");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~IScope.getLanguage(java.lang.String):jetbrains.mps.smodel.Language");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~IScope.isVisibleLanguage(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleLanguages())","~IScope.getVisibleLanguages():java.util.List");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]getVisibleDevkits())","~IScope.getVisibleDevkits():java.util.List");
  idByEriMap.put("method ([Classifier]IScope).([InstanceMethodDeclaration]isVisibleDevKit((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~IScope.isVisibleDevKit(java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SNodeId).([StaticMethodDeclaration]fromString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeId.fromString(java.lang.String):jetbrains.mps.smodel.SNodeId");
  idByEriMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getProject())","~IOperationContext.getProject():jetbrains.mps.project.MPSProject");
  idByEriMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getModule())","~IOperationContext.getModule():jetbrains.mps.project.IModule");
  idByEriMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getScope())","~IOperationContext.getScope():jetbrains.mps.smodel.IScope");
  idByEriMap.put("method ([Classifier]IOperationContext).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~IOperationContext.getComponent(java.lang.Class):java.lang.Object");
  idByEriMap.put("constructor [Classifier]SNodePointer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~SNodePointer.<init>(java.lang.String,java.lang.String)");
  idByEriMap.put("method ([Classifier]SNodePointer).([InstanceMethodDeclaration]getNode())","~SNodePointer.getNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]changeModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~SNode.changeModel(jetbrains.mps.smodel.SModel):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]isRoot())","~SNode.isRoot():boolean");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getModel())","~SNode.getModel():jetbrains.mps.smodel.SModel");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildRoles())","~SNode.getChildRoles():java.util.Set");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferenceRoles())","~SNode.getReferenceRoles():java.util.Set");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.replaceChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~SNode.getUserObject(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~SNode.putUserObject(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getName())","~SNode.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getRole_())","~SNode.getRole_():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute())","~SNode.getAttribute():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.setAttribute(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAllAttributes())","~SNode.getAllAttributes():java.util.List");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.setPropertyAttribute(java.lang.String,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getPropertyAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getLinkAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getLinkAttribute(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getPropertyNames())","~SNode.getPropertyNames():java.util.Set");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]hasProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.hasProperty(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getProperty(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.setProperty(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getParent())","~SNode.getParent():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getChild(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.removeChild(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.addChild(java.lang.String,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getChildCount(java.lang.String):int");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getIndexOfChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.getIndexOfChild(jetbrains.mps.smodel.SNode):int");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren())","~SNode.getChildren():java.util.List");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildCount())","~SNode.getChildCount():int");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getChildren(java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferences())","~SNode.getReferences():java.util.List");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNode.setReferent(java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SReference");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.getReferent(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]addReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SReference])))","~SNode.addReference(jetbrains.mps.smodel.SReference):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getDebugText())","~SNode.getDebugText():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getId())","~SNode.getId():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getSNodeId())","~SNode.getSNodeId():jetbrains.mps.smodel.SNodeId");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]toString())","~SNode.toString():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptFqName())","~SNode.getConceptFqName():java.lang.String");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]setConceptFqName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.setConceptFqName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]isInstanceOfConcept((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNode.isInstanceOfConcept(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getConceptDeclarationAdapter())","~SNode.getConceptDeclarationAdapter():jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SNode.getLanguage(jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.Language");
  idByEriMap.put("method ([Classifier]SNode).([InstanceMethodDeclaration]getAdapter())","~SNode.getAdapter():jetbrains.mps.smodel.BaseAdapter");
  idByEriMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getNamespace())","~Language.getNamespace():java.lang.String");
  idByEriMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getStructureModelDescriptor())","~Language.getStructureModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getConstraintsModelDescriptor())","~Language.getConstraintsModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("method ([Classifier]Language).([InstanceMethodDeclaration]getEditorModelDescriptor())","~Language.getEditorModelDescriptor():jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageForLanguageAspect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))","~Language.getLanguageForLanguageAspect(jetbrains.mps.smodel.SModelDescriptor):jetbrains.mps.smodel.Language");
  idByEriMap.put("static method ([Classifier]Language).([StaticMethodDeclaration]getLanguageAspectStatus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelDescriptor])))","~Language.getLanguageAspectStatus(jetbrains.mps.smodel.SModelDescriptor):jetbrains.mps.smodel.Language$LanguageAspectStatus");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimple((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))","~DataTypeUtil.isSimple(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isEnum((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))","~DataTypeUtil.isEnum(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))","~DataTypeUtil.isSimpleString(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleInteger((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))","~DataTypeUtil.isSimpleInteger(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]isSimpleBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DataTypeDeclaration])))","~DataTypeUtil.isSimpleBoolean(jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration):boolean");
  idByEriMap.put("static method ([Classifier]DataTypeUtil).([StaticMethodDeclaration]getDefaultMember((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EnumerationDataTypeDeclaration])))","~DataTypeUtil.getDefaultMember(jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationDataTypeDeclaration):jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationMemberDeclaration");
  idByEriMap.put("method ([Classifier]BehaviorManager).([InstanceMethodDeclaration]invoke((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Class]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~BehaviorManager.invoke(java.lang.Class,jetbrains.mps.smodel.SNode,java.lang.String,java.util.List,java.lang.Object[]):java.lang.Object");
  idByEriMap.put("static method ([Classifier]BehaviorManager).([StaticMethodDeclaration]getInstance())","~BehaviorManager.getInstance():jetbrains.mps.smodel.behaviour.BehaviorManager");
  idByEriMap.put("static method ([Classifier]GeneratedQueriesOpener).([StaticMethodDeclaration]openQueryMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~GeneratedQueriesOpener.openQueryMethod(jetbrains.mps.smodel.IOperationContext,jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getControllerName())","~RequestUri.getControllerName():java.lang.String");
  idByEriMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getActionName())","~RequestUri.getActionName():java.lang.String");
  idByEriMap.put("method ([Classifier]RequestUri).([InstanceMethodDeclaration]getTail())","~RequestUri.getTail():java.lang.String");
  idByEriMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setHostToBaseUrlMapping((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))","~HostToBaseUrlConfiguration.setHostToBaseUrlMapping(java.util.Map):void");
  idByEriMap.put("method ([Classifier]HostToBaseUrlConfiguration).([InstanceMethodDeclaration]setDefaultBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HostToBaseUrlConfiguration.setDefaultBaseUrl(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~UrlUtil.getActionUrl(boolean,java.lang.String,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getXmlActionUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~UrlUtil.getXmlActionUrl(java.lang.String,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getActionUrl((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))","~UrlUtil.getActionUrl(boolean,java.lang.String,java.lang.String,boolean,jetbrains.mps.webr.runtime.uri.QueryParameter[]):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getStylesheetUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))","~UrlUtil.getStylesheetUri(java.lang.String,webr.framework.textBuilder.TBuilderContext):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getClasspathResourceUri((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))","~UrlUtil.getClasspathResourceUri(java.lang.String,webr.framework.textBuilder.TBuilderContext):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getPersistentFileUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Integer])))","~UrlUtil.getPersistentFileUrl(com.jetbrains.teamsys.database.Entity,webr.framework.textBuilder.TBuilderContext,java.lang.Integer,java.lang.Integer):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getRootURI())","~UrlUtil.getRootURI():java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getEventParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [QueryParameter]])))","~UrlUtil.getEventParameters(webr.framework.textBuilder.TBuilderContext,java.lang.String,jetbrains.mps.webr.runtime.uri.QueryParameter[]):java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getHandlerUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))","~UrlUtil.getHandlerUrl(webr.framework.textBuilder.TBuilderContext):java.lang.String");
  idByEriMap.put("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getOpeningText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))","~EditorCellTags.getOpeningText(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
  idByEriMap.put("static method ([Classifier]EditorCellTags).([StaticMethodDeclaration]getClosingText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellModel])))","~EditorCellTags.getClosingText(jetbrains.mps.bootstrap.editorLanguage.structure.EditorCellModel):java.lang.String");
  idByEriMap.put("static method ([Classifier]_EditorUtil).([StaticMethodDeclaration]grayIfNotSelectable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~_EditorUtil.grayIfNotSelectable(jetbrains.mps.smodel.SNode):java.awt.Color");
  idByEriMap.put("constructor [Classifier]SelectImageFileButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellModel_Image]))","~SelectImageFileButton.<init>(jetbrains.mps.bootstrap.editorLanguage.structure.CellModel_Image)");
  idByEriMap.put("method ([Classifier]RemoteTomcatHandler).([InstanceMethodDeclaration]setBaseUrl((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RemoteTomcatHandler.setBaseUrl(java.lang.String):void");
  idByEriMap.put("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~LocalTomcatHandler.setPort(int):void");
  idByEriMap.put("method ([Classifier]LocalTomcatHandler).([InstanceMethodDeclaration]setTomcatManager((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatManager])))","~LocalTomcatHandler.setTomcatManager(jetbrains.mps.webr.webUnit.tomcat.TomcatManager):void");
  idByEriMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))","~FindOperations.findConceptInstances(java.lang.String,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):java.util.List");
  idByEriMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]findUsages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))","~FindOperations.findUsages(jetbrains.mps.smodel.SNode,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):java.util.List");
  idByEriMap.put("static method ([Classifier]FindOperations).([StaticMethodDeclaration]updateReferences((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext])))","~FindOperations.updateReferences(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext):void");
  idByEriMap.put("method ([Classifier]ScriptContext).([InstanceMethodDeclaration]getActionContext())","~ScriptContext.getActionContext():jetbrains.mps.ide.action.ActionEventData");
  idByEriMap.put("method ([Classifier]BaseMigrationScript).([InstanceMethodDeclaration]addRefactoring((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IRefactoring])))","~BaseMigrationScript.addRefactoring(jetbrains.mps.refactoring.IRefactoring):void");
  idByEriMap.put("static method ([Classifier]ShowOperations).([StaticMethodDeclaration]showNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [SNode]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ScriptContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ShowOperations.showNodes(java.lang.Iterable,jetbrains.mps.ide.scriptLanguage.runtime.ScriptContext,java.lang.String):void");
  idByEriMap.put("method ([Classifier]FormatTableManagerImpl).([InstanceMethodDeclaration]setFormatTables((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [BaseFormatTable]>])))","~FormatTableManagerImpl.setFormatTables(java.util.List):void");
  idByEriMap.put("method ([Classifier]BaseFormatTable).([InstanceMethodDeclaration]getFormatter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseFormatTable.getFormatter(java.lang.String):org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("method ([Classifier]FormatTableManager).([InstanceMethodDeclaration]getFormatTable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~FormatTableManager.getFormatTable(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.table.BaseFormatTable");
  idByEriMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpServletRequest.getHeader(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getMethod())","~HttpServletRequest.getMethod():java.lang.String");
  idByEriMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getQueryString())","~HttpServletRequest.getQueryString():java.lang.String");
  idByEriMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getRequestURL())","~HttpServletRequest.getRequestURL():java.lang.StringBuffer");
  idByEriMap.put("method ([Classifier]HttpServletRequest).([InstanceMethodDeclaration]getSession())","~HttpServletRequest.getSession():javax.servlet.http.HttpSession");
  idByEriMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpServletResponse.sendError(int,java.lang.String):void");
  idByEriMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendError((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~HttpServletResponse.sendError(int):void");
  idByEriMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]sendRedirect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpServletResponse.sendRedirect(java.lang.String):void");
  idByEriMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]setHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpServletResponse.setHeader(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]HttpServletResponse).([InstanceMethodDeclaration]addHeader((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpServletResponse.addHeader(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HttpSession.getAttribute(java.lang.String):java.lang.Object");
  idByEriMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~HttpSession.setAttribute(java.lang.String,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]invalidate())","~HttpSession.invalidate():void");
  idByEriMap.put("constructor [Classifier]ClassConcept[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~ClassConcept.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]StatementList).([InstanceMethodDeclaration]getStatements())","~StatementList.getStatements():java.util.List");
  idByEriMap.put("constructor [Classifier]MappingRuleTemplateNodeSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~MappingRuleTemplateNodeSearchScope.<init>(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("static method ([Classifier]HyperlinkUtil).([StaticMethodDeclaration]getHyperlinkComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HyperlinkUtil.getHyperlinkComponent(java.lang.String):javax.swing.JComponent");
  idByEriMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]getRootElement())","~Document.getRootElement():org.jdom.Element");
  idByEriMap.put("constructor [Classifier]Text[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Text.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]Element[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Element.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))","~Element.addContent(java.util.Collection):org.jdom.Element");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Content])))","~Element.addContent(org.jdom.Content):org.jdom.Element");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]clone())","~Element.clone():java.lang.Object");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getChild(java.lang.String):org.jdom.Element");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getText())","~Element.getText():java.lang.String");
  idByEriMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AssociationSemantics.getToOne(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AssociationSemantics.getToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManyPersistentIterable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AssociationSemantics.getToManyPersistentIterable(com.jetbrains.teamsys.database.Entity,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("static method ([Classifier]AssociationSemantics).([StaticMethodDeclaration]getToManySize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AssociationSemantics.getToManySize(com.jetbrains.teamsys.database.Entity,java.lang.String):long");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.setOneToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.createOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.removeOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~UndirectedAssociationSemantics.clearOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.setManyToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]createManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.createManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]removeManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~UndirectedAssociationSemantics.removeManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]UndirectedAssociationSemantics).([StaticMethodDeclaration]clearManyToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~UndirectedAssociationSemantics.clearManyToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setOneToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~AggregationAssociationSemantics.setOneToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]createOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~AggregationAssociationSemantics.createOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]removeOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~AggregationAssociationSemantics.removeOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]clearOneToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AggregationAssociationSemantics.clearOneToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]AggregationAssociationSemantics).([StaticMethodDeclaration]setManyToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~AggregationAssociationSemantics.setManyToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]setToOne((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~DirectedAssociationSemantics.setToOne(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]createToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~DirectedAssociationSemantics.createToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]removeToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity])))","~DirectedAssociationSemantics.removeToMany(com.jetbrains.teamsys.database.Entity,java.lang.String,com.jetbrains.teamsys.database.Entity):void");
  idByEriMap.put("static method ([Classifier]DirectedAssociationSemantics).([StaticMethodDeclaration]clearToMany((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~DirectedAssociationSemantics.clearToMany(com.jetbrains.teamsys.database.Entity,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~PrimitiveAssociationSemantics.get(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Object):java.lang.Object");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable])))","~PrimitiveAssociationSemantics.set(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Comparable):void");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))","~PrimitiveAssociationSemantics.set(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.Comparable,java.lang.Class):void");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setHashed((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrimitiveAssociationSemantics.setHashed(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrimitiveAssociationSemantics.getBlob(com.jetbrains.teamsys.database.Entity,java.lang.String):java.io.InputStream");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]getBlobAsString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrimitiveAssociationSemantics.getBlobAsString(com.jetbrains.teamsys.database.Entity,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]PrimitiveAssociationSemantics).([StaticMethodDeclaration]setBlob((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Entity]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PrimitiveAssociationSemantics.setBlob(com.jetbrains.teamsys.database.Entity,java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))","~ActionQueryMethodName.nodeSubstituteActionsBuilder_Precondition(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeSubstituteActionsBuilder):java.lang.String");
  idByEriMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]rTransformHintSubstituteActionsBuilder_Precondition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))","~ActionQueryMethodName.rTransformHintSubstituteActionsBuilder_Precondition(jetbrains.mps.bootstrap.actionsLanguage.structure.RTransformHintSubstituteActionsBuilder):java.lang.String");
  idByEriMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_NodeSetupFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeFactory])))","~ActionQueryMethodName.nodeFactory_NodeSetupFunction(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeFactory):java.lang.String");
  idByEriMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_SubstituteActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeSubstituteActionsBuilder])))","~ActionQueryMethodName.nodeFactory_SubstituteActionBuilder(jetbrains.mps.bootstrap.actionsLanguage.structure.NodeSubstituteActionsBuilder):java.lang.String");
  idByEriMap.put("static method ([Classifier]ActionQueryMethodName).([StaticMethodDeclaration]nodeFactory_RightTransformActionBuilder((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RTransformHintSubstituteActionsBuilder])))","~ActionQueryMethodName.nodeFactory_RightTransformActionBuilder(jetbrains.mps.bootstrap.actionsLanguage.structure.RTransformHintSubstituteActionsBuilder):java.lang.String");
  idByEriMap.put("method ([Classifier]INodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())","~INodeSubstituteAction.getParameterObject():java.lang.Object");
  idByEriMap.put("method ([Classifier]AbstractNodeSubstituteAction).([InstanceMethodDeclaration]getParameterObject())","~AbstractNodeSubstituteAction.getParameterObject():java.lang.Object");
  idByEriMap.put("static method ([Classifier]ChildSubstituteActionsHelper).([StaticMethodDeclaration]createDefaultActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~ChildSubstituteActionsHelper.createDefaultActions(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.action.IChildNodeSetter,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]NodeFactoryManager).([StaticMethodDeclaration]createNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NodeFactoryManager.createNode(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createChildSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IChildNodeSetter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~ModelActions.createChildSubstituteActions(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,jetbrains.mps.smodel.action.IChildNodeSetter,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]ModelActions).([StaticMethodDeclaration]createRightTransformHintSubstituteActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~ModelActions.createRightTransformHintSubstituteActions(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("method ([Classifier]IChildNodeSetter).([InstanceMethodDeclaration]execute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~IChildNodeSetter.execute(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("constructor [Classifier]CellMenuPart_ReplaceNode_replacementConcept_SearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration]))","~CellMenuPart_ReplaceNode_replacementConcept_SearchScope.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration)");
  idByEriMap.put("method ([Classifier]LuceneTextIndexManager).([InstanceMethodDeclaration]close())","~LuceneTextIndexManager.close():void");
  idByEriMap.put("method ([Classifier]TextIndexMetaDataImpl).([InstanceMethodDeclaration]addEntityMetaData((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexEntityMetaData])))","~TextIndexMetaDataImpl.addEntityMetaData(java.lang.String,com.jetbrains.teamsys.textindex.TextIndexEntityMetaData):void");
  idByEriMap.put("constructor [Classifier]TextIndexEntityMetaDataImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~TextIndexEntityMetaDataImpl.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]TextIndexEntityMetaDataImpl).([InstanceMethodDeclaration]addTextExtractor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FieldTextExtractor])))","~TextIndexEntityMetaDataImpl.addTextExtractor(java.lang.String,com.jetbrains.teamsys.textindex.FieldTextExtractor):void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]clearIndex())","~TextIndexManager.clearIndex():void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]queueUnindexedDocuments())","~TextIndexManager.queueUnindexedDocuments():void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TextIndexManager.searchFor(java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]searchFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TextIndexManager.searchFor(java.lang.String,java.lang.String):com.jetbrains.teamsys.database.EntityIterable");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]waitForPendingDocs())","~TextIndexManager.waitForPendingDocs():void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]suspendIndexing())","~TextIndexManager.suspendIndexing():void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]resumeIndexing())","~TextIndexManager.resumeIndexing():void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseRussianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManager.setUseRussianStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]setUseGermanStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManager.setUseGermanStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]init())","~TextIndexManagerBase.init():void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFrenchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseFrenchStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSpanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseSpanishStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUsePortugueseStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUsePortugueseStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseItalianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseItalianStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDutchStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseDutchStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseFinishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseFinishStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseSwedishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseSwedishStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseNorwegianStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseNorwegianStemmer(boolean):void");
  idByEriMap.put("method ([Classifier]TextIndexManagerBase).([InstanceMethodDeclaration]setUseDanishStemmer((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TextIndexManagerBase.setUseDanishStemmer(boolean):void");
  idByEriMap.put("constructor [Classifier]TextIndexEntityStoreChangesListener[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexMetaData]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]))","~TextIndexEntityStoreChangesListener.<init>(com.jetbrains.teamsys.textindex.TextIndexMetaData,com.jetbrains.teamsys.textindex.TextIndexManager)");
  idByEriMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Entity]>])))","~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]TextIndexOperations).([StaticMethodDeclaration]search((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TransientStoreSession]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextIndexManager]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TextIndexOperations.search(com.jetbrains.teamsys.database.TransientStoreSession,com.jetbrains.teamsys.textindex.TextIndexManager,java.lang.String,java.lang.String,java.lang.String):java.lang.Iterable");
  idByEriMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setCorePoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ThreadPoolTaskExecutor.setCorePoolSize(int):void");
  idByEriMap.put("method ([Classifier]ThreadPoolTaskExecutor).([InstanceMethodDeclaration]setMaxPoolSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ThreadPoolTaskExecutor.setMaxPoolSize(int):void");
  idByEriMap.put("constructor [Classifier]CellProviderWithRole[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))","~CellProviderWithRole.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext)");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~CellProviderWithRole.setRole(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttribute())","~CellProviderWithRole.getRoleAttribute():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]getRoleAttributeClass())","~CellProviderWithRole.getRoleAttributeClass():java.lang.Class");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]createDefaultSubstituteInfo())","~CellProviderWithRole.createDefaultSubstituteInfo():jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setNoTargetText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CellProviderWithRole.setNoTargetText(java.lang.String):void");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setReadOnly((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~CellProviderWithRole.setReadOnly(boolean):void");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAllowsEmptyTarget((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~CellProviderWithRole.setAllowsEmptyTarget(boolean):void");
  idByEriMap.put("method ([Classifier]CellProviderWithRole).([InstanceMethodDeclaration]setAuxiliaryCellProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractCellProvider])))","~CellProviderWithRole.setAuxiliaryCellProvider(jetbrains.mps.nodeEditor.AbstractCellProvider):void");
  idByEriMap.put("constructor [Classifier]AbstractCellListHandler[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))","~AbstractCellListHandler.<init>(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.nodeEditor.EditorContext)");
  idByEriMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getOwner())","~AbstractCellListHandler.getOwner():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]getElementRole())","~AbstractCellListHandler.getElementRole():java.lang.String");
  idByEriMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createSeparatorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~AbstractCellListHandler.createSeparatorCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]AbstractCellListHandler).([InstanceMethodDeclaration]createCells((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellLayout]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~AbstractCellListHandler.createCells(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.cellLayout.CellLayout,boolean):jetbrains.mps.nodeEditor.cells.EditorCell_Collection");
  idByEriMap.put("static method ([Classifier]Webquery).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [WQParameter]])))","~Webquery.query(java.lang.String,java.lang.String,jetbrains.mps.webquery.runtime.WQParameter[]):java.lang.String");
  idByEriMap.put("static method ([Classifier]Webquery).([StaticMethodDeclaration]param((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Webquery.param(java.lang.String,java.lang.String):jetbrains.mps.webquery.runtime.WQParameter");
  idByEriMap.put("method ([Classifier]CronTrigger).([InstanceMethodDeclaration]setCronExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CronTrigger.setCronExpression(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]IOUtils).([StaticMethodDeclaration]copyLarge((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [InputStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream])))","~IOUtils.copyLarge(java.io.InputStream,java.io.OutputStream):long");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getInputStream())","~DiskFileItem.getInputStream():java.io.InputStream");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getContentType())","~DiskFileItem.getContentType():java.lang.String");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getName())","~DiskFileItem.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isInMemory())","~DiskFileItem.isInMemory():boolean");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getSize())","~DiskFileItem.getSize():long");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getFieldName())","~DiskFileItem.getFieldName():java.lang.String");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]isFormField())","~DiskFileItem.isFormField():boolean");
  idByEriMap.put("method ([Classifier]DiskFileItem).([InstanceMethodDeclaration]getStoreLocation())","~DiskFileItem.getStoreLocation():java.io.File");
  idByEriMap.put("constructor [Classifier]DiskFileItemFactory[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File]))","~DiskFileItemFactory.<init>(int,java.io.File)");
  idByEriMap.put("static method ([Classifier]PeriodTypeHackUtil).([StaticMethodDeclaration]isInstanceOfPeriod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~PeriodTypeHackUtil.isInstanceOfPeriod(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectLanguages())","~MPSProject.getProjectLanguages():java.util.List");
  idByEriMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getProjectSolutions())","~MPSProject.getProjectSolutions():java.util.List");
  idByEriMap.put("method ([Classifier]MPSProject).([InstanceMethodDeclaration]getComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~MPSProject.getComponent(java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]GlobalScope).([StaticMethodDeclaration]getInstance())","~GlobalScope.getInstance():jetbrains.mps.project.GlobalScope");
  idByEriMap.put("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getDescriptorFile())","~AbstractModule.getDescriptorFile():java.io.File");
  idByEriMap.put("method ([Classifier]AbstractModule).([InstanceMethodDeclaration]getScope())","~AbstractModule.getScope():jetbrains.mps.smodel.IScope");
  idByEriMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getOwnModelDescriptors())","~IModule.getOwnModelDescriptors():java.util.List");
  idByEriMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getNonDefaultModelRoots())","~IModule.getNonDefaultModelRoots():java.util.List");
  idByEriMap.put("method ([Classifier]IModule).([InstanceMethodDeclaration]getDescriptorFile())","~IModule.getDescriptorFile():java.io.File");
  idByEriMap.put("method ([Classifier]DevKit).([InstanceMethodDeclaration]getName())","~DevKit.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]Solution).([InstanceMethodDeclaration]getModuleUID())","~Solution.getModuleUID():java.lang.String");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MimeMessageHelper.setFrom(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MimeMessageHelper.addTo(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addCc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MimeMessageHelper.addCc(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]addBcc((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MimeMessageHelper.addBcc(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setSubject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MimeMessageHelper.setSubject(java.lang.String):void");
  idByEriMap.put("method ([Classifier]MimeMessageHelper).([InstanceMethodDeclaration]setText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~MimeMessageHelper.setText(java.lang.String,boolean):void");
  idByEriMap.put("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JavaMailSenderImpl.setHost(java.lang.String):void");
  idByEriMap.put("method ([Classifier]JavaMailSenderImpl).([InstanceMethodDeclaration]setDefaultEncoding((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JavaMailSenderImpl.setDefaultEncoding(java.lang.String):void");
  idByEriMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setRemoveStoreOnTearsDown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~AbstractEntityStoreAwareTestCase.setRemoveStoreOnTearsDown(boolean):void");
  idByEriMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]setUp())","~AbstractEntityStoreAwareTestCase.setUp():void");
  idByEriMap.put("method ([Classifier]AbstractEntityStoreAwareTestCase).([InstanceMethodDeclaration]tearDown())","~AbstractEntityStoreAwareTestCase.tearDown():void");
  idByEriMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]alloc())","~StringBuilderSpinAllocator.alloc():java.lang.StringBuilder");
  idByEriMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]dispose((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder])))","~StringBuilderSpinAllocator.dispose(java.lang.StringBuilder):void");
  idByEriMap.put("constructor [Classifier]LightByteArrayOutputStream[ConstructorDeclaration] ()","~LightByteArrayOutputStream.<init>()");
  idByEriMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ()","~IllegalStateException.<init>()");
  idByEriMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalStateException.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]RootTemplate[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~RootTemplate.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]createRootRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.createRootRule_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]ifMacro_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.ifMacro_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]baseMappingRule_Condition((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.baseMappingRule_Condition(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]propertyMacro_GetPropertyValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.propertyMacro_GetPropertyValue(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]referenceMacro_GetReferent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.referenceMacro_GetReferent(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodesQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodesQuery(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]sourceSubstituteMacro_SourceNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]templateFragment_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.templateFragment_ContextNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]weaving_MappingRule_ContextNodeQuery((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.weaving_MappingRule_ContextNodeQuery(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]TemplateFunctionMethodName).([StaticMethodDeclaration]mapSrcMacro_MapperFunction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateFunctionMethodName.mapSrcMacro_MapperFunction(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("constructor [Classifier]NodeListIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NodeList]))","~NodeListIterableAdapter.<init>(org.w3c.dom.NodeList)");
  idByEriMap.put("constructor [Classifier]NamedNodeMapIterableAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [NamedNodeMap]))","~NamedNodeMapIterableAdapter.<init>(org.w3c.dom.NamedNodeMap)");
  idByEriMap.put("constructor [Classifier]ChainedIterable[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>]]))","~ChainedIterable.<init>(java.lang.Iterable[])");
  idByEriMap.put("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BaseConcept.newInstance(jetbrains.mps.smodel.SModel,boolean):jetbrains.mps.core.structure.BaseConcept");
  idByEriMap.put("static method ([Classifier]BaseConcept).([StaticMethodDeclaration]newInstance((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~BaseConcept.newInstance(jetbrains.mps.smodel.SModel):jetbrains.mps.core.structure.BaseConcept");
  idByEriMap.put("static method ([Classifier]HUtil).([StaticMethodDeclaration]copyIfNecessary((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~HUtil.copyIfNecessary(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]HUtil).([StaticMethodDeclaration]createMatchingPatternByConceptFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~HUtil.createMatchingPatternByConceptFQName(java.lang.String):jetbrains.mps.patterns.IMatchingPattern");
  idByEriMap.put("constructor [Classifier]AbstractSubtypingRule_Runtime[ConstructorDeclaration] ()","~AbstractSubtypingRule_Runtime.<init>()");
  idByEriMap.put("method ([Classifier]ComparisonRule_Runtime).([InstanceMethodDeclaration]getApplicableConceptFQName1())","~ComparisonRule_Runtime.getApplicableConceptFQName1():java.lang.String");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]typeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.typeOf(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createNewRuntimeTypesVariable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~RuntimeSupport.createNewRuntimeTypesVariable(boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createEquation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createLessThanInequation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createLessThanInequationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createLessThanInequationStrong(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createGreaterThanInequation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createGreaterThanInequation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createComparableEquation(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]createComparableEquationStrong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.createComparableEquationStrong(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]givetype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.givetype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]whenConcrete((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RuntimeSupport.whenConcrete(jetbrains.mps.smodel.SNode,java.lang.Runnable,java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]hasEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~RuntimeSupport.hasEffect(jetbrains.mps.smodel.SNode,java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]addEffect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~RuntimeSupport.addEffect(jetbrains.mps.smodel.SNode,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~RuntimeSupport.coerce(jetbrains.mps.smodel.SNode,jetbrains.mps.patterns.IMatchingPattern,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]RuntimeSupport).([InstanceMethodDeclaration]coerce((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMatchingPattern])))","~RuntimeSupport.coerce(jetbrains.mps.smodel.SNode,jetbrains.mps.patterns.IMatchingPattern):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]XhtmlSchemaUtil).([StaticMethodDeclaration]findXhtmlSchema((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~XhtmlSchemaUtil.findXhtmlSchema(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("constructor [Classifier]TypeVarScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~TypeVarScope.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]IFilter).([InstanceMethodDeclaration]accept((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~IFilter.accept(java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]From((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [UsagesTreePath, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~TreeTraversalFactory.From(java.lang.Object,jetbrains.mps.ypath.runtime.UsagesTreePath):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Traverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TraversalAxis])))","~TreeTraversalFactory.Traverse(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.TraversalAxis):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Filter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITreeTraversal, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFilter, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~TreeTraversalFactory.Filter(jetbrains.mps.ypath.runtime.ITreeTraversal,jetbrains.mps.ypath.runtime.IFilter):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("static method ([Classifier]TreeTraversalFactory).([StaticMethodDeclaration]Axis((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TreeTraversalFactory.Axis(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
  idByEriMap.put("constructor [Classifier]UsagesTreePath[ConstructorDeclaration] ()","~UsagesTreePath.<init>()");
  idByEriMap.put("method ([Classifier]UsagesTreePath).([InstanceMethodDeclaration]registerFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IFeatureDescriptor, <any_>])))","~UsagesTreePath.registerFeature(jetbrains.mps.ypath.runtime.IFeatureDescriptor):void");
  idByEriMap.put("method ([Classifier]UsagesTreePath).([InstanceMethodDeclaration]startTraversal((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~UsagesTreePath.startTraversal(java.lang.Object):jetbrains.mps.ypath.runtime.ITreeTraversal");
  idByEriMap.put("constructor [Classifier]CompositeFilter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [IFilter, <any_>]]))","~CompositeFilter.<init>(jetbrains.mps.ypath.runtime.IFilter[])");
  idByEriMap.put("method ([Classifier]ITreeTraversal).([InstanceMethodDeclaration]getTreePath())","~ITreeTraversal.getTreePath():jetbrains.mps.ypath.runtime.ITreePath");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getName())","~TraversalAxis.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]TraversalAxis).([InstanceMethodDeclaration]getValue())","~TraversalAxis.getValue():java.lang.String");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]getConstants())","~TraversalAxis.getConstants():java.util.List");
  idByEriMap.put("static method ([Classifier]TraversalAxis).([StaticMethodDeclaration]parseValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TraversalAxis.parseValue(java.lang.String):jetbrains.mps.ypath.runtime.TraversalAxis");
  idByEriMap.put("constructor [Classifier]DOMSource[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]))","~DOMSource.<init>(org.w3c.dom.Node)");
  idByEriMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setDefaultText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCell_Label.setDefaultText(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getTextLine())","~EditorCell_Label.getTextLine():jetbrains.mps.nodeEditor.TextLine");
  idByEriMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]getNullTextLine())","~EditorCell_Label.getNullTextLine():jetbrains.mps.nodeEditor.TextLine");
  idByEriMap.put("method ([Classifier]EditorCell_Label).([InstanceMethodDeclaration]setEditable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell_Label.setEditable(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell.setSelectable(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setUnderlined((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell.setUnderlined(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getEditorContext())","~EditorCell.getEditorContext():jetbrains.mps.nodeEditor.EditorContext");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSNode())","~EditorCell.getSNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setSubstituteInfo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeSubstituteInfo])))","~EditorCell.setSubstituteInfo(jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getSubstituteInfo())","~EditorCell.getSubstituteInfo():jetbrains.mps.nodeEditor.cellMenu.INodeSubstituteInfo");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellAction])))","~EditorCell.setAction(java.lang.String,jetbrains.mps.nodeEditor.EditorCellAction):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]addKeyMap((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMap])))","~EditorCell.addKeyMap(jetbrains.mps.nodeEditor.EditorCellKeyMap):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBorder((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell.setDrawBorder(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setDrawBrackets((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell.setDrawBrackets(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setBracketsColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~EditorCell.setBracketsColor(java.awt.Color):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontSize((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EditorCell.setFontSize(int):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setFontType((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EditorCell.setFontType(int):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setLayoutConstraint((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCell.setLayoutConstraint(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]putUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~EditorCell.putUserObject(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]getUserObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~EditorCell.getUserObject(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setCellBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~EditorCell.setCellBackgroundColor(java.awt.Color):void");
  idByEriMap.put("method ([Classifier]EditorCell).([InstanceMethodDeclaration]setRightTransformAnchorTag((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCell.setRightTransformAnchorTag(java.lang.String):void");
  idByEriMap.put("method ([Classifier]PropertyAccessor).([InstanceMethodDeclaration]getPropertyName())","~PropertyAccessor.getPropertyName():java.lang.String");
  idByEriMap.put("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]isApplicable((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~CreateFromUsageUtil.isApplicable(jetbrains.mps.nodeEditor.EditorContext):boolean");
  idByEriMap.put("static method ([Classifier]CreateFromUsageUtil).([StaticMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~CreateFromUsageUtil.getText(jetbrains.mps.nodeEditor.EditorContext):java.lang.String");
  idByEriMap.put("constructor [Classifier]EditorCellKeyMap[ConstructorDeclaration] ()","~EditorCellKeyMap.<init>()");
  idByEriMap.put("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]putAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCellKeyMapAction])))","~EditorCellKeyMap.putAction(java.lang.String,java.lang.String,jetbrains.mps.nodeEditor.EditorCellKeyMapAction):void");
  idByEriMap.put("method ([Classifier]EditorCellKeyMap).([InstanceMethodDeclaration]setApplicableToEveryModel((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCellKeyMap.setApplicableToEveryModel(boolean):void");
  idByEriMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]getVirtualKeycodes())","~EditorCellKeyMap.getVirtualKeycodes():java.util.List");
  idByEriMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidModifiers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCellKeyMap.isValidModifiers(java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]EditorCellKeyMap).([StaticMethodDeclaration]isValidKeycode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCellKeyMap.isValidKeycode(java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]EditorCell_Component).([StaticMethodDeclaration]createComponentCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JComponent]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCell_Component.createComponentCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,javax.swing.JComponent,java.lang.String):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("constructor [Classifier]EditorCell_Error[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~EditorCell_Error.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String)");
  idByEriMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedPropertyCell())","~EditorManager.getCurrentAttributedPropertyCell():jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedLinkCell())","~EditorManager.getCurrentAttributedLinkCell():jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]getCurrentAttributedNodeCell())","~EditorManager.getCurrentAttributedNodeCell():jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorManager).([InstanceMethodDeclaration]createRoleAttributeCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))","~EditorManager.createRoleAttributeCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.Class,jetbrains.mps.nodeEditor.cells.EditorCell):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("static method ([Classifier]EditorManager).([StaticMethodDeclaration]getInstanceFromContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~EditorManager.getInstanceFromContext(jetbrains.mps.smodel.IOperationContext):jetbrains.mps.nodeEditor.EditorManager");
  idByEriMap.put("constructor [Classifier]CellLayout_Horizontal[ConstructorDeclaration] ()","~CellLayout_Horizontal.<init>()");
  idByEriMap.put("method ([Classifier]EditorCell_Basic).([InstanceMethodDeclaration]setSelectable((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell_Basic.setSelectable(boolean):void");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getNodeEditorComponent())","~EditorContext.getNodeEditorComponent():jetbrains.mps.nodeEditor.AbstractEditorComponent");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedCell())","~EditorContext.getSelectedCell():jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getScope())","~EditorContext.getScope():jetbrains.mps.smodel.IScope");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getSelectedNode())","~EditorContext.getSelectedNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getOperationContext())","~EditorContext.getOperationContext():jetbrains.mps.smodel.IOperationContext");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~EditorContext.selectLater(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]selectAndSetCaretLater((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EditorContext.selectAndSetCaretLater(jetbrains.mps.smodel.SNode,int):void");
  idByEriMap.put("method ([Classifier]EditorContext).([InstanceMethodDeclaration]getContextCell())","~EditorContext.getContextCell():jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setCaretPolicy((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EditorCellKeyMapAction.setCaretPolicy(int):void");
  idByEriMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]setShownInPopupMenu((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCellKeyMapAction.setShownInPopupMenu(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCellKeyMapAction).([InstanceMethodDeclaration]getSelectedNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~EditorCellKeyMapAction.getSelectedNodes(jetbrains.mps.nodeEditor.EditorContext):java.util.List");
  idByEriMap.put("constructor [Classifier]DefaultChildSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LinkDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]))","~DefaultChildSubstituteInfo.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration,jetbrains.mps.nodeEditor.EditorContext)");
  idByEriMap.put("method ([Classifier]EditorCell_Property).([InstanceMethodDeclaration]getModelAccessor())","~EditorCell_Property.getModelAccessor():jetbrains.mps.nodeEditor.ModelAccessor");
  idByEriMap.put("static method ([Classifier]EditorCell_Property).([StaticMethodDeclaration]create((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ModelAccessor]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~EditorCell_Property.create(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.ModelAccessor,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.cells.EditorCell_Property");
  idByEriMap.put("constructor [Classifier]EditorCell_Constant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~EditorCell_Constant.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String)");
  idByEriMap.put("constructor [Classifier]AbstractCellProvider[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~AbstractCellProvider.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getSNode())","~AbstractCellProvider.getSNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]getCellContext())","~AbstractCellProvider.getCellContext():jetbrains.mps.nodeEditor.cellMenu.ICellContext");
  idByEriMap.put("method ([Classifier]AbstractCellProvider).([InstanceMethodDeclaration]createEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~AbstractCellProvider.createEditorCell(jetbrains.mps.nodeEditor.EditorContext):jetbrains.mps.nodeEditor.cells.EditorCell");
  idByEriMap.put("method ([Classifier]EditorCell_Image).([InstanceMethodDeclaration]setDescent((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EditorCell_Image.setDescent(int):void");
  idByEriMap.put("static method ([Classifier]EditorCell_Image).([StaticMethodDeclaration]createImageCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EditorCell_Image.createImageCell(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.nodeEditor.cells.EditorCell_Image");
  idByEriMap.put("constructor [Classifier]CellAction_Empty[ConstructorDeclaration] ()","~CellAction_Empty.<init>()");
  idByEriMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~TextLine.setTextColor(java.awt.Color):void");
  idByEriMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~TextLine.setTextBackgroundColor(java.awt.Color):void");
  idByEriMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]setSelectedTextBackgroundColor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~TextLine.setSelectedTextBackgroundColor(java.awt.Color):void");
  idByEriMap.put("method ([Classifier]TextLine).([InstanceMethodDeclaration]getCaretPosition())","~TextLine.getCaretPosition():int");
  idByEriMap.put("constructor [Classifier]CellAction_DeleteNode[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~CellAction_DeleteNode.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setGridLayout((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell_Collection.setGridLayout(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]addEditorCell((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))","~EditorCell_Collection.addEditorCell(jetbrains.mps.nodeEditor.cells.EditorCell):void");
  idByEriMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setCanBeFolded((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell_Collection.setCanBeFolded(boolean):void");
  idByEriMap.put("method ([Classifier]EditorCell_Collection).([InstanceMethodDeclaration]setUsesBraces((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EditorCell_Collection.setUsesBraces(boolean):void");
  idByEriMap.put("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createVertical((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~EditorCell_Collection.createVertical(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.cells.EditorCell_Collection");
  idByEriMap.put("static method ([Classifier]EditorCell_Collection).([StaticMethodDeclaration]createHorizontal((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~EditorCell_Collection.createHorizontal(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.smodel.SNode):jetbrains.mps.nodeEditor.cells.EditorCell_Collection");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~Queries.getBinaryOperationType(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]getBinaryOperationType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Queries.getBinaryOperationType(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedFeature((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~CellMenuUtil.getEditedFeature(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]CellMenuUtil).([StaticMethodDeclaration]getEditedAggregationLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CellMenuPart_Abstract])))","~CellMenuUtil.getEditedAggregationLink(jetbrains.mps.bootstrap.editorLanguage.structure.CellMenuPart_Abstract):jetbrains.mps.bootstrap.structureLanguage.structure.LinkDeclaration");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_reference_isCardinality_1((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~Queries.CustomExpression_check_LinkDeclaration_reference_isCardinality_1(java.lang.Object[]):java.lang.Object");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]CustomExpression_check_LinkDeclaration_aggragation_target_isConcreteConcept((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~Queries.CustomExpression_check_LinkDeclaration_aggragation_target_isConcreteConcept(java.lang.Object[]):java.lang.Object");
  idByEriMap.put("method ([Classifier]Runnable).([InstanceMethodDeclaration]run())","~Runnable.run():void");
  idByEriMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]max((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Math.max(long,long):long");
  idByEriMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]min((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))","~Math.min(double,double):double");
  idByEriMap.put("static method ([Classifier]Short).([StaticMethodDeclaration]parseShort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Short.parseShort(java.lang.String):short");
  idByEriMap.put("method ([Classifier]Comparable).([InstanceMethodDeclaration]compareTo((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Comparable.compareTo(java.lang.Object):int");
  idByEriMap.put("method ([Classifier]Thread).([InstanceMethodDeclaration]getContextClassLoader())","~Thread.getContextClassLoader():java.lang.ClassLoader");
  idByEriMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]currentThread())","~Thread.currentThread():java.lang.Thread");
  idByEriMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]yield())","~Thread.yield():void");
  idByEriMap.put("static method ([Classifier]Thread).([StaticMethodDeclaration]sleep((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Thread.sleep(long):void");
  idByEriMap.put("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Long.parseLong(java.lang.String,int):long");
  idByEriMap.put("static method ([Classifier]Long).([StaticMethodDeclaration]parseLong((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Long.parseLong(java.lang.String):long");
  idByEriMap.put("static method ([Classifier]Byte).([StaticMethodDeclaration]parseByte((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Byte.parseByte(java.lang.String):byte");
  idByEriMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]newInstance())","~Class.newInstance():java.lang.Object");
  idByEriMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]getName())","~Class.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]Class).([InstanceMethodDeclaration]isEnum())","~Class.isEnum():boolean");
  idByEriMap.put("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Class.forName(java.lang.String):java.lang.Class");
  idByEriMap.put("static method ([Classifier]Class).([StaticMethodDeclaration]forName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ClassLoader])))","~Class.forName(java.lang.String,boolean,java.lang.ClassLoader):java.lang.Class");
  idByEriMap.put("constructor [Classifier]IndexOutOfBoundsException[ConstructorDeclaration] ()","~IndexOutOfBoundsException.<init>()");
  idByEriMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]getMessage())","~Throwable.getMessage():java.lang.String");
  idByEriMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]getLocalizedMessage())","~Throwable.getLocalizedMessage():java.lang.String");
  idByEriMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]printStackTrace())","~Throwable.printStackTrace():void");
  idByEriMap.put("static method ([Classifier]Double).([StaticMethodDeclaration]parseDouble((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Double.parseDouble(java.lang.String):double");
  idByEriMap.put("constructor [Classifier]Object[ConstructorDeclaration] ()","~Object.<init>()");
  idByEriMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]getClass())","~Object.getClass():java.lang.Class");
  idByEriMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Object.equals(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]toString())","~Object.toString():java.lang.String");
  idByEriMap.put("static method ([Classifier]Float).([StaticMethodDeclaration]parseFloat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Float.parseFloat(java.lang.String):float");
  idByEriMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ()","~IllegalStateException.<init>()");
  idByEriMap.put("constructor [Classifier]IllegalStateException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalStateException.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]Character).([StaticMethodDeclaration]toUpperCase((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))","~Character.toUpperCase(char):char");
  idByEriMap.put("constructor [Classifier]IllegalAccessError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalAccessError.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]Enum).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Enum.valueOf(java.lang.Class,java.lang.String):java.lang.Enum");
  idByEriMap.put("constructor [Classifier]StringBuilder[ConstructorDeclaration] ()","~StringBuilder.<init>()");
  idByEriMap.put("constructor [Classifier]StringBuilder[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~StringBuilder.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StringBuilder.append(java.lang.String):java.lang.StringBuilder");
  idByEriMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder");
  idByEriMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))","~StringBuilder.append(char):java.lang.StringBuilder");
  idByEriMap.put("method ([Classifier]StringBuilder).([InstanceMethodDeclaration]toString())","~StringBuilder.toString():java.lang.String");
  idByEriMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ()","~RuntimeException.<init>()");
  idByEriMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~RuntimeException.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))","~RuntimeException.<init>(java.lang.String,java.lang.Throwable)");
  idByEriMap.put("constructor [Classifier]RuntimeException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))","~RuntimeException.<init>(java.lang.Throwable)");
  idByEriMap.put("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ()","~UnsupportedOperationException.<init>()");
  idByEriMap.put("constructor [Classifier]UnsupportedOperationException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~UnsupportedOperationException.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]String[ConstructorDeclaration] ()","~String.<init>()");
  idByEriMap.put("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~String.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]String[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_]))","~String.<init>(byte[])");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]length())","~String.length():int");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~String.charAt(int):char");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]getBytes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.getBytes(java.lang.String):byte[]");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]getBytes())","~String.getBytes():byte[]");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~String.equals(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]equalsIgnoreCase((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.equalsIgnoreCase(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]startsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.startsWith(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]endsWith((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.endsWith(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.indexOf(java.lang.String):int");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]lastIndexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.lastIndexOf(java.lang.String):int");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~String.substring(int):java.lang.String");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]substring((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~String.substring(int,int):java.lang.String");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]replace((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char), (jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))","~String.replace(char,char):java.lang.String");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]matches((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.matches(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~String.contains(java.lang.CharSequence):boolean");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]replaceAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.replaceAll(java.lang.String,java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]split((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~String.split(java.lang.String):java.lang.String[]");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]toLowerCase())","~String.toLowerCase():java.lang.String");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]toString())","~String.toString():java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]format((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~String.format(java.lang.String,java.lang.Object[]):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~String.valueOf(java.lang.Object):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~String.valueOf(boolean):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.char/jetbrains.mps.baseLanguage.types.char)))","~String.valueOf(char):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~String.valueOf(int):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~String.valueOf(long):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float)))","~String.valueOf(float):java.lang.String");
  idByEriMap.put("static method ([Classifier]String).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double)))","~String.valueOf(double):java.lang.String");
  idByEriMap.put("constructor [Classifier]Exception[ConstructorDeclaration] ()","~Exception.<init>()");
  idByEriMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ()","~IllegalArgumentException.<init>()");
  idByEriMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalArgumentException.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Throwable]))","~IllegalArgumentException.<init>(java.lang.Throwable)");
  idByEriMap.put("method ([Classifier]Iterable).([InstanceMethodDeclaration]iterator())","~Iterable.iterator():java.util.Iterator");
  idByEriMap.put("static method ([Classifier]System).([StaticMethodDeclaration]currentTimeMillis())","~System.currentTimeMillis():long");
  idByEriMap.put("static method ([Classifier]System).([StaticMethodDeclaration]getProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~System.getProperty(java.lang.String):java.lang.String");
  idByEriMap.put("constructor [Classifier]Boolean[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean))","~Boolean.<init>(boolean)");
  idByEriMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]booleanValue())","~Boolean.booleanValue():boolean");
  idByEriMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]toString())","~Boolean.toString():java.lang.String");
  idByEriMap.put("method ([Classifier]Boolean).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Boolean.equals(java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]Boolean).([StaticMethodDeclaration]parseBoolean((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Boolean.parseBoolean(java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]Boolean).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Boolean.toString(boolean):java.lang.String");
  idByEriMap.put("constructor [Classifier]NullPointerException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~NullPointerException.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]StringBuffer[ConstructorDeclaration] ()","~StringBuffer.<init>()");
  idByEriMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~StringBuffer.append(java.lang.Object):java.lang.StringBuffer");
  idByEriMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StringBuffer.append(java.lang.String):java.lang.StringBuffer");
  idByEriMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~StringBuffer.append(java.lang.CharSequence):java.lang.StringBuffer");
  idByEriMap.put("method ([Classifier]StringBuffer).([InstanceMethodDeclaration]toString())","~StringBuffer.toString():java.lang.String");
  idByEriMap.put("constructor [Classifier]Integer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~Integer.<init>(int)");
  idByEriMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Integer.parseInt(java.lang.String,int):int");
  idByEriMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]parseInt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Integer.parseInt(java.lang.String):int");
  idByEriMap.put("method ([Classifier]Appendable).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~Appendable.append(java.lang.CharSequence):java.lang.Appendable");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]createList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~ListOperations.createList(java.lang.Object[]):java.util.List");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~ListOperations.addElement(java.util.List,java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~ListOperations.removeElement(java.util.List,java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]addAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ListOperations.addAllElements(java.util.List,java.lang.Iterable):void");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]removeAllElements((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ListOperations.removeAllElements(java.util.List,java.lang.Iterable):void");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]getElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ListOperations.getElement(java.util.List,int):java.lang.Object");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~ListOperations.indexOf(java.util.List,java.lang.Object):int");
  idByEriMap.put("static method ([Classifier]ListOperations).([StaticMethodDeclaration]reverse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ListOperations.reverse(java.util.List):java.util.List");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.getFirst(java.lang.Iterable):java.lang.Object");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getLast((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.getLast(java.lang.Iterable):java.lang.Object");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]isEmpty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.isEmpty(java.lang.Iterable):boolean");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.toList(java.lang.Iterable):java.util.List");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.toArray(java.lang.Iterable,java.lang.Class):java.lang.Object[]");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]select((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ISelector, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.select(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.ISelector):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]where((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IPredicate, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.where(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IPredicate):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]map((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IMapper, <jetbrains.mps.baseLanguage.types.classifier [Object], jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.map(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IMapper):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]forEach((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IForEach, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.forEach(java.lang.Iterable,jetbrains.mps.baseLanguage.ext.collections.internal.query.IForEach):void");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]sort((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Comparator, <? super jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SequenceOperations.sort(java.lang.Iterable,java.util.Comparator,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]union((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.union(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]concat((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.concat(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]intersect((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.intersect(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]exclude((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.exclude(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~SequenceOperations.contains(java.lang.Iterable,java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]skip((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~SequenceOperations.skip(java.lang.Iterable,long):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]take((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~SequenceOperations.take(java.lang.Iterable,long):java.lang.Iterable");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]getSize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.getSize(java.lang.Iterable):int");
  idByEriMap.put("static method ([Classifier]SequenceOperations).([StaticMethodDeclaration]distinct((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SequenceOperations.distinct(java.lang.Iterable):java.util.Set");
  idByEriMap.put("method ([Classifier]Condition).([InstanceMethodDeclaration]met((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Condition.met(java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]FileUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))","~FileUtil.getCanonicalPath(java.io.File):java.lang.String");
  idByEriMap.put("static method ([Classifier]CollectionUtil).([StaticMethodDeclaration]mapToString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~CollectionUtil.mapToString(java.util.List):java.util.List");
  idByEriMap.put("static method ([Classifier]CollectionUtil).([StaticMethodDeclaration]mapToString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~CollectionUtil.mapToString(java.util.Collection):java.util.List");
  idByEriMap.put("constructor [Classifier]AndCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <any_>]))","~AndCondition.<init>(jetbrains.mps.util.Condition,jetbrains.mps.util.Condition)");
  idByEriMap.put("method ([Classifier]Macros).([InstanceMethodDeclaration]expandPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [File])))","~Macros.expandPath(java.lang.String,java.io.File):java.lang.String");
  idByEriMap.put("static method ([Classifier]Macros).([StaticMethodDeclaration]languageDescriptor())","~Macros.languageDescriptor():jetbrains.mps.util.Macros");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]capitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.capitalize(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]decapitalize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.decapitalize(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pluralize((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.pluralize(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toConstantName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.toConstantName(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]splitByCamels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.splitByCamels(java.lang.String):java.util.List");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]shortNameFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.shortNameFromLongName(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]namespaceFromLongName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.namespaceFromLongName(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~NameUtil.nodeFQName(jetbrains.mps.smodel.SNode):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]nodeFQName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeAdapter])))","~NameUtil.nodeFQName(jetbrains.mps.smodel.INodeAdapter):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.toValidIdentifier(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]toValidCamelIdentifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.toValidCamelIdentifier(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]pathFromNamespace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.pathFromNamespace(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]NameUtil).([StaticMethodDeclaration]stripQuotes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NameUtil.stripQuotes(java.lang.String,java.lang.String,java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]Calculable).([InstanceMethodDeclaration]calculate())","~Calculable.calculate():java.lang.Object");
  idByEriMap.put("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]setAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AsPattern])))","~AsPattern_AnnotationLink.setAsPattern(jetbrains.mps.core.structure.BaseConcept,jetbrains.mps.patterns.structure.AsPattern):void");
  idByEriMap.put("static method ([Classifier]AsPattern_AnnotationLink).([StaticMethodDeclaration]getAsPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept])))","~AsPattern_AnnotationLink.getAsPattern(jetbrains.mps.core.structure.BaseConcept):jetbrains.mps.patterns.structure.AsPattern");
  idByEriMap.put("constructor [Classifier]Color[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~Color.<init>(int,int,int)");
  idByEriMap.put("method ([Classifier]Graphics).([InstanceMethodDeclaration]drawImage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Image]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ImageObserver])))","~Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver):boolean");
  idByEriMap.put("constructor [Classifier]StreamResult[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [OutputStream]))","~StreamResult.<init>(java.io.OutputStream)");
  idByEriMap.put("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]html((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~HtmlStringUtil.html(java.lang.Object):java.lang.String");
  idByEriMap.put("static method ([Classifier]HtmlStringUtil).([StaticMethodDeclaration]stringLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~HtmlStringUtil.stringLiteral(java.lang.Object):java.lang.String");
  idByEriMap.put("constructor [Classifier]AssertionFailedError[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~AssertionFailedError.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertTrue(java.lang.String,boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertTrue((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertTrue(boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertFalse((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertFalse(boolean):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]fail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Assert.fail(java.lang.String):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertEquals(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Assert.assertEquals(java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Assert.assertEquals(long,long):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Assert.assertEquals(java.lang.String,int,int):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Assert.assertEquals(int,int):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertNull((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertNull(java.lang.Object):void");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertSame((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Assert.assertSame(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]TBuffer).([InstanceMethodDeclaration]getText())","~TBuffer.getText():java.lang.String");
  idByEriMap.put("static method ([Classifier]TBuilderContextFactory).([StaticMethodDeclaration]getLocalBuilderContext())","~TBuilderContextFactory.getLocalBuilderContext():webr.framework.textBuilder.TBuilderContext");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateComponent())","~TBuilderContext.getCurrentTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushCurrentTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TemplateComponent])))","~TBuilderContext.pushCurrentTemplateComponent(jetbrains.mps.webr.runtime.templateComponent.TemplateComponent):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popCurrentTemplateComponent())","~TBuilderContext.popCurrentTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentTemplateName())","~TBuilderContext.getCurrentTemplateName():java.lang.String");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentTemplateName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.setCurrentTemplateName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentLayoutName())","~TBuilderContext.getCurrentLayoutName():java.lang.String");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setCurrentLayoutName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.setCurrentLayoutName(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]pushOldChildrenTemplateComponents((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [TemplateComponent]>])))","~TBuilderContext.pushOldChildrenTemplateComponents(java.util.Map):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]popOldChildrenTemplateComponents())","~TBuilderContext.popOldChildrenTemplateComponents():java.util.Map");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getOldChildTemplateComponent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.getOldChildTemplateComponent(java.lang.String):jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getNonLayoutRootTemplateComponent())","~TBuilderContext.getNonLayoutRootTemplateComponent():jetbrains.mps.webr.runtime.templateComponent.TemplateComponent");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setTemplateStylesheetPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.setTemplateStylesheetPath(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]hasTemplateStylesheet())","~TBuilderContext.hasTemplateStylesheet():boolean");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getTemplateStylesheetPath())","~TBuilderContext.getTemplateStylesheetPath():java.lang.String");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getRssLinkEntries())","~TBuilderContext.getRssLinkEntries():java.util.List");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.isFirstScriptLink(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]isFirstScriptOnceElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.isFirstScriptOnceElement(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]setWindowId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.setWindowId(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.getId(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getCurrentId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.getCurrentId(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]initBuffer())","~TBuilderContext.initBuffer():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]getBuffer())","~TBuilderContext.getBuffer():webr.framework.textBuilder.TBuffer");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]saveBuffer())","~TBuilderContext.saveBuffer():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]restoreBuffer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HtmlStringUtil$EscapeKind])))","~TBuilderContext.restoreBuffer(webr.framework.function.HtmlStringUtil$EscapeKind):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TBuilderContext.append(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendIndent())","~TBuilderContext.appendIndent():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]appendNewLine())","~TBuilderContext.appendNewLine():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]increaseIndent())","~TBuilderContext.increaseIndent():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]decreaseIndent())","~TBuilderContext.decreaseIndent():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]suspendRenderingUnless((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~TBuilderContext.suspendRenderingUnless(boolean):void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]resumeRendering())","~TBuilderContext.resumeRendering():void");
  idByEriMap.put("method ([Classifier]TBuilderContext).([InstanceMethodDeclaration]render((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TextBuilder]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~TBuilderContext.render(webr.framework.textBuilder.TextBuilder,java.util.Map):void");
  idByEriMap.put("constructor [Classifier]PopulateParameters[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest]))","~PopulateParameters.<init>(javax.servlet.http.HttpServletRequest)");
  idByEriMap.put("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PopulateParameters.hasParameter(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]PopulateParameters).([InstanceMethodDeclaration]hasParameters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~PopulateParameters.hasParameters(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]TextBuilder).([InstanceMethodDeclaration]getText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [Object]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TBuilderContext])))","~TextBuilder.getText(java.util.Map,webr.framework.textBuilder.TBuilderContext):java.lang.String");
  idByEriMap.put("method ([Classifier]RssLinkEntry).([InstanceMethodDeclaration]getHref())","~RssLinkEntry.getHref():java.lang.String");
  idByEriMap.put("constructor [Classifier]ParameterSpec[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]))","~ParameterSpec.<init>(java.lang.String,java.lang.Object)");
  idByEriMap.put("constructor [Classifier]AbstractTemplates[ConstructorDeclaration] ()","~AbstractTemplates.<init>()");
  idByEriMap.put("constructor [Classifier]ParametersMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ParameterSpec]]))","~ParametersMap.<init>(transform.util.ParameterSpec[])");
  idByEriMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getHelpText())","~TextBlock.getHelpText():java.lang.String");
  idByEriMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getSurroundPattern())","~TextBlock.getSurroundPattern():java.lang.String");
  idByEriMap.put("method ([Classifier]TextBlock).([InstanceMethodDeclaration]getIconPath())","~TextBlock.getIconPath():java.lang.String");
  idByEriMap.put("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Pattern]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Color])))","~RegexpHighlighter.add(java.util.regex.Pattern,java.awt.Color):void");
  idByEriMap.put("method ([Classifier]RegexpHighlighter).([InstanceMethodDeclaration]addKeyWord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RegexpHighlighter.addKeyWord(java.lang.String):void");
  idByEriMap.put("method ([Classifier]MediaWikiProcessor).([InstanceMethodDeclaration]getLinkFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MediaWikiProcessor.getLinkFor(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]getBlocks())","~WikiManager.getBlocks():java.util.List");
  idByEriMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setBlocks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TextBlock]>])))","~WikiManager.setBlocks(java.util.List):void");
  idByEriMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setHiglighters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RegexpHighlighter]>])))","~WikiManager.setHiglighters(java.util.List):void");
  idByEriMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]setWikiLinkHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [WikiLinkHandler]>])))","~WikiManager.setWikiLinkHandlers(java.util.List):void");
  idByEriMap.put("method ([Classifier]WikiManager).([InstanceMethodDeclaration]process((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~WikiManager.process(java.lang.String):java.lang.String");
  idByEriMap.put("constructor [Classifier]IllegalArgumentException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~IllegalArgumentException.<init>(java.lang.String)");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRoots((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelOperations.getRoots(jetbrains.mps.smodel.SModel,java.lang.String):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getRootsIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelOperations.getRootsIncludingImported(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,java.lang.String):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodesIncludingImported((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelOperations.getNodesIncludingImported(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,java.lang.String):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelOperations.getNodes(jetbrains.mps.smodel.SModel,java.lang.String):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelOperations.createNewNode(jetbrains.mps.smodel.SModel,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SModelOperations.createNewNode(jetbrains.mps.smodel.SModel,java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SModelOperations).([StaticMethodDeclaration]createNewRootNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SModelOperations.createNewRootNode(jetbrains.mps.smodel.SModel,java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]set((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SPropertyOperations.set(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SPropertyOperations.getString(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SPropertyOperations.hasValue(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]getString_def((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SPropertyOperations.getString_def(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]SPropertyOperations).([StaticMethodDeclaration]hasValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SPropertyOperations.hasValue(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SConceptPropertyOperations).([StaticMethodDeclaration]getString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SConceptPropertyOperations.getString(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAdapter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getAdapter(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.INodeAdapter");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]copyNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.copyNode(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getContainingRoot((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getContainingRoot(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getParent(jetbrains.mps.smodel.SNode,java.lang.String,boolean,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getAncestor(jetbrains.mps.smodel.SNode,java.lang.String,boolean,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getAncestorWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestors((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getAncestors(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAncestorsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getAncestorsWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendants((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getDescendants(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getDescendantsWhereConceptInList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getDescendantsWhereConceptInList(jetbrains.mps.smodel.SNode,java.lang.String[],boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getChildren(jetbrains.mps.smodel.SNode):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getModel(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SModel");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]isInstanceOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeOperations.isInstanceOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getNextSibling(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSibling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getPrevSibling(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getPrevSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getPrevSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getNextSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getNextSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getAllSiblings((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SNodeOperations.getAllSiblings(jetbrains.mps.smodel.SNode,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeOperations.insertNewNextSiblingChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNewPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeOperations.insertNewPrevSiblingChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertNextSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.insertNextSiblingChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]insertPrevSiblingChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.insertPrevSiblingChild(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeOperations.replaceWithNewChild(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]replaceWithAnother((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.replaceWithAnother(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]deleteNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.deleteNode(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]hasRole((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SNodeOperations.hasRole(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getConceptDeclaration(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SNodeOperations).([StaticMethodDeclaration]getIndexInParent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SNodeOperations.getIndexInParent(jetbrains.mps.smodel.SNode):int");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isExactly((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SConceptOperations.isExactly(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isAssignableFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SConceptOperations.isAssignableFrom(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSuperConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SConceptOperations.isSuperConceptOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]isSubConceptOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SConceptOperations.isSubConceptOf(jetbrains.mps.smodel.SNode,java.lang.String):boolean");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SConceptOperations.findConceptDeclaration(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getDirectSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SConceptOperations.getDirectSuperConcepts(jetbrains.mps.smodel.SNode):java.util.List");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSuperConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SConceptOperations.getAllSuperConcepts(jetbrains.mps.smodel.SNode):java.util.List");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getConceptHierarchy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SConceptOperations.getConceptHierarchy(jetbrains.mps.smodel.SNode):java.util.List");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]getAllSubConcepts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SConceptOperations.getAllSubConcepts(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]findConceptInstances((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SConceptOperations.findConceptInstances(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]SConceptOperations).([StaticMethodDeclaration]createNewNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SConceptOperations.createNewNode(java.lang.String,jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SLinkOperations.getTarget(jetbrains.mps.smodel.SNode,java.lang.String,boolean):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setTarget((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SLinkOperations.setTarget(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]setNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SLinkOperations.setNewChild(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SLinkOperations.getTargets(jetbrains.mps.smodel.SNode,java.lang.String,boolean):java.util.List");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addNewChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SLinkOperations.addNewChild(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SLinkOperations.addChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))","~SLinkOperations.addAll(jetbrains.mps.smodel.SNode,java.lang.String,java.util.List):void");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]insertChildFirst((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SLinkOperations.insertChildFirst(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]deleteChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SLinkOperations.deleteChild(jetbrains.mps.smodel.SNode,java.lang.String):void");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getCount((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SLinkOperations.getCount(jetbrains.mps.smodel.SNode,java.lang.String):int");
  idByEriMap.put("static method ([Classifier]SLinkOperations).([StaticMethodDeclaration]getConceptLinkTargets((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SLinkOperations.getConceptLinkTargets(jetbrains.mps.smodel.SNode,java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]PropertyPlaceholderConfigurer).([InstanceMethodDeclaration]setSearchSystemEnvironment((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~PropertyPlaceholderConfigurer.setSearchSystemEnvironment(boolean):void");
  idByEriMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]setReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReferenceAntiquotation])))","~ReferenceAntiquotation_AnnotationLink.setReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String,jetbrains.mps.quotation.structure.ReferenceAntiquotation):void");
  idByEriMap.put("static method ([Classifier]ReferenceAntiquotation_AnnotationLink).([StaticMethodDeclaration]getReferenceAntiquotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BaseConcept]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ReferenceAntiquotation_AnnotationLink.getReferenceAntiquotation(jetbrains.mps.core.structure.BaseConcept,java.lang.String):jetbrains.mps.quotation.structure.ReferenceAntiquotation");
  idByEriMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]marshall((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~MarshallUtil.marshall(java.lang.Object):java.lang.String");
  idByEriMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeOrModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MarshallUtil.getNodeOrModel(java.lang.String):java.lang.Object");
  idByEriMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getNodeId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MarshallUtil.getNodeId(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]MarshallUtil).([StaticMethodDeclaration]getModelUID((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~MarshallUtil.getModelUID(java.lang.String):java.lang.String");
  idByEriMap.put("constructor [Classifier]ChooseRefactoringInputDataDialog[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ILoggableRefactoring]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ActionEventData]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [IChooseComponent]>]))","~ChooseRefactoringInputDataDialog.<init>(jetbrains.mps.refactoring.framework.ILoggableRefactoring,jetbrains.mps.ide.action.ActionEventData,java.util.List)");
  idByEriMap.put("method ([Classifier]ChooseRefactoringInputDataDialog).([InstanceMethodDeclaration]getResult())","~ChooseRefactoringInputDataDialog.getResult():java.util.Map");
  idByEriMap.put("constructor [Classifier]TransientStoreSessionListenerImpl[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]))","~TransientStoreSessionListenerImpl.<init>(jetbrains.mps.businessRules.runtime.RuleEngine)");
  idByEriMap.put("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp])))","~RegexpProcessor.toString(jetbrains.mps.regexp.structure.Regexp):java.lang.String");
  idByEriMap.put("static method ([Classifier]RegexpProcessor).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Regexp]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [MatchParensRegexp]>])))","~RegexpProcessor.toString(jetbrains.mps.regexp.structure.Regexp,java.util.List):java.lang.String");
  idByEriMap.put("method ([Classifier]SecurityNavigatorImpl).([InstanceMethodDeclaration]setOnLoginAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Runnable])))","~SecurityNavigatorImpl.setOnLoginAction(java.lang.Runnable):void");
  idByEriMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]size())","~NodeList.size():int");
  idByEriMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]elementAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~NodeList.elementAt(int):org.htmlparser.Node");
  idByEriMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))","~ISearchScope.getNodes(jetbrains.mps.util.Condition):java.util.List");
  idByEriMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getAdapters((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ISearchScope.getAdapters(java.lang.Class):java.util.List");
  idByEriMap.put("method ([Classifier]ISearchScope).([InstanceMethodDeclaration]getNodes())","~ISearchScope.getNodes():java.util.List");
  idByEriMap.put("constructor [Classifier]IsInstanceCondition[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))","~IsInstanceCondition.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration)");
  idByEriMap.put("constructor [Classifier]SubnodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~SubnodesSearchScope.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]SubnodesSearchScope).([InstanceMethodDeclaration]getNodes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Condition, <jetbrains.mps.baseLanguage.types.classifier [SNode]>])))","~SubnodesSearchScope.getNodes(jetbrains.mps.util.Condition):java.util.List");
  idByEriMap.put("constructor [Classifier]ConceptAndSuperConceptsScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]))","~ConceptAndSuperConceptsScope.<init>(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration)");
  idByEriMap.put("method ([Classifier]AbstractSearchScope).([InstanceMethodDeclaration]getNodes())","~AbstractSearchScope.getNodes():java.util.List");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelSearchUtil.createModelAndImportedModelsScope(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.search.ISearchScope");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]createModelAndImportedModelsScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~SModelSearchUtil.createModelAndImportedModelsScope(jetbrains.mps.smodel.SModel,boolean,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.search.ISearchScope");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))","~SModelSearchUtil.getLinkDeclarations(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getAggregationLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))","~SModelSearchUtil.getAggregationLinkDeclarationsExcludingOverridden(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getReferenceLinkDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ConceptDeclaration])))","~SModelSearchUtil.getReferenceLinkDeclarations(jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]getPropertyDeclarationsExcludingOverridden((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration])))","~SModelSearchUtil.getPropertyDeclarations(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration):java.util.List");
  idByEriMap.put("static method ([Classifier]SModelSearchUtil_new).([StaticMethodDeclaration]findPropertyDeclaration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModelSearchUtil.findPropertyDeclaration(jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String):jetbrains.mps.bootstrap.structureLanguage.structure.PropertyDeclaration");
  idByEriMap.put("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List]))","~SimpleSearchScope.<init>(java.util.List)");
  idByEriMap.put("constructor [Classifier]SimpleSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~SimpleSearchScope.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("constructor [Classifier]ModelNodesSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]))","~ModelNodesSearchScope.<init>(jetbrains.mps.smodel.SModel)");
  idByEriMap.put("constructor [Classifier]EmptySearchScope[ConstructorDeclaration] ()","~EmptySearchScope.<init>()");
  idByEriMap.put("method ([Classifier]InputStream).([InstanceMethodDeclaration]read())","~InputStream.read():int");
  idByEriMap.put("constructor [Classifier]Command[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Command.<init>(java.lang.String,java.lang.String)");
  idByEriMap.put("constructor [Classifier]State[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~State.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]StateMachine[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [State]))","~StateMachine.<init>(gothic.model.State)");
  idByEriMap.put("constructor [Classifier]Event[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Event.<init>(java.lang.String,java.lang.String)");
  idByEriMap.put("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showMessageDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int):void");
  idByEriMap.put("static method ([Classifier]JOptionPane).([StaticMethodDeclaration]showConfirmDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Component]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int):int");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedConcept_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.extendedConcept_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]extendedInterfaceConcept_generatedInterface((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.extendedInterfaceConcept_generatedInterface(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SubtypingManager.isSubtype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]isSubtype((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SubtypingManager.isSubtype(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,boolean,boolean):boolean");
  idByEriMap.put("method ([Classifier]SubtypingManager).([InstanceMethodDeclaration]collectImmediateSupertypes((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~SubtypingManager.collectImmediateSupertypes(jetbrains.mps.smodel.SNode):jetbrains.mps.helgins.inference.util.StructuralNodeSet");
  idByEriMap.put("method ([Classifier]EquationManager).([InstanceMethodDeclaration]getRepresentator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~EquationManager.getRepresentator(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getEquationManager())","~TypeChecker.getEquationManager():jetbrains.mps.helgins.inference.EquationManager");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getSubtypingManager())","~TypeChecker.getSubtypingManager():jetbrains.mps.helgins.inference.SubtypingManager");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeSupport())","~TypeChecker.getRuntimeSupport():jetbrains.mps.bootstrap.helgins.runtime.RuntimeSupport");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]reportTypeError((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~TypeChecker.reportTypeError(jetbrains.mps.smodel.SNode,java.lang.String,java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]hackTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TypeChecker.hackTypeOf(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getTypeOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TypeChecker.getTypeOf(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]TypeChecker).([InstanceMethodDeclaration]getRuntimeTypesModel())","~TypeChecker.getRuntimeTypesModel():jetbrains.mps.smodel.SModel");
  idByEriMap.put("static method ([Classifier]TypeChecker).([StaticMethodDeclaration]getInstance())","~TypeChecker.getInstance():jetbrains.mps.helgins.inference.TypeChecker");
  idByEriMap.put("static method ([Classifier]PathUtil).([StaticMethodDeclaration]showSelectPathDialog((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode])))","~PathUtil.showSelectPathDialog(jetbrains.mps.nodeEditor.EditorContext,java.lang.String,jetbrains.mps.projectLanguage.editor.SelectionMode):void");
  idByEriMap.put("constructor [Classifier]SelectPathButton[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SelectionMode]))","~SelectPathButton.<init>(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.projectLanguage.editor.SelectionMode)");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getProjectPluginClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getProjectPluginClassNames(jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelRootManagerClassNames((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getModelRootManagerClassNames(jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getNamePrefixesForNewModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getNamePrefixesForNewModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.getLanguageNamesToAddToModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getLanguageNamesToAddToModelEngagedOnGenerationLanguages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.getLanguageNamesToAddToModelEngagedOnGenerationLanguages(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getModelUIDsToImportToModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.getModelUIDsToImportToModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getGeneratorsToReferFromGenerator((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.getGeneratorsToReferFromGenerator(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTemplatesModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [GeneratorDescriptor])))","~_QueriesUtil.getTemplatesModelDescriptor(java.lang.String,jetbrains.mps.projectLanguage.structure.GeneratorDescriptor):jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getCanonicalPath((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~_QueriesUtil.getCanonicalPath(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageStructureModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageStructureModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleStructureModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleStructureModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageEditorModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageEditorModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleEditorModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleEditorModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageConstraintsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageConstraintsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleConstraintsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleConstraintsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageActionsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageActionsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleActionsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleActionsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageScriptsModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageScriptsModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleScriptsModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleScriptsModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageDocumentationModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageDocumentationModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleDocumentationModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleDocumentationModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageHelginsTypesystemModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageHelginsTypesystemModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleHelginsTypesystemModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleHelginsTypesystemModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]createLanguageAccessoryModelModel((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.createLanguageAccessoryModelModel(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):jetbrains.mps.projectLanguage.structure.Model");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getVisibleAccessoryModels((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~_QueriesUtil.getVisibleAccessoryModels(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("constructor [Classifier]ServletFileUpload[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [FileItemFactory]))","~ServletFileUpload.<init>(org.apache.commons.fileupload.FileItemFactory)");
  idByEriMap.put("method ([Classifier]ServletFileUpload).([InstanceMethodDeclaration]parseRequest((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))","~ServletFileUpload.parseRequest(javax.servlet.http.HttpServletRequest):java.util.List");
  idByEriMap.put("static method ([Classifier]ServletFileUpload).([StaticMethodDeclaration]isMultipartContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [HttpServletRequest])))","~ServletFileUpload.isMultipartContent(javax.servlet.http.HttpServletRequest):boolean");
  idByEriMap.put("constructor [Classifier]Stack[ConstructorDeclaration] ()","~Stack.<init>()");
  idByEriMap.put("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]rssDate())","~PredefinedFormats.rssDate():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]PredefinedFormats).([StaticMethodDeclaration]defaultFormat())","~PredefinedFormats.defaultFormat():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]CompareType).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~CompareType.valueOf(java.lang.String):jetbrains.mps.baseLanguage.ext.dates.CompareType");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))","~DateTimeOperations.print(java.lang.Long,org.joda.time.format.DateTimeFormatter):java.lang.String");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]print((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale])))","~DateTimeOperations.print(java.lang.Long,org.joda.time.format.DateTimeFormatter,java.util.Locale):java.lang.String");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTime])))","~DateTimeOperations.convert(org.joda.time.DateTime):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]convert((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Calendar])))","~DateTimeOperations.convert(java.util.Calendar):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]compare((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CompareType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))","~DateTimeOperations.compare(java.lang.Long,jetbrains.mps.baseLanguage.ext.dates.CompareType,java.lang.Long,org.joda.time.DateTimeFieldType):boolean");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundFloor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))","~DateTimeOperations.roundFloor(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]roundCeiling((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))","~DateTimeOperations.roundCeiling(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]round((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))","~DateTimeOperations.round(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType])))","~DateTimeOperations.get(java.lang.Long,org.joda.time.DateTimeFieldType):java.lang.Integer");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]with((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFieldType]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~DateTimeOperations.with(java.lang.Long,org.joda.time.DateTimeFieldType,int):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]plus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))","~DateTimeOperations.plus(java.lang.Long,org.joda.time.Period):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))","~DateTimeOperations.minus(java.lang.Long,org.joda.time.Period):java.lang.Long");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]minus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))","~DateTimeOperations.minus(java.lang.Long,java.lang.Long,org.joda.time.PeriodType):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]absMinus((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Long]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PeriodType])))","~DateTimeOperations.absMinus(java.lang.Long,java.lang.Long,org.joda.time.PeriodType):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))","~DateTimeOperations.equals(org.joda.time.Period,org.joda.time.Period):boolean");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]less((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Period])))","~DateTimeOperations.less(org.joda.time.Period,org.joda.time.Period):boolean");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~DateTimeOperations.isNull(long):boolean");
  idByEriMap.put("static method ([Classifier]DateTimeOperations).([StaticMethodDeclaration]isNotNull((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~DateTimeOperations.isNotNull(long):boolean");
  idByEriMap.put("method ([Classifier]InlineDateFormatter).([InstanceMethodDeclaration]createFormatter())","~InlineDateFormatter.createFormatter():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("constructor [Classifier]OffsetDateTimePrinter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [DurationFieldType]]))","~OffsetDateTimePrinter.<init>(org.joda.time.DurationFieldType[])");
  idByEriMap.put("constructor [Classifier]FixedLocaleDateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Locale]))","~FixedLocaleDateTimeFormatter.<init>(org.joda.time.format.DateTimeFormatter,java.util.Locale)");
  idByEriMap.put("constructor [Classifier]ClassConcept[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~ClassConcept.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]LocalVariableDeclarationStatement).([InstanceMethodDeclaration]getLocalVariableDeclaration())","~LocalVariableDeclarationStatement.getLocalVariableDeclaration():jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
  idByEriMap.put("method ([Classifier]StatementList).([InstanceMethodDeclaration]getStatements())","~StatementList.getStatements():java.util.List");
  idByEriMap.put("method ([Classifier]Classifier).([InstanceMethodDeclaration]getMethods())","~Classifier.getMethods():java.util.List");
  idByEriMap.put("constructor [Classifier]Interface[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~Interface.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getBody())","~BaseMethodDeclaration.getBody():jetbrains.mps.baseLanguage.structure.StatementList");
  idByEriMap.put("method ([Classifier]BaseMethodDeclaration).([InstanceMethodDeclaration]getParameters())","~BaseMethodDeclaration.getParameters():java.util.List");
  idByEriMap.put("method ([Classifier]RulesSelectorImpl).([InstanceMethodDeclaration]setRulePackages((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [RulePackage]>])))","~RulesSelectorImpl.setRulePackages(java.util.List):void");
  idByEriMap.put("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRuleEngine((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine])))","~RuleJobImpl.setRuleEngine(jetbrains.mps.businessRules.runtime.RuleEngine):void");
  idByEriMap.put("method ([Classifier]RuleJobImpl).([InstanceMethodDeclaration]setRule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Rule])))","~RuleJobImpl.setRule(jetbrains.mps.businessRules.runtime.Rule):void");
  idByEriMap.put("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]setRuleSelector((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RulesSelector])))","~RuleEngineImpl.setRuleSelector(jetbrains.mps.businessRules.runtime.RulesSelector):void");
  idByEriMap.put("method ([Classifier]RuleEngineImpl).([InstanceMethodDeclaration]close())","~RuleEngineImpl.close():void");
  idByEriMap.put("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]fieldsChanged((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))","~AbstractInstantWhenImpl.fieldsChanged(java.util.Set,java.lang.String[]):boolean");
  idByEriMap.put("method ([Classifier]AbstractInstantWhenImpl).([InstanceMethodDeclaration]thereAreChangesExcepting((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set, <jetbrains.mps.baseLanguage.types.classifier [String]>]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))","~AbstractInstantWhenImpl.thereAreChangesExcepting(java.util.Set,java.lang.String[]):boolean");
  idByEriMap.put("static method ([Classifier]CssReferentUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~CssReferentUtil.getSearchScope(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.search.ISearchScope");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ForEachVariableReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ForEachVariableReference]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_ForEachVariableReference(jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachVariableReference,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]MethodInvokingJobDetailFactoryBean).([InstanceMethodDeclaration]setConcurrent((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~MethodInvokingJobDetailFactoryBean.setConcurrent(boolean):void");
  idByEriMap.put("method ([Classifier]CronTriggerBean).([InstanceMethodDeclaration]setJobDetail((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobDetail])))","~CronTriggerBean.setJobDetail(org.quartz.JobDetail):void");
  idByEriMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setTriggers((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Trigger]])))","~SchedulerFactoryBean.setTriggers(org.quartz.Trigger[]):void");
  idByEriMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setStartupDelay((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~SchedulerFactoryBean.setStartupDelay(int):void");
  idByEriMap.put("method ([Classifier]SchedulerFactoryBean).([InstanceMethodDeclaration]setWaitForJobsToCompleteOnShutdown((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~SchedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(boolean):void");
  idByEriMap.put("method ([Classifier]SimpleMailMessage).([InstanceMethodDeclaration]setFrom((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SimpleMailMessage.setFrom(java.lang.String):void");
  idByEriMap.put("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatPathProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TomcatPathProvider])))","~TomcatManagerImpl.setTomcatPathProvider(jetbrains.mps.webr.webUnit.tomcat.TomcatPathProvider):void");
  idByEriMap.put("method ([Classifier]TomcatManagerImpl).([InstanceMethodDeclaration]setTomcatOutputHandlers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [TomcatOutputHandler]>])))","~TomcatManagerImpl.setTomcatOutputHandlers(java.util.List):void");
  idByEriMap.put("constructor [Classifier]ConceptDeclarationExtendedConceptSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~ConceptDeclarationExtendedConceptSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]ReferenceConceptLinkTargetSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~ReferenceConceptLinkTargetSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]BufferedImage[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ColorModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [WritableRaster]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Hashtable]))","~BufferedImage.<init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)");
  idByEriMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getColorModel())","~BufferedImage.getColorModel():java.awt.image.ColorModel");
  idByEriMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getWidth())","~BufferedImage.getWidth():int");
  idByEriMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]getHeight())","~BufferedImage.getHeight():int");
  idByEriMap.put("method ([Classifier]BufferedImage).([InstanceMethodDeclaration]createGraphics())","~BufferedImage.createGraphics():java.awt.Graphics2D");
  idByEriMap.put("method ([Classifier]ColorModel).([InstanceMethodDeclaration]createCompatibleWritableRaster((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~ColorModel.createCompatibleWritableRaster(int,int):java.awt.image.WritableRaster");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ConceptFunctionParm_to_MethodParameterReference_by_Alias((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_ConceptFunctionParm_to_MethodParameterReference_by_Alias(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toIdString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~RecordManager.toIdString(java.lang.Object):java.lang.String");
  idByEriMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]isRecordClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RecordManager.isRecordClassName(java.lang.String):boolean");
  idByEriMap.put("method ([Classifier]RecordManager).([InstanceMethodDeclaration]toRecord((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~RecordManager.toRecord(java.lang.String):java.lang.Object");
  idByEriMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]hasNext())","~Iterator.hasNext():boolean");
  idByEriMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]next())","~Iterator.next():java.lang.Object");
  idByEriMap.put("method ([Classifier]Iterator).([InstanceMethodDeclaration]remove())","~Iterator.remove():void");
  idByEriMap.put("static method ([Classifier]Arrays).([StaticMethodDeclaration]asList((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~Arrays.asList(java.lang.Object[]):java.util.List");
  idByEriMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~ArrayList.<init>(int)");
  idByEriMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ()","~ArrayList.<init>()");
  idByEriMap.put("constructor [Classifier]ArrayList[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))","~ArrayList.<init>(java.util.Collection)");
  idByEriMap.put("constructor [Classifier]Locale[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Locale.<init>(java.lang.String,java.lang.String,java.lang.String)");
  idByEriMap.put("constructor [Classifier]LinkedHashSet[ConstructorDeclaration] ()","~LinkedHashSet.<init>()");
  idByEriMap.put("constructor [Classifier]Stack[ConstructorDeclaration] ()","~Stack.<init>()");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]size())","~Set.size():int");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]isEmpty())","~Set.isEmpty():boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Set.contains(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]iterator())","~Set.iterator():java.util.Iterator");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Set.add(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Set.remove(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))","~Set.addAll(java.util.Collection):boolean");
  idByEriMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyList())","~Collections.emptyList():java.util.List");
  idByEriMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]emptyMap())","~Collections.emptyMap():java.util.Map");
  idByEriMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]enumeration((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~Collections.enumeration(java.util.Collection):java.util.Enumeration");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]size())","~List.size():int");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]isEmpty())","~List.isEmpty():boolean");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~List.contains(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]iterator())","~List.iterator():java.util.Iterator");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]toArray((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [Object]])))","~List.toArray(java.lang.Object[]):java.lang.Object[]");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~List.add(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))","~List.addAll(java.util.Collection):boolean");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~List.get(int):java.lang.Object");
  idByEriMap.put("method ([Classifier]List).([InstanceMethodDeclaration]indexOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~List.indexOf(java.lang.Object):int");
  idByEriMap.put("constructor [Classifier]Date[ConstructorDeclaration] ()","~Date.<init>()");
  idByEriMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))","~Date.<init>(long)");
  idByEriMap.put("constructor [Classifier]Date[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Date.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]HashMap[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.float/jetbrains.mps.baseLanguage.types.float))","~HashMap.<init>(int,float)");
  idByEriMap.put("constructor [Classifier]HashMap[ConstructorDeclaration] ()","~HashMap.<init>()");
  idByEriMap.put("method ([Classifier]HashMap).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~HashMap.get(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]HashMap).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~HashMap.put(java.lang.Object,java.lang.Object):java.lang.Object");
  idByEriMap.put("constructor [Classifier]LinkedList[ConstructorDeclaration] ()","~LinkedList.<init>()");
  idByEriMap.put("method ([Classifier]AbstractList).([InstanceMethodDeclaration]iterator())","~AbstractList.iterator():java.util.Iterator");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]containsKey((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Map.containsKey(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Map.get(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]put((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Map.put(java.lang.Object,java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]remove((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Map.remove(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]putAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <? extends jetbrains.mps.baseLanguage.types.any, ? extends jetbrains.mps.baseLanguage.types.any>])))","~Map.putAll(java.util.Map):void");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]keySet())","~Map.keySet():java.util.Set");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]values())","~Map.values():java.util.Collection");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]entrySet())","~Map.entrySet():java.util.Set");
  idByEriMap.put("constructor [Classifier]ListResourceBundle[ConstructorDeclaration] ()","~ListResourceBundle.<init>()");
  idByEriMap.put("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getKey())","~Map$Entry.getKey():java.lang.Object");
  idByEriMap.put("method ([Classifier]Map$Entry).([InstanceMethodDeclaration]getValue())","~Map$Entry.getValue():java.lang.Object");
  idByEriMap.put("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]contains((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~AbstractCollection.contains(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]AbstractCollection).([InstanceMethodDeclaration]addAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>])))","~AbstractCollection.addAll(java.util.Collection):boolean");
  idByEriMap.put("constructor [Classifier]HashSet[ConstructorDeclaration] ()","~HashSet.<init>()");
  idByEriMap.put("constructor [Classifier]HashSet[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection, <? extends jetbrains.mps.baseLanguage.types.any>]))","~HashSet.<init>(java.util.Collection)");
  idByEriMap.put("method ([Classifier]AbstractCellMenuComponent).([InstanceMethodDeclaration]createActions((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~AbstractCellMenuComponent.createActions(jetbrains.mps.nodeEditor.cellMenu.ICellContext,jetbrains.mps.nodeEditor.EditorContext):java.util.List");
  idByEriMap.put("method ([Classifier]JabberService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JabberService.send(java.lang.String[],java.lang.String):void");
  idByEriMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))","~JabberServiceImpl.setTaskExecutor(org.springframework.core.task.TaskExecutor):void");
  idByEriMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setHost((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JabberServiceImpl.setHost(java.lang.String):void");
  idByEriMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPort((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~JabberServiceImpl.setPort(int):void");
  idByEriMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setUser((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JabberServiceImpl.setUser(java.lang.String):void");
  idByEriMap.put("method ([Classifier]JabberServiceImpl).([InstanceMethodDeclaration]setPassword((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JabberServiceImpl.setPassword(java.lang.String):void");
  idByEriMap.put("method ([Classifier]MailingService).([InstanceMethodDeclaration]createMimeMessageHelper())","~MailingService.createMimeMessageHelper():org.springframework.mail.javamail.MimeMessageHelper");
  idByEriMap.put("method ([Classifier]MailingService).([InstanceMethodDeclaration]send((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [MimeMessageHelper]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Map, <jetbrains.mps.baseLanguage.types.classifier [String], jetbrains.mps.baseLanguage.types.classifier [String]>])))","~MailingService.send(org.springframework.mail.javamail.MimeMessageHelper,java.util.Map):void");
  idByEriMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setMailSender((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JavaMailSender])))","~MailingServiceImpl.setMailSender(org.springframework.mail.javamail.JavaMailSender):void");
  idByEriMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTemplateMessage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SimpleMailMessage])))","~MailingServiceImpl.setTemplateMessage(org.springframework.mail.SimpleMailMessage):void");
  idByEriMap.put("method ([Classifier]MailingServiceImpl).([InstanceMethodDeclaration]setTaskExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TaskExecutor])))","~MailingServiceImpl.setTaskExecutor(org.springframework.core.task.TaskExecutor):void");
  idByEriMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]alloc())","~StringBuilderSpinAllocator.alloc():java.lang.StringBuilder");
  idByEriMap.put("static method ([Classifier]StringBuilderSpinAllocator).([StaticMethodDeclaration]dispose((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [StringBuilder])))","~StringBuilderSpinAllocator.dispose(java.lang.StringBuilder):void");
  idByEriMap.put("method ([Classifier]IMatchingPattern).([InstanceMethodDeclaration]match((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~IMatchingPattern.match(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("constructor [Classifier]DefaultMatchingPattern[ConstructorDeclaration] ()","~DefaultMatchingPattern.<init>()");
  idByEriMap.put("constructor [Classifier]BasicCellContext[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]))","~BasicCellContext.<init>(jetbrains.mps.smodel.SNode)");
  idByEriMap.put("constructor [Classifier]CompositeSubstituteInfo[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ICellContext]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [ISubstituteInfoPart]]))","~CompositeSubstituteInfo.<init>(jetbrains.mps.nodeEditor.EditorContext,jetbrains.mps.nodeEditor.cellMenu.ICellContext,jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart[])");
  idByEriMap.put("static method ([Classifier]PeriodType).([StaticMethodDeclaration]minutes())","~PeriodType.minutes():org.joda.time.PeriodType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]millis())","~DurationFieldType.millis():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]seconds())","~DurationFieldType.seconds():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]minutes())","~DurationFieldType.minutes():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]hours())","~DurationFieldType.hours():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]halfdays())","~DurationFieldType.halfdays():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]days())","~DurationFieldType.days():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]weeks())","~DurationFieldType.weeks():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]months())","~DurationFieldType.months():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]years())","~DurationFieldType.years():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]centuries())","~DurationFieldType.centuries():org.joda.time.DurationFieldType");
  idByEriMap.put("static method ([Classifier]DurationFieldType).([StaticMethodDeclaration]eras())","~DurationFieldType.eras():org.joda.time.DurationFieldType");
  idByEriMap.put("constructor [Classifier]DateTime[ConstructorDeclaration] ()","~DateTime.<init>()");
  idByEriMap.put("constructor [Classifier]DateTime[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long))","~DateTime.<init>(long)");
  idByEriMap.put("constructor [Classifier]Period[ConstructorDeclaration] ()","~Period.<init>()");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]years((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.years(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]months((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.months(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]weeks((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.weeks(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]days((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.days(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]hours((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.hours(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]minutes((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.minutes(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]seconds((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.seconds(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]Period).([StaticMethodDeclaration]millis((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Period.millis(int):org.joda.time.Period");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]millisOfSecond())","~DateTimeFieldType.millisOfSecond():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]secondOfMinute())","~DateTimeFieldType.secondOfMinute():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]minuteOfHour())","~DateTimeFieldType.minuteOfHour():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfDay())","~DateTimeFieldType.hourOfDay():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfDay())","~DateTimeFieldType.clockhourOfDay():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]hourOfHalfday())","~DateTimeFieldType.hourOfHalfday():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]clockhourOfHalfday())","~DateTimeFieldType.clockhourOfHalfday():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfWeek())","~DateTimeFieldType.dayOfWeek():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfMonth())","~DateTimeFieldType.dayOfMonth():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]dayOfYear())","~DateTimeFieldType.dayOfYear():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]weekOfWeekyear())","~DateTimeFieldType.weekOfWeekyear():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]monthOfYear())","~DateTimeFieldType.monthOfYear():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfEra())","~DateTimeFieldType.yearOfEra():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]yearOfCentury())","~DateTimeFieldType.yearOfCentury():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]centuryOfEra())","~DateTimeFieldType.centuryOfEra():org.joda.time.DateTimeFieldType");
  idByEriMap.put("static method ([Classifier]DateTimeFieldType).([StaticMethodDeclaration]era())","~DateTimeFieldType.era():org.joda.time.DateTimeFieldType");
  idByEriMap.put("constructor [Classifier]NullAdaptiveProgressMonitor[ConstructorDeclaration] ()","~NullAdaptiveProgressMonitor.<init>()");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertyGetter])))","~ModelConstraintsManager.registerNodePropertyGetter(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodePropertyGetter):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertyGetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ModelConstraintsManager.unRegisterNodePropertyGetter(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodePropertySetter])))","~ModelConstraintsManager.registerNodePropertySetter(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodePropertySetter):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodePropertySetter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ModelConstraintsManager.unRegisterNodePropertySetter(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSetEventHandler])))","~ModelConstraintsManager.registerNodeReferentSetEventHandler(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSetEventHandler):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSetEventHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ModelConstraintsManager.unRegisterNodeReferentSetEventHandler(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider_Old])))","~ModelConstraintsManager.registerNodeReferentSearchScopeProvider(java.lang.String,java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider_Old):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeReferentSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ModelConstraintsManager.unRegisterNodeReferentSearchScopeProvider(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]registerNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [INodeReferentSearchScopeProvider_Old])))","~ModelConstraintsManager.registerNodeDefaultSearchScopeProvider(java.lang.String,jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider_Old):void");
  idByEriMap.put("method ([Classifier]ModelConstraintsManager).([InstanceMethodDeclaration]unRegisterNodeDefaultSearchScopeProvider((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ModelConstraintsManager.unRegisterNodeDefaultSearchScopeProvider(java.lang.String):void");
  idByEriMap.put("method ([Classifier]SearchScopeStatus).([InstanceMethodDeclaration]getSearchScope())","~SearchScopeStatus.getSearchScope():jetbrains.mps.smodel.search.ISearchScope");
  idByEriMap.put("static method ([Classifier]ModelConstraintsUtil).([StaticMethodDeclaration]getSearchScope((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AbstractConceptDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~ModelConstraintsUtil.getSearchScope(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration,java.lang.String,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.constraints.SearchScopeStatus");
  idByEriMap.put("constructor [Classifier]Job[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessor]))","~Job.<init>(com.jetbrains.teamsys.core.execution.JobProcessor)");
  idByEriMap.put("method ([Classifier]Job).([InstanceMethodDeclaration]getProcessor())","~Job.getProcessor():com.jetbrains.teamsys.core.execution.JobProcessor");
  idByEriMap.put("constructor [Classifier]DecoratorJob[ConstructorDeclaration] ()","~DecoratorJob.<init>()");
  idByEriMap.put("method ([Classifier]DecoratorJob).([InstanceMethodDeclaration]executeDecorated())","~DecoratorJob.executeDecorated():void");
  idByEriMap.put("constructor [Classifier]JobProcessor[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~JobProcessor.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]start())","~JobProcessor.start():void");
  idByEriMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]waitUntilFinished())","~JobProcessor.waitUntilFinished():void");
  idByEriMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]queueFinish())","~JobProcessor.queueFinish():boolean");
  idByEriMap.put("method ([Classifier]JobProcessor).([InstanceMethodDeclaration]setExceptionHandler((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessorExceptionHandler])))","~JobProcessor.setExceptionHandler(com.jetbrains.teamsys.core.execution.JobProcessorExceptionHandler):void");
  idByEriMap.put("static method ([Classifier]EditorUtil).([StaticMethodDeclaration]createSelectIconButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorContext])))","~EditorUtil.createSelectIconButton(jetbrains.mps.smodel.SNode,jetbrains.mps.nodeEditor.EditorContext):javax.swing.JComponent");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getTextExpression((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~_QueriesUtil.getTextExpression(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]Entity).([InstanceMethodDeclaration]getType())","~Entity.getType():String");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getInvocationContext())","~GenerationSessionContext.getInvocationContext():jetbrains.mps.smodel.IOperationContext");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~GenerationSessionContext.putTransientObject(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getTransientObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~GenerationSessionContext.getTransientObject(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]putSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~GenerationSessionContext.putStepObject(java.lang.Object,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]getSessionObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~GenerationSessionContext.getStepObject(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]GenerationSessionContext).([InstanceMethodDeclaration]createUniqueName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~GenerationSessionContext.createUniqueName(java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JavaNameUtil.fqClassName(jetbrains.mps.smodel.SModel,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]JavaNameUtil).([StaticMethodDeclaration]fqClassName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JavaNameUtil.fqClassName(jetbrains.mps.smodel.SNode,java.lang.String):java.lang.String");
  idByEriMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findMethod((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))","~JavaModelUtil_new.findMethod(jetbrains.mps.baseLanguage.structure.Classifier,java.lang.String,java.lang.String[]):jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
  idByEriMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]createType((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Classifier]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel])))","~JavaModelUtil_new.createType(jetbrains.mps.baseLanguage.structure.Classifier,jetbrains.mps.smodel.SModel):jetbrains.mps.baseLanguage.structure.ClassifierType");
  idByEriMap.put("static method ([Classifier]JavaModelUtil_new).([StaticMethodDeclaration]findClassifier((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class])))","~JavaModelUtil_new.findClassifier(java.lang.Class):jetbrains.mps.baseLanguage.structure.Classifier");
  idByEriMap.put("method ([Classifier]EditorsPane).([InstanceMethodDeclaration]getCurrentEditor())","~EditorsPane.getCurrentEditor():jetbrains.mps.ide.IEditor");
  idByEriMap.put("method ([Classifier]IEditor).([InstanceMethodDeclaration]getEditorContext())","~IEditor.getEditorContext():jetbrains.mps.nodeEditor.EditorContext");
  idByEriMap.put("method ([Classifier]BaseDialog).([InstanceMethodDeclaration]showDialog())","~BaseDialog.showDialog():void");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getParent())","~Node.getParent():org.htmlparser.Node");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getChildren())","~Node.getChildren():org.htmlparser.util.NodeList");
  idByEriMap.put("method ([Classifier]Tag).([InstanceMethodDeclaration]getTagName())","~Tag.getTagName():java.lang.String");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doAction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.doAction(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.checkTemplate(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkLayout((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.checkLayout(java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]checkInputField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~BaseWebTestCase.checkInputField(java.lang.String,java.lang.Object):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setTextInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.setTextInput(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setSelectInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.setSelectInput(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]setCheckboxInput((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~BaseWebTestCase.setCheckboxInput(java.lang.String,boolean):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickButton((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.doClickButton(java.lang.String,java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseWebTestCase).([InstanceMethodDeclaration]doClickLink((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseWebTestCase.doClickLink(java.lang.String,java.lang.String):void");
  idByEriMap.put("constructor [Classifier]FreemarkerResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~FreemarkerResponse.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]ResourceResponse[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~ResourceResponse.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]SAXBuilder[ConstructorDeclaration] ()","~SAXBuilder.<init>()");
  idByEriMap.put("method ([Classifier]SAXBuilder).([InstanceMethodDeclaration]build((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader])))","~SAXBuilder.build(java.io.Reader):org.jdom.Document");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_EnclosingContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.find_EnclosingContextOwner_ClosureContext_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.find_ContextOwner_ClosureContext_generatedClass(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_ContextOwner_ClosureContext_generatedClass_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.find_ContextOwner_ClosureContext_generatedClass_constructor(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]find_Closure_generatedClosureAdapter_constructor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.find_Closure_generatedClosureAdapter_constructor(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_ClosureParameterReference((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_ClosureParameterReference(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_MethodParm_CopyOfParm((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_MethodParm_CopyOfParm(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableDeclStmt_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_VariableDeclStmt_Variable_ClosureContext_generatedField(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]resolve_VariableReference_Variable_ClosureContext_generatedField((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.resolve_VariableReference_Variable_ClosureContext_generatedField(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_ifMethod_ParmsUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.getList_ContextOwner_ifMethod_ParmsUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getList_ContextOwner_VariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.getList_ContextOwner_VariablesUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.util.List");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]getString_VariableDeclaration_nameInClosureContext((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.getString_VariableDeclaration_nameInClosureContext(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):java.lang.String");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_closureContextObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.create_closureContextObject(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]_QueriesUtil).([StaticMethodDeclaration]create_enclosingClassObject((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~_QueriesUtil.create_enclosingClassObject(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ClosuresUtil.isClosureContextOwner(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]findEnclosingClosureContextOwner((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~ClosuresUtil.findEnclosingClosureContextOwner(jetbrains.mps.smodel.SNode):jetbrains.mps.smodel.SNode");
  idByEriMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]isVariableUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [VariableDeclaration]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~ClosuresUtil.isVariableUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.baseLanguage.structure.VariableDeclaration,jetbrains.mps.generator.template.ITemplateGenerator):boolean");
  idByEriMap.put("static method ([Classifier]ClosuresUtil).([StaticMethodDeclaration]hasVariablesUsedInClosure((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplateGenerator])))","~ClosuresUtil.hasVariablesUsedInClosure(jetbrains.mps.smodel.SNode,jetbrains.mps.generator.template.ITemplateGenerator):boolean");
  idByEriMap.put("static method ([Classifier]Base64).([StaticMethodDeclaration]decodeBase64((jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, byte_])))","~Base64.decodeBase64(byte[]):byte[]");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canAddRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateLanguageUtil.canAddRootTemplateAnnotation(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]addRootTemplateAnnotation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateLanguageUtil.addRootTemplateAnnotation(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]isInsideTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateLanguageUtil.isInsideTemplateFragment(jetbrains.mps.smodel.SNode):boolean");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchTemplateFragment((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateLanguageUtil.switchTemplateFragment(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchNodeMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode])))","~TemplateLanguageUtil.switchNodeMacro(jetbrains.mps.smodel.SNode):void");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))","~TemplateLanguageUtil.canSwitchReferenceMacro(jetbrains.mps.nodeEditor.cells.EditorCell):boolean");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchReferenceMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))","~TemplateLanguageUtil.switchReferenceMacro(jetbrains.mps.nodeEditor.cells.EditorCell):void");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]canSwitchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell])))","~TemplateLanguageUtil.canSwitchPropertyMacro(jetbrains.mps.nodeEditor.cells.EditorCell):boolean");
  idByEriMap.put("static method ([Classifier]TemplateLanguageUtil).([StaticMethodDeclaration]switchPropertyMacro((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EditorCell]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~TemplateLanguageUtil.switchPropertyMacro(jetbrains.mps.nodeEditor.cells.EditorCell,jetbrains.mps.smodel.IScope):void");
  idByEriMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]group((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Matcher.group(int):java.lang.String");
  idByEriMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]matches())","~Matcher.matches():boolean");
  idByEriMap.put("method ([Classifier]Matcher).([InstanceMethodDeclaration]find())","~Matcher.find():boolean");
  idByEriMap.put("method ([Classifier]Pattern).([InstanceMethodDeclaration]matcher((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher");
  idByEriMap.put("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Pattern.compile(java.lang.String):java.util.regex.Pattern");
  idByEriMap.put("static method ([Classifier]Pattern).([StaticMethodDeclaration]compile((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Pattern.compile(java.lang.String,int):java.util.regex.Pattern");
  idByEriMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]findNodeOperationParameter((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~SModelLanguageUtil.findNodeOperationParameter(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation,java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getLinkTargetConceptForLinkOperation((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))","~SModelLanguageUtil.getLinkTargetConceptForLinkOperation(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
  idByEriMap.put("static method ([Classifier]SModelLanguageUtil).([StaticMethodDeclaration]getDatatypeFromLeft_SPropertyAccess((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNodeOperation])))","~SModelLanguageUtil.getDatatypeFromLeft_SPropertyAccess(jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation):jetbrains.mps.bootstrap.structureLanguage.structure.DataTypeDeclaration");
  idByEriMap.put("constructor [Classifier]ActionEventData[ConstructorDeclaration] ()","~ActionEventData.<init>()");
  idByEriMap.put("method ([Classifier]ActionEventData).([InstanceMethodDeclaration]getNode())","~ActionEventData.getNode():jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]ActionEventData).([InstanceMethodDeclaration]getScope())","~ActionEventData.getScope():jetbrains.mps.smodel.IScope");
  idByEriMap.put("method ([Classifier]ActionEventData).([InstanceMethodDeclaration]get((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class, <jetbrains.mps.baseLanguage.types.classifier [Object]>])))","~ActionEventData.get(java.lang.Class):java.lang.Object");
  idByEriMap.put("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesAsync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))","~RuleEngineUtil.processRulesAsync(jetbrains.mps.businessRules.runtime.RuleEngine,java.util.Set):void");
  idByEriMap.put("static method ([Classifier]RuleEngineUtil).([StaticMethodDeclaration]processRulesSync((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RuleEngine]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))","~RuleEngineUtil.processRulesSync(jetbrains.mps.businessRules.runtime.RuleEngine,java.util.Set):void");
  idByEriMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setMaxIterations((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~RuleEngine.setMaxIterations(int):void");
  idByEriMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setAsyncExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))","~RuleEngine.setAsyncExecutor(java.util.concurrent.Executor):void");
  idByEriMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]setExecutor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Executor])))","~RuleEngine.setExecutor(java.util.concurrent.Executor):void");
  idByEriMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]addIgnoreThread())","~RuleEngine.addIgnoreThread():void");
  idByEriMap.put("method ([Classifier]RuleEngine).([InstanceMethodDeclaration]removeIgnoreThread())","~RuleEngine.removeIgnoreThread():void");
  idByEriMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~WorkingMemory.assertFact(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]assertFacts((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Set])))","~WorkingMemory.assertFacts(java.util.Set):void");
  idByEriMap.put("method ([Classifier]WorkingMemory).([InstanceMethodDeclaration]retractFact((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~WorkingMemory.retractFact(java.lang.Object):void");
  idByEriMap.put("constructor [Classifier]DateTimeFormatterBuilder[ConstructorDeclaration] ()","~DateTimeFormatterBuilder.<init>()");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]toFormatter())","~DateTimeFormatterBuilder.toFormatter():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeFormatter])))","~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter):org.joda.time.format.DateTimeFormatterBuilder");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter])))","~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter):org.joda.time.format.DateTimeFormatterBuilder");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser])))","~DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):org.joda.time.format.DateTimeFormatterBuilder");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendLiteral((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~DateTimeFormatterBuilder.appendLiteral(java.lang.String):org.joda.time.format.DateTimeFormatterBuilder");
  idByEriMap.put("method ([Classifier]DateTimeFormatterBuilder).([InstanceMethodDeclaration]appendPattern((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~DateTimeFormatterBuilder.appendPattern(java.lang.String):org.joda.time.format.DateTimeFormatterBuilder");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDate())","~DateTimeFormat.shortDate():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortTime())","~DateTimeFormat.shortTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]shortDateTime())","~DateTimeFormat.shortDateTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDate())","~DateTimeFormat.mediumDate():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumTime())","~DateTimeFormat.mediumTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]mediumDateTime())","~DateTimeFormat.mediumDateTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDate())","~DateTimeFormat.longDate():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longTime())","~DateTimeFormat.longTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]longDateTime())","~DateTimeFormat.longDateTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDate())","~DateTimeFormat.fullDate():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullTime())","~DateTimeFormat.fullTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("static method ([Classifier]DateTimeFormat).([StaticMethodDeclaration]fullDateTime())","~DateTimeFormat.fullDateTime():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("constructor [Classifier]DateTimeFormatter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimePrinter]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [DateTimeParser]))","~DateTimeFormatter.<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)");
  idByEriMap.put("method ([Classifier]DateTimeFormatter).([InstanceMethodDeclaration]getPrinter())","~DateTimeFormatter.getPrinter():org.joda.time.format.DateTimePrinter");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getPubMedId())","~PubMedArticle.getPubMedId():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getDateCreated())","~PubMedArticle.getDateCreated():java.util.Date");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getCompletionDate())","~PubMedArticle.getCompletionDate():java.util.Date");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getTitle())","~PubMedArticle.getTitle():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getJournal())","~PubMedArticle.getJournal():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getAbstract())","~PubMedArticle.getAbstract():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getAuthors())","~PubMedArticle.getAuthors():java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [String]>])))","~EFetch.query(java.util.List):java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EFetch.query(java.lang.String,int):java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EFetch.query(java.lang.String):jetbrains.pubMedDB.ws.PubMedArticle");
  idByEriMap.put("static method ([Classifier]ISODateTimeFormat).([StaticMethodDeclaration]date())","~ISODateTimeFormat.date():org.joda.time.format.DateTimeFormatter");
  idByEriMap.put("method ([Classifier]DateTimeFormatter).([InstanceMethodDeclaration]parseDateTime((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~DateTimeFormatter.parseDateTime(java.lang.String):org.joda.time.DateTime");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getPubMedId())","~PubMedArticle.getPubMedId():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getDateCreated())","~PubMedArticle.getDateCreated():java.util.Date");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getCompletionDate())","~PubMedArticle.getCompletionDate():java.util.Date");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getTitle())","~PubMedArticle.getTitle():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getJournal())","~PubMedArticle.getJournal():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getAbstract())","~PubMedArticle.getAbstract():java.lang.String");
  idByEriMap.put("method ([Classifier]PubMedArticle).([InstanceMethodDeclaration]getAuthors())","~PubMedArticle.getAuthors():java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [String]>])))","~EFetch.query(java.util.List):java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~EFetch.query(java.lang.String,int):java.util.List");
  idByEriMap.put("static method ([Classifier]EFetch).([StaticMethodDeclaration]query((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EFetch.query(java.lang.String):jetbrains.pubMedDB.ws.PubMedArticle");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Job).([InstanceMethodDeclaration]queue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Priority])))","~Job.queue(com.jetbrains.teamsys.core.dataStructures.Priority):boolean");
  idByEriMap.put("method ([Classifier]Job).([InstanceMethodDeclaration]setProcessor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [JobProcessor])))","~Job.setProcessor(com.jetbrains.teamsys.core.execution.JobProcessor):void");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]retainAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))","~Set.retainAll(java.util.Collection):boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]removeAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))","~Set.removeAll(java.util.Collection):boolean");
  idByEriMap.put("method ([Classifier]Calendar).([InstanceMethodDeclaration]getTimeInMillis())","~Calendar.getTimeInMillis():long");
  idByEriMap.put("constructor [Classifier]Timer[ConstructorDeclaration] ()","~Timer.<init>()");
  idByEriMap.put("method ([Classifier]Timer).([InstanceMethodDeclaration]schedule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TimerTask]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Timer.schedule(java.util.TimerTask,long):void");
  idByEriMap.put("method ([Classifier]Timer).([InstanceMethodDeclaration]schedule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [TimerTask]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Timer.schedule(java.util.TimerTask,long,long):void");
  idByEriMap.put("method ([Classifier]Timer).([InstanceMethodDeclaration]cancel())","~Timer.cancel():void");
  idByEriMap.put("method ([Classifier]Map).([InstanceMethodDeclaration]clear())","~Map.clear():void");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():java.lang.Object");
  idByEriMap.put("constructor [Classifier]PrintWriter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Writer]))","~PrintWriter.<init>(java.io.Writer)");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():webr.xml.structure.BaseText");
  idByEriMap.put("method ([Classifier]AxisFault).([InstanceMethodDeclaration]getFaultString())","~AxisFault.getFaultString():java.lang.String");
  idByEriMap.put("method ([Classifier]Attribute).([InstanceMethodDeclaration]getValue())","~Attribute.getValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getAttribute(java.lang.String):org.jdom.Attribute");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getChildren((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getChildren(java.lang.String):java.util.List");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.setAttribute(java.lang.String,java.lang.String):org.jdom.Element");
  idByEriMap.put("method ([Classifier]RemoteProject).([InstanceMethodDeclaration]getDescription())","~RemoteProject.getDescription():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteProject).([InstanceMethodDeclaration]getKey())","~RemoteProject.getKey():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteProject).([InstanceMethodDeclaration]getLead())","~RemoteProject.getLead():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteProject).([InstanceMethodDeclaration]getPermissionScheme())","~RemoteProject.getPermissionScheme():jetbrains.charisma.jira.client.soap.RemotePermissionScheme");
  idByEriMap.put("method ([Classifier]AbstractRemoteEntity).([InstanceMethodDeclaration]getId())","~AbstractRemoteEntity.getId():java.lang.String");
  idByEriMap.put("constructor [Classifier]JiraSoapClient[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~JiraSoapClient.<init>(java.lang.String,java.lang.String,java.lang.String)");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]close())","~JiraSoapClient.close():void");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getUser((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JiraSoapClient.getUser(java.lang.String):jetbrains.charisma.jira.client.soap.RemoteUser");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getProjects())","~JiraSoapClient.getProjects():jetbrains.charisma.jira.client.soap.RemoteProject[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getComponents((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~JiraSoapClient.getComponents(java.lang.String):jetbrains.charisma.jira.client.soap.RemoteComponent[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getIssues((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteProject]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~JiraSoapClient.getIssues(jetbrains.charisma.jira.client.soap.RemoteProject,long):java.lang.Iterable");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getComments((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteIssue])))","~JiraSoapClient.getComments(jetbrains.charisma.jira.client.soap.RemoteIssue):jetbrains.charisma.jira.client.soap.RemoteComment[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getAttachments((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteIssue])))","~JiraSoapClient.getAttachments(jetbrains.charisma.jira.client.soap.RemoteIssue):jetbrains.charisma.jira.client.soap.RemoteAttachment[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getAttachmentContent((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteAttachment])))","~JiraSoapClient.getAttachmentContent(jetbrains.charisma.jira.client.soap.RemoteAttachment):java.io.InputStream");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getProjectUsers((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteProject]), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~JiraSoapClient.getProjectUsers(jetbrains.charisma.jira.client.soap.RemoteProject,long):jetbrains.charisma.jira.client.soap.RemoteUser[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getIssueTypes())","~JiraSoapClient.getIssueTypes():jetbrains.charisma.jira.client.soap.RemoteIssueType[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getPriorities())","~JiraSoapClient.getPriorities():jetbrains.charisma.jira.client.soap.RemotePriority[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getStatuses())","~JiraSoapClient.getStatuses():jetbrains.charisma.jira.client.soap.RemoteStatus[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getResolutions())","~JiraSoapClient.getResolutions():jetbrains.charisma.jira.client.soap.RemoteResolution[]");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getRemoteProjectByKey((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~JiraSoapClient.getRemoteProjectByKey(java.lang.String,boolean,boolean):jetbrains.charisma.jira.client.soap.RemoteProject");
  idByEriMap.put("method ([Classifier]JiraSoapClient).([InstanceMethodDeclaration]getIssueLinkTypes())","~JiraSoapClient.getIssueLinkTypes():jetbrains.charisma.jira.client.soap.RemoteIssueLinkType[]");
  idByEriMap.put("method ([Classifier]RemoteEntity).([InstanceMethodDeclaration]getName())","~RemoteEntity.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]RemotePermissionMapping).([InstanceMethodDeclaration]getPermission())","~RemotePermissionMapping.getPermission():jetbrains.charisma.jira.client.soap.RemotePermission");
  idByEriMap.put("method ([Classifier]RemotePermissionMapping).([InstanceMethodDeclaration]getRemoteEntities())","~RemotePermissionMapping.getRemoteEntities():jetbrains.charisma.jira.client.soap.RemoteEntity[]");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getAssignee())","~RemoteIssue.getAssignee():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getComponents())","~RemoteIssue.getComponents():jetbrains.charisma.jira.client.soap.RemoteComponent[]");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getCreated())","~RemoteIssue.getCreated():java.util.Calendar");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getDescription())","~RemoteIssue.getDescription():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getKey())","~RemoteIssue.getKey():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getPriority())","~RemoteIssue.getPriority():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getReporter())","~RemoteIssue.getReporter():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getResolution())","~RemoteIssue.getResolution():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getStatus())","~RemoteIssue.getStatus():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getSummary())","~RemoteIssue.getSummary():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getType())","~RemoteIssue.getType():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssue).([InstanceMethodDeclaration]getUpdated())","~RemoteIssue.getUpdated():java.util.Calendar");
  idByEriMap.put("method ([Classifier]CharismasoapserviceSoapBindingStub).([InstanceMethodDeclaration]getOutwardLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteIssue])))","~CharismasoapserviceSoapBindingStub.getOutwardLinks(jetbrains.charisma.jira.client.soap.RemoteIssue):jetbrains.charisma.jira.client.soap.RemoteIssueLink[]");
  idByEriMap.put("method ([Classifier]CharismasoapserviceSoapBindingStub).([InstanceMethodDeclaration]getInwardLinks((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [RemoteIssue])))","~CharismasoapserviceSoapBindingStub.getInwardLinks(jetbrains.charisma.jira.client.soap.RemoteIssue):jetbrains.charisma.jira.client.soap.RemoteIssueLink[]");
  idByEriMap.put("method ([Classifier]RemotePermission).([InstanceMethodDeclaration]getName())","~RemotePermission.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]AbstractNamedRemoteEntity).([InstanceMethodDeclaration]getName())","~AbstractNamedRemoteEntity.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteComment).([InstanceMethodDeclaration]getAuthor())","~RemoteComment.getAuthor():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteComment).([InstanceMethodDeclaration]getBody())","~RemoteComment.getBody():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteComment).([InstanceMethodDeclaration]getCreated())","~RemoteComment.getCreated():java.util.Calendar");
  idByEriMap.put("method ([Classifier]RemoteAttachment).([InstanceMethodDeclaration]getFilename())","~RemoteAttachment.getFilename():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteAttachment).([InstanceMethodDeclaration]getMimetype())","~RemoteAttachment.getMimetype():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssueLink).([InstanceMethodDeclaration]getDestinationId())","~RemoteIssueLink.getDestinationId():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssueLink).([InstanceMethodDeclaration]getLinkTypeId())","~RemoteIssueLink.getLinkTypeId():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssueLink).([InstanceMethodDeclaration]getSourceId())","~RemoteIssueLink.getSourceId():java.lang.String");
  idByEriMap.put("method ([Classifier]RemotePermissionScheme).([InstanceMethodDeclaration]getPermissionMappings())","~RemotePermissionScheme.getPermissionMappings():jetbrains.charisma.jira.client.soap.RemotePermissionMapping[]");
  idByEriMap.put("method ([Classifier]RemoteIssueLinkType).([InstanceMethodDeclaration]getInward())","~RemoteIssueLinkType.getInward():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssueLinkType).([InstanceMethodDeclaration]getName())","~RemoteIssueLinkType.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteIssueLinkType).([InstanceMethodDeclaration]getOutward())","~RemoteIssueLinkType.getOutward():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteUser).([InstanceMethodDeclaration]getEmail())","~RemoteUser.getEmail():java.lang.String");
  idByEriMap.put("method ([Classifier]RemoteUser).([InstanceMethodDeclaration]getFullname())","~RemoteUser.getFullname():java.lang.String");
  idByEriMap.put("method ([Classifier]JiraSoapAsyncProcessor).([InstanceMethodDeclaration]isInProcess())","~JiraSoapAsyncProcessor.isInProcess():boolean");
  idByEriMap.put("static method ([Classifier]JiraSoapAsyncProcessor).([StaticMethodDeclaration]getInstance())","~JiraSoapAsyncProcessor.getInstance():jetbrains.charisma.jira.client.soap.JiraSoapAsyncProcessor");
  idByEriMap.put("method ([Classifier]Timer).([InstanceMethodDeclaration]cancel())","~Timer.cancel():void");
  idByEriMap.put("constructor [Classifier]Timer[ConstructorDeclaration] ()","~Timer.<init>()");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getAttribute(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]setAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.setAttribute(java.lang.String,java.lang.String):void");
  idByEriMap.put("constructor [Classifier]BigDecimal[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~BigDecimal.<init>(int)");
  idByEriMap.put("method ([Classifier]BigDecimal).([InstanceMethodDeclaration]compareTo((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [BigDecimal])))","~BigDecimal.compareTo(java.math.BigDecimal):int");
  idByEriMap.put("static method ([Classifier]WQParser).([StaticMethodDeclaration]getItems((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.array/jetbrains.mps.baseLanguage.types.array [-1, jetbrains.mps.baseLanguage.types.classifier [String]])))","~WQParser.getItems(java.lang.String,java.lang.String[]):java.util.List");
  idByEriMap.put("method ([Classifier]BaseDateTime).([InstanceMethodDeclaration]getMillis())","~BaseDateTime.getMillis():long");
  idByEriMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]random())","~Math.random():double");
  idByEriMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]abs((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Math.abs(int):int");
  idByEriMap.put("static method ([Classifier]Math).([StaticMethodDeclaration]min((jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long), (jetbrains.mps.baseLanguage.types.long/jetbrains.mps.baseLanguage.types.long)))","~Math.min(long,long):long");
  idByEriMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]getCause())","~Throwable.getCause():java.lang.Throwable");
  idByEriMap.put("method ([Classifier]Throwable).([InstanceMethodDeclaration]printStackTrace((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PrintWriter])))","~Throwable.printStackTrace(java.io.PrintWriter):void");
  idByEriMap.put("method ([Classifier]Runtime).([InstanceMethodDeclaration]availableProcessors())","~Runtime.availableProcessors():int");
  idByEriMap.put("method ([Classifier]Runtime).([InstanceMethodDeclaration]freeMemory())","~Runtime.freeMemory():long");
  idByEriMap.put("method ([Classifier]Runtime).([InstanceMethodDeclaration]totalMemory())","~Runtime.totalMemory():long");
  idByEriMap.put("method ([Classifier]Runtime).([InstanceMethodDeclaration]maxMemory())","~Runtime.maxMemory():long");
  idByEriMap.put("static method ([Classifier]Runtime).([StaticMethodDeclaration]getRuntime())","~Runtime.getRuntime():java.lang.Runtime");
  idByEriMap.put("method ([Classifier]AbstractStringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~AbstractStringBuilder.append(java.lang.Object):java.lang.AbstractStringBuilder");
  idByEriMap.put("method ([Classifier]AbstractStringBuilder).([InstanceMethodDeclaration]append((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [CharSequence])))","~AbstractStringBuilder.append(java.lang.CharSequence):java.lang.AbstractStringBuilder");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]trim())","~String.trim():java.lang.String");
  idByEriMap.put("static method ([Classifier]System).([StaticMethodDeclaration]gc())","~System.gc():void");
  idByEriMap.put("constructor [Classifier]NullPointerException[ConstructorDeclaration] ()","~NullPointerException.<init>()");
  idByEriMap.put("constructor [Classifier]Integer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~Integer.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]Integer).([InstanceMethodDeclaration]intValue())","~Integer.intValue():int");
  idByEriMap.put("method ([Classifier]Integer).([InstanceMethodDeclaration]equals((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Integer.equals(java.lang.Object):boolean");
  idByEriMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]toBinaryString((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Integer.toBinaryString(int):java.lang.String");
  idByEriMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Integer.toString(int):java.lang.String");
  idByEriMap.put("static method ([Classifier]Integer).([StaticMethodDeclaration]valueOf((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Integer.valueOf(java.lang.String):java.lang.Integer");
  idByEriMap.put("method ([Classifier]TextIndexManager).([InstanceMethodDeclaration]pendingDocs())","~TextIndexManager.pendingDocs():int");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getAttribute(java.lang.String):javax.swing.text.html.parser.AttributeList");
  idByEriMap.put("method ([Classifier]BerkeleyDbEntityStore).([InstanceMethodDeclaration]refactorComments())","~BerkeleyDbEntityStore.refactorComments():void");
  idByEriMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]setReadonly((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~EntityStore.setReadonly(boolean):void");
  idByEriMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]isReadonly())","~EntityStore.isReadonly():boolean");
  idByEriMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]save((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityStore.save(java.lang.String):void");
  idByEriMap.put("method ([Classifier]EntityStore).([InstanceMethodDeclaration]load((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~EntityStore.load(java.lang.String):void");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]getEntity((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EntityId])))","~StoreSession.getEntity(com.jetbrains.teamsys.database.EntityId):com.jetbrains.teamsys.database.Entity");
  idByEriMap.put("method ([Classifier]StoreSession).([InstanceMethodDeclaration]toEntityId((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~StoreSession.toEntityId(java.lang.String):com.jetbrains.teamsys.database.EntityId");
  idByEriMap.put("method ([Classifier]CharSequence).([InstanceMethodDeclaration]charAt((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~CharSequence.charAt(int):char");
  idByEriMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]clone())","~Object.clone():java.lang.Object");
  idByEriMap.put("method ([Classifier]Object).([InstanceMethodDeclaration]notifyAll())","~Object.notifyAll():void");
  idByEriMap.put("method ([Classifier]String).([InstanceMethodDeclaration]hashCode())","~String.hashCode():int");
  idByEriMap.put("static method ([Classifier]Assert).([StaticMethodDeclaration]assertEquals((jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~Assert.assertEquals(boolean,boolean):void");
  idByEriMap.put("method ([Classifier]Stack).([InstanceMethodDeclaration]push((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Stack.push(java.lang.Object):java.lang.Object");
  idByEriMap.put("method ([Classifier]Stack).([InstanceMethodDeclaration]pop())","~Stack.pop():java.lang.Object");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]containsAll((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Collection])))","~Set.containsAll(java.util.Collection):boolean");
  idByEriMap.put("method ([Classifier]Set).([InstanceMethodDeclaration]clear())","~Set.clear():void");
  idByEriMap.put("static method ([Classifier]Collections).([StaticMethodDeclaration]singletonList((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object])))","~Collections.singletonList(java.lang.Object):java.util.List");
  idByEriMap.put("static method ([Classifier]Calendar).([StaticMethodDeclaration]getInstance())","~Calendar.getInstance():java.util.Calendar");
  idByEriMap.put("method ([Classifier]Collection).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Collection.add(java.lang.Object):boolean");
  idByEriMap.put("method ([Classifier]Vector).([InstanceMethodDeclaration]isEmpty())","~Vector.isEmpty():boolean");
  idByEriMap.put("static method ([Classifier]WQParser).([StaticMethodDeclaration]parse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~WQParser.parse(java.lang.String):org.htmlparser.Node");
  idByEriMap.put("method ([Classifier]HttpSession).([InstanceMethodDeclaration]getId())","~HttpSession.getId():java.lang.String");
  idByEriMap.put("method ([Classifier]DocumentBuilderFactory).([InstanceMethodDeclaration]newDocumentBuilder())","~DocumentBuilderFactory.newDocumentBuilder():javax.xml.parsers.DocumentBuilder");
  idByEriMap.put("static method ([Classifier]DocumentBuilderFactory).([StaticMethodDeclaration]newInstance())","~DocumentBuilderFactory.newInstance():javax.xml.parsers.DocumentBuilderFactory");
  idByEriMap.put("method ([Classifier]DocumentBuilder).([InstanceMethodDeclaration]parse((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~DocumentBuilder.parse(java.lang.String):org.w3c.dom.Document");
  idByEriMap.put("method ([Classifier]DocumentBuilder).([InstanceMethodDeclaration]newDocument())","~DocumentBuilder.newDocument():org.w3c.dom.Document");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.removeChild(sun.org.mozilla.javascript.internal.Node):void");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.replaceChild(sun.org.mozilla.javascript.internal.Node,sun.org.mozilla.javascript.internal.Node):void");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]addLanguage((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModel.addLanguage(java.lang.String):void");
  idByEriMap.put("method ([Classifier]DateTime).([InstanceMethodDeclaration]minusDays((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~DateTime.minusDays(int):org.joda.time.DateTime");
  idByEriMap.put("method ([Classifier]DateTime).([InstanceMethodDeclaration]toLocalDate())","~DateTime.toLocalDate():org.joda.time.LocalDate");
  idByEriMap.put("method ([Classifier]LocalDate).([InstanceMethodDeclaration]toDateTimeAtMidnight())","~LocalDate.toDateTimeAtMidnight():org.joda.time.DateTime");
  idByEriMap.put("method ([Classifier]TransformerFactory).([InstanceMethodDeclaration]newTransformer())","~TransformerFactory.newTransformer():javax.xml.transform.Transformer");
  idByEriMap.put("static method ([Classifier]TransformerFactory).([StaticMethodDeclaration]newInstance())","~TransformerFactory.newInstance():javax.xml.transform.TransformerFactory");
  idByEriMap.put("method ([Classifier]Transformer).([InstanceMethodDeclaration]transform((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Source]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Result])))","~Transformer.transform(javax.xml.transform.Source,javax.xml.transform.Result):void");
  idByEriMap.put("method ([Classifier]Attr).([InstanceMethodDeclaration]getName())","~Attr.getName():java.lang.String");
  idByEriMap.put("method ([Classifier]Attr).([InstanceMethodDeclaration]getValue())","~Attr.getValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Attr).([InstanceMethodDeclaration]setValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Attr.setValue(java.lang.String):void");
  idByEriMap.put("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]setNamedItem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~NamedNodeMap.setNamedItem(org.w3c.dom.Node):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]removeNamedItem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~NamedNodeMap.removeNamedItem(java.lang.String):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]item((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~NamedNodeMap.item(int):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]NamedNodeMap).([InstanceMethodDeclaration]getLength())","~NamedNodeMap.getLength():int");
  idByEriMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]createElement((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Document.createElement(java.lang.String):org.w3c.dom.Element");
  idByEriMap.put("method ([Classifier]Document).([InstanceMethodDeclaration]createAttribute((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Document.createAttribute(java.lang.String):org.w3c.dom.Attr");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getNodeName())","~Node.getNodeName():java.lang.String");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getNodeValue())","~Node.getNodeValue():java.lang.String");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getParentNode())","~Node.getParentNode():org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getChildNodes())","~Node.getChildNodes():org.w3c.dom.NodeList");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]getAttributes())","~Node.getAttributes():org.w3c.dom.NamedNodeMap");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]insertBefore((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]replaceChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]removeChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.removeChild(org.w3c.dom.Node):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]appendChild((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Node])))","~Node.appendChild(org.w3c.dom.Node):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]item((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~NodeList.item(int):org.w3c.dom.Node");
  idByEriMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]getLength())","~NodeList.getLength():int");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getTagName())","~Element.getTagName():java.lang.String");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]setAttributeNode((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Attr])))","~Element.setAttributeNode(org.w3c.dom.Attr):org.w3c.dom.Attr");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]getElementsByTagName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.getElementsByTagName(java.lang.String):org.w3c.dom.NodeList");
  idByEriMap.put("method ([Classifier]NodeList).([InstanceMethodDeclaration]toHtml())","~NodeList.toHtml():java.lang.String");
  idByEriMap.put("static method ([Classifier]QueriesUtil).([StaticMethodDeclaration]findMatchingTemplates((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope])))","~QueriesUtil.findMatchingTemplates(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope):java.util.List");
  idByEriMap.put("method ([Classifier]ITemplateGenerator).([InstanceMethodDeclaration]findNodeBuilderForSource((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplateGenerator.findNodeBuilderForSource(jetbrains.mps.smodel.SNode,java.lang.String):jetbrains.mps.generator.template.INodeBuilder");
  idByEriMap.put("method ([Classifier]AbstractMaker).([InstanceMethodDeclaration]createTransformation((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~AbstractMaker.createTransformation(transform.util.INodeFactories):transform.util.ITransformation");
  idByEriMap.put("method ([Classifier]AbstractMaker).([InstanceMethodDeclaration]registerMakerTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplate, <any_, any_, any_>])))","~AbstractMaker.registerMakerTemplate(transform.util.ITemplate):void");
  idByEriMap.put("method ([Classifier]IZeroTransformation).([InstanceMethodDeclaration]make())","~IZeroTransformation.make():java.lang.Iterable");
  idByEriMap.put("method ([Classifier]AbstractTemplates).([InstanceMethodDeclaration]createTransformation((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~AbstractTemplates.createTransformation(transform.util.INodeFactories):transform.util.ITransformation");
  idByEriMap.put("method ([Classifier]AbstractTemplates).([InstanceMethodDeclaration]registerTemplate((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ITemplate, <any_, any_, any_>])))","~AbstractTemplates.registerTemplate(transform.util.ITemplate):void");
  idByEriMap.put("method ([Classifier]ITemplates).([InstanceMethodDeclaration]selectorByName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ITemplates.selectorByName(java.lang.String):transform.util.ITemplateSelector");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]output((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~ITransformation.output(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]appendChild((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~ITransformation.appendChild(java.lang.Object):void");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]addContent((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IContentClosure, <any_, any_, any_>])))","~ITransformation.addContent(java.lang.Object,transform.util.IContentClosure):void");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]applyTemplates((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Iterable, <any_>])))","~ITransformation.applyTemplates(java.lang.Iterable):java.lang.Iterable");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getContext())","~ITransformation.getContext():java.lang.Object");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getNodeFactories())","~ITransformation.getNodeFactories():transform.util.INodeFactories");
  idByEriMap.put("method ([Classifier]ITransformation).([InstanceMethodDeclaration]getTemplates())","~ITransformation.getTemplates():transform.util.ITemplates");
  idByEriMap.put("static method ([Classifier]XMLAssert).([StaticMethodDeclaration]assertXMLEqual((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Diff]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean)))","~XMLAssert.assertXMLEqual(org.custommonkey.xmlunit.Diff,boolean):void");
  idByEriMap.put("method ([Classifier]Node).([InstanceMethodDeclaration]toHtml())","~Node.toHtml():java.lang.String");
  idByEriMap.put("method ([Classifier]AbstractDateTime).([InstanceMethodDeclaration]toString((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~AbstractDateTime.toString(java.lang.String):java.lang.String");
  idByEriMap.put("method ([Classifier]File).([InstanceMethodDeclaration]getPath())","~File.getPath():java.lang.String");
  idByEriMap.put("static method ([Classifier]UrlUtil).([StaticMethodDeclaration]getGlobalBaseUrl())","~UrlUtil.getGlobalBaseUrl():java.lang.String");
  idByEriMap.put("static method ([Classifier]BaseParser).([StaticMethodDeclaration]pushTreeListBack((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LexemStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [AbstractNode]>])))","~BaseParser.pushTreeListBack(jetbrains.parserGenerator.lexer.LexemStream,java.util.List):void");
  idByEriMap.put("static method ([Classifier]BaseParser).([StaticMethodDeclaration]readTerm((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LexemStream]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseParser.readTerm(jetbrains.parserGenerator.lexer.LexemStream,java.lang.String):jetbrains.parserGenerator.parser.tree.AbstractNode");
  idByEriMap.put("constructor [Classifier]InvalidInputException[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~InvalidInputException.<init>(java.lang.String)");
  idByEriMap.put("method ([Classifier]LexemStream).([InstanceMethodDeclaration]nextLexem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LexerState])))","~LexemStream.nextLexem(jetbrains.parserGenerator.lexer.LexerState):jetbrains.parserGenerator.lexer.Lexem");
  idByEriMap.put("constructor [Classifier]BaseLexer[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Reader]))","~BaseLexer.<init>(java.io.Reader)");
  idByEriMap.put("method ([Classifier]BaseLexer).([InstanceMethodDeclaration]addLexem((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~BaseLexer.addLexem(java.lang.String,boolean,java.lang.String):void");
  idByEriMap.put("method ([Classifier]BaseLexer).([InstanceMethodDeclaration]nextLexemExt((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [LexerState])))","~BaseLexer.nextLexemExt(jetbrains.parserGenerator.lexer.LexerState):jetbrains.parserGenerator.lexer.Lexem");
  idByEriMap.put("method ([Classifier]Stack).([InstanceMethodDeclaration]peek())","~Stack.peek():java.lang.Object");
  idByEriMap.put("method ([Classifier]Vector).([InstanceMethodDeclaration]add((jetbrains.mps.baseLanguage.types.any/jetbrains.mps.baseLanguage.types.any)))","~Vector.add(java.lang.Object):boolean");
  idByEriMap.put("constructor [Classifier]Node[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [List, <jetbrains.mps.baseLanguage.types.classifier [AbstractNode]>]))","~Node.<init>(java.lang.String,java.util.List)");
  idByEriMap.put("constructor [Classifier]TBuilderContext[ConstructorDeclaration] ()","~TBuilderContext.<init>()");
  idByEriMap.put("method ([Classifier]Element).([InstanceMethodDeclaration]setText((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~Element.setText(java.lang.String):org.jdom.Element");
  idByEriMap.put("constructor [Classifier]MultiplyOperation[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Double]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Double]>]))","~MultiplyOperation.<init>(jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]DoubleConstant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double))","~DoubleConstant.<init>(double)");
  idByEriMap.put("constructor [Classifier]SModelUID[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~SModelUID.<init>(java.lang.String,java.lang.String)");
  idByEriMap.put("method ([Classifier]SModel).([InstanceMethodDeclaration]getRootByName((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~SModel.getRootByName(java.lang.String):jetbrains.mps.smodel.SNode");
  idByEriMap.put("method ([Classifier]SModelRepository).([InstanceMethodDeclaration]getModelDescriptor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModelUID])))","~SModelRepository.getModelDescriptor(jetbrains.mps.smodel.SModelUID):jetbrains.mps.smodel.SModelDescriptor");
  idByEriMap.put("static method ([Classifier]SModelRepository).([StaticMethodDeclaration]getInstance())","~SModelRepository.getInstance():jetbrains.mps.smodel.SModelRepository");
  idByEriMap.put("constructor [Classifier]Quantity[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Unit]))","~Quantity.<init>(double,mf.Unit)");
  idByEriMap.put("constructor [Classifier]MfDate[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int))","~MfDate.<init>(int,int,int)");
  idByEriMap.put("constructor [Classifier]IfFunction[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Boolean]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <any_>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <any_>]))","~IfFunction.<init>(jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]ServiceAgreement[ConstructorDeclaration] ()","~ServiceAgreement.<init>()");
  idByEriMap.put("method ([Classifier]ServiceAgreement).([InstanceMethodDeclaration]registerValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ServiceAgreement.registerValue(java.lang.String):void");
  idByEriMap.put("method ([Classifier]ServiceAgreement).([InstanceMethodDeclaration]addPostingRule((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [EventType]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [PostingRule]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [MfDate])))","~ServiceAgreement.addPostingRule(postingrules.EventType,postingrules.PostingRule,mf.MfDate):void");
  idByEriMap.put("method ([Classifier]ServiceAgreement).([InstanceMethodDeclaration]setValue((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Object]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [MfDate])))","~ServiceAgreement.setValue(java.lang.String,java.lang.Object,mf.MfDate):void");
  idByEriMap.put("method ([Classifier]AgreementRegistry).([InstanceMethodDeclaration]register((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ServiceAgreement])))","~AgreementRegistry.register(java.lang.String,postingrules.ServiceAgreement):void");
  idByEriMap.put("constructor [Classifier]MoneyAddOperation[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Money]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Money]>]))","~MoneyAddOperation.<init>(jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]UsageDouble[ConstructorDeclaration] ()","~UsageDouble.<init>()");
  idByEriMap.put("constructor [Classifier]UsageQuantity[ConstructorDeclaration] ()","~UsageQuantity.<init>()");
  idByEriMap.put("constructor [Classifier]PostingRule_Formula[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [AccountType]), (jetbrains.mps.baseLanguage.types.boolean/jetbrains.mps.baseLanguage.types.boolean), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Money]>]))","~PostingRule_Formula.<init>(postingrules.AccountType,boolean,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]ValueQuantity[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~ValueQuantity.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]FeeMoney[ConstructorDeclaration] ()","~FeeMoney.<init>()");
  idByEriMap.put("constructor [Classifier]MoneyMultiplyOperation[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Money]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Double]>]))","~MoneyMultiplyOperation.<init>(jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]MoneyAdapter[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <jetbrains.mps.baseLanguage.types.classifier [Double]>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Currency]))","~MoneyAdapter.<init>(jetbrains.mps.formulaLanguage.api.Function,mf.Currency)");
  idByEriMap.put("constructor [Classifier]ValueDouble[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~ValueDouble.<init>(java.lang.String)");
  idByEriMap.put("constructor [Classifier]QuantityGreaterThanOperation[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <any_>]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Function, <any_>]))","~QuantityGreaterThanOperation.<init>(jetbrains.mps.formulaLanguage.api.Function,jetbrains.mps.formulaLanguage.api.Function)");
  idByEriMap.put("constructor [Classifier]QuantityConstant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Unit]))","~QuantityConstant.<init>(double,mf.Unit)");
  idByEriMap.put("constructor [Classifier]MoneyConstant[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.double/jetbrains.mps.baseLanguage.types.double), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Currency]))","~MoneyConstant.<init>(double,mf.Currency)");
  idByEriMap.put("constructor [Classifier]ReaderStrategy[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Class]))","~ReaderStrategy.<init>(java.lang.String,java.lang.Class)");
  idByEriMap.put("method ([Classifier]ReaderStrategy).([InstanceMethodDeclaration]AddFieldExtractor((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String])))","~ReaderStrategy.AddFieldExtractor(int,int,java.lang.String):void");
  idByEriMap.put("method ([Classifier]Reader).([InstanceMethodDeclaration]AddStrategy((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [ReaderStrategy])))","~Reader.AddStrategy(reader.ReaderStrategy):void");
  idByEriMap.put("method ([Classifier]AtomInMolecula).([InstanceMethodDeclaration]getBonds())","~AtomInMolecula.getBonds():java.util.List");
  idByEriMap.put("method ([Classifier]Atom).([InstanceMethodDeclaration]getElement())","~Atom.getElement():jetbrains.chemistry.formulae.structure.Element");
  idByEriMap.put("method ([Classifier]Bond).([InstanceMethodDeclaration]setArity((jetbrains.mps.baseLanguage.types.int/jetbrains.mps.baseLanguage.types.int)))","~Bond.setArity(int):void");
  idByEriMap.put("method ([Classifier]Bond).([InstanceMethodDeclaration]getBondTarget())","~Bond.getBondTarget():jetbrains.chemistry.formulae.structure.AtomInMolecula");
  idByEriMap.put("method ([Classifier]Bond).([InstanceMethodDeclaration]getPeer())","~Bond.getPeer():jetbrains.chemistry.formulae.structure.Bond");
  idByEriMap.put("method ([Classifier]Bond).([InstanceMethodDeclaration]setPeer((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [Bond])))","~Bond.setPeer(jetbrains.chemistry.formulae.structure.Bond):void");
  idByEriMap.put("method ([Classifier]KCompound).([InstanceMethodDeclaration]getAtoms())","~KCompound.getAtoms():java.util.List");
  idByEriMap.put("method ([Classifier]KCompound).([InstanceMethodDeclaration]getCharge())","~KCompound.getCharge():int");
  idByEriMap.put("method ([Classifier]AtomInFormula).([InstanceMethodDeclaration]getAtom())","~AtomInFormula.getAtom():jetbrains.chemistry.formulae.structure.Atom");
  idByEriMap.put("method ([Classifier]AtomInFormula).([InstanceMethodDeclaration]getCount())","~AtomInFormula.getCount():int");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]collectObjects((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~Queries.collectObjects(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]collectVariables((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~Queries.collectVariables(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]collectPredicates((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~Queries.collectPredicates(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]collectTerms((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext])))","~Queries.collectTerms(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IOperationContext):java.util.List");
  idByEriMap.put("static method ([Classifier]Queries).([StaticMethodDeclaration]createClassNameCellProviderFor((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IOperationContext]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KClassProperty])))","~Queries.createClassNameCellProviderFor(jetbrains.mps.smodel.IOperationContext,jetbrains.mps.smodel.SNode,jetbrains.knowledge.structure.KClassProperty):jetbrains.mps.nodeEditor.AbstractCellProvider");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]descirbeClass((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KClass])))","~DescriptionUtil.descirbeClass(jetbrains.knowledge.structure.KClass):java.lang.String");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]describeProperty((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KClassProperty])))","~DescriptionUtil.describeProperty(jetbrains.knowledge.structure.KClassProperty):java.lang.String");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]describeMaxCardinalityResriction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KMaxCardinalityRestriction])))","~DescriptionUtil.describeMaxCardinalityResriction(jetbrains.knowledge.structure.KMaxCardinalityRestriction):java.lang.String");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]describeMinCardinalityRestriction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KMinCardinalityRestriction])))","~DescriptionUtil.describeMinCardinalityRestriction(jetbrains.knowledge.structure.KMinCardinalityRestriction):java.lang.String");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]describeSpecializesRestriction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KSpecializesRestriction])))","~DescriptionUtil.describeSpecializesRestriction(jetbrains.knowledge.structure.KSpecializesRestriction):java.lang.String");
  idByEriMap.put("static method ([Classifier]DescriptionUtil).([StaticMethodDeclaration]describeSameAsRestriction((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [KSameAsRestriction])))","~DescriptionUtil.describeSameAsRestriction(jetbrains.knowledge.structure.KSameAsRestriction):java.lang.String");
  idByEriMap.put("constructor [Classifier]KAssertionPredicateSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KAssertionPredicateSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KGenericParameterSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KGenericParameterSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KObjectReferenceObjectSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KObjectReferenceObjectSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KClassPropertySearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KClassPropertySearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KClassEventSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KClassEventSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KClassReferenceDeclarationSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KClassReferenceDeclarationSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("constructor [Classifier]KClassFluentSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~KClassFluentSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("method ([Classifier]NamedConcept).([InstanceMethodDeclaration]getName())","~NamedConcept.getName():java.lang.String");
  idByEriMap.put("constructor [Classifier]FormulaVarDeclSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SNode]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]))","~FormulaVarDeclSearchScope.<init>(jetbrains.mps.smodel.SNode,jetbrains.mps.smodel.IScope)");
  idByEriMap.put("method ([Classifier]BaseAdapter).([InstanceMethodDeclaration]delete())","~BaseAdapter.delete():void");
  idByEriMap.put("constructor [Classifier]ChemicalKClassSearchScope[ConstructorDeclaration] ((jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [SModel]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [IScope]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]), (jetbrains.mps.baseLanguage.types.classifier/jetbrains.mps.baseLanguage.types.classifier [String]))","~ChemicalKClassSearchScope.<init>(jetbrains.mps.smodel.SModel,jetbrains.mps.smodel.IScope,java.lang.String,java.lang.String)");
}
