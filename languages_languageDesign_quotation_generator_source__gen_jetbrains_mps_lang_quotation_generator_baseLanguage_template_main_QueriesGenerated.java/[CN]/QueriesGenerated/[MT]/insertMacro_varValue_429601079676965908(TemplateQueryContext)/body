{
  List<SNode> result=new ArrayList<SNode>();
  if (SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x4bb51009d20a4a9dL,0x4bb51009d20a4a9fL,"modelToCreate")) != null) {
    ListSequence.fromList(result).addElement(SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x4bb51009d20a4a9dL,0x4bb51009d20a4a9fL,"modelToCreate")));
  }
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(NodeBuilderNode_Behavior.call_getExternalExpressions_1006429225401327586(SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x4bb51009d20a4a9dL,0x4bb51009d20a4a9eL,"quotedNode")))));
  final Map<SNode,Integer> index=MapSequence.fromMap(new HashMap<SNode,Integer>());
  final Wrappers._int i=new Wrappers._int(0);
  ListSequence.fromList(result).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      MapSequence.fromMap(index).put(it,i.value++);
    }
  }
);
  return MultiTuple.<List<SNode>,Map<SNode,Integer>>from(result,index);
}
