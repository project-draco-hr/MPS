{
  this.kind=kind;
  this.classifier=classifier;
  this.extendedClassifiers=extendedClassifiers;
  nameToMethods=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode node : ListSequence.fromList(SNodeOperations.getChildren(classifier)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    }
  }
)) {
    if (MapSequence.fromMap(nameToMethods).containsKey(SPropertyOperations.getString(node,"name"))) {
      ListSequence.fromList(MapSequence.fromMap(nameToMethods).get(SPropertyOperations.getString(node,"name"))).addElement(node);
    }
 else {
      MapSequence.fromMap(nameToMethods).put(SPropertyOperations.getString(node,"name"),ListSequence.fromListAndArray(new ArrayList(),node));
    }
  }
}
