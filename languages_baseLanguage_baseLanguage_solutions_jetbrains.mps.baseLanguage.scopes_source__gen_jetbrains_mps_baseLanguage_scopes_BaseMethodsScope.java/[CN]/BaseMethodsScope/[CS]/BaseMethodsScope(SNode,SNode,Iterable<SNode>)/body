{
  if (Sequence.fromIterable(extendedClassifiers).any(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (it == null);
    }
  }
)) {
    throw new IllegalArgumentException("One of extended classifiers is null. Kind: " + NameUtil.nodeFQName(kind) + "; classifier: "+ classifier+ "; extendedClassifiers: "+ extendedClassifiers);
  }
  this.kind=kind;
  this.classifier=classifier;
  this.extendedClassifiers=extendedClassifiers;
  nameToMethods=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode node : ListSequence.fromList(SNodeOperations.getChildren(classifier)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    }
  }
)) {
    String name=SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
    if (name != null) {
      if (MapSequence.fromMap(nameToMethods).containsKey(name)) {
        ListSequence.fromList(MapSequence.fromMap(nameToMethods).get(name)).addElement(node);
      }
 else {
        MapSequence.fromMap(nameToMethods).put(name,ListSequence.fromListAndArray(new ArrayList(),node));
      }
    }
  }
}
