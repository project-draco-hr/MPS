{
  if (allMethods != null) {
    return Sequence.fromIterable(Sequence.fromArray(allMethods)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return prefix == null || SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")).startsWith(prefix);
      }
    }
).toListSequence();
  }
  List<SNode> result=ListSequence.fromList(new ArrayList());
  Set<String> overridenSignatures=SetSequence.fromSet(new HashSet<String>());
  for (  String name : MapSequence.fromMap(nameToMethods).keySet()) {
    if (prefix == null || name.startsWith(prefix)) {
      Iterable<SNode> methods=MapSequence.fromMap(nameToMethods).get(name);
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(methods));
      SetSequence.fromSet(overridenSignatures).addSequence(Sequence.fromIterable(methods).select(new ISelector<SNode,String>(){
        public String select(        SNode it){
          return getSignatureForOverriding(it,classifier);
        }
      }
));
    }
  }
  Map<String,Set<SNode>> groups=MapSequence.fromMap(new HashMap<String,Set<SNode>>());
  for (  SNode extendedClassifier : Sequence.fromIterable(extendedClassifiers)) {
    for (    SNode method : Sequence.fromIterable(BehaviorReflection.invokeVirtual(Scope.class,extendedClassifier,"virtual_getVisibleMembers_8083692786967356611",new Object[]{classifier,kind}).getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,SNodeOperations.asSConcept(kind));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
)) {
      String signature=getSignatureForOverriding(method,classifier);
      if (!(SetSequence.fromSet(overridenSignatures).contains(signature))) {
        if (MapSequence.fromMap(groups).containsKey(signature)) {
          SetSequence.fromSet(MapSequence.fromMap(groups).get(signature)).addElement(method);
        }
 else {
          MapSequence.fromMap(groups).put(signature,SetSequence.fromSetAndArray(new HashSet<SNode>(),method));
        }
      }
    }
  }
  for (  IMapping<String,Set<SNode>> group : MapSequence.fromMap(groups)) {
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(getMethodsFromGroup(group.value())));
  }
  if (prefix == null) {
    allMethods=ListSequence.fromList(result).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
).toGenericArray(SNode.class);
  }
  return result;
}
