{
  List<SNode> result=ListSequence.fromList(new ArrayList());
  Set<String> overridenSignatures=SetSequence.fromSet(new HashSet());
  for (  List<SNode> methods : Sequence.fromIterable(MapSequence.fromMap(nameToMethods).values())) {
    ListSequence.fromList(result).addSequence(ListSequence.fromList(methods));
    SetSequence.fromSet(overridenSignatures).addSequence(ListSequence.fromList(methods).select(new ISelector<SNode,String>(){
      public String select(      SNode it){
        return getSignatureForOverriding(it,classifier);
      }
    }
));
  }
  Map<String,List<SNode>> groups=MapSequence.fromMap(new HashMap<String,List<SNode>>());
  for (  SNode extendedClassifier : Sequence.fromIterable(extendedClassifiers)) {
    for (    SNode method : ListSequence.fromList(((Scope)BehaviorManager.getInstance().invoke(Object.class,extendedClassifier,"virtual_getVisibleMembers_8083692786967356611",new Class[]{SNode.class,SNode.class,SNode.class},classifier,kind)).getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
      }
    }
)) {
      if (!(SetSequence.fromSet(overridenSignatures).contains(getSignatureForOverriding(method,extendedClassifier)))) {
        if (MapSequence.fromMap(groups).containsKey(SPropertyOperations.getString(method,"name"))) {
          ListSequence.fromList(MapSequence.fromMap(groups).get(SPropertyOperations.getString(method,"name"))).addElement(method);
        }
 else {
          MapSequence.fromMap(groups).put(SPropertyOperations.getString(method,"name"),ListSequence.fromListAndArray(new ArrayList<SNode>(),method));
        }
      }
    }
  }
  for (  IMapping<String,List<SNode>> group : MapSequence.fromMap(groups)) {
    if ((int)ListSequence.fromList(group.value()).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(SNodeOperations.getParent(it),"jetbrains.mps.baseLanguage.structure.Classifier");
      }
    }
).distinct().count() == 1) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(group.value()));
    }
  }
  return result;
}
