{
  if (ApplicationManager.getApplication().isDisposed()) {
    return;
  }
  List<SModelEvent> events=new ArrayList<SModelEvent>();
synchronized (EVENTS_LOCK) {
    events.addAll(myLastEvents);
    myLastEvents.clear();
  }
  Set<BaseEditorChecker> checkers=new LinkedHashSet<BaseEditorChecker>();
  Set<BaseEditorChecker> checkersToRemove=new LinkedHashSet<BaseEditorChecker>();
synchronized (CHECKERS_LOCK) {
    if (!EditorSettings.getInstance().isPowerSaveMode() || myForceUpdateInPowerSaveModeFlag) {
      checkers.addAll(myCheckers);
      myForceUpdateInPowerSaveModeFlag=false;
    }
    checkersToRemove.addAll(myCheckersToRemove);
    myCheckersToRemove.clear();
  }
  final List<EditorComponent> allEditorComponents=getAllEditorComponents();
  runUpdateMessagesAction(new Runnable(){
    @Override public void run(){
      if (EditorSettings.getInstance().isPowerSaveMode()) {
        myCheckedOnceEditors.clear();
        myInspectorMessagesCreated=false;
      }
 else {
        cleanupCheckedOnce(allEditorComponents);
      }
    }
  }
);
  if (checkers.isEmpty() && checkersToRemove.isEmpty()) {
    return;
  }
  boolean isUpdated=false;
  boolean inspectorIsUpdated=false;
  EditorComponent inspector=null;
  try {
    TypeChecker.getInstance().enableGlobalSubtypingCache();
    for (    EditorComponent editorComponent : allEditorComponents) {
      if (myStopThread) {
        return;
      }
      if (updateEditorComponent(editorComponent,events,checkers,checkersToRemove,false)) {
        isUpdated=true;
      }
    }
    if (myStopThread) {
      return;
    }
    if (myInspectorTool != null && myInspectorTool.getInspector() != null) {
      inspector=myInspectorTool.getInspector();
      if (updateEditorComponent(inspector,events,checkers,checkersToRemove,isUpdated)) {
        inspectorIsUpdated=true;
      }
    }
  }
  finally {
    TypeChecker.getInstance().clearGlobalSubtypingCache();
  }
  if (myStopThread) {
    return;
  }
  if (isUpdated) {
    for (    EditorComponent editorComponent : allEditorComponents) {
      editorComponent.repaint();
      editorComponent.getMessagesGutter().repaint();
    }
  }
  if (inspectorIsUpdated) {
    inspector.repaint();
    inspector.getMessagesGutter().repaint();
  }
  for (  HighlighterListener listener : myListeners) {
    listener.checkingIterationFinished();
  }
}
