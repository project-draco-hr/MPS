{
  if (node == null) {
    return "";
  }
  if (node instanceof ParameterDeclaration) {
    return "parameter";
  }
 else   if (node instanceof LocalVariableDeclaration) {
    return "local variable";
  }
 else   if (node instanceof MethodDeclaration) {
    return getAliasOrConceptName(node,scope) + " in " + node.getModel().getUID().getLongName();
  }
 else   if (node instanceof BaseMethodDeclaration || node instanceof VariableDeclaration || node instanceof EnumConstantDeclaration) {
    String prefix=getAliasOrConceptName(node,scope) + " in ";
    Classifier parent=SModelUtil.findParent(node,Classifier.class);
    if (parent == null) {
      return prefix + "?declaring classifer?";
    }
 else     if (isReferenceContext(parent,referenceContext)) {
      return prefix + "this " + parent.getName();
    }
    return prefix + NameUtil.nodeFQName(parent);
  }
 else   if (node instanceof Classifier) {
    return getAliasOrConceptName(node,scope) + " in " + node.getModel().getUID();
  }
  if (node instanceof LinkDeclaration) {
    SNode containingRoot=node.getContainingRoot();
    return containingRoot.getName() + " (" + containingRoot.getModel().getUID()+ ")";
  }
  String description=SModelUtil.getConceptProperty(node,"short_description",scope);
  if (description != null) {
    return description;
  }
  if (node instanceof ConceptDeclaration) {
    return "";
  }
  if (node.isRoot()) {
    return NameUtil.shortNameFromLongName(node.getClass().getName()) + " in " + node.getModel().getUID();
  }
  return NameUtil.shortNameFromLongName(node.getClass().getName()) + " in " + NameUtil.nodeFQName(SModelUtil.getRootParent(node));
}
