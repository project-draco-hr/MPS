{
synchronized (this) {
    if (!mature()) {
      return myImmatureTargetNode;
    }
  }
  if (getResolveInfo() == null) {
    if (!silently) {
      error("bad reference: no resolve info");
    }
    return null;
  }
  SNode referenceNode=getSourceNode();
  SNode referenceNodeConcept=referenceNode.getConceptDeclarationNode();
  SNode enclosingNode=getSourceNode().getParent();
  SearchScopeStatus status=ModelConstraintsUtil.getSearchScope(enclosingNode,referenceNode,referenceNodeConcept,getRole(),new ReferenceResolvingContext(getModule()));
  if (status.isError()) {
    if (!silently) {
      error("cannot obtain search scope: " + status.getMessage());
    }
    return null;
  }
  SNode mostSpecificForRole=new ConceptAndSuperConceptsScope(referenceNodeConcept).getMostSpecificLinkDeclarationByRole(getRole());
  if (mostSpecificForRole == null) {
    if (!silently) {
      error("cannot find link declaration '" + getRole() + "' in concept '"+ referenceNode.getConceptFqName()+ "'");
    }
    return null;
  }
  ISearchScope searchScope=status.getSearchScope();
  IReferenceInfoResolver infoResolver=searchScope.getReferenceInfoResolver(referenceNode,SModelUtil.getLinkDeclarationTarget(mostSpecificForRole));
  if (infoResolver == null) {
    if (!silently) {
      error("cannot obtain resolver for reference: '" + getRole() + "'");
    }
    return null;
  }
  SNode targetNode=infoResolver.resolve(getResolveInfo(),getTargetSModelReference());
  if (targetNode == null) {
    if (!silently) {
      error("cannot resolve reference by string: '" + getResolveInfo() + "'");
    }
  }
  return targetNode;
}
