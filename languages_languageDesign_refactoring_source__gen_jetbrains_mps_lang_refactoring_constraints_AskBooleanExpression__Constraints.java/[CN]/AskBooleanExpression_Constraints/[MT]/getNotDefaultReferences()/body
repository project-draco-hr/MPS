{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("parameter",new BaseReferenceConstraintsDescriptor("parameter",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.refactoring.structure.Refactoring",false,false),"parameter",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"chooser",true),"jetbrains.mps.lang.refactoring.structure.MPSParameterChooser");
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_t92tgv_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
