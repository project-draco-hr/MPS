{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      if (!(SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
        return new SimpleSearchScope(new ArrayList());
      }
      SNode instance=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
      SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(instance),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
      return new ClassifierVisibleMembersScope(classifierType,((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.INSTANCE_METHOD){
        @Override protected boolean isVisible(        SNode member){
          return !(super.isVisible(member));
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:c8ec5cc5-f63f-40c3-ab3e-3fbb9a638ceb(jetbrains.mps.debug.privateMembers.constraints)","6825241477451051017");
    }
  }
);
  return result;
}
