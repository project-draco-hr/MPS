{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (!(SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
            return new EmptySearchScope();
          }
          SNode instance=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(instance),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
          return new ClassifierVisibleMembersScope(classifierType,((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.INSTANCE_METHOD){
            @Override protected boolean isVisible(            SNode member){
              return !(super.isVisible(member));
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8iqmcz_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
