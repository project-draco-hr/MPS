{
  if (SNodeOperations.getContainingRoot(root) != root) {
    return;
  }
  if (SNodeOperations.getModel(root) == null) {
    return;
  }
  final Set<SLanguage> importedLanguages=new HashSet<SLanguage>();
  importedLanguages.addAll(new SLanguageHierarchy(SModelOperations.getAllLanguageImports(SNodeOperations.getModel(root))).getExtended());
  new Runnable(){
    private final SAbstractConcept C=MetaAdapterFactory.getConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0xad0053c7ae9194dL,"jetbrains.mps.lang.core.structure.SideTransformInfo");
    private final SContainmentLink L=MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x47bf8397520e5942L,"smodelAttribute");
    public void run(){
      final Set<SLanguage> emptySet=Collections.emptySet();
      findMissing(Collections.singleton(root),emptySet);
    }
    public void findMissing(    Iterable<? extends SNode> level,    Set<SLanguage> parentReported){
      boolean parentReportedSetChanged=false;
      for (      SNode node : Sequence.fromIterable(level)) {
        HashSet<SLanguage> reported=new HashSet<SLanguage>(parentReported);
        SConcept concept=node.getConcept();
        if (concept.equals(C) && L.equals(node.getContainmentLink())) {
          continue;
        }
        SLanguage language=concept.getLanguage();
        boolean notYetReported=reported.add(language);
        parentReportedSetChanged|=notYetReported;
        if (!(importedLanguages.contains(language)) && notYetReported) {
{
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(node,language.getQualifiedName() + " is not imported","r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)","8941604747782182081",null,errorTarget);
{
              BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.lang.core.typesystem.ImportUsedLanguage_QuickFix",false);
              _reporter_2309309498.addIntentionProvider(intentionProvider);
            }
          }
        }
        findMissing(node.getChildren(),(parentReportedSetChanged ? reported : parentReported));
      }
    }
  }
.run();
}
