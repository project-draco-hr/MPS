{
  try {
    final List<IModule> modules=ListSequence.fromList(new ArrayList<IModule>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        ListSequence.fromList(modules).addSequence(SetSequence.fromSet(MPSModuleRepository.getInstance().getAllModules()));
      }
    }
);
    BaseModuleModel baseSolutionModel=new BaseModuleModel(((Project)MapSequence.fromMap(_params).get("project")),"runtime module"){
      @Override public SModuleReference[] find(      IScope p0){
        return ListSequence.fromList(modules).select(new ISelector<IModule,ModuleReference>(){
          public ModuleReference select(          IModule it){
            return it.getModuleReference();
          }
        }
).toGenericArray(ModuleReference.class);
      }
      @Override public NavigationItem doGetNavigationItem(      final SModuleReference module){
        return new BaseModuleItem(module){
          @Override public void navigate(          boolean p0){
            if (module == null) {
              return;
            }
            final Language language=(Language)((IModule)MapSequence.fromMap(_params).get("contextModule"));
            language.getModuleDescriptor().getRuntimeModules().add((ModuleReference)module);
            final MPSTree mpsTree=((MPSTreeNode)((TreeNode)MapSequence.fromMap(_params).get("treeNode"))).getTree();
            ModelAccess.instance().runWriteInEDT(new Runnable(){
              public void run(){
                language.save();
                mpsTree.rebuildLater();
              }
            }
);
          }
        }
;
      }
    }
;
    ChooseByNamePopup popup=MpsPopupFactory.createPackagePopup(((Project)MapSequence.fromMap(_params).get("project")),baseSolutionModel,NewRuntimeModule_Action.this);
    popup.invoke(new ChooseByNamePopupComponent.Callback(){
      @Override public void elementChosen(      Object p0){
        ((NavigationItem)p0).navigate(true);
      }
    }
,ModalityState.current(),true);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "NewRuntimeModule",t);
  }
}
