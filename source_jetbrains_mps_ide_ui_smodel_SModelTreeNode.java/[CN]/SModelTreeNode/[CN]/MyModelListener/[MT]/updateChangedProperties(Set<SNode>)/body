{
  DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
  final List<SNode> allRoots=new ArrayList<SNode>(getSModel().getRoots());
  Collections.sort(allRoots,new ToStringComparator());
  for (  SNode node : nodesWithChangedProperties) {
    SNodeTreeNode treeNode=(SNodeTreeNode)findRootSNodeTreeNode(node);
    if (treeNode == null)     continue;
    if (node.isRoot()) {
      MPSTreeNode parentTreeNode=(MPSTreeNode)treeNode.getParent();
      int currentIndex=parentTreeNode.getIndex(treeNode);
      int newIndex=-1;
      for (int i=0; i < parentTreeNode.getChildCount(); i++) {
        if (i == currentIndex)         continue;
        if (!(parentTreeNode.getChildAt(i) instanceof SNodeTreeNode))         continue;
        SNodeTreeNode child=(SNodeTreeNode)parentTreeNode.getChildAt(i);
        String rp=node.toString();
        String cp=child.getSNode().toString();
        if (rp.compareTo(cp) < 0) {
          newIndex=i;
          if (newIndex > currentIndex) {
            newIndex--;
          }
          break;
        }
      }
      if (newIndex == -1) {
        newIndex=parentTreeNode.getChildCount() - 1;
      }
      if (currentIndex != newIndex) {
        treeModel.removeNodeFromParent(treeNode);
        treeModel.insertNodeInto(treeNode,parentTreeNode,newIndex);
      }
    }
    if (treeNode.isInitialized() && showPropertiesAndReferences()) {
      MPSTreeNodeEx propsNode=(MPSTreeNodeEx)treeNode.getChildAt(0);
      propsNode.update();
      propsNode.init();
    }
    treeModel.nodeChanged(treeNode);
  }
}
