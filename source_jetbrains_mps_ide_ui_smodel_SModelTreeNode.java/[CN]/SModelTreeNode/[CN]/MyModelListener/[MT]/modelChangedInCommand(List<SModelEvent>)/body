{
  getTree().rebuildTree(new Runnable(){
    public void run(){
      SModelEventVisitor visitor=new SModelEventVisitor(){
        public void visitRootEvent(        SModelRootEvent event){
          SModelTreeNode.this.update();
          updateTreeWithRoot(event.getRoot());
        }
        public void visitChildEvent(        SModelChildEvent event){
          updateTreeWithRoot(event.getParent());
        }
        public void visitPropertyEvent(        SModelPropertyEvent event){
          if (event.getNode().isRoot() && needChangeRootNodePosition(event)) {
            SModelTreeNode.this.update();
            updateTreeWithRoot(event.getNode());
            return;
          }
          DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
          MPSTreeNode nodeTreeNode=findDescendantWith(event.getNode());
          if (nodeTreeNode == null || !nodeTreeNode.isInitialized())           return;
          MPSTreeNodeEx propsNode=(MPSTreeNodeEx)nodeTreeNode.getChildAt(0);
          propsNode.update();
          propsNode.init();
          treeModel.nodeStructureChanged(propsNode);
          treeModel.nodeChanged(nodeTreeNode);
        }
        public void visitReferenceEvent(        SModelReferenceEvent event){
          DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
          SNode sourceNode=event.getReference().getSourceNode();
          MPSTreeNode nodeTreeNode=findDescendantWith(sourceNode);
          if (nodeTreeNode == null || !nodeTreeNode.isInitialized())           return;
          MPSTreeNodeEx refsNode=(MPSTreeNodeEx)nodeTreeNode.getChildAt(1);
          refsNode.update();
          refsNode.init();
          treeModel.nodeStructureChanged(refsNode);
        }
      }
;
      for (      SModelEvent event : events) {
        event.accept(visitor);
      }
    }
  }
,EventUtil.isDramaticalChange(events) || EventUtil.isRootNameChange(events));
}
