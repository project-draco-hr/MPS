{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_8acy7z_a0a=null;
switch (0) {
case 0:
        final List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
      final List<Tuples._2<IFile,IFile>> filesToCopy=ListSequence.fromList(new ArrayList<Tuples._2<IFile,IFile>>());
    final String[] error=new String[]{null};
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      IResource res : input) {
        final IModule module=((MResource)res).module();
        for (        SModelDescriptor smd : ((MResource)res).models()) {
          SModel model=smd.getSModel();
          String output=module.getOutputFor(smd);
          if (output == null) {
            error[0]="no output location for " + smd.getLongName();
            return;
          }
          IFile outputRoot=(pool.parameters(Target_copyBinaries.this.getName(),Binaries_Facet.Target_copyBinaries.Parameters.class).pathToFile() != null ? pool.parameters(Target_copyBinaries.this.getName(),Binaries_Facet.Target_copyBinaries.Parameters.class).pathToFile().invoke(output) : FileSystem.getInstance().getFileByPath(output));
          final IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,outputRoot);
          final FilesDelta fd=new FilesDelta(outputDir);
          ListSequence.fromList(deltaList).addElement(fd);
          ListSequence.fromList(filesToCopy).addSequence(ListSequence.fromList(SModelOperations.getNodes(model,"jetbrains.mps.lang.plugin.structure.Resource")).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return StringUtils.isNotEmpty(SPropertyOperations.getString(it,"path"));
            }
          }
).<String>select(new ISelector<SNode,String>(){
            public String select(            SNode bin){
              return MacrosUtil.expandPath(SPropertyOperations.getString(bin,"path"),module.getModuleFqName());
            }
          }
).where(new IWhereFilter<String>(){
            public boolean accept(            String p){
              return p != null;
            }
          }
).<Tuples._2<IFile,IFile>>select(new ISelector<String,Tuples._2<IFile,IFile>>(){
            public Tuples._2<IFile,IFile> select(            String p){
              IFile fromFile=FileSystem.getInstance().getFileByPath(p);
              IFile toFile=outputDir.getDescendant(fromFile.getName());
              fd.written(toFile);
              return MultiTuple.<IFile,IFile>from(fromFile,toFile);
            }
          }
));
        }
      }
    }
  }
);
if (error[0] != null) {
  monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(error[0])));
  return new IResult.FAILURE(_output_8acy7z_a0a);
}
_output_8acy7z_a0a=Sequence.fromIterable(_output_8acy7z_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
ThreadUtils.runInUIThreadAndWait(new Runnable(){
public void run(){
ModelAccess.instance().requireWrite(new Runnable(){
  public void run(){
    ListSequence.fromList(filesToCopy).toListSequence().visitAll(new IVisitor<Tuples._2<IFile,IFile>>(){
      public void visit(      Tuples._2<IFile,IFile> ftc){
        IFileUtils.copyFileContent(ftc._0(),ftc._1());
      }
    }
);
  }
}
);
}
}
);
default :
return new IResult.SUCCESS(_output_8acy7z_a0a);
}
}
}
;
}
