{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("key",new BaseReferenceConstraintsDescriptor("key",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> dataKeys=new ArrayList<SNode>();
          ListSequence.fromList(dataKeys).addSequence(Sequence.fromIterable(Classifier_Behavior.call_staticFields_5292274854859223538(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_lb7xg4_a0a0a0b0a0(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
          ListSequence.fromList(dataKeys).addSequence(Sequence.fromIterable(Classifier_Behavior.call_staticFields_5292274854859223538(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_lb7xg4_a0a0a0c0a0(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
          ListSequence.fromList(dataKeys).addSequence(Sequence.fromIterable(Classifier_Behavior.call_staticFields_5292274854859223538(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_lb7xg4_a0a0a0d0a0(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
          for (          SModelDescriptor importedModel : SModelOperations.allImportedModels(_context.getModel(),operationContext.getScope())) {
            if (importedModel.getLongName().equals("jetbrains.mps.workbench")) {
              for (              SNode root : importedModel.getSModel().roots()) {
                if (SNodeOperations.isInstanceOf(root,"jetbrains.mps.baseLanguage.structure.ClassConcept") && "MPSDataKeys".equals(SPropertyOperations.getString(SNodeOperations.cast(root,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"name"))) {
                  ListSequence.fromList(dataKeys).addSequence(Sequence.fromIterable(Classifier_Behavior.call_staticFields_5292274854859223538(SNodeOperations.cast(root,"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
                }
              }
              importedModel.getSModel().roots();
            }
          }
          return dataKeys;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_lb7xg4_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
