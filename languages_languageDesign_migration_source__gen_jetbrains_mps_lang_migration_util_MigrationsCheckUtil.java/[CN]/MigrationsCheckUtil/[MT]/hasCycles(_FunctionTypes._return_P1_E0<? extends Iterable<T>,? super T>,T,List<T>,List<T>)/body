{
  if (ListSequence.fromList(visited).contains(startPoint)) {
    return false;
  }
  if (ListSequence.fromList(parents).contains(startPoint)) {
    return true;
  }
  ListSequence.fromList(parents).insertElement(0,startPoint);
  if (Sequence.fromIterable(neighbours.invoke(startPoint)).any(new IWhereFilter<T>(){
    public boolean accept(    T it){
      return hasCycles(neighbours,it,parents,visited);
    }
  }
)) {
    return true;
  }
  ListSequence.fromList(parents).removeElementAt(0);
  ListSequence.fromList(visited).addElement(startPoint);
  return false;
}
