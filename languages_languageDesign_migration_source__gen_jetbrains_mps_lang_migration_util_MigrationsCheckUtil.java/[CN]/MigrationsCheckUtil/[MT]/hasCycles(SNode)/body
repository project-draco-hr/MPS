{
  List<SNode> step=ListSequence.fromListAndArray(new ArrayList<SNode>(),migrationScript);
  List<SNode> all=ListSequence.fromList(new ArrayList<SNode>());
  while (ListSequence.fromList(step).isNotEmpty()) {
    step=ListSequence.fromList(step).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode it){
        return Sequence.fromIterable(MigrationScript_Behavior.call_getRequiredData_8585153554445862713(it)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return (SLinkOperations.getTarget(it,"script",false) != null);
          }
        }
).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SLinkOperations.getTarget(it,"script",false);
          }
        }
);
      }
    }
).concat(ListSequence.fromList(step).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode it){
        return Sequence.fromIterable(MigrationScript_Behavior.call_getExecuteAfter_2521103492728978905(it)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return (SLinkOperations.getTarget(it,"script",false) != null);
          }
        }
).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SLinkOperations.getTarget(it,"script",false);
          }
        }
);
      }
    }
)).distinct().toListSequence();
    if (ListSequence.fromList(all).intersect(ListSequence.fromList(step)).isNotEmpty()) {
      return true;
    }
    ListSequence.fromList(all).addSequence(ListSequence.fromList(step));
  }
  return false;
}
