{
  try {
    final SNode classConcept=SNodeOperations.getAncestor(((SNode)((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    final Wrappers._T<SNodePointer[]> fields=new Wrappers._T<SNodePointer[]>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        fields.value=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"field",true)).select(new ISelector<SNode,SNodePointer>(){
          public SNodePointer select(          SNode it){
            return new SNodePointer(it);
          }
        }
).toGenericArray(SNodePointer.class);
      }
    }
);
    SelectFieldsDialog selectFieldsDialog=new SelectFieldsDialog(fields.value,false,((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
    selectFieldsDialog.setTitle("Select Fields to Generate Getters and Setters");
    selectFieldsDialog.show();
    if (!(selectFieldsDialog.isOK())) {
      return;
    }
    SNodePointer[] selectedFields=Sequence.fromIterable(((Iterable<SNodePointer>)selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class);
    SNode lastAdded=null;
    Project project=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
    for (    SNodePointer fieldPtr : selectedFields) {
      final SNode field=SNodeOperations.cast(fieldPtr.getNode(),"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
      final String getterName=GenerateGettersAndSettersUtil.getFieldGetterName(field,project);
      final Wrappers._boolean getterIsAbsent=new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          if (getterName.equals(SPropertyOperations.getString(it,"name")) && ListSequence.fromList(SLinkOperations.getTargets(it,"parameter",true)).isEmpty()) {
            getterIsAbsent.value=false;
          }
        }
      }
);
      if (!(getterIsAbsent.value)) {
        continue;
      }
      SNode fieldReference=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference",null);
      SLinkOperations.setTarget(fieldReference,"variableDeclaration",field,false);
      lastAdded=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateGettersAndSetters_Action.QuotationClass_lel3v6_a0a0a7a41a0a3().createNode(SLinkOperations.getTarget(field,"type",true),fieldReference,getterName));
      final String setterName=GenerateGettersAndSettersUtil.getFieldSetterName(field,project);
      final Wrappers._boolean setterIsAbsent=new Wrappers._boolean(true);
      ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode method){
          if (setterName.equals(SPropertyOperations.getString(method,"name")) && (int)ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count() == 1) {
            setterIsAbsent.value=false;
          }
        }
      }
);
      if (!(setterIsAbsent.value)) {
        continue;
      }
      String parameterName=GenerateGettersAndSettersUtil.getParameterNameForField(field,project);
      lastAdded=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateGettersAndSetters_Action.QuotationClass_lel3v6_a0a0a41a41a0a3().createNode(SNodeOperations.copyNode(fieldReference),SLinkOperations.getTarget(field,"type",true),parameterName,setterName));
    }
    if (lastAdded != null) {
      ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).select(lastAdded);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "GenerateGettersAndSetters",t);
    }
  }
}
