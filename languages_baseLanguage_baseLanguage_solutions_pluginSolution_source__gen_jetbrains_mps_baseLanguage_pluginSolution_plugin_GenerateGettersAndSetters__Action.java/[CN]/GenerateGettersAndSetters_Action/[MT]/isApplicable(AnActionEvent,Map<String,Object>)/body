{
  SNode classConcept=SNodeOperations.getAncestor(((SNode)((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  List<SNode> fields=SLinkOperations.getTargets(classConcept,"field",true);
  if (ListSequence.fromList(fields).isEmpty()) {
    return false;
  }
  boolean allGettersImplemented=true;
  Project project=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject();
  for (  SNode fieldDeclaration : fields) {
    boolean hasCurrentFieldGetter=false;
    final String getterName=GenerateGettersAndSettersUtil.getFieldGetterName(fieldDeclaration,project);
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return getterName.equals(SPropertyOperations.getString(it,"name")) && ListSequence.fromList(SLinkOperations.getTargets(it,"parameter",true)).isEmpty();
      }
    }
)) {
      hasCurrentFieldGetter=true;
    }
    if (!(hasCurrentFieldGetter)) {
      allGettersImplemented=false;
      break;
    }
  }
  if (!(allGettersImplemented)) {
    return true;
  }
 else {
    boolean hasAllSetters=true;
    for (    SNode field : fields) {
      final String setterName=GenerateGettersAndSettersUtil.getFieldSetterName(field,project);
      boolean hasCurrentFieldSetter=false;
      if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return setterName.equals(SPropertyOperations.getString(it,"name")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType");
        }
      }
)) {
        hasCurrentFieldSetter=true;
      }
      if (!(hasCurrentFieldSetter)) {
        hasAllSetters=false;
        break;
      }
    }
    return !(hasAllSetters);
  }
}
