{
  if (canWrite()) {
    r.run();
    return true;
  }
  if (myDistributedLocksMode && ApplicationManager.getApplication().isDispatchThread()) {
    return false;
  }
  Computable<Boolean> computable=new Computable<Boolean>(){
    public Boolean compute(){
      try {
        if (getWriteLock().tryLock(WAIT_FOR_WRITE_LOCK_MILLIS,MILLISECONDS)) {
          try {
            r.run();
          }
  finally {
            getWriteLock().unlock();
          }
          return true;
        }
 else {
          return false;
        }
      }
 catch (      InterruptedException e) {
        return false;
      }
    }
  }
;
  final boolean ownRead=ownReadLock();
  try {
    if (ownRead)     getReadLock().unlock();
    if (ThreadUtils.isEventDispatchThread()) {
      return ApplicationManager.getApplication().runWriteAction(computable);
    }
 else {
      return ApplicationManager.getApplication().runReadAction(computable);
    }
  }
  finally {
    if (ownRead)     getReadLock().lock();
  }
}
