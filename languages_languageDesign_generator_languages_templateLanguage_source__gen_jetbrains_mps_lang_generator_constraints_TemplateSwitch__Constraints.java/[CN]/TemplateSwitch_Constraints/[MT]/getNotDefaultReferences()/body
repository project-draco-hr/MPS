{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("modifiedSwitch",new BaseReferenceConstraintsDescriptor("modifiedSwitch",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_phmuaq_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(new ModelPlusImportedScope(_context.getModel(),true,operationContext.getScope(),"jetbrains.mps.lang.generator.structure.TemplateSwitch")){
            @Override public boolean isExcluded(            SNode node){
              if (node == _context.getContextNode()) {
                return true;
              }
              SNode contributor=SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.lang.generator.structure.TemplateSwitch");
              SNode originCandidate=SNodeOperations.cast(node,"jetbrains.mps.lang.generator.structure.TemplateSwitch");
              if (ListSequence.fromList(SLinkOperations.getTargets(originCandidate,"parameter",true)).count() < ListSequence.fromList(SLinkOperations.getTargets(contributor,"parameter",true)).count()) {
                return true;
              }
              for (int i=0; i < ListSequence.fromList(SLinkOperations.getTargets(contributor,"parameter",true)).count(); i++) {
                SNode p1=ListSequence.fromList(SLinkOperations.getTargets(contributor,"parameter",true)).getElement(i);
                SNode p2=ListSequence.fromList(SLinkOperations.getTargets(originCandidate,"parameter",true)).getElement(i);
                if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(p2,"type",true),SLinkOperations.getTarget(p1,"type",true)))) {
                  return true;
                }
                if (!(SPropertyOperations.getString(p1,"name").equals(SPropertyOperations.getString(p2,"name")))) {
                  return true;
                }
              }
              return false;
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
