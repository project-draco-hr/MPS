{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-5475912601019530992l,-8082971551085732881l),1112730859144l,1112820671508l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-5475912601019530992l,-8082971551085732881l),1112730859144l,1112820671508l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_phmuaq_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(new ModelPlusImportedScope(_context.getModel(),true,"jetbrains.mps.lang.generator.structure.TemplateSwitch")){
            @Override public boolean isExcluded(            SNode node){
              if (node == _context.getContextNode()) {
                return true;
              }
              SNode contributor=SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.lang.generator.structure.TemplateSwitch");
              SNode originCandidate=SNodeOperations.cast(node,"jetbrains.mps.lang.generator.structure.TemplateSwitch");
              if (ListSequence.fromList(SLinkOperations.getChildren(originCandidate,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),982871510064032177l,982871510064032342l,"parameter"))).count() != ListSequence.fromList(SLinkOperations.getChildren(contributor,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),982871510064032177l,982871510064032342l,"parameter"))).count()) {
                return true;
              }
              for (int i=0; i < ListSequence.fromList(SLinkOperations.getChildren(contributor,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),982871510064032177l,982871510064032342l,"parameter"))).count(); i++) {
                SNode p1=ListSequence.fromList(SLinkOperations.getChildren(contributor,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),982871510064032177l,982871510064032342l,"parameter"))).getElement(i);
                SNode p2=ListSequence.fromList(SLinkOperations.getChildren(originCandidate,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),982871510064032177l,982871510064032342l,"parameter"))).getElement(i);
                if (!(SPropertyOperations.getString(p1,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")).equals(SPropertyOperations.getString(p2,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))))) {
                  return true;
                }
                return !((TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(p2,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994415891174l,1805153994415893199l,"type")),SLinkOperations.getTarget(p1,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994415891174l,1805153994415893199l,"type"))) && TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(p1,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994415891174l,1805153994415893199l,"type")),SLinkOperations.getTarget(p2,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994415891174l,1805153994415893199l,"type")))));
              }
              return false;
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
