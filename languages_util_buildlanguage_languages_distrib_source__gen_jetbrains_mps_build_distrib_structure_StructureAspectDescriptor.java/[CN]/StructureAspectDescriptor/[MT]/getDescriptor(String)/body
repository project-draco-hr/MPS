{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.AbstractCommandLinePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.AbstractPath","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.ArtifactReferenceCommandLinePart","jetbrains.mps.build.distrib.structure.AbstractCommandLinePart",false,new String[]{"jetbrains.mps.build.distrib.structure.AbstractCommandLinePart"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.ClassPath","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.DigitalSignatureWindowsConfiguration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.DistribConfiguration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IVariableHolder","jetbrains.mps.build.packaging.structure.IMacroHolder"},new String[]{"startupClass","useVMOptionsFile","defaultVMOptions","additionalVMOptions"},new String[]{"buildScriptConfiguration","projectFolder"});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.ExternalVariableReference","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{"variable"});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.FileAssociation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"extensions"},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.MacConfig","jetbrains.mps.build.distrib.structure.SystemSpecificConfig",false,new String[]{"jetbrains.mps.build.distrib.structure.SystemSpecificConfig"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.MacOsFileAssociation","jetbrains.mps.build.distrib.structure.FileAssociation",false,new String[]{"jetbrains.mps.build.distrib.structure.FileAssociation"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.PathCommantLinePart","jetbrains.mps.build.distrib.structure.AbstractCommandLinePart",false,new String[]{"jetbrains.mps.build.distrib.structure.AbstractCommandLinePart"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.Role","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.SimplePath","jetbrains.mps.build.distrib.structure.AbstractPath",false,new String[]{"jetbrains.mps.build.distrib.structure.AbstractPath"},new String[]{"path"},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.StringCommandLinePart","jetbrains.mps.build.distrib.structure.AbstractCommandLinePart",false,new String[]{"jetbrains.mps.build.distrib.structure.AbstractCommandLinePart"},new String[]{"text"},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.SystemSpecificConfig","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.UniversalConfig","jetbrains.mps.build.distrib.structure.SystemSpecificConfig",false,new String[]{"jetbrains.mps.build.distrib.structure.SystemSpecificConfig"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.UnixConfig","jetbrains.mps.build.distrib.structure.SystemSpecificConfig",false,new String[]{"jetbrains.mps.build.distrib.structure.SystemSpecificConfig"},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.build.distrib.structure.WindowsConfig","jetbrains.mps.build.distrib.structure.SystemSpecificConfig",false,new String[]{"jetbrains.mps.build.distrib.structure.SystemSpecificConfig"},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
