{
  SModelReference ref=SNodeOperations.getModel(targetNode).getSModelReference();
  boolean isClassifier=SNodeOperations.isInstanceOf(targetNode,"jetbrains.mps.baseLanguage.structure.Classifier");
  boolean isConstructor=SNodeOperations.isInstanceOf(targetNode,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
  boolean isMethod=SNodeOperations.isInstanceOf(targetNode,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(targetNode),"jetbrains.mps.baseLanguage.structure.Classifier");
  boolean isField=(SNodeOperations.isInstanceOf(targetNode,"jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(targetNode,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(targetNode),"jetbrains.mps.baseLanguage.structure.Classifier");
  if (!(isClassifier || isConstructor || isMethod|| isField)) {
    return false;
  }
  IProjectHandler handler=GoByCurrentReference_Action.this.getHandlerFor(GoByCurrentReference_Action.this.project);
  if (handler == null) {
    if (log.isErrorEnabled()) {
      log.error("Project handle is null. Trying to open in MPS...");
    }
    return false;
  }
  try {
    if (isClassifier) {
      String fqName=ref.getLongName() + "." + SPropertyOperations.getString(SNodeOperations.cast(targetNode,"jetbrains.mps.baseLanguage.structure.Classifier"),"name");
      handler.openClass(fqName);
    }
 else     if (isConstructor) {
      String classifierName=GoByCurrentReference_Action.this.getClassifierName(targetNode,ref);
      int paramCount=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(targetNode,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"),"parameter",true)).count();
      handler.openClass(classifierName);
      handler.openConstructor(classifierName,paramCount);
    }
 else     if (isMethod) {
      String classifierName=GoByCurrentReference_Action.this.getClassifierName(targetNode,ref);
      SNode method=SNodeOperations.cast(targetNode,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
      handler.openMethod(classifierName,SPropertyOperations.getString(method,"name"),ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count());
    }
 else {
      String classifierName=GoByCurrentReference_Action.this.getClassifierName(targetNode,ref);
      handler.openField(classifierName,targetNode.getName());
    }
  }
 catch (  RemoteException e) {
    if (log.isErrorEnabled()) {
      log.error("",e);
    }
  }
  return true;
}
