{
  SNode childStatement=child;
  while (SNodeOperations.getParent(childStatement) != thisNode) {
    childStatement=SNodeOperations.getParent(childStatement);
  }
{
    SNode concept_d0b;
    concept_d0b=kind;
    if (SConceptOperations.isSubConceptOf(concept_d0b,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
{
        if (SLinkOperations.getTarget(thisNode,"expression",true) == childStatement) {
          return ScopeUtils.parentScope(thisNode,kind);
        }
        List<SNode> variables=new ArrayList<SNode>();
        for (        SNode caseNode : SLinkOperations.getTargets(thisNode,"case",true)) {
          if (caseNode == childStatement) {
            break;
          }
          ListSequence.fromList(variables).addSequence(ListSequence.fromList(StatementList_Behavior.call_getLocalVariableDeclarations_3986960521977638556(SLinkOperations.getTarget(caseNode,"body",true),null)));
        }
        return CompositeWithParentScope.from(variables,thisNode,kind);
      }
    }
    if (SConceptOperations.isSubConceptOf(concept_d0b,"jetbrains.mps.baseLanguage.structure.LoopLabel")) {
{
        List<SNode> parameter=new ArrayList<SNode>();
        if ((SLinkOperations.getTarget(thisNode,"switchLabel",true) != null)) {
          ListSequence.fromList(parameter).addElement(SLinkOperations.getTarget(thisNode,"switchLabel",true));
        }
        SNode[] nodesInScope=new SNode[ListSequence.fromList(SLinkOperations.getTargets(thisNode,"case",true)).count() + 1];
        for (int i=0; i < ListSequence.fromList(SLinkOperations.getTargets(thisNode,"case",true)).count(); i++) {
          nodesInScope[i]=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"case",true)).getElement(i);
        }
        nodesInScope[nodesInScope.length - 1]=SLinkOperations.getTarget(thisNode,"defaultBlock",true);
        if (Arrays.asList(nodesInScope).contains(child)) {
          return CompositeWithParentScope.from(parameter,thisNode,kind);
        }
      }
    }
  }
  return null;
}
