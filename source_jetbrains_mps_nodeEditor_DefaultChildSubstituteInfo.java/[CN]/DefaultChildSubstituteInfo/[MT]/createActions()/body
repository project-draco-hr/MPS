{
  List<INodeSubstituteItem> list=new LinkedList<INodeSubstituteItem>();
  List<ConceptDeclaration> childTypes=createChildTypesList();
  for (  final ConceptDeclaration childType : childTypes) {
    list.add(new AbstractNodeSubstituteItem(){
      public String getMatchingText(      String pattern){
        return EditorUtil.getMatchingText(childType);
      }
      public String getDescriptionText(      String pattern){
        return childType.getModel().getFQName();
      }
      public SemanticNode doSubstitute(      String pattern){
        SemanticNode childNode=SModelUtil.instantiateConceptDeclaration(childType,mySourceNode.getModel());
        String role=myLinkDeclaration.getRole();
        SemanticNode oldChild=mySourceNode.getChild(role);
        if (oldChild != null) {
          oldChild.delete();
        }
        mySourceNode.setChild(role,childNode);
        return childNode;
      }
    }
);
  }
  return list;
}
