{
  Element versionXML=element.getChild(VERSION);
  if (versionXML == null)   return;
  String version=versionXML.getAttribute(ID).getValue();
  if (!VERSION_NUMBER.equals(version))   return;
  Element tabsXML=element.getChild(TABS);
  if (tabsXML != null) {
    for (    Element tabXML : (List<Element>)tabsXML.getChildren()) {
      final UsageViewData usageViewData=new UsageViewData();
      try {
        usageViewData.read(tabXML,project);
      }
 catch (      CantLoadSomethingException e) {
        continue;
      }
      myUsageViewsData.add(usageViewData);
      final String caption=usageViewData.myUsagesView.getCaption();
      final Icon icon=usageViewData.myUsagesView.getIcon();
      StartupManager.getInstance(getProject()).registerPostStartupActivity(new Runnable(){
        public void run(){
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              addContent(usageViewData.myUsagesView.getComponent(),caption,icon,true);
            }
          }
);
        }
      }
);
    }
  }
  Element defaultFindOptionsXML=element.getChild(DEFAULT_FIND_OPTIONS);
  try {
    myDefaultFindOptions.read(defaultFindOptionsXML,project);
  }
 catch (  CantLoadSomethingException e) {
    myDefaultFindOptions=new FindUsagesOptions(new FindersOptions(),new QueryOptions(),new ViewOptions());
  }
  Element defaultViewOptionsXML=element.getChild(DEFAULT_VIEW_OPTIONS);
  myDefaultViewOptions.read(defaultViewOptionsXML,project);
  StartupManager.getInstance(getProject()).registerPostStartupActivity(new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (getContentManager().getContentCount() == 0) {
            makeUnavailableLater();
          }
        }
      }
);
    }
  }
);
}
