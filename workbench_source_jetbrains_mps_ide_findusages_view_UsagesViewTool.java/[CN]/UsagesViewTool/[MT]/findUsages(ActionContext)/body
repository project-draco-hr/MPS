{
  final SNode[] semanticNode=new SNode[1];
  final SNode[] operationNode=new SNode[1];
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      semanticNode[0]=context.getNode();
      operationNode[0]=EditorUtil.getOperationNodeWRTReference(context,semanticNode[0]);
    }
  }
);
  final boolean[] isCancelled=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      final FindUsagesDialog findUsagesDialog=new FindUsagesDialog(myDefaultFindOptions,operationNode[0],context);
      findUsagesDialog.showDialog();
      isCancelled[0]=findUsagesDialog.isCancelled();
      if (!isCancelled[0])       myDefaultFindOptions=findUsagesDialog.getResult();
    }
  }
);
  if (!isCancelled[0]) {
    final IResultProvider[] provider=new IResultProvider[1];
    final SearchQuery[] query=new SearchQuery[1];
    final ViewOptions[] viewOptions=new ViewOptions[1];
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        provider[0]=myDefaultFindOptions.getOption(FindersOptions.class).getResult(operationNode[0],context);
        query[0]=myDefaultFindOptions.getOption(QueryOptions.class).getResult(operationNode[0],context);
        viewOptions[0]=myDefaultFindOptions.getOption(ViewOptions.class);
      }
    }
);
    findUsages(provider[0],query[0],true,viewOptions[0].myShowOneResult,viewOptions[0].myNewTab);
  }
}
