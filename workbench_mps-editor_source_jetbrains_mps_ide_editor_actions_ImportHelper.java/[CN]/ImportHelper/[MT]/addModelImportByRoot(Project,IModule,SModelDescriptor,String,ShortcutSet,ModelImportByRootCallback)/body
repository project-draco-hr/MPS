{
  BaseMPSChooseModel goToNodeModel=new MPSChooseSNodeDescriptor(project,new RootNodeNameIndex()){
    public NavigationItem doGetNavigationItem(    final BaseSNodeDescriptor object){
      return new RootNodeElement(object){
        public void navigate(        boolean requestFocus){
          ModelAccess.assertLegalRead();
          SModelDescriptor descriptor=GlobalScope.getInstance().getModelDescriptor(object.getModelReference());
          LOG.assertLog(descriptor != null,"Caches seems to be corrupted or the model was removed: model " + object.getModelReference().getLongName() + " does not exist. Please check model existence manually and specify it in bug report");
          SModel modelToImport=descriptor.getSModel();
          SNodeId id=object.getId();
          String idString=id == null ? "" : " (id:" + id.toString() + ")";
          String nameString=object.getNodeName() == null ? "<no name>" : object.getNodeName();
          LOG.assertLog(object.getNode(modelToImport) != null,"Caches seems to be corrupted or the node was removed: model " + modelToImport.getLongName() + " does not seem to contain node "+ nameString+ idString+ ". Please check node existence manually and specify it in bug report");
          new AddModelItem(project,model,modelToImport.getSModelReference(),contextModule).navigate(requestFocus);
        }
      }
;
    }
    @Nullable public String getPromptText(){
      return "Import model that contains root:";
    }
  }
;
  ChooseByNamePopup popup=MpsPopupFactory.createNodePopup(project,goToNodeModel,initialText);
  if (checkboxShortcut != null) {
    popup.setCheckBoxShortcut(checkboxShortcut);
  }
  popup.invoke(new ChooseByNamePopupComponent.Callback(){
    public void onClose(){
    }
    public void elementChosen(    final Object element){
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          NavigationItem navigationItem=(NavigationItem)element;
          navigationItem.navigate(true);
          callback.importForRootAdded(navigationItem.getPresentation().getPresentableText());
        }
      }
);
    }
  }
,ModalityState.current(),true);
}
