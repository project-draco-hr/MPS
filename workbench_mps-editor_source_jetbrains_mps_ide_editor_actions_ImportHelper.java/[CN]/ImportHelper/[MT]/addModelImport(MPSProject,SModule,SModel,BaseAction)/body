{
  BaseModelModel goToModelModel=new BaseModelModel(mpsProject){
    @Override public NavigationItem doGetNavigationItem(    final SModelReference modelReference){
      return new AddModelItem(mpsProject,model,modelReference);
    }
    @Override public SModelReference[] find(    SearchScope scope){
      Condition<SModel> cond=new Condition<SModel>(){
        @Override public boolean met(        SModel modelDescriptor){
          boolean rightStereotype=SModelStereotype.isUserModel(modelDescriptor) || SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(modelDescriptor));
          boolean hasModule=modelDescriptor.getModule() != null;
          return rightStereotype && hasModule;
        }
      }
;
      ConditionalIterable<SModel> iter=new ConditionalIterable<SModel>(scope.getModels(),cond);
      List<SModelReference> filteredModelRefs=new ArrayList<SModelReference>();
      for (      SModel md : iter) {
        filteredModelRefs.add(md.getReference());
      }
      return filteredModelRefs.toArray(new SModelReference[filteredModelRefs.size()]);
    }
  }
;
  goToModelModel.setPromptText("Import model:");
  ChooseByNamePopup popup=MpsPopupFactory.createPackagePopup(mpsProject.getProject(),goToModelModel,parentAction);
  popup.invoke(new NavigateCallback(null),ModalityState.current(),true);
}
