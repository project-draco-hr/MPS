{
  int oldSize=myUniqueOld.length;
  int newSize=myUniqueNew.length;
  int[] tempEnds=new int[myUniqueOld.length + myUniqueNew.length + 1];
  for (int i=0; i <= oldSize + newSize; i++) {
    int min=(i <= newSize) ? -i : i - 2 * newSize;
    int max=(i <= oldSize) ? i : 2 * oldSize - i;
    if (i != 0) {
      System.arraycopy(myFinishes,min + newSize,tempEnds,min + newSize,max - min);
    }
 else {
      int end=removeEquals(0,0);
      if (end > 0) {
        myChangeArray.addChangeInfo(end,false);
      }
      if (oldSize == newSize && end == oldSize) {
        return 0;
      }
      myFinishes[newSize]=end;
      continue;
    }
    for (int j=min; j <= max; j++) {
      int end;
      if (j == -i) {
        int endVertical=myFinishes[j + newSize + 1];
        int vertical=getDiagonal(j + 1,endVertical,true);
        end=getNewEnd(endVertical,vertical,true);
      }
 else       if (j == i) {
        int endHorisontal=myFinishes[j + newSize - 1];
        int horisontal=getDiagonal(j - 1,endHorisontal,false);
        end=getNewEnd(endHorisontal,horisontal,false);
      }
 else {
        int endHorisontal=myFinishes[j + newSize - 1];
        int prevEndV=myFinishes[j + newSize + 1];
        if (endHorisontal + 1 > prevEndV) {
          int horisontal=getDiagonal(j - 1,endHorisontal,false);
          end=getNewEnd(endHorisontal,horisontal,false);
        }
 else {
          int vertical=getDiagonal(j + 1,prevEndV,true);
          end=getNewEnd(prevEndV,vertical,true);
        }
      }
      tempEnds[j + newSize]=end;
      if (j == oldSize - newSize && end == oldSize) {
        return i;
      }
      j++;
    }
    int[] temps=tempEnds;
    tempEnds=myFinishes;
    myFinishes=temps;
  }
  return -1;
}
