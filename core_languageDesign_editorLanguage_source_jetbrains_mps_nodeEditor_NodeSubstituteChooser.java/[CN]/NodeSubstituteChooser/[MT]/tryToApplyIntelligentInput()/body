{
  final String pattern=getPatternEditor().getPattern();
  if (pattern.length() == 0) {
    return;
  }
  String prefix=pattern.substring(0,pattern.length() - 1);
  if (myNodeSubstituteInfo.hasExactlyNActions(pattern,false,0) && myNodeSubstituteInfo.hasExactlyNActions(prefix,true,1)) {
    INodeSubstituteAction action=myNodeSubstituteInfo.getMatchingActions(prefix,true).get(0);
    final SNode node=action.doSubstitute(prefix);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        CommandProcessor.instance().executeCommand(new Runnable(){
          public void run(){
            EditorCell cell=myEditorComponent.findNodeCell(node);
            myEditorComponent.changeSelection(cell);
            IntelligentInputUtil.processCell(cell,myEditorComponent.getEditorContext(),pattern);
          }
        }
);
      }
    }
);
  }
}
