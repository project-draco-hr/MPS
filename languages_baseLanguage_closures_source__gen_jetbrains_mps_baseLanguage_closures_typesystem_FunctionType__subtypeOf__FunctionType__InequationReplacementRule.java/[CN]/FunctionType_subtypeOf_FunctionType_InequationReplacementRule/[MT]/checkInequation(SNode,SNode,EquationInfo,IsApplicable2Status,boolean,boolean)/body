{
  boolean result_14532009=true;
{
    if (SNodeOperations.getConceptDeclaration(subtype) != SNodeOperations.getConceptDeclaration(supertype)) {
      result_14532009=false;
      return result_14532009;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() != ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).count()) {
      result_14532009=false;
      return result_14532009;
    }
    result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)_quotation_createNode_8k7qpx_a0c0b0b(SLinkOperations.getTarget(subtype,"resultType",true)),(SNode)SLinkOperations.getTarget(supertype,"resultType",true),true);
    if (SNodeOperations.isInstanceOf(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
{
        final SNode rightTerminate=SLinkOperations.getTarget(SNodeOperations.cast(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true);
        if (!(SNodeOperations.isInstanceOf(rightTerminate,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(SNodeOperations.cast(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true),(SNode)rightTerminate,true);
        }
      }
    }
{
      Iterator<SNode> paramTypeLeft_it=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
      Iterator<SNode> paramTypeRight_it=ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).iterator();
      SNode paramTypeLeft_var;
      SNode paramTypeRight_var;
      while (paramTypeLeft_it.hasNext() && paramTypeRight_it.hasNext()) {
        paramTypeLeft_var=paramTypeLeft_it.next();
        paramTypeRight_var=paramTypeRight_it.next();
        result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)paramTypeRight_var,(SNode)paramTypeLeft_var,true);
      }
    }
    SNode rightThrows=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
    ListSequence.fromList(SLinkOperations.getTargets(rightThrows,"argument",true)).addElement(_quotation_createNode_8k7qpx_a0a6a1a1());
    for (    SNode thr : ListSequence.fromList(SLinkOperations.getTargets(supertype,"throwsType",true))) {
      ListSequence.fromList(SLinkOperations.getTargets(rightThrows,"argument",true)).addElement(SNodeOperations.copyNode(thr));
    }
    for (    SNode leftThrows : ListSequence.fromList(SLinkOperations.getTargets(subtype,"throwsType",true))) {
      result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)leftThrows,(SNode)rightThrows,true);
    }
  }
  return result_14532009;
}
