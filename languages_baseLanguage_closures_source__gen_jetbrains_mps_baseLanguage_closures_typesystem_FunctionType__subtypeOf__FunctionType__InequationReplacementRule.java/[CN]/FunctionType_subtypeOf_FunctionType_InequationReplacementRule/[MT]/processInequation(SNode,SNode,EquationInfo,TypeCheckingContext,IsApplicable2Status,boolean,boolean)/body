{
  if (SNodeOperations.getConceptDeclaration(subtype) != SNodeOperations.getConceptDeclaration(supertype)) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"incompatible types","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1229719015332",null,errorTarget);
      HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
    }
    return;
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() != ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).count()) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"different parameter numbers","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201618945543",null,errorTarget);
      HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
    }
    return;
  }
{
    SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1858552893540404502",0,null);
    _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
    typeCheckingContext.createGreaterThanInequality((SNode)SLinkOperations.getTarget(supertype,"resultType",true),(SNode)new FunctionType_subtypeOf_FunctionType_InequationReplacementRule.QuotationClass_8k7qpx_a0a2a0().createNode(SLinkOperations.getTarget(subtype,"resultType",true),typeCheckingContext),false,true,inequalityIsLessThan,_info_12389875345);
  }
  if (SNodeOperations.isInstanceOf(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
{
      final SNode superTerminate=SLinkOperations.getTarget(SNodeOperations.cast(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true);
      typeCheckingContext.whenConcrete(superTerminate,new Runnable(){
        public void run(){
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(superTerminate),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
              SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
              EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1858552893540404499",0,null);
              _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
              typeCheckingContext.createGreaterThanInequality((SNode)typeCheckingContext.getExpandedNode(superTerminate),(SNode)SLinkOperations.getTarget(SNodeOperations.cast(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true),false,true,_info_12389875345);
            }
          }
        }
      }
,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1237814165989",false,false);
    }
  }
  Iterator<SNode> paramType1_it=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
  Iterator<SNode> paramType2_it=ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).iterator();
  SNode paramType1_var;
  SNode paramType2_var;
  while (paramType1_it.hasNext() && paramType2_it.hasNext()) {
    paramType1_var=paramType1_it.next();
    paramType2_var=paramType2_it.next();
{
      SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
      EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","6089229461614981805",0,null);
      _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
      typeCheckingContext.createLessThanInequality((SNode)paramType2_var,(SNode)paramType1_var,false,true,_info_12389875345);
    }
  }
  SNode join=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
  ListSequence.fromList(SLinkOperations.getTargets(join,"argument",true)).addElement(new FunctionType_subtypeOf_FunctionType_InequationReplacementRule.QuotationClass_8k7qpx_a0a0k0a().createNode(typeCheckingContext));
  for (  SNode superThrows : ListSequence.fromList(SLinkOperations.getTargets(supertype,"throwsType",true))) {
    ListSequence.fromList(SLinkOperations.getTargets(join,"argument",true)).addElement(SNodeOperations.copyNode(superThrows));
  }
  for (  SNode subThrows : ListSequence.fromList(SLinkOperations.getTargets(subtype,"throwsType",true))) {
{
      SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
      EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1858552893540404498",0,null);
      _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
      typeCheckingContext.createGreaterThanInequality((SNode)join,(SNode)subThrows,false,true,_info_12389875345);
    }
  }
}
