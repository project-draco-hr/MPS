{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("definition",new BaseReferenceConstraintsDescriptor("definition",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SLinkOperations.getTargets(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.as(SNodeOperations.getAncestorWhereConceptInList(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ui.structure.UIObjectStatement",true,false),new String[]{"jetbrains.mps.ui.structure.IUIObjectContextProvider","jetbrains.mps.baseLanguage.structure.IStatementListContainer"},false,false),"jetbrains.mps.ui.structure.IUIObjectContextProvider"),"virtual_getContainer_8923564134258257521",new Object[]{}),"requiredAspect",true);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_uubskl_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
