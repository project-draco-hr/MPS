{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0y.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptExtendsFacetReference;
      }
    break;
case 1:
  if (true) {
    return myConceptFacetDeclaration;
  }
break;
case 2:
if (true) {
return myConceptFacetJavaClassExpression;
}
break;
case 3:
if (true) {
return myConceptFacetReference;
}
break;
case 4:
if (true) {
return myConceptFacetReferenceExpression;
}
break;
case 5:
if (true) {
return myConceptForeignParametersComponentExpression;
}
break;
case 6:
if (true) {
return myConceptForeignParametersExpression;
}
break;
case 7:
if (true) {
return myConceptIFacet;
}
break;
case 8:
if (true) {
return myConceptIPropertyExpression;
}
break;
case 9:
if (true) {
return myConceptLocalParametersComponentExpression;
}
break;
case 10:
if (true) {
return myConceptLocalParametersExpression;
}
break;
case 11:
if (true) {
return myConceptNamedFacetReference;
}
break;
case 12:
if (true) {
return myConceptParametersDeclaration;
}
break;
case 13:
if (true) {
return myConceptRelatedFacetReference;
}
break;
case 14:
if (true) {
return myConceptResourceClassifierType;
}
break;
case 15:
if (true) {
return myConceptResourceSpecificPropertiesExpression;
}
break;
case 16:
if (true) {
return myConceptResourceTypeDeclaration;
}
break;
case 17:
if (true) {
return myConceptTargetDeclaration;
}
break;
case 18:
if (true) {
return myConceptTargetDependency;
}
break;
case 19:
if (true) {
return myConceptTargetReferenceExpression;
}
break;
default :
}
}
return null;
}
