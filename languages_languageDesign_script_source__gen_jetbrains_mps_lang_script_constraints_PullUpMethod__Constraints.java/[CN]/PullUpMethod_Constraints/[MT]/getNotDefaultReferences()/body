{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("oldMethodDeclaration",new BaseReferenceConstraintsDescriptor("oldMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8xrh0c_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode ancestor=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.lang.script.structure.ExtractInterfaceMigration",true,false);
            return new SimpleScope(ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(SLinkOperations.getTarget(ancestor,"oldClassifier",false))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
              }
            }
)){
              @Nullable public String getReferenceText(              @NotNull SNode target){
                return target.getName();
              }
            }
;
          }
        }
      }
;
    }
  }
);
  references.put("newMethodDeclaration",new BaseReferenceConstraintsDescriptor("newMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8xrh0c_a0a0a0a0a1a0b0a2a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode ancestor=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.lang.script.structure.ExtractInterfaceMigration",true,false);
            return new SimpleScope(ListSequence.fromList(IMemberContainer_Behavior.call_getMembers_1213877531970(SLinkOperations.getTarget(ancestor,"newClassifier",false))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
              }
            }
)){
              @Nullable public String getReferenceText(              @NotNull SNode target){
                return target.getName();
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
