{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(1071275047162102839l,-4887287056175405968l),849077997121870276l,4242940223545038298l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(1071275047162102839l,-4887287056175405968l),849077997121870276l,4242940223545038298l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8xrh0c_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode ancestor=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(new UUID(1071275047162102839l,-4887287056175405968l),6655357163912246425l,"jetbrains.mps.lang.script.structure.ExtractInterfaceMigration"),true,false);
            return new SimpleScope(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SLinkOperations.getTarget(ancestor,MetaAdapterFactory.getReferenceLink(new UUID(1071275047162102839l,-4887287056175405968l),6655357163912246425l,6655357163912246427l,"newClassifier")),"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
              }
            }
)){
              @Nullable @Override public String getReferenceText(              @NotNull SNode target){
                return target.getName();
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
