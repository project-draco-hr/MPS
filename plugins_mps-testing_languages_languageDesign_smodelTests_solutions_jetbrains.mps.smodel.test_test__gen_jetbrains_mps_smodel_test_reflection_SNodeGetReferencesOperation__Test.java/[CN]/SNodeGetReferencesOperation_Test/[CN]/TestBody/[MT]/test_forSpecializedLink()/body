{
  this.addNodeById("2906110183022219846");
  this.addNodeById("2906110183022219807");
  this.addNodeById("2906110183022219843");
  this.addNodeById("2906110183022354865");
  this.addNodeById("2906110183022432276");
  TestUtilities.assertEquals(Sequence.fromArray(new SNode[]{SNodeOperations.cast(this.getNodeById("2906110183022311236"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),34342663958604621l,"jetbrains.mps.lang.smodelTests.structure.ChildSubConcept"))}),Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),2854075155748534270l,"jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return SLinkOperations.findLinkDeclaration(it) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getReferenceLink(new UUID(-5752535300696554171l,-8216104078447456642l),8758390115028851398l,8758390115028851401l,"rightChild"));
    }
  }
).select(new ISelector<SReference,SNode>(){
    public SNode select(    SReference it){
      return SLinkOperations.getTargetNode(it);
    }
  }
));
  Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),2854075155748534270l,"jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return SLinkOperations.findLinkDeclaration(it) == ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNode("r:43b4d418-d4ca-4d97-ab07-31e4f3ddb3e5(jetbrains.mps.lang.smodelTests.structure)","2854075155748534270"),MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,1071489727083l,"linkDeclaration"))).first();
    }
  }
).isEmpty());
}
