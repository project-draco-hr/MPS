{
  this.addNodeById("2906110183022219846");
  this.addNodeById("2906110183022219807");
  this.addNodeById("2906110183022219843");
  this.addNodeById("2906110183022354865");
  this.addNodeById("2906110183022432276");
  TestUtilities.assertEquals(Sequence.fromArray(new SNode[]{SNodeOperations.cast(this.getNodeById("2906110183022311236"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),34342663958604621l,"jetbrains.mps.lang.smodelTests.structure.ChildSubConcept"))}),Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),2854075155748534270l,"jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return SLinkOperations.findLinkDeclaration(it) == SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer","rightChild");
    }
  }
).select(new ISelector<SReference,SNode>(){
    public SNode select(    SReference it){
      return SLinkOperations.getTargetNode(it);
    }
  }
));
  Assert.assertTrue(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.cast(this.getNodeById("2906110183022354866"),MetaAdapterFactory.getConcept(new UUID(-5752535300696554171l,-8216104078447456642l),2854075155748534270l,"jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept")))).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return SLinkOperations.findLinkDeclaration(it) == SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept","specializedRightChild");
    }
  }
).isEmpty());
}
