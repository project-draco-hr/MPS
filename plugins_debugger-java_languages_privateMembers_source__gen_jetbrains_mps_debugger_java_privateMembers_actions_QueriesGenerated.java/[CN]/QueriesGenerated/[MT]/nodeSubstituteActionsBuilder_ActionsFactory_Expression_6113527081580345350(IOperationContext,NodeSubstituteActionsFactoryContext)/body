{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.privateMembers.structure.PrivateStaticFieldReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          IClassifiersSearchScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.CLASSIFFIER);
          List<SNode> visibleClassifiers=(List<SNode>)searchScope.getClassifierNodes();
          List<SNode> classifiers=new ArrayList<SNode>();
          for (          SNode cls : visibleClassifiers) {
            ListSequence.fromList(classifiers).addElement(cls);
          }
          return classifiers;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x802088974572437dL,0xb50e8f050cba9566L,0x3900f3d0fb5b36c9L,"jetbrains.mps.debugger.java.privateMembers.structure.PrivateStaticFieldReference")),null);
              SLinkOperations.setTarget(result,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940c80846L,0x10a75869f9bL,"classifier"),(item));
              return result;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + ".";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "static access ^" + NodePresentationUtil.descriptionText((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
