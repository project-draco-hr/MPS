{
  BaseLanguageTextGen.classifierName(SLinkOperations.getTarget(node,"classifier",false),this);
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).isNotEmpty()) {
    this.append("<");
    if (ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).isNotEmpty()) {
      for (      SNode item : SLinkOperations.getTargets(node,"typeParameter",true)) {
        TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).last()) {
          this.append(", ");
        }
      }
    }
    this.append(">");
  }
  this.append("(");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).isNotEmpty()) {
    for (    SNode item : SLinkOperations.getTargets(node,"parameter",true)) {
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
      if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).last()) {
        this.append(", ");
      }
    }
  }
  this.append(")");
  if ((SLinkOperations.getTarget(node,"superclass",true) != null)) {
    this.append(" extends ");
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"superclass",true),this.getSNode());
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).isNotEmpty()) {
    this.append(" implements ");
    if (ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).isNotEmpty()) {
      for (      SNode item : SLinkOperations.getTargets(node,"implementedInterface",true)) {
        TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).last()) {
          this.append(", ");
        }
      }
    }
  }
  this.append(" {");
  this.increaseDepth();
  BaseClassConceptTextGen.body(node,this);
  this.decreaseDepth();
  this.appendWithIndent("}");
}
