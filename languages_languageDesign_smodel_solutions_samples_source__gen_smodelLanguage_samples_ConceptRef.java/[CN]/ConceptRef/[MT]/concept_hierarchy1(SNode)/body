{
  List<SNode> hierarchy=SConceptOperations.getConceptHierarchy(concept);
  List<SNode> supers_all=SConceptOperations.getAllSuperConcepts(concept,false);
  List<SNode> supers_all_inclusive=SConceptOperations.getAllSuperConcepts(concept,true);
  List<SNode> supers_direct=SConceptOperations.getDirectSuperConcepts(concept,false);
  List<SNode> supers_direct_inclusive=SConceptOperations.getDirectSuperConcepts(concept,true);
  boolean yes1=SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation"));
  boolean yes2=SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression")),SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation")));
  boolean yes3=SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"));
  boolean yes4=SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation")),SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression")));
  SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept),SNodeOperations.asSConcept(concept));
  SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(concept),SNodeOperations.asSConcept(concept));
}
