{
  super("convert loop labels");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "converting loops";
    }
    public String getAdditionalInfo(){
      return "converting loops";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AbstractForStatement";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (StringUtils.isNotEmpty(SPropertyOperations.getString(node,"label"))) {
        if ((SNodeOperations.getAncestor(node,"jetbrains.mps.lang.generator.structure.AbstractMacro",false,false) != null)) {
          return true;
        }
        if (SNodeOperations.getModel(node).getStereotype().equals(SModelStereotype.GENERATOR)) {
          return false;
        }
        return true;
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
      String labelValue=SPropertyOperations.getString(node,"label");
      if ((SLinkOperations.getTarget(node,"loopLabel",true) == null)) {
        SLinkOperations.setNewChild(node,"loopLabel","jetbrains.mps.baseLanguage.structure.LoopLabel");
      }
      SNode loopLabel=SLinkOperations.getTarget(node,"loopLabel",true);
      SPropertyOperations.set(loopLabel,"name",labelValue);
      SPropertyOperations.set(node,"label",null);
      for (      SNode breakStatement : SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.BreakStatement",false,new String[]{})) {
        if (StringUtils.isNotEmpty(SPropertyOperations.getString(breakStatement,"label"))) {
          if (SPropertyOperations.getString(breakStatement,"label").equals(labelValue)) {
            if ((SLinkOperations.getTarget(breakStatement,"loopLabelReference",true) == null)) {
              SLinkOperations.setNewChild(breakStatement,"loopLabelReference","jetbrains.mps.baseLanguage.structure.LoopLabelReference");
            }
            SLinkOperations.setTarget(SLinkOperations.getTarget(breakStatement,"loopLabelReference",true),"loopLabel",loopLabel,false);
            SPropertyOperations.set(breakStatement,"label",null);
          }
        }
      }
      for (      SNode continueStatement : SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.ContinueStatement",false,new String[]{})) {
        if (StringUtils.isNotEmpty(SPropertyOperations.getString(continueStatement,"label"))) {
          if (SPropertyOperations.getString(continueStatement,"label").equals(labelValue)) {
            if ((SLinkOperations.getTarget(continueStatement,"loopLabelReference",true) == null)) {
              SLinkOperations.setNewChild(continueStatement,"loopLabelReference","jetbrains.mps.baseLanguage.structure.LoopLabelReference");
            }
            SLinkOperations.setTarget(SLinkOperations.getTarget(continueStatement,"loopLabelReference",true),"loopLabel",loopLabel,false);
            SPropertyOperations.set(continueStatement,"label",null);
          }
        }
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "converting swicthes";
    }
    public String getAdditionalInfo(){
      return "converting swicthes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.SwitchStatement";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (StringUtils.isNotEmpty(SPropertyOperations.getString(node,"label"))) {
        if ((SNodeOperations.getAncestor(node,"jetbrains.mps.lang.generator.structure.AbstractMacro",false,false) != null)) {
          return true;
        }
        if (SNodeOperations.getModel(node).getStereotype().equals(SModelStereotype.GENERATOR)) {
          return false;
        }
        return true;
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
      String labelValue=SPropertyOperations.getString(node,"label");
      if ((SLinkOperations.getTarget(node,"switchLabel",true) == null)) {
        SLinkOperations.setNewChild(node,"switchLabel","jetbrains.mps.baseLanguage.structure.LoopLabel");
      }
      SNode loopLabel=SLinkOperations.getTarget(node,"switchLabel",true);
      SPropertyOperations.set(loopLabel,"name",labelValue);
      SPropertyOperations.set(node,"label",null);
      for (      SNode breakStatement : SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.BreakStatement",false,new String[]{})) {
        if (StringUtils.isNotEmpty(SPropertyOperations.getString(breakStatement,"label"))) {
          if (SPropertyOperations.getString(breakStatement,"label").equals(labelValue)) {
            if ((SLinkOperations.getTarget(breakStatement,"loopLabelReference",true) == null)) {
              SLinkOperations.setNewChild(breakStatement,"loopLabelReference","jetbrains.mps.baseLanguage.structure.LoopLabelReference");
            }
            SLinkOperations.setTarget(SLinkOperations.getTarget(breakStatement,"loopLabelReference",true),"loopLabel",loopLabel,false);
            SPropertyOperations.set(breakStatement,"label",null);
          }
        }
      }
      for (      SNode continueStatement : SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.ContinueStatement",false,new String[]{})) {
        if (StringUtils.isNotEmpty(SPropertyOperations.getString(continueStatement,"label"))) {
          if (SPropertyOperations.getString(continueStatement,"label").equals(labelValue)) {
            if ((SLinkOperations.getTarget(continueStatement,"loopLabelReference",true) == null)) {
              SLinkOperations.setNewChild(continueStatement,"loopLabelReference","jetbrains.mps.baseLanguage.structure.LoopLabelReference");
            }
            SLinkOperations.setTarget(SLinkOperations.getTarget(continueStatement,"loopLabelReference",true),"loopLabel",loopLabel,false);
            SPropertyOperations.set(continueStatement,"label",null);
          }
        }
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
