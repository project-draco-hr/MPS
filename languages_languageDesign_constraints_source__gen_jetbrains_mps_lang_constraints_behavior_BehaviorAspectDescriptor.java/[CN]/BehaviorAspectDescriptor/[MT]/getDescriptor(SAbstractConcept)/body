{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0mb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptConstraints__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myConceptParameter_ReferentSearchScope_enclosingNode__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myConstraintFunctionParameter_checkedNode__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myConstraintFunctionParameter_childConcept__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myConstraintFunctionParameter_childNode__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myConstraintFunctionParameter_containingLink__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myConstraintFunctionParameter_contextNode__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myConstraintFunctionParameter_contextRole__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myConstraintFunctionParameter_exists__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myConstraintFunctionParameter_inEditor__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myConstraintFunctionParameter_link__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myConstraintFunctionParameter_parentNode__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myConstraintFunctionParameter_position__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myConstraintFunctionParameter_smartReference__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myConstraintFunctionParameter_visible__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myConstraintFunction_CanBeAChild__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myConstraintFunction_CanBeAParent__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myConstraintFunction_CanBeARoot__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myConstraintFunction_CanBeAnAncestor__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myConstraintFunction_GetAlternativeIcon__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myConstraintFunction_GetInstanceIcon__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myConstraintFunction_PropertyGetter__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myConstraintFunction_PropertySetter__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myConstraintFunction_PropertyValidator__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myConstraintFunction_RefSetHandlerKeepsReference__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myConstraintFunction_ReferentSearchScope_AbstractBase__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myConstraintFunction_ReferentSearchScope_Factory__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myConstraintFunction_ReferentSearchScope_Presentation__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myConstraintFunction_ReferentSearchScope_Scope__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myConstraintFunction_ReferentSearchScope_Validator__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myConstraintFunction_ReferentSetHandler__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myConstraintsFunctionParameter_node__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myNodeDefaultSearchScope__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myNodePropertyConstraint__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myNodeReferentConstraint__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
