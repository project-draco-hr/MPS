{
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  ModelOutputStream mos=new ModelOutputStream(os);
  ArrayList<SNode> roots=new ArrayList<SNode>();
  for (Iterator<SNode> it=model.getRootNodes().iterator(); it.hasNext(); ) {
    roots.add(it.next());
  }
  mos.writeInt(44);
  new NodesWriter(model.getReference(),null).writeNodes(roots,mos);
  mos.close();
  final jetbrains.mps.smodel.SModel resultModel=new jetbrains.mps.smodel.SModel(PersistenceFacade.getInstance().createModelReference("smodel.long.name.for.testing"));
  ByteArrayInputStream is=new ByteArrayInputStream(os.toByteArray());
  ModelInputStream mis=new ModelInputStream(is);
  int version=mis.readInt();
  if (version != 44) {
    return null;
  }
  List<Pair<String,SNode>> resultRoots=new NodesReader(resultModel.getReference(),false).readNodes(mis);
  for (  Pair<String,SNode> root : resultRoots) {
    resultModel.addRootNode(root.o2);
  }
  SModelOperations.validateLanguagesAndImports(resultModel,false,false);
  SModelBase result=new SModelBase(resultModel.getReference(),new NullDataSource()){
    @Override public jetbrains.mps.smodel.SModel getSModelInternal(){
      return resultModel;
    }
    @Override public boolean isLoaded(){
      return true;
    }
    @Override public void unload(){
    }
  }
;
  resultModel.setModelDescriptor(result);
  return result;
}
