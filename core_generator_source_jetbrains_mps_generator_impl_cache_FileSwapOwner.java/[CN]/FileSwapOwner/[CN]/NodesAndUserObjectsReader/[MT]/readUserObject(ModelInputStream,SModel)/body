{
  int id=is.readInt();
switch (id) {
case NodesAndUserObjectsWriter.NODE_POINTER:
    return is.readNodePointer();
case NodesAndUserObjectsWriter.NODE_ID:
  return is.readNodeId();
case NodesAndUserObjectsWriter.MODEL_ID:
return is.readModelID();
case NodesAndUserObjectsWriter.MODEL_REFERENCE:
return is.readModelReference();
case NodesAndUserObjectsWriter.NODE:
SModel tmodel=null;
SModelReference modelRef=is.readModelReference();
SNodeId nodeId=is.readNodeId();
if (LOCAL.equals(modelRef)) {
tmodel=model;
}
 else {
SModelDescriptor mdesc=SModelRepository.getInstance().getModelDescriptor(modelRef);
if (mdesc != null) {
tmodel=mdesc.getSModel();
}
}
if (tmodel != null) {
return tmodel.getNodeById(nodeId);
}
 else {
throw new IOException("couldn't load user object");
}
case NodesAndUserObjectsWriter.SERIALIZABLE:
ObjectInputStream stream=new ObjectInputStream(is);
try {
return stream.readObject();
}
 catch (ClassNotFoundException e) {
throw new IOException(e);
}
}
throw new IOException("Could not read user object");
}
