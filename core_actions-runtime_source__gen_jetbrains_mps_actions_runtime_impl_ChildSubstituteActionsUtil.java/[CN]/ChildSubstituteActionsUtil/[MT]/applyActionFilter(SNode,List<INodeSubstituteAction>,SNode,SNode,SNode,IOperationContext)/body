{
  Set<SNode> conceptsToRemove=SetSequence.<SNode>fromSetWithValues(new HashSet<SNode>(),ListSequence.<SNode>fromList(SNodeOperations.getDescendants(builder,"jetbrains.mps.lang.actions.structure.RemovePart",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"conceptToRemove",false) != null);
    }
  }
).<SNode>select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"conceptToRemove",false);
    }
  }
));
  if (SetSequence.<SNode>fromSet(conceptsToRemove).isNotEmpty()) {
    for (Iterator<INodeSubstituteAction> it=ListSequence.<INodeSubstituteAction>fromList(actions).iterator(); it.hasNext(); ) {
      INodeSubstituteAction action=it.next();
      if (SetSequence.<SNode>fromSet(conceptsToRemove).contains(SNodeOperations.as(action.getOutputConcept(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
        it.remove();
      }
    }
  }
  for (  SNode removeByCondition : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(builder,"jetbrains.mps.lang.actions.structure.RemoveByConditionPart",false,new String[]{}))) {
    String methodName="removeActionsByCondition_" + removeByCondition.getSNodeId();
    try {
      QueryMethodGenerated.invoke(methodName,context,new RemoveSubstituteActionByConditionContext(ListSequence.<INodeSubstituteAction>fromList(actions).iterator(),parentNode,currentChild,childConcept),SNodeOperations.getModel(builder));
    }
 catch (    Throwable t) {
      LOG.error(t);
    }
  }
  return actions;
}
