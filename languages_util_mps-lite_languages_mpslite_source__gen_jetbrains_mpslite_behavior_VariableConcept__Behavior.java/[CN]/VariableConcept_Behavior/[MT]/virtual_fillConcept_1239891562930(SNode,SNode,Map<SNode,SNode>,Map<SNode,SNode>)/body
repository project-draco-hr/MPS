{
  SNode conceptDeclaration=((SNode)MapSequence.fromMap(conceptsToTargets).get(thisNode));
  SNode typeLink=SLinkOperations.addNewChild(conceptDeclaration,"linkDeclaration","jetbrains.mps.lang.structure.structure.LinkDeclaration");
  SPropertyOperations.set(typeLink,"metaClass","aggregation");
  SPropertyOperations.set(typeLink,"sourceCardinality","1");
  SPropertyOperations.set(typeLink,"role",SPropertyOperations.getString(thisNode,"typeRole"));
  SLinkOperations.setTarget(typeLink,"target",BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(thisNode,"typeConcept",true),"virtual_getConcept_1238594571574",new Object[]{conceptsToTargets}),false);
  SNode propertyDecl=SLinkOperations.addNewChild(conceptDeclaration,"propertyDeclaration","jetbrains.mps.lang.structure.structure.PropertyDeclaration");
  SLinkOperations.setTarget(propertyDecl,"dataType",SLinkOperations.getTarget(_quotation_createNode_mkovpu_a0a0h0c(),"dataType",false),false);
  SPropertyOperations.set(propertyDecl,"name",SPropertyOperations.getString(thisNode,"namePropertyName"));
  MapSequence.fromMap(partsToLinks).put(SLinkOperations.getTarget(thisNode,"typeConcept",true),typeLink);
  MapSequence.fromMap(partsToLinks).put(thisNode,propertyDecl);
}
