{
  super("Convert Attributes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert Attributes";
    }
    public String getAdditionalInfo(){
      return "Convert Attributes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.Attribute";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      return role != null && role.contains("$") && SNodeOperations.getContainingLinkDeclaration(node) != SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept","_$attribute");
    }
    public void doUpdateInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      if (role.indexOf("$link_attribute$") > 0) {
        String link=role.substring(role.indexOf("$link_attribute$") + "$link_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.LinkAttribute");
        if ((attribute == null)) {
        }
        SLinkOperations.setTarget(attribute,"link",SNodeOperations.as(SNodeOperations.getParent(node).getLinkDeclaration(link),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),false);
        if ((SLinkOperations.getTarget(attribute,"link",false) == null)) {
          LOG.error("No link declaration was found for link attribute " + role);
        }
      }
 else       if (role.indexOf("$property_attribute$") > 0) {
        String prop=role.substring(role.indexOf("$property_attribute$") + "$property_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.PropertyAttribute");
        if ((attribute == null)) {
        }
        SLinkOperations.setTarget(attribute,"property",SNodeOperations.as(SNodeOperations.getParent(node).getPropertyDeclaration(prop),"jetbrains.mps.lang.structure.structure.PropertyDeclaration"),false);
        if ((SLinkOperations.getTarget(attribute,"property",false) == null)) {
          LOG.error("No property declaration was found for property attribute " + role);
        }
      }
 else       if (role.endsWith("$attribute")) {
      }
      node.setRoleInParent("_$attribute");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert smodel attribute access operations";
    }
    public String getAdditionalInfo(){
      return "Convert smodel attribute access operations";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SConceptOperations.isSubConceptOf(ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node),"jetbrains.mps.lang.core.structure.Attribute");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode target=ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node);
      SNode attr=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AttributeAccess",null);
      if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.NodeAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.NodeAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else       if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.PropertyAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyRefQualifier")) {
          SNode prop=SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyRefQualifier");
          SNode propQ=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyQualifier",null);
          SLinkOperations.setTarget(propQ,"property",SLinkOperations.getTarget(prop,"property",false),false);
          SLinkOperations.setTarget(q,"propertyQualifier",propQ,true);
        }
 else         if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression")) {
          SLinkOperations.setTarget(q,"propertyQualifier",SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression"),true);
        }
 else {
          LOG.error("!!!");
        }
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else       if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.LinkAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier")) {
          SNode link=SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier");
          SNode linkQ=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkQualifier",null);
          SLinkOperations.setTarget(linkQ,"link",SLinkOperations.getTarget(link,"link",false),false);
          SLinkOperations.setTarget(q,"linkQualifier",linkQ,true);
        }
 else         if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression")) {
          SLinkOperations.setTarget(q,"linkQualifier",SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression"),true);
        }
 else {
          LOG.error("!!!");
        }
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else {
        LOG.error("!!!");
      }
      SNodeOperations.replaceWithAnother(node,attr);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
