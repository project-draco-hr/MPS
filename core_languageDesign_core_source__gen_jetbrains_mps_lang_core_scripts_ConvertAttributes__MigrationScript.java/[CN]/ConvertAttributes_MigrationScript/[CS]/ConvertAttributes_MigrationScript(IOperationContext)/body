{
  super("Convert Attributes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert Attributes";
    }
    public String getAdditionalInfo(){
      return "Convert Attributes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.Attribute";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      return role != null && role.contains("$") && SNodeOperations.getContainingLinkDeclaration(node) != SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept","_$attribute");
    }
    public void doUpdateInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      if (role.indexOf("$link_attribute$") > 0) {
        String link=role.substring(role.indexOf("$link_attribute$") + "$link_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.LinkAttribute");
        if ((attribute == null)) {
        }
        SLinkOperations.setTarget(attribute,"link",SNodeOperations.as(SNodeOperations.getParent(node).getLinkDeclaration(link),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),false);
        if ((SLinkOperations.getTarget(attribute,"link",false) == null)) {
          LOG.error("No link declaration was found for link attribute " + role);
        }
      }
 else       if (role.indexOf("$property_attribute$") > 0) {
        String prop=role.substring(role.indexOf("$property_attribute$") + "$property_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.PropertyAttribute");
        if ((attribute == null)) {
        }
        SLinkOperations.setTarget(attribute,"property",SNodeOperations.as(SNodeOperations.getParent(node).getPropertyDeclaration(prop),"jetbrains.mps.lang.structure.structure.PropertyDeclaration"),false);
        if ((SLinkOperations.getTarget(attribute,"property",false) == null)) {
          LOG.error("No property declaration was found for property attribute " + role);
        }
      }
 else       if (role.endsWith("$attribute")) {
      }
      node.setRoleInParent("_$attribute");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
