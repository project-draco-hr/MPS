{
  final DropBox<String> box=new DropBox<String>();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        while (true) {
          System.out.println("Received: " + box.retrieve());
        }
      }
 catch (      InterruptedException e) {
        System.out.println("Interrupted");
      }
    }
  }
);
  thread.start();
  final List<String> names=ListSequence.fromListAndArray(new ArrayList<String>(),"Joe","Dave","Alice");
{
    final CountDownLatch latch_n0c=new CountDownLatch(ListSequence.fromList(names).count());
    final List<Exception> exceptions_n0c=new CopyOnWriteArrayList<Exception>();
    for (    final String name : names) {
      final String localA=name;
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            try {
              box.store(localA);
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
 catch (          RuntimeException e) {
            ListSequence.fromList(exceptions_n0c).addElement(e);
          }
 finally {
            latch_n0c.countDown();
          }
        }
      }
;
      new Thread(runnable).start();
    }
    try {
      latch_n0c.await();
    }
 catch (    InterruptedException e) {
      ListSequence.fromList(exceptions_n0c).addElement(e);
    }
    if (ListSequence.fromList(exceptions_n0c).isNotEmpty()) {
      throw new ParallelLoopException("Some parallel calculations failed",exceptions_n0c);
    }
  }
  final String fixedValue=" fixed value ";
{
    final CountDownLatch latch_u0c=new CountDownLatch(ListSequence.fromList(names).count());
    final List<Exception> exceptions_u0c=new CopyOnWriteArrayList<Exception>();
    for (    final String name : names) {
      final String localA=name;
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            String finalString=localA + fixedValue.toUpperCase() + fixedFieldValue;
            log("Result: " + finalString);
          }
 catch (          RuntimeException e) {
            ListSequence.fromList(exceptions_u0c).addElement(e);
          }
 finally {
            latch_u0c.countDown();
          }
        }
      }
;
      new Thread(runnable).start();
    }
    try {
      latch_u0c.await();
    }
 catch (    InterruptedException e) {
      ListSequence.fromList(exceptions_u0c).addElement(e);
    }
    if (ListSequence.fromList(exceptions_u0c).isNotEmpty()) {
      throw new ParallelLoopException("Some parallel calculations failed",exceptions_u0c);
    }
  }
  thread.interrupt();
}
