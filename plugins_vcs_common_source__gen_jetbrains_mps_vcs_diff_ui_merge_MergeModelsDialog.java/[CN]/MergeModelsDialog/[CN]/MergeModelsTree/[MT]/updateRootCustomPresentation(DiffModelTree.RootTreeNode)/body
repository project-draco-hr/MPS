{
  final MergeSession session=(rootTreeNode.getRootId() == null ? myMetadataMergeSession : myMergeSession);
  List<ModelChange> changes=Sequence.fromIterable(((rootTreeNode.getRootId() == null ? myMetadataMergeSession.getAllChanges() : myMergeSession.getChangesForRoot(rootTreeNode.getRootId())))).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return !(session.isChangeResolved(ch));
    }
  }
).toListSequence();
  int conflictedCount=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return Sequence.fromIterable(session.getConflictedWith(ch)).isNotEmpty();
    }
  }
).count();
  int nonConflictedCount=ListSequence.fromList(changes).count() - conflictedCount;
  ChangeType compositeChangeType=null;
  rootTreeNode.setTooltipText(generateUnresolvedChangesText(ListSequence.fromList(changes).count(),conflictedCount));
  if (conflictedCount != 0) {
    compositeChangeType=ChangeType.CONFLICTED;
    rootTreeNode.setAdditionalText("with conflicts");
  }
 else {
    if (nonConflictedCount == 0) {
      if (rootTreeNode.getRootId() != null && myMergeSession.getResultModel().getNodeById(rootTreeNode.getRootId()) == null) {
        rootTreeNode.setTextStyle(SimpleTextAttributes.STYLE_STRIKEOUT);
      }
    }
 else {
      compositeChangeType=ChangeType.CHANGE;
      if (ListSequence.fromList(changes).all(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange ch){
          return ch instanceof AddRootChange || ch instanceof DeleteRootChange;
        }
      }
)) {
        compositeChangeType=ListSequence.fromList(changes).first().getType();
      }
      int myChangesCount=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange ch){
          return session.isMyChange(ch);
        }
      }
).count();
      if (myChangesCount == nonConflictedCount) {
        rootTreeNode.setAdditionalText("local");
      }
 else       if (myChangesCount == 0) {
        rootTreeNode.setAdditionalText("remote");
      }
 else {
        rootTreeNode.setAdditionalText("both modified");
      }
    }
  }
  if (compositeChangeType != null) {
    rootTreeNode.setColor(ChangeColors.getForTree(compositeChangeType));
  }
}
