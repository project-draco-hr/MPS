{
  MapSequence.<Node,Integer>fromMap(myDfsState).put(node,DURING);
  BiconnectedComponent nextComponent=component;
  if (from != null) {
    int lowNum=MapSequence.<Node,Integer>fromMap(myNum).get(MapSequence.<Node,Node>fromMap(myLow).get(node));
    Node source=from.getOpposite(node);
    int sourceNum=MapSequence.<Node,Integer>fromMap(myNum).get(source);
    if (lowNum < sourceNum) {
      component.addNode(node);
    }
 else     if (lowNum == sourceNum) {
      nextComponent=new BiconnectedComponent();
      nextComponent.addNode(source);
      nextComponent.addNode(node);
      component.addComponent(nextComponent,source);
    }
 else {
      nextComponent=new BiconnectedComponent();
      nextComponent.addNode(node);
      component.addComponent(nextComponent,from);
    }
  }
 else {
    component.addNode(node);
  }
  for (  Edge edge : ListSequence.<Edge>fromList(node.getEdges())) {
    Node next=edge.getOpposite(node);
    if (MapSequence.<Node,Integer>fromMap(myDfsState).get(next) == BEFORE) {
      dfs(next,edge,nextComponent);
    }
  }
}
