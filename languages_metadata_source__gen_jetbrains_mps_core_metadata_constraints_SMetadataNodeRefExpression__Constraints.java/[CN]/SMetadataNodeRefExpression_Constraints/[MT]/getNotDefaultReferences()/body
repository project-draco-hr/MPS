{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return BaseConcept_Behavior.call_getPresentation_1213877396640(_context.getParameterNode());
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_dldhj3_a0a2a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode arg=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.core.metadata.structure.SConceptAnnotationArgument",true,false);
            if (arg == null) {
              return new EmptyScope();
            }
            SNode parameter=SConceptAnnotationArgument_Behavior.call_getParameter_7891765471710147477(arg);
            if (SNodeOperations.isInstanceOf(parameter,"jetbrains.mps.core.metadata.structure.SConceptAnnotationNodeRef")) {
              SNode type=SLinkOperations.getTarget(SNodeOperations.cast(parameter,"jetbrains.mps.core.metadata.structure.SConceptAnnotationNodeRef"),"target",false);
              if (type != null) {
                LOG.error("ok: for " + SAbstractConcept_Behavior.call_getQualifiedName_7891765471710491510(type));
                return new ModelPlusImportedScope(_context.getModel(),false,operationContext.getScope(),SAbstractConcept_Behavior.call_getQualifiedName_7891765471710491510(type));
              }
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
