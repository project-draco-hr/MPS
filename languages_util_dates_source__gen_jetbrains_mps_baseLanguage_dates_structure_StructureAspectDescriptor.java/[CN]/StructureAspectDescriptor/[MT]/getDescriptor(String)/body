{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.AbsDateTimeMinusOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.AllTimeZonesConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.CeilingDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConditionalFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"conditionPair"});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConstantTimeZoneRef","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"zone"},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConvertToDateTimeOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConvertToDurationOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaCalendarOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaDateOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ConvertToJodaDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateFormat","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.datesInternal.structure.IDateFormat"},new String[]{"dateFormatVisibility"},new String[]{},new String[]{"token"});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"dateFormat"});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"compareType"},new String[]{"datetimeProperty"},new String[]{"op1","op2"});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"datetimeProperty"},new String[]{"leftValue","rightValue"});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusPeriodOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"leftValue","rightValue"});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken"},new String[]{},new String[]{},new String[]{"durationTypeReference","referenceTime"});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimePlusPeriodOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"leftValue","rightValue"});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimePropertyFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken"},new String[]{},new String[]{"dateTimePropertyFormatConfiguration","dateTimePropertyFormatType"},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimePropetyReferenceOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{"dateTimeProperty"},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithPropertyOperation","jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"dateTimeProperty"},new String[]{"expression"});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithTZType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"string"});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DefaultTimeZoneConstant","jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant"},new String[]{},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DurationType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.DurationTypeReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"durationType"},new String[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FixedLocaleFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken"},new String[]{},new String[]{"locale","dateFormat"},new String[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FloorDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FormatDateTimeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{"dateFormat","locale"},new String[]{"datetime"});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FormatExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"dateFormat","locale"},new String[]{"dateExpression","zone"});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FormatPeriodExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{"format","locale"},new String[]{"period"});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.FormatToken","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.InTimezoneExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{},new String[]{"datetime","timezone"});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"locale"},new String[]{"datetime","formatToken"});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.InlineFormatExpression","jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"withLocale"},new String[]{"locale"},new String[]{"formatToken","zone"});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.LiteralFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken"},new String[]{"value"},new String[]{},new String[]{});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"leftExpression","rightExpression"});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.MaxDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.MinDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.NeverExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.NotNullOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.NowExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.NullOperation","jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation"},new String[]{},new String[]{},new String[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ParseDateTimeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{"dateFormat","locale"},new String[]{"source","zone","default"});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ParseExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"dateFormat","locale"},new String[]{"source","zone","default"});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"dateTimeProperty"},new String[]{"count"});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodFormat","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.datesInternal.structure.IPeriodFormat"},new String[]{"visibility"},new String[]{},new String[]{"token"});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatsTable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"periodFormat"});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"datetimeProperty"},new String[]{"datetime"});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"absolute"},new String[]{"datetimeProperty"},new String[]{"datetime"});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodLiteralFormatToken","jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"},new String[]{"value"},new String[]{},new String[]{});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodPropertyFormatToken","jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"},new String[]{"prefix","prefixPlural","suffix","suffixPlural","minDigits","zeroHandling"},new String[]{"property"},new String[]{});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodReferenceFormatToken","jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"},new String[]{},new String[]{"format"},new String[]{});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodSeparatorFormatToken","jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"},new String[]{"kind","text","lastText"},new String[]{},new String[]{});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.PeriodType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ReferenceFormatToken","jetbrains.mps.baseLanguage.dates.structure.FormatToken",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.FormatToken"},new String[]{},new String[]{"dateFormat"},new String[]{});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation","jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"precision"},new String[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.ScheduleLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"second","minute","hour","dayOfWeek","dayOfMonth"},new String[]{"schedulePeriod","month"},new String[]{});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{"second","minute","hour","day","year"},new String[]{"month"},new String[]{"timezone"});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{});
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"string"});
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"timezone_id"},new String[]{},new String[]{});
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIdOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{});
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneNameOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"property"},new String[]{"locale"},new String[]{"instant"});
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"offsetmillis"},new String[]{},new String[]{});
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TokenCondition","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{});
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TokenCondition_datetimeToFormat","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{});
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.TokenConditionalPair","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"format"},new String[]{"condition"});
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.UTCTimeZoneConstant","jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant",false,new String[]{"jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant"},new String[]{},new String[]{},new String[]{});
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"datetime"});
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.dates.structure.WithPropertyCompareExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"datetimeProperty"},new String[]{"operation"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
