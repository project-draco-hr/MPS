{
  Set<SNode> roots=new HashSet<SNode>();
  for (  SNode applicableNodeReference : SNodeOperations.getDescendants(inferenceRule,"jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeReference",false)) {
    if (SLinkOperations.getTarget(applicableNodeReference,"applicableNode",false) == SLinkOperations.getTarget(inferenceRule,"applicableNode",true)) {
      roots.add(applicableNodeReference);
    }
  }
  int prevSize=dependencies.size();
  int leavesSize=leaves.size();
  for (  SNode root : roots) {
    dependencies.put(root,null);
  }
  while (dependencies.size() > prevSize || leaves.size() > leavesSize) {
    prevSize=dependencies.size();
    leavesSize=leaves.size();
    for (    SNode node : new HashSet<SNode>(dependencies.keySet())) {
      SNode parent=SNodeOperations.getParent(node,null,false,false);
      do {
        SNode matchedNode_1194538774943=parent;
{
          boolean matches_1194538774945=false;
          matches_1194538774945=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.bootstrap.helgins.structure.TypeOfExpression");
          if (matches_1194538774945) {
            if (!(roots.contains(node))) {
              leaves.add(node);
            }
            break;
          }
        }
{
          boolean matches_1194538897614=false;
          matches_1194538897614=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
          if (matches_1194538897614) {
            if (SLinkOperations.getTarget(matchedNode_1194538774943,"rValue",true) == node) {
              dependencies.put(SLinkOperations.getTarget(matchedNode_1194538774943,"lValue",true),new Pair<SNode,INodeGetter>(node,new INodeGetter(){
                public SNode getNode(                SNode p0){
                  SNode assignmentExpression;
                  SNode n;
                  n=p0.getParent();
                  assignmentExpression=n;
                  return SLinkOperations.getTarget(assignmentExpression,"rValue",true);
                }
              }
));
            }
            break;
          }
        }
{
          boolean matches_1194539042393=false;
          matches_1194539042393=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression");
          if (matches_1194539042393) {
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(matchedNode_1194538774943,"nodeOperation",true),"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
              SNode sLinkAccess=SLinkOperations.getTarget(matchedNode_1194538774943,"nodeOperation",true);
              if (SLinkOperations.getTarget(matchedNode_1194538774943,"leftExpression",true) == node && SPropertyOperations.hasValue(SLinkOperations.getTarget(sLinkAccess,"link",false),"metaClass","aggregation",null)) {
                SNode operationExpression=SNodeOperations.getParent(sLinkAccess,null,false,false);
                dependencies.put(operationExpression,new Pair<SNode,INodeGetter>(node,new INodeGetter(){
                  public SNode getNode(                  SNode p0){
                    return p0.getParent();
                  }
                }
));
              }
            }
            break;
          }
        }
        if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.VariableReference")) {
          dependencies.put(SLinkOperations.getTarget(node,"variableDeclaration",false),new Pair<SNode,INodeGetter>(node,new INodeGetter(){
            public SNode getNode(            SNode p0){
              SNode n=p0;
              SNode variableReference=n;
              return SLinkOperations.getTarget(variableReference,"variableDeclaration",false);
            }
          }
));
        }
      }
 while (false);
    }
  }
}
