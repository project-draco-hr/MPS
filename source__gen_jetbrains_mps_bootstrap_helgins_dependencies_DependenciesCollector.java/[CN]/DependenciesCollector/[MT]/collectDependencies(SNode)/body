{
  Set<SNode> possibleDependencies=new HashSet<SNode>();
  for (  SNode applicableNodeReference : SNodeOperations.getDescendants(inferenceRule,"jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeReference",false)) {
    if (SLinkOperations.getTarget(applicableNodeReference,"applicableNode",false) == SLinkOperations.getTarget(inferenceRule,"applicableNode",true)) {
      possibleDependencies.add(applicableNodeReference);
    }
  }
  Set<SNode> dependenciesViaTypeOfExpressions=new HashSet<SNode>();
  int prevSize=0;
  while (possibleDependencies.size() > prevSize) {
    prevSize=possibleDependencies.size();
    for (    SNode node : possibleDependencies) {
      SNode parent=SNodeOperations.getParent(node,null,false,false);
      do {
        SNode matchedNode_1194538774943=parent;
{
          boolean matches_1194538774945=false;
          matches_1194538774945=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.bootstrap.helgins.structure.TypeOfExpression");
          if (matches_1194538774945) {
            dependenciesViaTypeOfExpressions.add(matchedNode_1194538774943);
            break;
          }
        }
{
          boolean matches_1194538897614=false;
          matches_1194538897614=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
          if (matches_1194538897614) {
            if (SLinkOperations.getTarget(matchedNode_1194538774943,"rValue",true) == node) {
              possibleDependencies.add(matchedNode_1194538774943);
            }
            break;
          }
        }
{
          boolean matches_1194539042393=false;
          matches_1194539042393=SModelUtil_new.isAssignableConcept(parent.getConceptFqName(),"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess");
          if (matches_1194539042393) {
{
              SNode operationExpression=SNodeOperations.getParent(matchedNode_1194538774943,null,false,false);
              if (SLinkOperations.getTarget(operationExpression,"leftExpression",true) == node) {
                possibleDependencies.add(operationExpression);
              }
            }
            break;
          }
        }
      }
 while (false);
    }
  }
}
