{
  if (myRules_all.containsKey(concept))   return;
  List<ConceptDeclaration> hierarchy=new LinkedList<ConceptDeclaration>();
  while (concept != null) {
    hierarchy.add(concept);
    if (myRules_all.containsKey(concept)) {
      break;
    }
    myRules_applicableInheritor.put(concept,new LinkedList<Reduction_MappingRule>());
    concept=getExtendedConcept(concept,baseConcept);
  }
  Collections.reverse(hierarchy);
  List<Reduction_MappingRule> rulesForInheritor=null;
  for (  ConceptDeclaration hrrConcept : hierarchy) {
    rulesForInheritor=updateRulesForInheritor(hrrConcept,rulesForInheritor);
    List<Reduction_MappingRule> list=myRules_applicableExactly.get(hrrConcept);
    if (list != null) {
      for (      Reduction_MappingRule rule : list) {
        if (rule.getApplyToConceptInheritors()) {
          rulesForInheritor.add(rule);
        }
      }
    }
  }
  for (  ConceptDeclaration hrrConcept : hierarchy) {
    if (myRules_all.containsKey(hrrConcept)) {
      continue;
    }
    myRules_all.put(hrrConcept,new LinkedList<Reduction_MappingRule>());
    List<Reduction_MappingRule> rulesExectly=myRules_applicableExactly.get(hrrConcept);
    if (rulesExectly != null) {
      myRules_all.get(hrrConcept).addAll(rulesExectly);
    }
    myRules_all.get(hrrConcept).addAll(myRules_applicableInheritor.get(hrrConcept));
  }
}
