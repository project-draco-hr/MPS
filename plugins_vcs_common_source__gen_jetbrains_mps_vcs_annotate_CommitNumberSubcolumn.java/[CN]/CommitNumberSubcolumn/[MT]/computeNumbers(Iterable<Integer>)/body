{
  myRevisionsToNumbers=MapSequence.fromMap(new HashMap<VcsRevisionNumber,Integer>());
  final Map<VcsRevisionNumber,VcsFileRevision> revisionNumberToRevision=MapSequence.fromMap(new HashMap<VcsRevisionNumber,VcsFileRevision>());
  for (  VcsFileRevision rev : ListSequence.fromList(myFileAnnotation.getRevisions())) {
    MapSequence.fromMap(revisionNumberToRevision).put(rev.getRevisionNumber(),rev);
  }
  List<VcsRevisionNumber> revisionNumbers=SetSequence.fromSet(SetSequence.fromSetWithValues(new HashSet<VcsRevisionNumber>(),Sequence.fromIterable(fileLines).select(new ISelector<Integer,VcsRevisionNumber>(){
    public VcsRevisionNumber select(    Integer fl){
      return myFileAnnotation.getLineRevisionNumber(fl);
    }
  }
))).sort(new ISelector<VcsRevisionNumber,Comparable<?>>(){
    public Comparable<?> select(    VcsRevisionNumber rn){
      return MapSequence.fromMap(revisionNumberToRevision).get(rn).getRevisionDate();
    }
  }
,true).toListSequence();
  revisionNumbers=ListSequence.fromList(revisionNumbers).sort(new ISelector<VcsRevisionNumber,Comparable<?>>(){
    public Comparable<?> select(    VcsRevisionNumber rn){
      return check_efout7_a0a0a0a0f0b(MapSequence.fromMap(revisionNumberToRevision).get(rn));
    }
  }
,true).toListSequence();
  for (int i=0; i < ListSequence.fromList(revisionNumbers).count(); i++) {
    MapSequence.fromMap(myRevisionsToNumbers).put(ListSequence.fromList(revisionNumbers).getElement(i),i + 1);
  }
}
