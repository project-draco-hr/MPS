{
  for (  SNode child : SNodeOperations.getChildren(loopStatement)) {
    if (child.getRole().equals("body")) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(child,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      result.add(child);
    }
    List<SNode> moreChildren=new ArrayList<SNode>();
    if (SNodeOperations.isInstanceOf(loopStatement,"jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop")) {
      ListSequence.fromList(moreChildren).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(loopStatement,"jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop"),"loopVariable",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"variable",true) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"variable",true);
        }
      }
));
    }
    for (    SNode child_ : moreChildren) {
      result.add(child_);
    }
  }
  SNode containingLoop=SNodeOperations.as(LocalVariablesScope.findThisOrParent(SNodeOperations.getParent(loopStatement),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement")),"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement");
  if (containingLoop != null) {
    this._populateLocalVariables(containingLoop,result);
  }
}
