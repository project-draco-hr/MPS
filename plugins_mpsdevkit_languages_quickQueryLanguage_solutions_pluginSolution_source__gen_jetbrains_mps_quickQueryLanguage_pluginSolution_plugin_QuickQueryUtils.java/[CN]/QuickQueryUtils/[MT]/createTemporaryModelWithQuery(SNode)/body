{
  SNode conceptToFind=SLinkOperations.getTarget(query,"conceptDeclaration",false);
  SModel tempModel=TemporaryModels.getInstance().create("QQTempModel_" + System.nanoTime(),false,TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
  tempModel.addRootNode(query);
  ((SModelInternal)tempModel).addDevKit(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("fbc25dd2-5da4-483a-8b19-70928e1b62d7")).getModuleReference());
  Set<Language> languagesForImport=SetSequence.fromSet(new HashSet<Language>());
  SetSequence.fromSet(languagesForImport).addElement(BootstrapLanguages.collectionsLanguage());
  SetSequence.fromSet(languagesForImport).addElement(SModelUtil.getDeclaringLanguage(conceptToFind));
  SetSequence.fromSet(languagesForImport).addElement((Language)MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("d745e97c-8235-4470-b086-ba3da1f4c03c")));
  for (  Language language : SetSequence.fromSet(languagesForImport)) {
    ((AbstractModule)tempModel.getModule()).addDependency(language.getModuleReference(),false);
    ((AbstractModule)tempModel.getModule()).addUsedLanguage(language.getModuleReference());
    ((SModelInternal)tempModel).addLanguage(language.getModuleReference());
  }
  TemporaryModels.getInstance().addMissingModuleImports(tempModel);
  return tempModel;
}
