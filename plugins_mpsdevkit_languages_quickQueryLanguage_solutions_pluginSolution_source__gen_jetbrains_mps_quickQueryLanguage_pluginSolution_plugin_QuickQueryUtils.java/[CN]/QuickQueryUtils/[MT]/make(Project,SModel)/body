{
  final IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"),new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
  Future<Boolean> result=ApplicationManager.getApplication().executeOnPooledThread(new Callable<Boolean>(){
    public Boolean call() throws Exception {
      IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(){
        @Override public <T extends IOption>T relayQuery(        IQuery<T> query){
          return query.defaultOption();
        }
      }
,new IJobMonitor.Stub());
      IOperationContext projectOperationContext=new ProjectOperationContext(project);
      MakeSession session=new MakeSession(projectOperationContext,null,true);
      if (IMakeService.INSTANCE.get().openNewSession(session)) {
        Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(projectOperationContext,Sequence.<SModel>singleton(model)).resources(false),scr,ctl);
        return future.get().isSucessful();
      }
      return false;
    }
  }
);
  try {
    return result.get();
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  ExecutionException e) {
    return false;
  }
}
