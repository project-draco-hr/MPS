{
  for (  SNode annotationInstance : SLinkOperations.getChildren(SLinkOperations.getTarget(baseMethodCall,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1188208481402l,1188208488637l,"annotation"))) {
    if (SLinkOperations.getTarget(annotationInstance,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1188207840427l,1188208074048l,"annotation")) == SLinkOperations.getTarget(_quotation_createNode_j1qutw_a0a0a0a1(),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"))) {
      if (!(RulesUtil.withinInferenceItem(baseMethodCall))) {
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(baseMethodCall,"inference method should be called only within inference rules","r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)","1196178341653",null,errorTarget);
      }
      return;
    }
 else     if (SLinkOperations.getTarget(annotationInstance,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1188207840427l,1188208074048l,"annotation")) == SLinkOperations.getTarget(_quotation_createNode_j1qutw_a0a0a0a0b(),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"))) {
      if (!(RulesUtil.withinCheckingItem(baseMethodCall))) {
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(baseMethodCall,"checking method should be called only within checking methods and inference rules","r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)","5239146621999661342",null,errorTarget);
      }
      return;
    }
  }
}
