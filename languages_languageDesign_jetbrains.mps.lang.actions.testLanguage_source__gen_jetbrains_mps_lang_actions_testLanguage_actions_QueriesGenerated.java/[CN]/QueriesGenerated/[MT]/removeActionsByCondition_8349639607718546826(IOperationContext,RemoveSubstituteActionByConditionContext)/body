{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild");
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        boolean tmpVar=_context.getParentNode() != null;
        tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
        tmpVar=tmpVar && concept != null;
        tmpVar=tmpVar && _context.getChildConcept() != null;
        tmpVar=tmpVar && _context.getModel() != null;
        tmpVar=tmpVar && operationContext != null;
        return concept == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1");
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
