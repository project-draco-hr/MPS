{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final StringHolder firstMatchingText=new Computable<StringHolder>(){
    public StringHolder compute(){
      boolean tmpVar=_context.getParentNode() != null;
      tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
      tmpVar=tmpVar && _context.getChildConcept() != null;
      tmpVar=tmpVar && _context.getModel() != null;
      tmpVar=tmpVar && operationContext != null;
      return new StringHolder();
    }
  }
.compute();
{
    boolean tmpVar=_context.getParentNode() != null;
    tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
    tmpVar=tmpVar && _context.getChildConcept() != null;
    tmpVar=tmpVar && _context.getModel() != null;
    tmpVar=tmpVar && operationContext != null;
    firstMatchingText.matchingText="newChild1";
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && model != null;
          tmpVar=tmpVar && operationContext != null;
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1",null);
          SLinkOperations.addNewChild(result,"child1","jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child");
          return result;
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          return ListSequence.fromList(SLinkOperations.getTargets(createdNode,"child1",true)).first();
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && strictly;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && operationContext != null;
          return (strictly ? firstMatchingText.matchingText.equals(pattern) : firstMatchingText.matchingText.startsWith(pattern));
        }
        public String getDescriptionText(        String pattern){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && operationContext != null;
          return "Description of " + firstMatchingText.matchingText;
        }
        public String getMatchingText(        String pattern){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && operationContext != null;
          return firstMatchingText.matchingText;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
        public SNode getIconNode(        String pattern){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && operationContext != null;
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
        }
        public SNode getActionType(        String pattern){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && operationContext != null;
          return _quotation_createNode_mw8afp_a8a0a0a();
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SConceptOperations.createNewNode("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept",null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return false;
        }
        public String getMatchingText(        String pattern){
          return "newChild2_fake_filtered";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SConceptOperations.createNewNode("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2",null);
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          boolean tmpVar=pattern != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && createdNode != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && model != null;
          tmpVar=tmpVar && operationContext != null;
          tmpVar=tmpVar && editorContext != null;
          editorContext.flushEvents();
          EditorCell createdNodeCell=editorContext.getEditorComponent().findNodeCell(createdNode);
          if (createdNodeCell != null) {
            EditorCell firstLeaf=CellTraversalUtil.getFirstLeaf(createdNodeCell);
            editorContext.getEditorComponent().changeSelection(firstLeaf);
            if (firstLeaf instanceof EditorCell_Label) {
              ((EditorCell_Label)firstLeaf).setCaretPosition(3);
            }
            return null;
          }
          return createdNode;
        }
        public String getDescriptionText(        String pattern){
          return "NewChild2 description text";
        }
        public String getMatchingText(        String pattern){
          return "newChild2";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
        public SNode getActionType(        String pattern){
          return _quotation_createNode_mw8afp_a0a0a1a();
        }
      }
);
    }
  }
  return result;
}
