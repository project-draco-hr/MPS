{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1");
      final boolean[] returnSmallPartResult=new boolean[]{false};
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          boolean tmpVar=nodeToWrap != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && model != null;
          tmpVar=tmpVar && operationContext != null;
          tmpVar=tmpVar && editorContext != null;
          String name=SPropertyOperations.getString(nodeToWrap,"name");
          SNode wrapperNode=SConceptOperations.createNewNode("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper",null);
          SLinkOperations.setTarget(wrapperNode,"childToWrap",nodeToWrap,true);
          return wrapperNode;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          boolean tmpVar=_context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getModel() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && operationContext != null;
          tmpVar=tmpVar && nodeToWrap != null;
          String name=SPropertyOperations.getString(nodeToWrap,"name");
          return SNodeOperations.isInstanceOf(nodeToWrap,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2");
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,editorContext);
          return ((returnSmallPartResult[0]=returnSmallPart(nc)) ? nc : wrappedNode);
        }
      }
;
      for (      SubstituteAction substituteAction : ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext))) {
        ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(substituteAction){
          @Override public SNode substitute(          @Nullable EditorContext editorContext,          String pattern){
            SNode substitutionResult=super.substitute(editorContext,pattern);
            if (returnSmallPartResult[0]) {
              return substitutionResult;
            }
            return setupSelection(substitutionResult,substitutionResult.getModel(),pattern,editorContext);
          }
          private SNode setupSelection(          SNode createdNode,          SModel model,          String pattern,          EditorContext editorContext){
            boolean tmpVar=_context.getParentNode() != null;
            tmpVar=tmpVar && createdNode != null;
            tmpVar=tmpVar && _context.getChildConcept() != null;
            tmpVar=tmpVar && model != null;
            tmpVar=tmpVar && operationContext != null;
            tmpVar=tmpVar && editorContext != null;
            String name=SPropertyOperations.getString(SLinkOperations.getTarget(createdNode,"childToWrap",true),"name");
            editorContext.flushEvents();
            EditorCell createdNodeCell=editorContext.getEditorComponent().findNodeCell(createdNode);
            if (createdNodeCell != null) {
              EditorCell firstLeaf=CellTraversalUtil.getFirstLeaf(createdNodeCell);
              editorContext.getEditorComponent().changeSelection(firstLeaf);
              if (firstLeaf instanceof EditorCell_Label) {
                ((EditorCell_Label)firstLeaf).setCaretPosition(2);
              }
              return null;
            }
            return createdNode;
          }
        }
);
      }
    }
  }
  return result;
}
