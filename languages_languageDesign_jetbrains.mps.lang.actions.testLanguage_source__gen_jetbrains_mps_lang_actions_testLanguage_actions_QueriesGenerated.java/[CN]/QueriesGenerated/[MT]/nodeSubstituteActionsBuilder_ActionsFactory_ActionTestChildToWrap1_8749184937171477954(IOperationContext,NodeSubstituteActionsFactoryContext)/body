{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1"),_context.getModel());
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return SConceptOperations.createNewNode(NameUtil.nodeFQName((item)),null);
            }
            @Override protected SNode selectChildNode(            SNode createdNode,            SModel model,            String pattern,            EditorContext editorContext){
              editorContext.flushEvents();
              EditorCell createdNodeCell=editorContext.getEditorComponent().findNodeCell(createdNode);
              if (createdNodeCell != null) {
                EditorCell firstLeaf=CellTraversalUtil.getFirstLeaf(createdNodeCell);
                editorContext.getEditorComponent().changeSelection(firstLeaf);
                if (firstLeaf instanceof EditorCell_Label) {
                  ((EditorCell_Label)firstLeaf).setCaretPosition(5);
                }
                return null;
              }
              return createdNode;
            }
          }
);
        }
      }
    }
  }
  return result;
}
