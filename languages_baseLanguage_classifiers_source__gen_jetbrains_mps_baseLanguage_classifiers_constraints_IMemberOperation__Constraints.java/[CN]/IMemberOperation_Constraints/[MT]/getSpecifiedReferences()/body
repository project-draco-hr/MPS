{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x443f4c36fcf54eb6L,0x95008d06ed259e3eL,0x118bca97396L,0x118bcb657ecL,"member"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x443f4c36fcf54eb6L,0x95008d06ed259e3eL,0x118bca97396L,0x118bcb657ecL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
          List<SNode> applicableMembers=new ArrayList<SNode>();
{
            IMatchingPattern pattern_dyvyal_c0a0=HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x443f4c36fcf54eb6L,0x95008d06ed259e3eL,0x118bc77d845L,"jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType"));
            SNode coercedNode_dyvyal_c0a0=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(operand),pattern_dyvyal_c0a0);
            if (coercedNode_dyvyal_c0a0 != null) {
              for (              SNode member : ListSequence.fromList(BaseClassifierType__BehaviorDescriptor.getMembers_idhEwINC$.invoke(coercedNode_dyvyal_c0a0,_context.getEnclosingNode()))) {
                if (SNodeOperations.isInstanceOf(member,SNodeOperations.asSConcept(_context.getLinkTarget())) && (boolean)IMember__BehaviorDescriptor.canBeReferent_id762MQfghnJQ.invoke(member,_context.getLinkTarget())) {
                  ListSequence.fromList(applicableMembers).addElement(member);
                }
              }
            }
 else {
            }
          }
          return applicableMembers;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_dyvyal_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
