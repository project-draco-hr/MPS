{
  HashMap<SNode,SNode> mapping=new HashMap<SNode,SNode>();
  SNode nodeCopyRoot=CopyUtil.copy(CollectionUtil.list(myParentNode.getContainingRoot()),mapping).get(0);
  SModel auxModel=nodeCopyRoot.getModel();
  if (!nodeCopyRoot.isRoot()) {
    auxModel.addRoot(nodeCopyRoot);
  }
  String role=SModelUtil_new.getGenuineLinkRole(myLinkDeclaration);
  AbstractConceptDeclaration target=myLinkDeclaration.getTarget();
  SNode hole=null;
  if (target instanceof ConceptDeclaration) {
    hole=SModelUtil_new.instantiateConceptDeclaration((ConceptDeclaration)target,auxModel).getNode();
  }
 else {
    hole=new SNode(auxModel,"jetbrains.mps.lang.core.BaseConcept");
  }
  SNode parentCopy=mapping.get(myParentNode);
  parentCopy.addChild(role,hole);
  InequationSystem inequationsForHole=TypeChecker.getInstance().getInequationsForHole(hole);
  auxModel.removeRoot(nodeCopyRoot);
  return inequationsForHole;
}
