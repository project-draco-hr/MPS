{
  super("Migration from map to collections");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "MapMigration";
    }
    public String getAdditionalInfo(){
      return "MapMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,2,ListSequence.<SNode>fromArray(SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~Map"),SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~HashMap")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.MapType",null);
      SLinkOperations.setTarget(result,"keyType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).first()),true);
      SLinkOperations.setTarget(result,"valueType",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).last()),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Get ";
    }
    public String getAdditionalInfo(){
      return "Get ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForMap(node,"get",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.MapElement",null);
      SLinkOperations.setTarget(operation,"key",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"map",SLinkOperations.getTarget(SNodeOperations.getParent(node),"operand",true),true);
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Put ";
    }
    public String getAdditionalInfo(){
      return "Put ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForMap(node,"put",ListSequence.<ParameterType>fromArray(ParameterType.NOT_INT,ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode assignment=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AssignmentExpression",null);
      SNode operation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.MapElement",null);
      SLinkOperations.setTarget(operation,"key",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first()),true);
      SLinkOperations.setTarget(operation,"map",SLinkOperations.getTarget(SNodeOperations.getParent(node),"operand",true),true);
      SLinkOperations.setTarget(assignment,"lValue",operation,true);
      SLinkOperations.setTarget(assignment,"rValue",SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).last()),true);
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),assignment);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "values ";
    }
    public String getAdditionalInfo(){
      return "values ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForMap(node,"values",ListSequence.<ParameterType>fromArray());
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode values=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation",null);
      SNodeOperations.replaceWithAnother(node,values);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "HashMap";
    }
    public String getAdditionalInfo(){
      return "HashMap";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ObjectUtils.equals(SPropertyOperations.getString(SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)),"name"),"HashMap") && ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).count() == 2 && ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).count() == 0;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator",null);
      SLinkOperations.setTarget(result,"keyType",ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).first(),true);
      SLinkOperations.setTarget(result,"valueType",ListSequence.fromList(SLinkOperations.getTargets(node,"typeParameter",true)).last(),true);
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
