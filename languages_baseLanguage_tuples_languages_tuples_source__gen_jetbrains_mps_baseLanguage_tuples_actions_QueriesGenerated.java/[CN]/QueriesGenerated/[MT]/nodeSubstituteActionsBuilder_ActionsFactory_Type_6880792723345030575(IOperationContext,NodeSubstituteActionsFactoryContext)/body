{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12099dc1365L,"jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return ListSequence.fromList(SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x1208fa48aa5L,"jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration"))).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ntd){
              return VisibilityUtil.isVisible(_context.getParentNode(),ntd);
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return _quotation_createNode_n0gwsk_a0a0a0a((item));
            }
            public String getMatchingText(            String pattern){
              return BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getPresentation_1213877396640",new Object[]{}) + " type";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
