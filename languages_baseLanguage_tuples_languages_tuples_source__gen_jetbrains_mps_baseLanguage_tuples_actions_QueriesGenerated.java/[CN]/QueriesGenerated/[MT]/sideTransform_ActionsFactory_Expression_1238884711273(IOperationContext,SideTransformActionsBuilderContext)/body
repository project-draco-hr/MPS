{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode mae=SNodeOperations.replaceWithAnother(_context.getSourceNode(),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression")),null));
      SLinkOperations.setTarget(mae,MetaAdapterFactory.getContainmentLink(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,0x12071ad5056L,"tuple"),_context.getSourceNode());
      return mae;
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "access tuple member by index";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression").getDeclarationNode(),null));
    }
  }
);
  return result;
}
