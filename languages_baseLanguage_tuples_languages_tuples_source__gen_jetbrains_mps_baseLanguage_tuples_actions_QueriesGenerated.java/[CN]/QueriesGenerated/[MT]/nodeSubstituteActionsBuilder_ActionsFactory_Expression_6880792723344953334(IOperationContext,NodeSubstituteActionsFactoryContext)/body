{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),"jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration")).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ntd){
              return VisibilityUtil.isVisible(_context.getParentNode(),ntd);
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              _FunctionTypes._return_P1_E0<? extends SNode,? super SNode> toRef=new _FunctionTypes._return_P1_E0<SNode,SNode>(){
                public SNode invoke(                SNode cmp){
                  return _quotation_createNode_zhyrwg_a0a0a0a0a0a(cmp);
                }
              }
;
              return _quotation_createNode_zhyrwg_a1a0a0a(ListSequence.fromList(NamedTupleDeclaration_Behavior.call_allExtends_3142843783245461132((item))).reversedList().translate(new ITranslator2<SNode,SNode>(){
                public Iterable<SNode> translate(                SNode ntd){
                  return SLinkOperations.getTargets(ntd,"component",true);
                }
              }
).select(toRef).toListSequence(),(item));
            }
            public String getMatchingText(            String pattern){
              return BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getPresentation_1213877396640",new Object[]{}) + " literal";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
