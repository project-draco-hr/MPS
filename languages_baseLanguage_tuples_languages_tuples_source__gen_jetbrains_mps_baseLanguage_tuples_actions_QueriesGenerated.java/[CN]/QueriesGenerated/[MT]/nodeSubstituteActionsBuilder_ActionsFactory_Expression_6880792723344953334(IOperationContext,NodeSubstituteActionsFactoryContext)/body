{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration")).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ntd){
              return VisibilityUtil.isVisible(_context.getParentNode(),ntd);
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              _FunctionTypes._return_P1_E0<? extends SNode,? super SNode> toRef=new _FunctionTypes._return_P1_E0<SNode,SNode>(){
                public SNode invoke(                SNode cmp){
                  return new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a0a0a0a0a0a2a2a0a1a5().createNode(cmp);
                }
              }
;
              return new QueriesGenerated.QuotationClass_x583g4_a0b0a0a0a0a0a0c0c0a0b0f().createNode(ListSequence.fromList(SLinkOperations.getTargets((item),"component",true)).select(toRef).toListSequence(),(item));
            }
            public String getMatchingText(            String pattern){
              return BaseConcept_Behavior.call_getPresentation_1213877396640((item)) + " literal";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
