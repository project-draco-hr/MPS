{
  Iterable<SModel.Problem> pr=problems;
  if (Sequence.fromIterable(pr).any(new IWhereFilter<SModel.Problem>(){
    public boolean accept(    SModel.Problem it){
      return it.isError();
    }
  }
)) {
    boolean isSave=Sequence.fromIterable(pr).any(new IWhereFilter<SModel.Problem>(){
      public boolean accept(      SModel.Problem it){
        return it.isError() && it.getKind() == SModel.Problem.Kind.Save;
      }
    }
);
    String problemText=IterableUtils.join(Sequence.fromIterable(pr).where(new IWhereFilter<SModel.Problem>(){
      public boolean accept(      SModel.Problem it){
        return it.isError();
      }
    }
).select(new ISelector<SModel.Problem,String>(){
      public String select(      SModel.Problem it){
        return "error: " + it.getText();
      }
    }
).take(3),"<br/>");
    String message=String.format("<p>Cannot %s model %s.<br/>%s</p>",(isSave ? "save" : "load"),model.getModelName(),problemText);
    Notifications.Bus.notify(new Notification("Model Persistence",(isSave ? "Save Failure" : "Load Failure"),message,NotificationType.WARNING));
  }
}
