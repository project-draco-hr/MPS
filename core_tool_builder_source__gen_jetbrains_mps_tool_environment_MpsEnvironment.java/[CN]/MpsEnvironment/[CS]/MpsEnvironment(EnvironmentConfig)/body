{
  this.config=config;
  ActiveEnvironment.activateEnvironment(this);
  BasicConfigurator.configure(new ConsoleAppender(new SimpleLayout()));
  Logger.getRootLogger().setLevel(Level.INFO);
  MpsPlatform.init();
  RuntimeFlags.setTestMode(true);
  GenerationSettingsProvider.getInstance().setGenerationSettings(new DefaultModifiableGenerationSettings());
  try {
    EnvironmentUtils.setSystemProperties(false);
    EnvironmentUtils.setPluginPath();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  Map<String,String> macros=MapSequence.fromMap(new HashMap<String,String>());
  for (  String name : MapSequence.fromMap(config.macros()).keySet()) {
    MapSequence.fromMap(macros).put(name,MapSequence.fromMap(config.macros()).get(name).getAbsolutePath());
  }
  macroProvider=EnvironmentUtils.createMapMacrosProvider(macros);
  PathMacros.getInstance().addMacrosProvider(macroProvider);
  libContributors=SetSequence.fromSetWithValues(new HashSet<LibraryContributor>(),createLibContributors(config));
  for (  LibraryContributor libContributor : Sequence.fromIterable(libContributors)) {
    LibraryInitializer.getInstance().addContributor(libContributor);
  }
  ModelAccess.instance().runWriteAction(new Runnable(){
    @Override public void run(){
      LibraryInitializer.getInstance().update();
    }
  }
);
}
