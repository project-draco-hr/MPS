{
  byte[] conflictStart=CONFLICT_START.getBytes();
  byte[] conflictEnd=CONFLICT_END.getBytes();
  byte[] conflictSeparator=CONFLICT_SEPARATOR.getBytes();
  if (args.length < 4) {
    System.err.println("Usage <merger> --<vcs> <base> <current> <other> " + "[<base name> <current name> <other name>]");
    System.exit(2);
  }
  File baseFile=new File(args[1]);
  File currentFile=new File(args[2]);
  File otherFile=new File(args[3]);
  boolean overwrite=false;
  if (SVN_OPTION.equals(args[0])) {
    if (args.length >= 7) {
      conflictStart=(CONFLICT_START + " " + args[5]).getBytes();
      conflictEnd=(CONFLICT_END + " " + args[6]).getBytes();
    }
  }
 else   if (GIT_OPTION.equals(args[0])) {
    overwrite=true;
  }
 else {
    System.exit(2);
    return;
  }
  configureLog4j();
  MPSCore.getInstance().init();
  MPSPersistence.getInstance().init();
  String systemPath=new File(System.getProperty(LOG_PROPERTY)).getParentFile().getParentFile().getAbsolutePath();
  MergeDriverBackupUtil.setMergeBackupDirPath(systemPath + File.separator + "merge-backup");
  File[] files={baseFile,currentFile,otherFile};
  AbstractContentMerger merger=selectMerger(files);
  if (merger == null) {
    merger=(SVN_OPTION.equals(args[0]) ? new TextMerger() : new SimpleMerger());
  }
  boolean convertCRLF=GIT_OPTION.equals(args[0]) && !(hasCRLF(Sequence.fromIterable(Sequence.fromArray(files)).findFirst(new IWhereFilter<File>(){
    public boolean accept(    File f){
      return f != null;
    }
  }
)));
  int status=FileMerger.mergeFiles(merger,baseFile,currentFile,otherFile,conflictStart,conflictEnd,conflictSeparator,overwrite,convertCRLF);
  System.exit(status);
}
