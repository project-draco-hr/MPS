{
  FileType fileType=Sequence.fromIterable(Sequence.fromArray(files)).select(new ISelector<File,FileType>(){
    public FileType select(    File f){
      return FileType.get(filetype,f);
    }
  }
).findFirst(new IWhereFilter<FileType>(){
    public boolean accept(    FileType f){
      return f != null;
    }
  }
);
  if (fileType == null) {
    return null;
  }
switch (fileType) {
case MODEL_HEADER:
case MODEL_ROOT:
case MODEL:
    return new CompositeMerger(new ModelMerger((filetype != null ? filetype : fileType.getSuffix())),new SimpleMerger());
case LANGUAGE:
case SOLUTION:
case DEVKIT:
case PROJECT:
  return new CompositeMerger(new TextMerger(),new SimpleMerger());
case TRACE_CACHE:
case GENERATOR_DEPENDENCIES:
return new EmptyMerger();
case JAVA_DEPENDENCIES:
return new JavaDependenciesMerger();
default :
return new TextMerger();
}
}
