{
  final List<String> params=ListSequence.fromList(new ArrayList<String>());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      ClassRunner.this.addJavaCommand(params);
      ClassRunner.this.addClassPath(params,node);
      if (vmParams != null && StringUtils.isNotEmpty(vmParams)) {
        String[] paramList=ClassRunner.this.splitParams(vmParams);
        ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
      }
      ListSequence.fromList(params).addElement(className);
      if (programParams != null && StringUtils.isNotEmpty(programParams)) {
        String[] paramList=ClassRunner.this.splitParams(programParams);
        ListSequence.fromList(params).addSequence(Sequence.fromIterable(Sequence.fromArray(paramList)));
      }
      ClassRunner.this.myProcessBuilder=new ProcessBuilder(params);
      if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
        ClassRunner.this.myProcessBuilder.directory(new File(workingDir));
      }
    }
  }
);
  try {
    return this.myProcessBuilder.start();
  }
 catch (  IOException e) {
    LOG.error("Can't run class " + className + ": "+ e.getMessage(),e);
    throw new ProcessNotCreatedException(e.getMessage(),e,this.getCommandLine(workingDir));
  }
}
