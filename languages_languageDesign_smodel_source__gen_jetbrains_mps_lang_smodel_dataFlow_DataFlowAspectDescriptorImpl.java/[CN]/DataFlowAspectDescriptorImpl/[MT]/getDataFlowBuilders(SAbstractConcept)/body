{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_vhxjlb_a0b.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<IDataFlowBuilder>singletonList(new AbstractTypeCastExpression_DataFlow());
      }
    break;
case 1:
  if (true) {
    return Collections.<IDataFlowBuilder>singletonList(new AttributeAccess_DataFlow());
  }
break;
case 2:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ConceptSwitchStatement_DataFlow());
}
break;
case 3:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Concept_IsSubConceptOfOperation_DataFlow());
}
break;
case 4:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Concept_IsSuperConceptOfOperation_DataFlow());
}
break;
case 5:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new ExactConceptCase_DataFlow());
}
break;
case 6:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new IfInstanceOfStatement_DataFlow());
}
break;
case 7:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new IfInstanceOfVarReference_DataFlow());
}
break;
case 8:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new LinkAttributeQualifier_DataFlow());
}
break;
case 9:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new Node_IsInstanceOfOperation_DataFlow());
}
break;
case 10:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PoundExpression_DataFlow());
}
break;
case 11:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new PropertyAttributeQualifier_DataFlow());
}
break;
case 12:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SNodeOperation_DataFlow());
}
break;
case 13:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SemanticDowncastExpression_DataFlow());
}
break;
case 14:
if (true) {
return Collections.<IDataFlowBuilder>singletonList(new SubconceptCase_DataFlow());
}
break;
default :
}
}
return Collections.<IDataFlowBuilder>emptyList();
}
