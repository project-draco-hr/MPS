{
  if (operationContext == null) {
    return;
  }
  AbstractConceptDeclaration concept=((AbstractConceptDeclaration)SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(node)));
  for (  SReference ref : SNodeOperations.getReferences(node)) {
    SNode target=SLinkOperations.getTargetNode(ref);
    SNode ld=SLinkOperations.findLinkDeclaration(ref);
    LinkDeclaration linkDeclaration=((LinkDeclaration)SNodeOperations.getAdapter(ld));
    if ((target == null) || linkDeclaration == null) {
      continue;
    }
    component.addDependency(target);
    component.addDependency(linkDeclaration.getNode());
    String linkRole=SModelUtil_new.getGenuineLinkRole(linkDeclaration);
    final SNode linkTarget=SLinkOperations.getTarget(ld,"target",false);
    final INodeReferentSearchScopeProvider scopeProvider=ModelConstraintsUtil.getSearchScopeProvider(concept,linkRole);
    SearchScopeStatus searchScopeStatus=component.runCheckingAction(new _FunctionTypes._return_P0_E0<SearchScopeStatus>(){
      public SearchScopeStatus invoke(){
        return ModelConstraintsUtil.createSearchScope(scopeProvider,SNodeOperations.getModel(node),SNodeOperations.getParent(node),node,linkTarget,operationContext);
      }
    }
);
    if (searchScopeStatus.isError()) {
      component.addError(node,searchScopeStatus.getMessage(),(SNode)null,new ReferenceMessageTarget(SLinkOperations.getRole(ref)));
    }
 else     if (!(searchScopeStatus.isDefault() || searchScopeStatus.getSearchScope().isInScope(target))) {
      String name=target.getName();
      component.addError(node,"reference" + ((name == null ? "" : " " + name)) + " ("+ SLinkOperations.getRole(ref)+ ") is out of search scope",searchScopeStatus.getReferenceValidatorNode(),new ReferenceMessageTarget(SLinkOperations.getRole(ref)));
    }
  }
}
