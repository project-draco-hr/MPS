{
  myEditorComponent=editorComponent;
  CurrentDifferenceRegistry.getInstance(project).getCommandQueue().runTask(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
synchronized (myDisposedLock) {
            if (myDisposed) {
              return;
            }
            SNode editedNode=editorComponent.getEditedNode();
            if (editedNode == null || editedNode.isDisposed()) {
              return;
            }
            final SModel model=editedNode.getModel();
            SModelDescriptor descriptor=(model != null ? model.getModelDescriptor() : null);
            if (descriptor instanceof EditableSModelDescriptor) {
              myCurrentDifference=CurrentDifferenceRegistry.getInstance(project).getCurrentDifference((EditableSModelDescriptor)descriptor);
              myListener=new ChangesEditorHighlighter.MyCurrentDifferenceListener();
            }
            if (myListener != null) {
              myCurrentDifference.setEnabled(true);
              ChangeSet changeSet=myCurrentDifference.getChangeSet();
              if (changeSet != null) {
                ListSequence.fromList(changeSet.getModelChanges()).visitAll(new IVisitor<ModelChange>(){
                  public void visit(                  ModelChange c){
                    createMessages(c);
                  }
                }
);
              }
synchronized (myChangesMessages) {
                Sequence.fromIterable(MapSequence.fromMap(myChangesMessages).values()).visitAll(new IVisitor<List<ChangeEditorMessage>>(){
                  public void visit(                  List<ChangeEditorMessage> messages){
                    ListSequence.fromList(messages).visitAll(new IVisitor<ChangeEditorMessage>(){
                      public void visit(                      ChangeEditorMessage m){
                        getHighlightManager().mark(m);
                      }
                    }
);
                  }
                }
);
              }
              getHighlightManager().repaintAndRebuildEditorMessages();
              ThreadUtils.runInUIThreadNoWait(new Runnable(){
                public void run(){
                  myStripsPainter=new ChangeStripsPainter(ChangesEditorHighlighter.this);
                  myEditorComponent.getLeftEditorHighlighter().addFoldingAreaPainter(myStripsPainter);
                  myStripsPainter.relayout();
                }
              }
);
              myCurrentDifference.addDifferenceListener(myListener);
            }
          }
        }
      }
);
    }
  }
);
}
