{
  ModelAccess.assertLegalWrite();
  if (existsModule(module.getModuleReference())) {
    throw new IllegalStateException("Couldn't add module \"" + module.getModuleFqName() + "\" : this module is already registered with this very owner: "+ owner);
  }
  String moduleFqName=module.getModuleFqName();
  if (myFqNameToModulesMap.containsKey(moduleFqName)) {
    IModule m=myFqNameToModulesMap.get(moduleFqName);
    LOG.error("duplicate module name " + moduleFqName + " : module with the same UID exists at "+ m.getDescriptorFile()+ " and "+ module.getDescriptorFile(),m);
  }
  myFqNameToModulesMap.put(moduleFqName,module);
  ModuleId moduleId=module.getModuleReference().getModuleId();
  if (moduleId != null) {
    if (myIdToModuleMap.containsKey(moduleId)) {
      LOG.warning("duplicate module name " + module.getModuleReference() + " module with the same id already exists "+ myIdToModuleMap.get(moduleId).getModuleReference());
    }
    myIdToModuleMap.put(module.getModuleReference().getModuleId(),module);
  }
  myModuleToOwners.addLink(module,owner);
  myModules.add(module);
  fireModuleAdded(module);
}
