{
  AbstractModule module=null;
  try {
    Class<? extends IModule> cls=myExtensionsToModuleTypes.get(extension);
    module=(AbstractModule)registerModule(dir,owner,cls);
    for (    String sourceDir : module.getSourcePaths()) {
      excludes.add(FileSystem.getFile(sourceDir));
    }
    if (module.getGeneratorOutputPath() != null) {
      excludes.add(BaseModelCache.getCachesDir(module,module.getGeneratorOutputPath()));
    }
    if (module.getTestsGeneratorOutputPath() != null) {
      excludes.add(BaseModelCache.getCachesDir(module,module.getTestsGeneratorOutputPath()));
    }
    for (    SModelRoot root : module.getSModelRoots()) {
      excludes.add(FileSystem.getFile(root.getPath()));
    }
    if (module.getClassesGen() != null) {
      excludes.add(module.getClassesGen());
    }
    for (    StubPath sp : module.getStubPaths()) {
      excludes.add(FileSystem.getFile(sp.getPath()));
    }
  }
 catch (  Throwable t) {
    LOG.error("Fail to load module from descriptor " + dir.getAbsolutePath(),t);
  }
  return module;
}
