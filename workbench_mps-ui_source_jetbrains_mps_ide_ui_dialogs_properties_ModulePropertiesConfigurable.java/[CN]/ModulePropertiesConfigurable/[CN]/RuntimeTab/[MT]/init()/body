{
  JPanel usedLangsTab=new JPanel();
  usedLangsTab.setLayout(new GridLayoutManager(2,1,INSETS,-1,-1));
  final JBTable runtimeTable=new JBTable();
  runtimeTable.setShowHorizontalLines(false);
  runtimeTable.setShowVerticalLines(false);
  runtimeTable.setAutoCreateRowSorter(false);
  runtimeTable.setAutoscrolls(true);
  runtimeTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myRuntimeTableModel=new RuntimeTableModel();
  runtimeTable.setModel(myRuntimeTableModel);
  final SRepository contextRepo=new ModelComputeRunnable<SRepository>(new GetModuleRepo(myModule)).runRead(myProject.getModelAccess());
  runtimeTable.setDefaultRenderer(SModuleReference.class,new ModuleTableCellRender(contextRepo));
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(runtimeTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      Iterable<SModule> modules=new ConditionalIterable<SModule>(getProjectModules(),new ModuleInstanceCondition(Solution.class));
      modules=new ConditionalIterable<SModule>(modules,new VisibleModuleCondition());
      ComputeRunnable<List<SModuleReference>> c=new ComputeRunnable<List<SModuleReference>>(new ModuleCollector(modules));
      myProject.getModelAccess().runReadAction(c);
      List<SModuleReference> list=CommonChoosers.showModuleSetChooser(myProject,"Choose solutions",c.getResult());
      for (      SModuleReference reference : list) {
        myRuntimeTableModel.addItem(reference);
      }
    }
  }
).setRemoveAction(new RemoveEntryAction(runtimeTable)).addExtraAction(new FindAnActionButton(runtimeTable){
    @Override public void actionPerformed(    AnActionEvent e){
      List<SModuleReference> modules=new ArrayList<SModuleReference>();
      for (      int row : runtimeTable.getSelectedRows()) {
        modules.add(myRuntimeTableModel.getValueAt(row));
      }
      findModuleUsages(modules);
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new TableColumnSearch(runtimeTable,0).setComparator(new SpeedSearchComparator(false,true));
  final JBTable accessoriesTable=new JBTable();
  accessoriesTable.setShowHorizontalLines(false);
  accessoriesTable.setShowVerticalLines(false);
  accessoriesTable.setAutoCreateRowSorter(false);
  accessoriesTable.setAutoscrolls(true);
  accessoriesTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myAccessoriesModelsTableModel=new AccessoriesModelsTableModel();
  accessoriesTable.setModel(myAccessoriesModelsTableModel);
  accessoriesTable.setDefaultRenderer(SModelReference.class,new ModelTableCellRender());
  ToolbarDecorator decoratorForAccessories=ToolbarDecorator.createDecorator(accessoriesTable);
  decoratorForAccessories.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<SModelReference> list=new ModelChooser(myProject).compute();
      for (      SModelReference reference : list) {
        myAccessoriesModelsTableModel.addItem(reference);
      }
    }
  }
).setRemoveAction(new RemoveEntryAction(accessoriesTable)).addExtraAction(new FindAnActionButton(accessoriesTable){
    @Override public void actionPerformed(    AnActionEvent e){
      List<SModelReference> models=new ArrayList<SModelReference>();
      for (      int row : accessoriesTable.getSelectedRows()) {
        models.add(myAccessoriesModelsTableModel.getValueAt(row));
      }
      findModelUsages(models);
    }
  }
);
  decoratorForAccessories.setPreferredSize(new Dimension(500,150));
  table=decoratorForAccessories.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new TableColumnSearch(accessoriesTable,0).setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(usedLangsTab);
}
