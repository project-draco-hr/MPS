{
  JPanel usedLangsTab=new JPanel();
  usedLangsTab.setLayout(new GridLayoutManager(2,1,INSETS,-1,-1));
  final JBTable runtimeTable=new JBTable();
  runtimeTable.setShowHorizontalLines(false);
  runtimeTable.setShowVerticalLines(false);
  runtimeTable.setAutoCreateRowSorter(false);
  runtimeTable.setAutoscrolls(true);
  myRuntimeTableModel=new RuntimeTableModel();
  runtimeTable.setModel(myRuntimeTableModel);
  runtimeTable.setDefaultRenderer(ModuleReference.class,new ModuleTableCellRender());
  runtimeTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(runtimeTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<ModuleReference> list=(new SolutionChooser()).compute();
      for (      ModuleReference reference : list)       myRuntimeTableModel.addItem(reference);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(runtimeTable);
      myRuntimeTableModel.fireTableDataChanged();
    }
  }
).addExtraAction(new FindAnActionButton(runtimeTable){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myRuntimeTableModel.getValueAt(runtimeTable.getSelectionModel().getMinSelectionIndex(),0));
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new SpeedSearchBase<JBTable>(runtimeTable){
    @Override public int getSelectedIndex(){
      return runtimeTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return runtimeTable.convertRowIndexToModel(viewIndex);
    }
    @Override public Object[] getAllElements(){
      final int count=myRuntimeTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myRuntimeTableModel.getValueAt(idx);
      }
      return elements;
    }
    @Override public String getElementText(    Object element){
      if (!(element instanceof ModuleReference))       return "";
      return ((ModuleReference)element).getModuleName();
    }
    @Override public void selectElement(    Object element,    String selectedText){
      final int count=myRuntimeTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myRuntimeTableModel.getValueAt(row))) {
          final int viewRow=runtimeTable.convertRowIndexToView(row);
          runtimeTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(runtimeTable);
          break;
        }
      }
    }
  }
.setComparator(new SpeedSearchComparator(false,true));
  final JBTable accessoriesTable=new JBTable();
  accessoriesTable.setShowHorizontalLines(false);
  accessoriesTable.setShowVerticalLines(false);
  accessoriesTable.setAutoCreateRowSorter(false);
  accessoriesTable.setAutoscrolls(true);
  myAccessoriesModelsTableModel=new AccessoriesModelsTableModel();
  accessoriesTable.setModel(myAccessoriesModelsTableModel);
  accessoriesTable.setDefaultRenderer(SModelReference.class,new ModelTableCellRender(MPSModuleRepository.getInstance().getModuleById(myModuleDescriptor.getId()).getScope()));
  accessoriesTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decoratorForAccessories=ToolbarDecorator.createDecorator(accessoriesTable);
  decoratorForAccessories.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<jetbrains.mps.smodel.SModelReference> list=(new ModelChooser()).compute();
      for (      jetbrains.mps.smodel.SModelReference reference : list)       myAccessoriesModelsTableModel.addItem(reference);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(accessoriesTable);
      myAccessoriesModelsTableModel.fireTableDataChanged();
    }
  }
).addExtraAction(new FindAnActionButton(accessoriesTable){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myAccessoriesModelsTableModel.getValueAt(accessoriesTable.getSelectionModel().getMinSelectionIndex(),0));
    }
  }
);
  decoratorForAccessories.setPreferredSize(new Dimension(500,150));
  table=decoratorForAccessories.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  new SpeedSearchBase<JBTable>(accessoriesTable){
    @Override public int getSelectedIndex(){
      return accessoriesTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return accessoriesTable.convertRowIndexToModel(viewIndex);
    }
    @Override public Object[] getAllElements(){
      final int count=myAccessoriesModelsTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myAccessoriesModelsTableModel.getValueAt(idx);
      }
      return elements;
    }
    @Override public String getElementText(    Object element){
      if (!(element instanceof SModelReference))       return "";
      return element.toString();
    }
    @Override public void selectElement(    Object element,    String selectedText){
      final int count=myAccessoriesModelsTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myAccessoriesModelsTableModel.getValueAt(row))) {
          final int viewRow=accessoriesTable.convertRowIndexToView(row);
          accessoriesTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(accessoriesTable);
          break;
        }
      }
    }
  }
.setComparator(new SpeedSearchComparator(false,true));
  setTabComponent(usedLangsTab);
}
