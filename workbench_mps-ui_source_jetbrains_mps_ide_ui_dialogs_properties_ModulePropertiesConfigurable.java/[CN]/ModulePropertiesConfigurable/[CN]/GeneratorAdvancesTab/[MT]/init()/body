{
  JPanel panel=new JPanel();
  panel.setLayout(new GridLayoutManager(2,1,INSETS,-1,-1));
  myTable=new JBTable();
  myTable.setSelectionBackground(myTable.getSelectionBackground().darker());
  myTable.setAutoscrolls(true);
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  myPrioritiesTableModel=new GenPrioritiesTableModel();
  myTable.setModel(myPrioritiesTableModel);
  myTable.setDefaultRenderer(RuleType.class,new RuleTypeRenderer());
  myTable.setDefaultEditor(RuleType.class,new RuleTypeEditor());
  myTable.setDefaultRenderer(MappingConfig_AbstractRef.class,new TableCellRenderer(){
    private GeneratorPrioritiesTree myCurrentTree=null;
    @Override public Component getTableCellRendererComponent(    final JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    final int row,    final int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        if (myMappings.containsKey(mapping)) {
          myCurrentTree=myMappings.get(mapping);
        }
 else {
          myCurrentTree=new GeneratorPrioritiesTree((GeneratorDescriptor)myModuleDescriptor,mapping,column == 0);
          myMappings.put(mapping,myCurrentTree);
        }
        table.setRowHeight(row,Math.max(myCurrentTree.getTree().getPreferredSize().height + 10,table.getRowHeight(row)));
        TableColumn tableColumn=table.getColumnModel().getColumn(column);
        tableColumn.setResizable(true);
        tableColumn.setPreferredWidth(Math.max(table.getColumnModel().getColumn(column).getWidth(),myCurrentTree.getTree().getPreferredSize().width));
        tableColumn.setResizable(false);
        myCurrentTree.getTree().setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
        if (hasFocus && table.isRowSelected(row)) {
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              table.editCellAt(row,column);
            }
          }
);
        }
        return myCurrentTree.getTreePanel();
      }
      return null;
    }
  }
);
  myTable.setDefaultEditor(MappingConfig_AbstractRef.class,new AbstractTableCellEditor(){
    private GeneratorPrioritiesTree myCurrentTree=null;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        myCurrentTree=new GeneratorPrioritiesTree((GeneratorDescriptor)myModuleDescriptor,mapping,column == 0);
        return myCurrentTree.getTreePanel();
      }
      return null;
    }
    @Override public Object getCellEditorValue(){
      GeneratorPrioritiesTree result=myCurrentTree;
      myCurrentTree=null;
      return result != null ? result.getEditResult() : null;
    }
  }
);
  TableColumn column=myTable.getColumnModel().getColumn(1);
  column.setMaxWidth(50);
  column.setResizable(false);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      myPrioritiesTableModel.addItem(new MappingRuleCreator().compute());
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(myTable);
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
);
  decorator.setToolbarBorder(IdeBorderFactory.createBorder());
  decorator.setPreferredSize(new Dimension(500,300));
  panel.add(decorator.createPanel(),new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  myCheckBox=new JBCheckBox(PropertiesBundle.message("mps.properties.configurable.module.generatortab.gentempcheckbox"),((GeneratorDescriptor)myModule.getModuleDescriptor()).isGenerateTemplates());
  panel.add(myCheckBox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  setTabComponent(panel);
}
