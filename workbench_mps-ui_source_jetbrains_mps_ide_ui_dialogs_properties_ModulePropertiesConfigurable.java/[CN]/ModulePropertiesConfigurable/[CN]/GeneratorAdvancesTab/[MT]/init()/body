{
  List<SModuleReference> list=new ArrayList<SModuleReference>(((GeneratorDescriptor)myModule.getModuleDescriptor()).getDepGenerators());
  JPanel panel=new JPanel();
  panel.setLayout(new GridLayoutManager(2,1,INSETS,-1,-1));
  final JBTable table=new JBTable();
  table.setAutoscrolls(true);
  myPrioritiesTableModel=new GenPrioritiesTableModel();
  table.setModel(myPrioritiesTableModel);
  for (  TableColumnModelListener listener : ((DefaultTableColumnModel)table.getColumnModel()).getColumnModelListeners()) {
    table.getColumnModel().removeColumnModelListener(listener);
  }
  table.setDefaultRenderer(RuleType.class,new RuleTypeRenderer());
  table.setDefaultEditor(RuleType.class,new RuleTypeEditor());
  table.setDefaultRenderer(MappingConfig_AbstractRef.class,new TableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        GeneratorPrioritiesTree tree=new GeneratorPrioritiesTree((GeneratorDescriptor)myModuleDescriptor,mapping,column == 0);
        CheckedTreeNode rootNode=(CheckedTreeNode)tree.getTree().getModel().getRoot();
        if (!tree.getTree().isRootVisible() && rootNode.getChildCount() == 1)         rootNode=(CheckedTreeNode)rootNode.getChildAt(0);
        noCheckedChildren(rootNode);
        CheckboxTree checkboxTree=new CheckboxTree(GeneratorPrioritiesTree.getCheckboxTreeCellRenderer(),rootNode,new CheckPolicy(true,true,false,true));
        checkboxTree.setRootVisible(true);
        GeneratorPrioritiesTree.expandAllRows(checkboxTree);
        table.setRowHeight(row,Math.max(checkboxTree.getPreferredSize().height,table.getRowHeight(row)));
        return checkboxTree;
      }
      return null;
    }
    private boolean noCheckedChildren(    CheckedTreeNode node){
      List<CheckedTreeNode> children=Collections.list(node.children());
      for (int i=0; i < children.size(); i++) {
        CheckedTreeNode child=children.get(i);
        if (noCheckedChildren(child) && !child.isChecked()) {
          node.remove(child);
          child.removeFromParent();
        }
      }
      return node.isLeaf();
    }
  }
);
  table.setDefaultEditor(MappingConfig_AbstractRef.class,new AbstractTableCellEditor(){
    private GeneratorPrioritiesTree myCurrentTree=null;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        if (myMappings.containsKey(mapping)) {
          myCurrentTree=myMappings.get(mapping);
        }
 else {
          myCurrentTree=new GeneratorPrioritiesTree((GeneratorDescriptor)myModuleDescriptor,mapping,column == 0);
          myMappings.put(mapping,myCurrentTree);
        }
        table.setRowHeight(row,myCurrentTree.getTree().getPreferredSize().height + 20);
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            myCurrentTree.getTree().requestFocus();
          }
        }
);
        return ScrollPaneFactory.createScrollPane(myCurrentTree.getTree(),true);
      }
      return null;
    }
    @Override public Object getCellEditorValue(){
      GeneratorPrioritiesTree result=myCurrentTree;
      myCurrentTree=null;
      return result != null ? result.getEditResult() : null;
    }
  }
);
  table.addPropertyChangeListener("tableCellEditor",new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (!table.isEditing())       table.setRowHeight(table.getSelectedRow(),5);
    }
  }
);
  TableColumn column=table.getColumnModel().getColumn(1);
  column.setMaxWidth(50);
  column.setResizable(false);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(table);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      myPrioritiesTableModel.addItem(new MappingRuleCreator().compute());
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(table);
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
);
  decorator.setToolbarBorder(IdeBorderFactory.createBorder());
  decorator.setPreferredSize(new Dimension(500,300));
  panel.add(decorator.createPanel(),new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  myCheckBox=new JBCheckBox(PropertiesBundle.message("mps.properties.configurable.module.generatortab.gentempcheckbox"),((GeneratorDescriptor)myModule.getModuleDescriptor()).isGenerateTemplates());
  panel.add(myCheckBox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  setTabComponent(panel);
}
