{
  JPanel panel=new JPanel();
  panel.setLayout(new GridLayoutManager(2,1,INSETS,-1,-1));
  myTable=new JBTable();
  myTable.setAutoscrolls(true);
  myTable.getTableHeader().setReorderingAllowed(false);
  myPrioritiesTableModel=new GenPrioritiesTableModel();
  myTable.setModel(myPrioritiesTableModel);
  myTable.setDefaultRenderer(RuleType.class,new RuleTypeRenderer());
  myTable.setDefaultEditor(RuleType.class,new RuleTypeEditor());
  myTable.setDefaultRenderer(MappingConfig_AbstractRef.class,new TableCellRenderer(){
    private GeneratorPrioritiesTree myCurrentTree=null;
    @Override public Component getTableCellRendererComponent(    final JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    final int row,    final int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        myCurrentTree=new GeneratorPrioritiesTree(myGenerator,mapping,column == 0,myDepGenerators.getGenerators());
        myMappings.put(mapping,myCurrentTree);
        CheckedTreeNode rootNode=(CheckedTreeNode)myCurrentTree.getTree().getModel().getRoot();
        rootNode=column == 0 ? (CheckedTreeNode)rootNode.getFirstChild() : rootNode;
        allChildrenChecked(rootNode);
        noCheckedChildren(rootNode);
        CheckboxTree checkboxTree=new CheckboxTree(GeneratorPrioritiesTree.getCheckboxTreeCellRenderer(false),rootNode,new CheckPolicy(true,true,false,true));
        checkboxTree.setRootVisible(true);
        GeneratorPrioritiesTree.expandAllRows(checkboxTree);
        table.setRowHeight(row,Math.max(checkboxTree.getPreferredSize().height + 10,table.getRowHeight(row)));
        checkboxTree.setBackground(isSelected && !hasFocus ? table.getSelectionBackground() : table.getBackground());
        return checkboxTree;
      }
      return null;
    }
    private boolean allChildrenChecked(    CheckedTreeNode node){
      List<CheckedTreeNode> children=Collections.list(node.children());
      boolean allChildrenChecked=true;
      for (int i=0; i < children.size(); i++) {
        CheckedTreeNode child=children.get(i);
        if (!allChildrenChecked(child) || !child.isChecked()) {
          allChildrenChecked=false;
        }
      }
      if (allChildrenChecked && node.isChecked()) {
        for (int i=0; i < children.size(); i++) {
          CheckedTreeNode child=children.get(i);
          node.remove(child);
          child.removeFromParent();
        }
      }
      return allChildrenChecked;
    }
    private boolean noCheckedChildren(    CheckedTreeNode node){
      List<CheckedTreeNode> children=Collections.list(node.children());
      for (int i=0; i < children.size(); i++) {
        CheckedTreeNode child=children.get(i);
        if (noCheckedChildren(child) && !child.isChecked()) {
          node.remove(child);
          child.removeFromParent();
        }
      }
      return node.isLeaf();
    }
  }
);
  myTable.setDefaultEditor(MappingConfig_AbstractRef.class,new AbstractTableCellEditor(){
    private GeneratorPrioritiesTree myCurrentTree=null;
    @Override public boolean isCellEditable(    EventObject e){
      return e != null && e instanceof MouseEvent && ((MouseEvent)e).getClickCount() >= 2;
    }
    @Override public Component getTableCellEditorComponent(    final JTable table,    Object value,    boolean isSelected,    int row,    int column){
      if (value instanceof MappingConfig_AbstractRef) {
        MappingConfig_AbstractRef mapping=(MappingConfig_AbstractRef)value;
        myCurrentTree=new GeneratorPrioritiesTree(myGenerator,mapping,column == 0,myDepGenerators.getGenerators());
        final DialogWrapper dialogWrapper=new DialogWrapper(ProjectHelper.toIdeaProject(myProject)){
{
            setModal(true);
            init();
          }
          @Nullable @Override protected JComponent createCenterPanel(){
            final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myCurrentTree.getTreePanel(),true);
            final Dimension preferredSize=myCurrentTree.getTreePanel().getPreferredSize();
            if (preferredSize.getHeight() > 600)             preferredSize.setSize(preferredSize.getWidth(),600);
            scrollPane.setPreferredSize(preferredSize);
            return scrollPane;
          }
          @Nullable @Override public JComponent getPreferredFocusedComponent(){
            return myCurrentTree.getTreePanel();
          }
          @Override protected void doOKAction(){
            table.editingStopped(new ChangeEvent(this));
            table.revalidate();
            table.repaint();
            super.doOKAction();
          }
          @Override public void doCancelAction(){
            table.editingCanceled(new ChangeEvent(this));
            super.doCancelAction();
          }
        }
;
        final Component tableCellRendererComponent=myTable.getCellRenderer(row,column).getTableCellRendererComponent(table,value,isSelected,true,row,column);
        tableCellRendererComponent.addFocusListener(new FocusListener(){
          @Override public void focusGained(          FocusEvent e){
            dialogWrapper.show();
          }
          @Override public void focusLost(          FocusEvent e){
            tableCellRendererComponent.removeFocusListener(this);
          }
        }
);
        return tableCellRendererComponent;
      }
      return null;
    }
    @Override public Object getCellEditorValue(){
      GeneratorPrioritiesTree result=myCurrentTree;
      myCurrentTree=null;
      return result != null ? result.getEditResult() : null;
    }
  }
);
  TableColumn column=myTable.getColumnModel().getColumn(1);
  column.setMaxWidth(50);
  column.setMinWidth(column.getMaxWidth());
  column.setResizable(false);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      myPrioritiesTableModel.addItem(new MappingRuleCreator().compute());
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(myTable);
      myPrioritiesTableModel.fireTableDataChanged();
    }
  }
);
  decorator.setToolbarBorder(IdeBorderFactory.createBorder());
  decorator.setPreferredSize(new Dimension(500,300));
  panel.add(decorator.createPanel(),new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  final GeneratorDescriptor genDescr=(GeneratorDescriptor)myModule.getModuleDescriptor();
  JPanel generationOptions=new JPanel();
  generationOptions.setLayout(new FlowLayout(FlowLayout.LEFT));
  myGenerateTemplates=new JBCheckBox(PropertiesBundle.message("mps.properties.module.generator.gentemplates.name"),genDescr.isGenerateTemplates());
  myGenerateTemplates.setToolTipText(PropertiesBundle.message("mps.properties.module.generator.gentemplates.tip"));
  myReflectiveQueries=new JBCheckBox("Reflective queries",genDescr.isReflectiveQueries());
  myReflectiveQueries.setToolTipText("Invoke generated queries via reflection. Compatibility option, turn off and rebuild generator");
  myNeedOpContext=new JBCheckBox("IOperationContext parameter",genDescr.needsOperationContext());
  myNeedOpContext.setToolTipText("This is compatibility option, turn off and rebuild generator");
  generationOptions.add(myGenerateTemplates);
  generationOptions.add(myReflectiveQueries);
  generationOptions.add(myNeedOpContext);
  panel.add(generationOptions,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  setTabComponent(panel);
}
