{
  if (myModule instanceof Language || myModule instanceof Solution) {
    boolean hasLanguageVersion=getLanguageVersion() != null;
    boolean hasModuleVersion=getModuleVersion() != null;
    JPanel panel=new JPanel();
    panel.setLayout(new GridLayoutManager(1 + (hasLanguageVersion ? 1 : 0) + (hasModuleVersion ? 1 : 0),2,JBUI.emptyInsets(),-1,-1));
    int row=0;
    JBLabel label=new JBLabel(PropertiesBundle.message("mps.properties.configurable.module.javatab.genoutlabel"));
    panel.add(label,new GridConstraints(row,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
    myGenOut=new JTextField();
    final FileChooserDescriptor outputPathsChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
    InsertPathAction.addTo(myGenOut,outputPathsChooserDescriptor);
    outputPathsChooserDescriptor.setHideIgnored(false);
    BrowseFilesListener listener=new BrowseFilesListener(myGenOut,"","",outputPathsChooserDescriptor);
    FieldPanel genOutPath=new FieldPanel(myGenOut,null,null,listener,EmptyRunnable.getInstance());
    FileChooserFactory.getInstance().installFileCompletion(genOutPath.getTextField(),outputPathsChooserDescriptor,true,null);
    genOutPath.setText(getGenOutPath());
    genOutPath.setPreferredSize(new Dimension(300,20));
    panel.add(genOutPath,new GridConstraints(row++,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
    if (hasLanguageVersion) {
      JLabel verLabel=new JBLabel(PropertiesBundle.message("mps.properties.configurable.language.version"));
      panel.add(verLabel,new GridConstraints(row,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
      myLanguageVersion=new JSpinner(new SpinnerNumberModel((int)getLanguageVersion(),0,getLanguageVersion() + 10000,1));
      JSpinner.NumberEditor jsEditor=(JSpinner.NumberEditor)myLanguageVersion.getEditor();
      DefaultFormatter formatter=(DefaultFormatter)jsEditor.getTextField().getFormatter();
      formatter.setAllowsInvalid(false);
      panel.add(myLanguageVersion,new GridConstraints(row++,1,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(30,-1),null,0,false));
    }
    if (hasModuleVersion) {
      JLabel verLabel=new JBLabel(PropertiesBundle.message("mps.properties.configurable.module.version"));
      panel.add(verLabel,new GridConstraints(row,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
      myModuleVersion=new JSpinner(new SpinnerNumberModel((int)getModuleVersion(),0,getModuleVersion() + 10000,1));
      JSpinner.NumberEditor jsEditor=(JSpinner.NumberEditor)myModuleVersion.getEditor();
      DefaultFormatter formatter=(DefaultFormatter)jsEditor.getTextField().getFormatter();
      formatter.setAllowsInvalid(false);
      panel.add(myModuleVersion,new GridConstraints(row++,1,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(30,-1),null,0,false));
    }
    return panel;
  }
  return null;
}
