{
  final HashMap<String,ModuleFacetBase> existingFacetTypes=new HashMap<String,ModuleFacetBase>();
  for (  final SModuleFacet moduleFacet : myModule.getFacets()) {
    if (!(moduleFacet instanceof ModuleFacetBase))     continue;
    existingFacetTypes.put(((ModuleFacetBase)moduleFacet).getFacetType(),(ModuleFacetBase)moduleFacet);
  }
  Set<String> usedLangs=new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<Set<String>>(){
    @Override public Set<String> compute(){
      HashSet<String> rv=new HashSet<String>();
      for (      SLanguage reference : myModule.getUsedLanguages()) {
        rv.add(reference.getQualifiedName());
      }
      return rv;
    }
  }
);
  Set<String> applicableFacetTypes=FacetsFacade.getInstance().getApplicableFacetTypes(usedLangs);
  for (  String facet : FacetsFacade.getInstance().getFacetTypes()) {
    ModuleFacetBase sModuleFacet=existingFacetTypes.get(facet);
    if (sModuleFacet == null) {
      SModuleFacet newInstance=FacetsFacade.getInstance().getFacetFactory(facet).create();
      sModuleFacet=(ModuleFacetBase)newInstance;
    }
    String facetPresentation=sModuleFacet.getFacetPresentation();
    facetPresentation=applicableFacetTypes.contains(facet) ? String.format("%s (recommended)",facetPresentation) : facetPresentation;
    FacetCheckBox checkBox=existingFacetTypes.containsKey(facet) ? new FacetCheckBox(AddFacetsTab.this,sModuleFacet,myFacetTabsPersistence.getFacetTab(facet,sModuleFacet),facetPresentation) : new FacetCheckBox(AddFacetsTab.this,facet,facetPresentation);
    myCheckBoxes.add(checkBox);
  }
  Collections.sort(myCheckBoxes);
  final JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
  final int i=5;
  panel.setBorder(BorderFactory.createEmptyBorder(i,i,i,i));
  for (  FacetCheckBox checkBox : myCheckBoxes) {
    checkBox.addTo(panel);
  }
  setTabComponent(panel);
}
