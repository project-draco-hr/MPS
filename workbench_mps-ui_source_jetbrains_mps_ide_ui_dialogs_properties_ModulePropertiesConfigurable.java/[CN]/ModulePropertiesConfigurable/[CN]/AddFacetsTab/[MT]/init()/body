{
  final HashMap<String,ModuleFacetBase> facetsTypes=new HashMap<String,ModuleFacetBase>();
  for (  final SModuleFacet moduleFacet : myModule.getFacets()) {
    if (!(moduleFacet instanceof ModuleFacetBase))     continue;
    facetsTypes.put(((ModuleFacetBase)moduleFacet).getFacetType(),(ModuleFacetBase)moduleFacet);
  }
  Set<String> usedLangs=new HashSet<String>();
  for (  SModuleReference reference : myModuleDescriptor.getUsedLanguages()) {
    usedLangs.add(reference.getModuleName());
  }
  Set<String> applicableFacetTypes=FacetsFacade.getInstance().getApplicableFacetTypes(usedLangs);
  for (  String facet : FacetsFacade.getInstance().getFacetTypes()) {
    final SModuleFacet sModuleFacet=facetsTypes.keySet().contains(facet) ? facetsTypes.get(facet) : FacetsFacade.getInstance().getFacetFactory(facet).create();
    if (!(sModuleFacet instanceof ModuleFacetBase))     continue;
    final String facetPresentation=applicableFacetTypes.contains(facet) ? ((ModuleFacetBase)sModuleFacet).getFacetPresentation() + " (recommended)" : ((ModuleFacetBase)sModuleFacet).getFacetPresentation();
    final JBCheckBox checkBox=new JBCheckBox(facetPresentation,facetsTypes.keySet().contains(facet));
    checkBox.putClientProperty(CHECKBOX_PROPERTY_KEY,sModuleFacet);
    myCheckBoxes.add(checkBox);
    checkBox.addItemListener(new FacetCheckBoxItemListener(checkBox));
  }
  final JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
  final int i=5;
  panel.setBorder(BorderFactory.createEmptyBorder(i,i,i,i));
  for (  JCheckBox checkBox : myCheckBoxes) {
    panel.add(checkBox);
  }
  setTabComponent(panel);
}
