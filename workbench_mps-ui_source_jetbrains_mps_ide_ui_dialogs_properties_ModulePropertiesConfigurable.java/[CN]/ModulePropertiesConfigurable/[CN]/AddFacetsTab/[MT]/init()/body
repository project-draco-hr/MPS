{
  final HashMap<String,SModuleFacet> existingFacetTypes=new HashMap<String,SModuleFacet>();
  for (  final SModuleFacet moduleFacet : myModule.getFacets()) {
    existingFacetTypes.put(moduleFacet.getFacetType(),moduleFacet);
  }
  Set<String> applicableFacetTypes=new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<Set<String>>(){
    @Override public Set<String> compute(){
      return FacetsFacade.getInstance().getApplicableFacetTypes(myModule.getUsedLanguages());
    }
  }
);
  for (  String facet : FacetsFacade.getInstance().getFacetTypes()) {
    SModuleFacet sModuleFacet=existingFacetTypes.get(facet);
    if (sModuleFacet == null) {
      sModuleFacet=FacetsFacade.getInstance().getFacetFactory(facet).create();
    }
    String facetPresentation=sModuleFacet instanceof ModuleFacetBase ? ((ModuleFacetBase)sModuleFacet).getFacetPresentation() : sModuleFacet.getFacetType();
    String fmt=PropertiesBundle.message("module.facets.checkbox.title");
    facetPresentation=applicableFacetTypes.contains(facet) ? String.format(fmt,facetPresentation) : facetPresentation;
    FacetCheckBox checkBox=existingFacetTypes.containsKey(facet) ? new FacetCheckBox(AddFacetsTab.this,sModuleFacet,myFacetTabsPersistence.getFacetTab(sModuleFacet),facetPresentation) : new FacetCheckBox(AddFacetsTab.this,facet,facetPresentation);
    myCheckBoxes.add(checkBox);
  }
  Collections.sort(myCheckBoxes);
  final JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
  final int i=5;
  panel.setBorder(BorderFactory.createEmptyBorder(i,i,i,i));
  for (  FacetCheckBox checkBox : myCheckBoxes) {
    checkBox.addTo(panel);
  }
  setTabComponent(panel);
}
