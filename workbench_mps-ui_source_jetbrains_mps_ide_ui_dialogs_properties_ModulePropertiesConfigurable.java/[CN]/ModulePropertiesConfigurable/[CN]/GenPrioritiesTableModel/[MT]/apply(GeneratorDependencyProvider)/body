{
  final Set<SModuleReference> accessibleGenerators=generatorDependencies.getGenerators();
  accessibleGenerators.add(myModuleDescriptor.getModuleReference());
  for (  MappingPriorityRule rule : myMappingPriorityRules) {
    Queue<Pair<MappingConfig_AbstractRef,MappingConfig_RefSet>> queue=new LinkedList<Pair<MappingConfig_AbstractRef,MappingConfig_RefSet>>();
    queue.add(new Pair<MappingConfig_AbstractRef,MappingConfig_RefSet>(rule.getRight(),null));
    while (!queue.isEmpty()) {
      Pair<MappingConfig_AbstractRef,MappingConfig_RefSet> ref=queue.poll();
      if (ref.o1 instanceof MappingConfig_RefSet) {
        final MappingConfig_RefSet refSet=(MappingConfig_RefSet)ref.o1;
        for (        MappingConfig_AbstractRef ref1 : refSet.getMappingConfigs()) {
          queue.add(new Pair<MappingConfig_AbstractRef,MappingConfig_RefSet>(ref1,refSet));
        }
      }
 else       if (ref.o1 instanceof MappingConfig_ExternalRef) {
        final MappingConfig_ExternalRef extRef=(MappingConfig_ExternalRef)ref.o1;
        if (!accessibleGenerators.contains(extRef.getGenerator()) && ref.o2 != null) {
          ref.o2.getMappingConfigs().remove(ref.o1);
        }
      }
    }
  }
  myModuleDescriptor.getPriorityRules().clear();
  myModuleDescriptor.getPriorityRules().addAll(myMappingPriorityRules);
}
