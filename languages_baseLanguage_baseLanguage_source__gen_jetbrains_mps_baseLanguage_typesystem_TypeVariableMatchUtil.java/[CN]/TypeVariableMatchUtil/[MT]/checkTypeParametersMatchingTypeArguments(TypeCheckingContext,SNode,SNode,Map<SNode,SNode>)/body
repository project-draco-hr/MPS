{
  List<SNode> declarations=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(declarations).addSequence(ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)));
  for (  SNode typeArg : ListSequence.fromList(SLinkOperations.getTargets(mcall,"typeArgument",true))) {
    SNode decl=ListSequence.fromList(declarations).removeElementAt(0);
    if ((SLinkOperations.getTarget(decl,"bound",true) != null)) {
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,SLinkOperations.getTarget(decl,"bound",true),"virtual_isSupersetOf_9029841626175335449",new Object[]{typeArg,substitutions}))) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArg,"The type " + typeArg + " is not a valid substitute for the bounded parameter "+ decl,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","5977092449931173580",null,errorTarget);
        }
      }
    }
  }
}
