{
  if (outputDir == null)   throw new RuntimeException("unspecified output path for file generation.");
  if (!status.isOk()) {
    int result=JOptionPane.showConfirmDialog(context.getMainFrame(),"Errors while generating model " + inputModel.getModelUID() + "\n"+ "Do you want to generate output files?","Generation Finished With Errors",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
    if (result == JOptionPane.CANCEL_OPTION) {
      throw new GenerationCanceledException();
    }
    if (result == JOptionPane.NO_OPTION) {
      return;
    }
  }
  File outputRootDirectory=new File(outputDir);
  GeneratorManager gm=context.getProject().getComponentSafe(GeneratorManager.class);
  Map<SNode,String> outputNodeContents=new LinkedHashMap<SNode,String>();
  if (generateText(context,status,outputNodeContents,messages)) {
    int result=JOptionPane.showConfirmDialog(context.getMainFrame(),"Code generated form model\n" + inputModel.getModelUID() + "\n"+ "is not compilable.\n"+ "Do you still want to generate output files?","Generated Code Is Not Compilable",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
    if (result == JOptionPane.CANCEL_OPTION) {
      throw new GenerationCanceledException();
    }
    if (result == JOptionPane.NO_OPTION)     return;
  }
  Set<File> generatedFiles=new HashSet<File>();
  Set<File> directories=new HashSet<File>();
  generateFiles(status,inputModel,outputRootDirectory,gm,outputNodeContents,generatedFiles,directories);
  IProjectHandler handler=context.getProject().getProjectHandler();
  if (handler != null) {
    try {
      handler.addFilesToVCS(new ArrayList<File>(generatedFiles));
    }
 catch (    RemoteException e) {
      GenerateFilesGenerationType.LOG.error(e);
    }
  }
  directories.add(getDefaultOutputDir(inputModel.getSModel(),outputRootDirectory));
  cleanUp(context,generatedFiles,directories);
}
