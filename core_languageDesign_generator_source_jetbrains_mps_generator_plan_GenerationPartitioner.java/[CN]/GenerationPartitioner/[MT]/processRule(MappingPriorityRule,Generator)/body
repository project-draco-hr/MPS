{
  MappingConfig_AbstractRef left=rule.getLeft();
  MappingConfig_AbstractRef right=rule.getRight();
  if (left == null || right == null)   return;
  List<MappingConfiguration> greaterPriMappings=getMappingsFromRef(left,generator);
  List<MappingConfiguration> lesserPriMappings=getMappingsFromRef(right,generator);
  if (rule.getType() == RuleType.STRICTLY_TOGETHER) {
    Set<MappingConfiguration> coherentMappings=new HashSet<MappingConfiguration>(lesserPriMappings);
    coherentMappings.addAll(greaterPriMappings);
    myCoherentMappings.add(new CoherentSetData(coherentMappings,rule));
  }
 else {
    lesserPriMappings=CollectionUtil.subtract(lesserPriMappings,greaterPriMappings);
    for (    MappingConfiguration lesserPriMapping : lesserPriMappings) {
      Map<MappingConfiguration,PriorityData> grtPriMappingsFromMap=myPriorityMap.get(lesserPriMapping);
      if (grtPriMappingsFromMap == null) {
        String message="Internal error occurred while processing mapping priority rule:\n" + GenerationPartitioningUtil.asString(rule,true) + "\nmapping config\n'"+ NameUtil.nodeFQName(lesserPriMapping)+ "'\nis not in priority map.";
        message+="\ndisposed: " + lesserPriMapping.getModel().isDisposed();
        message+="\n---------------------------";
        message+="\ncheck priority map: ";
        for (        MappingConfiguration mappingConfig : myPriorityMap.keySet()) {
          if (mappingConfig.getName().equals(lesserPriMapping.getName())) {
            message+="\n" + NameUtil.nodeFQName(mappingConfig);
            message+="\n  disposed: " + mappingConfig.getModel().isDisposed();
            message+="\n  same adapter: " + (mappingConfig == lesserPriMapping);
            message+="\n  same node: " + (mappingConfig.getNode() == lesserPriMapping.getNode());
            message+="\n  same model: " + (mappingConfig.getModel() == lesserPriMapping.getModel());
          }
        }
        message+="\n---------------------------";
        String model_name=lesserPriMapping.getModel().getLongName();
        message+="\nmappings from model '" + model_name + "' in priority map: ";
        for (        MappingConfiguration mappingConfig : myPriorityMap.keySet()) {
          if (mappingConfig.getModel().getLongName().equals(model_name)) {
            message+="\n" + NameUtil.nodeFQName(mappingConfig);
          }
        }
        message+="\n---------------------------";
        throw new RuntimeException(message);
      }
      for (      MappingConfiguration grtPriMapping : greaterPriMappings) {
        boolean isStrict=(rule.getType() == RuleType.STRICTLY_BEFORE);
        if (!grtPriMappingsFromMap.containsKey(grtPriMapping)) {
          grtPriMappingsFromMap.put(grtPriMapping,new PriorityData(isStrict,rule));
        }
 else {
          PriorityData priorityData=grtPriMappingsFromMap.get(grtPriMapping);
          if (isStrict)           priorityData.myStrict=true;
          priorityData.myCauseRules.add(rule);
        }
      }
    }
  }
}
