{
  if ((type == DependencyPathTree.DepType.D || type == DependencyPathTree.DepType.R && isShowRuntime()) && SetSequence.fromSet(dependency).contains(from)) {
    return new DependencyTreeLeafNode(from,role,null);
  }
  if (type == DependencyPathTree.DepType.UL && SetSequence.fromSet(usedlangauge).contains(from)) {
    return new DependencyTreeLeafNode(from,role,null);
  }
  DependencyPathTree.Dep dep=new DependencyPathTree.Dep(from,type);
  if (SetSequence.fromSet(visited).contains(dep)) {
    return null;
  }
  SetSequence.fromSet(visited).addElement(dep);
  MPSTreeNode result=new DependencyTreeNode(from,role,null);
switch (type) {
case M:
    ModuleDescriptor m=from.getModuleDescriptor();
  if (m == null) {
    break;
  }
addChildDeps(result,ListSequence.fromList(((List<Dependency>)m.getDependencies())).select(new ISelector<Dependency,ModuleReference>(){
  public ModuleReference select(  Dependency it){
    return it.getModuleRef();
  }
}
),DependencyPathTree.DepType.D,"depends on ",dependency,usedlangauge,visited);
if (m instanceof LanguageDescriptor) {
addChildDeps(result,((LanguageDescriptor)m).getExtendedLanguages(),DependencyPathTree.DepType.D,"extends language ",dependency,usedlangauge,visited);
}
addChildDeps(result,m.getUsedDevkits(),DependencyPathTree.DepType.DK,"uses devkit ",dependency,usedlangauge,visited);
addChildDeps(result,m.getUsedLanguages(),DependencyPathTree.DepType.UL,"uses language ",dependency,usedlangauge,visited);
break;
case DK:
DevkitDescriptor dk=((DevKit)from).getModuleDescriptor();
addChildDeps(result,dk.getExtendedDevkits(),DependencyPathTree.DepType.DK,"extends devkit ",dependency,usedlangauge,visited);
addChildDeps(result,dk.getExportedLanguages(),DependencyPathTree.DepType.UL,"exports language ",dependency,usedlangauge,visited);
addChildDeps(result,dk.getExportedSolutions(),DependencyPathTree.DepType.D,"exports solution ",dependency,usedlangauge,visited);
break;
case UL:
LanguageDescriptor ul=((Language)from).getModuleDescriptor();
addChildDeps(result,ul.getExtendedLanguages(),DependencyPathTree.DepType.UL,"extends language ",dependency,usedlangauge,visited);
if (isShowRuntime()) {
addChildDeps(result,ul.getRuntimeModules(),DependencyPathTree.DepType.R,"exports runtime ",dependency,usedlangauge,visited);
}
addChildDeps(result,ListSequence.fromList(((List<Dependency>)ul.getDependencies())).where(new IWhereFilter<Dependency>(){
public boolean accept(Dependency it){
return it.isReexport();
}
}
).select(new ISelector<Dependency,ModuleReference>(){
public ModuleReference select(Dependency it){
return it.getModuleRef();
}
}
),DependencyPathTree.DepType.D,"re-exports dependency on ",dependency,usedlangauge,visited);
break;
case D:
ModuleDescriptor m2=from.getModuleDescriptor();
addChildDeps(result,ListSequence.fromList(((List<Dependency>)m2.getDependencies())).where(new IWhereFilter<Dependency>(){
public boolean accept(Dependency it){
return it.isReexport();
}
}
).select(new ISelector<Dependency,ModuleReference>(){
public ModuleReference select(Dependency it){
return it.getModuleRef();
}
}
),DependencyPathTree.DepType.D,"re-exports dependency on ",dependency,usedlangauge,visited);
addChildDeps(result,ListSequence.fromList(((List<Dependency>)m2.getDependencies())).where(new IWhereFilter<Dependency>(){
public boolean accept(Dependency it){
return !(it.isReexport());
}
}
).select(new ISelector<Dependency,ModuleReference>(){
public ModuleReference select(Dependency it){
return it.getModuleRef();
}
}
),DependencyPathTree.DepType.R,"depends on ",dependency,usedlangauge,visited);
if (from instanceof Language) {
addChildDeps(result,((LanguageDescriptor)m2).getExtendedLanguages(),DependencyPathTree.DepType.D,"extends language ",dependency,usedlangauge,visited);
}
break;
case R:
ModuleDescriptor m3=from.getModuleDescriptor();
addChildDeps(result,ListSequence.fromList(((List<Dependency>)m3.getDependencies())).where(new IWhereFilter<Dependency>(){
public boolean accept(Dependency it){
return it.isReexport();
}
}
).select(new ISelector<Dependency,ModuleReference>(){
public ModuleReference select(Dependency it){
return it.getModuleRef();
}
}
),DependencyPathTree.DepType.R,"re-exports dependency on ",dependency,usedlangauge,visited);
addChildDeps(result,ListSequence.fromList(((List<Dependency>)m3.getDependencies())).where(new IWhereFilter<Dependency>(){
public boolean accept(Dependency it){
return !(it.isReexport());
}
}
).select(new ISelector<Dependency,ModuleReference>(){
public ModuleReference select(Dependency it){
return it.getModuleRef();
}
}
),DependencyPathTree.DepType.R,"depends on ",dependency,usedlangauge,visited);
break;
default :
}
return (result.getChildCount() > 0 ? result : null);
}
