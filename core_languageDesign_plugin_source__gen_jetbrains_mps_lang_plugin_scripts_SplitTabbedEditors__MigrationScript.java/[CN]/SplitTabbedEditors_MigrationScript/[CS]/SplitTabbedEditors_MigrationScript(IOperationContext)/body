{
  super("Split Tabbed Editors");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Split tabbed editors";
    }
    public String getAdditionalInfo(){
      return "Split tabbed editors";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.plugin.structure.TabbedEditorDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SModel model=SNodeOperations.getModel(node);
      SNode helperClass=SModelOperations.createNewRootNode(SNodeOperations.getModel(node),"jetbrains.mps.baseLanguage.structure.ClassConcept",null);
      SPropertyOperations.set(helperClass,"name",SPropertyOperations.getString(node,"name") + "_Helper");
      final SNode p1=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a4a4a0a0a1a0().createNode();
      final SNode p2=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a5a4a0a0a1a0().createNode();
      SNode method=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a7a4a0a0a1a0().createNode(p1,p2,SLinkOperations.getTarget(SLinkOperations.getTarget(node,"getMainConceptBlock",true),"body",true));
      ListSequence.fromList(SNodeOperations.getDescendants(method,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node",false,new String[]{})).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNodeOperations.replaceWithAnother(it,new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a1a0a0a0i0e0a0a0b0a().createNode(p1));
        }
      }
);
      ListSequence.fromList(SNodeOperations.getDescendants(method,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext",false,new String[]{})).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNodeOperations.replaceWithAnother(it,new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a1a0a0a0j0e0a0a0b0a().createNode(p2));
        }
      }
);
      ListSequence.fromList(SLinkOperations.getTargets(helperClass,"staticMethod",true)).addElement(method);
      SNode order=SModelOperations.createNewRootNode(model,"jetbrains.mps.lang.plugin.structure.Order",null);
      SPropertyOperations.set(order,"name",SPropertyOperations.getString(node,"name"));
      ListSequence.fromList(SLinkOperations.getTargets(order,"tab",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"tabs",true)).<SNode>select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a0a0a0a41a4a0a0a1a0().createNode(it);
        }
      }
));
      List<SNode> tabs=ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(node,"tabs",true));
      for (      SNode tab : ListSequence.fromList(tabs)) {
        SNodeOperations.detachNode(tab);
        SModelOperations.addRootNode(model,tab);
        SLinkOperations.setTarget(tab,"order",new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a2a2a71a4a0a0a1a0().createNode(order),true);
        SLinkOperations.setTarget(tab,"baseNodeConcept",SLinkOperations.getTarget(node,"mainConcept",false),false);
        SNode bnb=SLinkOperations.setNewChild(tab,"baseNodeBlock","jetbrains.mps.lang.plugin.structure.GetBaseNodeBlock");
        SLinkOperations.setNewChild(bnb,"body","jetbrains.mps.baseLanguage.structure.StatementList");
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(bnb,"body",true),"statement",true)).addElement(new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a0g0r0e0a0a0b0a().createNode(helperClass,SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node",null),SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext",null),method));
      }
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
