{
  super("Split Tabbed Editors");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Split tabbed editors";
    }
    public String getAdditionalInfo(){
      return "Split tabbed editors";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.plugin.structure.TabbedEditorDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SModel model=SNodeOperations.getModel(node);
      SNode helperClass=SModelOperations.createNewRootNode(SNodeOperations.getModel(node),"jetbrains.mps.baseLanguage.structure.ClassConcept",null);
      SPropertyOperations.set(helperClass,"name",SPropertyOperations.getString(node,"name") + "_Helper");
      final SNode p1=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a4a4a0a0a1a0().createNode();
      final SNode p2=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a5a4a0a0a1a0().createNode();
      SNode method=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a7a4a0a0a1a0().createNode(p1,p2,SLinkOperations.getTarget(SLinkOperations.getTarget(node,"getMainConceptBlock",true),"body",true));
      ListSequence.fromList(SNodeOperations.getDescendants(method,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node",false,new String[]{})).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNodeOperations.replaceWithAnother(it,new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a1a0a0a0i0e0a0a0b0a().createNode(p1));
        }
      }
);
      ListSequence.fromList(SNodeOperations.getDescendants(method,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext",false,new String[]{})).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNodeOperations.replaceWithAnother(it,new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a1a0a0a0j0e0a0a0b0a().createNode(p2));
        }
      }
);
      ListSequence.fromList(SLinkOperations.getTargets(helperClass,"staticMethod",true)).addElement(method);
      SNode callHelperStmt=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a21a4a0a0a1a0().createNode(helperClass,SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node",null),SConceptOperations.createNewNode("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext",null),method);
      SNode order=SModelOperations.createNewRootNode(model,"jetbrains.mps.lang.plugin.structure.Order",null);
      SPropertyOperations.set(order,"name",SPropertyOperations.getString(node,"name"));
      List<SNode> tabs=ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(node,"tabs",true));
      for (      SNode tab : ListSequence.fromList(tabs)) {
        SNode newTab=new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a0a81a4a0a0a1a0().createNode(SPropertyOperations.getString(tab,"name"),SPropertyOperations.getString(tab,"shortcutChar"),SLinkOperations.getTarget(node,"mainConcept",false),SLinkOperations.getTarget(node,"mainConcept",false));
        SPropertyOperations.set(newTab,"commandOnCreate","" + !(SPropertyOperations.getBoolean(tab,"outsideCommand")));
        SLinkOperations.setTarget(newTab,"order",new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a2a4a81a4a0a0a1a0().createNode(order),true);
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(newTab,"baseNodeBlock",true),"body",true),"statement",true)).addElement(SNodeOperations.copyNode(callHelperStmt));
        if (SLinkOperations.getTarget(tab,"initBlock",true) != null) {
          SLinkOperations.setNewChild(newTab,"listenBlock","jetbrains.mps.lang.plugin.structure.ListenBlock");
          SLinkOperations.setTarget(SLinkOperations.getTarget(newTab,"listenBlock",true),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(tab,"initBlock",true),"body",true),true);
        }
        if (SNodeOperations.isInstanceOf(tab,"jetbrains.mps.lang.plugin.structure.MultitabbedEditorTab")) {
          SNode oldTab=SNodeOperations.cast(tab,"jetbrains.mps.lang.plugin.structure.MultitabbedEditorTab");
          if ((SLinkOperations.getTarget(oldTab,"newCreateBlock",true) != null)) {
            SLinkOperations.setNewChild(newTab,"createBlock","jetbrains.mps.lang.plugin.structure.NewCreateBlock");
            SLinkOperations.setTarget(SLinkOperations.getTarget(newTab,"createBlock",true),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"newCreateBlock",true),"body",true),true);
          }
          if ((SLinkOperations.getTarget(oldTab,"createBlock",true) != null)) {
            SLinkOperations.setNewChild(newTab,"createBlock","jetbrains.mps.lang.plugin.structure.NewCreateBlock");
            SLinkOperations.setTarget(SLinkOperations.getTarget(newTab,"createBlock",true),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"createBlock",true),"body",true),true);
          }
          if ((SLinkOperations.getTarget(oldTab,"getConceptsBlock",true) != null)) {
            SLinkOperations.setNewChild(newTab,"conceptsBlock","jetbrains.mps.lang.plugin.structure.GetConceptsBlock");
            SLinkOperations.setTarget(SLinkOperations.getTarget(newTab,"conceptsBlock",true),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"getConceptsBlock",true),"body",true),true);
          }
          SLinkOperations.setNewChild(newTab,"nodesBlock","jetbrains.mps.lang.plugin.structure.GetNodesBlock");
          SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(newTab,"nodesBlock",true),"jetbrains.mps.lang.plugin.structure.GetNodesBlock"),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"getNodesBlock",true),"body",true),true);
        }
 else {
          SNode oldTab=SNodeOperations.cast(tab,"jetbrains.mps.lang.plugin.structure.SingletabbedEditorTab");
          if ((SLinkOperations.getTarget(oldTab,"createBlock",true) != null)) {
            SLinkOperations.setNewChild(newTab,"createBlock","jetbrains.mps.lang.plugin.structure.NewCreateBlock");
            SLinkOperations.setTarget(SLinkOperations.getTarget(newTab,"createBlock",true),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"createBlock",true),"body",true),true);
          }
          SLinkOperations.setNewChild(newTab,"nodesBlock","jetbrains.mps.lang.plugin.structure.GetNodeBlock");
          SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(newTab,"nodesBlock",true),"jetbrains.mps.lang.plugin.structure.GetNodeBlock"),"body",SLinkOperations.getTarget(SLinkOperations.getTarget(oldTab,"getNodeBlock",true),"body",true),true);
        }
        SModelOperations.addRootNode(model,newTab);
        ListSequence.fromList(SLinkOperations.getTargets(order,"tab",true)).addElement(new SplitTabbedEditors_MigrationScript.QuotationClass_w50lnh_a0a0l0s0e0a0a0b0a().createNode(newTab));
      }
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
