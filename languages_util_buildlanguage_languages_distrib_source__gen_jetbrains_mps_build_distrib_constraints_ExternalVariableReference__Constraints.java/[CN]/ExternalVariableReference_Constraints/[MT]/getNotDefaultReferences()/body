{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variable",new BaseReferenceConstraintsDescriptor("variable",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode ancestor=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.build.distrib.structure.DistribConfiguration",true,false);
          List<SNode> availableVars=ListSequence.<SNode>fromList(new ArrayList<SNode>());
          ListSequence.<SNode>fromList(availableVars).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(Configuration_Behavior.call_getLayout_1213877261819(SLinkOperations.getTarget(ancestor,"buildScriptConfiguration",false)),"builtInVariable",true)));
          ListSequence.<SNode>fromList(availableVars).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(Configuration_Behavior.call_getLayout_1213877261819(SLinkOperations.getTarget(ancestor,"buildScriptConfiguration",false)),"variable",true)));
          return availableVars;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_d71t65_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
