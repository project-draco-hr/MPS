{
  SNode macDecl=_context.getOutputNodeByInputNodeAndMappingLabelAndOutputNode(SLinkOperations.getTarget(_context.getNode(),"variable",false),_context.getOutputNode(),"VariableToExternalPropertyDeclarationMac");
  if (macDecl != null) {
    return macDecl;
  }
  SNode winDecl=_context.getOutputNodeByInputNodeAndMappingLabelAndOutputNode(SLinkOperations.getTarget(_context.getNode(),"variable",false),_context.getOutputNode(),"VariableToExternalPropertyDeclarationWin");
  if (winDecl != null) {
    return winDecl;
  }
  SNode unixDecl=_context.getOutputNodeByInputNodeAndMappingLabelAndOutputNode(SLinkOperations.getTarget(_context.getNode(),"variable",false),_context.getOutputNode(),"VariableToExternalPropertyDeclarationUnix");
  if (unixDecl != null) {
    return unixDecl;
  }
  SNode target=SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.buildlanguage.structure.TargetDeclaration",true,false);
  for (  SNode propertyDeclaration : ListSequence.fromList(SLinkOperations.getTargets(target,"propertyList",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration");
    }
  }
)) {
    if (SPropertyOperations.getString(propertyDeclaration,"name").equals(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(),"variable",false),"antName"))) {
      return propertyDeclaration;
    }
  }
  return null;
}
