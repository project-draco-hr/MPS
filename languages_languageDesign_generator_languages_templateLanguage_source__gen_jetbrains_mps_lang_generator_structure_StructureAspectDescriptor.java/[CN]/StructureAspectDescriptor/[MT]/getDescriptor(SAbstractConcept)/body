{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0he.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbandonInput_RuleConsequence;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractMacro;
  }
break;
case 2:
if (true) {
return myConceptBaseMappingRule;
}
break;
case 3:
if (true) {
return myConceptBaseMappingRule_Condition;
}
break;
case 4:
if (true) {
return myConceptContextVariableDeclaration;
}
break;
case 5:
if (true) {
return myConceptContextVariableProvider;
}
break;
case 6:
if (true) {
return myConceptCopySrcListMacro;
}
break;
case 7:
if (true) {
return myConceptCopySrcNodeMacro;
}
break;
case 8:
if (true) {
return myConceptCreateRootRule;
}
break;
case 9:
if (true) {
return myConceptCreateRootRule_Condition;
}
break;
case 10:
if (true) {
return myConceptDismissTopMappingRule;
}
break;
case 11:
if (true) {
return myConceptDropAttributeRule;
}
break;
case 12:
if (true) {
return myConceptDropAttributeRule_Condition;
}
break;
case 13:
if (true) {
return myConceptDropRootRule;
}
break;
case 14:
if (true) {
return myConceptDropRootRule_Condition;
}
break;
case 15:
if (true) {
return myConceptExportEntry;
}
break;
case 16:
if (true) {
return myConceptExportLabel;
}
break;
case 17:
if (true) {
return myConceptExportLabelParameter_inputNode;
}
break;
case 18:
if (true) {
return myConceptExportLabelParameter_keeper;
}
break;
case 19:
if (true) {
return myConceptExportLabelParameter_outputNode;
}
break;
case 20:
if (true) {
return myConceptExportMacro;
}
break;
case 21:
if (true) {
return myConceptGeneratorDebug_LabelEntry;
}
break;
case 22:
if (true) {
return myConceptGeneratorDebug_Mappings;
}
break;
case 23:
if (true) {
return myConceptGeneratorDebug_NodeMapEntry;
}
break;
case 24:
if (true) {
return myConceptGeneratorDebug_NodeRef;
}
break;
case 25:
if (true) {
return myConceptGeneratorInternal_AbstractReferenceDescriptor;
}
break;
case 26:
if (true) {
return myConceptGeneratorInternal_InternalReferenceDescriptor;
}
break;
case 27:
if (true) {
return myConceptGeneratorInternal_PropertyDescriptor;
}
break;
case 28:
if (true) {
return myConceptGeneratorInternal_ReferenceDescriptor;
}
break;
case 29:
if (true) {
return myConceptGeneratorMessage;
}
break;
case 30:
if (true) {
return myConceptGeneratorParameterReference;
}
break;
case 31:
if (true) {
return myConceptIGeneratorParameter;
}
break;
case 32:
if (true) {
return myConceptIParameterizedTemplate;
}
break;
case 33:
if (true) {
return myConceptITemplateCall;
}
break;
case 34:
if (true) {
return myConceptIfMacro;
}
break;
case 35:
if (true) {
return myConceptIfMacro_Condition;
}
break;
case 36:
if (true) {
return myConceptIncludeMacro;
}
break;
case 37:
if (true) {
return myConceptInlineSwitch_Case;
}
break;
case 38:
if (true) {
return myConceptInlineSwitch_RuleConsequence;
}
break;
case 39:
if (true) {
return myConceptInlineTemplateWithContext_RuleConsequence;
}
break;
case 40:
if (true) {
return myConceptInlineTemplate_RuleConsequence;
}
break;
case 41:
if (true) {
return myConceptInsertMacro;
}
break;
case 42:
if (true) {
return myConceptInsertMacro_CreateNodeQuery;
}
break;
case 43:
if (true) {
return myConceptLabelMacro;
}
break;
case 44:
if (true) {
return myConceptLoopMacro;
}
break;
case 45:
if (true) {
return myConceptMapSrcListMacro;
}
break;
case 46:
if (true) {
return myConceptMapSrcMacro_MapperFunction;
}
break;
case 47:
if (true) {
return myConceptMapSrcMacro_PostMapperFunction;
}
break;
case 48:
if (true) {
return myConceptMapSrcNodeMacro;
}
break;
case 49:
if (true) {
return myConceptMappingConfiguration;
}
break;
case 50:
if (true) {
return myConceptMappingConfiguration_Condition;
}
break;
case 51:
if (true) {
return myConceptMappingLabelDeclaration;
}
break;
case 52:
if (true) {
return myConceptMappingScript;
}
break;
case 53:
if (true) {
return myConceptMappingScriptReference;
}
break;
case 54:
if (true) {
return myConceptMappingScript_CodeBlock;
}
break;
case 55:
if (true) {
return myConceptMarshalFunction;
}
break;
case 56:
if (true) {
return myConceptModelIdentity;
}
break;
case 57:
if (true) {
return myConceptNodeIdentity;
}
break;
case 58:
if (true) {
return myConceptNodeMacro;
}
break;
case 59:
if (true) {
return myConceptPatternReduction_MappingRule;
}
break;
case 60:
if (true) {
return myConceptPropertyMacro;
}
break;
case 61:
if (true) {
return myConceptPropertyMacro_GetPropertyValue;
}
break;
case 62:
if (true) {
return myConceptReductionRule;
}
break;
case 63:
if (true) {
return myConceptReduction_MappingRule;
}
break;
case 64:
if (true) {
return myConceptReferenceMacro;
}
break;
case 65:
if (true) {
return myConceptReferenceMacro_GetReferent;
}
break;
case 66:
if (true) {
return myConceptRootTemplateAnnotation;
}
break;
case 67:
if (true) {
return myConceptRoot_MappingRule;
}
break;
case 68:
if (true) {
return myConceptRuleConsequence;
}
break;
case 69:
if (true) {
return myConceptSourceSubstituteMacro;
}
break;
case 70:
if (true) {
return myConceptSourceSubstituteMacro_SourceNodeQuery;
}
break;
case 71:
if (true) {
return myConceptSourceSubstituteMacro_SourceNodesQuery;
}
break;
case 72:
if (true) {
return myConceptTemplateArgumentLinkPatternRefExpression;
}
break;
case 73:
if (true) {
return myConceptTemplateArgumentParameterExpression;
}
break;
case 74:
if (true) {
return myConceptTemplateArgumentPatternRef;
}
break;
case 75:
if (true) {
return myConceptTemplateArgumentPatternVarRefExpression;
}
break;
case 76:
if (true) {
return myConceptTemplateArgumentPropertyPatternRefExpression;
}
break;
case 77:
if (true) {
return myConceptTemplateArgumentQuery;
}
break;
case 78:
if (true) {
return myConceptTemplateArgumentQueryExpression;
}
break;
case 79:
if (true) {
return myConceptTemplateArgumentVariableRefExpression;
}
break;
case 80:
if (true) {
return myConceptTemplateCallMacro;
}
break;
case 81:
if (true) {
return myConceptTemplateDeclaration;
}
break;
case 82:
if (true) {
return myConceptTemplateDeclarationReference;
}
break;
case 83:
if (true) {
return myConceptTemplateFragment;
}
break;
case 84:
if (true) {
return myConceptTemplateFragment_ContextNodeQuery;
}
break;
case 85:
if (true) {
return myConceptTemplateFunctionParameter_mainContextNode;
}
break;
case 86:
if (true) {
return myConceptTemplateFunctionParameter_outputNode;
}
break;
case 87:
if (true) {
return myConceptTemplateFunctionParameter_parentOutputNode;
}
break;
case 88:
if (true) {
return myConceptTemplateFunctionParameter_sourceNode;
}
break;
case 89:
if (true) {
return myConceptTemplateFunctionParameter_templatePropertyValue;
}
break;
case 90:
if (true) {
return myConceptTemplateFunctionParameter_templateReferent;
}
break;
case 91:
if (true) {
return myConceptTemplateParameterDeclaration;
}
break;
case 92:
if (true) {
return myConceptTemplateQueryBase;
}
break;
case 93:
if (true) {
return myConceptTemplateSwitch;
}
break;
case 94:
if (true) {
return myConceptTemplateSwitchMacro;
}
break;
case 95:
if (true) {
return myConceptTemplateSwitchReference;
}
break;
case 96:
if (true) {
return myConceptTraceMacro;
}
break;
case 97:
if (true) {
return myConceptTrivialModelId;
}
break;
case 98:
if (true) {
return myConceptTrivialNodeId;
}
break;
case 99:
if (true) {
return myConceptUnmarshalFunction;
}
break;
case 100:
if (true) {
return myConceptVarMacro;
}
break;
case 101:
if (true) {
return myConceptVarMacro_ValueQuery;
}
break;
case 102:
if (true) {
return myConceptWeaveEach_RuleConsequence;
}
break;
case 103:
if (true) {
return myConceptWeaveMacro;
}
break;
case 104:
if (true) {
return myConceptWeavingAnchorQuery;
}
break;
case 105:
if (true) {
return myConceptWeaving_MappingRule;
}
break;
case 106:
if (true) {
return myConceptWeaving_MappingRule_ContextNodeQuery;
}
break;
default :
}
}
return null;
}
