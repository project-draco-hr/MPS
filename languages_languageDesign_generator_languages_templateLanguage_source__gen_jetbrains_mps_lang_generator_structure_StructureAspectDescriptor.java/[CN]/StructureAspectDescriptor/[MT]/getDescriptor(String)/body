{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0zd,conceptFqName)) {
case 0:
    return myConceptAbandonInput_RuleConsequence;
case 1:
  return myConceptAbstractMacro;
case 2:
return myConceptBaseMappingRule;
case 3:
return myConceptBaseMappingRule_Condition;
case 4:
return myConceptCopySrcListMacro;
case 5:
return myConceptCopySrcNodeMacro;
case 6:
return myConceptCreateRootRule;
case 7:
return myConceptCreateRootRule_Condition;
case 8:
return myConceptDismissTopMappingRule;
case 9:
return myConceptDropRootRule;
case 10:
return myConceptDropRootRule_Condition;
case 11:
return myConceptExportEntry;
case 12:
return myConceptExportLabel;
case 13:
return myConceptExportLabelParameter_inputNode;
case 14:
return myConceptExportLabelParameter_keeper;
case 15:
return myConceptExportLabelParameter_outputNode;
case 16:
return myConceptExportMacro;
case 17:
return myConceptGeneratorInternal_AbstractReferenceDescriptor;
case 18:
return myConceptGeneratorInternal_InternalReferenceDescriptor;
case 19:
return myConceptGeneratorInternal_PropertyDescriptor;
case 20:
return myConceptGeneratorInternal_ReferenceDescriptor;
case 21:
return myConceptGeneratorMessage;
case 22:
return myConceptGeneratorParameterReference;
case 23:
return myConceptIGeneratorParameter;
case 24:
return myConceptIParameterizedTemplate;
case 25:
return myConceptITemplateCall;
case 26:
return myConceptIfMacro;
case 27:
return myConceptIfMacro_Condition;
case 28:
return myConceptIncludeMacro;
case 29:
return myConceptInlineSwitch_Case;
case 30:
return myConceptInlineSwitch_RuleConsequence;
case 31:
return myConceptInlineTemplateWithContext_RuleConsequence;
case 32:
return myConceptInlineTemplate_RuleConsequence;
case 33:
return myConceptInsertMacro;
case 34:
return myConceptInsertMacro_CreateNodeQuery;
case 35:
return myConceptLabelMacro;
case 36:
return myConceptLoopMacro;
case 37:
return myConceptMapSrcListMacro;
case 38:
return myConceptMapSrcMacro_MapperFunction;
case 39:
return myConceptMapSrcMacro_PostMapperFunction;
case 40:
return myConceptMapSrcNodeMacro;
case 41:
return myConceptMappingConfiguration;
case 42:
return myConceptMappingConfiguration_Condition;
case 43:
return myConceptMappingLabelDeclaration;
case 44:
return myConceptMappingScript;
case 45:
return myConceptMappingScriptReference;
case 46:
return myConceptMappingScript_CodeBlock;
case 47:
return myConceptMarshalFunction;
case 48:
return myConceptModelIdentity;
case 49:
return myConceptNodeIdentity;
case 50:
return myConceptNodeMacro;
case 51:
return myConceptPatternReduction_MappingRule;
case 52:
return myConceptPropertyMacro;
case 53:
return myConceptPropertyMacro_GetPropertyValue;
case 54:
return myConceptReductionRule;
case 55:
return myConceptReduction_MappingRule;
case 56:
return myConceptReferenceMacro;
case 57:
return myConceptReferenceMacro_GetReferent;
case 58:
return myConceptRootTemplateAnnotation;
case 59:
return myConceptRoot_MappingRule;
case 60:
return myConceptRuleConsequence;
case 61:
return myConceptSourceSubstituteMacro;
case 62:
return myConceptSourceSubstituteMacro_SourceNodeQuery;
case 63:
return myConceptSourceSubstituteMacro_SourceNodesQuery;
case 64:
return myConceptSwitchMacro;
case 65:
return myConceptTemplateArgumentLinkPatternRefExpression;
case 66:
return myConceptTemplateArgumentParameterExpression;
case 67:
return myConceptTemplateArgumentPatternRef;
case 68:
return myConceptTemplateArgumentPatternVarRefExpression;
case 69:
return myConceptTemplateArgumentPropertyPatternRefExpression;
case 70:
return myConceptTemplateArgumentQuery;
case 71:
return myConceptTemplateArgumentQueryExpression;
case 72:
return myConceptTemplateArgumentVariableRefExpression;
case 73:
return myConceptTemplateCallMacro;
case 74:
return myConceptTemplateDeclaration;
case 75:
return myConceptTemplateDeclarationReference;
case 76:
return myConceptTemplateFragment;
case 77:
return myConceptTemplateFragment_ContextNodeQuery;
case 78:
return myConceptTemplateFunctionParameter_mainContextNode;
case 79:
return myConceptTemplateFunctionParameter_outputNode;
case 80:
return myConceptTemplateFunctionParameter_parentOutputNode;
case 81:
return myConceptTemplateFunctionParameter_sourceNode;
case 82:
return myConceptTemplateFunctionParameter_templatePropertyValue;
case 83:
return myConceptTemplateFunctionParameter_templateReferent;
case 84:
return myConceptTemplateParameterDeclaration;
case 85:
return myConceptTemplateQueryBase;
case 86:
return myConceptTemplateSwitch;
case 87:
return myConceptTemplateSwitchMacro;
case 88:
return myConceptTemplateSwitchReference;
case 89:
return myConceptTraceMacro;
case 90:
return myConceptTrivialModelId;
case 91:
return myConceptTrivialNodeId;
case 92:
return myConceptUnmarshalFunction;
case 93:
return myConceptVarMacro;
case 94:
return myConceptVarMacro_ValueQuery;
case 95:
return myConceptWeaveEach_RuleConsequence;
case 96:
return myConceptWeaveMacro;
case 97:
return myConceptWeaving_MappingRule;
case 98:
return myConceptWeaving_MappingRule_ContextNodeQuery;
default :
return null;
}
}
