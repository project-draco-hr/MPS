{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbandonInput_RuleConsequence:
    return myConceptAbandonInput_RuleConsequence;
case LanguageConceptSwitch.AbstractMacro:
  return myConceptAbstractMacro;
case LanguageConceptSwitch.BaseMappingRule:
return myConceptBaseMappingRule;
case LanguageConceptSwitch.BaseMappingRule_Condition:
return myConceptBaseMappingRule_Condition;
case LanguageConceptSwitch.ContextVariableDeclaration:
return myConceptContextVariableDeclaration;
case LanguageConceptSwitch.ContextVariableProvider:
return myConceptContextVariableProvider;
case LanguageConceptSwitch.CopySrcListMacro:
return myConceptCopySrcListMacro;
case LanguageConceptSwitch.CopySrcNodeMacro:
return myConceptCopySrcNodeMacro;
case LanguageConceptSwitch.CreateRootRule:
return myConceptCreateRootRule;
case LanguageConceptSwitch.CreateRootRule_Condition:
return myConceptCreateRootRule_Condition;
case LanguageConceptSwitch.DismissTopMappingRule:
return myConceptDismissTopMappingRule;
case LanguageConceptSwitch.DropAttributeRule:
return myConceptDropAttributeRule;
case LanguageConceptSwitch.DropAttributeRule_Condition:
return myConceptDropAttributeRule_Condition;
case LanguageConceptSwitch.DropRootRule:
return myConceptDropRootRule;
case LanguageConceptSwitch.DropRootRule_Condition:
return myConceptDropRootRule_Condition;
case LanguageConceptSwitch.ExportEntry:
return myConceptExportEntry;
case LanguageConceptSwitch.ExportLabel:
return myConceptExportLabel;
case LanguageConceptSwitch.ExportLabelParameter_inputNode:
return myConceptExportLabelParameter_inputNode;
case LanguageConceptSwitch.ExportLabelParameter_keeper:
return myConceptExportLabelParameter_keeper;
case LanguageConceptSwitch.ExportLabelParameter_outputNode:
return myConceptExportLabelParameter_outputNode;
case LanguageConceptSwitch.ExportMacro:
return myConceptExportMacro;
case LanguageConceptSwitch.GeneratorDebug_InputNode:
return myConceptGeneratorDebug_InputNode;
case LanguageConceptSwitch.GeneratorDebug_LabelEntry:
return myConceptGeneratorDebug_LabelEntry;
case LanguageConceptSwitch.GeneratorDebug_Mappings:
return myConceptGeneratorDebug_Mappings;
case LanguageConceptSwitch.GeneratorDebug_NodeMapEntry:
return myConceptGeneratorDebug_NodeMapEntry;
case LanguageConceptSwitch.GeneratorDebug_NodeRef:
return myConceptGeneratorDebug_NodeRef;
case LanguageConceptSwitch.GeneratorInternal_AbstractReferenceDescriptor:
return myConceptGeneratorInternal_AbstractReferenceDescriptor;
case LanguageConceptSwitch.GeneratorInternal_InternalReferenceDescriptor:
return myConceptGeneratorInternal_InternalReferenceDescriptor;
case LanguageConceptSwitch.GeneratorInternal_PropertyDescriptor:
return myConceptGeneratorInternal_PropertyDescriptor;
case LanguageConceptSwitch.GeneratorInternal_ReferenceDescriptor:
return myConceptGeneratorInternal_ReferenceDescriptor;
case LanguageConceptSwitch.GeneratorMessage:
return myConceptGeneratorMessage;
case LanguageConceptSwitch.GeneratorParameterReference:
return myConceptGeneratorParameterReference;
case LanguageConceptSwitch.IGeneratorParameter:
return myConceptIGeneratorParameter;
case LanguageConceptSwitch.IParameterizedTemplate:
return myConceptIParameterizedTemplate;
case LanguageConceptSwitch.ITemplateCall:
return myConceptITemplateCall;
case LanguageConceptSwitch.IfMacro:
return myConceptIfMacro;
case LanguageConceptSwitch.IfMacro_Condition:
return myConceptIfMacro_Condition;
case LanguageConceptSwitch.IncludeMacro:
return myConceptIncludeMacro;
case LanguageConceptSwitch.InlineSwitch_Case:
return myConceptInlineSwitch_Case;
case LanguageConceptSwitch.InlineSwitch_RuleConsequence:
return myConceptInlineSwitch_RuleConsequence;
case LanguageConceptSwitch.InlineTemplateWithContext_RuleConsequence:
return myConceptInlineTemplateWithContext_RuleConsequence;
case LanguageConceptSwitch.InlineTemplate_RuleConsequence:
return myConceptInlineTemplate_RuleConsequence;
case LanguageConceptSwitch.InsertMacro:
return myConceptInsertMacro;
case LanguageConceptSwitch.InsertMacro_CreateNodeQuery:
return myConceptInsertMacro_CreateNodeQuery;
case LanguageConceptSwitch.LabelMacro:
return myConceptLabelMacro;
case LanguageConceptSwitch.LoopMacro:
return myConceptLoopMacro;
case LanguageConceptSwitch.MapSrcListMacro:
return myConceptMapSrcListMacro;
case LanguageConceptSwitch.MapSrcMacro_MapperFunction:
return myConceptMapSrcMacro_MapperFunction;
case LanguageConceptSwitch.MapSrcMacro_PostMapperFunction:
return myConceptMapSrcMacro_PostMapperFunction;
case LanguageConceptSwitch.MapSrcNodeMacro:
return myConceptMapSrcNodeMacro;
case LanguageConceptSwitch.MappingConfiguration:
return myConceptMappingConfiguration;
case LanguageConceptSwitch.MappingConfiguration_Condition:
return myConceptMappingConfiguration_Condition;
case LanguageConceptSwitch.MappingLabelDeclaration:
return myConceptMappingLabelDeclaration;
case LanguageConceptSwitch.MappingScript:
return myConceptMappingScript;
case LanguageConceptSwitch.MappingScriptReference:
return myConceptMappingScriptReference;
case LanguageConceptSwitch.MappingScript_CodeBlock:
return myConceptMappingScript_CodeBlock;
case LanguageConceptSwitch.MarshalFunction:
return myConceptMarshalFunction;
case LanguageConceptSwitch.ModelIdentity:
return myConceptModelIdentity;
case LanguageConceptSwitch.NodeIdentity:
return myConceptNodeIdentity;
case LanguageConceptSwitch.NodeMacro:
return myConceptNodeMacro;
case LanguageConceptSwitch.PatternReduction_MappingRule:
return myConceptPatternReduction_MappingRule;
case LanguageConceptSwitch.PropertyMacro:
return myConceptPropertyMacro;
case LanguageConceptSwitch.PropertyMacro_GetPropertyValue:
return myConceptPropertyMacro_GetPropertyValue;
case LanguageConceptSwitch.ReductionRule:
return myConceptReductionRule;
case LanguageConceptSwitch.Reduction_MappingRule:
return myConceptReduction_MappingRule;
case LanguageConceptSwitch.ReferenceMacro:
return myConceptReferenceMacro;
case LanguageConceptSwitch.ReferenceMacro_GetReferent:
return myConceptReferenceMacro_GetReferent;
case LanguageConceptSwitch.RootTemplateAnnotation:
return myConceptRootTemplateAnnotation;
case LanguageConceptSwitch.Root_MappingRule:
return myConceptRoot_MappingRule;
case LanguageConceptSwitch.RuleConsequence:
return myConceptRuleConsequence;
case LanguageConceptSwitch.SourceSubstituteMacro:
return myConceptSourceSubstituteMacro;
case LanguageConceptSwitch.SourceSubstituteMacro_SourceNodeQuery:
return myConceptSourceSubstituteMacro_SourceNodeQuery;
case LanguageConceptSwitch.SourceSubstituteMacro_SourceNodesQuery:
return myConceptSourceSubstituteMacro_SourceNodesQuery;
case LanguageConceptSwitch.TemplateArgumentLinkPatternRefExpression:
return myConceptTemplateArgumentLinkPatternRefExpression;
case LanguageConceptSwitch.TemplateArgumentParameterExpression:
return myConceptTemplateArgumentParameterExpression;
case LanguageConceptSwitch.TemplateArgumentPatternRef:
return myConceptTemplateArgumentPatternRef;
case LanguageConceptSwitch.TemplateArgumentPatternVarRefExpression:
return myConceptTemplateArgumentPatternVarRefExpression;
case LanguageConceptSwitch.TemplateArgumentPropertyPatternRefExpression:
return myConceptTemplateArgumentPropertyPatternRefExpression;
case LanguageConceptSwitch.TemplateArgumentQuery:
return myConceptTemplateArgumentQuery;
case LanguageConceptSwitch.TemplateArgumentQueryExpression:
return myConceptTemplateArgumentQueryExpression;
case LanguageConceptSwitch.TemplateArgumentVariableRefExpression:
return myConceptTemplateArgumentVariableRefExpression;
case LanguageConceptSwitch.TemplateCallMacro:
return myConceptTemplateCallMacro;
case LanguageConceptSwitch.TemplateDeclaration:
return myConceptTemplateDeclaration;
case LanguageConceptSwitch.TemplateDeclarationReference:
return myConceptTemplateDeclarationReference;
case LanguageConceptSwitch.TemplateFragment:
return myConceptTemplateFragment;
case LanguageConceptSwitch.TemplateFunctionParameter_mainContextNode:
return myConceptTemplateFunctionParameter_mainContextNode;
case LanguageConceptSwitch.TemplateFunctionParameter_outputNode:
return myConceptTemplateFunctionParameter_outputNode;
case LanguageConceptSwitch.TemplateFunctionParameter_parentOutputNode:
return myConceptTemplateFunctionParameter_parentOutputNode;
case LanguageConceptSwitch.TemplateFunctionParameter_sourceNode:
return myConceptTemplateFunctionParameter_sourceNode;
case LanguageConceptSwitch.TemplateFunctionParameter_templatePropertyValue:
return myConceptTemplateFunctionParameter_templatePropertyValue;
case LanguageConceptSwitch.TemplateFunctionParameter_templateReferent:
return myConceptTemplateFunctionParameter_templateReferent;
case LanguageConceptSwitch.TemplateParameterDeclaration:
return myConceptTemplateParameterDeclaration;
case LanguageConceptSwitch.TemplateQueryBase:
return myConceptTemplateQueryBase;
case LanguageConceptSwitch.TemplateSwitch:
return myConceptTemplateSwitch;
case LanguageConceptSwitch.TemplateSwitchMacro:
return myConceptTemplateSwitchMacro;
case LanguageConceptSwitch.TemplateSwitchReference:
return myConceptTemplateSwitchReference;
case LanguageConceptSwitch.TraceMacro:
return myConceptTraceMacro;
case LanguageConceptSwitch.TrivialModelId:
return myConceptTrivialModelId;
case LanguageConceptSwitch.TrivialNodeId:
return myConceptTrivialNodeId;
case LanguageConceptSwitch.UnmarshalFunction:
return myConceptUnmarshalFunction;
case LanguageConceptSwitch.VarMacro:
return myConceptVarMacro;
case LanguageConceptSwitch.VarMacro_ValueQuery:
return myConceptVarMacro_ValueQuery;
case LanguageConceptSwitch.WeaveEach_RuleConsequence:
return myConceptWeaveEach_RuleConsequence;
case LanguageConceptSwitch.WeaveMacro:
return myConceptWeaveMacro;
case LanguageConceptSwitch.WeavingAnchorQuery:
return myConceptWeavingAnchorQuery;
case LanguageConceptSwitch.Weaving_MappingRule:
return myConceptWeaving_MappingRule;
case LanguageConceptSwitch.Weaving_MappingRule_ContextNodeQuery:
return myConceptWeaving_MappingRule_ContextNodeQuery;
default :
return null;
}
}
