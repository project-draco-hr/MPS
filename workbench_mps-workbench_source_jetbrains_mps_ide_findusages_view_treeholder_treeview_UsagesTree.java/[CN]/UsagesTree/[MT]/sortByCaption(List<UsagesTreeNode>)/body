{
  Collections.sort(children,new Comparator<UsagesTreeNode>(){
    private boolean isIgnored(    UsagesTreeNode node){
      BaseNodeData data=node.getUserObject().getData();
      SNode snode=null;
      if (data instanceof NodeNodeData) {
        snode=((NodeNodeData)data).getNode();
      }
 else {
        if (data.getIdObject() instanceof SNode) {
          snode=(SNode)data.getIdObject();
        }
      }
      return snode != null && !snode.isRoot();
    }
    public int compare(    UsagesTreeNode o1,    UsagesTreeNode o2){
      if (isIgnored(o1) || isIgnored(o2))       return 0;
      String s1=o1.getUserObject().getData().getPlainText();
      String s2=o2.getUserObject().getData().getPlainText();
      return s1.compareTo(s2);
    }
  }
);
  for (  UsagesTreeNode child : children) {
    sortByCaption(child.internalGetChildren());
  }
}
