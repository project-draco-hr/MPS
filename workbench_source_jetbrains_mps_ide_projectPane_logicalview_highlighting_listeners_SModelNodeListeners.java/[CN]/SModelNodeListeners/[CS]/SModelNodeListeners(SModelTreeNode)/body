{
  myModel=modelNode.getSModelDescriptor();
  mySimpleModelListener=new SimpleModelListener(modelNode){
    public void modelChangedDramatically(    SModel model){
      updateNodePresentation(false,true);
    }
    public void modelChanged(    SModel model){
      updateNodePresentation(false,true);
    }
    public boolean isValid(){
      if (!super.isValid())       return false;
      return !(myModel.getLoadingState() != ModelLoadingState.NOT_LOADED && myModel.getSModel().isDisposed());
    }
  }
;
  myStatusListener=new MyGenerationStatusListener();
  if (myModel instanceof EditableSModelDescriptor) {
    myTreeUpdater=new MySNodeTreeUpdater(modelNode.getOperationContext().getProject(),modelNode);
    myTreeUpdater.setDependencyRecorder(modelNode.getDependencyRecorder());
  }
  myEventsListener=new SModelEventsListener(){
    @NotNull public SModelDescriptor getModelDescriptor(){
      return myModel;
    }
    public void eventsHappened(    List<SModelEvent> events){
      if (myTreeUpdater == null)       return;
      myTreeUpdater.eventsHappenedInCommand(events);
    }
  }
;
}
