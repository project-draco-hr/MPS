{
  EmbeddedGraph mainEmbeddedGraph=null;
  for (int testNum=0; testNum < 100; testNum++) {
    Graph copy=new Graph();
    Map<Node,Node> nodeMap=MapSequence.fromMap(new HashMap<Node,Node>());
    Map<Edge,Edge> edgeMap=MapSequence.fromMap(new HashMap<Edge,Edge>());
    for (    Node node : ListSequence.fromList(graph.getNodes())) {
      MapSequence.fromMap(nodeMap).put(node,copy.createNode());
    }
    for (    Edge edge : ListSequence.fromList(graph.getEdges())) {
      MapSequence.fromMap(edgeMap).put(edge,copy.connect(MapSequence.fromMap(nodeMap).get(edge.getSource()),MapSequence.fromMap(nodeMap).get(edge.getTarget())));
    }
    BiconnectAugmentation.makeBiconnected(copy);
    EmbeddedGraph embeddedGraph;
    embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(copy);
    if (mainEmbeddedGraph == null) {
      mainEmbeddedGraph=embeddedGraph;
    }
 else {
      Graph main=mainEmbeddedGraph.getGraph();
      Assert.assertTrue((int)ListSequence.fromList(main.getNodes()).count() == (int)ListSequence.fromList(copy.getNodes()).count());
      for (int i=0; i < ListSequence.fromList(main.getNodes()).count(); i++) {
        Node n1=ListSequence.fromList(main.getNodes()).getElement(i);
        Node n2=ListSequence.fromList(copy.getNodes()).getElement(i);
        Assert.assertTrue((int)ListSequence.fromList(n1.getEdges()).count() == (int)ListSequence.fromList(n2.getEdges()).count());
        for (int j=0; j < ListSequence.fromList(n1.getEdges()).count(); j++) {
          Edge e1=ListSequence.fromList(n1.getEdges()).getElement(j);
          Edge e2=ListSequence.fromList(n2.getEdges()).getElement(j);
          Assert.assertTrue(e1.getSource().getIndex() == e2.getSource().getIndex());
          Assert.assertTrue(e1.getTarget().getIndex() == e2.getTarget().getIndex());
        }
      }
      Assert.assertTrue((int)ListSequence.fromList(embeddedGraph.getFaces()).count() == (int)ListSequence.fromList(mainEmbeddedGraph.getFaces()).count());
      for (int i=0; i < ListSequence.fromList(embeddedGraph.getFaces()).count(); i++) {
        Face f1=ListSequence.fromList(embeddedGraph.getFaces()).getElement(i);
        Face f2=ListSequence.fromList(mainEmbeddedGraph.getFaces()).getElement(i);
        Assert.assertTrue((int)ListSequence.fromList(f1.getDarts()).count() == (int)ListSequence.fromList(f2.getDarts()).count());
        for (int j=0; j < ListSequence.fromList(f1.getDarts()).count(); j++) {
          Dart d1=ListSequence.fromList(f1.getDarts()).getElement(j);
          Dart d2=ListSequence.fromList(f2.getDarts()).getElement(j);
          Assert.assertTrue(d1.getSource().getIndex() == d2.getSource().getIndex());
          Assert.assertTrue(d1.getTarget().getIndex() == d2.getTarget().getIndex());
        }
      }
    }
  }
}
