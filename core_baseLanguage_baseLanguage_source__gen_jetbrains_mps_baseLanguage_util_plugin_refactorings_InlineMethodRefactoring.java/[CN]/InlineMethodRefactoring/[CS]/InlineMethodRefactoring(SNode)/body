{
  MethodCallAdapter methodCallAdapter=new MethodCallAdapter(methodCall);
  this.myMethodDeclaration=methodCallAdapter.getMethodDeclaration();
  this.myArguments=new MethodCallAdapter(methodCall).getMethodArguments();
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    this.myMethodCall=SNodeOperations.getParent(methodCall);
    this.myOperand=SLinkOperations.getTarget(SNodeOperations.cast(this.myMethodCall,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
  }
 else {
    this.myMethodCall=methodCall;
  }
  this.myMethodProgram=DataFlowManager.getInstance().buildProgramFor(this.myMethodDeclaration);
  List<SNode> returns=SNodeOperations.getDescendants(this.myMethodDeclaration,"jetbrains.mps.baseLanguage.structure.ReturnStatement",false,new String[]{});
  this.myHasManyReturns=ListSequence.<SNode>fromList(returns).count() > 1;
  this.myReturnType=SLinkOperations.getTarget(this.myMethodDeclaration,"returnType",true);
}
