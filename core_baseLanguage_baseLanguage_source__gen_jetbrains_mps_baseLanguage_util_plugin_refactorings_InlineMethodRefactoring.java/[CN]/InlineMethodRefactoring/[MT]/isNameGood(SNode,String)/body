{
  SNode list=SNodeOperations.cast(SNodeOperations.getParent(statement),"jetbrains.mps.baseLanguage.structure.StatementList");
  int start=ListSequence.fromList(SLinkOperations.getTargets(list,"statement",true)).indexOf(statement);
  for (int i=start; i < ListSequence.fromList(SLinkOperations.getTargets(list,"statement",true)).count(); i++) {
    SNode st=ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(list,"statement",true)).toListSequence()).getElement(i);
    for (    SNode declaration : ListSequence.fromList(SNodeOperations.getDescendants(st,"jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{}))) {
      if (SPropertyOperations.getString(declaration,"name").equals(name)) {
        return false;
      }
    }
  }
  LocalVariablesScope scope=new LocalVariablesScope(statement);
  List<SNode> nodes=scope.getNodes(((Condition<SNode>)new Condition<SNode>(){
    public boolean met(    SNode obj){
      return name.equals(SPropertyOperations.getString(SNodeOperations.cast(obj,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"),"name"));
    }
  }
));
  boolean vars=ListSequence.fromList(nodes).isNotEmpty();
  if (vars) {
    return false;
  }
  SNode declaration=SNodeOperations.getAncestor(statement,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
  for (  SNode param : ListSequence.fromList(SLinkOperations.getTargets(declaration,"parameter",true))) {
    if (name.equals(SPropertyOperations.getString(param,"name"))) {
      return false;
    }
  }
  return true;
}
