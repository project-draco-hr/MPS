{
  SNode statement=SNodeOperations.getAncestor(this.myMethodCall,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
  Map<SNode,SNode> map=MapSequence.fromMap(new HashMap<SNode,SNode>());
  List<SNode> parameters=SLinkOperations.getTargets(this.myMethodDeclaration,"parameter",true);
  for (int i=0; i < ListSequence.fromList(this.myArguments).count(); i++) {
    SNode parameterDeclaration=ListSequence.fromList(parameters).getElement(i);
    SNode argument=ListSequence.fromList(this.myArguments).getElement(i);
    if (this.canSubstituteParameter(argument,parameterDeclaration)) {
      MapSequence.fromMap(map).put(parameterDeclaration,argument);
    }
 else {
      String name=SPropertyOperations.getString(parameterDeclaration,"name");
      SNode type=SLinkOperations.getTarget(parameterDeclaration,"type",true);
      SNode ref=this.createVariable(statement,name,type,argument);
      MapSequence.fromMap(map).put(parameterDeclaration,ref);
    }
  }
  return map;
}
