{
  StringBuffer buff=new StringBuffer();
  Set<SNode> nodesToCheck=ClassRefactoringUtils.getClassMemberRefernce(SLinkOperations.getTarget(this.myMethodDeclaration,"body",true));
  String end=SNodeOperations.getParent(this.myMethodDeclaration) + "." + this.myMethodDeclaration;
  for (  SNode node : SetSequence.<SNode>fromSet(nodesToCheck)) {
    SNode classifier=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    if (!(VisibilityUtil.isVisible(this.myMethodCall,node))) {
      String start="";
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
        start="Method ";
      }
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
        start="Field ";
      }
      buff.append(start).append(classifier).append(".").append(node);
      buff.append(" that is used in inlined method is not accessible from ");
      buff.append("call site(s) in method " + end + "\n");
    }
  }
  return buff.toString();
}
