{
{
    SNode outputTargetNode=generator.findCopyingOutputNodeForInputNode(myTemplateTargetNode);
    if (outputTargetNode != null) {
      getOutputNode().addReferent(myTemplateReference.getRole(),outputTargetNode);
      setSuccess(true);
      return;
    }
  }
{
    SNode outputTargetNode=generator.findOutputNodeByTemplateNodeAndInputNode(myTemplateTargetNode,getInputNode());
    if (outputTargetNode != null) {
      getOutputNode().addReferent(myTemplateReference.getRole(),outputTargetNode);
      setSuccess(true);
      return;
    }
  }
{
    List<INodeBuilder> builders=generator.findTopBuildersForSource(myTemplateTargetNode);
    if (!builders.isEmpty()) {
      String wasConcept=myTemplateTargetNode.getConceptFqName();
      SNode outputTargetNode=null;
      for (      INodeBuilder builder : builders) {
        SNode _outputNode=builder.getTargetNode();
        if (_outputNode.getConceptFqName().equals(wasConcept)) {
          if (outputTargetNode != null) {
            outputTargetNode=null;
            break;
          }
          outputTargetNode=_outputNode;
        }
      }
      if (outputTargetNode != null) {
        getOutputNode().addReferent(myTemplateReference.getRole(),outputTargetNode);
        setSuccess(true);
        return;
      }
    }
  }
{
    SNode outputTargetNode=generator.findOutputNodeByTemplateNode(myTemplateTargetNode,true);
    if (outputTargetNode != null) {
      getOutputNode().addReferent(myTemplateReference.getRole(),outputTargetNode);
      setSuccess(true);
      return;
    }
  }
{
    SNode templateTargetNode=myTemplateSourceNode.getParent();
    SNode outputTargetNode=getOutputNode().getParent();
    while (templateTargetNode != null && outputTargetNode != null) {
      if (templateTargetNode.equals(myTemplateTargetNode)) {
        getOutputNode().addReferent(myTemplateReference.getRole(),outputTargetNode);
        setSuccess(true);
        return;
      }
      templateTargetNode=templateTargetNode.getParent();
      outputTargetNode=outputTargetNode.getParent();
    }
  }
}
