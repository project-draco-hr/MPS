{
  if ("void".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0b0j().createNode();
  }
 else   if ("int".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0a1a9().createNode();
  }
 else   if ("long".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0b1a9().createNode();
  }
 else   if ("short".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0c1a9().createNode();
  }
 else   if ("byte".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0d1a9().createNode();
  }
 else   if ("float".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0e1a9().createNode();
  }
 else   if ("double".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0f1a9().createNode();
  }
 else   if ("boolean".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0g1a9().createNode();
  }
 else   if ("char".equals(name)) {
    return new TypeNameResolver.QuotationClass_lmecd1_a0a0h1a9().createNode();
  }
  SNode typeVarRef=myTVarNamespace.resolve(name);
  if ((typeVarRef != null)) {
    return typeVarRef;
  }
  SNode classType=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
  SReference sref=resolveShortClassName(name,classType,"classifier");
  classType.addReference(sref);
  return classType;
}
