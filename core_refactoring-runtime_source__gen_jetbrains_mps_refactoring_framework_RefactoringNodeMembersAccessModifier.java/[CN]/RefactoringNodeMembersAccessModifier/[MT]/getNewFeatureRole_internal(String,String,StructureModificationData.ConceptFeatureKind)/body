{
  Map<Pair<String,String>,String> featuresMap;
  Set<Pair<String,String>> absentFeatureSet;
switch (conceptFeatureKind) {
case CHILD:
    featuresMap=myChildrenRolesMap;
  absentFeatureSet=myAbsentChildrenRoles;
break;
case REFERENCE:
featuresMap=myReferencesRolesMap;
absentFeatureSet=myAbsentReferentRoles;
break;
case PROPERTY:
featuresMap=myPropertiesNamesMap;
absentFeatureSet=myAbsentPropertyNames;
break;
default :
return null;
}
Pair<String,String> stringPair=new Pair<String,String>(conceptFQName,oldRole);
if (myAbsentChildrenRoles.contains(stringPair)) {
return null;
}
String role=featuresMap.get(stringPair);
if (role != null) {
return role;
}
Language language=MPSModuleRepository.getInstance().getLanguage(NameUtil.namespaceFromConceptFQName(conceptFQName));
if (language == null) {
return null;
}
Set<String> parentsNames=LanguageHierarchyCache.getParentsNames(conceptFQName);
for (String parentFQName : parentsNames) {
String newChildRole=getNewFeatureRole_internal(parentFQName,oldRole,conceptFeatureKind);
if (newChildRole != null) {
featuresMap.put(stringPair,newChildRole);
return newChildRole;
}
}
absentFeatureSet.add(stringPair);
return null;
}
