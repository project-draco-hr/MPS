{
  String ruleMappingName=RuleUtil.getPatternReductionRuleLabel(ruleNode);
  SNode ruleConsequence=RuleUtil.getPatternReductionRuleConsequence(ruleNode);
  if (ruleConsequence == null) {
    environment.getGenerator().showErrorMessage(inputNode,null,ruleNode,"error processing reduction rule: no rule consequence");
    return null;
  }
  TemplateContext conseqContext=GeneratorUtil.createTemplateContext(inputNode,new DefaultTemplateContext(pattern,null,inputNode),environment.getReductionContext(),(RuleConsequence)ruleConsequence.getAdapter(),inputNode,environment.getGenerator());
  List<Pair<SNode,String>> nodeAndMappingNamePairs=GeneratorUtilEx.getTemplateNodesFromRuleConsequence(ruleConsequence,inputNode,ruleNode,environment.getReductionContext(),environment.getGenerator());
  if (nodeAndMappingNamePairs == null) {
    environment.getGenerator().showErrorMessage(inputNode,null,ruleConsequence,"error processing reduction rule consequence");
    return null;
  }
  List<SNode> result=new ArrayList<SNode>(nodeAndMappingNamePairs.size());
  TemplateProcessor templateProcessor=new TemplateProcessor(environment.getGenerator(),environment.getReductionContext());
  for (  Pair<SNode,String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {
    SNode templateNode=nodeAndMappingNamePair.o1;
    String mappingName=nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : ruleMappingName;
    try {
      result.addAll(templateProcessor.processTemplateNode(mappingName,templateNode,conseqContext));
    }
 catch (    DismissTopMappingRuleException e) {
      throw e;
    }
catch (    TemplateProcessingFailureException e) {
      environment.getGenerator().showErrorMessage(inputNode,templateNode,ruleNode,"error processing reduction rule");
    }
catch (    GenerationFailureException e) {
      throw e;
    }
catch (    GenerationCanceledException e) {
      throw e;
    }
catch (    Throwable t) {
      environment.getGenerator().getLogger().handleException(t);
      environment.getGenerator().showErrorMessage(inputNode,templateNode,ruleNode,"error processing reduction rule");
    }
  }
  return result;
}
