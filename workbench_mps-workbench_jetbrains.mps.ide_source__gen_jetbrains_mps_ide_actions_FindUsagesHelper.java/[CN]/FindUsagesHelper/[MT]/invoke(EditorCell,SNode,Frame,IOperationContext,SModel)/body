{
  final Wrappers._T<SNode> operationNode=new Wrappers._T<SNode>();
  final Wrappers._T<String> concept=new Wrappers._T<String>();
  ModelAccess modelAccess=context.getProject().getRepository().getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      operationNode.value=(cell == null ? node : APICellAdapter.getSNodeWRTReference(cell));
      concept.value=operationNode.value.getConcept().getQualifiedName();
    }
  }
);
  final Wrappers._T<ScopeEditor> scopeEditor=new Wrappers._T<ScopeEditor>();
  final Wrappers._T<FindersEditor> findersEditor=new Wrappers._T<FindersEditor>();
  final Wrappers._T<ViewOptionsEditor> viewOptionsEditor=new Wrappers._T<ViewOptionsEditor>();
  final Wrappers._T<FindUsagesOptions> options=new Wrappers._T<FindUsagesOptions>(getDefaultOptions().getDefaultSearchOptions(concept.value));
  ProjectHelper.toMPSProject(myProject).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      scopeEditor.value=new ScopeEditor(options.value.getOption(ScopeOptions.class));
      findersEditor.value=new FindersEditor(options.value.getOption(FindersOptions.class),node){
        public void goToFinder(        ReloadableFinder finder){
        }
      }
;
      viewOptionsEditor.value=new ViewOptionsEditor(options.value.getOption(ViewOptions.class));
    }
  }
);
  options.value=new FindUsagesOptions(findersEditor.value.getOptions(),scopeEditor.value.getOptions(),viewOptionsEditor.value.getOptions());
  if (myWithDialog) {
    FindUsagesDialog dialog=new FindUsagesDialog(options.value,operationNode.value,myProject,myWithDialog);
    dialog.show();
    if (dialog.isCancelled()) {
      return;
    }
    options.value=dialog.getResult();
  }
  final Wrappers._T<IResultProvider> provider=new Wrappers._T<IResultProvider>();
  final Wrappers._T<SearchQuery> query=new Wrappers._T<SearchQuery>();
  final Wrappers._T<ViewOptions> viewOptions=new Wrappers._T<ViewOptions>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      provider.value=options.value.getOption(FindersOptions.class).getResult();
      query.value=options.value.getOption(ScopeOptions.class).getResult(operationNode.value,context,model);
      viewOptions.value=options.value.getOption(ViewOptions.class);
    }
  }
);
  getTool().findUsages(provider.value,query.value,true,viewOptions.value.myShowOneResult,viewOptions.value.myNewTab,"No usages for that node");
}
