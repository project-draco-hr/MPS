{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode enclosingClass=SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.debug.evaluation.structure.EvaluatorConcept",false,false),"thisType",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
          return new SuperMethodCall_InstanceMethodScope(ClassConcept_Behavior.call_getSuperclass_1240936569950(enclosingClass),_context.getEnclosingNode());
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_cyzmhi_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
