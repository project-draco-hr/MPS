{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("containerDeclaration",new BaseReferenceConstraintsDescriptor("containerDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode expr=SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Expression");
          return ((expr != null) ? Sequence.fromIterable(CustomContainersUtil.containerDeclarations(SNodeOperations.getModel(expr),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.as(SNodeOperations.getParent(expr),"jetbrains.mps.baseLanguage.structure.TypeDerivable"),"virtual_deriveType_1213877435747",new Object[]{expr}))).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(it,"containerType",true)),"jetbrains.mps.baseLanguage.collections.structure.MapType"));
            }
          }
) : Sequence.fromIterable(Collections.<SNode>emptyList()));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_tzy4hl_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
