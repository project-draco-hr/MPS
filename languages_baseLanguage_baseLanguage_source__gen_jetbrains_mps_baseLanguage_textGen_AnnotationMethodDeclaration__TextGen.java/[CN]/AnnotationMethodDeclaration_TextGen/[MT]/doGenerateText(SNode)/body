{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")),this.getSNode());
  }
  this.indentBuffer();
  TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"returnType",true),this.getSNode());
  this.append(" ");
  this.append(SPropertyOperations.getString(node,"name"));
  this.append("()");
  if ((SLinkOperations.getTarget(node,"defaultValue",true) != null)) {
    this.append(" default ");
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"defaultValue",true),this.getSNode());
  }
  this.append(";");
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
