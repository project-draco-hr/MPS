{
  Language language=SModelUtil.getDeclaringLanguage(thisNode);
  List<SNode> result=new ArrayList<SNode>();
  if (language == null) {
    return result;
  }
  for (  Generator g : language.getGenerators()) {
    for (    SModel sd : g.getOwnTemplateModels()) {
      SModel m=sd;
      for (      SNode node : ListSequence.fromList(SModelOperations.getRoots(m,null))) {
        if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.generator.structure.TemplateDeclaration") && SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.lang.generator.structure.TemplateDeclaration"),"applicableConcept",false) == thisNode || SLinkOperations.getTarget(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation")),"applicableConcept",false) == thisNode) {
          ListSequence.fromList(result).addElement(node);
        }
 else         if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.generator.structure.MappingConfiguration") || SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.generator.structure.TemplateSwitch")) {
          for (          SNode r : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.lang.generator.structure.BaseMappingRule",false,new String[]{}))) {
            if (SLinkOperations.getTarget(r,"applicableConcept",false) == thisNode || (SPropertyOperations.getBoolean(r,"applyToConceptInheritors") && Sequence.fromIterable(AbstractConceptDeclaration_Behavior.call_getAllSuperConcepts_2992811758677902956(thisNode,false)).contains(SLinkOperations.getTarget(r,"applicableConcept",false)))) {
              ListSequence.fromList(result).addElement(r);
            }
          }
          for (          SNode r : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.lang.generator.structure.DropRootRule",false,new String[]{}))) {
            if (Sequence.fromIterable(AbstractConceptDeclaration_Behavior.call_getAllSuperConcepts_2992811758677902956(thisNode,true)).contains(SLinkOperations.getTarget(r,"applicableConcept",false))) {
              ListSequence.fromList(result).addElement(r);
            }
          }
        }
      }
    }
  }
  return result;
}
