{
  List<SNode> abstractMethods=new ArrayList<SNode>();
  List<SNode> implementedMethods=new ArrayList<SNode>();
  List<SNode> concepts=SConceptOperations.getAllSuperConcepts(thisNode,false);
  ListSequence.fromList(concepts).addElement(thisNode);
  for (  SNode concept : concepts) {
    SNode behavior=SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,LanguageAspect.BEHAVIOR),MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"));
    for (    SNode method : SLinkOperations.getChildren(behavior,MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,0x11d43447b25L,"method"))) {
      if (SPropertyOperations.getBoolean(method,MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x11d43480582L,"isAbstract"))) {
        ListSequence.fromList(abstractMethods).addElement(method);
      }
      if (SLinkOperations.getTarget(method,MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x11d4348057fL,"overriddenMethod")) != null && !(SPropertyOperations.getBoolean(method,MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x11d43480582L,"isAbstract")))) {
        ListSequence.fromList(implementedMethods).addElement(SLinkOperations.getTarget(method,MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x11d4348057fL,"overriddenMethod")));
      }
    }
  }
  ListSequence.fromList(abstractMethods).removeSequence(ListSequence.fromList(implementedMethods));
  return abstractMethods;
}
