{
  this.addNodeById("4412735672780107330");
  this.addNodeById("4412735672780109161");
  this.addNodeById("4412735672780116642");
  InlineMethodRefactoring ref=new InlineMethodRefactoring(SNodeOperations.cast(this.getNodeById("4412735672780109165"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081236700937l,"jetbrains.mps.baseLanguage.structure.StaticMethodCall")));
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("4412735672780109162"),MetaAdapterFactory.getConcept(new UUID(-2906742361791184688l,-8921219390863794400l),1192794782375l,"jetbrains.mps.lang.intentions.structure.DescriptionBlock")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("4412735672780116650"),MetaAdapterFactory.getConcept(new UUID(-2906742361791184688l,-8921219390863794400l),1192794782375l,"jetbrains.mps.lang.intentions.structure.DescriptionBlock")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
