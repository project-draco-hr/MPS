{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_2qnle6_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new AdditionalForLoopVariable_Constraints();
      }
    break;
case 1:
  if (true) {
    return new Annotation_Constraints();
  }
break;
case 2:
if (true) {
return new AnnotationInstance_Constraints();
}
break;
case 3:
if (true) {
return new AnnotationInstanceValue_Constraints();
}
break;
case 4:
if (true) {
return new AnnotationMethodDeclaration_Constraints();
}
break;
case 5:
if (true) {
return new AnonymousClass_Constraints();
}
break;
case 6:
if (true) {
return new ArrayCloneOperation_Constraints();
}
break;
case 7:
if (true) {
return new ArrayLengthOperation_Constraints();
}
break;
case 8:
if (true) {
return new ArrayLiteral_Constraints();
}
break;
case 9:
if (true) {
return new BaseMethodDeclaration_Constraints();
}
break;
case 10:
if (true) {
return new BaseStringOperation_Constraints();
}
break;
case 11:
if (true) {
return new BaseVariableDeclaration_Constraints();
}
break;
case 12:
if (true) {
return new ClassConcept_Constraints();
}
break;
case 13:
if (true) {
return new ClassCreator_Constraints();
}
break;
case 14:
if (true) {
return new Classifier_Constraints();
}
break;
case 15:
if (true) {
return new ClassifierClassExpression_Constraints();
}
break;
case 16:
if (true) {
return new ClassifierMember_Constraints();
}
break;
case 17:
if (true) {
return new ClassifierType_Constraints();
}
break;
case 18:
if (true) {
return new ClosureParameterReference_Constraints();
}
break;
case 19:
if (true) {
return new ConstructorDeclaration_Constraints();
}
break;
case 20:
if (true) {
return new DefaultClassCreator_Constraints();
}
break;
case 21:
if (true) {
return new EnumConstantDeclaration_Constraints();
}
break;
case 22:
if (true) {
return new EnumConstantReference_Constraints();
}
break;
case 23:
if (true) {
return new EnumValueOfExpression_Constraints();
}
break;
case 24:
if (true) {
return new EnumValuesExpression_Constraints();
}
break;
case 25:
if (true) {
return new FieldReferenceOperation_Constraints();
}
break;
case 26:
if (true) {
return new IOperation_Constraints();
}
break;
case 27:
if (true) {
return new IValidIdentifier_Constraints();
}
break;
case 28:
if (true) {
return new ImplicitAnnotationInstanceValue_Constraints();
}
break;
case 29:
if (true) {
return new InstanceMethodCallOperation_Constraints();
}
break;
case 30:
if (true) {
return new InstanceMethodDeclaration_Constraints();
}
break;
case 31:
if (true) {
return new Interface_Constraints();
}
break;
case 32:
if (true) {
return new LocalInstanceFieldReference_Constraints();
}
break;
case 33:
if (true) {
return new LocalInstanceMethodCall_Constraints();
}
break;
case 34:
if (true) {
return new LocalMethodCall_Constraints();
}
break;
case 35:
if (true) {
return new LocalPropertyReference_Constraints();
}
break;
case 36:
if (true) {
return new LocalStaticFieldReference_Constraints();
}
break;
case 37:
if (true) {
return new LocalStaticMethodCall_Constraints();
}
break;
case 38:
if (true) {
return new LocalVariableDeclaration_Constraints();
}
break;
case 39:
if (true) {
return new LocalVariableReference_Constraints();
}
break;
case 40:
if (true) {
return new LoopLabelReference_Constraints();
}
break;
case 41:
if (true) {
return new ParameterReference_Constraints();
}
break;
case 42:
if (true) {
return new Property_Constraints();
}
break;
case 43:
if (true) {
return new PropertyReference_Constraints();
}
break;
case 44:
if (true) {
return new PropertyValueReference_Constraints();
}
break;
case 45:
if (true) {
return new QualifiedSuperMethodCall_Constraints();
}
break;
case 46:
if (true) {
return new StaticFieldDeclaration_Constraints();
}
break;
case 47:
if (true) {
return new StaticFieldReference_Constraints();
}
break;
case 48:
if (true) {
return new StaticMethodCall_Constraints();
}
break;
case 49:
if (true) {
return new SuperConstructorInvocation_Constraints();
}
break;
case 50:
if (true) {
return new SuperMethodCall_Constraints();
}
break;
case 51:
if (true) {
return new ThisConstructorInvocation_Constraints();
}
break;
case 52:
if (true) {
return new ThisExpression_Constraints();
}
break;
case 53:
if (true) {
return new TypeVariableReference_Constraints();
}
break;
case 54:
if (true) {
return new VariableReference_Constraints();
}
break;
default :
}
}
return new BaseConstraintsDescriptor(concept);
}
