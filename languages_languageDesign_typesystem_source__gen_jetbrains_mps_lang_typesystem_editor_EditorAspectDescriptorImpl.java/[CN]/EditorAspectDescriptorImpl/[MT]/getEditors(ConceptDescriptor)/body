{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractComparableStatement_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractEquationStatement_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractInequationStatement_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AddDependencyStatement_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ApplicableNodeCondition_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ApplicableNodeReference_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AssertStatement_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AttributedNodeExpression_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CaretPositionOperation_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CoerceExpression_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CoerceStatement_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CoerceStrongExpression_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ComparisonRule_Editor()));
case 13:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ConceptClauseLinkInfo_Editor()));
case 14:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ConceptReference_Editor()));
case 15:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CreateEquationStatement_Editor()));
case 16:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DefaultGroupReference_Editor()));
case 17:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ErrorInfoExpression_Editor()));
case 18:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetOperationType_Editor()));
case 19:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ImmediateSupertypesExpression_Editor()));
case 20:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InequationReference_Editor()));
case 21:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InequationReplacementRule_Editor()));
case 22:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InferenceRule_Editor()));
case 23:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InfoStatement_Editor()));
case 24:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IsStrongSubtypeExpression_Editor()));
case 25:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IsSubtypeExpression_Editor()));
case 26:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new JoinContainer_Editor()));
case 27:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new JoinType_Editor()));
case 28:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LinkPatternVariableReference_Editor()));
case 29:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MatchStatement_Editor()));
case 30:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MatchStatementItem_Editor()));
case 31:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MeetContainer_Editor()));
case 32:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MeetType_Editor()));
case 33:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MessageStatementAnnotation_Editor()));
case 34:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultipleForeachLoop_Editor()));
case 35:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultipleForeachLoopVariable_Editor()));
case 36:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NodeInfo_Editor()));
case 37:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Node_InferTypeOperation_Editor()));
case 38:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Node_TypeOperation_Editor()));
case 39:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NonTypesystemRule_Editor()));
case 40:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NormalTypeClause_Editor()));
case 41:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OrStatement_Editor()));
case 42:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OriginalNodeId_Editor()));
case 43:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverloadedOpRulesContainer_Editor()));
case 44:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverloadedOpTypeRule_OneTypeSpecified_Editor()));
case 45:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverloadedOperatorTypeRule_Editor()));
case 46:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverridesConceptFunction_Editor()));
case 47:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PatternCondition_Editor()));
case 48:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PatternVariableReference_Editor()));
case 49:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PrintToTrace_Editor()));
case 50:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PropertyMessageTarget_Editor()));
case 51:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PropertyNameTarget_Editor()));
case 52:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PropertyPatternVariableReference_Editor()));
case 53:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new QuickFixArgument_Editor()));
case 54:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new QuickFixArgumentReference_Editor()));
case 55:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new QuickFixField_Editor()));
case 56:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new QuickFixFieldReference_Editor()));
case 57:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ReferenceMessageTarget_Editor()));
case 58:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ReferenceRoleTarget_Editor()));
case 59:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ReplacementRuleReference_Editor()));
case 60:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ReportErrorStatement_Editor()));
case 61:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RuntimeErrorType_Editor()));
case 62:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RuntimeTypeVariable_Editor()));
case 63:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SelectionType_Editor()));
case 64:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubstituteTypeRule_Editor()));
case 65:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubtypingRule_Editor()));
case 66:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SupersedeConceptFunction_Editor()));
case 67:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeCheckerAccessExpression_Editor()));
case 68:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeClause_Editor()));
case 69:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeOfExpression_Editor()));
case 70:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeVarDeclaration_Editor()));
case 71:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypeVarReference_Editor()));
case 72:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypesystemIntention_Editor()));
case 73:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypesystemIntentionArgument_Editor()));
case 74:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TypesystemQuickFix_Editor()));
case 75:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new VariableConverterItem_Editor()));
case 76:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new VariableConvertersContainer_Editor()));
case 77:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WarningStatement_Editor()));
case 78:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WasSelectedNodeOperation_Editor()));
case 79:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WhenConcreteStatement_Editor()));
case 80:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WhenConcreteVariableDeclaration_Editor()));
case 81:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new WhenConcreteVariableReference_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
