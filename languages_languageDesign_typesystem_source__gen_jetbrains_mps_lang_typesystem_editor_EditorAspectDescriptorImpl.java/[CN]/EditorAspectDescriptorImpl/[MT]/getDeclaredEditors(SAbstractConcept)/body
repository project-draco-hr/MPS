{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractComparableStatement_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AbstractEquationStatement_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractInequationStatement_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddDependencyStatement_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ApplicableNodeCondition_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new ApplicableNodeReference_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new AssertStatement_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new AttributedNodeExpression_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new CaretPositionOperation_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new CoerceExpression_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new CoerceStatement_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new CoerceStrongExpression_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new ComparisonRule_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptClauseLinkInfo_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptReference_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new CreateEquationStatement_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new DefaultGroupReference_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new ErrorInfoExpression_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetOperationType_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new ImmediateSupertypesExpression_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new InequationReference_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new InequationReplacementRule_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new InferenceRule_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new InfoStatement_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new IsApplicableConceptFunction_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new IsStrongSubtypeExpression_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new IsSubtypeExpression_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new JoinContainer_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new JoinType_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkPatternVariableReference_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchStatement_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchStatementItem_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new MeetContainer_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new MeetType_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new MessageStatementAnnotation_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultipleForeachLoop_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultipleForeachLoopVariable_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeInfo_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_InferTypeOperation_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new Node_TypeOperation_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new NonTypesystemRule_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new NormalTypeClause_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new OrStatement_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new OriginalNodeId_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new OverloadedOpRulesContainer_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new OverloadedOpTypeRule_OneTypeSpecified_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new OverloadedOperatorTypeRule_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new OverridesConceptFunction_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new PatternCondition_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new PatternVariableReference_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new PrintToTrace_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyMessageTarget_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyNameTarget_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyPatternVariableReference_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new QuickFixArgument_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new QuickFixArgumentReference_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new QuickFixField_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new QuickFixFieldReference_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceMessageTarget_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceRoleTarget_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReplacementRuleReference_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReportErrorStatement_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new RuntimeErrorType_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new RuntimeTypeVariable_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new SelectionType_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstituteTypeRule_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubtypingRule_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new SupersedeConceptFunction_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeCheckerAccessExpression_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeClause_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeOfExpression_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeVarDeclaration_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypeVarReference_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypesystemIntention_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypesystemIntentionArgument_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new TypesystemQuickFix_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableConverterItem_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableConvertersContainer_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new WarningStatement_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new WasSelectedNodeOperation_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new WhenConcreteStatement_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new WhenConcreteVariableDeclaration_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new WhenConcreteVariableReference_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
