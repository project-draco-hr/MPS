{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbstractComparableStatement_Editor();
case 1:
  return new AbstractEquationStatement_Editor();
case 2:
return new AbstractInequationStatement_Editor();
case 3:
return new AddDependencyStatement_Editor();
case 4:
return new ApplicableNodeCondition_Editor();
case 5:
return new ApplicableNodeReference_Editor();
case 6:
return new AssertStatement_Editor();
case 7:
return new CaretPositionOperation_Editor();
case 8:
return new CoerceExpression_Editor();
case 9:
return new CoerceStatement_Editor();
case 10:
return new CoerceStrongExpression_Editor();
case 11:
return new ComparisonRule_Editor();
case 12:
return new ConceptClauseLinkInfo_Editor();
case 13:
return new ConceptReference_Editor();
case 14:
return new ConceptTypeClause_Editor();
case 15:
return new CreateEquationStatement_Editor();
case 16:
return new DefaultGroupReference_Editor();
case 17:
return new Dependency_Editor();
case 18:
return new DependentComputationItem_Editor();
case 19:
return new ErrorInfoExpression_Editor();
case 20:
return new GetOperationType_Editor();
case 21:
return new ImmediateSupertypesExpression_Editor();
case 22:
return new InequationReference_Editor();
case 23:
return new InequationReplacementRule_Editor();
case 24:
return new InferenceRule_Editor();
case 25:
return new InfoStatement_Editor();
case 26:
return new IsStrongSubtypeExpression_Editor();
case 27:
return new IsSubtypeExpression_Editor();
case 28:
return new JoinContainer_Editor();
case 29:
return new JoinType_Editor();
case 30:
return new LinkPatternVariableReference_Editor();
case 31:
return new MatchStatement_Editor();
case 32:
return new MatchStatementItem_Editor();
case 33:
return new MeetContainer_Editor();
case 34:
return new MeetType_Editor();
case 35:
return new MultipleForeachLoop_Editor();
case 36:
return new MultipleForeachLoopVariable_Editor();
case 37:
return new NodeInfo_Editor();
case 38:
return new Node_InferTypeOperation_Editor();
case 39:
return new Node_TypeOperation_Editor();
case 40:
return new NonTypesystemRule_Editor();
case 41:
return new NormalTypeClause_Editor();
case 42:
return new OperationContextExpression_Editor();
case 43:
return new OrStatement_Editor();
case 44:
return new OriginalNodeId_Editor();
case 45:
return new OverloadedOpRulesContainer_Editor();
case 46:
return new OverloadedOpTypeRule_OneTypeSpecified_Editor();
case 47:
return new OverloadedOperatorTypeRule_Editor();
case 48:
return new PatternCondition_Editor();
case 49:
return new PatternVariableReference_Editor();
case 50:
return new PrintToTrace_Editor();
case 51:
return new PropertyMessageTarget_Editor();
case 52:
return new PropertyNameTarget_Editor();
case 53:
return new PropertyPatternVariableReference_Editor();
case 54:
return new QuickFixArgument_Editor();
case 55:
return new QuickFixArgumentReference_Editor();
case 56:
return new QuickFixField_Editor();
case 57:
return new QuickFixFieldReference_Editor();
case 58:
return new ReferenceMessageTarget_Editor();
case 59:
return new ReferenceRoleTarget_Editor();
case 60:
return new ReplacementRuleReference_Editor();
case 61:
return new ReportErrorStatement_Editor();
case 62:
return new RuntimeErrorType_Editor();
case 63:
return new RuntimeTypeVariable_Editor();
case 64:
return new SelectionType_Editor();
case 65:
return new SubtypingRule_Editor();
case 66:
return new TypeCheckerAccessExpression_Editor();
case 67:
return new TypeClause_Editor();
case 68:
return new TypeOfExpression_Editor();
case 69:
return new TypeVarDeclaration_Editor();
case 70:
return new TypeVarReference_Editor();
case 71:
return new TypesystemIntention_Editor();
case 72:
return new TypesystemIntentionArgument_Editor();
case 73:
return new TypesystemQuickFix_Editor();
case 74:
return new VariableConverterItem_Editor();
case 75:
return new VariableConvertersContainer_Editor();
case 76:
return new WarningStatement_Editor();
case 77:
return new WasSelectedNodeOperation_Editor();
case 78:
return new WhenConcreteStatement_Editor();
case 79:
return new WhenConcreteVariableDeclaration_Editor();
case 80:
return new WhenConcreteVariableReference_Editor();
default :
}
return null;
}
