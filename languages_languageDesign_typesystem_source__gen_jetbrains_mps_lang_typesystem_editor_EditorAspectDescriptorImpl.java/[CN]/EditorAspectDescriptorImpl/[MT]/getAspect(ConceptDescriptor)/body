{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0dd,descriptor.getConceptFqName())) {
case 0:
    return getAbstractComparableStatementEditorAspect();
case 1:
  return getAbstractEquationStatementEditorAspect();
case 2:
return getAbstractInequationStatementEditorAspect();
case 3:
return getAddDependencyStatementEditorAspect();
case 4:
return getApplicableNodeConditionEditorAspect();
case 5:
return getApplicableNodeReferenceEditorAspect();
case 6:
return getAssertStatementEditorAspect();
case 7:
return getCaretPositionOperationEditorAspect();
case 8:
return getCoerceExpressionEditorAspect();
case 9:
return getCoerceStatementEditorAspect();
case 10:
return getCoerceStrongExpressionEditorAspect();
case 11:
return getComparisonRuleEditorAspect();
case 12:
return getConceptClauseLinkInfoEditorAspect();
case 13:
return getConceptReferenceEditorAspect();
case 14:
return getConceptTypeClauseEditorAspect();
case 15:
return getCreateEquationStatementEditorAspect();
case 16:
return getDefaultGroupReferenceEditorAspect();
case 17:
return getDependencyEditorAspect();
case 18:
return getDependentComputationItemEditorAspect();
case 19:
return getErrorInfoExpressionEditorAspect();
case 20:
return getGetOperationTypeEditorAspect();
case 21:
return getImmediateSupertypesExpressionEditorAspect();
case 22:
return getInequationReferenceEditorAspect();
case 23:
return getInequationReplacementRuleEditorAspect();
case 24:
return getInferenceRuleEditorAspect();
case 25:
return getInfoStatementEditorAspect();
case 26:
return getIsStrongSubtypeExpressionEditorAspect();
case 27:
return getIsSubtypeExpressionEditorAspect();
case 28:
return getJoinContainerEditorAspect();
case 29:
return getJoinTypeEditorAspect();
case 30:
return getLinkPatternVariableReferenceEditorAspect();
case 31:
return getMatchStatementEditorAspect();
case 32:
return getMatchStatementItemEditorAspect();
case 33:
return getMeetContainerEditorAspect();
case 34:
return getMeetTypeEditorAspect();
case 35:
return getMultipleForeachLoopEditorAspect();
case 36:
return getMultipleForeachLoopVariableEditorAspect();
case 37:
return getNodeInfoEditorAspect();
case 38:
return getNode_InferTypeOperationEditorAspect();
case 39:
return getNode_TypeOperationEditorAspect();
case 40:
return getNonTypesystemRuleEditorAspect();
case 41:
return getNormalTypeClauseEditorAspect();
case 42:
return getOperationContextExpressionEditorAspect();
case 43:
return getOrStatementEditorAspect();
case 44:
return getOriginalNodeIdEditorAspect();
case 45:
return getOverloadedOpRulesContainerEditorAspect();
case 46:
return getOverloadedOpTypeRule_OneTypeSpecifiedEditorAspect();
case 47:
return getOverloadedOperatorTypeRuleEditorAspect();
case 48:
return getPatternConditionEditorAspect();
case 49:
return getPatternVariableReferenceEditorAspect();
case 50:
return getPrintToTraceEditorAspect();
case 51:
return getPropertyMessageTargetEditorAspect();
case 52:
return getPropertyNameTargetEditorAspect();
case 53:
return getPropertyPatternVariableReferenceEditorAspect();
case 54:
return getQuickFixArgumentEditorAspect();
case 55:
return getQuickFixArgumentReferenceEditorAspect();
case 56:
return getQuickFixFieldEditorAspect();
case 57:
return getQuickFixFieldReferenceEditorAspect();
case 58:
return getReferenceMessageTargetEditorAspect();
case 59:
return getReferenceRoleTargetEditorAspect();
case 60:
return getReplacementRuleReferenceEditorAspect();
case 61:
return getReportErrorStatementEditorAspect();
case 62:
return getRuntimeErrorTypeEditorAspect();
case 63:
return getRuntimeTypeVariableEditorAspect();
case 64:
return getSelectionTypeEditorAspect();
case 65:
return getSubtypingRuleEditorAspect();
case 66:
return getTypeCheckerAccessExpressionEditorAspect();
case 67:
return getTypeClauseEditorAspect();
case 68:
return getTypeOfExpressionEditorAspect();
case 69:
return getTypeVarDeclarationEditorAspect();
case 70:
return getTypeVarReferenceEditorAspect();
case 71:
return getTypesystemIntentionEditorAspect();
case 72:
return getTypesystemIntentionArgumentEditorAspect();
case 73:
return getTypesystemQuickFixEditorAspect();
case 74:
return getVariableConverterItemEditorAspect();
case 75:
return getVariableConvertersContainerEditorAspect();
case 76:
return getWarningStatementEditorAspect();
case 77:
return getWasSelectedNodeOperationEditorAspect();
case 78:
return getWhenConcreteStatementEditorAspect();
case 79:
return getWhenConcreteVariableDeclarationEditorAspect();
case 80:
return getWhenConcreteVariableReferenceEditorAspect();
default :
}
return null;
}
