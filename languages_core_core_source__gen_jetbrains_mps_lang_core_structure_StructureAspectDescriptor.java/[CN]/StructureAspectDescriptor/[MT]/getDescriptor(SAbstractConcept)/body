{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0nb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAttribute;
      }
    break;
case 1:
  if (true) {
    return myConceptBaseCommentAttribute;
  }
break;
case 2:
if (true) {
return myConceptBaseConcept;
}
break;
case 3:
if (true) {
return myConceptChildAttribute;
}
break;
case 4:
if (true) {
return myConceptExportScope;
}
break;
case 5:
if (true) {
return myConceptExportScopeModule;
}
break;
case 6:
if (true) {
return myConceptExportScopeNamespace;
}
break;
case 7:
if (true) {
return myConceptExportScopePublic;
}
break;
case 8:
if (true) {
return myConceptIAntisuppressErrors;
}
break;
case 9:
if (true) {
return myConceptICanSuppressErrors;
}
break;
case 10:
if (true) {
return myConceptIContainer;
}
break;
case 11:
if (true) {
return myConceptIDeprecatable;
}
break;
case 12:
if (true) {
return myConceptIDontApplyTypesystemRules;
}
break;
case 13:
if (true) {
return myConceptIDontSubstituteByDefault;
}
break;
case 14:
if (true) {
return myConceptIMetaLevelChanger;
}
break;
case 15:
if (true) {
return myConceptINamedConcept;
}
break;
case 16:
if (true) {
return myConceptIOldCommentAnnotation;
}
break;
case 17:
if (true) {
return myConceptIOldCommentContainer;
}
break;
case 18:
if (true) {
return myConceptIResolveInfo;
}
break;
case 19:
if (true) {
return myConceptISkipConstraintsChecking;
}
break;
case 20:
if (true) {
return myConceptIStubForAnotherConcept;
}
break;
case 21:
if (true) {
return myConceptISuppressErrors;
}
break;
case 22:
if (true) {
return myConceptIType;
}
break;
case 23:
if (true) {
return myConceptIWrapper;
}
break;
case 24:
if (true) {
return myConceptImplementationContainer;
}
break;
case 25:
if (true) {
return myConceptImplementationPart;
}
break;
case 26:
if (true) {
return myConceptImplementationWithStubPart;
}
break;
case 27:
if (true) {
return myConceptInterfacePart;
}
break;
case 28:
if (true) {
return myConceptLinkAttribute;
}
break;
case 29:
if (true) {
return myConceptNodeAttribute;
}
break;
case 30:
if (true) {
return myConceptPropertyAttribute;
}
break;
case 31:
if (true) {
return myConceptScopeFacade;
}
break;
case 32:
if (true) {
return myConceptScopeProvider;
}
break;
case 33:
if (true) {
return myConceptSideTransformInfo;
}
break;
case 34:
if (true) {
return myConceptSuppressErrorsAnnotation;
}
break;
default :
}
}
return null;
}
