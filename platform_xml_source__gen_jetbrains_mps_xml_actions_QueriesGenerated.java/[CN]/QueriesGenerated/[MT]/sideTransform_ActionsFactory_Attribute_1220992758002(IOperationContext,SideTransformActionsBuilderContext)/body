{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.structure.Attribute");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode nextAttr=SConceptOperations.createNewNode("jetbrains.mps.xml.structure.Attribute",null);
        SPropertyOperations.set(nextAttr,"name",StringUtils.trim(pattern));
        SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),nextAttr);
        return nextAttr;
      }
      public String getMatchingText(      String pattern){
        return pattern;
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
