{
  int minX=Integer.MAX_VALUE;
  int minY=Integer.MAX_VALUE;
  int maxX=Integer.MIN_VALUE;
  int maxY=Integer.MIN_VALUE;
  for (  Point p : ListSequence.fromList(chain)) {
    minX=Math.min(minX,p.x);
    minY=Math.min(minX,p.y);
    maxX=Math.max(maxX,p.x);
    maxY=Math.max(maxY,p.y);
  }
  List<Point> in=ListSequence.fromList(new ArrayList<Point>());
  for (  Point p : ListSequence.fromList(chain)) {
    if (p.x != minX && p.x != maxX) {
      ListSequence.fromList(in).addElement(p);
    }
 else     if (p.y != minY && p.y != maxY) {
      ListSequence.fromList(in).addElement(p);
    }
  }
  if (ListSequence.fromList(in).count() == 2) {
    boolean ver=ListSequence.fromList(in).getElement(0).x == ListSequence.fromList(in).getElement(1).x;
    int pX=Math.max(ListSequence.fromList(in).getElement(0).x,ListSequence.fromList(in).getElement(1).x);
    int pY=Math.max(ListSequence.fromList(in).getElement(0).y,ListSequence.fromList(in).getElement(1).y);
    if (testRect(new Rectangle(minX,minY,pX - minX,pY - minY))) {
      return getChain(minX,minY,maxX,maxY,!(ver));
    }
    pX=Math.min(ListSequence.fromList(in).getElement(0).x,ListSequence.fromList(in).getElement(1).x);
    pY=Math.min(ListSequence.fromList(in).getElement(0).y,ListSequence.fromList(in).getElement(1).y);
    if (testRect(new Rectangle(pX,pY,maxX - pX,maxY - pY))) {
      if (testRect(new Rectangle(minX,minY,pX - minX,pY - minY))) {
        return getChain(minX,minY,maxX,maxY,ver);
      }
    }
  }
  return null;
}
