{
  boolean foundOptimize=true;
  while (foundOptimize) {
    for (    Edge edge : SetSequence.fromSet(MapSequence.fromMap(myLayout.getEdgeLayout()).keySet())) {
      List<Point> path=myLayout.getLayoutFor(edge);
      int size=ListSequence.fromList(path).count();
      for (int i=0; i < size - 4; i++) {
        List<Point> chain=ListSequence.fromList(new ArrayList<Point>());
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 1));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 2));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 3));
        tryChain(chain);
      }
    }
  }
}
