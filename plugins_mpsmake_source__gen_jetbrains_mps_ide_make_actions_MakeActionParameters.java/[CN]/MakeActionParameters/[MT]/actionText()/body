{
  String fmt=(myCleanBuild ? "Rebuild %s" : "Make %s");
  if (myModels != null && ListSequence.fromList(myModels).isNotEmpty()) {
    if (!(ListSequence.fromList(myModels).any(new IWhereFilter<SModel>(){
      public boolean accept(      SModel md){
        return SNodeOperations.isGeneratable(md);
      }
    }
))) {
      return null;
    }
    if (ListSequence.fromList(myModels).count() > 1) {
      return String.format(fmt,"Selected Models");
    }
    String modelName=NameUtil.compactNamespace(ListSequence.fromList(myModels).first().getModelName());
    return String.format(fmt,String.format("Model '%s'",modelName));
  }
  if (myModules != null && ListSequence.fromList(myModules).isNotEmpty()) {
    if (ListSequence.fromList(myModules).any(new IWhereFilter<SModule>(){
      public boolean accept(      SModule m){
        return m == null;
      }
    }
) || ListSequence.fromList(myModules).all(new IWhereFilter<SModule>(){
      public boolean accept(      SModule m){
        return m.isReadOnly();
      }
    }
)) {
      return null;
    }
    if (ListSequence.fromList(myModules).count() > 1) {
      return String.format(fmt,"Selected Modules");
    }
    SModule module=ListSequence.fromList(myModules).first();
    String kindName=NameUtil.shortNameFromLongName(module.getClass().getName().replaceAll("\\$.*",""));
    String moduleName=NameUtil.compactNamespace(module.getModuleName());
    return String.format(fmt,String.format("%s '%s'",kindName,moduleName));
  }
  return null;
}
