{
  ComputeRunnable<UsagesTreeNode> cr=new ComputeRunnable<UsagesTreeNode>(new Computable<UsagesTreeNode>(){
    @Override public UsagesTreeNode compute(){
      UsagesTreeNode root=new UsagesTreeNode();
      if (myContents == null || myContents.getTreeRoot().getChildren().isEmpty()) {
        return root;
      }
      if (myShowSearchedNodes) {
        HashSet<PathItemRole> searchedNodesPathProvider=new HashSet<PathItemRole>();
        searchedNodesPathProvider.add(PathItemRole.ROLE_MAIN_SEARCHED_NODES);
        DataNode searchedNodesRoot=myContents.getTreeRoot().getChildren().get(0);
        if (searchedNodesRoot.containsNodes(NodeNodeData.class)) {
          if (myGroupSearchedNodes) {
            searchedNodesPathProvider.add(PathItemRole.ROLE_ROOT);
            searchedNodesPathProvider.add(PathItemRole.ROLE_ROOT_TO_TARGET_NODE);
          }
          searchedNodesPathProvider.add(PathItemRole.ROLE_TARGET_NODE);
        }
 else         if (searchedNodesRoot.containsNodes(ModelNodeData.class)) {
          if (myGroupSearchedNodes) {
            searchedNodesPathProvider.add(PathItemRole.ROLE_MODULE);
          }
          searchedNodesPathProvider.add(PathItemRole.ROLE_MODEL);
        }
 else {
          searchedNodesPathProvider.add(PathItemRole.ROLE_MODULE);
        }
        root.add(buildTree(searchedNodesRoot,searchedNodesPathProvider));
      }
      root.add(buildTree(myContents.getTreeRoot().getChildren().get(1),myResultPathProvider));
      return root;
    }
  }
);
  myProject.getModelAccess().runReadAction(cr);
  return cr.getResult();
}
