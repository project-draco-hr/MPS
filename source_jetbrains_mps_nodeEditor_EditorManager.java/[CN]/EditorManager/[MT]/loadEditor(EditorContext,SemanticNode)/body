{
  Language language=Language.getLanguage(node,context.getProject());
  if (language == null) {
    (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find language.")).printStackTrace();
    return null;
  }
  SemanticTypeDeclaration typeDeclaration=language.findTypeDeclaration(SemanticModelUtil.getNodeTypeName(node));
  if (typeDeclaration == null) {
    (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find the type declaration.")).printStackTrace();
    return null;
  }
  String languageEditorFQName=language.getLanguageEditorFQName();
  if (languageEditorFQName == null) {
    (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" : no editor model.")).printStackTrace();
    return null;
  }
  String editorClassPackageName="jetbrains.mps." + languageEditorFQName;
  String editorClassName=typeDeclaration.getName() + "_Editor";
  try {
    Class editorClass=Class.forName(editorClassPackageName + '.' + editorClassName);
    return (INodeEditor)editorClass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
