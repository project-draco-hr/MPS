{
  Language language=Language.getLanguage(node,context.getProject());
  if (language == null) {
    (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find language.")).printStackTrace();
    return null;
  }
  ConceptDeclaration nodeConcept=language.findTypeDeclaration(SModelUtil.getNodeTypeName(node));
  if (nodeConcept == null) {
    (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find the type declaration.")).printStackTrace();
    return null;
  }
  String stereotype=node.getModel().getStereotype();
  String languageEditorFQName=language.getLanguageEditorFQName(stereotype);
  if (languageEditorFQName == null) {
    languageEditorFQName=language.getLanguageEditorFQName();
    if (languageEditorFQName == null) {
      (new RuntimeException("Error loading editor for node \"" + node.getDebugText() + "\" <<"+ stereotype+ ">> : no editor model.")).printStackTrace();
      return null;
    }
  }
  String editorClassName=languageEditorFQName + "." + nodeConcept.getName()+ "_Editor";
  try {
    Class editorClass=Class.forName(editorClassName,true,ourClassLoader);
    return (INodeEditor)editorClass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    System.err.println("Couldn't load editor " + editorClassName + " : Class Not Found!");
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
