{
  Language language=Language.getLanguage(node,context.getProject());
  if (language == null) {
    LOG.errorWithTrace("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find language.");
    return null;
  }
  String conceptName=JavaNameUtil.shortName(node.getClass().getName());
  ConceptDeclaration nodeConcept=language.findTypeDeclaration(conceptName);
  if (nodeConcept == null) {
    LOG.errorWithTrace("Error loading editor for node \"" + node.getDebugText() + "\" : couldn't find the type declaration.");
    return null;
  }
  String stereotype=node.getModel().getStereotype();
  String languageEditorFQName=language.getEditorFQName(stereotype);
  if (languageEditorFQName == null) {
    languageEditorFQName=language.getEditorFQName();
    if (languageEditorFQName == null) {
      LOG.errorWithTrace("Error loading editor for node \"" + node.getDebugText() + "\" <<"+ stereotype+ ">> : no editor model.");
      return null;
    }
  }
  String editorClassName=languageEditorFQName + "." + nodeConcept.getName()+ "_Editor";
  try {
    Class editorClass=Class.forName(editorClassName,true,ClassLoaderManager.getInstance().getClassLoader());
    return (INodeEditor)editorClass.newInstance();
  }
 catch (  ClassNotFoundException e) {
    LOG.warning("Couldn't load editor " + editorClassName + " : Class Not Found!");
  }
catch (  InstantiationException e) {
    LOG.error(e);
  }
catch (  IllegalAccessException e) {
    LOG.error(e);
  }
catch (  Exception e) {
    LOG.error(e);
  }
  return null;
}
