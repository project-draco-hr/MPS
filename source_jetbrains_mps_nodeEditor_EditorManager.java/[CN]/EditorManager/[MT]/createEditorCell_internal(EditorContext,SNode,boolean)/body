{
  myCreatingInspectedCell=false;
  INodeEditor editor=getEditor(context,node);
  AbstractEditorComponent abstractEditorComponent=context.getNodeEditorComponent();
  EditorCell nodeCell=null;
  CellBuildNodeAccessListener nodeAccessListener=new CellBuildNodeAccessListener(abstractEditorComponent);
  try {
    NodeReadAccessCaster.setNodeReadAccessListener(nodeAccessListener);
    nodeCell=isInspectorCell ? editor.createInspectedCell(context,node) : editor.createEditorCell(context,node);
  }
 catch (  Exception e) {
    LOG.error("Failed to create cell for node " + node.getDebugText(),e);
    nodeCell=EditorCell_Error.create(context,node,"!exception!:" + node.getDebugText());
  }
 finally {
    if (nodeCell != null) {
      nodeCell.putUserObject(IS_BIG_CELL,true);
      abstractEditorComponent.registerAsBigCell(nodeCell);
      nodeAccessListener.recordingFinishedForCell(nodeCell);
    }
    NodeReadAccessCaster.removeNodeAccessListener();
  }
  if (node.hasRightTransformHint()) {
    nodeCell=addRightTransformHintCell(node,nodeCell,context);
    return nodeCell;
  }
  nodeCell.setInspectorCell(isInspectorCell);
  return nodeCell;
}
