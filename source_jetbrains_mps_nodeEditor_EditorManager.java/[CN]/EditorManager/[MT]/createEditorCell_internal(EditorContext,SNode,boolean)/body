{
  myCreatingInspectedCell=false;
  INodeEditor editor=getEditor(context,node);
  AbstractEditorComponent abstractEditorComponent=context.getNodeEditorComponent();
  EditorCell nodeCell=null;
  CellBuildNodeAccessListener nodeAccessListener=new CellBuildNodeAccessListener(abstractEditorComponent);
  try {
    NodeReadAccessCaster.setNodeReadAccessListener(nodeAccessListener);
    nodeCell=isInspectorCell ? editor.createInspectedCell(context,node) : editor.createEditorCell(context,node);
  }
 catch (  Exception e) {
    LOG.error("Failed to create cell for node " + node.getDebugText(),e);
    nodeCell=EditorCell_Error.create(context,node,"!exception!:" + node.getDebugText());
  }
 finally {
    if (nodeCell != null) {
      nodeCell.putUserObject(IS_BIG_CELL,true);
      abstractEditorComponent.registerAsBigCell(nodeCell);
      nodeAccessListener.recordingFinishedForCell(nodeCell);
    }
    NodeReadAccessCaster.removeNodeAccessListener();
  }
  if (node.getProperty(SNode.EAST_TRANSFORM_HINT) != null) {
    EditorCell_Collection rowWrapper=EditorCell_Collection.createHorizontal(context,node);
    rowWrapper.setSelectable(false);
    rowWrapper.addEditorCell(nodeCell);
    String eastHint=node.getProperty(SNode.EAST_TRANSFORM_HINT);
    EditorCell_Constant eastTransformHintCell=EditorCell_Constant.create(context,node,eastHint,true);
    eastTransformHintCell.putUserObject(EditorCell.CELL_ID,node.getId());
    eastTransformHintCell.setEditable(true);
    eastTransformHintCell.setAction(EditorCellAction.DELETE,new CellAction_DeleteProperty(node,SNode.EAST_TRANSFORM_HINT));
    eastTransformHintCell.setSubstituteInfo(new AbstractNodeSubstituteInfo(context){
      protected List<INodeSubstituteItem> createActions(){
        return (List)ModelActions.createEastTransformHintSubstituteActions(node,context.getOperationContext().getScope());
      }
    }
);
    rowWrapper.addEditorCell(eastTransformHintCell);
    return rowWrapper;
  }
  if (node.getChildCount(NODE_TO_PLACE_AFTER) > 0) {
    EditorCell_Collection rowWrapper=EditorCell_Collection.createHorizontal(context,node);
    rowWrapper.setSelectable(false);
    rowWrapper.addEditorCell(nodeCell);
    SNode afterNode=node.getChild(NODE_TO_PLACE_AFTER);
    rowWrapper.addEditorCell(getEditor(context,afterNode).createEditorCell(context,afterNode));
    return rowWrapper;
  }
  return nodeCell;
}
