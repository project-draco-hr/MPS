{
  AbstractEditorComponent nodeEditorComponent=context.getNodeEditorComponent();
  EditorCell oldCell=nodeEditorComponent.getBigCellForNode(node);
  if (events != null) {
    boolean propertyChanged=false;
    boolean nodeChanged=false;
    for (    SModelEvent event : events) {
      SNode eventNode;
      if (event instanceof SModelChildEvent) {
        eventNode=((SModelChildEvent)event).getParent();
      }
 else       if (event instanceof SModelReferenceEvent) {
        eventNode=((SModelReferenceEvent)event).getReference().getSourceNode();
      }
 else {
        if (event instanceof SModelPropertyEvent) {
          SModelPropertyEvent propertyEvent=((SModelPropertyEvent)event);
          eventNode=propertyEvent.getNode();
          if (nodeEditorComponent.doesCellDependOnNode(oldCell,eventNode)) {
            propertyChanged=true;
            nodeChanged=true;
            if (eventNode == oldCell.getSNode() && oldCell instanceof EditorCell_Property) {
              EditorCell_Property cellProperty=(EditorCell_Property)oldCell;
              String oldPropertyValue=propertyEvent.getOldPropertyValue();
              String renderedText=cellProperty.getRenderedText();
              boolean propertyTyped=false;
              if (oldPropertyValue == null) {
                propertyTyped=renderedText == null;
              }
 else {
                propertyTyped=oldPropertyValue.equals(renderedText);
              }
              nodeChanged=!propertyTyped;
            }
          }
        }
        continue;
      }
      if (nodeEditorComponent.doesCellDependOnNode(oldCell,eventNode)) {
        nodeChanged=true;
        break;
      }
    }
    if (!nodeChanged) {
      if (myMap.containsKey(node)) {
        EditorCell editorCell=myMap.get(node);
        final Set<SNode> nodesOldCellDependsOn=nodeEditorComponent.getCopyOfNodesCellDependsOn(editorCell);
        if (nodesOldCellDependsOn != null) {
          CellBuildNodeAccessListener listensNothingListener=new CellBuildNodeAccessListener(nodeEditorComponent);
          NodeReadAccessCaster.setNodeReadAccessListener(listensNothingListener);
          listensNothingListener.addNodesToDependOn(nodesOldCellDependsOn);
          NodeReadAccessCaster.removeNodeAccessListener();
        }
        if (propertyChanged && !(editorCell instanceof EditorCell_Collection)) {
          editorCell.synchronizeViewWithModel();
        }
        return editorCell;
      }
    }
 else {
      myMap.putAll(findBigDescendantCellsAndTheirNodes(oldCell));
    }
  }
  nodeEditorComponent.clearNodesCellDependsOn(oldCell);
  EditorCell editorCell=createEditorCell_internal(context,node,myCreatingInspectedCell);
  return editorCell;
}
