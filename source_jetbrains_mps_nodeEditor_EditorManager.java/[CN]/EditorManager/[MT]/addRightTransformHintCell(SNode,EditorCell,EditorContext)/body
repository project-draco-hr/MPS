{
  final EditorCell_Constant rightTransformHintCell=EditorCell_Constant.create(context,node,"",true);
  rightTransformHintCell.putUserObject(EditorCell.CELL_ID,node.getId());
  rightTransformHintCell.setEditable(true);
  rightTransformHintCell.setDrawBorder(false);
  rightTransformHintCell.setCellBackgroundColor(Color.YELLOW);
  rightTransformHintCell.setAction(EditorCellAction.DELETE,new EditorCellAction(){
    public void execute(    EditorContext context){
      node.removeRightTransformHint();
    }
  }
);
  rightTransformHintCell.setAction(EditorCellAction.RIGHT_TRANSFORM,new EditorCellAction(){
    public void execute(    EditorContext context){
      node.removeRightTransformHint();
    }
  }
);
  EditorCellKeyMap keyMap=new EditorCellKeyMap();
  keyMap.putAction(EditorCellKeyMap.KEY_MODIFIERS_NONE,"VK_ESCAPE",new EditorCellKeyMapAction(){
    public void execute(    KeyEvent keyEvent,    EditorContext context){
      node.removeRightTransformHint();
    }
  }
);
  rightTransformHintCell.addKeyMap(keyMap);
  rightTransformHintCell.setSubstituteInfo(new AbstractNodeSubstituteInfo(context){
    protected List<INodeSubstituteItem> createActions(){
      List list=ModelActions.createRightTransformHintSubstituteActions(node,context.getOperationContext().getScope());
      List wrapperList=new LinkedList();
      for (      Object action : list) {
        wrapperList.add(new NodeSubstituteActionWrapper((INodeSubstituteAction)action){
          public SNode doSubstitute(          String pattern){
            node.removeRightTransformHint();
            return super.doSubstitute(pattern);
          }
        }
);
      }
      return wrapperList;
    }
  }
);
  EditorCell resultCell;
  Object anchorId=node.getUserObject(RIGHT_TRANSFORM_HINT_ANCHOR_ID);
  EditorCell anchorCell=context.getNodeEditorComponent().findCellWithId(nodeCell,anchorId.toString());
  if (anchorCell != null && anchorCell != nodeCell) {
    EditorCell_Collection cellCollection=anchorCell.getParent();
    cellCollection.addCellAt(cellCollection.indexOf(anchorCell) + 1,rightTransformHintCell);
    resultCell=nodeCell;
  }
 else {
    EditorCell_Collection rowWrapper=EditorCell_Collection.createHorizontal(context,node);
    rowWrapper.setSelectable(false);
    rowWrapper.setDrawBorder(false);
    rowWrapper.addEditorCell(nodeCell);
    rowWrapper.addEditorCell(rightTransformHintCell);
    resultCell=rowWrapper;
  }
  if (node.getUserObject(RIGHT_TRANSFORM_HINT_JUST_ADDED) != null) {
    node.removeUserObject(RIGHT_TRANSFORM_HINT_JUST_ADDED);
    CommandProcessor.instance().invokeLater(new Runnable(){
      public void run(){
        context.getNodeEditorComponent().changeSelection(rightTransformHintCell);
      }
    }
);
  }
  return resultCell;
}
