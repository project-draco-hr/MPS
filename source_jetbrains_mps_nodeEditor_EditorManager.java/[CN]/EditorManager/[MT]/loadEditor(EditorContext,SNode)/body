{
  Language language=SModelUtil.getLanguage(node,context.getOperationContext().getScope());
  if (language == null) {
    LOG.errorWithTrace("Error loading editor for node \"" + node.getDebugText() + "\".\n"+ "Couldn't find language for namespace: \""+ NameUtil.namespaceFromConceptFQName(node.getClass().getName())+ "\"\n"+ "In scope "+ context.getOperationContext().getScope());
    return null;
  }
  String stereotype=node.getModel().getStereotype();
  String languageEditorFQName=language.getEditorUID(stereotype);
  if (languageEditorFQName == null) {
    languageEditorFQName=language.getEditorUID();
    if (languageEditorFQName == null) {
      LOG.errorWithTrace("Error loading editor for node \"" + node.getDebugText() + "\" <<"+ stereotype+ ">> : no editor model.");
      return null;
    }
  }
  String conceptName=NameUtil.shortNameFromLongName(NameUtil.nodeConceptFQName(node));
  ConceptDeclaration conceptDeclaration=language.findConceptDeclaration(conceptName);
  if (conceptDeclaration == null) {
    LOG.error("couldn't find concept " + conceptName + " in language "+ language.getNamespace());
    return null;
  }
  String editorClassName="";
  while (conceptDeclaration != null) {
    try {
      editorClassName=languageEditorFQName + "." + conceptDeclaration.getName()+ "_Editor";
      Class editorClass=Class.forName(editorClassName,true,ClassLoaderManager.getInstance().getClassLoader());
      return (INodeEditor)editorClass.newInstance();
    }
 catch (    ClassNotFoundException e) {
      conceptDeclaration=conceptDeclaration.getExtends();
    }
catch (    InstantiationException e) {
      LOG.error(e);
      return null;
    }
catch (    IllegalAccessException e) {
      LOG.error(e);
      return null;
    }
catch (    Exception e) {
      LOG.error(e);
      return null;
    }
  }
  LOG.warning("Couldn't load editor " + editorClassName + " : Class Not Found!");
  return null;
}
