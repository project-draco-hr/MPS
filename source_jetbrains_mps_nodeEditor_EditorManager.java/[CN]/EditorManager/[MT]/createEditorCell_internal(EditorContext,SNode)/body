{
  INodeEditor editor=getEditor(context,node);
  AbstractEditorComponent abstractEditorComponent=context.getNodeEditorComponent();
  EditorCell nodeCell=null;
  CellBuildNodeAccessListener nodeAccessListener=new CellBuildNodeAccessListener(abstractEditorComponent);
  try {
    NodeReadAccessCaster.setNodeReadAccessListener(nodeAccessListener);
    nodeCell=editor.createEditorCell(context,node);
  }
 catch (  Exception e) {
    LOG.error("Failed to create cell for node " + node.getDebugText(),e);
    nodeCell=EditorCell_Error.create(context,node,"!exception!:" + node.getDebugText());
  }
 finally {
    nodeCell.putUserObject(IS_BIG_CELL,true);
    abstractEditorComponent.registerAsBigCell(nodeCell);
    NodeReadAccessCaster.removeNodeAccessListener();
    nodeAccessListener.recordingFinishedForCell(nodeCell);
  }
  if (node.getChildCount(NODE_TO_PLACE_AFTER) == 0) {
    return nodeCell;
  }
  EditorCell_Collection rowWrapper=EditorCell_Collection.createHorizontal(context,node);
  rowWrapper.setSelectable(false);
  rowWrapper.addEditorCell(nodeCell);
  SNode afterNode=node.getChild(NODE_TO_PLACE_AFTER);
  rowWrapper.addEditorCell(getEditor(context,afterNode).createEditorCell(context,afterNode));
  return rowWrapper;
}
