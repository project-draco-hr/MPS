{
  Node node=MapSequence.<INode,Node>fromMap(mySubclustersMap).get(subcluster);
  List<Dart> darts=mySubEmbeddedGraph.getOrderedDarts(node);
  List<Edge> subOuterEdgesOrder=ListSequence.<Edge>fromList(new ArrayList<Edge>(ListSequence.<Dart>fromList(darts).count()));
  for (  Dart dart : ListSequence.<Dart>fromList(darts)) {
    Edge edge=dart.getEdge();
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(invEdgeMap).get(edge);
    List<Edge> history=myHistoryManager.getHistory(realEdge);
    if (edge.getSource() == node) {
      realEdge=ListSequence.<Edge>fromList(history).first();
    }
 else {
      realEdge=ListSequence.<Edge>fromList(history).last();
    }
    ListSequence.<Edge>fromList(subOuterEdgesOrder).addElement(realEdge);
  }
  ClusterEmbeddingConstructorTemp subProcessor=new ClusterEmbeddingConstructorTemp(myGraph,subcluster,subOuterEdgesOrder);
  EmbeddedGraph subclusterEmbedding=subProcessor.constructEmbedding();
  CheckEmbeddedGraph.checkEmbeddedGraph(subclusterEmbedding,false);
  if (ListSequence.<Face>fromList(subclusterEmbedding.getFaces()).count() > 0) {
    Face outerFace=subclusterEmbedding.getOuterFace();
    for (    Face face : ListSequence.<Face>fromList(subclusterEmbedding.getFaces())) {
      if (face == outerFace) {
        continue;
      }
      myEmbeddedGraph.addFace(face);
    }
    Edge lastOuterEdge=ListSequence.<Dart>fromList(darts).last().getEdge();
    Tuples._2<Edge,Node> lastOuterEdgeInfo=getCurOuterEdge(lastOuterEdge,subclusterEmbedding);
    int i=0;
    Dart prev=ListSequence.<Dart>fromList(darts).last();
    Edge prevCurOuterEdge=lastOuterEdgeInfo._0();
    Node prevBorderNode=lastOuterEdgeInfo._1();
    outerFace.makeEndsWith(prevBorderNode);
    Iterator<Dart> borderItr=ListSequence.<Dart>fromList(outerFace.getDarts()).reversedList().iterator();
    for (    Dart dart : ListSequence.<Dart>fromList(darts)) {
      final Edge outerEdge=ListSequence.<Edge>fromList(subOuterEdgesOrder).getElement(i);
      Tuples._2<Edge,Node> outerEdgeInfo=getCurOuterEdge(outerEdge,subclusterEmbedding);
      Edge curOuterEdge=outerEdgeInfo._0();
      Node borderNode=outerEdgeInfo._1();
      Face face=MapSequence.<Face,Face>fromMap(myFaceMap).get(mySubEmbeddedGraph.getFace(prev));
      List<Dart> faceDarts=face.getDarts();
      Dart outerEdgeDart=ListSequence.<Dart>fromList(faceDarts).findFirst(new IWhereFilter<Dart>(){
        public boolean accept(        Dart dart){
          return dart.getEdge() == outerEdge;
        }
      }
);
      if (outerEdgeDart == null) {
        throw new RuntimeException("error during merging subcluster's embeddings");
      }
      face.makeStartsWith(outerEdgeDart);
      ListSequence.<Dart>fromList(faceDarts).removeElementAt(0);
      ListSequence.<Dart>fromList(faceDarts).removeElementAt(0);
      ListSequence.<Dart>fromList(faceDarts).insertElement(0,new Dart(prevCurOuterEdge,prevBorderNode));
      if (dart == ListSequence.<Dart>fromList(darts).last()) {
        while (borderItr.hasNext()) {
          ListSequence.<Dart>fromList(faceDarts).insertElement(0,borderItr.next());
        }
      }
 else       if (prevBorderNode != borderNode) {
        Dart cur=borderItr.next();
        while (cur.getSource() != borderNode) {
          ListSequence.<Dart>fromList(faceDarts).insertElement(0,cur);
          cur=borderItr.next();
        }
        ListSequence.<Dart>fromList(faceDarts).insertElement(0,cur);
      }
      ListSequence.<Dart>fromList(faceDarts).insertElement(0,new Dart(curOuterEdge,curOuterEdge.getOpposite(borderNode)));
      prev=dart;
      prevCurOuterEdge=curOuterEdge;
      prevBorderNode=borderNode;
    }
  }
}
