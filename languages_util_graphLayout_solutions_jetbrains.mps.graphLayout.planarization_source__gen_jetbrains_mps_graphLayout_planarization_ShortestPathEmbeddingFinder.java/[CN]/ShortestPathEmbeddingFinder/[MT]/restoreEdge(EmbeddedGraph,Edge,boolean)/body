{
  DualGraph dualGraph=new DualGraph(embeddedGraph);
  List<Node> newNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  for (  Node node : ListSequence.<Node>fromList(removedEdge.getAdjacentNodes())) {
    ListSequence.<Node>fromList(newNodes).addElement(dualGraph.addRealNode(node));
  }
  if (forbidOuterEdgeCrossing) {
    final Map<Node,Face> facesMap=dualGraph.getFacesMap();
    final Face outerFace=embeddedGraph.getOuterFace();
    Node outerNode=ListSequence.<Node>fromList(dualGraph.getNodes()).findFirst(new IWhereFilter<Node>(){
      public boolean accept(      Node it){
        return MapSequence.<Node,Face>fromMap(facesMap).get(it) == outerFace;
      }
    }
);
    dualGraph.deleteNode(outerNode);
  }
  List<Edge> path=ShortestPath.getPath(dualGraph,ListSequence.<Node>fromList(newNodes).getElement(0),ListSequence.<Node>fromList(newNodes).getElement(1),Edge.Direction.BOTH);
  List<Node> nodePath=ListSequence.<Node>fromList(new ArrayList<Node>());
  List<Face> facePath=ListSequence.<Face>fromList(new ArrayList<Face>());
  ListSequence.<Node>fromList(nodePath).addElement(ListSequence.<Node>fromList(removedEdge.getAdjacentNodes()).getElement(0));
  Node cur=ListSequence.<Node>fromList(newNodes).getElement(0);
  for (  Edge edge : ListSequence.<Edge>fromList(path)) {
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge);
    if (embeddedGraph.getAdjacentFaces(realEdge) != null) {
      ListSequence.<Node>fromList(nodePath).addElement(embeddedGraph.splitEdge(MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge)));
    }
    cur=edge.getOpposite(cur);
    Face curFace=MapSequence.<Node,Face>fromMap(dualGraph.getFacesMap()).get(cur);
    if (curFace != null) {
      ListSequence.<Face>fromList(facePath).addElement(curFace);
    }
  }
  List<Edge> newEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>(ListSequence.<Node>fromList(nodePath).count() - 1));
  ListSequence.<Node>fromList(nodePath).addElement(ListSequence.<Node>fromList(removedEdge.getAdjacentNodes()).getElement(1));
  if (SHOW_LOG > 0) {
    System.out.println("path: ");
    System.out.println(nodePath);
  }
  for (int i=0; i < ListSequence.<Node>fromList(nodePath).count() - 1; i++) {
    Node start=ListSequence.<Node>fromList(nodePath).getElement(i);
    Node end=ListSequence.<Node>fromList(nodePath).getElement(i + 1);
    Edge newEdge=embeddedGraph.getGraph().connect(start,end);
    ListSequence.<Edge>fromList(newEdges).addElement(newEdge);
    List<Edge> tempPath=ListSequence.<Edge>fromListAndArray(new ArrayList<Edge>(),newEdge);
    embeddedGraph.splitFace(ListSequence.<Face>fromList(facePath).getElement(i),tempPath,start,end);
  }
  GraphModificationEvent splitEvent=new GraphModificationEvent(GraphModificationEvent.Type.EDGE_SPLITTED,removedEdge,newEdges);
  embeddedGraph.getGraph().getModificationProcessor().fire(splitEvent);
  return newEdges;
}
