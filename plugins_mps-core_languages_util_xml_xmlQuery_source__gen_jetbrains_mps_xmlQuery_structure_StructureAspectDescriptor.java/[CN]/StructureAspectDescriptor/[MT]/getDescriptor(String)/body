{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AccessArbitraryAttributeOperation","jetbrains.mps.xmlQuery.structure.XMLElementOperation",false,new String[]{"jetbrains.mps.xmlQuery.structure.XMLElementOperation"},new String[]{},new String[]{},new String[]{"attributeNameExpression"},new boolean[]{false},false,false,"attribute","arbitrary attribute","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AccessArbitraryChildrenOperation","jetbrains.mps.xmlQuery.structure.XMLElementOperation",false,new String[]{"jetbrains.mps.xmlQuery.structure.XMLElementOperation"},new String[]{},new String[]{},new String[]{"childNameExpression"},new boolean[]{false},false,false,"child","arbitrary child","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AccessAttributeOperation","jetbrains.mps.xmlQuery.structure.XMLElementOperation",false,new String[]{"jetbrains.mps.xmlQuery.structure.XMLElementOperation"},new String[]{},new String[]{"attributeDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AccessChildrenOperation","jetbrains.mps.xmlQuery.structure.XMLElementOperation",false,new String[]{"jetbrains.mps.xmlQuery.structure.XMLElementOperation"},new String[]{},new String[]{"elementDeclaration"},new String[]{},new boolean[]{},false,false,"","access child operation","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AccessTextOperation","jetbrains.mps.xmlQuery.structure.XMLElementOperation",false,new String[]{"jetbrains.mps.xmlQuery.structure.XMLElementOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"text","access elements'text","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.AttributeBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{"attributeDeclaration"},new String[]{"value"},new boolean[]{false},false,false,"","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.ElementBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{"elementDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.TextBuilder","jetbrains.mps.baseLanguage.builders.structure.Builder",false,new String[]{"jetbrains.mps.baseLanguage.builders.structure.Builder"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false},false,false,"text :","XML element text","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.XMLElementCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"xml<>","create new XML element","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.XMLElementOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.xmlQuery.structure.XMLElementType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"schema","complexType"},new String[]{},new boolean[]{},false,false,"xml<>","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
