{
  this.addNodeById("1230057984817");
  this.addNodeById("1230057984833");
  InlineMethodRefactoring ref=new InlineMethodRefactoring(SNodeOperations.cast(this.getNodeById("1230057984830"),MetaAdapterFactory.getConcept(new UUID(4917733117167750838l,-7710007501170303426l),1205769149993l,"jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation")));
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230057984818"),MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l,-7431307307277756308l),1216913645126l,"jetbrains.mps.lang.test.structure.NodesTestCase")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230057984834"),MetaAdapterFactory.getConcept(new UUID(-8825571760360698496l,-7431307307277756308l),1216913645126l,"jetbrains.mps.lang.test.structure.NodesTestCase")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
