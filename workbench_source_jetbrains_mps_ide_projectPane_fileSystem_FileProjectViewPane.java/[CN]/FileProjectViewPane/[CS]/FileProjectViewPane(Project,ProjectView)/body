{
  super(project);
  myProject=project;
  myProjectView=projectView;
  final VirtualFile baseDir=myProject.getBaseDir();
  myMPSTree=new MPSTree(){
    protected MPSTreeNode rebuild(){
      if (myProject != null && !myProject.isDisposed()) {
        final IFile root=VFileSystem.toIFile(baseDir);
        return new FolderTreeNode(new ProjectOperationContext(getProject()),myProject.getComponent(VcsFileStatusProvider.class),root);
      }
 else {
        return new TextTreeNode("No Project");
      }
    }
  }
;
  myTree=myMPSTree;
  myFileStatusListener=new FileStatusListener(){
    public void fileStatusesChanged(){
      rebuildTreeLater();
    }
    public void fileStatusChanged(    @NotNull VirtualFile virtualFile){
      rebuildTreeLater();
    }
  }
;
  myFileListener=new VirtualFileAdapter(){
    @Override public void fileCreated(    VirtualFileEvent event){
      rebuildTreeLater();
    }
    @Override public void fileDeleted(    VirtualFileEvent event){
      rebuildTreeLater();
    }
    @Override public void fileMoved(    VirtualFileMoveEvent event){
      rebuildTreeLater();
    }
    @Override public void fileCopied(    VirtualFileCopyEvent event){
      rebuildTreeLater();
    }
  }
;
  myTimer=new Timer(SECOND,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runReadInEDT(new Runnable(){
        public void run(){
          System.out.println("rebuild");
          myMPSTree.rebuildLater();
        }
      }
);
    }
  }
);
  myTimer.setRepeats(false);
  myTimer.setInitialDelay(3 * SECOND);
}
