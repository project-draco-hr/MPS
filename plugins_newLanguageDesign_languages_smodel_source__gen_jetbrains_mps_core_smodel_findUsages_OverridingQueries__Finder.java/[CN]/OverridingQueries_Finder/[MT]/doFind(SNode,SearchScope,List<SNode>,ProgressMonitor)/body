{
  monitor.start(getDescription(),1);
  try {
    final String signature=SConceptQuery_Behavior.call_getSignature_270269450479785542(node);
    if (SPropertyOperations.getBoolean(node,"isFinal")) {
      return;
    }
    for (    SNode subConcept : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.core.structure.findUsages.ConceptInheritors_Finder",SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.core.structure.structure.SAbstractConcept"),scope,monitor.subTask(1)))) {
      for (      SNode query : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(subConcept,"jetbrains.mps.core.structure.structure.SAbstractConcept"),"members",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          SNode query=SNodeOperations.as(it,"jetbrains.mps.core.smodel.structure.SConceptQuery");
          return (query != null) && SPropertyOperations.getBoolean(query,"isOverride") && signature.equals(SConceptQuery_Behavior.call_getSignature_270269450479785542(SNodeOperations.cast(it,"jetbrains.mps.core.smodel.structure.SConceptQuery")));
        }
      }
)) {
        ListSequence.fromList(_results).addElement(query);
      }
    }
  }
  finally {
    monitor.done();
  }
}
