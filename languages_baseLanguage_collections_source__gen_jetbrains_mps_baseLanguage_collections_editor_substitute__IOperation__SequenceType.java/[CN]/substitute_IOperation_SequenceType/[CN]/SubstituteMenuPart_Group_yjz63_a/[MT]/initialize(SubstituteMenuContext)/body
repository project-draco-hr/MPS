{
  super.initialize(_context);
  subconceptOfMapOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x117aea47a16L,"jetbrains.mps.baseLanguage.collections.structure.MapOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  subconceptOfSortedMapOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c4060180L,"jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  subconceptOfIATN=new Computable<Iterable<SAbstractConcept>>(){
    public Iterable<SAbstractConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x53310200e8d9eaf6L,"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing"),_context.getModel())).where(new IWhereFilter<SAbstractConcept>(){
        public boolean accept(        SAbstractConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  subconceptOfSortedSetOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c4baf9d4L,"jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  subconceptOfSetOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x11d95148c3eL,"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  opndType=new Computable<SNode>(){
    public SNode compute(){
      return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand")));
    }
  }
.compute();
  subconceptOfSeqOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x10c26c9a2d9L,"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
}
