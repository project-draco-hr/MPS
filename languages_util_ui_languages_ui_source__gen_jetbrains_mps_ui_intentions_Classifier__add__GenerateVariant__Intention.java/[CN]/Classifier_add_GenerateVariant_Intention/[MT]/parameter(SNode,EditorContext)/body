{
  final SNode gv=SLinkOperations.getTarget(new Classifier_add_GenerateVariant_Intention.QuotationClass_iyz6y8_a0a0a0a().createNode(),"classifier",false);
  Iterable<String> setgv=ListSequence.<SNode>fromList(SLinkOperations.getTargets(ListSequence.<SNode>fromList(SLinkOperations.getTargets(node,"annotation",true)).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode ann){
      return SLinkOperations.getTarget(ann,"annotation",false) == gv;
    }
  }
),"value",true)).<SNode>translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode av){
      return SLinkOperations.getTargets(SNodeOperations.as(SLinkOperations.getTarget(av,"value",true),"jetbrains.mps.baseLanguage.structure.ArrayLiteral"),"item",true);
    }
  }
).<String>select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(SNodeOperations.as(it,"jetbrains.mps.baseLanguage.structure.StringLiteral"),"value");
    }
  }
);
  return Sequence.<String>fromIterable(Variants.availableVariants()).subtract(Sequence.<String>fromIterable(setgv)).toListSequence();
}
