{
  super("BaseLanguage Enhancements");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ConvertToIncrements";
    }
    public String getAdditionalInfo(){
      return "ConvertToIncrements";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AssignmentExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")))) {
        return false;
      }
      SNode declaration=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"rValue",true),"jetbrains.mps.baseLanguage.structure.PlusExpression"))) {
        return false;
      }
      SNode plusExpr=SNodeOperations.cast(SLinkOperations.getTarget(node,"rValue",true),"jetbrains.mps.baseLanguage.structure.PlusExpression");
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(plusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(plusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")))) {
        return false;
      }
      if (SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(plusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false) != declaration) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(plusExpr,"rightExpression",true),"jetbrains.mps.baseLanguage.structure.IntegerConstant"))) {
        return false;
      }
      if (SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(plusExpr,"rightExpression",true),"jetbrains.mps.baseLanguage.structure.IntegerConstant"),"value") != 1) {
        return false;
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode declaration=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      SNode ref=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
      SLinkOperations.setTarget(ref,"variableDeclaration",declaration,false);
      SNode inc=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression",null);
      SLinkOperations.setTarget(inc,"expression",ref,true);
      SNodeOperations.replaceWithAnother(node,inc);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ConvertToDecrements";
    }
    public String getAdditionalInfo(){
      return "ConvertToDecrements";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AssignmentExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")))) {
        return false;
      }
      SNode declaration=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"rValue",true),"jetbrains.mps.baseLanguage.structure.MinusExpression"))) {
        return false;
      }
      SNode minusExpr=SNodeOperations.cast(SLinkOperations.getTarget(node,"rValue",true),"jetbrains.mps.baseLanguage.structure.MinusExpression");
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(minusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(minusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")))) {
        return false;
      }
      if (SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(minusExpr,"leftExpression",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false) != declaration) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(minusExpr,"rightExpression",true),"jetbrains.mps.baseLanguage.structure.IntegerConstant"))) {
        return false;
      }
      if (SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(minusExpr,"rightExpression",true),"jetbrains.mps.baseLanguage.structure.IntegerConstant"),"value") != 1) {
        return false;
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode declaration=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"lValue",true),"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      SNode ref=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
      SLinkOperations.setTarget(ref,"variableDeclaration",declaration,false);
      SNode dec=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression",null);
      SLinkOperations.setTarget(dec,"expression",ref,true);
      SNodeOperations.replaceWithAnother(node,dec);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "String classifiers";
    }
    public String getAdditionalInfo(){
      return "String classifiers";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"classifier",false) == SLinkOperations.getTarget(_quotation_createNode_gtfam0_a0a0a0c(),"classifier",false);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.StringType");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
