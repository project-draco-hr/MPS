{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("opposite",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      final SNode feature=_context.getReferenceNode();
      final boolean isGeneric=SNodeOperations.isInstanceOf(feature,"jetbrains.mps.ypath.structure.IGenericFeature");
      return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(feature),"jetbrains.mps.ypath.structure.TreePathAspect"),"features",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return it != feature && ((isGeneric ? SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature") : !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature"))));
        }
      }
).toListSequence();
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895905a8(jetbrains.mps.ypath.constraints)","1213104846095");
    }
  }
);
  return result;
}
