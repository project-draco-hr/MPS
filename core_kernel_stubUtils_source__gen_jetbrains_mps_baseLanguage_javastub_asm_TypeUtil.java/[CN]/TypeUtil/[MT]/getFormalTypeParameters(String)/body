{
  final List<ASMFormalTypeParameter> result=new ArrayList<ASMFormalTypeParameter>();
  if (signature == null) {
    return result;
  }
  SignatureReader reader=new SignatureReader(signature);
  reader.accept(new SignatureVisitorAdapter(){
    private String name=null;
    private TypeUtil.TypeBuilderVisitor classBoundVisitor=new TypeUtil.TypeBuilderVisitor();
    private List<TypeUtil.TypeBuilderVisitor> interfaceBoundVisitors=new ArrayList<TypeUtil.TypeBuilderVisitor>();
    @Override public void visitFormalTypeParameter(    String name){
      if (this.name != null) {
        flush();
      }
      this.name=name;
    }
    @Override public SignatureVisitor visitClassBound(){
      classBoundVisitor=new TypeUtil.TypeBuilderVisitor();
      return classBoundVisitor;
    }
    @Override public SignatureVisitor visitInterfaceBound(){
      TypeUtil.TypeBuilderVisitor visitor=new TypeUtil.TypeBuilderVisitor();
      interfaceBoundVisitors.add(visitor);
      return visitor;
    }
    @Override public SignatureVisitor visitReturnType(){
      if (name != null) {
        flush();
      }
      return super.visitReturnType();
    }
    @Override public SignatureVisitor visitSuperclass(){
      if (name != null) {
        flush();
      }
      return super.visitSuperclass();
    }
    private void flush(){
      List<ASMType> interfaceBounds=new ArrayList<ASMType>(interfaceBoundVisitors.size());
      for (      TypeUtil.TypeBuilderVisitor v : interfaceBoundVisitors) {
        interfaceBounds.add(v.getResult());
      }
      ASMType formalType=null;
      if (classBoundVisitor != null) {
        formalType=classBoundVisitor.getResult();
        if (formalType instanceof ASMClassType) {
          ASMClassType classFormalType=(ASMClassType)formalType;
          if (classFormalType.getName().equals(Object.class.getName())) {
            formalType=null;
          }
        }
      }
      result.add(new ASMFormalTypeParameter(name,formalType,interfaceBounds));
      name=null;
      classBoundVisitor=null;
      interfaceBoundVisitors.clear();
    }
  }
);
  return result;
}
