{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  Queue<SNode> toCheck=QueueSequence.fromQueueAndArray(new LinkedList<SNode>(),myCocnept);
  SNode bestCandidate=null;
  while (QueueSequence.fromQueue(toCheck).isNotEmpty()) {
    SNode acd=QueueSequence.fromQueue(toCheck).removeFirstElement();
    if (acd == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626") || acd == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1169194658468")) {
      continue;
    }
    if (!(ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getLinkDeclarations_idhEwILKK.invoke(acd)).containsSequence(ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getLinkDeclarations_idhEwILKK.invoke(myCocnept)))) || !(ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getPropertyDeclarations_idhEwILLM.invoke(acd)).containsSequence(ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getPropertyDeclarations_idhEwILLM.invoke(myCocnept))))) {
      continue;
    }
    ListSequence.fromList(result).addElement(acd);
    QueueSequence.fromQueue(toCheck).addSequence(ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getImmediateSuperconcepts_idhMuxyK2.invoke(acd)));
  }
  return result;
}
