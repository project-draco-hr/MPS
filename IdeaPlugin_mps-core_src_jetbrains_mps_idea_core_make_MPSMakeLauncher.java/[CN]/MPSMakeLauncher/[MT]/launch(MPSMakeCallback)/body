{
  if (!isValid()) {
    throw new IllegalStateException("Unable to launch without validation");
  }
  GeneralCommandLine gcl=new GeneralCommandLine(myCommandLine);
  gcl.setWorkDirectory(myProject.getBaseDir().getPath());
  final TextEventProcessor tep=new TextEventProcessor(myProject,"MPS"){
    @Override public void reportWrittenFile(    String file){
      LOG.debug("written file: " + file);
      callback.fileWritten(file);
    }
    @Override public void error(    String text){
      LOG.debug("error: " + text);
      callback.error(text);
    }
    @Override public void info(    String text){
      LOG.info("info: " + text);
      callback.info(text);
    }
  }
;
  try {
    OSProcessHandler processHandler=new OSProcessHandler(gcl.createProcess(),myCommandLine.get(0));
    processHandler.addProcessListener(new ProcessAdapter(){
      @Override public void onTextAvailable(      ProcessEvent event,      Key outputType){
        if (outputType == ProcessOutputTypes.STDERR) {
          tep.processStderr(event.getText());
        }
 else         if (outputType == ProcessOutputTypes.STDOUT) {
          tep.processStdout(event.getText());
        }
      }
    }
);
    processHandler.startNotify();
    processHandler.waitFor();
    if (processHandler.getProcess().exitValue() != 0) {
      callback.error("External process returned non-zero");
    }
  }
 catch (  ExecutionException e) {
    LOG.debug(e);
    callback.error("Error running process: " + e.getMessage());
  }
}
