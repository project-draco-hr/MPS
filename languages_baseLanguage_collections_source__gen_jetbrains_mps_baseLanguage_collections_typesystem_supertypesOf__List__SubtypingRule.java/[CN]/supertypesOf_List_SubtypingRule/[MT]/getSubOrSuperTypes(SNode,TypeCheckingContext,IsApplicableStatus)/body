{
  List<SNode> result=new ArrayList<SNode>();
  SNode elemType=SLinkOperations.getTarget(type,"elementType",true);
  if (SNodeOperations.isInstanceOf(elemType,"jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
    elemType=Type_Behavior.call_getUnboxedType_1213877337320(elemType);
  }
  ListSequence.fromList(result).addElement(new supertypesOf_List_SubtypingRule.QuotationClass_w26thq_a0a0d0a().createNode(elemType,typeCheckingContext));
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(type,"elementType",true),"jetbrains.mps.lang.smodel.structure.SNodeType")) {
    ListSequence.fromList(result).addElement(new supertypesOf_List_SubtypingRule.QuotationClass_w26thq_a0a0a0e0a().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(type,"elementType",true),"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false),typeCheckingContext));
  }
  ListSequence.fromList(result).addElement(new supertypesOf_List_SubtypingRule.QuotationClass_w26thq_a0a0f0a().createNode(SLinkOperations.getTarget(type,"elementType",true),typeCheckingContext));
  ListSequence.fromList(result).addElement(new supertypesOf_List_SubtypingRule.QuotationClass_w26thq_a0a0g0a().createNode(SLinkOperations.getTarget(type,"elementType",true),typeCheckingContext));
  ListSequence.fromList(result).addElement(new supertypesOf_List_SubtypingRule.QuotationClass_w26thq_a0a0h0a().createNode(typeCheckingContext));
  return result;
}
