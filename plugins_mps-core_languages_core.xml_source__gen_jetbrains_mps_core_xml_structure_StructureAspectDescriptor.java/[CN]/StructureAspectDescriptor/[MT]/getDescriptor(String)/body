{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlAttribute").super_("jetbrains.mps.core.xml.structure.XmlBaseAttribute").parents("jetbrains.mps.core.xml.structure.XmlBaseAttribute","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("attrName").children(new String[]{"value"},new boolean[]{true}).alias("attribute","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBaseAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBaseElement").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlBasePrologElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.core.xml.structure.XmlPrologElement").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCDATA").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("content").alias("<![CDATA","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCharRef").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("charCode").alias("&#","single character").staticScope(StaticScope.NONE).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCharRefValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("charCode").alias("&#","single character").staticScope(StaticScope.NONE).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlComment").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent","jetbrains.mps.core.xml.structure.XmlPrologElement").children(new String[]{"lines"},new boolean[]{true}).alias("<!--","").staticScope(StaticScope.NONE).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlCommentLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text").staticScope(StaticScope.NONE).create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlContent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.core.xml.structure.XmlPart").abstract_().create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDeclaration").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement","jetbrains.mps.core.xml.structure.XmlPrologElement").properties("version","encoding","standalone").alias("<?xml","xml declaration").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDoctypeDeclaration").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement","jetbrains.mps.core.xml.structure.XmlPrologElement").properties("doctypeName").children(new String[]{"externalId"},new boolean[]{false}).alias("<!DOCTYPE","xml doctype declaration").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlDocument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"prolog","rootElement"},new boolean[]{false,false}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlElement").super_("jetbrains.mps.core.xml.structure.XmlBaseElement").parents("jetbrains.mps.core.xml.structure.XmlBaseElement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("tagName","shortEmptyNotation").children(new String[]{"attributes","content"},new boolean[]{true,true}).alias("<element/>","").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlEntityRef").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent").properties("entityName").alias("&","entity reference").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlEntityRefValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("entityName").alias("&","entity reference").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlExternalId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("publicId","systemId","isPublic").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.traceable.structure.UnitConcept").children(new String[]{"document"},new boolean[]{false}).alias("xml file","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlNoSpaceValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart").alias("<-no space->","concatenates two values without spaces").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlPart").interface_().create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlProcessingInstruction").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent","jetbrains.mps.core.xml.structure.XmlPrologElement").properties("target","rawData").alias("<?","processing instruction").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlProlog").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"},new boolean[]{true}).create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlPrologElement").interface_().parents("jetbrains.mps.core.xml.structure.XmlPart").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlText").super_("jetbrains.mps.core.xml.structure.XmlContent").parents("jetbrains.mps.core.xml.structure.XmlContent","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("text","plain text").staticScope(StaticScope.NONE).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlTextValue").super_("jetbrains.mps.core.xml.structure.XmlValuePart").parents("jetbrains.mps.core.xml.structure.XmlValuePart","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").alias("text","attribute value contains of text and entity references").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlValuePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("","attribute value").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.core.xml.structure.XmlWhitespace").super_("jetbrains.mps.core.xml.structure.XmlBasePrologElement").parents("jetbrains.mps.core.xml.structure.XmlBasePrologElement","jetbrains.mps.core.xml.structure.XmlPrologElement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").staticScope(StaticScope.NONE).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
