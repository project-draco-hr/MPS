{
  if (!(queryParameters.getScope() instanceof GlobalSearchScope)) {
    return;
  }
  GlobalSearchScope scope=(GlobalSearchScope)queryParameters.getScope();
  final Project project=scope.getProject();
  final MPSPsiProvider psiProvider=MPSPsiProvider.getInstance(project);
  final PsiElement psiTarget=queryParameters.getElementToSearch();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (!scope.isSearchInModuleContent(module))     continue;
    MPSFacet facet=FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);
    if (facet == null)     continue;
    final Solution facetSolution=facet.getSolution();
    ModelAccess.instance().runReadAction(new Runnable(){
      @Override public void run(){
        for (        SModelDescriptor model : SModelRepository.getInstance().getModelDescriptors(facetSolution)) {
          Deque<SNode> stack=new ArrayDeque<SNode>();
          for (          SNode node : model.getRootNodes()) {
            stack.addLast(node);
          }
          while (!stack.isEmpty()) {
            SNode node=stack.pop();
            for (            SNode child : node.getChildren()) {
              stack.push(child);
            }
            for (            SReference ref : node.getReferences()) {
              SNode targetNode=ref.getTargetNode();
              if (targetNode == null)               continue;
              PsiElement targetPsiElement=MPS2PsiMapperUtil.getPsiSource(targetNode,project);
              if (targetPsiElement == psiTarget) {
                PsiElement mpsPsiElem=psiProvider.getPsi(node);
                if (!(mpsPsiElem instanceof MPSPsiNode))                 continue;
                MPSPsiNode mpsPsiNode=(MPSPsiNode)mpsPsiElem;
                String refRole=ref.getRole();
                SNodeId targetNodeId=targetNode.getNodeId();
                MPSPsiRef[] refs=mpsPsiNode.getReferences(refRole);
                for (                MPSPsiRef r : refs) {
                  if (targetNodeId.equals(r.getNodeId())) {
                    consumer.process(r.getReference());
                  }
                }
              }
            }
          }
        }
      }
    }
);
  }
}
