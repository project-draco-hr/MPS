{
  ruleNode=rule;
  applicableConcept=NameUtil.nodeFQName(RuleUtil.getBaseRuleApplicableConcept(ruleNode));
  SNode condition=RuleUtil.getBaseRuleCondition(ruleNode);
  conditionMethod=condition == null ? null : TemplateFunctionMethodName.baseMappingRule_Condition(condition);
  consequenceNode=RuleUtil.getWeaving_Consequence(ruleNode);
  if (consequenceNode == null) {
    consequence=null;
    template=null;
  }
 else {
    String consequenceConceptFQName=consequenceNode.getConcept().getQualifiedName();
    if (consequenceConceptFQName.equals(RuleUtil.concept_TemplateDeclarationReference)) {
      consequence=new TemplateDeclarationConsequence();
      template=RuleUtil.getTemplateDeclarationReference_Template(consequenceNode);
    }
 else     if (consequenceConceptFQName.equals(RuleUtil.concept_WeaveEach_RuleConsequence)) {
      consequence=new ForeachConsequence(consequenceNode);
      template=RuleUtil.getWeaveEach_Template(consequenceNode);
    }
 else {
      consequence=new InvalidConsequence();
      template=null;
    }
  }
  templateFragments=template != null ? GeneratorUtilEx.getTemplateFragments(template) : null;
  ruleMappingName=RuleUtil.getBaseRuleLabel(ruleNode);
}
