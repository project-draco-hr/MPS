{
  SNode consequence=RuleUtil.getWeaving_Consequence(ruleNode);
  if (consequence == null) {
    environment.getGenerator().showErrorMessage(context.getInput(),null,ruleNode,"weaving rule: no rule consequence");
    return false;
  }
  environment.getTracer().pushRuleConsequence(new SNodePointer(consequence));
  String consequenceConceptFQName=consequence.getConcept().getId();
  if (consequenceConceptFQName.equals(RuleUtil.concept_TemplateDeclarationReference)) {
    SNode template=RuleUtil.getTemplateDeclarationReference_Template(consequence);
    weaveTemplateDeclaration(template,outputContextNode,GeneratorUtil.createConsequenceContext(context.getInput(),null,environment.getReductionContext(),consequence,context.getInput(),environment.getGenerator()),environment);
    return true;
  }
 else   if (consequenceConceptFQName.equals(RuleUtil.concept_WeaveEach_RuleConsequence)) {
    SNode query=RuleUtil.getWeaveEach_SourceNodesQuery(consequence);
    if (query == null) {
      environment.getGenerator().showErrorMessage(context.getInput(),ruleNode,"weaving rule: cannot create list of source nodes");
      return false;
    }
    SNode template=RuleUtil.getWeaveEach_Template(consequence);
    Collection<SNode> queryNodes=environment.getReductionContext().getQueryExecutor().evaluateSourceNodesQuery(context.getInput(),ruleNode,null,query,context);
    if (queryNodes.isEmpty()) {
      return false;
    }
    for (    SNode queryNode : queryNodes) {
      weaveTemplateDeclaration(template,outputContextNode,GeneratorUtil.createConsequenceContext(queryNode,null,environment.getReductionContext(),consequence,queryNode,environment.getGenerator()),environment);
    }
    return true;
  }
 else {
    environment.getGenerator().showErrorMessage(context.getInput(),null,consequence,"weaving rule: unsupported rule consequence");
    return false;
  }
}
