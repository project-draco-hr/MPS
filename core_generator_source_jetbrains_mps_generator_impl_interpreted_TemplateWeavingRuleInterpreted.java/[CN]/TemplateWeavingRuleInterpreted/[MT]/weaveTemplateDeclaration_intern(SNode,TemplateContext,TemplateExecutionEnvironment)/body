{
  if (templateFragments == null) {
    environment.getGenerator().showErrorMessage(context.getInput(),null,ruleNode,"couldn't evaluate weaving rule: no template");
    return;
  }
  if (templateFragments.isEmpty()) {
    environment.getGenerator().showErrorMessage(context.getInput(),template,ruleNode,"nothing to weave: no template fragments found in template");
    return;
  }
  checkTemplateFragmentsForWeaving(template,templateFragments,environment.getLogger());
  TemplateProcessor templateProcessor=new TemplateProcessor(environment);
  for (  SNode templateFragment : templateFragments) {
    SNode templateFragmentNode=templateFragment.getParent();
    SNode contextParentNode=null;
    try {
      contextParentNode=environment.getQueryExecutor().getContextNodeForTemplateFragment(templateFragmentNode,outputContextNode,context);
    }
 catch (    Exception e) {
      environment.getLogger().handleException(e);
    }
    if (contextParentNode != null) {
      try {
        List<SNode> outputNodesToWeave=templateProcessor.apply(GeneratorUtilEx.getMappingName(templateFragment,ruleMappingName),templateFragmentNode,context);
        String childRole=templateFragmentNode.getRoleInParent();
        for (        SNode outputNodeToWeave : outputNodesToWeave) {
          environment.weaveNode(contextParentNode,childRole,outputNodeToWeave,new jetbrains.mps.smodel.SNodePointer(templateFragment),context.getInput());
        }
      }
 catch (      TemplateProcessingFailureException ex) {
        ProblemDescription[] pd=new ProblemDescription[]{GeneratorUtil.describe(templateFragmentNode,"template fragment"),GeneratorUtil.describe(context.getInput(),"input node"),GeneratorUtil.describe(contextParentNode,"output context node")};
        environment.getLogger().error(getRuleNode(),"error processing template fragment",GeneratorUtil.concat(pd,ex.asProblemDescription()));
      }
    }
 else {
      environment.getGenerator().showErrorMessage(context.getInput(),templateFragment,ruleNode,"couldn't define 'context' for template fragment");
    }
  }
}
