{
  String name=getResolveInfo();
  Map<String,SModel> suitableModels=MapSequence.fromMap(new HashMap<String,SModel>());
  SModel ourModel=getSourceNode().getModel().getModelDescriptor();
  SModule ourModule=SModelRepository.getInstance().getOwner(ourModel);
{
    Iterator<SModel> model_it=Sequence.fromIterable(ourModule.getModuleScope().getModels()).iterator();
    SModel model_var;
    while (model_it.hasNext()) {
      model_var=model_it.next();
      String modelName=model_var.getModelName();
      int atSign=modelName.lastIndexOf('@');
      if (atSign > 0) {
        modelName=modelName.substring(0,atSign);
      }
      if (MapSequence.fromMap(myPkgOrder).get(modelName) != null) {
        MapSequence.fromMap(suitableModels).put(modelName,model_var);
      }
    }
  }
  Iterable<SModel> suitableModelz=MapSequence.fromMap(suitableModels).sort(new ISelector<IMapping<String,SModel>,Integer>(){
    public Integer select(    IMapping<String,SModel> it){
      return MapSequence.fromMap(myPkgOrder).get(it.key());
    }
  }
,true).select(new ISelector<IMapping<String,SModel>,SModel>(){
    public SModel select(    IMapping<String,SModel> it){
      return it.value();
    }
  }
);
{
    Iterator<SModel> model_it=Sequence.fromIterable(suitableModelz).iterator();
    SModel model_var;
    while (model_it.hasNext()) {
      model_var=model_it.next();
      for (      org.jetbrains.mps.openapi.model.SNode n : Sequence.fromIterable(model_var.getRootNodes())) {
        if (name.equals(n.getName())) {
          return (SNode)n;
        }
      }
    }
  }
  return null;
}
