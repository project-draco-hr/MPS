{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x2764eda929d60237L,0x2764eda929d60239L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x2764eda929d60237L,0x2764eda929d60239L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return CustomOperatorUsage_BehaviorDescriptor.getVisibleCustomOperators_idZogSShiOAT.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x15c86fdc6084766fL,"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage").getDeclarationNode()),_context.getModel());
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_jioqvq_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
