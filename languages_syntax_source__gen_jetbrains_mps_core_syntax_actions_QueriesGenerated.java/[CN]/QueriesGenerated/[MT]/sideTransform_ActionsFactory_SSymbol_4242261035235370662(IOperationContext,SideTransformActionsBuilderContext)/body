{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.syntax.structure.SSymbol");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode val=STargetLanguage_Behavior.call_getTypeConcept_4242261035235367602(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.core.syntax.structure.SSource",false,false),"targetLanguage",true));
        SLinkOperations.setTarget(_context.getSourceNode(),"type",SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(val),null),true);
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "(";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "type of associated value";
      }
    }
);
  }
  return result;
}
