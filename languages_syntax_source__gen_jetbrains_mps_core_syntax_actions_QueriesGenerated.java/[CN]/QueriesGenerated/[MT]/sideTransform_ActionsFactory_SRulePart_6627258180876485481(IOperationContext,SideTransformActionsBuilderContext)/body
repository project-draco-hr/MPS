{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SNodeOperations.getDescendants(SNodeOperations.getContainingRoot(_context.getSourceNode()),"jetbrains.mps.core.syntax.structure.SSymbol",false,new String[]{});
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.syntax.structure.SSymbolRef"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode p=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.syntax.structure.SSymbolRef",null);
            SLinkOperations.setTarget(p,"ref",(item),false);
            SPropertyOperations.set(p,"isOptional","" + ((SPropertyOperations.getString((item),"name") + "opt").equals(pattern)));
            SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),p);
            return p;
          }
          public String getMatchingText(          String pattern){
            if (pattern.startsWith(SPropertyOperations.getString((item),"name") + "o")) {
              return SPropertyOperations.getString((item),"name") + "opt";
            }
            return SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
        }
);
      }
    }
  }
  return result;
}
