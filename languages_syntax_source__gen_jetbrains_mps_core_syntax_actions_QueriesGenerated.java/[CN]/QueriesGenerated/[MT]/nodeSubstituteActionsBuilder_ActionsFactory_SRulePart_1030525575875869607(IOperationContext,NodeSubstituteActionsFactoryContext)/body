{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.syntax.structure.SSymbolRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SNodeOperations.getDescendants(SNodeOperations.getContainingRoot(_context.getParentNode()),"jetbrains.mps.core.syntax.structure.SSymbol",false,new String[]{});
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode p=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.syntax.structure.SSymbolRef",null);
              SLinkOperations.setTarget(p,"ref",(item),false);
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.core.syntax.structure.SSymbolRef")) {
                SPropertyOperations.set(p,"refalias",SPropertyOperations.getString(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.core.syntax.structure.SSymbolRef"),"refalias"));
              }
              return p;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.syntax.structure.SSymbolRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SNodeOperations.getDescendants(SNodeOperations.getContainingRoot(_context.getParentNode()),"jetbrains.mps.core.syntax.structure.SSymbol",false,new String[]{});
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode p=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.syntax.structure.SSymbolRef",null);
              SLinkOperations.setTarget(p,"ref",(item),false);
              SPropertyOperations.set(p,"isOptional","" + true);
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.core.syntax.structure.SSymbolRef")) {
                SPropertyOperations.set(p,"refalias",SPropertyOperations.getString(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.core.syntax.structure.SSymbolRef"),"refalias"));
              }
              return p;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name") + "opt";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
