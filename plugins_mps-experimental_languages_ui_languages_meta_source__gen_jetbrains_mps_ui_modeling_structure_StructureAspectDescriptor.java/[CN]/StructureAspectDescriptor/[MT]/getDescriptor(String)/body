{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AlignmentLayoutConstraint","jetbrains.mps.ui.modeling.structure.LayoutConstraint",false,new String[]{"jetbrains.mps.ui.modeling.structure.LayoutConstraint"},new String[]{},new String[]{},new String[]{"hAlignment","vAlignment"},new boolean[]{false,false});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ApplyConstraintStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"constraint","widget","container"},new boolean[]{true,false,false});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AspectParameterDecl","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"aspectDef"},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AspectParameterRef","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"parameterDecl"},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AuxObjectAccessOp","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"template"},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AuxObjectFactory","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.AuxObjectTemplate","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"runtimeType","factory"},new boolean[]{false,false});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.Auxillary","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"auxTemplate"},new boolean[]{true});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.BeforeUIObjectParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.BoxLayoutConstraint","jetbrains.mps.ui.modeling.structure.LayoutConstraint",false,new String[]{"jetbrains.mps.ui.modeling.structure.LayoutConstraint"},new String[]{},new String[]{},new String[]{"hConstraint","vConstraint"},new boolean[]{false,false});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.CellLayoutConstraint","jetbrains.mps.ui.modeling.structure.LayoutConstraint",false,new String[]{"jetbrains.mps.ui.modeling.structure.LayoutConstraint"},new String[]{},new String[]{},new String[]{"rowConstraint","columnConstraint"},new boolean[]{false,false});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ChildAspectDefinition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"optional"},new String[]{},new String[]{"aspectType"},new boolean[]{false});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ColumnLayoutConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"col","spanCols"},new boolean[]{false,false});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.Container","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{},new String[]{"specializes","allows"},new String[]{"requiredAspect"},new boolean[]{true});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerItemAdder","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.ui.modeling.structure.IAspectParameterHolder"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerItemClearer","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerItemInserter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerItemIterator","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerItemRemover","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContainerTemplate","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"container"},new String[]{"itemType","itemAdder","itemInserter","itemIterator","itemRemover","itemClearer"},new boolean[]{false,false,false,false,false,false});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.Context","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"uiObject"},new String[]{},new boolean[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ContextUIObjectParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EditableUIProperty","jetbrains.mps.ui.modeling.structure.UIProperty",false,new String[]{"jetbrains.mps.ui.modeling.structure.UIProperty","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EditableUIPropertyAccessCode","jetbrains.mps.ui.modeling.structure.UIPropertyAccessCode",false,new String[]{"jetbrains.mps.ui.modeling.structure.UIPropertyAccessCode"},new String[]{},new String[]{"property"},new String[]{"handlerSetup"},new boolean[]{false});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.Event","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{"handleable"},new String[]{"extends"},new String[]{"property"},new boolean[]{true});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventHandlerParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventHandlerSetup","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventHandlerTemplate","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"event"},new String[]{"eventType","producerType","setup","propertyGetter"},new boolean[]{false,false,false,true});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventProducer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"event"},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventProducerParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{},new String[]{},new String[]{"dataType"},new boolean[]{false});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.EventPropertyGetter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ExpressionWithUnit","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"unit"},new String[]{},new String[]{"expression"},new boolean[]{false});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ForceLayoutCode","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.Geometry","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"layoutCode"},new boolean[]{false});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.HasTemplate",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.HorizontalAlignment","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.HorizontalConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"left","width","right"},new boolean[]{false,false,false});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.IAspectParameterHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{"aspectParameter"},new boolean[]{true});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.IPartiallyDefinedStub",null,true,new String[]{},new String[]{},new String[]{"hasTemplate","selector","role","template"},new String[]{},new boolean[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ItemUIObjectParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.LayoutConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.LayoutConstraintExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"constraint"},new boolean[]{false});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.LayoutConstraintType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"constraintConcept"},new String[]{},new boolean[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.OverrideAnnotation","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.PropertyChangeHandlerParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.PropertyChangeHandlerSetup","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.PropertyValueParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.RowLayoutConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"row","spanRows"},new boolean[]{false,false});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ThisEventParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.ThisUIObjectParam","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIAction","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIActionCode","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{"action"},new String[]{},new boolean[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIObject","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{"abstract"},new String[]{"extends","belongsTo"},new String[]{"property","action","produceEvent","compartment"},new boolean[]{true,true,true,true});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIObjectFactory","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{"context"},new boolean[]{false});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIObjectTemplate","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"uiObject"},new String[]{"runtimeType","factory","auxillary","geometry","propertyAccessor","actionHandler","containerTemplate"},new boolean[]{false,true,false,false,true,true,true});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.ui.modeling.structure.HasTemplate"},new String[]{},new String[]{},new String[]{"dataType"},new boolean[]{false});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIPropertyAccessCode","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"property"},new String[]{"getter","setter"},new boolean[]{false,false});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIPropertyGetter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UIPropertySetter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.UnitType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{"unit"},new String[]{},new String[]{},new boolean[]{});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.VerticalAlignment","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.ui.modeling.structure.VerticalConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"top","height","bottom"},new boolean[]{false,false,false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
