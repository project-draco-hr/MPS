{
  List<SNode> result=ListSequence.fromList(new LinkedList<SNode>());
  boolean containsVars=false;
  for (  SNode parameter : SLinkOperations.getTargets(method,"parameter",true)) {
    if (ListSequence.fromList(SNodeOperations.getDescendants(parameter,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true)).isNotEmpty()) {
      containsVars=true;
    }
    ListSequence.fromList(result).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(parameter,"type",true)));
  }
  if (!(containsVars)) {
    return result;
  }
  Set<SNode> frontier=new HashSet<SNode>();
  SetSequence.fromSet(frontier).addElement(instanceType);
  SNode concreteMethodClassifierType=ResolveUtil.getConcreteSuperClassifierType(frontier,classifier);
  if (concreteMethodClassifierType == null) {
    return result;
  }
  List<SNode> typeParameters=ListSequence.fromList(SLinkOperations.getTargets(concreteMethodClassifierType,"parameter",true)).toListSequence();
  for (  SNode paramType : new ArrayList<SNode>(result)) {
    for (    SNode typeVar : SNodeOperations.getDescendants(paramType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true)) {
      SNode replacement=SNodeOperations.copyNode(ListSequence.fromList(typeParameters).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(typeVar,"typeVariableDeclaration",false))));
      if ((SNodeOperations.getParent(typeVar) == null)) {
        ListSequence.fromList(result).insertElement(ListSequence.fromList(result).indexOf(typeVar),replacement);
        ListSequence.fromList(result).removeElement(typeVar);
      }
 else {
        SNodeOperations.replaceWithAnother(typeVar,replacement);
      }
    }
  }
  return result;
}
