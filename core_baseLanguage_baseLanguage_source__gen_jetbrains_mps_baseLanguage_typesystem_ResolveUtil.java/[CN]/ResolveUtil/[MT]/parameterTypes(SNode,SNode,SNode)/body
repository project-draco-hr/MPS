{
  List<SNode> result=new LinkedList<SNode>();
  boolean containsVars=false;
  for (  SNode parameter : SLinkOperations.getTargets(method,"parameter",true)) {
    if (ListSequence.fromList(SNodeOperations.getDescendants(parameter,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true)).isNotEmpty()) {
      containsVars=true;
    }
    result.add(SNodeOperations.copyNode(SLinkOperations.getTarget(parameter,"type",true)));
  }
  if (!(containsVars)) {
    return result;
  }
  Set<SNode> frontier=new HashSet<SNode>();
  Set<SNode> newFrontier=new HashSet<SNode>();
  SNode concreteMethodClassifierType=null;
  SetSequence.fromSet(frontier).addElement(instanceType);
  outer:   while (SetSequence.fromSet(frontier).isNotEmpty()) {
    for (    SNode currentType : frontier) {
      SNode currentClassifier=SLinkOperations.getTarget(currentType,"classifier",false);
      if (currentClassifier == classifier) {
        concreteMethodClassifierType=currentType;
        break outer;
      }
      if (SNodeOperations.isInstanceOf(currentClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        SNode classConcept=currentClassifier;
        SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(SLinkOperations.getTarget(classConcept,"superclass",true),currentType));
        for (        SNode intfc : SLinkOperations.getTargets(classConcept,"implementedInterface",true)) {
          SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(intfc,currentType));
        }
      }
      if (SNodeOperations.isInstanceOf(currentClassifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
        SNode interfaceConcept=currentClassifier;
        for (        SNode intfc : SLinkOperations.getTargets(interfaceConcept,"extendedInterface",true)) {
          SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(intfc,currentType));
        }
      }
    }
    frontier=newFrontier;
    newFrontier=new HashSet<SNode>();
  }
  if (concreteMethodClassifierType == null) {
    return result;
  }
  List<SNode> typeParameters=ListSequence.fromList(SLinkOperations.getTargets(concreteMethodClassifierType,"parameter",true)).toListSequence();
  for (  SNode paramType : new ArrayList<SNode>(result)) {
    for (    SNode typeVar : SNodeOperations.getDescendants(paramType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true)) {
      SNode replacement=SNodeOperations.copyNode(ListSequence.fromList(typeParameters).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(typeVar,"typeVariableDeclaration",false))));
      if ((SNodeOperations.getParent(typeVar) == null)) {
        result.add(result.indexOf(typeVar),replacement);
        result.remove(typeVar);
      }
 else {
        SNodeOperations.replaceWithAnother(typeVar,replacement);
      }
    }
  }
  return result;
}
