{
  SNode concreteMethodClassifierType=null;
  Set<SNode> newFrontier=new HashSet<SNode>();
  outer:   while (!(SetSequence.fromSet(frontier).isEmpty())) {
    for (    SNode currentType : frontier) {
      SNode currentClassifier=SLinkOperations.getTarget(currentType,"classifier",false);
      if (currentClassifier == classifier) {
        concreteMethodClassifierType=currentType;
        break outer;
      }
      if (SNodeOperations.isInstanceOf(currentClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        SNode classConcept=currentClassifier;
        SNode superclass=SLinkOperations.getTarget(classConcept,"superclass",true);
        if ((superclass != null)) {
          SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(superclass,currentType));
        }
        for (        SNode intfc : SLinkOperations.getTargets(classConcept,"implementedInterface",true)) {
          SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(intfc,currentType));
        }
      }
      if (SNodeOperations.isInstanceOf(currentClassifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
        SNode interfaceConcept=currentClassifier;
        for (        SNode intfc : SLinkOperations.getTargets(interfaceConcept,"extendedInterface",true)) {
          SetSequence.fromSet(newFrontier).addElement(getConcreteClassifierType(intfc,currentType));
        }
      }
    }
    frontier=newFrontier;
    newFrontier=new HashSet<SNode>();
  }
  return concreteMethodClassifierType;
}
