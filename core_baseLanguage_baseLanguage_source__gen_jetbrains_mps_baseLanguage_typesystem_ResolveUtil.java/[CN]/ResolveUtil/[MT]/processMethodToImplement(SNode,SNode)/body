{
  SNode declaringClassifier=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  SNode result=SNodeOperations.copyNode(method);
  Set<SNode> initialClassifierTypes=SetSequence.fromSet(new HashSet<SNode>());
  if (SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode classConcept=SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SNode superclass=SLinkOperations.getTarget(classConcept,"superclass",true);
    if ((superclass != null)) {
      SetSequence.fromSet(initialClassifierTypes).addElement(superclass);
    }
    for (    SNode intfc : SLinkOperations.getTargets(classConcept,"implementedInterface",true)) {
      SetSequence.fromSet(initialClassifierTypes).addElement(intfc);
    }
  }
  if (SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    SNode interfaceConcept=SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.Interface");
    for (    SNode intfc : SLinkOperations.getTargets(interfaceConcept,"extendedInterface",true)) {
      SetSequence.fromSet(initialClassifierTypes).addElement(intfc);
    }
  }
  SNode concreteSuperClassifierType=getConcreteSuperClassifierType(initialClassifierTypes,declaringClassifier);
  Set<SNode> types=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(result,"returnType",true));
  for (  SNode param : SLinkOperations.getTargets(result,"parameter",true)) {
    SetSequence.fromSet(types).addElement(SLinkOperations.getTarget(param,"type",true));
  }
  List<SNode> params=SLinkOperations.getTargets(concreteSuperClassifierType,"parameter",true);
  for (  SNode typeToModify : types) {
    for (    SNode varRef : SNodeOperations.getDescendants(typeToModify,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",true)) {
      SNodeOperations.replaceWithAnother(varRef,SNodeOperations.copyNode(ListSequence.fromList(params).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(varRef,"typeVariableDeclaration",false)))));
    }
  }
  return result;
}
