{
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  for (  TemplateModule generator : plan.getGenerators()) {
    Collection<TemplateMappingPriorityRule> rules=generator.getPriorities();
    if (rules == null) {
      continue;
    }
    for (    TemplateMappingPriorityRule r : rules) {
      Message msg=new Message(MessageKind.INFORMATION,r.toString());
      msg.setHintObject(generator.getReference());
      messagesView.add(msg);
    }
  }
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  if (plan instanceof GenerationPlan) {
    GenerationPlan planImpl=(GenerationPlan)plan;
    if (planImpl.hasIgnoredPriorityRules()) {
      printPlanConflicts(planImpl.getIgnoredPriorityRules(),"Ignored mapping priority rules:");
    }
    if (planImpl.hasConflictingPriorityRules()) {
      printPlanConflicts(planImpl.getConflicts(),"Conflicting mapping priority rules encountered:");
    }
  }
  console.addText("---------------------  mappings partitioning  -----------------------------------\n\n");
  int stepCount=1;
  for (  ModelGenerationPlan.Step step : plan.getSteps_()) {
    console.addText(" [ " + stepCount++ + " ]\n");
    if (step instanceof ModelGenerationPlan.Checkpoint) {
      console.addText(" Checkpoint: " + ((ModelGenerationPlan.Checkpoint)step).getName());
      console.addText("\n");
    }
 else     if (step instanceof ModelGenerationPlan.Transform) {
      List<TemplateMappingConfiguration> mappingSet=((ModelGenerationPlan.Transform)step).getTransformations();
      List<Pair<String,TemplateMappingConfiguration>> strings=GenerationPartitioningUtil.toStrings(mappingSet);
      for (      Pair<String,TemplateMappingConfiguration> string : strings) {
        SNode node=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x360b134fc0467d73L,"jetbrains.mps.console.ideCommands.structure.ClickableGenerator")));
        SPropertyOperations.set(node,MetaAdapterFactory.getProperty(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x360b134fc0467d73L,0x360b134fc0525d7fL,"moduleId"),PersistenceFacade.getInstance().asString(string.o2.getModel().getModule().getModuleReference().getModuleId()));
        SPropertyOperations.set(node,MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L,0xb306d4d17f64c375L,0x2095ece53bb9f5b0L,0x360b134fc047ce2aL,"text"),string.o1);
        console.addText(" ");
        console.addNode(node);
        console.addText("\n");
      }
    }
 else {
      console.addText("Unknown step kind:" + step.getClass());
    }
    console.addText("\n");
  }
  console.addText("---------------------------------------------------------------------------------\n");
}
