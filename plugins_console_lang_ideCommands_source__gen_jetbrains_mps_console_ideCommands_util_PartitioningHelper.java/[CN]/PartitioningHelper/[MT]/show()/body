{
  GenerationPlan plan=new GenerationPlan(inputModel);
  Map<TemplateMappingPriorityRule,TemplateModule> myRule2Generator=new HashMap<TemplateMappingPriorityRule,TemplateModule>();
  for (  TemplateModule generator : plan.getGenerators()) {
    Collection<TemplateMappingPriorityRule> priorities=generator.getPriorities();
    if (priorities == null) {
      continue;
    }
    for (    TemplateMappingPriorityRule rule : priorities) {
      myRule2Generator.put(rule,generator);
    }
  }
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  for (  TemplateModule generator : plan.getGenerators()) {
    Collection<TemplateMappingPriorityRule> rules=generator.getPriorities();
    if (rules == null) {
      continue;
    }
    for (    TemplateMappingPriorityRule r : rules) {
      Message msg=new Message(MessageKind.INFORMATION,r.toString());
      msg.setHintObject(generator.getReference());
      messagesView.add(msg);
    }
  }
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  if (plan.hasIgnoredPriorityRules()) {
    printPlanConflicts(plan.getIgnoredPriorityRules(),"Ignored mapping priority rules:");
  }
  if (plan.hasConflictingPriorityRules()) {
    printPlanConflicts(plan.getConflicts(),"Conflicting mapping priority rules encountered:");
  }
  console.addText("---------------------  mappings partitioning  -----------------------------------\n\n");
  for (int step=0; step < plan.getSteps().size(); step++) {
    List<TemplateMappingConfiguration> mappingSet=plan.getSteps().get(step);
    console.addText(" [ " + (step + 1) + " ]\n");
    List<Pair<String,TemplateMappingConfiguration>> strings=GenerationPartitioningUtil.toStrings(mappingSet);
    for (    Pair<String,TemplateMappingConfiguration> string : strings) {
      SNode node=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x360b134fc0467d73L,"jetbrains.mps.console.ideCommands.structure.ClickableGenerator")));
      SPropertyOperations.set(node,MetaAdapterFactory.getProperty(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x360b134fc0467d73L,0x360b134fc0525d7fL,"moduleId"),string.o2.getModel().getSModelReference().resolve(MPSModuleRepository.getInstance()).getModule().getModuleId().toString());
      SPropertyOperations.set(node,MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L,0xb306d4d17f64c375L,0x2095ece53bb9f5b0L,0x360b134fc047ce2aL,"text"),string.o1);
      console.addText(" ");
      console.addNode(node);
      console.addText("\n");
    }
    console.addText("\n");
  }
  console.addText("---------------------------------------------------------------------------------\n");
}
