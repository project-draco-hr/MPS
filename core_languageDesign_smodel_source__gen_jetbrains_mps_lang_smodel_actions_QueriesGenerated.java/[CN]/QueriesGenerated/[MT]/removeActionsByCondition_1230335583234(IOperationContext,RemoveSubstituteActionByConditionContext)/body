{
  final ApplicableTypesInfo appTypesInfo;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure._LinkAccessT"),false);
        result.myLinkAccessT=linkAccessT;
        if ((linkAccessT != null) && SPropertyOperations.getBoolean(linkAccessT,"singularCradinality")) {
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),true) != null) {
            result.myLinkToConcept=true;
          }
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),false) != null) {
          result.myToConcept=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),false) != null) {
          result.myToNode=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SEnumType"),false) != null) {
          result.myToEnum=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SEnumMemberType"),false) != null) {
          result.myToEnumMember=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SModelType"),false) != null) {
          result.myToModel=true;
        }
        return result;
      }
    }
;
    appTypesInfo=(ApplicableTypesInfo)calc.calculate();
  }
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        SNode linkAccessT=appTypesInfo.myLinkAccessT;
        if (linkAccessT != null && !(SPropertyOperations.getBoolean(linkAccessT,"aggregation"))) {
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Link_DeleteChildOperation")) {
            return true;
          }
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation")) {
            return true;
          }
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Node_DetachOperation")) {
            return true;
          }
        }
        return false;
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
