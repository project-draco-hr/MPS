{
  ModelAccess.assertLegalWrite();
  boolean success=true;
  for (  LanguageRuntime language : languages) {
    String namespace=language.getNamespace();
    if (myLoadedLanguages.contains(namespace))     continue;
    IHelginsDescriptor typesystem=null;
    try {
      typesystem=language.getTypesystem();
    }
 catch (    Throwable t) {
      LOG.error("Error while loading language: " + namespace,t);
    }
    if (typesystem == null) {
      success=false;
      continue;
    }
    try {
      myInferenceRules.addRuleSetItem(typesystem.getInferenceRules());
      myNonTypesystemRules.addRuleSetItem(typesystem.getNonTypesystemRules());
      mySubtypingRules.addRuleSetItem(typesystem.getSubtypingRules());
      Set<ComparisonRule_Runtime> comparisonRule_runtimes=typesystem.getComparisonRules();
      myComparisonRules.addRuleSetItem(comparisonRule_runtimes);
      myReplacementRules.addRuleSetItem(typesystem.getEliminationRules());
      myVariableConverters.addAll(typesystem.getVariableConverters());
      myOverloadedOperationsManager.addOverloadedOperationsTypeProviders(typesystem.getOverloadedOperationsTypesProviders());
    }
 catch (    RuntimeException t) {
      success=false;
    }
 finally {
      myLoadedLanguages.add(namespace);
    }
  }
  try {
    myComparisonRules.makeConsistent();
    myReplacementRules.makeConsistent();
    myOverloadedOperationsManager.makeConsistent();
  }
 catch (  RuntimeException ex) {
    LOG.error("internal error: " + ex.getMessage(),ex);
    success=false;
  }
  return success;
}
