{
synchronized (RULES_LOCK) {
    if (myLoadedLanguages.contains(l.getModuleFqName())) {
      return true;
    }
    SModelDescriptor helginsModelDescriptor=LanguageAspect.TYPESYSTEM.get(l);
    if (helginsModelDescriptor == null)     return false;
    String packageName=helginsModelDescriptor.getLongName();
    String oldClassname="HelginsDescriptor";
    String classname="TypesystemDescriptor";
    try {
      IHelginsDescriptor typesystemDescriptor;
      Class<? extends IHelginsDescriptor> c=(Class<? extends IHelginsDescriptor>)l.getClass(packageName + "." + classname);
      if (c == null) {
        c=(Class<? extends IHelginsDescriptor>)l.getClass(packageName + "." + oldClassname);
      }
      if (c != null) {
        typesystemDescriptor=c.newInstance();
        myInferenceRules.addRuleSetItem(typesystemDescriptor.getInferenceRules());
        myNonTypesystemRules.addRuleSetItem(typesystemDescriptor.getNonTypesystemRules());
        mySubtypingRules.addRuleSetItem(typesystemDescriptor.getSubtypingRules());
        myComparisonRules.addRuleSetItem(typesystemDescriptor.getComparisonRules());
        myReplacementRules.addRuleSetItem(typesystemDescriptor.getEliminationRules());
        myDependenciesContainer.addDependencies(typesystemDescriptor.getDependencies());
        myVariableConverters.addAll(typesystemDescriptor.getVariableConverters());
        myOverloadedOperationsManager.addOverloadedOperationsTypeProviders(typesystemDescriptor.getOverloadedOperationsTypesProviders());
        Set<AbstractDependentComputation_Runtime> dependentComputations=typesystemDescriptor.getDependentComputations();
        myDependentComputations.addRuleSetItem(dependentComputations);
        for (        AbstractDependentComputation_Runtime dependentComputation : dependentComputations) {
          myDependentComputationsBlockedNodes.addRule(dependentComputation.getWrapper());
        }
        myComparisonRules.makeConsistent();
        myReplacementRules.makeConsistent();
        myDependenciesContainer.makeConsistent();
        myOverloadedOperationsManager.makeConsistent();
        return true;
      }
 else {
        return false;
      }
    }
 catch (    Throwable t) {
      return false;
    }
 finally {
      myLoadedLanguages.add(l.getModuleFqName());
    }
  }
}
