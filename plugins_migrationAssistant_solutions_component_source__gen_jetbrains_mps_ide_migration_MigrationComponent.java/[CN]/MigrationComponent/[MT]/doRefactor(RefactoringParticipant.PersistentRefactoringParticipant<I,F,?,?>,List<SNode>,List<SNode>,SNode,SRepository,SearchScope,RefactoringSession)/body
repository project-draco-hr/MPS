{
  List<I> initialStates=ListSequence.fromList(initialStatesSerialized).select(new ISelector<SNode,I>(){
    public I select(    SNode it){
      return participant.deserializeInitialState(it);
    }
  }
).toListSequence();
  List<F> finalStates=ListSequence.fromList(finalStatesSerialized).select(new ISelector<SNode,F>(){
    public F select(    SNode it){
      return participant.deserializeFinalState(it);
    }
  }
).toListSequence();
  List<RefactoringParticipant.Option> availableOptions=participant.getAvailableOptions(initialStates,repository);
  List<RefactoringParticipant.Option> selectedOptions;
  if (selectedOptionsSerialized == null) {
    selectedOptions=availableOptions;
  }
 else {
    selectedOptions=ListSequence.fromList(SLinkOperations.getChildren(selectedOptionsSerialized,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23340L,0x31ee543051f23346L,"options"))).select(new ISelector<SNode,RefactoringParticipant.Option>(){
      public RefactoringParticipant.Option select(      SNode it){
        return new RefactoringParticipant.Option(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f23344L,"optionId")),SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f30774L,"description")));
      }
    }
).toListSequence();
  }
  List<List<RefactoringParticipant.Change<I,F>>> nodesChanges=participant.getChanges(initialStates,repository,selectedOptions,searchScope,new EmptyProgressMonitor());
{
    Iterator<List<RefactoringParticipant.Change<I,F>>> changes_it=ListSequence.fromList(nodesChanges).iterator();
    Iterator<F> finalState_it=ListSequence.fromList(finalStates).iterator();
    List<RefactoringParticipant.Change<I,F>> changes_var;
    final Wrappers._T<F> finalState_var=new Wrappers._T<F>();
    while (changes_it.hasNext() && finalState_it.hasNext()) {
      changes_var=changes_it.next();
      finalState_var.value=finalState_it.next();
      ListSequence.fromList(changes_var).visitAll(new IVisitor<RefactoringParticipant.Change<I,F>>(){
        public void visit(        RefactoringParticipant.Change<I,F> it){
          it.confirm(finalState_var.value,repository,session);
        }
      }
);
    }
  }
}
