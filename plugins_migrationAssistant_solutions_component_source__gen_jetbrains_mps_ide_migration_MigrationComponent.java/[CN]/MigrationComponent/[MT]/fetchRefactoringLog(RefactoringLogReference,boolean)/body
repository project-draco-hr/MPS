{
  Language depModule=(Language)scriptReference.getModule();
  final int current=scriptReference.getFromVersion();
  SModel migrationModel=SModuleOperations.getAspect(depModule,"migration");
  final SNode log=ListSequence.fromList(SModelOperations.roots(migrationModel,MetaAdapterFactory.getConcept(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,"jetbrains.mps.lang.migration.structure.RefactoringLog"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getInteger(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,0x1bf9eb43276b6d91L,"fromVersion")) == current;
    }
  }
).first();
  if (log == null && !(silently)) {
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("Could not load refactoring log for module " + depModule + ", version "+ current+ ".");
    }
    return null;
  }
  Iterable<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>> participants=Sequence.fromIterable(new ExtensionPoint<Iterable<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>>>("jetbrains.mps.refactoring.participant.PersistentRefactoringParticipantsEP").getObjects()).translate(new ITranslator2<Iterable<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>>,RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>>(){
    public Iterable<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>> translate(    Iterable<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>> it){
      return it;
    }
  }
);
  List<RefactoringLogReference> executeAfter=ListSequence.fromList(SLinkOperations.getChildren(log,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,0x1bf9eb43276b6d90L,"executeAfter"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d9dL,0x1bf9eb43276b6d9eL,"refactoring")) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d9dL,0x1bf9eb43276b6d9eL,"refactoring"));
    }
  }
).select(new ISelector<SNode,RefactoringLogReference>(){
    public RefactoringLogReference select(    SNode it){
      return ((RefactoringLogReference)(RefactoringLogReference)BHReflection.invoke(it,SMethodTrimmedId.create("getDescriptor",MetaAdapterFactory.getConcept(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,"jetbrains.mps.lang.migration.structure.RefactoringLog"),"4uVwhQyPQ_Z")));
    }
  }
).toListSequence();
  List<RefactoringPart> parts=Sequence.fromIterable(participants).select(new ISelector<RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?>,RefactoringPart>(){
    public RefactoringPart select(    final RefactoringParticipant.PersistentRefactoringParticipant<?,?,?,?> participant){
      List<SNode> participantParts=ListSequence.fromList(SLinkOperations.getChildren(log,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,0x1bf9eb43276b6d92L,"part"))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_gd1mrb_a0a0a0a0a0a0a0a0a0a0a0h0w(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x2b3f57492c163158L,0x325b97b223b9e3aaL,"participant")),participant.getId());
        }
      }
).toListSequence();
      return ((RefactoringPart)new MigrationComponent.RefactoringPartImpl(SLinkOperations.getTarget(log,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,0x31ee543051f2333cL,"options")),participantParts,participant));
    }
  }
).toListSequence();
  RefactoringLog implementation=new RefactoringStepImpl(SPropertyOperations.getString(log,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),((RefactoringLogReference)BHReflection.invoke(log,SMethodTrimmedId.create("getDescriptor",MetaAdapterFactory.getConcept(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x1bf9eb43276b6d8fL,"jetbrains.mps.lang.migration.structure.RefactoringLog"),"4uVwhQyPQ_Z"))),executeAfter,parts);
  return implementation;
}
