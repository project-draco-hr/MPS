{
  I initialState=participant.deserializeInitialState(initialStateSerialized);
  final F finalState=participant.deserializeFinalState(finalStateSerialized);
  List<RefactoringParticipant.Option> availableOptions=participant.getAvailableOptions(initialState,repository);
  List<RefactoringParticipant.Option> selectedOptions;
  if (selectedOptionsSerialized == null) {
    selectedOptions=availableOptions;
  }
 else {
    selectedOptions=ListSequence.fromList(SLinkOperations.getChildren(selectedOptionsSerialized,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23340L,0x31ee543051f23346L,"options"))).select(new ISelector<SNode,RefactoringParticipant.Option>(){
      public RefactoringParticipant.Option select(      SNode it){
        return new RefactoringParticipant.Option(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f23344L,"optionId")),SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f30774L,"description")));
      }
    }
).toListSequence();
  }
  ListSequence.fromList(participant.getChanges(initialState,repository,selectedOptions,searchScope)).visitAll(new IVisitor<RefactoringParticipant.Change<I,F>>(){
    public void visit(    RefactoringParticipant.Change<I,F> it){
      it.confirm(finalState,repository,session);
    }
  }
);
}
