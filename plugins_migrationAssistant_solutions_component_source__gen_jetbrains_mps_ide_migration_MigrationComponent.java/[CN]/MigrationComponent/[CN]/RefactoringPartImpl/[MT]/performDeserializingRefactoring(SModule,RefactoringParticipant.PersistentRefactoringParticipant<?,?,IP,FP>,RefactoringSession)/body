{
  RefactoringProcessor.RefactoringUI ui=new MigrationComponent.MigrationRefactoringUI((mySelectedOptionsSerialized == null ? null : ListSequence.fromList(SLinkOperations.getChildren(mySelectedOptionsSerialized,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23340L,0x31ee543051f23346L,"options"))).select(new ISelector<SNode,RefactoringParticipant.Option>(){
    public RefactoringParticipant.Option select(    SNode it){
      return new RefactoringParticipant.Option(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f23344L,"optionId")),SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x31ee543051f23343L,0x31ee543051f30774L,"description")));
    }
  }
).toListSequence()));
  final Map<SNode,SNode> initialToFinal=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode part : ListSequence.fromList(myParts)) {
    MapSequence.fromMap(initialToFinal).put(SLinkOperations.getTarget(part,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x2b3f57492c163158L,0x325b97b223b9e3acL,"initialState")),SLinkOperations.getTarget(part,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x2b3f57492c163158L,0x325b97b223b9e3aeL,"finalState")));
  }
  _FunctionTypes._return_P1_E0<? extends Map<SNode,SNode>,? super Iterable<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,SNode,SNode>>> doRefactorFunction=new _FunctionTypes._return_P1_E0<Map<SNode,SNode>,Iterable<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,SNode,SNode>>>(){
    public Map<SNode,SNode> invoke(    Iterable<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,SNode,SNode>> changes){
      return initialToFinal;
    }
  }
;
  RefactoringProcessor.<IP,FP,SNode,SNode>performRefactoring(new RefactoringParticipant.DeserializingParticipantStateFactory<IP,FP>(),ui,refactoringSession,module.getRepository(),new ModulesScope(module),null,((Iterable<? extends RefactoringParticipant<?,?,IP,FP>>)Sequence.<RefactoringParticipant<?,?,IP,FP>>singleton(participant)),ListSequence.fromList(myParts).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x2b3f57492c163158L,0x325b97b223b9e3acL,"initialState")) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0x9074634404fd4286L,0x97d5b46ae6a81709L,0x2b3f57492c163158L,0x325b97b223b9e3acL,"initialState"));
    }
  }
).toListSequence(),doRefactorFunction,null);
}
