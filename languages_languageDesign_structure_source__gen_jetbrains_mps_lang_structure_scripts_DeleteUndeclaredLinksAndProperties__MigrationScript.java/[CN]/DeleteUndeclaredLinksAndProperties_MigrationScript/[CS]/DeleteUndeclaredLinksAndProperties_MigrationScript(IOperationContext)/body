{
  super("Delete Undeclared Links and Properties");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Undeclared property";
    }
    public String getAdditionalInfo(){
      return "Undeclared property";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      for (      SProperty prop : Sequence.fromIterable(node.getProperties())) {
        if (prop.getDeclarationNode() == null) {
          return true;
        }
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
      for (      SProperty prop : Sequence.fromIterable(node.getProperties())) {
        if (prop.getDeclarationNode() == null) {
          node.setProperty(prop,null);
        }
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Child in undeclared role";
    }
    public String getAdditionalInfo(){
      return "Child in undeclared role";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SNodeOperations.getParent(node) != null) && (SNodeOperations.getContainingLinkDeclaration(node) == null);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Undeclared reference";
    }
    public String getAdditionalInfo(){
      return "Undeclared reference";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return (SLinkOperations.findLinkDeclaration(it) == null);
        }
      }
).isNotEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      for (      SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return (SLinkOperations.findLinkDeclaration(it) == null);
        }
      }
).toGenericArray(SReference.class)) {
        node.setReference(ref.getRole(),null);
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
