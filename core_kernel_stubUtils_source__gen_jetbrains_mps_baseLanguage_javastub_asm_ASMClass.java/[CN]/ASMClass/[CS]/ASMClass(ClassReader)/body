{
  myNode=new ClassNode();
  try {
    reader.accept(myNode,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
  }
 catch (  RuntimeException e) {
    return;
  }
  if (myNode.signature != null) {
    SignatureReader signReader=new SignatureReader(myNode.signature);
    signReader.accept(new SignatureVisitorAdapter(){
      @Override public SignatureVisitor visitSuperclass(){
        return new ASMClass.ClassifierSignatureVisitor(){
          @Override public void visitEnd(){
            ASMClassType cls=new ASMClassType(myName);
            myGenericSuperclass=new ASMParameterizedType(cls,myParameters);
          }
        }
;
      }
      @Override public SignatureVisitor visitInterface(){
        return new ASMClass.ClassifierSignatureVisitor(){
          @Override public void visitEnd(){
            ASMClassType cls=new ASMClassType(myName);
            myGenericInterfaces.add(new ASMParameterizedType(cls,myParameters));
          }
        }
;
      }
    }
);
  }
 else {
    if (myNode.superName != null) {
      myGenericSuperclass=new ASMClassType(myNode.superName.replace('/','.'));
    }
    for (    String intfc : (List<String>)myNode.interfaces) {
      myGenericInterfaces.add(new ASMClassType(intfc.replace('/','.')));
    }
  }
  if (myNode.signature != null) {
    myTypeVariables.addAll(TypeUtil.getFormalTypeParameters(myNode.signature));
  }
  for (  FieldNode fn : (List<FieldNode>)myNode.fields) {
    myFields.add(new ASMField(fn));
  }
  for (  MethodNode mn : (List<MethodNode>)myNode.methods) {
    ASMMethod am=new ASMMethod(mn);
    if (am.isConstructor()) {
      myConstructors.add(am);
    }
 else {
      myMethods.add(am);
    }
  }
  if (myNode.visibleAnnotations != null || myNode.invisibleAnnotations != null) {
    int size=((myNode.visibleAnnotations != null ? myNode.visibleAnnotations.size() : 0)) + ((myNode.invisibleAnnotations != null ? myNode.invisibleAnnotations.size() : 0));
    myAnnotations=new ArrayList<ASMAnnotation>(size);
    if (myNode.visibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myNode.visibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        myAnnotations.add(aa);
      }
    }
    if (myNode.invisibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myNode.invisibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        myAnnotations.add(aa);
      }
    }
  }
}
