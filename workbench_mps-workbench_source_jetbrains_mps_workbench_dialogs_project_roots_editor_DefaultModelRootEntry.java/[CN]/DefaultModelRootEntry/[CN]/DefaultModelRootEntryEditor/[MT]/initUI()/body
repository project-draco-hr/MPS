{
  JPanel panel=new JPanel(new GridLayoutManager(2,1));
  PersistenceFacade pReg=PersistenceRegistry.getInstance();
  Iterable<String> ti=pReg.getTypeIds();
  ComboBox comboBox=new ComboBox();
  for (  String s : ti)   comboBox.addItem(s);
  comboBox.setSelectedItem(myEntry.getType());
  panel.add(comboBox,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  comboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED)       if (!DefaultModelRootEntry.this.myEntry.getType().equals(e.getItem())) {
        DefaultModelRootEntry.this.myEntry=new ModelRootDescriptor((String)e.getItem(),DefaultModelRootEntry.this.myEntry.getMemento().copy());
        DefaultModelRootEntry.this.reset();
        updateTree();
      }
    }
  }
);
  myTreePanel=new JPanel(new BorderLayout());
  updateTree();
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTreePanel);
  panel.add(scrollPane,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null));
  myEditorComponent=panel;
}
