{
  SNode sequenceType=TypeChecker.getInstance().getRuntimeSupport().coerce(type,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType"),true);
  if (sequenceType != null) {
    return sequenceType;
  }
  if (type == null) {
    return null;
  }
  if ("jetbrains.teamsys.dnq.structure.PListType".equals(type.getConceptFqName())) {
    SNode classifierType=type.getChild("classifierType");
    return new QuotationClass_28().createNode(SNodeOperations.copyNode(classifierType));
  }
  if (type != null) {
    SModel model=TypeChecker.getInstance().getRuntimeTypesModel();
    GlobalScope scope=GlobalScope.getInstance();
    SNode entity=BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName("com.jetbrains.teamsys.database.Entity",Classifier.class,scope));
    if (entity == null) {
      return null;
    }
    SNode entityType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(entityType,"classifier",entity,false);
    SNode javaIterable=BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName("java.lang.Iterable",Classifier.class,scope));
    SNode javaIterableType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(javaIterableType,"classifier",javaIterable,false);
    SLinkOperations.addChild(javaIterableType,"parameter",entityType);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type,javaIterableType)) {
      return new QuotationClass_29().createNode(SNodeOperations.copyNode(entity));
    }
    SNode entityIterable=BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName("com.jetbrains.teamsys.database.EntityIterable",Classifier.class,scope));
    SNode entityIterableType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(entityIterableType,"classifier",entityIterable,false);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type,entityIterableType)) {
      return new QuotationClass_30().createNode(SNodeOperations.copyNode(entity));
    }
  }
  return null;
}
