{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Antcall","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{"project","targetDeclaration"});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BaseDirPath","jetbrains.mps.build.packaging.structure.Path",false,new String[]{"jetbrains.mps.build.packaging.structure.Path"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Block","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.build.packaging.structure.IVariableHolder"},new String[]{},new String[]{"layout"});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BlockReference","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{"block"});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Branding","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"major","minor","eap"},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"targetDeclaration"});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ComponentsList","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent","jetbrains.mps.build.packaging.structure.ITransparentProjectComponent"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.CompositePathComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.CompositeString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Configuration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"fullName"},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ConfigurationReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"configuration"});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Copy","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"excludes","includes"},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Delete","jetbrains.mps.build.packaging.structure.PostProcessingTask",false,new String[]{"jetbrains.mps.build.packaging.structure.PostProcessingTask"},new String[]{"path"},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Echo","jetbrains.mps.build.packaging.structure.File",false,new String[]{"jetbrains.mps.build.packaging.structure.File"},new String[]{"append"},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.File","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.FileExistsCondition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition"},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Folder","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Help","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ICompositeComponent",null,true,new String[]{"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent"},new String[]{"excludes","includes"},new String[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ICondition",null,true,new String[]{},new String[]{},new String[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ILayoutComponent",null,true,new String[]{"jetbrains.mps.build.packaging.structure.IMacroHolder"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IMacroHolder",null,true,new String[]{},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.INotBuildableComponent",null,true,new String[]{},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IPath",null,true,new String[]{},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IPlugin",null,true,new String[]{},new String[]{},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IStringExpression",null,true,new String[]{},new String[]{},new String[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ITransparentProjectComponent",null,true,new String[]{},new String[]{},new String[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IVariableHolder",null,true,new String[]{},new String[]{},new String[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IdeaInitializerReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"ideaInitializer"});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Jar","jetbrains.mps.build.packaging.structure.Zip",false,new String[]{"jetbrains.mps.build.packaging.structure.Zip"},new String[]{},new String[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Layout","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ILayoutComponent","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IVariableHolder","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.buildlanguage.structure.IAntScript"},new String[]{"compile","scriptsFolder","useTmpDir"},new String[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Library","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"path"},new String[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{"configuration"});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Macro","jetbrains.mps.buildlanguage.structure.PropertyDeclaration",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyDeclaration","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"path"},new String[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.MacroReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"name","path"},new String[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Manifest","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ManifestAttribute","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Module","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"id","doNotJar","includeResources","excludeResources"},new String[]{"cycle"});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ModuleCycle","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ModuleCycleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"cycle"});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NewModuleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"module"});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NonExistingPath","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IPath"},new String[]{"pathToCheck"},new String[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NotCondition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition"},new String[]{},new String[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Pair","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Path","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.build.packaging.structure.IPath"},new String[]{},new String[]{});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PathComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"path"},new String[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PathHolder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"fullPath","moduleRelativePath"},new String[]{"macro","module"});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Plugin","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IPlugin","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PluginModule","jetbrains.mps.build.packaging.structure.Module",false,new String[]{"jetbrains.mps.build.packaging.structure.Module","jetbrains.mps.build.packaging.structure.ICompositeComponent","jetbrains.mps.build.packaging.structure.IPlugin"},new String[]{},new String[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PostProcessingTask","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertiesImport","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertyFileImport","jetbrains.mps.build.packaging.structure.PropertiesImport",false,new String[]{"jetbrains.mps.build.packaging.structure.PropertiesImport"},new String[]{},new String[]{});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertyNodeImport","jetbrains.mps.build.packaging.structure.PropertiesImport",false,new String[]{"jetbrains.mps.build.packaging.structure.PropertiesImport"},new String[]{},new String[]{"propertyNode"});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Replace","jetbrains.mps.build.packaging.structure.File",false,new String[]{"jetbrains.mps.build.packaging.structure.File"},new String[]{},new String[]{});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.SimpleString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{"name"},new String[]{});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Space","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.UpdateWebsite","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Variable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"antName"},new String[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.VariableReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{"variable"});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.WelcomeScreen","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Zip","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{"filemode","dirmode"},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
