{
  StructureModification.Relation[][] rel=new StructureModification.Relation[ListSequence.fromList(list).count()][ListSequence.fromList(list).count()];
  for (int i=0; i < ListSequence.fromList(list).count(); ++i) {
    for (int j=0; j < i; ++j) {
      rel[i][j]=compare(ListSequence.fromList(list).getElement(i),ListSequence.fromList(list).getElement(j));
      rel[j][i]=rel[i][j].swap();
    }
    rel[i][i]=StructureModification.Relation.EQUAL;
  }
  Map<Integer,Set<Integer>> graph=MapSequence.fromMap(new HashMap<Integer,Set<Integer>>());
  label:   for (int i=0; i < ListSequence.fromList(list).count(); i++) {
    Set<Integer> cur=SetSequence.fromSet(new HashSet<Integer>());
    for (int j=0; j < i; j++) {
      if (rel[j][i] == StructureModification.Relation.EQUAL) {
        continue label;
      }
      if (rel[j][i] == StructureModification.Relation.BEFORE) {
        SetSequence.fromSet(cur).addElement(j);
      }
      if (rel[j][i] == StructureModification.Relation.AFTER) {
        SetSequence.fromSet(MapSequence.fromMap(graph).get(j)).addElement(i);
      }
    }
    MapSequence.fromMap(graph).put(i,cur);
  }
  List<Integer> ordered=ListSequence.fromList(new ArrayList<Integer>());
  Set<Integer> visited=SetSequence.fromSet(new HashSet<Integer>());
  for (  int node : SetSequence.fromSet(MapSequence.fromMap(graph).keySet())) {
    visit(node,graph,visited,ordered);
  }
  return ListSequence.fromList(ordered).select(new ISelector<Integer,StructureModification>(){
    public StructureModification select(    Integer it){
      return ListSequence.fromList(list).getElement(it);
    }
  }
);
}
