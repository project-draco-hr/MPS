{
  myMinorStep=-1;
  List<TemplateMappingConfiguration> mappingConfigurations=new ArrayList<TemplateMappingConfiguration>(planStep.getTransformations());
  if (myLogger.needsInfo()) {
    printUsedLanguages(inputModel);
    printMappingConfigurations("apply mapping configurations:",mappingConfigurations);
  }
  mySessionContext=new GenerationSessionContext(mySessionContext);
  TemplateGenerator templateGenerator=new TemplateGenerator(mySessionContext,inputModel,null,new StepArguments(null,myDependenciesBuilder,myNewTrace,null));
  LinkedList<TemplateMappingConfiguration> drop=new LinkedList<TemplateMappingConfiguration>();
  for (  TemplateMappingConfiguration c : mappingConfigurations) {
    if (!c.isApplicable(templateGenerator)) {
      drop.add(c);
    }
  }
  if (!drop.isEmpty()) {
    printMappingConfigurations("drop mapping configurations (not applicable):",drop);
  }
  mappingConfigurations.removeAll(drop);
  if (mappingConfigurations.isEmpty()) {
    if (inputModel.getRootNodes().iterator().hasNext()) {
      myLogger.warning("skip model \"" + inputModel.getReference().getModelName() + "\" : no generator available");
    }
    return inputModel;
  }
  Collections.sort(mappingConfigurations,new MapCfgComparator());
  GenPlanActiveStep activeStep=new GenPlanActiveStep(myGenerationPlan,planStep,mappingConfigurations);
  try {
    myStepArguments=new StepArguments(activeStep,myDependenciesBuilder,myNewTrace,new GeneratorMappings(myLogger));
    SModel outputModel=executeMajorStepInternal(inputModel,progress);
    if (myLogger.getErrorCount() > 0) {
      myLogger.warning("model \"" + inputModel.getReference().getModelName() + "\" has been generated with errors");
    }
    return outputModel;
  }
  finally {
    recordAccessedTransientModels();
  }
}
