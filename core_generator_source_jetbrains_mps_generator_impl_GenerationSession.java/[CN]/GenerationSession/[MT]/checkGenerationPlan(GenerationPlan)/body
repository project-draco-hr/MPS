{
  if (myOriginalInputModel.getModule() instanceof Generator && SModelStereotype.isGeneratorModel(myOriginalInputModel)) {
    SModuleReference me=myOriginalInputModel.getModule().getModuleReference();
    for (    TemplateModule t : generationPlan.getGenerators()) {
      if (t.getReference().equals(me)) {
        myLogger.warning("the generator is used to generate itself: try to avoid using language constructs in its queries");
        break;
      }
    }
  }
  if (generationPlan.hasConflictingPriorityRules()) {
    Map<TemplateMappingPriorityRule,TemplateModule> myRule2Generator=new HashMap<TemplateMappingPriorityRule,TemplateModule>();
    for (    TemplateModule generator : generationPlan.getGenerators()) {
      Collection<TemplateMappingPriorityRule> priorities=generator.getPriorities();
      if (priorities == null) {
        continue;
      }
      for (      TemplateMappingPriorityRule rule : priorities) {
        myRule2Generator.put(rule,generator);
      }
    }
    myLogger.error("Conflicting mapping priority rules encountered:");
    List<Pair<TemplateMappingPriorityRule,String>> errors=generationPlan.getConflictingPriorityRulesAsStrings();
    for (    Pair<TemplateMappingPriorityRule,String> error : errors) {
      TemplateMappingPriorityRule rule=error.o1;
      String text=error.o2;
      TemplateModule templateModule=myRule2Generator.get(rule);
      myLogger.error(templateModule.getReference(),text);
    }
    myLogger.error("");
    return false;
  }
  return true;
}
