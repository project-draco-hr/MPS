{
  final MPSProject mpsProject=project.getComponent(MPSProject.class);
  final SRepository repository=mpsProject.getRepository();
  ModelAccess modelAccess=repository.getModelAccess();
  final SNode node=(SNode)dataContext.getData(MPSCommonDataKeys.NODE.getName());
  modelAccess.runReadInEDT(new Runnable(){
    @Override public void run(){
      String oldName=node.getName();
      PsiMethod psiMethod=(PsiMethod)MPSPsiProvider.getInstance(project).getPsi(node);
      boolean thereAreMpsOverrides=!MethodRefactoringUtils.findOverridingMethods(node,new EmptyProgressMonitor()).isEmpty();
      boolean thereArePsiOverrides=OverridingMethodsSearch.search(psiMethod,false).iterator().hasNext();
      boolean overridden=thereAreMpsOverrides || thereArePsiOverrides;
      final RenameMethodDialog d=new RenameMethodDialog(project,oldName,overridden);
      d.show();
      final String newName=d.getName();
      if (newName == null) {
        return;
      }
      if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(node)) {
        return;
      }
      IRefactoring base=RefactoringUtil.getRefactoringByClassName("jetbrains.mps.baseLanguage.refactorings.RenameMethod");
      IRefactoring psiAwareRefactoring=new PsiMethodRenameRefactoringWrapper(base,node,d.getOverriding());
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContext(psiAwareRefactoring,Arrays.asList("newName","refactorOverriding"),Arrays.asList(newName,d.getOverriding()),node,mpsProject));
    }
  }
);
}
