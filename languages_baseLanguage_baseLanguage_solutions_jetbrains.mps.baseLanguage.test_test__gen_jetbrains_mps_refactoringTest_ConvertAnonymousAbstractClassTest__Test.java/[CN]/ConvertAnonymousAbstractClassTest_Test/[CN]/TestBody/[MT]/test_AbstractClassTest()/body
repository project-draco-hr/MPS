{
  this.addNodeById("6791439617122628437");
  this.addNodeById("6791439617122628452");
  this.addNodeById("6791439617122640070");
  new ConvertAnonymousRefactoring(SNodeOperations.cast(this.getNodeById("6791439617122628484"),"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"MyAbstract").doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("6791439617122628459"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("6791439617122640105"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
