{
  List<SpecificChecker> checkers=ListSequence.fromList(new ArrayList<SpecificChecker>());
switch (myState.myCheckingLevel) {
case TYPESYSTEM:
    ListSequence.fromList(checkers).addElement(new INodeCheckerSpecificCheckerAdapter(new TypesystemChecker(),"typesystem"));
case CONSTRAINTS:
  ListSequence.fromList(checkers).addElement(new INodeCheckerSpecificCheckerAdapter(new LanguageChecker(),"constraints"));
case STRUCTURE:
ListSequence.fromList(checkers).addElement(new StructureChecker());
default :
ListSequence.fromList(checkers).addElement(new ModelPropertiesChecker());
ListSequence.fromList(checkers).addElement(new ModelPersistenceVersionChecker());
ListSequence.fromList(checkers).addElement(new UnresolvedReferencesChecker(mpsProject));
}
if (isCheckSpecific()) {
ListSequence.fromList(checkers).addElement(new GeneratorTemplatesChecker());
}
return checkers;
}
