{
  initClassPathItem(myModule);
  SourceWrapper wrapper=SourceWrapper.wrapSource(source,myBaseModelToAddSource,featureKind);
  addSource(SModelOperations.getModelName(myBaseModelToAddSource) + "." + wrapper.getShortClassName(),wrapper.getWrappedSource());
  myPackageFQNamesToModels.put(SModelOperations.getModelName(myBaseModelToAddSource),myBaseModelToAddSource);
  compileOnce();
  List<SNode> classifierList=ModelAccess.instance().runWriteAction(new Computable<List<SNode>>(){
    @Override public List<SNode> compute(){
      return buildAST(true);
    }
  }
);
  if (classifierList.isEmpty()) {
    return new ArrayList<SNode>();
  }
  List<SNode> sNodeList=wrapper.getOurNodesFromClassifier(ListSequence.<SNode>fromList(classifierList).first());
  for (  SNode node : sNodeList) {
    if ((SNodeOperations.getParent(node) != null)) {
      SNodeOperations.detachNode(node);
      SNodeOperations.getParent(node).removeChild(node);
    }
  }
  return sNodeList;
}
