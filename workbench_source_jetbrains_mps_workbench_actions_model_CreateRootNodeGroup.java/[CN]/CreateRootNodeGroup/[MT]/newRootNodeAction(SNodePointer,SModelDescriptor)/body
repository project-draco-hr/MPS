{
  return new BaseAction(NodePresentationUtil.matchingText(nodeConcept.getNode())){
{
      Icon icon=ModelAccess.instance().runReadAction(new Computable<Icon>(){
        public Icon compute(){
          return IconManager.getIconForConceptFQName(NameUtil.nodeFQName(nodeConcept.getNode()));
        }
      }
);
      getTemplatePresentation().setIcon(icon);
      setExecuteOutsideCommand(true);
    }
    private Project myProject;
    private IScope myScope;
    protected void doUpdate(    AnActionEvent e){
      super.doUpdate(e);
    }
    protected boolean collectActionData(    AnActionEvent e){
      if (!super.collectActionData(e))       return false;
      myProject=MPSDataKeys.PROJECT.getData(e.getDataContext());
      myScope=MPSDataKeys.SCOPE.getData(e.getDataContext());
      if (myScope == null)       return false;
      return true;
    }
    protected void doExecute(    AnActionEvent e){
      ProjectPane pane=ProjectPane.getInstance(myProject);
      SNode node=ModelAccess.instance().runWriteActionInCommand(new Computable<SNode>(){
        public SNode compute(){
          SNode result=NodeFactoryManager.createNode((ConceptDeclaration)nodeConcept.getNode().getAdapter(),null,null,modelDescriptor.getSModel(),myScope);
          result.setProperty(SModelTreeNode.PACK,myPackage);
          modelDescriptor.getSModel().addRoot(result);
          return result;
        }
      }
);
      pane.selectNode(node);
      pane.openEditor();
    }
  }
;
}
