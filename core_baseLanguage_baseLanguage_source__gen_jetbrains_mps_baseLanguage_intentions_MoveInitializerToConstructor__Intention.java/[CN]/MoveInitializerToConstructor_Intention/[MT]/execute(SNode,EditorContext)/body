{
  SNode classNode=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  SNode assignmentStmt=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
  SNode assignmentExpr=SLinkOperations.setNewChild(assignmentStmt,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
  SLinkOperations.setTarget(assignmentExpr,"rValue",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"initializer",true)),true);
  SNode fieldReference=SLinkOperations.setNewChild(assignmentExpr,"lValue","jetbrains.mps.baseLanguage.structure.FieldReference");
  SLinkOperations.setTarget(fieldReference,"variableDeclaration",node,false);
  SLinkOperations.setNewChild(fieldReference,"instance","jetbrains.mps.baseLanguage.structure.ThisExpression");
{
    ICursor<SNode> _zCursor1=CursorFactory.createCursor(SLinkOperations.getTargets(classNode,"constructor",true));
    try {
      while (_zCursor1.moveToNext()) {
        SNode constr=_zCursor1.getCurrent();
        SLinkOperations.insertChildFirst(SLinkOperations.getTarget(constr,"body",true),"statement",SNodeOperations.copyNode(assignmentStmt));
      }
    }
  finally {
      _zCursor1.release();
    }
  }
  SLinkOperations.deleteChild(node,"initializer");
}
