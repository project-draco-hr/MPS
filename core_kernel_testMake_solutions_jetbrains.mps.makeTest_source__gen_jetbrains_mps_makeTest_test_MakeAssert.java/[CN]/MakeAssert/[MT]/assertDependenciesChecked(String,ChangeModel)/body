{
  final MPSProject project=launchProject();
  final ChangeModelProcessor changeModelProcessor=new ChangeModelProcessor(project,modelName,changer);
  final IGenerationHandler filesGenHandler=getFilesGenHandler();
  changeModelProcessor.changeStep(filesGenHandler);
  final TesterGenerationHandler genHandler=new TesterGenerationHandler(true);
  changeModelProcessor.generateTestModel(genHandler);
  changeModelProcessor.generateModelToChange(genHandler);
  final Boolean[] returnValue=new Boolean[]{null};
  final SModel testModel=changeModelProcessor.getTestModel();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      try {
        SNode test=ListSequence.fromList(SModelOperations.getRoots(testModel,null)).first();
        String className=NameUtil.nodeFQName(test);
        genHandler.compile(ITaskProgressHelper.EMPTY);
        ClassLoader classLoader=genHandler.getCompiler().getClassLoader(MakeAssert.class.getClassLoader());
        Class testClass=classLoader.loadClass(className);
        Method method=testClass.getMethods()[0];
        returnValue[0]=(Boolean)method.invoke(null);
        System.out.println("Test " + className + "."+ method.getName()+ " return "+ returnValue[0]);
        changeModelProcessor.revertStep(filesGenHandler);
        changeModelProcessor.generateModelToChange(filesGenHandler);
      }
 catch (      Throwable t) {
        disposeProject(project);
        t.printStackTrace();
        Assert.assertTrue("Exception: " + t,false);
      }
    }
  }
);
  disposeProject(project);
  Assert.assertFalse(MESSAGE_DEPENDENCY_NOT_CHECKED,returnValue[0]);
}
