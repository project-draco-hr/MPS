{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseVariableDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode evaluator=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.debug.evaluation.structure.EvaluatorConcept",false,false);
      if (SPropertyOperations.getBoolean(evaluator,"isShowContext")) {
        return SLinkOperations.getTargets(evaluator,"variables",true);
      }
      return ListSequence.fromList(SLinkOperations.getTargets(evaluator,"variables",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SPropertyOperations.getBoolean(it,"isOutOfScope"));
        }
      }
);
    }
    public ISearchScope createNodeReferentSearchScope(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new ProviderGeneratedSearchScope(this,operationContext,_context){
        public boolean isInScope(        SNode checkedNode){
          return !(SPropertyOperations.getBoolean(checkedNode,"isOutOfScope"));
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:edfcb13b-e239-462c-8aae-e4b4a03e7c8b(jetbrains.mps.debug.evaluation.constraints)","6146091894852366855");
    }
  }
);
  return result;
}
