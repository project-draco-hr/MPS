{
  final Wrappers._int rootsCount=new Wrappers._int(0);
  final Wrappers._long membersOverallTime=new Wrappers._long(0);
  ProgressManager.getInstance().run(new Task.Modal(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getProject(),"Classifiers in roots stats",true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final ProgressMonitorAdapter progress=new ProgressMonitorAdapter(indicator);
      ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getModelAccess().runReadAction(new Runnable(){
        public void run(){
          Iterable<? extends SModule> modules=((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getModulesWithGenerators();
          progress.start("Modules...",Sequence.fromIterable(modules).count());
          for (          SModule module : Sequence.fromIterable(modules)) {
            ProgressMonitor subTask=progress.subTask(1);
            Iterable<SModel> models=module.getModels();
            subTask.start(module.getModuleName(),IterableUtil.asCollection(models).size());
            for (            SModel m : Sequence.fromIterable(models)) {
              subTask.step(m.getModelName());
              for (              SNode node : Sequence.fromIterable(m.getRootNodes())) {
                rootsCount.value++;
                membersOverallTime.value+=CalcClassifiersInRootsStatistic_Action.this.analyzeClassifiersInRoot(node,_params);
              }
              subTask.advance(1);
            }
            subTask.done();
          }
          progress.done();
        }
      }
);
    }
  }
);
  System.out.println("Members average time: " + membersOverallTime.value * 0.001 / rootsCount.value);
}
