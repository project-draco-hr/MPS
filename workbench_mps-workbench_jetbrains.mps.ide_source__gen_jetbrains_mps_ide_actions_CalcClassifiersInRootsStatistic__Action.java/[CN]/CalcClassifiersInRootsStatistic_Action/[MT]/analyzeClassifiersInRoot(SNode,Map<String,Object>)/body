{
  String nodeName=node + "@" + SModelOperations.getModelName(SNodeOperations.getModel(node));
  StringBuilder sb=new StringBuilder();
  final Wrappers._T<List<SNode>> types=new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
  long typesCalcTime=CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      types.value=CalcClassifiersInRootsStatistic_Action.this.calcAllClassifierTypesInRoot(node,_params);
    }
  }
,_params);
  if (typesCalcTime > 1000) {
    sb.append(String.format("%s: type calc time = %.3f%n",nodeName,typesCalcTime * 0.001));
  }
  final Set<SNode> classifiers=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(classifiers).addSequence(ListSequence.fromList(types.value).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (it != null);
    }
  }
));
  if (SetSequence.fromSet(classifiers).count() > 50) {
    sb.append(String.format("%s: classifier types = %d; classifiers = %d%n",nodeName,ListSequence.fromList(types.value).count(),SetSequence.fromSet(classifiers).count()));
  }
  final Wrappers._T<List<SNode>> members=new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
  long membersCalcTime=CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      members.value=CalcClassifiersInRootsStatistic_Action.this.calcAllMembersOfClassifiers(classifiers,_params);
    }
  }
,_params);
  if (ListSequence.fromList(members.value).count() > 4000) {
    sb.append(String.format("%s: members count = %d%n",nodeName,ListSequence.fromList(members.value).count()));
  }
  if (membersCalcTime > 500) {
    sb.append(String.format("%s: members calc time = %.3f%n",nodeName,membersCalcTime * 0.001));
  }
  if (sb.length() > 0) {
    System.out.println(sb);
  }
  return membersCalcTime;
}
