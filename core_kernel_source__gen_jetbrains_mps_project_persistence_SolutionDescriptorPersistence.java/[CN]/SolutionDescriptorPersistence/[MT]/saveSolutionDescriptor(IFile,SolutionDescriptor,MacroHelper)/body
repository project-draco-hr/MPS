{
  if (file.isReadOnly()) {
    LOG.error("Can't save " + file.getPath());
    return;
  }
  Element result=new Element("solution");
  if (descriptor.getNamespace() != null) {
    result.setAttribute("name",descriptor.getNamespace());
  }
  if (descriptor.getUUID() != null) {
    result.setAttribute("uuid",descriptor.getUUID());
  }
  if (descriptor.getKind() != SolutionKind.NONE) {
    result.setAttribute("pluginKind",descriptor.getKind().name());
  }
  result.setAttribute(COMPILE_IN_MPS,Boolean.toString(descriptor.getCompileInMPS()));
  if (descriptor.getOutputPath() != null) {
    result.setAttribute("generatorOutputPath",macroHelper.shrinkPath(descriptor.getOutputPath()));
  }
  Element models=new Element("models");
  ModuleDescriptorPersistence.saveModelRoots(models,descriptor.getModelRootDescriptors(),macroHelper);
  result.addContent(models);
  if (!(descriptor.getAdditionalJavaStubPaths().isEmpty())) {
    Element stubModelEntries=new Element("stubModelEntries");
    ModuleDescriptorPersistence.saveStubModelEntries(stubModelEntries,descriptor.getAdditionalJavaStubPaths(),macroHelper);
    result.addContent(stubModelEntries);
  }
  Element sourcePath=new Element(SOURCE_PATH);
  for (  String p : CollectionSequence.fromCollection(descriptor.getSourcePaths())) {
    XmlUtil.tagWithAttribute(sourcePath,SOURCE_PATH_SOURCE,"path",macroHelper.shrinkPath(p));
  }
  result.addContent(sourcePath);
  ModuleDescriptorPersistence.saveDependencies(result,descriptor);
  try {
    OutputStream os=file.openOutputStream();
    JDOMUtil.writeDocument(new Document(result),os);
  }
 catch (  Exception e) {
    LOG.error("",e);
  }
  ModuleDescriptorPersistence.setTimestamp(descriptor,file);
}
