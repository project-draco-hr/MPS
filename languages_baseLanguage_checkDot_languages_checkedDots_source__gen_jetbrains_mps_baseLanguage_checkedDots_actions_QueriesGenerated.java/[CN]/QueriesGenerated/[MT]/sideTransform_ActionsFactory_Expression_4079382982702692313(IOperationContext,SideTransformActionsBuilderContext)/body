{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode operationExpression=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression");
        SLinkOperations.setTarget(operationExpression,"operand",_context.getSourceNode(),true);
        SNodeFactoryOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.AbstractOperation");
        return operationExpression;
      }
      public String getMatchingText(      String pattern){
        return ":checked dot:";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
