{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IOperation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode dot=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression");
          SNode checkedDot=SNodeFactoryOperations.replaceWithNewChild(dot,"jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression");
          SLinkOperations.setTarget(checkedDot,"operand",SLinkOperations.getTarget(dot,"operand",true),true);
          SLinkOperations.setTarget(checkedDot,"operation",SLinkOperations.getTarget(dot,"operation",true),true);
          return null;
        }
        public String getDescriptionText(        String pattern){
          return "checked dot";
        }
        public String getMatchingText(        String pattern){
          return "?";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
