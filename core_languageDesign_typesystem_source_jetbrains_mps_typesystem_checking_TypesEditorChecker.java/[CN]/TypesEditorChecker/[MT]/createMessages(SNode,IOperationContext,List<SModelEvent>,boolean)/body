{
  Set<EditorMessage> messages=new LinkedHashSet<EditorMessage>();
  if (!wasCheckedOnce || hasNonPropertyDramaticalEvent(events)) {
    if (!TypeChecker.getInstance().isCheckedRoot(node.getContainingRoot())) {
      try {
        TypeChecker.getInstance().checkRoot(node.getContainingRoot());
      }
 catch (      Throwable t) {
        LOG.error(t);
        TypeChecker.getInstance().markAsChecked(node.getContainingRoot());
        return messages;
      }
    }
  }
  NodeTypesComponent typesComponent=getNodeTypesComponent(node);
  if (typesComponent != null) {
    if (!wasCheckedOnce || hasDramaticalEvent(events)) {
      try {
        typesComponent.applyNonTypesystemRulesToRoot();
      }
 catch (      Throwable t) {
        LOG.error(t);
      }
    }
    for (    Pair<SNode,IErrorReporter> errorNode : typesComponent.getNodesWithErrorStrings()) {
      MessageStatus status=errorNode.o2.getMessageStatus();
      String errorString=errorNode.o2.reportError();
      HighlighterMessage message=createHighlighterMessage(errorNode.o1,"Semantic " + status.getPresentation() + ": "+ errorString,errorNode.o2);
      IntentionProvider intentionProvider=errorNode.o2.getIntentionProvider();
      if (intentionProvider != null && intentionProvider.isExecutedImmediately()) {
        final QuickFix_Runtime intention=intentionProvider.getQuickFix();
        if (intention != null) {
          if (!myOnceExecutedQuickFixes.contains(intention)) {
            myOnceExecutedQuickFixes.add(intention);
            ThreadUtils.runInUIThreadNoWait(new Runnable(){
              public void run(){
                ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                  public void run(){
                    CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
                      public void run(){
                        intention.execute(node);
                      }
                    }
);
                  }
                }
);
              }
            }
);
          }
        }
      }
 else {
        if (intentionProvider != null) {
          intentionProvider.setIsError(status == MessageStatus.ERROR);
        }
        message.setIntentionProvider(intentionProvider);
      }
      messages.add(message);
    }
  }
  return messages;
}
