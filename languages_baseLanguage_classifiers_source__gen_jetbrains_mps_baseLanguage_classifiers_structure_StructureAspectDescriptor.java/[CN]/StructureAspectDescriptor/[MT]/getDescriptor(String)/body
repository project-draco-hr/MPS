{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.classifiers.structure.IClassifier"},new String[]{},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldAccessOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation"},new String[]{},new String[]{"field"},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration","jetbrains.mps.baseLanguage.structure.FieldDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.FieldDeclaration","jetbrains.mps.baseLanguage.classifiers.structure.IMember"},new String[]{},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation"},new String[]{},new String[]{"method"},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.classifiers.structure.IMember","jetbrains.mps.baseLanguage.structure.IVisible"},new String[]{},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType","jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType",false,new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType"},new String[]{},new String[]{"classifier"},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.IClassifier",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"},new String[]{},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart",null,true,new String[]{},new String[]{},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.IMember",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"member"},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.SuperClassifierExpresson","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IThisExpression"},new String[]{},new String[]{"classifier"},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
