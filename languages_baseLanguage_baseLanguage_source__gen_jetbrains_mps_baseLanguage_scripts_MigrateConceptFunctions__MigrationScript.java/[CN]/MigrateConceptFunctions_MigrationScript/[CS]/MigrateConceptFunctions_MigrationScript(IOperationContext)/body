{
  super("Migrate Concept Functions");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "return type";
    }
    public String getAdditionalInfo(){
      return "return type";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.structure.structure.AggregationConceptLink";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"conceptLinkDeclaration",false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)","1137021947720"),"jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_3uyx8s_a0a0a0a0a0a0a3a0a0a0a1a0(SPropertyOperations.getString(it,"name"),"conceptFunctionReturnType");
        }
      }
);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode concept=SNodeOperations.getAncestor(node,"jetbrains.mps.lang.structure.structure.ConceptDeclaration",false,false);
      SNode behavior=((SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,LanguageAspect.BEHAVIOR));
      if (behavior == null) {
        behavior=((SNode)ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.BEHAVIOR,concept,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
      }
      SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.Quotation",null);
      SLinkOperations.setTarget(q,"quotedNode",SLinkOperations.getTarget(node,"target",true),true);
      ListSequence.fromList(SLinkOperations.getTargets(behavior,"method",true)).addElement(_quotation_createNode_49yvvj_a0a5a0a(q));
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "throws items";
    }
    public String getAdditionalInfo(){
      return "throws items";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.lang.structure.structure.AggregationConceptLink",false,new String[]{})).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"conceptLinkDeclaration",false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)","1137021947720"),"jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0a3a0a0a0a2a0(SPropertyOperations.getString(it,"name"),"conceptFunctionThrowsType");
            }
          }
);
        }
      }
);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode behavior=((SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(node,LanguageAspect.BEHAVIOR));
      if (behavior == null) {
        behavior=((SNode)ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.BEHAVIOR,node,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
      }
      Iterable<SNode> links=Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(node,"conceptLink",true),"jetbrains.mps.lang.structure.structure.AggregationConceptLink")).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"conceptLinkDeclaration",false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)","1137021947720"),"jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0d0e0a0a0a0c0a(SPropertyOperations.getString(it,"name"),"conceptFunctionThrowsType");
            }
          }
);
        }
      }
);
      List<SNode> throwables=((List<SNode>)Sequence.fromIterable(links).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"target",true);
        }
      }
).toListSequence());
      ListSequence.fromList(SLinkOperations.getTargets(behavior,"method",true)).addElement(_quotation_createNode_49yvvj_a0a6a0b(ListSequence.fromList(throwables).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          SNode res=SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.Quotation",null);
          SLinkOperations.setTarget(res,"quotedNode",it,true);
          return res;
        }
      }
).toListSequence()));
      Sequence.fromIterable(links).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode l){
          SNodeOperations.deleteNode(l);
        }
      }
);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
