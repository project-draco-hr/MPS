{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractMoveExpression_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ContextMemberOperation_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ContextType_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CreateRefactoringContext_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExecuteRefactoringStatement_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IsRefactoringApplicable_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ModelTarget_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ModelsToGenerateByDefault_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ModuleTarget_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MoveNodeToNodeExpression_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MoveNodesToNodeExpression_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NodeTarget_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Refactoring_Editor()));
case 13:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RefactoringParameter_Editor()));
case 14:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RefactoringParameterReference_Editor()));
case 15:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new UpdateModelProcedure_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
