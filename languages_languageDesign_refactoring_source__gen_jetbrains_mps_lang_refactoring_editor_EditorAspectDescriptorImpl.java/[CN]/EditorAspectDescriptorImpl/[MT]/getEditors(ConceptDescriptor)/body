{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c,descriptor.getConceptFqName())) {
case 0:
    return Collections.<ConceptEditor>singletonList(new AbstractMoveExpression_Editor());
case 1:
  return Collections.<ConceptEditor>singletonList(new ChangeFeatureNameExpression_Editor());
case 2:
return Collections.<ConceptEditor>singletonList(new ContextMemberOperation_Editor());
case 3:
return Collections.<ConceptEditor>singletonList(new ContextType_Editor());
case 4:
return Collections.<ConceptEditor>singletonList(new CreateRefactoringContext_Editor());
case 5:
return Collections.<ConceptEditor>singletonList(new DeleteFeatureExpression_Editor());
case 6:
return Collections.<ConceptEditor>singletonList(new ExecuteRefactoringStatement_Editor());
case 7:
return Collections.<ConceptEditor>singletonList(new IsRefactoringApplicable_Editor());
case 8:
return Collections.<ConceptEditor>singletonList(new MergeNodeWithAnotherNodeExpression_Editor());
case 9:
return Collections.<ConceptEditor>singletonList(new ModelTarget_Editor());
case 10:
return Collections.<ConceptEditor>singletonList(new ModelsToGenerateByDefault_Editor());
case 11:
return Collections.<ConceptEditor>singletonList(new ModuleTarget_Editor());
case 12:
return Collections.<ConceptEditor>singletonList(new MoveNodeToNodeExpression_Editor());
case 13:
return Collections.<ConceptEditor>singletonList(new MoveNodesToNodeExpression_Editor());
case 14:
return Collections.<ConceptEditor>singletonList(new NodeTarget_Editor());
case 15:
return Collections.<ConceptEditor>singletonList(new Refactoring_Editor());
case 16:
return Collections.<ConceptEditor>singletonList(new RefactoringParameter_Editor());
case 17:
return Collections.<ConceptEditor>singletonList(new RefactoringParameterReference_Editor());
case 18:
return Collections.<ConceptEditor>singletonList(new UpdateModelByDefaultOperation_Editor());
case 19:
return Collections.<ConceptEditor>singletonList(new UpdateModelProcedure_Editor());
default :
}
return Collections.emptyList();
}
