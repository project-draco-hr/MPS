{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0zb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractContainerCreator__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractContainerType__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myAllConstant__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myCollectionType__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myConcatOperation__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myCustomContainerCreator__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myCustomMapCreator__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myDequeType__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myEnumeratorType__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myForEachStatement__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myForEachVariableReference__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myHashMapCreator__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myHashSetCreator__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myIApplicableToCollection__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myIApplicableToDeque__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myIApplicableToList__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myIApplicableToNothing__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myIApplicableToQueue__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myIApplicableToStack__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myIContainerOperation__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myIListOperation__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myIteratorType__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myLinkedHashMapCreator__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myLinkedHashSetCreator__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myLinkedListCreator__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myListCreatorWithInit__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myListElementAccessExpression__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myListType__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myMapElement__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myMapOperation__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myMapType__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myMappingType__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myMultiForEachStatement__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myPriorityQueueCreator__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myQueueType__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return mySequenceOperation__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return mySequenceType__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return mySetType__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return mySkipStatement__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return mySortDirection__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return mySortOperation__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return mySortedMapType__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return mySortedSetType__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myStackType__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myTreeMapCreator__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myTreeSetCreator__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myValueAccessOperation__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myWhereOperation__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
