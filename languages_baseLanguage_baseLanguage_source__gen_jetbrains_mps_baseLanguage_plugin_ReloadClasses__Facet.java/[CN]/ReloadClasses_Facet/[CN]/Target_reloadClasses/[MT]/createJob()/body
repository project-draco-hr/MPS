{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_i849au_a0a=null;
switch (0) {
case 0:
        boolean nonEmptyCompilation=pa.global().properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything() != null && pa.global().properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything();
      if (nonEmptyCompilation && Sequence.fromIterable(input).any(new IWhereFilter<IResource>(){
        public boolean accept(        IResource in){
          return ((TResource)in).module().reloadClassesAfterGeneration();
        }
      }
)) {
        monitor.currentProgress().beginWork("Reloading classes",1,monitor.currentProgress().workLeft());
        FileSystem.getInstance().runWriteTransaction(new Runnable(){
          public void run(){
            ModelAccess.instance().requireWrite(new Runnable(){
              public void run(){
                ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
              }
            }
);
          }
        }
);
        monitor.currentProgress().advanceWork("Reloading classes",1);
        monitor.currentProgress().finishWork("Reloading classes");
      }
    _output_i849au_a0a=Sequence.fromIterable(_output_i849au_a0a).concat(Sequence.fromIterable(input));
default :
  return new IResult.SUCCESS(_output_i849au_a0a);
}
}
}
;
}
