{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_2qnle6_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new ApplicableNodeReference_Constraints();
      }
    break;
case 1:
  if (true) {
    return new CaretPositionOperation_Constraints();
  }
break;
case 2:
if (true) {
return new ComparisonRule_Constraints();
}
break;
case 3:
if (true) {
return new ConceptReference_Constraints();
}
break;
case 4:
if (true) {
return new InequationReference_Constraints();
}
break;
case 5:
if (true) {
return new InequationReplacementRule_Constraints();
}
break;
case 6:
if (true) {
return new InferenceRule_Constraints();
}
break;
case 7:
if (true) {
return new LinkPatternVariableReference_Constraints();
}
break;
case 8:
if (true) {
return new MessageStatement_Constraints();
}
break;
case 9:
if (true) {
return new NonTypesystemRule_Constraints();
}
break;
case 10:
if (true) {
return new PatternVariableReference_Constraints();
}
break;
case 11:
if (true) {
return new PropertyMessageTarget_Constraints();
}
break;
case 12:
if (true) {
return new PropertyPatternVariableReference_Constraints();
}
break;
case 13:
if (true) {
return new QuickFixArgumentReference_Constraints();
}
break;
case 14:
if (true) {
return new QuickFixFieldReference_Constraints();
}
break;
case 15:
if (true) {
return new ReferenceMessageTarget_Constraints();
}
break;
case 16:
if (true) {
return new SubstituteTypeRule_Constraints();
}
break;
case 17:
if (true) {
return new SubtypingRule_Constraints();
}
break;
case 18:
if (true) {
return new TypeVarReference_Constraints();
}
break;
case 19:
if (true) {
return new TypesystemIntentionArgument_Constraints();
}
break;
case 20:
if (true) {
return new TypesystemQuickFix_Constraints();
}
break;
case 21:
if (true) {
return new WasSelectedNodeOperation_Constraints();
}
break;
case 22:
if (true) {
return new WhenConcreteVariableReference_Constraints();
}
break;
default :
}
}
return new BaseConstraintsDescriptor(concept);
}
