{
  Language language=Language.getLanguageFor(_context.getOriginalInputModel().getModelDescriptor());
  if (language == null) {
    return;
  }
  SModel structureModel=language.getStructureModelDescriptor().getSModel();
  Map<SNode,SNode> conceptsToTargets=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Map<SNode,SNode> additionalConceptsToTargets=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Map<SNode,SNode> partsToLinkDeclarations=MapSequence.fromMap(new HashMap<SNode,SNode>());
  SNode conceptContainer=ListSequence.fromList(SModelOperations.getRoots(_context.getModel(),"jetbrains.mpslite.structure.ConceptContainer")).first();
  List<SNode> allConcepts=ConceptContainer_Behavior.call_getAllConcepts_1239801518275(conceptContainer);
  for (  SNode conceptDeclaration : allConcepts) {
    jetbrains.mps.smodel.SNode concept=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ConceptDeclaration",null);
    SPropertyOperations.set(concept,"name",SPropertyOperations.getString(conceptDeclaration,"name"));
    SPropertyOperations.set(concept,"rootable","" + (BehaviorReflection.invokeVirtual(Boolean.TYPE,conceptDeclaration,"virtual_isRootable_1239714833738",new Object[]{})));
    if (BehaviorReflection.invokeVirtual(Boolean.TYPE,conceptDeclaration,"virtual_isAbstract_1239715026284",new Object[]{})) {
      SNode booleanConceptProperty=SLinkOperations.addNewChild(concept,"conceptProperty","jetbrains.mps.lang.structure.structure.BooleanConceptProperty");
      SNode conceptProperty_Abstract=SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"),"conceptPropertyDeclaration",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return "abstract".equals(SPropertyOperations.getString(it,"name"));
        }
      }
).first(),"jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration");
      SLinkOperations.setTarget(booleanConceptProperty,"conceptPropertyDeclaration",conceptProperty_Abstract,false);
    }
    MapSequence.fromMap(conceptsToTargets).put(conceptDeclaration,concept);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode concept=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),conceptDeclaration,"virtual_createAdditionalConcept_1239817368042",new Object[]{conceptsToTargets,partsToLinkDeclarations});
    if (concept != null) {
      MapSequence.fromMap(additionalConceptsToTargets).put(conceptDeclaration,concept);
    }
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SLinkOperations.setTarget(((SNode)MapSequence.fromMap(conceptsToTargets).get(conceptDeclaration)),"extends",((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(conceptDeclaration,"extends",true),"virtual_getConcept_1238594571574",new Object[]{conceptsToTargets})),false);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    BehaviorReflection.invokeVirtual(Void.class,conceptDeclaration,"virtual_fillConcept_1239891562930",new Object[]{((SNode)MapSequence.fromMap(conceptsToTargets).get(conceptDeclaration)),conceptsToTargets,partsToLinkDeclarations});
  }
  SModel editorModel=LanguageAspect.EDITOR.get(language).getSModel();
  SModel actionsModel=LanguageAspect.ACTIONS.get(language).getSModel();
  Map<SNode,SNode> conceptsToEditors=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode conceptDeclaration : allConcepts) {
    SNode editor=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),conceptDeclaration,"virtual_createEditor_1239890004879",new Object[]{conceptsToTargets,partsToLinkDeclarations});
    if (editor == null) {
      continue;
    }
    SNode mpsConcept=MapSequence.fromMap(conceptsToTargets).get(conceptDeclaration);
    SLinkOperations.setTarget(editor,"conceptDeclaration",mpsConcept,false);
    MapSequence.fromMap(conceptsToEditors).put(mpsConcept,editor);
  }
  for (  SNode additionalConcept : MapSequence.fromMap(additionalConceptsToTargets).keySet()) {
    SNode editor=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),additionalConcept,"virtual_createAdditionalEditor_1239891670850",new Object[]{conceptsToTargets,partsToLinkDeclarations});
    if (editor == null) {
      continue;
    }
    SNode mpsConcept=MapSequence.fromMap(additionalConceptsToTargets).get(additionalConcept);
    SLinkOperations.setTarget(editor,"conceptDeclaration",mpsConcept,false);
    MapSequence.fromMap(conceptsToEditors).put(mpsConcept,editor);
  }
  jetbrains.mps.smodel.SNode actions=SConceptOperations.createNewNode("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions",null);
  SPropertyOperations.set(actions,"name","_BinaryOperations_SideTransform");
  for (  SNode binaryOperationConcept : ConceptContainer_Behavior.call_getBinaryOperationConcepts_1239806149720(conceptContainer)) {
    GenerationUtils.fillBinarySideTransformActions(binaryOperationConcept,actions,conceptsToTargets,partsToLinkDeclarations);
  }
  Map<SNode,SNode> conceptsToConstraints=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode variableConcept : ConceptContainer_Behavior.call_getVariableConcepts_1239806150736(conceptContainer)) {
    jetbrains.mps.smodel.SNode conceptConstraint=SConceptOperations.createNewNode("jetbrains.mps.lang.constraints.structure.ConceptConstraints",null);
    SLinkOperations.setTarget(conceptConstraint,"concept",MapSequence.fromMap(additionalConceptsToTargets).get(variableConcept),false);
    SNode varScope=VariableConcept_Behavior.call_createVariableScope_1239942296621(variableConcept,conceptsToTargets,partsToLinkDeclarations);
    ListSequence.fromList(SLinkOperations.getTargets(conceptConstraint,"referent",true)).addElement(varScope);
    MapSequence.fromMap(conceptsToConstraints).put(variableConcept,conceptConstraint);
  }
  SModel constraintsModel=LanguageAspect.CONSTRAINTS.get(language).getSModel();
  for (  SNode root : ListSequence.fromListWithValues(new ArrayList<SNode>(),SModelOperations.getRoots(structureModel,null))) {
    structureModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode concept=MapSequence.fromMap(conceptsToTargets).get(conceptDeclaration);
    SModelOperations.addRootNode(structureModel,concept);
  }
  for (  SNode conceptDeclaration : MapSequence.fromMap(additionalConceptsToTargets).keySet()) {
    SNode concept=MapSequence.fromMap(additionalConceptsToTargets).get(conceptDeclaration);
    SModelOperations.addRootNode(structureModel,concept);
  }
  for (  SNode root : ListSequence.fromListWithValues(new ArrayList<SNode>(),SModelOperations.getRoots(editorModel,null))) {
    editorModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode editorDeclaration=MapSequence.fromMap(conceptsToEditors).get(MapSequence.fromMap(conceptsToTargets).get(conceptDeclaration));
    SModelOperations.addRootNode(editorModel,editorDeclaration);
  }
  for (  SNode conceptDeclaration : MapSequence.fromMap(additionalConceptsToTargets).keySet()) {
    SNode editorDeclaration=MapSequence.fromMap(conceptsToEditors).get(MapSequence.fromMap(additionalConceptsToTargets).get(conceptDeclaration));
    SModelOperations.addRootNode(editorModel,editorDeclaration);
  }
  for (  SNode root : ListSequence.fromListWithValues(new ArrayList<SNode>(),SModelOperations.getRoots(actionsModel,null))) {
    actionsModel.removeRoot(root);
  }
  SModelOperations.addRootNode(actionsModel,actions);
  for (  SNode root : ListSequence.fromListWithValues(new ArrayList<SNode>(),SModelOperations.getRoots(constraintsModel,null))) {
    constraintsModel.removeRoot(root);
  }
  for (  SNode conceptDeclaration : allConcepts) {
    SNode conceptConstraints=MapSequence.fromMap(conceptsToConstraints).get(conceptDeclaration);
    SModelOperations.addRootNode(constraintsModel,conceptConstraints);
  }
  SModelRepository.getInstance().markChanged(structureModel);
  SModelRepository.getInstance().markChanged(editorModel);
  SModelRepository.getInstance().markChanged(actionsModel);
  SModelRepository.getInstance().markChanged(constraintsModel);
  SNodeOperations.deleteNode(conceptContainer);
}
