{
  addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent p0){
      final FindUsagesFacade findUsegesManager=FindUsagesFacade.getInstance();
      Project project=MPSDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(NodeChooser.this));
      final Wrappers._T<List<SNodeReference>> toChooseFrom=new Wrappers._T<List<SNodeReference>>();
      ProgressManager.getInstance().run(new Task.Modal(project,"Searching for nodes",false){
        public void run(        @NotNull final ProgressIndicator indicator){
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              toChooseFrom.value=ListSequence.fromList(findToChooseFromOnInit(findUsegesManager,new ProgressMonitorAdapter(indicator))).select(new ISelector<SNode,SNodeReference>(){
                public SNodeReference select(                SNode it){
                  return ((SNodeReference)new SNodePointer(it));
                }
              }
).toListSequence();
            }
          }
);
        }
      }
);
      final NodeChooserDialog chooserDialog=new NodeChooserDialog(project,toChooseFrom.value);
      chooserDialog.show();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          SNode resultNode=chooserDialog.getResultNode();
          if (resultNode != null) {
            setNode(resultNode);
          }
        }
      }
);
    }
  }
);
  addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent event){
      final String text=getText();
      if ((text == null || text.length() == 0)) {
        setNode(null);
        return;
      }
      final int lastDot=text.lastIndexOf(".");
      if (lastDot <= 0) {
        setNode(null);
        return;
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Iterable<SModel> models=getModels(text.substring(0,lastDot));
          SNode foundNode=null;
          for (          SModel model : Sequence.fromIterable(models)) {
            Iterable<SNode> nodes=findNodes(model,text);
            if (!(Sequence.fromIterable(nodes).isEmpty())) {
              foundNode=Sequence.fromIterable(nodes).first();
              break;
            }
          }
          setNode(foundNode);
        }
      }
);
    }
  }
);
}
