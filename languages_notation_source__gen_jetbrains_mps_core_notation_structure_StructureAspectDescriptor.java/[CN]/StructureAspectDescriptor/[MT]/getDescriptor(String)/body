{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotation","jetbrains.mps.core.structure.structure.SStructurePart",false,new String[]{"jetbrains.mps.core.structure.structure.SStructurePart","jetbrains.mps.core.notation.structure.SNotationPartsContainer","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{"id"},new String[]{"element"});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationAlternativePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationLabel","jetbrains.mps.core.notation.structure.SNotationPart",false,new String[]{"jetbrains.mps.core.notation.structure.SNotationPart"},new String[]{"text"},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationMapping","jetbrains.mps.core.notation.structure.SNotationPart",false,new String[]{"jetbrains.mps.core.notation.structure.SNotationPart"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationNewLine","jetbrains.mps.core.notation.structure.SNotationPart",false,new String[]{"jetbrains.mps.core.notation.structure.SNotationPart"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationParentheses","jetbrains.mps.core.notation.structure.SNotationPart",false,new String[]{"jetbrains.mps.core.notation.structure.SNotationPart","jetbrains.mps.core.notation.structure.SNotationPartsContainer"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationPartsContainer",null,true,new String[]{},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SNotationQuantifier","jetbrains.mps.core.notation.structure.SNotationPart",false,new String[]{"jetbrains.mps.core.notation.structure.SNotationPart"},new String[]{"kind"},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SStructureEntityRef","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SStructureLinkRef","jetbrains.mps.core.notation.structure.SStructureEntityRef",false,new String[]{"jetbrains.mps.core.notation.structure.SStructureEntityRef"},new String[]{},new String[]{"link"});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.core.notation.structure.SStructurePropertyRef","jetbrains.mps.core.notation.structure.SStructureEntityRef",false,new String[]{"jetbrains.mps.core.notation.structure.SStructureEntityRef"},new String[]{},new String[]{"property"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
