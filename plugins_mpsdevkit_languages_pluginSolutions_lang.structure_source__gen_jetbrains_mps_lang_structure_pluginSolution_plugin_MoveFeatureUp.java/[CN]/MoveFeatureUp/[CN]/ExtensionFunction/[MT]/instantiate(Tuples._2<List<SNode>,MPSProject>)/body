{
  MoveFeatureUp result=new MoveFeatureUp();
  result.arg=arg;
  result.moveDefault=Sequence.fromIterable(getAllExtensions()).select(new ISelector<Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>>,jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>>(){
    public jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void> select(    Extension<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>> it){
      return it.get();
    }
  }
).where(new IWhereFilter<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>>(){
    public boolean accept(    jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void> it){
      return it instanceof jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction;
    }
  }
).select(new ISelector<jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>,jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction>(){
    public jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction select(    jetbrains.mps.smodel.structure.ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void> it){
      return ((jetbrains.mps.ide.platform.actions.core.MoveNodesDefault.ExtensionFunction)it);
    }
  }
).first().instantiate(arg);
  return result;
}
