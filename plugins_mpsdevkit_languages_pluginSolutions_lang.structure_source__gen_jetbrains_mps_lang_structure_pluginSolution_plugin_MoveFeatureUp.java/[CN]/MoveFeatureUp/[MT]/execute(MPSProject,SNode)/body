{
  final String featureKind=this.getKind();
  final SNode targetConcept=MoveUpDialog.getConcept(project.getProject(),feature,featureKind);
  if (targetConcept == null) {
    return;
  }
  final int result=Messages.showYesNoCancelDialog(project.getProject(),"Do you want to run the refactoring locally?","Execute Refactoring","Run locally","Write migration","Cancel",null);
  if (result == Messages.CANCEL) {
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final SNode currentConcept=SNodeOperations.cast(SNodeOperations.getParent(feature),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
      if (currentConcept == null) {
        return;
      }
      final Language currentLanguage=Language.getLanguageFor(SNodeOperations.getModel(currentConcept));
      if (!(SNodeUtil.isAccessible(feature,project.getRepository()))) {
        return;
      }
      if (!(SNodeUtil.isAccessible(targetConcept,project.getRepository()))) {
        return;
      }
      final Set<SReference> usages=FindUsagesManager.getInstance().findUsages(GlobalScope.getInstance(),Collections.singleton(feature),new EmptyProgressMonitor());
      final MoveFeatureUp.FeatureAccess featureAccess=MoveFeatureUp.this.getFeatureAccess(feature,targetConcept);
      final String featureName=featureAccess.getName();
      if (result == Messages.YES) {
        final Set<SNode> instances=FindUsagesManager.getInstance().findInstances(GlobalScope.getInstance(),Collections.singleton(SNodeOperations.asSConcept(currentConcept)),false,new EmptyProgressMonitor());
        RefactoringUtil.changeReferences(project,usages,feature,new _FunctionTypes._void_P0_E0(){
          public void invoke(){
            featureAccess.doMoveAndRefactorInstances(instances);
          }
        }
,"Move " + featureKind + " "+ featureName);
      }
 else {
        final SNode newFeature=SNodeOperations.copyNode(feature);
        RefactoringUtil.changeReferences(project,usages,newFeature,new _FunctionTypes._void_P0_E0(){
          public void invoke(){
            ListSequence.fromList(featureAccess.placeToMove()).addElement(newFeature);
            AttributeOperations.setAttribute(feature,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x11d0a70ae54L,"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")),createDeprecatedNodeAnnotation_g4dz8g_a0b0d0b0a31a0k0n("The " + featureKind + " was moved to superconcept \""+ BehaviorReflection.invokeVirtual(String.class,targetConcept,"virtual_getFqName_1213877404258",new Object[]{})+ "\""));
            MoveFeatureUp.this.markOldFeature(feature);
            MigrationScriptBuilder builder=MigrationScriptBuilder.createMigrationScript(currentLanguage).setName("Move_" + featureKind + "_"+ featureName);
            builder.appendExecuteStatements(SLinkOperations.getChildren(SLinkOperations.getTarget(moveStatements(builder,MoveFeatureUp.this.migrations(feature,newFeature),currentConcept),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc092b6b77L,0xfc092b6b78L,"statements")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,0xf8cc6bf961L,"statement"))).addDependency(SModelRepository.getInstance().getModelDescriptor("jetbrains.mps.lang.structure.plugin"));
          }
        }
,"Move " + featureKind + " "+ featureName);
      }
    }
  }
);
}
