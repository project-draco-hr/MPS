{
  final String featureKind=this.myKind;
  if (ListSequence.fromList(nodesToMove).count() > 1) {
    Messages.showErrorDialog(project.getProject(),"Moving multiple concept elements is not supported.\n" + "Please, select single " + featureKind + ".","Select single " + featureKind + ".");
    return;
  }
  SNode feature=SNodeOperations.cast(ListSequence.fromList(nodesToMove).first(),MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x11d2ea63881L,"jetbrains.mps.lang.structure.structure.IStructureDeprecatable"));
  final SNode targetConcept=MoveUpDialog.getConcept(project,feature,featureKind);
  if (targetConcept == null) {
    return;
  }
  boolean merge=false;
  SNode mergeTarget=myNeedToMerge.invoke(feature,targetConcept);
  if (mergeTarget != null) {
    int wantToMerge;
    wantToMerge=Messages.showYesNoCancelDialog(project.getProject(),"Target concept already has " + myKind + " with the same name. Do you want to merge?","Do you want to merge?",null);
    if (wantToMerge == Messages.YES) {
      merge=true;
    }
 else     if (wantToMerge == Messages.NO) {
      merge=false;
    }
 else {
      return;
    }
  }
  if (merge) {
    MoveNodesDefault.doMove(project,MapSequence.<SNodeReference,MoveNodesDefault.NodeProcessor>fromMapAndKeysArray(new HashMap<SNodeReference,MoveNodesDefault.NodeProcessor>(),feature.getReference()).withValues(new MoveNodesDefault.MergingNodeProcessor(mergeTarget.getReference(),project)),null);
  }
 else {
    MoveNodesDefault.doMove(project,MapSequence.<SNodeReference,MoveNodesDefault.NodeProcessor>fromMapAndKeysArray(new HashMap<SNodeReference,MoveNodesDefault.NodeProcessor>(),feature.getReference()).withValues(new MoveNodesDefault.CopyingNodeProcessor(new NodeLocation.NodeLocationChild(targetConcept,feature.getContainmentLink()),project)),null);
  }
}
