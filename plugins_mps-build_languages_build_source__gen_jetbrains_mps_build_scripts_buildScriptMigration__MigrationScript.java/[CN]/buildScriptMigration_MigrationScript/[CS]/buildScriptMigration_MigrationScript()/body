{
  super("buildScript migration");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "update \"copy file\"";
    }
    @Override public String getAdditionalInfo(){
      return "update \"copy file\"";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92339b9L,"jetbrains.mps.build.structure.BuildLayout_Copy");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,"jetbrains.mps.build.structure.BuildInputSingleFile"));
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode file=SModelOperations.createNewNode(SNodeOperations.getModel(node),null,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7ea63ceef6e8c0edL,"jetbrains.mps.build.structure.BuildLayout_File")));
      SNodeOperations.replaceWithAnother(node,file);
      SLinkOperations.setTarget(file,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7ea63ceef6e8c0edL,0x7ea63ceef6e8c11aL,"path"),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,"jetbrains.mps.build.structure.BuildInputSingleFile")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,0x48d5d03db922459aL,"path")));
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "update \"copy files\"";
    }
    @Override public String getAdditionalInfo(){
      return "update \"copy files\"";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92339b9L,"jetbrains.mps.build.structure.BuildLayout_Copy");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles"));
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode files=SModelOperations.createNewNode(SNodeOperations.getModel(node),null,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,"jetbrains.mps.build.structure.BuildLayout_Files")));
      SNodeOperations.replaceWithAnother(node,files);
      SLinkOperations.setTarget(files,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,0x262a04c08b56fb00L,"path"),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,0x48d5d03db92245a6L,"dir")));
      ListSequence.fromList(SLinkOperations.getChildren(files,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,0x262a04c08b56fb01L,"parameters"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,0x48d5d03db92245f7L,"selectors"))));
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "update \"custom copy file\"";
    }
    @Override public String getAdditionalInfo(){
      return "update \"custom copy file\"";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9ab2L,"jetbrains.mps.build.structure.BuildLayout_CustomCopy");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,"jetbrains.mps.build.structure.BuildInputSingleFile"));
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode file=SModelOperations.createNewNode(SNodeOperations.getModel(node),null,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7ea63ceef6e8c0edL,"jetbrains.mps.build.structure.BuildLayout_File")));
      SNodeOperations.replaceWithAnother(node,file);
      SLinkOperations.setTarget(file,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7ea63ceef6e8c0edL,0x7ea63ceef6e8c11aL,"path"),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,"jetbrains.mps.build.structure.BuildInputSingleFile")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db9224596L,0x48d5d03db922459aL,"path")));
      ListSequence.fromList(SLinkOperations.getChildren(file,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7ea63ceef6e8c0edL,0x7ea63ceef6e8c126L,"parameters"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9ab2L,0x7f76698a394e2d1eL,"handlers"))));
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "update \"custom copy files\"";
    }
    @Override public String getAdditionalInfo(){
      return "update \"custom copy files\"";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9ab2L,"jetbrains.mps.build.structure.BuildLayout_CustomCopy");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles"));
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode files=SModelOperations.createNewNode(SNodeOperations.getModel(node),null,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,"jetbrains.mps.build.structure.BuildLayout_Files")));
      SNodeOperations.replaceWithAnother(node,files);
      SLinkOperations.setTarget(files,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,0x262a04c08b56fb00L,"path"),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,0x48d5d03db92245a6L,"dir")));
      ListSequence.fromList(SLinkOperations.getChildren(files,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,0x262a04c08b56fb01L,"parameters"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9b91L,0x48d5d03db92339baL,"fileset")),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,"jetbrains.mps.build.structure.BuildInputFiles")),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x48d5d03db92245a4L,0x48d5d03db92245f7L,"selectors"))));
      ListSequence.fromList(SLinkOperations.getChildren(files,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x262a04c08b56faffL,0x262a04c08b56fb01L,"parameters"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x7f76698a394d9ab2L,0x7f76698a394e2d1eL,"handlers"))));
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
