{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.classLike.structure.ClassLikeMethod");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return Util.getMethodDescriptors(_context.getParentNode());
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return ((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),(item),"virtual_create_8260330507834998478",new Object[]{}));
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "method";
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.classLike.structure.ClassLikeProperty");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return Util.getPropertyDescriptors(_context.getParentNode());
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return ((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),(item),"virtual_create_8260330507834998478",new Object[]{}));
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "property";
            }
          }
);
        }
      }
    }
  }
{
    Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return Sequence.fromIterable(Util.getCustomDescriptors(_context.getParentNode())).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return ((SNode)SLinkOperations.getTarget(it,"cncpt",false));
          }
        }
);
      }
    }
.compute();
    if (queryResult != null) {
      for (      SNode item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
      }
    }
  }
  return result;
}
