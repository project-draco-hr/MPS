{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember").getDeclarationNode();
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        final SNode c=concept;
        return Sequence.fromIterable(SubstituteUtil.getCustomDescriptors2Substitute(_context.getParentNode())).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return (SNode)SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a044805d9cL,0x72b255a044805d9fL,"cncpt")) == c;
          }
        }
).isEmpty();
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(applicableConcept),SNodeOperations.asSConcept(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
