{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.classLike.structure.ClassLikeMethod");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          return Sequence.fromIterable(Util.getMethodDescriptors(_context.getParentNode())).select(new ISelector<SNode,String>(){
            public String select(            SNode it){
              return SPropertyOperations.getString(it,"name");
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return Util.createConceptFunctionForDescriptor(Sequence.fromIterable(Util.getMethodDescriptors(_context.getParentNode())).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return eq_x583g4_a0a0a0a0a0a0a0a0a0a0a0a1a2a0a1a0(SPropertyOperations.getString(it,"name"),(item));
                }
              }
));
            }
            public String getDescriptionText(            String pattern){
              return "concept function";
            }
          }
);
        }
      }
    }
  }
  return result;
}
