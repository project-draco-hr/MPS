{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x3fb2d847d55fc21eL,0x3fb2d847d55fdcd5L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x3fb2d847d55fc21eL,0x3fb2d847d55fdcd5L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode rule=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0x190d31fe6a12ebb4L,"jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"),false,false);
          if ((rule != null) && (SLinkOperations.getTarget(rule,MetaAdapterFactory.getContainmentLink(0xb401a68083254110L,0x8fd384331ff25befL,0x190d31fe6a12ebb4L,0x190d31fe6a13891aL,"pattern")) != null)) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(rule,MetaAdapterFactory.getContainmentLink(0xb401a68083254110L,0x8fd384331ff25befL,0x190d31fe6a12ebb4L,0x190d31fe6a13891aL,"pattern")),MetaAdapterFactory.getConcept(0xd4615e3bd6714ba9L,0xaf012b78369b0ba7L,0x108a9cb4793L,"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration"),false,new SAbstractConcept[]{})));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1txhs1_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
