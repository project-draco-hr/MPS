{
class CollectCallback implements Callback {
    public final Set<SNodeId> myLocalRefs=new HashSet<SNodeId>();
    public final Set<SNodeId> myExtRefs=new HashSet<SNodeId>();
    public final Set<SModelReference> myImports=new HashSet<SModelReference>();
    public final Set<SConceptId> myConcepts=new HashSet<SConceptId>();
    @Override public void instances(    @NotNull SConceptId concept){
      myConcepts.add(concept);
    }
    @Override public void imports(    @NotNull SModelReference modelRef){
      myImports.add(modelRef);
    }
    @Override public void externalNodeRef(    @NotNull SNodeId node){
      myExtRefs.add(node);
    }
    @Override public void localNodeRef(    @NotNull SNodeId node){
      myLocalRefs.add(node);
    }
  }
  ;
  assertTrue(ProjectTestsSupport.testOnProjectCopy(sourceZip,tempDir,TEST_PERSISTENCE_PROJECT,new ProjectRunnable(){
    @Override public boolean execute(    final Project project){
      final String[] text=new String[1];
      final CollectCallback c=new CollectCallback();
      project.getModelAccess().runReadAction(new Runnable(){
        @Override public void run(){
          DefaultSModelDescriptor m=getModel(project);
          m.setPersistenceVersion(ModelPersistence.LAST_VERSION);
          text[0]=PersistenceUtil.saveModel(m,PersistenceRegistry.getInstance().getDefaultModelFactory().getFileExtension());
        }
      }
);
      try {
        ModelPersistence.index(text[0].getBytes(FileUtil.DEFAULT_CHARSET),null,c);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        return false;
      }
      assertTrue(c.myConcepts.contains(SNodeUtil.conceptId_ConceptDeclaration));
      SModelReference javaMathModel=project.getScope().resolve(PersistenceFacade.getInstance().createModelReference("java.math@java_stub")).getReference();
      assertTrue(c.myImports.contains(javaMathModel));
      SNodeId n1=new jetbrains.mps.smodel.SNodeId.Foreign("~BigInteger");
      assertTrue(c.myExtRefs.contains(n1));
      assertTrue(c.myLocalRefs.contains(new Regular(7701589155269239834L)));
      assertTrue(c.myLocalRefs.contains(new Regular(7701589155269241651L)));
      assertTrue(c.myLocalRefs.contains(new Regular(7701589155269211040L)));
      return true;
    }
  }
));
}
