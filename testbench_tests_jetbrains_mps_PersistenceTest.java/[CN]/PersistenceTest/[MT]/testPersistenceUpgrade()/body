{
  try {
    filter.start();
    final int version[]={START_PERSISTENCE_TEST_VERSION,START_PERSISTENCE_TEST_VERSION};
    for (; version[0] < ModelPersistence.LAST_VERSION; ++version[0])     for (version[1]=version[0] + 1; version[1] <= ModelPersistence.LAST_VERSION; ++version[1]) {
      boolean result=TestMain.testOnProjectCopy(sourceZip,tempDir,TEST_PERSISTENCE_PROJECT,new ProjectRunnable(){
        public boolean execute(        final Project project){
          final DefaultSModelDescriptor testModel=ModelAccess.instance().runWriteAction(new Computable<DefaultSModelDescriptor>(){
            public DefaultSModelDescriptor compute(){
              DefaultSModelDescriptor modelDescr=(DefaultSModelDescriptor)TestMain.getModel(project,TEST_MODEL);
              modelDescr.reloadFromDisk();
              assertTrue(modelDescr.getPersistenceVersion() == START_PERSISTENCE_TEST_VERSION);
              return modelDescr;
            }
          }
);
          final List<DefaultSModelDescriptor> list=new ArrayList<DefaultSModelDescriptor>(1);
          list.add(testModel);
          if (version[0] > START_PERSISTENCE_TEST_VERSION) {
            ModelAccess.instance().runWriteInEDT(new Runnable(){
              public void run(){
                upgradePersistence(list,version[0]);
              }
            }
);
          }
          ModelAccess.instance().flushEventQueue();
          assertTrue(testModel.getModelFile() != null);
          assertTrue(testModel.getPersistenceVersion() == version[0]);
          final ModelLoadResult resultFrom=ModelAccess.instance().runReadAction(new Computable<ModelLoadResult>(){
            public ModelLoadResult compute(){
              try {
                ModelLoadResult result=ModelPersistence.readModel(SModelHeader.create(version[0]),testModel.getModelFile(),ModelLoadingState.FULLY_LOADED);
                assertTrue(result.getState() == ModelLoadingState.FULLY_LOADED);
                return result;
              }
 catch (              ModelReadException e) {
                return null;
              }
            }
          }
);
          assertNotNull(resultFrom);
          ModelAccess.instance().runWriteInEDT(new Runnable(){
            public void run(){
              upgradePersistence(list,version[1]);
            }
          }
);
          ModelAccess.instance().flushEventQueue();
          assertTrue(testModel.getModelFile() != null);
          assertTrue(testModel.getPersistenceVersion() == version[1]);
          final ModelLoadResult resultTo=ModelAccess.instance().runReadAction(new Computable<ModelLoadResult>(){
            public ModelLoadResult compute(){
              try {
                ModelLoadResult result=ModelPersistence.readModel(SModelHeader.create(version[1]),testModel.getModelFile(),ModelLoadingState.FULLY_LOADED);
                assertTrue(result.getState() == ModelLoadingState.FULLY_LOADED);
                ModelAssert.assertDeepModelEquals(resultFrom.getModel(),result.getModel());
                return result;
              }
 catch (              ModelReadException e) {
                return null;
              }
            }
          }
);
          assertNotNull(resultTo);
          ModelAccess.instance().runWriteAction(new Runnable(){
            public void run(){
              resultFrom.getModel().dispose();
              resultTo.getModel().dispose();
            }
          }
);
          ModelAccess.instance().flushEventQueue();
          return true;
        }
      }
);
      assertTrue(result);
    }
  }
  finally {
    filter.stop();
  }
}
