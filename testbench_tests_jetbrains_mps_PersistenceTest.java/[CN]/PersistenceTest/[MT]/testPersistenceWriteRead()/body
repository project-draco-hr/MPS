{
  boolean result=ProjectTestsSupport.testOnProjectCopy(sourceZip,tempDir,TEST_PERSISTENCE_PROJECT,new ProjectRunnable(){
    public boolean execute(    final Project project){
      final File tempFile=new File(tempDir,"testModel");
      final IFile file=FileSystem.getInstance().getFileByPath(tempFile.getAbsolutePath());
      final boolean success[]={true};
      ModelAccess.instance().runWriteInEDT(new Runnable(){
        public void run(){
          try {
            DefaultSModelDescriptor testModel=(DefaultSModelDescriptor)ProjectTestsSupport.getModel(project,TEST_MODEL);
            assertEquals(START_PERSISTENCE_TEST_VERSION,testModel.getPersistenceVersion());
            SModel model=testModel;
            for (int i=START_PERSISTENCE_TEST_VERSION; i <= ModelPersistence.LAST_VERSION; ++i) {
              try {
                filter.start();
                ModelPersistence.saveModel(((SModelBase)model).getSModel(),new FileDataSource(file),i);
              }
 catch (              IOException e) {
                e.printStackTrace();
                fail();
              }
 finally {
                filter.stop();
              }
              ModelLoadResult result=null;
              try {
                result=ModelPersistence.readModel(SModelHeader.create(i),new FileDataSource(file),ModelLoadingState.FULLY_LOADED);
              }
 catch (              ModelReadException e) {
                fail();
              }
              assertTrue(result.getState() == ModelLoadingState.FULLY_LOADED);
              ModelAssert.assertDeepModelEquals(((SModelBase)model).getSModel(),result.getModel());
              result.getModel().dispose();
            }
          }
 catch (          AssertionFailedError e) {
            e.printStackTrace();
            success[0]=false;
          }
        }
      }
);
      ModelAccess.instance().flushEventQueue();
      return success[0];
    }
  }
);
  assertTrue(result);
}
