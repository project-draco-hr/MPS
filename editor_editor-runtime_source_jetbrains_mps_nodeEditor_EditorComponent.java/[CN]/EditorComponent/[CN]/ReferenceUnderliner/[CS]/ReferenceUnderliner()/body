{
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == getKeyCode()) {
        setControlOver();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == getKeyCode()) {
        clearControlOver();
      }
    }
    private int getKeyCode(){
      return com.intellij.openapi.util.SystemInfo.isMac ? KeyEvent.VK_META : KeyEvent.VK_CONTROL;
    }
  }
);
  addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseDragged(    MouseEvent e){
    }
    @Override public void mouseMoved(    MouseEvent e){
      if (!myEditorContext.getNodeEditorComponent().isFocusOwner())       return;
      clearControlOver();
      if (!(com.intellij.openapi.util.SystemInfo.isMac ? e.isMetaDown() : e.isControlDown())) {
        myLastReferenceCell=null;
        return;
      }
      if (myRootCell == null) {
        myLastReferenceCell=null;
        return;
      }
      final jetbrains.mps.openapi.editor.cells.EditorCell editorCell=myRootCell.findLeaf(e.getX(),e.getY());
      if (editorCell == null) {
        myLastReferenceCell=null;
        return;
      }
      SNode snodeWRTReference=runRead(new Computable<SNode>(){
        @Override public SNode compute(){
          return isInvalid() ? null : APICellAdapter.getSNodeWRTReference(editorCell);
        }
      }
);
      if (editorCell.getSNode() == snodeWRTReference) {
        myLastReferenceCell=null;
        return;
      }
      myLastReferenceCell=(EditorCell)editorCell;
      setControlOver();
    }
  }
);
  addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      clearControlOver();
      myLastReferenceCell=null;
    }
  }
);
}
