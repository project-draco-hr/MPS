{
  if (substituteInfo == null) {
    return false;
  }
  LOG.debug("substitute info : " + substituteInfo);
  NodeSubstitutePatternEditor patternEditor=((EditorCell)editorCell).createSubstitutePatternEditor();
  if (resetPattern) {
    patternEditor.toggleReplaceMode();
  }
  String pattern=patternEditor.getPattern();
  boolean originalTextChanged=!patternEditor.getText().equals(substituteInfo.getOriginalText());
  boolean atTheEndOfLine=pattern.equals(patternEditor.getText());
  if (originalTextChanged || atTheEndOfLine) {
    List<SubstituteAction> matchingActions=getMatchingActions(editorCell,substituteInfo,isSmart,pattern);
    if (matchingActions.size() == 1 && pattern.length() > 0 && matchingActions.get(0).canSubstitute(pattern)) {
      SubstituteAction theAction=matchingActions.get(0);
      if (originalTextChanged || editorCell.isErrorState() || (atTheEndOfLine && !theAction.canSubstituteStrictly(pattern))) {
        theAction.substitute(this.getEditorContext(),pattern);
        return true;
      }
    }
  }
  myNodeSubstituteChooser.setNodeSubstituteInfo(substituteInfo);
  myNodeSubstituteChooser.setPatternEditor(patternEditor);
  myNodeSubstituteChooser.setLocationRelative(editorCell);
  myNodeSubstituteChooser.setIsSmart(isSmart);
  myNodeSubstituteChooser.setContextCell(editorCell);
  myNodeSubstituteChooser.setVisible(true);
  return true;
}
