{
  if (substituteInfo == null) {
    return false;
  }
  LOG.debug("substitute info : " + substituteInfo);
  NodeSubstitutePatternEditor patternEditor=((EditorCell)editorCell).createSubstitutePatternEditor();
  if (resetPattern) {
    patternEditor.toggleReplaceMode();
  }
  final String pattern=patternEditor.getPattern();
  boolean originalTextChanged=!patternEditor.getText().equals(substituteInfo.getOriginalText());
  boolean atTheEndOfLine=pattern.equals(patternEditor.getText());
  if (originalTextChanged || atTheEndOfLine) {
    substituteInfo.invalidateActions();
    List<SubstituteAction> matchingActions=getMatchingActions(editorCell,substituteInfo,isSmart,pattern);
    if (matchingActions.size() == 1 && pattern.length() > 0) {
      final SubstituteAction theAction=matchingActions.get(0);
      Boolean canSubstitute=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return theAction.canSubstitute(pattern);
        }
      }
);
      Boolean canSubstituteStrictly=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return theAction.canSubstituteStrictly(pattern);
        }
      }
);
      if (canSubstitute && (originalTextChanged || editorCell.isErrorState() || (atTheEndOfLine && !canSubstituteStrictly))) {
        theAction.substitute(this.getEditorContext(),pattern);
        return true;
      }
    }
  }
  myNodeSubstituteChooser.setNodeSubstituteInfo(substituteInfo);
  myNodeSubstituteChooser.setPatternEditor(patternEditor);
  myNodeSubstituteChooser.setLocationRelative(editorCell);
  myNodeSubstituteChooser.setIsSmart(isSmart);
  myNodeSubstituteChooser.setContextCell(editorCell);
  myNodeSubstituteChooser.setVisible(true);
  return true;
}
