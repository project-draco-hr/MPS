{
  return ModelAccess.instance().runReadAction(new Computable<List<INodeSubstituteAction>>(){
    @Override public List<INodeSubstituteAction> compute(){
      return TypeContextManager.getInstance().runTypeCheckingComputation(getTypecheckingContextOwner(),myNode,new Computation<List<INodeSubstituteAction>>(){
        @Override public List<INodeSubstituteAction> compute(        TypeCheckingContext context){
          return isSmart ? substituteInfo.getSmartMatchingActions(pattern,false,editorCell) : substituteInfo.getMatchingActions(pattern,false);
        }
      }
);
    }
  }
);
}
