{
  boolean rootTrace=!getEditorContext().isTracing() && TRACE_ENABLED;
  if (rootTrace) {
    getEditorContext().startTracing("========= Handling events =========");
  }
 else {
    getEditorContext().pushTracerTask("Hanlding events",true);
  }
  try {
    SNode lastSelectedNode=getSelectedNode();
    if (!EventUtil.isDramaticalChange(events)) {
      if (EventUtil.isPropertyChange(events)) {
        String propertyName=((SModelPropertyEvent)events.get(0)).getPropertyName();
        SNodeReference nodeProxy=new jetbrains.mps.smodel.SNodePointer(((SModelPropertyEvent)events.get(0)).getNode());
        Pair<SNodeReference,String> pair=new Pair<SNodeReference,String>(nodeProxy,propertyName);
        Set<EditorCell> editorCell_properties=myNodePropertiesAccessedCleanlyToDependentCellsMap.get(pair);
        Set<jetbrains.mps.openapi.editor.cells.EditorCell> editorCells=myNodePropertiesAccessedDirtilyToDependentCellsMap.get(pair);
        Set<jetbrains.mps.openapi.editor.cells.EditorCell> editorCellsDependentOnExistence=myNodePropertiesWhichExistenceWasCheckedToDependentCellsMap.get(pair);
        if (editorCellsDependentOnExistence != null) {
          if (EventUtil.isPropertyAddedOrRemoved(events.get(0))) {
            rebuildEditorContent(events);
          }
 else {
            for (            jetbrains.mps.openapi.editor.cells.EditorCell cell : editorCellsDependentOnExistence) {
              APICellAdapter.synchronizeViewWithModel(cell);
              fireCellSynchronized(cell);
            }
            if (editorCell_properties != null) {
              for (              EditorCell cell : editorCell_properties) {
                cell.synchronizeViewWithModel();
                fireCellSynchronized(cell);
              }
            }
          }
          relayout();
          return;
        }
        if (editorCells != null) {
          rebuildEditorContent(events);
          relayout();
          updateSelection(events,lastSelectedNode);
        }
 else         if (editorCell_properties != null) {
          for (          EditorCell cell : editorCell_properties) {
            cell.synchronizeViewWithModel();
            fireCellSynchronized(cell);
          }
          revertErrorCells(events);
        }
      }
 else {
        rebuildEditorContent(events);
      }
    }
 else {
      rebuildEditorContent(events);
      if (!hasFocus() && !myIntentionsSupport.isLightBulbVisible()) {
        return;
      }
      revertErrorCells(events);
      relayout();
      updateSelection(events,lastSelectedNode);
    }
    if (!myInsideOfCommand) {
      relayout();
    }
  }
  finally {
    if (rootTrace) {
      System.out.println(getEditorContext().stopTracing());
    }
 else {
      getEditorContext().popTracerTask();
    }
  }
}
