{
  if ("jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateFormat".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new DateFormat_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.LiteralFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.LiteralFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.FormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FormatExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new FormatExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConditionalFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConditionalFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ReferenceFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ReferenceFormatToken_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TokenConditionalPair".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TokenConditionalPair_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.NowExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NowExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TokenCondition".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TokenCondition"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TokenCondition_datetimeToFormat".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TokenCondition_datetimeToFormat"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeType"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FloorDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.FloorDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.CeilingDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.CeilingDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithPropertyOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithPropertyOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodType"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FixedLocaleFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new FixedLocaleFormatToken_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimePropertyFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new DateTimePropertyFormatToken_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.InlineFormatExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InlineFormatExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DurationTypeReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DurationTypeReference"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.AbsDateTimeMinusOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.AbsDateTimeMinusOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ScheduleLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ScheduleLiteral"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimePlusPeriodOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimePlusPeriodOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusPeriodOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusPeriodOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConvertToDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ConvertToDateTimeOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new DateTimeOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.NotNullOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NotNullOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.NullOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NullOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaCalendarOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaCalendarOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaDateOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaDateOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConvertToJodaDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJodaDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimePropetyReferenceOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimePropetyReferenceOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.NeverExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NeverExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.MinDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MinDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.MaxDateTimeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MaxDateTimeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneType"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DefaultTimeZoneConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DefaultTimeZoneConstant"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.UTCTimeZoneConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.UTCTimeZoneConstant"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneCreator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneCreator"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConstantTimeZoneRef".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConstantTimeZoneRef"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyOperation"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.WithPropertyCompareExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new WithPropertyCompareExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ParseExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ParseExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TimeZoneIDExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithTZType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithTZType"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.InTimezoneExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InTimezoneExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ParseDateTimeExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ParseDateTimeExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FormatDateTimeExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new FormatDateTimeExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.DurationType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DurationType"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.ConvertToDurationOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ConvertToDurationOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeConstant"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.FormatPeriodExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new FormatPeriodExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodFormat".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PeriodFormat_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodLiteralFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodLiteralFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatsTable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatsTable"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodPropertyFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PeriodPropertyFormatToken_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodReferenceFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PeriodReferenceFormatToken_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.PeriodSeparatorFormatToken".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodSeparatorFormatToken"));
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIdOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TimeZoneIdOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.TimeZoneNameOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TimeZoneNameOperation_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.dates.structure.AllTimeZonesConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.AllTimeZonesConstant"));
  }
  return null;
}
