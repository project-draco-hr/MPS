{
  if (myProject.getModelAccess().canWrite()) {
    throw new IllegalStateException();
  }
  myProject.getRepository().getModelAccess().executeCommand(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<Void>(){
    public Void invoke(){
      return UndoHelper.getInstance().runNonUndoableAction(new Computable<Void>(){
        public Void compute(){
          createConsoleModel();
          addBuiltInImports();
          loadHistory(history);
          createEditor();
          myFileEditor=new ConsoleFileEditor(myEditor);
          return null;
        }
      }
);
    }
  }
));
  DefaultActionGroup group=new DefaultActionGroup();
  registerActions(group);
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.TOOLBAR,group,false);
  toolbar.setTargetComponent(myEditor);
  setToolbar(toolbar.getComponent());
  setContent(myEditor.getExternalComponent());
  Disposer.register(this,myFileEditor);
  myHighlighter=myProject.getProject().getComponent(Highlighter.class);
  check_6q36mf_a41a03(myHighlighter,myEditor);
}
