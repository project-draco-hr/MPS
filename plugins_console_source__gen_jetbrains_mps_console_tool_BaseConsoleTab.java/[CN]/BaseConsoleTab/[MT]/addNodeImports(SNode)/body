{
  final SModelInternal modelInternal=(SModelInternal)myModel;
  final AbstractModule module=((AbstractModule)myModel.getModule());
  final Collection<SLanguage> importedLanguages=modelInternal.importedLanguageIds();
  ModelDependencyScanner scan=new ModelDependencyScanner().crossModelReferences(true).usedLanguages(true);
  scan.walk(SNodeOperations.getNodeDescendants(node,null,true,new SAbstractConcept[]{}));
  HashSet<SLanguage> languagesToImport=new HashSet<SLanguage>(scan.getUsedLanguages());
  languagesToImport.removeAll(importedLanguages);
  for (  SLanguage usedLanguage : SetSequence.fromSet(languagesToImport)) {
    modelInternal.addLanguage(usedLanguage);
  }
  HashSet<SModelReference> modelsToImport=new HashSet<SModelReference>(scan.getCrossModelReferences());
  modelsToImport.removeAll(SModelOperations.getImportedModelUIDs(myModel));
  for (  SModelReference ref : SetSequence.fromSet(modelsToImport)) {
    modelInternal.addModelImport(ref,false);
    SModuleReference moduleRef;
    if (ref.getModuleReference() != null) {
      moduleRef=ref.getModuleReference();
    }
 else {
      SModel usedModel=ref.resolve(myProject.getRepository());
      moduleRef=(usedModel == null ? null : usedModel.getModule().getModuleReference());
    }
    if (moduleRef != null) {
      module.addDependency(moduleRef,false);
    }
  }
}
