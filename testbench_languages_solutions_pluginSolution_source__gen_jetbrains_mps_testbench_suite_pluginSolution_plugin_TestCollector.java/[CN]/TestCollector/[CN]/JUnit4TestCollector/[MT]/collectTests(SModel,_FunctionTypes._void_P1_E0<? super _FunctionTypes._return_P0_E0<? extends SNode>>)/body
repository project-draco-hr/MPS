{
  final Wrappers._boolean any=new Wrappers._boolean(false);
  final Wrappers._T<List<SNode>> nodes=new Wrappers._T<List<SNode>>();
  ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<List<SNode>>(){
    public List<SNode> invoke(){
      final SNode testAnn=SLinkOperations.getTarget(new TestCollector.JUnit4TestCollector.QuotationClass_rpw6il_a0a0a0a0a0a0a0c0a1().createNode(),"annotation",false);
      final SNode ignoreAnn=SLinkOperations.getTarget(new TestCollector.JUnit4TestCollector.QuotationClass_rpw6il_a0a0b0a0a0a0a0c0a1().createNode(),"annotation",false);
      return nodes.value=ListSequence.fromList(SModelOperations.getRoots(model,"jetbrains.mps.baseLanguage.structure.ClassConcept")).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode cls){
          return !(SPropertyOperations.getBoolean(cls,"abstractClass")) && !(ListSequence.fromList(SLinkOperations.getTargets(cls,"annotation",true)).any(new IWhereFilter<SNode>(){
            public boolean accept(            SNode cann){
              return SLinkOperations.getTarget(cann,"annotation",false) == ignoreAnn;
            }
          }
)) && ListSequence.fromList(SLinkOperations.getTargets(cls,"method",true)).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode m){
              return SLinkOperations.getTargets(m,"annotation",true);
            }
          }
).any(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ani){
              return SLinkOperations.getTarget(ani,"annotation",false) == testAnn;
            }
          }
);
        }
      }
).toListSequence();
    }
  }
));
  ListSequence.fromList(nodes.value).visitAll(new IVisitor<SNode>(){
    public void visit(    final SNode tc){
      into.invoke(new _FunctionTypes._return_P0_E0<SNode>(){
        public SNode invoke(){
          SNode tref=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef",null);
          SLinkOperations.setTarget(tref,"klass",SNodeOperations.cast(tc,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
          return tref;
        }
      }
);
      any.value=true;
    }
  }
);
  return any.value;
}
