{
  if (myCached.containsKey(concept)) {
    return Arrays.asList(myCached.get(concept));
  }
  IntentionFactory[] intentions=EMPTY_ARRAY;
  SAbstractConcept cncpt=concept;
switch (index_hphjzv_d0f.index(cncpt)) {
case 0:
    if (true) {
      intentions=new IntentionFactory[1];
      intentions[0]=new BooleanQuery_Intention();
    }
  break;
case 1:
if (true) {
  intentions=new IntentionFactory[1];
  intentions[0]=new ChangeOrientationAlternation_Intention();
}
break;
case 2:
if (true) {
intentions=new IntentionFactory[3];
intentions[0]=new ChangeOrientationCollection_Intention();
intentions[1]=new UseIndentLayoutInCollection_Intention();
intentions[2]=new MigrateToIndentLayout_Intention();
}
break;
case 3:
if (true) {
intentions=new IntentionFactory[2];
intentions[0]=new SplitConstantCellIntoWords_Intention();
intentions[1]=new TrimConstantCell_Intention();
}
break;
case 4:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ChangeOrientationList_Intention();
}
break;
case 5:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ChangeNonEmptyProperty_Intention();
}
break;
case 6:
if (true) {
intentions=new IntentionFactory[2];
intentions[0]=new ChangeProperty_Intention();
intentions[1]=new ChangePropertyWithNonEmpty_Intention();
}
break;
case 7:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new UseIndentLayoutInRefNodeList_Intention();
}
break;
case 8:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ChangeTransactionalProperty_Intention();
}
break;
case 9:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ColorQuery_Intention();
}
break;
case 10:
if (true) {
intentions=new IntentionFactory[2];
intentions[0]=new GenerateMultiLineDefaultEditor_Intention();
intentions[1]=new GenerateSingleLineDefaultEditor_Intention();
}
break;
case 11:
if (true) {
intentions=new IntentionFactory[10];
intentions[0]=new SurroundWithVerticalCollection_Intention();
intentions[1]=new SurroundWithHorizontalCollection_Intention();
intentions[2]=new AddNewLine_Intention();
intentions[3]=new AddIndent_Intention();
intentions[4]=new AddOnNewLine_Intention();
intentions[5]=new RemoveIndent_Intention();
intentions[6]=new RemoveNewLine_Intention();
intentions[7]=new RemoveOnNewLine_Intention();
intentions[8]=new AddRemoveNewLineForChildren_Intention();
intentions[9]=new SurroundWithIndentCollection_Intention();
}
break;
case 12:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new FontStyleQuery_Intention();
}
break;
case 13:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ConvertSubstituteMenu_Intention();
}
break;
case 14:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new ConvertTransformationMenu_Intention();
}
break;
case 15:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new AddDominance_Intention();
}
break;
case 16:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new AddExtendsClause_Intention();
}
break;
case 17:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new SpecifyOutputConcept_Intention();
}
break;
case 18:
if (true) {
intentions=new IntentionFactory[1];
intentions[0]=new SpecifyLocation_Intention();
}
break;
default :
}
myCached.put(concept,intentions);
return Arrays.asList(intentions);
}
