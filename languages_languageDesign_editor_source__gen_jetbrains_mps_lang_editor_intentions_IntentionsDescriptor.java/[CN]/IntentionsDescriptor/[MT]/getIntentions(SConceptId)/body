{
  final int index=Arrays.binarySearch(myId2Index,conceptId.getIdValue());
switch (index) {
case 0:
    if (myIntentions0 == null) {
      myIntentions0=new IntentionFactory[2];
      myIntentions0[0]=new GenerateMultiLineDefaultEditor_Intention();
      myIntentions0[1]=new GenerateSingleLineDefaultEditor_Intention();
    }
  return Arrays.asList(myIntentions0);
case 1:
if (myIntentions1 == null) {
  myIntentions1=new IntentionFactory[11];
  myIntentions1[0]=new SurroundWithVerticalCollection_Intention();
  myIntentions1[1]=new SurroundWithHorizontalCollection_Intention();
  myIntentions1[2]=new AddNewLine_Intention();
  myIntentions1[3]=new AddIndent_Intention();
  myIntentions1[4]=new AddOnNewLine_Intention();
  myIntentions1[5]=new RemoveIndent_Intention();
  myIntentions1[6]=new RemoveNewLine_Intention();
  myIntentions1[7]=new RemoveOnNewLine_Intention();
  myIntentions1[8]=new AddRemoveNewLineForChildren_Intention();
  myIntentions1[9]=new SurroundWithIndentCollection_Intention();
  myIntentions1[10]=new ExtractComponent_Intention();
}
return Arrays.asList(myIntentions1);
case 2:
if (myIntentions2 == null) {
myIntentions2=new IntentionFactory[3];
myIntentions2[0]=new ChangeOrientationCollection_Intention();
myIntentions2[1]=new UseIndentLayoutInCollection_Intention();
myIntentions2[2]=new MigrateToIndentLayout_Intention();
}
return Arrays.asList(myIntentions2);
case 3:
if (myIntentions3 == null) {
myIntentions3=new IntentionFactory[2];
myIntentions3[0]=new SplitConstantCellIntoWords_Intention();
myIntentions3[1]=new TrimConstantCell_Intention();
}
return Arrays.asList(myIntentions3);
case 4:
if (myIntentions4 == null) {
myIntentions4=new IntentionFactory[2];
myIntentions4[0]=new ChangeProperty_Intention();
myIntentions4[1]=new ChangePropertyWithNonEmpty_Intention();
}
return Arrays.asList(myIntentions4);
case 5:
if (myIntentions5 == null) {
myIntentions5=new IntentionFactory[1];
myIntentions5[0]=new UseIndentLayoutInRefNodeList_Intention();
}
return Arrays.asList(myIntentions5);
case 6:
if (myIntentions6 == null) {
myIntentions6=new IntentionFactory[1];
myIntentions6[0]=new ChangeOrientationAlternation_Intention();
}
return Arrays.asList(myIntentions6);
case 7:
if (myIntentions7 == null) {
myIntentions7=new IntentionFactory[1];
myIntentions7[0]=new ChangeOrientationList_Intention();
}
return Arrays.asList(myIntentions7);
case 8:
if (myIntentions8 == null) {
myIntentions8=new IntentionFactory[1];
myIntentions8[0]=new ChangeNonEmptyProperty_Intention();
}
return Arrays.asList(myIntentions8);
case 9:
if (myIntentions9 == null) {
myIntentions9=new IntentionFactory[1];
myIntentions9[0]=new AddExtendsClause_Intention();
}
return Arrays.asList(myIntentions9);
case 10:
if (myIntentions10 == null) {
myIntentions10=new IntentionFactory[1];
myIntentions10[0]=new ColorQuery_Intention();
}
return Arrays.asList(myIntentions10);
case 11:
if (myIntentions11 == null) {
myIntentions11=new IntentionFactory[1];
myIntentions11[0]=new FontStyleQuery_Intention();
}
return Arrays.asList(myIntentions11);
case 12:
if (myIntentions12 == null) {
myIntentions12=new IntentionFactory[1];
myIntentions12[0]=new BooleanQuery_Intention();
}
return Arrays.asList(myIntentions12);
case 13:
if (myIntentions13 == null) {
myIntentions13=new IntentionFactory[1];
myIntentions13[0]=new ChangeTransactionalProperty_Intention();
}
return Arrays.asList(myIntentions13);
case 14:
if (myIntentions14 == null) {
myIntentions14=new IntentionFactory[1];
myIntentions14[0]=new AddDominance_Intention();
}
return Arrays.asList(myIntentions14);
default :
return null;
}
}
