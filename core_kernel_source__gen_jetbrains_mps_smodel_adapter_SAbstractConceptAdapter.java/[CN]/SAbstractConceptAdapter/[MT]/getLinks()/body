{
  ConceptDescriptor d=ConceptRegistry.getInstance().getConceptDescriptor(getQualifiedName());
  if (d instanceof IllegalConceptDescriptor) {
    illegalConceptDescriptorWarning();
    return Collections.emptyList();
  }
  final ConceptAndSuperConceptsScope scope=new ConceptAndSuperConceptsScope(getConceptDeclarationNode());
  Iterable<SAbstractLink> seq=SetSequence.fromSet(((Set<String>)d.getChildrenNames())).select(new ISelector<String,SAbstractLink>(){
    public SAbstractLink select(    String it){
      SNode linkNode=scope.getLinkDeclarationByRole(it);
      if (linkNode == null)       return null;
      return new SContainmentLinkAdapter(IdHelper.getNodeRoleId((jetbrains.mps.smodel.SNode)linkNode));
    }
  }
);
  return Sequence.fromIterable(seq).concat(SetSequence.fromSet(((Set<String>)d.getReferenceNames())).select(new ISelector<String,SReferenceLinkAdapter>(){
    public SReferenceLinkAdapter select(    String it){
      SNode linkNode=scope.getLinkDeclarationByRole(it);
      if (linkNode == null)       return null;
      return new SReferenceLinkAdapter(IdHelper.getRefRoleId((jetbrains.mps.smodel.SNode)linkNode));
    }
  }
));
}
