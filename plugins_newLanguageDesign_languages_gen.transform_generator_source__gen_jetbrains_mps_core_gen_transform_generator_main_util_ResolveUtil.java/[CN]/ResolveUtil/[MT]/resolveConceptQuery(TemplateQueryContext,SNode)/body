{
  if ((query == null)) {
    return null;
  }
  SNode local=genContext.getOutputNodeByInputNodeAndMappingLabel(query,"conceptMethod");
  if (local != null) {
    return local;
  }
  final String name=SPropertyOperations.getString(query,"name");
  if (name == null) {
    return null;
  }
  SNode concept=SNodeOperations.cast(SNodeOperations.getParent(query),"jetbrains.mps.core.structure.structure.SAbstractConcept");
  final SNode cd=resolveConcept(genContext,concept);
  if (cd == null) {
    return null;
  }
  SModelUtil.getDeclaringLanguage(cd);
  String languageFqName=NameUtil.namespaceFromConceptFQName(SAbstractConcept_Behavior.call_getQualifiedName_7891765471710491510(concept));
  String behaviorModelName=languageFqName + ".behavior";
  SModel behaviorModel=SModelRepository.getInstance().getModelDescriptor(behaviorModelName);
  SNode cb=ListSequence.fromList(SModelOperations.getRoots(behaviorModel,"jetbrains.mps.lang.behavior.structure.ConceptBehavior")).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,"concept",false) == cd;
    }
  }
).first();
  return ListSequence.fromList(SLinkOperations.getTargets(cb,"method",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return name.equals(SPropertyOperations.getString(it,"name"));
    }
  }
).first();
}
