{
  List<Node> nodes=newEdge.getAdjacentNodes();
  Graph originalGraph=embeddedGraph.getGraph();
  List<Face> newFaces=ListSequence.<Face>fromList(new ArrayList<Face>());
  ListSequence.<Face>fromList(newFaces).addElement(new Face(originalGraph));
  ListSequence.<Face>fromList(newFaces).addElement(new Face(originalGraph));
  Iterator<Dart> dartItr=ListSequence.<Dart>fromList(face.getDarts()).iterator();
  Dart cur;
  do {
    cur=dartItr.next();
  }
 while (!(ListSequence.<Node>fromList(nodes).contains(cur.getSource())));
  Dart first=cur;
  Node found=cur.getSource();
  Node toFind=ListSequence.<Node>fromList(nodes).getElement(0);
  if (toFind == found) {
    toFind=ListSequence.<Node>fromList(nodes).getElement(1);
  }
  do {
    ListSequence.<Face>fromList(newFaces).getElement(0).addLast(cur);
    cur=dartItr.next();
  }
 while (cur.getSource() != toFind);
  ListSequence.<Face>fromList(newFaces).getElement(0).addLast(new Dart(newEdge,cur.getSource()));
  ListSequence.<Face>fromList(newFaces).getElement(1).addLast(new Dart(newEdge,first.getSource()));
  ListSequence.<Face>fromList(newFaces).getElement(1).addLast(cur);
  while (dartItr.hasNext()) {
    cur=dartItr.next();
    ListSequence.<Face>fromList(newFaces).getElement(1).addLast(cur);
  }
  dartItr=ListSequence.<Dart>fromList(face.getDarts()).iterator();
  cur=dartItr.next();
  while (cur != first) {
    ListSequence.<Face>fromList(newFaces).getElement(1).addLast(cur);
    cur=dartItr.next();
  }
  embeddedGraph.removeFace(face);
  for (  Face newFace : ListSequence.<Face>fromList(newFaces)) {
    embeddedGraph.addFace(newFace);
  }
  if (embeddedGraph.isOuterFace(face)) {
    embeddedGraph.setOuterFace(ListSequence.<Face>fromList(newFaces).getElement(1));
  }
}
