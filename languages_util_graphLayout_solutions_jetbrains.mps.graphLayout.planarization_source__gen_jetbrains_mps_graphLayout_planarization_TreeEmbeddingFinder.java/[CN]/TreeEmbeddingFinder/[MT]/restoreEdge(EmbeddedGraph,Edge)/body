{
  MapSequence.<Edge,List<Edge>>fromMap(mySplittedEdges).put(removedEdge,ListSequence.<Edge>fromList(new ArrayList<Edge>()));
  Graph graph=embeddedGraph.getGraph();
  DualGraph dualGraph=new DualGraph(embeddedGraph);
  List<Node> newNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  for (  Node node : ListSequence.<Node>fromList(removedEdge.getAdjacentNodes())) {
    Node newNode=dualGraph.createDummyNode();
    for (    Edge nodeEdge : ListSequence.<Edge>fromList(node.getEdges(Edge.Direction.BOTH))) {
      for (      Face face : ListSequence.<Face>fromList(embeddedGraph.getAdjacentFaces(nodeEdge))) {
        dualGraph.connect(newNode,MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(face));
      }
    }
    ListSequence.<Node>fromList(newNodes).addElement(newNode);
  }
  List<Edge> path=ShortestPath.getPath(dualGraph,ListSequence.<Node>fromList(newNodes).getElement(0),ListSequence.<Node>fromList(newNodes).getElement(1),Edge.Direction.BOTH);
  List<Node> nodePath=ListSequence.<Node>fromList(new ArrayList<Node>());
  List<Face> facePath=ListSequence.<Face>fromList(new ArrayList<Face>());
  ListSequence.<Node>fromList(nodePath).addElement(ListSequence.<Node>fromList(removedEdge.getAdjacentNodes()).getElement(0));
  Node cur=ListSequence.<Node>fromList(newNodes).getElement(0);
  for (  Edge edge : ListSequence.<Edge>fromList(path)) {
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge);
    if (embeddedGraph.getAdjacentFaces(realEdge) != null) {
      ListSequence.<Node>fromList(nodePath).addElement(split(embeddedGraph,MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge)));
    }
    cur=edge.getOpposite(cur);
    Face curFace=MapSequence.<Node,Face>fromMap(dualGraph.getFacesMap()).get(cur);
    if (curFace != null) {
      ListSequence.<Face>fromList(facePath).addElement(curFace);
    }
  }
  ListSequence.<Node>fromList(nodePath).addElement(ListSequence.<Node>fromList(removedEdge.getAdjacentNodes()).getElement(1));
  for (int i=0; i < ListSequence.<Node>fromList(nodePath).count() - 1; i++) {
    Edge newEdge=graph.connect(ListSequence.<Node>fromList(nodePath).getElement(i),ListSequence.<Node>fromList(nodePath).getElement(i + 1));
    ListSequence.<Edge>fromList(MapSequence.<Edge,List<Edge>>fromMap(mySplittedEdges).get(removedEdge)).addElement(newEdge);
    splitFace(embeddedGraph,ListSequence.<Face>fromList(facePath).getElement(i),newEdge);
  }
}
