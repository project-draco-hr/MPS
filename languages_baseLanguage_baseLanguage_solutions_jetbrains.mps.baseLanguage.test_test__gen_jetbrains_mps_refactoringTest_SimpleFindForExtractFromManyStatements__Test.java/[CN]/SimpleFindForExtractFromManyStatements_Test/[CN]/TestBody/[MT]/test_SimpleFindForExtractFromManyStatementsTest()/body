{
  this.addNodeById("7793057097608406464");
  this.addNodeById("7793057097608416301");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608406470"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123155l,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")),SNodeOperations.cast(this.getNodeById("7793057097608406474"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123155l,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))));
  params.setName("printTwo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  SNode res=ref.doRefactor();
  for (  MethodMatch match : ListSequence.fromList(ref.getMatches())) {
    ExtractMethodRefactoring matchRef=ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));
    matchRef.replaceMatch(match,res);
  }
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608406465"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608416325"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
