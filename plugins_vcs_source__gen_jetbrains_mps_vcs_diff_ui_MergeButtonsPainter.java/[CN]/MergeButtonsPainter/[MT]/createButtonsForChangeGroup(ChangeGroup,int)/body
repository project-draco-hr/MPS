{
  int rightX=-GAP - ICON_SIZE - LEFT_MARGIN;
  int leftX=rightX - GAP - ICON_SIZE;
  int applyX=(isHighlightLeft() ? rightX : leftX);
  int excludeX=(isHighlightLeft() ? leftX : rightX);
  FoldingAreaButton apply=new MergeButtonsPainter.MyButton(changeGroup,applyX,y,"Apply",(isHighlightLeft() ? MIRRORED_APPLY_ICON : Icons.APPLY),new _FunctionTypes._void_P2_E0<MergeContext,Iterable<ModelChange>>(){
    public void invoke(    MergeContext context,    Iterable<ModelChange> changes){
      context.applyChanges(changes);
    }
  }
);
  FoldingAreaButton exclude=new MergeButtonsPainter.MyButton(changeGroup,excludeX,y,"Exclude",Icons.EXCLUDE,new _FunctionTypes._void_P2_E0<MergeContext,Iterable<ModelChange>>(){
    public void invoke(    MergeContext context,    Iterable<ModelChange> changes){
      context.excludeChanges(changes);
    }
  }
);
  return Arrays.asList(apply,exclude);
}
