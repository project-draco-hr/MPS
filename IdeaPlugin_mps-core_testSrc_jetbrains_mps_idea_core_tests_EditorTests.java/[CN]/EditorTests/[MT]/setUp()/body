{
  super.setUp();
  ApplicationManagerEx.getApplicationEx().doNotSave();
  final Exception[] thrown=new Exception[1];
  runModelRead(new Runnable(){
    @Override public void run(){
      DefaultModelRoot sModelRoot=(DefaultModelRoot)myFacet.getSolution().getModelRoots().iterator().next();
      String path=sModelRoot.getFiles(DefaultModelRoot.SOURCE_ROOTS).iterator().next();
      final IFile modelFile=FileSystem.getInstance().getFileByPath(path + "/test.mps");
      final List<SNode> roots=new ArrayList<SNode>();
      SModel descr=SModelFileTracker.getInstance().findModel(modelFile);
      if (descr == null) {
        thrown[0]=new IllegalStateException("model not found");
        return;
      }
      SModel model=descr;
      if (model != null) {
        for (        SNode root : model.getRootNodes()) {
          roots.add(root);
        }
      }
      for (      SNode r : roots) {
        if ("EditorTestCase".equals(r.getConcept().getName())) {
          try {
            Class<?> cls=Class.forName(jetbrains.mps.util.SNodeOperations.getModelLongName(model) + "." + r.getName()+ "_Test");
            Method mth=cls.getMethod("test_" + r.getName());
            TransformationTest btt=(TransformationTest)cls.newInstance();
            btt.setTestRunner(new SimpleTransformationTestRunner(r,mth));
            tests.add(btt);
          }
 catch (          Exception e) {
            thrown[0]=e;
          }
        }
      }
    }
  }
);
  if (thrown[0] != null)   throw thrown[0];
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      try {
        flushEDT();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
}
