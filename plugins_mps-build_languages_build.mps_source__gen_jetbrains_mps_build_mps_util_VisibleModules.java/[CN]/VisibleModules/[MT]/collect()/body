{
  Queue<SNode> queue=QueueSequence.fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(queue).addLastElement(project);
  Set<SNode> seen=SetSequence.fromSet(new HashSet<SNode>());
  while (QueueSequence.fromQueue(queue).isNotEmpty()) {
    SNode project=QueueSequence.fromQueue(queue).removeFirstElement();
    for (    SNode dep : SLinkOperations.getTargets(project,"dependencies",true)) {
      SNode projectDependency=SNodeOperations.as(dep,"jetbrains.mps.build.structure.BuildProjectDependency");
      if (projectDependency == null) {
        continue;
      }
      SNode depproj=SLinkOperations.getTarget(projectDependency,"script",false);
      if ((depproj == null)) {
        SReference ref=SNodeOperations.getReference(projectDependency,SLinkOperations.findLinkDeclaration("jetbrains.mps.build.structure.BuildProjectDependency","script"));
        report("cannot find dependency build script " + SLinkOperations.getResolveInfo(ref) + " in model "+ check_xuwpka_a0a1a4a1a3a5(ref.getTargetSModelReference()),projectDependency);
      }
      if (depproj != null && seen.add(depproj)) {
        QueueSequence.fromQueue(queue).addLastElement(depproj);
      }
    }
    ListSequence.fromList(allModules).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(project,"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule",false,new String[]{})));
  }
  for (  SNode module : allModules) {
    SNode currProj=SNodeOperations.getAncestor(module,"jetbrains.mps.build.structure.BuildProject",false,false);
    if (moduleById.containsKey(SPropertyOperations.getString(module,"uuid"))) {
      SNode other=moduleById.get(SPropertyOperations.getString(module,"uuid"));
      SNode otherProj=SNodeOperations.getAncestor(other,"jetbrains.mps.build.structure.BuildProject",false,false);
      report("found two modules with the same id: " + SPropertyOperations.getString(module,"uuid") + ". First module "+ SPropertyOperations.getString(module,"name")+ " from project "+ currProj+ ", second module "+ SPropertyOperations.getString(other,"name")+ " from project "+ otherProj,module);
    }
    moduleById.put(SPropertyOperations.getString(module,"uuid"),module);
    if (moduleByName.containsKey(SPropertyOperations.getString(module,"name"))) {
      SNode other=moduleByName.get(SPropertyOperations.getString(module,"name"));
      SNode otherProj=SNodeOperations.getAncestor(other,"jetbrains.mps.build.structure.BuildProject",false,false);
      report("found two modules with the same name: " + SPropertyOperations.getString(module,"name") + ". First module "+ SPropertyOperations.getString(module,"uuid")+ " from project "+ currProj+ ", second module "+ SPropertyOperations.getString(other,"uuid")+ " from project "+ otherProj,other);
    }
    moduleByName.put(SPropertyOperations.getString(module,"name"),module);
  }
}
