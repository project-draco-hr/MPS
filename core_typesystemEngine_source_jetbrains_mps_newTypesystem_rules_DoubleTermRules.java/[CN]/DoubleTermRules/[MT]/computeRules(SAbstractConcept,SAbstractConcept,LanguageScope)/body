{
  THashSet<K> result=new THashSet<K>();
  LinkedList<Pair<SAbstractConcept,SAbstractConcept>> queue=new LinkedList<Pair<SAbstractConcept,SAbstractConcept>>();
  queue.add(new Pair<SAbstractConcept,SAbstractConcept>(leftConcept,rightConcept));
  for (  SConcept leftSuperConcept : allSuperConcepts(leftConcept)) {
    queue.add(new Pair<SAbstractConcept,SAbstractConcept>(leftSuperConcept,rightConcept));
  }
  while (!queue.isEmpty()) {
    Pair<SAbstractConcept,SAbstractConcept> nextConceptPair=queue.remove();
    for (    K applicableRule : allForConceptPair(nextConceptPair.o1,nextConceptPair.o2,langScope)) {
      result.add(applicableRule);
    }
    for (    SConcept rightSuperConcept : allSuperConcepts(nextConceptPair.o2)) {
      queue.add(new Pair<SAbstractConcept,SAbstractConcept>(nextConceptPair.o1,rightSuperConcept));
    }
  }
  return Collections.unmodifiableSet(result);
}
