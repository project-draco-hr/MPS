{
  final LanguageScope langScope=LanguageScope.getCurrent();
  final String leftConceptFQName=leftTerm.getConcept().getId();
  final String rightConceptFQName=rightTerm.getConcept().getId();
  final Object compoundKey=new Triplet<Object,String,String>(langScope,leftConceptFQName,rightConceptFQName);
  Set<K> cachedRules=myCachedRules.get(compoundKey);
  if (cachedRules != null) {
    return cachedRules;
  }
  return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>(){
    @Override public Set<K> compute(){
      Set<K> computedRules=computeRules(leftConceptFQName,rightConceptFQName,langScope);
      myCachedRules.put(compoundKey,computedRules);
      return computedRules;
    }
  }
);
}
