{
  final LanguageScope langScope=LanguageScope.getCurrent();
  final SAbstractConcept leftConcept=leftTerm.getConcept();
  final SAbstractConcept rightConcept=rightTerm.getConcept();
  final Object compoundKey=new Triplet<Object,SAbstractConcept,SAbstractConcept>(langScope,leftConcept,rightConcept);
  Set<K> cachedRules=myCachedRules.get(compoundKey);
  if (cachedRules != null)   return cachedRules;
  return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<K>>(){
    @Override public Set<K> compute(){
      Set<K> computedRules=computeRules(leftConcept,rightConcept,langScope);
      myCachedRules.put(compoundKey,computedRules);
      return computedRules;
    }
  }
);
}
