{
  myIntentions.clear();
  myNodesByIntentions.clear();
  myIntentionsLanguages.clear();
  invalidateCaches();
  for (  Language l : MPSModuleRepository.getInstance().getAllLanguages()) {
    SModelDescriptor intentionsModelDescriptor=l.getIntentionsModelDescriptor();
    if (intentionsModelDescriptor != null) {
      SModel smodel=intentionsModelDescriptor.getSModel();
      for (      IntentionDeclaration intentionDeclaration : smodel.getRootsAdapters(IntentionDeclaration.class)) {
        String className=smodel.getUID().getLongName() + "." + IntentionDeclaration_Behavior.call_getGeneratedName_1193141280918(intentionDeclaration.getNode());
        String conceptName=IntentionDeclaration_Behavior.call_getConceptName_1193142194523(intentionDeclaration.getNode());
        try {
          Class<?> cls=l.getClass(className);
          if (cls != null) {
            Object intention=cls.newInstance();
            Set<Intention> intentions=myIntentions.get(conceptName);
            if (intentions == null) {
              intentions=new HashSet<Intention>();
            }
            intentions.add((Intention)intention);
            myIntentions.put(conceptName,intentions);
            myNodesByIntentions.put((Intention)intention,intentionDeclaration.getNode());
            myIntentionsLanguages.put(cls,l);
          }
 else {
            LOG.warning("Intention is registered but isn't compiled " + NameUtil.nodeFQName(intentionDeclaration),intentionDeclaration);
          }
        }
 catch (        Throwable throwable) {
          LOG.error(throwable,intentionDeclaration);
        }
      }
    }
  }
}
