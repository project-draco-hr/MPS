{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0v.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AfterTest;
      }
    break;
case 1:
  if (true) {
    return props_AssertEquals;
  }
break;
case 2:
if (true) {
return props_AssertFalse;
}
break;
case 3:
if (true) {
return props_AssertInNotNull;
}
break;
case 4:
if (true) {
return props_AssertIsNull;
}
break;
case 5:
if (true) {
return props_AssertSame;
}
break;
case 6:
if (true) {
return props_AssertThrows;
}
break;
case 7:
if (true) {
return props_AssertTrue;
}
break;
case 8:
if (true) {
return props_BTestCase;
}
break;
case 9:
if (true) {
return props_BeforeTest;
}
break;
case 10:
if (true) {
return props_BinaryAssert;
}
break;
case 11:
if (true) {
return props_Fail;
}
break;
case 12:
if (true) {
return props_ITestCase;
}
break;
case 13:
if (true) {
return props_ITestMethod;
}
break;
case 14:
if (true) {
return props_ITestable;
}
break;
case 15:
if (true) {
return props_Message;
}
break;
case 16:
if (true) {
return props_MessageHolder;
}
break;
case 17:
if (true) {
return props_PrepareMethod;
}
break;
case 18:
if (true) {
return props_TestMethod;
}
break;
case 19:
if (true) {
return props_TestMethodList;
}
break;
default :
}
}
throw new IllegalStateException();
}
