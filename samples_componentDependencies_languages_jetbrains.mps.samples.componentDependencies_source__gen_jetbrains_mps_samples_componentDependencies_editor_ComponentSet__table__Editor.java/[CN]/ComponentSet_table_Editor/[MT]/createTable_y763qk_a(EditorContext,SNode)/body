{
  TableModelFactory creator=new TableModelFactory(){
    public TableModel createTableModel(    final SNode node,    final EditorContext editorContext){
      return new TableModel(){
        public int getColumnCount(){
          return SLinkOperations.getTargets(node,"component",true).size() + 1;
        }
        public int getRowCount(){
          return SLinkOperations.getTargets(node,"component",true).size() + 1;
        }
        public void deleteRow(        int rowNumber){
        }
        public SNode getValueAt(        int row,        final int column){
          if (row == 0 && column == 0) {
            return null;
          }
          if (row == 0) {
            return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node,"component",true)).getElement(column - 1),"in",true)).first();
          }
          if (column == 0) {
            return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node,"component",true)).getElement(row - 1),"out",true)).first();
          }
          return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node,"component",true)).getElement(row - 1),"dep",true)).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SLinkOperations.getTarget(it,"to",false) == ListSequence.fromList(SLinkOperations.getTargets(node,"component",true)).getElement(column - 1);
            }
          }
);
        }
        public void createElement(        int row,        int column){
        }
        public SubstituteInfo getSubstituteInfo(        int row,        int column){
          return new SubstituteInfo(){
            public List<SubstituteAction> getMatchingActions(            String p0,            boolean p1){
              return new ArrayList<SubstituteAction>();
            }
            public List<SubstituteAction> getSmartMatchingActions(            String p0,            boolean p1,            EditorCell p2){
              return new ArrayList<SubstituteAction>();
            }
            public void invalidateActions(){
            }
            public void setOriginalText(            String p0){
            }
            public String getOriginalText(){
              return "";
            }
            public boolean hasExactlyNActions(            String p0,            boolean p1,            int p2){
              return false;
            }
          }
;
        }
        public void insertRow(        int rowNumber){
        }
        public void deleteColumn(        int columnNumber){
        }
        public void insertColumn(        int columnNumber){
        }
        public int getMaxColumnWidth(        int columnNumber){
          return (columnNumber == 0 ? 100 : 20);
        }
      }
;
    }
  }
;
  EditorCell_Collection editorCell=EditorCell_Table.createTable(editorContext,node,creator.createTableModel(node,editorContext),"Table_y763qk_a");
  editorCell.setCellId("Table_y763qk_a_0");
  editorCell.setBig(true);
  return editorCell;
}
