{
  List<SNode> treePathAspects=new ArrayList<SNode>();
  final Wrappers._T<SNode> expType=new Wrappers._T<SNode>(TypeChecker.getInstance().getTypeOf(expression));
  if ((expType.value != null)) {
    SNode sequencetype=TypeUtil_Collections.coerceTo_SequenceType(expType.value);
    if (sequencetype != null && !(SNodeOperations.isInstanceOf(expType.value,"jetbrains.mps.lang.smodel.structure.SNodeType"))) {
      expType.value=SLinkOperations.getTarget(sequencetype,"elementType",true);
    }
    SNode concept=(SNode)SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathAspect");
    Iterable<SNode> instances=SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(expression),scope,"jetbrains.mps.ypath.structure.TreePathAspect");
    ListSequence.fromList(treePathAspects).addSequence(Sequence.fromIterable(instances).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        SNode type=TreePath_Behavior.call_getNodeType_1213877481303(it);
        boolean result=false;
        if ((type != null)) {
          result=TypeChecker.getInstance().getSubtypingManager().isSubtype(expType.value,type,false,false);
        }
        return result;
      }
    }
));
  }
  return treePathAspects;
}
