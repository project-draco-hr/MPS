{
  if (!myFindUsagesSupported)   return new HashSet<AbstractConceptDeclaration>();
  boolean changed=false;
  if (myModelDescriptor instanceof EditableSModelDescriptor) {
    changed=SModelRepository.getInstance().isChanged(((EditableSModelDescriptor)myModelDescriptor));
  }
  boolean atLeastRootsLoaded=myModelDescriptor.getLoadingState().compareTo(ModelLoadingState.ROOTS_LOADED) >= 0;
  if (atLeastRootsLoaded && !changed && !descendantsKnownInModel.isEmpty())   return descendantsKnownInModel;
  if (myNeedSearchForStrings && !myModelRootManager.containsString(myModelDescriptor,node.getId()))   return descendantsKnownInModel;
  SModel model=myModelDescriptor.getSModel();
  Set<AbstractConceptDeclaration> result=new HashSet<AbstractConceptDeclaration>();
  if (model != null) {
    for (    SNode root : model.roots()) {
      addDescendants(root,node,result);
    }
  }
  descendantsKnownInModel.clear();
  descendantsKnownInModel.addAll(result);
  return descendantsKnownInModel;
}
