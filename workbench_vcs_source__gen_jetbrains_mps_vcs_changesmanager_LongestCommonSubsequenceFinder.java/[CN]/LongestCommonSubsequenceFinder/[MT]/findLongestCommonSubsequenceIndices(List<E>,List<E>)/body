{
  int[][] lengths=findLongestCommonSubsequenceLengths(a,b);
  List<Tuples._2<Integer,Integer>> indices=ListSequence.fromList(new ArrayList<Tuples._2<Integer,Integer>>());
  int i=ListSequence.fromList(a).count();
  int j=ListSequence.fromList(b).count();
  while (i > 0 && j > 0) {
    if (ObjectUtils.equals(ListSequence.fromList(a).getElement(i - 1),ListSequence.fromList(b).getElement(j - 1))) {
      ListSequence.fromList(indices).addElement(MultiTuple.<Integer,Integer>from(i - 1,j - 1));
      i--;
      j--;
    }
 else {
      if (lengths[i][j - 1] == lengths[i][j]) {
        j--;
      }
 else {
        i--;
      }
    }
  }
  return ListSequence.fromList(indices).reversedList();
}
