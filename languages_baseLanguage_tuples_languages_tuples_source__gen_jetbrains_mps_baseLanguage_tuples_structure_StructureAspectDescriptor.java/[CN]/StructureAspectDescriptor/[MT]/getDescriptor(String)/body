{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"component"});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleMemberAccessExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"tuple","index"});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"componentType"});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentAccessOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"component"},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.lang.core.structure.IResolveInfo"},new String[]{"final"},new String[]{},new String[]{"type"});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleComponentReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"componentDeclaration"},new String[]{"value"});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration","jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{"jetbrains.mps.baseLanguage.structure.Classifier"},new String[]{},new String[]{},new String[]{"component","extended","implements","method"});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"tupleDeclaration"},new String[]{"componentRef"});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType","jetbrains.mps.baseLanguage.structure.ClassifierType",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassifierType","jetbrains.mps.baseLanguage.structure.IGenericType","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"tupleDeclaration"},new String[]{"parameterType"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
