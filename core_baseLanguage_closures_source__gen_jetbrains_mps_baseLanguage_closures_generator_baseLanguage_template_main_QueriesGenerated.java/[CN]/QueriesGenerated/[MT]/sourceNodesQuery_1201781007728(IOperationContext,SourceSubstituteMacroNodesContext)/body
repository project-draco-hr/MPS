{
  List<SNode> mds=SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(),"classifier",false),"method",true);
  int idx=1;
  List<SNode> ptypes=SLinkOperations.getTargets(_context.getNode(),"parameter",true);
  List<SNode> res=new ArrayList<SNode>();
  for (  SNode pdecl : SLinkOperations.getTargets(ListSequence.fromList(mds).getElement(0),"parameter",true)) {
    SNode pd=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
    SNode ptype=SLinkOperations.getTarget(pdecl,"type",true);
    if (SNodeOperations.isInstanceOf(ptype,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      List<SNode> psib=SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(ptype,"typeVariableDeclaration",false),false);
      SLinkOperations.setTarget(pd,"type",ClassifierTypeUtil.copyTypeRecursively(ListSequence.fromList(ptypes).getElement(ListSequence.fromList(psib).count())),true);
    }
 else {
      SLinkOperations.setTarget(pd,"type",SNodeOperations.copyNode(ptype),true);
    }
    SPropertyOperations.set(pd,"name","param" + idx);
    idx=idx + 1;
    ListSequence.fromList(res).addElement(pd);
  }
  return res;
}
