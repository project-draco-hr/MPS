{
  for (  SNode de : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(de,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
      SNode imco=SNodeOperations.cast(SLinkOperations.getTarget(de,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
      List<SNode> args=SLinkOperations.getTargets(imco,"actualArgument",true);
      List<SNode> pdecls=SLinkOperations.getTargets(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"parameter",true);
      if ((SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(imco,"Actual arguments count != parameter declarations count");
      }
      int idx=0;
      for (      SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg=ListSequence.fromList(args).getElement(idx);
          SNode operandType=SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de,"operand",true)),"jetbrains.mps.baseLanguage.structure.ClassifierType");
          if ((operandType == null)) {
            _context.showWarningMessage(de,"Operand of InstanceMethodCallOperations is not classifier");
            operandType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de,"operand",true)),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
          }
          SNode pdeclType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl,"type",true),operandType);
          FunctionTypeUtil.prepAdaptations(FunctionTypeUtil.unmeet(pdeclType),arg,_context);
        }
        idx++;
      }
    }
  }
}
