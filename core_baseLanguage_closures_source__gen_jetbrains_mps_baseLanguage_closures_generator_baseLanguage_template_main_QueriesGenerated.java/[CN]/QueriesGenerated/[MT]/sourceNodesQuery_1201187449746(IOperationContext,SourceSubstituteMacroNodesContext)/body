{
  Integer[] labels=(Integer[])PrepStatementUtil.getPrepData(_context.getNode(),((TemplateQueryContext)_context).getGenerator());
  int BEGIN=labels[0];
  int END=labels[1];
  List<SNode> results=new ArrayList<SNode>();
  List<SNode> stmts=StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());
  do {
    int beginLabel=BEGIN;
    int endLabel=END;
    SNode lastStmt=null;
    SNode slist=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null);
    List<SNode> chunk=new ArrayList<SNode>();
    slist.putUserObject("CHUNK_OF_STATEMENTS",chunk);
    for (    SNode stmt : stmts) {
      ListSequence.fromList(chunk).addElement(stmt);
      lastStmt=stmt;
    }
    SNode cstmt=null;
    if ((lastStmt != null)) {
      cstmt=StatementListUtil.nextSibling(lastStmt);
    }
 else {
      List<SNode> allstmts=(List<SNode>)SLinkOperations.getTargets(_context.getNode(),"statement",true);
      cstmt=(ListSequence.fromList(allstmts).count() > 0 ? allstmts.get(0) : null);
    }
    stmts=null;
    if ((cstmt != null)) {
      labels=(Integer[])PrepStatementUtil.getPrepData(cstmt,((TemplateQueryContext)_context).getGenerator());
      endLabel=(labels != null ? labels[0] : -1);
      lastStmt=StatementListUtil.nextSibling(cstmt);
      while ((lastStmt != null)) {
        stmts=StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(),lastStmt);
        if (ListSequence.fromList(stmts).count() == 0) {
          cstmt=lastStmt;
          lastStmt=StatementListUtil.nextSibling(lastStmt);
        }
 else {
          labels=(Integer[])PrepStatementUtil.getPrepData(cstmt,((TemplateQueryContext)_context).getGenerator());
          BEGIN=(labels != null ? labels[labels.length - 1] : -1);
          break;
        }
      }
    }
    ListSequence.fromList(results).addElement(slist);
    PrepStatementUtil.putPrepData(slist,new Integer[]{beginLabel,endLabel},((TemplateQueryContext)_context).getGenerator());
  }
 while (stmts != null && ListSequence.fromList(stmts).count() > 0);
  return results;
}
