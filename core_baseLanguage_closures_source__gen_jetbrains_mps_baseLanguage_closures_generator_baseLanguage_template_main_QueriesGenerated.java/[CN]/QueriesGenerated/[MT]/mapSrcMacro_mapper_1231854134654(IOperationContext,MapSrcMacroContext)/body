{
  for (  SNode desc : SNodeOperations.getDescendants(_context.getNode(),null,false)) {
    if (SNodeOperations.isInstanceOf(desc,"jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SNodeOperations.cast(SNodeOperations.getParent(desc),"jetbrains.mps.baseLanguage.structure.DotExpression")),"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
      Flags.INVOKE_FUNCTION_OPERATION.flag(desc);
      break;
    }
  }
  SNode copy=CopyUtil.copyAndPreserveId(_context.getNode());
  for (  SNode desc : SNodeOperations.getDescendants(copy,null,false)) {
    if (Flags.INVOKE_FUNCTION_OPERATION.isFlagged(desc)) {
      SNode de=SNodeOperations.getParent(desc);
      SNode lvr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
      List<SNode> stmts=SLinkOperations.getTargets(SNodeOperations.cast(_context.getParentOutputNode(),"jetbrains.mps.baseLanguage.structure.StatementList"),"statement",true);
      SLinkOperations.setTarget(lvr,"variableDeclaration",SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(stmts).getElement(0),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),"localVariableDeclaration",true),false);
      SNodeOperations.replaceWithAnother(de,lvr);
      break;
    }
  }
  return copy;
}
