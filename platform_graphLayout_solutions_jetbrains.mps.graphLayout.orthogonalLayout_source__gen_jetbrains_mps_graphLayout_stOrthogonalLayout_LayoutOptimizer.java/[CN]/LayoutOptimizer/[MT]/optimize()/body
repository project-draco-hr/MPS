{
  boolean foundOptimize=true;
  while (foundOptimize) {
    foundOptimize=false;
    myLayout.refineEdgeLayout();
    for (    Edge edge : SetSequence.fromSet(MapSequence.fromMap(myLayout.getEdgeLayout()).keySet())) {
      List<Point> path=myLayout.getLayoutFor(edge);
      for (int i=0; i < ListSequence.fromList(path).count() - 3; i++) {
        List<Point> chain=ListSequence.fromList(new ArrayList<Point>());
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 1));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 2));
        ListSequence.fromList(chain).addElement(ListSequence.fromList(path).getElement(i + 3));
        List<Point> newChain=tryChain(chain,edge);
        if (newChain != null) {
          foundOptimize=true;
          List<Point> temp=ListSequence.fromList(new ArrayList<Point>());
          ListSequence.fromList(temp).addSequence(ListSequence.fromList(path).subListSequence(0,i));
          ListSequence.fromList(temp).addSequence(ListSequence.fromList(newChain));
          ListSequence.fromList(temp).addSequence(ListSequence.fromList(path).subListSequence(i + 4,ListSequence.fromList(path).count()));
          myLayout.setLayoutFor(edge,temp);
          break;
        }
      }
    }
  }
}
