{
  HashMap<String,INodeReferentSetEventHandler> result=new HashMap<String,INodeReferentSetEventHandler>();
  result.put("overriddenMethod",new INodeReferenceFullSetHandler(){
    public void processReferentSetEvent(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    IScope scope){
      if (newReferentNode != null && referenceNode != null) {
        for (        SNode p : SLinkOperations.getTargets(referenceNode,"parameter",true)) {
          SNodeOperations.deleteNode(p);
        }
        for (        SNode p : SLinkOperations.getTargets(newReferentNode,"parameter",true)) {
          ListSequence.fromList(SLinkOperations.getTargets(referenceNode,"parameter",true)).addElement(SNodeOperations.copyNode(p));
        }
        SPropertyOperations.set(referenceNode,"name",SPropertyOperations.getString(newReferentNode,"name"));
        SLinkOperations.setTarget(referenceNode,"returnType",SNodeOperations.copyNode(SLinkOperations.getTarget(newReferentNode,"returnType",true)),true);
      }
    }
    public boolean keepsOriginalReference(    SNode referenceNode,    SNode oldReferentNode,    final SNode newReferentNode,    IScope scope){
      return true;
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
  }
);
  return result;
}
