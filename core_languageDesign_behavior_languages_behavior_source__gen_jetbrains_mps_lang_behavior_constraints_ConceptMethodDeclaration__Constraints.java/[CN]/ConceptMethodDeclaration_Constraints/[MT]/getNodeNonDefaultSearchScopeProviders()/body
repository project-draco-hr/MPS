{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("overriddenMethod",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false),"concept",false);
      List<SNode> methods=AbstractConceptDeclaration_Behavior.call_getVirtualConceptMethods_1213877394290(concept,operationContext.getScope());
      return ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"overriddenMethod",false) == null;
        }
      }
);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:6786d6ee-e5cc-4a77-9efd-65a8dca8b187(jetbrains.mps.lang.behavior.constraints)","1225194475680");
    }
  }
);
  return result;
}
