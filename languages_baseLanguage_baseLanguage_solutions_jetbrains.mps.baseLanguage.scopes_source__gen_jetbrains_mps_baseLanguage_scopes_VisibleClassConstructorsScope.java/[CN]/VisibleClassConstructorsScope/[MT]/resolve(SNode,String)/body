{
  SNode classifier=SNodeOperations.cast(classifiers.resolve(contextNode,refText),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
  if (classifier == null || !(SNodeOperations.isInstanceOf(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
    return null;
  }
  List<SNode> constructors=Sequence.fromIterable(ClassConcept_Behavior.call_constructors_5292274854859503373(SNodeOperations.cast(classifier,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")))).toListSequence();
  if (ListSequence.fromList(constructors).count() == 1) {
    return ListSequence.fromList(constructors).first();
  }
  if (!(SNodeOperations.isInstanceOf(contextNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator")))) {
    return null;
  }
  List<SNode> actualArguments=SLinkOperations.getChildren(SNodeOperations.cast(contextNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"));
  List<SNode> typeParameters=SLinkOperations.getChildren(SNodeOperations.cast(contextNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,"jetbrains.mps.baseLanguage.structure.ClassCreator")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11a59b0fbceL,0x11a59c8ffe0L,"typeParameter"));
  constructors=(List<SNode>)MethodResolveUtil.selectByParmCount(constructors,actualArguments);
  if (constructors.size() == 1) {
    return ListSequence.fromList(constructors).first();
  }
  Iterator<SNode> typeParms=(Iterator<SNode>)typeParameters.iterator();
  Iterator<SNode> typeVars=(Iterator<SNode>)SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration")).iterator();
  Map<SNode,SNode> typeByTypeVar=new HashMap<SNode,SNode>();
  while (typeParms.hasNext() && typeVars.hasNext()) {
    typeByTypeVar.put(typeVars.next(),typeParms.next());
  }
  return MethodResolveUtil.chooseByParameterType(constructors,actualArguments,typeByTypeVar);
}
