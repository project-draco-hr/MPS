{
  return ListSequence.fromList(SLinkOperations.getTargets(thisNode,"dailyPlans",true)).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getTargets(it,"items",true);
    }
  }
).select(new ISelector<SNode,Integer>(){
    public Integer select(    SNode it){
      return SPropertyOperations.getInteger(it,"start");
    }
  }
).distinct().sort(new Comparator<Integer>(){
    public int compare(    Integer a,    Integer b){
      return a - b;
    }
  }
,true).toListSequence();
}
