{
  final SRepository repo=getRepository();
  Set<SDependency> dependencies=new HashSet<SDependency>();
  dependencies.addAll(IterableUtil.asCollection(super.getDeclaredDependencies()));
  for (  SModuleReference ref : getSourceLanguage().getRuntimeModulesReferences()) {
    SModule rt=repo == null ? ModuleRepositoryFacade.getInstance().getModule(ref) : ref.resolve(repo);
    if (rt != null) {
      dependencies.add(new SDependencyImpl(rt,SDependencyScope.RUNTIME,false));
    }
  }
  for (  SDependency srcLangDep : getSourceLanguage().getDeclaredDependencies()) {
    if (srcLangDep.getScope() == SDependencyScope.EXTENDS && Language.class.isInstance(srcLangDep.getTarget())) {
      dependencies.add(new SDependencyImpl(srcLangDep.getTarget(),SDependencyScope.DEFAULT,false));
    }
  }
  for (  SModuleReference refGenerator : getReferencedGeneratorUIDs()) {
    SModule gm=repo == null ? ModuleRepositoryFacade.getInstance().getModule(refGenerator) : refGenerator.resolve(repo);
    if (gm != null) {
      dependencies.add(new SDependencyImpl(gm,SDependencyScope.EXTENDS,false));
    }
  }
  return dependencies;
}
