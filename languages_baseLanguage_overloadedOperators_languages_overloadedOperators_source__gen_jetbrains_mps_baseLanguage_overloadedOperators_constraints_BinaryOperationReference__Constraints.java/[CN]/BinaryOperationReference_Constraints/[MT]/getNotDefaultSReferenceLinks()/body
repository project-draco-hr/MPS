{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-248448403205894696l,-5239469005774541060l),2838654975957155508l,2838654975957155509l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-248448403205894696l,-5239469005774541060l),2838654975957155508l,2838654975957155509l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SModule sourceModule=SNodeOperations.getModel(_context.getEnclosingNode()).getModule();
          Collection<Language> langs=new GlobalModuleDependenciesManager(sourceModule).getUsedLanguages();
          for (          Language language : langs) {
            SModel strucModelDescriptor=LanguageAspect.STRUCTURE.get(language);
            SModel strucModel=strucModelDescriptor;
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelOperations.roots(strucModel,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(((SNode)it)),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) && !(SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,4628067390765956802l,"abstract")));
              }
            }
));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_4xi24e_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
