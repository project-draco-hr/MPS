{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("binaryOperation",new BaseReferenceConstraintsDescriptor("binaryOperation",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          Language language : operationContext.getScope().getVisibleLanguages()) {
            SModelDescriptor strucModelDescriptor=LanguageAspect.STRUCTURE.get(language);
            SModel strucModel=strucModelDescriptor.getSModel();
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelOperations.getRoots(strucModel,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SConceptOperations.isSubConceptOf(((SNode)it),"jetbrains.mps.baseLanguage.structure.BinaryOperation") && !(SPropertyOperations.getBoolean(it,"abstract"));
              }
            }
));
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_4xi24e_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
