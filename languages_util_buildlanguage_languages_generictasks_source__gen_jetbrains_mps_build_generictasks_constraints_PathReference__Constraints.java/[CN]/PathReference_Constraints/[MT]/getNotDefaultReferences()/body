{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("call",new BaseReferenceConstraintsDescriptor("call",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> importedNodes=SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.build.generictasks.structure.TaskCall");
          List<SNode> newScope=ListSequence.fromList(new ArrayList<SNode>());
          for (          SNode node : ListSequence.fromList(importedNodes)) {
            SNode gcall=SNodeOperations.cast(node,"jetbrains.mps.build.generictasks.structure.TaskCall");
            if (TaskCall_Behavior.call_isReferencedAndOfDeclaration_353793545802644027(gcall,"path")) {
              ListSequence.fromList(newScope).addElement(gcall);
            }
          }
          return newScope;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_tb73e6_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
