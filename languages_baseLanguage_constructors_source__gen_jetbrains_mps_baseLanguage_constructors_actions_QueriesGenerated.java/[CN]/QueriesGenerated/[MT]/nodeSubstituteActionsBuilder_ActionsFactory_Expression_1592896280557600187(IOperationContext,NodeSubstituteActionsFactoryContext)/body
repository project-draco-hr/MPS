{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> containers=SModelOperations.rootsIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(new UUID(784887283248351340l,-6048570108212440173l),526936149311701953l,"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorContainer"));
          List<SNode> customConstructors=new ArrayList<SNode>();
          for (          SNode container : ListSequence.fromList(containers)) {
            ListSequence.fromList(customConstructors).addSequence(ListSequence.fromList(SLinkOperations.getChildren(container,MetaAdapterFactory.getContainmentLink(new UUID(784887283248351340l,-6048570108212440173l),526936149311701953l,3041831561922340678l,"constructors"))));
          }
          return customConstructors;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode usage=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage",null);
              SLinkOperations.setTarget(usage,MetaAdapterFactory.getReferenceLink(new UUID(784887283248351340l,-6048570108212440173l),6820702584719416486l,6820702584719569331l,"customConstructor"),(item));
              return usage;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(784887283248351340l,-6048570108212440173l),526936149311701954l,3330196687714050064l,"leftParenthesis")) + "..." + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(784887283248351340l,-6048570108212440173l),526936149311701954l,3330196687714050065l,"rightParenthesis"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,1156234966388l,"shortDescription"));
            }
          }
);
        }
      }
    }
  }
  return result;
}
