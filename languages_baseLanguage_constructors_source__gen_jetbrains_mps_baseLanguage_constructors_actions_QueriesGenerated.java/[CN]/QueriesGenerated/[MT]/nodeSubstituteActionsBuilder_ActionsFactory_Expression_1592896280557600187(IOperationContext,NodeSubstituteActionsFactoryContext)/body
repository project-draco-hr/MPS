{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> containers=SModelOperations.rootsIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0xae47ad35abd486cL,0xac0f298884f39393L,0x7500da2cf0943c1L,"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorContainer"));
          List<SNode> customConstructors=new ArrayList<SNode>();
          for (          SNode container : ListSequence.fromList(containers)) {
            ListSequence.fromList(customConstructors).addSequence(ListSequence.fromList(SLinkOperations.getChildren(container,MetaAdapterFactory.getContainmentLink(0xae47ad35abd486cL,0xac0f298884f39393L,0x7500da2cf0943c1L,0x2a36c1b072f3e746L,"constructors"))));
          }
          return customConstructors;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode usage=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xae47ad35abd486cL,0xac0f298884f39393L,0x5ea800dcf8ca1ca6L,"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage")),null);
              SLinkOperations.setTarget(usage,MetaAdapterFactory.getReferenceLink(0xae47ad35abd486cL,0xac0f298884f39393L,0x5ea800dcf8ca1ca6L,0x5ea800dcf8cc71b3L,"customConstructor"),(item));
              return usage;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xae47ad35abd486cL,0xac0f298884f39393L,0x7500da2cf0943c2L,0x2e373c3e4b60e010L,"leftParenthesis")) + "..." + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xae47ad35abd486cL,0xac0f298884f39393L,0x7500da2cf0943c2L,0x2e373c3e4b60e011L,"rightParenthesis"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x10d34f97574L,"shortDescription"));
            }
          }
);
        }
      }
    }
  }
  return result;
}
