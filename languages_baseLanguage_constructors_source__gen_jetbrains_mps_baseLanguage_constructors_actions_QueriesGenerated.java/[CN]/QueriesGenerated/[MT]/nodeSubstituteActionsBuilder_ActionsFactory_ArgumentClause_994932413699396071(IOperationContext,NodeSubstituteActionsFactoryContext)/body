{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.constructors.structure.CustomArgumentClause");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          SNode result=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(784887283248351340l,-6048570108212440173l),5379647004618176186l,"jetbrains.mps.baseLanguage.constructors.structure.CustomArgumentClause"),null);
          SNode parameter=SNodeFactoryOperations.addNewChild(result,MetaAdapterFactory.getContainmentLink(new UUID(784887283248351340l,-6048570108212440173l),5379647004618176186l,5379647004618201121l,"parameter"),MetaAdapterFactory.getConcept(new UUID(784887283248351340l,-6048570108212440173l),5379647004618201113l,"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorParameter"));
          SLinkOperations.setTarget(parameter,MetaAdapterFactory.getContainmentLink(new UUID(784887283248351340l,-6048570108212440173l),5379647004618201113l,5379647004618207272l,"type"),nodeToWrap);
          return result;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,editorContext);
          return (returnSmallPart(nc) ? nc : wrappedNode);
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
