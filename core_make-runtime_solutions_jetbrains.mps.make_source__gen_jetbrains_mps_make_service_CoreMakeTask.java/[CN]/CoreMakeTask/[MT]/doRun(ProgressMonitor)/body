{
  final Map<ITarget.Name,Long> timeStatistic=MapSequence.fromMap(new HashMap<ITarget.Name,Long>());
  aboutToStart();
  final int clsize=Sequence.fromIterable(this.myClInput).count();
  if (clsize == 0) {
    return;
  }
  monitor.start("",clsize);
  try {
    int idx=0;
    Iterator<IScript> scit=Sequence.fromIterable(myScripts).iterator();
    Iterator<? extends Iterable<IResource>> clit=Sequence.fromIterable(myClInput).iterator();
    while (scit.hasNext() && clit.hasNext()) {
      Iterable<IResource> cl=clit.next();
      IScript scr=scit.next();
      if (!(scr.isValid())) {
        String msg=myScrName + " not started: invalid make script";
        myMessageHandler.handle(new Message(MessageKind.ERROR,msg));
        displayInfo(msg);
        for (        IMessage err : scr.validationErrors()) {
          myMessageHandler.handle(err);
        }
        this.myResult=new IResult.FAILURE(null);
        break;
      }
      if (InternalFlag.isInternalMode()) {
        myMessageHandler.handle(new Message(MessageKind.INFORMATION,"Modules cluster " + (idx + 1) + "/"+ clsize+ " ["+ IterableUtils.join(Sequence.fromIterable(cl).select(new ISelector<IResource,String>(){
          public String select(          IResource r){
            return (r).describe();
          }
        }
),", ")+ "]"));
      }
      monitor.step((idx + 1) + "/" + clsize+ " "+ IterableUtils.join(Sequence.fromIterable(cl).select(new ISelector<IResource,String>(){
        public String select(        IResource r){
          return (r).describe();
        }
      }
),","));
      this.myResult=scr.execute(this.myController,cl,monitor.subTask(1));
      if (this.myResult instanceof CompositeResult) {
        IResource timeStatResource=Sequence.fromIterable(((CompositeResult)this.myResult).getResult(Script.TIME_STATISTIC_RESULT_NAME).output()).first();
        Map<ITarget.Name,Long> currentStatistic=((TimeStatisticResource)timeStatResource).getStatistic();
        for (        ITarget.Name targetName : SetSequence.fromSet(MapSequence.fromMap(currentStatistic).keySet())) {
          MapSequence.fromMap(timeStatistic).put(targetName,((MapSequence.fromMap(timeStatistic).containsKey(targetName) ? MapSequence.fromMap(timeStatistic).get(targetName) : 0)) + MapSequence.fromMap(currentStatistic).get(targetName));
        }
      }
      if (!(this.myResult.isSucessful()) || monitor.isCanceled()) {
        break;
      }
      idx++;
    }
  }
  finally {
    long overallTime=Sequence.fromIterable(MapSequence.fromMap(timeStatistic).values()).foldLeft(0L,new ILeftCombinator<Long,Long>(){
      public Long combine(      Long s,      Long it){
        return s + it;
      }
    }
);
    List<ITarget.Name> otherTargets=ListSequence.fromList(new ArrayList<ITarget.Name>());
    long currentTime=0;
    for (    IMapping<ITarget.Name,Long> stat : MapSequence.fromMap(timeStatistic).sort(new ISelector<IMapping<ITarget.Name,Long>,Long>(){
      public Long select(      IMapping<ITarget.Name,Long> it){
        return it.value();
      }
    }
,false)) {
      if (currentTime < overallTime * 0.95) {
        LOG.info("\"" + stat.key().name() + "\" target execution time: "+ stat.value()+ " ms");
        currentTime+=stat.value();
      }
 else {
        ListSequence.fromList(otherTargets).addElement(stat.key());
      }
    }
    LOG.info("Other targets execution time: " + (overallTime - currentTime) + " ms; "+ IterableUtils.join(ListSequence.fromList(otherTargets).select(new ISelector<ITarget.Name,String>(){
      public String select(      ITarget.Name it){
        return it.name() + ": " + MapSequence.fromMap(timeStatistic).get(it)+ " ms";
      }
    }
),", "));
    monitor.done();
  }
}
