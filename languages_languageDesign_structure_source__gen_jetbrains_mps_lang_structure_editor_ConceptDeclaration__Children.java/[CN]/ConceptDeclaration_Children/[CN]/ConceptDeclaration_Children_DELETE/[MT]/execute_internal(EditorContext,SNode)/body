{
  EditorCell nodeCell=editorContext.getEditorComponent().findNodeCell(node);
  if (nodeCell == null || ReadOnlyUtil.isCellOrSelectionReadOnlyInEditor(editorContext.getEditorComponent(),nodeCell)) {
    return;
  }
  SNode conceptDeclaration=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
  final Wrappers._T<SNode> lastChild=new Wrappers._T<SNode>(null);
  final Wrappers._T<SNode> childToSelect=new Wrappers._T<SNode>(null);
  ListSequence.fromList(SLinkOperations.getTargets(conceptDeclaration,"linkDeclaration",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
    }
  }
).foldLeft(false,new ILeftCombinator<SNode,Boolean>(){
    public Boolean combine(    Boolean nodeVisited,    SNode nextSibling){
      if (nextSibling == node) {
        return true;
      }
      if (!(nodeVisited)) {
        lastChild.value=nextSibling;
      }
 else       if (childToSelect.value == null) {
        childToSelect.value=nextSibling;
      }
      return nodeVisited;
    }
  }
);
  SNodeOperations.deleteNode(node);
  if (childToSelect.value != null) {
    SelectionUtil.selectLabelCellAnSetCaret(editorContext,childToSelect.value,SelectionManager.FIRST_CELL,0);
  }
 else   if (lastChild.value != null) {
    SelectionUtil.selectLabelCellAnSetCaret(editorContext,lastChild.value,SelectionManager.LAST_CELL,-1);
  }
 else {
    SelectionUtil.selectLabelCellAnSetCaret(editorContext,conceptDeclaration,"emptyChildrenPlaceHolder",0);
  }
}
