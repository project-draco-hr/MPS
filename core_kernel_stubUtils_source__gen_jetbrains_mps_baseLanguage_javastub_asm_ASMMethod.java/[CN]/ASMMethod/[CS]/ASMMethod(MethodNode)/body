{
  myMethod=method;
  myReturnType=TypeUtil.fromType(Type.getReturnType(method.desc));
  if (method.signature != null) {
    myTypeVariables=((List<ASMTypeVariable>)((List)Collections.unmodifiableList(TypeUtil.getFormalTypeParameters(method.signature))));
  }
 else {
    myTypeVariables=((List<ASMTypeVariable>)((List)Collections.emptyList()));
  }
  if (method.signature != null) {
    myGenericReturnType=TypeUtil.getReturnType(method.signature);
  }
 else {
    myGenericReturnType=myReturnType;
  }
  Type[] argumentTypes=Type.getArgumentTypes(method.desc);
  myParameterTypes=(argumentTypes.length > 0 ? new ArrayList<ASMType>(argumentTypes.length) : ((List<ASMType>)((List)Collections.emptyList())));
  for (  Type t : argumentTypes) {
    myParameterTypes.add(TypeUtil.fromType(t));
  }
  if (method.signature != null) {
    myGenericParameterTypes=TypeUtil.getParameterTypes(method.signature);
  }
 else {
    myGenericParameterTypes=myParameterTypes;
  }
  if (isVarArg() && !(myGenericParameterTypes.isEmpty())) {
    int lastIndex=myGenericParameterTypes.size() - 1;
    ASMType lastParamType=myGenericParameterTypes.get(lastIndex);
    if (lastParamType instanceof ASMArrayType) {
      myGenericParameterTypes.set(lastIndex,new ASMVarArgType(((ASMArrayType)lastParamType).getElementType()));
    }
    if (myGenericParameterTypes != myParameterTypes) {
      lastIndex=myParameterTypes.size() - 1;
      lastParamType=myParameterTypes.get(lastIndex);
      if (lastParamType instanceof ASMArrayType) {
        myParameterTypes.set(lastIndex,new ASMVarArgType(((ASMArrayType)lastParamType).getElementType()));
      }
    }
  }
  myParameterAnnotations=new ArrayList<List<ASMAnnotation>>(myParameterTypes.size());
  for (int i=0; i < myParameterTypes.size(); i++) {
    List<ASMAnnotation> annotations=null;
    if (myMethod.visibleParameterAnnotations != null && myMethod.visibleParameterAnnotations[i] != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myMethod.visibleParameterAnnotations[i]) {
        if (annotations == null) {
          annotations=new ArrayList<ASMAnnotation>();
        }
        annotations.add(new ASMAnnotation(an));
      }
    }
    if (myMethod.invisibleParameterAnnotations != null && myMethod.invisibleParameterAnnotations[i] != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myMethod.invisibleParameterAnnotations[i]) {
        if (annotations == null) {
          annotations=new ArrayList<ASMAnnotation>();
        }
        annotations.add(new ASMAnnotation(an));
      }
    }
    myParameterAnnotations.add((annotations == null ? ((List<ASMAnnotation>)((List)Collections.emptyList())) : annotations));
  }
  List<ASMType> exceptions=new ArrayList<ASMType>(0);
  if (method.signature != null) {
    exceptions=TypeUtil.getExceptionTypes(method.signature);
  }
  if (!(exceptions.isEmpty())) {
    myExceptions=exceptions;
  }
 else {
    myExceptions=new ArrayList<ASMType>(myMethod.exceptions.size());
    for (    String s : (List<String>)myMethod.exceptions) {
      myExceptions.add(new ASMClassType(s.replace('/','.')));
    }
  }
  if (myMethod.visibleAnnotations != null || myMethod.invisibleAnnotations != null) {
    int size=((myMethod.visibleAnnotations != null ? myMethod.visibleAnnotations.size() : 0)) + ((myMethod.invisibleAnnotations != null ? myMethod.invisibleAnnotations.size() : 0));
    myAnnotations=new ArrayList<ASMAnnotation>(size);
    if (myMethod.visibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myMethod.visibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        myAnnotations.add(aa);
      }
    }
    if (myMethod.invisibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)myMethod.invisibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        myAnnotations.add(aa);
      }
    }
  }
  if (!(myParameterTypes.isEmpty())) {
    myParameterNames=new ArrayList<String>(myParameterTypes.size());
    for (int i=0; i < myParameterTypes.size(); i++) {
      myParameterNames.add("p" + i);
    }
    if (method.localVariables != null && myParameterTypes.size() < method.localVariables.size()) {
      int offset=(!(isStatic()) ? 1 : 0);
      for (      Object lv : method.localVariables) {
        LocalVariableNode node=((LocalVariableNode)lv);
        int index=node.index - offset;
        if (index >= 0 && index < myParameterTypes.size()) {
          myParameterNames.set(index,node.name);
        }
      }
    }
  }
  if (method.annotationDefault != null) {
    myAnnotationDefault=ASMAnnotation.processValue(method.annotationDefault);
  }
}
