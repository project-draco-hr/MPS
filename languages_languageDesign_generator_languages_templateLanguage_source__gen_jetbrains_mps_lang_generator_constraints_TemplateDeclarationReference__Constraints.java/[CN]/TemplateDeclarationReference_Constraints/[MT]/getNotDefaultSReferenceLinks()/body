{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xb401a68083254110L,0x8fd384331ff25befL,0x17e941d108ce3120L,0x17e941d108ce3173L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xb401a68083254110L,0x8fd384331ff25befL,0x17e941d108ce3120L,0x17e941d108ce3173L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ujnbk1_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ModelPlusImportedScope(_context.getModel(),true,MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0xfe43cb41d0L,"jetbrains.mps.lang.generator.structure.TemplateDeclaration"));
        }
      }
;
    }
  }
);
  return references;
}
