{
  this.addNodeById("2004738378939038442");
  this.addNodeById("2004738378939038435");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2004738378939038453"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),SNodeOperations.cast(this.getNodeById("2004738378939038460"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),SNodeOperations.cast(this.getNodeById("2004738378939038504"),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),SNodeOperations.cast(this.getNodeById("2004738378939038511"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2004738378939038443"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2004738378939038436"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
