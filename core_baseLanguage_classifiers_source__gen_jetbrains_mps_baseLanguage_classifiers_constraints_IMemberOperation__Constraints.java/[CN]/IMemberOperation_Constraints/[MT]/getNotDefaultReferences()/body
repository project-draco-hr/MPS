{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("member",new BaseReferenceConstraintsDescriptor("member",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          List<SNode> applicableMembers=new ArrayList<SNode>();
{
            IMatchingPattern pattern_dyvyal_c0a0=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType");
            SNode coercedNode_dyvyal_c0a0=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(operand),pattern_dyvyal_c0a0);
            if (coercedNode_dyvyal_c0a0 != null) {
              for (              SNode member : BaseClassifierType_Behavior.call_getMembers_1213877402148(coercedNode_dyvyal_c0a0,_context.getEnclosingNode())) {
                if (SNodeOperations.isInstanceOf(member,NameUtil.nodeFQName(_context.getLinkTarget())) && IMember_Behavior.call_canBeReferent_8179323502814657526(member,_context.getLinkTarget())) {
                  ListSequence.<SNode>fromList(applicableMembers).addElement(member);
                }
              }
            }
 else {
            }
          }
          return applicableMembers;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_dyvyal_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
