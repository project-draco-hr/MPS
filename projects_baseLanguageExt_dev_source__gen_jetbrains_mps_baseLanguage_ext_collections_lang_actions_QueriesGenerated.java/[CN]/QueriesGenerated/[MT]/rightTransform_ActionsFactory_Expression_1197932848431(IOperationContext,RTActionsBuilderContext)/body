{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_parameterObject.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode mapElement=SNodeOperations.replaceWithNewChild(_parameterObject.getSourceNode(),"jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapElement");
        SLinkOperations.setTarget(mapElement,"map",_parameterObject.getSourceNode(),true);
        return mapElement;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
    }
);
  }
  return result;
}
