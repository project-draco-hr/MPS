{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        boolean yieldAllowed=false;
        boolean stopAllowed=false;
        boolean skipAllowed=false;
        SNode parentClosure=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.Closure",false,false);
        if (SNodeOperations.isInstanceOf(parentClosure,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.ValueSupplierBlock")) {
          yieldAllowed=true;
          stopAllowed=true;
        }
        if (SNodeOperations.isInstanceOf(parentClosure,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock")) {
          yieldAllowed=true;
          stopAllowed=true;
          skipAllowed=true;
        }
        if (SNodeOperations.isInstanceOf(parentClosure,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachBlock")) {
          stopAllowed=true;
          skipAllowed=true;
        }
        List<SNode> concepts=new ArrayList<SNode>();
        if (yieldAllowed) {
          ListOperations.addElement(concepts,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.TraversalYieldStatement"));
        }
        if (stopAllowed) {
          ListOperations.addElement(concepts,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.TraversalStopStatement"));
        }
        if (skipAllowed) {
          ListOperations.addElement(concepts,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.TraversalSkipStatement"));
        }
        return concepts;
      }
    }
;
    Iterable queryResult=(Iterable)calc.calculate();
    for (    Object item : queryResult) {
      List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item),parentNode,currentTargetNode,childSetter,operationContext.getScope());
      result.addAll(defaultActions);
    }
  }
  return result;
}
