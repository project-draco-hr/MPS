{
  if (!(SNodeOperations.isInstanceOf(lastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))) {
    return false;
  }
  SNode statementList=SNodeOperations.cast(SNodeOperations.getParent(lastStatement),"jetbrains.mps.baseLanguage.structure.StatementList");
  SNode parent=SNodeOperations.getParent(statementList);
  while (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.BlockStatement")) {
    SNode blockStatement=SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.BlockStatement");
    parent=SNodeOperations.getParent(blockStatement);
    if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.StatementList")) {
      SNode bsStatementList=SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.StatementList");
      List<SNode> statements=SLinkOperations.getTargets(bsStatementList,"statement",true);
      if (ListSequence.<SNode>fromList(statements).getElement(ListSequence.<SNode>fromList(statements).count() - 1) == blockStatement) {
        parent=SNodeOperations.getParent(bsStatementList);
      }
    }
  }
  if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.Statement") || SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration") || SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.CatchClause")|| SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.SwitchCase")) {
    return false;
  }
  boolean canAdjust=false;
  SNode returnType=null;
  if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
    SNode methodDeclaration=SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    returnType=SLinkOperations.getTarget(methodDeclaration,"returnType",true);
  }
 else   if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
    SNode conceptFunction=SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.ConceptFunction");
    returnType=ConceptFunction_Behavior.call_getExpectedReturnType_1213877374441(conceptFunction);
  }
  if (returnType != null && !(SNodeOperations.isInstanceOf(returnType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
    canAdjust=true;
  }
  return canAdjust;
}
