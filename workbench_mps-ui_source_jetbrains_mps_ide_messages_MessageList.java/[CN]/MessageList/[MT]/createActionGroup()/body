{
  DefaultActionGroup group=new DefaultActionGroup();
  final List<IMessage> selectedValues=myList.getSelectedValuesList();
  if (!selectedValues.isEmpty()) {
    final StringBuilder sb=new StringBuilder();
    for (    IMessage message : selectedValues) {
      sb.append(message.getText());
      sb.append("\n");
      if (message.getException() != null) {
        sb.append(ExceptionUtil.getThrowableText(message.getException()));
      }
    }
    group.add(new CopyToClipboardAction("Copy Text").setTextToCopy(sb.toString()));
    Object hintObj;
    if (selectedValues.size() == 1 && (hintObj=(selectedValues.get(0)).getHintObject()) != null) {
      SNodeId nodeId=hintObj instanceof SNodeReference ? ((SNodeReference)hintObj).getNodeId() : null;
      if (nodeId != null) {
        group.add(new CopyToClipboardAction("Copy Node Id").setTextToCopy(nodeId.toString()));
      }
    }
  }
  group.addSeparator();
  group.add(new AnAction("Show Help for This Message",null,null){
    @Override public void update(    AnActionEvent e){
      boolean enabled=getHelpUrlForCurrentMessage() != null;
      Presentation presentation=e.getPresentation();
      presentation.setEnabled(enabled);
      presentation.setVisible(enabled);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      showHelpForCurrentMessage();
    }
  }
);
  group.addSeparator();
  populateActions(myList,group);
  group.addSeparator();
  group.add(new ClearAction());
  return group;
}
