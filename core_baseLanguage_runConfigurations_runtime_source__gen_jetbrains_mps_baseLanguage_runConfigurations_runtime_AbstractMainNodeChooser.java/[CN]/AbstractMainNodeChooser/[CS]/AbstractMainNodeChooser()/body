{
  this.init(new ActionListener(){
    public void actionPerformed(    ActionEvent p0){
      final FindUsagesManager findUsegesManager=FindUsagesManager.getInstance();
      final FindUsagesManager.ProgressAdapter progressAdapter=new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator());
      final Wrappers._T<List<SNode>> toChooseFrom=new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          toChooseFrom.value=findToChooseFromOnInit(findUsegesManager,progressAdapter);
        }
      }
);
      SNode selectedNode=CommonChoosers.showDialogNodeChooser(AbstractMainNodeChooser.this,toChooseFrom.value);
      setNode(selectedNode);
    }
  }
);
  addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      final String text=getText();
      if (StringUtils.isEmpty(text)) {
        setNode(null);
        return;
      }
      int lastDot=text.lastIndexOf(".");
      if (lastDot <= 0) {
        setNode(null);
        return;
      }
      final List<SModelDescriptor> descriptors=getModelDescriptors(text.substring(0,lastDot));
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          SNode foundNode=null;
          for (          SModelDescriptor descriptor : ListSequence.fromList(descriptors)) {
            SModel smodel=descriptor.getSModel();
            Iterable<SNode> nodes=findNodes(smodel,text);
            if (!(Sequence.fromIterable(nodes).isEmpty())) {
              foundNode=Sequence.fromIterable(nodes).first();
              break;
            }
          }
          setNode(foundNode);
        }
      }
);
    }
  }
);
}
