{
  Map<Node,Integer> dist=new NodeMap<Integer>(graph);
  Map<Node,Edge> prev=new NodeMap<Edge>(graph);
  Queue<Node> queue=QueueSequence.<Node>fromQueue(new LinkedList<Node>());
  MapSequence.<Node,Integer>fromMap(dist).put(source,0);
  MapSequence.<Node,Edge>fromMap(prev).put(source,null);
  QueueSequence.fromQueue(queue).addLastElement(source);
  boolean found=false;
  while (QueueSequence.<Node>fromQueue(queue).count() > 0) {
    Node cur=QueueSequence.fromQueue(queue).removeFirstElement();
    if (cur == target) {
      found=true;
      break;
    }
    for (    Edge edge : ListSequence.<Edge>fromList(cur.getEdges(direction))) {
      if (filter.invoke(edge)) {
        Node next=edge.getOpposite(cur);
        if (MapSequence.<Node,Integer>fromMap(dist).get(next) == null) {
          QueueSequence.fromQueue(queue).addLastElement(next);
          MapSequence.<Node,Integer>fromMap(dist).put(next,MapSequence.<Node,Integer>fromMap(dist).get(cur) + 1);
          MapSequence.<Node,Edge>fromMap(prev).put(next,edge);
        }
      }
    }
  }
  if (!(found)) {
    return null;
  }
  List<Edge> path=ListSequence.<Edge>fromList(new LinkedList<Edge>());
  Node cur=target;
  while (MapSequence.<Node,Edge>fromMap(prev).get(cur) != null) {
    ListSequence.<Edge>fromList(path).insertElement(0,MapSequence.<Node,Edge>fromMap(prev).get(cur));
    cur=MapSequence.<Node,Edge>fromMap(prev).get(cur).getOpposite(cur);
  }
  return path;
}
