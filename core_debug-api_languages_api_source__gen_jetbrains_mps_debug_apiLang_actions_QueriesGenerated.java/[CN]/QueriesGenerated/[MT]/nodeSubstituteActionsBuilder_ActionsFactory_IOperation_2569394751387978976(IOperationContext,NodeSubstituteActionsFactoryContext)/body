{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.debug.apiLang.structure.CreateBreakpointOperation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode debuggerType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.debug.apiLang.structure.DebuggerType"),true);
          if (debuggerType != null && StringUtils.isNotEmpty(SPropertyOperations.getString(debuggerType,"name"))) {
            IBreakpointsProvider provider=Debuggers.getInstance().getDebuggerByName(SPropertyOperations.getString(debuggerType,"name")).getBreakpointsProvider();
            if (provider != null) {
              return (List<IBreakpointKind>)provider.getAllKinds();
            }
          }
          return ListSequence.fromList(new ArrayList<IBreakpointKind>());
        }
      }
;
      Iterable<IBreakpointKind> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final IBreakpointKind item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode createBreakpointOperation=SNodeFactoryOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.CreateBreakpointOperation",null);
              SPropertyOperations.set(createBreakpointOperation,"kindName",(item).getName());
              SPropertyOperations.set(createBreakpointOperation,"kindPresentation",(item).getPresentation());
              return createBreakpointOperation;
            }
            public String getMatchingText(            String pattern){
              return (item).getPresentation();
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "create " + (item).getPresentation();
            }
          }
);
        }
      }
    }
  }
  return result;
}
