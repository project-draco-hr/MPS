{
  MethodBinding b=x.binding;
  ClassCreator classCreator=ClassCreator.newInstance(myCurrentModel);
  SReference methodReference=myTypesProvider.createMethodReference(b,ClassCreator.BASE_METHOD_DECLARATION,classCreator.getNode());
  classCreator.getNode().addReference(methodReference);
  if (x.enumConstant != null) {
    throw new JavaConverterException("unexpected enum constant creation");
  }
  TypeReference[] references=x.typeArguments;
  if (references != null) {
    for (    TypeReference typeReference : references) {
      classCreator.addTypeParameter(createType(typeReference.resolvedType));
    }
  }
  addCallArgs(x.arguments,classCreator);
  GenericNewExpression result=GenericNewExpression.newInstance(myCurrentModel);
  result.setCreator(classCreator);
  return result;
}
