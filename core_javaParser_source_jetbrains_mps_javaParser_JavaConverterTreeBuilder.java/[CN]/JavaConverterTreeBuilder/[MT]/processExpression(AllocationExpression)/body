{
  MethodBinding b=x.binding;
  ClassCreator classCreator=ClassCreator.newInstance(myCurrentModel);
  SReference methodReference=myTypesProvider.createMethodReference(b,ClassCreator.BASE_METHOD_DECLARATION,classCreator.getNode());
  classCreator.getNode().addReference(methodReference);
  if (x.enumConstant != null) {
    throw new JavaConverterException("unexpected enum constant creation");
  }
  if (x.resolvedType instanceof ParameterizedTypeBinding) {
    ParameterizedTypeBinding ptb=(ParameterizedTypeBinding)x.resolvedType;
    TypeBinding[] typeArguments=ptb.arguments;
    if (typeArguments != null) {
      for (      TypeBinding typeBinding : typeArguments) {
        classCreator.addTypeParameter(createType(typeBinding));
      }
    }
  }
  addCallArgs(x.arguments,classCreator);
  GenericNewExpression result=GenericNewExpression.newInstance(myCurrentModel);
  result.setCreator(classCreator);
  return result;
}
