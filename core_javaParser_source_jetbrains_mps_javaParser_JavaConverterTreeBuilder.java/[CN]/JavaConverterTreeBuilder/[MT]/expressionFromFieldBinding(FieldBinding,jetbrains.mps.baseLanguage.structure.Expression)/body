{
  String role;
  SNode sourceNode;
  jetbrains.mps.baseLanguage.structure.Expression result;
  if (fieldBinding.isStatic()) {
    role=StaticFieldReference.VARIABLE_DECLARATION;
    StaticFieldReference sfr=StaticFieldReference.newInstance(myCurrentModel);
    sourceNode=sfr.getNode();
    sfr.getNode().addReference(myTypesProvider.createClassifierReference(fieldBinding.declaringClass,StaticFieldReference.CLASSIFIER,sourceNode));
    result=sfr;
  }
 else {
    role=FieldReferenceOperation.FIELD_DECLARATION;
    jetbrains.mps.baseLanguage.structure.Expression instance;
    if (instanceExpression == null) {
      ThisExpression thisExpression=ThisExpression.newInstance(myCurrentModel);
      ReferenceBinding declaredClassBinding=fieldBinding.declaringClass;
      if (myCurrentClass != myBindingMap.get(declaredClassBinding)) {
        thisExpression.getNode().addReference(myTypesProvider.createClassifierReference(declaredClassBinding,ThisExpression.CLASS_CONCEPT,thisExpression.getNode()));
      }
      instance=thisExpression;
    }
 else {
      instance=instanceExpression;
    }
    if (fieldBinding.declaringClass == null) {
      return createArrayLengthExpression(instance,fieldBinding);
    }
    FieldReferenceOperation fieldRef=FieldReferenceOperation.newInstance(myCurrentModel);
    DotExpression dotExpression=DotExpression.newInstance(myCurrentModel);
    dotExpression.setOperation(fieldRef);
    dotExpression.setOperand(instance);
    sourceNode=fieldRef.getNode();
    result=dotExpression;
  }
  SReference fieldReference=myTypesProvider.createFieldReference(fieldBinding,role,sourceNode);
  sourceNode.addReference(fieldReference);
  return result;
}
