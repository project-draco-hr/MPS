{
  AnnotationInstance annotationInstance=AnnotationInstance.newInstance(myCurrentModel);
  SNode sourceNode=annotationInstance.getNode();
  AnnotationBinding annotationBinding=annotation.getCompilerAnnotation();
  SReference classifierReference;
  if (annotationBinding == null) {
    TypeReference type=annotation.type;
    classifierReference=myTypesProvider.createErrorClassifierReference(AnnotationInstance.ANNOTATION,type.resolvedType,sourceNode);
  }
 else {
    classifierReference=myTypesProvider.createClassifierReference(annotationBinding.getAnnotationType(),AnnotationInstance.ANNOTATION,sourceNode);
  }
  if (classifierReference != null) {
    sourceNode.addReference(classifierReference);
  }
  MemberValuePair[] pairs=annotation.memberValuePairs();
  if (pairs != null) {
    for (    MemberValuePair pair : pairs) {
      AnnotationInstanceValue value=AnnotationInstanceValue.newInstance(myCurrentModel);
      value.setValue(processExpressionRefl(pair.value));
      SNode valueNode=value.getNode();
      if (pair.binding == null) {
        valueNode.addReference(myTypesProvider.createErrorReference(AnnotationInstanceValue.KEY,new String(pair.name),valueNode));
      }
 else {
        valueNode.addReference(myTypesProvider.createMethodReference(pair.binding,AnnotationInstanceValue.KEY,valueNode));
      }
      annotationInstance.addValue(value);
    }
  }
  variableDeclaration.addAnnotation(annotationInstance);
}
