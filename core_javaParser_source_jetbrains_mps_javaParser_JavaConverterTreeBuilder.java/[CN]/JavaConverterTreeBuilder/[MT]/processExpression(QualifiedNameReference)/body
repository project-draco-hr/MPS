{
  FieldBinding binding=(FieldBinding)x.binding;
  boolean isStatic=binding.isStatic();
  INodeAdapter varRef;
  String role;
  jetbrains.mps.baseLanguage.structure.Expression result;
  if (isStatic) {
    StaticFieldReference fieldReference=StaticFieldReference.newInstance(myCurrentModel);
    varRef=fieldReference;
    role=StaticFieldReference.VARIABLE_DECLARATION;
    fieldReference.getNode().addReference(myTypesProvider.createClassifierReference(binding.declaringClass,StaticFieldReference.CLASSIFIER,fieldReference.getNode()));
    result=fieldReference;
  }
 else {
    FieldReferenceOperation operation=FieldReferenceOperation.newInstance(myCurrentModel);
    varRef=operation;
    DotExpression dotExpression=DotExpression.newInstance(myCurrentModel);
    role=FieldReferenceOperation.FIELD_DECLARATION;
    dotExpression.setOperation(operation);
    ThisExpression thisExpression=ThisExpression.newInstance(myCurrentModel);
    ReferenceBinding declaredClassBinding=binding.declaringClass;
    if (myCurrentClass != myBindingMap.get(declaredClassBinding)) {
      thisExpression.getNode().addReference(myTypesProvider.createClassifierReference(declaredClassBinding,ThisExpression.CLASS_CONCEPT,thisExpression.getNode()));
    }
    dotExpression.setOperand(thisExpression);
    result=dotExpression;
  }
  SReference reference=myTypesProvider.createFieldReference(binding,role,varRef.getNode());
  varRef.getNode().addReference(reference);
  if (x.otherBindings != null) {
    for (int i=0; i < x.otherBindings.length; ++i) {
      FieldBinding fieldBinding=x.otherBindings[i];
      if (fieldBinding.declaringClass == null) {
      }
 else {
        INodeAdapter fieldAdapter;
        if (fieldBinding.isStatic()) {
          StaticFieldReference fieldReference=StaticFieldReference.newInstance(myCurrentModel);
          result=fieldReference;
          role=StaticFieldReference.VARIABLE_DECLARATION;
          fieldReference.getNode().addReference(myTypesProvider.createClassifierReference(fieldBinding.declaringClass,StaticFieldReference.CLASSIFIER,fieldReference.getNode()));
          fieldAdapter=fieldReference;
        }
 else {
          FieldReferenceOperation operation=FieldReferenceOperation.newInstance(myCurrentModel);
          DotExpression newDotExpression=DotExpression.newInstance(myCurrentModel);
          role=FieldReferenceOperation.FIELD_DECLARATION;
          newDotExpression.setOperation(operation);
          newDotExpression.setOperand(result);
          result=newDotExpression;
          fieldAdapter=operation;
        }
        SReference fieldReference=myTypesProvider.createFieldReference(fieldBinding,role,fieldAdapter.getNode());
        fieldAdapter.getNode().addReference(fieldReference);
      }
    }
  }
  return result;
}
