{
  int operator=((x.bits & UnaryExpression.OperatorMASK) >> UnaryExpression.OperatorSHIFT);
switch (operator) {
case UnaryExpression.MINUS:
    UnaryMinus unaryMinus=UnaryMinus.newInstance(myCurrentModel);
  unaryMinus.setExpression(processExpressionRefl(x.expression));
return unaryMinus;
case UnaryExpression.NOT:
NotExpression notExpression=NotExpression.newInstance(myCurrentModel);
notExpression.setExpression(processExpressionRefl(x.expression));
return notExpression;
case UnaryExpression.PLUS:
return processExpressionRefl(x.expression);
case UnaryExpression.TWIDDLE:
BitwiseNotExpression twiddle=BitwiseNotExpression.newInstance(myCurrentModel);
twiddle.setExpression(processExpressionRefl(x.expression));
return twiddle;
default :
throw new JavaConverterException("Unexpected operator for unary expression");
}
}
