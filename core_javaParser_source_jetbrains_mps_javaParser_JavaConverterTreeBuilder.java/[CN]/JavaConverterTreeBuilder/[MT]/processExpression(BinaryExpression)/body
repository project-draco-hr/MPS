{
  BinaryOperation op;
  int binOp=(x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
switch (binOp) {
case BinaryExpression.LEFT_SHIFT:
    op=ShiftLeftExpression.newInstance(myCurrentModel);
  break;
case BinaryExpression.RIGHT_SHIFT:
op=ShiftRightExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.PLUS:
op=PlusExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.MINUS:
op=MinusExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.REMAINDER:
op=RemExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.XOR:
op=BitwiseXorExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.AND:
op=BitwiseAndExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.MULTIPLY:
op=MulExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.OR:
op=BitwiseOrExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.DIVIDE:
op=DivExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.LESS_EQUAL:
op=LessThanOrEqualsExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.GREATER_EQUAL:
op=GreaterThanOrEqualsExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.GREATER:
op=GreaterThanExpression.newInstance(myCurrentModel);
break;
case BinaryExpression.LESS:
op=LessThanExpression.newInstance(myCurrentModel);
break;
default :
throw new JavaConverterException("Unsupported operator for BinaryExpression");
}
return processBinaryOperation(x.left,x.right,op);
}
