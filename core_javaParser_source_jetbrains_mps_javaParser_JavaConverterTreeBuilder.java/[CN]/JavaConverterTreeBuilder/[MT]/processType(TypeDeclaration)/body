{
  Classifier classifier=(Classifier)myTypesProvider.getRaw(x.binding);
  if (x.binding.isAnnotationType()) {
    return classifier;
  }
  myCurrentTypeDeclaration=x;
  myCurrentClass=classifier;
  try {
    if (x.fields != null) {
      for (int i=0, n=x.fields.length; i < n; ++i) {
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration=x.fields[i];
        if (fieldDeclaration instanceof Initializer) {
          assert(classifier instanceof ClassConcept);
          processInitializer((Initializer)fieldDeclaration,(ClassConcept)classifier);
        }
 else {
          processField(fieldDeclaration);
        }
      }
    }
    if (x.methods != null) {
      for (int i=0, n=x.methods.length; i < n; ++i) {
        AbstractMethodDeclaration method=x.methods[i];
        if (method.isConstructor()) {
          assert(myCurrentClass instanceof ClassConcept);
          if (x.binding instanceof LocalTypeBinding) {
          }
 else {
            processConstructor((ConstructorDeclaration)method);
          }
        }
 else         if (method.isClinit()) {
          continue;
        }
 else {
          processMethod(method);
        }
        addExceptionsToMethod(method);
      }
    }
    if (myCurrentClass instanceof EnumClass) {
    }
    myCurrentClass=null;
    myCurrentTypeDeclaration=null;
    addClassifierAnnotations(classifier,x);
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
  return classifier;
}
