{
  IMethodCall methodCall=null;
  jetbrains.mps.baseLanguage.structure.Expression result;
  if (x.binding.isStatic()) {
    StaticMethodCall smc=StaticMethodCall.newInstance(myCurrentModel);
    methodCall=smc;
    result=smc;
    SReference classifierReference=myTypesProvider.createClassifierReference(x.binding.declaringClass,StaticMethodCall.CLASS_CONCEPT,smc.getNode());
    smc.getNode().addReference(classifierReference);
  }
 else   if (x.receiver instanceof SuperReference || x.receiver instanceof QualifiedSuperReference) {
    SuperMethodCall smc=SuperMethodCall.newInstance(myCurrentModel);
    methodCall=smc;
    result=smc;
  }
 else {
    jetbrains.mps.baseLanguage.structure.Expression qualifier;
    InstanceMethodCallOperation imco=InstanceMethodCallOperation.newInstance(myCurrentModel);
    methodCall=imco;
    if (x.receiver instanceof ThisReference) {
      if (x.receiver instanceof QualifiedThisReference) {
        qualifier=processExpressionRefl(x.receiver);
      }
 else {
        if (x.receiver.isImplicitThis()) {
          qualifier=createThisExpression(x.binding,x.receiver);
        }
 else {
          qualifier=processExpressionRefl(x.receiver);
        }
      }
    }
 else {
      qualifier=processExpressionRefl(x.receiver);
    }
    DotExpression dotExpression=DotExpression.newInstance(myCurrentModel);
    dotExpression.setOperand(qualifier);
    dotExpression.setOperation(imco);
    result=dotExpression;
  }
  SReference methodReference=myTypesProvider.createMethodReference(x.binding,BaseMethodCall.BASE_METHOD_DECLARATION,methodCall.getNode());
  if (methodReference != null) {
    methodCall.getNode().addReference(methodReference);
  }
  addMethodTypeArgs(x.typeArguments,methodCall);
  addCallArgs(x.arguments,methodCall);
  return result;
}
