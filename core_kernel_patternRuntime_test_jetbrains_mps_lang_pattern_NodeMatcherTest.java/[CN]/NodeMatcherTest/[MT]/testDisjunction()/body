{
  final SProperty p=SNodeUtil.property_INamedConcept_name;
  final SNode pattern1Node=newNode(ourConcept1);
  final SNode pattern1Child=newNode(ourConcept1);
  pattern1Node.addChild(ourC1Child1,pattern1Child);
  pattern1Child.addChild(ourC1Child1,newNode(ourConcept1));
  pattern1Child.setProperty(p,"First");
  final SNode pattern2Node=newNode(ourConcept1);
  final SNode pattern2Child=newNode(ourConcept2);
  pattern2Node.addChild(ourC1Child2,pattern2Child);
  pattern2Child.addChild(ourC1Child2,newNode(ourConcept2));
  pattern2Node.setProperty(p,"Second");
  ValueContainer vc=new ValueContainer();
  final NodeMatcher top=new NodeMatcher(vc);
  top.disjunct(pattern1Node,new NodeMatcher(vc).child(ourC1Child1).at(0).capture("cld").child(ourC1Child1).done().done().done());
  top.disjunct(pattern2Node,new NodeMatcher(vc).child(ourC1Child2).at(0).capture("cld").child(ourC1Child2).done().done().done());
  SNode sample1Node=newNode(ourConcept1);
  SNode sample1Child=newNode(ourConcept1);
  sample1Node.addChild(ourC1Child1,sample1Child);
  sample1Child.addChild(ourC1Child1,newNode(ourConcept1));
  sample1Child.setProperty(p,"First");
  SNode sample2Node=newNode(ourConcept1);
  SNode sample2Child=newNode(ourConcept2);
  sample2Node.addChild(ourC1Child2,sample2Child);
  sample2Child.addChild(ourC1Child2,newNode(ourConcept2));
  sample2Node.setProperty(p,"Second");
  SNode sample3Node=newNode(ourConcept2);
  sample3Node.setProperty(p,"Second");
  SNode sample4Node=newNode(ourConcept1);
  final SNode sample4Child=newNode(ourConcept2);
  sample4Node.addChild(ourC1Child1,sample4Child);
  sample3Node.addChild(ourC1Child1,newNode(ourConcept2));
  sample4Child.setProperty(p,"First");
  sample4Node.setProperty(p,"Second");
  final SNode fakePatternNode=newNode(ourConcept2);
  myErrors.checkThat(top.match(fakePatternNode,sample1Node),Matchers.equalTo(true));
  myErrors.checkThat(vc.getNode("cld"),Matchers.equalTo(sample1Child));
  sample1Child.setProperty(p,"mismatch");
  myErrors.checkThat(top.match(fakePatternNode,sample1Node),Matchers.equalTo(false));
  myErrors.checkThat(top.match(fakePatternNode,sample2Node),Matchers.equalTo(true));
  myErrors.checkThat(vc.getNode("cld"),Matchers.equalTo(sample2Child));
  sample2Node.setProperty(p,"mismatch");
  myErrors.checkThat(top.match(fakePatternNode,sample2Node),Matchers.equalTo(false));
  vc.reset(new ValueContainer());
  myErrors.checkThat(top.match(fakePatternNode,sample3Node),Matchers.equalTo(false));
  myErrors.checkThat(vc.getNode("cld"),Matchers.nullValue());
  vc.reset(new ValueContainer());
  myErrors.checkThat(top.match(fakePatternNode,sample4Node),Matchers.equalTo(false));
  myErrors.checkThat(vc.getNode("cld"),Matchers.nullValue());
}
