{
  final SNode patternNode=newNode(ourConcept1);
  patternNode.addChild(ourC1Child1,newNode(ourConcept1));
  final SNode patternChild=newNode(ourConcept1);
  patternNode.addChild(ourC1Child1,patternChild);
  final SProperty p1=SNodeUtil.property_INamedConcept_name;
  final SProperty p2=SNodeUtil.property_BaseConcept_alias;
  patternNode.setProperty(p1,"");
  patternNode.setProperty(p2,"");
  patternChild.setProperty(p1,"");
  patternChild.setProperty(p2,"");
  final SNode actualNode=newNode(ourConcept1);
  actualNode.addChild(ourC1Child1,newNode(ourConcept1));
  final SNode actualChild=newNode(ourConcept1);
  actualNode.addChild(ourC1Child1,actualChild);
  actualNode.setProperty(p1,"true");
  actualNode.setProperty(p2,"yes");
  actualChild.setProperty(p1,"One");
  actualChild.setProperty(p2,"Two");
  ValueContainer vc=new ValueContainer();
  final NodeMatcher top=new NodeMatcher(vc);
  top.property(p1,"top1").property(p2,"top2").child(ourC1Child1).at(1).property(p1,"cp1").property(p2,"cp2");
  final boolean matched=top.match(patternNode,actualNode);
  myErrors.checkThat("Shall match",matched,Matchers.equalTo(true));
  myErrors.checkThat(vc.getProperty("top1"),Matchers.equalTo("true"));
  myErrors.checkThat(vc.getProperty("top2"),Matchers.equalTo("yes"));
  myErrors.checkThat(vc.getProperty("cp1"),Matchers.equalTo("One"));
  myErrors.checkThat(vc.getProperty("cp2"),Matchers.equalTo("Two"));
}
