{
  final SNode patternNode=newNode(ourConcept1);
  patternNode.addChild(ourC1Child1,newNode(ourConcept1));
  patternNode.addChild(ourC1Child2,newNode(ourConcept2));
  final SNode actualNodeOneChild=newNode(ourConcept1);
  actualNodeOneChild.addChild(ourC1Child1,newNode(ourConcept1));
  final SNode actualNodeTwoChildrenRight=newNode(ourConcept1);
  actualNodeTwoChildrenRight.addChild(ourC1Child1,newNode(ourConcept1));
  actualNodeTwoChildrenRight.addChild(ourC1Child2,newNode(ourConcept2));
  final SNode actualNodeTwoChildrenWrong=newNode(ourConcept1);
  actualNodeTwoChildrenWrong.addChild(ourC1Child1,newNode(ourConcept1));
  actualNodeTwoChildrenWrong.addChild(ourC1Child2,newNode(ourConcept1));
  final SNode actualNodeThreeChildren=newNode(ourConcept1);
  actualNodeThreeChildren.addChild(ourC1Child1,newNode(ourConcept1));
  actualNodeThreeChildren.addChild(ourC1Child2,newNode(ourConcept2));
  actualNodeThreeChildren.addChild(ourC1Child2,newNode(ourConcept1));
  final NodeMatcher defaultMatcher=new NodeMatcher(new ValueContainer());
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeOneChild),Matchers.equalTo(false));
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeTwoChildrenRight),Matchers.equalTo(true));
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeTwoChildrenWrong),Matchers.equalTo(false));
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeThreeChildren),Matchers.equalTo(false));
  final SProperty p=SNodeUtil.property_INamedConcept_name;
  patternNode.setProperty(p,"NAME");
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeTwoChildrenRight),Matchers.equalTo(false));
  actualNodeTwoChildrenRight.setProperty(p,"NAME");
  myErrors.checkThat(defaultMatcher.match(patternNode,actualNodeTwoChildrenRight),Matchers.equalTo(true));
}
