{
  LOG.assertInCommand();
  EditorComponent editorComponent=context.getNodeEditorComponent();
  EditorCell selectedCell=getCellToPasteTo(editorComponent.getSelectedCell());
  SNode selectedNode=selectedCell.getSNode();
  PasteNodeData pasteNodeData=CopyPasteUtil.getPasteNodeDataFromClipboard(selectedNode.getModel());
  List<SNode> pasteNodes=pasteNodeData.getNodes();
  Set<SReference> requireResolveReferences=pasteNodeData.getRequireResolveReferences();
  if (selectedCell.isFirstPositionInBigCell() && PasteNodeUtil.canPasteRelative(selectedNode,pasteNodes)) {
    PasteNodeUtil.pasteRelative(selectedNode,pasteNodes,PastePlaceHint.BEFORE_ANCHOR);
  }
 else {
    PasteNodeUtil.paste(selectedCell,pasteNodes);
  }
  Resolver.resolveReferences(requireResolveReferences,context.getOperationContext());
  editorComponent.flushEvents();
  EditorCell nodeCell=editorComponent.findNodeCell(pasteNodes.get(0));
  if (nodeCell == null)   return;
  editorComponent.changeSelection(nodeCell);
  EditorCell_Label labelCell=nodeCell.findChild(CellFinders.byClass(EditorCell_Label.class,true));
  if (labelCell != null) {
    editorComponent.changeSelection(labelCell);
    if (pasteNodes.size() == 1) {
      editorComponent.pushSelection(labelCell);
      editorComponent.setSelectionDontClearStack(nodeCell,true);
    }
  }
  if (pasteNodes.size() > 1) {
    editorComponent.getNodeRangeSelection().setRange(pasteNodes.get(0),pasteNodes.get(pasteNodes.size() - 1));
  }
}
