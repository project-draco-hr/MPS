{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbstractContainerCreator_Editor();
case 1:
  return new AbstractContainerType_Editor();
case 2:
return new AbstractEnumeratorOperation_Editor();
case 3:
return new AbstractIteratorOperation_Editor();
case 4:
return new AbstractMappingOperation_Editor();
case 5:
return new AddAllSetElementsOperation_Editor();
case 6:
return new AddSetElementOperation_Editor();
case 7:
return new AllConstant_Editor();
case 8:
return new AsSequenceOperation_Editor();
case 9:
return new BinaryOperation_Editor();
case 10:
return new ChunkOperation_Editor();
case 11:
return new ClearSetOperation_Editor();
case 12:
return new ComparatorSortOperation_Editor();
case 13:
return new ContainsKeyOperation_Editor();
case 14:
return new ContainsValueOperation_Editor();
case 15:
return new CustomContainerCreator_Editor();
case 16:
return new CustomContainerDeclaration_Editor();
case 17:
return new CustomContainers_Editor();
case 18:
return new CustomMapCreator_Editor();
case 19:
return new DowncastExpression_Editor();
case 20:
return new EnumeratorType_Editor();
case 21:
return new FoldLeftOperation_Editor();
case 22:
return new FoldRightOperation_Editor();
case 23:
return new ForEachStatement_Editor();
case 24:
return new ForEachVariable_Editor();
case 25:
return new ForEachVariableReference_Editor();
case 26:
return new GetKeysOperation_Editor();
case 27:
return new GetValuesOperation_Editor();
case 28:
return new HashMapCreator_Editor();
case 29:
return new HeadListOperation_Editor();
case 30:
return new HeadMapOperation_Editor();
case 31:
return new HeadSetOperation_Editor();
case 32:
return new InsertElementOperation_Editor();
case 33:
return new InternalSequenceOperation_Editor();
case 34:
return new IteratorType_Editor();
case 35:
return new JoinOperation_Editor();
case 36:
return new LinkedHashMapCreator_Editor();
case 37:
return new ListElementAccessExpression_Editor();
case 38:
return new ListType_Editor();
case 39:
return new MapClearOperation_Editor();
case 40:
return new MapElement_Editor();
case 41:
return new MapEntry_Editor();
case 42:
return new MapInitializer_Editor();
case 43:
return new MapOperationExpression_Editor();
case 44:
return new MapRemoveOperation_Editor();
case 45:
return new MapType_Editor();
case 46:
return new MappingType_Editor();
case 47:
return new MappingsSetOperation_Editor();
case 48:
return new MultiForEachPair_Editor();
case 49:
return new MultiForEachStatement_Editor();
case 50:
return new MultiForEachVariable_Editor();
case 51:
return new MultiForEachVariableReference_Editor();
case 52:
return new NoArgumentsSequenceOperation_Editor();
case 53:
return new OfTypeOperation_Editor();
case 54:
return new PageOperation_Editor();
case 55:
return new PutAllOperation_Editor();
case 56:
return new RemoveAllSetElementsOperation_Editor();
case 57:
return new RemoveAtElementOperation_Editor();
case 58:
return new RemoveSetElementOperation_Editor();
case 59:
return new SequenceCreator_Editor();
case 60:
return new SequenceOperation_Editor();
case 61:
return new SequenceType_Editor();
case 62:
return new SetElementOperation_Editor();
case 63:
return new SetType_Editor();
case 64:
return new SingleArgumentSequenceOperation_Editor();
case 65:
return new SingletonSequenceCreator_Editor();
case 66:
return new SkipOperation_Editor();
case 67:
return new SkipStatement_Editor();
case 68:
return new SmartClosureParameterDeclaration_Editor();
case 69:
return new SortDirection_Editor();
case 70:
return new SortOperation_Editor();
case 71:
return new StopStatement_Editor();
case 72:
return new SubListOperation_Editor();
case 73:
return new SubMapOperation_Editor();
case 74:
return new SubSetOperation_Editor();
case 75:
return new TailListOperation_Editor();
case 76:
return new TailMapOperation_Editor();
case 77:
return new TailSetOperation_Editor();
case 78:
return new TakeOperation_Editor();
case 79:
return new ToIteratorOperation_Editor();
case 80:
return new ToListOperation_Editor();
case 81:
return new TreeSetCreator_Editor();
default :
}
return null;
}
