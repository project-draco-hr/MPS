{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractContainerCreator_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractContainerType_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractEnumeratorOperation_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractIteratorOperation_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AbstractMappingOperation_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AddAllSetElementsOperation_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AddSetElementOperation_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AllConstant_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new AsSequenceOperation_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ChunkOperation_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ClearSetOperation_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ComparatorSortOperation_Editor()));
case 13:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ContainsKeyOperation_Editor()));
case 14:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ContainsValueOperation_Editor()));
case 15:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomContainerCreator_Editor()));
case 16:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomContainerDeclaration_Editor()));
case 17:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomContainers_Editor()));
case 18:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new CustomMapCreator_Editor()));
case 19:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DowncastExpression_Editor()));
case 20:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EnumeratorType_Editor()));
case 21:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FoldLeftOperation_Editor()));
case 22:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new FoldRightOperation_Editor()));
case 23:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ForEachStatement_Editor()));
case 24:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ForEachVariable_Editor()));
case 25:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ForEachVariableReference_Editor()));
case 26:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetKeysOperation_Editor()));
case 27:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetValuesOperation_Editor()));
case 28:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new HashMapCreator_Editor()));
case 29:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new HeadListOperation_Editor()));
case 30:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new HeadMapOperation_Editor()));
case 31:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new HeadSetOperation_Editor()));
case 32:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InsertElementOperation_Editor()));
case 33:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InternalSequenceOperation_Editor()));
case 34:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new IteratorType_Editor()));
case 35:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new JoinOperation_Editor()));
case 36:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LinkedHashMapCreator_Editor()));
case 37:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ListElementAccessExpression_Editor()));
case 38:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ListType_Editor()));
case 39:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapAsSequenceVarRef_Editor()));
case 40:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapClearOperation_Editor()));
case 41:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapElement_Editor()));
case 42:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapEntry_Editor()));
case 43:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapInitializer_Editor()));
case 44:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapOperationExpression_Editor()));
case 45:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapRemoveOperation_Editor()));
case 46:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MapType_Editor()));
case 47:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MappingType_Editor()));
case 48:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MappingsSetOperation_Editor()));
case 49:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultiForEachPair_Editor()));
case 50:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultiForEachStatement_Editor()));
case 51:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultiForEachVariable_Editor()));
case 52:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new MultiForEachVariableReference_Editor()));
case 53:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new NoArgumentsSequenceOperation_Editor()));
case 54:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OfTypeOperation_Editor()));
case 55:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PageOperation_Editor()));
case 56:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new PutAllOperation_Editor()));
case 57:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RemoveAllSetElementsOperation_Editor()));
case 58:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RemoveAtElementOperation_Editor()));
case 59:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RemoveSetElementOperation_Editor()));
case 60:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SequenceCreator_Editor()));
case 61:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SequenceOperation_Editor()));
case 62:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SequenceType_Editor()));
case 63:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SetElementOperation_Editor()));
case 64:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SetType_Editor()));
case 65:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SingleArgumentSequenceOperation_Editor()));
case 66:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SingletonSequenceCreator_Editor()));
case 67:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SkipOperation_Editor()));
case 68:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SkipStatement_Editor()));
case 69:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SmartClosureParameterDeclaration_Editor()));
case 70:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SortDirection_Editor()));
case 71:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SortOperation_Editor()));
case 72:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new StopStatement_Editor()));
case 73:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubListOperation_Editor()));
case 74:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubMapOperation_Editor()));
case 75:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new SubSetOperation_Editor()));
case 76:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TailListOperation_Editor()));
case 77:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TailMapOperation_Editor()));
case 78:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TailSetOperation_Editor()));
case 79:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TakeOperation_Editor()));
case 80:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ToIteratorOperation_Editor()));
case 81:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ToListOperation_Editor()));
case 82:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new TreeSetCreator_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
