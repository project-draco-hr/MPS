{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_xbvbvu_a0g.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<SubstituteMenu>singletonList(new AbstractEnumeratorOperation_SubstituteMenu());
      }
    break;
case 1:
  if (true) {
    return Collections.<SubstituteMenu>singletonList(new AbstractIteratorOperation_SubstituteMenu());
  }
break;
case 2:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AbstractMappingOperation_SubstituteMenu());
}
break;
case 3:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AddAllSetElementsOperation_SubstituteMenu());
}
break;
case 4:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AddSetElementOperation_SubstituteMenu());
}
break;
case 5:
if (true) {
return Collections.<SubstituteMenu>singletonList(new AsSequenceOperation_SubstituteMenu());
}
break;
case 6:
if (true) {
return Collections.<SubstituteMenu>singletonList(new DowncastExpression_SubstituteMenu());
}
break;
case 7:
if (true) {
return Collections.<SubstituteMenu>singletonList(new Expression_Contribution());
}
break;
case 8:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IApplicableToDeque_SubstituteMenu());
}
break;
case 9:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IApplicableToList_SubstituteMenu());
}
break;
case 10:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IApplicableToNothing_SubstituteMenu());
}
break;
case 11:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IContainerOperation_SubstituteMenu());
}
break;
case 12:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IListOperation_SubstituteMenu());
}
break;
case 13:
if (true) {
return Collections.<SubstituteMenu>singletonList(new IOperation_Contribution());
}
break;
case 14:
if (true) {
return Collections.<SubstituteMenu>singletonList(new LinkedListCreator_SubstituteMenu());
}
break;
case 15:
if (true) {
return Collections.<SubstituteMenu>singletonList(new MapElement_SubstituteMenu());
}
break;
case 16:
if (true) {
return Collections.<SubstituteMenu>singletonList(new MapOperation_SubstituteMenu());
}
break;
case 17:
if (true) {
return Collections.<SubstituteMenu>singletonList(new MapOperationExpression_SubstituteMenu());
}
break;
case 18:
if (true) {
return Collections.<SubstituteMenu>singletonList(new RemoveAllSetElementsOperation_SubstituteMenu());
}
break;
case 19:
if (true) {
return Collections.<SubstituteMenu>singletonList(new RemoveOperation_SubstituteMenu());
}
break;
case 20:
if (true) {
return Collections.<SubstituteMenu>singletonList(new RemoveSetElementOperation_SubstituteMenu());
}
break;
case 21:
if (true) {
return Collections.<SubstituteMenu>singletonList(new SequenceOperation_SubstituteMenu());
}
break;
case 22:
if (true) {
return Collections.<SubstituteMenu>singletonList(new SkipStatement_SubstituteMenu());
}
break;
case 23:
if (true) {
return Collections.<SubstituteMenu>singletonList(new SortDirection_SubstituteMenu());
}
break;
case 24:
if (true) {
return Collections.<SubstituteMenu>singletonList(new StopStatement_SubstituteMenu());
}
break;
case 25:
if (true) {
return Collections.<SubstituteMenu>singletonList(new ToIteratorOperation_SubstituteMenu());
}
break;
default :
}
}
return Collections.<SubstituteMenu>emptyList();
}
