{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbstractContainerCreator_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AbstractContainerType_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractEnumeratorOperation_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractIteratorOperation_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new AbstractMappingOperation_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddAllSetElementsOperation_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new AddSetElementOperation_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new AllConstant_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new AsSequenceOperation_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new ChunkOperation_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClearSetOperation_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new ComparatorSortOperation_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new ContainsKeyOperation_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new ContainsValueOperation_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomContainerCreator_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomContainerDeclaration_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomContainers_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new CustomMapCreator_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new DowncastExpression_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new EnumeratorType_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new FoldLeftOperation_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new FoldRightOperation_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForEachStatement_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForEachVariable_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForEachVariableReference_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetKeysOperation_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetValuesOperation_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new HashMapCreator_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new HeadListOperation_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new HeadMapOperation_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new HeadSetOperation_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new InsertElementOperation_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new InternalSequenceOperation_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new IteratorType_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new JoinOperation_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkedHashMapCreator_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new ListElementAccessExpression_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new ListType_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapAsSequenceVarRef_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapClearOperation_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapElement_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapEntry_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapInitializer_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapOperationExpression_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapRemoveOperation_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapType_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingType_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingsSetOperation_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultiForEachPair_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultiForEachStatement_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultiForEachVariable_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new MultiForEachVariableReference_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new NoArgumentsSequenceOperation_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new OfTypeOperation_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new PageOperation_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new PutAllOperation_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveAllSetElementsOperation_Editor());
}
break;
case 58:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveAtElementOperation_Editor());
}
break;
case 59:
if (true) {
return Collections.<ConceptEditor>singletonList(new RemoveSetElementOperation_Editor());
}
break;
case 60:
if (true) {
return Collections.<ConceptEditor>singletonList(new SequenceCreator_Editor());
}
break;
case 61:
if (true) {
return Collections.<ConceptEditor>singletonList(new SequenceOperation_Editor());
}
break;
case 62:
if (true) {
return Collections.<ConceptEditor>singletonList(new SequenceType_Editor());
}
break;
case 63:
if (true) {
return Collections.<ConceptEditor>singletonList(new SetElementOperation_Editor());
}
break;
case 64:
if (true) {
return Collections.<ConceptEditor>singletonList(new SetType_Editor());
}
break;
case 65:
if (true) {
return Collections.<ConceptEditor>singletonList(new SingleArgumentSequenceOperation_Editor());
}
break;
case 66:
if (true) {
return Collections.<ConceptEditor>singletonList(new SingletonSequenceCreator_Editor());
}
break;
case 67:
if (true) {
return Collections.<ConceptEditor>singletonList(new SkipOperation_Editor());
}
break;
case 68:
if (true) {
return Collections.<ConceptEditor>singletonList(new SkipStatement_Editor());
}
break;
case 69:
if (true) {
return Collections.<ConceptEditor>singletonList(new SmartClosureParameterDeclaration_Editor());
}
break;
case 70:
if (true) {
return Collections.<ConceptEditor>singletonList(new SortDirection_Editor());
}
break;
case 71:
if (true) {
return Collections.<ConceptEditor>singletonList(new SortOperation_Editor());
}
break;
case 72:
if (true) {
return Collections.<ConceptEditor>singletonList(new StopStatement_Editor());
}
break;
case 73:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubListOperation_Editor());
}
break;
case 74:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubMapOperation_Editor());
}
break;
case 75:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubSetOperation_Editor());
}
break;
case 76:
if (true) {
return Collections.<ConceptEditor>singletonList(new TailListOperation_Editor());
}
break;
case 77:
if (true) {
return Collections.<ConceptEditor>singletonList(new TailMapOperation_Editor());
}
break;
case 78:
if (true) {
return Collections.<ConceptEditor>singletonList(new TailSetOperation_Editor());
}
break;
case 79:
if (true) {
return Collections.<ConceptEditor>singletonList(new TakeOperation_Editor());
}
break;
case 80:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToIteratorOperation_Editor());
}
break;
case 81:
if (true) {
return Collections.<ConceptEditor>singletonList(new ToListOperation_Editor());
}
break;
case 82:
if (true) {
return Collections.<ConceptEditor>singletonList(new TreeSetCreator_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
