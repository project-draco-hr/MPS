{
  if (myParts == null) {
    throw new IllegalStateException("isMoved() should be called after willBeMoved()");
  }
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SRepository> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SRepository>(){
      public SRepository select(      SNode it){
        return SNodeOperations.getModel(it).getRepository();
      }
    }
);
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>(){
      public boolean accept(      SRepository it){
        return eq_t9enxm_a0a0a0a0a0a1a2a61(it,myRepository);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same repository.");
    }
  }
  if (ListSequence.fromList(myParts).count() != ListSequence.fromList(nodes).count()) {
    throw new IllegalArgumentException("List size mismatch");
  }
{
    Iterator<SNode> to_it=ListSequence.fromList(nodes).iterator();
    Iterator<MoveNodePart> moveNodePart_it=ListSequence.fromList(myParts).iterator();
    SNode to_var;
    MoveNodePart moveNodePart_var;
    while (to_it.hasNext() && moveNodePart_it.hasNext()) {
      to_var=to_it.next();
      moveNodePart_var=moveNodePart_it.next();
      moveNodePart_var.setTo(to_var.getReference());
    }
  }
}
