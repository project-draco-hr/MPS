{
  MPSTreeNode root=new TextTreeNode("no bookmarks"){
    public ActionGroup getActionGroup(){
      BaseAction hierarchyAction=new BaseAction("Remove All Bookmarks"){
        protected void doExecute(        AnActionEvent e,        Map<String,Object> _params){
          myBookmarkManager.clearBookmarks();
        }
      }
;
      return ActionUtils.groupFromActions(hierarchyAction);
    }
  }
;
  root.setIcon(IdeIcons.DEFAULT_ICON);
  List<SNodePointer> nodePointers=myBookmarkManager.getAllNumberedBookmarks();
  boolean hasBookmarks=false;
  for (int i=0; i < nodePointers.size(); i++) {
    final SNodePointer nodePointer=nodePointers.get(i);
    if (nodePointer != null && nodePointer.getNode() != null) {
      hasBookmarks=true;
      TextTreeNode textTreeNode=new MyTextTreeNodeNumbered(i);
      textTreeNode.setIcon(BookmarkManager.getIcon(i));
      textTreeNode.add(new MySNodeTreeNode(nodePointer.getNode(),null,new ProjectOperationContext(myProject)));
      root.add(textTreeNode);
    }
  }
  nodePointers=myBookmarkManager.getAllUnnumberedBookmarks();
  for (  SNodePointer nodePointer : nodePointers) {
    if (nodePointer != null && nodePointer.getNode() != null) {
      hasBookmarks=true;
      TextTreeNode textTreeNode=new MyTextTreeNodeUnnumbered(nodePointer);
      textTreeNode.setIcon(BookmarkManager.getIcon(-1));
      textTreeNode.add(new MySNodeTreeNode(nodePointer.getNode(),null,new ProjectOperationContext(myProject)));
      root.add(textTreeNode);
    }
  }
  if (hasBookmarks) {
    root.setText("bookmarks");
  }
  return root;
}
