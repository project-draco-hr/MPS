{
  if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration")) {
    if (ScopeUtils.comeFrom("precondition",thisNode,child)) {
      return BehaviorReflection.invokeSuper(Scope.class,thisNode,"jetbrains.mps.lang.core.structure.ScopeProvider","virtual_getScope_3734116213129936182",new Object[]{kind,child});
    }
    SNode thisVarDecl=SNodeOperations.as(child,MetaAdapterFactory.getConcept(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x11266742db0L,"jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration"));
    List<SNode> result=new ArrayList<SNode>();
    for (    SNode nextVarDecl : ListSequence.fromList(SLinkOperations.getChildren(thisNode,MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x102ebd2e9eaL,0x1126677dd6aL,"variable")))) {
      if (nextVarDecl == thisVarDecl) {
        break;
      }
      ListSequence.fromList(result).addElement(nextVarDecl);
    }
    return Scopes.forVariables(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration"),result,ScopeUtils.lazyParentScope(thisNode,kind));
  }
  return BehaviorReflection.invokeSuper(Scope.class,thisNode,"jetbrains.mps.lang.core.structure.ScopeProvider","virtual_getScope_3734116213129936182",new Object[]{kind,child});
}
