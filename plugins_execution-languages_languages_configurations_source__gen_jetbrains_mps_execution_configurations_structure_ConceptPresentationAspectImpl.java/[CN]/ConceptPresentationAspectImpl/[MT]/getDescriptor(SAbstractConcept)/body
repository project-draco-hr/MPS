{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0ib.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractRunConfigurationExecutor;
      }
    break;
case 1:
  if (true) {
    return props_BeforeTask;
  }
break;
case 2:
if (true) {
return props_BeforeTaskCall;
}
break;
case 3:
if (true) {
return props_BeforeTaskParameter;
}
break;
case 4:
if (true) {
return props_BeforeTaskParameterReference;
}
break;
case 5:
if (true) {
return props_ConfigurationFromExecutorReference;
}
break;
case 6:
if (true) {
return props_ConsoleCreator;
}
break;
case 7:
if (true) {
return props_ConsoleType;
}
break;
case 8:
if (true) {
return props_ContextExpression;
}
break;
case 9:
if (true) {
return props_Create_ConceptFunction;
}
break;
case 10:
if (true) {
return props_DebuggerSettings_Parameter;
}
break;
case 11:
if (true) {
return props_EnvironmentExpression;
}
break;
case 12:
if (true) {
return props_ExecuteBeforeTask_ConceptFunction;
}
break;
case 13:
if (true) {
return props_ExecuteConfiguration_Function;
}
break;
case 14:
if (true) {
return props_Executor_Parameter;
}
break;
case 15:
if (true) {
return props_GetProjectOperation;
}
break;
case 16:
if (true) {
return props_ModelSource;
}
break;
case 17:
if (true) {
return props_ModuleSource;
}
break;
case 18:
if (true) {
return props_NodeListSource;
}
break;
case 19:
if (true) {
return props_NodeSource;
}
break;
case 20:
if (true) {
return props_ProjectSource;
}
break;
case 21:
if (true) {
return props_Project_Parameter;
}
break;
case 22:
if (true) {
return props_RunConfiguration;
}
break;
case 23:
if (true) {
return props_RunConfigurationCreator;
}
break;
case 24:
if (true) {
return props_RunConfigurationExecutor;
}
break;
case 25:
if (true) {
return props_RunConfigurationKind;
}
break;
case 26:
if (true) {
return props_RunConfigurationProducer;
}
break;
case 27:
if (true) {
return props_RunConfigurationProducerPart;
}
break;
case 28:
if (true) {
return props_RunConfigurationSource;
}
break;
case 29:
if (true) {
return props_SModelSource;
}
break;
case 30:
if (true) {
return props_SModuleSource;
}
break;
case 31:
if (true) {
return props_Source_ConceptFunctionParameter;
}
break;
case 32:
if (true) {
return props_StartProcessHandlerStatement;
}
break;
default :
}
}
throw new IllegalStateException();
}
