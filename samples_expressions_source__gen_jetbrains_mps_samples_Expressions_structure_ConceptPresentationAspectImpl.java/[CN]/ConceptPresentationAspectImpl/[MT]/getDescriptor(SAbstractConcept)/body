{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0z.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AndSimpleMathExpression;
      }
    break;
case 1:
  if (true) {
    return props_ArithmeticSimpleMathExpression;
  }
break;
case 2:
if (true) {
return props_BinarySimpleMathExpression;
}
break;
case 3:
if (true) {
return props_LogicalSimpleMathExpression;
}
break;
case 4:
if (true) {
return props_NotSimpleMathExpression;
}
break;
case 5:
if (true) {
return props_OrSimpleMathExpression;
}
break;
case 6:
if (true) {
return props_SimpleMathAssignment;
}
break;
case 7:
if (true) {
return props_SimpleMathBooleanConstant;
}
break;
case 8:
if (true) {
return props_SimpleMathBooleanType;
}
break;
case 9:
if (true) {
return props_SimpleMathElementType;
}
break;
case 10:
if (true) {
return props_SimpleMathExpression;
}
break;
case 11:
if (true) {
return props_SimpleMathFloatConstant;
}
break;
case 12:
if (true) {
return props_SimpleMathFloatType;
}
break;
case 13:
if (true) {
return props_SimpleMathIntegerConstant;
}
break;
case 14:
if (true) {
return props_SimpleMathIntegerType;
}
break;
case 15:
if (true) {
return props_SimpleMathLongConstant;
}
break;
case 16:
if (true) {
return props_SimpleMathLongType;
}
break;
case 17:
if (true) {
return props_SimpleMathNumberType;
}
break;
case 18:
if (true) {
return props_SimpleMathType;
}
break;
case 19:
if (true) {
return props_SimpleMathTypedVarDeclaration;
}
break;
case 20:
if (true) {
return props_SimpleMathVarDeclaration;
}
break;
case 21:
if (true) {
return props_SimpleMathVarReference;
}
break;
case 22:
if (true) {
return props_SimpleMathWrapper;
}
break;
case 23:
if (true) {
return props_UnarySimpleMathExpression;
}
break;
default :
}
}
throw new IllegalStateException();
}
