{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0uf,conceptFqName)) {
case 0:
    return myConceptAbstractNodeRefExpression;
case 1:
  return myConceptAbstractOperationParameter;
case 2:
return myConceptAllAttributeQualifier;
case 3:
return myConceptAsNodeOperation;
case 4:
return myConceptAsSConcept;
case 5:
return myConceptAttributeAccess;
case 6:
return myConceptAttributeQualifier;
case 7:
return myConceptBootstrapAwareMetaObject;
case 8:
return myConceptCheckedModuleQualifiedName;
case 9:
return myConceptCheckedModuleReference;
case 10:
return myConceptChildNodeRefExpression;
case 11:
return myConceptConceptFqNameRefExpression;
case 12:
return myConceptConceptIdRefExpression;
case 13:
return myConceptConceptRefExpression;
case 14:
return myConceptConceptReference;
case 15:
return myConceptConceptSwitchStatement;
case 16:
return myConceptConceptSwitchStatementCase;
case 17:
return myConceptConcept_GetAllSubConcepts;
case 18:
return myConceptConcept_GetAllSuperConcepts;
case 19:
return myConceptConcept_GetDirectSuperConcepts;
case 20:
return myConceptConcept_GetHierarchy;
case 21:
return myConceptConcept_IsExactlyOperation;
case 22:
return myConceptConcept_IsSubConceptOfOperation;
case 23:
return myConceptConcept_IsSuperConceptOfOperation;
case 24:
return myConceptConcept_NewInstance;
case 25:
return myConceptEnumMemberReference;
case 26:
return myConceptEnumMemberValueRefExpression;
case 27:
return myConceptEnumMember_NameOperation;
case 28:
return myConceptEnumMember_ValueOperation;
case 29:
return myConceptEqualsStructurallyExpression;
case 30:
return myConceptILinkAccess;
case 31:
return myConceptILinkAccessQualifier;
case 32:
return myConceptILinkAccessQualifierContainer;
case 33:
return myConceptILinkQualifier;
case 34:
return myConceptIPropertyQualifier;
case 35:
return myConceptIRefConceptArg;
case 36:
return myConceptIReferenceOperation;
case 37:
return myConceptIfInstanceOfStatement;
case 38:
return myConceptIfInstanceOfVarReference;
case 39:
return myConceptIfInstanceOfVariable;
case 40:
return myConceptLanguageReferenceExpression;
case 41:
return myConceptLinkAttributeQualifier;
case 42:
return myConceptLinkIdRefExpression;
case 43:
return myConceptLinkList_AddNewChildOperation;
case 44:
return myConceptLinkNameRefExpression;
case 45:
return myConceptLinkQualifier;
case 46:
return myConceptLinkRefExpression;
case 47:
return myConceptLinkRefQualifier;
case 48:
return myConceptLink_SetNewChildOperation;
case 49:
return myConceptLink_SetTargetOperation;
case 50:
return myConceptModelReferenceExpression;
case 51:
return myConceptModel_AddRootOperation;
case 52:
return myConceptModel_CreateNewNodeOperation;
case 53:
return myConceptModel_CreateNewRootNodeOperation;
case 54:
return myConceptModel_GetLongNameOperation;
case 55:
return myConceptModel_GetModule;
case 56:
return myConceptModel_NodesIncludingImportedOperation;
case 57:
return myConceptModel_NodesOperation;
case 58:
return myConceptModel_RootsIncludingImportedOperation;
case 59:
return myConceptModel_RootsOperation;
case 60:
return myConceptModuleReferenceExpression;
case 61:
return myConceptNodeAttributeQualifier;
case 62:
return myConceptNodePointerExpression;
case 63:
return myConceptNodeRefExpression;
case 64:
return myConceptNode_ConceptMethodCall;
case 65:
return myConceptNode_CopyOperation;
case 66:
return myConceptNode_DeleteOperation;
case 67:
return myConceptNode_DetachOperation;
case 68:
return myConceptNode_GetAllSiblingsOperation;
case 69:
return myConceptNode_GetAncestorOperation;
case 70:
return myConceptNode_GetAncestorsOperation;
case 71:
return myConceptNode_GetChildrenOperation;
case 72:
return myConceptNode_GetConceptOperation;
case 73:
return myConceptNode_GetContainingLinkOperation;
case 74:
return myConceptNode_GetContainingRoleOperation;
case 75:
return myConceptNode_GetContainingRootOperation;
case 76:
return myConceptNode_GetDescendantsOperation;
case 77:
return myConceptNode_GetIndexInParentOperation;
case 78:
return myConceptNode_GetModelOperation;
case 79:
return myConceptNode_GetNextSiblingOperation;
case 80:
return myConceptNode_GetNextSiblingsOperation;
case 81:
return myConceptNode_GetParentOperation;
case 82:
return myConceptNode_GetPrevSiblingOperation;
case 83:
return myConceptNode_GetPrevSiblingsOperation;
case 84:
return myConceptNode_GetReferenceOperation;
case 85:
return myConceptNode_GetReferencesOperation;
case 86:
return myConceptNode_GetReferentSearchScopeOperation;
case 87:
return myConceptNode_GetSConceptOperation;
case 88:
return myConceptNode_InsertNewNextSiblingOperation;
case 89:
return myConceptNode_InsertNewPrevSiblingOperation;
case 90:
return myConceptNode_InsertNextSiblingOperation;
case 91:
return myConceptNode_InsertPrevSiblingOperation;
case 92:
return myConceptNode_IsAttributeOperation;
case 93:
return myConceptNode_IsInstanceOfOperation;
case 94:
return myConceptNode_IsNotNullOperation;
case 95:
return myConceptNode_IsNullOperation;
case 96:
return myConceptNode_IsRoleOperation;
case 97:
return myConceptNode_ReplaceWithAnotherOperation;
case 98:
return myConceptNode_ReplaceWithNewOperation;
case 99:
return myConceptOfConceptOperation;
case 100:
return myConceptOperationParm_Concept;
case 101:
return myConceptOperationParm_ConceptList;
case 102:
return myConceptOperationParm_Inclusion;
case 103:
return myConceptOperationParm_LinkQualifier;
case 104:
return myConceptOperationParm_Root;
case 105:
return myConceptOperationParm_SameMetaLevel;
case 106:
return myConceptOperationParm_StopConceptList;
case 107:
return myConceptPoundExpression;
case 108:
return myConceptPropertyAttributeQualifier;
case 109:
return myConceptPropertyIdRefExpression;
case 110:
return myConceptPropertyNameRefExpression;
case 111:
return myConceptPropertyQualifier;
case 112:
return myConceptProperty_HasValue_Enum;
case 113:
return myConceptProperty_HasValue_Simple;
case 114:
return myConceptProperty_RemoveOperation;
case 115:
return myConceptProperty_SetOperation;
case 116:
return myConceptRefConcept_Reference;
case 117:
return myConceptReference_GetLinkDeclarationOperation;
case 118:
return myConceptReference_GetResolveInfo;
case 119:
return myConceptReference_GetRoleOperation;
case 120:
return myConceptReference_GetTargetOperation;
case 121:
return myConceptSConceptType;
case 122:
return myConceptSConceptTypeSConcept;
case 123:
return myConceptSEnumMemberOperation;
case 124:
return myConceptSEnumMemberType;
case 125:
return myConceptSEnumOperation;
case 126:
return myConceptSEnumOperationInvocation;
case 127:
return myConceptSEnum_MemberForNameOperation;
case 128:
return myConceptSEnum_MemberForValueOperation;
case 129:
return myConceptSEnum_MemberOperation;
case 130:
return myConceptSEnum_MembersOperation;
case 131:
return myConceptSLinkAccess;
case 132:
return myConceptSLinkImplicitSelect;
case 133:
return myConceptSLinkListAccess;
case 134:
return myConceptSModelType;
case 135:
return myConceptSNodeCreator;
case 136:
return myConceptSNodeListCreator;
case 137:
return myConceptSNodeListType;
case 138:
return myConceptSNodeOperation;
case 139:
return myConceptSNodeType;
case 140:
return myConceptSNodeTypeCastExpression;
case 141:
return myConceptSPropertyAccess;
case 142:
return myConceptSReferenceType;
case 143:
return myConceptSearchScopeType;
case 144:
return myConceptSearchScope_ContainsOperation;
case 145:
return myConceptSemanticDowncastExpression;
default :
return null;
}
}
