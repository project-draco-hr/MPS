{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AllAttributeQualifier","jetbrains.mps.lang.smodel.structure.AttributeQualifier",false,new String[]{"jetbrains.mps.lang.smodel.structure.AttributeQualifier"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AsNodeOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AttributeAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.smodel.structure.ILinkAccess"},new String[]{},new String[]{},new String[]{"qualifier"},new boolean[]{false});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.AttributeQualifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.CheckedModuleReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"moduleId"},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression","jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression"},new String[]{},new String[]{"targetNode"},new String[]{"parent"},new boolean[]{false});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptPropertyNameRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration","conceptPropertyDeclaration"},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"expression","case"},new boolean[]{false,true});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatementCase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"concept","body"},new boolean[]{false,false});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_FindInstances","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"scope"},new boolean[]{false});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"smodel","scope"},new boolean[]{false,false});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"conceptArgument"},new boolean[]{false});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"conceptArgument"},new boolean[]{false});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"conceptArgument"},new boolean[]{false});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Concept_NewInstance","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"prototypeNode"},new boolean[]{false});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.EnumMemberReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"enumMember"},new String[]{},new boolean[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"enum","member"},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.smodel.structure.SEnumMemberOperation","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.smodel.structure.SEnumMemberOperation","jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ILinkAccess",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ILinkQualifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IPropertyQualifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IRefConceptArg",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IReferenceOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"nodeConcept"},new String[]{"nodeExpression","body","variable"},new boolean[]{false,false,false});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IfInstanceOfVarReference","jetbrains.mps.baseLanguage.structure.BaseVariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableReference"},new String[]{},new String[]{"instanceOfVariable"},new String[]{},new boolean[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable","jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LanguageReferenceExpression","jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression",false,new String[]{"jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier","jetbrains.mps.lang.smodel.structure.AttributeQualifier",false,new String[]{"jetbrains.mps.lang.smodel.structure.AttributeQualifier"},new String[]{},new String[]{"attributeConcept"},new String[]{"linkQualifier"},new boolean[]{false});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkList_AddAllOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"childNodes"},new boolean[]{false});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkList_AddChildOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"childNode"},new boolean[]{false});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkList_InsertChildFirstOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"childNode"},new boolean[]{false});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkList_RemoveAllChildrenOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkNameRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration","linkDeclaration"},new String[]{},new boolean[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkQualifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.ILinkQualifier"},new String[]{},new String[]{"link"},new String[]{},new boolean[]{});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration","linkDeclaration"},new String[]{},new boolean[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.LinkRefQualifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier"},new String[]{},new String[]{"link"},new String[]{},new boolean[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Link_DeleteChildOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"linkTarget"},new boolean[]{false});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"name","stereotype","fqName"},new String[]{},new String[]{},new boolean[]{});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_AddRootOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"nodeArgument"},new boolean[]{false});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{"nodeId","prototypeNode"},new boolean[]{false,false});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation","jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_GetLongNameOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_GetModule","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{"scope"},new boolean[]{false});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_NodesOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{"scope"},new boolean[]{false});
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Model_RootsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"name","moduleId"},new String[]{},new String[]{},new boolean[]{});
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier","jetbrains.mps.lang.smodel.structure.AttributeQualifier",false,new String[]{"jetbrains.mps.lang.smodel.structure.AttributeQualifier"},new String[]{},new String[]{"attributeConcept"},new String[]{},new boolean[]{});
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.NodePointerExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"referentNode"},new String[]{},new boolean[]{});
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.NodeRefExpression","jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression"},new String[]{},new String[]{"referentNode"},new String[]{},new boolean[]{});
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{"directCall"},new String[]{"conceptMethodDeclaration"},new String[]{},new boolean[]{});
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_CopyOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_DeleteOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_DetachOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetModelOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetParentOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"linkQualifier"},new boolean[]{false});
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"referenceLink"},new String[]{"operationContext"},new boolean[]{false});
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"insertedNode"},new boolean[]{false});
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"insertedNode"},new boolean[]{false});
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"conceptArgument"},new boolean[]{false});
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_IsNullOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"conceptOfParent","linkInParent"},new String[]{},new boolean[]{});
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"replacementNode"},new boolean[]{false});
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_Concept","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"conceptArgument"},new boolean[]{false});
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"concept"},new boolean[]{true});
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer"},new String[]{},new String[]{},new String[]{"linkQualifier"},new boolean[]{false});
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_Root","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_SameMetaLevel","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter",false,new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"concept"},new boolean[]{true});
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.PoundExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier","jetbrains.mps.lang.smodel.structure.IPropertyQualifier","jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier","jetbrains.mps.lang.smodel.structure.ILinkQualifier","jetbrains.mps.lang.smodel.structure.IRefConceptArg"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier","jetbrains.mps.lang.smodel.structure.AttributeQualifier",false,new String[]{"jetbrains.mps.lang.smodel.structure.AttributeQualifier"},new String[]{},new String[]{"attributeConcept"},new String[]{"propertyQualifier"},new boolean[]{false});
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration","propertyDeclaration"},new String[]{},new boolean[]{});
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.PropertyQualifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IPropertyQualifier"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{});
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false});
case 114:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false});
case 115:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Property_RemoveOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 116:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Property_SetOperation","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false});
case 117:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.ReadConceptReferenceExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{});
case 118:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.RefConcept_Reference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IRefConceptArg"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{});
case 119:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IReferenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 120:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IReferenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 121:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IReferenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 122:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.IReferenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 123:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SConceptLinkAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"conceptLinkDeclaration"},new String[]{},new boolean[]{});
case 124:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"conceptProperty"},new String[]{},new boolean[]{});
case 125:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SConceptType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"conceptDeclaraton"},new String[]{},new boolean[]{});
case 126:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnumMemberOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 127:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnumMemberType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"enum"},new String[]{},new boolean[]{});
case 128:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnumOperation",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 129:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"enumDeclaration"},new String[]{"operation"},new boolean[]{false});
case 130:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.SEnumOperation"},new String[]{},new String[]{},new String[]{"nameExpression"},new boolean[]{false});
case 131:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.SEnumOperation"},new String[]{},new String[]{},new String[]{"valueExpression"},new boolean[]{false});
case 132:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.SEnumOperation"},new String[]{},new String[]{"member"},new String[]{},new boolean[]{});
case 133:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.smodel.structure.SEnumOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 134:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SLinkAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.smodel.structure.ILinkAccess"},new String[]{},new String[]{"link"},new String[]{},new boolean[]{});
case 135:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"link"},new String[]{},new boolean[]{});
case 136:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SLinkListAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.smodel.structure.ILinkAccess"},new String[]{},new String[]{"link"},new String[]{},new boolean[]{});
case 137:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SModelType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 138:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"createdType","prototypeNode"},new boolean[]{false,false});
case 139:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeListCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"createdType"},new boolean[]{false});
case 140:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeListType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{"elementConcept"},new String[]{},new boolean[]{});
case 141:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{"parameter"},new boolean[]{true});
case 142:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"concept"},new String[]{},new boolean[]{});
case 143:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"asCast"},new String[]{"concept"},new String[]{"leftExpression"},new boolean[]{false});
case 144:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SPropertyAccess","jetbrains.mps.lang.smodel.structure.SNodeOperation",false,new String[]{"jetbrains.mps.lang.smodel.structure.SNodeOperation"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{});
case 145:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SReferenceType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 146:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SearchScopeType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 147:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{"nodeToCheck"},new boolean[]{false});
case 148:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"leftExpression"},new boolean[]{false});
case 149:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"concept","methodDeclaration"},new String[]{},new boolean[]{});
case 150:
return new CompiledConceptDescriptor("jetbrains.mps.lang.smodel.structure._LinkAccessT","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IInternalType"},new String[]{"singularCradinality","aggregation"},new String[]{"targetConcept"},new String[]{},new boolean[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
