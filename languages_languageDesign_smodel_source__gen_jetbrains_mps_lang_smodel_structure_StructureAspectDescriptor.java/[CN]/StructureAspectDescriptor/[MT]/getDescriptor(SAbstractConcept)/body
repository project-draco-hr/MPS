{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0og.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractNodeRefExpression;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractOperationParameter;
  }
break;
case 2:
if (true) {
return myConceptAbstractTypeCastExpression;
}
break;
case 3:
if (true) {
return myConceptAllAttributeQualifier;
}
break;
case 4:
if (true) {
return myConceptAsNodeOperation;
}
break;
case 5:
if (true) {
return myConceptAsSConcept;
}
break;
case 6:
if (true) {
return myConceptAttributeAccess;
}
break;
case 7:
if (true) {
return myConceptAttributeQualifier;
}
break;
case 8:
if (true) {
return myConceptBootstrapAwareMetaObject;
}
break;
case 9:
if (true) {
return myConceptCheckedModuleQualifiedName;
}
break;
case 10:
if (true) {
return myConceptCheckedModuleReference;
}
break;
case 11:
if (true) {
return myConceptChildAttributeQualifier;
}
break;
case 12:
if (true) {
return myConceptChildNodeRefExpression;
}
break;
case 13:
if (true) {
return myConceptConceptAliasOperation;
}
break;
case 14:
if (true) {
return myConceptConceptFqNameRefExpression;
}
break;
case 15:
if (true) {
return myConceptConceptId;
}
break;
case 16:
if (true) {
return myConceptConceptIdRefExpression;
}
break;
case 17:
if (true) {
return myConceptConceptIdentity;
}
break;
case 18:
if (true) {
return myConceptConceptNodeType;
}
break;
case 19:
if (true) {
return myConceptConceptRefExpression;
}
break;
case 20:
if (true) {
return myConceptConceptReference;
}
break;
case 21:
if (true) {
return myConceptConceptShortDescriptionOperation;
}
break;
case 22:
if (true) {
return myConceptConceptSwitchStatement;
}
break;
case 23:
if (true) {
return myConceptConcept_GetAllSubConcepts;
}
break;
case 24:
if (true) {
return myConceptConcept_GetAllSuperConcepts;
}
break;
case 25:
if (true) {
return myConceptConcept_GetDirectSuperConcepts;
}
break;
case 26:
if (true) {
return myConceptConcept_GetHierarchy;
}
break;
case 27:
if (true) {
return myConceptConcept_IsExactlyOperation;
}
break;
case 28:
if (true) {
return myConceptConcept_IsSubConceptOfOperation;
}
break;
case 29:
if (true) {
return myConceptConcept_IsSuperConceptOfOperation;
}
break;
case 30:
if (true) {
return myConceptConcept_NewInstance;
}
break;
case 31:
if (true) {
return myConceptEnumMemberReference;
}
break;
case 32:
if (true) {
return myConceptEnumMemberValueRefExpression;
}
break;
case 33:
if (true) {
return myConceptEnumMember_NameOperation;
}
break;
case 34:
if (true) {
return myConceptEnumMember_ValueOperation;
}
break;
case 35:
if (true) {
return myConceptEqualsStructurallyExpression;
}
break;
case 36:
if (true) {
return myConceptExactConceptCase;
}
break;
case 37:
if (true) {
return myConceptIConceptSwitchCase;
}
break;
case 38:
if (true) {
return myConceptILinkAccess;
}
break;
case 39:
if (true) {
return myConceptILinkAccessQualifier;
}
break;
case 40:
if (true) {
return myConceptILinkAccessQualifierContainer;
}
break;
case 41:
if (true) {
return myConceptILinkQualifier;
}
break;
case 42:
if (true) {
return myConceptIPropertyQualifier;
}
break;
case 43:
if (true) {
return myConceptIRefConceptArg;
}
break;
case 44:
if (true) {
return myConceptIReferenceOperation;
}
break;
case 45:
if (true) {
return myConceptIfInstanceOfStatement;
}
break;
case 46:
if (true) {
return myConceptIfInstanceOfVarReference;
}
break;
case 47:
if (true) {
return myConceptIfInstanceOfVariable;
}
break;
case 48:
if (true) {
return myConceptLanguageId;
}
break;
case 49:
if (true) {
return myConceptLanguageIdentity;
}
break;
case 50:
if (true) {
return myConceptLanguageRefExpression;
}
break;
case 51:
if (true) {
return myConceptLanguageReferenceExpression;
}
break;
case 52:
if (true) {
return myConceptLinkAttributeQualifier;
}
break;
case 53:
if (true) {
return myConceptLinkIdRefExpression;
}
break;
case 54:
if (true) {
return myConceptLinkList_AddNewChildOperation;
}
break;
case 55:
if (true) {
return myConceptLinkNameRefExpression;
}
break;
case 56:
if (true) {
return myConceptLinkQualifier;
}
break;
case 57:
if (true) {
return myConceptLinkRefExpression;
}
break;
case 58:
if (true) {
return myConceptLinkRefQualifier;
}
break;
case 59:
if (true) {
return myConceptLink_SetNewChildOperation;
}
break;
case 60:
if (true) {
return myConceptLink_SetTargetOperation;
}
break;
case 61:
if (true) {
return myConceptModelReferenceExpression;
}
break;
case 62:
if (true) {
return myConceptModel_AddRootOperation;
}
break;
case 63:
if (true) {
return myConceptModel_CreateNewNodeOperation;
}
break;
case 64:
if (true) {
return myConceptModel_CreateNewRootNodeOperation;
}
break;
case 65:
if (true) {
return myConceptModel_GetLongNameOperation;
}
break;
case 66:
if (true) {
return myConceptModel_GetModule;
}
break;
case 67:
if (true) {
return myConceptModel_NodesIncludingImportedOperation;
}
break;
case 68:
if (true) {
return myConceptModel_NodesOperation;
}
break;
case 69:
if (true) {
return myConceptModel_RootsIncludingImportedOperation;
}
break;
case 70:
if (true) {
return myConceptModel_RootsOperation;
}
break;
case 71:
if (true) {
return myConceptModuleIdentity;
}
break;
case 72:
if (true) {
return myConceptModulePointer;
}
break;
case 73:
if (true) {
return myConceptModuleRefExpression;
}
break;
case 74:
if (true) {
return myConceptModuleReferenceExpression;
}
break;
case 75:
if (true) {
return myConceptNodeAttributeQualifier;
}
break;
case 76:
if (true) {
return myConceptNodePointerExpression;
}
break;
case 77:
if (true) {
return myConceptNodeRefExpression;
}
break;
case 78:
if (true) {
return myConceptNode_ConceptMethodCall;
}
break;
case 79:
if (true) {
return myConceptNode_CopyOperation;
}
break;
case 80:
if (true) {
return myConceptNode_DeleteOperation;
}
break;
case 81:
if (true) {
return myConceptNode_DetachOperation;
}
break;
case 82:
if (true) {
return myConceptNode_GetAllSiblingsOperation;
}
break;
case 83:
if (true) {
return myConceptNode_GetAncestorOperation;
}
break;
case 84:
if (true) {
return myConceptNode_GetAncestorsOperation;
}
break;
case 85:
if (true) {
return myConceptNode_GetChildrenAndChildAttributesOperation;
}
break;
case 86:
if (true) {
return myConceptNode_GetChildrenOperation;
}
break;
case 87:
if (true) {
return myConceptNode_GetConceptOperation;
}
break;
case 88:
if (true) {
return myConceptNode_GetContainingLinkOperation;
}
break;
case 89:
if (true) {
return myConceptNode_GetContainingRoleOperation;
}
break;
case 90:
if (true) {
return myConceptNode_GetContainingRootOperation;
}
break;
case 91:
if (true) {
return myConceptNode_GetDescendantsOperation;
}
break;
case 92:
if (true) {
return myConceptNode_GetIndexInParentOperation;
}
break;
case 93:
if (true) {
return myConceptNode_GetModelOperation;
}
break;
case 94:
if (true) {
return myConceptNode_GetNextSiblingOperation;
}
break;
case 95:
if (true) {
return myConceptNode_GetNextSiblingsOperation;
}
break;
case 96:
if (true) {
return myConceptNode_GetParentOperation;
}
break;
case 97:
if (true) {
return myConceptNode_GetPrevSiblingOperation;
}
break;
case 98:
if (true) {
return myConceptNode_GetPrevSiblingsOperation;
}
break;
case 99:
if (true) {
return myConceptNode_GetReferenceOperation;
}
break;
case 100:
if (true) {
return myConceptNode_GetReferencesOperation;
}
break;
case 101:
if (true) {
return myConceptNode_GetReferentSearchScopeOperation;
}
break;
case 102:
if (true) {
return myConceptNode_GetSConceptOperation;
}
break;
case 103:
if (true) {
return myConceptNode_InsertNewNextSiblingOperation;
}
break;
case 104:
if (true) {
return myConceptNode_InsertNewPrevSiblingOperation;
}
break;
case 105:
if (true) {
return myConceptNode_InsertNextSiblingOperation;
}
break;
case 106:
if (true) {
return myConceptNode_InsertPrevSiblingOperation;
}
break;
case 107:
if (true) {
return myConceptNode_IsAttributeOperation;
}
break;
case 108:
if (true) {
return myConceptNode_IsInstanceOfOperation;
}
break;
case 109:
if (true) {
return myConceptNode_IsNotNullOperation;
}
break;
case 110:
if (true) {
return myConceptNode_IsNullOperation;
}
break;
case 111:
if (true) {
return myConceptNode_IsRoleOperation;
}
break;
case 112:
if (true) {
return myConceptNode_PointerOperation;
}
break;
case 113:
if (true) {
return myConceptNode_ReplaceWithAnotherOperation;
}
break;
case 114:
if (true) {
return myConceptNode_ReplaceWithNewOperation;
}
break;
case 115:
if (true) {
return myConceptOfConceptOperation;
}
break;
case 116:
if (true) {
return myConceptOperationParm_Concept;
}
break;
case 117:
if (true) {
return myConceptOperationParm_ConceptList;
}
break;
case 118:
if (true) {
return myConceptOperationParm_Inclusion;
}
break;
case 119:
if (true) {
return myConceptOperationParm_LinkQualifier;
}
break;
case 120:
if (true) {
return myConceptOperationParm_Root;
}
break;
case 121:
if (true) {
return myConceptOperationParm_SameMetaLevel;
}
break;
case 122:
if (true) {
return myConceptOperationParm_StopConceptList;
}
break;
case 123:
if (true) {
return myConceptPoundExpression;
}
break;
case 124:
if (true) {
return myConceptPropertyAttributeQualifier;
}
break;
case 125:
if (true) {
return myConceptPropertyId;
}
break;
case 126:
if (true) {
return myConceptPropertyIdRefExpression;
}
break;
case 127:
if (true) {
return myConceptPropertyIdentity;
}
break;
case 128:
if (true) {
return myConceptPropertyNameRefExpression;
}
break;
case 129:
if (true) {
return myConceptPropertyQualifier;
}
break;
case 130:
if (true) {
return myConceptProperty_HasValue_Enum;
}
break;
case 131:
if (true) {
return myConceptProperty_HasValue_Simple;
}
break;
case 132:
if (true) {
return myConceptProperty_RemoveOperation;
}
break;
case 133:
if (true) {
return myConceptProperty_SetOperation;
}
break;
case 134:
if (true) {
return myConceptRefConcept_Reference;
}
break;
case 135:
if (true) {
return myConceptReference_GetLinkDeclarationOperation;
}
break;
case 136:
if (true) {
return myConceptReference_GetResolveInfo;
}
break;
case 137:
if (true) {
return myConceptReference_GetRoleOperation;
}
break;
case 138:
if (true) {
return myConceptReference_GetTargetOperation;
}
break;
case 139:
if (true) {
return myConceptSConceptOperation;
}
break;
case 140:
if (true) {
return myConceptSConceptType;
}
break;
case 141:
if (true) {
return myConceptSConceptTypeCastExpression;
}
break;
case 142:
if (true) {
return myConceptSEnumMemberOperation;
}
break;
case 143:
if (true) {
return myConceptSEnumMemberType;
}
break;
case 144:
if (true) {
return myConceptSEnumOperation;
}
break;
case 145:
if (true) {
return myConceptSEnumOperationInvocation;
}
break;
case 146:
if (true) {
return myConceptSEnum_MemberForNameOperation;
}
break;
case 147:
if (true) {
return myConceptSEnum_MemberForValueOperation;
}
break;
case 148:
if (true) {
return myConceptSEnum_MemberOperation;
}
break;
case 149:
if (true) {
return myConceptSEnum_MembersOperation;
}
break;
case 150:
if (true) {
return myConceptSLinkAccess;
}
break;
case 151:
if (true) {
return myConceptSLinkImplicitSelect;
}
break;
case 152:
if (true) {
return myConceptSLinkListAccess;
}
break;
case 153:
if (true) {
return myConceptSModelType;
}
break;
case 154:
if (true) {
return myConceptSNodeCreator;
}
break;
case 155:
if (true) {
return myConceptSNodeListCreator;
}
break;
case 156:
if (true) {
return myConceptSNodeListType;
}
break;
case 157:
if (true) {
return myConceptSNodeOperation;
}
break;
case 158:
if (true) {
return myConceptSNodeType;
}
break;
case 159:
if (true) {
return myConceptSNodeTypeCastExpression;
}
break;
case 160:
if (true) {
return myConceptSPropertyAccess;
}
break;
case 161:
if (true) {
return myConceptSReferenceType;
}
break;
case 162:
if (true) {
return myConceptSearchScopeType;
}
break;
case 163:
if (true) {
return myConceptSearchScope_ContainsOperation;
}
break;
case 164:
if (true) {
return myConceptSemanticDowncastExpression;
}
break;
case 165:
if (true) {
return myConceptSubconceptCase;
}
break;
default :
}
}
return null;
}
