{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ib.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptApplyTo_Function;
      }
    break;
case 1:
  if (true) {
    return myConceptCheckProperitesOperation;
  }
break;
case 2:
if (true) {
return myConceptCheckProperties_Function;
}
break;
case 3:
if (true) {
return myConceptConfiguration_Parameter;
}
break;
case 4:
if (true) {
return myConceptCreateEditor_Function;
}
break;
case 5:
if (true) {
return myConceptDeprecatedAnnotation;
}
break;
case 6:
if (true) {
return myConceptDispose_Function;
}
break;
case 7:
if (true) {
return myConceptEditorExpression;
}
break;
case 8:
if (true) {
return myConceptEditorOperationCall;
}
break;
case 9:
if (true) {
return myConceptEditorOperationDeclaration;
}
break;
case 10:
if (true) {
return myConceptEditorPropertyDeclaration;
}
break;
case 11:
if (true) {
return myConceptEditorPropertyReference;
}
break;
case 12:
if (true) {
return myConceptGetEditorOperation;
}
break;
case 13:
if (true) {
return myConceptGridBagConstraints;
}
break;
case 14:
if (true) {
return myConceptIPersistentPropertyHolder;
}
break;
case 15:
if (true) {
return myConceptPersistentConfiguration;
}
break;
case 16:
if (true) {
return myConceptPersistentConfigurationAssistent;
}
break;
case 17:
if (true) {
return myConceptPersistentConfigurationMethod;
}
break;
case 18:
if (true) {
return myConceptPersistentConfigurationTemplate;
}
break;
case 19:
if (true) {
return myConceptPersistentConfigurationTemplateInitializer;
}
break;
case 20:
if (true) {
return myConceptPersistentConfigurationType;
}
break;
case 21:
if (true) {
return myConceptPersistentPropertyDeclaration;
}
break;
case 22:
if (true) {
return myConceptPersistentPropertyReferenceOperation;
}
break;
case 23:
if (true) {
return myConceptReportConfigurationErrorStatement;
}
break;
case 24:
if (true) {
return myConceptResetFrom_Function;
}
break;
case 25:
if (true) {
return myConceptSettingsEditor;
}
break;
case 26:
if (true) {
return myConceptSettingsEditorType;
}
break;
case 27:
if (true) {
return myConceptTemplateParameter;
}
break;
case 28:
if (true) {
return myConceptTemplateParameterReference;
}
break;
case 29:
if (true) {
return myConceptTemplatePersistentConfigurationType;
}
break;
default :
}
}
return null;
}
