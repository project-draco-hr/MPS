{
  List<SNode> result=new ArrayList<SNode>();
  ListSequence.fromList(result).addSequence(ListSequence.fromList(scope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
));
  ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(kind));
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isInstanceOf(it,NameUtil.nodeFQName(hidingRoot))) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept"),"name")));
    }
  }
));
  return result;
}
