{
  List<SNode> result=new ArrayList<SNode>();
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(scope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it.isInstanceOfConcept(kindConceptFqName);
    }
  }
));
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it.isInstanceOfConcept(kindConceptFqName);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(it.isInstanceOfConcept(hidingRootConceptFqName)) || !(SetSequence.fromSet(names).contains(it.getName()));
    }
  }
));
  return result;
}
