{
  final List<SLanguage> languages=ListSequence.fromListAndArray(new ArrayList<SLanguage>(),MetaAdapterFactory.getLanguage(new UUID(239,0),"lang0"),MetaAdapterFactory.getLanguage(new UUID(239,1),"lang1"));
  List<MigrationScript> scripts=ListSequence.fromListAndArray(new ArrayList<MigrationScript>(),new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(0),0){
    public Iterable<MigrationScriptReference> executeAfter(){
      return Sequence.<MigrationScriptReference>singleton(new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(1),0).getDescriptor());
    }
  }
,new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(1),0){
    public Iterable<MigrationScriptReference> executeAfter(){
      Sequence.<MigrationScriptReference>singleton(new Migrations_Test.MockMigrationScript(ListSequence.fromList(languages).getElement(0),0).getDescriptor());
      return null;
    }
  }
);
  List<SModule> modules=ListSequence.fromListAndArray(new ArrayList<SModule>(),new Migrations_Test.MockModule("module0",MapSequence.<SLanguage,Integer>fromMapAndKeysArray(new HashMap<SLanguage,Integer>(),ListSequence.fromList(languages).getElement(0),ListSequence.fromList(languages).getElement(1)).withValues(0,0)),new Migrations_Test.MockModule("module1",MapSequence.<SLanguage,Integer>fromMapAndKeysArray(new HashMap<SLanguage,Integer>(),ListSequence.fromList(languages).getElement(0),ListSequence.fromList(languages).getElement(1)).withValues(0,0)));
  List<ScriptApplied> migrations=ListSequence.fromListAndArray(new ArrayList<ScriptApplied>(),new ScriptApplied(ListSequence.fromList(scripts).getElement(1),ListSequence.fromList(modules).getElement(0)),new ScriptApplied(ListSequence.fromList(scripts).getElement(0),ListSequence.fromList(modules).getElement(0)));
  return ListSequence.fromList(migrations).where(new IWhereFilter<ScriptApplied>(){
    public boolean accept(    ScriptApplied it){
      return MigrationComponent.isAvailable(it);
    }
  }
);
}
