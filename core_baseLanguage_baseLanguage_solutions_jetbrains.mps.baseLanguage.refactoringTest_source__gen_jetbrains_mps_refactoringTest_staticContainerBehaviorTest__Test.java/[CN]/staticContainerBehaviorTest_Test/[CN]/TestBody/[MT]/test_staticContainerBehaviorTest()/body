{
  this.addNodeById("1230052684554");
  this.addNodeById("1230052684570");
  this.addNodeById("1230052684583");
  this.addNodeById("1230052684588");
  SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall",null);
  SLinkOperations.setTarget(call,"baseMethodDeclaration",this.getNodeById("1230052684590"),false);
  SNode var=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
  SLinkOperations.setTarget(var,"variableDeclaration",this.getNodeById("1230052684575"),false);
  SLinkOperations.addChild(call,"actualArgument",var);
  SLinkOperations.setTarget(call,"concept",SLinkOperations.getTarget(this.getNodeById("1230052684589"),"concept",false),false);
  SNodeOperations.replaceWithAnother(this.getNodeById("1230052684580"),call);
  ExtractMethodRefactoringParameters params=new ExtractMethodRefactoringParameters(ListSequence.<SNode>fromArray(this.getNodeById("1230052684562")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFabric.createRefactoring(params);
  ref.setStaticContainer(this.getNodeById("1230052684584"));
  ref.doRefactor();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.<SNode>fromArray(this.getNodeById("1230052684555"),this.getNodeById("1230052684584")),ListSequence.<SNode>fromArray(this.getNodeById("1230052684571"),this.getNodeById("1230052684589"))));
}
