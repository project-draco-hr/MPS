{
  if (((Object)refactoringContext.getParameter("target")) instanceof SNode) {
    SNode targetNode=((SNode)((Object)refactoringContext.getParameter("target")));
    SNode concept=SNodeOperations.getConceptDeclaration(targetNode);
    ConceptAndSuperConceptsScope superConceptsScope=new ConceptAndSuperConceptsScope(concept);
    List<SNode> linkDeclarations=(List<SNode>)superConceptsScope.getLinkDeclarationsExcludingOverridden();
    Iterable<SNode> childLinkDeclarations=ListSequence.fromList(linkDeclarations).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
      }
    }
);
    Iterable<String> childLinksRoles=Sequence.fromIterable(childLinkDeclarations).<String>select(new ISelector<SNode,String>(){
      public String select(      SNode it){
        return SModelUtil.getGenuineLinkRole(it);
      }
    }
);
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      String childRole=node.getRole_();
      if (!(Sequence.fromIterable(childLinksRoles).contains(childRole))) {
        return false;
      }
      for (      SNode linkDeclaration : childLinkDeclarations) {
        if (SPropertyOperations.getString(linkDeclaration,"role").equals(childRole)) {
          if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(linkDeclaration,"target",false),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(node))))) {
            return false;
          }
        }
      }
    }
    return true;
  }
  if (((Object)refactoringContext.getParameter("target")) instanceof SModelDescriptor) {
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getConceptDeclaration(node),"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) || !(SPropertyOperations.getBoolean(SNodeOperations.castConcept(SNodeOperations.getConceptDeclaration(node),"jetbrains.mps.lang.structure.structure.ConceptDeclaration"),"rootable"))) {
        return false;
      }
    }
    return true;
  }
  return false;
}
