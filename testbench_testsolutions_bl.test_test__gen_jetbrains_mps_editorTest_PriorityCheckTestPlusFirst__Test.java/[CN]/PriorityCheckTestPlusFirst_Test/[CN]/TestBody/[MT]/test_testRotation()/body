{
  addNodeById("818296778579245155");
  addNodeById("818296778579245164");
  SNode op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7fbL,"jetbrains.mps.baseLanguage.structure.PlusExpression"));
  SNode constant=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc59b314L,"jetbrains.mps.baseLanguage.structure.IntegerConstant"));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc59b314L,0xf8cc59b315L,"value"),"" + (3));
  SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11cL,"leftExpression"),constant);
  SNodeOperations.replaceWithAnother(SNodeOperations.cast(getNodeById("818296778579252641"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfe476b758fL,"jetbrains.mps.baseLanguage.structure.MulExpression")),op);
  SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11bL,"rightExpression"),SNodeOperations.cast(getNodeById("818296778579252641"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfe476b758fL,"jetbrains.mps.baseLanguage.structure.MulExpression")));
  ParenthesisUtil.checkOperationWRTPriority(op);
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("818296778579245167"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("818296778579245158"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
    Assert.assertNull("The nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",new NodesMatcher().match(nodesBefore,nodesAfter));
  }
}
