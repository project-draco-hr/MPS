{
  List<SNode> nodesToProcess=new ArrayList<SNode>();
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.MessageStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement")));
  ListSequence.fromList(nodesToProcess).addSequence(ListSequence.fromList(SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.lang.typesystem.structure.TypeOfExpression")));
  for (  SNode node : nodesToProcess) {
    SModel originalModel=_context.getOriginalInputModel();
    String modelId=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix") ? originalModel.getLongName() : originalModel.toString());
    String nodeId=_context.getOriginalCopiedInputNode(node).getSNodeId().toString();
    SNode annotation=AttributeOperations.createAndSetAttrbiute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OriginalNodeId")),"jetbrains.mps.lang.typesystem.structure.OriginalNodeId");
    SPropertyOperations.set(annotation,"nodeId",nodeId);
    SPropertyOperations.set(annotation,"modelId",modelId);
  }
}
