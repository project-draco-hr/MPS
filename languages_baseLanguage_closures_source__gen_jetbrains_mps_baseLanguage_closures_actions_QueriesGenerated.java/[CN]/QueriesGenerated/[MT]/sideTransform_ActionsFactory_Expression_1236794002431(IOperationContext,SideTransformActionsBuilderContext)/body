{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-200093298712821347l,-8038623698278341771l),1229599010201l,"jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement")),MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1229599010201l,1232476496647l,"controlClosure")),MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1199569711397l,1199569906740l,"parameter"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068498886292l,"jetbrains.mps.baseLanguage.structure.ParameterDeclaration")));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "add formal parameter";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
