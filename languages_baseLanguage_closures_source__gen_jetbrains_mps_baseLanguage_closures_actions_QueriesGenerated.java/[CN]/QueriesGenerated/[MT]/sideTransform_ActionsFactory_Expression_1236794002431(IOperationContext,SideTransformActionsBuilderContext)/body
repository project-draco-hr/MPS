{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,"jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement")),MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,0x11ef552e307L,"controlClosure")),MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174bed3125L,0x1174bf02c34L,"parameter"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e94L,"jetbrains.mps.baseLanguage.structure.ParameterDeclaration")));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "add formal parameter";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
