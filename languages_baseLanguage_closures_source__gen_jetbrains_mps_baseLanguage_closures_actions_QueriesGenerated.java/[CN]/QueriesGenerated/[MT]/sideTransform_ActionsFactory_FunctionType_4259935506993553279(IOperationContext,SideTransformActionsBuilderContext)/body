{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0xe8770ba07b68051L,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteralType").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode ft=_context.getSourceNode();
      return SNodeOperations.replaceWithAnother(_context.getSourceNode(),_quotation_createNode_f0n48v_a0a1a0a0a(SLinkOperations.getChildren(ft,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4e013cL,"parameterType")),SLinkOperations.getTarget(ft,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4d5371L,"resultType")),SLinkOperations.getChildren(ft,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x11ad99d9c36L,"throwsType"))));
    }
    public String getMatchingText(    String pattern){
      return "literal";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "replace with literal type";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0xe8770ba07b68051L,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteralType").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0xe8770ba07b68051L,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteralType").getDeclarationNode(),null));
    }
  }
);
  return result;
}
