{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,"jetbrains.mps.baseLanguage.closures.structure.FunctionType")),MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,1214831762486l,"throwsType"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type"));
      return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,"jetbrains.mps.baseLanguage.closures.structure.FunctionType")),MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,1214831762486l,"throwsType"))).first();
    }
    public String getMatchingText(    String pattern){
      return "throws";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"),null));
    }
  }
);
  return result;
}
