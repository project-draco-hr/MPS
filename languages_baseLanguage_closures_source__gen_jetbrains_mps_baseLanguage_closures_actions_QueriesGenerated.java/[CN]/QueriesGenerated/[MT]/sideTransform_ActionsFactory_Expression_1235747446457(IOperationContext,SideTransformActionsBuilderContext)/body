{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return SNodeOperations.replaceWithAnother(_context.getSourceNode(),_quotation_createNode_hyoqyy_a0a0a0a0a(_context.getSourceNode()));
    }
    public String getMatchingText(    String pattern){
      return "(";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "invoke function";
    }
  }
);
  return result;
}
