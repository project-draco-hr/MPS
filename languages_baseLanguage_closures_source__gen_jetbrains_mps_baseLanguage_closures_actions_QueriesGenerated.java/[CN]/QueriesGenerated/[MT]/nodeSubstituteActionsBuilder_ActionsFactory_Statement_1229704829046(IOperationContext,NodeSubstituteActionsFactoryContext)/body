{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,"jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Iterable<SNode> classes=SNodeOperations.ofConcept(ClassifierScopes.getVisibleClassifiersScope(_context.getParentNode(),false).getAvailableElements(null),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
          return Sequence.fromIterable(classes).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode it){
              return ClassConcept_BehaviorDescriptor.staticMethods_id4_LVZ3pCeXr.invoke(it);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return ControlMethodUtil.isControlMethod(it);
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode ccs=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,"jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement")),null);
              SLinkOperations.setTarget(ccs,MetaAdapterFactory.getReferenceLink(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,0x11e4ba658c8L,"controlMethod"),(item));
              SNodeFactoryOperations.setNewChild(ccs,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x11e49cfed99L,0x11ef552e307L,"controlClosure"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0x11e49d1841dL,"jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral")));
              return ccs;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "custom control statement using " + INamedConcept_BehaviorDescriptor.getFqName_idhEwIO9y.invoke((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
