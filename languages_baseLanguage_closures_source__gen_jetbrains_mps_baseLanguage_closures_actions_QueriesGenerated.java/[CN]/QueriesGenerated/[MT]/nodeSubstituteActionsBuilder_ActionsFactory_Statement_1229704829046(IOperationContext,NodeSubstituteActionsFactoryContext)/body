{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Iterable<SNode> classes=SNodeOperations.ofConcept(ClassifierScopes.getVisibleClassifiersScope(_context.getParentNode(),false).getAvailableElements(null),"jetbrains.mps.baseLanguage.structure.ClassConcept");
          return Sequence.fromIterable(classes).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode it){
              return ClassConcept_Behavior.call_staticMethods_5292274854859435867(it);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return ControlMethodUtil.isControlMethod(it);
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode ccs=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement",null);
              SLinkOperations.setTarget(ccs,MetaAdapterFactory.getReferenceLink(new UUID(-200093298712821347l,-8038623698278341771l),1229599010201l,1229629839560l,"controlMethod"),(item));
              SNodeFactoryOperations.setNewChild(ccs,MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1229599010201l,1232476496647l,"controlClosure"),"jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral");
              return ccs;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "custom control statement using " + BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getFqName_1213877404258",new Object[]{});
            }
          }
);
        }
      }
    }
  }
  return result;
}
