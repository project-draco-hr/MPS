{
  List<String> availableClasses=new ArrayList<String>();
  availableClasses.addAll(item.getAvailableClasses(pack));
  for (  String cls : availableClasses) {
    if (cls.contains("$")) {
      continue;
    }
    byte[] content=item.getClass(("".equals(pack) ? cls : pack + "." + cls));
    String conceptFqName=ClassConcept.concept;
    ClassifierKind kind=ClassifierKind.getClassifierKind(content);
    if (kind == ClassifierKind.CLASS) {
      conceptFqName=ClassConcept.concept;
    }
 else     if (kind == ClassifierKind.INTERFACE) {
      conceptFqName=Interface.concept;
    }
 else     if (kind == ClassifierKind.ANNOTATIONS) {
      conceptFqName=Annotation.concept;
    }
 else     if (kind == ClassifierKind.ENUM) {
      conceptFqName=EnumClass.concept;
    }
 else     if (kind == ClassifierKind.UNKNOWN) {
      continue;
    }
    result.add(new SNodeDescriptor(cls,conceptFqName,0,0,-1){
      @Override protected SModelReference calculateModelReference(){
        return StubHelper.uidForPackageInStubs(pack);
      }
    }
);
  }
  for (  String subpack : item.getSubpackages(pack)) {
    JavaStubs.this.iterateClasspath(item,result,subpack);
  }
}
