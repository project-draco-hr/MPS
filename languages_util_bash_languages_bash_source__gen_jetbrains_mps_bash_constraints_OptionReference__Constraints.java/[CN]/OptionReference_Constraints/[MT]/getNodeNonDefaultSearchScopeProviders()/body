{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("option",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode call=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall",false,false);
      return ExternalCommandCall_Behavior.call_getAvailableOptions_7803330421062325454(call);
    }
    public ISearchScope createNodeReferentSearchScope(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new ProviderGeneratedSearchScope(this,operationContext,_context){
        public boolean isInScope(        SNode checkedNode){
          SNode call=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall",false,false);
          Iterable<SNode> optionSetReferences=ListSequence.fromList(SLinkOperations.getTargets(call,"refToOptions",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.bash.structure.OptionSetReference");
            }
          }
);
          return Sequence.fromIterable(optionSetReferences).<Iterable<SNode>>select(new ISelector<SNode,ISequence<SNode>>(){
            public ISequence<SNode> select(            SNode it){
              return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(it,"jetbrains.mps.bash.structure.OptionSetReference"),"refToOptions",true)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return (SLinkOperations.getTarget(it,"option",false) != null);
                }
              }
).<SNode>select(new ISelector<SNode,SNode>(){
                public SNode select(                SNode it){
                  return SLinkOperations.getTarget(it,"option",false);
                }
              }
);
            }
          }
).distinct().count() == Sequence.fromIterable(optionSetReferences).count();
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:32c4fb44-9e66-4976-aa43-e37da5fe27dd(jetbrains.mps.bash.constraints)","5969077637214426941");
    }
  }
);
  return result;
}
