{
  final ITarget make=Mockups.target(context,"make");
  final ITarget res=Mockups.target(context,"res");
  final IResource resA=Mockups.resource(context,"resA");
  final IResource resB=Mockups.resource(context,"resB");
  final IResult result=Mockups.result(context,"result",true);
  context.checking(new Expectations(){
{
      atLeast(1).of(res).before();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      exactly(1).of(res).createJob();
      will(returnValue(Mockups.job(context,"resjob",new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return result;
        }
      }
)));
      atLeast(1).of(result).output();
      will(returnValue(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)));
    }
  }
);
  Mockups.allowing(context,res);
  Mockups.allowing(context,make);
  Mockups.allowing(context,result);
  TargetRange tr=new TargetRange();
  tr.addTarget(make);
  tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(),res));
  Script sc=new Script(tr,new ITarget.Name("make"));
  sc.validate();
  Assert.assertTrue(sc.isValid());
  IResult r=sc.execute(Mockups.monitor(context,"mon"));
  Assert.assertNotNull(r);
  Assert.assertTrue(r.isSucessful());
  Iterable<IResource> out=r.output();
  Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)).disjunction(Sequence.fromIterable(out)).isEmpty());
}
