{
  if ("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.IntervalType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.IntervalType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.PowExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.PowExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.VectorType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.VectorType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixNorm".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixNorm"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathContext".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathContext"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixZero".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixZero"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.LiteralI".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LiteralI"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.SineExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.SineExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.TransposeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.TransposeOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathTypeCast".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathTypeCast"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.TangentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.TangentExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.AbsExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.AbsExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.LogExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.LogExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MathSymbolIndexReference_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixUnit".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixUnit"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.Determinant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.Determinant"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigProdExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigProdExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigSumExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigSumExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.CosineExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.CosineExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigDecimalType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigDecimalType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigComplexType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigComplexType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigMinExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigMinExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathSymbol".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathSymbol"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ComplexType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ComplexType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatrixIndexWildcard_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.math.structure.VectorInitializer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.VectorInitializer"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigIntegerType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigIntegerType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ExponentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExponentExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.AbstractIndex".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.AbstractIndex"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatrixElementAccessExpression_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MatrixInitializerIndexReference_Constraints());
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"));
  }
  if ("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation"));
  }
  return null;
}
