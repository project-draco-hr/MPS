{
  Set<Intention> result=new HashSet<Intention>();
  for (  String conceptFQName : myIntentions.keySet()) {
    if (node.isInstanceOfConcept(conceptFQName)) {
      List<Intention> intentions=new ArrayList<Intention>();
      if (!instantiateParameterized) {
        intentions.addAll(myIntentions.get(conceptFQName));
      }
 else {
        for (        Intention intention : myIntentions.get(conceptFQName)) {
          if (intention.isParameterized()) {
            Method method=null;
            try {
              method=intention.getClass().getMethod("instances",SNode.class,EditorContext.class);
            }
 catch (            NoSuchMethodException e) {
              e.printStackTrace();
            }
            Object[] arguments=new Object[]{node,context};
            try {
              List<Intention> parameterizedIntentions=(List<Intention>)method.invoke(null,arguments);
              intentions.addAll(parameterizedIntentions);
            }
 catch (            IllegalAccessException e) {
              e.printStackTrace();
            }
catch (            InvocationTargetException e) {
              e.printStackTrace();
            }
          }
 else {
            intentions.add(intention);
          }
        }
      }
      Collections.sort(intentions,new Comparator<Intention>(){
        public int compare(        Intention i1,        Intention i2){
          IntentionsManager manager=IntentionsManager.getInstance();
          if (manager.intentionIsDisabled(i1) && !(manager.intentionIsDisabled(i2))) {
            return 1;
          }
          if (!manager.intentionIsDisabled(i1) && manager.intentionIsDisabled(i2)) {
            return -1;
          }
          int prio=i1.getType().getPriority() - i2.getType().getPriority();
          return prio;
        }
      }
);
      for (      final Intention intention : intentions) {
        try {
          boolean isApplicable=false;
          if (!onlyAvailableInChildren || intention.isAvailableInChildNodes()) {
            isApplicable=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
              public Boolean compute(){
                return intention.isApplicable(node,context);
              }
            }
);
          }
          if (isApplicable) {
            result.add(intention);
          }
        }
 catch (        Throwable t) {
          LOG.error("Intention's isApplicable method failed " + t.getMessage(),t);
        }
      }
    }
  }
  List<EditorMessage> messages=context.getNodeEditorComponent().getHighlightManager().getMessagesFor(node);
  for (  EditorMessage message : messages) {
    IntentionProvider intentionProvider=message.getIntentionProvider();
    if (intentionProvider != null) {
      Intention intention=intentionProvider.getIntention();
      if (intention != null) {
        if (!onlyAvailableInChildren || intention.isAvailableInChildNodes()) {
          result.add(intention);
        }
      }
    }
  }
  return Collections.unmodifiableSet(result);
}
