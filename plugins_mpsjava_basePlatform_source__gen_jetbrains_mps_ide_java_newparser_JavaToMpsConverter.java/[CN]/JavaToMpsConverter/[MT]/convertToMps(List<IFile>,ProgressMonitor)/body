{
  progress.start("Converting...",31);
  final ProgressMonitor parseProgress=progress.subTask(1);
  parseProgress.start("Parsing...",ListSequence.fromList(files).count());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      IFile file : ListSequence.fromList(files)) {
        try {
          parseFile(file);
          parseProgress.advance(1);
        }
 catch (        JavaParseException e) {
          Message msg=new Message(MessageKind.ERROR,String.format("Parse error: %s",e.getMessage()));
          if (e.getCause() != null) {
            msg.setException(e.getCause());
          }
          myMessageHandler.handle(msg);
        }
catch (        IOException e) {
          myMessageHandler.handle(new Message(MessageKind.ERROR,String.format("IO error when converting (java->mps) file %s",file.getName())).setException(e));
        }
      }
    }
  }
);
  parseProgress.done();
  int rootCount=0;
  runCommand("roots creation pass",new Runnable(){
    public void run(){
      if (myModel == null) {
        for (        String pakage : MapSequence.fromMap(classesPerPackage).keySet()) {
          final SModel model=getModel(pakage,MapSequence.fromMap(packageDirs).get(pakage));
          if (model == null) {
            continue;
          }
          ((SModelBase)model).addLanguage(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L,0xa443f952ceaf5816L,"jetbrains.mps.baseLanguage"));
          ((SModelBase)model).addLanguage(MetaAdapterFactory.getLanguage(0xf280165065d5424eL,0xbb1b463a8781b786L,"jetbrains.mps.baseLanguage.javadoc"));
          Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
          SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
            public void visit(            SNode it){
              model.addRootNode(it);
            }
          }
);
          ListSequence.fromList(mySuccessfulFiles).addSequence(ListSequence.fromList(MapSequence.fromMap(filesPerPackage).get(pakage)));
          ListSequence.fromList(myAttachedRoots).addSequence(SetSequence.fromSet(roots));
          ((EditableSModel)model).save();
          ListSequence.fromList(myModels).addElement(model);
        }
      }
 else {
        for (        SNode root : ListSequence.fromList(myRoots)) {
          myModel.addRootNode(root);
        }
        myAttachedRoots=myRoots;
        ((SModelBase)myModel).addLanguage(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L,0xa443f952ceaf5816L,"jetbrains.mps.baseLanguage"));
        ((SModelBase)myModel).addLanguage(MetaAdapterFactory.getLanguage(0xf280165065d5424eL,0xbb1b463a8781b786L,"jetbrains.mps.baseLanguage.javadoc"));
      }
      JavaParser.tryResolveUnknowns(myAttachedRoots);
    }
  }
);
  myRootCount=myAttachedRoots.size();
  ProgressMonitor resolveProgress=progress.subTask(30);
  tryResolveRefs(myAttachedRoots,FeatureKind.CLASS,resolveProgress);
  progress.done();
}
