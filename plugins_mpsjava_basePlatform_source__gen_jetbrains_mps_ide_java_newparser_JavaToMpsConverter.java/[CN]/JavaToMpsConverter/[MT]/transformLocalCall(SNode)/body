{
  SReference ref=SNodeOperations.getReference(localCall,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.LocalMethodCall","method"));
  if (!(ref instanceof StaticReference)) {
    return null;
  }
  SNode target=ref.getTargetNode();
  if (!(SNodeOperations.isInstanceOf(target,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
    return null;
  }
  Scope staticMethodScope=Scope.getScope(SNodeOperations.getParent(localCall),localCall,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  if (staticMethodScope.contains(target)) {
    return null;
  }
  SNode smc=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
  SLinkOperations.setTarget(smc,"classConcept",SNodeOperations.getAncestor(target,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),false);
  SLinkOperations.setTarget(smc,"baseMethodDeclaration",SNodeOperations.cast(target,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),false);
  for (  SNode arg : ListSequence.fromList(SLinkOperations.getTargets(localCall,"actualArgument",true))) {
    ListSequence.fromList(SLinkOperations.getTargets(smc,"actualArgument",true)).addElement(SNodeOperations.copyNode(arg));
  }
  for (  SNode arg : ListSequence.fromList(SLinkOperations.getTargets(localCall,"typeArgument",true))) {
    ListSequence.fromList(SLinkOperations.getTargets(smc,"typeArgument",true)).addElement(SNodeOperations.copyNode(arg));
  }
  return smc;
}
