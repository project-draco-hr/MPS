{
  progress.start("Code transforms",Sequence.fromIterable(nodes).count() * 5 + 1);
  final TypeChecker typeChecker=TypeChecker.getInstance();
  final List<SNode> toReplaceWithArrayLength=ListSequence.fromList(new ArrayList<SNode>());
  final List<SNode> toReplaceWithArrayClone=ListSequence.fromList(new ArrayList<SNode>());
  final Map<SNode,SNode> enumConstRefs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  final Map<SNode,SNode> staticMethodQualifiers=MapSequence.fromMap(new HashMap<SNode,SNode>());
  final Map<SNode,SNode> staticFieldQualifiers=MapSequence.fromMap(new HashMap<SNode,SNode>());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : Sequence.fromIterable(nodes)) {
        for (        SNode fieldRefOp : ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b483d77aL,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"),false,new SAbstractConcept[]{}))) {
          SReference fieldRef=SNodeOperations.getReference(fieldRefOp,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b483d77aL,0x116b484a653L,"fieldDeclaration"));
          if (!((fieldRef instanceof DynamicReference && "length".equals((((DynamicReference)fieldRef).getResolveInfo()))))) {
            continue;
          }
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRefOp),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
          Iterable<SReference> operandRefs=SNodeOperations.getReferences(operand);
          if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return it instanceof DynamicReference;
            }
          }
)) {
            continue;
          }
          SNode operandType=typeChecker.getTypeOf(operand);
          if (SNodeOperations.isInstanceOf(operandType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940d819f7L,"jetbrains.mps.baseLanguage.structure.ArrayType"))) {
            ListSequence.fromList(toReplaceWithArrayLength).addElement(fieldRefOp);
          }
        }
        progress.advance(1);
        for (        SNode imco : ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118154a6332L,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),false,new SAbstractConcept[]{}))) {
          SReference fieldRef=SNodeOperations.getReference(imco,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
          if (!((fieldRef instanceof DynamicReference && "clone".equals((((DynamicReference)fieldRef).getResolveInfo()))))) {
            continue;
          }
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(imco),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
          Iterable<SReference> operandRefs=SNodeOperations.getReferences(operand);
          if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return it instanceof DynamicReference;
            }
          }
)) {
            continue;
          }
          SNode operandType=typeChecker.getTypeOf(operand);
          if (SNodeOperations.isInstanceOf(operandType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940d819f7L,"jetbrains.mps.baseLanguage.structure.ArrayType"))) {
            ListSequence.fromList(toReplaceWithArrayClone).addElement(imco);
          }
        }
        progress.advance(1);
        for (        SNode localCall : ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x6c6b6a1e379f9404L,"jetbrains.mps.baseLanguage.structure.LocalMethodCall"),false,new SAbstractConcept[]{}))) {
          SNode smc=transformLocalCall(localCall);
          if ((smc == null)) {
            continue;
          }
          MapSequence.fromMap(staticMethodQualifiers).put(localCall,smc);
        }
        progress.advance(1);
        TypeChecker typeChecker=TypeChecker.getInstance();
        for (        SNode swicthCase : ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef02cdd1bL,"jetbrains.mps.baseLanguage.structure.SwitchCase"),false,new SAbstractConcept[]{}))) {
          SNode subst=transformUnqualifedEnumUnderSwitch(swicthCase,typeChecker);
          if ((subst == null)) {
            continue;
          }
          MapSequence.fromMap(enumConstRefs).put(SNodeOperations.cast(SLinkOperations.getTarget(swicthCase,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef02cdd1bL,0x10ef02d67cfL,"expression")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,"jetbrains.mps.baseLanguage.structure.VariableReference")),subst);
        }
        progress.advance(1);
        for (        SNode varRef : ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,"jetbrains.mps.baseLanguage.structure.VariableReference"),false,new SAbstractConcept[]{}))) {
          SNode exp=transformLocalNameRef(varRef);
          if ((exp != null)) {
            MapSequence.fromMap(staticFieldQualifiers).put(varRef,exp);
            continue;
          }
          SNode subst=transformUnqualifedEnum(varRef);
          if ((subst == null)) {
            continue;
          }
          MapSequence.fromMap(enumConstRefs).put(varRef,subst);
        }
        progress.advance(1);
      }
    }
  }
);
  progress.step("updating models...");
  runCommand("Code transforms",new Runnable(){
    public void run(){
      for (      SNode fieldRefOp : ListSequence.fromList(toReplaceWithArrayLength)) {
        SNodeOperations.replaceWithNewChild(fieldRefOp,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1197781411dL,"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation"));
      }
      for (      SNode imco : ListSequence.fromList(toReplaceWithArrayClone)) {
        SNodeOperations.replaceWithNewChild(imco,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x483ee9d7f09580d6L,"jetbrains.mps.baseLanguage.structure.ArrayCloneOperation"));
      }
      for (      IMapping<SNode,SNode> pair : MapSequence.fromMap(enumConstRefs)) {
        SNodeOperations.replaceWithAnother(pair.key(),pair.value());
      }
      for (      IMapping<SNode,SNode> pair : MapSequence.fromMap(staticMethodQualifiers)) {
        SNodeOperations.replaceWithAnother(pair.key(),pair.value());
      }
      for (      IMapping<SNode,SNode> pair : MapSequence.fromMap(staticFieldQualifiers)) {
        SNodeOperations.replaceWithAnother(pair.key(),pair.value());
      }
    }
  }
);
  progress.advance(1);
  progress.done();
}
