{
  String contents=IFileUtils.getTextContents(file);
  JavaParser.JavaParseResult parseResult=myJavaParser.parseCompilationUnit(contents);
  String pkg=parseResult.getPackage();
  if (pkg == null) {
    if (!(wasDefaultPkg)) {
      myMessageHandler.handle(new Message(MessageKind.ERROR,String.format("default package is not supported in java source directory input (first such file in dir: %s)",file.getName())));
      wasDefaultPkg=true;
    }
    return;
  }
  IFile dir=file.getParent();
  if (!(DirParser.checkPackageMatchesSourceDirectory(pkg,dir))) {
    myMessageHandler.handle(new Message(MessageKind.ERROR,String.format("package %s doesn't match directory %s (in file %s)",pkg,dir.getPath(),file.getName())));
    return;
  }
  IFile currentDir=MapSequence.fromMap(packageDirs).get(pkg);
  if (currentDir == null) {
    MapSequence.fromMap(packageDirs).put(pkg,dir);
  }
  Iterable<SNode> roots=parseResult.getNodes();
  Set<SNode> classesInPackage=MapSequence.fromMap(classesPerPackage).get(pkg);
  if (classesInPackage == null) {
    classesInPackage=SetSequence.fromSet(new HashSet<SNode>(Sequence.fromIterable(roots).count()));
    MapSequence.fromMap(classesPerPackage).put(pkg,classesInPackage);
  }
  SetSequence.fromSet(classesInPackage).addSequence(Sequence.fromIterable(roots));
  List<IFile> files=MapSequence.fromMap(filesPerPackage).get(pkg);
  if (files == null) {
    files=ListSequence.fromList(new ArrayList<IFile>());
    MapSequence.fromMap(filesPerPackage).put(pkg,files);
  }
  ListSequence.fromList(files).addElement(file);
  ListSequence.fromList(myRoots).addSequence(Sequence.fromIterable(roots));
  myRootCount+=Sequence.fromIterable(roots).count();
}
