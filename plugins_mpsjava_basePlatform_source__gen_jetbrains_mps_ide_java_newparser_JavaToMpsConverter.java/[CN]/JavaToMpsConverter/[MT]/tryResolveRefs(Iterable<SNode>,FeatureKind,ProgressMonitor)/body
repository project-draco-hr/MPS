{
  progress.start("Resolving...",10);
  if (FeatureKind.CLASS.equals(level)) {
    resolveUpdatePass("top level references",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
      public Iterable<SReference> invoke(      SNode node){
        return getTopLevelRefs(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")));
      }
    }
,progress.subTask(1));
  }
  if (FeatureKind.CLASS_CONTENT.equals(level) || FeatureKind.CLASS.equals(level)) {
    resolveUpdatePass("field/method type references",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
      public Iterable<SReference> invoke(      SNode node){
        return getFieldAndMethodTypeRefs(SNodeOperations.cast(node,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember")));
      }
    }
,progress.subTask(1));
  }
  resolveUpdatePass("type references",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
    public Iterable<SReference> invoke(    SNode node){
      return getVarTypeRefs(node);
    }
  }
,progress.subTask(1));
  resolveUpdatePass("variable references",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
    public Iterable<SReference> invoke(    SNode node){
      return getVariableRefs(node);
    }
  }
,progress.subTask(1));
  resolveUpdatePass("dot operands",nodes,new _FunctionTypes._return_P1_E0<ISequence<SReference>,SNode>(){
    public ISequence<SReference> invoke(    SNode node){
      return ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression"),false,new SAbstractConcept[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          return deepReferences(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand")));
        }
      }
);
    }
  }
,progress.subTask(1));
  resolveUpdatePass("dot operations",nodes,new _FunctionTypes._return_P1_E0<ISequence<SReference>,SNode>(){
    public ISequence<SReference> invoke(    SNode node){
      return ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression"),false,new SAbstractConcept[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          if (Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand")))).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return (SReference)it instanceof DynamicReference;
            }
          }
)) {
            return ListSequence.fromList(new ArrayList<SReference>());
          }
 else {
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46b36c4L,"operation")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b483d77aL,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"))) {
              return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46b36c4L,"operation")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b483d77aL,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b483d77aL,0x116b484a653L,"fieldDeclaration")));
            }
 else             if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46b36c4L,"operation")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118154a6332L,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))) {
              return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46b36c4L,"operation")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118154a6332L,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")));
            }
 else {
              return ListSequence.fromList(new ArrayList<SReference>());
            }
          }
        }
      }
);
    }
  }
,progress.subTask(1));
  resolveUpdatePass("classifiers in static access",nodes,new _FunctionTypes._return_P1_E0<List<SReference>,SNode>(){
    public List<SReference> invoke(    SNode node){
      List<SReference> result=ListSequence.fromList(new ArrayList<SReference>());
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbbebabf09L,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),false,new SAbstractConcept[]{})).select(new ISelector<SNode,SReference>(){
        public SReference select(        SNode it){
          return SNodeOperations.getReference(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbbebabf09L,0x10a7588b546L,"classConcept"));
        }
      }
));
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940c80846L,"jetbrains.mps.baseLanguage.structure.StaticFieldReference"),false,new SAbstractConcept[]{})).select(new ISelector<SNode,SReference>(){
        public SReference select(        SNode it){
          return SNodeOperations.getReference(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940c80846L,0x10a75869f9bL,"classifier"));
        }
      }
));
      return result;
    }
  }
,progress.subTask(1));
  resolveUpdatePass("static member references",nodes,new _FunctionTypes._return_P1_E0<List<SReference>,SNode>(){
    public List<SReference> invoke(    SNode node){
      List<SReference> result=ListSequence.fromList(new ArrayList<SReference>());
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbbebabf09L,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),false,new SAbstractConcept[]{})).select(new ISelector<SNode,SReference>(){
        public SReference select(        SNode it){
          return SNodeOperations.getReference(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
        }
      }
));
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940c80846L,"jetbrains.mps.baseLanguage.structure.StaticFieldReference"),false,new SAbstractConcept[]{})).select(new ISelector<SNode,SReference>(){
        public SReference select(        SNode it){
          return SNodeOperations.getReference(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L,"variableDeclaration"));
        }
      }
));
      return result;
    }
  }
,progress.subTask(1));
  resolveUpdatePass("remaining references",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
    public Iterable<SReference> invoke(    SNode node){
      return deepReferences(node);
    }
  }
,progress.subTask(1));
  codeTransformPass(nodes,progress.subTask(1));
  removeJavaImportsPass(nodes,progress.subTask(1));
  progress.done();
}
