{
  final Map<String,SNode> importsByName=MapSequence.fromMap(new HashMap<String,SNode>());
  ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(root,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))),"entries",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,"onDemand"));
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      MapSequence.fromMap(importsByName).put(BehaviorReflection.invokeNonVirtual(String.class,it,"jetbrains.mps.baseLanguage.structure.Tokens","call_lastToken_1296023605440030462",new Object[]{}),it);
    }
  }
);
  boolean unknownPresent=false;
  boolean dynRefsPresent=false;
  Set<SNode> retain=SetSequence.fromSet(new HashSet<SNode>());
  Deque<SNode> stack=DequeSequence.fromDeque(new LinkedList<SNode>());
  DequeSequence.fromDeque(stack).pushElement(root);
  while (DequeSequence.fromDeque(stack).isNotEmpty()) {
    SNode node=DequeSequence.fromDeque(stack).popElement();
    DequeSequence.fromDeque(stack).addSequence(ListSequence.fromList(SNodeOperations.getChildren(node)));
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.IYetUnresolved")) {
      unknownPresent=true;
      break;
    }
    Iterable<? extends SReference> refs=node.getReferences();
    for (    SReference ref : Sequence.fromIterable(refs)) {
      if (!(ref instanceof DynamicReference)) {
        continue;
      }
      dynRefsPresent=true;
      String resolveInfo=((DynamicReference)ref).getResolveInfo();
      SetSequence.fromSet(retain).addElement(MapSequence.fromMap(importsByName).get(resolveInfo));
    }
  }
  if (unknownPresent) {
    return null;
  }
  if (dynRefsPresent == false) {
    return SLinkOperations.getTargets(AttributeOperations.getAttribute(root,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))),"entries",true);
  }
  Iterable<SNode> unneeded=Sequence.fromIterable(MapSequence.fromMap(importsByName).values()).subtract(SetSequence.fromSet(retain));
  return unneeded;
}
