{
  if (editor == null || editor.getRootCell() == null) {
    return false;
  }
  InspectorEditorComponent inspectorEditorComponent=null;
  NodeHighlightManager highlightManager=editor.getHighlightManager();
  NodeHighlightManager inspectorHighlightManager=inspectorEditorComponent == null ? null : inspectorEditorComponent.getHighlightManager();
  for (  final IEditorChecker checker : checkersToRecheck) {
    final LinkedHashSet<EditorMessage> messages=new LinkedHashSet<EditorMessage>();
    final EditorMessageOwner[] owners=new EditorMessageOwner[1];
    Runnable runnable=new Runnable(){
      public void run(){
        SNode node=editor.getEditedNode();
        if (node == null)         return;
        owners[0]=checker.getOwner(node);
        messages.addAll(checker.createMessages(node,editor.getOperationContext(),events,wasCheckedOnce));
      }
    }
;
    ModelAccess.instance().runReadAction(runnable);
    EditorMessageOwner owner=owners[0];
    if (owner != null) {
      highlightManager.clearForOwner(owner,false);
      if (inspectorHighlightManager != null) {
        inspectorHighlightManager.clearForOwner(owner,false);
      }
    }
    for (    EditorMessage message : messages) {
      highlightManager.mark(message,false);
      if (inspectorHighlightManager != null) {
        inspectorHighlightManager.mark(message,false);
      }
    }
  }
  for (  final IEditorChecker checker : checkersToRemove) {
    final EditorMessageOwner[] owners=new EditorMessageOwner[1];
    Runnable runnable=new Runnable(){
      public void run(){
        SNode node=editor.getEditedNode();
        if (node == null)         return;
        owners[0]=checker.getOwner(node);
      }
    }
;
    ModelAccess.instance().runReadAction(runnable);
    highlightManager.clearForOwner(owners[0],false);
    if (inspectorHighlightManager != null) {
      inspectorHighlightManager.clearForOwner(owners[0],false);
    }
  }
  highlightManager.repaintAndRebuildEditorMessages();
  if (inspectorHighlightManager != null) {
    inspectorHighlightManager.repaintAndRebuildEditorMessages();
  }
  editor.updateStatusBarMessage();
  return true;
}
