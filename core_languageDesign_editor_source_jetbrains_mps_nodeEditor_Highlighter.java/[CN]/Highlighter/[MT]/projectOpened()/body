{
  if (myThread != null && myThread.isAlive()) {
    LOG.error("trying to initialize a Highlighter being already initialized");
    return;
  }
  myClassLoaderManager.addReloadHandler(myReloadListener);
  myGlobalSModelEventsManager.addGlobalCommandListener(myModelCommandListener);
  myGlobalSModelEventsManager.addGlobalModelListener(myModelReloadListener);
  myInspectorTool=myProject.getComponent(InspectorTool.class);
  myMessageBusConnection=myProject.getMessageBus().connect();
  myMessageBusConnection.subscribe(EditorComponentCreateListener.EDITOR_COMPONENT_CREATION,new EditorComponentCreateListener(){
    @Override public void editorComponentCreated(    @NotNull EditorComponent editorComponent){
    }
    @Override public void editorComponentDisposed(    @NotNull final EditorComponent editorComponent){
      if (editorComponent == myInspectorTool.getInspector()) {
        addPendingAction(new Runnable(){
          @Override public void run(){
            myInspectorMessagesCreated=false;
          }
        }
);
      }
    }
  }
);
  ModelAccess.instance().addCommandListener(myCommandListener);
  myThread=new HighlighterThread();
  myThread.start();
  myProjectManager.addProjectManagerListener(myProjectCloseListener);
}
