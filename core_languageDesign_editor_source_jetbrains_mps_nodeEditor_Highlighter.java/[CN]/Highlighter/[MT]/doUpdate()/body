{
  if (ApplicationManager.getApplication().isDisposed()) {
    return;
  }
  List<SModelEvent> events=new ArrayList<SModelEvent>();
synchronized (EVENTS_LOCK) {
    events.addAll(myLastEvents);
    myLastEvents.clear();
  }
  Set<IEditorChecker> checkers=new LinkedHashSet<IEditorChecker>();
  Set<IEditorChecker> checkersToRemove=new LinkedHashSet<IEditorChecker>();
synchronized (CHECKERS_LOCK) {
    checkers.addAll(myCheckers);
    checkersToRemove.addAll(myCheckersToRemove);
    myCheckersToRemove.clear();
  }
  boolean isUpdated=false;
  List<IEditor> allEditors=getAllEditors();
  try {
    TypeChecker.getInstance().enableGlobalSubtypingCache();
    for (    final IEditor editor : allEditors) {
      final EditorComponent component[]=new EditorComponent[1];
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          public void run(){
            component[0]=editor.getCurrentEditorComponent();
          }
        }
);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      InvocationTargetException e) {
        e.printStackTrace();
      }
      if (component[0] != null) {
        if (updateEditorComponent(component[0],events,checkers,checkersToRemove)) {
          isUpdated=true;
        }
      }
    }
    if (myInspectorTool != null && myInspectorTool.getInspector() != null) {
      if (updateEditorComponent(myInspectorTool.getInspector(),events,checkers,checkersToRemove)) {
        isUpdated=true;
      }
    }
  }
  finally {
    TypeChecker.getInstance().clearGlobalSubtypingCache();
  }
  if (isUpdated) {
    for (    IEditor editor : allEditors) {
      editor.repaint();
      EditorComponent component=editor.getCurrentEditorComponent();
      if (component != null) {
        component.getMessagesGutter().repaint();
      }
    }
  }
  for (  IEditorChecker checker : checkers) {
    checker.checkingIterationFinished();
  }
}
