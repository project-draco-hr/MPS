{
  final Map<SNodeId,List<SNodeId>> result=new HashMap();
  ModelAccess.instance().runIndexing(new Runnable(){
    public void run(){
      try {
        SModel smodel=inputData.getUserData(BaseSNodeDescriptorIndex.PARSED_MODEL);
        if (smodel == null) {
          smodel=ModelPersistence.readModel(inputData.getContentAsText());
          if (smodel != null) {
            smodel.setLoading(true);
            inputData.putUserData(BaseSNodeDescriptorIndex.PARSED_MODEL,smodel);
          }
        }
        if (smodel == null) {
          return;
        }
        for (        SNode nextNode : smodel.allNodes()) {
          BaseAdapter adapter=nextNode.getAdapter();
          if (adapter instanceof ClassConcept) {
            ClassConcept classConcept=(ClassConcept)adapter;
            if (classConcept.getSuperclass() != null) {
              safeMap(classConcept.getSuperclass(),nextNode);
            }
            for (            ClassifierType implementednterface : classConcept.getImplementedInterfaces()) {
              safeMap(implementednterface,nextNode);
            }
            if (classConcept instanceof AnonymousClass) {
              safeMap(nextNode.getReference(AnonymousClass.CLASSIFIER),nextNode);
            }
          }
 else           if (adapter instanceof Interface) {
            Interface interfaceInstance=(Interface)adapter;
            for (            ClassifierType extendedInterface : interfaceInstance.getExtendedInterfaces()) {
              safeMap(extendedInterface,nextNode);
            }
          }
        }
      }
 catch (      IOException ex) {
      }
catch (      JDOMException ex) {
      }
    }
    private void safeMap(    ClassifierType classifierType,    SNode node){
      SReference sReference=classifierType.getNode().getReference(ClassifierType.CLASSIFIER);
      safeMap(sReference,node);
    }
    private void safeMap(    SReference reference,    SNode node){
      SNodeId key=SNodeId.createSNodeId(reference);
      if (key == null) {
        return;
      }
      List<SNodeId> successors=result.get(key);
      if (successors == null) {
        successors=new ArrayList();
        result.put(key,successors);
      }
      successors.add(new SNodeId(node));
    }
  }
);
  return result;
}
