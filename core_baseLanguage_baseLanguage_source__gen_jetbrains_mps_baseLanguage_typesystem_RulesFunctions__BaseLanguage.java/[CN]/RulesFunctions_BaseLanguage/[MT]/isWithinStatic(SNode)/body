{
  SNode ancestor=SNodeOperations.getAncestorWhereConceptInList(node,new String[]{"jetbrains.mps.baseLanguage.structure.FieldDeclaration","jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"},false,false);
  if (ancestor != null && (SNodeOperations.isInstanceOf(ancestor,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration") || SNodeOperations.isInstanceOf(ancestor,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
    return true;
  }
  SNode statementList=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  SNode prevStatementList=null;
  while ((statementList != null)) {
    prevStatementList=statementList;
    statementList=SNodeOperations.getAncestor(statementList,"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  }
  if ((prevStatementList != null)) {
    do {
      SNode matchedNode_7=SNodeOperations.getParent(prevStatementList);
{
        boolean matches_8=false;
{
          SNode matchingNode_8=SNodeOperations.getParent(prevStatementList);
          if (matchingNode_8 != null) {
            matches_8=SModelUtil_new.isAssignableConcept(matchingNode_8.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.ClassConcept");
          }
        }
        if (matches_8) {
          return SLinkOperations.getTarget(matchedNode_7,"staticInitializer",true) == prevStatementList;
        }
      }
    }
 while (false);
  }
  return false;
}
