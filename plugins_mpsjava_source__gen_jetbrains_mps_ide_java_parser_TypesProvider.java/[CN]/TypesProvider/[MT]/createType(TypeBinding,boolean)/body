{
  SModel model=myReferentsCreator.myCurrentModel;
  if (binding instanceof BaseTypeBinding) {
    if (binding == TypeBinding.BOOLEAN) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanType",null);
    }
    if (binding == TypeBinding.BYTE) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ByteType",null);
    }
    if (binding == TypeBinding.CHAR) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.CharType",null);
    }
    if (binding == TypeBinding.DOUBLE) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.DoubleType",null);
    }
    if (binding == TypeBinding.FLOAT) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FloatType",null);
    }
    if (binding == TypeBinding.INT) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.IntegerType",null);
    }
    if (binding == TypeBinding.LONG) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.LongType",null);
    }
    if (binding == TypeBinding.SHORT) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ShortType",null);
    }
    if (binding == TypeBinding.VOID) {
      return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.VoidType",null);
    }
    throw new JavaConverterException("Unknown base type : " + binding);
  }
  if (binding instanceof ArrayBinding) {
    ArrayBinding arrayBinding=(ArrayBinding)binding;
    TypeBinding componentTypeBinding=arrayBinding.leafComponentType;
    int dimensions=arrayBinding.dimensions;
    SNode outerType=(varArg ? SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.VariableArityType",null) : SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ArrayType",null));
    SNode smallestVectorType=outerType;
    while (dimensions > 1) {
      SNode newArrayType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ArrayType",null);
      setComponentType(smallestVectorType,newArrayType);
      smallestVectorType=newArrayType;
      dimensions--;
    }
    setComponentType(smallestVectorType,createType(componentTypeBinding));
    return outerType;
  }
  if (binding instanceof ReferenceBinding) {
    if (binding instanceof WildcardBinding) {
      WildcardBinding wildcardBinding=(WildcardBinding)binding;
      if (wildcardBinding.isUnboundWildcard()) {
        return SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.WildCardType",null);
      }
 else {
        if (wildcardBinding.boundKind == Wildcard.EXTENDS) {
          SNode upperBoundType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.UpperBoundType",null);
          SLinkOperations.setTarget(upperBoundType,"bound",createType(wildcardBinding.bound),true);
          return upperBoundType;
        }
 else {
          SNode lowerBoundType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.LowerBoundType",null);
          SLinkOperations.setTarget(lowerBoundType,"bound",createType(wildcardBinding.bound),true);
          return lowerBoundType;
        }
      }
    }
    if (binding instanceof ParameterizedTypeBinding) {
      ParameterizedTypeBinding parameterizedTypeBinding=(ParameterizedTypeBinding)binding;
      ReferenceBinding originalType=parameterizedTypeBinding.genericType();
      SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      result.addReference(createClassifierReference(originalType,"classifier",result));
      if (!((parameterizedTypeBinding instanceof RawTypeBinding))) {
        TypeBinding[] typeBindings=parameterizedTypeBinding.arguments;
        if (typeBindings != null) {
          for (          TypeBinding typeBinding : typeBindings) {
            ListSequence.fromList(SLinkOperations.getTargets(result,"parameter",true)).addElement(createType(typeBinding));
          }
        }
      }
      return result;
    }
    if (binding instanceof SourceTypeBinding) {
      SNode classifierType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      SLinkOperations.setTarget(classifierType,"classifier",SNodeOperations.cast(myReferentsCreator.myBindingMap.get(binding),"jetbrains.mps.baseLanguage.structure.Classifier"),false);
      SNodeOperations.getReference(classifierType,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","classifier")).setResolveInfo(new String(binding.sourceName()));
      return classifierType;
    }
    if (binding instanceof MissingTypeBinding || binding instanceof ProblemReferenceBinding) {
      SNode classifierType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      SReference reference=createErrorClassifierReference("classifier",(ReferenceBinding)binding,classifierType);
      classifierType.addReference(reference);
      return classifierType;
    }
    if (binding instanceof BinaryTypeBinding) {
      SNode classifierType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      BinaryTypeBinding binaryTypeBinding=(BinaryTypeBinding)binding;
      SReference reference=createClassifierReference(binaryTypeBinding,"classifier",classifierType);
      classifierType.addReference(reference);
      return classifierType;
    }
  }
  if (binding instanceof TypeVariableBinding) {
    TypeVariableBinding typeVariableBinding=(TypeVariableBinding)binding;
    SNode tvr=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",null);
    SNode declaringGeneric=myReferentsCreator.myBindingMap.get(typeVariableBinding.declaringElement);
    if (SNodeOperations.isInstanceOf(declaringGeneric,"jetbrains.mps.baseLanguage.structure.GenericDeclaration")) {
      SLinkOperations.setTarget(tvr,"typeVariableDeclaration",ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(declaringGeneric,"jetbrains.mps.baseLanguage.structure.GenericDeclaration"),"typeVariableDeclaration",true)).getElement(typeVariableBinding.rank),false);
    }
 else {
      throw new JavaConverterException("Declaring element for a type var is not a GenericDeclaration");
    }
    return tvr;
  }
  return null;
}
