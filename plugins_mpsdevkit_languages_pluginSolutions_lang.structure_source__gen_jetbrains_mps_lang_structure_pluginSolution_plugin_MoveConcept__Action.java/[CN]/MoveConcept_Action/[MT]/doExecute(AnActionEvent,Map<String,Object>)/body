{
  try {
    final SModelReference targetModelReference;
    List<SModelReference> myModels;
    myModels=ListSequence.fromList(((List<SModel>)(SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModel,SModelReference>(){
      public SModelReference select(      SModel it){
        return it.getReference();
      }
    }
).where(new IWhereFilter<SModelReference>(){
      public boolean accept(      SModelReference it){
        return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
      }
    }
).toListSequence();
    targetModelReference=SModelReferenceDialog.getSelectedModel(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),myModels);
    if (targetModelReference == null) {
      return;
    }
    final SRepository repository=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
    ModelAccess modelAccess=repository.getModelAccess();
    final Wrappers._T<SModel> targetModel=new Wrappers._T<SModel>();
    repository.getModelAccess().runReadInEDT(new Runnable(){
      public void run(){
        if (!(SNodeUtil.isAccessible(((SNode)MapSequence.fromMap(_params).get("concept")),repository))) {
          return;
        }
        targetModel.value=targetModelReference.resolve(repository);
        if (targetModel.value == null) {
          return;
        }
      }
    }
);
    modelAccess.executeCommandInEDT(new Runnable(){
      public void run(){
        SNode newConcept=SNodeOperations.copyNode(((SNode)MapSequence.fromMap(_params).get("concept")));
        SModelOperations.addRootNode(targetModel.value,newConcept);
        AttributeOperations.setAttribute(((SNode)MapSequence.fromMap(_params).get("concept")),new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x11d0a70ae54L,"jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")),createDeprecatedNodeAnnotation_mqohi3_a0d0a0a91a0("The concept was moved to language \"" + targetModel.value.getModule().getModuleName() + "\""));
        MigrationScriptBuilder builder=MigrationScriptBuilder.createMigrationScript(Language.getLanguageFor(SNodeOperations.getModel(((SNode)MapSequence.fromMap(_params).get("concept")))));
        SNode moveOwnMembersMethod=MoveConcept_Action.this.moveOwnMembers(((SNode)MapSequence.fromMap(_params).get("concept")),newConcept,_params);
        builder.setName("Move_concept_" + SPropertyOperations.getString(((SNode)MapSequence.fromMap(_params).get("concept")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))).appendExecuteStatements(MoveConcept_Action.this.replaceExactInstances(((SNode)MapSequence.fromMap(_params).get("concept")),newConcept,moveOwnMembersMethod,_params));
        if (moveOwnMembersMethod != null) {
          ListSequence.fromList(SLinkOperations.getChildren(builder.getScript(),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member"))).addElement(moveOwnMembersMethod);
        }
        builder.addMissingImports();
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MoveConcept",t);
    }
  }
}
