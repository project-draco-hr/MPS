{
  try {
    final SModelReference targetModelReference;
    List<SModelReference> myModels;
    myModels=ListSequence.fromList(((List<SModel>)(SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModel,SModelReference>(){
      public SModelReference select(      SModel it){
        return it.getReference();
      }
    }
).where(new IWhereFilter<SModelReference>(){
      public boolean accept(      SModelReference it){
        return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
      }
    }
).toListSequence();
    targetModelReference=SModelReferenceDialog.getSelectedModel(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),myModels);
    if (targetModelReference == null) {
      return;
    }
    final SRepository repository=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
    ModelAccess modelAccess=repository.getModelAccess();
    final Wrappers._T<SModel> targetModel=new Wrappers._T<SModel>();
    repository.getModelAccess().runReadInEDT(new Runnable(){
      public void run(){
        if (!(SNodeUtil.isAccessible(((SNode)MapSequence.fromMap(_params).get("concept")),repository))) {
          return;
        }
        targetModel.value=targetModelReference.resolve(repository);
        if (targetModel.value == null) {
          return;
        }
      }
    }
);
    modelAccess.executeCommandInEDT(new Runnable(){
      public void run(){
        MoveConceptUtil.moveConcept(((SNode)MapSequence.fromMap(_params).get("concept")),targetModel.value);
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MoveConcept",t);
    }
  }
}
