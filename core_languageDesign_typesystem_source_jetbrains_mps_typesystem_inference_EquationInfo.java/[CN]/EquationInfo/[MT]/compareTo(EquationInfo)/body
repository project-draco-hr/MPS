{
  boolean iAmBefore=false;
  boolean iAmAfter=false;
  if (myInequationIdsAfter != null && myInequationIdsAfter.contains(o.getRuleId())) {
    iAmBefore=true;
  }
  if (o.myInequationIdsBefore != null && o.myInequationIdsBefore.contains(myRuleId)) {
    iAmBefore=true;
  }
  if (myInequationIdsBefore != null && myInequationIdsBefore.contains(o.getRuleId())) {
    iAmAfter=true;
  }
  if (o.myInequationIdsAfter != null && o.myInequationIdsAfter.contains(myRuleId)) {
    iAmAfter=true;
  }
  if (iAmBefore && iAmAfter) {
    throw new RuntimeException("inequations' priorities form a contradictional cycle: " + myRuleId + " and "+ o.getRuleId());
  }
  if (iAmBefore) {
    return -1;
  }
  if (iAmAfter) {
    return 1;
  }
  return myInequationPriority - o.myInequationPriority;
}
