{
  try {
    final List<IModule> modules=ListSequence.fromList(new ArrayList<IModule>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        ListSequence.fromList(modules).addSequence(ListSequence.fromList(MPSModuleRepository.getInstance().getAllModules()));
      }
    }
);
    BaseModuleModel baseSolutionModel=new BaseModuleModel(NewRuntimeModule_Action.this.project,"runtime module"){
      public ModuleReference[] find(      IScope p0){
        return ListSequence.fromList(modules).<ModuleReference>select(new ISelector<IModule,ModuleReference>(){
          public ModuleReference select(          IModule it){
            return it.getModuleReference();
          }
        }
).toGenericArray(ModuleReference.class);
      }
      public NavigationItem doGetNavigationItem(      final ModuleReference module){
        return new BaseModuleItem(module){
          public void navigate(          boolean p0){
            if (module == null) {
              return;
            }
            Language language=(Language)NewRuntimeModule_Action.this.contextModule;
            Dependency dependency=new Dependency();
            dependency.setModuleRef(module);
            language.getModuleDescriptor().getRuntimeModules().add(dependency);
            language.save();
            ((MPSTreeNode)NewRuntimeModule_Action.this.treeNode).getTree().rebuildLater();
          }
        }
;
      }
    }
;
    ChooseByNamePopup popup=ChooseByNamePopup.createPopup(NewRuntimeModule_Action.this.project,baseSolutionModel,new FakePsiContext());
    popup.invoke(new ChooseByNamePopupComponent.Callback(){
      public void elementChosen(      Object p0){
        ((NavigationItem)p0).navigate(true);
      }
    }
,ModalityState.current(),true);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "NewRuntimeModule",t);
    }
  }
}
