{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c,descriptor.getConceptFqName())) {
case 0:
    return Collections.<ConceptEditor>singletonList(new ActionListStatement_Editor());
case 1:
  return Collections.<ConceptEditor>singletonList(new ActionsStatement_Editor());
case 2:
return Collections.<ConceptEditor>singletonList(new ComponentReference_Editor());
case 3:
return Collections.<ConceptEditor>singletonList(new ConfigurationEditorDeclaration_Editor());
case 4:
return Collections.<ConceptEditor>singletonList(new ConsoleExpression_Editor());
case 5:
return Collections.<ConceptEditor>singletonList(new ConsoleType_Editor());
case 6:
return Collections.<ConceptEditor>singletonList(new CreateRunConfigStatement_Editor());
case 7:
return Collections.<ConceptEditor>singletonList(new DisposeConsoleBlock_Editor());
case 8:
return Collections.<ConceptEditor>singletonList(new ExecuteParameterQuery_Editor());
case 9:
return Collections.<ConceptEditor>singletonList(new ExecutionConsoleStatement_Editor());
case 10:
return Collections.<ConceptEditor>singletonList(new GetUserDataExpression_Editor());
case 11:
return Collections.<ConceptEditor>singletonList(new IRunConfigPropertyInstance_Editor());
case 12:
return Collections.<ConceptEditor>singletonList(new JavaNodeConfigurationEditorDeclaration_Editor());
case 13:
return Collections.<ConceptEditor>singletonList(new JavaNodeRunConfiguration_Editor());
case 14:
return Collections.<ConceptEditor>singletonList(new JavaRunConfiguration_Editor());
case 15:
return Collections.<ConceptEditor>singletonList(new ModelCreatorTarget_Editor());
case 16:
return Collections.<ConceptEditor>singletonList(new ModuleCreatorTarget_Editor());
case 17:
return Collections.<ConceptEditor>singletonList(new NodeCreatorTarget_Editor());
case 18:
return Collections.<ConceptEditor>singletonList(new NodesCreatorTarget_Editor());
case 19:
return Collections.<ConceptEditor>singletonList(new ParametrizedExecuteBlock_Editor());
case 20:
return Collections.<ConceptEditor>singletonList(new PrepareConceptFunction_Editor());
case 21:
return Collections.<ConceptEditor>singletonList(new ProcessStatement_Editor());
case 22:
return Collections.<ConceptEditor>singletonList(new ProjectCreatorTarget_Editor());
case 23:
return Collections.<ConceptEditor>singletonList(new ProjectExpression_Editor());
case 24:
return Collections.<ConceptEditor>singletonList(new ReportErrorStatement_Editor());
case 25:
return Collections.<ConceptEditor>singletonList(new RunConfigExecutionParameterDeclaration_Editor());
case 26:
return Collections.<ConceptEditor>singletonList(new RunConfigMainNodeStatement_Editor());
case 27:
return Collections.<ConceptEditor>singletonList(new RunConfigParameterReferenceOperation_Editor());
case 28:
return Collections.<ConceptEditor>singletonList(new RunConfigType_Editor());
case 29:
return Collections.<ConceptEditor>singletonList(new RunConfigurationDeclaration_Editor());
case 30:
return Collections.<ConceptEditor>singletonList(new RunConfigurationTypeDeclaration_Editor());
case 31:
return Collections.<ConceptEditor>singletonList(new UniversalRunConfigCreator_Editor());
default :
}
return Collections.emptyList();
}
