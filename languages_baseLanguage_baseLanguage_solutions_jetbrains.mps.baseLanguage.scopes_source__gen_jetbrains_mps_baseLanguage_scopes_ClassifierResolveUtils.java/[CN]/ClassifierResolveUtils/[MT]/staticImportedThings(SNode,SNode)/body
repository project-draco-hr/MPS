{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  SModule module=SNodeOperations.getModel(imports).getModule();
  GlobalModuleDependenciesManager gmdm=new GlobalModuleDependenciesManager(module);
  Iterable<SModule> modules=gmdm.getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
  Iterable<SModel> models=Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
);
  for (  SNode imp : ListSequence.fromList(SLinkOperations.getChildren(imports,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),6050519299856556786l,28358707492429991l,"entries"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),28358707492436943l,5574384225470059890l,"static"));
    }
  }
)) {
    if (SPropertyOperations.getBoolean(imp,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),28358707492436943l,28358707492436944l,"onDemand"))) {
      String className=SPropertyOperations.getString(imp,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),6528213125912070246l,1843920760191311250l,"tokens"));
      Iterable<SNode> classes=resolveClassifierByFqNameWithNonStubPriority(models,className);
      SNode containingClas=(Sequence.fromIterable(classes).count() == 1 ? Sequence.fromIterable(classes).first() : null);
      if ((containingClas == null)) {
        continue;
      }
      Iterable<SNode> neededMembers=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),containingClas,"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.getConceptDeclaration(it) == neededConcept;
        }
      }
);
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(neededMembers));
    }
 else {
      final String memberName=Tokens_Behavior.call_lastToken_1296023605440030462(imp);
      String className=Tokens_Behavior.call_withoutLastToken_6148840541591441572(imp);
      Iterable<SNode> classes=resolveClassifierByFqNameWithNonStubPriority(models,className);
      SNode containingClas=(Sequence.fromIterable(classes).count() == 1 ? Sequence.fromIterable(classes).first() : null);
      if ((containingClas == null)) {
        continue;
      }
      SNode neededMember=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),containingClas,"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.getConceptDeclaration(it) == neededConcept;
        }
      }
).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return memberName.equals(it.getName());
        }
      }
);
      if ((neededMember == null)) {
        continue;
      }
      ListSequence.fromList(result).addElement(neededMember);
    }
  }
  return result;
}
