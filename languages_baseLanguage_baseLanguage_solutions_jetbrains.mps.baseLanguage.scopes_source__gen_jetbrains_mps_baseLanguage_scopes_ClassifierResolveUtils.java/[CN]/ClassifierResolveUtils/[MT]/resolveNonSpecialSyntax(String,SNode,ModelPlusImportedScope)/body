{
  Iterable<SNode> result=resolveClassifierByNestedName(SNodeOperations.getModel(contextNode),classifierName);
  if (Sequence.fromIterable(result).isNotEmpty()) {
    return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
  }
  result=resolveClassifierByFqName(SNodeOperations.getModel(contextNode),classifierName);
  if (Sequence.fromIterable(result).isNotEmpty()) {
    return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
  }
  SModule module=check_8z6r2b_a0i0c(SNodeOperations.getModel(contextNode));
  Iterable<SModule> visibleModules=new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
  List<SNode> res=ListSequence.fromList(new ArrayList<SNode>());
  for (  SModel model : Sequence.fromIterable(modelPlusImported.getModels())) {
    ListSequence.fromList(res).addSequence(Sequence.fromIterable(resolveClassifierByNestedName(model,classifierName)));
  }
  if (ListSequence.fromList(res).isNotEmpty()) {
    return (ListSequence.fromList(res).count() == 1 ? ListSequence.fromList(res).first() : null);
  }
  result=resolveClassifierByFqNameWithNonStubPriority(Sequence.fromIterable(visibleModules).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
),classifierName);
  return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
}
