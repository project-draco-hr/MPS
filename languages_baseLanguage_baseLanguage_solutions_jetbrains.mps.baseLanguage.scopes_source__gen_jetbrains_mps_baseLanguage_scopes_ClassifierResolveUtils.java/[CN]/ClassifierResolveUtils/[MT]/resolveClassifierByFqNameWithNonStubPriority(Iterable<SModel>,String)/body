{
  models=Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return !((it.getModule() instanceof TransientModelsModule));
    }
  }
);
  final String stubStereoType=SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);
  Iterable<SNode> result=resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return neq_8z6r2b_a0a0a0a0a0a0f0g(SModelStereotype.getStereotype(it),stubStereoType);
    }
  }
),classifierFqName);
  if (Sequence.fromIterable(result).isNotEmpty()) {
    return result;
  }
  return resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return eq_8z6r2b_a0a0a0a0a0a9a6(SModelStereotype.getStereotype(it),stubStereoType);
    }
  }
),classifierFqName);
}
