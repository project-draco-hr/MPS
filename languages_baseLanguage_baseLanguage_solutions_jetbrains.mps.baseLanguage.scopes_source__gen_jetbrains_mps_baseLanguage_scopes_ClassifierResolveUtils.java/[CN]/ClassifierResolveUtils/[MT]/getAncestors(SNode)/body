{
  final Queue<SNode> queue=QueueSequence.fromQueue(new LinkedList<SNode>());
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  QueueSequence.fromQueue(queue).addLastElement(clas);
  while (QueueSequence.fromQueue(queue).isNotEmpty()) {
    SNode claz=QueueSequence.fromQueue(queue).removeFirstElement();
    ListSequence.fromList(result).addElement(claz);
    if (SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      QueueSequence.fromQueue(queue).addLastElement(SLinkOperations.getTarget(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false));
    }
 else     if (SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      SNode supr=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"superclass",true),"classifier",false);
      if ((supr != null)) {
        QueueSequence.fromQueue(queue).addLastElement(supr);
      }
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"implementedInterface",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"classifier",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          QueueSequence.fromQueue(queue).addLastElement(it);
        }
      }
);
    }
 else     if (SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.Interface")) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"classifier",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          QueueSequence.fromQueue(queue).addLastElement(it);
        }
      }
);
    }
  }
  return ListSequence.fromList(result).skip(1);
}
