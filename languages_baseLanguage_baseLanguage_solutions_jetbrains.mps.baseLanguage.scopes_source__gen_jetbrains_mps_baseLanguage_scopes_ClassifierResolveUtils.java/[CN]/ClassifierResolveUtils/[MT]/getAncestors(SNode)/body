{
  final Queue<SNode> queue=QueueSequence.fromQueue(new LinkedList<SNode>());
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  QueueSequence.fromQueue(queue).addLastElement(clas);
  while (QueueSequence.fromQueue(queue).isNotEmpty()) {
    SNode claz=QueueSequence.fromQueue(queue).removeFirstElement();
    ListSequence.fromList(result).addElement(claz);
    if (SNodeOperations.isInstanceOf(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      QueueSequence.fromQueue(queue).addLastElement(SLinkOperations.getTarget(SNodeOperations.cast(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,1170346070688l,"classifier")));
    }
 else     if (SNodeOperations.isInstanceOf(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      SNode supr=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1165602531693l,"superclass")),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"));
      if ((supr != null)) {
        QueueSequence.fromQueue(queue).addLastElement(supr);
      }
      ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1095933932569l,"implementedInterface"))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"));
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          QueueSequence.fromQueue(queue).addLastElement(it);
        }
      }
);
    }
 else     if (SNodeOperations.isInstanceOf(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"))) {
      ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,1107797138135l,"extendedInterface"))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"));
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          QueueSequence.fromQueue(queue).addLastElement(it);
        }
      }
);
    }
  }
  return ListSequence.fromList(result).skip(1);
}
