{
  List<SNode> classes=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(classes).addElement(clas);
  final ListIterator<SNode> iter=classes.listIterator();
  while (iter.hasNext()) {
    SNode claz=iter.next();
    if (SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      iter.add(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"superclass",true),"classifier",false));
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"implementedInterface",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"classifier",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          iter.add(it);
        }
      }
);
    }
    if (SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.Interface")) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"classifier",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"classifier",false);
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          iter.add(it);
        }
      }
);
    }
  }
  return ListSequence.fromList(classes).skip(1);
}
