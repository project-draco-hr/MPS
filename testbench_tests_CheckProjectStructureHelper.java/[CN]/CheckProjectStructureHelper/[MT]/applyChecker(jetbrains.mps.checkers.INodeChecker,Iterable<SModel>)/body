{
  final List<String> errors=new ArrayList<String>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SModel sm : models) {
        if (!SModelStereotype.isUserModel(sm))         continue;
        if (SModelStereotype.isGeneratorModel(sm))         continue;
        ModuleOperationContext operationContext=new ModuleOperationContext(sm.getModule());
        for (        SNode root : jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getRoots(sm,null)) {
          Set<IErrorReporter> errorReporters=null;
          try {
            errorReporters=checker.getErrors(root,operationContext);
          }
 catch (          IllegalStateException e) {
            errors.add(e.getMessage());
          }
          for (          IErrorReporter reporter : errorReporters) {
            if (reporter.getMessageStatus().equals(MessageStatus.ERROR)) {
              if (reporter.reportError().startsWith("a class should have"))               continue;
              SNode node=reporter.getSNode();
              if (!CheckProjectStructureUtil.filterIssue(node))               continue;
              myCheckingTestStatistic.reportError();
              errors.add("Error message: " + reporter.reportError() + "   model: "+ jetbrains.mps.util.SNodeOperations.getModelLongName(node.getModel())+ " root: "+ node.getContainingRoot()+ " node: "+ node);
            }
            if (reporter.getMessageStatus().equals(MessageStatus.WARNING)) {
              myCheckingTestStatistic.reportWarning();
            }
          }
        }
      }
    }
  }
);
  return errors;
}
