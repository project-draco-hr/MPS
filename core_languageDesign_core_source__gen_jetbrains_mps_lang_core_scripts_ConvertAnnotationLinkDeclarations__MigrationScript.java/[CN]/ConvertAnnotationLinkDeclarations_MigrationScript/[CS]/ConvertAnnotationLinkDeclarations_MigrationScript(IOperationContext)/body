{
  super("Convert AnnotationLinkDeclartion to Attribute");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert AnnotationLinkDeclartion to Attribute";
    }
    public String getAdditionalInfo(){
      return "Convert AnnotationLinkDeclartion to Attribute";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode attr=SNodeOperations.cast(SLinkOperations.getTarget(node,"target",false),"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      if (SPropertyOperations.hasValue(node,"stereotype","property","node")) {
        SLinkOperations.setTarget(attr,"extends",SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.PropertyAttribute"),false);
      }
 else       if (SPropertyOperations.hasValue(node,"stereotype","link","node")) {
        SLinkOperations.setTarget(attr,"extends",SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.LinkAttribute"),false);
      }
 else {
        SLinkOperations.setTarget(attr,"extends",SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.NodeAttribute"),false);
      }
      SNode concept=(SNode)attr;
      SConceptPropertyOperations.setBoolean(concept,"multiple",SPropertyOperations.hasValue(node,"sourceCardinality","0..n","0..1"));
      SConceptPropertyOperations.setString(concept,"role",SPropertyOperations.getString(node,"role"));
      SNode attributed=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.ReferenceConceptLink",null);
      SLinkOperations.setTarget(attributed,"conceptLinkDeclaration",SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.Attribute"),"conceptLinkDeclaration",true)).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(it,"name").equals("attributed");
        }
      }
),"jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration"),false);
      SLinkOperations.setTarget(attributed,"target",SLinkOperations.getTarget(node,"source",false),false);
      ListSequence.fromList(SLinkOperations.getTargets(concept,"conceptLink",true)).addElement(attributed);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
