{
  SemanticTypeDeclaration metatype=SemanticTypeDeclaration.newInstance(model);
  metatype.setName("JavaClass");
  SemanticLinkDeclaration fieldMetalink=SemanticLinkDeclaration.newInstance(model);
  fieldMetalink.setRole(JavaClass.FIELD);
  fieldMetalink.setMetaClass(SemanticNode.AGGREGATION);
  fieldMetalink.setSourceCardinality(SemanticLinkDeclaration.CARDINALITY_0_N);
  fieldMetalink.setTargetCardinality(SemanticLinkDeclaration.CARDINALITY_1);
  fieldMetalink.setTarget(getMetatype("FieldDeclaration"));
  metatype.addSemanticLinkDeclaration(fieldMetalink);
  SemanticLinkDeclaration constructorMetalink=SemanticLinkDeclaration.newInstance(model);
  constructorMetalink.setRole(JavaClass.CONSTRUCTOR);
  constructorMetalink.setMetaClass(SemanticNode.AGGREGATION);
  constructorMetalink.setSourceCardinality(SemanticLinkDeclaration.CARDINALITY_0_N);
  constructorMetalink.setTargetCardinality(SemanticLinkDeclaration.CARDINALITY_1);
  constructorMetalink.setTarget(getMetatype("ConstructorDeclaration"));
  metatype.addSemanticLinkDeclaration(constructorMetalink);
  SemanticLinkDeclaration methodMetalink=SemanticLinkDeclaration.newInstance(model);
  methodMetalink.setRole(JavaClass.METHOD);
  methodMetalink.setMetaClass(SemanticNode.AGGREGATION);
  methodMetalink.setSourceCardinality(SemanticLinkDeclaration.CARDINALITY_0_N);
  methodMetalink.setTargetCardinality(SemanticLinkDeclaration.CARDINALITY_1);
  methodMetalink.setTarget(getMetatype("InstanceMethodDeclaration"));
  metatype.addSemanticLinkDeclaration(methodMetalink);
  return metatype;
}
