{
  final int x=editorCells.getX();
  final int y=editorCells.getY();
  if (CellLayout_Indent_Old.DO_INDENT_EVERYWHERE) {
    CellLayout_Indent_Old._doLayout(editorCells);
    return;
  }
  if (editorCells.isFolded()) {
    Font font=EditorSettings.getInstance().getDefaultEditorFont();
    FontMetrics metrics=editorCells.getEditor().getFontMetrics(font);
    editorCells.setHeight(metrics.getHeight());
    editorCells.setWidth(metrics.stringWidth(EditorCell_Collection.FOLDED_TEXT));
    for (    EditorCell cell : editorCells.dfsCells()) {
      cell.setX(editorCells.getX());
      cell.setY(editorCells.getY());
      cell.setWidth(0);
      cell.setHeight(0);
    }
    return;
  }
  TableComponent tc=editorCells.getStyle().get(StyleAttributes.TABLE_COMPONENT);
  findPairingCollections(editorCells);
  int cellCount=editorCells.getCellsCount();
  if (myDescendants != null && tc == TableComponent.HORIZONTAL_COLLECTION) {
    int maxCellsInColumn=0;
    for (int i=0; i < cellCount; i++) {
      EditorCell_Collection col=myDescendants[i];
      if (col != null)       maxCellsInColumn=Math.max(maxCellsInColumn,col.getCellsCount());
    }
    myRowAscents=new int[maxCellsInColumn];
    myRowDescents=new int[maxCellsInColumn];
    for (int i=0; i < cellCount; i++) {
      EditorCell_Collection col=myDescendants[i];
      if (col != null)       for (int j=0; j < col.getCellsCount(); j++) {
        col.getCellAt(j).relayout();
        myRowAscents[j]=Math.max(myRowAscents[j],col.getCellAt(j).getAscent());
        myRowDescents[j]=Math.max(myRowDescents[j],col.getCellAt(j).getDescent());
      }
    }
  }
  if (myDescendants != null && tc == TableComponent.VERTICAL_COLLECTION) {
    int maxCellsInRow=0;
    for (int i=0; i < cellCount; i++) {
      EditorCell_Collection col=myDescendants[i];
      if (col != null)       maxCellsInRow=Math.max(maxCellsInRow,col.getCellsCount());
    }
    myColumnWidths=new int[maxCellsInRow];
    for (int i=0; i < cellCount; i++) {
      EditorCell_Collection col=myDescendants[i];
      if (col != null)       for (int j=0; j < col.getCellsCount(); j++) {
        col.getCellAt(j).relayout();
        myColumnWidths[j]=Math.max(myColumnWidths[j],col.getCellAt(j).getWidth());
      }
    }
  }
  for (  EditorCell c : editorCells)   c.relayout();
  int width=0;
  int height=0;
  if (tc == TableComponent.VERTICAL_COLLECTION) {
    int leftMargin=0;
    int rightMargin=0;
    int gridWidth=0;
    for (int i=0; i < cellCount; i++) {
      EditorCell innerCollection=null;
      if (myDescendants != null)       innerCollection=myDescendants[i];
      EditorCell outerCell=editorCells.getCellAt(i);
      if (innerCollection == null) {
        gridWidth=Math.max(gridWidth,outerCell.getWidth());
      }
 else {
        gridWidth=Math.max(gridWidth,innerCollection.getWidth());
        leftMargin=Math.max(leftMargin,innerCollection.getX() - outerCell.getX());
        rightMargin=Math.max(rightMargin,(outerCell.getX() + outerCell.getWidth()) - (innerCollection.getX() + innerCollection.getWidth()));
      }
    }
    for (int i=0; i < cellCount; i++) {
      EditorCell innerCollection=null;
      if (myDescendants != null)       innerCollection=myDescendants[i];
      EditorCell outerCell=editorCells.getCellAt(i);
      int tm;
      if (innerCollection == null)       tm=0;
 else       tm=innerCollection.getX() - outerCell.getX();
      if (innerCollection == null)       outerCell.setX(x + (leftMargin - tm) + (gridWidth - outerCell.getWidth()) / 2);
 else       outerCell.setX(x + (leftMargin - tm));
      int myStripeHeight=outerCell.getHeight();
      int myStripeAscent=outerCell.getAscent();
      if (myParentLayout != null) {
        myStripeHeight=myParentLayout.myRowAscents[i] + myParentLayout.myRowDescents[i];
        myStripeAscent=myParentLayout.myRowAscents[i];
      }
      outerCell.setY(y + height + (myStripeAscent - outerCell.getAscent()));
      height+=myStripeHeight;
    }
    width+=leftMargin + rightMargin + gridWidth;
  }
  if (tc == TableComponent.HORIZONTAL_COLLECTION) {
    int topMargin=0;
    int bottomMargin=0;
    int maxAscent=0;
    int maxDescent=0;
    for (int i=0; i < cellCount; i++) {
      EditorCell innerCollection=null;
      if (myDescendants != null)       innerCollection=myDescendants[i];
      EditorCell outerCell=editorCells.getCellAt(i);
      if (innerCollection == null) {
        maxAscent=Math.max(maxAscent,outerCell.getAscent());
        maxDescent=Math.max(maxDescent,outerCell.getDescent());
      }
 else {
        maxAscent=Math.max(maxAscent,innerCollection.getHeight());
        topMargin=Math.max(topMargin,innerCollection.getY() - outerCell.getY());
        bottomMargin=Math.max(bottomMargin,(outerCell.getY() + outerCell.getHeight()) - (innerCollection.getY() + innerCollection.getHeight()));
      }
    }
    height=topMargin + maxAscent + maxDescent+ bottomMargin;
    for (int i=0; i < cellCount; i++) {
      EditorCell innerCollection=null;
      if (myDescendants != null)       innerCollection=myDescendants[i];
      EditorCell outerCell=editorCells.getCellAt(i);
      int tm;
      if (innerCollection == null)       tm=0;
 else       tm=innerCollection.getY() - outerCell.getY();
      int myStripeWidth=outerCell.getWidth();
      if (myParentLayout != null)       myStripeWidth=myParentLayout.myColumnWidths[i];
      outerCell.setX(x + width + (myStripeWidth - outerCell.getWidth()) / 2);
      width+=myStripeWidth;
      if (innerCollection == null) {
        if (myParentLayout == null)         outerCell.setY(y + (topMargin - tm) + (maxAscent + maxDescent - outerCell.getHeight()) / 2);
 else         outerCell.setY(y + (topMargin - tm) + (maxAscent - outerCell.getAscent()));
      }
 else       outerCell.setY(y + (topMargin - tm));
    }
  }
  for (  EditorCell c : editorCells)   c.relayout();
  editorCells.setWidth(width);
  editorCells.setHeight(height);
}
