{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ab.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAndOperation;
      }
    break;
case 1:
  if (true) {
    return myConceptConstant;
  }
break;
case 2:
if (true) {
return myConceptEqualsOperation;
}
break;
case 3:
if (true) {
return myConceptExpression;
}
break;
case 4:
if (true) {
return myConceptFloatingPointConstant;
}
break;
case 5:
if (true) {
return myConceptFormula;
}
break;
case 6:
if (true) {
return myConceptFunction;
}
break;
case 7:
if (true) {
return myConceptGreaterThanOperation;
}
break;
case 8:
if (true) {
return myConceptIfFunction;
}
break;
case 9:
if (true) {
return myConceptIntegerConstant;
}
break;
case 10:
if (true) {
return myConceptIsNullOperation;
}
break;
case 11:
if (true) {
return myConceptLessThanOperation;
}
break;
case 12:
if (true) {
return myConceptMinusOperation;
}
break;
case 13:
if (true) {
return myConceptMultOperation;
}
break;
case 14:
if (true) {
return myConceptNotOperation;
}
break;
case 15:
if (true) {
return myConceptNullConstant;
}
break;
case 16:
if (true) {
return myConceptOperation;
}
break;
case 17:
if (true) {
return myConceptOrOperation;
}
break;
case 18:
if (true) {
return myConceptParenthisizedExpression;
}
break;
case 19:
if (true) {
return myConceptPlusOperation;
}
break;
case 20:
if (true) {
return myConceptReference;
}
break;
case 21:
if (true) {
return myConceptStringConstant;
}
break;
default :
}
}
return null;
}
