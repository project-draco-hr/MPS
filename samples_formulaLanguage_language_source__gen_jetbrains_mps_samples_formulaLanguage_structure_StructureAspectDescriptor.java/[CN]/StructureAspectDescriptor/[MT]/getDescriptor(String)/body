{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.AndOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&&","and operation","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Constant","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"==","equals operation","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Expression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant","jetbrains.mps.samples.formulaLanguage.structure.Constant",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Constant","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"","floating point constant","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Formula","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Function","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">","greater than operation","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IfFunction","jetbrains.mps.samples.formulaLanguage.structure.Function",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Function"},new String[]{},new String[]{},new String[]{"logicalTest","valueIfTrue","valueIfFalse"},new boolean[]{false,false,false},false,false,"IF(,,)","if-function","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant","jetbrains.mps.samples.formulaLanguage.structure.Constant",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Constant","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"","integer constant","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,".isNull","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<","less than operation","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-","minus operation","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.MultOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*","multiply operation","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.NotOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"!","not operation (formula language)","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.NullConstant","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"null","null expression","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Operation","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"leftOperand","rightOperand"},new boolean[]{false,false},true,false,"","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.OrOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"||","or operation","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"(","(expr)","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation","jetbrains.mps.samples.formulaLanguage.structure.Operation",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Operation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+","plus operation","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Reference","jetbrains.mps.samples.formulaLanguage.structure.Expression",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.samples.formulaLanguage.structure.StringConstant","jetbrains.mps.samples.formulaLanguage.structure.Constant",false,new String[]{"jetbrains.mps.samples.formulaLanguage.structure.Constant"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"\"","string constant","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
