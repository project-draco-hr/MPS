{
  SModel descriptor=SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(modelRef));
  SNode node=descriptor.getNode(SNodeId.fromString(nodeId));
  final SNode sourceFileNode=SNodeOperations.cast(node,"jetbrains.mps.nanoc.structure.File");
  AbstractModule module=(AbstractModule)descriptor.getModule();
  final Wrappers._T<String> sourceFileName=new Wrappers._T<String>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      sourceFileName.value=SPropertyOperations.getString(sourceFileNode,"name");
    }
  }
);
  String packageName=NameUtil.pathFromNamespace(jetbrains.mps.util.SNodeOperations.getModelLongName(descriptor));
  File modelSourceFolder=new File(module.getOutputPath() + File.separator + packageName);
  File modelClassesFolder=new File(module.getFacet(JavaModuleFacet.class).getClassesGen().getPath() + File.separator + packageName);
  File f=new File(modelSourceFolder,sourceFileName.value + ".c");
  if (!((f.exists()))) {
    throw new ExecutionException("node is not generated");
  }
  File gcc=new File(ProgramsLocationUtil.getGccLocation());
  if (!((gcc.exists()))) {
    throw new ExecutionException("no GCC found");
  }
  ProcessBuilder processBuilder=new ProcessBuilder();
  String outputExtension=".exe";
  File executableFile=new File(modelClassesFolder,sourceFileName.value + outputExtension);
  processBuilder.command(gcc.getAbsolutePath(),f.getAbsolutePath(),"-o" + executableFile.getAbsolutePath(),"-g","-xc");
  processBuilder.directory(f.getParentFile());
  Process compileProcess;
  try {
    compileProcess=processBuilder.start();
  }
 catch (  IOException ioException) {
    throw new ExecutionException("error executing gcc compiler",ioException);
  }
  int timeout=5000;
  int current=100;
  boolean success=false;
  while (current < timeout) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ignored) {
    }
    if (executableFile.exists()) {
      success=true;
      break;
    }
    current+=100;
  }
  if (!((success))) {
    compileProcess.destroy();
    throw new ExecutionException("executable file not found");
  }
  return executableFile;
}
