{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"object"},new boolean[]{false}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ActionCallParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").children(new String[]{"value"},new boolean[]{false}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.BLCommand").super_("jetbrains.mps.console.base.structure.GeneratedCommand").parents("jetbrains.mps.console.base.structure.GeneratedCommand","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"body"},new boolean[]{false}).alias("{","baseLanguage command").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.BLCommandHelp").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.base.structure.ConsoleHelpProvider").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.BLExpression").super_("jetbrains.mps.console.base.structure.GeneratedCommand").parents("jetbrains.mps.console.base.structure.GeneratedCommand","jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"expression"},new boolean[]{false}).create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.CallActionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("action").children(new String[]{"parameter"},new boolean[]{true}).alias("#callAction","execute mps action with custom parameters").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ConsoleModelExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#consoleModel","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ExceptionHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.base.structure.IClickableText").properties("stackTrace").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.GlobalScopeLiteral").super_("jetbrains.mps.console.blCommand.structure.ScopeParameterLiteral").parents("jetbrains.mps.console.blCommand.structure.ScopeParameterLiteral").alias("global","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.InstancesExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").children(new String[]{"conceptArg"},new boolean[]{false}).alias("#instances","instances in current scope").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModelProperties").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"targetModel"},new boolean[]{false}).alias("#modelProperties","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModelsExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#models","models in current scope").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModulesExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#modules","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.NodesExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#nodes","nodes in current scope").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintExpression").super_("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").parents("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").alias("#print","smart print depending on content").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintNodeExpression").super_("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").parents("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").alias("#printNode","print node copy").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintNodeReferenceExpression").super_("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").parents("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").alias("#printNodeRef","print reference to the node").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintSequenceExpression").super_("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").parents("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").alias("#printSequence","print size with link to usages view").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintTextExpression").super_("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").parents("jetbrains.mps.console.blCommand.structure.AbstractPrintExpression").alias("#printText","print as string").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ProjectExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#project","current project").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ProjectScopeLiteral").super_("jetbrains.mps.console.blCommand.structure.ScopeParameterLiteral").parents("jetbrains.mps.console.blCommand.structure.ScopeParameterLiteral").alias("project","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.QueryExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"parameter"},new boolean[]{false}).abstract_().alias("#query","").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.QueryParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.QueryParameterIncludeReadOnly").super_("jetbrains.mps.console.blCommand.structure.QueryParameter").parents("jetbrains.mps.console.blCommand.structure.QueryParameter").alias("r/o+","include read only").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.QueryParameterList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"parameter"},new boolean[]{true}).alias("< .. >","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.QueryParameterScope").super_("jetbrains.mps.console.blCommand.structure.QueryParameter").parents("jetbrains.mps.console.blCommand.structure.QueryParameter").children(new String[]{"value"},new boolean[]{false}).alias("scope","used search scope").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ReferencesExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").alias("#references","references in current scope").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ScopeParameterLiteral").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ShowExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"object"},new boolean[]{false}).alias("#show","").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.UsagesExpression").super_("jetbrains.mps.console.blCommand.structure.QueryExpression").parents("jetbrains.mps.console.blCommand.structure.QueryExpression").children(new String[]{"node"},new boolean[]{false}).alias("#usages","direct references in current scope").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
