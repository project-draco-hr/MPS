{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.BLCommand").super_("jetbrains.mps.console.base.structure.GeneratedCommand").parents("jetbrains.mps.console.base.structure.GeneratedCommand").children(new String[]{"body"},new boolean[]{false}).alias("{","baseLanguage command").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.EachLoop").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable","iterationType"},new boolean[]{false,false}).alias("each","for each node/model/reference").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.EachNodeLoop").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable"},new boolean[]{false}).alias("eachNode","for each node in current scope").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.IEachIteratable").interface_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.IShowable").interface_().children(new String[]{"items"},new boolean[]{false}).create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.InstancesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"conceptExpr"},new boolean[]{false}).alias("instances","instances in current scope").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModelEachIterable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IEachIteratable").alias("model","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModelsShowable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IShowable").alias("models","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModuleEachIterable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IEachIteratable").alias("module","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ModulesShowable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IShowable").alias("modules","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.NodeEachIterable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IEachIteratable").alias("node","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.NodesShowable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IShowable").alias("nodes","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintNewLine").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("printNewLine","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintNode").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"node"},new boolean[]{false}).alias("printNode","").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.PrintText").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"text"},new boolean[]{false}).alias("printText","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ReferenceEachIterable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IEachIteratable").alias("reference","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.RefsShowable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.blCommand.structure.IShowable").alias("refs","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.ShowStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"showable"},new boolean[]{false}).alias("show","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.console.blCommand.structure.UsagesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"node"},new boolean[]{false}).alias("usages","direct references in current scope").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
