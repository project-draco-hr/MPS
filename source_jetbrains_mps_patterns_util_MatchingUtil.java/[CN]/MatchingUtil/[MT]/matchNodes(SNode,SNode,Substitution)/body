{
  AttributeConcept patternAttribute=patternNode.getAttribute();
  if (patternAttribute instanceof WildcardPattern) {
    return true;
  }
  if (patternAttribute instanceof ListPattern) {
  }
 else   if (patternAttribute instanceof AsPattern) {
    bindNodeWithVar(substitution,(PatternVariableDeclaration)patternAttribute,node);
  }
 else   if (patternAttribute instanceof PatternVariableDeclaration) {
    bindNodeWithVar(substitution,(PatternVariableDeclaration)patternAttribute,node);
    return true;
  }
  if (node.getClass() != patternNode.getClass())   return false;
  Map<String,String> properties=node.getProperties();
  Map<String,String> patternProperties=patternNode.getProperties();
  for (  String propertyName : patternProperties.keySet()) {
    if (!properties.containsKey(propertyName))     return false;
    PropertyAttributeConcept propertyAttribute=patternNode.getPropertyAttribute(propertyName);
    if (propertyAttribute instanceof PropertyPatternVariableDeclaration) {
      String propertyValue=node.getProperty(propertyName);
      bindPropertyWithVar(substitution,(PropertyPatternVariableDeclaration)propertyAttribute,propertyValue);
    }
 else {
      if (!EqualUtil.equals(patternNode.getProperty(propertyName),node.getProperty(propertyName)))       return false;
    }
  }
  Set<String> childRoles=patternNode.getChildRoles();
  for (  String role : childRoles) {
    List<SNode> children=node.getChildren(role);
    List<SNode> patternChildren=patternNode.getChildren(role);
    SNode listPatternChild=null;
    for (    SNode patternChild : patternChildren) {
      if (patternChild.getAttribute() instanceof ListPattern) {
        listPatternChild=patternChild;
        break;
      }
    }
    if (listPatternChild != null) {
      if (!matchListOfNodes(children,listPatternChild,substitution))       return false;
    }
 else {
      Iterator<SNode> childrenIterator=children.iterator();
      for (      SNode patternChild : patternChildren) {
        if (!childrenIterator.hasNext())         return false;
        SNode child=childrenIterator.next();
        if (!matchNodes(child,patternChild,substitution))         return false;
      }
    }
  }
  Set<String> referenceRoles=patternNode.getReferenceRoles();
  for (  String role : referenceRoles) {
    SNode target=node.getReferent(role);
    LinkAttributeConcept linkAttribute=patternNode.getLinkAttribute(role);
    if (linkAttribute instanceof LinkPatternVariableDeclaration) {
      bindReferenceTargetWithVar(substitution,(LinkPatternVariableDeclaration)linkAttribute,target);
    }
 else {
      SNode patternTarget=patternNode.getReferent(role);
      if (patternTarget != target)       return false;
    }
  }
  return true;
}
