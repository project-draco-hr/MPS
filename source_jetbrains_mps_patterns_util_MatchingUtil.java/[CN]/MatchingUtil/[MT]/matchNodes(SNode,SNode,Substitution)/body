{
  SNode patternAttribute=patternNode.getAttribute();
  INodeAdapter asPattern=AsPattern_AnnotationLink.getAsPattern((BaseConcept)BaseAdapter.fromNode(patternNode));
  if (BaseAdapter.isInstance(patternAttribute,WildcardPattern.class)) {
    return true;
  }
  if (BaseAdapter.isInstance(patternAttribute,ListPattern.class) || asPattern instanceof ListPattern) {
  }
 else   if (BaseAdapter.isInstance(patternAttribute,AsPattern.class) || asPattern != null) {
    bindNodeWithVar(substitution,(PatternVariableDeclaration)BaseAdapter.fromNode(patternAttribute),node);
  }
  if (BaseAdapter.isInstance(patternAttribute,PatternVariableDeclaration.class)) {
    bindNodeWithVar(substitution,(PatternVariableDeclaration)BaseAdapter.fromNode(patternAttribute),node);
    return true;
  }
  if (node == null)   return false;
  if (node.getClass() != patternNode.getClass())   return false;
  for (  String propertyName : patternNode.getPropertyNames()) {
    SNode propertyAttribute=patternNode.getPropertyAttribute(propertyName);
    if (BaseAdapter.isInstance(propertyAttribute,PropertyPatternVariableDeclaration.class)) {
      LazyPropertyValue propertyValue=new LazyPropertyValue(node,propertyName);
      bindPropertyWithVar(substitution,(PropertyPatternVariableDeclaration)BaseAdapter.fromNode(propertyAttribute),propertyValue);
    }
 else {
      if (!EqualUtil.equals(patternNode.getProperty(propertyName),node.getProperty(propertyName)))       return false;
    }
  }
  for (  String role : patternNode.getChildRoles()) {
    List<SNode> children=node.getChildren(role);
    List<SNode> patternChildren=patternNode.getChildren(role);
    SNode listPatternChild=null;
    for (    SNode patternChild : patternChildren) {
      if (AsPattern_AnnotationLink.getAsPattern((BaseConcept)BaseAdapter.fromNode(patternChild)) instanceof ListPattern || BaseAdapter.isInstance(patternChild.getAttribute(),ListPattern.class)) {
        listPatternChild=patternChild;
        break;
      }
    }
    if (listPatternChild != null) {
      if (!matchListOfNodes(children,listPatternChild,substitution))       return false;
    }
 else {
      Iterator<SNode> childrenIterator=children.iterator();
      for (      SNode patternChild : patternChildren) {
        SNode child=childrenIterator.hasNext() ? childrenIterator.next() : null;
        if (!matchNodes(child,patternChild,substitution))         return false;
      }
    }
  }
  Set<String> referenceRoles=patternNode.getReferenceRoles();
  for (  String role : referenceRoles) {
    SNode target=node.getReferent(role);
    SNode linkAttribute=patternNode.getLinkAttribute(role);
    if (BaseAdapter.isInstance(linkAttribute,LinkPatternVariableDeclaration.class)) {
      bindReferenceTargetWithVar(substitution,(LinkPatternVariableDeclaration)BaseAdapter.fromNode(linkAttribute),target);
    }
 else {
      SNode patternTarget=patternNode.getReferent(role);
      if (patternTarget != target)       return false;
    }
  }
  return true;
}
