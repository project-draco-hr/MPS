{
  SNode patternAttribute=patternNode.getAttribute();
  SNode asPattern=AsPattern_AnnotationLink.getAsPattern((BaseConcept)patternNode);
  if (patternAttribute instanceof WildcardPattern) {
    return true;
  }
  if (asPattern instanceof ListPattern || patternAttribute instanceof ListPattern) {
  }
 else   if (asPattern != null || patternAttribute instanceof AsPattern) {
    bindNodeWrapperWithVar(substitution,(PatternVariableDeclaration)patternAttribute,node);
  }
  if (patternAttribute instanceof PatternVariableDeclaration) {
    bindNodeWrapperWithVar(substitution,(PatternVariableDeclaration)patternAttribute,node);
    return true;
  }
  if (node.getNodeClass() != patternNode.getClass())   return false;
  Set<String> propertyNames=node.getPropertyNames();
  for (  String propertyName : patternNode.getPropertyNames()) {
    SNode propertyAttribute=patternNode.getPropertyAttribute(propertyName);
    if (propertyAttribute instanceof PropertyPatternVariableDeclaration) {
      LazyPropertyValue propertyValue=new LazyPropertyValue(node.getNode(),propertyName);
      bindPropertyWithVar(substitution,(PropertyPatternVariableDeclaration)propertyAttribute,propertyValue);
    }
 else {
      if (!EqualUtil.equals(patternNode.getProperty(propertyName),node.getProperty(propertyName)))       return false;
    }
  }
  Set<String> childRoles=patternNode.getChildRoles();
  for (  String role : childRoles) {
    List<NodeWrapper> children=node.getChildren(role);
    List<SNode> patternChildren=patternNode.getChildren(role);
    SNode listPatternChild=null;
    for (    SNode patternChild : patternChildren) {
      if (AsPattern_AnnotationLink.getAsPattern((BaseConcept)patternChild) instanceof ListPattern || patternChild.getAttribute() instanceof ListPattern) {
        listPatternChild=patternChild;
        break;
      }
    }
    if (listPatternChild != null) {
      if (!matchListOfNodeWrappers(children,listPatternChild,substitution))       return false;
    }
 else {
      Iterator<NodeWrapper> childrenIterator=children.iterator();
      for (      SNode patternChild : patternChildren) {
        NodeWrapper child=childrenIterator.hasNext() ? childrenIterator.next() : null;
        if (!matchNodes(child,patternChild,substitution))         return false;
      }
    }
  }
  Set<String> referenceRoles=patternNode.getReferenceRoles();
  for (  String role : referenceRoles) {
    SNode target=node.getReferent(role);
    SNode linkAttribute=patternNode.getLinkAttribute(role);
    if (linkAttribute instanceof LinkPatternVariableDeclaration) {
      bindReferenceTargetWithVar(substitution,(LinkPatternVariableDeclaration)linkAttribute,target);
    }
 else {
      SNode patternTarget=patternNode.getReferent(role);
      if (patternTarget != target)       return false;
    }
  }
  return true;
}
