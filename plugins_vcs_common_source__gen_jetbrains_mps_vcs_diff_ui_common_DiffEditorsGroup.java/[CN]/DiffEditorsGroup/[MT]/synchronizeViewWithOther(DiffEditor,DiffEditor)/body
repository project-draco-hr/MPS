{
  if (thisDiffEditor == otherDiffEditor) {
    return;
  }
  final EditorComponent thisEditor=thisDiffEditor.getMainEditor();
  final EditorComponent otherEditor=otherDiffEditor.getMainEditor();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      int viewY=thisEditor.getViewport().getViewPosition().y;
      SNode visibleNode=thisEditor.getEditedNode();
      if (viewY > thisEditor.getRootCell().getY()) {
        visibleNode=check_s6qw4f_a0a0c0a0a4a5(thisEditor.findCellWeak(1,viewY));
      }
      SModel otherModel=check_s6qw4f_a0d0a0a4a5(otherEditor.getEditedNode());
      if (otherModel == null) {
        return;
      }
      while (visibleNode != null) {
        SNodeId id=visibleNode.getNodeId();
        EditorCell thisCell=thisEditor.findNodeCell(visibleNode);
        if (thisCell != null) {
          int newRelativePos=viewY - thisCell.getY();
          SNodeId nodeId=mapID(thisDiffEditor,id,otherDiffEditor);
          EditorCell otherCell=(nodeId != null ? otherEditor.findNodeCell(otherModel.getNode(nodeId)) : null);
          Point position=thisEditor.getViewport().getViewPosition();
          if (otherCell != null) {
            Rectangle viewRect=otherEditor.getViewport().getViewRect();
            int newX=Math.min((int)position.getX(),otherEditor.getWidth() - viewRect.width);
            int newY=Math.min(newRelativePos + otherCell.getY(),otherEditor.getHeight() - viewRect.height);
            otherEditor.getViewport().setViewPosition(new Point(newX,newY));
            return;
          }
        }
        SNode prevSibling=SNodeOperations.getPrevSibling(visibleNode);
        if (check_s6qw4f_a5a6a0a0e0f(visibleNode.getRoleInParent(),prevSibling)) {
          visibleNode=prevSibling;
        }
 else {
          visibleNode=visibleNode.getParent();
        }
      }
    }
  }
);
}
