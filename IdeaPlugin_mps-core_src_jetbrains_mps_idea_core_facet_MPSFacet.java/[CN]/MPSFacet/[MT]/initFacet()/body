{
  StartupManager.getInstance(getModule().getProject()).runWhenProjectIsInitialized(new Runnable(){
    @Override public void run(){
      ModelAccess.instance().runWriteAction(new Runnable(){
        @Override public void run(){
          SolutionDescriptor solutionDescriptor=getConfiguration().getBean().getSolutionDescriptor();
          Solution solution=new SolutionIdea(getModule(),solutionDescriptor);
          com.intellij.openapi.project.Project project=getModule().getProject();
          myMpsProject=ProjectHelper.toMPSProject(project);
          MPSModuleRepository repository=MPSModuleRepository.getInstance();
          if (ModuleRepositoryFacade.getInstance().getModule(solutionDescriptor.getModuleReference()) != null) {
            MessagesViewTool.log(project,MessageKind.ERROR,MPSBundle.message("facet.cannot.load.second.module",solutionDescriptor.getNamespace()));
            return;
          }
          repository.registerModule(mySolution=solution,myMpsProject);
          myMpsProject.addModule(mySolution.getModuleReference());
          try {
            LOG.info(MPSBundle.message("facet.module.loaded",Solution.class.getDeclaredMethod(ApplicationInfo.getInstance().getMajorVersion().equals("12") ? "getModuleFqName" : "getModuleName").invoke(MPSFacet.this.mySolution)));
          }
 catch (          IllegalAccessException e) {
          }
catch (          InvocationTargetException e) {
          }
catch (          NoSuchMethodException e) {
          }
          IdeaPluginDescriptor descriptor=PluginManager.getPlugin(PluginManager.getPluginByClassName(MPSFacet.class.getName()));
          String version=descriptor == null ? null : descriptor.getVersion();
          UsageTrigger.trigger("MPS.initFacet." + version);
        }
      }
);
    }
  }
);
}
