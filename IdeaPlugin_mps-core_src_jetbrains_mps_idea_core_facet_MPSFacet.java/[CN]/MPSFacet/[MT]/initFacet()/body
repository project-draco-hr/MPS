{
  StartupManager.getInstance(getModule().getProject()).runWhenProjectIsInitialized(new Runnable(){
    @Override public void run(){
      ModelAccess.instance().runWriteAction(new Runnable(){
        @Override public void run(){
          SolutionDescriptor solutionDescriptor=getConfiguration().getState().getSolutionDescriptor();
          for (          OrderEntry e : ModuleRootManager.getInstance(getModule()).getOrderEntries()) {
            if (!(e instanceof LibraryOrderEntry))             continue;
            LibraryOrderEntry loe=(LibraryOrderEntry)e;
            if (!loe.isModuleLevel())             continue;
            Library library=loe.getLibrary();
            if (library == null)             continue;
            for (            VirtualFile f : library.getFiles(OrderRootType.CLASSES)) {
              ModelRoot mr=new ModelRoot();
              mr.setPath(f.getPath());
              mr.setManager(LanguageID.JAVA_MANAGER);
              solutionDescriptor.getModelRoots().add(mr);
            }
          }
          Solution solution=new SolutionIdea(getModule(),solutionDescriptor);
          com.intellij.openapi.project.Project project=getModule().getProject();
          Project mpsProject=ProjectHelper.toMPSProject(project);
          MPSModuleRepository repository=MPSModuleRepository.getInstance();
          if (repository.existsModule(solutionDescriptor.getModuleReference())) {
            MessagesViewTool.log(project,MessageKind.ERROR,MPSBundle.message("facet.cannot.load.second.module",solutionDescriptor.getNamespace()));
            return;
          }
          repository.addModule(mySolution=solution,mpsProject);
          mpsProject.addModule(mySolution.getModuleReference());
          LOG.info(MPSBundle.message("facet.module.loaded",MPSFacet.this.mySolution.getModuleFqName()));
        }
      }
);
    }
  }
);
}
