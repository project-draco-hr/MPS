{
  Graph<String> graph=new Graph<String>();
  CycleDetector<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B");
  graph.addEdges("B","C");
  graph.addEdges("C","D");
  List<List<String>> cycles=cd.findCycles(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String,Comparable<?>>(){
    public Comparable<?> select(    String it){
      return it;
    }
  }
,false));
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  cycles=cd.findCycles(graph.getVertices());
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  cycles=cd.findCycles(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String,Comparable<?>>(){
    public Comparable<?> select(    String it){
      return ((Object)it).hashCode();
    }
  }
,true));
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
}
