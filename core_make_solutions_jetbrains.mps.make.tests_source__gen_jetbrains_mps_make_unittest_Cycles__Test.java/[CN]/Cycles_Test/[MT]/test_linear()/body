{
  Graph<String> graph=new Graph<String>();
  GraphAnalyzer<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B");
  graph.addEdges("B","C");
  graph.addEdges("C","D");
  graph.sort(new _FunctionTypes._return_P1_E0<String,String>(){
    public String invoke(    String s){
      return s;
    }
  }
,false);
  List<List<String>> cycles=cd.findCycles();
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  cycles=cd.findCycles();
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  graph.sort(new _FunctionTypes._return_P1_E0<Integer,String>(){
    public Integer invoke(    String s){
      return ((Object)s).hashCode();
    }
  }
,true);
  cycles=cd.findCycles();
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
}
