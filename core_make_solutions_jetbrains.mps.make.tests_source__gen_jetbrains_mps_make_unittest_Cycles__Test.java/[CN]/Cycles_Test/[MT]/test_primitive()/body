{
  Graph<String> graph=new Graph<String>();
  GraphAnalyzer<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B");
  Assert.assertTrue(ListSequence.fromList(cd.findCycles(graph.getVertices())).isEmpty());
  final Queue<String> q=QueueSequence.fromQueueAndArray(new LinkedList<String>(),"A","B");
  Sequence.fromIterable(cd.topologicalSort(graph.getVertices())).visitAll(new IVisitor<String>(){
    public void visit(    String v){
      Assert.assertEquals(QueueSequence.fromQueue(q).removeFirstElement(),v);
    }
  }
);
  graph.addEdges("B","A");
  List<List<String>> cycles=cd.findCycles(graph.getVertices());
  Assert.assertSame(1,ListSequence.fromList(cycles).count());
  Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B"),ListSequence.fromList(cycles).getElement(0));
}
