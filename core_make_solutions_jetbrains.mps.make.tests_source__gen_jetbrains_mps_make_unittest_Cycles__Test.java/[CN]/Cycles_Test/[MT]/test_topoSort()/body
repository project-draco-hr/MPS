{
  Graph<String> graph=new Graph<String>();
  GraphAnalyzer<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B","C","H","I");
  graph.addEdges("B","C","D","E","G");
  graph.addEdges("C","D","G","K");
  graph.addEdges("D","E","H");
  graph.addEdges("E","F");
  graph.addEdges("F","G");
  graph.addEdges("G","H","I","J");
  graph.addEdges("H","I");
  graph.addEdges("I","K","J");
  List<List<String>> cycles=cd.findCycles();
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  Utils.assertSameSequence(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B","C","D","E","F","G","H","I","J","K"),cd.topologicalSort());
  graph.sort(new _FunctionTypes._return_P1_E0<String,String>(){
    public String invoke(    String s){
      return s;
    }
  }
,false);
  Utils.assertSameSequence(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B","C","D","E","F","G","H","I","J","K"),cd.topologicalSort());
}
