{
  Graph<String> graph=new Graph<String>();
  GraphAnalyzer<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B","C","H","I");
  graph.addEdges("B","C","D","E","G");
  graph.addEdges("C","D","G","K");
  graph.addEdges("D","E","H");
  graph.addEdges("E","F");
  graph.addEdges("F","G");
  graph.addEdges("G","H","I","J");
  graph.addEdges("H","I");
  graph.addEdges("I","K","J");
  List<List<String>> cycles=cd.findCycles(graph.getVertices());
  Assert.assertSame(0,ListSequence.fromList(cycles).count());
  Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B","C","D","E","F","G","H","I","J","K"),cd.topologicalSort(graph.getVertices()));
  Assert.assertEquals(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B","C","D","E","F","G","H","I","J","K"),cd.topologicalSort(Sequence.fromIterable(graph.getVertices()).sort(new ISelector<String,Comparable<?>>(){
    public Comparable<?> select(    String v){
      return v;
    }
  }
,false)));
}
