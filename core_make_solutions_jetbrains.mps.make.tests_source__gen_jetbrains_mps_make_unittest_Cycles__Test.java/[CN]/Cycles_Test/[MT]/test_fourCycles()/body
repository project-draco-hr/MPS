{
  Graph<String> graph=new Graph<String>();
  CycleDetector<String> cd=graph.getCycleDetector();
  graph.addEdges("A","B");
  graph.addEdges("B","C","F","E");
  graph.addEdges("C","D","G");
  graph.addEdges("D","C","H");
  graph.addEdges("E","A","F");
  graph.addEdges("F","G");
  graph.addEdges("G","F","H","I","J");
  graph.addEdges("H","I");
  graph.addEdges("I","G","K");
  List<List<String>> cycles=cd.findCycles(graph.getVertices());
  Assert.assertSame(3,ListSequence.fromList(cycles).count());
  Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(),"A","B","E")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(0))).isEmpty());
  Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(),"D","C")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(1))).isEmpty());
  Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(),"G","I","F","H")).disjunction(ListSequence.fromList(ListSequence.fromList(cycles).getElement(2))).isEmpty());
}
