{
  return new NodeChooserDialog(myProject,nodesList,new BaseNodePointerModel(myProject){
    @Override public NavigationItem doGetNavigationItem(    final SNodeReference nodeReference){
      return new BaseNodePointerItem(nodeReference){
        @Override public void navigate(        boolean requestFocus){
        }
        @Nullable @Override public ItemPresentation getPresentation(){
          return new NodePointerPresentation(nodeReference){
            @NotNull @Override protected String calculatePresentableTextInternal(){
              String text=ModelAccess.instance().runReadAction(new Computable<String>(){
                public String compute(){
                  SNode node=(SNode)nodeReference.resolve(MPSModuleRepository.getInstance());
                  if (node == null) {
                    return "null plugin";
                  }
                  return SPropertyOperations.getString(SLinkOperations.getTarget(node,"plugin",false),"id");
                }
              }
);
              return ((text == null || text.length() == 0) ? super.calculatePresentableTextInternal() : text);
            }
          }
;
        }
      }
;
    }
    @Override public SNodeReference[] find(    boolean checkboxState){
      return ListSequence.fromList(nodesList).toGenericArray(SNodeReference.class);
    }
    @Override public SNodeReference[] find(    SearchScope scope){
      throw new UnsupportedOperationException("must not be used");
    }
    @Override public boolean loadInitialCheckBoxState(){
      return false;
    }
    @Override public boolean willOpenEditor(){
      return false;
    }
  }
);
}
