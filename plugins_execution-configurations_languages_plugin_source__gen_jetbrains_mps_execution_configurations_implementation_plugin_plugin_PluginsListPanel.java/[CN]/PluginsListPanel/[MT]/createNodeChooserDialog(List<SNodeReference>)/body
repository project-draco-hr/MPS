{
  return new NodeChooserDialog(myProject,new BaseNodePointerModel(myProject){
    @Override public SNodeReference getModelObject(    Object item){
      if (item instanceof NodePointerNavigationItem) {
        return ((NodePointerNavigationItem)item).getNodePointer();
      }
      return super.getModelObject(item);
    }
    @Override public String doGetObjectName(    SNodeReference reference){
      SNode node=(SNode)reference.resolve(getProject().getRepository());
      return (node == null ? "null plugin" : SPropertyOperations.getString(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0xcf935df46994e9cL,0xa132fa109541cba3L,0x5b7be37b4de9bb6eL,0x5b7be37b4dee5919L,"plugin")),MetaAdapterFactory.getProperty(0xcf935df46994e9cL,0xa132fa109541cba3L,0x5b7be37b4de9bb74L,0x5b7be37b4de9bb6fL,"id")));
    }
    @Override public NavigationItem doGetNavigationItem(    SNodeReference nodeReference){
      SNode node=nodeReference.resolve(getProject().getRepository());
      return (node == null ? super.doGetNavigationItem(nodeReference) : new NodePointerNavigationItem(node));
    }
    @Override public SNodeReference[] find(    boolean checkboxState){
      return ListSequence.fromList(nodesList).toGenericArray(SNodeReference.class);
    }
    @Override public SNodeReference[] find(    SearchScope scope){
      throw new UnsupportedOperationException("must not be used");
    }
  }
);
}
