{
  setRootNode(new TextTreeNode("Empty"));
  new MPSTreeSpeedSearch(this);
  ToolTipManager.sharedInstance().registerComponent(this);
  largeModel=true;
  TreeToolTipHandler.install(this);
  setCellRenderer(new NewMPSTreeCellRenderer());
  addTreeWillExpandListener(new TreeWillExpandListener(){
    public void treeWillExpand(    TreeExpansionEvent event) throws ExpandVetoException {
      TreePath path=event.getPath();
      Object node=path.getLastPathComponent();
      MPSTreeNode treeNode=(MPSTreeNode)node;
      if (!treeNode.isInitialized()) {
        doInit(treeNode);
      }
    }
    public void treeWillCollapse(    TreeExpansionEvent event) throws ExpandVetoException {
    }
  }
);
  addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      if (!myAutoExpandEnabled)       return;
      TreePath eventPath=event.getPath();
      MPSTreeNode node=(MPSTreeNode)eventPath.getLastPathComponent();
      if (node.getChildCount() == 1) {
        List<MPSTreeNode> path=new ArrayList<MPSTreeNode>();
        for (        Object item : eventPath.getPath()) {
          path.add((MPSTreeNode)item);
        }
        MPSTreeNode onlyChild=(MPSTreeNode)node.getChildAt(0);
        if (onlyChild.isAutoExpandable()) {
          path.add(onlyChild);
          expandPath(new TreePath(path.toArray()));
        }
      }
    }
    public void treeCollapsed(    TreeExpansionEvent event){
    }
  }
);
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (e.getButton() == 0) {
        TreePath path=getSelectionPath();
        if (path == null)         return;
        int rowNum=getRowForPath(path);
        Rectangle r=getRowBounds(rowNum);
        showPopup(r.x,r.y);
      }
 else {
        requestFocus();
        myMousePressed(e);
      }
    }
    public void mouseReleased(    MouseEvent e){
      myMouseReleased(e);
    }
    public void mouseEntered(    MouseEvent e){
      myTooltipManagerRecentInitialDelay=ToolTipManager.sharedInstance().getInitialDelay();
      ToolTipManager.sharedInstance().setInitialDelay(10);
    }
    public void mouseExited(    MouseEvent e){
      ToolTipManager.sharedInstance().setInitialDelay(myTooltipManagerRecentInitialDelay);
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      TreePath[] paths=getSelectionPaths();
      TreePath selPath=getSelectionPath();
      if (selPath == null)       return;
      final MPSTreeNode selNode=(MPSTreeNode)selPath.getLastPathComponent();
      if (selNode == null)       return;
      final List<MPSTreeNode> nodes=new ArrayList<MPSTreeNode>();
      for (      TreePath path : paths) {
        MPSTreeNode node=(MPSTreeNode)path.getLastPathComponent();
        nodes.add(node);
        node.keyPressed(e);
      }
      final KeyStroke eventKeyStroke=KeyStroke.getKeyStrokeForEvent(e);
      Pair pair=new Pair(eventKeyStroke,selNode.getClass());
      final BaseAction action=myKeyStrokesToActionsMap.get(pair);
      final DataContext dataContext=DataManager.getInstance().getDataContext();
      if (action != null) {
        Presentation presentation=new Presentation();
        AnActionEvent event=new AnActionEvent(e,dataContext,ActionPlaces.UNKNOWN,presentation,ActionManager.getInstance(),0);
        action.update(event);
        if (presentation.isEnabled()) {
          action.actionPerformed(event);
          return;
        }
      }
      KeyStroke stroke=KeyStroke.getKeyStrokeForEvent(e);
      if (stroke.getKeyCode() == KeyEvent.VK_CONTROL || stroke.getKeyCode() == KeyEvent.VK_SHIFT || stroke.getKeyCode() == KeyEvent.VK_ALT) {
        return;
      }
      stroke.toString();
      for (      TreePath p : paths) {
        final MPSTreeNode lastNode=(MPSTreeNode)p.getLastPathComponent();
        ActionGroup actionGroup=lastNode.getActionGroup();
        if (actionGroup == null)         continue;
        Presentation presentation=new Presentation();
        AnActionEvent event=new AnActionEvent(e,dataContext,ActionPlaces.UNKNOWN,presentation,ActionManager.getInstance(),0);
        ActionUtils.updateGroup(actionGroup,event);
        final AnAction a=findAction(e,dataContext,actionGroup,eventKeyStroke);
        if (a == null)         continue;
        a.update(event);
        if (event.getPresentation().isEnabled()) {
          a.actionPerformed(event);
          e.consume();
          return;
        }
      }
    }
    private AnAction findAction(    InputEvent e,    DataContext dataContext,    ActionGroup actionGroup,    KeyStroke eventKeyStroke){
      for (      final AnAction action : actionGroup.getChildren(null)) {
        if (action instanceof ActionGroup) {
          AnAction res=findAction(e,dataContext,(ActionGroup)action,eventKeyStroke);
          if (res != null)           return res;
        }
 else {
          Shortcut[] shortcuts=action.getShortcutSet().getShortcuts();
          for (          Shortcut shortcut : shortcuts) {
            if (eventKeyStroke.equals(((KeyboardShortcut)shortcut).getFirstKeyStroke())) {
              Presentation presentation=new Presentation();
              AnActionEvent event=new AnActionEvent(e,dataContext,ActionPlaces.UNKNOWN,presentation,ActionManager.getInstance(),0);
              action.update(event);
              if (presentation.isEnabled())               return action;
            }
          }
        }
      }
      return null;
    }
    private JMenuItem findMenuItem(    KeyStroke eventKeyStroke,    JMenu menu){
      menu.getModel().setSelected(true);
      for (int i=0; i < menu.getItemCount(); i++) {
        JMenuItem item=(JMenuItem)menu.getItem(i);
        if (item == null) {
          continue;
        }
        KeyStroke keyStroke=item.getAccelerator();
        if (eventKeyStroke.equals(keyStroke)) {
          return item;
        }
        if (item instanceof JMenu) {
          JMenuItem result=findMenuItem(eventKeyStroke,(JMenu)menu.getItem(i));
          if (result != null) {
            return result;
          }
        }
      }
      return null;
    }
  }
);
  AbstractAction openNodeAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TreePath selPath=getSelectionPath();
      if (selPath == null)       return;
      MPSTreeNode selNode=(MPSTreeNode)selPath.getLastPathComponent();
      selNode.doubleClick();
    }
  }
;
  registerKeyboardAction(openNodeAction,KeyStroke.getKeyStroke("ENTER"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(openNodeAction,KeyStroke.getKeyStroke("F4"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  AbstractAction refreshTreeAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      rebuildNow();
    }
  }
;
  registerKeyboardAction(refreshTreeAction,KeyStroke.getKeyStroke("F5"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}
