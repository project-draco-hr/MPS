{
  final ArrayList<ArgumentExpression> ae=new ArrayList<ArgumentExpression>(args.size());
  int i=1;
  for (  SNode argExpr : args) {
    final SConcept argConcept=argExpr.getConcept();
    if (argConcept.isSubConceptOf(RuleUtil.concept_TemplateArgumentParameterExpression)) {
      ae.add(new TemplateParameterExpr(argExpr,i));
    }
 else     if (argConcept.isSubConceptOf(RuleUtil.concept_TemplateArgumentPatternRef)) {
      ae.add(new PatternRefExpr(argExpr,i));
    }
 else     if (argConcept.isSubConceptOf(RuleUtil.concept_TemplateArgumentQueryExpression)) {
      ae.add(new QueryExpr(argExpr));
    }
 else     if (argConcept.isSubConceptOf(RuleUtil.concept_TemplateArgumentVarRefExpression)) {
      ae.add(new VarRefExpr(argExpr));
    }
 else     if (GeneratorUtilEx.shallGenerateFunctionToEvaluate(argExpr)) {
      ae.add(new GeneratedExpr(argExpr));
    }
 else {
      ae.add(new OtherExpr(argExpr,i));
    }
    i++;
  }
  return ae.toArray(new ArgumentExpression[ae.size()]);
}
