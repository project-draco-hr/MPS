{
  if (myNoArgs) {
    return outerContext;
  }
  IGeneratorLogger log=outerContext.getEnvironment().getLogger();
  final Map<String,Object> vars=new HashMap<String,Object>(myArguments.length * 2);
  for (int i=0; i < myArguments.length; i++) {
    SNode exprNode=myArguments[i];
    Object value=null;
    if (exprNode.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept(RuleUtil.concept_TemplateArgumentParameterExpression))) {
      SNode parameter=RuleUtil.getTemplateArgumentParameterExpression_Parameter(exprNode);
      if (parameter == null) {
        log.error(exprNode.getReference(),"cannot evaluate template argument #" + (i + 1) + ": invalid parameter reference",GeneratorUtil.describeInput(outerContext));
      }
 else {
        value=outerContext.getVariable(parameter.getName());
      }
    }
 else     if (exprNode.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept(RuleUtil.concept_TemplateArgumentPatternRef))) {
      String patternVar=GeneratorUtilEx.getPatternVariableName(exprNode);
      if (patternVar == null) {
        log.error(exprNode.getReference(),"cannot evaluate template argument #" + (i + 1) + ": invalid pattern reference",GeneratorUtil.describeInput(outerContext));
      }
 else {
        value=outerContext.getPatternVariable(patternVar);
      }
    }
 else     if (SNodeUtil.isInstanceOf(exprNode,SNodeOperations.getConcept(RuleUtil.concept_TemplateArgumentQueryExpression))) {
      SNode query=RuleUtil.getTemplateArgumentQueryExpression_Query(exprNode);
      value=outerContext.getEnvironment().getQueryExecutor().evaluateArgumentQuery(outerContext.getInput(),query,outerContext);
    }
 else     if (SNodeUtil.isInstanceOf(exprNode,SNodeOperations.getConcept(RuleUtil.concept_TemplateArgumentVarRefExpression))) {
      SNode varmacro=RuleUtil.getTemplateArgumentVarRef_VarMacro(exprNode);
      value=outerContext.getVariable(RuleUtil.getVarMacro_Name(varmacro));
    }
 else {
      try {
        value=RuleUtil.evaluateBaseLanguageExpression(exprNode);
      }
 catch (      IllegalArgumentException ex) {
        log.error(myTemplateCall.getReference(),String.format("cannot evaluate template argument #%d: %s",i + 1,ex.toString()),GeneratorUtil.describeInput(outerContext));
      }
    }
    vars.put(myParameters[i],value);
  }
  return outerContext.subContext(vars).subContext(outerContext.getInputName());
}
