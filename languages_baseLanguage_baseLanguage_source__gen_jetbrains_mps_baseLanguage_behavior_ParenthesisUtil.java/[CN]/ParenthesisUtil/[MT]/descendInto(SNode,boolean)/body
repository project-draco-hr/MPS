{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> candidates=ListSequence.fromList(new ArrayList<SNode>());
  SNode current=expr;
  while (current != null) {
    if (completingByRightParen && (AttributeOperations.getAttribute(current,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null)) {
      ListSequence.fromList(result).addElement(current);
    }
    if (!(completingByRightParen) && (AttributeOperations.getAttribute(current,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null)) {
      ListSequence.fromList(result).addElement(current);
    }
    if (SNodeOperations.isInstanceOf(current,"jetbrains.mps.baseLanguage.structure.IBinaryLike")) {
      SNode left=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.IBinaryLike"),"virtual_getSyntacticallyLeftSideExpression_1742226163722653708",new Object[]{});
      SNode right=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.IBinaryLike"),"virtual_getSyntacticallyRightSideExpression_1742226163722653714",new Object[]{});
      if (completingByRightParen) {
        if (left != null) {
          ListSequence.fromList(candidates).addElement(left);
        }
        if (right != null) {
          ListSequence.fromList(candidates).addElement(right);
        }
      }
      if (!(completingByRightParen)) {
        if (right != null) {
          ListSequence.fromList(candidates).addElement(right);
        }
        if (left != null) {
          ListSequence.fromList(candidates).addElement(left);
        }
      }
    }
    current=ListSequence.fromList(candidates).removeElementAt(0);
  }
  return result;
}
