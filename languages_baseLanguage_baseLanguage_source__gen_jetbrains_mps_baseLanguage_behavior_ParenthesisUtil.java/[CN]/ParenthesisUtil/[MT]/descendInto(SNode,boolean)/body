{
  List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
  if (expr == null) {
    return result;
  }
  List<SNode> leftDescent=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> rightDescent=ListSequence.fromList(new ArrayList<SNode>());
  if (SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.IBinaryLike")) {
    leftDescent=descendInto(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.IBinaryLike"),"virtual_getSyntacticallyLeftSideExpression_1742226163722653708",new Object[]{}),completingByRightParen);
    rightDescent=descendInto(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.IBinaryLike"),"virtual_getSyntacticallyRightSideExpression_1742226163722653714",new Object[]{}),completingByRightParen);
  }
  if (completingByRightParen) {
    if ((AttributeOperations.getAttribute(expr,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null)) {
      ListSequence.fromList(result).addElement(expr);
    }
    ListSequence.fromList(result).addSequence(ListSequence.fromList(leftDescent));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(rightDescent));
  }
  if (!(completingByRightParen)) {
    if ((AttributeOperations.getAttribute(expr,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null)) {
      ListSequence.fromList(result).addElement(expr);
    }
    ListSequence.fromList(result).addSequence(ListSequence.fromList(rightDescent));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(leftDescent));
  }
  return result;
}
