{
  SNode current=expr;
  while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"))) {
    current=SNodeOperations.cast(SNodeOperations.getParent(current),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"));
  }
  List<SNode> candidates=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(candidates).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(current,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),true,new SAbstractConcept[]{})));
  checkCandidateExpressionsPriorities(candidates);
}
