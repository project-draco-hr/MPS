{
  if (SNodeOperations.isInstanceOf(of,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    if (left) {
      SLinkOperations.setTarget(SNodeOperations.cast(of,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",to,true);
    }
 else {
      SLinkOperations.setTarget(SNodeOperations.cast(of,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",to,true);
    }
    return;
  }
  if (SNodeOperations.isInstanceOf(of,"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    if (left) {
      SLinkOperations.setTarget(SNodeOperations.cast(of,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",to,true);
    }
 else {
      throw new IllegalStateException("Cannot set the right expression for: " + SNodeOperations.getConceptDeclaration(of));
    }
    return;
  }
  throw new IllegalStateException("Cannot split " + SNodeOperations.getConceptDeclaration(of) + " into left and right expressions:");
}
