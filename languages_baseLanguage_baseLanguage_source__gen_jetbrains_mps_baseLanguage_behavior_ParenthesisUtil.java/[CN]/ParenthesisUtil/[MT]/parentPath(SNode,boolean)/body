{
  List<SNode> path=new ArrayList<SNode>();
  ListSequence.fromList(path).addElement(leaf);
  List<SNode> leafAncestors=SNodeOperations.getAncestors(leaf,null,true);
  for (SNode currentNode=SNodeOperations.getParent(leaf); SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"); currentNode=SNodeOperations.getParent(currentNode)) {
    if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.IBinaryLike")) {
      SNode curr=SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.IBinaryLike");
      if (ListSequence.fromList(leafAncestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),curr,"virtual_getSyntacticallyLeftSideExpression_1742226163722653708",new Object[]{})) || ListSequence.fromList(leafAncestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),curr,"virtual_getSyntacticallyRightSideExpression_1742226163722653714",new Object[]{}))) {
        ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"));
        if (BehaviorReflection.invokeVirtual(Boolean.TYPE,curr,"virtual_canPropagateUnmatchedParenUp_1742226163722653670",new Object[]{leaf,rightParen})) {
          continue;
        }
      }
    }
    break;
  }
  return path;
}
