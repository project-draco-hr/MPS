{
  List<SNode> path=new ArrayList<SNode>();
  ListSequence.fromList(path).addElement(leaf);
  for (SNode currentNode=SNodeOperations.getParent(leaf); SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"); currentNode=SNodeOperations.getParent(currentNode)) {
    ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"));
    if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") && !(ListSequence.fromList(SNodeOperations.getAncestors(leaf,null,false)).contains(SLinkOperations.getTarget(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifTrue",true)))) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.CastExpression") && rightParen && isTheRightMostExpression(SLinkOperations.getTarget(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.CastExpression"),"expression",true),leaf)) {
      continue;
    }
 else     if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.DotExpression") && !(rightParen)) {
      continue;
    }
 else {
      break;
    }
  }
  return path;
}
