{
  List<SNode> path=new ArrayList<SNode>();
  ListSequence.fromList(path).addElement(leaf);
  SNode currentNode=SNodeOperations.getParent(leaf);
  while ((SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"))) {
    ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"));
    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"),"virtual_isCompileTimeConstant_1238860258777",new Object[]{}) || SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation") || SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"))) {
      if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.CastExpression") && rightParen && isTheRightMostExpression(SLinkOperations.getTarget(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.CastExpression"),"expression",true),leaf)) {
      }
 else       if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.DotExpression") && !(rightParen)) {
      }
 else {
        break;
      }
    }
    currentNode=SNodeOperations.getParent(currentNode);
  }
  return path;
}
