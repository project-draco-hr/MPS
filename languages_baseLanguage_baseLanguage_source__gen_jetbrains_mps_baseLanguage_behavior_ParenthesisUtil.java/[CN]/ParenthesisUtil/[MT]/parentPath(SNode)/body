{
  SNode currentNode=SNodeOperations.getParent(leaf);
  List<SNode> path=new ArrayList<SNode>();
  ListSequence.fromList(path).addElement(leaf);
  while (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.Expression") && (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation") || (SNodeOperations.isInstanceOf(SNodeOperations.getParent(currentNode),"jetbrains.mps.baseLanguage.structure.Expression") && PrecedenceUtil.isHigherPriority(SNodeOperations.getParent(currentNode),currentNode)))) {
    ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.Expression"));
    currentNode=SNodeOperations.getParent(currentNode);
  }
  return path;
}
