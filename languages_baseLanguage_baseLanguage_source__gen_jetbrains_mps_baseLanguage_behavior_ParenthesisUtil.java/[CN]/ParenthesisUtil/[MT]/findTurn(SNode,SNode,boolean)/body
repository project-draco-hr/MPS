{
  SNode currentNode=SNodeOperations.getParent(leaf);
  SNode previous=leaf;
  while (neq_a65dpo_a0c0p(previous,stopNode)) {
    if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      if (leftTurn && eq_a65dpo_a0a0a0a2a51(SLinkOperations.getTarget(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true),previous)) {
        return SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation");
      }
      if (!(leftTurn) && eq_a65dpo_a0a1a0a2a51(SLinkOperations.getTarget(SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),previous)) {
        return SNodeOperations.cast(currentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation");
      }
    }
    previous=currentNode;
    currentNode=SNodeOperations.getParent(currentNode);
  }
  return stopNode;
}
