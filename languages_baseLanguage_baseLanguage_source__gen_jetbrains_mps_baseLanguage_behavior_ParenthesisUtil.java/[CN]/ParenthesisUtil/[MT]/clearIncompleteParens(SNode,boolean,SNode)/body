{
  int count=0;
  if (completingByRightParen) {
    count=SPropertyOperations.getInteger(AttributeOperations.getAttribute(otherExpression,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")),MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1071364028384826861l,1071364028384826862l,"count"));
    AttributeOperations.setAttribute(otherExpression,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"),null);
    AttributeOperations.setAttribute(parens,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"),null);
  }
 else {
    count=SPropertyOperations.getInteger(AttributeOperations.getAttribute(otherExpression,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")),MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1071364028384826861l,1071364028384826862l,"count"));
    AttributeOperations.setAttribute(otherExpression,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"),null);
    AttributeOperations.setAttribute(parens,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"),null);
  }
  count-=1;
  if (count < 1) {
    return;
  }
  for (int i=0; i < count; i++) {
    setOrIncreaseParen(parens,!(completingByRightParen));
  }
}
