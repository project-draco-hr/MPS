{
  SNode sideExpr=(isRight ? SLinkOperations.getTarget(node,"rightExpression",true) : SLinkOperations.getTarget(node,"leftExpression",true));
  if (SNodeOperations.isInstanceOf(sideExpr,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    SNode sideChild=SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.BinaryOperation");
    if (isBadPriority(sideChild,node,isRight)) {
      ParenthesisUtil.rotateTree(sideChild,node,isRight);
      ListSequence.fromList(candidates).addElement(SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      return false;
    }
  }
 else   if (SNodeOperations.isInstanceOf(sideExpr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
    SNodeOperations.replaceWithAnother(node,sideExpr);
    if (isRight) {
      SLinkOperations.setTarget(node,"rightExpression",SLinkOperations.getTarget(SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",true),true);
      SLinkOperations.setTarget(SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",node,true);
    }
 else {
      SLinkOperations.setTarget(node,"leftExpression",SLinkOperations.getTarget(SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifFalse",true),true);
      SLinkOperations.setTarget(SNodeOperations.cast(sideExpr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifFalse",node,true);
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(sideExpr),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      ListSequence.fromList(candidates).addElement(SNodeOperations.cast(SNodeOperations.getParent(sideExpr),"jetbrains.mps.baseLanguage.structure.BinaryOperation"));
    }
    return false;
  }
  return true;
}
