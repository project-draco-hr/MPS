{
  if (SNodeOperations.getParent(node) == null) {
    return true;
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    SNode parent=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
    boolean isRight=false;
    if (SLinkOperations.getTarget(parent,"rightExpression",true) == node) {
      isRight=true;
    }
 else     if (SLinkOperations.getTarget(parent,"leftExpression",true) == node) {
      isRight=false;
    }
    if (ParenthesisUtil.isBadPriority(node,parent,isRight)) {
      ParenthesisUtil.rotateTree(node,parent,isRight);
      checkOperationWRTPriority(node);
      return false;
    }
  }
 else {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation")) {
      SNode parent=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation");
      SLinkOperations.setTarget(parent,"expression",SLinkOperations.getTarget(node,"leftExpression",true),true);
      SNodeOperations.replaceWithAnother(parent,node);
      SLinkOperations.setTarget(node,"leftExpression",parent,true);
    }
 else     if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.CastExpression")) {
      SNode castExpr=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.CastExpression");
      SNodeOperations.replaceWithAnother(castExpr,node);
      SLinkOperations.setTarget(castExpr,"expression",SLinkOperations.getTarget(node,"leftExpression",true),true);
      SLinkOperations.setTarget(node,"leftExpression",castExpr,true);
    }
 else     if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.hasRole(node,"jetbrains.mps.baseLanguage.structure.DotExpression","operand")) {
      SNode dotExpr=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression");
      SNodeOperations.replaceWithAnother(dotExpr,node);
      SLinkOperations.setTarget(dotExpr,"operand",SLinkOperations.getTarget(node,"rightExpression",true),true);
      SLinkOperations.setTarget(node,"rightExpression",dotExpr,true);
    }
 else {
      return true;
    }
    checkOperationWRTPriority(node);
  }
  return false;
}
