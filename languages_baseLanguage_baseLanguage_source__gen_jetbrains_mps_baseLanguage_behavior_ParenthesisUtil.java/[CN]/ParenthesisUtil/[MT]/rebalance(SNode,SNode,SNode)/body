{
  SNode leftAccumulator=buildAccumulator(firstCommonAncestor,leftTurn,true);
  SNode rightAccumulator=buildAccumulator(firstCommonAncestor,rightTurn,false);
  SNode parens=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
  if (SNodeOperations.isInstanceOf(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    rebalanceIBinaryLikeAfterParenthing(SNodeOperations.cast(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),rightTurn,leftTurn,parens,rightAccumulator,leftAccumulator);
  }
 else   if (SNodeOperations.isInstanceOf(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
    rebalanceTernaryOpAfterParenthing(SNodeOperations.cast(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),rightTurn,leftTurn,parens,rightAccumulator,leftAccumulator);
  }
 else   if (SNodeOperations.isInstanceOf(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.CastExpression") || SNodeOperations.isInstanceOf(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
    rebalanceIBinaryLikeAfterParenthing(SNodeOperations.cast(firstCommonAncestor,"jetbrains.mps.baseLanguage.structure.IBinaryLike"),rightTurn,leftTurn,parens,rightAccumulator,leftAccumulator);
  }
  SLinkOperations.setTarget(parens,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1079359253375l,1079359253376l,"expression"),firstCommonAncestor);
  return parens;
}
