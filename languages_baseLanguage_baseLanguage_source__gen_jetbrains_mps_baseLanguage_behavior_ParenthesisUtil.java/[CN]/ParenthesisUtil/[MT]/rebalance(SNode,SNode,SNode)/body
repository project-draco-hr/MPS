{
  SNode leftAccumulator;
  SNode rightAccumulator;
  if (neq_a65dpo_a0i0r(leftTurn,firstCommon)) {
    leftAccumulator=SLinkOperations.getTarget(SNodeOperations.cast(leftTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true);
    SNodeOperations.detachNode(leftAccumulator);
    SNode current=SNodeOperations.cast(SNodeOperations.getParent(leftTurn),"jetbrains.mps.baseLanguage.structure.Expression");
    SNode previous=leftTurn;
    while (neq_a65dpo_a0f0i0r(current,firstCommon)) {
      if (SNodeOperations.isInstanceOf(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && eq_a65dpo_a0a0a5a8a71(SLinkOperations.getTarget(SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),previous)) {
        SNodeOperations.replaceWithAnother(current,previous);
        SLinkOperations.setTarget(SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",leftAccumulator,true);
        leftAccumulator=current;
      }
 else {
        previous=current;
      }
      current=SNodeOperations.cast(SNodeOperations.getParent(previous),"jetbrains.mps.baseLanguage.structure.Expression");
    }
  }
 else {
    if (SNodeOperations.isInstanceOf(firstCommon,"jetbrains.mps.baseLanguage.structure.CastExpression")) {
      leftAccumulator=firstCommon;
    }
 else {
      leftAccumulator=(SNodeOperations.isInstanceOf(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",true));
      SNodeOperations.detachNode(leftAccumulator);
    }
  }
  if (neq_a65dpo_a0k0r(rightTurn,firstCommon)) {
    rightAccumulator=SLinkOperations.getTarget(SNodeOperations.cast(rightTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true);
    SNodeOperations.detachNode(rightAccumulator);
    SNode current=SNodeOperations.cast(SNodeOperations.getParent(rightTurn),"jetbrains.mps.baseLanguage.structure.Expression");
    SNode previous=rightTurn;
    while (neq_a65dpo_a0a5a01a71(current,firstCommon) && !(SNodeOperations.isInstanceOf(current,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") || SNodeOperations.isInstanceOf(current,"jetbrains.mps.baseLanguage.structure.CastExpression"))) {
      if (SNodeOperations.isInstanceOf(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && eq_a65dpo_a0a0a5a01a71(SLinkOperations.getTarget(SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true),previous)) {
        SNodeOperations.replaceWithAnother(current,previous);
        SLinkOperations.setTarget(SNodeOperations.cast(current,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",rightAccumulator,true);
        rightAccumulator=current;
      }
 else {
        previous=current;
      }
      current=SNodeOperations.cast(SNodeOperations.getParent(previous),"jetbrains.mps.baseLanguage.structure.Expression");
    }
  }
 else {
    rightAccumulator=(SNodeOperations.isInstanceOf(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifFalse",true));
    SNodeOperations.detachNode(rightAccumulator);
  }
  SNode parens=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
  if (SNodeOperations.isInstanceOf(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    ParenthesisUtil.hookInBinaryOperation(firstCommon,rightTurn,leftTurn,parens,rightAccumulator,leftAccumulator);
  }
 else   if (SNodeOperations.isInstanceOf(firstCommon,"jetbrains.mps.baseLanguage.structure.CastExpression")) {
    ParenthesisUtil.hookInCastExpression(firstCommon,rightTurn,parens,rightAccumulator);
  }
 else {
    ParenthesisUtil.hookInTernaryOperator(firstCommon,rightTurn,leftTurn,parens,rightAccumulator,leftAccumulator);
  }
  SLinkOperations.setTarget(parens,"expression",firstCommon,true);
  return parens;
}
