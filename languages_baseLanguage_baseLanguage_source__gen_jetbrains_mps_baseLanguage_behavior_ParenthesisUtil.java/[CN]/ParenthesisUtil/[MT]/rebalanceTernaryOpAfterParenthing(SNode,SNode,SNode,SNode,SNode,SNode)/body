{
  SNode bottomMostTernary=findBottomMostTernary(node);
  if (rightTurn != null) {
    SNodeOperations.replaceWithAnother(node,SLinkOperations.getTarget(bottomMostTernary,"ifFalse",true));
    if (leftTurn != null) {
      BehaviorReflection.invokeVirtual(Void.class,rightTurn,"virtual_setSyntacticallyLeftSideExpression_1742226163722653680",new Object[]{SLinkOperations.getTarget(node,"condition",true)});
      BehaviorReflection.invokeVirtual(Void.class,leftTurn,"virtual_setSyntacticallyRightSideExpression_1742226163722653694",new Object[]{parens});
    }
 else {
      BehaviorReflection.invokeVirtual(Void.class,rightTurn,"virtual_setSyntacticallyLeftSideExpression_1742226163722653680",new Object[]{parens});
    }
  }
 else {
    if (leftTurn != null) {
      SNodeOperations.replaceWithAnother(node,SLinkOperations.getTarget(node,"condition",true));
      BehaviorReflection.invokeVirtual(Void.class,leftTurn,"virtual_setSyntacticallyRightSideExpression_1742226163722653694",new Object[]{parens});
    }
 else {
      SNodeOperations.replaceWithAnother(node,parens);
    }
  }
  SLinkOperations.setTarget(bottomMostTernary,"ifFalse",rightAccumulator,true);
  SLinkOperations.setTarget(node,"condition",leftAccumulator,true);
}
