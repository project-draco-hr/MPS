{
  SNode accumulator;
  if (turn != null && neq_a65dpo_a0a1a72(turn,firstCommonAncestor)) {
    accumulator=(left ? IBinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id1wHCnsn590i.invoke(turn) : IBinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id1wHCnsn590c.invoke(turn));
    SNodeOperations.detachNode(accumulator);
    SNode current=SNodeOperations.cast(SNodeOperations.getParent(turn),MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x182da1771714863eL,"jetbrains.mps.baseLanguage.structure.IBinaryLike"));
    SNode previous=turn;
    while (neq_a65dpo_a0f0b0bb(current,firstCommonAncestor)) {
      SNode sideExpression=(left ? IBinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id1wHCnsn590c.invoke(current) : IBinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id1wHCnsn590i.invoke(current));
      if (sideExpression != null && eq_a65dpo_a0a1a5a1a72(sideExpression,previous)) {
        SNodeOperations.replaceWithAnother(current,previous);
        if (left) {
          IBinaryLike__BehaviorDescriptor.setSyntacticallyLeftSideExpression_id1wHCnsn58ZK.invoke(current,accumulator);
        }
 else {
          IBinaryLike__BehaviorDescriptor.setSyntacticallyRightSideExpression_id1wHCnsn58ZY.invoke(current,accumulator);
        }
        accumulator=SNodeOperations.cast(current,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"));
      }
 else {
        previous=current;
      }
      current=SNodeOperations.cast(SNodeOperations.getParent(previous),MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x182da1771714863eL,"jetbrains.mps.baseLanguage.structure.IBinaryLike"));
    }
  }
 else {
    SNode firstCommonAncestorChild=(left ? IBinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id1wHCnsn590c.invoke(firstCommonAncestor) : IBinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id1wHCnsn590i.invoke(firstCommonAncestor));
    if (firstCommonAncestorChild != null) {
      accumulator=firstCommonAncestorChild;
      SNodeOperations.detachNode(accumulator);
    }
 else {
      accumulator=null;
    }
  }
  return accumulator;
}
