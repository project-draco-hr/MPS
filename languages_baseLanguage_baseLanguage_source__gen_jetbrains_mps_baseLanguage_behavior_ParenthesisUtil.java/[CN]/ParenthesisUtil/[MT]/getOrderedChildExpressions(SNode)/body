{
  if (SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true));
  }
  if (SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",true),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifTrue",true),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"ifFalse",true));
  }
  if (SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true));
  }
  return ListSequence.fromList(SNodeOperations.getChildren(expr)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Expression");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Expression");
    }
  }
).toListSequence();
}
