{
  if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true) != null)) {
    SNodeOperations.replaceWithAnother(firstCommon,SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true));
    if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true) != null)) {
      SLinkOperations.setTarget(SNodeOperations.cast(rightTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),true);
      SLinkOperations.setTarget(SNodeOperations.cast(leftTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",parens,true);
    }
 else {
      SLinkOperations.setTarget(SNodeOperations.cast(rightTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",parens,true);
    }
  }
 else {
    SNodeOperations.replaceWithAnother(firstCommon,SLinkOperations.getTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true));
    SLinkOperations.setTarget(SNodeOperations.cast(leftTurn,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",parens,true);
  }
  SLinkOperations.setTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",rightAccumulator,true);
  SLinkOperations.setTarget(SNodeOperations.cast(firstCommon,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",leftAccumulator,true);
}
