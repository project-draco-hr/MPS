{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("key",new BaseReferenceConstraintsDescriptor("key",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.AnnotationInstance")) {
            SNode annotationInstance=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.AnnotationInstance");
            List<SNode> annotationMethodDeclarations=SLinkOperations.getTargets(SLinkOperations.getTarget(annotationInstance,"annotation",false),"method",true);
            if ((int)ListSequence.fromList(annotationMethodDeclarations).count() == 1) {
              return annotationMethodDeclarations;
            }
          }
          return Sequence.fromIterable(Collections.<SNode>emptyList());
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_b29p6n_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
