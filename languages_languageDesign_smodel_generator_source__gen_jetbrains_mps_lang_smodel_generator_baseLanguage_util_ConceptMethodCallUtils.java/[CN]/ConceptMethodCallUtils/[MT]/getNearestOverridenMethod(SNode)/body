{
  if (!(Node_ConceptMethodCall_BehaviorDescriptor.isVirtualMethodCall_idhEwIWlZ.invoke(methodCall))) {
    return SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
  }
  SNode behavior=SNodeOperations.getNodeAncestor(methodCall,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),false,false);
  SAbstractConcept concept=SNodeOperations.asSConcept(SLinkOperations.getTarget(behavior,MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,0x11d43447b1fL,"concept")));
  List<SAbstractConcept> ancestors=new C3StarMethodResolutionOrder().linearize(concept);
  for (  SAbstractConcept ancestor : ListSequence.fromList(ancestors)) {
    if (ancestor == concept) {
      continue;
    }
    SNode method=findOverridingMethodInConcept(SNodeOperations.cast(ancestor.getDeclarationNode(),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")),SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")));
    if (method != null) {
      return method;
    }
  }
  throw new IllegalArgumentException("Method " + SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")) + " could not be found");
}
