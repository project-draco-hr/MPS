{
  new Mapper<ResizableSelectionFrameView,ResizableSelectionFrameView>(this,this){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forProperty(resizable,new Runnable(){
        public void run(){
          updateCornerResizeHandlePositions(resizable.get(),frameRectangle.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(frameRectangle,new Runnable(){
        public void run(){
          updateCornerResizeHandlePositions(resizable.get(),frameRectangle.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(resizable,new Runnable(){
        public void run(){
          updateSideResizeHandlePositions(resizable.get(),showSideHandler.get(),frameRectangle.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(showSideHandler,new Runnable(){
        public void run(){
          updateSideResizeHandlePositions(resizable.get(),showSideHandler.get(),frameRectangle.get());
        }
      }
));
      configuration.add(Synchronizers.forProperty(frameRectangle,new Runnable(){
        public void run(){
          updateSideResizeHandlePositions(resizable.get(),showSideHandler.get(),frameRectangle.get());
        }
      }
));
      configuration.add(Synchronizers.forConstantRole(this,ResizableSelectionFrameView.this,childSubList(),new MapperFactory<ResizableSelectionFrameView,SelectionFrameView>(){
        public Mapper<? extends ResizableSelectionFrameView,? extends SelectionFrameView> createMapper(        ResizableSelectionFrameView decoratorView){
          return new Mapper<ResizableSelectionFrameView,SelectionFrameView>(decoratorView,new SelectionFrameView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              configuration.add(Synchronizers.forProperty(color,getTarget().color));
              configuration.add(Synchronizers.forProperty(frameWidth,getTarget().frameWidth));
              configuration.add(Synchronizers.forProperty(internalsBounds,getTarget().internalsBounds));
              configuration.add(Synchronizers.forProperty(selectionLineWidth,getTarget().lineWidth));
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,myCornerResizeHandlePositions,childSubList(),new MapperFactory<Vector,ResizeHandleView>(){
        public Mapper<? extends Vector,? extends ResizeHandleView> createMapper(        Vector position){
          return createResizeHanleMapper(position);
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,mySideResizeHandlePositions,childSubList(),new MapperFactory<Vector,ResizeHandleView>(){
        public Mapper<? extends Vector,? extends ResizeHandleView> createMapper(        Vector position){
          return createResizeHanleMapper(position);
        }
      }
));
    }
  }
.attachRoot();
}
