{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode dotOperand=IOperation_Behavior.call_getOperand_1213877410070(SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.lang.smodel.structure.PropertyAttributeAccessQualifier")),"jetbrains.mps.baseLanguage.structure.IOperation"));
          SNode nodeType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(dotOperand),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),true);
          if (nodeType == null) {
            return null;
          }
          SNode dotOperandConcept=SLinkOperations.getTarget(nodeType,"concept",false);
          if (dotOperandConcept == null) {
            dotOperandConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
          }
          return AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(dotOperandConcept);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_dxp0dd_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
