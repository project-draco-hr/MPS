{
  this.addNodeById("818296778579227382");
  this.addNodeById("818296778579227391");
  SNode op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfe476b758fL,"jetbrains.mps.baseLanguage.structure.MulExpression")));
  SNode constant=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc59b314L,"jetbrains.mps.baseLanguage.structure.IntegerConstant")));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc59b314L,0xf8cc59b315L,"value"),"" + (3));
  SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11cL,"leftExpression"),constant);
  SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById("818296778579227386"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7fbL,"jetbrains.mps.baseLanguage.structure.PlusExpression")),op);
  SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11bL,"rightExpression"),SNodeOperations.cast(this.getNodeById("818296778579227386"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7fbL,"jetbrains.mps.baseLanguage.structure.PlusExpression")));
  ParenthesisUtil.checkOperationWRTPriority(op);
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("818296778579227394"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("818296778579227385"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
