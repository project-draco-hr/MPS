{
  int unmatchedLeftParens=((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x64a1ef64cd9b42ceL,"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"))) != null) ? SPropertyOperations.getInteger(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x64a1ef64cd9b42ceL,"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"))),MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xede3fe8510255edL,0xede3fe8510255eeL,"count")) : 0);
  int unmatchedRightParens=((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2052c4520af308e1L,"jetbrains.mps.baseLanguage.structure.IncompleteRightParen"))) != null) ? SPropertyOperations.getInteger(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x2052c4520af308e1L,"jetbrains.mps.baseLanguage.structure.IncompleteRightParen"))),MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xede3fe8510255edL,0xede3fe8510255eeL,"count")) : 0);
  SNode replacing=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,0xfb4ed32b80L,"expression"));
  if (replacing == null) {
    SNodeOperations.deleteNode(node);
    return;
  }
  SNode leftMostNode=EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing,false);
  SNodeOperations.replaceWithAnother(node,replacing);
  SNode rightMostNode=EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing,true);
  ParenthesisUtil.checkWholeExpressionPriorities(replacing);
  ParenthesisUtil.createUnmatchedLeftParenthesis(leftMostNode);
  if (unmatchedLeftParens > 0) {
    for (int i=0; i < unmatchedLeftParens; i++) {
      ParenthesisUtil.createUnmatchedLeftParenthesis(leftMostNode);
    }
  }
  if (unmatchedRightParens > 0) {
    for (int i=0; i < unmatchedRightParens; i++) {
      ParenthesisUtil.createUnmatchedRightParenthesis(rightMostNode);
    }
  }
  SelectionUtil.selectLabelCellAnSetCaret(editorContext,rightMostNode,SelectionManager.LAST_CELL,-1);
}
