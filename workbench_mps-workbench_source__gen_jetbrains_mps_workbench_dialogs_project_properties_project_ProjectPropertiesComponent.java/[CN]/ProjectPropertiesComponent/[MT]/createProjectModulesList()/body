{
  final JBList list=new JBList(new ProjectPropertiesComponent.PathsListModel());
  list.setCellRenderer(new PathRenderer());
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(list);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      Path path=new ModulePathChooser(new IBindedDialog(){
        public jetbrains.mps.project.Project getProject(){
          return null;
        }
        @Override public JComponent getMainComponent(){
          return null;
        }
        @Override public IOperationContext getOperationContext(){
          return null;
        }
        @Override public IScope getModuleScope(){
          return null;
        }
        @Override public IScope getProjectScope(){
          return null;
        }
        @Override public void addBinding(        AutoBinding p0){
        }
      }
).compute();
      if (path != null) {
        for (        Path p : ((ProjectPropertiesComponent.PathsListModel)list.getModel()).getPaths()) {
          if (p.isSamePath(path)) {
            list.setSelectedValue(p,true);
            return;
          }
        }
        ((ProjectPropertiesComponent.PathsListModel)list.getModel()).addPath(path);
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      ((ProjectPropertiesComponent.PathsListModel)list.getModel()).removePath(list.getSelectedValue());
    }
  }
).disableUpAction().disableDownAction();
  decorator.setPreferredSize(new Dimension(500,150));
  JPanel panel=decorator.createPanel();
  panel.setBorder(IdeBorderFactory.createTitledBorder("Modules",false));
  return panel;
}
