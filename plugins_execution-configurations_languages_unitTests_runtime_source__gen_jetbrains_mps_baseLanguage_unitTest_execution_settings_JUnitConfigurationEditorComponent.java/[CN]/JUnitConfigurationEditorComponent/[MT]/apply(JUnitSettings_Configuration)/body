{
  final List<ITestNodeWrapper> classes=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  ListSequence.fromList(classes).addSequence(ListSequence.fromList(myClassesList.getItems()));
  final List<ITestNodeWrapper> methods=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  ListSequence.fromList(methods).addSequence(ListSequence.fromList(myMethodsList.getItems()));
  final ClonableList<String> testMethods=new ClonableList<String>();
  final ClonableList<String> testCases=new ClonableList<String>();
  final Wrappers._T<String> model=new Wrappers._T<String>();
  final Wrappers._T<String> module=new Wrappers._T<String>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      ITestNodeWrapper testMethod : methods) {
        testMethods.add(PointerUtils.pointerToString(testMethod.getNodePointer()));
      }
      for (      ITestNodeWrapper testCase : classes) {
        testCases.add(PointerUtils.pointerToString(testCase.getNodePointer()));
      }
      if (myModel != null) {
        model.value=myModel.getModelName();
      }
      if (myModule != null) {
        module.value=myModule.getModuleName();
      }
    }
  }
);
  configuration.setRunType(myRunKind);
  configuration.setTestMethods(testMethods);
  configuration.setTestCases(testCases);
  configuration.setModel(model.value);
  configuration.setModule(module.value);
  configuration.setLightExec(myLightExecCheckBox.isSelected());
  configuration.setReuseCaches(myReuseCachesCheckBox.isSelected());
  configuration.setCachesPath(myCachesDir.getText());
}
