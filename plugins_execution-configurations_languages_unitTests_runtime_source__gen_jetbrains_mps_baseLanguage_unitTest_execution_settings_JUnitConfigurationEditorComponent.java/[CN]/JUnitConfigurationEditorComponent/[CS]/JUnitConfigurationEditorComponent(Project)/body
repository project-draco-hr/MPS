{
  super(new GridBagLayout());
  final JBPanel kindPanel=new JBPanel(new FlowLayout(FlowLayout.LEFT));
  kindPanel.add(new JBLabel("Test kind:"));
  final JBRadioButton projectKind=new JBRadioButton("All in project",true);
  final JBRadioButton moduleKind=new JBRadioButton("All in module");
  final JBRadioButton modelKind=new JBRadioButton("All in model");
  final JBRadioButton classKind=new JBRadioButton("Class");
  final JBRadioButton methodKind=new JBRadioButton("Method");
  myButtons[JUnitRunTypes.PROJECT.ordinal()]=projectKind;
  myButtons[JUnitRunTypes.MODULE.ordinal()]=moduleKind;
  myButtons[JUnitRunTypes.MODEL.ordinal()]=modelKind;
  myButtons[JUnitRunTypes.NODE.ordinal()]=classKind;
  myButtons[JUnitRunTypes.METHOD.ordinal()]=methodKind;
  final ButtonGroup kindaRadioGroup=new ButtonGroup();
  Sequence.fromIterable(Sequence.fromArray(myButtons)).visitAll(new IVisitor<JBRadioButton>(){
    public void visit(    JBRadioButton it){
      kindaRadioGroup.add(it);
      kindPanel.add(it);
    }
  }
);
  projectKind.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (projectKind.isSelected()) {
        myRunKind=JUnitRunTypes.PROJECT;
      }
      updatePanels();
    }
  }
);
  moduleKind.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (moduleKind.isSelected()) {
        myRunKind=JUnitRunTypes.MODULE;
      }
      updatePanels();
    }
  }
);
  modelKind.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (modelKind.isSelected()) {
        myRunKind=JUnitRunTypes.MODEL;
      }
      updatePanels();
    }
  }
);
  classKind.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (classKind.isSelected()) {
        myRunKind=JUnitRunTypes.NODE;
      }
      updatePanels();
    }
  }
);
  methodKind.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (methodKind.isSelected()) {
        myRunKind=JUnitRunTypes.METHOD;
      }
      updatePanels();
    }
  }
);
  JBPanel projectPanel=new JBPanel(new GridBagLayout());
  projectPanel.add(new JBLabel("Project:"),LayoutUtil.createLabelConstraints(0));
  JBTextField projectNameField=new JBTextField(project.getName());
  projectNameField.setEditable(false);
  projectPanel.add(projectNameField,LayoutUtil.createPanelConstraints(1));
  JBPanel modulePanel=new JBPanel(new GridBagLayout());
  modulePanel.add(new JBLabel("Module:"),LayoutUtil.createLabelConstraints(0));
  myModuleChooser=new ModuleChooser();
  myModuleChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setModuleValue(myModuleChooser.getText());
    }
  }
);
  modulePanel.add(myModuleChooser,LayoutUtil.createPanelConstraints(1));
  JBPanel modelPanel=new JBPanel(new GridBagLayout());
  modelPanel.add(new JBLabel("Model:"),LayoutUtil.createLabelConstraints(0));
  myModelChooser=new ModelChooser();
  myModelChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setModelValue(myModelChooser.getText());
    }
  }
);
  modelPanel.add(myModelChooser,LayoutUtil.createPanelConstraints(1));
  myClassesList=new TestListPanel(project,false);
  myMethodsList=new TestListPanel(project,true);
  myPanels[JUnitRunTypes.PROJECT.ordinal()]=projectPanel;
  myPanels[JUnitRunTypes.MODULE.ordinal()]=modulePanel;
  myPanels[JUnitRunTypes.MODEL.ordinal()]=modelPanel;
  myPanels[JUnitRunTypes.NODE.ordinal()]=myClassesList;
  myPanels[JUnitRunTypes.METHOD.ordinal()]=myMethodsList;
  add(kindPanel,LayoutUtil.createFieldConstraints(0));
  add(projectPanel,LayoutUtil.createPanelConstraints(1));
  add(modulePanel,LayoutUtil.createPanelConstraints(1));
  add(modelPanel,LayoutUtil.createPanelConstraints(1));
  add(myClassesList,LayoutUtil.createPanelConstraints(1));
  add(myMethodsList,LayoutUtil.createPanelConstraints(1));
}
