{
  SearchResults global_results=new SearchResults();
{
    SNode searchedNode=(SNode)searchQuery.getNode();
    List<SNode> fieldDeclarations=new ArrayList<SNode>();
    if (SNodeOperations.getAncestor(searchedNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) != null) {
      global_results.getSearchedNodePointers().add(new SNodePointer(searchedNode));
      ListOperations.addElement(fieldDeclarations,searchedNode);
      List<SearchResult> fieldDeclarationsResult=new ArrayList<SearchResult>();
      try {
        BaseFinder finder_7=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder").newInstance();
        boolean rightConcept=true;
        if (!(rightConcept)) {
          FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + finder_7.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
        }
 else {
          boolean isApplicable=finder_7.isApplicable(searchedNode);
          if (!(isApplicable)) {
            FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + finder_7.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
          }
 else {
            SearchResults results_7=finder_7.find(new SearchQuery(searchedNode,searchQuery.getScope()));
            for (            SearchResult result : results_7.getSearchResults()) {
              fieldDeclarationsResult.add(result);
            }
          }
        }
      }
 catch (      Throwable t) {
        FieldUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder" + "\"  Message:"+ t.getMessage());
      }
{
        ICursor<SearchResult> _zCursor2=CursorFactory.createCursor(fieldDeclarationsResult);
        try {
          while (_zCursor2.moveToNext()) {
            SearchResult result=_zCursor2.getCurrent();
            ListOperations.addElement(fieldDeclarations,(SNode)result.getNode());
          }
        }
  finally {
          _zCursor2.release();
        }
      }
    }
 else {
      List<SearchResult> implementingClasses=new ArrayList<SearchResult>();
      try {
        BaseFinder finder_8=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder").newInstance();
        boolean rightConcept=true;
        if (!(rightConcept)) {
          FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + finder_8.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
        }
 else {
          boolean isApplicable=finder_8.isApplicable(SNodeOperations.getAncestor(searchedNode,"jetbrains.mps.baseLanguage.structure.Interface",false,false));
          if (!(isApplicable)) {
            FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + finder_8.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
          }
 else {
            SearchResults results_8=finder_8.find(new SearchQuery(SNodeOperations.getAncestor(searchedNode,"jetbrains.mps.baseLanguage.structure.Interface",false,false),searchQuery.getScope()));
            for (            SearchResult result : results_8.getSearchResults()) {
              implementingClasses.add(result);
            }
          }
        }
      }
 catch (      Throwable t) {
        FieldUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder" + "\"  Message:"+ t.getMessage());
      }
{
        ICursor<SearchResult> _zCursor3=CursorFactory.createCursor(implementingClasses);
        try {
          while (_zCursor3.moveToNext()) {
            SearchResult implementingClass=_zCursor3.getCurrent();
          }
        }
  finally {
          _zCursor3.release();
        }
      }
    }
  }
  return global_results;
}
