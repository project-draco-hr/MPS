{
  SearchResults global_results=new SearchResults();
{
    SNode searchedNode=(SNode)searchQuery.getNode();
    List<SNode> fieldDeclarations=new ArrayList<SNode>();
    ListOperations.addElement(fieldDeclarations,searchedNode);
    if (SNodeOperations.getAncestor(searchedNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false) != null) {
      List<SearchResult> fieldDeclarationsResult=new ArrayList<SearchResult>();
      try {
        BaseFinder _finder=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder").newInstance();
        SNode _node=searchedNode;
        IScope _scope;
        _scope=searchQuery.getScope();
        boolean rightConcept=true;
        if (!(rightConcept)) {
          FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
        }
 else {
          boolean isApplicable=_finder.isApplicable(_node);
          if (!(isApplicable)) {
            FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
          }
 else {
            SearchResults results_7=_finder.find(new SearchQuery(_node,_scope));
            for (            SearchResult result : results_7.getSearchResults()) {
              fieldDeclarationsResult.add(result);
            }
          }
        }
      }
 catch (      Throwable t) {
        FieldUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.OverridingFields_Finder" + "\"  Message:"+ t.getMessage());
      }
{
        ICursor<SearchResult> _zCursor2=CursorFactory.createCursor(fieldDeclarationsResult);
        try {
          while (_zCursor2.moveToNext()) {
            SearchResult result=_zCursor2.getCurrent();
            ListOperations.addElement(fieldDeclarations,(SNode)result.getNode());
          }
        }
  finally {
          _zCursor2.release();
        }
      }
    }
 else {
    }
    for (    SNode fieldDeclaration : fieldDeclarations) {
      global_results.getSearchedNodePointers().add(new SNodePointer(fieldDeclaration));
      List<SearchResult> fieldUsagesResult=new ArrayList<SearchResult>();
      try {
        BaseFinder _finder=(BaseFinder)Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
        SNode _node=fieldDeclaration;
        IScope _scope;
        _scope=searchQuery.getScope();
        boolean rightConcept=true;
        if (!(rightConcept)) {
          FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
        }
 else {
          boolean isApplicable=_finder.isApplicable(_node);
          if (!(isApplicable)) {
            FieldUsages_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
          }
 else {
            SearchResults results_8=_finder.find(new SearchQuery(_node,_scope));
            for (            SearchResult result : results_8.getSearchResults()) {
              fieldUsagesResult.add(result);
            }
          }
        }
      }
 catch (      Throwable t) {
        FieldUsages_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:"+ t.getMessage());
      }
      for (      SearchResult usage : fieldUsagesResult) {
        global_results.getSearchResults().add(new SearchResult(new SNodePointer(usage.getNode()),"Field Usages"));
      }
    }
  }
  return global_results;
}
