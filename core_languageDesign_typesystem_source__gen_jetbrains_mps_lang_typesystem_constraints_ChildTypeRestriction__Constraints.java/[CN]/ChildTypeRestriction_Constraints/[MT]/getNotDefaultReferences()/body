{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("childLinkDeclaration",new BaseReferenceConstraintsDescriptor("childLinkDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode inferenceRule=SNodeOperations.cast(SNodeOperations.getParent(_context.getReferenceNode()),"jetbrains.mps.lang.typesystem.structure.InferenceRule");
          SNode abstractConceptDeclaration=ApplicableNodeCondition_Behavior.call_getApplicableConcept_1213877307633(SLinkOperations.getTarget(inferenceRule,"applicableNode",true));
          ConceptAndSuperConceptsScope conceptScope=new ConceptAndSuperConceptsScope(abstractConceptDeclaration);
          return conceptScope;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_2b6n3q_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
