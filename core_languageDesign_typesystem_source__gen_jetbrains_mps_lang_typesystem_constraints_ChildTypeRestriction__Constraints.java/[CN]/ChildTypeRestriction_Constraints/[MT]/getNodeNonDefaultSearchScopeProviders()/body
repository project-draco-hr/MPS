{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("childLinkDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode inferenceRule=SNodeOperations.cast(SNodeOperations.getParent(_context.getReferenceNode()),"jetbrains.mps.lang.typesystem.structure.InferenceRule");
      SNode abstractConceptDeclaration=ApplicableNodeCondition_Behavior.call_getApplicableConcept_1213877307633(SLinkOperations.getTarget(inferenceRule,"applicableNode",true));
      ConceptAndSuperConceptsScope conceptScope=new ConceptAndSuperConceptsScope(abstractConceptDeclaration);
      return conceptScope;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902ae(jetbrains.mps.lang.typesystem.constraints)","1213104847822");
    }
  }
);
  return result;
}
