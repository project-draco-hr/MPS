{
  expand();
  SubTyping subTyping=myState.getTypeCheckingContext().getSubTyping();
  for (  SNode subType : new HashSet<SNode>(mySubToSuper.keySet())) {
    Map<SNode,EquationInfo> map=mySubToSuper.get(subType);
    for (    SNode superType : new ArrayList<SNode>(map.keySet())) {
      removeAndTrack(subType,superType);
      if (TypesUtil.isVariable(superType) || TypesUtil.isVariable(subType)) {
        continue;
      }
      EquationInfo info=map.get(superType);
      if (!subTyping.isSubType(subType,superType,info,isWeak(),isCheckOnly())) {
        myState.getNodeMaps().reportSubTypeError(subType,superType,info,isWeak());
      }
    }
  }
}
