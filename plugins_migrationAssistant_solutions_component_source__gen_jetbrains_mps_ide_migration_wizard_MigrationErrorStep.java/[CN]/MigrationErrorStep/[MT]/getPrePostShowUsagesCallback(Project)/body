{
  return new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          jetbrains.mps.project.Project mpsProject=ProjectHelper.toMPSProject(p);
          Iterable<SModule> modules=((Iterable<SModule>)mpsProject.getModulesWithGenerators());
          final Collection<Problem> problems=MigrationCheckUtil.getProblems(modules,100);
          ModelCheckerViewer v=new ModelCheckerViewer(p){
            @Override protected void close(){
              ModelCheckerTool.getInstance(p).closeTab(this);
              super.close();
            }
          }
;
          final SearchResults<ModelCheckerIssue> result=new SearchResults<ModelCheckerIssue>();
          CollectionSequence.fromCollection(problems).visitAll(new IVisitor<Problem>(){
            public void visit(            Problem it){
              Object r=it.getReason();
              ModelCheckerIssue mci;
              if (r instanceof SNode) {
                mci=new ModelCheckerIssue.NodeIssue(((org.jetbrains.mps.openapi.model.SNode)r),it.getMessage(),null);
              }
 else               if (r instanceof SModule) {
                mci=new ModelCheckerIssue.ModuleIssue(it.getMessage(),null);
              }
 else {
                throw new IllegalArgumentException(r.getClass().getName());
              }
              result.add(new SearchResult<ModelCheckerIssue>(mci,r,it.getCategory()));
            }
          }
);
          v.setSearchResults(result);
          ModelCheckerTool.getInstance(p).showTabWithResults(v,"Migration issues",IdeIcons.MODULE_GROUP_CLOSED);
        }
      }
);
    }
  }
;
}
