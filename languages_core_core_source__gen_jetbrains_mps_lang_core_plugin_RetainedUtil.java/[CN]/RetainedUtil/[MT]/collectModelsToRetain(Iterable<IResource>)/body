{
  final Map<IModule,Iterable<SModelDescriptor>> retainedModels=MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(new HashMap<IModule,Iterable<SModelDescriptor>>());
  Iterable<SModelDescriptor> empty=ListSequence.<SModelDescriptor>fromList(new ArrayList<SModelDescriptor>());
  for (  IResource it : input) {
    MResource mres=((MResource)it);
    IModule module=mres.module();
    MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).put(module,empty);
    Iterable<SModelDescriptor> modelsToRetain=Sequence.<SModelDescriptor>fromIterable(((Iterable<SModelDescriptor>)module.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
      public boolean accept(      SModelDescriptor it2){
        return it2.isGeneratable();
      }
    }
);
    if (module instanceof Language) {
      for (      final Generator gen : ((Language)module).getGenerators()) {
        if (!(MapSequence.fromMap(retainedModels).containsKey(gen))) {
          MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).put(gen,Sequence.<SModelDescriptor>fromIterable(((Iterable<SModelDescriptor>)gen.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
            public boolean accept(            SModelDescriptor it2){
              return it2.isGeneratable();
            }
          }
));
        }
        modelsToRetain=Sequence.<SModelDescriptor>fromIterable(modelsToRetain).concat(Sequence.<SModelDescriptor>fromIterable(Sequence.<SModelDescriptor>fromClosure(new ISequenceClosure<SModelDescriptor>(){
          public Iterable<SModelDescriptor> iterable(){
            return MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).get(gen);
          }
        }
)));
      }
    }
 else     if (module instanceof Generator) {
      final Language slang=((Generator)module).getSourceLanguage();
      if (!(MapSequence.fromMap(retainedModels).containsKey(slang))) {
        MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).put(slang,Sequence.<SModelDescriptor>fromIterable(((Iterable<SModelDescriptor>)slang.getOwnModelDescriptors())).subtract(ListSequence.<SModelDescriptor>fromList(module.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
          public boolean accept(          SModelDescriptor it3){
            return it3.isGeneratable();
          }
        }
));
      }
      for (      final Generator gen : slang.getGenerators()) {
        if (gen == module) {
          continue;
        }
        if (!(MapSequence.fromMap(retainedModels).containsKey(gen))) {
          MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).put(gen,Sequence.<SModelDescriptor>fromIterable(((Iterable<SModelDescriptor>)gen.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
            public boolean accept(            SModelDescriptor it2){
              return it2.isGeneratable();
            }
          }
));
        }
        modelsToRetain=Sequence.<SModelDescriptor>fromIterable(modelsToRetain).concat(Sequence.<SModelDescriptor>fromIterable(Sequence.<SModelDescriptor>fromClosure(new ISequenceClosure<SModelDescriptor>(){
          public Iterable<SModelDescriptor> iterable(){
            return MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).get(gen);
          }
        }
)));
      }
      modelsToRetain=Sequence.<SModelDescriptor>fromIterable(modelsToRetain).concat(Sequence.<SModelDescriptor>fromIterable(Sequence.<SModelDescriptor>fromClosure(new ISequenceClosure<SModelDescriptor>(){
        public Iterable<SModelDescriptor> iterable(){
          return MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).get(slang);
        }
      }
)));
    }
    MapSequence.<IModule,Iterable<SModelDescriptor>>fromMap(retainedModels).put(mres.module(),Sequence.<SModelDescriptor>fromIterable(modelsToRetain).subtract(Sequence.<SModelDescriptor>fromIterable(mres.models())).toListSequence());
  }
  return retainedModels;
}
