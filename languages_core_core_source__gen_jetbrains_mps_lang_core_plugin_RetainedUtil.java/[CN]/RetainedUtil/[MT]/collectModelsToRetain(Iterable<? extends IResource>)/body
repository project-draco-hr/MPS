{
  final Map<IModule,Iterable<SModel>> retainedModels=MapSequence.fromMap(new HashMap<IModule,Iterable<SModel>>());
  Iterable<SModel> empty=ListSequence.fromList(new ArrayList<SModel>());
  for (  IResource it : input) {
    MResource mres=((MResource)it);
    IModule module=mres.module();
    MapSequence.fromMap(retainedModels).put(module,empty);
    Iterable<SModel> modelsToRetain=Sequence.fromIterable(((Iterable<SModel>)module.getModels())).where(new IWhereFilter<SModel>(){
      public boolean accept(      SModel it2){
        return SNodeOperations.isGeneratable(it2);
      }
    }
);
    if (module instanceof Language) {
      for (      final Generator gen : ((Language)module).getGenerators()) {
        if (!(MapSequence.fromMap(retainedModels).containsKey(gen))) {
          MapSequence.fromMap(retainedModels).put(gen,Sequence.fromIterable(((Iterable<SModel>)gen.getOwnModelDescriptors())).where(new IWhereFilter<SModel>(){
            public boolean accept(            SModel it2){
              return SNodeOperations.isGeneratable(it2);
            }
          }
));
        }
        modelsToRetain=Sequence.fromIterable(modelsToRetain).concat(Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>(){
          public Iterable<SModel> iterable(){
            return MapSequence.fromMap(retainedModels).get(gen);
          }
        }
)));
      }
    }
 else     if (module instanceof Generator) {
      final Language slang=((Generator)module).getSourceLanguage();
      if (!(MapSequence.fromMap(retainedModels).containsKey(slang))) {
        MapSequence.fromMap(retainedModels).put(slang,Sequence.fromIterable(((Iterable<SModel>)slang.getOwnModelDescriptors())).subtract(Sequence.fromIterable(module.getModels())).where(new IWhereFilter<SModel>(){
          public boolean accept(          SModel it3){
            return SNodeOperations.isGeneratable(it3);
          }
        }
));
      }
      for (      final Generator gen : slang.getGenerators()) {
        if (gen == module) {
          continue;
        }
        if (!(MapSequence.fromMap(retainedModels).containsKey(gen))) {
          MapSequence.fromMap(retainedModels).put(gen,Sequence.fromIterable(((Iterable<SModel>)gen.getOwnModelDescriptors())).where(new IWhereFilter<SModel>(){
            public boolean accept(            SModel it2){
              return SNodeOperations.isGeneratable(it2);
            }
          }
));
        }
        modelsToRetain=Sequence.fromIterable(modelsToRetain).concat(Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>(){
          public Iterable<SModel> iterable(){
            return MapSequence.fromMap(retainedModels).get(gen);
          }
        }
)));
      }
      modelsToRetain=Sequence.fromIterable(modelsToRetain).concat(Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>(){
        public Iterable<SModel> iterable(){
          return MapSequence.fromMap(retainedModels).get(slang);
        }
      }
)));
    }
    MapSequence.fromMap(retainedModels).put(mres.module(),Sequence.fromIterable(modelsToRetain).subtract(Sequence.fromIterable(mres.models())).toListSequence());
  }
  return retainedModels;
}
