{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return String.valueOf(_context.getParameterNode());
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return (List<SNode>)new VisibleClassifiersScope(_context.getEnclosingNode(),AbstractClassifiersScope.INTERFACE,operationContext.getScope()).getNodes(new Condition<SNode>(){
            public boolean met(            SNode cls){
              return BehaviorReflection.invokeVirtual(Boolean.TYPE,(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.Classifier")),"virtual_isDescendant_7165541881557222913",new Object[]{SLinkOperations.getTarget(_quotation_createNode_ymgo28_a0a0a0a0a0a0a0(),"classifier",false)});
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ymgo28_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
