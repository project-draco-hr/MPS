{
  clear();
  List<Language> languages=root.getModel().getLanguages(GlobalScope.getInstance());
  Set<SModel> typesModels=new HashSet<SModel>();
  for (  Language language : languages) {
    SModelDescriptor helginsModelDescriptor=language.getHelginsTypesystemModelDescriptor();
    if (helginsModelDescriptor != null) {
      typesModels.add(helginsModelDescriptor.getSModel());
    }
  }
  if (typesModels.isEmpty())   return;
  myRules=new ArrayList<Rule>();
  for (  SModel typesModel : typesModels) {
    for (    ContextDeclaration contextDeclaration : typesModel.getRoots(ContextDeclaration.class)) {
      if (contextDeclaration.getMain()) {
        if (myContextsManager.isMainContextRegistered())         continue;
        myContextsManager.registerMainContext(contextDeclaration.getName());
      }
 else {
        myContextsManager.registerNewContext(contextDeclaration.getName());
      }
    }
    for (    VariableSetDeclaration varset : typesModel.getRoots(VariableSetDeclaration.class)) {
      myTypeVariablesManager.registerNewVarset(varset);
    }
    for (    Rule rule : typesModel.getRoots(Rule.class)) {
      myRules.add(rule);
    }
    mySubtypingManager.initiate(typesModel);
    myAdaptationManager.initiate(typesModel);
  }
  doCheckTypes(root);
  myEquationManager.solveInequations();
  Set<Pair<SNode,SNode>> mainContext=myContextsManager.getMainContext();
  for (  Pair<SNode,SNode> contextEntry : mainContext) {
    SNode term=contextEntry.o1;
    if (term == null)     continue;
    SNode type=expandType(contextEntry.o2,myInterpretator.getRuntimeTypesModel());
    if (type instanceof RuntimeErrorType) {
      reportTypeError(term,((RuntimeErrorType)type).getErrorText());
    }
    term.putUserObject(TYPE_OF_TERM,type);
  }
  for (  SNode node : myNodesWithErrors.keySet()) {
    String errorString=myNodesWithErrors.get(node);
    node.putUserObject(TYPE_OF_TERM,errorString);
  }
}
