{
  clear();
  List<Language> languages=root.getModel().getLanguages(GlobalScope.getInstance());
  Set<SModel> typesModels=new HashSet<SModel>();
  for (  Language language : languages) {
    SModelDescriptor helginsModelDescriptor=language.getHelginsTypesystemModelDescriptor();
    if (helginsModelDescriptor != null) {
      typesModels.add(helginsModelDescriptor.getSModel());
    }
  }
  if (typesModels.isEmpty())   return;
  myConceptsToRulesCache=new ConceptToRulesMap<Rule>();
  for (  SModel typesModel : typesModels) {
    for (    ContextDeclaration contextDeclaration : typesModel.getRootsAdapters(ContextDeclaration.class)) {
      if (contextDeclaration.getMain()) {
        if (myContextsManager.isMainContextRegistered())         continue;
        myContextsManager.registerMainContext(contextDeclaration.getName());
      }
 else {
        myContextsManager.registerNewContext(contextDeclaration.getName());
      }
    }
    for (    VariableSetDeclaration varset : typesModel.getRootsAdapters(VariableSetDeclaration.class)) {
      myTypeVariablesManager.registerNewVarset(varset);
    }
    for (    Rule rule : typesModel.getRootsAdapters(Rule.class)) {
      if (!rule.applicableNodes().hasNext())       continue;
      AnalyzedTermDeclaration analyzedTermDeclaration=rule.applicableNodes().next();
      AbstractConceptDeclaration ruleConcept=ConditionMatcher.getConcept(analyzedTermDeclaration.getCondition());
      myConceptsToRulesCache.putRule(ruleConcept,rule);
    }
    myConceptsToRulesCache.makeConsistent();
    mySubtypingManager.initiate(typesModel);
    myAdaptationManager.initiate(typesModel);
  }
  doCheckTypes(root);
  myEquationManager.solveInequations();
  Map<SNode,SNode> mainContext=myContextsManager.getMainContext();
  for (  Map.Entry<SNode,SNode> contextEntry : mainContext.entrySet()) {
    SNode term=contextEntry.getKey();
    if (term == null)     continue;
    SNode type=expandType(contextEntry.getValue(),myHInterpreter.getRuntimeTypesModel());
    if (BaseAdapter.isInstance(type,RuntimeErrorType.class)) {
      reportTypeError(term,((RuntimeErrorType)BaseAdapter.fromNode(type)).getErrorText());
    }
    term.putUserObject(TYPE_OF_TERM,type);
  }
  for (  SNode node : myNodesWithErrors.keySet()) {
    String errorString="HELGINS ERROR: " + myNodesWithErrors.get(node).reportError();
    myNodesWithErrorStrings.put(node,errorString);
    IStatus status=new Status(IStatus.Code.ERROR,errorString);
    node.putUserObject(HELGINS_ERROR_STATUS,status);
  }
}
