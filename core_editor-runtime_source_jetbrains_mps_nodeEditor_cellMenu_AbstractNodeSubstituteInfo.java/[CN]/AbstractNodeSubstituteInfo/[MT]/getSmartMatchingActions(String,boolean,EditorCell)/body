{
  InequalitySystem inequalitiesSystem=getInequalitiesSystem(contextCell);
  List<INodeSubstituteAction> substituteActionList=getMatchingActions(pattern,strictMatching);
  if (inequalitiesSystem == null)   return substituteActionList;
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  TypeChecker.getInstance().enableTypesComputingForCompletion();
  for (  INodeSubstituteAction nodeSubstituteAction : substituteActionList) {
    SNode type=nodeSubstituteAction.getActionType(pattern,contextCell);
    if (type != null && inequalitiesSystem.satisfies(type)) {
      result.add(nodeSubstituteAction);
    }
  }
  TypeChecker.getInstance().clearTypesComputedForCompletion();
  return result;
}
