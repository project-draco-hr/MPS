{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0yb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractMoveExpression;
      }
    break;
case 1:
  if (true) {
    return props_AbstractMoveNodeExpression;
  }
break;
case 2:
if (true) {
return props_AbstractMoveNodesExpression;
}
break;
case 3:
if (true) {
return props_AffectedNodesClause;
}
break;
case 4:
if (true) {
return props_ConceptFunctionParameter_Model;
}
break;
case 5:
if (true) {
return props_ConceptFunctionParameter_Module;
}
break;
case 6:
if (true) {
return props_ConceptFunctionParameter_SModel;
}
break;
case 7:
if (true) {
return props_ConceptFunctionParameter_SNode;
}
break;
case 8:
if (true) {
return props_ContextMemberOperation;
}
break;
case 9:
if (true) {
return props_ContextType;
}
break;
case 10:
if (true) {
return props_CreateRefactoringContext;
}
break;
case 11:
if (true) {
return props_DoRefactorClause;
}
break;
case 12:
if (true) {
return props_DoWhenDoneClause;
}
break;
case 13:
if (true) {
return props_ExecuteRefactoringStatement;
}
break;
case 14:
if (true) {
return props_GetModelsToUpdateClause;
}
break;
case 15:
if (true) {
return props_InitClause;
}
break;
case 16:
if (true) {
return props_IsApplicableToModelClause;
}
break;
case 17:
if (true) {
return props_IsApplicableToModuleClause;
}
break;
case 18:
if (true) {
return props_IsApplicableToNodeClause;
}
break;
case 19:
if (true) {
return props_IsRefactoringApplicable;
}
break;
case 20:
if (true) {
return props_MainProjectOperation;
}
break;
case 21:
if (true) {
return props_ModelDescriptorOperation;
}
break;
case 22:
if (true) {
return props_ModelTarget;
}
break;
case 23:
if (true) {
return props_ModelsToGenerateByDefault;
}
break;
case 24:
if (true) {
return props_ModelsToGenerateClause;
}
break;
case 25:
if (true) {
return props_ModuleOperation;
}
break;
case 26:
if (true) {
return props_ModuleTarget;
}
break;
case 27:
if (true) {
return props_MoveNodeToModelExpression;
}
break;
case 28:
if (true) {
return props_MoveNodeToNodeExpression;
}
break;
case 29:
if (true) {
return props_MoveNodesToModelExpression;
}
break;
case 30:
if (true) {
return props_MoveNodesToNodeExpression;
}
break;
case 31:
if (true) {
return props_NodeOperation;
}
break;
case 32:
if (true) {
return props_NodeTarget;
}
break;
case 33:
if (true) {
return props_NodesOperation;
}
break;
case 34:
if (true) {
return props_OperationContextOperation;
}
break;
case 35:
if (true) {
return props_ProjectOperation;
}
break;
case 36:
if (true) {
return props_Refactoring;
}
break;
case 37:
if (true) {
return props_RefactoringAction;
}
break;
case 38:
if (true) {
return props_RefactoringArgument;
}
break;
case 39:
if (true) {
return props_RefactoringArgumentReference;
}
break;
case 40:
if (true) {
return props_RefactoringContext_ConceptFunctionParameter;
}
break;
case 41:
if (true) {
return props_RefactoringField;
}
break;
case 42:
if (true) {
return props_RefactoringFieldReference;
}
break;
case 43:
if (true) {
return props_RefactoringParameter;
}
break;
case 44:
if (true) {
return props_RefactoringParameterReference;
}
break;
case 45:
if (true) {
return props_RefactoringTarget;
}
break;
case 46:
if (true) {
return props_RepositoryOperation;
}
break;
case 47:
if (true) {
return props_ScopeOperation;
}
break;
case 48:
if (true) {
return props_UpdateModelProcedure;
}
break;
default :
}
}
throw new IllegalStateException();
}
