{
  try {
    if (ListSequence.<SNode>fromList(((List<SNode>)MapSequence.<String,Object>fromMap(_params).get("inputNodes"))).count() == 1) {
      SNode nodeToCopy=ListSequence.<SNode>fromList(((List<SNode>)MapSequence.<String,Object>fromMap(_params).get("inputNodes"))).first();
      while (SNodeOperations.getParent(nodeToCopy) != null) {
        SNode parent=SNodeOperations.getParent(nodeToCopy);
        String role=nodeToCopy.getRole_();
        SNode link=((SNode)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(SNodeOperations.getConceptDeclaration(parent),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),"call_findLinkDeclaration_1213877394467",new Class[]{SNode.class,String.class},role));
        if (link == null) {
          return;
        }
        if (!(((Boolean)BehaviorManager.getInstance().invoke(Boolean.class,SNodeOperations.cast(link,"jetbrains.mps.lang.structure.structure.LinkDeclaration"),"call_isSingular_1213877254557",new Class[]{SNode.class})))) {
          SNode copy=SNodeOperations.copyNode(nodeToCopy);
          parent.insertChild(nodeToCopy,role,copy);
          ((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")).getEditorContext().selectWRTFocusPolicy(copy);
          ((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")).selectNode(copy);
          return;
        }
        nodeToCopy=parent;
      }
    }
 else {
      SNode firstNode=ListSequence.<SNode>fromList(((List<SNode>)MapSequence.<String,Object>fromMap(_params).get("inputNodes"))).first();
      SNode lastNode=ListSequence.<SNode>fromList(((List<SNode>)MapSequence.<String,Object>fromMap(_params).get("inputNodes"))).last();
      String role=firstNode.getRole_();
      SNode parent=SNodeOperations.getParent(firstNode);
      SNode link=((SNode)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(SNodeOperations.getConceptDeclaration(parent),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),"call_findLinkDeclaration_1213877394467",new Class[]{SNode.class,String.class},role));
      if (link == null) {
        return;
      }
      for (      SNode node : ListSequence.<SNode>fromList(((List<SNode>)MapSequence.<String,Object>fromMap(_params).get("inputNodes"))).reversedList()) {
        parent.insertChild(lastNode,role,SNodeOperations.copyNode(node));
      }
      ((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")).getEditorContext().selectRange(firstNode,lastNode);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "CopyThisDown",t);
    }
  }
}
