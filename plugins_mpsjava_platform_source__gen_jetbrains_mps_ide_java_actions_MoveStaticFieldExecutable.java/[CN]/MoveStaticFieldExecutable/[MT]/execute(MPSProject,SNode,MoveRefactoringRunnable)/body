{
  final SNode whereToMove;
  whereToMove=MoveNodeDialog.getSelectedObject(project.getProject(),target,new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node"){
    @Override public boolean check(    SNode selectedObject,    SNode nodeToMove,    SModel modelOfSelectedObject){
      return SNodeOperations.isInstanceOf(selectedObject,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")) && !(ListSequence.fromList(SNodeOperations.getNodeAncestors(nodeToMove,null,false)).contains(selectedObject));
    }
  }
);
  if (whereToMove == null) {
    return;
  }
  ModelAccess.instance().runReadInEDT(new Runnable(){
    @Override public void run(){
      SNode node=((SNode)target);
      if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
        return;
      }
      jetbrains.mps.smodel.SNode node1=((jetbrains.mps.smodel.SNode)whereToMove);
      if (!(SNodeUtil.isAccessible(node1,MPSModuleRepository.getInstance()))) {
        return;
      }
      runnable.run(whereToMove);
    }
  }
);
}
