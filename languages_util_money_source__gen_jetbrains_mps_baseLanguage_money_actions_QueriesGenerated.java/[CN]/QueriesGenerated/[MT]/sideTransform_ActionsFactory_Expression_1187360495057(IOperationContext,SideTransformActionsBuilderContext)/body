{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.mps.baseLanguage.money.structure.MoneyType")) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyGetCurrencyMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". currency";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get currency";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.mps.baseLanguage.money.structure.MoneyType")) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyIsZeroMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". isZero";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "compare to zero";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.mps.baseLanguage.money.structure.MoneyType")) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyGetAmountMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". amount";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get amount";
    }
  }
);
  return result;
}
