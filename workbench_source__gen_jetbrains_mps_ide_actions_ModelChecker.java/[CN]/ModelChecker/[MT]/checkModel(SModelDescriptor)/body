{
  ModelCheckerSettings settings=ModelCheckerSettings.getInstance();
  final List<SpecificChecker> specificCheckers=ListSequence.fromList(new ArrayList<SpecificChecker>());
  ListSequence.fromList(specificCheckers).addElement(new UnavailableConceptsChecker(this));
  if (settings.isCheckUnresolvedReferences()) {
    ListSequence.fromList(specificCheckers).addElement(new UnresolvedReferencesChecker(this));
  }
  if (settings.isCheckConstraints()) {
    ListSequence.fromList(specificCheckers).addElement(new ConstraintsChecker(this));
  }
  if (settings.isCheckScopes()) {
    ListSequence.fromList(specificCheckers).addElement(new ScopesChecker(this));
  }
  if (settings.isCheckTypesystem()) {
    ListSequence.fromList(specificCheckers).addElement(new TypesystemChecker(this));
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModel model=modelDescriptor.getSModel();
      for (      SpecificChecker specificChecker : ListSequence.fromList(specificCheckers)) {
        specificChecker.checkModel(model);
        if (ModelChecker.this.myProgressContext.getProgressIndicator().isCanceled()) {
          break;
        }
      }
    }
  }
);
  this.myCancelled=!(this.myProgressContext.getProgressIndicator().isCanceled());
}
