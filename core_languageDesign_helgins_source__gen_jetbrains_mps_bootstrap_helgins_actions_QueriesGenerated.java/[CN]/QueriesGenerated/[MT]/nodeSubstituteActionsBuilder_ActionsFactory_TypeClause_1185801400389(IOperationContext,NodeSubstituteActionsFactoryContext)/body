{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    IChildNodeSetter setter=new AbstractChildNodeSetter(){
      public SNode wrapNode(      SNode nodeToWrap,      SModel model){
        SNode normalTypeClause=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.helgins.structure.NormalTypeClause",null);
        SLinkOperations.setTarget(normalTypeClause,"normalType",nodeToWrap,true);
        return normalTypeClause;
      }
      public boolean returnSmallPart(      SNode nodeToWrap){
        return false;
      }
      public SNode doExecute(      SNode pn,      SNode oc,      SNode nc,      IScope sc){
        SNode wrappedNode=this.wrapNode(nc,nc.getModel());
        _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
        if (this.returnSmallPart(nc)) {
          return nc;
        }
 else {
          return wrappedNode;
        }
      }
    }
;
    result.addAll(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext));
  }
  return result;
}
