{
  new Thread(){
    public void run(){
      try {
        GeneratorManager generatorManager=operationContext.getComponent(GeneratorManager.class);
        List<SModel> models=toModels(modelDescriptors);
        for (int i=0; i < models.size(); i++) {
          SModel model=models.get(i);
          final boolean last=i == models.size() - 1;
          Future<Boolean> f=generatorManager.generateModelsWithProgressWindow(CollectionUtil.asList(model),BootstrapLanguages.getInstance().getBaseLanguage(),ModuleContext.create(model,operationContext.getComponent(AbstractProjectFrame.class),false),new GenerationTypeWrapper(generationType){
            public boolean requiresCompilationInIDEAfterGeneration(){
              return super.requiresCompilationInIDEAfterGeneration() && last;
            }
          }
,IGenerationScript.DEFAULT,false);
          Boolean result=f.get();
          if (!result) {
            return;
          }
        }
      }
 catch (      InterruptedException e) {
        LOG.error(e);
      }
catch (      ExecutionException e) {
        LOG.error(e);
      }
    }
  }
.start();
}
