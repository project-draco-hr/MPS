{
  try {
    final ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.fromMap(_params).get("ideaProject")),"Finding Usages",true){
      @Override public void run(      @NotNull ProgressIndicator p0){
        final Wrappers._T<SearchResults<SNode>> concepts=new Wrappers._T<SearchResults<SNode>>();
        final Wrappers._T<List<SearchResult<SNode>>> results=new Wrappers._T<List<SearchResult<SNode>>>();
        modelAccess.runReadAction(new Runnable(){
          public void run(){
            concepts.value=FindUtils.getSearchResults(new EmptyProgressMonitor(),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration").getDeclarationNode(),GlobalScope.getInstance(),"jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder");
            results.value=ListSequence.fromList(((List<SearchResult<SNode>>)concepts.value.getSearchResults())).where(new IWhereFilter<SearchResult<SNode>>(){
              public boolean accept(              SearchResult<SNode> it){
                SNode node=(SNode)it.getObject();
                return SPropertyOperations.getBoolean(node,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0xff49c1d648L,"rootable")) && isEmptyString(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0x10e328118ddL,"iconPath")));
              }
            }
).toListSequence();
          }
        }
);
        if (p0.isCanceled()) {
          return;
        }
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            RefactoringAccessEx.getInstance().showRefactoringView(((Project)MapSequence.fromMap(_params).get("ideaProject")),new RefactoringViewAction(){
              @Override public void performAction(              RefactoringViewItem refactoringViewItem){
                refactoringViewItem.close();
              }
            }
,new SearchResults<SNode>(concepts.value.getSearchedNodes(),results.value),false,"Safe Delete");
          }
        }
);
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "FindRootableConceptsWithoutIcons",t);
    }
  }
}
