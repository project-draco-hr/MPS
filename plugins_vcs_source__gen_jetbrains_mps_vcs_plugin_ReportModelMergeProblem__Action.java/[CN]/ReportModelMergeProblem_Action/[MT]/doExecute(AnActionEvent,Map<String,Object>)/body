{
  try {
    final BlameDialog blameDialog=BlameDialogComponent.getInstance().createDialog(((Project)MapSequence.fromMap(_params).get("project")),((Frame)MapSequence.fromMap(_params).get("frame")));
    blameDialog.setIssueHidden(true);
    blameDialog.setSubsystem("Version Control");
    blameDialog.setIssueTitle("Model merge problem");
    List<File> filesToAttach=ListSequence.fromList(new ArrayList<File>());
    ListSequence.fromList(filesToAttach).addElement(new File(WorkbenchPathManager.getUserHome() + File.separator + ".gitconfig"));
    ListSequence.fromList(filesToAttach).addElement(new File(PathManager.getConfigPath() + File.separator + "mps-merger.sh"));
    ListSequence.fromList(filesToAttach).addSequence(Sequence.fromIterable(Sequence.fromArray(new File(PathManager.getLogPath()).listFiles(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.startsWith("mergedriver.log");
      }
    }
))));
    ListSequence.fromList(filesToAttach).visitAll(new IVisitor<File>(){
      public void visit(      File f){
        blameDialog.addFile(f);
      }
    }
);
    File backupDir=new File(MergeBackupUtil.getMergeBackupDirPath());
    List<File> zipFiles=Arrays.asList(backupDir.listFiles(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(".zip");
      }
    }
));
    String[] zipNames=ListSequence.fromList(zipFiles).sort(new ISelector<File,Comparable<?>>(){
      public Comparable<?> select(      File f){
        return f.lastModified();
      }
    }
,false).select(new ISelector<File,String>(){
      public String select(      File f){
        return f.getName();
      }
    }
).toGenericArray(String.class);
    if (zipNames.length == 0) {
      Messages.showInfoMessage(((Project)MapSequence.fromMap(_params).get("project")),"No merge backups available, that is MPS merge was not invoked.","Model Merge Problem");
    }
 else {
      int selectedIndex=Messages.showChooseDialog(((Project)MapSequence.fromMap(_params).get("project")),"Choose merge backup file to attach","Model Merge Problem",Messages.getQuestionIcon(),zipNames,zipNames[0]);
      blameDialog.addFile(new File(backupDir,zipNames[selectedIndex]));
    }
    blameDialog.showDialog();
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "ReportModelMergeProblem",t);
    }
  }
}
