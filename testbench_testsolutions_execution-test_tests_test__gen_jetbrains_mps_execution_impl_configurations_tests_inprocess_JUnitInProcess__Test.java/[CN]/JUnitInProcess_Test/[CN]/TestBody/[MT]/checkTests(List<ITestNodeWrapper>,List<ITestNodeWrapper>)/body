{
  try {
    List<ITestNodeWrapper> testNodes=ListSequence.fromList(success).union(ListSequence.fromList(failure)).toListSequence();
    final TestRunState runState=new TestRunState(testNodes,myProject);
    TestEventsDispatcher eventsDispatcher=new TestEventsDispatcher(runState);
    Executor processExecutor;
    processExecutor=new JUnitInProcessExecutor(testNodes,eventsDispatcher);
    if (LOG.isInfoEnabled()) {
      LOG.info("Starting in-process-execution");
    }
    ProcessHandler process=processExecutor.execute();
    final Wrappers._T<CheckTestStateListener> checkListener=new Wrappers._T<CheckTestStateListener>();
    myProject.getModelAccess().runReadAction(new Runnable(){
      public void run(){
        checkListener.value=new CheckTestStateListener(success,failure);
        runState.addListener(checkListener.value);
      }
    }
);
    OutputRedirector.redirect(process,new UnitTestProcessListener(eventsDispatcher));
    int exitCode=ProcessHandlerBuilder.startAndWait(process,30 * 1000);
    int failedMustBe=ListSequence.fromList(failure).count();
    if (exitCode != failedMustBe) {
      Assert.fail("Exit code must be equal to " + ListSequence.fromList(failure).count() + ", but "+ exitCode);
    }
 else     if (exitCode < 0) {
      Assert.fail("Process is running for too long");
    }
    if (runState.getFailedTests() != failedMustBe) {
      Assert.fail("The number of failed tests be equal to " + failedMustBe + ", but "+ runState.getFailedTests());
    }
    int completedMustBe=ListSequence.fromList(failure).count() + ListSequence.fromList(success).count();
    if (runState.getCompletedTests() != completedMustBe) {
      Assert.fail("The number of completed tests be equal to " + ListSequence.fromList(failure).count() + ", but "+ runState.getFailedTests());
    }
    if (!(checkListener.value.getMessages().equals(""))) {
      Assert.fail(checkListener.value.getMessages());
    }
  }
 catch (  ExecutionException e) {
    Assert.fail(e.getMessage());
  }
}
