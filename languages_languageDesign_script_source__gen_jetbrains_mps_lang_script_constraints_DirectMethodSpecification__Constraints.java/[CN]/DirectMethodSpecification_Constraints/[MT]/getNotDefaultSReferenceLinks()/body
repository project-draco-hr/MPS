{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(1071275047162102839l,-4887287056175405968l),2291767839159498115l,2291767839159499865l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(1071275047162102839l,-4887287056175405968l),2291767839159498115l,2291767839159499865l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_xwijc_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode ancestor=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(new UUID(1071275047162102839l,-4887287056175405968l),6655357163912246425l,"jetbrains.mps.lang.script.structure.ExtractInterfaceMigration"),true,false);
            SNode classifierSpecification=SNodeOperations.as(SLinkOperations.getTarget(ancestor,MetaAdapterFactory.getContainmentLink(new UUID(1071275047162102839l,-4887287056175405968l),6655357163912246425l,5434557751112108415l,"oldClassifier")),MetaAdapterFactory.getConcept(new UUID(1071275047162102839l,-4887287056175405968l),5434557751112207651l,"jetbrains.mps.lang.script.structure.DirectClassifierSpecification"));
            if (classifierSpecification != null) {
              return new SimpleScope(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SLinkOperations.getTarget(classifierSpecification,MetaAdapterFactory.getReferenceLink(new UUID(1071275047162102839l,-4887287056175405968l),5434557751112207651l,5434557751112207965l,"classifier")),"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
                }
              }
)){
                @Nullable @Override public String getReferenceText(                @NotNull SNode target){
                  return target.getName();
                }
              }
;
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
