{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x1fcdfeb518c43583L,0x1fcdfeb518c43c59L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x1fcdfeb518c43583L,0x1fcdfeb518c43c59L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_xwijc_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode ancestor=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x5c5c941438573499L,"jetbrains.mps.lang.script.structure.ExtractInterfaceMigration"),true,false);
            SNode classifierSpecification=SNodeOperations.as(SLinkOperations.getTarget(ancestor,MetaAdapterFactory.getContainmentLink(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x5c5c941438573499L,0x4b6b6d7b2a62097fL,"oldClassifier")),MetaAdapterFactory.getConcept(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x4b6b6d7b2a638d23L,"jetbrains.mps.lang.script.structure.DirectClassifierSpecification"));
            if (classifierSpecification != null) {
              return new SimpleScope(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SLinkOperations.getTarget(classifierSpecification,MetaAdapterFactory.getReferenceLink(0xeddeefac2d64437L,0xbc2cde50fd4ce470L,0x4b6b6d7b2a638d23L,0x4b6b6d7b2a638e5dL,"classifier")),"virtual_getMembers_1213877531970",new Object[]{})).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
                }
              }
)){
                @Nullable @Override public String getReferenceText(                @NotNull SNode target){
                  return target.getName();
                }
              }
;
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
