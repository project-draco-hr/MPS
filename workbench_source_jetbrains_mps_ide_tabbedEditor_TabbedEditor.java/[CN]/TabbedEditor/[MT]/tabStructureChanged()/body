{
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      final Project project=myOperationContext.getProject();
      FileEditorManagerImpl manager=(FileEditorManagerImpl)FileEditorManager.getInstance(project);
      VirtualFile virtualFile=manager.getCurrentFile();
      if (virtualFile == null)       return;
      for (      FileEditor openedEditor : manager.getAllEditors()) {
        if (!(openedEditor instanceof MPSFileNodeEditor))         continue;
        MPSFileNodeEditor openedMPSEditor=(MPSFileNodeEditor)openedEditor;
        if (ObjectUtils.equals(this,openedMPSEditor.getNodeEditor()))         continue;
        final IEditor mpsNodeEditor=openedMPSEditor.getNodeEditor();
        List<SNode> openedNodes=mpsNodeEditor.getEditedNodes();
        if (mpsNodeEditor instanceof TabbedEditor || !getEditedNodes().contains(openedNodes.get(0)))         continue;
        boolean needToSelect=virtualFile == openedMPSEditor.getFile();
        if (!needToSelect) {
          manager.closeFile(openedMPSEditor.getFile());
        }
 else {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              Object memento=null;
              EditorComponent editorComponent=mpsNodeEditor.getCurrentEditorComponent();
              if (editorComponent != null) {
                memento=editorComponent.getEditorContext().createMemento(true);
              }
              SNode node=myNodePointer.getNode();
              new MPSEditorOpener(project).editNode(node,myOperationContext);
              final EditorComponent component=selectLinkedEditor(mpsNodeEditor.getEditedNode());
              component.getEditorContext().setMemento(memento);
            }
          }
);
        }
      }
      FileStatusManager.getInstance(project).fileStatusChanged(virtualFile);
      manager.updateFilePresentation(virtualFile);
    }
  }
);
}
