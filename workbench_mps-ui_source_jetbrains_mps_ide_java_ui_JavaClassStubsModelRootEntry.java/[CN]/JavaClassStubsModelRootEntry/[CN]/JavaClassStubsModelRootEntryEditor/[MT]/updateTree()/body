{
  if (myFileSystemTree != null) {
    Disposer.dispose(myFileSystemTree);
    myFileSystemTree=null;
  }
  myFileSystemTree=new FileSystemTreeImpl(null,FileChooserDescriptorFactory.createSingleFileDescriptor(FileTypeRegistry.getInstance().getFileTypeByFileName("*.jar")));
  AbstractTreeUi ui=myFileSystemTree.getTreeBuilder().getUi();
  String path=myModelRoot.getPath() == null ? "" : myModelRoot.getPath();
  VirtualFile virtualFile=VirtualFileManager.getInstance().findFileByUrl(VirtualFileManager.constructUrl("file",path));
  if (myModelRoot.getModule() != null && (virtualFile == null || path.isEmpty())) {
    if (myModelRoot.getModule() instanceof AbstractModule) {
      virtualFile=VirtualFileManager.getInstance().findFileByUrl(VirtualFileManager.constructUrl("file",((AbstractModule)myModelRoot.getModule()).getModuleSourceDir().getPath()));
    }
  }
  if (virtualFile != null)   myFileSystemTree.select(virtualFile,null);
  myFileSystemTree.addListener(new Listener(){
    @Override public void selectionChanged(    List<VirtualFile> selection){
      if (selection.size() > 0) {
        myModelRoot.setPath(FileUtil.getCanonicalPath(selection.get(0).getPath()));
        myEventDispatcher.getMulticaster().fireDataChanged();
      }
    }
  }
,JavaClassStubsModelRootEntry.this);
  Disposer.register(JavaClassStubsModelRootEntry.this,myFileSystemTree);
  myTreePanel.removeAll();
  myTreePanel.add(ui.getTree(),BorderLayout.CENTER);
  ui.scrollSelectionToVisible(null,true);
}
