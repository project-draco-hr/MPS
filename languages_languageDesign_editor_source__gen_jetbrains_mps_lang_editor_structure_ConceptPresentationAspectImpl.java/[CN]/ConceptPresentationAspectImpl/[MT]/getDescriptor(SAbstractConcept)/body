{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0so.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractCellSelector;
      }
    break;
case 1:
  if (true) {
    return props_AbstractComponent;
  }
break;
case 2:
if (true) {
return props_AbstractPaddingStyleClassItem;
}
break;
case 3:
if (true) {
return props_AbstractStyledTextOperation;
}
break;
case 4:
if (true) {
return props_AppendTextOperation;
}
break;
case 5:
if (true) {
return props_ApplyStyleClass;
}
break;
case 6:
if (true) {
return props_ApplyStyleClassCondition;
}
break;
case 7:
if (true) {
return props_AttributeStyleClassItem;
}
break;
case 8:
if (true) {
return props_AutoDeletableStyleClassItem;
}
break;
case 9:
if (true) {
return props_BackgroundColorStyleClassItem;
}
break;
case 10:
if (true) {
return props_BaseEditorComponent;
}
break;
case 11:
if (true) {
return props_BaseLineCell;
}
break;
case 12:
if (true) {
return props_BooleanStyleSheetItem;
}
break;
case 13:
if (true) {
return props_BracketColorStyleClassItem;
}
break;
case 14:
if (true) {
return props_CaretPositionParameter;
}
break;
case 15:
if (true) {
return props_CellActionMapDeclaration;
}
break;
case 16:
if (true) {
return props_CellActionMapItem;
}
break;
case 17:
if (true) {
return props_CellActionMap_CanExecuteFunction;
}
break;
case 18:
if (true) {
return props_CellActionMap_ExecuteFunction;
}
break;
case 19:
if (true) {
return props_CellActionMap_FunctionParm_selectedNode;
}
break;
case 20:
if (true) {
return props_CellIdReferenceSelector;
}
break;
case 21:
if (true) {
return props_CellKeyMapDeclaration;
}
break;
case 22:
if (true) {
return props_CellKeyMapItem;
}
break;
case 23:
if (true) {
return props_CellKeyMapKeystroke;
}
break;
case 24:
if (true) {
return props_CellKeyMap_AbstractFunction;
}
break;
case 25:
if (true) {
return props_CellKeyMap_ExecuteFunction;
}
break;
case 26:
if (true) {
return props_CellKeyMap_FunctionParm_selectedNode;
}
break;
case 27:
if (true) {
return props_CellKeyMap_FunctionParm_selectedNodes;
}
break;
case 28:
if (true) {
return props_CellKeyMap_IsApplicableFunction;
}
break;
case 29:
if (true) {
return props_CellLayout;
}
break;
case 30:
if (true) {
return props_CellLayout_Flow;
}
break;
case 31:
if (true) {
return props_CellLayout_Horizontal;
}
break;
case 32:
if (true) {
return props_CellLayout_Indent;
}
break;
case 33:
if (true) {
return props_CellLayout_Indent_Old;
}
break;
case 34:
if (true) {
return props_CellLayout_Superscript;
}
break;
case 35:
if (true) {
return props_CellLayout_Table;
}
break;
case 36:
if (true) {
return props_CellLayout_Vertical;
}
break;
case 37:
if (true) {
return props_CellLayout_VerticalGrid;
}
break;
case 38:
if (true) {
return props_CellMenuComponent;
}
break;
case 39:
if (true) {
return props_CellMenuComponentFeature;
}
break;
case 40:
if (true) {
return props_CellMenuComponentFeature_Link;
}
break;
case 41:
if (true) {
return props_CellMenuComponentFeature_Property;
}
break;
case 42:
if (true) {
return props_CellMenuDescriptor;
}
break;
case 43:
if (true) {
return props_CellMenuPart_Abstract;
}
break;
case 44:
if (true) {
return props_CellMenuPart_AbstractGroup;
}
break;
case 45:
if (true) {
return props_CellMenuPart_AbstractGroup_DescriptionText;
}
break;
case 46:
if (true) {
return props_CellMenuPart_AbstractGroup_MatchingText;
}
break;
case 47:
if (true) {
return props_CellMenuPart_AbstractGroup_Query;
}
break;
case 48:
if (true) {
return props_CellMenuPart_AbstractGroup_parameterObject;
}
break;
case 49:
if (true) {
return props_CellMenuPart_Abstract_editedNode;
}
break;
case 50:
if (true) {
return props_CellMenuPart_ApplySideTransforms;
}
break;
case 51:
if (true) {
return props_CellMenuPart_CellMenuComponent;
}
break;
case 52:
if (true) {
return props_CellMenuPart_Generic_Group;
}
break;
case 53:
if (true) {
return props_CellMenuPart_Generic_Group_Handler;
}
break;
case 54:
if (true) {
return props_CellMenuPart_Generic_Item;
}
break;
case 55:
if (true) {
return props_CellMenuPart_Generic_Item_Handler;
}
break;
case 56:
if (true) {
return props_CellMenuPart_PropertyPostfixHints;
}
break;
case 57:
if (true) {
return props_CellMenuPart_PropertyPostfixHints_GetPostfixes;
}
break;
case 58:
if (true) {
return props_CellMenuPart_PropertyValues;
}
break;
case 59:
if (true) {
return props_CellMenuPart_PropertyValues_GetValues;
}
break;
case 60:
if (true) {
return props_CellMenuPart_ReferentPrimary;
}
break;
case 61:
if (true) {
return props_CellMenuPart_ReplaceChildPrimary;
}
break;
case 62:
if (true) {
return props_CellMenuPart_ReplaceChild_CustomChildConcept;
}
break;
case 63:
if (true) {
return props_CellMenuPart_ReplaceChild_CustomChildConcept_Query;
}
break;
case 64:
if (true) {
return props_CellMenuPart_ReplaceChild_Group;
}
break;
case 65:
if (true) {
return props_CellMenuPart_ReplaceChild_Group_Create;
}
break;
case 66:
if (true) {
return props_CellMenuPart_ReplaceChild_Group_Query;
}
break;
case 67:
if (true) {
return props_CellMenuPart_ReplaceChild_Item;
}
break;
case 68:
if (true) {
return props_CellMenuPart_ReplaceChild_Item_Create;
}
break;
case 69:
if (true) {
return props_CellMenuPart_ReplaceChild_currentChild;
}
break;
case 70:
if (true) {
return props_CellMenuPart_ReplaceChild_defaultConceptOfChild;
}
break;
case 71:
if (true) {
return props_CellMenuPart_ReplaceNode_CustomNodeConcept;
}
break;
case 72:
if (true) {
return props_CellMenuPart_ReplaceNode_Group;
}
break;
case 73:
if (true) {
return props_CellMenuPart_ReplaceNode_Group_Create;
}
break;
case 74:
if (true) {
return props_CellModel_AbstractLabel;
}
break;
case 75:
if (true) {
return props_CellModel_Alternation;
}
break;
case 76:
if (true) {
return props_CellModel_AttributedLinkCell;
}
break;
case 77:
if (true) {
return props_CellModel_AttributedNodeCell;
}
break;
case 78:
if (true) {
return props_CellModel_AttributedPropertyCell;
}
break;
case 79:
if (true) {
return props_CellModel_Block;
}
break;
case 80:
if (true) {
return props_CellModel_BlockEnd;
}
break;
case 81:
if (true) {
return props_CellModel_BlockStart;
}
break;
case 82:
if (true) {
return props_CellModel_Collection;
}
break;
case 83:
if (true) {
return props_CellModel_Component;
}
break;
case 84:
if (true) {
return props_CellModel_Constant;
}
break;
case 85:
if (true) {
return props_CellModel_ContextAssistant;
}
break;
case 86:
if (true) {
return props_CellModel_Custom;
}
break;
case 87:
if (true) {
return props_CellModel_Empty;
}
break;
case 88:
if (true) {
return props_CellModel_Error;
}
break;
case 89:
if (true) {
return props_CellModel_Image;
}
break;
case 90:
if (true) {
return props_CellModel_Indent;
}
break;
case 91:
if (true) {
return props_CellModel_JComponent;
}
break;
case 92:
if (true) {
return props_CellModel_ListWithRole;
}
break;
case 93:
if (true) {
return props_CellModel_ModelAccess;
}
break;
case 94:
if (true) {
return props_CellModel_NextEditor;
}
break;
case 95:
if (true) {
return props_CellModel_NonEmptyProperty;
}
break;
case 96:
if (true) {
return props_CellModel_Property;
}
break;
case 97:
if (true) {
return props_CellModel_ReadOnlyModelAccessor;
}
break;
case 98:
if (true) {
return props_CellModel_RefCell;
}
break;
case 99:
if (true) {
return props_CellModel_RefNode;
}
break;
case 100:
if (true) {
return props_CellModel_RefNodeList;
}
break;
case 101:
if (true) {
return props_CellModel_ReferencePresentation;
}
break;
case 102:
if (true) {
return props_CellModel_TransactionalProperty;
}
break;
case 103:
if (true) {
return props_CellModel_URL;
}
break;
case 104:
if (true) {
return props_CellModel_WithRole;
}
break;
case 105:
if (true) {
return props_ColorStyleClassItem;
}
break;
case 106:
if (true) {
return props_ConceptEditorContextHints;
}
break;
case 107:
if (true) {
return props_ConceptEditorDeclaration;
}
break;
case 108:
if (true) {
return props_ConceptEditorHintDeclaration;
}
break;
case 109:
if (true) {
return props_ConceptEditorHintDeclarationReference;
}
break;
case 110:
if (true) {
return props_ConceptEditorHintDeclarationReferenceExpression;
}
break;
case 111:
if (true) {
return props_ConceptFunctionParameter_StyledText;
}
break;
case 112:
if (true) {
return props_ConceptFunctionParameter_childNode;
}
break;
case 113:
if (true) {
return props_ConceptFunctionParameter_editorContext;
}
break;
case 114:
if (true) {
return props_ConceptFunctionParameter_model;
}
break;
case 115:
if (true) {
return props_ConceptFunctionParameter_nextNode;
}
break;
case 116:
if (true) {
return props_ConceptFunctionParameter_node;
}
break;
case 117:
if (true) {
return props_ConceptFunctionParameter_oldText;
}
break;
case 118:
if (true) {
return props_ConceptFunctionParameter_parameterObject;
}
break;
case 119:
if (true) {
return props_ConceptFunctionParameter_prevNode;
}
break;
case 120:
if (true) {
return props_ConceptFunctionParameter_selectedNode;
}
break;
case 121:
if (true) {
return props_ConceptFunctionParameter_text;
}
break;
case 122:
if (true) {
return props_ContextHintsSpecification;
}
break;
case 123:
if (true) {
return props_ContextVariable;
}
break;
case 124:
if (true) {
return props_ContextVariable_EditorContext;
}
break;
case 125:
if (true) {
return props_ContextVariable_Node;
}
break;
case 126:
if (true) {
return props_DefaultBaseLine;
}
break;
case 127:
if (true) {
return props_DefaultCaretPositionStyleClassItem;
}
break;
case 128:
if (true) {
return props_DominatesRecord;
}
break;
case 129:
if (true) {
return props_DrawBorderStyleClassItem;
}
break;
case 130:
if (true) {
return props_DrawBracketsStyleClassItem;
}
break;
case 131:
if (true) {
return props_EditableStyleClassItem;
}
break;
case 132:
if (true) {
return props_EditorCellId;
}
break;
case 133:
if (true) {
return props_EditorCellModel;
}
break;
case 134:
if (true) {
return props_EditorComponentDeclaration;
}
break;
case 135:
if (true) {
return props_EditorComponentDeclarationReference;
}
break;
case 136:
if (true) {
return props_ExplicitHintsSpecification;
}
break;
case 137:
if (true) {
return props_FirstPositionAllowedStyleClassItem;
}
break;
case 138:
if (true) {
return props_FloatStyleClassItem;
}
break;
case 139:
if (true) {
return props_FontSizeStyleClassItem;
}
break;
case 140:
if (true) {
return props_FontStyleStyleClassItem;
}
break;
case 141:
if (true) {
return props_ForegroundColorStyleClassItem;
}
break;
case 142:
if (true) {
return props_ForegroundNullColorStyleClassItem;
}
break;
case 143:
if (true) {
return props_HorizontalAlign;
}
break;
case 144:
if (true) {
return props_HorizontalGapStyleClassItem;
}
break;
case 145:
if (true) {
return props_ICellStyle;
}
break;
case 146:
if (true) {
return props_IContextProvider;
}
break;
case 147:
if (true) {
return props_IContextVariableProvider;
}
break;
case 148:
if (true) {
return props_IEditorContextProvider;
}
break;
case 149:
if (true) {
return props_IExtensibleSubstituteMenuPart;
}
break;
case 150:
if (true) {
return props_IExtensibleTransformationMenuPart;
}
break;
case 151:
if (true) {
return props_IIncludeSubstituteMenuPart;
}
break;
case 152:
if (true) {
return props_IMenu;
}
break;
case 153:
if (true) {
return props_IMenuPartParameterized;
}
break;
case 154:
if (true) {
return props_IMenuReference;
}
break;
case 155:
if (true) {
return props_IMenuReference_Default;
}
break;
case 156:
if (true) {
return props_IMenuReference_Named;
}
break;
case 157:
if (true) {
return props_IMenu_Concept;
}
break;
case 158:
if (true) {
return props_IMenu_Contribution;
}
break;
case 159:
if (true) {
return props_IMenu_Default;
}
break;
case 160:
if (true) {
return props_IMenu_Named;
}
break;
case 161:
if (true) {
return props_INodeProvider;
}
break;
case 162:
if (true) {
return props_IOutputConceptMenuPart;
}
break;
case 163:
if (true) {
return props_IParameterizableMenuPart;
}
break;
case 164:
if (true) {
return props_IQueryFunction_Color;
}
break;
case 165:
if (true) {
return props_IStyle;
}
break;
case 166:
if (true) {
return props_IStyleContainer;
}
break;
case 167:
if (true) {
return props_IStyleSheetItem;
}
break;
case 168:
if (true) {
return props_IStyleSheetMember;
}
break;
case 169:
if (true) {
return props_ISubstituteMenu;
}
break;
case 170:
if (true) {
return props_ISubstituteMenuReference;
}
break;
case 171:
if (true) {
return props_ISubstituteMenu_String;
}
break;
case 172:
if (true) {
return props_ITransformationMenu;
}
break;
case 173:
if (true) {
return props_ITransformationMenuReference;
}
break;
case 174:
if (true) {
return props_IdSelector;
}
break;
case 175:
if (true) {
return props_ImagePathProvider;
}
break;
case 176:
if (true) {
return props_IndentLayoutIndentAnchorStyleClassItem;
}
break;
case 177:
if (true) {
return props_IndentLayoutIndentStyleClassItem;
}
break;
case 178:
if (true) {
return props_IndentLayoutNewLineChildrenStyleClassItem;
}
break;
case 179:
if (true) {
return props_IndentLayoutNewLineStyleClassItem;
}
break;
case 180:
if (true) {
return props_IndentLayoutNoWrapClassItem;
}
break;
case 181:
if (true) {
return props_IndentLayoutOnNewLineStyleClassItem;
}
break;
case 182:
if (true) {
return props_IndentLayoutWrapAnchorStyleClassItem;
}
break;
case 183:
if (true) {
return props_InlineEditorComponent;
}
break;
case 184:
if (true) {
return props_InlineStyleDeclaration;
}
break;
case 185:
if (true) {
return props_LastPositionAllowedStyleClassItem;
}
break;
case 186:
if (true) {
return props_LayoutConstraintStyleClassItem;
}
break;
case 187:
if (true) {
return props_MatchingLabelStyleClassItem;
}
break;
case 188:
if (true) {
return props_MaxWidthStyleClassItem;
}
break;
case 189:
if (true) {
return props_ModelAccessor;
}
break;
case 190:
if (true) {
return props_NavigatableNodeStyleClassItem;
}
break;
case 191:
if (true) {
return props_NavigatableReferenceStyleClassItem;
}
break;
case 192:
if (true) {
return props_OrCellSelector;
}
break;
case 193:
if (true) {
return props_PaddingBottomStyleClassItem;
}
break;
case 194:
if (true) {
return props_PaddingLeftStyleClassItem;
}
break;
case 195:
if (true) {
return props_PaddingRightStyleClassItem;
}
break;
case 196:
if (true) {
return props_PaddingTopStyleClassItem;
}
break;
case 197:
if (true) {
return props_ParametersInformationQuery;
}
break;
case 198:
if (true) {
return props_ParametersInformationStyleClassItem;
}
break;
case 199:
if (true) {
return props_PositionChildrenStyleClassItem;
}
break;
case 200:
if (true) {
return props_PositionStyleClassItem;
}
break;
case 201:
if (true) {
return props_PreDefinedStyleClassItem;
}
break;
case 202:
if (true) {
return props_PredefinedSelector;
}
break;
case 203:
if (true) {
return props_PropertyDeclarationCellSelector;
}
break;
case 204:
if (true) {
return props_PropertyExpressionCellSelector;
}
break;
case 205:
if (true) {
return props_PunctuationLeftStyleClassItem;
}
break;
case 206:
if (true) {
return props_PunctuationRightStyleClassItem;
}
break;
case 207:
if (true) {
return props_QueryFunctionParameter_CreatedNode;
}
break;
case 208:
if (true) {
return props_QueryFunctionParameter_SubstituteMenu_CreatedNodeToSelect;
}
break;
case 209:
if (true) {
return props_QueryFunctionParameter_SubstituteMenu_CurrentTargetNode;
}
break;
case 210:
if (true) {
return props_QueryFunctionParameter_SubstituteMenu_Link;
}
break;
case 211:
if (true) {
return props_QueryFunctionParameter_SubstituteMenu_ParentNode;
}
break;
case 212:
if (true) {
return props_QueryFunctionParameter_TransformationMenu_CreatedNode;
}
break;
case 213:
if (true) {
return props_QueryFunctionParameter_TransformationMenu_node;
}
break;
case 214:
if (true) {
return props_QueryFunctionParameter_parameterObject;
}
break;
case 215:
if (true) {
return props_QueryFunctionParameter_pattern;
}
break;
case 216:
if (true) {
return props_QueryFunction_AttributeStyleParameter;
}
break;
case 217:
if (true) {
return props_QueryFunction_Boolean;
}
break;
case 218:
if (true) {
return props_QueryFunction_CellProvider;
}
break;
case 219:
if (true) {
return props_QueryFunction_Color;
}
break;
case 220:
if (true) {
return props_QueryFunction_ColorComposit;
}
break;
case 221:
if (true) {
return props_QueryFunction_FontStyle;
}
break;
case 222:
if (true) {
return props_QueryFunction_ImagePath;
}
break;
case 223:
if (true) {
return props_QueryFunction_Integer;
}
break;
case 224:
if (true) {
return props_QueryFunction_IsMethodCurrent;
}
break;
case 225:
if (true) {
return props_QueryFunction_JComponent;
}
break;
case 226:
if (true) {
return props_QueryFunction_Menu;
}
break;
case 227:
if (true) {
return props_QueryFunction_MethodPresentation;
}
break;
case 228:
if (true) {
return props_QueryFunction_ModelAccess_Getter;
}
break;
case 229:
if (true) {
return props_QueryFunction_ModelAccess_Setter;
}
break;
case 230:
if (true) {
return props_QueryFunction_ModelAccess_Validator;
}
break;
case 231:
if (true) {
return props_QueryFunction_ModuleAndPath;
}
break;
case 232:
if (true) {
return props_QueryFunction_NodeCondition;
}
break;
case 233:
if (true) {
return props_QueryFunction_NodeFactory;
}
break;
case 234:
if (true) {
return props_QueryFunction_NodeListFilter;
}
break;
case 235:
if (true) {
return props_QueryFunction_ParametersList;
}
break;
case 236:
if (true) {
return props_QueryFunction_SNode;
}
break;
case 237:
if (true) {
return props_QueryFunction_SeparatorText;
}
break;
case 238:
if (true) {
return props_QueryFunction_String;
}
break;
case 239:
if (true) {
return props_QueryFunction_Style;
}
break;
case 240:
if (true) {
return props_QueryFunction_StyleParameter;
}
break;
case 241:
if (true) {
return props_QueryFunction_SubstituteMenu;
}
break;
case 242:
if (true) {
return props_QueryFunction_SubstituteMenuPart;
}
break;
case 243:
if (true) {
return props_QueryFunction_SubstituteMenuVariable_Initializer;
}
break;
case 244:
if (true) {
return props_QueryFunction_SubstituteMenu_ActionType;
}
break;
case 245:
if (true) {
return props_QueryFunction_SubstituteMenu_CanExecute;
}
break;
case 246:
if (true) {
return props_QueryFunction_SubstituteMenu_Concept;
}
break;
case 247:
if (true) {
return props_QueryFunction_SubstituteMenu_Concepts;
}
break;
case 248:
if (true) {
return props_QueryFunction_SubstituteMenu_Condition;
}
break;
case 249:
if (true) {
return props_QueryFunction_SubstituteMenu_Icon;
}
break;
case 250:
if (true) {
return props_QueryFunction_SubstituteMenu_Parameter;
}
break;
case 251:
if (true) {
return props_QueryFunction_SubstituteMenu_Select;
}
break;
case 252:
if (true) {
return props_QueryFunction_SubstituteMenu_Substitute;
}
break;
case 253:
if (true) {
return props_QueryFunction_SubstituteMenu_SubstituteString;
}
break;
case 254:
if (true) {
return props_QueryFunction_SubstituteMenu_WrapperHandler;
}
break;
case 255:
if (true) {
return props_QueryFunction_TransformationMenu;
}
break;
case 256:
if (true) {
return props_QueryFunction_TransformationMenuVariable_Initializer;
}
break;
case 257:
if (true) {
return props_QueryFunction_TransformationMenu_ActionLabelText;
}
break;
case 258:
if (true) {
return props_QueryFunction_TransformationMenu_Condition;
}
break;
case 259:
if (true) {
return props_QueryFunction_TransformationMenu_DescriptionText;
}
break;
case 260:
if (true) {
return props_QueryFunction_TransformationMenu_Execute;
}
break;
case 261:
if (true) {
return props_QueryFunction_TransformationMenu_Extensible;
}
break;
case 262:
if (true) {
return props_QueryFunction_TransformationMenu_Node;
}
break;
case 263:
if (true) {
return props_QueryFunction_TransformationMenu_Parameter;
}
break;
case 264:
if (true) {
return props_QueryFunction_TransformationMenu_TargetNode;
}
break;
case 265:
if (true) {
return props_QueryFunction_TransformationMenu_Text;
}
break;
case 266:
if (true) {
return props_QueryFunction_TransformationMenu_WrapperHandler;
}
break;
case 267:
if (true) {
return props_QueryFunction_Underlined;
}
break;
case 268:
if (true) {
return props_QueryHintsSpecification;
}
break;
case 269:
if (true) {
return props_RGBColor;
}
break;
case 270:
if (true) {
return props_ReadOnlyModelAccessor;
}
break;
case 271:
if (true) {
return props_ReadOnlyStyleClassItem;
}
break;
case 272:
if (true) {
return props_RightTransformAnchorTagWrapper;
}
break;
case 273:
if (true) {
return props_ScriptKindClassItem;
}
break;
case 274:
if (true) {
return props_SelectInEditorOperation;
}
break;
case 275:
if (true) {
return props_SelectParameter;
}
break;
case 276:
if (true) {
return props_SelectPositionParameter;
}
break;
case 277:
if (true) {
return props_SelectableStyleSheetItem;
}
break;
case 278:
if (true) {
return props_SetBoldOperation;
}
break;
case 279:
if (true) {
return props_ShowBoundariesInStyleClassItem;
}
break;
case 280:
if (true) {
return props_SideTransformAnchorTagStyleClassItem;
}
break;
case 281:
if (true) {
return props_StrikeOutStyleSheet;
}
break;
case 282:
if (true) {
return props_StubCellModel_Alternation;
}
break;
case 283:
if (true) {
return props_StubCellModel_Block;
}
break;
case 284:
if (true) {
return props_StubCellModel_Collection;
}
break;
case 285:
if (true) {
return props_StubCellModel_Component;
}
break;
case 286:
if (true) {
return props_StubCellModel_Constant;
}
break;
case 287:
if (true) {
return props_StubCellModel_ContextAssistant;
}
break;
case 288:
if (true) {
return props_StubCellModel_Custom;
}
break;
case 289:
if (true) {
return props_StubCellModel_Error;
}
break;
case 290:
if (true) {
return props_StubCellModel_Image;
}
break;
case 291:
if (true) {
return props_StubCellModel_JComponent;
}
break;
case 292:
if (true) {
return props_StubCellModel_ModelAccess;
}
break;
case 293:
if (true) {
return props_StubCellModel_NonEmptyProperty;
}
break;
case 294:
if (true) {
return props_StubCellModel_Property;
}
break;
case 295:
if (true) {
return props_StubCellModel_ReadOnlyModelAccessor;
}
break;
case 296:
if (true) {
return props_StubCellModel_RefCell;
}
break;
case 297:
if (true) {
return props_StubCellModel_RefNode;
}
break;
case 298:
if (true) {
return props_StubCellModel_RefNodeList;
}
break;
case 299:
if (true) {
return props_StubCellModel_ReferencePresentation;
}
break;
case 300:
if (true) {
return props_StubCellModel_Table;
}
break;
case 301:
if (true) {
return props_StubCellModel_TransactionalProperty;
}
break;
case 302:
if (true) {
return props_StubCellModel_URL;
}
break;
case 303:
if (true) {
return props_StubEditorCellModel;
}
break;
case 304:
if (true) {
return props_StyleAttributeDeclaration;
}
break;
case 305:
if (true) {
return props_StyleAttributeReferenceExpression;
}
break;
case 306:
if (true) {
return props_StyleClass;
}
break;
case 307:
if (true) {
return props_StyleClassItem;
}
break;
case 308:
if (true) {
return props_StyleClassReference;
}
break;
case 309:
if (true) {
return props_StyleClassReferenceList;
}
break;
case 310:
if (true) {
return props_StyleKey;
}
break;
case 311:
if (true) {
return props_StyleKeyPack;
}
break;
case 312:
if (true) {
return props_StyleReference;
}
break;
case 313:
if (true) {
return props_StyleSheet;
}
break;
case 314:
if (true) {
return props_StyleSheetClass;
}
break;
case 315:
if (true) {
return props_StyleSheetClassReference;
}
break;
case 316:
if (true) {
return props_StyledTextType;
}
break;
case 317:
if (true) {
return props_SubstituteFeature;
}
break;
case 318:
if (true) {
return props_SubstituteFeature_ActionType;
}
break;
case 319:
if (true) {
return props_SubstituteFeature_CanExecute;
}
break;
case 320:
if (true) {
return props_SubstituteFeature_DescriptionText;
}
break;
case 321:
if (true) {
return props_SubstituteFeature_Icon;
}
break;
case 322:
if (true) {
return props_SubstituteFeature_MatchingText;
}
break;
case 323:
if (true) {
return props_SubstituteFeature_Selection;
}
break;
case 324:
if (true) {
return props_SubstituteMenu;
}
break;
case 325:
if (true) {
return props_SubstituteMenuPart;
}
break;
case 326:
if (true) {
return props_SubstituteMenuPart_Action;
}
break;
case 327:
if (true) {
return props_SubstituteMenuPart_AddConcept;
}
break;
case 328:
if (true) {
return props_SubstituteMenuPart_Concepts;
}
break;
case 329:
if (true) {
return props_SubstituteMenuPart_Group;
}
break;
case 330:
if (true) {
return props_SubstituteMenuPart_IncludeMenu;
}
break;
case 331:
if (true) {
return props_SubstituteMenuPart_Parameterized;
}
break;
case 332:
if (true) {
return props_SubstituteMenuPart_Subconcepts;
}
break;
case 333:
if (true) {
return props_SubstituteMenuPart_Wrapper;
}
break;
case 334:
if (true) {
return props_SubstituteMenuReference;
}
break;
case 335:
if (true) {
return props_SubstituteMenuReference_Default;
}
break;
case 336:
if (true) {
return props_SubstituteMenuReference_DefaultWithFunction;
}
break;
case 337:
if (true) {
return props_SubstituteMenuReference_Named;
}
break;
case 338:
if (true) {
return props_SubstituteMenuVariableDeclaration;
}
break;
case 339:
if (true) {
return props_SubstituteMenuVariableReference;
}
break;
case 340:
if (true) {
return props_SubstituteMenu_Contribution;
}
break;
case 341:
if (true) {
return props_SubstituteMenu_Default;
}
break;
case 342:
if (true) {
return props_SubstituteMenu_Named;
}
break;
case 343:
if (true) {
return props_SubstituteMenu_SimpleString;
}
break;
case 344:
if (true) {
return props_Synchronizeable;
}
break;
case 345:
if (true) {
return props_TableComponentStyleClassItem;
}
break;
case 346:
if (true) {
return props_TextBackgroundColorSelectedStyleClassItem;
}
break;
case 347:
if (true) {
return props_TextBackgroundColorStyleClassItem;
}
break;
case 348:
if (true) {
return props_TransactionPropertyHandler_newValue;
}
break;
case 349:
if (true) {
return props_TransactionPropertyHandler_oldValue;
}
break;
case 350:
if (true) {
return props_TransactionalPropertyHandler;
}
break;
case 351:
if (true) {
return props_TransformationFeature;
}
break;
case 352:
if (true) {
return props_TransformationFeature_ActionType;
}
break;
case 353:
if (true) {
return props_TransformationFeature_DescriptionText;
}
break;
case 354:
if (true) {
return props_TransformationFeature_IconNode;
}
break;
case 355:
if (true) {
return props_TransformationLocation;
}
break;
case 356:
if (true) {
return props_TransformationLocation_Completion;
}
break;
case 357:
if (true) {
return props_TransformationLocation_ContextAssistant;
}
break;
case 358:
if (true) {
return props_TransformationLocation_SideTransform;
}
break;
case 359:
if (true) {
return props_TransformationLocation_SideTransform_PlaceInCellHolder;
}
break;
case 360:
if (true) {
return props_TransformationMenu;
}
break;
case 361:
if (true) {
return props_TransformationMenuContribution;
}
break;
case 362:
if (true) {
return props_TransformationMenuPart;
}
break;
case 363:
if (true) {
return props_TransformationMenuPart_Action;
}
break;
case 364:
if (true) {
return props_TransformationMenuPart_Group;
}
break;
case 365:
if (true) {
return props_TransformationMenuPart_IncludeMenu;
}
break;
case 366:
if (true) {
return props_TransformationMenuPart_IncludeSubstituteMenu;
}
break;
case 367:
if (true) {
return props_TransformationMenuPart_Parameterized;
}
break;
case 368:
if (true) {
return props_TransformationMenuPart_Placeholder;
}
break;
case 369:
if (true) {
return props_TransformationMenuPart_SubMenu;
}
break;
case 370:
if (true) {
return props_TransformationMenuPart_Super;
}
break;
case 371:
if (true) {
return props_TransformationMenuPart_WrapSubstituteMenu;
}
break;
case 372:
if (true) {
return props_TransformationMenuReference_Default;
}
break;
case 373:
if (true) {
return props_TransformationMenuReference_Named;
}
break;
case 374:
if (true) {
return props_TransformationMenuSection;
}
break;
case 375:
if (true) {
return props_TransformationMenuVariableDeclaration;
}
break;
case 376:
if (true) {
return props_TransformationMenuVariableReference;
}
break;
case 377:
if (true) {
return props_TransformationMenu_Default;
}
break;
case 378:
if (true) {
return props_TransformationMenu_Named;
}
break;
case 379:
if (true) {
return props_UnapplyStyle;
}
break;
case 380:
if (true) {
return props_UnderlinedStyleClassItem;
}
break;
default :
}
}
throw new IllegalStateException();
}
