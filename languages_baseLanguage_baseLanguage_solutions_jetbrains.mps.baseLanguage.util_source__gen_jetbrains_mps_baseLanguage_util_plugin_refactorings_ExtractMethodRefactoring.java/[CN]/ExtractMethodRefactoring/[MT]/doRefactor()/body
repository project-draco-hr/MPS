{
  SNode body=createMethodBody();
  List<SNode> params=new ArrayList<SNode>();
  Map<SNode,SNode> inputToParams=this.createInputParameters(body,params);
  Map<SNode,SNode> inputMapping=this.createInputVaryablesMapping(inputToParams,this.myParameters.getNodesToRefactor());
  this.myMatches=new MethodDuplicatesFinder(this.myParameters.getNodesToRefactor(),inputMapping,params,this.getOutputReferences()).findDuplicates(SNodeOperations.getNodeAncestor(ListSequence.fromList(this.myParameters.getNodesToRefactor()).first(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier"),false,false));
  this.replaceInputVariablesByParameters(SLinkOperations.getChildren(body,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123136l,1068581517665l,"statement")),inputToParams);
  SNode newMethod=this.createNewMethod(SNodeOperations.copyNode(this.getMethodType()),params,body);
  this.addMethod(newMethod);
  MethodMatch exactMatch=this.createMatch(this.myParameters.getNodesToRefactor(),inputMapping,params);
  this.replaceMatch(exactMatch,newMethod);
  MethodOptimizer.optimize(body);
  return newMethod;
}
