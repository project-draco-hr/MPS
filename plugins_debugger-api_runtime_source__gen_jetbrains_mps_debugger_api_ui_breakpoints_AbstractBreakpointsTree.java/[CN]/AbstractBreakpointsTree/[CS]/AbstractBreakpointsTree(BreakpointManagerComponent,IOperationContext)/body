{
  super(breakpointsManager);
  myContext=context;
  myBreakpointsManager.addChangeListener(myListener);
  updateBreakpointsData();
  myTree=new GroupedTree<AbstractBreakpointsTree.BreakpointNodeData>(myContext){
    @Override protected AbstractBreakpointsTree.BreakpointTreeNode createDataNode(    IOperationContext operationContext,    AbstractBreakpointsTree.BreakpointNodeData data){
      return new AbstractBreakpointsTree.BreakpointTreeNode(operationContext,data);
    }
    @Override protected GroupedTree.GroupKind<AbstractBreakpointsTree.BreakpointNodeData,Object> createRootGroupKind(){
      return new AbstractBreakpointsTree.AllGroupKind();
    }
    @Override protected Collection<AbstractBreakpointsTree.BreakpointNodeData> getData(){
      return myData;
    }
  }
;
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      fireBreakpointSelected(getSelectedBreakpoint(e.getPath()));
    }
  }
);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
}
