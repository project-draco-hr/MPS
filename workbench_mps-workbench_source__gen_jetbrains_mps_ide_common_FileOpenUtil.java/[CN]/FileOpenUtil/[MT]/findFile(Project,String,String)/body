{
  final Wrappers._T<String> fullFileName=new Wrappers._T<String>(unitName.replace(".","/"));
  if (!(unitName.endsWith(fileName))) {
    int lastDot=unitName.lastIndexOf(".");
    if (lastDot == -1) {
      fullFileName.value=fileName;
    }
 else {
      fullFileName.value=unitName.substring(0,lastDot).replace(".","/") + "/" + fileName;
    }
  }
  ChooseByNameContributor[] extensions=Extensions.getExtensions(ChooseByNameContributor.FILE_EP_NAME);
  Iterable<NavigationItem> found=Sequence.fromIterable(Sequence.fromArray(extensions)).translate(new ITranslator2<ChooseByNameContributor,NavigationItem>(){
    public Iterable<NavigationItem> translate(    ChooseByNameContributor it){
      return Sequence.fromArray(it.getItemsByName(fileName,fileName,project,true));
    }
  }
);
  Iterable<VirtualFile> matching=Sequence.fromIterable(found).where(new IWhereFilter<NavigationItem>(){
    public boolean accept(    NavigationItem it){
      return it instanceof MPSGoToFileContributor.FileNavigationItem;
    }
  }
).select(new ISelector<NavigationItem,VirtualFile>(){
    public VirtualFile select(    NavigationItem it){
      return ((MPSGoToFileContributor.FileNavigationItem)it).getVirtualFile();
    }
  }
).where(new IWhereFilter<VirtualFile>(){
    public boolean accept(    VirtualFile it){
      return it.getPath().endsWith(fullFileName.value);
    }
  }
);
  if (Sequence.fromIterable(matching).isNotEmpty()) {
    return Sequence.fromIterable(matching).first();
  }
  return null;
}
