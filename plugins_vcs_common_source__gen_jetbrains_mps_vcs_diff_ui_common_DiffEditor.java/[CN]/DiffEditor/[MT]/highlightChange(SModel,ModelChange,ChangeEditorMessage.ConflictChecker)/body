{
  final List<ChangeEditorMessage> messages=ChangeEditorMessageFactory.createMessages(model,change,this,conflictChecker);
  if (ListSequence.fromList(messages).isEmpty()) {
    return;
  }
  MapSequence.fromMap(myChangeToMessages).put(change,messages);
  Sequence.fromIterable(getEditorComponents()).visitAll(new IVisitor<EditorComponent>(){
    public void visit(    final EditorComponent ec){
      ListSequence.fromList(messages).visitAll(new IVisitor<ChangeEditorMessage>(){
        public void visit(        ChangeEditorMessage m){
          ec.getHighlightManager().mark(m);
        }
      }
);
    }
  }
);
}
