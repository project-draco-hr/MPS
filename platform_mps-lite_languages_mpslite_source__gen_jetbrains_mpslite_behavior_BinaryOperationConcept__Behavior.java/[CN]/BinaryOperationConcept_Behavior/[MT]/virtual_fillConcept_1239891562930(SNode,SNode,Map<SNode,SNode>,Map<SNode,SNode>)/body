{
  SNode conceptDeclaration=((SNode)concept);
  SNode leftLink=SLinkOperations.addNewChild(conceptDeclaration,"linkDeclaration","jetbrains.mps.lang.structure.structure.LinkDeclaration");
  SNode rightLink=SLinkOperations.addNewChild(conceptDeclaration,"linkDeclaration","jetbrains.mps.lang.structure.structure.LinkDeclaration");
  SLinkOperations.setTarget(leftLink,"target",AbstractConceptReference_Behavior.call_getConcept_1238594571574(SLinkOperations.getTarget(thisNode,"leftTarget",true),conceptsToTargets),false);
  SLinkOperations.setTarget(rightLink,"target",AbstractConceptReference_Behavior.call_getConcept_1238594571574(SLinkOperations.getTarget(thisNode,"rightTarget",true),conceptsToTargets),false);
  SPropertyOperations.set(leftLink,"role",SPropertyOperations.getString(thisNode,"leftTargetRole"));
  SPropertyOperations.set(rightLink,"role",SPropertyOperations.getString(thisNode,"rightTargetRole"));
  SPropertyOperations.set(leftLink,"metaClass","aggregation");
  SPropertyOperations.set(rightLink,"metaClass","aggregation");
  SPropertyOperations.set(leftLink,"sourceCardinality","1");
  SPropertyOperations.set(rightLink,"sourceCardinality","1");
  SNode conceptProperty=SLinkOperations.addNewChild(conceptDeclaration,"conceptProperty","jetbrains.mps.lang.structure.structure.StringConceptProperty");
  SLinkOperations.setTarget(conceptProperty,"conceptPropertyDeclaration",SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626"),"conceptPropertyDeclaration",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getString(it,"name").equals("alias");
    }
  }
).first(),"jetbrains.mps.lang.structure.structure.StringConceptPropertyDeclaration"),false);
  SPropertyOperations.set(conceptProperty,"value",SPropertyOperations.getString(thisNode,"sign"));
  MapSequence.fromMap(partsToLinks).put(SLinkOperations.getTarget(thisNode,"leftTarget",true),leftLink);
  MapSequence.fromMap(partsToLinks).put(SLinkOperations.getTarget(thisNode,"rightTarget",true),rightLink);
}
