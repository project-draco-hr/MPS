{
  Graph graph=stPlanarGraph.getGraph();
  Map<Object,Rectangle> visibility=VisibilityRepresentation.getVisibilityRepresentation(stPlanarGraph);
  GraphPointLayout layout=new GraphPointLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Rectangle rect=MapSequence.<Object,Rectangle>fromMap(visibility).get(node);
    List<Integer> edgesX=ListSequence.<Integer>fromList(new ArrayList<Integer>());
    for (    Edge edge : ListSequence.<Edge>fromList(node.getEdges())) {
      ListSequence.<Integer>fromList(edgesX).addElement(MapSequence.<Object,Rectangle>fromMap(visibility).get(edge).x);
    }
    edgesX=ListSequence.<Integer>fromList(edgesX).sort(new ISelector<Integer,Comparable<?>>(){
      public Comparable<?> select(      Integer it){
        return it;
      }
    }
,true).toListSequence();
    int mid=ListSequence.<Integer>fromList(edgesX).count() / 2;
    layout.setLayoutFor(node,new Point(ListSequence.<Integer>fromList(edgesX).getElement(mid),rect.y));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Rectangle rect=MapSequence.<Object,Rectangle>fromMap(visibility).get(edge);
    List<Point> points=ListSequence.<Point>fromList(new ArrayList<Point>());
    ListSequence.<Point>fromList(points).addElement(layout.getLayoutFor(edge.getSource()));
    ListSequence.<Point>fromList(points).addElement(new Point(rect.x,rect.y));
    ListSequence.<Point>fromList(points).addElement(new Point(rect.x,rect.y + rect.height));
    ListSequence.<Point>fromList(points).addElement(layout.getLayoutFor(edge.getTarget()));
    layout.setLayoutFor(edge,points);
  }
  return layout;
}
