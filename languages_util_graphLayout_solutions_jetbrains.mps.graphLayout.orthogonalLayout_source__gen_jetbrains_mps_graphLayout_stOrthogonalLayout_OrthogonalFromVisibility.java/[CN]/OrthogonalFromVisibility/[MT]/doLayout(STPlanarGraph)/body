{
  Graph graph=stPlanarGraph.getGraph();
  Map<Object,Rectangle> visibility=VisibilityRepresentation.getVisibilityRepresentation(stPlanarGraph);
  GraphPointLayout layout=new GraphPointLayout(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Rectangle rect=MapSequence.fromMap(visibility).get(node);
    List<Integer> edgesX=ListSequence.fromList(new ArrayList<Integer>());
    for (    Edge edge : ListSequence.fromList(node.getEdges())) {
      ListSequence.fromList(edgesX).addElement(MapSequence.fromMap(visibility).get(edge).x);
    }
    edgesX=ListSequence.fromList(edgesX).sort(new ISelector<Integer,Integer>(){
      public Integer select(      Integer it){
        return it;
      }
    }
,true).toListSequence();
    int mid=ListSequence.fromList(edgesX).count() / 2;
    layout.setLayoutFor(node,new Point(ListSequence.fromList(edgesX).getElement(mid),rect.y));
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    Rectangle rect=MapSequence.fromMap(visibility).get(edge);
    List<Point> points=ListSequence.fromList(new ArrayList<Point>());
    ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getSource()));
    ListSequence.fromList(points).addElement(new Point(rect.x,rect.y));
    ListSequence.fromList(points).addElement(new Point(rect.x,rect.y + rect.height));
    ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getTarget()));
    layout.setLayoutFor(edge,points);
  }
  return layout;
}
