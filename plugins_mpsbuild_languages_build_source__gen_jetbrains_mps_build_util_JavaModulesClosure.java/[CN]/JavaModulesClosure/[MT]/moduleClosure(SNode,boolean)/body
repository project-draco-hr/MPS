{
  for (  SNode dep : SLinkOperations.getTargets(module,"dependencies",true)) {
    if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyModule")) {
      SNode moduleDep=SNodeOperations.cast(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyModule");
      if (reexportOnly && !(SPropertyOperations.getBoolean(moduleDep,"reexport"))) {
        continue;
      }
      SNode depModule=SNodeOperations.as(toOriginalNode(SLinkOperations.getTarget(moduleDep,"module",false)),"jetbrains.mps.build.structure.BuildSource_JavaModule");
      if (depModule == null) {
        continue;
      }
      if (modules.add(depModule)) {
        moduleClosure(depModule,true);
        modules.remove(depModule);
        modules.add(depModule);
      }
    }
 else     if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary")) {
      SNode libraryDep=SNodeOperations.cast(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary");
      if (reexportOnly && !(SPropertyOperations.getBoolean(libraryDep,"reexport"))) {
        continue;
      }
      SNode library=SNodeOperations.as(toOriginalNode(SLinkOperations.getTarget(libraryDep,"library",false)),"jetbrains.mps.build.structure.BuildSource_JavaLibrary");
      if (library != null) {
        libraries.add(library);
      }
    }
 else     if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyJar")) {
      SNode jarDep=SNodeOperations.cast(dep,"jetbrains.mps.build.structure.BuildSource_JavaDependencyJar");
      if (reexportOnly && !(SPropertyOperations.getBoolean(jarDep,"reexport"))) {
        continue;
      }
      jars.add(SLinkOperations.getTarget(jarDep,"jar",true));
    }
  }
}
