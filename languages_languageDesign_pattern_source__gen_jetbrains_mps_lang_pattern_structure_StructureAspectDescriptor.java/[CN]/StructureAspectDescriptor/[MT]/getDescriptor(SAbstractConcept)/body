{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0y.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptActionAsPattern;
      }
    break;
case 1:
  if (true) {
    return myConceptActionStatement;
  }
break;
case 2:
if (true) {
return myConceptAsPattern;
}
break;
case 3:
if (true) {
return myConceptGeneratorInternal_ChildDescriptor;
}
break;
case 4:
if (true) {
return myConceptGeneratorInternal_PropertyDescriptor;
}
break;
case 5:
if (true) {
return myConceptGeneratorInternal_ReferenceDescriptor;
}
break;
case 6:
if (true) {
return myConceptInsertAfterPosition;
}
break;
case 7:
if (true) {
return myConceptInsertBeforePosition;
}
break;
case 8:
if (true) {
return myConceptInsertPosition;
}
break;
case 9:
if (true) {
return myConceptLinkPatternVariableDeclaration;
}
break;
case 10:
if (true) {
return myConceptListPattern;
}
break;
case 11:
if (true) {
return myConceptOrPattern;
}
break;
case 12:
if (true) {
return myConceptOrPatternClause;
}
break;
case 13:
if (true) {
return myConceptOrPatternVariableReference;
}
break;
case 14:
if (true) {
return myConceptPattern;
}
break;
case 15:
if (true) {
return myConceptPatternExpression;
}
break;
case 16:
if (true) {
return myConceptPatternVariableDeclaration;
}
break;
case 17:
if (true) {
return myConceptPatternVariableReference;
}
break;
case 18:
if (true) {
return myConceptPropertyPatternVariableDeclaration;
}
break;
case 19:
if (true) {
return myConceptWildcardPattern;
}
break;
default :
}
}
return null;
}
