{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.ActionAsPattern").super_("jetbrains.mps.lang.pattern.structure.AsPattern").parents("jetbrains.mps.lang.pattern.structure.AsPattern").children(new String[]{"position","action"},new boolean[]{false,false}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.ActionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.AsPattern").super_("jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration").parents("jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration").alias("@","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.GeneratorInternal_ChildDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("role").references("childLinkDeclaration","mainNode").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.GeneratorInternal_PropertyDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("name","value").references("mainNode").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.GeneratorInternal_ReferenceDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("role","id","model").references("mainNode").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.InsertAfterPosition").super_("jetbrains.mps.lang.pattern.structure.InsertPosition").parents("jetbrains.mps.lang.pattern.structure.InsertPosition").alias("after","after").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.InsertBeforePosition").super_("jetbrains.mps.lang.pattern.structure.InsertPosition").parents("jetbrains.mps.lang.pattern.structure.InsertPosition").alias("before","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.InsertPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.LinkPatternVariableDeclaration").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute","jetbrains.mps.lang.core.structure.INamedConcept").properties("varName").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.ListPattern").super_("jetbrains.mps.lang.pattern.structure.AsPattern").parents("jetbrains.mps.lang.pattern.structure.AsPattern").alias("*","list pattern").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.OrPattern").super_("jetbrains.mps.lang.pattern.structure.Pattern").parents("jetbrains.mps.lang.pattern.structure.Pattern").children(new String[]{"clause","variable"},new boolean[]{true,true}).alias("[|]","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.OrPatternClause").super_("jetbrains.mps.lang.pattern.structure.PatternExpression").parents("jetbrains.mps.lang.pattern.structure.PatternExpression").children(new String[]{"expression"},new boolean[]{false}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.OrPatternVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.Pattern").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").abstract_().create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.PatternExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IMetaLevelChanger","jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"patternNode"},new boolean[]{false}).alias(">pattern<","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration").super_("jetbrains.mps.lang.pattern.structure.Pattern").parents("jetbrains.mps.lang.pattern.structure.Pattern","jetbrains.mps.lang.core.structure.INamedConcept").properties("varName").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.PatternVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("variable").alias("","pattern variable reference").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute","jetbrains.mps.lang.core.structure.INamedConcept").properties("varName").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.pattern.structure.WildcardPattern").super_("jetbrains.mps.lang.pattern.structure.Pattern").parents("jetbrains.mps.lang.pattern.structure.Pattern").alias("_","").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
