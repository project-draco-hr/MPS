{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.ActionAsPattern","jetbrains.mps.lang.pattern.structure.AsPattern",false,new String[]{"jetbrains.mps.lang.pattern.structure.AsPattern"},new String[]{},new String[]{},new String[]{"position","action"},new boolean[]{false,false});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.ActionStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.AsPattern","jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false,new String[]{"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.GeneratorInternal_ChildDescriptor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"role"},new String[]{"childLinkDeclaration","mainNode"},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.GeneratorInternal_PropertyDescriptor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"name","value"},new String[]{"mainNode"},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.GeneratorInternal_ReferenceDescriptor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"role","id","model"},new String[]{"mainNode"},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.InsertAfterPosition","jetbrains.mps.lang.pattern.structure.InsertPosition",false,new String[]{"jetbrains.mps.lang.pattern.structure.InsertPosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.InsertBeforePosition","jetbrains.mps.lang.pattern.structure.InsertPosition",false,new String[]{"jetbrains.mps.lang.pattern.structure.InsertPosition"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.InsertPosition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.LinkPatternVariableDeclaration","jetbrains.mps.lang.core.structure.LinkAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.LinkAttribute","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"varName"},new String[]{},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.ListPattern","jetbrains.mps.lang.pattern.structure.AsPattern",false,new String[]{"jetbrains.mps.lang.pattern.structure.AsPattern"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.OrPattern","jetbrains.mps.lang.pattern.structure.Pattern",false,new String[]{"jetbrains.mps.lang.pattern.structure.Pattern"},new String[]{},new String[]{},new String[]{"clause","variable"},new boolean[]{true,true});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.OrPatternClause","jetbrains.mps.lang.pattern.structure.PatternExpression",false,new String[]{"jetbrains.mps.lang.pattern.structure.PatternExpression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.OrPatternVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"declaration"},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.Pattern","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.PatternExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IMetaLevelChanger","jetbrains.mps.lang.core.structure.ISuppressErrors"},new String[]{},new String[]{},new String[]{"patternNode"},new boolean[]{false});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration","jetbrains.mps.lang.pattern.structure.Pattern",false,new String[]{"jetbrains.mps.lang.pattern.structure.Pattern","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"varName"},new String[]{},new String[]{},new boolean[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.PatternVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration","jetbrains.mps.lang.core.structure.PropertyAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.PropertyAttribute","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"varName"},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.pattern.structure.WildcardPattern","jetbrains.mps.lang.pattern.structure.Pattern",false,new String[]{"jetbrains.mps.lang.pattern.structure.Pattern"},new String[]{},new String[]{},new String[]{},new boolean[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
