{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ConceptFunc").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ConceptFuncContainter").interface_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ConceptFuncParameterDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ConceptFuncParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.DepType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"getter"},new boolean[]{false}).alias("deptype","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.DepTypeInstance").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("decl").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ObligatoryMethodDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"param","retType"},new boolean[]{true,false}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ObligatoryMethodsDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").references("conceptDecl").children(new String[]{"method"},new boolean[]{true}).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ParameterDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"},new boolean[]{false}).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
