{
  List<SNode> implementorsAndAncestorsList=new ArrayList<SNode>();
  for (  SNode implementor : Sequence.fromIterable(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder",SNodeOperations.getParent(node),scope,indicator))) {
    ListSequence.fromList(implementorsAndAncestorsList).addElement(implementor);
    ListSequence.fromList(implementorsAndAncestorsList).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",implementor,scope,indicator)));
  }
  Set<SNode> implementorsAndAncestorsNodes=new HashSet<SNode>();
  for (  SNode implementorOrAncestor : Sequence.fromIterable(implementorsAndAncestorsList)) {
    implementorsAndAncestorsNodes.add(implementorOrAncestor);
  }
  for (  SNode classNode : Sequence.fromIterable(implementorsAndAncestorsNodes)) {
    for (    SNode sMethod : Sequence.fromIterable(SLinkOperations.getTargets(classNode,"method",true))) {
      if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(sMethod,node)) {
        ListOperations.addElement(_results,sMethod);
      }
    }
  }
}
