{
  List<SNode> implementorsAndAncestorsList=ListOperations.<SNode>createList();
  for (  SNode implementor : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder",SNodeOperations.getParent(node),scope,indicator))) {
    ListSequence.fromList(implementorsAndAncestorsList).addElement(implementor);
    ListSequence.fromList(implementorsAndAncestorsList).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",implementor,scope,indicator)));
  }
  Set<SNode> implementorsAndAncestorsNodes=SetSequence.<SNode>fromArray();
  for (  SNode implementorOrAncestor : ListSequence.fromList(implementorsAndAncestorsList)) {
    SetSequence.fromSet(implementorsAndAncestorsNodes).addElement(SNodeOperations.cast(implementorOrAncestor,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  }
  for (  SNode classNode : SetSequence.fromSet(implementorsAndAncestorsNodes)) {
    for (    SNode sMethod : ListSequence.fromList(SLinkOperations.getTargets(classNode,"method",true))) {
      if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(sMethod,node)) {
        ListOperations.addElement(_results,sMethod);
      }
    }
  }
}
