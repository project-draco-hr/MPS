{
  results.getSearchedNodePointers().add(new SNodePointer(node));
  List<SearchResult> implementors=new ArrayList<SearchResult>();
  try {
    GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder").newInstance();
    SNode _node=SNodeOperations.getParent(node,null,false,false);
    IScope _scope;
    _scope=scope;
    boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Interface");
    if (!(rightConcept)) {
      InterfaceMethodImplementations_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
    }
 else {
      boolean isApplicable=_finder.isApplicable(_node);
      if (!(isApplicable)) {
        InterfaceMethodImplementations_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
      }
 else {
        SearchResults results_12=_finder.find(new SearchQuery(_node,_scope));
        for (        SearchResult result : results_12.getSearchResults()) {
          implementors.add(result);
        }
      }
    }
  }
 catch (  Throwable t) {
    InterfaceMethodImplementations_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder" + "\"  Message:"+ t.getMessage());
  }
  List<SearchResult> implementorsAndAncestorsList=new ArrayList<SearchResult>();
{
    ICursor<SearchResult> _zCursor5=CursorFactory.createCursor(implementors);
    try {
      while (_zCursor5.moveToNext()) {
        SearchResult implementor=_zCursor5.getCurrent();
{
          implementorsAndAncestorsList.add(implementor);
          SNode implementorNode=implementor.getNode();
          try {
            GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder").newInstance();
            SNode _node=implementorNode;
            IScope _scope;
            _scope=scope;
            boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ClassConcept");
            if (!(rightConcept)) {
              InterfaceMethodImplementations_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
            }
 else {
              boolean isApplicable=_finder.isApplicable(_node);
              if (!(isApplicable)) {
                InterfaceMethodImplementations_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
              }
 else {
                SearchResults results_13=_finder.find(new SearchQuery(_node,_scope));
                for (                SearchResult result : results_13.getSearchResults()) {
                  implementorsAndAncestorsList.add(result);
                }
              }
            }
          }
 catch (          Throwable t) {
            InterfaceMethodImplementations_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder" + "\"  Message:"+ t.getMessage());
          }
        }
      }
    }
  finally {
      _zCursor5.release();
    }
  }
  Set<SNode> implementorsAndAncestorsNodes=new HashSet<SNode>();
{
    ICursor<SearchResult> _zCursor6=CursorFactory.createCursor(implementorsAndAncestorsList);
    try {
      while (_zCursor6.moveToNext()) {
        SearchResult implementorOrAncestor=_zCursor6.getCurrent();
        implementorsAndAncestorsNodes.add((SNode)implementorOrAncestor.getNode());
      }
    }
  finally {
      _zCursor6.release();
    }
  }
{
    ICursor<SNode> _zCursor7=CursorFactory.createCursor(implementorsAndAncestorsNodes);
    try {
      while (_zCursor7.moveToNext()) {
        SNode classNode=_zCursor7.getCurrent();
{
          ICursor<SNode> _zCursor8=CursorFactory.createCursor(SLinkOperations.getTargets(classNode,"method",true));
          try {
            while (_zCursor8.moveToNext()) {
              SNode sMethod=_zCursor8.getCurrent();
              if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1204901126405(sMethod,node)) {
                results.getSearchResults().add(new SearchResult(new SNodePointer(sMethod),"Method Implementation"));
              }
            }
          }
  finally {
            _zCursor8.release();
          }
        }
      }
    }
  finally {
      _zCursor7.release();
    }
  }
}
