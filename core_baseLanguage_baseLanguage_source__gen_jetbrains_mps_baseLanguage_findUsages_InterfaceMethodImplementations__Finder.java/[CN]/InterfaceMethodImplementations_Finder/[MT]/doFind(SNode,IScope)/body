{
  List<SNode> _results=new ArrayList<SNode>();
{
    List<SNode> implementorsAndAncestorsList=new ArrayList<SNode>();
{
      ICursor<SNode> _zCursor6=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder",SNodeOperations.getParent(node,null,false,false),scope));
      try {
        while (_zCursor6.moveToNext()) {
          SNode implementor=_zCursor6.getCurrent();
          ListOperations.addElement(implementorsAndAncestorsList,implementor);
          ListOperations.addAllElements(implementorsAndAncestorsList,this.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",implementor,scope));
        }
      }
  finally {
        _zCursor6.release();
      }
    }
    Set<SNode> implementorsAndAncestorsNodes=new HashSet<SNode>();
{
      ICursor<SNode> _zCursor7=CursorFactory.createCursor(implementorsAndAncestorsList);
      try {
        while (_zCursor7.moveToNext()) {
          SNode implementorOrAncestor=_zCursor7.getCurrent();
          implementorsAndAncestorsNodes.add(implementorOrAncestor);
        }
      }
  finally {
        _zCursor7.release();
      }
    }
{
      ICursor<SNode> _zCursor8=CursorFactory.createCursor(implementorsAndAncestorsNodes);
      try {
        while (_zCursor8.moveToNext()) {
          SNode classNode=_zCursor8.getCurrent();
{
            ICursor<SNode> _zCursor9=CursorFactory.createCursor(SLinkOperations.getTargets(classNode,"method",true));
            try {
              while (_zCursor9.moveToNext()) {
                SNode sMethod=_zCursor9.getCurrent();
                if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1204901126405(sMethod,node)) {
                  ListOperations.addElement(_results,sMethod);
                }
              }
            }
  finally {
              _zCursor9.release();
            }
          }
        }
      }
  finally {
        _zCursor8.release();
      }
    }
  }
  return _results;
}
