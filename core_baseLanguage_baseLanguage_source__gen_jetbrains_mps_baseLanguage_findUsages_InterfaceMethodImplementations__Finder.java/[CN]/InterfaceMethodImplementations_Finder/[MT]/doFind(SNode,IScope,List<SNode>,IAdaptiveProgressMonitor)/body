{
  List<SNode> implementorsAndAncestorsList=new ArrayList<SNode>();
  for (  SNode implementor : this.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder",SNodeOperations.getParent(node,null,false,false),scope,monitor)) {
    ListSequence.fromList(implementorsAndAncestorsList).addElement(implementor);
    ListSequence.fromList(implementorsAndAncestorsList).addSequence(ListSequence.fromList(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",implementor,scope,monitor)));
  }
  Set<SNode> implementorsAndAncestorsNodes=new HashSet<SNode>();
  for (  SNode implementorOrAncestor : implementorsAndAncestorsList) {
    implementorsAndAncestorsNodes.add(implementorOrAncestor);
  }
  for (  SNode classNode : implementorsAndAncestorsNodes) {
    for (    SNode sMethod : SLinkOperations.getTargets(classNode,"method",true)) {
      if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1204901126405(sMethod,node)) {
        ListOperations.addElement(_results,sMethod);
      }
    }
  }
}
