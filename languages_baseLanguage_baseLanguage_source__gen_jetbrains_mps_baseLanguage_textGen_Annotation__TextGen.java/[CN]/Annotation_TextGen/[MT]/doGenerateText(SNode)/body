{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")) != null)) {
    appendNode(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")));
  }
  BaseLanguageTextGen.fileHeader(node,this);
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility")),this);
  this.append("@interface ");
  this.append(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
  this.append(" ");
  BaseClassConceptTextGen.membersWithBrackets(node,true,this);
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String unitName=null;
      try {
        unitName=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate unit name for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillUnitInfo(this,node,unitName);
    }
  }
}
