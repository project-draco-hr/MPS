{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  BaseLanguageTextGen.fileHeader(node,this);
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibility(SLinkOperations.getTarget(node,"visibility",true),this);
  if ((AttributeOperations.getAttribute(node,new NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"))) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),AttributeOperations.getAttribute(node,new NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"))),this.getSNode());
  }
  if (!(node.isRoot())) {
    this.append("static ");
  }
  this.appendWithIndent("@interface ");
  if (isEmpty_ydmu3t_a0f0a(SPropertyOperations.getString(node,"name"))) {
    this.foundError("annotation name is empty");
    this.append("???");
  }
 else {
    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node,"name")));
  }
  this.append(" {");
  this.increaseDepth();
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"method",true)).isNotEmpty()) {
    for (    SNode item : SLinkOperations.getTargets(node,"method",true)) {
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
    }
  }
  this.decreaseDepth();
  this.decreaseDepth();
  this.appendNewLine();
  this.append("}");
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.fillUnitInfo(this,node,UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept")));
  }
}
