{
  Map<String,Document> result=new HashMap<String,Document>();
  myHelper=new MultiStreamWriteHelper(sourceModel.getReference());
  Element headerRoot=new Element(ModelPersistence.MODEL);
  headerRoot.setAttribute(ModelPersistence.MODEL_UID,sourceModel.getReference().toString());
  headerRoot.setAttribute(ModelPersistence.FILE_CONTENT,"header");
  saveHeader(sourceModel,headerRoot);
  result.put(FilePerRootDataSource.HEADER_FILE,new Document(headerRoot));
  Map<SNodeId,String> rootToFile=FilePerRootFormatUtil.getStreamNames(sourceModel);
  for (  SNode root : sourceModel.getRootNodes()) {
    Element rootElement=new Element(ModelPersistence.MODEL);
    rootElement.setAttribute(ModelPersistence.MODEL_UID,sourceModel.getReference().toString());
    rootElement.setAttribute(ModelPersistence.FILE_CONTENT,"root");
    Element childElement=new Element(ModelPersistence.ROOT_NODE);
    CollectConsumer<SModelReference> usedImports=new CollectConsumer<SModelReference>(new LinkedHashSet<SModelReference>());
    ((MultiStreamWriteHelper)myHelper).setUsedImportsListener(usedImports);
    saveNode(childElement,root,true);
    ((MultiStreamWriteHelper)myHelper).setUsedImportsListener(null);
    for (    SModelReference modelRef : usedImports.getResult()) {
      Element elem=new Element(ModelPersistence.IMPORT_ELEMENT);
      elem.setAttribute(ModelPersistence.MODEL_IMPORT_INDEX,"" + myHelper.getImportIndex(modelRef));
      elem.setAttribute(ModelPersistence.MODEL_UID,modelRef.toString());
      elem.setAttribute(ModelPersistence.IMPLICIT,"yes");
      rootElement.addContent(elem);
    }
    rootElement.addContent(childElement);
    result.put(rootToFile.get(root.getNodeId()),new Document(rootElement));
  }
  return result;
}
