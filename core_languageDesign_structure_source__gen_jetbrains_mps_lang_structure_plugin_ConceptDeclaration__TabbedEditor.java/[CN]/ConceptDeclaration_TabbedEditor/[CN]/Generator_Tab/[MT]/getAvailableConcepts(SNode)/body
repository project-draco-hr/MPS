{
  List<SNode> result=ConceptEditorHelper.getAvailableConceptAspects(SNodeOperations.getModel(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateSwitch")),node);
  ListSequence.fromList(result).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"));
  if (SPropertyOperations.getBoolean(SNodeOperations.cast(node,"jetbrains.mps.lang.core.structure.BaseConcept"),"rootable")) {
    boolean isNeedRootTemplate=true;
    for (    SNode genFragment : AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(node,ConceptEditorHelper.getScope(Generator_Tab.this))) {
      if ((SLinkOperations.getTarget(genFragment,AttributesRolesUtil.childRoleFromAttributeRole("rootTemplateAnnotation"),true) != null)) {
        isNeedRootTemplate=false;
        break;
      }
    }
    if (isNeedRootTemplate) {
      for (      ModuleReference moduleRef : SNodeOperations.getModel(node).getExplicitlyImportedLanguages()) {
        Language language=MPSModuleRepository.getInstance().getLanguage(moduleRef);
        if (language == null) {
          continue;
        }
        SModel structureModel=language.getStructureModelDescriptor().getSModel();
        for (        SNode nodeToAdd : SModelOperations.getRoots(structureModel,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
          SNode conceptToAdd=(SNode)nodeToAdd;
          if (SPropertyOperations.getBoolean(nodeToAdd,"rootable")) {
            ListSequence.fromList(result).addElement(conceptToAdd);
          }
        }
      }
    }
  }
  return result;
}
