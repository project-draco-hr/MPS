{
  final SNode child=event.getChild();
  final SNode parent=event.getParent();
  if (jetbrains.mps.smodel.SNodeUtil.isSideTransformInfo(child) && (event.isRemoved() || jetbrains.mps.smodel.SNodeUtil.link_BaseConcept_smodelAttribute.equals(child.getContainmentLink()))) {
    return;
  }
  markInvalid(child);
  markInvalid(parent);
  List<SNode> childWithDescendants=IterableUtil.copyToList(SNodeUtil.getDescendants(child,null,true));
  if (event.isRemoved()) {
    Iterator<SNode> it=childWithDescendants.iterator();
    it.next();
    while (it.hasNext()) {
      SNode descendant=it.next();
      markDependentNodesForInvalidation(descendant,myNonTypeSystemComponent);
      markDependentNodesForInvalidation(descendant,getTypecheckingComponent());
    }
  }
  List<SReference> references=new ArrayList<SReference>();
  for (  SNode descendant : childWithDescendants) {
    references.addAll(IterableUtil.asCollection(descendant.getReferences()));
  }
  markReferenceTargetsInvalid(references);
}
