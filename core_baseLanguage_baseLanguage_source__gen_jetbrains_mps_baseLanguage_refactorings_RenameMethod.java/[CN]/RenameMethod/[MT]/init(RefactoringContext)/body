{
  boolean result=RenameMethod.this.ask(refactoringContext,MPSChooserFactory.createStringChooser(refactoringContext,"newName",new RenameMethod_newName_Settings(refactoringContext)));
  if (!(result)) {
    return false;
  }
  final Wrappers._T<List<SNode>> overriding=new Wrappers._T<List<SNode>>();
  final Wrappers._T<SNode> methodDeclNode=new Wrappers._T<SNode>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      methodDeclNode.value=RenameUtil.getMethodDeclaration(refactoringContext.getSelectedNode());
      overriding.value=MethodRefactoringUtils.findOverridingMethods(methodDeclNode.value,new EmptyProgressIndicator());
    }
  }
);
  if (ListSequence.fromList(overriding.value).isNotEmpty()) {
    result=RenameMethod.this.askBool(refactoringContext,"Refactor overriding methods?","refactorOverriding",new RenameMethod_refactorOverriding_Settings(refactoringContext));
    if (!(result)) {
      return false;
    }
  }
  return true;
}
