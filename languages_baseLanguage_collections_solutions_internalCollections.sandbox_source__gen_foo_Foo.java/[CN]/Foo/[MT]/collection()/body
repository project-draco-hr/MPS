{
  Collection<Integer> ci=CollectionSequence.fromCollection(new ArrayList<Integer>());
  CollectionSequence.fromCollection(ci).addElement(1);
  CollectionSequence.fromCollection(ci).removeElement(2);
  CollectionSequence.fromCollection(ci).removeSequence(null);
  CollectionSequence.fromCollection(ci).addSequence(CollectionSequence.fromCollection(ci));
  CollectionSequence.fromCollection(ci).asUnmodifiable();
  Set<Integer> si=SetSequence.fromSet(new HashSet<Integer>());
  SetSequence.fromSet(si).addElement(1);
  SetSequence.fromSet(si).addElement(2);
  SetSequence.fromSet(si).removeElement(1);
  SetSequence.fromSet(si).removeSequence(CollectionSequence.fromCollection(ci));
  SetSequence.fromSet(si).addSequence(CollectionSequence.fromCollection(ci));
  SetSequence.fromSet(si).asUnmodifiable();
  Set<Integer> is=SetSequence.fromSet(si).addSequence(SetSequence.fromSet(si));
  SetSequence.fromSet(si).addSequence(SetSequence.fromSet(si));
  SetSequence.fromSet(si).removeSequence(CollectionSequence.fromCollection(ci));
  SetSequence.fromSet(si).removeSequence(SetSequence.fromSet(si));
  List<Integer> li=ListSequence.fromList(new ArrayList<Integer>());
  ListSequence.fromList(li).addElement(1);
  ListSequence.fromList(li).removeElement(1);
  ListSequence.fromList(li).removeSequence(SetSequence.fromSet(si));
  ListSequence.fromList(li).asUnmodifiable();
  ci=si;
  Iterable<Integer> sqi=si;
  sqi=si;
  CollectionSequence.fromCollection(ci).addElement(2);
  Queue<Integer> qi=QueueSequence.fromQueue(new LinkedList<Integer>());
  QueueSequence.fromQueue(qi).removeElement(3);
  QueueSequence.fromQueue(qi).removeElement(1);
  QueueSequence.fromQueue(qi).addLastElement(3);
  QueueSequence.fromQueue(qi).removeSequence(ListSequence.fromList(li));
  Deque<Integer> sti=DequeSequence.fromDeque(new LinkedList<Integer>());
  DequeSequence.fromDeque(sti).pushElement(2);
  DequeSequence.fromDeque(sti).removeElement(1);
  DequeSequence.fromDeque(sti).addSequence(QueueSequence.fromQueue(qi));
  DequeSequence.fromDeque(sti).ofType(String.class);
  DequeSequence.fromDeque(sti).ofType(List.class);
}
