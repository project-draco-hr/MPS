{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("annotationLink",new BaseReferenceConstraintsDescriptor("annotationLink",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode ald=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration");
          List<SNode> annotationLinks=SConceptOperations.findConceptInstances(ald,operationContext.getScope());
          List<SNode> linkAttrLinks=ListSequence.fromList(annotationLinks).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.hasValue(it,"stereotype","link","node");
            }
          }
).toListSequence();
          return linkAttrLinks;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_dgw6wt_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
