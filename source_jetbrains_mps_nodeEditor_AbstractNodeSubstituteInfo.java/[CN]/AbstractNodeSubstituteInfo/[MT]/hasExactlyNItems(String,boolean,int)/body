{
  Pair<String,List<INodeSubstituteItem>> pair=getItemsAndPattern(pattern,strictMatching);
  List<INodeSubstituteItem> result=pair.o2;
  String smallPattern=pair.o1;
  int count1=0;
  int count2=result.size();
  if (strictMatching) {
    Iterator<INodeSubstituteItem> iterator1=result.iterator();
    while (iterator1.hasNext()) {
      INodeSubstituteItem substituteItem=iterator1.next();
      if (substituteItem.canSubstituteStrictly(pattern)) {
        count1++;
        if (count1 > n)         return false;
      }
 else {
        iterator1.remove();
        count2--;
        if (count2 < n)         return false;
      }
    }
    myStrictPatternsToItemListsCache.put(smallPattern,new ArrayList<INodeSubstituteItem>(result));
    if (count1 == n)     return true;
  }
 else {
    Iterator<INodeSubstituteItem> items=result.iterator();
    while (items.hasNext()) {
      INodeSubstituteItem item=items.next();
      if (!item.canSubstitute(pattern)) {
        items.remove();
        count2--;
        if (count2 < n)         return false;
      }
 else {
        count1++;
        if (count1 > n && !strictMatching)         return false;
      }
    }
    myPatternsToItemListsCache.put(smallPattern,new ArrayList<INodeSubstituteItem>(result));
    if (count1 == n)     return true;
  }
  return false;
}
