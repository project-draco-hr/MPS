{
  Pair<String,List<INodeSubstituteAction>> pair=getPatternAndActions(pattern,strictMatching);
  String smallPattern=pair.o1;
  List<INodeSubstituteAction> result=pair.o2;
  Iterator<INodeSubstituteAction> items=result.iterator();
  while (items.hasNext()) {
    INodeSubstituteAction item=items.next();
    if (!item.canSubstitute(pattern)) {
      items.remove();
    }
  }
  myPatternsToActionListsCache.put(smallPattern,new ArrayList<INodeSubstituteAction>(result));
  if (strictMatching) {
    Iterator<INodeSubstituteAction> iterator1=result.iterator();
    while (iterator1.hasNext()) {
      INodeSubstituteAction substituteItem=iterator1.next();
      if (substituteItem.canSubstituteStrictly(pattern))       continue;
      iterator1.remove();
    }
  }
  myStrictPatternsToActionListsCache.put(smallPattern,new ArrayList<INodeSubstituteAction>(result));
  return (List)result;
}
