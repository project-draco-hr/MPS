{
  String smallPattern=pattern;
  List<INodeSubstituteItem> result=null;
  while (smallPattern.length() > 0) {
    if (myPatternsToItemListsCache.containsKey(smallPattern)) {
      result=new ArrayList<INodeSubstituteItem>();
      result.addAll(myPatternsToItemListsCache.get(smallPattern));
      break;
    }
 else {
      smallPattern=smallPattern.substring(0,smallPattern.length() - 1);
    }
  }
  if (result == null)   result=new ArrayList<INodeSubstituteItem>(items());
  Iterator<INodeSubstituteItem> items=result.iterator();
  while (items.hasNext()) {
    INodeSubstituteItem item=items.next();
    if (!item.canSubstitute(pattern)) {
      items.remove();
    }
  }
  myPatternsToItemListsCache.put(smallPattern,new ArrayList<INodeSubstituteItem>(result));
  if (strictMatching) {
    Iterator<INodeSubstituteItem> iterator1=result.iterator();
    while (iterator1.hasNext()) {
      INodeSubstituteItem substituteItem=iterator1.next();
      if (substituteItem.canSubstituteStrictly(pattern))       continue;
      iterator1.remove();
    }
  }
  return result;
}
