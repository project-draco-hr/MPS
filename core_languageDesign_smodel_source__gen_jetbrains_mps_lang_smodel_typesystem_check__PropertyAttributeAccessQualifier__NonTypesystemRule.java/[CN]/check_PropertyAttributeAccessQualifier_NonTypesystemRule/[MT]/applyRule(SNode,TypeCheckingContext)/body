{
  final SNode propQ=SLinkOperations.getTarget(nodeToCheck,"propertyQualifier",true);
  if (SNodeOperations.isInstanceOf(propQ,"jetbrains.mps.lang.smodel.structure.PropertyRefQualifier")) {
    final SNode property=SLinkOperations.getTarget(propQ,"property",false);
    SNode conceptDeclaration=RulesUtil.get_inputNodeConcept(SNodeOperations.getAncestor(nodeToCheck,"jetbrains.mps.lang.smodel.structure.SNodeOperation",false,false),false);
    SNode inputNodeConcept=conceptDeclaration;
    List<SNode> declaredProperties=AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(inputNodeConcept);
    if (!(ListSequence.fromList(declaredProperties).contains(property))) {
      BaseIntentionProvider intentionProvider=null;
      typeCheckingContext.reportTypeError(propQ,"access to property '" + SPropertyOperations.getString(property,"name") + "' is not expected here","r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1226067188701",intentionProvider);
    }
  }
}
