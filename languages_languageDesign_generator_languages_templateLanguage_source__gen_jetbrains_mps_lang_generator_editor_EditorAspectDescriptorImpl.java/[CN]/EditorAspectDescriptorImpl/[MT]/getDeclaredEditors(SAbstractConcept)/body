{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AbandonInput_RuleConsequence_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new CopySrcListMacro_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new CopySrcNodeMacro_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new CreateRootRule_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new DismissTopMappingRule_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new DropAttributeRule_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new DropRootRule_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExportLabel_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExportMacro_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorDebug_InputNode_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorDebug_LabelEntry_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorDebug_Mappings_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorDebug_NodeMapEntry_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorDebug_NodeRef_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorMessage_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorParameterReference_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new IfMacro_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncludeMacro_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineSwitch_Case_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineSwitch_RuleConsequence_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineTemplateWithContext_RuleConsequence_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineTemplate_RuleConsequence_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new InsertMacro_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new LabelMacro_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new LoopMacro_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapSrcListMacro_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new MapSrcNodeMacro_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingConfiguration_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingLabelDeclaration_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingScript_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new MappingScriptReference_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeMacro_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new PatternReduction_MappingRule_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyMacro_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new Reduction_MappingRule_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceMacro_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new RootTemplateAnnotation_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new Root_MappingRule_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new RuleConsequence_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentLinkPatternRefExpression_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentParameterExpression_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentPatternVarRefExpression_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentPropertyPatternRefExpression_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentQueryExpression_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateArgumentVariableRefExpression_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateCallMacro_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateDeclaration_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateDeclarationReference_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateFragment_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateParameterDeclaration_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateSwitch_Editor());
}
break;
case 51:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateSwitchMacro_Editor());
}
break;
case 52:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateSwitchReference_Editor());
}
break;
case 53:
if (true) {
return Collections.<ConceptEditor>singletonList(new TraceMacro_Editor());
}
break;
case 54:
if (true) {
return Collections.<ConceptEditor>singletonList(new VarMacro_Editor());
}
break;
case 55:
if (true) {
return Collections.<ConceptEditor>singletonList(new WeaveEach_RuleConsequence_Editor());
}
break;
case 56:
if (true) {
return Collections.<ConceptEditor>singletonList(new WeaveMacro_Editor());
}
break;
case 57:
if (true) {
return Collections.<ConceptEditor>singletonList(new Weaving_MappingRule_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
