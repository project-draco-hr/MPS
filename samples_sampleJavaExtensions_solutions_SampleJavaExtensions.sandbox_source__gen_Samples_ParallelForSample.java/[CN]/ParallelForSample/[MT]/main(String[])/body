{
  final ExecutorService myPool=Executors.newFixedThreadPool(3);
  final ExecutorService youPool=Executors.newFixedThreadPool(10);
  final Iterable<Integer> numbers=ListSequence.fromListAndArray(new ArrayList<Integer>(),1,2,3,4,5);
{
    final CountDownLatch latch_i0d=new CountDownLatch(Sequence.fromIterable(numbers).count());
    final List<Exception> exceptions_i0d=new CopyOnWriteArrayList<Exception>();
    for (    final int a : numbers) {
      final int localA=a;
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            log("Starting calculation for number " + localA + " in thread "+ Thread.currentThread());
            Thread.sleep(localA * 1000);
            log("Finished calculation for number " + localA + " in thread "+ Thread.currentThread());
          }
 catch (          RuntimeException e) {
            ListSequence.fromList(exceptions_i0d).addElement(e);
          }
catch (          InterruptedException e) {
            ListSequence.fromList(exceptions_i0d).addElement(e);
          }
 finally {
            latch_i0d.countDown();
          }
        }
      }
;
      myPool.execute(runnable);
    }
    try {
      latch_i0d.await();
    }
 catch (    InterruptedException e) {
      ListSequence.fromList(exceptions_i0d).addElement(e);
    }
    if (ListSequence.fromList(exceptions_i0d).isNotEmpty()) {
      throw new ParallelLoopException("Some parallel calculations failed",exceptions_i0d);
    }
  }
  log("Done");
  final String doNotMessupWith="The Shared State";
  final List<String> names=ListSequence.fromListAndArray(new ArrayList<String>(),"Joe","Dave","Alice");
  final AtomicInteger counter=new AtomicInteger(0);
{
    final CountDownLatch latch_w0d=new CountDownLatch(Sequence.fromIterable(numbers).count());
    final List<Exception> exceptions_w0d=new CopyOnWriteArrayList<Exception>();
    for (    final int b : numbers) {
      final int localA=b;
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            log("Touching " + doNotMessupWith);
            int messupWithMeSinceImlocal=1;
            messupWithMeSinceImlocal+=10;
            log("Local variables can be used without restrictions " + messupWithMeSinceImlocal);
            ListSequence.fromList(names).removeElement("Joe");
            List<String> localNames=ListSequence.fromList(new ArrayList<String>());
            ListSequence.fromList(localNames).addElement("Susan");
            log("Counter: " + counter.incrementAndGet());
            Thread.sleep(localA);
          }
 catch (          RuntimeException e) {
            ListSequence.fromList(exceptions_w0d).addElement(e);
          }
catch (          InterruptedException e) {
            ListSequence.fromList(exceptions_w0d).addElement(e);
          }
 finally {
            latch_w0d.countDown();
          }
        }
      }
;
      youPool.execute(runnable);
    }
    try {
      latch_w0d.await();
    }
 catch (    InterruptedException e) {
      ListSequence.fromList(exceptions_w0d).addElement(e);
    }
    if (ListSequence.fromList(exceptions_w0d).isNotEmpty()) {
      throw new ParallelLoopException("Some parallel calculations failed",exceptions_w0d);
    }
  }
{
    final CountDownLatch latch_ab0d=new CountDownLatch(ListSequence.fromList(names).count());
    final List<Exception> exceptions_ab0d=new CopyOnWriteArrayList<Exception>();
    for (    final String c : names) {
      final String localA=c;
      final Runnable runnable=new Runnable(){
        public void run(){
          try {
            log("Name: " + localA);
            if (localA == "Joe") {
              throw new RuntimeException("test");
            }
          }
 catch (          RuntimeException e) {
            ListSequence.fromList(exceptions_ab0d).addElement(e);
          }
 finally {
            latch_ab0d.countDown();
          }
        }
      }
;
      new Thread(runnable).start();
    }
    try {
      latch_ab0d.await();
    }
 catch (    InterruptedException e) {
      ListSequence.fromList(exceptions_ab0d).addElement(e);
    }
    if (ListSequence.fromList(exceptions_ab0d).isNotEmpty()) {
      throw new ParallelLoopException("Some parallel calculations failed",exceptions_ab0d);
    }
  }
  myPool.shutdown();
  youPool.shutdown();
}
