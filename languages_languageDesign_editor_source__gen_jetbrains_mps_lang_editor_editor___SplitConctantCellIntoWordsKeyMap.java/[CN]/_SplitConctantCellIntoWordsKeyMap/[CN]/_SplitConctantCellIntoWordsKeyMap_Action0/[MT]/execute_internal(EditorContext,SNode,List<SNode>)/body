{
  SNode collection=SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9eaff2517L,"jetbrains.mps.lang.editor.structure.CellModel_Collection")),null);
  SNodeFactoryOperations.setNewChild(collection,MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9eaff2517L,0x10192e0d3baL,"cellLayout"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10192de4f16L,"jetbrains.mps.lang.editor.structure.CellLayout_Flow")));
  SNodeOperations.replaceWithAnother(node,collection);
  String text=SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9eb01232eL,0xf9eb01232fL,"text"));
  String[] strings=text.split(" ");
  for (  String word : strings) {
    SNode constantCell=SNodeOperations.copyNode(node);
    SPropertyOperations.set(constantCell,MetaAdapterFactory.getProperty(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9eb01232eL,0xf9eb01232fL,"text"),word);
    ListSequence.fromList(SLinkOperations.getChildren(collection,MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9eaff2517L,0xf9eaff2518L,"childCellModel"))).addElement(constantCell);
  }
}
