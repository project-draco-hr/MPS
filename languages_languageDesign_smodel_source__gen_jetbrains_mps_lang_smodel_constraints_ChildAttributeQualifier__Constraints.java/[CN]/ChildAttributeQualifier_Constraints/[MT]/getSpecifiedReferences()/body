{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x9d98713f24a0e5bL,0x9d98713f24a0e5dL,"attributeConcept"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x9d98713f24a0e5bL,0x9d98713f24a0e5dL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          try {
            String role=AttributeDesignTimeOperations.getAttributeRole(_context.getParameterNode());
            if (role != null) {
              return role;
            }
          }
 catch (          Exception ex) {
          }
          return SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return AttributeDesignTimeOperations.getApplicableAttributes(SNodeOperations.as(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x58ea5217b045a3b2L,"jetbrains.mps.lang.smodel.structure.AttributeAccess")),SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","709746936026466394"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_gfut80_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
