{
  super(project,project.getBaseDir());
  myProject=project;
  MPSProjectHolder mpsProjectHolder=project.getComponent(MPSProjectHolder.class);
  List<ModuleTreeNode> moduleNodes=new LinkedList<ModuleTreeNode>();
  if (mpsProjectHolder != null) {
    List<IModule> modules=mpsProjectHolder.getMPSProject().getModules();
    for (    IModule m : modules) {
      moduleNodes.add(new ModuleTreeNode(project,m));
    }
  }
  Collections.sort(moduleNodes,new Comparator<ModuleTreeNode>(){
    public int compare(    ModuleTreeNode node1,    ModuleTreeNode node2){
      IModule module1=node1.getModule();
      IModule module2=node2.getModule();
      if (module1.getClass().getName().equals(module2.getClass().getName())) {
        return node1.getText().compareTo(node2.getText());
      }
 else       if (module1 instanceof Solution) {
        return -1;
      }
 else       if (module2 instanceof Solution) {
        return 1;
      }
 else       if (module1 instanceof Language) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  MyNamespaceTreeBuilder builder=new MyNamespaceTreeBuilder();
  for (  ModuleTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(this);
  VirtualFile baseDir=project.getBaseDir();
  if (baseDir != null) {
    VirtualFile[] files=baseDir.getChildren();
    for (    VirtualFile f : files) {
      if (!f.isDirectory()) {
        add(new FileTreeNode(project,f));
      }
    }
  }
  updatePresentation();
}
