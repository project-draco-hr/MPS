{
  JPanel panel=new JPanel(new GridLayoutManager(2,1));
  List<ModelRootManager> managers=ManagerTableCellEditor.getManagers(null);
  managers.remove(null);
  final ModelRootManager empty=new ModelRootManager("","Default");
  managers.add(empty);
  myComboBox=new ComboBox(managers.toArray(),10);
  myComboBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean selected,    boolean focus){
      ModelRootManager manager=((ModelRootManager)value);
      String managerName=NameUtil.shortNameFromLongName(manager.getClassName());
      return super.getListCellRendererComponent(list,managerName,index,selected,focus);
    }
  }
);
  panel.add(myComboBox,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  myComboBox.setSelectedItem(myModelRoot.getModelRoot().getManager() == null ? empty : myModelRoot.getModelRoot().getManager());
  myComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        ModelRootManager manager=(ModelRootManager)e.getItem();
        SModelRootEntry.this.getModelRoot().getModelRoot().setManager(manager.equals(empty) ? null : manager);
        SModelRootEntry.this.reset();
      }
    }
  }
);
  myTreePanel=new JPanel(new BorderLayout());
  updateTree();
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTreePanel);
  panel.add(scrollPane,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null));
  myEditorComponent=panel;
}
