{
  SNode rwps=node;
  SNode feature=SLinkOperations.getTarget(SLinkOperations.getTarget(rwps,"writePath",true),"usedFeature",false);
  SNode protoRange=SLinkOperations.getTarget(node,"range",true);
  SNode removeRange=SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange",protoRange);
  SPropertyOperations.set(removeRange,"has_start","" + (SPropertyOperations.getBoolean(protoRange,"has_start")));
  SPropertyOperations.set(removeRange,"has_end","" + (SPropertyOperations.getBoolean(protoRange,"has_end")));
  SPropertyOperations.set(removeRange,"includes_start","" + (SPropertyOperations.getBoolean(protoRange,"includes_start")));
  SPropertyOperations.set(removeRange,"includes_end","" + (SPropertyOperations.getBoolean(protoRange,"includes_end")));
  if (SPropertyOperations.getBoolean(removeRange,"has_start")) {
    SLinkOperations.setNewChild(removeRange,"notBefore","jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
    SPropertyOperations.set(SLinkOperations.getTarget(removeRange,"notBefore",true),"name","notBefore");
  }
  if (SPropertyOperations.getBoolean(removeRange,"has_end")) {
    SLinkOperations.setNewChild(removeRange,"notAfter","jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
    SPropertyOperations.set(SLinkOperations.getTarget(removeRange,"notAfter",true),"name","notAfter");
  }
  SNode rs=IGenericFeature_Behavior.call_removeStatement_1195432050864(feature,SLinkOperations.getTarget(SLinkOperations.getTarget(rwps,"writePath",true),"expression",true),SLinkOperations.getTarget(SLinkOperations.getTarget(rwps,"writePath",true),"paramObject",true),removeRange);
  return CloneUtil.cloneNotPreservingId(rs,generator.getTargetModel(),generator.getScope());
}
