{
  List<Tuples._2<String,Integer>> result=ListSequence.fromList(new ArrayList<Tuples._2<String,Integer>>());
  Iterable<? extends SModule> modules=context.getProject().getModulesWithGenerators();
  Iterable<SModel> models=Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
);
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Modules",Sequence.fromIterable(modules).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Non-packaged modules",Sequence.fromIterable(modules).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return it.isPackaged();
    }
  }
).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Models",Sequence.fromIterable(models).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Editable models",Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return !(it.isReadOnly());
    }
  }
).count()));
  return result;
}
