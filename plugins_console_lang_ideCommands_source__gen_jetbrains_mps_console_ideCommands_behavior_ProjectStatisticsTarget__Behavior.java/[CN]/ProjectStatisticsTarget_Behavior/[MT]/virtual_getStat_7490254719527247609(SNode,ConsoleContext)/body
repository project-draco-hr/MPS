{
  List<Tuples._2<String,Integer>> result=ListSequence.fromList(new ArrayList<Tuples._2<String,Integer>>());
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Modules",IterableUtil.asCollection(context.getProject().getModules()).size()));
  Collection<SModule> asCollection=IterableUtil.asCollection(context.getProject().getModules());
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Non-packaged modules",CollectionSequence.fromCollection(asCollection).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return !(((SModule)it).isPackaged());
    }
  }
).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Models",CollectionSequence.fromCollection(asCollection).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).count()));
  ListSequence.fromList(result).addElement(MultiTuple.<String,Integer>from("Editable models",CollectionSequence.fromCollection(asCollection).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return !(it.isReadOnly());
    }
  }
).count()));
  return result;
}
