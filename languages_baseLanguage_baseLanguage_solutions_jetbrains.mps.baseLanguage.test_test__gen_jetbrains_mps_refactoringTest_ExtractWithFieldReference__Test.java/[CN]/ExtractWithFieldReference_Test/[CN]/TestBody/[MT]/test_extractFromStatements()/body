{
  this.addNodeById("7475692990584612120");
  this.addNodeById("7475692990584612155");
  this.addNodeById("7475692990584676993");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7475692990584612129"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242864l,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"))));
  params.setName("bar");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7475692990584612121"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7475692990584612156"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
