{
  ArrayList<SNode> all=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(start); it.hasNext(); ) {
    SNode n=it.next();
    all.add(n);
  }
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","F","G","H","I","J"),names(all));
  ArrayList<SNode> withoutNode2=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(start); it.hasNext(); ) {
    SNode n=it.next();
    if (n == child2) {
      it.skipChildren();
      continue;
    }
    withoutNode2.add(n);
  }
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","I","J"),names(withoutNode2));
  ArrayList<SNode> withoutLastNode=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(start); it.hasNext(); ) {
    SNode n=it.next();
    if (n == lastNode) {
      it.skipChildren();
      continue;
    }
    withoutLastNode.add(n);
  }
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","F","G","H","I"),names(withoutLastNode));
  ArrayList<SNode> singleElement=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(newNode("W")); it.hasNext(); ) {
    SNode n=it.next();
    singleElement.add(n);
  }
  Assert.assertEquals(Arrays.asList("W"),names(singleElement));
  ArrayList<SNode> dropRoot=new ArrayList<SNode>();
  final SNode root=newNode("W");
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(root); it.hasNext(); ) {
    SNode n=it.next();
    if (n == root) {
      it.skipChildren();
      continue;
    }
    dropRoot.add(n);
  }
  Assert.assertTrue(dropRoot.isEmpty());
}
