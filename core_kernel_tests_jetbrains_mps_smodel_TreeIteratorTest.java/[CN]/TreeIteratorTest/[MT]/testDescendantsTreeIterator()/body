{
  ArrayList<SNode> all=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(start); it.hasNext(); ) {
    SNode n=it.next();
    all.add(n);
  }
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","F","G","H","I","J"),names(all));
  List<SNode> withoutNode2=iterateTree(start,child2);
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","I","J"),names(withoutNode2));
  List<SNode> withoutLeafE=iterateTree(start,leafE);
  Assert.assertEquals(Arrays.asList("A","B","C","D","F","G","H","I","J"),names(withoutLeafE));
  List<SNode> withoutLeafD=iterateTree(start,leafD);
  Assert.assertEquals(Arrays.asList("A","B","C","E","F","G","H","I","J"),names(withoutLeafD));
  List<SNode> withoutLastNode=iterateTree(start,lastNode);
  Assert.assertEquals(Arrays.asList("A","B","C","D","E","F","G","H","I"),names(withoutLastNode));
  ArrayList<SNode> singleElement=new ArrayList<SNode>();
  for (DescendantsTreeIterator it=new DescendantsTreeIterator(newNode("W")); it.hasNext(); ) {
    SNode n=it.next();
    singleElement.add(n);
  }
  Assert.assertEquals(Arrays.asList("W"),names(singleElement));
  Assert.assertTrue(iterateTree(start,start).isEmpty());
  final SNode root=newNode("W");
  List<SNode> dropRoot=iterateTree(root,root);
  Assert.assertTrue(dropRoot.isEmpty());
}
