{
  final String scrName=((cleanMake ? "Rebuild" : "Make"));
  final WorkbenchMakeService.MessageHandler mh=new WorkbenchMakeService.MessageHandler("Make");
  mh.clear();
  if (Sequence.fromIterable(inputRes).isEmpty()) {
    if (cleanMake) {
      String msg=scrName + " aborted: nothing to do";
      this.showError(mh,msg);
      this.displayInfo(msg);
      return new IResult.FAILURE(null);
    }
 else {
      this.displayInfo("Everything up to date");
      return new IResult.SUCCESS(null);
    }
  }
  if (!(script.isValid())) {
    String msg=scrName + " failed";
    showError(mh,msg + ". Invalid script.");
    this.displayInfo(msg);
    return new IResult.FAILURE(null);
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput=new Wrappers._T<Iterable<? extends Iterable<IResource>>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      clInput.value=new ModulesClusterizer().clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource,IResource>(){
        public IResource select(        IResource r){
          return (IResource)r;
        }
      }
));
    }
  }
);
  final IScriptController ctl=this.completeController(scrName,mh,controller);
  final Wrappers._T<IResult> res=new Wrappers._T<IResult>();
  doExecute(new Runnable(){
    public void run(){
      ThreadUtils.runInUIThreadAndWait(new Runnable(){
        public void run(){
          IdeEventQueue.getInstance().flushQueue();
          ProgressManager.getInstance().run(new Task.Backgroundable(context.getProject(),scrName,true){
            public void run(            @NotNull ProgressIndicator ignore){
              progInd=ProgressManager.getInstance().getProgressIndicator();
              for (              Iterable<IResource> cl : clInput.value) {
                res.value=script.execute(ctl,cl);
                if (!(res.value.isSucessful()) || progInd.isCanceled()) {
                  break;
                }
              }
            }
            @Override public void onSuccess(){
              reconcile();
            }
            @Override public void onCancel(){
              reconcile();
            }
            private void reconcile(){
              if (res.value == null) {
                String msg=scrName + " aborted";
                WorkbenchMakeService.this.displayInfo(msg);
              }
 else               if (!(res.value.isSucessful())) {
                String msg=scrName + " failed";
                showError(mh,msg + ". See previous messages for details.");
                WorkbenchMakeService.this.displayInfo(msg);
              }
 else {
                String msg=scrName + " successful";
                WorkbenchMakeService.this.displayInfo(msg);
              }
            }
          }
);
        }
      }
);
    }
  }
);
  return null;
}
