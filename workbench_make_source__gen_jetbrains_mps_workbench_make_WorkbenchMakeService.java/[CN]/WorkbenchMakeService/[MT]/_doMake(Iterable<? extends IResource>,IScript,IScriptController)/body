{
  String scrName=((this.getSession().isCleanMake() ? "Rebuild" : "Make"));
  IMessageHandler mh=this.getSession().getMessageHandler();
  if (mh == null) {
    mh=new WorkbenchMakeService.MessageHandler("Make",this.getSession().getContext());
  }
  mh.clear();
  if (Sequence.fromIterable(inputRes).isEmpty()) {
    if (this.getSession().isCleanMake()) {
      String msg=scrName + " aborted: nothing to do";
      this.showError(mh,msg);
      this.displayInfo(msg);
      return new FutureValue(new IResult.FAILURE(null));
    }
 else {
      this.displayInfo("Everything up to date");
      return new FutureValue(new IResult.SUCCESS(null));
    }
  }
  if (!(script.isValid())) {
    String msg=scrName + " failed";
    showError(mh,msg + ". Invalid script.");
    this.displayInfo(msg);
    return new FutureValue(new IResult.FAILURE(null));
  }
  final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput=new Wrappers._T<Iterable<? extends Iterable<IResource>>>();
  final Wrappers._T<Iterable<Iterable<String>>> usedLangs=new Wrappers._T<Iterable<Iterable<String>>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final ModulesClusterizer mcr=new ModulesClusterizer();
      clInput.value=mcr.clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource,IResource>(){
        public IResource select(        IResource r){
          return (IResource)r;
        }
      }
));
      usedLangs.value=Sequence.fromIterable(clInput.value).<Iterable<String>>select(new ISelector<Iterable<IResource>,Iterable<String>>(){
        public Iterable<String> select(        Iterable<IResource> it){
          return mcr.allUsedLangNamespaces(it);
        }
      }
).toListSequence();
      System.out.println("*** used langs by cluster");
      Sequence.fromIterable(usedLangs.value).visitAll(new IVisitor<Iterable<String>>(){
        public void visit(        Iterable<String> it){
          System.out.println("   " + it);
        }
      }
);
    }
  }
);
  IScriptController ctl=this.completeController(mh,controller);
  Iterable<IScript> scripts=Sequence.fromIterable(usedLangs.value).<IScript>select(new ISelector<Iterable<String>,IScript>(){
    public IScript select(    Iterable<String> langs){
      final ScriptBuilder scb=new ScriptBuilder();
      Sequence.fromIterable(langs).visitAll(new IVisitor<String>(){
        public void visit(        String ns){
          LanguageRuntime lr=LanguageRegistry.getInstance().getLanguage(ns);
          Iterable<IFacet> fcts=lr.getFacetProvider().getDescriptor(null).getManifest().facets();
          scb.withFacets(fcts);
        }
      }
);
      IScript scr=scb.withFinalTarget(new ITarget.Name("make")).toScript();
      System.out.println("*** script valid=" + scr.isValid());
      return script;
    }
  }
).toListSequence();
  final WorkbenchMakeService.MakeTask task=new WorkbenchMakeService.MakeTask(this.getSession().getContext().getProject(),scrName,scripts,scrName,clInput.value,ctl,mh,PerformInBackgroundOption.DEAF){
    @Override protected void done(){
      if (!(currentSessionStickyMark.isMarked())) {
        currentSessionStickyMark.set(null,false);
      }
    }
  }
;
  this.getSession().doExecute(new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          IdeEventQueue.getInstance().flushQueue();
          ProgressManager.getInstance().run(task);
          IdeEventQueue.getInstance().flushQueue();
        }
      }
);
    }
  }
);
  this.currentProcess=task;
  return task;
}
