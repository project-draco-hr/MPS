{
  final Wrappers._T<IConfigMonitor> cmon2delegate=new Wrappers._T<IConfigMonitor>(null);
  final IConfigMonitor cmon=new IConfigMonitor.Stub(){
    public <T extends IOption>T relayQuery(    IQuery<T> query){
      T opt=null;
      if (cmon2delegate.value != null) {
        opt=cmon2delegate.value.relayQuery(query);
      }
      return (opt != null ? opt : new UIQueryRelayStrategy().relayQuery(query,WorkbenchMakeService.this.context));
    }
  }
;
  final ProgressIndicatorProgressStrategy progStrat=new ProgressIndicatorProgressStrategy();
  final IJobMonitor jmon=new IJobMonitor(){
    public boolean stopRequested(){
      return (progStrat.getProgressIndicator() != null ? progStrat.getProgressIndicator().isCanceled() : false);
    }
    public IProgress currentProgress(){
      return progStrat.currentProgress();
    }
    public void reportFeedback(    IFeedback fdbk){
      new UIFeedbackStrategy(mh).reportFeedback(fdbk);
    }
  }
;
  final Wrappers._T<ProgressIndicator> pind=new Wrappers._T<ProgressIndicator>(null);
  return new IScriptController(){
    public void runConfigWithMonitor(    final _FunctionTypes._void_P1_E0<? super IConfigMonitor> code){
      if (ctl != null) {
        ctl.runConfigWithMonitor(new _FunctionTypes._void_P1_E0<IConfigMonitor>(){
          public void invoke(          IConfigMonitor c){
            try {
              cmon2delegate.value=c;
              code.invoke(cmon);
            }
  finally {
              cmon2delegate.value=null;
            }
          }
        }
);
      }
 else {
        code.invoke(cmon);
      }
    }
    public void runJobWithMonitor(    final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
      IdeEventQueue.getInstance().flushQueue();
      ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
        public void run(        ProgressIndicator realInd){
          progStrat.setProgressIndicator(realInd);
          pind.value=new JobMonitorProgressIndicator(jmon);
          code.invoke(jmon);
        }
      }
,scrName,true,WorkbenchMakeService.this.context.getProject());
    }
    public void setup(    IParametersPool pool){
      Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>> vars=(Tuples._4<Project,IOperationContext,Boolean,_FunctionTypes._return_P0_E0<? extends ProgressIndicator>>)pool.parameters(new ITarget.Name("checkParameters"),Object.class);
      if (vars != null) {
        vars._0(WorkbenchMakeService.this.context.getProject());
        vars._1(WorkbenchMakeService.this.context);
        vars._2(WorkbenchMakeService.this.cleanMake);
        vars._3(new _FunctionTypes._return_P0_E0<ProgressIndicator>(){
          public ProgressIndicator invoke(){
            return pind.value;
          }
        }
);
      }
      Tuples._2<_FunctionTypes._return_P1_E0<? extends IFile,? super String>,Boolean> tparams=(Tuples._2<_FunctionTypes._return_P1_E0<? extends IFile,? super String>,Boolean>)pool.parameters(new ITarget.Name("textGen"),Object.class);
      if (tparams != null) {
        tparams._1(GenerationSettings.getInstance().isFailOnMissingTextGen());
      }
      if (ctl != null) {
        ctl.setup(pool);
      }
    }
  }
;
}
