{
  if (myState.compareAndSet(WorkbenchMakeService.TaskState.NOT_STARTED,WorkbenchMakeService.TaskState.RUNNING)) {
    pi.pushState();
    pi.setFraction(0.0);
    final int clsize=Sequence.fromIterable(this.myClInput).count();
    if (clsize == 0) {
      return;
    }
    final double clfrac=(1.0 / clsize);
    final int[] idx=new int[]{0};
    progInd=new ProgressIndicatorDelegate(pi){
      @Override public void setFraction(      double d){
        getDelegate().setFraction((idx[0] + d) * clfrac);
      }
      @Override public void setText2(      String string){
      }
    }
;
    for (    Iterable<IResource> cl : this.myClInput) {
      pi.setText2((idx[0] + 1) + "/" + clsize+ " "+ IterableUtils.join(Sequence.fromIterable(cl).<String>select(new ISelector<IResource,String>(){
        public String select(        IResource r){
          return ((IResource)r).describe();
        }
      }
),","));
      this.myResult=this.myScript.execute(this.myController,cl);
      if (!(this.myResult.isSucessful()) || progInd.isCanceled()) {
        break;
      }
      idx[0]++;
    }
    pi.popState();
    this.myState.set(WorkbenchMakeService.TaskState.INDETERMINATE);
  }
}
