{
  if (myState.compareAndSet(WorkbenchMakeService.TaskState.NOT_STARTED,WorkbenchMakeService.TaskState.RUNNING)) {
    notifyListeners(new MakeNotification(WorkbenchMakeService.this,MakeNotification.Kind.SCRIPT_ABOUT_TO_START));
    pi.pushState();
    final int clsize=Sequence.fromIterable(this.myClInput).count();
    if (clsize == 0) {
      return;
    }
    final double clfrac=(1.0 / clsize);
    final int[] idx=new int[]{0};
    progInd=new ProgressIndicatorDelegate(pi){
      @Override public void setFraction(      double d){
        getDelegate().setFraction((idx[0] + d) * clfrac);
      }
      @Override public void setText2(      String string){
      }
    }
;
    Iterator<IScript> scit=Sequence.fromIterable(myScripts).iterator();
    Iterator<? extends Iterable<IResource>> clit=Sequence.fromIterable(myClInput).iterator();
    while (scit.hasNext() && clit.hasNext()) {
      Iterable<IResource> cl=clit.next();
      IScript scr=scit.next();
      if (!(scr.isValid())) {
        String msg=myScrName + " failed";
        showError(myMessageHandler,msg + ". Invalid script.");
        WorkbenchMakeService.this.displayInfo(msg);
        this.myResult=new IResult.FAILURE(null);
        break;
      }
      pi.setText2((idx[0] + 1) + "/" + clsize+ " "+ IterableUtils.join(Sequence.fromIterable(cl).<String>select(new ISelector<IResource,String>(){
        public String select(        IResource r){
          return ((IResource)r).describe();
        }
      }
),","));
      this.myResult=scr.execute(this.myController,cl);
      if (!(this.myResult.isSucessful()) || progInd.isCanceled()) {
        break;
      }
      idx[0]++;
    }
    pi.popState();
    this.myState.set(WorkbenchMakeService.TaskState.INDETERMINATE);
  }
}
