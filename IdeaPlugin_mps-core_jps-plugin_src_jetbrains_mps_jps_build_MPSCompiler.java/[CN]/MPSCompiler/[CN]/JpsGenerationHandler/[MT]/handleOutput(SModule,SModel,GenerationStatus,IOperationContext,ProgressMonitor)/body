{
  monitor.start("generating files",1);
  try {
    info("handling output...");
    JpsSolutionIdea solution=(JpsSolutionIdea)module;
    JpsModule jpsModule=solution.getModule();
    IFile targetDir=FileSystem.getInstance().getFileByPath(SModuleOperations.getOutputPathFor(inputModel));
    IFile cachesDir=FileGenerationUtil.getCachesDir(targetDir);
    long startJobTime=System.currentTimeMillis();
    if (status.isOk()) {
      JavaStreamHandler javaSourcesLocation=new JavaStreamHandler(inputModel,targetDir,myProcessor);
      JavaStreamHandler cachesLocation=new JavaStreamHandler(inputModel,cachesDir,myProcessor);
      TextFacility tf=new TextFacility(status);
      tf.failNoTextGen(false).generateDebug(true).generateBaseLangDeps(true);
      tf.produceTextModel();
      tf.serializeOutcome(javaSourcesLocation);
      CacheGenLayout cgl=new CacheGenLayout();
      cgl.register(cachesLocation,BLDependenciesCache.getInstance().getGenerator());
      cgl.register(cachesLocation,GenerationDependenciesCache.getInstance().getGenerator());
      cgl.register(javaSourcesLocation,TraceInfoCache.getInstance().getGenerator());
      tf.serializeCaches(cgl);
      myContext.getCompileContext().processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,BuildMessage.Kind.INFO,"saving " + inputModel.getModelName() + " into "+ targetDir.getPath()));
      if (!tf.getErrors().isEmpty()) {
        info("there were errors.");
        return false;
      }
    }
    if (myLogger.needsInfo()) {
      myLogger.info("output generated in " + (System.currentTimeMillis() - startJobTime) + " ms");
    }
    return true;
  }
  finally {
    monitor.done();
  }
}
