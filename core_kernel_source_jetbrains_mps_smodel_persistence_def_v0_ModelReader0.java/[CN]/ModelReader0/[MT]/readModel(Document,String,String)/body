{
  Element rootElement=document.getRootElement();
  VisibleModelElements visibleModelElements=new VisibleModelElements(rootElement);
  String modelLongName=rootElement.getAttributeValue(ModelPersistence.NAME);
  if (modelLongName == null) {
    String modelNamespace=rootElement.getAttributeValue(ModelPersistence.NAMESPACE,"");
    modelLongName=NameUtil.longNameFromNamespaceAndShortName(modelNamespace,modelShortName);
  }
 else {
  }
  SModelUID modelUID=new SModelUID(modelLongName,stereotype);
  SModel model=new SModel(modelUID);
  model.setLoading(true);
  try {
    Element maxImportIndex=rootElement.getChild(ModelPersistence.MAX_IMPORT_INDEX);
    if (maxImportIndex == null)     maxImportIndex=rootElement.getChild("maxReferenceID");
    model.setMaxImportIndex(DocUtil.readIntAttributeValue(maxImportIndex,ModelPersistence.VALUE));
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  List languages=rootElement.getChildren(ModelPersistence.LANGUAGE);
  for (  Object language : languages) {
    Element element=(Element)language;
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addLanguage(languageNamespace);
    List<Element> aspectElements=element.getChildren(ModelPersistence.LANGUAGE_ASPECT);
    readLanguageAspects(model,aspectElements);
  }
  List<Element> aspectElements=rootElement.getChildren(ModelPersistence.LANGUAGE_ASPECT);
  readLanguageAspects(model,aspectElements);
  List languagesEOG=rootElement.getChildren(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);
  for (  Object languageEOG : languagesEOG) {
    Element element=(Element)languageEOG;
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addEngagedOnGenerationLanguage(languageNamespace);
  }
  List devkits=rootElement.getChildren(ModelPersistence.DEVKIT);
  for (  Object devkit : devkits) {
    Element element=(Element)devkit;
    String devkitNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addDevKit(devkitNamespace);
  }
  List imports=rootElement.getChildren(ModelPersistence.IMPORT_ELEMENT);
  for (  Object anImport : imports) {
    Element element=(Element)anImport;
    String indexValue=element.getAttributeValue(ModelPersistence.MODEL_IMPORT_INDEX,element.getAttributeValue("referenceID"));
    int importIndex=Integer.parseInt(indexValue);
    String usedModelVersionString=element.getAttributeValue(ModelPersistence.VERSION);
    int usedModelVersion=-1;
    try {
      if (usedModelVersionString != null) {
        usedModelVersion=Integer.parseInt(usedModelVersionString);
      }
    }
 catch (    Throwable t) {
      LOG.error(t);
    }
    String importedModelUIDString=element.getAttributeValue(ModelPersistence.MODEL_UID);
    if (importedModelUIDString == null) {
      String importedModelFQName=NameUtil.longNameFromNamespaceAndShortName(element.getAttributeValue(ModelPersistence.NAMESPACE),element.getAttributeValue(ModelPersistence.NAME));
      String importedModelStereotype=element.getAttributeValue(ModelPersistence.STEREOTYPE,"");
      importedModelUIDString=new SModelUID(importedModelFQName,importedModelStereotype).toString();
    }
    if (importedModelUIDString == null) {
      LOG.error("Error loading import element for index " + importIndex + " in "+ model.getUID());
      continue;
    }
    if (importIndex > model.getMaxImportIndex()) {
      LOG.warning("Import element " + importIndex + ":"+ importedModelUIDString+ " greater then max import index ("+ model.getMaxImportIndex()+ ") in "+ model.getUID());
      model.setMaxImportIndex(importIndex);
    }
    SModelUID importedModelUID=SModelUID.fromString(importedModelUIDString);
    model.addImportElement(importedModelUID,importIndex,usedModelVersion);
  }
  ArrayList<ReferencePersister0> referenceDescriptors=new ArrayList<ReferencePersister0>();
  Element logElement=rootElement.getChild(ModelPersistence.REFACTORING_LOG);
  if (logElement != null) {
    SNode log=readNode(logElement,model,referenceDescriptors,false);
    if (log != null) {
      model.setLog(log);
    }
  }
  List children=rootElement.getChildren(ModelPersistence.NODE);
  for (  Object child : children) {
    Element element=(Element)child;
    SNode snode=readNode(element,model,referenceDescriptors,false);
    if (snode != null) {
      model.addRoot(snode);
    }
  }
  for (  ReferencePersister0 referencePersister : referenceDescriptors) {
    referencePersister.createReferenceInModel(model,visibleModelElements);
  }
  model.setLoading(false);
  return model;
}
