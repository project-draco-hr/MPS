{
  super("Refactoring",ID);
  this.setIsInternal(false);
  this.setPopup(true);
  try {
    outer:     for (    IRefactoring refactoring : ListSequence.fromList(RefactoringUtil.getAllRefactorings())) {
      if (refactoring instanceof OldRefactoringAdapter) {
        List<String> old=ListSequence.fromListAndArray(new ArrayList<String>(),"jetbrains.mps.lang.core.scripts.Rename","jetbrains.mps.lang.structure.scripts.RenameConcept","jetbrains.mps.lang.structure.scripts.RenameLink","jetbrains.mps.lang.structure.scripts.RenameProperty","jetbrains.mps.lang.core.scripts.MoveNodes","jetbrains.mps.lang.structure.scripts.MoveConcepts","jetbrains.mps.lang.structure.scripts.MoveLinkUp","jetbrains.mps.lang.structure.scripts.MovePropertyUp");
        for (        String name : ListSequence.fromList(old)) {
          if (((OldRefactoringAdapter)refactoring).getRefactoringClassName().equals(name)) {
            continue outer;
          }
        }
      }
      if (refactoring.getRefactoringTarget().getTarget() == IRefactoringTarget.TargetType.NODE) {
        NodeRefactoring_ActionGroup.this.add(RefactoringHelper.getActionForRefactoring(refactoring));
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("User group error",t);
  }
}
