{
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  final IRefactoring refactoring=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration") ? new RenameConcept() : (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.PropertyDeclaration") ? new RenameProperty() : (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.LinkDeclaration") ? new RenameLink() : null)));
  if (refactoring == null) {
    return;
  }
  final RefactoringContext refactoringContext=new RefactoringContext(refactoring);
  refactoringContext.setCurrentOperationContext(context);
  refactoringContext.setSelectedNode(node);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      refactoringContext.setSelectedModel(SNodeOperations.getModel(node).getModelDescriptor());
    }
  }
);
  refactoringContext.setSelectedModule(context.getModule());
  refactoringContext.setSelectedProject(context.getIdeaProject());
  refactoringContext.setParameter("myNewName",newName);
  new Thread(){
    public void run(){
      new RefactoringFacade().execute(refactoring,refactoringContext);
    }
  }
.start();
}
