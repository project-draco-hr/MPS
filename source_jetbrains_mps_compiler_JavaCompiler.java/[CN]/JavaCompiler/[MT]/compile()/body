{
  org.eclipse.jdt.internal.compiler.Compiler c=new Compiler(new INameEnvironment(){
    public NameEnvironmentAnswer findType(    char[][] compoundTypeName){
      StringBuilder fqName=new StringBuilder();
      for (int i=0; i < compoundTypeName.length; i++) {
        char[] part=compoundTypeName[i];
        fqName.append(new String(part));
        if (i != compoundTypeName.length - 1) {
          fqName.append(".");
        }
      }
      return findType(fqName.toString());
    }
    public NameEnvironmentAnswer findType(    char[] typeName,    char[][] packageName){
      StringBuilder fqName=new StringBuilder();
      for (      char[] packName : packageName) {
        fqName.append(new String(packName)).append(".");
      }
      fqName.append(typeName);
      return findType(fqName.toString());
    }
    public boolean isPackage(    char[][] parentPackageName,    char[] packageName){
      return true;
    }
    public void cleanup(){
    }
    private NameEnvironmentAnswer findType(    String fqName){
      try {
        byte[] aClass=myClassPathItem.getClass(fqName);
        if (aClass == null)         return null;
        return new NameEnvironmentAnswer(new ClassFileReader(aClass,fqName.toCharArray()),null);
      }
 catch (      ClassFormatException e) {
        System.out.println("error in " + fqName);
        return null;
      }
    }
  }
,new IErrorHandlingPolicy(){
    public boolean proceedOnErrors(){
      return true;
    }
    public boolean stopOnFirstError(){
      return false;
    }
  }
,new CompilerOptions(),new ICompilerRequestor(){
    public void acceptResult(    CompilationResult result){
      for (      ClassFile file : result.getClassFiles()) {
        String name="";
        for (int i=0; i < file.getCompoundName().length; i++) {
          name+=new String(file.getCompoundName()[i]);
          if (i != file.getCompoundName().length - 1) {
            name+=".";
          }
        }
        myClassLoader.put(name,file.getBytes());
      }
    }
  }
,new DefaultProblemFactory(),new PrintWriter(System.out));
  c.compile(myCompilationUnits.toArray(new CompilationUnit[0]));
}
