{
  List<ReferenceType> classes=getVM().classesByName(className);
  if (classes.size() == 0) {
    LOG.error("could not find class " + className);
    return null;
  }
  ClassType referenceType=(ClassType)classes.get(0);
  List<Method> methods=referenceType.methodsByName("<init>",jniSignature);
  if (methods.size() == 0) {
    LOG.error("could not find constructor " + " with signature " + jniSignature + " in "+ className);
    return null;
  }
  Method constructor=null;
  for (  Method m : methods) {
    if (m.isConstructor()) {
      constructor=m;
      break;
    }
  }
  if (constructor == null) {
    LOG.error("could not find constructor " + " with signature " + jniSignature + " in "+ className);
    return null;
  }
  List<Value> argValues=MirrorUtil.getValues(getThreadReference(),args);
  Value result;
  try {
    result=referenceType.newInstance(getThreadReference(),constructor,argValues,0);
  }
 catch (  Throwable t) {
    LOG.error("method invocation failed",t);
    return null;
  }
  return MirrorUtil.getValueProxy(result,getThreadReference());
}
