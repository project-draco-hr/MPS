{
  final SNode classNode=(!(SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.EnumClass")) ? SNodeFactoryOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.EnumClass") : SNodeFactoryOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  SPropertyOperations.set(classNode,"name",SPropertyOperations.getString(node,"name"));
  ListSequence.fromList(SLinkOperations.getTargets(classNode,"typeVariableDeclaration",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"typeVariableDeclaration",true)));
  SPropertyOperations.set(classNode,"nestedName",SPropertyOperations.getString(node,"nestedName"));
  SPropertyOperations.set(classNode,"isDeprecated","" + (SPropertyOperations.getBoolean(node,"isDeprecated")));
  SPropertyOperations.set(classNode,"nonStatic","" + (SPropertyOperations.getBoolean(node,"nonStatic")));
  SPropertyOperations.set(classNode,"abstractClass","" + (SPropertyOperations.getBoolean(node,"abstractClass")));
  SPropertyOperations.set(classNode,"isStatic","" + (SPropertyOperations.getBoolean(node,"isStatic")));
  SPropertyOperations.set(classNode,"isFinal","" + (SPropertyOperations.getBoolean(node,"isFinal")));
  SLinkOperations.setTarget(classNode,"visibility",SLinkOperations.getTarget(node,"visibility",true),true);
  SPropertyOperations.set(classNode,"resolveInfo",SPropertyOperations.getString(node,"resolveInfo"));
  ListSequence.fromList(SLinkOperations.getTargets(classNode,"implementedInterface",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)));
  ListSequence.fromList(SLinkOperations.getTargets(classNode,"annotation",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"annotation",true)));
  ListSequence.fromList(SLinkOperations.getTargets(classNode,"member",true)).addSequence(Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(node)));
  ListSequence.fromList(SNodeOperations.getDescendants(classNode,"jetbrains.mps.baseLanguage.structure.SuperMethodCall",false,new String[]{})).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      final SNode superMethodCall=it;
      SNode foundNewSuperMethod=Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),classNode,"virtual_getSuperclass_1240936569950",new Object[]{}))).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false));
        }
      }
);
      if ((foundNewSuperMethod != null)) {
        SLinkOperations.setTarget(superMethodCall,"baseMethodDeclaration",foundNewSuperMethod,false);
      }
    }
  }
);
  ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node),"jetbrains.mps.baseLanguage.structure.StaticMethodCall")).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return eq_ck6aau_a0a0a0a0a0a71a2o(SLinkOperations.getTarget(it,"classConcept",false),node);
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SLinkOperations.setTarget(it,"classConcept",classNode,false);
    }
  }
);
  ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node),"jetbrains.mps.baseLanguage.structure.StaticFieldReference")).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return eq_ck6aau_a0a0a0a0a0a81a2o(SLinkOperations.getTarget(it,"classifier",false),node);
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SLinkOperations.setTarget(it,"classifier",classNode,false);
    }
  }
);
  editorContext.selectWRTFocusPolicy(classNode);
}
