{
  String classname=refText;
  int dotIndex=classname.lastIndexOf(".");
  if (dotIndex >= 0) {
    List<SNode> localClassifiers=getClassifiersByRefName(model,classname);
    if (ListSequence.fromList(localClassifiers).count() >= 1) {
      return ListSequence.fromList(localClassifiers).first();
    }
    if (classname.contains("$")) {
      String package_=classname.substring(0,dotIndex);
      classname=classname.substring(dotIndex + 1).replace('$','.');
      return resolveClass(package_,null,classname);
    }
 else {
      String[] parts=classname.split("\\.");
      for (int sizeOfClassifier=1; sizeOfClassifier <= parts.length; sizeOfClassifier++) {
        String packageName=IterableUtils.join(Sequence.fromIterable(Sequence.fromArray(parts)).take(parts.length - sizeOfClassifier),".");
        String className=IterableUtils.join(Sequence.fromIterable(Sequence.fromArray(parts)).skip(parts.length - sizeOfClassifier),".");
        SNode resolved=resolveClass(packageName,null,className);
        if (resolved != null) {
          return resolved;
        }
      }
    }
    String package_=classname.substring(0,dotIndex);
    classname=classname.substring(dotIndex + 1).replace('$','.');
    return resolveClass(package_,null,classname);
  }
  SModelReference targetModelReference=model.getSModelReference();
  if (targetModelReference.getSModelId() != null) {
    SModelDescriptor targetModel=scope.getModelDescriptor(targetModelReference);
    if (targetModel == null) {
      return null;
    }
    return ListSequence.fromList(getClassifiersByRefName(targetModel.getSModel(),classname)).first();
  }
  SModelFqName modelname=targetModelReference.getSModelFqName();
  return resolveClass(modelname.getLongName(),modelname.getStereotype(),classname);
}
