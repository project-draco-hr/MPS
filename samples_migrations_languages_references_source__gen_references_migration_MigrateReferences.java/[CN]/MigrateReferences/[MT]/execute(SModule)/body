{
{
    final GeneratedMatchingPattern pattern=new Pattern_9d9f5o1sz0ui(_quotation_createNode_w5820p_a0a0a5());
    Sequence.fromIterable(((Iterable<SModel>)m.getModels())).translate(new ITranslator2<SModel,SNode>(){
      public Iterable<SNode> translate(      SModel it){
        return SModelOperations.nodes(it,SNodeOperations.asSConcept(pattern.getConcept()));
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return pattern.match(it);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return !(isInTransformPattern(it));
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode n){
        return !(LanguageAspect.MIGRATION.is(SNodeOperations.getModel(n)));
      }
    }
).sort(new ISelector<SNode,Integer>(){
      public Integer select(      SNode it){
        return ListSequence.fromList(SNodeOperations.getNodeAncestors(it,null,false)).count();
      }
    }
,false).visitAll(new IVisitor<SNode>(){
      public void visit(      final SNode nodeToMigrate){
        pattern.match(nodeToMigrate);
        applyTransormMigration(nodeToMigrate,new Computable<SNode>(){
          public SNode compute(){
            return _quotation_createNode_w5820p_a0a0f(pattern.getMatchedNode("comp"));
          }
        }
,null);
      }
    }
);
  }
  return null;
}
