{
  JPanel controlPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  controlPanel.add(new JButton(new AbstractAction("Revert all"){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          Set<SNodeId> ids=collectRootIds();
          for (          Change change : new ArrayList<Change>(myMerger.getExcludedChanges())) {
            if (ids.contains(change.getAffectedNodeId())) {
              myMerger.includeChange(change);
            }
          }
          for (          Change change : new ArrayList<Change>(myMerger.getAppliedChanges())) {
            if (ids.contains(change.getAffectedNodeId())) {
              myMerger.getAppliedChanges().remove(change);
            }
          }
          rebuildChangeBlocks();
        }
      }
);
    }
  }
));
  controlPanel.add(new JButton(new AbstractAction("Apply all"){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          Set<SNodeId> ids=collectRootIds();
          ArrayList<Change> changes=new ArrayList<Change>();
          changes.addAll(myMerger.getBaseMineChange());
          changes.addAll(myMerger.getBaseRepoChange());
          changes.removeAll(myMerger.getExcludedChanges());
          for (          Conflict conflict : myMerger.getUnresolvedConflicts()) {
            changes.remove(conflict.getC1());
            changes.remove(conflict.getC2());
          }
          for (          Change change : changes) {
            if (ids.contains(change.getAffectedNodeId())) {
              myMerger.getAppliedChanges().add(change);
            }
          }
          rebuildChangeBlocks();
        }
      }
);
    }
  }
));
  return controlPanel;
}
