{
  myResultEditorComponent.removeAllChanges();
  myChange1EditorComponent.removeAllChanges();
  myChange2EditorComponent.removeAllChanges();
  myMerger.doRebuild(new Runnable(){
    public void run(){
    }
  }
);
  myResultModel=myMerger.getResultModel();
  final SNode[] resultNode=new SNode[1];
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      resultNode[0]=myResultModel.getRootByName(myRoot.getName());
    }
  }
);
  myResultEditorComponent.editNode(resultNode[0],myContext);
  List<Change> myneChange=new ArrayList<Change>(myMerger.getBaseMyneChange());
  myneChange.removeAll(myMerger.getApplyedChanges());
  myneChange.removeAll(myMerger.getExcludedChanges());
  myChange1EditorComponent.hightlight(myneChange,false,false);
  myChange1EditorComponent.makeChangeBlocks();
  myResultEditorComponent.hightlight(new ArrayList<Change>(myMerger.getUnresolvedChanges()),true,false);
  myResultEditorComponent.makeChangeBlocks();
  List<Change> repoChange=new ArrayList<Change>(myMerger.getBaseRepoChange());
  repoChange.removeAll(myMerger.getApplyedChanges());
  repoChange.removeAll(myMerger.getExcludedChanges());
  myChange2EditorComponent.hightlight(repoChange,false,false);
  myChange2EditorComponent.makeChangeBlocks();
}
