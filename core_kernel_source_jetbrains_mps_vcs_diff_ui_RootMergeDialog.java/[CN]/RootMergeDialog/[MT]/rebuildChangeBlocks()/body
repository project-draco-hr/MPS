{
  myResultEditorComponent.removeAllChanges();
  myChange1EditorComponent.removeAllChanges();
  myChange2EditorComponent.removeAllChanges();
  myMerger.doRebuild(new Runnable(){
    public void run(){
    }
  }
);
  myResultModel=myMerger.getResultModel();
  final SNode[] resultNode=new SNode[1];
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      resultNode[0]=myResultModel.getNodeById(myRoot.getSNodeId());
    }
  }
);
  myResultEditorComponent.editNode(resultNode[0],myContext);
  List<Change> mineChange=new ArrayList<Change>(myMerger.getBaseMineChanges());
  mineChange.removeAll(myMerger.getAppliedChanges());
  mineChange.removeAll(myMerger.getExcludedChanges());
  myChange1EditorComponent.hightlight(mineChange,false,false);
  myChange1EditorComponent.makeChangeBlocks();
  ArrayList<Change> removedNodes=new ArrayList<Change>();
  removedNodes.addAll(CollectionUtil.filter(DeleteNodeChange.class,myMerger.getBaseMineChanges()));
  removedNodes.addAll(CollectionUtil.filter(DeleteNodeChange.class,myMerger.getBaseRepoChanges()));
  removedNodes.removeAll(myMerger.getExcludedChanges());
  myResultEditorComponent.hightlight(removedNodes,true,false);
  myResultEditorComponent.makeChangeBlocks();
  List<Change> repoChange=new ArrayList<Change>(myMerger.getBaseRepoChanges());
  repoChange.removeAll(myMerger.getAppliedChanges());
  repoChange.removeAll(myMerger.getExcludedChanges());
  myChange2EditorComponent.hightlight(repoChange,false,false);
  myChange2EditorComponent.makeChangeBlocks();
}
