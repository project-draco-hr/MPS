{
  Set<Edge> addedEdges=SetSequence.fromSet(new LinkedHashSet<Edge>());
  BiconnectedComponent root=BiconnectedComponent.createTree(graph);
  if (SHOW_LOG > 0) {
    System.out.println(root.toString(""));
  }
  if (ListSequence.fromList(root.getChildren()).count() > 0) {
    List<Node> toConnect=ListSequence.fromList(new ArrayList<Node>());
    collectListNodes(root,toConnect,null);
    if (SetSequence.fromSet(root.getNodes()).count() == 1) {
      ListSequence.fromList(toConnect).addElement(SetSequence.fromSet(root.getNodes()).first());
    }
 else {
      final Node cutpoint=root.getCutpoint(ListSequence.fromList(root.getChildren()).first());
      ListSequence.fromList(toConnect).addElement(SetSequence.fromSet(root.getNodes()).findFirst(new IWhereFilter<Node>(){
        public boolean accept(        Node it){
          return it != cutpoint;
        }
      }
));
    }
    Node prev=null;
    for (    Node node : ListSequence.fromList(toConnect)) {
      if (prev != null) {
        SetSequence.fromSet(addedEdges).addElement(prev.addEdgeTo(node));
      }
      prev=node;
    }
  }
  return addedEdges;
}
