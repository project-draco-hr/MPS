{
  Set<String> names=(Set<String>)BaseLanguageTextGen.getUserObjects(TextGenManager.IMPORT,textGen);
  String newImport=BaseLanguageTextGen.getPackageName(cls,textGen) + "." + SPropertyOperations.getString(cls,"name");
  SetSequence.fromSet(names).addElement(newImport);
  if (cls.isRoot()) {
    for (    SNode nestedClassifier : SNodeOperations.getDescendants(cls,"jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{})) {
      SetSequence.fromSet(names).addElement(BaseLanguageTextGen.getPackageName(nestedClassifier,textGen) + "." + SPropertyOperations.getString(nestedClassifier,"name"));
    }
    int wasPart=textGen.getBuffer().selectPart(TextGenBuffer.TOP);
    textGen.append("package " + BaseLanguageTextGen.getPackageName(cls,textGen) + ";");
    textGen.appendNewLine();
    textGen.appendNewLine();
    textGen.append("/*Generated by MPS */");
    textGen.appendNewLine();
    textGen.getBuffer().selectPart(wasPart);
  }
  if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.Interface") && ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).isNotEmpty()) {
    for (    SNode interface1 : SLinkOperations.getTargets(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(interface1,"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface")) {
        BaseLanguageTextGen.extendedInterface(SNodeOperations.cast(SLinkOperations.getTarget(interface1,"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface"),textGen);
      }
 else {
        textGen.foundError("Collection of extended interfaces can't be contains other Classifier Types except Interface");
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    BaseLanguageTextGen.implementedInterface(cls,textGen);
    BaseLanguageTextGen.extendedClasses(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"superclass",true),"classifier",false),textGen);
  }
}
