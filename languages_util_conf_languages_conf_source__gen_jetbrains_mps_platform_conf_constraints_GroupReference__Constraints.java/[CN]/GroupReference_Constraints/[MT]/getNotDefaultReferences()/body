{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("group",new BaseReferenceConstraintsDescriptor("group",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),"id");
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Sequence.fromIterable(((Iterable<IModule>)operationContext.getScope().getVisibleModules())).<SModelDescriptor>translate(new ITranslator2<IModule,SModelDescriptor>(){
            public Iterable<SModelDescriptor> translate(            IModule m){
              return m.getOwnModelDescriptors();
            }
          }
).where(new IWhereFilter<SModelDescriptor>(){
            public boolean accept(            SModelDescriptor smd){
              return !("java_stub".equals(smd.getStereotype()));
            }
          }
).<SNode>translate(new ITranslator2<SModelDescriptor,SNode>(){
            public Iterable<SNode> translate(            SModelDescriptor smd){
              return SModelOperations.getNodes(((SModel)smd.getSModel()),"jetbrains.mps.platform.conf.structure.Group");
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_60vk01_a0a3a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  references.put("anchor",new BaseReferenceConstraintsDescriptor("anchor",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SConceptPropertyOperations.getString(_context.getParameterNode(),"alias") + " " + SPropertyOperations.getString(_context.getParameterNode(),"id");
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Sequence.fromIterable(((Iterable<IModule>)operationContext.getScope().getVisibleModules())).<SModelDescriptor>translate(new ITranslator2<IModule,SModelDescriptor>(){
            public Iterable<SModelDescriptor> translate(            IModule m){
              return m.getOwnModelDescriptors();
            }
          }
).where(new IWhereFilter<SModelDescriptor>(){
            public boolean accept(            SModelDescriptor smd){
              return !("java_stub".equals(smd.getStereotype()));
            }
          }
).<SNode>translate(new ITranslator2<SModelDescriptor,SNode>(){
            public Iterable<SNode> translate(            SModelDescriptor smd){
              return SModelOperations.getNodes(((SModel)smd.getSModel()),"jetbrains.mps.platform.conf.structure.AbstractAction");
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_60vk01_a0a3a0a0a1a0b0a2a0;
        }
      }
;
    }
  }
);
  return references;
}
