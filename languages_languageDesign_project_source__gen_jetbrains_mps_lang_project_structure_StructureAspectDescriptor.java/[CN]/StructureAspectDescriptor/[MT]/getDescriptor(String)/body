{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.DevKit").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("plugin","devkitPath").children(new String[]{"exportedLanguages","exportedSolutions","extendedDevkits"},new boolean[]{true,true,true}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Generator").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("generatorUID","generateTemplates").children(new String[]{"priorityRules","depGenerators"},new boolean[]{true,true}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Language").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("genPath","languagePath").children(new String[]{"generator","accessoryModels","extendedLanguages","runtimeModules","runtimeStubModels","stubSolutions"},new boolean[]{true,true,true,true,true,true}).create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigExternalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"generator","innerRef"},new boolean[]{false,false}).create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigNormalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").properties("modelUID","nodeID").alias("ref","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all globalEvents","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all local","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefBase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefSet").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"refs"},new boolean[]{true}).alias("set","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingPriorityRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type").children(new String[]{"left","right"},new boolean[]{false,false}).create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid","qualifiedName","stereotype").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type","path").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Module").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("uuid","namespace","compileInMPS","enableJavaStubs").children(new String[]{"model","modelRoots","dependencies","usedLanguages","usedDevkits","stubModels","sourcePaths"},new boolean[]{true,true,true,true,true,true,true}).abstract_().create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("reexport").children(new String[]{"moduleRef"},new boolean[]{false}).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid","qualifiedName").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Solution").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("outputPath","dontLoadClasses","solutionPath").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.SourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubSolution").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid","name").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
