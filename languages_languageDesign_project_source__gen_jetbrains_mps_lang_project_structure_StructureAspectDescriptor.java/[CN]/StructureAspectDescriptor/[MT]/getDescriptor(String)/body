{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.DevKit","jetbrains.mps.lang.project.structure.Module",false,new String[]{"jetbrains.mps.lang.project.structure.Module"},new String[]{"plugin","devkitPath"},new String[]{},new String[]{"exportedLanguages","exportedSolutions","extendedDevkits"},new boolean[]{true,true,true},false,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.Generator","jetbrains.mps.lang.project.structure.Module",false,new String[]{"jetbrains.mps.lang.project.structure.Module"},new String[]{"generatorUID","generateTemplates"},new String[]{},new String[]{"priorityRules","depGenerators"},new boolean[]{true,true},false,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.Language","jetbrains.mps.lang.project.structure.Module",false,new String[]{"jetbrains.mps.lang.project.structure.Module"},new String[]{"genPath","languagePath"},new String[]{},new String[]{"generator","accessoryModels","extendedLanguages","runtimeModules","runtimeStubModels","stubSolutions"},new boolean[]{true,true,true,true,true,true},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigExternalRef","jetbrains.mps.lang.project.structure.MappingConfigRefBase",false,new String[]{"jetbrains.mps.lang.project.structure.MappingConfigRefBase"},new String[]{},new String[]{},new String[]{"generator","innerRef"},new boolean[]{false,false},false,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigNormalRef","jetbrains.mps.lang.project.structure.MappingConfigRefBase",false,new String[]{"jetbrains.mps.lang.project.structure.MappingConfigRefBase"},new String[]{"modelUID","nodeID"},new String[]{},new String[]{},new boolean[]{},false,false,"ref","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal","jetbrains.mps.lang.project.structure.MappingConfigRefBase",false,new String[]{"jetbrains.mps.lang.project.structure.MappingConfigRefBase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"all global","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal","jetbrains.mps.lang.project.structure.MappingConfigRefBase",false,new String[]{"jetbrains.mps.lang.project.structure.MappingConfigRefBase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"all local","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefBase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingConfigRefSet","jetbrains.mps.lang.project.structure.MappingConfigRefBase",false,new String[]{"jetbrains.mps.lang.project.structure.MappingConfigRefBase"},new String[]{},new String[]{},new String[]{"refs"},new boolean[]{true},false,false,"set","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.MappingPriorityRule","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"type"},new String[]{},new String[]{"left","right"},new boolean[]{false,false},false,false,"","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.ModelReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"uuid","qualifiedName","stereotype"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.ModelRoot","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"type","path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.Module","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"uuid","namespace","compileInMPS","enableJavaStubs"},new String[]{},new String[]{"model","modelRoots","dependencies","usedLanguages","usedDevkits","stubModels","sourcePaths"},new boolean[]{true,true,true,true,true,true,true},true,false,"","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.ModuleDependency","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"reexport"},new String[]{},new String[]{"moduleRef"},new boolean[]{false},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.ModuleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"uuid","qualifiedName"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.Solution","jetbrains.mps.lang.project.structure.Module",false,new String[]{"jetbrains.mps.lang.project.structure.Module"},new String[]{"outputPath","dontLoadClasses","solutionPath"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.SourcePath","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.StubEntry","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.project.structure.StubSolution","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"uuid","name"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
