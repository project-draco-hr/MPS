{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0ab.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AsBuilderStatement;
      }
    break;
case 1:
  if (true) {
    return props_AsTypeBuilder;
  }
break;
case 2:
if (true) {
return props_BaseSimpleBuilderDeclaration;
}
break;
case 3:
if (true) {
return props_BeanBuilder;
}
break;
case 4:
if (true) {
return props_BeanPropertyBuilder;
}
break;
case 5:
if (true) {
return props_Builder;
}
break;
case 6:
if (true) {
return props_BuilderContainer;
}
break;
case 7:
if (true) {
return props_BuilderCreator;
}
break;
case 8:
if (true) {
return props_BuilderStatement;
}
break;
case 9:
if (true) {
return props_ResultExpression;
}
break;
case 10:
if (true) {
return props_SimpleBuilder;
}
break;
case 11:
if (true) {
return props_SimpleBuilderChild;
}
break;
case 12:
if (true) {
return props_SimpleBuilderChildExpression;
}
break;
case 13:
if (true) {
return props_SimpleBuilderDeclaration;
}
break;
case 14:
if (true) {
return props_SimpleBuilderExpression;
}
break;
case 15:
if (true) {
return props_SimpleBuilderExtensionDeclaration;
}
break;
case 16:
if (true) {
return props_SimpleBuilderParameter;
}
break;
case 17:
if (true) {
return props_SimpleBuilderParameterReference;
}
break;
case 18:
if (true) {
return props_SimpleBuilderParentExpression;
}
break;
case 19:
if (true) {
return props_SimpleBuilderProperty;
}
break;
case 20:
if (true) {
return props_SimpleBuilderPropertyBuilder;
}
break;
case 21:
if (true) {
return props_SimpleBuilderPropertyExpression;
}
break;
case 22:
if (true) {
return props_SimpleBuilderPropertyParent;
}
break;
case 23:
if (true) {
return props_SimpleBuilderPropertyValue;
}
break;
case 24:
if (true) {
return props_SimpleBuilders;
}
break;
default :
}
}
throw new IllegalStateException();
}
