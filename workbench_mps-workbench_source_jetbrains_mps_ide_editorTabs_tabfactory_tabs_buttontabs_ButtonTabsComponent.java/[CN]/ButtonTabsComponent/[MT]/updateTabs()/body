{
  if (isDisposedNode())   return;
  if (getLastNode() != null && getLastNode().resolve(MPSModuleRepository.getInstance()) == null) {
    onNodeChange(myBaseNode.resolve(MPSModuleRepository.getInstance()));
  }
  myRealTabs.clear();
  ArrayList<RelationDescriptor> tabs=new ArrayList<RelationDescriptor>(myPossibleTabs);
  Collections.sort(tabs,new RelationComparator());
  final NodeChangeCallback callback=new NodeChangeCallback(){
    @Override public void changeNode(    SNode newNode){
      onNodeChange(newNode);
    }
  }
;
  TabEditorLayout newContent=updateDocumentsAndNodes();
  for (  RelationDescriptor tabDescriptor : tabs) {
    if (newContent.covers(tabDescriptor)) {
      final ButtonEditorTab tab=new ButtonEditorTab(this,myRealTabs.size(),tabDescriptor,newContent.get(tabDescriptor));
      final SelectTabAction action=new SelectTabAction(tab,callback);
      tab.setSelectTabAction(action);
      action.registerShortcut(myEditor);
      myRealTabs.add(tab);
    }
  }
  updateTabColors();
  DefaultActionGroup group=new DefaultActionGroup();
  for (  ButtonEditorTab tab : myRealTabs) {
    group.add(tab.getSelectTabAction());
  }
  if (myToolbar != null) {
    getComponent().remove(myToolbar.getComponent());
  }
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  actionToolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
  myToolbar=actionToolbar;
  getComponent().add(myToolbar.getComponent(),BorderLayout.CENTER);
  if (getLastNode() != null) {
    onNodeChange(getLastNode().resolve(MPSModuleRepository.getInstance()));
  }
}
