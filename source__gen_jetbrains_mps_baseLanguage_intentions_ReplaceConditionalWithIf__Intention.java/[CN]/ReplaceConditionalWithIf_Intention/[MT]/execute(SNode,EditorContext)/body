{
  SNode stmtNode=(SNode)SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
  SNode nodeParent=SNodeOperations.getParent(node,null,false,false);
  int nodeIndex=SequenceOperations.indexOf(SNodeOperations.getChildren(nodeParent),node);
  SNode nodeCopy=SNodeOperations.copyNode(node);
  SNodeOperations.replaceWithAnother(ListOperations.getElement(SNodeOperations.getChildren(nodeParent),nodeIndex),SLinkOperations.getTarget(nodeCopy,"ifTrue",true));
  SNode trueStmt=SNodeOperations.copyNode(stmtNode);
  SNodeOperations.replaceWithAnother(ListOperations.getElement(SNodeOperations.getChildren(nodeParent),nodeIndex),SLinkOperations.getTarget(nodeCopy,"ifFalse",true));
  SNode falseStmt=SNodeOperations.copyNode(stmtNode);
  SNode falseBlockStmt=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BlockStatement",null);
  SLinkOperations.setNewChild(falseBlockStmt,"statements","jetbrains.mps.baseLanguage.structure.StatementList");
  SLinkOperations.insertChildFirst(SLinkOperations.getTarget(falseBlockStmt,"statements",true),"statement",SNodeOperations.copyNode(stmtNode));
  SNode ifNode=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement",null);
  SLinkOperations.setTarget(ifNode,"condition",SLinkOperations.getTarget(node,"condition",true),true);
  SLinkOperations.setNewChild(ifNode,"ifTrue","jetbrains.mps.baseLanguage.structure.StatementList");
  SLinkOperations.insertChildFirst(SLinkOperations.getTarget(ifNode,"ifTrue",true),"statement",trueStmt);
  SLinkOperations.setTarget(ifNode,"ifFalseStatement",falseBlockStmt,true);
  SNodeOperations.replaceWithAnother(stmtNode,ifNode);
}
