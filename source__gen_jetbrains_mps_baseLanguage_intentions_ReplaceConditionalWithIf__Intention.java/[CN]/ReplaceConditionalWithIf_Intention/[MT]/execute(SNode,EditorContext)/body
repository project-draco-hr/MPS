{
  final zClosureContext _zClosureContext=new zClosureContext();
  SNode stmtNode=(SNode)SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
  _zClosureContext.fakeNode=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null);
  SNode nodeCopy=SNodeOperations.copyNode(node);
  SNodeOperations.replaceWithAnother(node,_zClosureContext.fakeNode);
  SNodeOperations.replaceWithAnother(SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(stmtNode,null,false),new zPredicate(null,_zClosureContext))),SLinkOperations.getTarget(nodeCopy,"ifTrue",true));
  SNode trueStmt=SNodeOperations.copyNode(stmtNode);
  SNode falseStmt=SNodeOperations.copyNode(stmtNode);
  SNode ifNode=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement",null);
  SLinkOperations.setTarget(ifNode,"condition",SLinkOperations.getTarget(node,"condition",true),true);
  SLinkOperations.setNewChild(ifNode,"ifTrue","jetbrains.mps.baseLanguage.structure.StatementList");
  SLinkOperations.insertChildFirst(SLinkOperations.getTarget(ifNode,"ifTrue",true),"statement",trueStmt);
  SLinkOperations.setTarget(ifNode,"ifFalseStatement",falseStmt,true);
  SNodeOperations.replaceWithAnother(stmtNode,ifNode);
}
