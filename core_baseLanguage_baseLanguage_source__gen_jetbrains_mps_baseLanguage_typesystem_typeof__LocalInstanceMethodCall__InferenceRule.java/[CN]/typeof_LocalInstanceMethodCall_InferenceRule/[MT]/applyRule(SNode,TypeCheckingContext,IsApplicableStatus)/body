{
  if (SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false) == null) {
    return;
  }
  SNode methodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
  final SNode methodClassifier=SNodeOperations.getAncestor(methodDeclaration,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  SNode currentClassifier=SNodeOperations.getAncestor(methodCall,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  while (currentClassifier != null && !(ListSequence.fromList(Classifier_Behavior.call_getVisibleMembers_1213877306257(currentClassifier,methodCall,IClassifiersSearchScope.INSTANCE_METHOD)).contains(methodDeclaration))) {
    currentClassifier=SNodeOperations.getAncestor(currentClassifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  }
  SNode constructedType=new typeof_LocalInstanceMethodCall_InferenceRule.QuotationClass_h4n2qb_a0a6a0().createNode(currentClassifier,typeCheckingContext);
  for (  SNode tvd : SLinkOperations.getTargets(currentClassifier,"typeVariableDeclaration",true)) {
    SNode tvr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference",null);
    SLinkOperations.setTarget(tvr,"typeVariableDeclaration",tvd,false);
    ListSequence.fromList(SLinkOperations.getTargets(constructedType,"parameter",true)).addElement(tvr);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,methodCall,SLinkOperations.getTarget(SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false),"returnType",true),mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithMethodTypeVariables(typeCheckingContext,methodCall,mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,constructedType,mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
  if (currentClassifier == null) {
    currentClassifier=SNodeOperations.getAncestor(methodCall,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  }
{
    SNode _nodeToCheck_1029348928467=methodCall;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1126608406759381109",0,intentionProvider);
    _info_12389875345.setInequationGroup("default");
    typeCheckingContext.createLessThanInequation((SNode)new typeof_LocalInstanceMethodCall_InferenceRule.QuotationClass_h4n2qb_a0a41a0_0().createNode(currentClassifier,typeCheckingContext),(SNode)new typeof_LocalInstanceMethodCall_InferenceRule.QuotationClass_h4n2qb_a0a41a0().createNode(methodClassifier,typeCheckingContext),false,_info_12389875345);
  }
}
