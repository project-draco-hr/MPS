{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("3f4bc5f5-c6c1-4a28-8b10-c83066ffa4a1"),"jetbrains.mps.lang.constraints")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_ConceptConstraints;
case 1:
  return props_ConceptParameter_ReferentSearchScope_enclosingNode;
case 2:
return props_ConstraintFunctionParameter_checkedNode;
case 3:
return props_ConstraintFunctionParameter_childConcept;
case 4:
return props_ConstraintFunctionParameter_childNode;
case 5:
return props_ConstraintFunctionParameter_containingLink;
case 6:
return props_ConstraintFunctionParameter_contextNode;
case 7:
return props_ConstraintFunctionParameter_contextRole;
case 8:
return props_ConstraintFunctionParameter_exists;
case 9:
return props_ConstraintFunctionParameter_inEditor;
case 10:
return props_ConstraintFunctionParameter_link;
case 11:
return props_ConstraintFunctionParameter_linkTarget;
case 12:
return props_ConstraintFunctionParameter_newReferentNode;
case 13:
return props_ConstraintFunctionParameter_oldReferentNode;
case 14:
return props_ConstraintFunctionParameter_parameterNode;
case 15:
return props_ConstraintFunctionParameter_parentNode;
case 16:
return props_ConstraintFunctionParameter_position;
case 17:
return props_ConstraintFunctionParameter_referenceNode;
case 18:
return props_ConstraintFunctionParameter_smartReference;
case 19:
return props_ConstraintFunctionParameter_visible;
case 20:
return props_ConstraintFunction_CanBeAChild;
case 21:
return props_ConstraintFunction_CanBeAParent;
case 22:
return props_ConstraintFunction_CanBeARoot;
case 23:
return props_ConstraintFunction_CanBeAnAncestor;
case 24:
return props_ConstraintFunction_GetAlternativeIcon;
case 25:
return props_ConstraintFunction_GetInstanceIcon;
case 26:
return props_ConstraintFunction_PropertyGetter;
case 27:
return props_ConstraintFunction_PropertySetter;
case 28:
return props_ConstraintFunction_PropertyValidator;
case 29:
return props_ConstraintFunction_RefSetHandlerKeepsReference;
case 30:
return props_ConstraintFunction_ReferentSearchScope_AbstractBase;
case 31:
return props_ConstraintFunction_ReferentSearchScope_Factory;
case 32:
return props_ConstraintFunction_ReferentSearchScope_Presentation;
case 33:
return props_ConstraintFunction_ReferentSearchScope_Scope;
case 34:
return props_ConstraintFunction_ReferentSearchScope_Validator;
case 35:
return props_ConstraintFunction_ReferentSetHandler;
case 36:
return props_ConstraintsFunctionParameter_node;
case 37:
return props_ConstraintsFunctionParameter_propertyValue;
case 38:
return props_InheritedNodeScopeFactory;
case 39:
return props_NodeDefaultSearchScope;
case 40:
return props_NodePropertyConstraint;
case 41:
return props_NodeReferentConstraint;
case 42:
return props_NodeScopeFactory;
}
throw new IllegalStateException();
}
