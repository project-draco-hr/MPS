{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("link",new BaseReferenceConstraintsDescriptor("link",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeListType"),true),"elementConcept",false));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_f4oi2a_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
