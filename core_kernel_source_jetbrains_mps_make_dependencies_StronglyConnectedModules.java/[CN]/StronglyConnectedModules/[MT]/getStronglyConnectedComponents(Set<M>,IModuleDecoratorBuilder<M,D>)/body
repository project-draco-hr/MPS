{
  List<Set<M>> result=new LinkedList<Set<M>>();
  Graph<IModuleDecorator<M>> graph=new Graph<IModuleDecorator<M>>();
  Map<IModule,IModuleDecorator<M>> moduleToDecorator=new LinkedHashMap<IModule,IModuleDecorator<M>>();
  for (  M module : modules) {
    IModuleDecorator<M> decorator=decoratorBuilder.decorate(module);
    moduleToDecorator.put(module,decorator);
    graph.add(decorator);
  }
  for (  IModuleDecorator<M> decorator : graph.getData()) {
    decorator.fill(moduleToDecorator);
  }
  List<List<IModuleDecorator<M>>> cycles=Graphs.getInstance().findStronglyConnectedComponents(graph);
  for (  List<IModuleDecorator<M>> cycle : cycles) {
    Set<M> mset=new LinkedHashSet<M>();
    result.add(mset);
    for (    IModuleDecorator<M> decorator : cycle) {
      mset.add(decorator.getModule());
    }
  }
  Collections.reverse(result);
  return result;
}
