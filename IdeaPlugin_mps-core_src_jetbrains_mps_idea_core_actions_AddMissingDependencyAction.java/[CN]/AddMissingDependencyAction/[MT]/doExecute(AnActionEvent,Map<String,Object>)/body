{
  try {
    IScope scope=e.getData(MPSCommonDataKeys.SCOPE);
    if (scope == null) {
      return;
    }
    SNode curNode=e.getData(MPSCommonDataKeys.NODE);
    if (curNode == null) {
      return;
    }
    IOperationContext context=e.getData(MPSCommonDataKeys.OPERATION_CONTEXT);
    if (context == null) {
      return;
    }
    SModule dependentModule=context.getModule();
    if (!(dependentModule instanceof SolutionIdea)) {
      return;
    }
    final Module ideaDependentModule=((SolutionIdea)dependentModule).getIdeaModule();
    final List<Module> ideaModulesToDependOn=new ArrayList<Module>();
    Set<Module> circularDependentModulesSet=new LinkedHashSet<Module>();
    for (    SReference ref : curNode.getReferences()) {
      SModelReference uid=ref.getTargetSModelReference();
      if (scope.getModelDescriptor(uid) == null && SModelRepository.getInstance().getModelDescriptor(uid) != null) {
        SModel sm=SModelRepository.getInstance().getModelDescriptor(uid);
        SModule moduleToDependOn=sm.getModule();
        if (!(moduleToDependOn instanceof SolutionIdea)) {
          continue;
        }
        Module ideaModuleToDependOn=((SolutionIdea)moduleToDependOn).getIdeaModule();
        ideaModulesToDependOn.add(ideaModuleToDependOn);
        Pair<Module,Module> circularModules=ModuleCompilerUtil.addingDependencyFormsCircularity(ideaDependentModule,ideaModuleToDependOn);
        if (circularModules != null) {
          circularDependentModulesSet.add(circularModules.getFirst());
          circularDependentModulesSet.add(circularModules.getSecond());
        }
      }
    }
    if (ideaModulesToDependOn.isEmpty()) {
      return;
    }
    if (!circularDependentModulesSet.isEmpty()) {
      StringBuilder message=new StringBuilder();
      message.append("Adding dependency on ");
      if (ideaModulesToDependOn.size() == 1) {
        message.append("module ");
      }
 else {
        message.append("modules ");
      }
      for (int i=0; i != ideaModulesToDependOn.size() - 1; ++i) {
        message.append("'");
        message.append(ideaModulesToDependOn.get(i).getName());
        message.append("', ");
      }
      message.append("'");
      message.append(ideaModulesToDependOn.get(ideaModulesToDependOn.size() - 1).getName());
      message.append("'");
      message.append(" will introduce circular dependency between modules ");
      Module[] modules=circularDependentModulesSet.toArray(new Module[circularDependentModulesSet.size()]);
      for (int i=0; i != modules.length - 1; ++i) {
        message.append("'");
        message.append(modules[i].getName());
        message.append("', ");
      }
      message.append("'");
      message.append(modules[modules.length - 1].getName());
      message.append("'");
      message.append(".\nAdd dependency anyway?");
      final String finalMessage=message.toString();
      if (ApplicationManager.getApplication().isUnitTestMode())       throw new RuntimeException(finalMessage);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Project project=ideaDependentModule.getProject();
          if (!(project.isOpen()))           return;
          int ret=Messages.showOkCancelDialog(project,finalMessage,QuickFixBundle.message("orderEntry.fix.title.circular.dependency.warning"),Messages.getWarningIcon());
          if (ret == 0) {
            addDependency(ideaDependentModule,ideaModulesToDependOn);
          }
        }
      }
);
    }
 else {
      addDependency(ideaDependentModule,ideaModulesToDependOn);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "AddMissingDependency",t);
    }
  }
}
