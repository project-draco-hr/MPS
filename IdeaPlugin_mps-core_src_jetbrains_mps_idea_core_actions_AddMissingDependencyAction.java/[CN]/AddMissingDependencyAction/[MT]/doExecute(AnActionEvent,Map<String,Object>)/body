{
  try {
    IScope scope=e.getData(MPSCommonDataKeys.SCOPE);
    if (scope == null) {
      return;
    }
    SNode curNode=e.getData(MPSCommonDataKeys.NODE);
    if (curNode == null) {
      return;
    }
    IOperationContext context=e.getData(MPSCommonDataKeys.OPERATION_CONTEXT);
    if (context == null) {
      return;
    }
    IModule dependentModule=context.getModule();
    if (!(dependentModule instanceof SolutionIdea)) {
      return;
    }
    final Module ideaDependentModule=((SolutionIdea)dependentModule).getIdeaModule();
    final List<Module> modulesToDependOn=new ArrayList<Module>();
    for (    SReference ref : curNode.getReferences()) {
      SModelReference uid=ref.getTargetSModelReference();
      if (scope.getModelDescriptor(uid) == null && GlobalScope.getInstance().getModelDescriptor(uid) != null) {
        SModelDescriptor sm=GlobalScope.getInstance().getModelDescriptor(uid);
        IModule moduleToDependOn=sm.getModule();
        if (!(moduleToDependOn instanceof SolutionIdea)) {
          return;
        }
        final Module ideaModuleToDependOn=((SolutionIdea)moduleToDependOn).getIdeaModule();
        modulesToDependOn.add(ideaModuleToDependOn);
      }
    }
    final ModifiableRootModel model=ModuleRootManager.getInstance(ideaDependentModule).getModifiableModel();
    for (    final Module ideaModuleToDependOn : modulesToDependOn) {
      final Pair<Module,Module> circularModules=ModuleCompilerUtil.addingDependencyFormsCircularity(ideaDependentModule,ideaModuleToDependOn);
      final Runnable addDependency=new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              model.addModuleOrderEntry(ideaModuleToDependOn);
            }
          }
);
        }
      }
;
      if (circularModules == null) {
        addDependency.run();
      }
 else {
        final String message=QuickFixBundle.message("orderEntry.fix.circular.dependency.warning",ideaModuleToDependOn.getName(),circularModules.getFirst().getName(),circularModules.getSecond().getName());
        if (ApplicationManager.getApplication().isUnitTestMode())         throw new RuntimeException(message);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            Project project=ideaDependentModule.getProject();
            if (!(project.isOpen()))             return;
            int ret=Messages.showOkCancelDialog(project,message,QuickFixBundle.message("orderEntry.fix.title.circular.dependency.warning"),Messages.getWarningIcon());
            if (ret == 0) {
              addDependency.run();
            }
          }
        }
);
      }
    }
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            model.commit();
          }
        }
);
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "AddMissingDependency",t);
    }
  }
}
