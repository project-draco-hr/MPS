{
  super("Refactor anonymous classes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Refactor anonymous classes";
    }
    public String getAdditionalInfo(){
      return "Refactor anonymous classes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AnonymousClass";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      for (      SNode parameter : SLinkOperations.getTargets(node,"parameter",true)) {
        SLinkOperations.addChild(node,"actualArgument",parameter);
      }
      Map<SNode,SNode> map=new HashMap<SNode,SNode>();
      new MethodDeclarationsFixer().testAndFixMethodCall(node,map);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
