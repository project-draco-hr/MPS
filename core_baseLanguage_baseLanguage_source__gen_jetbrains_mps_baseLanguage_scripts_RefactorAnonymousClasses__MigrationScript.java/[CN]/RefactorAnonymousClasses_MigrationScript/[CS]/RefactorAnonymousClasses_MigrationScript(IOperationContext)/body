{
  super("Refactor anonymous classes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Refactor anonymous classes";
    }
    public String getAdditionalInfo(){
      return "Refactor anonymous classes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.AnonymousClass";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SLinkOperations.getTarget(node,"baseMethodDeclaration",false) == null) || ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).isNotEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      for (      SNode parameter : SLinkOperations.getTargets(node,"parameter",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).addElement(parameter);
      }
      Map<SNode,SNode> map=new HashMap<SNode,SNode>();
      new MethodDeclarationsFixer().testAndFixMethodCall(node,map);
      SNode target=map.get(node);
      if (target != null) {
        SLinkOperations.setTarget(node,"baseMethodDeclaration",(SNode)target,false);
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
