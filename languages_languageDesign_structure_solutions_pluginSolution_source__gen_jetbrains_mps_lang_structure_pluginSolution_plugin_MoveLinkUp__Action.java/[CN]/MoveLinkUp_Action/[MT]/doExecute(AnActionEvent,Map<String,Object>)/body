{
  try {
    final SNode targetConcept=MoveUpDialog.getConcept(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),((SNode)MapSequence.fromMap(_params).get("target")),"link");
    ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    if (targetConcept == null) {
      return;
    }
    final Wrappers._T<SNode> linkToReplace=new Wrappers._T<SNode>();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        linkToReplace.value=RefUtil.findLinkToMerge(targetConcept,((SNode)MapSequence.fromMap(_params).get("target")));
      }
    }
);
    Boolean mergeLinks=false;
    if ((linkToReplace.value != null)) {
      String title="Merge to link with the same name";
switch (OptionDialog.showDialog(((MPSProject)MapSequence.fromMap(_params).get("project")),title,title + "?",true)) {
case 0:
        mergeLinks=true;
      break;
case 1:
    mergeLinks=false;
  break;
case 2:
return;
default :
}
}
final Boolean merge=mergeLinks;
modelAccess.runReadInEDT(new Runnable(){
public void run(){
SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)((SNode)MapSequence.fromMap(_params).get("target"))))) {
return;
}
SNode node1=((SNode)targetConcept);
if (!(node1.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)targetConcept))) {
return;
}
RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.structure.refactorings.MoveLinkUp",Arrays.asList("targetConcept","mergeLinks"),Arrays.asList(targetConcept,merge),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
}
}
);
}
 catch (Throwable t) {
if (LOG.isEnabledFor(Level.ERROR)) {
LOG.error("User's action execute method failed. Action:" + "MoveLinkUp",t);
}
}
}
