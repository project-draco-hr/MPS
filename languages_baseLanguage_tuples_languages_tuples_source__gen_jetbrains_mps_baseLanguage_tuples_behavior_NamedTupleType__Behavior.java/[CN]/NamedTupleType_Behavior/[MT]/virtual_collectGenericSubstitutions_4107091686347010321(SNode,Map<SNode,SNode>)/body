{
  if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"classifier",false),"typeVariableDeclaration",true)).any(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return MapSequence.fromMap(substitutions).containsKey(it);
    }
  }
)) {
    return;
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(thisNode,"parameter",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"classifier",false),"typeVariableDeclaration",true)).isNotEmpty()) {
    for (    SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"classifier",false),"typeVariableDeclaration",true))) {
      MapSequence.fromMap(substitutions).put(tvd,((SLinkOperations.getTarget(tvd,"bound",true) == null) ? new NamedTupleType_Behavior.QuotationClass_ja7850_a0b0a0a1a2a3().createNode() : SNodeOperations.copyNode(SLinkOperations.getTarget(tvd,"bound",true))));
    }
  }
 else {
{
      Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"classifier",false),"typeVariableDeclaration",true)).iterator();
      Iterator<SNode> tval_it=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"parameter",true)).iterator();
      SNode tvd_var;
      SNode tval_var;
      while (tvd_it.hasNext() && tval_it.hasNext()) {
        tvd_var=tvd_it.next();
        tval_var=tval_it.next();
        MapSequence.fromMap(substitutions).put(tvd_var,SNodeOperations.copyNode(tval_var));
        if (SNodeOperations.isInstanceOf(tval_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(tval_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{substitutions});
        }
      }
    }
  }
  BehaviorReflection.invokeVirtual(Void.class,SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode,"classifier",false),"extended",true),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{substitutions});
  for (  SNode ifc : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"classifier",false),"implements",true))) {
    BehaviorReflection.invokeVirtual(Void.class,ifc,"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{substitutions});
  }
}
