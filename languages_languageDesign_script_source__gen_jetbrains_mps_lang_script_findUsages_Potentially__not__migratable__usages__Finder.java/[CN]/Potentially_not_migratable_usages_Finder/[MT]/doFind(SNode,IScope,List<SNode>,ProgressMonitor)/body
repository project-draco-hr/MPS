{
  monitor.start(getDescription(),1);
  try {
    for (    SNode nodeUsage : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",node,scope,monitor.subTask(1)))) {
      if (SNodeOperations.isInstanceOf(nodeUsage,"jetbrains.mps.lang.smodel.structure.SLinkListAccess")) {
        SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(nodeUsage),"jetbrains.mps.baseLanguage.structure.DotExpression");
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          SNode operation=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
            SNode method=SLinkOperations.getTarget(SNodeOperations.cast(operation,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
            if (method == ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~List"),"method",true)).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getString(it,"name").equals("add") && (int)ListSequence.fromList(SLinkOperations.getTargets(it,"parameter",true)).count() == 1;
              }
            }
)) {
              continue;
            }
          }
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation") || SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.AddElementOperation") || SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.actions.structure.NF_LinkList_AddNewChildOperation")|| SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation")) {
            continue;
          }
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation")) {
            continue;
          }
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") && !(SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"))) {
            continue;
          }
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect")) {
            continue;
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement")) {
          if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"),"inputSequence",true) == dotExpression) {
            continue;
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ForeachStatement")) {
          if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ForeachStatement"),"iterable",true) == dotExpression) {
            continue;
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation")) {
          continue;
        }
        SNode expectedType=null;
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.AssignmentExpression")) {
          if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.AssignmentExpression"),"rValue",true) == dotExpression) {
            SNode lValue=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.AssignmentExpression"),"lValue",true);
            expectedType=TypeChecker.getInstance().getTypeOf(lValue);
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.IMethodCall")) {
          int index=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.IMethodCall"),"actualArgument",true)).indexOf(dotExpression);
          if (index != -1) {
            expectedType=SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false),"parameter",true)).getElement(index),"type",true);
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
          if (SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"),"initializer",true) == dotExpression) {
            expectedType=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"),"type",true);
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.CollectionAppendPart") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.CollectionAppendPart"),"list",true) == dotExpression) {
          expectedType=new Potentially_not_migratable_usages_Finder.QuotationClass_cbnudw_a0a0a02a0a0a1a3().createNode();
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.OperationCall")) {
          int index=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.OperationCall"),"parameter",true)).indexOf(dotExpression);
          if (index != -1) {
            expectedType=SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.lang.textGen.structure.OperationCall"),"function",false),"parameter",true)).getElement(index),"type",true);
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ReturnStatement")) {
          SNode method=SNodeOperations.getAncestor(dotExpression,"jetbrains.mps.baseLanguage.structure.IMethodLike",false,false);
          if ((method != null)) {
            expectedType=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),method,"virtual_getExpectedRetType_1239354342632",new Object[]{});
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
          SNode method=SNodeOperations.getAncestor(dotExpression,"jetbrains.mps.baseLanguage.structure.IMethodLike",false,false);
          if ((method != null)) {
            if (BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),method,"virtual_getLastStatement_1239354409446",new Object[]{}) == SNodeOperations.getParent(dotExpression)) {
              expectedType=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),method,"virtual_getExpectedRetType_1239354342632",new Object[]{});
            }
          }
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.CastExpression")) {
          expectedType=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(dotExpression),"jetbrains.mps.baseLanguage.structure.CastExpression"),"type",true);
        }
        if (SNodeOperations.getConceptDeclaration(expectedType) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType")) {
          continue;
        }
        if (SNodeOperations.getConceptDeclaration(expectedType) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(expectedType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Iterable")) {
          continue;
        }
      }
      if (SNodeOperations.isInstanceOf(nodeUsage,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList")) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(nodeUsage,"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList"),"relationDeclaration",false) == node) {
          continue;
        }
      }
      ListSequence.fromList(_results).addElement(nodeUsage);
    }
  }
  finally {
    monitor.done();
  }
}
