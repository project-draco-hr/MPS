{
  report(MessageKind.INFORMATION,"started: " + SPropertyOperations.getString(executable,"name"),null);
  EvaluationEnvironment env=new EvaluationEnvironment(){
    @Override public void report(    int kind,    String message,    SNode hintNode){
      WorkflowRunner.this.report((kind == KIND_ERR ? MessageKind.ERROR : MessageKind.WARNING),message,hintNode);
    }
  }
;
  EvaluationContext rootContext=new EvaluationContext(null,null);
  for (  SNode st : SLinkOperations.getTargets(executable,"statements",true)) {
    if (SNodeOperations.isInstanceOf(st,"jetbrains.mps.core.workflow.structure.WflowExpressionStatement")) {
      try {
        SNode exprst=SNodeOperations.cast(st,"jetbrains.mps.core.workflow.structure.WflowExpressionStatement");
        Object result=MqlExpression_Behavior.call_evaluate_1671449901154581105(SLinkOperations.getTarget(exprst,"expression",true),env,rootContext.subContext());
        rootContext.setValue(SPropertyOperations.getString(SLinkOperations.getTarget(exprst,"var",true),"name"),result);
        String asString=env.getRuntime().objectDebugText(result);
        report(MessageKind.INFORMATION,SPropertyOperations.getString(SLinkOperations.getTarget(exprst,"var",true),"name") + " = " + asString,null);
      }
 catch (      Exception ex) {
        Throwable thr=unwrap(ex);
        report(MessageKind.ERROR,thr.toString(),(thr instanceof EvaluationException ? ((EvaluationException)thr).getQuery() : null));
      }
    }
 else     if (SNodeOperations.isInstanceOf(st,"jetbrains.mps.core.workflow.structure.WflowAssert")) {
      try {
        SNode exprst=SNodeOperations.cast(st,"jetbrains.mps.core.workflow.structure.WflowAssert");
        Object expected=MqlExpression_Behavior.call_evaluate_1671449901154581105(SLinkOperations.getTarget(exprst,"expected",true),env,rootContext.subContext());
        Object actual=MqlExpression_Behavior.call_evaluate_1671449901154581105(SLinkOperations.getTarget(exprst,"actual",true),env,rootContext.subContext());
        boolean result=env.getRuntime().objectEquals(expected,actual);
        if (!(result)) {
          report(MessageKind.ERROR,"fail: got " + actual + " instead of "+ expected,st);
        }
      }
 catch (      Exception ex) {
        Throwable thr=unwrap(ex);
        report(MessageKind.ERROR,thr.toString(),(thr instanceof EvaluationException ? ((EvaluationException)thr).getQuery() : null));
      }
    }
  }
}
