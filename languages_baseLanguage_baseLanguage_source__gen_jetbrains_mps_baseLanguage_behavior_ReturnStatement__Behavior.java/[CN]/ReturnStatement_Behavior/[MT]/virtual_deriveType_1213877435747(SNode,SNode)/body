{
  SNode type=null;
  if (SNodeOperations.getParent(expression) == thisNode && SNodeOperations.hasRole(expression,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068581242878l,1068581517676l,"expression"))) {
    SNode ancestor=SNodeOperations.getNodeAncestorWhereConceptInList(thisNode,new SAbstractConcept[]{MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1137021947720l,"jetbrains.mps.baseLanguage.structure.ConceptFunction")},false,false);
    if (SNodeOperations.isInstanceOf(ancestor,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
      type=SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(ancestor,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123133l,"returnType")));
    }
 else {
      SNode expectedReturnType=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(ancestor,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1137021947720l,"jetbrains.mps.baseLanguage.structure.ConceptFunction")),"virtual_getExpectedReturnType_1213877374441",new Object[]{});
      if (SNodeOperations.isInstanceOf(expectedReturnType,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type"))) {
        type=SNodeOperations.cast(SNodeOperations.copyNode(expectedReturnType),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type"));
      }
    }
  }
  return type;
}
