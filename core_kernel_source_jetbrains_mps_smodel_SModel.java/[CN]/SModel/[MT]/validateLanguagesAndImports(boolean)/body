{
  GlobalScope scope=GlobalScope.getInstance();
  Set<ModuleReference> usedLanguages=new HashSet<ModuleReference>(getLanguageRefs(scope));
  Set<SModelReference> importedModels=new HashSet<SModelReference>();
  for (  SModelDescriptor sm : allImportedModels(scope)) {
    importedModels.add(sm.getSModelReference());
  }
  List<SNode> nodes=allNodes();
  for (  SNode node : nodes) {
    Language lang=node.getLanguage(scope);
    if (lang == null) {
      LOG.error("Can't find language " + node.getLanguageNamespace());
      continue;
    }
    ModuleReference ref=lang.getModuleReference();
    if (!usedLanguages.contains(ref)) {
      if (respectModulesScopes) {
        IModule module=this.getModelDescriptor().getModule();
        if (!module.getAllUsedLanguages().contains(lang)) {
          module.addUsedLanguage(ref);
        }
      }
      usedLanguages.add(ref);
      addLanguage(ref);
    }
    List<SReference> references=node.getReferences();
    for (    SReference reference : references) {
      if (reference.isExternal()) {
        SModelReference targetModelReference=reference.getTargetSModelReference();
        if (targetModelReference != null && !importedModels.contains(targetModelReference)) {
          addImportedModel(targetModelReference);
          importedModels.add(targetModelReference);
        }
      }
    }
  }
  importedModels.clear();
}
