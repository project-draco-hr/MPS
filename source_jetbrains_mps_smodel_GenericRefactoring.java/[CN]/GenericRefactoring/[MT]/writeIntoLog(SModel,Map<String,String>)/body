{
  String nodeIdString=myRefactoring.getSourceId();
  String modelUID=MarshallUtil.getModelUID(nodeIdString);
  String nodeId=MarshallUtil.getNodeId(nodeIdString);
  SModelDescriptor modelDescriptor=SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString(modelUID));
  if (modelDescriptor == null) {
    throw new RefactoringLoggingFailedException("refactoring source model could not be found, UID=" + modelUID);
  }
  SNode refactoringSourceNode=modelDescriptor.getSModel().getNodeById(nodeId);
  if (refactoringSourceNode == null) {
    throw new RefactoringLoggingFailedException("refactoring source node could not be found, id=" + nodeId);
  }
  if (!BaseAdapter.isInstance(refactoringSourceNode,Refactoring.class)) {
    throw new RefactoringLoggingFailedException("refactoring source node is not a refactoring source, id=" + nodeId);
  }
  SNode nodeToBeLogged=CopyUtil.copy(refactoringSourceNode,model);
  Refactoring refactoring=(Refactoring)nodeToBeLogged.getAdapter();
  RuntimeLog refactoringLog=RuntimeLog.newInstance(model);
  UpdateModelClause updateModelClause=refactoring.getUpdateModelClause();
  updateModelClause.getParent().removeChild(updateModelClause);
  refactoringLog.setUpdateModelClause(updateModelClause);
  for (  String name : args.keySet()) {
    RequiredAdditionalArgument argument=findArgumentByName(refactoring,name);
    if (argument == null)     continue;
    RequiredAdditionalArgumentValue value=RequiredAdditionalArgumentValue.newInstance(model);
    refactoringLog.addArgumentValue(value);
    value.setValue(args.get(name));
    argument.getParent().removeChild(argument);
    value.setArgument(argument);
  }
  SNode log=model.getLog();
  RuntimeLogStack runtimeLogStack;
  if (log == null) {
    runtimeLogStack=RuntimeLogStack.newInstance(model);
    model.setLog(runtimeLogStack.getNode());
  }
 else {
    runtimeLogStack=(RuntimeLogStack)log.getAdapter();
  }
  runtimeLogStack.addLog(refactoringLog);
  model.increaseVersion();
  refactoringLog.setModelVersion(model.getVersion());
}
