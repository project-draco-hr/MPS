{
  RefactoringContext refactoringContext=new RefactoringContext();
  boolean success=myRefactoring.askForInfo(context,refactoringContext);
  if (!success)   return;
  refactoringContext.setRefactoring(myRefactoring);
  myRefactoring.doRefactor(context,refactoringContext);
  SModelDescriptor modelDescriptor=context.getModel();
  if (modelDescriptor == null)   return;
  SModel model=modelDescriptor.getSModel();
  writeIntoLog(model,refactoringContext);
  for (  SModelDescriptor anotherDescriptor : SModelRepository.getInstance().getAllModelDescriptors()) {
    String stereotype=anotherDescriptor.getStereotype();
    if (!stereotype.equals(SModelStereotype.NONE) && !stereotype.equals(SModelStereotype.TEMPLATES)) {
      continue;
    }
    if (!anotherDescriptor.isInitialized())     continue;
    SModel anotherModel=anotherDescriptor.getSModel();
    if (model != anotherModel && !anotherModel.getImportedModelUIDs().contains(model.getUID()) && !anotherModel.getLanguageAspectModelsUIDs().contains(model.getUID()))     continue;
    processModel(anotherModel,model,refactoringContext);
  }
  Map<IModule,List<SModel>> sourceModels=myRefactoring.getModelsToGenerate(context,refactoringContext);
  if (!sourceModels.isEmpty()) {
    generateModels(context,sourceModels);
  }
}
