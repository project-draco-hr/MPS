{
  Map<String,String> args=myRefactoring.askForInfo(context);
  if (args == null)   return;
  myRefactoring.doRefactor(context,args);
  SModelDescriptor modelDescriptor=context.getModel();
  if (modelDescriptor == null)   return;
  SModel model=modelDescriptor.getSModel();
  if (myRefactoring.requiresModelGeneration()) {
    List<SModel> sourceModels=new ArrayList<SModel>();
    sourceModels.add(model);
    IOperationContext operationContext=context.getOperationContext();
    new GeneratorManager().generateModels(sourceModels,BootstrapLanguages.getInstance().getBaseLanguage(),operationContext,IGenerationType.FILES,new IGenerationScript(){
      public GenerationStatus doGenerate(      IGenerationScriptContext context) throws Exception {
        return context.doGenerate(context.getSourceModelDescriptor(),context.getTargetLanguage(),null);
      }
    }
,IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR,new DefaultMessageHandler(operationContext.getProject()));
  }
  writeIntoLog(model,args);
  for (  SModelDescriptor anotherDescriptor : SModelRepository.getInstance().getAllModelDescriptors()) {
    String stereotype=anotherDescriptor.getStereotype();
    if (!stereotype.equals(SModelStereotype.NONE) && !stereotype.equals(SModelStereotype.TEMPLATES)) {
      continue;
    }
    if (!anotherDescriptor.isInitialized())     continue;
    SModel anotherModel=anotherDescriptor.getSModel();
    if (model != anotherModel && !anotherModel.getImportedModelUIDs().contains(model.getUID()) && !anotherModel.getLanguageAspectModelsUIDs().contains(model.getUID()))     continue;
    processModel(anotherModel,model,args);
  }
}
