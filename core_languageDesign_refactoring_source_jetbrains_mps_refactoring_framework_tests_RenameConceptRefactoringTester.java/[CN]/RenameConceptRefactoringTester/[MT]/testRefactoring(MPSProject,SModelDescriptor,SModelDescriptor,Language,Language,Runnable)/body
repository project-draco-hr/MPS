{
  System.err.println("preparing arguments for refactoring");
  final String newConceptName="MyVeryGoodConcept2";
  RenameConcept renameConcept=new RenameConcept();
  final RefactoringContext refactoringContext=new RefactoringContext(renameConcept);
  refactoringContext.setCurrentOperationContext(project.createOperationContext());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      refactoringContext.setParameter(STRMD,structureModelDescriptor);
      SNode concept=structureModelDescriptor.getSModel().getRootByName("MyVeryGoodConcept1");
      refactoringContext.setSelectedNode(concept);
      refactoringContext.setSelectedModel(structureModelDescriptor);
      refactoringContext.setParameter("newName",newConceptName);
    }
  }
);
  System.err.println("executing a refactoring");
  new RefactoringProcessor().doExecuteInTest(refactoringContext,continuation);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          try {
            System.err.println("checking a model");
            if (sandbox1.isInitialized()) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            ((DefaultSModelDescriptor)sandbox1).setTestRefactoringMode(true);
            SModel sModel=sandbox1.getSModel();
            String conceptFqName=sModel.getRoots().get(0).getConceptFqName();
            System.err.println("Inspected concept FQ name = " + conceptFqName);
            SModelDescriptor structureModelDescriptor=(SModelDescriptor)refactoringContext.getParameter(STRMD);
            result[0]=conceptFqName.equals(structureModelDescriptor + "." + newConceptName);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
