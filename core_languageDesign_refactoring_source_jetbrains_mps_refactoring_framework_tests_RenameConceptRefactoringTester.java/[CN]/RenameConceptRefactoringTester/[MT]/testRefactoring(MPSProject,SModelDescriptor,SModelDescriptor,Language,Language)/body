{
  System.err.println("preparing arguments for refactoring");
  ActionContext actionContext=new ActionContext(project.createOperationContext());
  SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
  SNode concept=structureModelDescriptor.getSModel().getRootByName("MyVeryGoodConcept1");
  actionContext.put(SNode.class,concept);
  actionContext.put(SModelDescriptor.class,structureModelDescriptor);
  RenameConcept renameConcept=new RenameConcept();
  RefactoringContext refactoringContext=new RefactoringContext(renameConcept);
  String newConceptName="MyVeryGoodConcept2";
  refactoringContext.setParameter("newName",newConceptName);
  System.err.println("executing a refactoring");
  new RefactoringProcessor().doExecuteInTest(actionContext,refactoringContext);
  try {
    System.err.println("checking a model");
    if (sandbox1.isInitialized()) {
      System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
      return false;
    }
    ((DefaultSModelDescriptor)sandbox1).setTestRefactoringMode(true);
    SModel sModel=sandbox1.getSModel();
    String conceptFqName=sModel.getRoots().get(0).getConceptFqName();
    System.err.println("Inspected concept FQ name = " + conceptFqName);
    return conceptFqName.equals(structureModelDescriptor + "." + newConceptName);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return false;
  }
}
