{
  this.myTool=tool;
  this.myUsagesView=new UsagesView(project,new ViewOptions()){
    public void close(){
      ReplacementView.this.myTool.closeTab(ReplacementView.this);
    }
  }
;
  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  this.myButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      final List<SNode> replaceNodes=ReplacementView.this.getExecuteResult(ReplacementView.this.myUsagesView.getIncludedResultNodes());
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          try {
            for (            SNode node : replaceNodes) {
              query.doReplace(node);
            }
            JOptionPane.showMessageDialog(null,"Modify completed successfully","Information",JOptionPane.INFORMATION_MESSAGE);
          }
 catch (          Throwable t) {
            JOptionPane.showMessageDialog(null,"Modify failed","Warning",JOptionPane.ERROR_MESSAGE);
          }
        }
      }
);
    }
  }
);
  this.myUsagesView.setRunOptions(provider,searchQuery,new UsagesView.ButtonConfiguration(true,true,true));
  buttonPanel.add(this.myButton);
  this.myMainPanel.add(buttonPanel,BorderLayout.SOUTH);
  this.myMainPanel.add(this.myUsagesView.getComponent(),BorderLayout.CENTER);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ProgressManager.getInstance().run(new Task.Modal(project.getComponent(Project.class),"Searching",true){
        public void run(        @NotNull() ProgressIndicator indicator){
          indicator.setIndeterminate(true);
          ReplacementView.this.myUsagesView.run(indicator);
        }
      }
);
    }
  }
);
}
