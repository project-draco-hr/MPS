{
  setModal(true);
  myModels.addAll(options);
  if (nonProjectModels != null) {
    myNonProjectModels.addAll(nonProjectModels);
  }
  DataContext dataContext=DataManager.getInstance().getDataContext();
  final MPSProject mpsProject=MPSDataKeys.MPS_PROJECT.getData(dataContext);
  BaseModelModel goToModelModel=new BaseModelModel(mpsProject){
    public NavigationItem doGetNavigationItem(    final SModelDescriptor modelDescriptor){
      return new BaseModelItem(modelDescriptor){
        public void navigate(        boolean requestFocus){
        }
      }
;
    }
    @Override public SModelDescriptor[] find(    boolean checkboxState){
      if (checkboxState) {
        return myNonProjectModels.toArray(new SModelDescriptor[myNonProjectModels.size()]);
      }
 else {
        return myModels.toArray(new SModelDescriptor[myModels.size()]);
      }
    }
    public SModelDescriptor[] find(    IScope scope){
      throw new UnsupportedOperationException("must not be used");
    }
    @Nullable public String getPromptText(){
      return "Model name:";
    }
    @Override public boolean loadInitialCheckBoxState(){
      return false;
    }
  }
;
  myChooser=new SmartChooseByNamePanel(goToModelModel,!myNonProjectModels.isEmpty());
  myChooser.invoke(new Callback(){
    public void elementChosen(    Object element){
      if (!myOkDone) {
        myOkDone=true;
        onOk();
      }
    }
  }
,ModalityState.NON_MODAL,false);
}
