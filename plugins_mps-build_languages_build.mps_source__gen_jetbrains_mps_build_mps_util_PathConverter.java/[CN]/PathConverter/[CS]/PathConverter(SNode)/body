{
  String workingDir=BuildProject_Behavior.call_getBasePath_4959435991187146924(project,Context.defaultContext());
  this.workingDirectory=normalizePath(workingDir,true);
  final List<Tuples._2<String,SNode>> result=ListSequence.fromList(new ArrayList<Tuples._2<String,SNode>>());
  final List<SNode> withoutPath=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(SLinkOperations.getTargets(project,"macros",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildFolderMacro");
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      String path=normalizePath(BuildFolderMacro_Behavior.call_evaluate_4959435991187146982(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildFolderMacro"),Context.defaultContext()),true);
      if (path != null && path.length() > 1) {
        ListSequence.fromList(result).addElement(MultiTuple.<String,SNode>from(path,SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildFolderMacro")));
      }
 else {
        ListSequence.fromList(withoutPath).addElement(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildFolderMacro"));
      }
    }
  }
);
  ListSequence.fromList(result).addElement(MultiTuple.<String,SNode>from(this.workingDirectory,(SNode)null));
  macros=ListSequence.fromList(result).sort(new ISelector<Tuples._2<String,SNode>,Integer>(){
    public Integer select(    Tuples._2<String,SNode> it){
      return it._0().length() * 2 - ((it._1() == null ? 1 : 0));
    }
  }
,false);
  macrosWithoutPath=withoutPath;
}
