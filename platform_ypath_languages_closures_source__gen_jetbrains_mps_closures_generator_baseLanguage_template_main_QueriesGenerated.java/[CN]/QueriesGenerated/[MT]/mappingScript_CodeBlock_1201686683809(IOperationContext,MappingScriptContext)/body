{
  List<SNode> bmcs=SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.BaseMethodCall");
  for (  SNode bmc : bmcs) {
    List<SNode> args=SLinkOperations.getTargets(bmc,"actualArgument",true);
    List<SNode> pdecls=SLinkOperations.getTargets(SLinkOperations.getTarget(bmc,"baseMethodDeclaration",false),"parameter",true);
    int idx=0;
    for (    SNode pdecl : pdecls) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(pdecl,"type",true),"jetbrains.mps.closures.structure.FunctionType")) {
        SNode arg=ListOperations.getElement(args,idx);
{
          IMatchingPattern pattern_1201699311648=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.closures.structure.FunctionType");
          SNode coercedNode_1201699311647=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(arg),pattern_1201699311648);
          if (coercedNode_1201699311647 != null) {
            SNode ptype=SLinkOperations.getTarget(pdecl,"type",true);
            if (SNodeOperations.isInstanceOf(ptype,"jetbrains.mps.closures.structure.FunctionType") && !(FunctionType_Behavior.call_getSignature_1199633062014(coercedNode_1201699311647).equals(FunctionType_Behavior.call_getSignature_1199633062014(ptype)))) {
              FunctionTypeUtil.addAdaptableFunctionTypeTarget(coercedNode_1201699311647,ptype,_context.getGenerator());
              FunctionTypeUtil.putPrepData(ListOperations.getElement(args,idx),FunctionType_Behavior.call_getSignature_1199633062014(ptype),_context.getGenerator());
            }
          }
        }
      }
      idx=idx + 1;
    }
  }
}
