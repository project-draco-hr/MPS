{
  Iterable<SNode> clTypes=SequenceOperations.select(SModelOperations.getNodes(_context.getSourceModel(),"jetbrains.mps.closures.structure.ClosureLiteral"),new zSelector3(null,null));
  List<SNode> funTypes=SModelOperations.getNodes(_context.getSourceModel(),"jetbrains.mps.closures.structure.FunctionType");
  List<SNode> typesList=SequenceOperations.toList(SequenceOperations.union(clTypes,funTypes));
  Collections.sort(typesList,new Comparator(){
    public int compare(    Object x,    Object y){
      return Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)x)),FunctionType_Behavior.call_getSignature_1199633062014(((SNode)y)));
    }
  }
);
  SNode prev=null;
  for (Iterator it=((List)typesList).iterator(); it.hasNext(); ) {
    SNode next=((SNode)it.next());
    if (Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)prev)),FunctionType_Behavior.call_getSignature_1199633062014(((SNode)next))) == 0) {
      it.remove();
    }
 else {
      prev=next;
    }
  }
  return typesList;
}
