{
  CompilerManagerImpl.testSetup();
  ModuleRootManager mrm=ModuleRootManager.getInstance(myFacet.getModule());
  VirtualFile[] srs=mrm.getSourceRoots();
  assertTrue(srs.length == 2);
  assertEquals("models",srs[0].getName());
  VirtualFile[] children=srs[0].getChildren();
  assertTrue(children.length == 1);
  assertEquals("simple.mps",children[0].getName());
  final VirtualFile moduleDir=srs[0].getParent();
  assertTrue(moduleDir.findChild("source_gen") == null);
  CompilerManager cm=CompilerManager.getInstance(myFacet.getModule().getProject());
  assertCompiles(cm,1,0);
  MPSCompiler2[] mpscs=cm.getCompilers(MPSCompiler2.class);
  assertSame(1,mpscs.length);
  VirtualFile outputDir=getVFS().findFileByPath(CompilerPaths.getGenerationOutputPath(mpscs[0],myFacet.getModule(),false));
  assertNotNull("Not found output dir",outputDir);
  assertExists(outputDir,"simple");
  assertExists(outputDir,"simple/Launchme.java");
  assertExists(outputDir,"simple/trace.info");
  assertTrue(outputDir.findFileByRelativePath("simple").getChildren().length == 2);
  getVFS().refresh(false);
  assertNotExists(moduleDir,"source_gen");
  VirtualFile cachesOutputDir=getVFS().findFileByPath(MPSCompilerPaths.getCachesOutputPath(mpscs[0],myFacet.getModule(),false));
  assertExists(cachesOutputDir,"simple");
  assertExists(cachesOutputDir,"simple/generated");
  assertExists(cachesOutputDir,"simple/dependencies");
}
