{
  if (a == b) {
    return a;
  }
  Set<SNode> superTypesA=MapSequence.<SNode,Set<SNode>>fromMap(subTypesToSuperTypes).get(a);
  superTypesA=(superTypesA == null ? SetSequence.<SNode>fromSet(new HashSet<SNode>()) : SetSequence.<SNode>fromSetWithValues(new HashSet<SNode>(),superTypesA));
  Set<SNode> superTypesB=MapSequence.<SNode,Set<SNode>>fromMap(subTypesToSuperTypes).get(b);
  superTypesB=(superTypesB == null ? SetSequence.<SNode>fromSet(new HashSet<SNode>()) : SetSequence.<SNode>fromSetWithValues(new HashSet<SNode>(),superTypesB));
  SetSequence.fromSet(superTypesA).addElement(a);
  SetSequence.fromSet(superTypesB).addElement(b);
  for (  SNode superTypeA : SetSequence.<SNode>fromSetWithValues(new HashSet<SNode>(),superTypesA)) {
    boolean matches=false;
    for (    SNode superTypeB : superTypesB) {
      if (superTypeA == superTypeB) {
        matches=true;
        break;
      }
    }
    if (!(matches)) {
      SetSequence.fromSet(superTypesA).removeElement(superTypeA);
    }
  }
  Set<SNode> commonSupertypes=superTypesA;
  for (  SNode commonSupertype : SetSequence.<SNode>fromSetWithValues(new HashSet<SNode>(),commonSupertypes)) {
    if (!(SetSequence.<SNode>fromSet(commonSupertypes).contains(commonSupertype))) {
      continue;
    }
    Set<SNode> superTypes=MapSequence.<SNode,Set<SNode>>fromMap(subTypesToSuperTypes).get(commonSupertype);
    if (superTypes != null) {
      for (      SNode superType : superTypes) {
        if (superType != commonSupertype) {
          SetSequence.fromSet(commonSupertypes).removeElement(superType);
        }
      }
    }
  }
  if (SetSequence.<SNode>fromSet(commonSupertypes).count() != 1) {
    return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
  }
  return SetSequence.<SNode>fromSet(commonSupertypes).first();
}
