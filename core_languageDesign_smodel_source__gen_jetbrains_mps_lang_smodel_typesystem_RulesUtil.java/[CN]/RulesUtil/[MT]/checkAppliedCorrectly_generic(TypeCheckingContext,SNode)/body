{
  if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(op),"jetbrains.mps.lang.smodel.structure.SNodeOperation")) {
    return;
  }
  final SNode leftExpression=SNodeOperation_Behavior.call_getLeftExpression_1213877508894(op);
  SNode LeftType=TypeChecker.getInstance().getTypeOf(leftExpression);
  boolean isGood=false;
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_model")) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType,new _Quotations.QuotationClass_44().createNode(typeCheckingContext),false)) {
      isGood=true;
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept")) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType,new _Quotations.QuotationClass_45().createNode(typeCheckingContext),false)) {
      isGood=true;
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_node")) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType,new _Quotations.QuotationClass_46().createNode(typeCheckingContext),false)) {
      isGood=true;
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_link")) {
    SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce_(LeftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure._LinkAccessT"),false,typeCheckingContext);
    if (linkAccessT != null) {
      isGood=SPropertyOperations.getBoolean(linkAccessT,"singularCradinality");
      if (isGood) {
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept") && !(SConceptPropertyOperations.getBoolean(op,"applicable_to_node"))) {
          isGood=TypeChecker.getInstance().getSubtypingManager().isSubtype(LeftType,new _Quotations.QuotationClass_47().createNode(typeCheckingContext));
        }
      }
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_linkList")) {
    SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce_(LeftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure._LinkAccessT"),false,typeCheckingContext);
    if (linkAccessT != null) {
      isGood=!(SPropertyOperations.getBoolean(linkAccessT,"singularCradinality"));
    }
  }
  SNode leftOperation=SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op);
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_simple_property")) {
    if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.lang.smodel.structure.SPropertyAccess")) {
      SNode propertyDecl=SLinkOperations.getTarget(leftOperation,"property",false);
      if (DataTypeDeclaration_Behavior.call_isSimple_1220268671473(SLinkOperations.getTarget(propertyDecl,"dataType",false))) {
        isGood=true;
      }
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_enum_property")) {
    if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.lang.smodel.structure.SPropertyAccess")) {
      SNode propertyDecl=SLinkOperations.getTarget(leftOperation,"property",false);
      if (DataTypeDeclaration_Behavior.call_isEnum_1220268692373(SLinkOperations.getTarget(propertyDecl,"dataType",false))) {
        isGood=true;
      }
    }
  }
  if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept_property")) {
    if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess")) {
      isGood=true;
    }
  }
  if (!(isGood)) {
    BaseIntentionProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    typeCheckingContext.reportTypeError(op,"operation is not applicable to " + LeftType,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1186067417054",intentionProvider,errorTarget);
  }
}
