{
  try {
    final Wrappers._int rootsCount=new Wrappers._int(0);
    final Wrappers._long membersOverallTime=new Wrappers._long(0);
    InternalActionsUtils.executeActionOnAllNodesInModal("find used concepts",((Project)MapSequence.fromMap(_params).get("project")),new _FunctionTypes._void_P1_E0<SNode>(){
      public void invoke(      final SNode node){
        if (SNodeOperations.isRoot(node)) {
          rootsCount.value++;
          String nodeName=node + "@" + node.getModel().getModelDescriptor().getLongName();
          boolean somethingPrinted=false;
          final Wrappers._T<List<SNode>> types=new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
          long typesCalcTime=CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0(){
            public void invoke(){
              types.value=CalcClassifiersInRootsStatistic_Action.this.calcAllClassifierTypesInRoot(node,_params);
            }
          }
,_params);
          if (typesCalcTime > 1000) {
            System.out.printf("%s: type calc time = %.3f%n",nodeName,typesCalcTime * 0.001);
            somethingPrinted=true;
          }
          final Set<SNode> classifiers=SetSequence.fromSet(new HashSet<SNode>());
          SetSequence.fromSet(classifiers).addSequence(ListSequence.fromList(types.value).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SLinkOperations.getTarget(it,"classifier",false);
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return (it != null);
            }
          }
));
          if (SetSequence.fromSet(classifiers).count() > 50) {
            System.out.printf("%s: classifier types = %d; classifiers = %d%n",nodeName,ListSequence.fromList(types.value).count(),SetSequence.fromSet(classifiers).count());
            somethingPrinted=true;
          }
          final Wrappers._T<List<SNode>> members=new Wrappers._T<List<SNode>>(ListSequence.fromList(new ArrayList<SNode>()));
          long membersCalcTime=CalcClassifiersInRootsStatistic_Action.this.calculateElapsedTime(new _FunctionTypes._void_P0_E0(){
            public void invoke(){
              members.value=CalcClassifiersInRootsStatistic_Action.this.calcAllMembersOfClassifiers(classifiers,_params);
            }
          }
,_params);
          if (ListSequence.fromList(members.value).count() > 4000) {
            System.out.printf("%s: members count = %d%n",nodeName,ListSequence.fromList(members.value).count());
            somethingPrinted=true;
          }
          if (membersCalcTime > 500) {
            System.out.printf("%s: members calc time = %.3f%n",nodeName,membersCalcTime * 0.001);
            somethingPrinted=true;
          }
          membersOverallTime.value+=membersCalcTime;
          if (somethingPrinted) {
            System.out.println();
          }
        }
      }
    }
);
    System.out.println("Members average time: " + membersOverallTime.value * 0.001 / rootsCount.value);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "CalcClassifiersInRootsStatistic",t);
  }
}
