{
  super("Escape special characters in property values");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "Escape special characters in property values";
    }
    @Override public String getAdditionalInfo(){
      return "Escape special characters in property values";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,"jetbrains.mps.lang.core.structure.BaseConcept");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      for (      IMapping<String,String> property : MapSequence.fromMap(SNodeOperations.getProperties(node))) {
        if (property.value() != null && !(property.value().equals(NameUtil.escapeInvisibleCharacters(property.value())))) {
          return true;
        }
      }
      return false;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      for (      IMapping<String,String> property : MapSequence.fromMap(SNodeOperations.getProperties(node))) {
        if (property.value() == null) {
          continue;
        }
        String escapedValue=NameUtil.escapeInvisibleCharacters(property.value());
        if (!(property.value().equals(escapedValue))) {
          SNodeAccessUtil.setProperty(node,property.key(),escapedValue);
        }
      }
    }
    @Override public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
