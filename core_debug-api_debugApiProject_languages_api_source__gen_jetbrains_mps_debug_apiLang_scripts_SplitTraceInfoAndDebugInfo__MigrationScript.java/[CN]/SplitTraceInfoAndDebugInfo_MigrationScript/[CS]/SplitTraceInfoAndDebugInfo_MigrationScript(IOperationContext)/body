{
  super("Split Trace Info And Debug Info");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Split Trace Info And Debug Info";
    }
    public String getAdditionalInfo(){
      return "Split Trace Info And Debug Info";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.plugin.structure.DebugInfoInitializer";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SLinkOperations.getTargets(node,"conceptsToDebug",true)).isNotEmpty();
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode debugInfoProvider=SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.DebugInfoProvider",null);
      SModelOperations.addRootNode(SNodeOperations.getModel(node),debugInfoProvider);
      for (      SNode conceptToDebug : ListSequence.fromList(SLinkOperations.getTargets(node,"conceptsToDebug",true))) {
        ListSequence.fromList(SLinkOperations.getTargets(debugInfoProvider,"breakpointableConcepts",true)).addElement(new SplitTraceInfoAndDebugInfo_MigrationScript.QuotationClass_f4zljy_a0a0a0c0e0a0a0b0a().createNode(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptToDebug,"createBreakpoint",true),"body",true),SLinkOperations.getTarget(conceptToDebug,"declaration",false)));
        SNodeOperations.deleteNode(SLinkOperations.getTarget(conceptToDebug,"createBreakpoint",true));
      }
      for (      SNode projectRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Debug_Project",false,new String[]{}))) {
        SNodeOperations.replaceWithAnother(projectRef,SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_Debug_Project",null));
      }
      for (      SNode nodeRef : ListSequence.fromList(SNodeOperations.getDescendants(debugInfoProvider,"jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_DebuggableNode",false,new String[]{}))) {
        SNodeOperations.replaceWithAnother(nodeRef,SConceptOperations.createNewNode("jetbrains.mps.debug.apiLang.structure.ConceptFunctionParameter_DebuggableNode",null));
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
