{
  return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModel>(){
    public Iterable<SModel> iterable(){
      return module.getModels();
    }
  }
)).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return SModelStereotype.isUserModel(it);
    }
  }
).translate(new ITranslator2<SModel,ITestNodeWrapper>(){
    public Iterable<ITestNodeWrapper> translate(    SModel model){
      return TestUtils.getModelTests(model);
    }
  }
);
}
