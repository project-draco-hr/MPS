{
  Iterable<ITestNodeWrapper> result=Sequence.fromIterable(Collections.<ITestNodeWrapper>emptyList());
  Iterable<? extends SModule> projectModules=project.getModules();
  monitor.start("Fetching tests from modules",IterableUtil.asCollection(projectModules).size());
  try {
    for (    SModule module : Sequence.fromIterable(projectModules)) {
      Iterable<ITestNodeWrapper> moduleTests=TestUtils.getModuleTests(module,monitor.subTask(1,SubProgressKind.REPLACING),breakOnFirstFound);
      result=Sequence.fromIterable(result).concat(Sequence.fromIterable(moduleTests));
      monitor.advance(1);
      if (monitor.isCanceled()) {
        return result;
      }
      if (breakOnFirstFound && Sequence.fromIterable(moduleTests).isNotEmpty()) {
        return result;
      }
    }
  }
  finally {
    monitor.done();
  }
  return result;
}
