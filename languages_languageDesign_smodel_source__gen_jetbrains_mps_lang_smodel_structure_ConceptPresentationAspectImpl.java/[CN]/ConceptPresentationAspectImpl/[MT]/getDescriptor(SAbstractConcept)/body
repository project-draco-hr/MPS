{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractNodeRefExpression;
case 1:
  return props_AbstractOperationParameter;
case 2:
return props_AbstractTypeCastExpression;
case 3:
return props_AggregationIdentity;
case 4:
return props_AllAttributeQualifier;
case 5:
return props_AsNodeOperation;
case 6:
return props_AsSConcept;
case 7:
return props_AssociationIdentity;
case 8:
return props_AttributeAccess;
case 9:
return props_AttributeQualifier;
case 10:
return props_BootstrapAwareMetaObject;
case 11:
return props_CheckedModuleQualifiedName;
case 12:
return props_CheckedModuleReference;
case 13:
return props_ChildAttributeQualifier;
case 14:
return props_ChildNodeRefExpression;
case 15:
return props_ConceptAliasOperation;
case 16:
return props_ConceptFqNameRefExpression;
case 17:
return props_ConceptId;
case 18:
return props_ConceptIdRefExpression;
case 19:
return props_ConceptIdentity;
case 20:
return props_ConceptMemberIdentity;
case 21:
return props_ConceptNodeType;
case 22:
return props_ConceptRefExpression;
case 23:
return props_ConceptReference;
case 24:
return props_ConceptShortDescriptionOperation;
case 25:
return props_ConceptSwitchStatement;
case 26:
return props_Concept_GetAllSubConcepts;
case 27:
return props_Concept_GetAllSuperConcepts;
case 28:
return props_Concept_GetDirectSuperConcepts;
case 29:
return props_Concept_GetHierarchy;
case 30:
return props_Concept_IsExactlyOperation;
case 31:
return props_Concept_IsSubConceptOfOperation;
case 32:
return props_Concept_IsSuperConceptOfOperation;
case 33:
return props_Concept_NewInstance;
case 34:
return props_ContainmentLinkId;
case 35:
return props_EnumMemberReference;
case 36:
return props_EnumMemberValueRefExpression;
case 37:
return props_EnumMember_NameOperation;
case 38:
return props_EnumMember_ValueOperation;
case 39:
return props_EqualsStructurallyExpression;
case 40:
return props_ExactConceptCase;
case 41:
return props_GeneratorIdentity;
case 42:
return props_GeneratorModulePointer;
case 43:
return props_IConceptSwitchCase;
case 44:
return props_ILinkAccess;
case 45:
return props_ILinkAccessQualifier;
case 46:
return props_ILinkAccessQualifierContainer;
case 47:
return props_ILinkQualifier;
case 48:
return props_IPropertyQualifier;
case 49:
return props_IRefConceptArg;
case 50:
return props_IReferenceOperation;
case 51:
return props_IfInstanceOfStatement;
case 52:
return props_IfInstanceOfVarReference;
case 53:
return props_IfInstanceOfVariable;
case 54:
return props_LanguageId;
case 55:
return props_LanguageIdentity;
case 56:
return props_LanguageRefExpression;
case 57:
return props_LanguageReferenceExpression;
case 58:
return props_LinkAttributeQualifier;
case 59:
return props_LinkIdRefExpression;
case 60:
return props_LinkList_AddNewChildOperation;
case 61:
return props_LinkNameRefExpression;
case 62:
return props_LinkQualifier;
case 63:
return props_LinkRefExpression;
case 64:
return props_LinkRefQualifier;
case 65:
return props_Link_SetNewChildOperation;
case 66:
return props_Link_SetTargetOperation;
case 67:
return props_ModelReferenceExpression;
case 68:
return props_Model_AddRootOperation;
case 69:
return props_Model_CreateNewNodeOperation;
case 70:
return props_Model_CreateNewRootNodeOperation;
case 71:
return props_Model_GetLongNameOperation;
case 72:
return props_Model_GetModule;
case 73:
return props_Model_NodesIncludingImportedOperation;
case 74:
return props_Model_NodesOperation;
case 75:
return props_Model_RootsIncludingImportedOperation;
case 76:
return props_Model_RootsOperation;
case 77:
return props_ModuleIdentity;
case 78:
return props_ModulePointer;
case 79:
return props_ModuleRefExpression;
case 80:
return props_ModuleReferenceExpression;
case 81:
return props_NodeAttributeQualifier;
case 82:
return props_NodePointerExpression;
case 83:
return props_NodeRefExpression;
case 84:
return props_Node_ConceptMethodCall;
case 85:
return props_Node_CopyOperation;
case 86:
return props_Node_DeleteOperation;
case 87:
return props_Node_DetachOperation;
case 88:
return props_Node_GetAllSiblingsOperation;
case 89:
return props_Node_GetAncestorOperation;
case 90:
return props_Node_GetAncestorsOperation;
case 91:
return props_Node_GetChildrenAndChildAttributesOperation;
case 92:
return props_Node_GetChildrenOperation;
case 93:
return props_Node_GetConceptOperation;
case 94:
return props_Node_GetContainingLinkOperation;
case 95:
return props_Node_GetContainingRoleOperation;
case 96:
return props_Node_GetContainingRootOperation;
case 97:
return props_Node_GetDescendantsOperation;
case 98:
return props_Node_GetIndexInParentOperation;
case 99:
return props_Node_GetModelOperation;
case 100:
return props_Node_GetNextSiblingOperation;
case 101:
return props_Node_GetNextSiblingsOperation;
case 102:
return props_Node_GetParentOperation;
case 103:
return props_Node_GetPrevSiblingOperation;
case 104:
return props_Node_GetPrevSiblingsOperation;
case 105:
return props_Node_GetReferenceOperation;
case 106:
return props_Node_GetReferencesOperation;
case 107:
return props_Node_GetReferentSearchScopeOperation;
case 108:
return props_Node_GetSConceptOperation;
case 109:
return props_Node_InsertNewNextSiblingOperation;
case 110:
return props_Node_InsertNewPrevSiblingOperation;
case 111:
return props_Node_InsertNextSiblingOperation;
case 112:
return props_Node_InsertPrevSiblingOperation;
case 113:
return props_Node_IsAttributeOperation;
case 114:
return props_Node_IsInstanceOfOperation;
case 115:
return props_Node_IsNotNullOperation;
case 116:
return props_Node_IsNullOperation;
case 117:
return props_Node_IsRoleOperation;
case 118:
return props_Node_PointerOperation;
case 119:
return props_Node_ReplaceWithAnotherOperation;
case 120:
return props_Node_ReplaceWithNewOperation;
case 121:
return props_OfConceptOperation;
case 122:
return props_OperationParm_Concept;
case 123:
return props_OperationParm_ConceptList;
case 124:
return props_OperationParm_Inclusion;
case 125:
return props_OperationParm_LinkQualifier;
case 126:
return props_OperationParm_Root;
case 127:
return props_OperationParm_SameMetaLevel;
case 128:
return props_OperationParm_StopConceptList;
case 129:
return props_PoundExpression;
case 130:
return props_PropertyAttributeQualifier;
case 131:
return props_PropertyId;
case 132:
return props_PropertyIdRefExpression;
case 133:
return props_PropertyIdentity;
case 134:
return props_PropertyNameRefExpression;
case 135:
return props_PropertyQualifier;
case 136:
return props_Property_HasValue_Enum;
case 137:
return props_Property_HasValue_Simple;
case 138:
return props_Property_RemoveOperation;
case 139:
return props_Property_SetOperation;
case 140:
return props_RefConcept_Reference;
case 141:
return props_ReferenceLinkId;
case 142:
return props_Reference_GetLinkDeclarationOperation;
case 143:
return props_Reference_GetResolveInfo;
case 144:
return props_Reference_GetRoleOperation;
case 145:
return props_Reference_GetTargetOperation;
case 146:
return props_SConceptOperation;
case 147:
return props_SConceptType;
case 148:
return props_SConceptTypeCastExpression;
case 149:
return props_SConceptTypeLiteral;
case 150:
return props_SEnumMemberOperation;
case 151:
return props_SEnumMemberType;
case 152:
return props_SEnumOperation;
case 153:
return props_SEnumOperationInvocation;
case 154:
return props_SEnum_MemberForNameOperation;
case 155:
return props_SEnum_MemberForValueOperation;
case 156:
return props_SEnum_MemberOperation;
case 157:
return props_SEnum_MembersOperation;
case 158:
return props_SLinkAccess;
case 159:
return props_SLinkImplicitSelect;
case 160:
return props_SLinkListAccess;
case 161:
return props_SModelType;
case 162:
return props_SNodeCreator;
case 163:
return props_SNodeListCreator;
case 164:
return props_SNodeListType;
case 165:
return props_SNodeOperation;
case 166:
return props_SNodeType;
case 167:
return props_SNodeTypeCastExpression;
case 168:
return props_SPropertyAccess;
case 169:
return props_SReferenceType;
case 170:
return props_SearchScopeType;
case 171:
return props_SearchScope_ContainsOperation;
case 172:
return props_SemanticDowncastExpression;
case 173:
return props_SubconceptCase;
}
throw new IllegalStateException("Unknown concept " + c);
}
