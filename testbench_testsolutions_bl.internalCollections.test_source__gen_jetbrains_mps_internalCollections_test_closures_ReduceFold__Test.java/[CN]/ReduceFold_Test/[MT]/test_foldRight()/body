{
  Iterable<Integer> in=this.input10();
  Assert.assertEquals("10987654321",Sequence.fromIterable(in).foldRight("",new IRightCombinator<Integer,String>(){
    public String combine(    Integer it,    String s){
      return "" + s + it;
    }
  }
));
  _FunctionTypes._return_P2_E0<? extends String,? super Integer,? super String> cl=new _FunctionTypes._return_P2_E0<String,Integer,String>(){
    public String invoke(    Integer it,    String s){
      return "" + s + it;
    }
  }
;
  Assert.assertEquals("10987654321",Sequence.fromIterable(in).foldRight("",cl));
  Iterable<Integer> single=Sequence.<Integer>singleton(42);
  Assert.assertEquals("bar42",Sequence.fromIterable(single).foldRight("bar",new IRightCombinator<Integer,String>(){
    public String combine(    Integer it,    String s){
      return s + it;
    }
  }
));
  Iterable<Integer> empty=Sequence.fromIterable(Collections.<Integer>emptyList());
  Assert.assertEquals("ack",Sequence.fromIterable(empty).foldRight("ack",new IRightCombinator<Integer,String>(){
    public String combine(    Integer it,    String s){
      int i=0;
      if (i == 0) {
        throw new RuntimeException();
      }
      return "foo";
    }
  }
));
}
