{
  SNode selectedActualArgument=this.getSelectedActualArgument(editorContext);
  SNode methodCall=(selectedActualArgument != null ? SNodeOperations.cast(SNodeOperations.getParent(selectedActualArgument),"jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation") : node);
  Scope scope=ModelConstraints.getReferenceDescriptor(methodCall,"method").getScope();
  String name=SPropertyOperations.getString(SLinkOperations.getTarget(methodCall,MetaAdapterFactory.getReferenceLink(new UUID(4917733117167750838l,-7710007501170303426l),1205756064662l,1205756909548l,"member")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
  Iterable<SNode> availableElements=scope.getAvailableElements((name != null ? name : ""));
  return Sequence.fromIterable(availableElements).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.as(it,"jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration");
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it != null;
    }
  }
);
}
