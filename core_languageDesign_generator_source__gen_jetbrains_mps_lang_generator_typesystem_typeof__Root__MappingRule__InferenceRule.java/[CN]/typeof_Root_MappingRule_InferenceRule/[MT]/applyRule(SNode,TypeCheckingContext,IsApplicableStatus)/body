{
  SNode template=SLinkOperations.getTarget(rule,"template",false);
  if ((template != null)) {
    SNode attrib=AttributeOperations.getAttribute(template,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation")));
    if ((attrib != null)) {
      SNode templateApplicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(attrib,"jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"),"applicableConcept",false);
      SNode ruleApplicableConcept=SLinkOperations.getTarget(rule,"applicableConcept",false);
      if ((ruleApplicableConcept != null) && (templateApplicableConcept != null)) {
        if (!(SConceptOperations.isSubConceptOf(ruleApplicableConcept,NameUtil.nodeFQName(templateApplicableConcept)))) {
{
            BaseQuickFixProvider intentionProvider=null;
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(rule,"template is not applicable to the rule concept '" + SPropertyOperations.getString(ruleApplicableConcept,"name") + "'","r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)","1183153521354",intentionProvider,errorTarget);
          }
        }
      }
    }
  }
}
