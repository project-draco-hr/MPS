{
  this.addNodeById("1998477585418805538");
  this.addNodeById("1998477585418805601");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1998477585418805553"),"jetbrains.mps.baseLanguage.structure.IfStatement")));
  params.setName("ret");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  SNode res=ref.doRefactor();
  for (  MethodMatch match : ListSequence.fromList(ref.getMatches())) {
    ExtractMethodRefactoring matchRef=ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));
    matchRef.replaceMatch(match,res);
  }
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("1998477585418805539"),"jetbrains.mps.baseLanguage.structure.ClassConcept") + "' and '"+ SNodeOperations.cast(this.getNodeById("1998477585418805637"),"jetbrains.mps.baseLanguage.structure.ClassConcept")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1998477585418805539"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1998477585418805637"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
