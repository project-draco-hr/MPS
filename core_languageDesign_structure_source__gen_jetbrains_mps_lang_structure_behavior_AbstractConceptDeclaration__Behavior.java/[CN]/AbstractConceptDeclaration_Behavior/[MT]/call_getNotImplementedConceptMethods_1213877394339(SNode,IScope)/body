{
  List<SNode> abstractMethods=new ArrayList<SNode>();
  List<SNode> implementedMethods=new ArrayList<SNode>();
  List<SNode> concepts=SConceptOperations.getAllSuperConcepts(thisNode,false);
  ListSequence.fromList(concepts).addElement(thisNode);
  for (  SNode concept : concepts) {
    SNode behavior=SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,scope,LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    for (    SNode method : SLinkOperations.getTargets(behavior,"method",true)) {
      if (SPropertyOperations.getBoolean(method,"isAbstract")) {
        ListSequence.fromList(abstractMethods).addElement(method);
      }
      if (SLinkOperations.getTarget(method,"overriddenMethod",false) != null && !(SPropertyOperations.getBoolean(method,"isAbstract"))) {
        ListSequence.fromList(implementedMethods).addElement(SLinkOperations.getTarget(method,"overriddenMethod",false));
      }
    }
  }
  ListSequence.fromList(abstractMethods).removeSequence(ListSequence.fromList(implementedMethods));
  return abstractMethods;
}
