{
  List<SNode> methods=new ArrayList<SNode>();
  if (thisNode == null) {
    return methods;
  }
  SNode contextBehaviour=SNodeOperations.getAncestor(context,"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false);
  for (  SNode concept : SConceptOperations.getConceptHierarchy(thisNode)) {
    SNode behaviour=SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,scope,LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if (behaviour != null) {
      for (      SNode method : SLinkOperations.getTargets(behaviour,"method",true)) {
        if (SLinkOperations.getTarget(method,"overriddenMethod",false) != null) {
          continue;
        }
        if (SLinkOperations.getTarget(method,"visibility",true) == null) {
          if (SNodeOperations.getModel(contextBehaviour) == SNodeOperations.getModel(method)) {
            ListSequence.fromList(methods).addElement(method);
          }
        }
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"visibility",true),"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
          if (SNodeOperations.getAncestor(method,"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false) == contextBehaviour) {
            ListSequence.fromList(methods).addElement(method);
          }
        }
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"visibility",true),"jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
          ListSequence.fromList(methods).addElement(method);
        }
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"visibility",true),"jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
          if (SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(contextBehaviour,"concept",false),NameUtil.nodeFQName(SLinkOperations.getTarget(SNodeOperations.getAncestor(method,"jetbrains.mps.lang.behavior.structure.ConceptBehavior",true,false),"concept",false)))) {
            ListSequence.fromList(methods).addElement(method);
          }
        }
      }
    }
  }
  return methods;
}
