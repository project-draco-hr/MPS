{
  Set<SNode> inLanguageAncestors=SetSequence.<SNode>fromSet(new HashSet());
  Set<SNode> notInLanguageAncestors=SetSequence.<SNode>fromSet(new HashSet());
  for (  SNode superconcept : AbstractConceptDeclaration_Behavior.call_getImmediateSuperconcepts_1222430305282(thisNode)) {
    if ((superconcept != null)) {
      if (SNodeOperations.getModel(superconcept) == SNodeOperations.getModel(thisNode)) {
        Pair<Set<SNode>,Set<SNode>> superconceptResult=AbstractConceptDeclaration_Behavior.call_getInLanguageAndNotInLanguageAncestors_5846203010383875248(superconcept);
        SetSequence.fromSet(inLanguageAncestors).addElement(superconcept);
        SetSequence.fromSet(inLanguageAncestors).addSequence(SetSequence.<SNode>fromSet(superconceptResult.o1));
        SetSequence.fromSet(notInLanguageAncestors).addSequence(SetSequence.<SNode>fromSet(superconceptResult.o2));
      }
 else {
        SetSequence.fromSet(notInLanguageAncestors).addElement(superconcept);
      }
    }
  }
  return new Pair(inLanguageAncestors,notInLanguageAncestors);
}
