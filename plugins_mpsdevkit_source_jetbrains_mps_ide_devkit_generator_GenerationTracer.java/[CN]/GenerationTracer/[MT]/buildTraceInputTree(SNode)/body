{
  final SNodeReference nodeRef=node.getReference();
  List<TracerNode> rootTracerNodes=getRootsOfInputModel(nodeRef.getModelReference());
  List<TracerNode> tracerNodes=new ArrayList<TracerNode>();
  for (  TracerNode rootTracerNode : rootTracerNodes) {
    rootTracerNode.findAllTopmost(Kind.INPUT,nodeRef,tracerNodes);
  }
  if (!tracerNodes.isEmpty()) {
    TraceNodeUI resultTracerNode;
    if (tracerNodes.size() == 1) {
      TracerNode theOne=tracerNodes.get(0);
      resultTracerNode=new TraceNodeUI(theOne);
      tracerNodes=theOne.getChildren();
    }
 else {
      resultTracerNode=new TraceNodeUI("Multiple use of same input node",Icons.COLLECTION,nodeRef);
    }
    for (    TracerNode tracerNode : tracerNodes) {
      resultTracerNode.addChild(create(tracerNode));
    }
    return resultTracerNode;
  }
  List<TemplateMappingScript> mappingScripts=myModelsProcessedByScripts.getScriptsForInput(node.getModel());
  if (mappingScripts == null)   return null;
  SModelReference reference=myModelsProcessedByScripts.getOutputForInput(node.getModel());
  if (reference == null)   return null;
  SModel outputModel=SModelRepository.getInstance().getModelDescriptor(reference);
  if (outputModel == null)   return null;
  SNode inputNode=node;
  SNode outputNode=null;
  while (inputNode != null) {
    outputNode=outputModel.getNode(inputNode.getNodeId());
    if (outputNode != null)     break;
    inputNode=inputNode.getParent();
  }
  final TraceNodeUI traceNode=new TraceNodeUI(Kind.INPUT,new jetbrains.mps.smodel.SNodePointer(node));
  for (  TemplateMappingScript mappingScript : mappingScripts) {
    TraceNodeUI childTracerNode=new TraceNodeUI(Kind.MAPPING_SCRIPT,mappingScript.getScriptNode());
    traceNode.addChild(childTracerNode);
  }
  if (outputNode != null) {
    if (inputNode == node) {
      traceNode.addChild(new TraceNodeUI(Kind.OUTPUT,new jetbrains.mps.smodel.SNodePointer(outputNode)));
    }
 else {
      traceNode.addChild(new TraceNodeUI(Kind.APPROXIMATE_OUTPUT,new jetbrains.mps.smodel.SNodePointer(outputNode)));
    }
  }
  return traceNode;
}
