{
{
    TracerNode tracerNode=findTracerNode(Kind.OUTPUT,new jetbrains.mps.smodel.SNodePointer(node));
    if (tracerNode != null) {
      return buildTracebackTree(tracerNode,0);
    }
  }
  List<TemplateMappingScript> mappingScripts=myModelsProcessedByScripts.getScriptsForOutput(node.getModel());
  if (mappingScripts == null)   return null;
  SModelReference reference=myModelsProcessedByScripts.getInputForOutput(node.getModel());
  if (reference == null)   return null;
  SModelDescriptor descriptor=SModelRepository.getInstance().getModelDescriptor(reference);
  if (descriptor == null)   return null;
  SModel inputModel=descriptor.getSModel();
  SNode outputNode=node;
  SNode inputNode=null;
  while (outputNode != null) {
    inputNode=inputModel.getNodeById(outputNode.getNodeId().toString());
    if (inputNode != null)     break;
    outputNode=outputNode.getParent();
  }
  TracerNode outputTracerNode=new TracerNode(Kind.OUTPUT,new jetbrains.mps.smodel.SNodePointer(node));
  TracerNode tracerNode=outputTracerNode;
  List<TemplateMappingScript> mappingScripts_reversed=new ArrayList<TemplateMappingScript>(mappingScripts);
  Collections.reverse(mappingScripts_reversed);
  for (  TemplateMappingScript mappingScript : mappingScripts_reversed) {
    TracerNode childTracerNode=new TracerNode(Kind.MAPPING_SCRIPT,mappingScript.getScriptNode());
    tracerNode.addChild(childTracerNode);
    tracerNode=childTracerNode;
  }
  if (inputNode != null) {
    if (outputNode == node) {
      tracerNode.addChild(new TracerNode(Kind.INPUT,new jetbrains.mps.smodel.SNodePointer(inputNode)));
    }
 else {
      tracerNode.addChild(new TracerNode(Kind.APPROXIMATE_INPUT,new jetbrains.mps.smodel.SNodePointer(inputNode)));
    }
  }
  return outputTracerNode;
}
