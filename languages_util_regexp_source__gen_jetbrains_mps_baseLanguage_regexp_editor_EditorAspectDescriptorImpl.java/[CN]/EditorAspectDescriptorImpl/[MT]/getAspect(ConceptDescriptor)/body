{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AtLeastNTimesRegexp_Editor();
case 1:
  return new BinaryRegexp_Editor();
case 2:
return new CharacterSymbolClassPart_Editor();
case 3:
return new DotRegexp_Editor();
case 4:
return new FindMatchExpression_Editor();
case 5:
return new FindMatchStatement_Editor();
case 6:
return new ForEachMatchStatement_Editor();
case 7:
return new FromNToMTimesRegexp_Editor();
case 8:
return new InlineRegexpExpression_Editor();
case 9:
return new IntersectionSymbolClassPart_Editor();
case 10:
return new IntervalSymbolClassPart_Editor();
case 11:
return new LineEndRegexp_Editor();
case 12:
return new LineStartRegexp_Editor();
case 13:
return new LiteralReplacement_Editor();
case 14:
return new LookRegexp_Editor();
case 15:
return new MatchParensRegexp_Editor();
case 16:
return new MatchRegexpExpression_Editor();
case 17:
return new MatchRegexpOperation_Editor();
case 18:
return new MatchRegexpStatement_Editor();
case 19:
return new MatchVariableReference_Editor();
case 20:
return new MatchVariableReferenceRegexp_Editor();
case 21:
return new MatchVariableReferenceReplacement_Editor();
case 22:
return new NTimesRegexp_Editor();
case 23:
return new NegativeSymbolClassRegexp_Editor();
case 24:
return new OrRegexp_Editor();
case 25:
return new ParensRegexp_Editor();
case 26:
return new PositiveSymbolClassRegexp_Editor();
case 27:
return new PredefinedSymbolClassDeclaration_Editor();
case 28:
return new PredefinedSymbolClassRegexp_Editor();
case 29:
return new PredefinedSymbolClassSymbolClassPart_Editor();
case 30:
return new PredefinedSymbolClasses_Editor();
case 31:
return new Regexp_Editor();
case 32:
return new RegexpDeclaration_Editor();
case 33:
return new RegexpDeclarationReferenceRegexp_Editor();
case 34:
return new Regexps_Editor();
case 35:
return new ReplaceBlock_Editor();
case 36:
return new ReplaceRegexpOperation_Editor();
case 37:
return new ReplaceWithRegexpExpression_Editor();
case 38:
return new ReplaceWithRegexpOperation_Editor();
case 39:
return new SeqRegexp_Editor();
case 40:
return new SplitExpression_Editor();
case 41:
return new SplitOperation_Editor();
case 42:
return new StringLiteralRegexp_Editor();
case 43:
return new UnaryRegexp_Editor();
case 44:
return new UnicodeCharacterRegexp_Editor();
default :
}
return null;
}
