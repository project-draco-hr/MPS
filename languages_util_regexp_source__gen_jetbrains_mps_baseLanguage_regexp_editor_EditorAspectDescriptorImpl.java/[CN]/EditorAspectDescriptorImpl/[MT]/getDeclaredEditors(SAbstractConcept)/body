{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AtLeastNTimesRegexp_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new BinaryRegexp_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new CharacterSymbolClassPart_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new DotRegexp_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new FindMatchExpression_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new FindMatchStatement_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new ForEachMatchStatement_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new FromNToMTimesRegexp_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new InlineRegexpExpression_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntersectionSymbolClassPart_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntervalSymbolClassPart_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new LineEndRegexp_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new LineStartRegexp_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new LiteralReplacement_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new LookRegexp_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchParensRegexp_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchRegexpExpression_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchRegexpOperation_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchRegexpStatement_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchVariableReference_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchVariableReferenceRegexp_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new MatchVariableReferenceReplacement_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new NTimesRegexp_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new NegativeSymbolClassRegexp_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new OrRegexp_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new ParensRegexp_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new PositiveSymbolClassRegexp_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassDeclaration_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassRegexp_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassSymbolClassPart_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClasses_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new Regexp_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new RegexpDeclaration_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new RegexpDeclarationReferenceRegexp_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new Regexps_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReplaceBlock_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReplaceRegexpOperation_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReplaceWithRegexpExpression_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReplaceWithRegexpOperation_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new SeqRegexp_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new SplitExpression_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new SplitOperation_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringLiteralRegexp_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnaryRegexp_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new UnicodeCharacterRegexp_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
