{
  Map<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange> changes=MapSequence.fromMap(new HashMap<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange>());
  for (  PsiFile file : Sequence.fromIterable(event.getCreated())) {
    if (!(file instanceof PsiJavaFile)) {
      continue;
    }
    PsiDirectory parent=file.getParent();
    PsiJavaStubDataSource dataSource=MapSequence.fromMap(myDataSources).get(parent);
    if (dataSource == null) {
      continue;
    }
    PsiJavaStubModelRoot.PsiChange change=MapSequence.fromMap(changes).get(dataSource);
    if (change == null) {
      change=new PsiJavaStubModelRoot.PsiChange();
      MapSequence.fromMap(changes).put(dataSource,change);
    }
    SetSequence.fromSet(change.created).addElement(file);
  }
  for (  PsiFile file : Sequence.fromIterable(event.getRemoved())) {
    if (!(file instanceof PsiJavaFile)) {
      continue;
    }
    PsiDirectory parent=file.getParent();
    PsiJavaStubDataSource dataSource=MapSequence.fromMap(myDataSources).get(parent);
    if (dataSource == null) {
      continue;
    }
    PsiJavaStubModelRoot.PsiChange change=MapSequence.fromMap(changes).get(dataSource);
    if (change == null) {
      change=new PsiJavaStubModelRoot.PsiChange();
      MapSequence.fromMap(changes).put(dataSource,change);
    }
    SetSequence.fromSet(change.removed).addElement(file);
  }
  for (  PsiFile file : SetSequence.fromSet(event.getChanged().keySet())) {
    if (!(file instanceof PsiJavaFile)) {
      continue;
    }
    PsiDirectory parent=file.getParent();
    PsiJavaStubDataSource dataSource=MapSequence.fromMap(myDataSources).get(parent);
    if (dataSource == null) {
      continue;
    }
    Set<PsiElement> changeSet=SetSequence.fromSet(new HashSet<PsiElement>());
    for (    PsiElement elem : SetSequence.fromSet(event.getChanged().get(file))) {
      if (!(filter(elem))) {
        continue;
      }
      SetSequence.fromSet(changeSet).addElement(elem);
    }
    PsiJavaStubModelRoot.PsiChange change=MapSequence.fromMap(changes).get(dataSource);
    if (change == null) {
      change=new PsiJavaStubModelRoot.PsiChange();
      MapSequence.fromMap(changes).put(dataSource,change);
    }
    MapSequence.fromMap(change.changed).put(file,changeSet);
  }
  for (  IMapping<PsiJavaStubDataSource,PsiJavaStubModelRoot.PsiChange> notification : SetSequence.fromSet(MapSequence.fromMap(changes).mappingsSet())) {
    PsiJavaStubDataSource ds=notification.key();
    PsiJavaStubModelRoot.PsiChange change=notification.value();
    if (!(change.isEmpty())) {
      ds.dispatchEvent(change);
    }
  }
}
