{
  if (!TextGen.canGenerateTextFor(myStartNode)) {
    myState=Status.Empty;
    return;
  }
  myTraceCollector=new TraceInfoCollector();
  TextBuffer trueBuffer=new TextBufferImpl();
  myLayoutBuilder.prepareBuffer(trueBuffer);
  TextGenBuffer legacyBuffer=TextGen.newUserObjectHolder(getStartNode(),true,trueBuffer);
  HashSet<String> dependenciesSet=new HashSet<String>();
  HashSet<String> extendsSet=new HashSet<String>();
  legacyBuffer.putUserObject(TextGen.DEPENDENCY,dependenciesSet);
  legacyBuffer.putUserObject(TextGen.EXTENDS,extendsSet);
  TextGenTransitionContext tgContext=new TextGenTransitionContext(myStartNode,legacyBuffer,trueBuffer);
  TraceInfoGenerationUtil.setTraceInfoCollector(tgContext,myTraceCollector);
  TextGenSupport tgs=new TextGenSupport(tgContext);
  tgs.appendNode(myStartNode);
  final BufferSnapshot textSnapshot=myLayoutBuilder.prepareSnapshot(trueBuffer);
  myTraceCollector.populatePositions(textSnapshot);
  final String nodeFQName=NameUtil.nodeFQName(myStartNode);
  dependenciesSet.removeAll(extendsSet);
  dependenciesSet.remove(nodeFQName);
  dependenciesSet.remove(null);
  myDependencies=new ArrayList<String>(dependenciesSet);
  extendsSet.remove(nodeFQName);
  extendsSet.remove(null);
  myExtends=new ArrayList<String>(extendsSet);
  Collections.sort(myDependencies);
  Collections.sort(myExtends);
  myOutcome=textSnapshot.getText().toString();
  if (legacyBuffer.hasErrors()) {
    myState=Status.Failed;
  }
 else {
    myState=Status.Generated;
  }
}
