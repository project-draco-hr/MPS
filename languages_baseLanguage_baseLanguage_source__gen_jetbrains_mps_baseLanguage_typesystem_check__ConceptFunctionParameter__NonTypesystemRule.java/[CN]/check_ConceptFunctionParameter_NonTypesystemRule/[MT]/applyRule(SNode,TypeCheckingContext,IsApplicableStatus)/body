{
  SNode conceptFunction=SNodeOperations.getNodeAncestor(parameter,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x108bbca0f48L,"jetbrains.mps.baseLanguage.structure.ConceptFunction"),false,false,true);
  if (SNodeOperations.isInstanceOf(conceptFunction,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10c63f4f3f3L,"jetbrains.mps.baseLanguage.structure.Closure"))) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"concept function parameter can not be used in closure","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1197313614703",null,errorTarget);
    }
  }
 else {
    final SAbstractConcept parameterConcept=SNodeOperations.getConcept(parameter);
    Iterable<SNode> seq=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),conceptFunction,"virtual_getParameters_1213877374450",new Object[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(parameterConcept),SNodeOperations.asSConcept(it));
      }
    }
);
    if (Sequence.fromIterable(seq).isEmpty() && BehaviorReflection.invokeVirtual(Boolean.TYPE,parameter,"virtual_needConceptFunction_1236687728308",new Object[]{})) {
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"not applicable in this context","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1197313958459",null,errorTarget);
      }
    }
  }
}
