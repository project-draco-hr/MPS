{
  myLastDependencies=null;
  IFile targetDir=FileSystem.getInstance().getFileByPath(SModuleOperations.getOutputPathFor(inputModel));
  Assert.assertTrue(status.isOk());
  Assert.assertTrue("should be called once",timesCalled++ == 0);
  if (myCheckIncremental) {
    GenerationDependencies dep=status.getDependencies();
    if (dep.getFromCacheCount() + dep.getSkippedCount() == 0) {
      final StringBuilder sb=new StringBuilder("Not optimized:\n");
      IntermediateCacheHelper cacheHelper=new IntermediateCacheHelper(myGenOptions.getIncrementalStrategy(),new GenerationPlan(inputModel),new NullPerformanceTracer());
      new IncrementalGenerationHandler(inputModel,myProject,myGenOptions,cacheHelper,new IncrementalReporter(){
        @Override public void report(        String message){
          sb.append(message);
          sb.append('\n');
        }
      }
);
      sb.append('\n');
      Assert.fail(sb.toString());
    }
  }
  if (status.isOk()) {
    myLastDependencies=status.getDependencies();
    myFilesDir=FileGenerationUtil.getDefaultOutputDir(inputModel,targetDir);
    CollectingStreamHandler toStringHandler=new CollectingStreamHandler(generatedContent,getExistingContent());
    TextGeneratorEngine tgEngine=new TextGeneratorEngine(new LogHandler(Logger.getLogger(getClass())));
    IStatus textGenStatus=new Status.ERROR("");
    try {
      final TextGenResult tgr=tgEngine.generateText(status.getOutputModel()).get();
      TextFacility2 tf=new TextFacility2(status,tgr);
      tf.prepare();
      textGenStatus=tf.serializeOutcome(toStringHandler);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Assert.fail(ex.toString());
    }
 finally {
      tgEngine.shutdown();
    }
    Assert.assertFalse(textGenStatus.isError());
  }
  return true;
}
