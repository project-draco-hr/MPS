{
  List<SNode> replaces=SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.build.packaging.structure.Replace",false);
  Set<SNode> vars=new HashSet<SNode>();
  for (  SNode replace : replaces) {
    List<SNode> variableReferences=SNodeOperations.getDescendants(replace,"jetbrains.mps.build.packaging.structure.VariableReference",false);
    for (    SNode ref : variableReferences) {
      if (!(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"builtInVariable",true)).contains(SLinkOperations.getTarget(ref,"variable",false)))) {
        vars.add(SLinkOperations.getTarget(ref,"variable",false));
      }
    }
  }
  List<SNode> varList=new ArrayList<SNode>();
  ListSequence.fromList(varList).addSequence(Sequence.fromIterable(vars));
  ListSequence.fromList(varList).sort(new ISelector<SNode,Comparable<?>>(){
    public Comparable<?> select(    SNode it){
      return it.getProperty("antName");
    }
  }
,true);
  return varList;
}
