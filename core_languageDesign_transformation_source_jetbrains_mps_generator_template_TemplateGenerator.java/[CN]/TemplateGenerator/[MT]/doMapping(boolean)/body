{
  checkMonitorCanceled();
  myRuleManager=new RuleManager(this);
  if (isPrimary) {
    myRuleManager.applyCreateRootRules();
  }
  myRuleManager.applyRoot_MappingRules();
  checkMonitorCanceled();
  getGeneratorSessionContext().clearCopiedRootsSet();
  List<SNode> copiedOutputRoots=copyRootsFromInputModel(myRuleManager);
  for (  SNode copiedOutputRoot : copiedOutputRoots) {
    getGeneratorSessionContext().registerCopiedRoot(copiedOutputRoot);
    myOutputModel.addRoot(copiedOutputRoot);
  }
  for (  SNode outputRootNode : copiedOutputRoots) {
    checkMonitorCanceled();
    SNode inputRootNode=findInputNodeById(outputRootNode.getSNodeId());
    myRuleManager.applyReductionRules(inputRootNode,outputRootNode);
  }
  myRuleManager.applyWeaving_MappingRules();
  myDelayedChanges.doAllChanges();
  for (  SNode copiedRoot : copiedOutputRoots) {
    checkMonitorCanceled();
    invalidateReferencesInCopiedNode(copiedRoot);
  }
  revalidateAllReferences();
  checkMonitorCanceled();
}
