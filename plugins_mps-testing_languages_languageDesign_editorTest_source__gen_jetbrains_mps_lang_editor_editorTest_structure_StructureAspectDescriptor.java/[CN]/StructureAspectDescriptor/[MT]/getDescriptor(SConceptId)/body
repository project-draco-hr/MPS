{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAttractsFocusBlock;
case 1:
  return myConceptAttributeChild;
case 2:
return myConceptAttributeWithChildren;
case 3:
return myConceptAttributedConcept;
case 4:
return myConceptBinaryExpression;
case 5:
return myConceptBracesBlock;
case 6:
return myConceptBracesStubBlock;
case 7:
return myConceptClassReference;
case 8:
return myConceptCollapsedByDefault;
case 9:
return myConceptCollapsedConditionally;
case 10:
return myConceptCollapsibleConcept;
case 11:
return myConceptComposition;
case 12:
return myConceptDelTestAbstractChild;
case 13:
return myConceptDelTestChild1;
case 14:
return myConceptDelTestChildContainer;
case 15:
return myConceptDelTestRoot;
case 16:
return myConceptFoldingContainer;
case 17:
return myConceptIBaseTestBlock;
case 18:
return myConceptInitAbstractChild;
case 19:
return myConceptInitChildWithDirectCycle_card1;
case 20:
return myConceptInitChildWithDirectCycle_card1n;
case 21:
return myConceptInitChildWithIndirectCycle_card1;
case 22:
return myConceptInitChildWithIndirectCycle_card1n;
case 23:
return myConceptInitChildWithTwoSameConceptChildren;
case 24:
return myConceptInitContainer;
case 25:
return myConceptInitGrandChild;
case 26:
return myConceptInitGrandChildWithIndirectCycle_card1;
case 27:
return myConceptInitGrandChildWithIndirectCycle_card1n;
case 28:
return myConceptInspectorBlock;
case 29:
return myConceptIntegerLiteral;
case 30:
return myConceptNonEmptyProperty;
case 31:
return myConceptNotEditableVaraileReference;
case 32:
return myConceptPlusExpression;
case 33:
return myConceptReferenceAnnotataion;
case 34:
return myConceptSelectionChild;
case 35:
return myConceptSelectionContainer;
case 36:
return myConceptSideTranformWrapper;
case 37:
return myConceptSimplePropertyAttribute;
case 38:
return myConceptSimplePropertyContainer;
case 39:
return myConceptStubBlock;
case 40:
return myConceptStyleChild;
case 41:
return myConceptStyleParent;
case 42:
return myConceptSubstMiddlewareChild;
case 43:
return myConceptSubstTestAbstractChild;
case 44:
return myConceptSubstTestBooleanPropertyChild;
case 45:
return myConceptSubstTestEnumPropertyChild;
case 46:
return myConceptSubstTestRoot;
case 47:
return myConceptTestBlockList;
case 48:
return myConceptVariableDeclarationBlock;
case 49:
return myConceptVariableDeclarationReference;
case 50:
return myConceptVerticalLayoutBlockList;
default :
throw new IllegalStateException();
}
}
