{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ac.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAttractsFocusBlock;
      }
    break;
case 1:
  if (true) {
    return myConceptBinaryExpression;
  }
break;
case 2:
if (true) {
return myConceptBracesBlock;
}
break;
case 3:
if (true) {
return myConceptBracesStubBlock;
}
break;
case 4:
if (true) {
return myConceptClassReference;
}
break;
case 5:
if (true) {
return myConceptCollapsedByDefault;
}
break;
case 6:
if (true) {
return myConceptCollapsedConditionally;
}
break;
case 7:
if (true) {
return myConceptCollapsibleConcept;
}
break;
case 8:
if (true) {
return myConceptComposition;
}
break;
case 9:
if (true) {
return myConceptDelTestAbstractChild;
}
break;
case 10:
if (true) {
return myConceptDelTestChild1;
}
break;
case 11:
if (true) {
return myConceptDelTestChildContainer;
}
break;
case 12:
if (true) {
return myConceptDelTestRoot;
}
break;
case 13:
if (true) {
return myConceptFoldingContainer;
}
break;
case 14:
if (true) {
return myConceptIBaseTestBlock;
}
break;
case 15:
if (true) {
return myConceptInitAbstractChild;
}
break;
case 16:
if (true) {
return myConceptInitChildWithDirectCycle_card1;
}
break;
case 17:
if (true) {
return myConceptInitChildWithDirectCycle_card1n;
}
break;
case 18:
if (true) {
return myConceptInitChildWithIndirectCycle_card1;
}
break;
case 19:
if (true) {
return myConceptInitChildWithIndirectCycle_card1n;
}
break;
case 20:
if (true) {
return myConceptInitChildWithTwoSameConceptChildren;
}
break;
case 21:
if (true) {
return myConceptInitContainer;
}
break;
case 22:
if (true) {
return myConceptInitGrandChild;
}
break;
case 23:
if (true) {
return myConceptInitGrandChildWithIndirectCycle_card1;
}
break;
case 24:
if (true) {
return myConceptInitGrandChildWithIndirectCycle_card1n;
}
break;
case 25:
if (true) {
return myConceptInspectorBlock;
}
break;
case 26:
if (true) {
return myConceptIntegerLiteral;
}
break;
case 27:
if (true) {
return myConceptNonEmptyProperty;
}
break;
case 28:
if (true) {
return myConceptNotEditableVaraileReference;
}
break;
case 29:
if (true) {
return myConceptPlusExpression;
}
break;
case 30:
if (true) {
return myConceptReferenceAnnotataion;
}
break;
case 31:
if (true) {
return myConceptSelectionChild;
}
break;
case 32:
if (true) {
return myConceptSelectionContainer;
}
break;
case 33:
if (true) {
return myConceptSideTranformWrapper;
}
break;
case 34:
if (true) {
return myConceptSimplePropertyAttribute;
}
break;
case 35:
if (true) {
return myConceptSimplePropertyContainer;
}
break;
case 36:
if (true) {
return myConceptStubBlock;
}
break;
case 37:
if (true) {
return myConceptStyleChild;
}
break;
case 38:
if (true) {
return myConceptStyleParent;
}
break;
case 39:
if (true) {
return myConceptSubstMiddlewareChild;
}
break;
case 40:
if (true) {
return myConceptSubstTestAbstractChild;
}
break;
case 41:
if (true) {
return myConceptSubstTestBooleanPropertyChild;
}
break;
case 42:
if (true) {
return myConceptSubstTestEnumPropertyChild;
}
break;
case 43:
if (true) {
return myConceptSubstTestRoot;
}
break;
case 44:
if (true) {
return myConceptTestBlockList;
}
break;
case 45:
if (true) {
return myConceptVariableDeclarationBlock;
}
break;
case 46:
if (true) {
return myConceptVariableDeclarationReference;
}
break;
case 47:
if (true) {
return myConceptVerticalLayoutBlockList;
}
break;
default :
}
}
return null;
}
