{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.AttractsFocusBlock","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{"child"},new boolean[]{false},false,false,"attracts focus","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{"left","right"},new boolean[]{false,false},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesBlock","jetbrains.mps.lang.editor.editorTest.structure.TestBlockList",false,new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.BracesStubBlock","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"braces stub","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.InspectorBlock","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{"block"},new boolean[]{false},false,false,"inspector","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.IntegerLiteral","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NonEmptyProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"non-empty-property","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.NotEditableVaraileReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{"variableDeclaration"},new String[]{},new boolean[]{},false,false,"{<{variableDeclaration}>} not editable","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.PlusExpression","jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression",false,new String[]{"jetbrains.mps.lang.editor.editorTest.structure.BinaryExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.ReferenceAnnotataion","jetbrains.mps.lang.core.structure.LinkAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.LinkAttribute"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.SideTranformWrapper","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{"rightOpen"},new String[]{},new String[]{"child"},new boolean[]{false},false,false,"side-transform-wrapper","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.StubBlock","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"stub","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.TestBlockList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{"statement"},new boolean[]{true},false,false,"{","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{"var"},new String[]{},new boolean[]{},false,false,"","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.editor.editorTest.structure.VerticalLayoutBlockList","jetbrains.mps.lang.editor.editorTest.structure.TestBlockList",false,new String[]{"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList","jetbrains.mps.lang.editor.editorTest.structure.IBaseTestBlock"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"vericalLayout","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
