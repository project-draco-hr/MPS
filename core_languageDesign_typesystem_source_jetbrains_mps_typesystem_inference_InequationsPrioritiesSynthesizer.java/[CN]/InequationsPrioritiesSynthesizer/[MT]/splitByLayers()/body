{
  List<EquationInfo> allEqInfos=new ArrayList<EquationInfo>(myAllInequations.keySet());
  Map<Pair<String,String>,Set<EquationInfo>> ineqIdsToIneqs=new HashMap<Pair<String,String>,Set<EquationInfo>>();
  for (  EquationInfo equationInfo : allEqInfos) {
    Pair<String,String> id=new Pair<String,String>(equationInfo.getRuleModel(),equationInfo.getRuleId());
    Set<EquationInfo> equationInfos=ineqIdsToIneqs.get(id);
    if (equationInfos == null) {
      equationInfos=new HashSet<EquationInfo>();
      ineqIdsToIneqs.put(id,equationInfos);
    }
    equationInfos.add(equationInfo);
  }
  Map<EquationInfo,Set<EquationInfo>> references=new HashMap<EquationInfo,Set<EquationInfo>>();
  Map<EquationInfo,Set<EquationInfo>> backReferences=new HashMap<EquationInfo,Set<EquationInfo>>();
  for (  EquationInfo equationInfo : allEqInfos) {
    Set<EquationInfo> nextEquationsInfos=new HashSet<EquationInfo>();
    for (    Pair<String,String> ineqsAfter : equationInfo.getInequationIdsAfter()) {
      Set<EquationInfo> equationInfos=ineqIdsToIneqs.get(ineqsAfter);
      if (equationInfos != null) {
        nextEquationsInfos.addAll(equationInfos);
      }
    }
    Set<EquationInfo> prevEquationsInfos=new HashSet<EquationInfo>();
    for (    Pair<String,String> ineqsBefore : equationInfo.getInequationIdsBefore()) {
      Set<EquationInfo> equationInfos=ineqIdsToIneqs.get(ineqsBefore);
      if (equationInfos != null) {
        prevEquationsInfos.addAll(equationInfos);
      }
    }
    for (    EquationInfo nextInfo : nextEquationsInfos) {
      Set<EquationInfo> equationInfos=references.get(equationInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        references.put(equationInfo,equationInfos);
      }
      equationInfos.add(nextInfo);
      equationInfos=backReferences.get(nextInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        backReferences.put(nextInfo,equationInfos);
      }
      equationInfos.add(equationInfo);
    }
    for (    EquationInfo prevInfo : prevEquationsInfos) {
      Set<EquationInfo> equationInfos=references.get(prevInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        references.put(prevInfo,equationInfos);
      }
      equationInfos.add(equationInfo);
      equationInfos=backReferences.get(equationInfo);
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        backReferences.put(equationInfo,equationInfos);
      }
      equationInfos.add(prevInfo);
    }
  }
  List<Set<EquationInfo>> byRanks=new ArrayList<Set<EquationInfo>>(4);
  while (!allEqInfos.isEmpty()) {
    Set<EquationInfo> nextLayer=new HashSet<EquationInfo>();
    for (    EquationInfo equationInfo : new HashSet<EquationInfo>(allEqInfos)) {
      Set<EquationInfo> prevEquationInfos=backReferences.get(equationInfo);
      if (prevEquationInfos == null || prevEquationInfos.isEmpty()) {
        nextLayer.add(equationInfo);
      }
    }
    if (nextLayer.isEmpty()) {
      LOG.error("cyclic priorities found, single priority group will be created");
      for (      EquationInfo equationInfo : myAllInequations.keySet()) {
        mySyntheticRanks.put(equationInfo,0);
      }
      return;
    }
    byRanks.add(nextLayer);
    for (    EquationInfo equationInfo : nextLayer) {
      Set<EquationInfo> nextEquationInfos=references.get(equationInfo);
      if (nextEquationInfos != null) {
        for (        EquationInfo nextEquationInfo : nextEquationInfos) {
          Set<EquationInfo> backRefs=backReferences.get(nextEquationInfo);
          if (backRefs != null) {
            backRefs.remove(equationInfo);
          }
        }
      }
      allEqInfos.remove(equationInfo);
    }
  }
  int syntheticRank=0;
  for (  Set<EquationInfo> equationInfosSameRank : byRanks) {
    Set<EquationInfo>[] byPriorities=new Set[5];
    for (    EquationInfo equationInfo : equationInfosSameRank) {
      int priority=equationInfo.getInequationPriority();
      if (priority == 500) {
        priority=4;
      }
      Set<EquationInfo> equationInfos=byPriorities[priority];
      if (equationInfos == null) {
        equationInfos=new HashSet<EquationInfo>();
        byPriorities[priority]=equationInfos;
      }
      equationInfos.add(equationInfo);
    }
    for (    Set<EquationInfo> equationInfos : byPriorities) {
      if (equationInfos != null && !equationInfos.isEmpty()) {
        for (        EquationInfo equationInfo : equationInfos) {
          mySyntheticRanks.put(equationInfo,syntheticRank);
        }
        syntheticRank++;
      }
    }
  }
}
