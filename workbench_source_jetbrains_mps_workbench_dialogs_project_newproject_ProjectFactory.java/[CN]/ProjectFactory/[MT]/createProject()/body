{
  final String[] error=new String[]{null};
  ProgressManager.getInstance().run(new Task.Modal(myCurrentProject,"Creating",false){
    public void run(    @NotNull() ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      error[0]=createDirs();
      if (error[0] != null)       return;
      String projectFilePath=myOptions.getProjectPath() + File.separator + myOptions.getProjectName()+ MPSExtentions.DOT_MPS_PROJECT;
      myCreatedProject=ProjectManagerEx.getInstanceEx().newProject(myOptions.getProjectName(),projectFilePath,true,false);
    }
  }
);
  if (error[0] != null) {
    throw new ProjectNotCreatedException(error[0]);
  }
  myCreatedProject.save();
  final MPSProject mpsProject=myCreatedProject.getComponent(MPSProject.class);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      if (myOptions.getCreateNewLanguage()) {
        myCreatedLanguage=createNewLanguage(mpsProject);
        mpsProject.addProjectModule(myCreatedLanguage);
        myCreatedLanguage.save();
      }
      if (myOptions.getCreateNewSolution()) {
        myCreatedSolution=createNewSolution(mpsProject);
        myCreatedSolution.save();
        mpsProject.addProjectModule(myCreatedSolution);
      }
      if (myCreatedSolution != null && myCreatedLanguage != null) {
        myCreatedSolution.addUsedLanguage(myCreatedLanguage.getModuleReference());
        myCreatedSolution.save();
        if (myOptions.getCreateModel()) {
          EditableSModelDescriptor model=myCreatedSolution.createModel(SModelFqName.fromString(myCreatedSolution.getModuleReference().getModuleFqName() + ".sandbox"),myCreatedSolution.getSModelRoots().get(0));
          model.getSModel().addLanguage(myCreatedLanguage.getModuleReference());
          model.save();
        }
      }
    }
  }
);
  return myCreatedProject;
}
