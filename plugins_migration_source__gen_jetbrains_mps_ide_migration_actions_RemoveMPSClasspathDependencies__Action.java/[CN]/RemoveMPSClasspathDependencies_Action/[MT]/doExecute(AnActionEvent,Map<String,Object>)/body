{
  try {
    final SModelRepository repo=SModelRepository.getInstance();
    List<SModelDescriptor> mpsclasspathModels=repo.getModelDescriptors(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("37a3367b-1fb2-44d8-aa6b-18075e74e003")));
    final Set<SModelReference> toRemove=SetSequence.fromSetWithValues(new HashSet<SModelReference>(),ListSequence.fromList(mpsclasspathModels).select(new ISelector<SModelDescriptor,SModelReference>(){
      public SModelReference select(      SModelDescriptor it){
        return it.getSModelReference();
      }
    }
));
    Iterable<SModelDescriptor> models=(((List<IModule>)MapSequence.fromMap(_params).get("modules")) == null || ((List<IModule>)MapSequence.fromMap(_params).get("modules")).isEmpty() ? repo.getModelDescriptors() : ListSequence.fromList(((List<IModule>)((List<IModule>)MapSequence.fromMap(_params).get("modules")))).translate(new ITranslator2<IModule,SModelDescriptor>(){
      public Iterable<SModelDescriptor> translate(      IModule it){
        return repo.getModelDescriptors(it);
      }
    }
));
    for (    SModelDescriptor model : Sequence.fromIterable(models)) {
      if (!(model instanceof EditableSModelDescriptor)) {
        continue;
      }
      List<SModel.ImportElement> importElements=model.getSModel().importedModels();
      for (      SModelReference modelRef : ListSequence.fromList(importElements).select(new ISelector<SModel.ImportElement,SModelReference>(){
        public SModelReference select(        SModel.ImportElement it){
          return it.getModelReference();
        }
      }
).where(new IWhereFilter<SModelReference>(){
        public boolean accept(        SModelReference it){
          return SetSequence.fromSet(toRemove).contains(it);
        }
      }
).toGenericArray(SModelReference.class)) {
        model.getSModel().deleteModelImport(modelRef);
      }
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "RemoveMPSClasspathDependencies",t);
    }
  }
}
