{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new GenerationContextOp_Base_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new GenerationContextOp_ContextVarRef_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_CopyWithTrace_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_CreateUniqueName_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_DirtyNode_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GenParameterRef_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetCopiedOutputByInput_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetExport_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetOriginalCopiedInputByOutput_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetOutputByLabel_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetOutputByLabelAndInput_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetOutputByLabelAndInputAndReferenceScope_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetOutputListByLabelAndInput_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_GetPrevInputByLabel_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_LinkPatternRef_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_NodePatternRef_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_ParameterRef_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_PropertyPatternRef_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_RegisterLabel_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_ShowMessageBase_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_UserObjectAccessBase_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new GenerationContextOp_VarRef_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
