{
  try {
    int i=0;
    for (    SModelDescriptor d : SModelRepository.getInstance().getModelDescriptors()) {
      if (!(d instanceof EditableSModelDescriptor)) {
        continue;
      }
      if (!(SModelStereotype.isUserModel(d))) {
        continue;
      }
      if (d == null) {
        continue;
      }
      IModule module=d.getModule();
      if (module == null) {
        continue;
      }
      for (      SNode node : d.getSModel().nodes()) {
        for (        SReference ref : node.getReferences()) {
          SModelId modelId=ref.getTargetSModelReference().getSModelId();
          SNodeId nodeId=ref.getTargetNodeId();
          if (modelId instanceof SModelId.RegularSModelId) {
            continue;
          }
          if (ref.getTargetNode() != null) {
            continue;
          }
          for (          SModelDescriptor md : module.getScope().getModelDescriptors()) {
            SModelId tryModelId=md.getSModelReference().getSModelId();
            if (tryModelId instanceof SModelId.RegularSModelId) {
              continue;
            }
            if (!(ReResolveStubRefs_Action.this.matches(((SModelId.ForeignSModelId)modelId).getId(),((SModelId.ForeignSModelId)tryModelId).getId(),_params))) {
              continue;
            }
            if (md.getSModel().getNodeById(nodeId) == null) {
              continue;
            }
            ref.setTargetSModelReference(md.getSModelReference());
            d.getSModel().addModelImport(md.getSModelReference(),false);
            d.getSModel().deleteModelImport(ref.getTargetSModelReference());
            i++;
            break;
          }
        }
      }
    }
    JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),i + " problems fixed");
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "ReResolveStubRefs",t);
  }
}
