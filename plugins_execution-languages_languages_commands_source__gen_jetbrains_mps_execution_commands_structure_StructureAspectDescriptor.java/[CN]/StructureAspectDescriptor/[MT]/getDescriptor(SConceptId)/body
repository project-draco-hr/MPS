{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.BuilderBlockStatement:
    return myConceptBuilderBlockStatement;
case LanguageConceptSwitch.BuilderParameter:
  return myConceptBuilderParameter;
case LanguageConceptSwitch.CommandBuilderExpression:
return myConceptCommandBuilderExpression;
case LanguageConceptSwitch.CommandDebuggerOperation:
return myConceptCommandDebuggerOperation;
case LanguageConceptSwitch.CommandDeclaration:
return myConceptCommandDeclaration;
case LanguageConceptSwitch.CommandMethod:
return myConceptCommandMethod;
case LanguageConceptSwitch.CommandParameterAssignment:
return myConceptCommandParameterAssignment;
case LanguageConceptSwitch.CommandParameterDeclaration:
return myConceptCommandParameterDeclaration;
case LanguageConceptSwitch.CommandParameterReference:
return myConceptCommandParameterReference;
case LanguageConceptSwitch.CommandPartLengthOperation:
return myConceptCommandPartLengthOperation;
case LanguageConceptSwitch.CommandPartToListOperation:
return myConceptCommandPartToListOperation;
case LanguageConceptSwitch.CommandProcessType:
return myConceptCommandProcessType;
case LanguageConceptSwitch.CommandReferenceExpression:
return myConceptCommandReferenceExpression;
case LanguageConceptSwitch.CommandType:
return myConceptCommandType;
case LanguageConceptSwitch.DebuggerSettingsCommandParameterDeclaration:
return myConceptDebuggerSettingsCommandParameterDeclaration;
case LanguageConceptSwitch.ExecuteCommandPart:
return myConceptExecuteCommandPart;
case LanguageConceptSwitch.ExplicitCommandParameterDeclaration:
return myConceptExplicitCommandParameterDeclaration;
case LanguageConceptSwitch.KeyValueCommandPart:
return myConceptKeyValueCommandPart;
case LanguageConceptSwitch.ListCommandPart:
return myConceptListCommandPart;
case LanguageConceptSwitch.NewProcessBuilderExpression:
return myConceptNewProcessBuilderExpression;
case LanguageConceptSwitch.ProcessBuilderCommandPart:
return myConceptProcessBuilderCommandPart;
case LanguageConceptSwitch.ProcessBuilderCommandPartType:
return myConceptProcessBuilderCommandPartType;
case LanguageConceptSwitch.ProcessType:
return myConceptProcessType;
case LanguageConceptSwitch.PropertyCommandPart:
return myConceptPropertyCommandPart;
case LanguageConceptSwitch.RedirectOutputExpression:
return myConceptRedirectOutputExpression;
case LanguageConceptSwitch.ReportErrorStatement:
return myConceptReportErrorStatement;
case LanguageConceptSwitch.ReportExecutionError:
return myConceptReportExecutionError;
case LanguageConceptSwitch.StartAndWaitOperation:
return myConceptStartAndWaitOperation;
default :
return null;
}
}
