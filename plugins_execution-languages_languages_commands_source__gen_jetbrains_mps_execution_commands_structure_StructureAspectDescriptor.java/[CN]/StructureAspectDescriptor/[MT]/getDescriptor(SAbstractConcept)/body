{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0gb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptBuilderBlockStatement;
      }
    break;
case 1:
  if (true) {
    return myConceptBuilderParameter;
  }
break;
case 2:
if (true) {
return myConceptCommandBuilderExpression;
}
break;
case 3:
if (true) {
return myConceptCommandDebuggerOperation;
}
break;
case 4:
if (true) {
return myConceptCommandDeclaration;
}
break;
case 5:
if (true) {
return myConceptCommandMethod;
}
break;
case 6:
if (true) {
return myConceptCommandParameterAssignment;
}
break;
case 7:
if (true) {
return myConceptCommandParameterDeclaration;
}
break;
case 8:
if (true) {
return myConceptCommandParameterReference;
}
break;
case 9:
if (true) {
return myConceptCommandPartLengthOperation;
}
break;
case 10:
if (true) {
return myConceptCommandPartToListOperation;
}
break;
case 11:
if (true) {
return myConceptCommandProcessType;
}
break;
case 12:
if (true) {
return myConceptCommandReferenceExpression;
}
break;
case 13:
if (true) {
return myConceptCommandType;
}
break;
case 14:
if (true) {
return myConceptDebuggerSettingsCommandParameterDeclaration;
}
break;
case 15:
if (true) {
return myConceptExecuteCommandPart;
}
break;
case 16:
if (true) {
return myConceptExplicitCommandParameterDeclaration;
}
break;
case 17:
if (true) {
return myConceptKeyValueCommandPart;
}
break;
case 18:
if (true) {
return myConceptListCommandPart;
}
break;
case 19:
if (true) {
return myConceptNewProcessBuilderExpression;
}
break;
case 20:
if (true) {
return myConceptProcessBuilderCommandPart;
}
break;
case 21:
if (true) {
return myConceptProcessBuilderCommandPartType;
}
break;
case 22:
if (true) {
return myConceptProcessType;
}
break;
case 23:
if (true) {
return myConceptPropertyCommandPart;
}
break;
case 24:
if (true) {
return myConceptRedirectOutputExpression;
}
break;
case 25:
if (true) {
return myConceptReportErrorStatement;
}
break;
case 26:
if (true) {
return myConceptReportExecutionError;
}
break;
case 27:
if (true) {
return myConceptStartAndWaitOperation;
}
break;
default :
}
}
return null;
}
