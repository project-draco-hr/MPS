{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode conceptToAdd=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.Separator");
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    result.addAll(defaultActions);
  }
{
    SNode conceptToAdd=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ExtentionPoint");
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    result.addAll(defaultActions);
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ActionInstance");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.lang.plugin.structure.ActionDeclaration");
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.plugin.structure.ActionInstance",null);
              SLinkOperations.setTarget(result,"action",(item),false);
              return result;
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ParameterizedActionCreator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          List<SNode> correntNodes=new ArrayList<SNode>();
          for (          SNode classNode : Sequence.fromIterable(SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
            if (ClassConcept_Behavior.call_isDescendant_1213877355812(classNode,SLinkOperations.getTarget(new _Quotations.QuotationClass_5().createNode(),"classifier",false))) {
              ListSequence.fromList(correntNodes).addSequence(ListSequence.fromList(SLinkOperations.getTargets(classNode,"constructor",true)));
            }
          }
          return correntNodes;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.plugin.structure.ParameterizedActionCreator",null);
              SLinkOperations.setTarget(result,"constructorDeclaration",(item),false);
              return result;
            }
          }
);
        }
      }
    }
  }
  return result;
}
