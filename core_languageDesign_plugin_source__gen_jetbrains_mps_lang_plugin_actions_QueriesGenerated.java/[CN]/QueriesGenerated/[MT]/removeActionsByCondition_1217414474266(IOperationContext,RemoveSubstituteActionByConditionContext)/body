{
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        boolean isNode=SConceptOperations.isExactly(concept,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType");
        boolean isNList=SConceptOperations.isExactly(concept,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeListType");
        boolean isModel=SConceptOperations.isExactly(concept,"jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType");
        return !(isNode || isNList || isModel);
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
