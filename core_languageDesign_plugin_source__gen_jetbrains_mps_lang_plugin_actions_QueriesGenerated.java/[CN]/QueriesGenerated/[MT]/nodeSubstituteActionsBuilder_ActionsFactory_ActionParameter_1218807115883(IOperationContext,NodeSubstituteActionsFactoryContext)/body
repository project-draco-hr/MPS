{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ActionParameter");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ListSequence.<SNode>fromArray(new _Quotations.QuotationClass_0().createNode(),new _Quotations.QuotationClass_1().createNode(),new _Quotations.QuotationClass_2().createNode());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.plugin.structure.ActionParameterDeclaration",null);
              SLinkOperations.setTarget(result,"type",(item),true);
              return result;
            }
            public String getDescriptionText(            String pattern){
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SNodeType")) {
                return "current node";
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SNodeListType")) {
                return "current nodes";
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SModelType")) {
                return "current model";
              }
              return "";
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ActionParameter");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return ActionDataParameterDeclaration_Behavior.getVariants_1227641865136();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.lang.plugin.structure.ActionDataParameterDeclaration",null);
              SLinkOperations.setTarget(result,"key",(item),false);
              return result;
            }
            public String getDescriptionText(            String pattern){
              SNode annotation=ListSequence.fromList(SLinkOperations.getTargets((item),"annotation",true)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(SLinkOperations.getTarget(it,"annotation",false),"name").equals(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(new _Quotations.QuotationClass_3().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Annotation"),"name"));
                }
              }
).first();
              if (annotation == null) {
                return "";
              }
              SNode value=ListSequence.fromList(SLinkOperations.getTargets(annotation,"value",true)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(SLinkOperations.getTarget(it,"key",false),"name").equals("description");
                }
              }
).first();
              if (value == null) {
                return "";
              }
              return SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(value,"value",true),"jetbrains.mps.baseLanguage.structure.StringLiteral"),"value");
            }
          }
);
        }
      }
    }
  }
  return result;
}
