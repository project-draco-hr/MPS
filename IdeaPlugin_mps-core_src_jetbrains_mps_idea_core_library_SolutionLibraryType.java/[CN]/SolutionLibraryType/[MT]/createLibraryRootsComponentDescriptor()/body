{
  return new LibraryRootsComponentDescriptor(){
    @Override public OrderRootTypePresentation getRootTypePresentation(    @NotNull OrderRootType type){
      return null;
    }
    @NotNull @Override public List<? extends RootDetector> getRootDetectors(){
      return Collections.emptyList();
    }
    @NotNull @Override public List<? extends AttachRootButtonDescriptor> createAttachButtons(){
      return Arrays.asList(new AttachRootButtonDescriptor(OrderRootType.CLASSES,MPSBundle.message("library.attach.mps.solution")){
        @Override public VirtualFile[] selectFiles(        @NotNull JComponent parent,        @Nullable VirtualFile initialSelection,        @Nullable final Module contextModule,        @NotNull final LibraryEditor libraryEditor){
          final List<ModuleReference> availableSolutions=new ArrayList<ModuleReference>();
          final Set<VirtualFile> libraryFiles=new HashSet<VirtualFile>(Arrays.asList(libraryEditor.getFiles(OrderRootType.CLASSES)));
          ModelAccess.instance().runReadAction(new Runnable(){
            @Override public void run(){
              for (              Solution solution : ModuleRepositoryFacade.getInstance().getAllModules(Solution.class)) {
                if (solution instanceof SolutionIdea || solution instanceof StubSolution) {
                  continue;
                }
                if (libraryFiles.contains(getJarFile(solution.getBundleHome().getPath()))) {
                  continue;
                }
                availableSolutions.add(solution.getModuleReference());
              }
            }
          }
);
          ChooseElementsDialog<ModuleReference> chooser=new ChooseElementsDialog<ModuleReference>(parent,availableSolutions,MPSBundle.message("used.solutions.chooser.title")){
            @Override protected String getItemText(            ModuleReference item){
              return item.getModuleFqName();
            }
            @Override protected Icon getItemIcon(            ModuleReference item){
              return MPSIcons.SOLUTION_ICON;
            }
          }
;
          chooser.show();
          List<ModuleReference> chosenElements=chooser.getChosenElements();
          final Set<VirtualFile> roots=new LinkedHashSet<VirtualFile>();
          for (          ModuleReference module : chosenElements) {
            for (            VirtualFile virtualFile : getSolutionJars((Solution)ModuleRepositoryFacade.getInstance().getModule(module))) {
              roots.add(virtualFile);
            }
          }
          return roots.toArray(new VirtualFile[roots.size()]);
        }
      }
);
    }
  }
;
}
