{
  List<SNode> result=new ArrayList<SNode>();
  SNode script=SNodeOperations.getAncestor(node,"jetbrains.mps.bash.structure.ShellScript",false,false);
  ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(script,"usedVars",true)));
  SNode to=SNodeOperations.getAncestor(node,"jetbrains.mps.bash.structure.InputLine",false,false);
  for (  SNode line : ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(script,"commands",true),"lines",true))) {
    if (line == to) {
      break;
    }
    ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getDescendants(line,"jetbrains.mps.bash.structure.VariableNameDeclaration",false,new String[]{})));
  }
  if ((SNodeOperations.getAncestor(node,"jetbrains.mps.bash.structure.ForCommand",false,false) != null)) {
    ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.getAncestor(node,"jetbrains.mps.bash.structure.ForCommand",false,false),"accord",true),"jetbrains.mps.bash.structure.VariableNameDeclaration",false,new String[]{})));
  }
  return result;
}
