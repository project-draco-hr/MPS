{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x1a2a793c4db223d5L,"jetbrains.mps.samples.languagePatterns.Basic.structure.StringDescription").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode desc=SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x1a2a793c4db223d5L,"jetbrains.mps.samples.languagePatterns.Basic.structure.StringDescription")));
          SPropertyOperations.set(desc,MetaAdapterFactory.getProperty(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x1a2a793c4db223d5L,0x1a2a793c4db223d6L,"value"),pattern);
          return desc;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        final String pattern,        boolean strictly){
          Iterable<SConcept> concreteSubConcepts=ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x1a2a793c4db2238aL,"jetbrains.mps.samples.languagePatterns.Basic.structure.AbstractRequestDescription"),_context.getModel())).where(new IWhereFilter<SConcept>(){
            public boolean accept(            SConcept it){
              return !(it.isAbstract());
            }
          }
);
          return (pattern != null && pattern.length() > 0) && Sequence.fromIterable(concreteSubConcepts).all(new IWhereFilter<SConcept>(){
            public boolean accept(            SConcept concept){
              return !(SConceptOperations.conceptAlias(concept).startsWith(pattern));
            }
          }
);
        }
        public String getDescriptionText(        String pattern){
          return "that starts with " + pattern;
        }
      }
);
    }
  }
  return result;
}
