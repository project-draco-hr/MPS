{
  Set<IEditorMessage> messages=new LinkedHashSet<IEditorMessage>();
  if (!TypeChecker.getInstance().isCheckedRoot(node.getContainingRoot())) {
    try {
      TypeChecker.getInstance().checkRoot(node.getContainingRoot());
    }
 catch (    Throwable t) {
      LOG.error(t);
      TypeChecker.getInstance().markAsChecked(node.getContainingRoot());
      return messages;
    }
  }
  NodeTypesComponent typesComponent=getNodeTypesComponent(node);
  for (  Pair<SNode,IErrorReporter> errorNode : typesComponent.getNodesWithErrorStrings()) {
    MessageStatus status=MessageStatus.ERROR;
    Color color=Color.red;
    if (errorNode.o2.isWarning()) {
      status=MessageStatus.WARNING;
      color=Color.YELLOW;
    }
    DefaultEditorMessage message=new HighlighterMessage(errorNode.o1,status,color,"TYPE ERROR: " + errorNode.o2.reportError(),typesComponent);
    message.setIntentionProvider(errorNode.o2.getIntentionProvider());
    messages.add(message);
  }
  return messages;
}
