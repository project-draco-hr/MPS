{
  if (insideEvaluation) {
    myModel=SNodeOperations.getModel(node);
    SNode evaluateMethod=ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SPropertyOperations.getString(it,"name").equals("evaluate");
      }
    }
);
    myWhatToEvaluate=ListSequence.fromList(SModelOperations.getNodes(myModel,"jetbrains.mps.baseLanguage.structure.ClassConcept")).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode root){
        return ListSequence.fromList(SNodeOperations.getDescendants(root,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode node){
            return (AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.debug.evaluation.structure.ToEvaluateAnnotation"))) != null);
          }
        }
);
      }
    }
).first();
    if (!(myWhatToEvaluate.isDescendantOf(evaluateMethod,false))) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(evaluateMethod,"body",true),"statement",true)).addElement(SNodeOperations.cast(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.Statement"));
    }
  }
 else {
    myModel=SNodeOperations.getModel(node);
    myWhatToEvaluate=node;
  }
}
