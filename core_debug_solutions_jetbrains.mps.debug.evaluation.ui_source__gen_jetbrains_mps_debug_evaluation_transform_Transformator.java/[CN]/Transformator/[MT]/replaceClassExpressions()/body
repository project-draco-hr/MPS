{
  for (  SNode classifierClassExpression : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode classFqNameNode=TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(classifierClassExpression,"classifier",false));
    TransformationUtil.replaceClassExpression(classifierClassExpression,classFqNameNode);
  }
  for (  SNode classExpression : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    TransformationUtil.replaceClassExpression(classExpression,TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(classExpression,"type",true),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true),"classifier",false)));
  }
}
