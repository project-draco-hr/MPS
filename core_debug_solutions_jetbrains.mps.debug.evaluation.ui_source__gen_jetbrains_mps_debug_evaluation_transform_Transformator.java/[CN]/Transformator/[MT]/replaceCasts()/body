{
  boolean finished=true;
  for (  SNode cast : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.CastExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode expression=SLinkOperations.getTarget(cast,"expression",true);
    SNode expressionType=TypeChecker.getInstance().getTypeOf(expression);
    SNode castType=SLinkOperations.getTarget(cast,"type",true);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new Transformator.QuotationClass_rxfadt_a1a0a3a1a82_0().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(castType,new Transformator.QuotationClass_rxfadt_a1a0a3a1a82().createNode())) {
      SNodeOperations.replaceWithAnother(cast,expression);
      TransformationUtil.replaceExpressionWithBox(expression);
      finished=false;
    }
 else     if (TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new Transformator.QuotationClass_rxfadt_a1a0a0d0b0cb().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(castType,TransformationUtil.getPrimitiveType(),false)) {
      SNodeOperations.replaceWithAnother(cast,expression);
      TransformationUtil.replaceExpressionWithUnbox(expression);
      finished=false;
    }
 else     if (TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new Transformator.QuotationClass_rxfadt_a1a0a1d0b0cb().createNode()) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(castType,new Transformator.QuotationClass_rxfadt_a1a0a0b3a1a82().createNode()))) {
      SNode classifierType=TransformationUtil.getValueProxyTypeFromType(castType);
      SLinkOperations.setTarget(cast,"type",classifierType,true);
      finished=false;
    }
  }
  return finished;
}
