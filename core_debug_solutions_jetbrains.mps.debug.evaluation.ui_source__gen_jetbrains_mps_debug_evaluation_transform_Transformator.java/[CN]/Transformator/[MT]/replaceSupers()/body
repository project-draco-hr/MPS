{
  for (  SNode superMethodCall : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.debug.evaluation.structure.EvaluatorsSuperMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode returnType=SLinkOperations.getTarget(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false),"returnType",true);
    String methodName=SPropertyOperations.getString(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false),"name");
    String jniSignature=TransformationUtil.getJniSignature(SLinkOperations.getTarget(superMethodCall,"baseMethodDeclaration",false));
    TransformationUtil.replaceSuper(superMethodCall,methodName,jniSignature,returnType,SLinkOperations.getTargets(superMethodCall,"actualArgument",true));
  }
}
