{
  return ConceptUtil.traverse(forConcept,new _FunctionTypes._return_P2_E0<List<SNode>,SNode,Iterable<Iterable<SNode>>>(){
    public List<SNode> invoke(    SNode concept,    Iterable<Iterable<SNode>> inherited){
      final List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
      Sequence.fromIterable(inherited).visitAll(new IVisitor<Iterable<SNode>>(){
        public void visit(        Iterable<SNode> it){
          ListSequence.fromList(result).addSequence(Sequence.fromIterable(it));
        }
      }
);
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(concept,"members",true),"jetbrains.mps.core.structure.structure.SAbstractLink")).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return name == null || name.equals(SPropertyOperations.getString(it,"name"));
        }
      }
));
      return result;
    }
  }
);
}
