{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return Sequence.fromIterable(((Iterable<Classifier>)new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.INTERFACE,operationContext.getScope()).getClassifiers())).<SNode>select(new ISelector<Classifier,SNode>(){
            public SNode select(            Classifier cls){
              return (SNode)cls.getNode();
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode iep=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint",null);
              SLinkOperations.setTarget(iep,"iface",(item),false);
              return iep;
            }
            public String getMatchingText(            String pattern){
              return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint"),"alias") + " interface" + "="+ INamedConcept_Behavior.call_getFqName_1213877404258((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
