{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.InterfaceExtension");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          List<Classifier> classifiers=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.CLASS,operationContext.getScope()).getClassifiers();
          List<Tuples._2<SNode,SNode>> result=ListSequence.fromList(new ArrayList<Tuples._2<SNode,SNode>>());
          for (          final SNode iep : SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint")) {
            for (            SNode cc : Sequence.fromIterable(((Iterable<Classifier>)classifiers)).<SNode>select(new ISelector<Classifier,SNode>(){
              public SNode select(              Classifier cls){
                return (SNode)cls.getNode();
              }
            }
).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode cls){
                return SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept") && Classifier_Behavior.call_isDescendant_7165541881557222913(cls,SLinkOperations.getTarget(iep,"iface",false));
              }
            }
)) {
              ListSequence.fromList(result).addElement(MultiTuple.<SNode,SNode>from(iep,cc));
            }
          }
          return result;
        }
      }
;
      Iterable<Tuples._2<SNode,SNode>> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final Tuples._2<SNode,SNode> item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode ie=SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.InterfaceExtension",null);
              SLinkOperations.setTarget(ie,"extensionPoint",(item)._0(),false);
              SLinkOperations.setTarget(ie,"impl",(item)._1(),false);
              return ie;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item)._0(),"name") + " implementation=" + SPropertyOperations.getString((item)._1(),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
