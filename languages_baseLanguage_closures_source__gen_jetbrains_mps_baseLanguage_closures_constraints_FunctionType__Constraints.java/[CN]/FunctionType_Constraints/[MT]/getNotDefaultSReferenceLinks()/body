{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,100821637069096425l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-200093298712821347l,-8038623698278341771l),1199542442495l,100821637069096425l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ListSequence.fromList(SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"))).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ifc){
              return Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(ifc)).count() == 1;
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_yerj9w_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
