{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x16630bea72d45e9L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x16630bea72d45e9L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ListSequence.fromList(SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"))).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode ifc){
              return Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(ifc)).count() == 1;
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_yerj9w_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
