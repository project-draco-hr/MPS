{
  NodeReadAccessCasterInEditor.fireReferenceTargetReadAccessed(getSourceNode(),getTargetSModelReference(),getTargetNodeId());
synchronized (this) {
    if (!mature()) {
      return myImmatureTargetNode;
    }
  }
  SNodeId targetNodeId=getTargetNodeId();
  if (targetNodeId == null) {
    return null;
  }
  SModel targetModel=getTargetModel();
  if (targetModel == null)   return null;
  if (targetModel.isDisposed()) {
    Logger log=Logger.getLogger(this.getClass());
    log.error("target model " + targetModel.toString() + " is disposed ");
    SNode sourceNode=getSourceNode();
    log.error("source node is: name = " + sourceNode.getPersistentProperty(INamedConcept.NAME) + ", model = "+ sourceNode.getModel()+ ", id = "+ sourceNode.getId());
    log.error("target node id = " + targetNodeId);
    log.error("stacktrace of model disposing is: ");
    log.error(targetModel.getDisposedStacktrace());
    log.errorWithTrace("=============current trace:=============");
    return null;
  }
  SNode targetNode=targetModel.getNodeById(targetNodeId);
  if (targetNode != null)   return targetNode;
  targetNode=UnregisteredNodes.instance().get(targetModel.getSModelReference(),targetNodeId);
  if (targetNode == null) {
    if (!silently) {
      error("target model '" + targetModel.getSModelReference() + "' doesn't contain node with id="+ getTargetNodeId());
    }
  }
  return targetNode;
}
