{
  this.addNodeById("2282909602806268543");
  this.addNodeById("2282909602806423211");
  int initialSize=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).count();
  Assert.assertTrue(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).contains(SNodeOperations.cast(this.getNodeById("2282909602806391310"),"jetbrains.mps.lang.smodelTests.structure.Child")));
  ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).removeWhere(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getString(it,"name").equals(SPropertyOperations.getString(SNodeOperations.cast(TestBody.this.getNodeById("2282909602806391310"),"jetbrains.mps.lang.smodelTests.structure.Child"),"name"));
    }
  }
);
  Assert.assertEquals(initialSize - 1,ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).count());
  Assert.assertFalse(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).contains(SNodeOperations.cast(this.getNodeById("2282909602806391310"),"jetbrains.mps.lang.smodelTests.structure.Child")));
  Assert.assertNull(SNodeOperations.getParent(SNodeOperations.cast(this.getNodeById("2282909602806391310"),"jetbrains.mps.lang.smodelTests.structure.Child")));
}
