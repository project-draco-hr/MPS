{
  Map<SPropertyId,PropertyConstraintsDescriptor> properties=new HashMap<SPropertyId,PropertyConstraintsDescriptor>();
  properties.put(MetaIdFactory.propId(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x10d34f97574L),new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,0x10d34f97574L),this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node){
      String propertyName="shortDescription";
{
        SNode classifier=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false,false);
        if (classifier != null) {
          return NodePresentationUtil.getRoleInParentOrConceptName(node) + " (" + NameUtil.compactNodeFQName(classifier)+ ")";
        }
        return NodePresentationUtil.getRoleInParentOrConceptName(node) + " (?declaring classifier?)";
      }
    }
  }
);
  return properties;
}
