{
  Map<SNode,List<SNode>> overridingClassifiersMap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  for (  SNode derivedClassifier : Sequence.fromIterable(derivedClassifiers)) {
    for (    SNode derivedClassifierMethod : ListSequence.fromList(SLinkOperations.getTargets(derivedClassifier,"method",true))) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(derivedClassifierMethod,"visibility",true),"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        continue;
      }
      for (      SNode method : Sequence.fromIterable(methods)) {
        if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(derivedClassifierMethod,method)) {
          List<SNode> overridingMethods=MapSequence.fromMap(overridingClassifiersMap).get(method);
          if (overridingMethods == null) {
            overridingMethods=new ArrayList<SNode>();
            MapSequence.fromMap(overridingClassifiersMap).put(method,overridingMethods);
          }
          ListSequence.fromList(overridingMethods).addElement(derivedClassifier);
          break;
        }
      }
    }
  }
  for (  SNode overridenMethod : SetSequence.fromSet(MapSequence.fromMap(overridingClassifiersMap).keySet())) {
    StringBuffer tooltip=new StringBuffer("<html><body>Is ");
    tooltip.append((SPropertyOperations.getBoolean(overridenMethod,"isAbstract") ? "implemented" : "overriden"));
    tooltip.append(" in");
    int messageCounter=0;
    for (    SNode overridingClassifier : ListSequence.fromList(MapSequence.fromMap(overridingClassifiersMap).get(overridenMethod))) {
      tooltip.append(TOOLTIP_INDENT);
      tooltip.append(BaseConcept_Behavior.call_getPresentation_1213877396640(overridingClassifier));
      if (++messageCounter >= MAX_MESSAGE_NUMBER) {
        tooltip.append(TOOLTIP_INDENT);
        tooltip.append("...");
        break;
      }
    }
    tooltip.append("</body></html>");
    SetSequence.fromSet(messages).addElement(new OverrideEditorMessage(overridenMethod,this,tooltip.toString()));
  }
}
