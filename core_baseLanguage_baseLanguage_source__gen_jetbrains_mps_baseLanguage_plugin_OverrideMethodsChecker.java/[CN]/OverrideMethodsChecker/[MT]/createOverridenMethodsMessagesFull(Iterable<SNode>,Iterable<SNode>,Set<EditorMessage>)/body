{
  Map<SNode,List<SNode>> overridenMethodsToOverridingClassifiersMap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  for (  SNode derivedClassifier : Sequence.fromIterable(derivedClassifiers)) {
    for (    SNode derivedClassifierMethod : ListSequence.fromList(SLinkOperations.getTargets(derivedClassifier,"method",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return canOverride(it);
      }
    }
)) {
      for (      SNode method : Sequence.fromIterable(methods)) {
        if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(derivedClassifierMethod,method)) {
          List<SNode> overridingClassifiers=MapSequence.fromMap(overridenMethodsToOverridingClassifiersMap).get(method);
          if (overridingClassifiers == null) {
            overridingClassifiers=new ArrayList<SNode>();
            MapSequence.fromMap(overridenMethodsToOverridingClassifiersMap).put(method,overridingClassifiers);
          }
          ListSequence.fromList(overridingClassifiers).addElement(derivedClassifier);
          break;
        }
      }
    }
  }
  for (  SNode overridenMethod : SetSequence.fromSet(MapSequence.fromMap(overridenMethodsToOverridingClassifiersMap).keySet())) {
    boolean overriden=!(SPropertyOperations.getBoolean(overridenMethod,"isAbstract"));
    StringBuffer tooltip=new StringBuffer("Is ");
    tooltip.append((overriden ? "overriden" : "implemented"));
    tooltip.append(" in");
    int messageCounter=0;
    for (Iterator<SNode> it=ListSequence.fromList(MapSequence.fromMap(overridenMethodsToOverridingClassifiersMap).get(overridenMethod)).iterator(); it.hasNext(); ) {
      SNode overridingClassifier=it.next();
      tooltip.append(TOOLTIP_INDENT);
      tooltip.append(INamedConcept_Behavior.call_getFqName_1213877404258(overridingClassifier));
      if (++messageCounter >= MAX_MESSAGE_NUMBER && it.hasNext()) {
        tooltip.append(TOOLTIP_INDENT);
        tooltip.append("...");
        break;
      }
    }
    SetSequence.fromSet(messages).addElement(new OverridenMethodEditorMessage(overridenMethod,this,tooltip.toString(),overriden));
  }
}
