{
  Map<SNode,Set<SNode>> result=MapSequence.<SNode,Set<SNode>>fromMap(new HashMap<SNode,Set<SNode>>());
  for (  SNode derivedClassifier : Sequence.<SNode>fromIterable(derivedClassifiers)) {
    for (    final SNode derivedClassifierMethod : Sequence.<SNode>fromIterable(OverridingMethodsFinder.getInstanceMethods(derivedClassifier)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return OverridingMethodsFinder.canOverride(it);
      }
    }
)) {
      Set<SNode> similarMethods=MapSequence.<String,Set<SNode>>fromMap(nameToMethodsMap).get(SPropertyOperations.getString(derivedClassifierMethod,"name"));
      if (similarMethods == null) {
        continue;
      }
      SNode overridenMethod=SetSequence.<SNode>fromSet(similarMethods).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(it,derivedClassifierMethod);
        }
      }
);
      if (overridenMethod != null) {
        Set<SNode> overridingMethods=OverridingMethodsFinder.safeGet(result,overridenMethod);
        SetSequence.fromSet(overridingMethods).addElement(derivedClassifierMethod);
        if (SetSequence.<SNode>fromSet(overridingMethods).count() > MAX_MESSAGE_NUMBER) {
          SetSequence.fromSet(similarMethods).removeElement(overridenMethod);
          if (SetSequence.<SNode>fromSet(similarMethods).isEmpty()) {
            MapSequence.fromMap(nameToMethodsMap).removeKey(SPropertyOperations.getString(derivedClassifierMethod,"name"));
            if (MapSequence.<String,Set<SNode>>fromMap(nameToMethodsMap).isEmpty()) {
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}
