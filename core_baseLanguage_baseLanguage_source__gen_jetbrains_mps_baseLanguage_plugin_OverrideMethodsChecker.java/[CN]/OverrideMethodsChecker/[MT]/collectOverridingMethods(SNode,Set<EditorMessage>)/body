{
  OverridingMethodsFinder finder=new OverridingMethodsFinder(container);
  for (  SNode overridingMethod : SetSequence.fromSet(finder.getOverridingMethods())) {
    StringBuffer tooltip=new StringBuffer();
    int messageCounter=0;
    Set<Tuples._2<SNode,SNode>> overridenMethods=finder.getOverridenMethods(overridingMethod);
    boolean overrides=SPropertyOperations.getBoolean(overridingMethod,"isAbstract") || SetSequence.fromSet(overridenMethods).where(new IWhereFilter<Tuples._2<SNode,SNode>>(){
      public boolean accept(      Tuples._2<SNode,SNode> it){
        return !(SPropertyOperations.getBoolean(it._0(),"isAbstract"));
      }
    }
).isNotEmpty();
    for (Iterator<Tuples._2<SNode,SNode>> it=SetSequence.fromSet(overridenMethods).iterator(); it.hasNext(); ) {
      SNode overridenClassifier=it.next()._1();
      tooltip.append((overrides ? "Overrides" : "Implements"));
      tooltip.append(" method in '");
      tooltip.append(INamedConcept_Behavior.call_getFqName_1213877404258(overridenClassifier));
      tooltip.append("'");
      if (it.hasNext()) {
        tooltip.append(LF);
        if (++messageCounter >= MAX_MESSAGE_NUMBER) {
          tooltip.append("...");
          break;
        }
      }
    }
    SetSequence.fromSet(messages).addElement(new OverridingMethodEditorMessage(overridingMethod,this,tooltip.toString(),overrides));
  }
}
