{
  for (Iterator<SNode> derivedClassesIt=ListSequence.fromList(derivedClasses).iterator(); derivedClassesIt.hasNext() && ListSequence.fromList(methods).isNotEmpty(); ) {
    SNode nextNode=derivedClassesIt.next();
    if (!(SNodeOperations.isInstanceOf(nextNode,"jetbrains.mps.baseLanguage.structure.Classifier"))) {
      continue;
    }
    for (Iterator<SNode> derivedClassMethodsIt=ListSequence.fromList(SLinkOperations.getTargets(((SNode)nextNode),"method",true)).iterator(); derivedClassMethodsIt.hasNext() && ListSequence.fromList(methods).isNotEmpty(); ) {
      SNode derivedClassifierMethod=derivedClassMethodsIt.next();
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(derivedClassifierMethod,"visibility",true),"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        continue;
      }
      for (      SNode method : ListSequence.fromList(methods)) {
        if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(derivedClassifierMethod,method)) {
          ListSequence.fromList(methods).removeElement(method);
          SetSequence.fromSet(messages).addElement(new OverrideEditorMessage(method,this));
          break;
        }
      }
    }
  }
}
