{
  DefaultActionGroup group=new DefaultActionGroup();
  myGotoNodeAction=new AnAction("Go To","Go To Source",jetbrains.mps.ide.projectPane.Icons.REFERENCE_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      IBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      dispose();
      openNode(breakpoint,true,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myGotoNodeAction);
  myShowNodeAction=new AnAction("View Source","View Source",jetbrains.mps.ide.projectPane.Icons.TEXT_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      IBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      openNode(breakpoint,false,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myShowNodeAction);
  AnAction addBreakpointAction=new AnAction("Add","Add Breakpoint",jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons.ADD){
    @Override public void actionPerformed(    AnActionEvent e){
      Set<IBreakpointKind> allKinds=BreakpointProvidersManager.getInstance().getAllKinds();
      List<IBreakpointKind> kindsToShow=new ArrayList<IBreakpointKind>();
      List<String> kindNames=new ArrayList<String>();
      for (      IBreakpointKind kind : allKinds) {
        IBreakpointsProvider provider=BreakpointProvidersManager.getInstance().getProvider(kind);
        if (provider == null)         continue;
        if (provider.canCreateFromUi(kind)) {
          kindsToShow.add(kind);
          kindNames.add(kind.getPresentation());
        }
      }
      int index=Messages.showChooseDialog(myMainPanel,"Select the kind of breakpoint to add.","Add Breakpoint",kindNames.toArray(new String[kindNames.size()]),kindNames.get(0),(Icon)null);
      if (index >= 0) {
        myBreakpointsManager.createFromUi(kindsToShow.get(index));
      }
    }
  }
;
  group.add(addBreakpointAction);
  myDeleteBreakpointAction=new AnAction("Delete","Delete Breakpoint",jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons.REMOVE){
    @Override public void actionPerformed(    AnActionEvent e){
      final IBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          myBreakpointsManager.removeBreakpoint(breakpoint);
        }
      }
);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myDeleteBreakpointAction);
  group.add(new Separator());
  group.add(new ToggleAction("Tree View","Toggle Tree/List View",Icons.SHOW_AS_TREE){
    @Override public boolean isSelected(    AnActionEvent e){
      return isTreeView();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      switchView();
      e.getPresentation().setText(myViews[1 - myCurrentViewIndex].getTitle());
    }
  }
);
  group.add(new ToggleAction("Group By Module","Group By Module",jetbrains.mps.ide.findusages.view.icons.Icons.MODULE_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isModuleGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleModuleGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Model","Group By Model",jetbrains.mps.ide.findusages.view.icons.Icons.MODEL_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isModelGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleModelGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Root","Group By Root",jetbrains.mps.ide.findusages.view.icons.Icons.ROOT_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      return tree.isRootGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.toggleRootGroup(state);
      tree.update();
    }
  }
);
  group.add(new AnAction("Expand All","Expand All",jetbrains.mps.ide.findusages.view.icons.Icons.EXPAND_ICON){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      if (!isTreeView()) {
        return;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.expandAll();
    }
  }
);
  group.add(new AnAction("Collapse All","Collapse All",jetbrains.mps.ide.findusages.view.icons.Icons.COLLAPSE_ICON){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      if (!isTreeView()) {
        return;
      }
      BreakpointsTree tree=(BreakpointsTree)myViews[myCurrentViewIndex];
      tree.collapseAll();
    }
  }
);
  return group;
}
