{
  DefaultActionGroup group=new DefaultActionGroup();
  myGotoNodeAction=new AnAction("Go To","Go To Source",jetbrains.mps.ide.projectPane.Icons.REFERENCE_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractMPSBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      dispose();
      openNode(breakpoint,true,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myGotoNodeAction);
  myShowNodeAction=new AnAction("View Source","View Source",jetbrains.mps.ide.projectPane.Icons.TEXT_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractMPSBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      openNode(breakpoint,false,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myShowNodeAction);
  myDeleteBreakpointAction=new AnAction("Delete","Delete Breakpoint",jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons.REMOVE){
    @Override public void actionPerformed(    AnActionEvent e){
      final AbstractMPSBreakpoint breakpoint=getBreakpoint(e);
      if (breakpoint == null)       return;
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          myBreakpointsManager.removeBreakpoint(breakpoint);
        }
      }
);
      myBreakpointsView.breakpointDeleted(breakpoint);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getBreakpoint(e) != null);
    }
  }
;
  group.add(myDeleteBreakpointAction);
  group.add(new Separator());
  group.add(new ToggleAction("Tree View","Toggle Tree/List View",Icons.SHOW_AS_TREE){
    @Override public boolean isSelected(    AnActionEvent e){
      return isTreeView();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      if (state) {
        switchView(new BreakpointsTree(myContext,myBreakpointsManager));
        e.getPresentation().setText("List View");
      }
 else {
        switchView(new BreakpointsTable(myBreakpointsManager));
        e.getPresentation().setText("Tree View");
      }
    }
  }
);
  group.add(new ToggleAction("Group By Module","Group By Module",jetbrains.mps.ide.findusages.view.icons.Icons.MODULE_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      return tree.isModuleGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      tree.toggleModuleGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Model","Group By Model",jetbrains.mps.ide.findusages.view.icons.Icons.MODEL_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      return tree.isModelGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      tree.toggleModelGroup(state);
      tree.update();
    }
  }
);
  group.add(new ToggleAction("Group By Root","Group By Root",jetbrains.mps.ide.findusages.view.icons.Icons.ROOT_ICON){
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(isTreeView());
    }
    @Override public boolean isSelected(    AnActionEvent e){
      if (!isTreeView()) {
        return false;
      }
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      return tree.isRootGroupVisible();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      BreakpointsTree tree=(BreakpointsTree)myBreakpointsView;
      tree.toggleRootGroup(state);
      tree.update();
    }
  }
);
  return group;
}
