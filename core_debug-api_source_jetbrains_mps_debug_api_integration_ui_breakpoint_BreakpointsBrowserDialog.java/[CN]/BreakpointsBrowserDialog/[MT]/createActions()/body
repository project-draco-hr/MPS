{
  final AnAction showNodeAction=new AnAction("View Source","View Source",jetbrains.mps.ide.projectPane.Icons.TEXT_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractMPSBreakpoint breakpoint=myBreakpointsView.getSelectedBreakpoint();
      if (breakpoint == null)       return;
      openNode(breakpoint,false,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myBreakpointsView.getSelectedBreakpoint() != null);
    }
  }
;
  final AnAction gotoNodeAction=new AnAction("Go To","Go To Source",jetbrains.mps.ide.projectPane.Icons.REFERENCE_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractMPSBreakpoint breakpoint=myBreakpointsView.getSelectedBreakpoint();
      if (breakpoint == null)       return;
      dispose();
      openNode(breakpoint,true,true);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myBreakpointsView.getSelectedBreakpoint() != null);
    }
  }
;
  final AnAction deleteBreakpointAction=new AnAction("Delete","Delete Breakpoint",jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons.REMOVE){
    @Override public void actionPerformed(    AnActionEvent e){
      int selectedRow=myBreakpointsView.getSelectedBreakpointIndex();
      final AbstractMPSBreakpoint breakpoint=myBreakpointsView.getSelectedBreakpoint();
      if (breakpoint == null)       return;
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          myBreakpointsManager.removeBreakpoint(breakpoint);
        }
      }
);
      myBreakpointsView.breakpointDeleted(selectedRow);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myBreakpointsView.getSelectedBreakpoint() != null);
    }
  }
;
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(gotoNodeAction);
  group.add(showNodeAction);
  group.add(deleteBreakpointAction);
  myBreakpointsView.getMainComponent().getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),COMMAND_SHOW_NODE);
  myBreakpointsView.getMainComponent().getActionMap().put(COMMAND_SHOW_NODE,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      showNodeAction.actionPerformed(null);
    }
  }
);
  myBreakpointsView.getMainComponent().registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      gotoNodeAction.actionPerformed(null);
    }
  }
,KeyStroke.getKeyStroke("F4"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myBreakpointsView.getMainComponent().registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      deleteBreakpointAction.actionPerformed(null);
    }
  }
,KeyStroke.getKeyStroke("DELETE"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myBreakpointsView.getMainComponent().addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        AbstractMPSBreakpoint breakpoint=myBreakpointsView.getSelectedBreakpoint();
        if (breakpoint == null)         return;
        dispose();
        openNode(breakpoint,true,true);
      }
    }
  }
);
  return group;
}
