{
  myEditor=editor;
  setLayout(new BorderLayout());
  setPreferredSize(new Dimension((int)getPreferredSize().getWidth(),(int)myText.getPreferredSize().getHeight() + 5));
  JPanel mainPanel=new JPanel();
  FlowLayout layout=new FlowLayout();
  layout.setVgap(0);
  mainPanel.setLayout(layout);
  mainPanel.setOpaque(false);
  mainPanel.add(new JLabel("Text:"));
  mainPanel.add(myText);
  myText.setHideComplitionOnClick(true);
  DefaultActionGroup group=new DefaultActionGroup("search bar",false);
  group.add(new ShowHistoryAction());
  group.add(new PrevOccurenceAction());
  group.add(new NextOccurenceAction());
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",group,true);
  tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myToolbarComponent=tb.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  mainPanel.add(myToolbarComponent);
  mainPanel.add(myIsCaseSensitive);
  myIsCaseSensitive.setOpaque(false);
  myIsCaseSensitive.setMnemonic(KeyEvent.VK_C);
  myIsCaseSensitive.setFocusable(false);
  myIsCaseSensitive.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  mainPanel.add(myIsWordsOnly);
  myIsWordsOnly.setOpaque(false);
  myIsWordsOnly.setMnemonic(KeyEvent.VK_M);
  myIsWordsOnly.setFocusable(false);
  myIsWordsOnly.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  mainPanel.add(myIsRegex);
  myIsRegex.setOpaque(false);
  myIsRegex.setMnemonic(KeyEvent.VK_R);
  myIsRegex.setFocusable(false);
  myIsRegex.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myIsWordsOnly.setEnabled(!myIsWordsOnly.isEnabled());
    }
  }
);
  add(mainPanel,BorderLayout.LINE_START);
  JLabel escapeLabel=new JLabel(Icons.ESCAPE_ICON);
  JPanel eastPanel=new JPanel();
  eastPanel.add(myFindResult);
  eastPanel.setOpaque(false);
  eastPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
  eastPanel.add(escapeLabel);
  add(eastPanel,BorderLayout.LINE_END);
  escapeLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      deactivate();
    }
  }
);
  myText.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      search();
    }
    public void removeUpdate(    DocumentEvent e){
      search();
    }
    public void changedUpdate(    DocumentEvent e){
      search();
    }
  }
);
  myText.setColumns(20);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goDown();
    }
  }
,KeyStroke.getKeyStroke("DOWN"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goUp();
    }
  }
,KeyStroke.getKeyStroke("UP"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  setVisible(false);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      deactivate();
    }
  }
,KeyStroke.getKeyStroke("ESCAPE"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  editor.getRootCell();
}
