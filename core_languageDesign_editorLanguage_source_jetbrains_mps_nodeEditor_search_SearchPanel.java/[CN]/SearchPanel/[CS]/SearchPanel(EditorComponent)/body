{
  myEditor=editor;
  setLayout(new BorderLayout());
  setPreferredSize(new Dimension((int)getPreferredSize().getWidth(),(int)myText.getPreferredSize().getHeight() + 5));
  JPanel mainPanel=new JPanel();
  FlowLayout layout=new FlowLayout();
  layout.setVgap(0);
  mainPanel.setLayout(layout);
  mainPanel.setOpaque(false);
  mainPanel.add(new JLabel("Text:"));
  mainPanel.add(myText);
  myText.setHideComplitionOnClick(true);
  mainPanel.add(myHistoryButton);
  myHistoryButton.setEnabled(false);
  myHistoryButton.setOpaque(false);
  myHistoryButton.setPreferredSize(new Dimension(myButtonSize,myButtonSize));
  myHistoryButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myText.showCompletion();
    }
  }
);
  mainPanel.add(myPreviousButton);
  myPreviousButton.setEnabled(false);
  myPreviousButton.setOpaque(false);
  myPreviousButton.setPreferredSize(new Dimension(myButtonSize,myButtonSize));
  myPreviousButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      goUp();
    }
  }
);
  mainPanel.add(myNextButton);
  myNextButton.setEnabled(false);
  myNextButton.setOpaque(false);
  myNextButton.setPreferredSize(new Dimension(myButtonSize,myButtonSize));
  myNextButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      goDown();
    }
  }
);
  mainPanel.add(myIsCaseSensitive);
  myIsCaseSensitive.setOpaque(false);
  myIsCaseSensitive.setMnemonic(KeyEvent.VK_C);
  myIsCaseSensitive.setFocusable(false);
  myIsCaseSensitive.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  mainPanel.add(myIsWordsOnly);
  myIsWordsOnly.setOpaque(false);
  myIsWordsOnly.setMnemonic(KeyEvent.VK_M);
  myIsWordsOnly.setFocusable(false);
  myIsWordsOnly.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  mainPanel.add(myIsRegex);
  myIsRegex.setOpaque(false);
  myIsRegex.setMnemonic(KeyEvent.VK_R);
  myIsRegex.setFocusable(false);
  myIsRegex.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myIsWordsOnly.setEnabled(!myIsWordsOnly.isEnabled());
    }
  }
);
  add(mainPanel,BorderLayout.LINE_START);
  JLabel escapeLabel=new JLabel(Icons.ESCAPE_ICON);
  JPanel escapePanel=new JPanel();
  escapePanel.setOpaque(false);
  escapePanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
  escapePanel.add(escapeLabel);
  add(escapePanel,BorderLayout.LINE_END);
  escapeLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      deactivate();
    }
  }
);
  myText.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      search();
    }
    public void removeUpdate(    DocumentEvent e){
      search();
    }
    public void changedUpdate(    DocumentEvent e){
      search();
    }
  }
);
  myText.setColumns(20);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goDown();
    }
  }
,KeyStroke.getKeyStroke("DOWN"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goUp();
    }
  }
,KeyStroke.getKeyStroke("UP"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  setVisible(false);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      deactivate();
    }
  }
,KeyStroke.getKeyStroke("ESCAPE"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  editor.getRootCell();
}
