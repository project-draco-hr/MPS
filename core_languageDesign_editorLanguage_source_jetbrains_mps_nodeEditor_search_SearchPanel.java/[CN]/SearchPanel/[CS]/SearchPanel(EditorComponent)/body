{
  myEditor=editor;
  setLayout(new FlowLayout(FlowLayout.LEFT));
  setPreferredSize(new Dimension((int)getPreferredSize().getWidth(),(int)myText.getPreferredSize().getHeight() + 10));
  add(new JLabel("Text:"));
  add(myText);
  add(myIsCaseSensitive);
  myIsCaseSensitive.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  add(myIsWordsOnly);
  myIsWordsOnly.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      search();
    }
  }
);
  add(myIsRegex);
  myIsRegex.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myIsWordsOnly.setEnabled(!myIsWordsOnly.isEnabled());
    }
  }
);
  myText.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      search();
    }
    public void removeUpdate(    DocumentEvent e){
      search();
    }
    public void changedUpdate(    DocumentEvent e){
      search();
    }
  }
);
  myText.setColumns(20);
  myText.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myText.getText().length() == 0) {
        myText.showCompletion();
      }
 else {
        goDown();
      }
    }
  }
,KeyStroke.getKeyStroke("DOWN"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myText.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      search();
      goUp();
    }
  }
,KeyStroke.getKeyStroke("UP"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  setVisible(false);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      deactivate();
    }
  }
,KeyStroke.getKeyStroke("ESCAPE"),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  editor.getRootCell();
}
