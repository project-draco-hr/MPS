{
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  SNode quotedNode_13=null;
  SNode quotedNode_14=null;
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Interface",null,null,GlobalScope.getInstance(),false);
  quotedNode_5.setProperty("nonStatic","true");
  quotedNode_5.setProperty("name",(String)parameter_4);
  quotedNode_6=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null,null,GlobalScope.getInstance(),false);
  quotedNode_6.setProperty("isAbstract","true");
  quotedNode_6.setProperty("name","invoke");
{
    List<SNode> nodes=(List<SNode>)parameter_1;
    for (    SNode child : nodes) {
      quotedNode_6.addChild("parameter",HUtil.copyIfNecessary(child));
    }
  }
  quotedNode_10=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType",null,null,GlobalScope.getInstance(),false);
  quotedNode_6.addChild("returnType",quotedNode_10);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility",null,null,GlobalScope.getInstance(),false);
  quotedNode_6.addChild("visibility",quotedNode_11);
  quotedNode_12=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList",null,null,GlobalScope.getInstance(),false);
  quotedNode_6.addChild("body",quotedNode_12);
{
    List<SNode> nodes=(List<SNode>)parameter_2;
    for (    SNode child : nodes) {
      quotedNode_6.addChild("throwsItem",HUtil.copyIfNecessary(child));
    }
  }
  quotedNode_5.addChild("method",quotedNode_6);
  quotedNode_7=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility",null,null,GlobalScope.getInstance(),false);
  quotedNode_5.addChild("visibility",quotedNode_7);
{
    List<SNode> nodes=(List<SNode>)parameter_3;
    for (    SNode child : nodes) {
      quotedNode_5.addChild("typeVariableDeclaration",HUtil.copyIfNecessary(child));
    }
  }
  return quotedNode_5;
}
