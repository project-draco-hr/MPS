{
  final LightModelEnvironmentInfo info=as_1o71zw_a0a0a22(PersistenceRegistry.getInstance().getModelEnvironmentInfo(),LightModelEnvironmentInfo.class);
  if (info == null) {
    return;
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      jetbrains.mps.smodel.SModel.ImportElement i : ListSequence.fromList(((SModelInternal)myModel).getAdditionalModelVersions())) {
        info.modelVersionRead(i);
      }
      for (      final SNodeReference ptr : SetSequence.fromSet(MapSequence.fromMap(myNodeRoleMap).keySet())) {
        ListSequence.fromList(MapSequence.fromMap(myNodeRoleMap).get(ptr)).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode n){
            boolean unordered=(MapSequence.fromMap(myRoleMetainfo).containsKey(n) ? MapSequence.fromMap(myRoleMetainfo).get(n) : false);
            info.nodeRoleRead(n,ptr,unordered);
          }
        }
);
      }
      for (      final SNodeReference ptr : SetSequence.fromSet(MapSequence.fromMap(myNodeTypeMap).keySet())) {
        ListSequence.fromList(MapSequence.fromMap(myNodeTypeMap).get(ptr)).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode n){
            Tuples._2<ConceptKind,StaticScope> pair=MapSequence.fromMap(myMetainfo).get(n);
            info.conceptRead(n,ptr,(pair == null ? StaticScope.GLOBAL : pair._1()),(pair == null ? ConceptKind.NORMAL : pair._0()));
          }
        }
);
      }
      for (      final SNodeReference ptr : SetSequence.fromSet(MapSequence.fromMap(myRefRoleMap).keySet())) {
        ListSequence.fromList(MapSequence.fromMap(myRefRoleMap).get(ptr)).visitAll(new IVisitor<SReference>(){
          public void visit(          SReference r){
            info.referenceRoleRead(r,ptr);
          }
        }
);
      }
      for (      final SNodeReference ptr : SetSequence.fromSet(MapSequence.fromMap(myPropNameMap).keySet())) {
        ListSequence.fromList(MapSequence.fromMap(myPropNameMap).get(ptr)).visitAll(new IVisitor<Pair<SNode,String>>(){
          public void visit(          Pair<SNode,String> nP){
            info.propertyNameRead(nP.o1,nP.o2,ptr);
          }
        }
);
      }
    }
  }
);
}
