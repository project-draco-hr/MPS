{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1226359078165l,1226359192215l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1226359078165l,1226359192215l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1226359078165l,1226359078166l,"conceptDeclaration")));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_44v9kk_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
