{
  if (myReplacementReference != null) {
    return myReplacementReference;
  }
  if (myReferenceInfo == null) {
    return null;
  }
  String role=myReferenceInfo.getReferenceRole();
  SNode outputSourceNode=myReferenceInfo.getOutputSourceNode();
  SModelReference targetModelReference=myReferenceInfo.getTargetModelReference(myGenerator);
  SNode outputTargetNode=myReferenceInfo.doResolve_Straightforward(myGenerator);
  if (outputTargetNode != null) {
    myReplacementReference=new StaticReference(role,outputSourceNode,outputTargetNode);
  }
 else   if (SReferenceUtil.isDynamicResolve(role,outputSourceNode) && myReferenceInfo.getResolveInfoForDynamicResolve() != null) {
    DynamicReference dynamicReference=new DynamicReference(role,outputSourceNode,targetModelReference,myReferenceInfo.getResolveInfoForDynamicResolve());
    SNode templateNode=myReferenceInfo instanceof ReferenceInfo_Macro ? ((ReferenceInfo_Macro)myReferenceInfo).getMacroNode() : null;
    SNode inputNode=myReferenceInfo.getInputNode();
    if (inputNode != null || templateNode != null) {
      dynamicReference.setOrigin(new DynamicReferenceOrigin(templateNode != null ? new SNodePointer(templateNode) : null,inputNode != null ? new SNodePointer(inputNode) : null));
    }
    myReplacementReference=dynamicReference;
  }
 else {
    outputTargetNode=myReferenceInfo.doResolve_Tricky(myGenerator);
    if (outputTargetNode != null) {
      if (checkResolvedTarget(outputSourceNode,role,outputTargetNode)) {
        myReplacementReference=new StaticReference(role,outputSourceNode,outputTargetNode);
      }
 else {
        myReplacementReference=new StaticReference(role,outputSourceNode,targetModelReference == null ? myGenerator.getOutputModel().getSModelReference() : targetModelReference,null,myReferenceInfo.getResolveInfoForNothing());
      }
    }
 else     if (myReferenceInfo.isRequired()) {
      myGenerator.getLogger().error(myReferenceInfo.getOutputSourceNode(),"cannot resolve required reference; role: '" + myReferenceInfo.getReferenceRole() + "' in output node "+ org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(myReferenceInfo.getOutputSourceNode()),myReferenceInfo.getErrorDescriptions());
      myReplacementReference=new StaticReference(role,outputSourceNode,targetModelReference == null ? myGenerator.getOutputModel().getSModelReference() : targetModelReference,null,myReferenceInfo.getResolveInfoForNothing());
    }
 else {
    }
  }
  myReferenceInfo=null;
  return myReplacementReference;
}
