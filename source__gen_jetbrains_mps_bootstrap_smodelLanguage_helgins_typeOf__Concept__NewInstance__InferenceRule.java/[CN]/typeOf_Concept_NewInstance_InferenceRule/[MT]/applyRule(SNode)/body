{
  if (SLinkOperations.getTarget(argument,"prototypeNode",true) != null) {
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(SLinkOperations.getTarget(argument,"prototypeNode",true)),new QuotationClass_68().createNode(),SLinkOperations.getTarget(argument,"prototypeNode",true),null);
  }
  SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.getParent(argument,null,false,false),"leftExpression",true);
  SNode leftConceptType=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false);
  if (leftConceptType != null) {
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_69().createNode(SLinkOperations.getTarget(leftConceptType,"conceptDeclaraton",false)),argument);
  }
}
