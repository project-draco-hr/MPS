{
  return new Comparator<SNode>(){
    private void check(    int index,    SNode searchedNode,    SNode editorNode){
      if (index == -1) {
        System.err.println("\"" + searchedNode.getRole_() + "\" can't found in "+ editorNode);
      }
    }
    private boolean fromSameCollection(    SNode node1,    SNode node2){
      return EqualUtil.equals(node1.getRole_(),node2.getRole_());
    }
    private int compareWithoutEditor(    SNode ancestor,    SNode node1,    SNode node2){
      int index1=ancestor.getIndexOfChild(node1);
      int index2=ancestor.getIndexOfChild(node2);
      return index1 - index2;
    }
    private int indexInEditor(    SNode editorNode,    String role,    int index){
      index--;
      if (editorNode.toString().startsWith("%" + role + "%")) {
        return -index;
      }
      for (      SNode childEditorNode : editorNode.getChildren()) {
        int result=indexInEditor(childEditorNode,role,index);
        if (result >= 0)         return result;
      }
      return index;
    }
    private int searchInEditors(    SNode ancestor,    SNode searchedNode){
      AbstractConceptDeclaration conceptDeclaration=ancestor.getConceptDeclarationAdapter();
      SModel structureModel=conceptDeclaration.getModel();
      Language language=(Language)structureModel.getModelDescriptor().getModule();
      SModel editorModel=language.getEditorModelDescriptor().getSModel();
      ConceptEditorDeclaration conceptEditorDeclaration=GoToEditorDeclarationHelper.findEditorDeclaration(editorModel,conceptDeclaration);
      SNode editorNode=conceptEditorDeclaration.getNode();
      int index=indexInEditor(editorNode,searchedNode.getRole_(),-1);
      if (index > -1 || ancestor.getParent() == null) {
        check(index,searchedNode,searchedNode.getContainingRoot());
        return index;
      }
      return searchInEditors(ancestor.getParent(),searchedNode);
    }
    private int compareWithEditor(    SNode ancestor,    SNode node1,    SNode node2){
      int index1=searchInEditors(ancestor,node1);
      int index2=searchInEditors(ancestor,node2);
      return index1 - index2;
    }
    public int compare(    SNode o1,    SNode o2){
      SNode root1=o1.getContainingRoot();
      SNode root2=o2.getContainingRoot();
      if (!EqualUtil.equals(root1,root2)) {
        return root1.toString().compareTo(root2.toString()) * 10;
      }
      List<SNode> anc1=o1.getAncestors(true);
      List<SNode> anc2=o2.getAncestors(true);
      for (int i1=0; i1 < anc1.size(); i1++) {
        if (i1 == 0)         continue;
        for (int i2=0; i2 < anc2.size(); i2++) {
          if (i2 == 0)           continue;
          if (EqualUtil.equals(anc1.get(i1),anc2.get(i2))) {
            SNode ancestor=anc1.get(i1);
            SNode node1=anc1.get(i1 - 1);
            SNode node2=anc2.get(i2 - 1);
            if (fromSameCollection(node1,node2)) {
              return compareWithoutEditor(ancestor,node1,node2);
            }
 else {
              return compareWithEditor(ancestor,node1,node2);
            }
          }
        }
      }
      return 0;
    }
  }
;
}
