{
{
    List<SNode> nodes=(List<SNode>)refactoringContext.getSelectedNodes();
    refactoringContext.setParameter("sourceModel",SNodeOperations.getModel(ListSequence.fromList(refactoringContext.getSelectedNodes()).first()).getModelDescriptor());
    Language sourceLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("sourceModel")));
    Language targetLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("targetModel")));
    List<SNode> editors=new ArrayList<SNode>();
    List<SNode> behaviors=new ArrayList<SNode>();
    List<SNode> constraints=new ArrayList<SNode>();
    List<SNode> dataFlows=new ArrayList<SNode>();
    SModelDescriptor editorModelDescriptor=sourceLanguage.getEditorModelDescriptor();
    if (editorModelDescriptor != null) {
      for (      SNode node : nodes) {
        SNode editor=RefUtil.findEditorDeclaration(editorModelDescriptor.getSModel(),node);
        if (editor != null) {
          ListSequence.fromList(editors).addElement(editor);
        }
      }
    }
    SModelDescriptor behaviorModelDescriptor=sourceLanguage.getBehaviorModelDescriptor();
    if (behaviorModelDescriptor != null) {
      for (      SNode node : nodes) {
        SNode behavior=RefUtil.findBehaviorDeclaration(behaviorModelDescriptor.getSModel(),node);
        if (behavior != null) {
          ListSequence.fromList(behaviors).addElement(behavior);
        }
      }
    }
    SModelDescriptor constraintsModelDescriptor=sourceLanguage.getConstraintsModelDescriptor();
    if (constraintsModelDescriptor != null) {
      for (      SNode node : nodes) {
        SNode constraint=RefUtil.findConstraintsDeclaration(constraintsModelDescriptor.getSModel(),node);
        if (constraint != null) {
          ListSequence.fromList(constraints).addElement(constraint);
        }
      }
    }
    SModelDescriptor dataflowModelDescriptor=sourceLanguage.getDataFlowModelDescriptor();
    if (dataflowModelDescriptor != null) {
      for (      SNode node : nodes) {
        SNode dataFlow=RefUtil.findDataFlowDeclaration(dataflowModelDescriptor.getSModel(),node);
        if (dataFlow != null) {
          ListSequence.fromList(dataFlows).addElement(dataFlow);
        }
      }
    }
    for (    SNode node : nodes) {
      refactoringContext.changeFeatureName(node,((SModelDescriptor)refactoringContext.getParameter("targetModel")).getSModelFqName().toString() + "." + SPropertyOperations.getString(node,"name"),SPropertyOperations.getString(node,"name"));
    }
    refactoringContext.moveNodesToModel(nodes,((SModelDescriptor)refactoringContext.getParameter("targetModel")).getSModel());
    if (ListSequence.fromList(editors).isNotEmpty()) {
      SModelDescriptor targetEditorModelDescriptor=targetLanguage.getEditorModelDescriptor();
      if (targetEditorModelDescriptor == null) {
        targetEditorModelDescriptor=LanguageAspect.EDITOR.createNew(targetLanguage);
      }
      SModel editorModel=targetEditorModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(editors,editorModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(editorModel);
    }
    if (ListSequence.fromList(behaviors).isNotEmpty()) {
      SModelDescriptor targetBehaviorModelDescriptor=targetLanguage.getBehaviorModelDescriptor();
      if (targetBehaviorModelDescriptor == null) {
        targetBehaviorModelDescriptor=LanguageAspect.BEHAVIOR.createNew(targetLanguage);
      }
      SModel behaviorModel=targetBehaviorModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(behaviors,behaviorModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(behaviorModel);
    }
    if (ListSequence.fromList(constraints).isNotEmpty()) {
      SModelDescriptor targetConstraintsModelDescriptor=targetLanguage.getConstraintsModelDescriptor();
      if (targetConstraintsModelDescriptor == null) {
        targetConstraintsModelDescriptor=LanguageAspect.CONSTRAINTS.createNew(targetLanguage);
      }
      SModel constraintsModel=targetConstraintsModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(constraints,constraintsModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(constraintsModel);
    }
    if (ListSequence.fromList(dataFlows).isNotEmpty()) {
      SModelDescriptor targetDataFlowModelDescriptor=targetLanguage.getDataFlowModelDescriptor();
      if (targetDataFlowModelDescriptor == null) {
        targetDataFlowModelDescriptor=LanguageAspect.DATA_FLOW.createNew(targetLanguage);
      }
      SModel dataFlowModel=targetDataFlowModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(dataFlows,dataFlowModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(dataFlowModel);
    }
  }
}
