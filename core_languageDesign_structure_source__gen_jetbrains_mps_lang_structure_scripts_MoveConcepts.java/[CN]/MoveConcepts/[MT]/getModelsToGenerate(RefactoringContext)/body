{
{
    Map<IModule,List<SModel>> result=MapSequence.fromMap(new HashMap<IModule,List<SModel>>());
    Language sourceLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("sourceModel")));
    if (sourceLanguage != null) {
      List<SModel> aspectList=ListSequence.fromList(((List<SModelDescriptor>)new ArrayList<SModelDescriptor>(sourceLanguage.getAspectModelDescriptors()))).select(new ISelector<SModelDescriptor,SModel>(){
        public SModel select(        SModelDescriptor it){
          return it.getSModel();
        }
      }
).toListSequence();
      MapSequence.fromMap(result).put(sourceLanguage,aspectList);
    }
    Language targetLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("targetModel")));
    if (targetLanguage != null) {
      List<SModel> aspectList=ListSequence.fromList(((List<SModelDescriptor>)new ArrayList<SModelDescriptor>(targetLanguage.getAspectModelDescriptors()))).select(new ISelector<SModelDescriptor,SModel>(){
        public SModel select(        SModelDescriptor it){
          return it.getSModel();
        }
      }
).toListSequence();
      MapSequence.fromMap(result).put(targetLanguage,aspectList);
    }
    return result;
  }
}
