{
  BaseAction goToRule=null;
  BaseAction goToNode=null;
  final TypeSystemStateTreeNode stateNode=(TypeSystemStateTreeNode)treeNode;
  if (stateNode.getRuleModel() != null && stateNode.getRuleId() != null) {
    goToRule=new BaseAction("Go to rule"){
      public void doExecute(      AnActionEvent e,      Map<String,Object> _params){
        GoToTypeErrorRuleUtil.goToRuleById(myOperationContext,new Pair<String,String>(stateNode.getRuleModel(),stateNode.getRuleId()));
      }
    }
;
  }
  final DefaultActionGroup group=ActionUtils.groupFromActions(ActionManager.getInstance().getAction("jetbrains.mps.ide.devkit.actions.GoToRule_Action"),goToNode);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      NodeMaps maps=myState.getNodeMaps();
      List<SNode> vars=stateNode.getVariables();
      if (null == vars) {
        return;
      }
      for (      SNode var : vars) {
        final SNode node=check_x8yvv7_a0a0d0a0a0a0f0i(maps,var);
        if (node != null && node.isRegistered()) {
          group.add(new BaseAction("Go to node with type " + var){
            public void doExecute(            AnActionEvent e,            Map<String,Object> _params){
              myOperationContext.getComponent(MPSEditorOpener.class).editNode(node,myOperationContext);
            }
          }
);
        }
      }
    }
  }
);
  return ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN,group).getComponent();
}
