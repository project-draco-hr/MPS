{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("treeNodeKind",new BaseReferenceConstraintsDescriptor("treeNodeKind",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          ISearchScope searchScope;
          if ((_context.getReferenceNode() != null) && (SLinkOperations.getTarget(_context.getReferenceNode(),"treePathAspect",false) != null)) {
            searchScope=new SimpleSearchScope(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getReferenceNode(),"treePathAspect",false),"nodeKinds",true));
          }
 else {
            searchScope=new EmptySearchScope();
          }
          return searchScope;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_uciz5j_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
