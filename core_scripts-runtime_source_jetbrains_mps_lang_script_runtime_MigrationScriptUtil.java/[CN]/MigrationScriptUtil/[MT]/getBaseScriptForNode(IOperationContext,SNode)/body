{
  if (scriptNode == null) {
    return null;
  }
  String fqClassName=ScriptNameUtil.getMigrationScriptFqClassName(scriptNode);
  String languageNamespace=NameUtil.namespaceFromLongName(fqClassName);
  languageNamespace=languageNamespace.substring(0,languageNamespace.length() - ".scripts".length());
  SModule mod=ModuleRepositoryFacade.getInstance().getModule(languageNamespace,Language.class);
  if (mod == null) {
    Solution sol=ModuleRepositoryFacade.getInstance().getModule(languageNamespace,Solution.class);
    if (sol != null && sol.getKind() != SolutionKind.NONE) {
      mod=sol;
    }
  }
  if (mod == null) {
    LOG.error("Module not found: " + languageNamespace);
    return null;
  }
  if (!((mod instanceof ReloadableModule)) && ((ReloadableModule)mod).willLoad()) {
    LOG.error("Module can't load classes: " + languageNamespace);
    return null;
  }
  Class<BaseMigrationScript> aClass;
  try {
    Class c=((ReloadableModule)mod).getOwnClass(fqClassName);
    if (BaseMigrationScript.class.isAssignableFrom(c)) {
      aClass=c.asSubclass(BaseMigrationScript.class);
    }
 else {
      return null;
    }
  }
 catch (  ClassNotFoundException e) {
    return null;
  }
  try {
    Constructor<BaseMigrationScript> constructor;
    try {
      constructor=aClass.getConstructor();
      return constructor.newInstance();
    }
 catch (    NoSuchMethodException ex) {
      constructor=aClass.getConstructor(IOperationContext.class);
      return constructor.newInstance(context);
    }
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
