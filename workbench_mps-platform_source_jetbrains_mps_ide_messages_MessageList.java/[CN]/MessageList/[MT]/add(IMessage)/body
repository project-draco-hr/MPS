{
  if (MPSCore.getInstance().isTestMode())   return;
  myMessagesInProgress.incrementAndGet();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (isDisposed()) {
        return;
      }
      int messages=myMessagesInProgress.decrementAndGet();
      if (myMessages.size() >= MAX_SIZE) {
        IMessage toRemove=myMessages.remove();
        updateMessageCounters(message,-1);
        if (isVisible(toRemove)) {
          myModel.removeFirst();
        }
      }
      if (isVisible(message)) {
        myModel.add(message);
        int index=myModel.getSize() - 1;
        if (myList.getAutoscrolls()) {
          myList.getSelectionModel().setSelectionInterval(index,index);
        }
        if (messages == 0) {
          myList.ensureIndexIsVisible(index);
        }
      }
      myMessages.add(message);
      updateMessageCounters(message,1);
      int width=getMessageWidth(message);
      if (width > myList.getFixedCellWidth()) {
        myList.setFixedCellWidth(width);
      }
      updateHeader();
      updateActions();
    }
    private void updateMessageCounters(    IMessage m,    int delta){
      if (m.getKind() == MessageKind.ERROR) {
        myErrors+=delta;
      }
      if (m.getKind() == MessageKind.WARNING) {
        myWarnings+=delta;
      }
      if (m.getKind() == MessageKind.INFORMATION) {
        myInfos+=delta;
      }
      if (m.getHintObject() != null) {
        myHintObjects+=delta;
      }
    }
  }
);
}
