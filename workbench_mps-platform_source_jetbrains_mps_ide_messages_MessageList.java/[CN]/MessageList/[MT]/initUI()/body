{
  myList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myList.setCellRenderer(new MessagesListCellRenderer());
  myComponent.setLayout(new BorderLayout());
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JPanel(),BorderLayout.CENTER);
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(myWarningsAction);
  group.add(myInfoAction);
  group.add(myAutoscrollToSourceAction);
  group.add(new MessagesLimitAction());
  myToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,false);
  panel.add(myToolbar.getComponent(),BorderLayout.NORTH);
  myComponent.add(panel,BorderLayout.WEST);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myList);
  myComponent.add(scrollPane,BorderLayout.CENTER);
  KeyStroke findKeyStroke=com.intellij.openapi.util.SystemInfo.isMac ? KeyStroke.getKeyStroke("meta F") : KeyStroke.getKeyStroke("ctrl F");
  myComponent.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (mySearchPanel == null) {
        mySearchPanel=new MessageToolSearchPanel(myList,MessageList.this);
        myComponent.add(mySearchPanel,BorderLayout.NORTH);
      }
      mySearchPanel.activate();
    }
  }
,findKeyStroke,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.setFixedCellHeight(Toolkit.getDefaultToolkit().getFontMetrics(myList.getFont()).getHeight() + 5);
  myList.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      openCurrentMessageIfPossible();
    }
  }
,KeyStroke.getKeyStroke("F4"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      openCurrentMessageIfPossible();
    }
  }
,KeyStroke.getKeyStroke("ENTER"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      showHelpForCurrentMessage();
    }
  }
,KeyStroke.getKeyStroke("F1"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      myList.setAutoscrolls(false);
      scrollPane.dispatchEvent(e);
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      boolean oneClickOpen=e.getClickCount() == 1 && e.getButton() == MouseEvent.BUTTON1 && myAutoscrollToSourceAction.isSelected(null);
      boolean twoClickOpen=e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1;
      if (oneClickOpen || twoClickOpen) {
        openCurrentMessageIfPossible();
      }
    }
    @Override public void mousePressed(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
  }
);
  myList.addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseDragged(    MouseEvent e){
    }
    @Override public void mouseMoved(    MouseEvent e){
      int index=myList.locationToIndex(e.getPoint());
      final IMessage message=index != -1 ? (IMessage)myModel.getElementAt(index) : null;
      if (message == null || !myAutoscrollToSourceAction.isSelected(null)) {
        myList.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        return;
      }
      boolean canNavigate=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return MessagesListCellRenderer.canNavigate(message) == NavStatus.YES;
        }
      }
);
      myList.setCursor(Cursor.getPredefinedCursor(canNavigate ? Cursor.HAND_CURSOR : Cursor.DEFAULT_CURSOR));
    }
  }
);
}
