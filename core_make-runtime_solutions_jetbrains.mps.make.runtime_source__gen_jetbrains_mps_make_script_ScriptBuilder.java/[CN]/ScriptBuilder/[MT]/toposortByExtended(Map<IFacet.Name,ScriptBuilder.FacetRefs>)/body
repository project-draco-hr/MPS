{
  for (  IMapping<IFacet.Name,ScriptBuilder.FacetRefs> m : SetSequence.<IMapping<IFacet.Name,ScriptBuilder.FacetRefs>>fromSet(MapSequence.fromMap(refs).mappingsSet())) {
    IFacet fct=MapSequence.<IFacet.Name,IFacet>fromMap(facetsView).get(m.key());
    for (    IFacet ex : ListSequence.<IFacet>fromList(m.value().extended)) {
      ListSequence.<IFacet>fromList(MapSequence.<IFacet.Name,ScriptBuilder.FacetRefs>fromMap(refs).get(ex.getName()).extendedBy).addElement(fct);
    }
  }
  GraphAnalyzer<IFacet.Name> ga=new GraphAnalyzer<IFacet.Name>(){
    @Override public Iterable<IFacet.Name> forwardEdges(    IFacet.Name v){
      return ListSequence.<IFacet>fromList(MapSequence.<IFacet.Name,ScriptBuilder.FacetRefs>fromMap(refs).get(v).extendedBy).<IFacet.Name>select(new ISelector<IFacet,IFacet.Name>(){
        public IFacet.Name select(        IFacet f){
          return f.getName();
        }
      }
);
    }
    @Override public Iterable<IFacet.Name> backwardEdges(    IFacet.Name v){
      return ListSequence.<IFacet>fromList(MapSequence.<IFacet.Name,ScriptBuilder.FacetRefs>fromMap(refs).get(v).extended).<IFacet.Name>select(new ISelector<IFacet,IFacet.Name>(){
        public IFacet.Name select(        IFacet f){
          return f.getName();
        }
      }
);
    }
    @Override public Iterable<IFacet.Name> vertices(){
      return MapSequence.fromMap(refs).keySet();
    }
  }
;
  for (  List<IFacet.Name> cyc : ListSequence.<List<IFacet.Name>>fromList(ga.findCycles())) {
    LOG.error("found cycle: " + cyc);
    error(null,"found cycle: " + cyc);
  }
  return ga.topologicalSort();
}
