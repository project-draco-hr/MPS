{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0wc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptFunctionParameter_OperationContext__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myConceptFunctionParameter_childSetter__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myConceptFunctionParameter_createdNode__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myConceptFunctionParameter_nodeToCopyPreProcess__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myConceptFunctionParameter_nodeToCopyPreProcessOriginal__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myConceptFunctionParameter_nodeToPastePostProcess__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myConceptFunctionParameter_nodeToPasteWrap__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myConceptFunctionParameter_parameterObject__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myConceptFunctionParameter_pattern__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myConceptFunctionParameter_strictly__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myConceptFunctionParameter_targetNode__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myCopyPasteHandlers__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myCopyPreProcessFunction__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myCopyPreProcessor__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myExecuteSmartActionFunction__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myGetActionUIFunction__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myIsSmartActionApplicableFunction__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myNF_Concept_NewInstance__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myNF_LinkList_AddNewChildOperation__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myNF_Link_SetNewChildOperation__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myNF_Model_CreateNewNodeOperation__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myNF_Model_CreateNewRootNodeOperation__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myNF_Node_InsertNewNextSiblingOperation__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myNF_Node_InsertNewPrevSiblingOperation__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myNF_Node_ReplaceWithNewOperation__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myNodeFactories__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myNodeFactory__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myNodeSetupFunction__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myNodeSetupFunction_EnclosingNode__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myNodeSetupFunction_SampleNode__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myNodeSubstituteActions__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myNodeSubstituteActionsBuilder__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myNodeSubstitutePreconditionFunction__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myPastePostProcessFunction__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myPastePostProcessor__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myPasteWrappers__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myQueryFunction_ActionType__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myQueryFunction_CanSubstitute__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myQueryFunction_GenericSubstituteMenuPart__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myQueryFunction_IconNode__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myQueryFunction_ParameterizedSideTransform_Handler__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myQueryFunction_ParameterizedSideTransform_Query__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myQueryFunction_ParameterizedSubstitute_Handler__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myQueryFunction_ParameterizedSubstitute_Icon__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myQueryFunction_ParameterizedSubstitute_Query__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myQueryFunction_ParameterizedSubstitute_String__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myQueryFunction_PasteWrapper__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myQueryFunction_RemoveBy_Condition__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myQueryFunction_ReturnSmallPart__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myQueryFunction_STVariableInitializer__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myQueryFunction_ST_CommonInitializer__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myQueryFunction_ST_RemoveBy_Condition__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myQueryFunction_SideTransform_ConceptHandler__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myQueryFunction_SideTransform_Handler__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myQueryFunction_SideTransform_Icon__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myQueryFunction_SideTransform_NodeQuery__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myQueryFunction_SideTransform_String__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myQueryFunction_SubstituteIcon__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myQueryFunction_SubstituteString__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myQueryFunction_SubstituteVariableInitializer__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myQueryFunction_SubstituteWrapper__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myQueryFunction_Substitute_CommonInitializer__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myQueryFunction_Substitute_Handler__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return myQueryFunction_Substitute_SelectionHandler__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myRemoveSTByConditionPart__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return mySideTransformHintSubstituteActions__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return mySideTransformHintSubstituteActionsBuilder__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return mySideTransformHintSubstitutePreconditionFunction__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return mySideTransformVariableReference__BehaviorDescriptor;
}
break;
case 69:
if (true) {
return mySmartActionParameterReference__BehaviorDescriptor;
}
break;
case 70:
if (true) {
return mySubstituteNodeBuilderVariableReference__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
