{
  if (neq_k79hya_a0a0g(SNodeOperations.getConcept(node1),SNodeOperations.getConcept(node2))) {
    return MultiTuple.<SNode,SNode>from(node1,node2);
  }
  SAbstractConcept concept=SNodeOperations.getConcept(node1);
  for (  SProperty p : CollectionSequence.fromCollection(concept.getProperties())) {
    if (neq_k79hya_a0a0e0g(node1.getProperty(p),node2.getProperty(p))) {
      return MultiTuple.<SNode,SNode>from(node1,node2);
    }
  }
  for (  SReferenceLink r : CollectionSequence.fromCollection(concept.getReferenceLinks())) {
    if (node1.getReference(r).getTargetNode() != node2.getReference(r).getTargetNode()) {
      return MultiTuple.<SNode,SNode>from(node1,node2);
    }
  }
  Tuples._2<SNode,SNode> currentResult=null;
  for (  SContainmentLink l : CollectionSequence.fromCollection(concept.getContainmentLinks())) {
    Iterator<? extends SNode> c1=node1.getChildren(l).iterator();
    Iterator<? extends SNode> c2=node2.getChildren(l).iterator();
    while (c1.hasNext() && c2.hasNext()) {
      SNode child1=c1.next();
      SNode child2=c2.next();
      Tuples._2<SNode,SNode> currentChildDiff=getDiffNodes(child1,child2);
      if (currentChildDiff == null) {
        continue;
      }
      if (currentResult == null) {
        currentResult=currentChildDiff;
      }
 else {
        return MultiTuple.<SNode,SNode>from(node1,node2);
      }
    }
    if (c1.hasNext() || c2.hasNext()) {
      return MultiTuple.<SNode,SNode>from(node1,node2);
    }
  }
  return currentResult;
}
