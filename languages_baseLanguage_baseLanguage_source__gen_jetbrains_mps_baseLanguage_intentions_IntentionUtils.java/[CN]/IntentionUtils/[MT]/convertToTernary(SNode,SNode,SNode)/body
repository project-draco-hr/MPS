{
  Tuples._2<SNode,SNode> diff=getAppreciateDiffNodes(statement1,statement2);
  if (diff == null) {
    return null;
  }
  SNode ternaryOperator=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"));
  SLinkOperations.setTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012826fL,"condition"),(SNode)CopyUtil.copy(condition));
  SLinkOperations.setTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012a1c0L,"ifTrue"),(SNode)CopyUtil.copy(diff._0()));
  SLinkOperations.setTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012cedcL,"ifFalse"),(SNode)CopyUtil.copy(diff._1()));
  SNodeOperations.replaceWithAnother(diff._0(),ternaryOperator);
  return statement1;
}
