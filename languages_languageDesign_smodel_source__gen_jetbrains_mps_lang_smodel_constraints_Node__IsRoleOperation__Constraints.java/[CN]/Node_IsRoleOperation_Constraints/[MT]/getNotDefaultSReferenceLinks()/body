{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1144195091934l,1144195396777l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8675788371017092295l,-9098312342032910879l),1144195091934l,1144195396777l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode conceptOfParent=SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1144195091934l,1144195362400l,"conceptOfParent"));
          return AbstractConceptDeclaration_Behavior.call_getAggregationLinkDeclarations_1213877394521(conceptOfParent);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_gpgb0w_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
