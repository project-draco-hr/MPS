{
  SNode operation=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.AndExpression") ? SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.OrExpression",null) : SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AndExpression",null));
  SNode leftCandidate=IntentionUtils.negateBooleanNodes(SLinkOperations.getTarget(node,"leftExpression",true));
  SNode rightCandidate=IntentionUtils.negateBooleanNodes(SLinkOperations.getTarget(node,"rightExpression",true));
  if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.structure.AndExpression")) {
    if (SNodeOperations.isInstanceOf(leftCandidate,"jetbrains.mps.baseLanguage.structure.OrExpression")) {
      SNode parens=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
      SLinkOperations.setTarget(parens,"expression",leftCandidate,true);
      leftCandidate=parens;
    }
    if (SNodeOperations.isInstanceOf(rightCandidate,"jetbrains.mps.baseLanguage.structure.OrExpression")) {
      SNode parens=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
      SLinkOperations.setTarget(parens,"expression",rightCandidate,true);
      rightCandidate=parens;
    }
  }
  SLinkOperations.setTarget(operation,"leftExpression",leftCandidate,true);
  SLinkOperations.setTarget(operation,"rightExpression",rightCandidate,true);
  SNodeOperations.replaceWithAnother(node,operation);
}
