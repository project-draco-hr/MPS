{
  myModel=model;
  myMappingConfiguration=mappingConfiguration;
  for (  SNode child : mappingConfiguration.getChildrenIterable()) {
    String conceptName=child.getConceptFqName();
    if (conceptName.equals(RuleUtil.concept_Reduction_MappingRule)) {
      myReductionRules.add(new TemplateReductionRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_Root_MappingRule)) {
      myRootMappingRules.add(new TemplateRootMappingRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_PatternReduction_MappingRule)) {
      myReductionRules.add(new TemplateReductionPatternRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_CreateRootRule)) {
      myCreateRootRules.add(new TemplateCreateRootRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_Weaving_MappingRule)) {
      myWeaving_MappingRules.add(new TemplateWeavingRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_DropRootRule)) {
      myDropRootRules.add(new TemplateDropRuleInterpreted(child));
    }
 else     if (conceptName.equals(RuleUtil.concept_MappingScriptReference)) {
      SNode mappingScript=RuleUtil.getMappingScriptReference_Script(child);
      if (mappingScript == null) {
        continue;
      }
      if (child.getRole_().equals(RuleUtil.link_MappingConfiguration_preMappingScript)) {
        myPreScripts.add(new TemplateMappingScriptInterpreted(mappingScript));
      }
 else {
        myPostScripts.add(new TemplateMappingScriptInterpreted(mappingScript));
      }
    }
  }
}
