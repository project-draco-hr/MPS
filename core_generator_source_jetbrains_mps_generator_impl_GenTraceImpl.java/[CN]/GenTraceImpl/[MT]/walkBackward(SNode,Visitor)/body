{
  Phase ph=findPhaseForOutput(node);
  if (ph == null) {
    return;
  }
  ArrayList<SNodeId> nodes=new ArrayList<SNodeId>();
  final SNodeId startNodeId=node.getNodeId();
  nodes.add(startNodeId);
  for (; ph != null && !nodes.isEmpty(); ph=ph.prev) {
    Collection<Element> changes=ph.getChangesWithOutput(nodes,myTransientModule);
    dispatch(v,ph,changes);
    if (!changes.isEmpty()) {
      LinkedHashSet<SNodeId> prevOutputs=new LinkedHashSet<SNodeId>();
      for (      Element e : changes) {
        prevOutputs.add(e.input);
      }
      prevOutputs.add(startNodeId);
      nodes.clear();
      nodes.addAll(prevOutputs);
    }
  }
}
