{
  if (SLinkOperations.getTarget(subtype,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")) == SLinkOperations.getTarget(supertype,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"))) {
    if (!(ListSequence.fromList(SLinkOperations.getChildren(subtype,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).count() == ListSequence.fromList(SLinkOperations.getChildren(supertype,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).count())) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"Parameter types counts don't match","r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","1239968591797",null,errorTarget);
      HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
    }
{
      SNode lp;
      SNode rp;
      Iterator<SNode> lp_iterator=ListSequence.fromList(SLinkOperations.getChildren(subtype,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).iterator();
      Iterator<SNode> rp_iterator=ListSequence.fromList(SLinkOperations.getChildren(supertype,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).iterator();
      while (true) {
        if (!(lp_iterator.hasNext())) {
          break;
        }
        if (!(rp_iterator.hasNext())) {
          break;
        }
        lp=lp_iterator.next();
        rp=rp_iterator.next();
{
          SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
          EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","1239968769054",0,null);
          _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
          typeCheckingContext.createLessThanInequality((SNode)lp,(SNode)rp,false,true,_info_12389875345);
        }
      }
    }
  }
 else {
    if (!(ListSequence.fromList(NamedTupleDeclaration__BehaviorDescriptor.allExtends_id2ItBWjOSZqc.invoke(SLinkOperations.getTarget(subtype,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")))).contains(SLinkOperations.getTarget(supertype,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"))))) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(supertype,"Incompatible named closure","r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","2213502935616215826",null,errorTarget);
      HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
    }
  }
}
