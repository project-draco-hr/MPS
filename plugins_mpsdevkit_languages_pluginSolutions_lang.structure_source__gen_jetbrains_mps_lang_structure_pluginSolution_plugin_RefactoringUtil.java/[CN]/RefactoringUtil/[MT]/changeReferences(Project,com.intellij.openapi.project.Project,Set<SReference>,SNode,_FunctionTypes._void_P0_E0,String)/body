{
  List<SNode> nodesToShow=SetSequence.fromSet(usages).select(new ISelector<SReference,SNode>(){
    public SNode select(    SReference it){
      return it.getSourceNode();
    }
  }
).toListSequence();
  refactor(mpsProject,project,nodesToShow,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
    public void invoke(    final Set<SNode> included){
      executeBefore.invoke();
      SetSequence.fromSet(usages).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return SetSequence.fromSet(included).contains(it.getSourceNode());
        }
      }
).visitAll(new IVisitor<SReference>(){
        public void visit(        SReference usage){
          usage.getSourceNode().setReferenceTarget(usage.getLink(),newTarget);
        }
      }
);
    }
  }
,name);
}
