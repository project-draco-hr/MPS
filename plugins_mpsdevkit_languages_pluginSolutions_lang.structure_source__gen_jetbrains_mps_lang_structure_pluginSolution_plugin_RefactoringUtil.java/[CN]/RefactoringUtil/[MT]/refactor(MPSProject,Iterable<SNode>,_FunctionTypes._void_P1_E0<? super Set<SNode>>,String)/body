{
  SearchResults sr=nodesToRefactoringResult(nodes,"References");
  RefactoringAccessEx.getInstance().showRefactoringView(mpsProject.getProject(),new RefactoringViewAction(){
    public void performAction(    final RefactoringViewItem refactoringViewItem){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          Iterable<SNode> includedNodes;
          if (refactoringViewItem instanceof RefactoringViewItemImpl) {
            List<SNodeReference> nodeRefs=as_40hv3l_a0a0a0a1a0a0a0a0a0a0b0a1a5(refactoringViewItem,RefactoringViewItemImpl.class).getUsagesView().getIncludedResultNodes();
            includedNodes=ListSequence.fromList(nodeRefs).select(new ISelector<SNodeReference,SNode>(){
              public SNode select(              SNodeReference it){
                return it.resolve(mpsProject.getRepository());
              }
            }
);
          }
 else {
            includedNodes=nodes;
          }
          toExecuteWithIncluded.invoke(SetSequence.fromSetWithValues(new HashSet<SNode>(),Sequence.fromIterable(includedNodes).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return it != null;
            }
          }
)));
        }
      }
);
      refactoringViewItem.close();
    }
  }
,sr,false,name);
}
