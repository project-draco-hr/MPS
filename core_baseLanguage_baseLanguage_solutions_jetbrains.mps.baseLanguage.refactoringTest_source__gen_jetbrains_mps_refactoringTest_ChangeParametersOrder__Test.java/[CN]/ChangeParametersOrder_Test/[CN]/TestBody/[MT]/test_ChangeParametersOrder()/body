{
  this.addNodeById("1230052943947");
  this.addNodeById("1230052943971");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052943949"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  SNode p1=ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).getElement(0);
  SNode p0=ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).getElement(1);
  SLinkOperations.removeAllChildren(params.getDeclaration(),"parameter");
  SLinkOperations.addChild(params.getDeclaration(),"parameter",p0);
  SLinkOperations.addChild(params.getDeclaration(),"parameter",p1);
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052943949"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  List<SNode> ussages=ListSequence.<SNode>fromArray();
  ListSequence.fromList(ussages).addElement(SNodeOperations.cast(this.getNodeById("1230052943965"),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
  ref.setUsages(ussages);
  ref.doRefactoring();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.<SNode>fromArray(SNodeOperations.cast(this.getNodeById("1230052943948"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.<SNode>fromArray(SNodeOperations.cast(this.getNodeById("1230052943972"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
