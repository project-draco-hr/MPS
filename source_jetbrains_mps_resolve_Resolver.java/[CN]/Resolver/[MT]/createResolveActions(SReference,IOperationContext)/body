{
  String resolveInfo=reference.getResolveInfo();
  String role=reference.getRole();
  final SNode sourceNode=reference.getSourceNode();
  ConceptDeclaration sourceConcept=SModelUtil.getConceptDeclaration(sourceNode,operationContext.getScope());
  LinkDeclaration referenceLinkDeclaration=SModelUtil.findLinkDeclaration(sourceConcept,role);
  List<INodeSubstituteAction> actions=ModelActions.createReferentSubstituteActions(sourceNode,null,referenceLinkDeclaration,operationContext);
  List<INodeSubstituteAction> matchingActions=new ArrayList<INodeSubstituteAction>();
  for (  INodeSubstituteAction action : actions) {
    if (action.canSubstitute(resolveInfo)) {
      matchingActions.add(action);
    }
  }
  Collections.sort(matchingActions,new Comparator<INodeSubstituteAction>(){
    public int compare(    INodeSubstituteAction o1,    INodeSubstituteAction o2){
      if (!(o2 instanceof DefaultReferentNodeSubstituteAction))       return 1;
      if (!(o1 instanceof DefaultReferentNodeSubstituteAction))       return -1;
      DefaultReferentNodeSubstituteAction action1=(DefaultReferentNodeSubstituteAction)o1;
      DefaultReferentNodeSubstituteAction action2=(DefaultReferentNodeSubstituteAction)o2;
      SNode node1=action1.getParameterNode();
      SNode node2=action2.getParameterNode();
      if (node1.getModel() == sourceNode.getModel())       return 1;
      if (node2.getModel() == sourceNode.getModel())       return -1;
      return 0;
    }
  }
);
  return matchingActions;
}
