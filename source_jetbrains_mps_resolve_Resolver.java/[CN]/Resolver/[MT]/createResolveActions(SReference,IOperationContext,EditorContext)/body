{
  String resolveInfo=reference.getResolveInfo();
  String role=reference.getRole();
  final SNode sourceNode=reference.getSourceNode();
  ConceptDeclaration sourceConcept=SModelUtil.getConceptDeclaration(sourceNode,operationContext.getScope());
  LinkDeclaration refLinkDeclaration=SModelUtil.findLinkDeclaration(sourceConcept,role);
  LinkDeclaration childLinkDeclaration=SModelUtil.findLinkDeclaration(SModelUtil.getConceptDeclaration(sourceNode.getParent(),operationContext.getScope()),sourceNode.getRole_());
  EditorCell editorCell=sourceNode.getParent() == null ? editorContext.createNodeCell(sourceNode) : editorContext.createNodeCell(sourceNode.getParent());
  Set<EditorCell> frontier=new HashSet<EditorCell>();
  Set<EditorCell> newFrontier=new HashSet<EditorCell>();
  frontier.add(editorCell);
  outer:   while (!frontier.isEmpty()) {
    for (    EditorCell cell : frontier) {
      Object userObject=cell.getUserObject(EditorCell.METAINFO_LINK_DECLARATION);
      if (userObject == refLinkDeclaration || userObject == childLinkDeclaration) {
        editorCell=cell;
        break outer;
      }
      if (cell instanceof EditorCell_Collection) {
        newFrontier.addAll(CollectionUtil.iteratorAsList(((EditorCell_Collection)cell).cells()));
      }
    }
    frontier=newFrontier;
    newFrontier=new HashSet<EditorCell>();
  }
  INodeSubstituteInfo substituteInfo=editorCell.getSubstituteInfo();
  if (substituteInfo == null)   substituteInfo=new NullSubstituteInfo();
  List<INodeSubstituteAction> actions=(List<INodeSubstituteAction>)(List)substituteInfo.getMatchingItems(resolveInfo,false);
  List<INodeSubstituteAction> matchingActions=new ArrayList<INodeSubstituteAction>();
  for (  INodeSubstituteAction action : actions) {
    if (action.canSubstitute(resolveInfo)) {
      matchingActions.add(action);
    }
  }
  Collections.sort(matchingActions,new Comparator<INodeSubstituteAction>(){
    public int compare(    INodeSubstituteAction o1,    INodeSubstituteAction o2){
      if (!(o2 instanceof DefaultReferentNodeSubstituteAction))       return 1;
      if (!(o1 instanceof DefaultReferentNodeSubstituteAction))       return -1;
      DefaultReferentNodeSubstituteAction action1=(DefaultReferentNodeSubstituteAction)o1;
      DefaultReferentNodeSubstituteAction action2=(DefaultReferentNodeSubstituteAction)o2;
      SNode node1=action1.getParameterNode();
      SNode node2=action2.getParameterNode();
      if (node1.getModel() == sourceNode.getModel())       return 1;
      if (node2.getModel() == sourceNode.getModel())       return -1;
      return 0;
    }
  }
);
  return matchingActions;
}
