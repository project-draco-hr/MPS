{
  Object left=this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true));
  Object right=this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true));
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression")) {
    return ((Integer)left) << ((Integer)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression")) {
    return ((Integer)left) & ((Integer)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression")) {
    return ((Integer)left) | ((Integer)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression")) {
    return ((Integer)left) ^ ((Integer)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.AndExpression")) {
    return ((Boolean)left) && ((Boolean)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.OrExpression")) {
    return ((Boolean)left) || ((Boolean)right);
  }
  if (SNodeOperations.isInstanceOf(e,"jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
    return eq_p8h609_a0a0l0f2(left,right);
  }
  throw new UnsupportedOperationException(e.getPresentation());
}
