{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode dotConceptInstance=SConceptOperations.createNewNode("jetbrains.mps.nanoj.structure.DotExpression",null);
        SNodeOperations.replaceWithAnother(sourceNode,dotConceptInstance);
        SLinkOperations.setTarget(dotConceptInstance,"leftPart",sourceNode,true);
        return dotConceptInstance;
      }
      public String getMatchingText(      String pattern){
        return ". dot";
      }
    }
);
  }
  return result;
}
