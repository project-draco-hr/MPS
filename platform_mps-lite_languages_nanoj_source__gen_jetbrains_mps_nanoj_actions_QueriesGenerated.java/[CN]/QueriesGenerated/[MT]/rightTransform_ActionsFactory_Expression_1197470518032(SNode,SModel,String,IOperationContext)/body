{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.NotEqualsExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.nanoj.structure.NotEqualsExpression",null);
        SNodeOperations.replaceWithAnother(sourceNode,newNode);
        SLinkOperations.setTarget(newNode,"left",sourceNode,true);
        return newNode;
      }
      public String getMatchingText(      String pattern){
        return "!=";
      }
    }
);
  }
  return result;
}
