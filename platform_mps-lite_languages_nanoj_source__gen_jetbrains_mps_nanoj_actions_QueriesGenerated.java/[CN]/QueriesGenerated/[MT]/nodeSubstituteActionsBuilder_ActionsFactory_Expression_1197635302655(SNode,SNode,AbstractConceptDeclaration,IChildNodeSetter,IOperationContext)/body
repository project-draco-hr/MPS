{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.Expression",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        int value=Integer.parseInt(pattern);
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.nanoj.structure.NumberExpression",null);
        SPropertyOperations.set(result,"number","" + (value));
        return result;
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return _PrecompiledPatterns.REGEXP.matcher(pattern).matches();
      }
    }
);
  }
  return result;
}
