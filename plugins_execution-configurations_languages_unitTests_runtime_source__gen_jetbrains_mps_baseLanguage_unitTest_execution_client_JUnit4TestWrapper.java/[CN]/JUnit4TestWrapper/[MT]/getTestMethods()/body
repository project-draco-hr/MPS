{
  SNode node=getNode();
  Iterable<SNode> nodes=Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),node,"virtual_getThisType_7405920559687254782",new Object[]{}),"jetbrains.mps.baseLanguage.structure.IClassifierType","call_getMembers_7405920559687277275",new Object[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    }
  }
);
  return Sequence.fromIterable(SNodeOperations.ofConcept(nodes,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return JUnit4MethodWrapper.isJUnit4TestMethod(it);
    }
  }
).select(new ISelector<SNode,ITestNodeWrapper>(){
    public ITestNodeWrapper select(    SNode it){
      return TestNodeWrapperFactory.tryToWrap(it);
    }
  }
).where(new IWhereFilter<ITestNodeWrapper>(){
    public boolean accept(    ITestNodeWrapper it){
      return it != null;
    }
  }
);
}
