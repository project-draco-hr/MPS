{
  SNode node=getNode();
  Iterable<SNode> nodes=Sequence.fromIterable(((Iterable<SNode>)BHReflection.invoke(((SNode)BHReflection.invoke(node,SMethodTrimmedId.create("getThisType",null,"6r77ob2UWbY"))),SMethodTrimmedId.create("getMembers",MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x66c71d82c2eb7f7eL,"jetbrains.mps.baseLanguage.structure.IClassifierType"),"6r77ob2V1Fr")))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    }
  }
);
  return Sequence.fromIterable(SNodeOperations.ofConcept(nodes,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return JUnit4MethodWrapper.isJUnit4TestMethod(it);
    }
  }
).select(new ISelector<SNode,ITestNodeWrapper>(){
    public ITestNodeWrapper select(    SNode it){
      return TestNodeWrapperFactory.tryToWrap(it);
    }
  }
).where(new IWhereFilter<ITestNodeWrapper>(){
    public boolean accept(    ITestNodeWrapper it){
      return it != null;
    }
  }
);
}
