{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("match",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      return (_context.getSmartReference() ? "\\" + SPropertyOperations.getString(_context.getParameterNode(),"name") : SPropertyOperations.getString(_context.getParameterNode(),"name"));
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> matches=new ArrayList<SNode>();
      SNode top=_context.getEnclosingNode();
      while (SNodeOperations.getParent(top) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(top),"jetbrains.mps.baseLanguage.regexp.structure.Regexp")) {
        top=SNodeOperations.getParent(top);
      }
      ListSequence.fromList(matches).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp",true,new String[]{})));
      if (SNodeOperations.isInstanceOf(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp")) {
        ListSequence.fromList(matches).addElement(SNodeOperations.cast(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"));
      }
      return matches;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c89590515(jetbrains.mps.baseLanguage.regexp.constraints)","1213104860360");
    }
  }
);
  return result;
}
