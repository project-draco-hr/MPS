{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("match",new BaseReferenceConstraintsDescriptor("match",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return (_context.getSmartReference() ? "\\" + SPropertyOperations.getString(_context.getParameterNode(),"name") : SPropertyOperations.getString(_context.getParameterNode(),"name"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> matches=new ArrayList<SNode>();
          SNode top=_context.getEnclosingNode();
          while (SNodeOperations.getParent(top) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(top),"jetbrains.mps.baseLanguage.regexp.structure.Regexp")) {
            top=SNodeOperations.getParent(top);
          }
          ListSequence.fromList(matches).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp",true,new String[]{})));
          if (SNodeOperations.isInstanceOf(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp")) {
            ListSequence.fromList(matches).addElement(SNodeOperations.cast(top,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"));
          }
          return matches;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_15u81x_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
