{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,0x1118e0a5335L,"match"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,0x1118e0a5335L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return (_context.getSmartReference() ? "\\" + SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) : SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> matches=new ArrayList<SNode>();
          SNode top=_context.getEnclosingNode();
          while (SNodeOperations.getParent(top) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(top),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a06efdL,"jetbrains.mps.baseLanguage.regexp.structure.Regexp"))) {
            top=SNodeOperations.getParent(top);
          }
          ListSequence.fromList(matches).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(top,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111797946c7L,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"),true,new SAbstractConcept[]{})));
          if (SNodeOperations.isInstanceOf(top,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111797946c7L,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"))) {
            ListSequence.fromList(matches).addElement(SNodeOperations.cast(top,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111797946c7L,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp")));
          }
          return matches;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_15u81x_a0a3a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
