{
  this.myNode=new ClassNode();
  reader.accept(this.myNode,ClassReader.SKIP_CODE & ClassReader.SKIP_DEBUG);
  if (this.myNode.signature != null) {
    SignatureReader signReader=new SignatureReader(this.myNode.signature);
    signReader.accept(new SignatureVisitorAdapter(){
      public SignatureVisitor visitSuperclass(){
        return new ASMClass.ClassifierSignatureVisitor(){
          public void visitEnd(){
            ASMClassType cls=new ASMClassType(this.myName);
            ASMClass.this.myGenericSuperclass=new ASMParameterizedType(cls,this.myParameters);
          }
        }
;
      }
      public SignatureVisitor visitInterface(){
        return new ASMClass.ClassifierSignatureVisitor(){
          public void visitEnd(){
            ASMClassType cls=new ASMClassType(this.myName);
            ASMClass.this.myGenericInterfaces.add(new ASMParameterizedType(cls,this.myParameters));
          }
        }
;
      }
    }
);
  }
 else {
    if (this.myNode.superName != null) {
      this.myGenericSuperclass=new ASMClassType(this.myNode.superName.replace('/','.'));
    }
    for (    String intfc : (List<String>)this.myNode.interfaces) {
      this.myGenericInterfaces.add(new ASMClassType(intfc.replace('/','.')));
    }
  }
  if (this.myNode.signature != null) {
    this.myTypeVariables.addAll(TypeUtil.getFormalTypeParameters(this.myNode.signature));
  }
  for (  FieldNode fn : (List<FieldNode>)this.myNode.fields) {
    this.myFields.add(new ASMField(fn));
  }
  for (  MethodNode mn : (List<MethodNode>)this.myNode.methods) {
    ASMMethod am=new ASMMethod(mn);
    if (am.isConstructor()) {
      this.myConstructors.add(am);
    }
 else {
      this.myMethods.add(am);
    }
  }
  if (this.myNode.visibleAnnotations != null || this.myNode.invisibleAnnotations != null) {
    int size=((this.myNode.visibleAnnotations != null ? this.myNode.visibleAnnotations.size() : 0)) + ((this.myNode.invisibleAnnotations != null ? this.myNode.invisibleAnnotations.size() : 0));
    this.myAnnotations=new ArrayList<ASMAnnotation>(size);
    if (this.myNode.visibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myNode.visibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        this.myAnnotations.add(aa);
      }
    }
    if (this.myNode.invisibleAnnotations != null) {
      for (      AnnotationNode an : (List<AnnotationNode>)this.myNode.invisibleAnnotations) {
        ASMAnnotation aa=new ASMAnnotation(an);
        this.myAnnotations.add(aa);
      }
    }
  }
}
