{
  SNode parent=helper.parent(thisNode);
  String parentLocation=helper.contentLocations().get(parent);
  String folderLocation=parentLocation + "/" + BuildString_Behavior.call_getText_4380385936562005550(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getReferenceLink(new UUID(934837630734519964l,-6831122735637083229l),6592112598314498926l,6592112598314801433l,"plugin")),MetaAdapterFactory.getContainmentLink(new UUID(934837630734519964l,-6831122735637083229l),6592112598314498932l,6592112598314855574l,"containerName")),helper.getMacroHelper());
  helper.locations().put(thisNode,folderLocation);
  helper.contentLocations().put(thisNode,folderLocation);
  for (  SNode ic : ListSequence.fromList(SLinkOperations.getChildren(thisNode,MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l,-5075149991798053422l),4701820937132344003l,7389400916848037006l,"children"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(8755280088213897754l,-5075149991798053422l),5610619299013057363l,"jetbrains.mps.build.structure.BuildLayout_ImportContent"));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(new UUID(8755280088213897754l,-5075149991798053422l),5610619299013057363l,"jetbrains.mps.build.structure.BuildLayout_ImportContent"));
    }
  }
)) {
    SNode node=SNodeOperations.as(SLinkOperations.getTarget(ic,MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l,-5075149991798053422l),5610619299013057363l,5610619299013057365l,"target")),MetaAdapterFactory.getInterfaceConcept(new UUID(8755280088213897754l,-5075149991798053422l),7128123785277710723l,"jetbrains.mps.build.structure.BuildLayout_PathElement"));
    if ((node != null)) {
      if (!(helper.locations().containsKey(node))) {
        helper.locations().put(node,folderLocation);
      }
      if (!(helper.contentLocations().containsKey(node))) {
        helper.contentLocations().put(node,folderLocation);
      }
    }
  }
}
