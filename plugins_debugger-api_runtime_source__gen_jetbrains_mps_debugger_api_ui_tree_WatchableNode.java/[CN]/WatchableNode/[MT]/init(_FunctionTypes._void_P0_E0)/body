{
  if (myInitialized) {
    callback.invoke();
    return;
  }
  if (!(isLeaf())) {
    if (myInitializationInProgress.compareAndSet(false,true)) {
      myState.invokeEvaluation(new _FunctionTypes._void_P0_E0(){
        public void invoke(){
          try {
            myWatchable.getValue().initSubvalues();
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                try {
                  removeAllChildren();
                  for (                  IWatchable watchable : ListSequence.fromList(getValue().getSubvalues())) {
                    add(new WatchableNode(watchable,myState));
                  }
                  updatePresentation();
                  myInitialized=true;
                  callback.invoke();
                  for (                  _FunctionTypes._void_P0_E0 callback : ListSequence.fromList(myCallbacks)) {
                    try {
                      callback.invoke();
                    }
 catch (                    Throwable t) {
                      if (LOG.isEnabledFor(Priority.ERROR)) {
                        LOG.error("",t);
                      }
                    }
                  }
                  ListSequence.fromList(myCallbacks).clear();
                  nodeChanged();
                }
  finally {
                  myInitializationInProgress.set(false);
                }
              }
            }
);
          }
 catch (          Throwable t) {
            myInitializationInProgress.set(false);
          }
        }
      }
);
    }
 else {
      ListSequence.fromList(myCallbacks).addElement(callback);
    }
  }
}
