{
  if (sourceModels.isEmpty()) {
    return;
  }
  final RefactoringNodeMembersAccessModifier modifier=new RefactoringNodeMembersAccessModifier();
  final List<org.jetbrains.mps.openapi.model.SModel> descriptors=new ArrayList<org.jetbrains.mps.openapi.model.SModel>();
  SModelRepository.getInstance().saveAll();
  context.setUpMembersAccessModifier(modifier);
  modifier.addModelsToModify(sourceModels);
  SNode.setNodeMemberAccessModifier(modifier);
  for (  SModel model : sourceModels) {
    if (!(model.isDisposed())) {
      descriptors.add(model.getModelDescriptor());
    }
  }
  final IOperationContext operationContext=new ProjectOperationContext(context.getSelectedProject());
  new Thread(){
    public void run(){
      try {
        MakeSession sess=new MakeSession(operationContext);
        if (IMakeService.INSTANCE.get().openNewSession(sess)) {
          Future<IResult> result=IMakeService.INSTANCE.get().make(sess,new ModelsToResources(operationContext,descriptors).resources(false));
          result.get();
        }
      }
 catch (      InterruptedException e) {
      }
catch (      CancellationException ignore) {
      }
catch (      ExecutionException e) {
        e.printStackTrace();
      }
 finally {
        onGenerationFinished();
      }
    }
  }
.start();
}
