{
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ProgressManager.getInstance().run(new Task.Modal(ProjectHelper.toIdeaProject(refactoringContext.getCurrentOperationContext().getProject()),"Finding usages...",false){
        public void run(        @NotNull ProgressIndicator indicator){
          indicator.setIndeterminate(true);
          final Wrappers._boolean resultsFound=new Wrappers._boolean(false);
          final Wrappers._T<SearchResults> result=new Wrappers._T<SearchResults>(null);
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              try {
                jetbrains.mps.project.Project project=refactoringContext.getSelectedProject();
                refactoringContext.setCurrentOperationContext(new ProjectOperationContext(project));
                IRefactoring refactoring=refactoringContext.getRefactoring();
                result.value=refactoring.getAffectedNodes(refactoringContext);
                resultsFound.value=result.value != null;
              }
 catch (              Throwable t) {
                myLog.error(t);
              }
            }
          }
);
          if (!(resultsFound.value)) {
            int promptResult=JOptionPane.showConfirmDialog(MPSCommonDataKeys.FRAME.getData(DataManager.getInstance().getDataContext()),"An exception occurred during searching affected nodes. Do you want to continue anyway?","Exception",JOptionPane.YES_NO_OPTION);
            if (promptResult == JOptionPane.YES_OPTION) {
              resultsFound.value=true;
            }
          }
          if (!(resultsFound.value)) {
            return;
          }
          final SearchResults usages=result.value;
          ModelAccess.instance().runReadInEDT(new Runnable(){
            public void run(){
              refactoringContext.setUsages(usages);
              if (!(usages.getSearchResults().isEmpty())) {
                showRefactoring(refactoringContext,usages);
              }
 else {
                doExecuteWithDialog(refactoringContext);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
