{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.ui.structure.UIObjectType"),true),"uiObject",false))).translate(new ITranslator2<SNode,SNode>(){
          public Iterable<SNode> translate(          SNode o){
            return SLinkOperations.getTargets(o,"compartment",true);
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CompartmentReferenceExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            return SNodeOperations.replaceWithAnother(_context.getSourceNode(),_quotation_createNode_8jobl_a0a0a0a0a(_context.getSourceNode(),(item)));
          }
          public String getMatchingText(          String pattern){
            return "/" + SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
        }
);
      }
    }
  }
  return result;
}
