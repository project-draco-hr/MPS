{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final List<SNode> availableObjects=new Computable<List<SNode>>(){
    public List<SNode> compute(){
      final SNode ctx=SNodeOperations.getAncestorWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.ui.structure.UIObjectStatement","jetbrains.mps.baseLanguage.structure.IStatementListContainer"},true,false);
      if (SNodeOperations.isInstanceOf(ctx,"jetbrains.mps.ui.structure.UIObjectStatement")) {
        return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.ui.modeling.structure.UIObject")).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode uio){
            return !(SPropertyOperations.getBoolean(uio,"abstract")) && ((UIObject_Behavior.call_actuallyBelongsTo_1719339442171687163(uio) == null) || Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(ctx,"jetbrains.mps.ui.structure.UIObjectStatement"),"uiObject",false))).contains(UIObject_Behavior.call_actuallyBelongsTo_1719339442171687163(uio)));
          }
        }
).toListSequence();
      }
 else {
        return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.ui.modeling.structure.UIObject")).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode uio){
            return !(SPropertyOperations.getBoolean(uio,"abstract"));
          }
        }
).toListSequence();
      }
    }
  }
.compute();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CreateUIObjectStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return availableObjects;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode uios=SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.CreateUIObjectStatement",null);
              SLinkOperations.setTarget(uios,"uiObject",(item),false);
              return uios;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CreateUIObjectStatement"),"conceptAlias") + " " + SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.AppendUIObjectStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return availableObjects;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode auios=SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.AppendUIObjectStatement",null);
              SLinkOperations.setTarget(auios,"uiObject",(item),false);
              return auios;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.AppendUIObjectStatement"),"conceptAlias") + " " + SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.InsertUIObjectStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return availableObjects;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode iuios=SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.InsertUIObjectStatement",null);
              SLinkOperations.setTarget(iuios,"uiObject",(item),false);
              return iuios;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.InsertUIObjectStatement"),"conceptAlias") + "... " + SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
