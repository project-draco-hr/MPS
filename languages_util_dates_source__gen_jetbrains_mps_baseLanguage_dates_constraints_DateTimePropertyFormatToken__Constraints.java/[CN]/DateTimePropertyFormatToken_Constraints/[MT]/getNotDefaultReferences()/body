{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("dateTimePropertyFormatConfiguration",new BaseReferenceConstraintsDescriptor("dateTimePropertyFormatConfiguration",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      if (newReferentNode != oldReferentNode) {
        SLinkOperations.setTarget(referenceNode,"dateTimePropertyFormatType",DateTimePropertFormatTokenUtil.getDefaultFormatType(referenceNode),false);
      }
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider();
    }
  }
);
  references.put("dateTimePropertyFormatType",new BaseReferenceConstraintsDescriptor("dateTimePropertyFormatType",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getReferenceNode(),"dateTimePropertyFormatConfiguration",false),"dateTimePropertyFormatType",true);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_unq1r8_a0a1a0a0a1a0b0a2a0;
        }
      }
;
    }
  }
);
  return references;
}
