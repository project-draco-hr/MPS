{
  IDescendantsProvider descendantsProvider=new IDescendantsProvider(){
    public Set<INodeAdapter> getDescendants(    INodeAdapter nodeAdapter){
      SNode node=nodeAdapter.getNode();
      Set<SNode> result=new HashSet<SNode>();
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration")) {
        SNode conceptDeclaration=node;
        result.addAll(SLinkOperations.getTargets(conceptDeclaration,"implements",true));
        result.add(SLinkOperations.getTarget(conceptDeclaration,"extends",false));
      }
      if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.bootstrap.structureLanguage.structure.InterfaceConceptDeclaration")) {
        result.addAll(SLinkOperations.getTargets(node,"extends",true));
      }
      return BaseAdapter.toAdapters(result);
    }
  }
;
  SNode node=actionContext.getNode();
  SNode abstractConceptDeclaration=SNodeOperations.getAncestor(node,"jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration",false,false);
  return new HierarchicalChooseNodeComponent("choose target concept","targetConcept",actionContext,descendantsProvider,abstractConceptDeclaration);
}
