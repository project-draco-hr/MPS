{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractConceptDeclaration:
    return myConceptAbstractConceptDeclaration;
case LanguageConceptSwitch.AggregationLinkDeclarationScopeKind:
  return myConceptAggregationLinkDeclarationScopeKind;
case LanguageConceptSwitch.AttributeInfo:
return myConceptAttributeInfo;
case LanguageConceptSwitch.AttributeInfo_AttributedConcept:
return myConceptAttributeInfo_AttributedConcept;
case LanguageConceptSwitch.AttributeInfo_IsMultiple:
return myConceptAttributeInfo_IsMultiple;
case LanguageConceptSwitch.ConceptDeclaration:
return myConceptConceptDeclaration;
case LanguageConceptSwitch.ConstrainedDataTypeDeclaration:
return myConceptConstrainedDataTypeDeclaration;
case LanguageConceptSwitch.DataTypeDeclaration:
return myConceptDataTypeDeclaration;
case LanguageConceptSwitch.DeprecatedNodeAnnotation:
return myConceptDeprecatedNodeAnnotation;
case LanguageConceptSwitch.EnumerationDataTypeDeclaration:
return myConceptEnumerationDataTypeDeclaration;
case LanguageConceptSwitch.EnumerationMemberDeclaration:
return myConceptEnumerationMemberDeclaration;
case LanguageConceptSwitch.IConceptAspect:
return myConceptIConceptAspect;
case LanguageConceptSwitch.IStructureDeprecatable:
return myConceptIStructureDeprecatable;
case LanguageConceptSwitch.InterfaceConceptDeclaration:
return myConceptInterfaceConceptDeclaration;
case LanguageConceptSwitch.InterfaceConceptReference:
return myConceptInterfaceConceptReference;
case LanguageConceptSwitch.LinkDeclaration:
return myConceptLinkDeclaration;
case LanguageConceptSwitch.PrimitiveDataTypeDeclaration:
return myConceptPrimitiveDataTypeDeclaration;
case LanguageConceptSwitch.PropertyDeclaration:
return myConceptPropertyDeclaration;
case LanguageConceptSwitch.ReferenceLinkDeclartionScopeKind:
return myConceptReferenceLinkDeclartionScopeKind;
default :
return null;
}
}
