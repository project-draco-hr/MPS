{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0x.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractConceptDeclaration;
      }
    break;
case 1:
  if (true) {
    return myConceptAggregationLinkDeclarationScopeKind;
  }
break;
case 2:
if (true) {
return myConceptAttributeInfo;
}
break;
case 3:
if (true) {
return myConceptAttributeInfo_AttributedConcept;
}
break;
case 4:
if (true) {
return myConceptAttributeInfo_IsMultiple;
}
break;
case 5:
if (true) {
return myConceptConceptDeclaration;
}
break;
case 6:
if (true) {
return myConceptConstrainedDataTypeDeclaration;
}
break;
case 7:
if (true) {
return myConceptDataTypeDeclaration;
}
break;
case 8:
if (true) {
return myConceptDeprecatedNodeAnnotation;
}
break;
case 9:
if (true) {
return myConceptEnumerationDataTypeDeclaration;
}
break;
case 10:
if (true) {
return myConceptEnumerationMemberDeclaration;
}
break;
case 11:
if (true) {
return myConceptIConceptAspect;
}
break;
case 12:
if (true) {
return myConceptIStructureDeprecatable;
}
break;
case 13:
if (true) {
return myConceptInterfaceConceptDeclaration;
}
break;
case 14:
if (true) {
return myConceptInterfaceConceptReference;
}
break;
case 15:
if (true) {
return myConceptLinkDeclaration;
}
break;
case 16:
if (true) {
return myConceptPrimitiveDataTypeDeclaration;
}
break;
case 17:
if (true) {
return myConceptPropertyDeclaration;
}
break;
case 18:
if (true) {
return myConceptReferenceLinkDeclartionScopeKind;
}
break;
default :
}
}
return null;
}
