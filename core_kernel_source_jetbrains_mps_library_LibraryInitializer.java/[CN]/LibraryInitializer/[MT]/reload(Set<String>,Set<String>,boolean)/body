{
  ModelAccess.assertLegalWrite();
  HashSet<String> toUnload=new HashSet<String>(loadedLibs);
  toUnload.removeAll(newLibs);
  for (  String unloadLib : toUnload) {
    ModuleRepositoryFacade.getInstance().unregisterModules(myLibsToOwners.remove(unloadLib));
  }
  HashSet<String> toLoad=new HashSet<String>(newLibs);
  toLoad.removeAll(loadedLibs);
  for (  String loadLib : toLoad) {
    final Boolean hidden=myHiddenPaths.get(loadLib);
    MPSModuleOwner owner=new MPSModuleOwner(){
      @Override public boolean isHidden(){
        return hidden != null && hidden;
      }
    }
;
    myLibsToOwners.put(loadLib,owner);
    ModulesMiner.getInstance().readModuleDescriptors(FileSystem.getInstance().getFileByPath(loadLib),owner,refreshFiles);
    fireOnLoad(owner);
  }
  CleanupManager.getInstance().cleanup();
  ClassLoaderManager.getInstance().updateClassPath();
  LanguageRegistry.getInstance().loadLanguages();
  ExtensionRegistry.getInstance().loadExtensionDescriptors();
  for (  IModule m : MPSModuleRepository.getInstance().getAllModules()) {
    m.invalidateDependencies();
  }
}
