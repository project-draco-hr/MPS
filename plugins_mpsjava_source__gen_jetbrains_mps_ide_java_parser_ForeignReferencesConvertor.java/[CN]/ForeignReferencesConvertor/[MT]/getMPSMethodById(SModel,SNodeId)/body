{
  String idString=nodeId.toString();
  int offset1=idString.lastIndexOf('(');
  String methodAndClassName=idString.substring(0,offset1);
  String className=NameUtil.namespaceFromLongName(methodAndClassName);
  SNode classifier=getMPSClassByIdString(model,className);
  if ((classifier == null)) {
    return null;
  }
  String methodName=NameUtil.shortNameFromLongName(methodAndClassName);
  int offset2=idString.lastIndexOf(')');
  String signature=idString.substring(offset1 + 1,offset2);
  boolean constructor="<init>".equals(methodName);
  List<SNode> goodMethods=new ArrayList<SNode>();
  for (  SNode method : SLinkOperations.getTargets(classifier,"method",true)) {
    if (methodName.equals(SPropertyOperations.getString(method,"name"))) {
      ListSequence.<SNode>fromList(goodMethods).addElement(method);
    }
  }
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode classConcept=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    if (constructor) {
      for (      SNode method : SLinkOperations.getTargets(classConcept,"constructor",true)) {
        ListSequence.<SNode>fromList(goodMethods).addElement(method);
      }
    }
 else {
      for (      SNode method : SLinkOperations.getTargets(classConcept,"staticMethod",true)) {
        if (methodName.equals(SPropertyOperations.getString(method,"name"))) {
          goodMethods.add(method);
        }
      }
    }
  }
  for (  SNode method : goodMethods) {
    Iterator<SNode> iterator=ListSequence.<SNode>fromList(SLinkOperations.getTargets(method,"parameter",true)).iterator();
    StringBuilder sb=new StringBuilder();
    while (iterator.hasNext()) {
      sb.append(mpsTypeAsString(SLinkOperations.getTarget(iterator.next(),"type",true)));
      if (iterator.hasNext()) {
        sb.append(',');
      }
    }
    if (signature.equals(sb.toString())) {
      return method;
    }
  }
  return null;
}
