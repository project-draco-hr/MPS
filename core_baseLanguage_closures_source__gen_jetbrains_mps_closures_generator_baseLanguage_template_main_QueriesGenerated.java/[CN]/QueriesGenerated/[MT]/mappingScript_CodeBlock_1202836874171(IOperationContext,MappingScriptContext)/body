{
  if (true) {
    return;
  }
  for (  SNode te : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.ThisExpression")) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(te,null,false,false),"jetbrains.mps.baseLanguage.structure.FieldReference") && (SLinkOperations.getTarget(te,"classConcept",false) == null)) {
      SNode cl=SNodeOperations.getAncestor(te,"jetbrains.mps.closures.structure.ClosureLiteral",false,false);
      SNode thisCC=SNodeOperations.getAncestor(te,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
      if ((cl != null)) {
        SNodeOperations.getAncestors(cl,"jetbrains.mps.baseLanguage.structure.ClassConcept",false);
        for (        SNode cc : SNodeOperations.getAncestors(cl,"jetbrains.mps.baseLanguage.structure.ClassConcept",false)) {
          if (cc == thisCC) {
            if (SNodeOperations.isInstanceOf(thisCC,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
              _context.putStepObject("remove_this_" + ((SNode)te).getId(),thisCC);
            }
 else {
              _context.putStepObject("set_this_classconcept_" + ((SNode)te).getId(),thisCC);
            }
            break;
          }
        }
      }
 else       if (thisCC == null) {
        _context.showWarningMessage(te,"Cound not find the class concept");
      }
    }
  }
}
