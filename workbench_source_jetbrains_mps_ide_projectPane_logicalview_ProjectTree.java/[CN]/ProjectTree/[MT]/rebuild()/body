{
  if (myProject == null || myProject.isDisposed()) {
    return new TextTreeNode("Empty");
  }
  MPSProject project=myProject.getComponent(MPSProject.class);
  ProjectTreeNode root=new ProjectTreeNode(project);
  List<MPSTreeNode> moduleNodes=new ArrayList<MPSTreeNode>();
  List<Solution> solutions=project.getProjectSolutions();
  for (  Solution solution : solutions) {
    ProjectSolutionTreeNode solutionTreeNode=new ProjectSolutionTreeNode(solution,project);
    moduleNodes.add(solutionTreeNode);
  }
  List<Language> languages=project.getProjectLanguages();
  for (  Language language : languages) {
    ProjectLanguageTreeNode node=new ProjectLanguageTreeNode(language,project);
    moduleNodes.add(node);
  }
  List<DevKit> devkits=project.getProjectDevKits();
  for (  DevKit devKit : devkits) {
    ProjectDevKitTreeNode node=new ProjectDevKitTreeNode(devKit,project);
    moduleNodes.add(node);
  }
  ModulesNamespaceTreeBuilder builder=new ModulesNamespaceTreeBuilder(project);
  for (  MPSTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(root);
  myModulesPoolTreeNode=new ProjectModulesPoolTreeNode(project);
  root.add(myModulesPoolTreeNode);
  for (  TransientModelsModule module : myProject.getComponent(TransientModelsComponent.class).getModules()) {
    root.add(new TransientModelsTreeNode(myProject,module));
  }
  return root;
}
