{
  if (!(StringUtils.trim(line).startsWith(JavaStackTraceFilter.STRING_START))) {
    return null;
  }
  int start=line.indexOf(JavaStackTraceFilter.STRING_START) + JavaStackTraceFilter.STRING_START.length();
  String tmpStr=line.substring(start);
  int parenIndex=tmpStr.indexOf("(");
  if (parenIndex == -1) {
    return null;
  }
  final String methodName=tmpStr.substring(0,parenIndex);
  int closingParenIndex=tmpStr.indexOf(")");
  if (closingParenIndex == -1) {
    return null;
  }
  final String position=tmpStr.substring(parenIndex + 1,closingParenIndex);
  final SNodePointer nodeToShow=ModelAccess.instance().runReadAction(new Computable<SNodePointer>(){
    public SNodePointer compute(){
      final SNode node=TraceInfoUtil.getNodes(methodName,position);
      if (node == null) {
        return null;
      }
      return new SNodePointer(node);
    }
  }
);
  return new Filter.Result(start + parenIndex + 1+ offset,start + closingParenIndex + offset,new HyperlinkInfo(){
    public void navigate(    Project project){
      new NodeNavigatable(ProjectHelper.toMPSProject(project),nodeToShow).navigate(true);
    }
  }
);
}
