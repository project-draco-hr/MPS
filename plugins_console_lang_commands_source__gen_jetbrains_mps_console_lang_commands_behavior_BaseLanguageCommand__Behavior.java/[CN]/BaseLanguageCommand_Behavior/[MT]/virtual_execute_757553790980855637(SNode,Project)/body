{
  final IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"),new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory")).toScript();
  final IClassPathItem classPath=JavaModuleOperations.createClassPathItem(SNodeOperations.getModel(thisNode).getModule().getFacet(JavaModuleFacet.class).getClassPath(),"console");
  IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(){
    @Override public <T extends IOption>T relayQuery(    IQuery<T> query){
      return query.defaultOption();
    }
  }
,new IJobMonitor.Stub()){
    @Override public void setup(    IPropertiesPool ppool){
      super.setup(ppool);
      Tuples._1<Iterable<IClassPathItem>> params=(Tuples._1<Iterable<IClassPathItem>>)ppool.properties(new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compileToMemory"),Object.class);
      if (params != null) {
        params._0(Collections.<IClassPathItem>singletonList(classPath));
      }
    }
  }
;
  ModuleContext context=new ModuleContext(SNodeOperations.getModel(thisNode).getModule(),p);
  MakeSession session=new MakeSession(context,null,true);
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(context,Sequence.<SModel>singleton(SNodeOperations.getModel(thisNode))).resources(false),scr,ctl);
    try {
      IResult result=future.get();
      if (result.isSucessful()) {
        final CResource out=(CResource)Sequence.fromIterable(result.output()).first();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            final IClassesData cd=out.classes();
            if (cd == null) {
              return;
            }
            final Wrappers._T<ClassLoader> loader=new Wrappers._T<ClassLoader>();
            ModelAccess.instance().runReadAction(new Runnable(){
              public void run(){
                SModel m=SNodeOperations.getModel(thisNode);
                loader.value=cd.getClassLoader(ClassLoaderManager.getInstance().getClassLoader(m.getModule()));
              }
            }
);
            try {
              Method[] methods=Class.forName(SNodeOperations.getModel(thisNode).getModelName() + ".Main",true,loader.value).getMethods();
              for (              Method method : methods) {
                if (method.getName().equals("main")) {
                  method.invoke(new String[0]);
                }
              }
            }
 catch (            ClassNotFoundException ignore) {
              LOG.warning("Exception on query loading",ignore);
            }
catch (            IllegalAccessException ignore) {
              LOG.warning("Exception on query loading",ignore);
            }
catch (            InvocationTargetException ignore) {
              LOG.warning("Exception on query loading",ignore);
            }
          }
        }
);
      }
    }
 catch (    InterruptedException ignore) {
    }
catch (    ExecutionException ignore) {
    }
  }
}
