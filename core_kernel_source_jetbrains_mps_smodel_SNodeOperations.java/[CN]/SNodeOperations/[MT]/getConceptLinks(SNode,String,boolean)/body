{
  SNode conceptDeclaration=node;
  if (!(SNodeUtil.isInstanceOfAbstractConceptDeclaration(conceptDeclaration))) {
    conceptDeclaration=SModelUtil.findConceptDeclaration(conceptDeclaration.getConcept().getQualifiedName(),GlobalScope.getInstance());
  }
  if (lookupHierarchy) {
    final SNode finalConceptDeclaration=conceptDeclaration;
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<List<SNode>>(){
      @Override public List<SNode> compute(){
        return new ConceptAndSuperConceptsScope(finalConceptDeclaration).getNodes(new Condition<SNode>(){
          @Override public boolean met(          SNode n){
            if (SNodeUtil.isInstanceOfConceptLink(n)) {
              SNode conceptLinkDeclaration=SNodeUtil.getConceptLink_Declaration(n);
              return (conceptLinkDeclaration != null && linkName.equals(conceptLinkDeclaration.getName()));
            }
            return false;
          }
        }
);
      }
    }
);
  }
  List<SNode> result=new ArrayList<SNode>();
  Iterable<SNode> conceptLinks=SNodeUtil.getConcept_ConceptLinks(conceptDeclaration);
  for (  SNode conceptLink : conceptLinks) {
    SNode conceptLinkDeclaration=SNodeUtil.getConceptLink_Declaration(conceptLink);
    if (conceptLinkDeclaration != null && linkName.equals(conceptLinkDeclaration.getName())) {
      result.add(conceptLink);
    }
  }
  return result;
}
