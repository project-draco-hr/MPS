{
  this.dispose();
  final Wrappers._T<List<SNode>> duplicates=new Wrappers._T<List<SNode>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SNode expr=IntroduceVariableDialog.this.getRefactoring().getExpression();
      duplicates.value=new SimpleDuplicatesFinder(expr).findDuplicates(IntroduceVariableDialog.this.getRootToFindDuplicates(expr));
    }
  }
);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      IntroduceVariableDialog.this.myResult=IntroduceVariableDialog.this.getRefactoring().doRefactoring();
      MoveRefactoringUtils.fixImportsFromNode(IntroduceVariableDialog.this.myResult);
    }
  }
);
  this.myEditorContext.select(this.myResult);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      duplicates.value=ListSequence.fromList(duplicates.value).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return VisibilityUtil.isVisible(SNodeOperations.getParent(it),IntroduceVariableDialog.this.myResult);
        }
      }
).toListSequence();
    }
  }
);
  this.getDuplicatesProcessor().process(duplicates.value);
}
