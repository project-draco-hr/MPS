{
  LOG.assertInCommand();
  final EditorComponent editorComponent=context.getNodeEditorComponent();
  final EditorCell selectedCell=getCellToPasteTo(editorComponent.getSelectedCell());
  final SNode selectedNode=selectedCell.getSNode();
  final PasteNodeData pasteNodeData=CopyPasteUtil.getPasteNodeDataFromClipboard(selectedNode.getModel());
  final SModel model=selectedNode.getModel();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      CopyPasteUtil.addImportsAndLanguagesToModel(pasteNodeData.getSourceModule(),model,pasteNodeData.getNecessaryLanguages(),pasteNodeData.getNecessaryImports(),context.getOperationContext(),new Runnable(){
        public void run(){
          ModelAccess.instance().runWriteActionInCommand(new Runnable(){
            public void run(){
              List<SNode> pasteNodes=pasteNodeData.getNodes();
              Set<SReference> requireResolveReferences=pasteNodeData.getRequireResolveReferences();
              if (canPasteBefore(selectedCell,pasteNodes)) {
                new NodePaster(pasteNodes).pasteRelative(selectedNode,PastePlaceHint.BEFORE_ANCHOR);
              }
 else {
                new NodePaster(pasteNodes).paste(selectedCell);
              }
              Resolver.resolveReferences(requireResolveReferences,context.getOperationContext());
              editorComponent.flushEvents();
              EditorCell nodeCell=editorComponent.findNodeCell(pasteNodes.get(0));
              if (nodeCell == null)               return;
              editorComponent.changeSelection(nodeCell);
              EditorCell_Label labelCell=nodeCell.findChild(CellFinders.byClass(EditorCell_Label.class,true));
              if (labelCell != null) {
                editorComponent.changeSelection(labelCell);
                if (pasteNodes.size() == 1) {
                  editorComponent.pushSelection(labelCell);
                  editorComponent.setSelectionDontClearStack(nodeCell,true);
                }
              }
              if (pasteNodes.size() > 1) {
                editorComponent.getNodeRangeSelection().setRange(pasteNodes.get(0),pasteNodes.get(pasteNodes.size() - 1));
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
