{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlTriplex"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode to=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.query.structure.MqlTriplex",null);
      SNode current=_context.getSourceNode();
      current=PrecedenceUtil.getTargetForRightTransform(current,to);
      SNodeOperations.replaceWithAnother(current,to);
      SLinkOperations.setTarget(to,"condition",current,true);
      return PrecedenceUtil.parenthesiseAndRotateIfNecessary(to);
    }
    public String getMatchingText(    String pattern){
      return "?";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "triplex operator";
    }
  }
);
  return result;
}
