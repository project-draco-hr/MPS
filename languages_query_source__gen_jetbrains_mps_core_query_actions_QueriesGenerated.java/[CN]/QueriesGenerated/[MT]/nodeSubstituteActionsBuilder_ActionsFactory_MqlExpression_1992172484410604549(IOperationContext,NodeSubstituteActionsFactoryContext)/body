{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlAssignment");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          Matcher _matcher_x583g4_a1a0a0a0a0a2a0a1a9;
          SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlAssignment",null);
          if ((_matcher_x583g4_a1a0a0a0a0a2a0a1a9=REGEXP_x583g4_a0a0a2a0a0a0a0a2a0a1a9.matcher(pattern)).find()) {
            SPropertyOperations.set(SLinkOperations.getTarget(result,"var",true),"name",_matcher_x583g4_a1a0a0a0a0a2a0a1a9.group(1));
          }
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return REGEXP_x583g4_a0a0a2a0a0a0a2a0a1a9.matcher(pattern).matches();
        }
        public String getDescriptionText(        String pattern){
          return "create variable";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlAssignment");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlAssignment",null);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "create variable";
        }
        public String getMatchingText(        String pattern){
          return "=";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
