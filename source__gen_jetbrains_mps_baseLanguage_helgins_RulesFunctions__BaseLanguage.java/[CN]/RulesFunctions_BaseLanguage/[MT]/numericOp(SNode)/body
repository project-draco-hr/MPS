{
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(binOp,"leftExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(binOp,"rightExpression",true));
  SNode rightExpressionType=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(binOp,"rightExpression",true));
  SNode leftExpressionType=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(binOp,"leftExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(rightExpressionType,SLinkOperations.getTarget(new QuotationClass_28().createNode(),"descriptor",false),SLinkOperations.getTarget(binOp,"rightExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(leftExpressionType,SLinkOperations.getTarget(new QuotationClass_29().createNode(),"descriptor",false),SLinkOperations.getTarget(binOp,"leftExpression",true));
  TypeChecker.getInstance().getRuntimeSupport().givetype(Queries.getBinaryOperationType(leftExpressionType,rightExpressionType),binOp);
}
