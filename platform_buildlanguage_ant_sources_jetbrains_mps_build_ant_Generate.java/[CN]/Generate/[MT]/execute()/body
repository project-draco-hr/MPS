{
  if (myMpsHome == null) {
    String mpsHomePath=getProject().getProperty(Macros.MPS_HOME_NAKED);
    if (mpsHomePath == null || !new File(mpsHomePath).exists()) {
      throw new BuildException("Path to mps home expected. Specify mps_home property or mpshome attribute.");
    }
    myMpsHome=new File(mpsHomePath);
  }
  File[] pathsToLook=new File[]{new File(myMpsHome.getAbsolutePath() + File.separator + "lib"),new File(myMpsHome.getAbsolutePath() + File.separator + "core"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "buildlanguage"),new File(myMpsHome.getAbsolutePath() + File.separator + "workbench"),new File(myMpsHome.getAbsolutePath() + File.separator + "MPSPlugin"+ File.separator+ "MPSSupport")};
  Set<File> classPaths=new LinkedHashSet<File>();
  for (  File path : pathsToLook) {
    if (!path.exists() || !path.isDirectory()) {
      throw new BuildException("Invalid MPS home path.");
    }
    gatherAllClassesAndJarsUnder(path,classPaths);
  }
  List<URL> classPathUrls=new ArrayList<URL>();
  for (  File path : classPaths) {
    try {
      classPathUrls.add(new URL("file://" + path + (path.isDirectory() ? "/" : "")));
    }
 catch (    MalformedURLException e) {
      throw new BuildException(e);
    }
  }
  File mpsClasses=new File(myMpsHome + File.separator + "classes");
  if (mpsClasses.exists()) {
    try {
      classPathUrls.add(new URL("file://" + mpsClasses.getAbsolutePath() + "/"));
    }
 catch (    MalformedURLException e) {
      throw new BuildException(e);
    }
  }
  URLClassLoader classLoader=new URLClassLoader(classPathUrls.toArray(new URL[classPathUrls.size()]));
  try {
    Class<?> whatToGenerateClass=classLoader.loadClass(WhatToGenerate.class.getCanonicalName());
    Object whatToGenerate=whatToGenerateClass.newInstance();
    myWhatToGenerate.cloneTo(whatToGenerate);
    Class<?> generatorClass=classLoader.loadClass(Generator.class.getCanonicalName());
    Constructor<?> constructor=generatorClass.getConstructor(whatToGenerateClass);
    Object generator=constructor.newInstance(whatToGenerate);
    Method method=generatorClass.getMethod("generate");
    method.invoke(generator);
  }
 catch (  ClassNotFoundException e) {
    throw new BuildException(e);
  }
catch (  NoSuchMethodException e) {
    throw new BuildException(e);
  }
catch (  InvocationTargetException e) {
    throw new BuildException(e);
  }
catch (  IllegalAccessException e) {
    throw new BuildException(e);
  }
catch (  InstantiationException e) {
    throw new BuildException(e);
  }
}
