{
  final Collection<SNode> newInputNodes;
  if (myIsSoleInput) {
    newInputNodes=wrapAsList(getNewInputNode(templateContext));
  }
 else {
    newInputNodes=getNewInputNodes(templateContext);
  }
  if (newInputNodes.isEmpty()) {
    return Collections.emptyList();
  }
  ArrayList<SNode> outputNodes=new ArrayList<SNode>(newInputNodes.size());
  final TemplateExecutionEnvironment env=templateContext.getEnvironment();
  SNode macro_mapperFunction=RuleUtil.getMapSrc_MapperFunction(macro);
  final DelayedChanges delayedChanges=myTemplateProcessor.getGenerator().getDelayedChanges();
  for (  SNode newInputNode : newInputNodes) {
    TemplateContext newcontext=templateContext.subContext(newInputNode);
    if (macro_mapperFunction != null) {
      SNode childToReplaceLater=env.createOutputNode(templateNode.getConcept());
      outputNodes.add(childToReplaceLater);
      delayedChanges.add(new MapSrcMacroProcessorInterpreted(macro,childToReplaceLater,newcontext));
    }
 else {
      List<SNode> _outputNodes=nextMacro(newcontext);
      outputNodes.addAll(_outputNodes);
      for (      SNode outputNode : _outputNodes) {
        delayedChanges.add(new MapSrcMacroProcessorInterpreted(macro,outputNode,newcontext));
      }
    }
  }
  return outputNodes;
}
