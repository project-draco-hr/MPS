{
  SNode macro_mapperFunction=RuleUtil.getMapSrc_MapperFunction(macro);
  final Collection<SNode> newInputNodes;
  if (myIsSoleInput) {
    newInputNodes=wrapAsList(getNewInputNode(templateContext));
  }
 else {
    newInputNodes=getNewInputNodes(templateContext);
  }
  if (newInputNodes.isEmpty()) {
    return Collections.emptyList();
  }
  ArrayList<SNode> outputNodes=new ArrayList<SNode>(newInputNodes.size());
  final TemplateExecutionEnvironment env=templateContext.getEnvironment();
  for (  SNode newInputNode : newInputNodes) {
    TemplateContext newcontext=templateContext.subContext(newInputNode);
    if (macro_mapperFunction != null) {
      SNode childToReplaceLater=env.createOutputNode(templateNode.getConcept());
      outputNodes.add(childToReplaceLater);
      myTemplateProcessor.getGenerator().getDelayedChanges().addExecuteMapSrcNodeMacroChange(macro,childToReplaceLater,newcontext,env.getQueryExecutor());
    }
 else {
      List<SNode> _outputNodes=nextMacro(newcontext);
      outputNodes.addAll(_outputNodes);
      for (      SNode outputNode : _outputNodes) {
        myTemplateProcessor.getGenerator().getDelayedChanges().addExecuteMapSrcNodeMacroPostProcChange(macro,outputNode,newcontext,env.getQueryExecutor());
      }
    }
  }
  return outputNodes;
}
