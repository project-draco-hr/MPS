{
  SNode templateSwitch=getTemplateSwitch();
  if (templateSwitch == null) {
    throw new TemplateProcessingFailureException(macro,"error processing $SWITCH$ - bad TemplateSwitch reference",GeneratorUtil.describeInput(templateContext));
  }
  final SNodeReference switchPtr=new jetbrains.mps.smodel.SNodePointer(templateSwitch);
  SNode newInputNode=getNewInputNode(env.getQueryExecutor(),templateContext);
  if (newInputNode == null) {
    TemplateSwitchMapping tswitch=myTemplateProcessor.getGenerator().getSwitch(switchPtr);
    if (tswitch != null) {
      tswitch.processNull(env,switchPtr,templateContext);
    }
    return Collections.emptyList();
  }
  boolean inputChanged=(newInputNode != templateContext.getInput());
  if (inputChanged) {
    myTracer.pushInputNode(GenerationTracerUtil.getSNodePointer(newInputNode));
  }
  myTracer.pushSwitch(new jetbrains.mps.smodel.SNodePointer(templateSwitch));
  try {
    final TemplateContext switchContext=prepareContext(templateContext,newInputNode,env);
    Collection<SNode> collection=null;
    try {
      collection=env.trySwitch(switchPtr,switchContext);
    }
 catch (    GenerationCanceledException e) {
      throw e;
    }
catch (    GenerationFailureException e) {
      throw e;
    }
catch (    DismissTopMappingRuleException e) {
      throw e;
    }
catch (    GenerationException e) {
      getLogger().error(switchPtr,"internal error in switch.applyDefault: " + e.toString(),GeneratorUtil.describe(macro,"macro"));
    }
    if (collection == null) {
      collection=myTemplateProcessor.applyTemplate(templateNode,templateContext.subContext(newInputNode),env,this);
    }
    return new ArrayList<SNode>(collection);
  }
  finally {
    if (inputChanged) {
      myTracer.closeInputNode(GenerationTracerUtil.getSNodePointer(newInputNode));
    }
  }
}
