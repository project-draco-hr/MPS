{
  SNode nextMacro=nextMacro(templateNode,prevMacro);
  if (nextMacro != null) {
    myTracer.pushMacro(new jetbrains.mps.smodel.SNodePointer(nextMacro));
    try {
      String macroConceptFQName=nextMacro.getConcept().getQualifiedName();
      MacroImpl macroImpl=macroImplMap.get(macroConceptFQName);
      if (macroImpl == null) {
        macroImpl=new NoMacro(this);
      }
      return macroImpl.apply(nextMacro,templateNode,context.subContext(GeneratorUtilEx.getMappingName_NodeMacro(nextMacro,null)));
    }
  finally {
      myTracer.closeMacro(new jetbrains.mps.smodel.SNodePointer(nextMacro));
    }
  }
  final TemplateNode rtTemplateNode=getTemplateNodeRuntime(templateNode);
  myTracer.pushTemplateNode(rtTemplateNode.getTemplateNodeReference());
  SNode outputNode=myOutputModel.createNode(templateNode.getConcept());
  myEnv.nodeCopied(context,outputNode,rtTemplateNode.getTemplateNodeId());
  myGenerator.registerMappingLabel(context.getInput(),context.getInputName(),outputNode);
  rtTemplateNode.apply(context,outputNode);
  context=context.subContext();
  try {
    for (    SNode templateChildNode : rtTemplateNode.getChildTemplates()) {
      List<SNode> outputChildNodes=applyTemplate(templateChildNode,context,null);
      SConcept originalConcept=templateChildNode.getConcept();
      String role=templateChildNode.getRoleInParent();
      RoleValidator validator=myGenerator.getChildRoleValidator(outputNode,role);
      for (      SNode outputChildNode : outputChildNodes) {
        final boolean notSubConcept=!(outputChildNode.getConcept().isSubConceptOf(originalConcept));
        if (notSubConcept) {
          Status status=validator.validate(outputChildNode);
          if (status != null) {
            myGenerator.getLogger().warning(templateChildNode.getReference(),status.getMessage("apply template"),status.describe(GeneratorUtil.describe(context.getInput(),"input"),GeneratorUtil.describe(outputNode,"output"),GeneratorUtil.describe(templateNode,"template node")));
          }
        }
        outputNode.addChild(role,outputChildNode);
      }
    }
  }
  finally {
    myTracer.pushOutputNode(GenerationTracerUtil.getSNodePointer(myOutputModel,outputNode));
    myTracer.closeTemplateNode(rtTemplateNode.getTemplateNodeReference());
  }
  return Collections.singletonList(outputNode);
}
