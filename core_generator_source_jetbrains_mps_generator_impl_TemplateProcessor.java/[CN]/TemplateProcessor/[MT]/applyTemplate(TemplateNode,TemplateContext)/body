{
  SNode outputNode=myOutputModel.createNode(rtTemplateNode.getConcept());
  context.getEnvironment().nodeCopied(context,outputNode,rtTemplateNode.getTemplateNodeId());
  myGenerator.registerMappingLabel(context.getInput(),context.getInputName(),outputNode);
  rtTemplateNode.apply(context,outputNode);
  context=context.subContext();
  for (  SNode templateChildNode : rtTemplateNode.getChildTemplates()) {
    TemplateNode rtTemplateChildNode=getTemplateNodeRuntime(templateChildNode);
    final List<SNode> outputChildNodes;
    if (rtTemplateChildNode.getFirstMacro() != null) {
      outputChildNodes=applyMacro(rtTemplateChildNode.getFirstMacro(),context);
    }
 else {
      outputChildNodes=applyTemplate(rtTemplateChildNode,context);
    }
    SConcept originalConcept=rtTemplateChildNode.getConcept();
    SContainmentLink role=rtTemplateChildNode.getRoleInParent();
    RoleValidator validator=myGenerator.getChildRoleValidator(outputNode,role);
    for (    SNode outputChildNode : outputChildNodes) {
      final boolean notSubConcept=!(outputChildNode.getConcept().isSubConceptOf(originalConcept));
      if (notSubConcept) {
        Status status=validator.validate(outputChildNode);
        if (status != null) {
          myGenerator.getLogger().warning(rtTemplateChildNode.getTemplateNodeReference(),status.getMessage("apply template"),status.describe(GeneratorUtil.describe(context.getInput(),"input"),GeneratorUtil.describe(outputNode,"output"),GeneratorUtil.describe(rtTemplateNode.getTemplateNodeReference(),"template node")));
        }
      }
      outputNode.addChild(role,outputChildNode);
    }
  }
  return Collections.singletonList(outputNode);
}
