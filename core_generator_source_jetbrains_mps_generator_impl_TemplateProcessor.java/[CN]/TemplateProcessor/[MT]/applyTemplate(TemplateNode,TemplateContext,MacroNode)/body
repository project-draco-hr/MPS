{
  MacroNode nextMacro=prevMacro == null ? rtTemplateNode.getFirstMacro() : prevMacro.getNextMacro();
  if (nextMacro != null) {
    myTracer.pushMacro(nextMacro.getMacroNodeRef());
    try {
      return nextMacro.apply(context.subContext(nextMacro.getMappingLabel()));
    }
  finally {
      myTracer.closeMacro(nextMacro.getMacroNodeRef());
    }
  }
  myTracer.pushTemplateNode(rtTemplateNode.getTemplateNodeReference());
  SNode outputNode=myOutputModel.createNode(rtTemplateNode.getConcept());
  context.getEnvironment().nodeCopied(context,outputNode,rtTemplateNode.getTemplateNodeId());
  myGenerator.registerMappingLabel(context.getInput(),context.getInputName(),outputNode);
  rtTemplateNode.apply(context,outputNode);
  context=context.subContext();
  try {
    for (    SNode templateChildNode : rtTemplateNode.getChildTemplates()) {
      TemplateNode rtTemplateChildNode=getTemplateNodeRuntime(templateChildNode);
      List<SNode> outputChildNodes=applyTemplate(rtTemplateChildNode,context,null);
      SConcept originalConcept=rtTemplateChildNode.getConcept();
      String role=rtTemplateChildNode.getRoleInParent();
      RoleValidator validator=myGenerator.getChildRoleValidator(outputNode,role);
      for (      SNode outputChildNode : outputChildNodes) {
        final boolean notSubConcept=!(outputChildNode.getConcept().isSubConceptOf(originalConcept));
        if (notSubConcept) {
          Status status=validator.validate(outputChildNode);
          if (status != null) {
            myGenerator.getLogger().warning(rtTemplateChildNode.getTemplateNodeReference(),status.getMessage("apply template"),status.describe(GeneratorUtil.describe(context.getInput(),"input"),GeneratorUtil.describe(outputNode,"output"),GeneratorUtil.describe(rtTemplateNode.getTemplateNodeReference(),"template node")));
          }
        }
        outputNode.addChild(role,outputChildNode);
      }
    }
  }
  finally {
    myTracer.pushOutputNode(GenerationTracerUtil.getSNodePointer(myOutputModel,outputNode));
    myTracer.closeTemplateNode(rtTemplateNode.getTemplateNodeReference());
  }
  return Collections.singletonList(outputNode);
}
