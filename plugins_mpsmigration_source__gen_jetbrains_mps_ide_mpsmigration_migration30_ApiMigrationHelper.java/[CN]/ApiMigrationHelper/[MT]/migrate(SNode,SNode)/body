{
  Set<SNode> unknownUsages=SetSequence.fromSet(new HashSet<SNode>());
  Set<SNode> nodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(nodes).addElement(oldNode);
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(nodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  Set<SNode> changedClassUsages=SetSequence.fromSet(new HashSet<SNode>());
  Set<Tuples._2<SNode,SReference>> changedClassUsagesInTemplates=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  Set<Tuples._2<SNode,SReference>> changedClassUsagesInTypes=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  for (  SReference ref : SetSequence.fromSet(usages)) {
    SNode rNode=((SNode)ref.getSourceNode());
    if (SModelOperations.isReadOnly(rNode.getModel())) {
      continue;
    }
    if (!(SetSequence.fromSet(scopeModules).contains(rNode.getModel().getModule()))) {
      continue;
    }
    SNode n=(SNode)rNode;
    if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.ClassifierType") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.CastExpression"))) {
      SetSequence.fromSet(changedClassUsages).addElement(rNode);
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator","typeParameter")) {
      SetSequence.fromSet(changedClassUsagesInTemplates).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newNode))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","parameter")) {
      SetSequence.fromSet(changedClassUsagesInTypes).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newNode))));
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  Set<SNode> methods=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(methods).addSequence(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)(Object.class)),oldNode,"jetbrains.mps.baseLanguage.structure.Classifier","call_methods_5292274854859311639",new Object[]{})));
  Set<SReference> musages=((Set)FindUsagesManager.getInstance().findUsages(((Set)methods),SearchType.USAGES,scope,new EmptyProgressMonitor()));
  Set<Tuples._2<SNode,SReference>> changedMethodCalls=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  Set<SNode> castedMethodCalls=SetSequence.fromSet(new HashSet<SNode>());
  for (  SReference ref : SetSequence.fromSet(musages)) {
    SNode rNode=ref.getSourceNode();
    if (!(needMigration(rNode))) {
      continue;
    }
    SNode newMethod=getNewMethod((SNode)ref.getTargetNode(),newNode);
    if (newMethod != null) {
      SetSequence.fromSet(changedMethodCalls).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newMethod))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(((SNode)rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression","operation")) {
      SetSequence.fromSet(castedMethodCalls).addElement(rNode);
      continue;
    }
 else     if (SNodeOperations.getContainingLinkDeclaration(((SNode)rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression","operation")) {
      SetSequence.fromSet(castedMethodCalls).addElement(rNode);
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  if (SNodeOperations.isInstanceOf(oldNode,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    Set<SNode> smethods=SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(smethods).addSequence(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)(Object.class)),SNodeOperations.cast(oldNode,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"jetbrains.mps.baseLanguage.structure.ClassConcept","call_staticMethods_5292274854859435867",new Object[]{})));
    Set<jetbrains.mps.smodel.SReference> smusages=((Set)FindUsagesManager.getInstance().findUsages(((Set)smethods),SearchType.USAGES,scope,new EmptyProgressMonitor()));
    for (    jetbrains.mps.smodel.SReference ref : SetSequence.fromSet(smusages)) {
      SNode rNode=ref.getSourceNode();
      if (SModelOperations.isReadOnly(rNode.getModel())) {
        continue;
      }
      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }
  }
  for (  SNode cls : SetSequence.fromSet(changedClassUsages)) {
    SLinkOperations.setTarget(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",newNode,false);
  }
  for (  Tuples._2<SNode,SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTypes)) {
    tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
  }
  for (  Tuples._2<SNode,SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTemplates)) {
    tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
  }
  for (  Tuples._2<SNode,SReference> change : SetSequence.fromSet(changedMethodCalls)) {
    change._0().setReference(change._1().getRole(),change._1());
  }
  for (  SNode occ : SetSequence.fromSet(castedMethodCalls)) {
    SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(occ),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),newNode)) {
      continue;
    }
    SNodeOperations.replaceWithAnother(operand,_quotation_createNode_yke5lt_a0a2a13a61(oldNode,operand));
  }
}
