{
  List<IWatchable> watchables=myUiState.getWatchables();
  if (watchables.isEmpty()) {
    TextTreeNode rootNode=new TextTreeNode("");
    TextTreeNode messageNode=new TextTreeNode("No local variables available"){
      @Override public boolean isLeaf(){
        return true;
      }
    }
;
    messageNode.setIcon(jetbrains.mps.ide.messages.Icons.INFORMATION_ICON);
    rootNode.add(messageNode);
    return rootNode;
  }
  MPSTreeNode rootTreeNode=new TextTreeNode("Local Variables");
  rootTreeNode.setTree(this);
  Map<WatchablesCategory,List<IWatchable>> orphanesByCategory=new HashMap<WatchablesCategory,List<IWatchable>>();
  Map<WatchablesCategory,Map<SNode,List<IWatchable>>> nodeToVarsMapByCategory=new HashMap<WatchablesCategory,Map<SNode,List<IWatchable>>>();
  for (  IWatchable watchable : watchables) {
    WatchablesCategory category=watchable.getCategory();
    SNode node=watchable.getNode();
    if (node == null) {
      List<IWatchable> orphanes=orphanesByCategory.get(category);
      if (orphanes == null) {
        orphanes=new ArrayList<IWatchable>();
        orphanesByCategory.put(category,orphanes);
      }
      orphanes.add(watchable);
    }
 else {
      Map<SNode,List<IWatchable>> nodeToVarsMap=nodeToVarsMapByCategory.get(category);
      if (nodeToVarsMap == null) {
        nodeToVarsMap=new LinkedHashMap<SNode,List<IWatchable>>();
        nodeToVarsMapByCategory.put(category,nodeToVarsMap);
      }
      List<IWatchable> watchableList=nodeToVarsMap.get(node);
      if (watchableList == null) {
        watchableList=new ArrayList<IWatchable>();
        nodeToVarsMap.put(node,watchableList);
      }
      watchableList.add(watchable);
    }
  }
  SortedSet<WatchablesCategory> keys=new TreeSet<WatchablesCategory>(orphanesByCategory.keySet());
  keys.addAll(nodeToVarsMapByCategory.keySet());
  for (  WatchablesCategory category : keys) {
    List<IWatchable> orphanes=orphanesByCategory.get(category);
    Map<SNode,List<IWatchable>> nodeToVarsMap=nodeToVarsMapByCategory.get(category);
    if (orphanes == null)     orphanes=new ArrayList<IWatchable>();
    if (nodeToVarsMap == null)     nodeToVarsMap=new HashMap<SNode,List<IWatchable>>();
    List<SNode> nodes=new ArrayList<SNode>();
    nodes.addAll(nodeToVarsMap.keySet());
    Collections.sort(nodes,new ToStringComparator());
    Collections.sort(orphanes,new Comparator<IWatchable>(){
      @Override public int compare(      IWatchable o1,      IWatchable o2){
        return o1.getName().compareTo(o2.getName());
      }
    }
);
    for (    SNode snode : nodeToVarsMap.keySet()) {
      List<IWatchable> watchablesWithNodes=nodeToVarsMap.get(snode);
      if (watchablesWithNodes.size() == 1) {
        IWatchable watchable=watchablesWithNodes.get(0);
        WatchableNode nodeTreeNode=new WatchableNode(myContext,watchable);
        rootTreeNode.add(nodeTreeNode);
      }
 else {
        NodeTreeNode nodeTreeNode=new NodeTreeNode(myContext,snode);
        for (        IWatchable watchable : watchablesWithNodes) {
          nodeTreeNode.add(new WatchableNode(myContext,watchable));
        }
        rootTreeNode.add(nodeTreeNode);
      }
    }
    for (    IWatchable watchable : orphanes) {
      rootTreeNode.add(new WatchableNode(myContext,watchable));
    }
  }
  return rootTreeNode;
}
