{
  List<PasteWrapper> result=ListSequence.fromList(new ArrayList<PasteWrapper>());
  ListSequence.fromList(result).addElement(new PasteWrapper(){
    public String getSourceConceptFqName(){
      return "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration";
    }
    public String getTargetConceptFqName(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierMember";
    }
    public SNode wrap(    PasteWrapperContext _context){
      SNode imd=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
      SPropertyOperations.set(imd,"name",SPropertyOperations.getString(_context.getSourceNode(),"name"));
      ListSequence.fromList(SLinkOperations.getTargets(imd,"parameter",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"parameter",true)));
      SLinkOperations.setTarget(imd,"returnType",SLinkOperations.getTarget(_context.getSourceNode(),"returnType",true),true);
      SLinkOperations.setTarget(imd,"body",SLinkOperations.getTarget(_context.getSourceNode(),"body",true),true);
      ListSequence.fromList(SLinkOperations.getTargets(imd,"throwsItem",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"throwsItem",true)));
      ListSequence.fromList(SLinkOperations.getTargets(imd,"typeVariableDeclaration",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"typeVariableDeclaration",true)));
      SPropertyOperations.set(imd,"isFinal","" + (SPropertyOperations.getBoolean(_context.getSourceNode(),"isFinal")));
      SPropertyOperations.set(imd,"isSynchronized","" + (SPropertyOperations.getBoolean(_context.getSourceNode(),"isSynchronized")));
      SLinkOperations.setTarget(imd,"visibility",SLinkOperations.getTarget(_context.getSourceNode(),"visibility",true),true);
      ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(imd,"body",true),"jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression",false,new String[]{})).toListSequence().visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNodeOperations.replaceWithNewChild(it,"jetbrains.mps.baseLanguage.structure.ThisExpression");
        }
      }
);
      return imd;
    }
  }
);
  return result;
}
