{
  super("Classpaths",operationContext);
  mySourceDir=sourceDir;
  myUnresolvedFQNames=ObservableCollections.observableList(new ArrayList<String>(classFqNames));
  Computable<IClassPathItem> chooser=new Computable<IClassPathItem>(){
    public IClassPathItem compute(){
      return chooseClasspath(mySourceDir);
    }
  }
;
  ClassPathListCellRenderer classPathListCellRenderer=new ClassPathListCellRenderer();
  ObservableList<IClassPathItem> observable=ObservableCollections.observableList(myAdditionalClasspaths);
  observable.addObservableListListener(myListListener);
  JPanel panel=UiListsFactory.createBoundListPanel(this,"Classpaths",observable,classPathListCellRenderer,null,chooser);
  DefaultListCellRenderer renderer=new DefaultListCellRenderer();
  JPanel classesList=UiListsFactory.createBoundListPanel(this,"Unresolved Names",myUnresolvedFQNames,renderer,null,null);
  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,panel,classesList);
  this.setLayout(new BorderLayout());
  this.add(splitPane,BorderLayout.CENTER);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new FlowLayout());
  buttonsPanel.add(new JButton(new AbstractAction("OK"){
    public void actionPerformed(    ActionEvent e){
      MyDialog.this.dispose();
    }
  }
),FlowLayout.LEFT);
  buttonsPanel.add(new JButton(new AbstractAction("Cancel"){
    public void actionPerformed(    ActionEvent e){
      MyDialog.this.dispose();
      myAdditionalClasspaths.clear();
    }
  }
),FlowLayout.LEFT);
  this.add(buttonsPanel,BorderLayout.SOUTH);
  this.setModal(true);
}
