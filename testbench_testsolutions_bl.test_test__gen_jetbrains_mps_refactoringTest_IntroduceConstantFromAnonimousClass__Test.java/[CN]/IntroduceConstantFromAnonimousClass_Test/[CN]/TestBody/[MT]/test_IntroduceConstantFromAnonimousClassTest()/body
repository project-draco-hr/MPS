{
  this.addNodeById("2163048091639854957");
  this.addNodeById("2163048091639855005");
  IntroduceConstantRefactoring refactoring=new IntroduceConstantRefactoring();
  refactoring.init(SNodeOperations.cast(this.getNodeById("2163048091639854989"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93d565d10L,"jetbrains.mps.baseLanguage.structure.StringLiteral")),null);
  refactoring.setName("s");
  refactoring.setReplacingAll(true);
  refactoring.setVisibilityLevel(VisibilityLevel.PUBLIC);
  refactoring.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2163048091639854958"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("2163048091639855016"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
