{
  final int index=Arrays.binarySearch(myId2Index,conceptId.getIdValue());
switch (index) {
case 0:
    if (myIntentions0 == null) {
      myIntentions0=new IntentionFactory[2];
      myIntentions0[0]=new MakeClassAbstract_Intention();
      myIntentions0[1]=new MakeClassFinal_Intention();
    }
  return Arrays.asList(myIntentions0);
case 1:
if (myIntentions1 == null) {
  myIntentions1=new IntentionFactory[4];
  myIntentions1[0]=new MoveInitializerToConstructor_Intention();
  myIntentions1[1]=new MakeFieldVolatile_Intention();
  myIntentions1[2]=new MakeFieldTransient_Intention();
  myIntentions1[3]=new AddStaticFieldModifier_Intention();
}
return Arrays.asList(myIntentions1);
case 2:
if (myIntentions2 == null) {
myIntentions2=new IntentionFactory[1];
myIntentions2[0]=new AddFinalModifierToAny_Intention();
}
return Arrays.asList(myIntentions2);
case 3:
if (myIntentions3 == null) {
myIntentions3=new IntentionFactory[1];
myIntentions3[0]=new ConvertToArrayType_Intention();
}
return Arrays.asList(myIntentions3);
case 4:
if (myIntentions4 == null) {
myIntentions4=new IntentionFactory[8];
myIntentions4[0]=new SurroundWithParenthesis_Intention();
myIntentions4[1]=new SurroundWithTypeCast_Intention();
myIntentions4[2]=new SurroundWithNegation_Intention();
myIntentions4[3]=new SurroundWithIfClause_Intention();
myIntentions4[4]=new SurroundWithIfElseClause_Intention();
myIntentions4[5]=new CleanUnmatchedParentheses_Intention();
myIntentions4[6]=new ComputeWholeExpressionValue_Intention();
myIntentions4[7]=new ComputeExpressionValue_Intention();
}
return Arrays.asList(myIntentions4);
case 5:
if (myIntentions5 == null) {
myIntentions5=new IntentionFactory[1];
myIntentions5[0]=new AddFieldForUnUsedParameter_Intention();
}
return Arrays.asList(myIntentions5);
case 6:
if (myIntentions6 == null) {
myIntentions6=new IntentionFactory[3];
myIntentions6[0]=new ExpandBoolean_Intention();
myIntentions6[1]=new ConvertAssignmentToVariableDeclaration_Intention();
myIntentions6[2]=new MakeParameterFinal_Intention();
}
return Arrays.asList(myIntentions6);
case 7:
if (myIntentions7 == null) {
myIntentions7=new IntentionFactory[5];
myIntentions7[0]=new MakeGeneric_Intention();
myIntentions7[1]=new AddThrows_Intention();
myIntentions7[2]=new MakeMethodFinal_Intention();
myIntentions7[3]=new MakeSynchronized_Intention();
myIntentions7[4]=new AddModifiers_Intention();
}
return Arrays.asList(myIntentions7);
case 8:
if (myIntentions8 == null) {
myIntentions8=new IntentionFactory[1];
myIntentions8[0]=new ReplaceEqualityWithEquals_Intention();
}
return Arrays.asList(myIntentions8);
case 9:
if (myIntentions9 == null) {
myIntentions9=new IntentionFactory[2];
myIntentions9[0]=new IterateOverIterable_Intention();
myIntentions9[1]=new ConvertToReturnStatement_Intention();
}
return Arrays.asList(myIntentions9);
case 10:
if (myIntentions10 == null) {
myIntentions10=new IntentionFactory[12];
myIntentions10[0]=new CreateInternalLabel_Intention();
myIntentions10[1]=new SurroundWithIf_Intention();
myIntentions10[2]=new SurroundWithIfElse_Intention();
myIntentions10[3]=new SurroundWithWhile_Intention();
myIntentions10[4]=new SurroundWithDoWhile_Intention();
myIntentions10[5]=new SurroundWithFor_Intention();
myIntentions10[6]=new SurroundStatementsWithForEach_Intention();
myIntentions10[7]=new SuroundWithTryCatch_Intention();
myIntentions10[8]=new SurroundWithTryFinally_Intention();
myIntentions10[9]=new TryCatchFinally_Intention();
myIntentions10[10]=new SurroundWithSynchronized_Intention();
myIntentions10[11]=new SurroundWithBrackets_Intention();
}
return Arrays.asList(myIntentions10);
case 11:
if (myIntentions11 == null) {
myIntentions11=new IntentionFactory[11];
myIntentions11[0]=new AddCastStatement_Intention();
myIntentions11[1]=new InvertIfCondition_Intention();
myIntentions11[2]=new AddElsifClause_Intention();
myIntentions11[3]=new ElsifTransform_Intention();
myIntentions11[4]=new ConvertElseToElseIf_Intention();
myIntentions11[5]=new MakeOneLiner_Intention();
myIntentions11[6]=new MakeMultiLiner_Intention();
myIntentions11[7]=new UsedefaultLayout_Intention();
myIntentions11[8]=new UnwrapIfThenBlock_Intention();
myIntentions11[9]=new SplitIf_Intention();
myIntentions11[10]=new ConvertIfConditionToTernaryOperator_Intention();
}
return Arrays.asList(myIntentions11);
case 12:
if (myIntentions12 == null) {
myIntentions12=new IntentionFactory[3];
myIntentions12[0]=new MakeMethodAbstract_Intention();
myIntentions12[1]=new MakeClassAbstractFromMethod_Intention();
myIntentions12[2]=new AddOverrideAnnotation_Intention();
}
return Arrays.asList(myIntentions12);
case 13:
if (myIntentions13 == null) {
myIntentions13=new IntentionFactory[1];
myIntentions13[0]=new SplitIntoDeclarationAndAssignment_Intention();
}
return Arrays.asList(myIntentions13);
case 14:
if (myIntentions14 == null) {
myIntentions14=new IntentionFactory[1];
myIntentions14[0]=new MergeStringConcatenation_Intention();
}
return Arrays.asList(myIntentions14);
case 15:
if (myIntentions15 == null) {
myIntentions15=new IntentionFactory[3];
myIntentions15[0]=new RemoveStaticFieldModifier_Intention();
myIntentions15[1]=new MakeStaticFieldVolatile_Intention();
myIntentions15[2]=new MakeStaticFieldTransient_Intention();
}
return Arrays.asList(myIntentions15);
case 16:
if (myIntentions16 == null) {
myIntentions16=new IntentionFactory[1];
myIntentions16[0]=new CreateReferenceOnClass_Intention();
}
return Arrays.asList(myIntentions16);
case 17:
if (myIntentions17 == null) {
myIntentions17=new IntentionFactory[1];
myIntentions17[0]=new SplitStringIntoConcatenation_Intention();
}
return Arrays.asList(myIntentions17);
case 18:
if (myIntentions18 == null) {
myIntentions18=new IntentionFactory[1];
myIntentions18[0]=new RemoveArrayType_Intention();
}
return Arrays.asList(myIntentions18);
case 19:
if (myIntentions19 == null) {
myIntentions19=new IntentionFactory[1];
myIntentions19[0]=new ExtractWhileConditionToInternalIfStatement_Intention();
}
return Arrays.asList(myIntentions19);
case 20:
if (myIntentions20 == null) {
myIntentions20=new IntentionFactory[2];
myIntentions20[0]=new FlipBinaryOperation_Intention();
myIntentions20[1]=new OrToAndAndBack_Intention();
}
return Arrays.asList(myIntentions20);
case 21:
if (myIntentions21 == null) {
myIntentions21=new IntentionFactory[1];
myIntentions21[0]=new ReplaceBlockWithItsContent_Intention();
}
return Arrays.asList(myIntentions21);
case 22:
if (myIntentions22 == null) {
myIntentions22=new IntentionFactory[1];
myIntentions22[0]=new ChangeStaticInInner_Intention();
}
return Arrays.asList(myIntentions22);
case 23:
if (myIntentions23 == null) {
myIntentions23=new IntentionFactory[1];
myIntentions23[0]=new ReplaceForEachLoopWithIndexedLoop_Intention();
}
return Arrays.asList(myIntentions23);
case 24:
if (myIntentions24 == null) {
myIntentions24=new IntentionFactory[1];
myIntentions24[0]=new ReplaceForLoopWithWhileLoop_Intention();
}
return Arrays.asList(myIntentions24);
case 25:
if (myIntentions25 == null) {
myIntentions25=new IntentionFactory[1];
myIntentions25[0]=new ReplaceAssertWithIf_Intention();
}
return Arrays.asList(myIntentions25);
case 26:
if (myIntentions26 == null) {
myIntentions26=new IntentionFactory[2];
myIntentions26[0]=new ReplaceConditionalWithIf_Intention();
myIntentions26[1]=new SwapTernaryBranches_Intention();
}
return Arrays.asList(myIntentions26);
case 27:
if (myIntentions27 == null) {
myIntentions27=new IntentionFactory[1];
myIntentions27[0]=new AddRuntimeExceptionToMethodSignature_Intention();
}
return Arrays.asList(myIntentions27);
case 28:
if (myIntentions28 == null) {
myIntentions28=new IntentionFactory[2];
myIntentions28[0]=new ConvertToClosure_Intention();
myIntentions28[1]=new RemoveTVDInAnonymousClass_Intention();
}
return Arrays.asList(myIntentions28);
case 29:
if (myIntentions29 == null) {
myIntentions29=new IntentionFactory[1];
myIntentions29[0]=new AddAnnotation_Intention();
}
return Arrays.asList(myIntentions29);
case 30:
if (myIntentions30 == null) {
myIntentions30=new IntentionFactory[3];
myIntentions30[0]=new SwitchToCustomPropertyImplementation_Intention();
myIntentions30[1]=new SwitchToDefaultPropertyImplementation_Intention();
myIntentions30[2]=new SwitchToCustomConstructorPropertyImplementation_Intention();
}
return Arrays.asList(myIntentions30);
case 31:
if (myIntentions31 == null) {
myIntentions31=new IntentionFactory[1];
myIntentions31[0]=new CreateSetAccessor_Intention();
}
return Arrays.asList(myIntentions31);
case 32:
if (myIntentions32 == null) {
myIntentions32=new IntentionFactory[2];
myIntentions32[0]=new ReplaceEqualsWithEquality_Intention();
myIntentions32[1]=new FilpEqualsIntention_Intention();
}
return Arrays.asList(myIntentions32);
case 33:
if (myIntentions33 == null) {
myIntentions33=new IntentionFactory[1];
myIntentions33[0]=new AddTypeParameters_Intention();
}
return Arrays.asList(myIntentions33);
case 34:
if (myIntentions34 == null) {
myIntentions34=new IntentionFactory[2];
myIntentions34[0]=new ElsifSwapWithMain_Intention();
myIntentions34[1]=new ConvertElsifToNewIfStatement_Intention();
}
return Arrays.asList(myIntentions34);
case 35:
if (myIntentions35 == null) {
myIntentions35=new IntentionFactory[1];
myIntentions35[0]=new ConvertClassCreatorToAnonimous_Intention();
}
return Arrays.asList(myIntentions35);
case 36:
if (myIntentions36 == null) {
myIntentions36=new IntentionFactory[1];
myIntentions36[0]=new MakeDeprecated_Intention();
}
return Arrays.asList(myIntentions36);
case 37:
if (myIntentions37 == null) {
myIntentions37=new IntentionFactory[1];
myIntentions37[0]=new AlterStatementListContainer_Intention();
}
return Arrays.asList(myIntentions37);
case 38:
if (myIntentions38 == null) {
myIntentions38=new IntentionFactory[1];
myIntentions38[0]=new UnwrapTryCatch_Intention();
}
return Arrays.asList(myIntentions38);
case 39:
if (myIntentions39 == null) {
myIntentions39=new IntentionFactory[1];
myIntentions39[0]=new SpecifyClass_Intention();
}
return Arrays.asList(myIntentions39);
case 40:
if (myIntentions40 == null) {
myIntentions40=new IntentionFactory[1];
myIntentions40[0]=new MakeMethodStatic_Intention();
}
return Arrays.asList(myIntentions40);
default :
return null;
}
}
