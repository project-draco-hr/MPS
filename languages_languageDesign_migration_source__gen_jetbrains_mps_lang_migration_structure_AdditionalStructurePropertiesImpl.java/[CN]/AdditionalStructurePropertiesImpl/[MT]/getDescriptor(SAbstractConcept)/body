{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0lb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractNodeReference;
      }
    break;
case 1:
  if (true) {
    return props_ConceptMigrationReference;
  }
break;
case 2:
if (true) {
return props_ConsequenceFunction;
}
break;
case 3:
if (true) {
return props_DataDependency;
}
break;
case 4:
if (true) {
return props_DataDependencyReference;
}
break;
case 5:
if (true) {
return props_DirectNodeReference;
}
break;
case 6:
if (true) {
return props_ExecuteAfterDeclaration;
}
break;
case 7:
if (true) {
return props_IMigrationUnit;
}
break;
case 8:
if (true) {
return props_IncludeMigrationPart;
}
break;
case 9:
if (true) {
return props_LinkPatternVariableReference;
}
break;
case 10:
if (true) {
return props_ListPatternVariableReference;
}
break;
case 11:
if (true) {
return props_MigrationScript;
}
break;
case 12:
if (true) {
return props_MigrationScriptReference;
}
break;
case 13:
if (true) {
return props_MoveConcept;
}
break;
case 14:
if (true) {
return props_MoveConceptMember;
}
break;
case 15:
if (true) {
return props_MoveContainmentLink;
}
break;
case 16:
if (true) {
return props_MoveNodeMigrationPart;
}
break;
case 17:
if (true) {
return props_MoveNodeSpecialization;
}
break;
case 18:
if (true) {
return props_MoveProperty;
}
break;
case 19:
if (true) {
return props_MoveReferenceLink;
}
break;
case 20:
if (true) {
return props_NodePatternVariableReference;
}
break;
case 21:
if (true) {
return props_OrderDependency;
}
break;
case 22:
if (true) {
return props_ProducedDataDeclaration;
}
break;
case 23:
if (true) {
return props_PropertyPatternVariableReference;
}
break;
case 24:
if (true) {
return props_PureMigrationPart;
}
break;
case 25:
if (true) {
return props_PureMigrationScript;
}
break;
case 26:
if (true) {
return props_QuotationConsequence;
}
break;
case 27:
if (true) {
return props_RefactoringLog;
}
break;
case 28:
if (true) {
return props_RefactoringOption;
}
break;
case 29:
if (true) {
return props_RefactoringOptions;
}
break;
case 30:
if (true) {
return props_RefactoringOrderDependency;
}
break;
case 31:
if (true) {
return props_RefactoringPart;
}
break;
case 32:
if (true) {
return props_ReflectionNodeReference;
}
break;
case 33:
if (true) {
return props_RequiredDataDeclaration;
}
break;
case 34:
if (true) {
return props_TransformConsequence;
}
break;
case 35:
if (true) {
return props_TransformStatement;
}
break;
default :
}
}
throw new IllegalStateException();
}
