{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildAspect").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildCompositePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("head").children(new String[]{"tail"},new boolean[]{false}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildCustomWorkflow").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect").children(new String[]{"parts"},new boolean[]{true}).alias("workflow","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalDependency").interface_().create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalLayout").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer","jetbrains.mps.lang.core.structure.INamedConcept").alias("external layout","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildExternalLayoutDependency").super_("jetbrains.mps.build.structure.BuildDependency").parents("jetbrains.mps.build.structure.BuildDependency","jetbrains.mps.build.structure.BuildLayout_PathElement").references("layout").children(new String[]{"artifacts"},new boolean[]{false}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileExcludeSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector").properties("pattern").alias("exclude","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileIncludeSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector").properties("pattern").alias("include","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileIncludesSelector").super_("jetbrains.mps.build.structure.BuildFileSelector").parents("jetbrains.mps.build.structure.BuildFileSelector","jetbrains.mps.build.structure.BuildFileSelectorInAttribute").properties("pattern").alias("includes","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileSelector").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.structure.BuildLayout_CopyParameter").abstract_().create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFileSelectorInAttribute").interface_().create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildFolderMacro").super_("jetbrains.mps.build.structure.BuildMacro").parents("jetbrains.mps.build.structure.BuildMacro").children(new String[]{"defaultPath"},new boolean[]{false}).alias("folder","defines folder macro with default value (for local build)").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFileSet").super_("jetbrains.mps.build.structure.BuildInputResourceSet").parents("jetbrains.mps.build.structure.BuildInputResourceSet").abstract_().alias("file set","").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFiles").super_("jetbrains.mps.build.structure.BuildInputFileSet").parents("jetbrains.mps.build.structure.BuildInputFileSet","jetbrains.mps.build.structure.BuildLayout_FileSet").children(new String[]{"dir","selectors"},new boolean[]{false,true}).alias("files from","folder on local filesystem").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFolderSet").super_("jetbrains.mps.build.structure.BuildInputResourceSet").parents("jetbrains.mps.build.structure.BuildInputResourceSet").abstract_().create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputFolders").super_("jetbrains.mps.build.structure.BuildInputFolderSet").parents("jetbrains.mps.build.structure.BuildInputFolderSet").children(new String[]{"dir","selectors"},new boolean[]{false,true}).alias("folders","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputResourceSet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("resource set","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputSingleFile").super_("jetbrains.mps.build.structure.BuildInputFileSet").parents("jetbrains.mps.build.structure.BuildInputFileSet","jetbrains.mps.build.structure.BuildLayout_FileSet","jetbrains.mps.build.structure.BuildSource_SingleFile").children(new String[]{"path"},new boolean[]{false}).alias("file","single file on local filesystem").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildInputSingleFolder").super_("jetbrains.mps.build.structure.BuildInputFolderSet").parents("jetbrains.mps.build.structure.BuildInputFolderSet","jetbrains.mps.build.structure.BuildSource_SingleFolder").children(new String[]{"path"},new boolean[]{false}).alias("folder","").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildJavaPlugin").super_("jetbrains.mps.build.structure.BuildPlugin").parents("jetbrains.mps.build.structure.BuildPlugin").alias("java","adds Java capabilities (compile, test & bundling) to the project").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildLayout_Container").abstract_().create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"fileset"},new boolean[]{false}).abstract_().create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Comment").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").properties("text").alias("#","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CompileOutputOf").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildLayout_FileSet").references("module").alias("compile output of","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Container").interface_().children(new String[]{"children"},new boolean[]{true}).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet").interface_().create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Copy").super_("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").parents("jetbrains.mps.build.structure.BuildLayout_AbstractCopy","jetbrains.mps.build.structure.BuildLayout_FileSet","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilter").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterFixCRLF").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("eol","removeEOF").alias("fix eol","").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceRegex").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("pattern","flags").children(new String[]{"value"},new boolean[]{false}).alias("replace regex","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFilterReplaceTokens").super_("jetbrains.mps.build.structure.BuildLayout_CopyFilter").parents("jetbrains.mps.build.structure.BuildLayout_CopyFilter").properties("key").children(new String[]{"value"},new boolean[]{false}).alias("replace","").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyFlattenMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").alias("flatten","").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyGlobMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").properties("from").children(new String[]{"to"},new boolean[]{false}).alias("filename glob mapper","").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyHandler").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.structure.BuildLayout_CopyParameter").abstract_().create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyParameter").interface_().create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyProcessor").super_("jetbrains.mps.build.structure.BuildLayout_CopyHandler").parents("jetbrains.mps.build.structure.BuildLayout_CopyHandler").abstract_().create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CopyRegexMapper").super_("jetbrains.mps.build.structure.BuildLayout_CopyMapper").parents("jetbrains.mps.build.structure.BuildLayout_CopyMapper").properties("pattern","replace").alias("filename regex mapper","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_CustomCopy").super_("jetbrains.mps.build.structure.BuildLayout_AbstractCopy").parents("jetbrains.mps.build.structure.BuildLayout_AbstractCopy","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault","jetbrains.mps.build.structure.BuildLayout_FileSet").children(new String[]{"handlers"},new boolean[]{true}).create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoProperties").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"fileName","entries"},new boolean[]{false,true}).alias("properties file","").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoPropertyEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("key").children(new String[]{"value"},new boolean[]{false}).alias("entry","").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_EchoXml").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"fileName","element"},new boolean[]{false,false}).alias("xml file","").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ExportAsJavaLibrary").super_("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").parents("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").references("library").alias("export as java library","").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_File").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildSource_SingleFile").properties("filemode").children(new String[]{"path","parameters"},new boolean[]{false,true}).alias("file","").create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FileSet").interface_().create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FileStub").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildLayout_PureNode","jetbrains.mps.build.structure.BuildSource_SingleFile").children(new String[]{"fileName"},new boolean[]{false}).alias("file","").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Filemode").super_("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").parents("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").properties("filemode","dirmode").alias("filemode","customize file modes in archive").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Files").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"path","parameters"},new boolean[]{false,true}).alias("files from","").create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_FilesOf").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").references("element").alias("files of","copy files of project element").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Folder").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer","jetbrains.mps.build.structure.BuildLayout_PureNode").alias("folder","create a folder").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Import").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildExternalDependency","jetbrains.mps.build.structure.BuildLayout_FileSet").references("target").alias("import","").create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_ImportContent").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node","jetbrains.mps.build.structure.BuildExternalDependency","jetbrains.mps.build.structure.BuildLayout_FileSet").references("target").children(new String[]{"selectors"},new boolean[]{true}).alias("import files from","").create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_InJarNode").interface_().create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Jar").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer","jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet","jetbrains.mps.build.structure.BuildLayout_PureNode","jetbrains.mps.build.structure.BuildSource_SingleFile").alias("jar","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest").super_("jetbrains.mps.build.structure.BuildLayout_Node").parents("jetbrains.mps.build.structure.BuildLayout_Node").children(new String[]{"parts","name"},new boolean[]{true,false}).alias("manifest","jar manifest file").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Attribute").super_("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").parents("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part","jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"name","value"},new boolean[]{false,false}).alias("<name>: <value>","jar manifest attribute").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_JarManifest_Section").super_("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").parents("jetbrains.mps.build.structure.BuildLayout_JarManifest_Part").children(new String[]{"attribute","name"},new boolean[]{true,false}).alias("section","jar manifest section").create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_NamedContainer").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.structure.BuildSource_SingleFolder","jetbrains.mps.build.structure.BuildStringContainer").children(new String[]{"containerName"},new boolean[]{false}).abstract_().create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Node").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.structure.BuildLayout_PathElement").abstract_().create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_PathElement").interface_().create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_PureNode").interface_().create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Tar").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer","jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet","jetbrains.mps.build.structure.BuildLayout_PureNode").properties("compression").alias("tar","").create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_TransparentContainer").super_("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").parents("jetbrains.mps.build.structure.BuildLayout_AbstractContainer").abstract_().create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_War").super_("jetbrains.mps.build.structure.BuildLayout_Jar").parents("jetbrains.mps.build.structure.BuildLayout_Jar").alias("war","").create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildLayout_Zip").super_("jetbrains.mps.build.structure.BuildLayout_NamedContainer").parents("jetbrains.mps.build.structure.BuildLayout_NamedContainer","jetbrains.mps.build.structure.BuildLayout_ContainerAcceptingFileSet","jetbrains.mps.build.structure.BuildLayout_PureNode").alias("zip","").create();
case 68:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildMacro").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
case 69:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildNamedLayout").super_("jetbrains.mps.build.structure.BuildAspect").parents("jetbrains.mps.build.structure.BuildAspect","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.structure.BuildLayout_Container","jetbrains.mps.build.structure.BuildLayout_PathElement").alias("layout","custom named layout").create();
case 70:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildPlugin").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 71:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.INamedConcept").properties("internalBaseDirectory","fileName").children(new String[]{"plugins","dependencies","macros","parts","aspects","layout","scriptsDir"},new boolean[]{true,true,true,true,true,false,false}).alias("build project","").create();
case 72:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProjectDependency").super_("jetbrains.mps.build.structure.BuildDependency").parents("jetbrains.mps.build.structure.BuildDependency","jetbrains.mps.build.structure.BuildLayout_PathElement").references("script").children(new String[]{"artifacts"},new boolean[]{false}).create();
case 73:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildProjectPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 74:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildRelativePath").super_("jetbrains.mps.build.structure.BuildSourcePath").parents("jetbrains.mps.build.structure.BuildSourcePath").children(new String[]{"compositePart"},new boolean[]{false}).abstract_().create();
case 75:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath","jetbrains.mps.build.structure.BuildExternalDependency","jetbrains.mps.build.structure.IWorkflowParticipant","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"archivePath"},new boolean[]{false}).alias("*.zip!/","").create();
case 76:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceMacroRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath").references("macro").create();
case 77:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 78:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceProjectRelativePath").super_("jetbrains.mps.build.structure.BuildRelativePath").parents("jetbrains.mps.build.structure.BuildRelativePath").alias(".","").create();
case 79:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSourceSetContainer").interface_().create();
case 80:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_CompilablePart").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 81:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_FilesetProjectPart").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 82:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaCP").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 83:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaClassFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP").children(new String[]{"dir"},new boolean[]{false}).alias("classes","").create();
case 84:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaContentFolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("kind","relativePath").alias("source","").create();
case 85:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaContentRoot").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources").children(new String[]{"basePath","folders"},new boolean[]{false,true}).alias("content root","").create();
case 86:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 87:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJar").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency","jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").children(new String[]{"extJar"},new boolean[]{false}).alias("external jar","").create();
case 88:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyExternalJarInFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency","jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport","suffix").children(new String[]{"extFolder"},new boolean[]{false}).alias("external jar in folder","").create();
case 89:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyFileset").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency").children(new String[]{"classpath"},new boolean[]{false}).alias("classpath","").create();
case 90:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyJar").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("reexport").children(new String[]{"jar"},new boolean[]{false}).create();
case 91:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency","jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").references("library").alias("library","").create();
case 92:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaDependencyModule").super_("jetbrains.mps.build.structure.BuildSource_JavaDependency").parents("jetbrains.mps.build.structure.BuildSource_JavaDependency","jetbrains.mps.build.structure.BuildExternalDependency").properties("reexport").references("module").alias("module","").create();
case 93:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaExternalJarFolderRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("folder").create();
case 94:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("jar").create();
case 95:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaFiles").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"resset"},new boolean[]{false}).alias("java files","").create();
case 96:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaJar").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP").children(new String[]{"path","customLocation"},new boolean[]{false,false}).alias("jar","").create();
case 97:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaJars").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP","jetbrains.mps.build.structure.BuildSourceSetContainer").children(new String[]{"jars"},new boolean[]{false}).alias("jars","").create();
case 98:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibrary").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"elements"},new boolean[]{true}).alias("java library","").create();
case 99:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryCP").super_("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement").parents("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"classpath"},new boolean[]{false}).create();
case 100:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 101:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJar").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP","jetbrains.mps.build.structure.BuildExternalDependency").children(new String[]{"extJar"},new boolean[]{false}).alias("external jar","").create();
case 102:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaLibraryExternalJarFolder").super_("jetbrains.mps.build.structure.BuildSource_JavaCP").parents("jetbrains.mps.build.structure.BuildSource_JavaCP","jetbrains.mps.build.structure.BuildExternalDependency").children(new String[]{"extFolder"},new boolean[]{false}).alias("external jars","").create();
case 103:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaModule").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.structure.BuildSource_CompilablePart").children(new String[]{"sources","dependencies","options"},new boolean[]{true,true,false}).alias("java module","").create();
case 104:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaModuleOptions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("compileOptions").alias("apply compiler options","").create();
case 105:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaOptions").super_("jetbrains.mps.build.structure.BuildProjectPart").parents("jetbrains.mps.build.structure.BuildProjectPart").properties("optionsName","generateDebugInfo","copyResources","heapSize","noWarnings","compiler").children(new String[]{"resourceSelectors"},new boolean[]{true}).alias("java options","").create();
case 106:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaResources").super_("jetbrains.mps.build.structure.BuildSource_JavaSources").parents("jetbrains.mps.build.structure.BuildSource_JavaSources","jetbrains.mps.build.structure.BuildSourceSetContainer").children(new String[]{"fileset"},new boolean[]{false}).alias("resources","").create();
case 107:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_JavaSources").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 108:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_SingleFile").interface_().create();
case 109:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildSource_SingleFolder").interface_().create();
case 110:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"parts"},new boolean[]{true}).create();
case 111:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringContainer").interface_().create();
case 112:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringNotEmpty").super_("jetbrains.mps.build.structure.BuildString").parents("jetbrains.mps.build.structure.BuildString").create();
case 113:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildStringPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
case 114:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildTextStringPart").super_("jetbrains.mps.build.structure.BuildStringPart").parents("jetbrains.mps.build.structure.BuildStringPart","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").create();
case 115:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVarRefStringPart").super_("jetbrains.mps.build.structure.BuildStringPart").parents("jetbrains.mps.build.structure.BuildStringPart","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("macro").create();
case 116:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacro").super_("jetbrains.mps.build.structure.BuildMacro").parents("jetbrains.mps.build.structure.BuildMacro").children(new String[]{"initialValue"},new boolean[]{false}).alias("var","defines variable macro").create();
case 117:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 118:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithDate").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue").properties("pattern").alias("date","").create();
case 119:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithString").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"value"},new boolean[]{false}).alias("string","").create();
case 120:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.BuildVariableMacroInitWithValueFromFile").super_("jetbrains.mps.build.structure.BuildVariableMacroInitValue").parents("jetbrains.mps.build.structure.BuildVariableMacroInitValue").properties("propertyName").children(new String[]{"fileName"},new boolean[]{false}).alias("load from file","").create();
case 121:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaJar").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetJar").create();
case 122:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaLibrary").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetLibrary").create();
case 123:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_JavaModule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("targetReexport").references("targetModule").create();
case 124:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_BuildSource_SingleFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetFile").create();
case 125:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("participant").create();
case 126:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("for").children(new String[]{"participant"},new boolean[]{true}).create();
case 127:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.GeneratorInternal_ProjectDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").references("project").create();
case 128:
return new ConceptDescriptorBuilder("jetbrains.mps.build.structure.IWorkflowParticipant").interface_().create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
