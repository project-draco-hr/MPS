{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptBuildAspect;
case 1:
  return myConceptBuildCompositePath;
case 2:
return myConceptBuildCustomWorkflow;
case 3:
return myConceptBuildDependency;
case 4:
return myConceptBuildExternalDependency;
case 5:
return myConceptBuildExternalLayout;
case 6:
return myConceptBuildExternalLayoutDependency;
case 7:
return myConceptBuildFileExcludeSelector;
case 8:
return myConceptBuildFileIncludeSelector;
case 9:
return myConceptBuildFileIncludesSelector;
case 10:
return myConceptBuildFileSelector;
case 11:
return myConceptBuildFileSelectorInAttribute;
case 12:
return myConceptBuildFolderMacro;
case 13:
return myConceptBuildInputFileSet;
case 14:
return myConceptBuildInputFiles;
case 15:
return myConceptBuildInputFolderSet;
case 16:
return myConceptBuildInputFolders;
case 17:
return myConceptBuildInputResourceSet;
case 18:
return myConceptBuildInputSingleFile;
case 19:
return myConceptBuildInputSingleFolder;
case 20:
return myConceptBuildJavaPlugin;
case 21:
return myConceptBuildLayout;
case 22:
return myConceptBuildLayout_AbstractContainer;
case 23:
return myConceptBuildLayout_AbstractCopy;
case 24:
return myConceptBuildLayout_Comment;
case 25:
return myConceptBuildLayout_CompileOutputOf;
case 26:
return myConceptBuildLayout_Container;
case 27:
return myConceptBuildLayout_ContainerAcceptingFileSet;
case 28:
return myConceptBuildLayout_Copy;
case 29:
return myConceptBuildLayout_CopyFilter;
case 30:
return myConceptBuildLayout_CopyFilterFixCRLF;
case 31:
return myConceptBuildLayout_CopyFilterReplaceRegex;
case 32:
return myConceptBuildLayout_CopyFilterReplaceTokens;
case 33:
return myConceptBuildLayout_CopyFlattenMapper;
case 34:
return myConceptBuildLayout_CopyGlobMapper;
case 35:
return myConceptBuildLayout_CopyHandler;
case 36:
return myConceptBuildLayout_CopyMapper;
case 37:
return myConceptBuildLayout_CopyParameter;
case 38:
return myConceptBuildLayout_CopyProcessor;
case 39:
return myConceptBuildLayout_CopyRegexMapper;
case 40:
return myConceptBuildLayout_CustomCopy;
case 41:
return myConceptBuildLayout_EchoProperties;
case 42:
return myConceptBuildLayout_EchoPropertyEntry;
case 43:
return myConceptBuildLayout_EchoXml;
case 44:
return myConceptBuildLayout_ExportAsJavaLibrary;
case 45:
return myConceptBuildLayout_File;
case 46:
return myConceptBuildLayout_FileSet;
case 47:
return myConceptBuildLayout_FileStub;
case 48:
return myConceptBuildLayout_Filemode;
case 49:
return myConceptBuildLayout_Files;
case 50:
return myConceptBuildLayout_FilesOf;
case 51:
return myConceptBuildLayout_Folder;
case 52:
return myConceptBuildLayout_Import;
case 53:
return myConceptBuildLayout_ImportContent;
case 54:
return myConceptBuildLayout_InJarNode;
case 55:
return myConceptBuildLayout_Jar;
case 56:
return myConceptBuildLayout_JarManifest;
case 57:
return myConceptBuildLayout_JarManifest_Attribute;
case 58:
return myConceptBuildLayout_JarManifest_Part;
case 59:
return myConceptBuildLayout_JarManifest_Section;
case 60:
return myConceptBuildLayout_NamedContainer;
case 61:
return myConceptBuildLayout_Node;
case 62:
return myConceptBuildLayout_PathElement;
case 63:
return myConceptBuildLayout_PureNode;
case 64:
return myConceptBuildLayout_Tar;
case 65:
return myConceptBuildLayout_TransparentContainer;
case 66:
return myConceptBuildLayout_War;
case 67:
return myConceptBuildLayout_Zip;
case 68:
return myConceptBuildMacro;
case 69:
return myConceptBuildNamedLayout;
case 70:
return myConceptBuildPlugin;
case 71:
return myConceptBuildProject;
case 72:
return myConceptBuildProjectDependency;
case 73:
return myConceptBuildProjectPart;
case 74:
return myConceptBuildRelativePath;
case 75:
return myConceptBuildSourceArchiveRelativePath;
case 76:
return myConceptBuildSourceMacroRelativePath;
case 77:
return myConceptBuildSourcePath;
case 78:
return myConceptBuildSourceProjectRelativePath;
case 79:
return myConceptBuildSourceSetContainer;
case 80:
return myConceptBuildSource_CompilablePart;
case 81:
return myConceptBuildSource_FilesetProjectPart;
case 82:
return myConceptBuildSource_JavaCP;
case 83:
return myConceptBuildSource_JavaClassFolder;
case 84:
return myConceptBuildSource_JavaContentFolder;
case 85:
return myConceptBuildSource_JavaContentRoot;
case 86:
return myConceptBuildSource_JavaDependency;
case 87:
return myConceptBuildSource_JavaDependencyExternalJar;
case 88:
return myConceptBuildSource_JavaDependencyExternalJarInFolder;
case 89:
return myConceptBuildSource_JavaDependencyFileset;
case 90:
return myConceptBuildSource_JavaDependencyJar;
case 91:
return myConceptBuildSource_JavaDependencyLibrary;
case 92:
return myConceptBuildSource_JavaDependencyModule;
case 93:
return myConceptBuildSource_JavaExternalJarFolderRef;
case 94:
return myConceptBuildSource_JavaExternalJarRef;
case 95:
return myConceptBuildSource_JavaFiles;
case 96:
return myConceptBuildSource_JavaJar;
case 97:
return myConceptBuildSource_JavaJars;
case 98:
return myConceptBuildSource_JavaLibrary;
case 99:
return myConceptBuildSource_JavaLibraryCP;
case 100:
return myConceptBuildSource_JavaLibraryElement;
case 101:
return myConceptBuildSource_JavaLibraryExternalJar;
case 102:
return myConceptBuildSource_JavaLibraryExternalJarFolder;
case 103:
return myConceptBuildSource_JavaModule;
case 104:
return myConceptBuildSource_JavaModuleOptions;
case 105:
return myConceptBuildSource_JavaOptions;
case 106:
return myConceptBuildSource_JavaResources;
case 107:
return myConceptBuildSource_JavaSources;
case 108:
return myConceptBuildSource_SingleFile;
case 109:
return myConceptBuildSource_SingleFolder;
case 110:
return myConceptBuildString;
case 111:
return myConceptBuildStringContainer;
case 112:
return myConceptBuildStringNotEmpty;
case 113:
return myConceptBuildStringPart;
case 114:
return myConceptBuildTextStringPart;
case 115:
return myConceptBuildVarRefStringPart;
case 116:
return myConceptBuildVariableMacro;
case 117:
return myConceptBuildVariableMacroInitValue;
case 118:
return myConceptBuildVariableMacroInitWithDate;
case 119:
return myConceptBuildVariableMacroInitWithFileContent;
case 120:
return myConceptBuildVariableMacroInitWithString;
case 121:
return myConceptBuildVariableMacroInitWithValueFromFile;
case 122:
return myConceptGeneratorInternal_BuildSource_Folder;
case 123:
return myConceptGeneratorInternal_BuildSource_JarFolder;
case 124:
return myConceptGeneratorInternal_BuildSource_JavaJar;
case 125:
return myConceptGeneratorInternal_BuildSource_JavaLibrary;
case 126:
return myConceptGeneratorInternal_BuildSource_JavaModule;
case 127:
return myConceptGeneratorInternal_BuildSource_SingleFile;
case 128:
return myConceptGeneratorInternal_IWorkflowParticipantReference;
case 129:
return myConceptGeneratorInternal_IWorkfowParticipants;
case 130:
return myConceptGeneratorInternal_LibraryArtifacts;
case 131:
return myConceptGeneratorInternal_Mapping;
case 132:
return myConceptGeneratorInternal_ProjectDependency;
case 133:
return myConceptIWorkflowParticipant;
default :
throw new IllegalStateException();
}
}
