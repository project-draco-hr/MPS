{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0hf.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptBuildAspect;
      }
    break;
case 1:
  if (true) {
    return myConceptBuildCompositePath;
  }
break;
case 2:
if (true) {
return myConceptBuildCustomWorkflow;
}
break;
case 3:
if (true) {
return myConceptBuildDependency;
}
break;
case 4:
if (true) {
return myConceptBuildExternalDependency;
}
break;
case 5:
if (true) {
return myConceptBuildExternalLayout;
}
break;
case 6:
if (true) {
return myConceptBuildExternalLayoutDependency;
}
break;
case 7:
if (true) {
return myConceptBuildFileExcludeSelector;
}
break;
case 8:
if (true) {
return myConceptBuildFileIncludeSelector;
}
break;
case 9:
if (true) {
return myConceptBuildFileIncludesSelector;
}
break;
case 10:
if (true) {
return myConceptBuildFileSelector;
}
break;
case 11:
if (true) {
return myConceptBuildFileSelectorInAttribute;
}
break;
case 12:
if (true) {
return myConceptBuildFolderMacro;
}
break;
case 13:
if (true) {
return myConceptBuildInputFileSet;
}
break;
case 14:
if (true) {
return myConceptBuildInputFiles;
}
break;
case 15:
if (true) {
return myConceptBuildInputFolderSet;
}
break;
case 16:
if (true) {
return myConceptBuildInputFolders;
}
break;
case 17:
if (true) {
return myConceptBuildInputResourceSet;
}
break;
case 18:
if (true) {
return myConceptBuildInputSingleFile;
}
break;
case 19:
if (true) {
return myConceptBuildInputSingleFolder;
}
break;
case 20:
if (true) {
return myConceptBuildJavaPlugin;
}
break;
case 21:
if (true) {
return myConceptBuildLayout;
}
break;
case 22:
if (true) {
return myConceptBuildLayout_AbstractContainer;
}
break;
case 23:
if (true) {
return myConceptBuildLayout_AbstractCopy;
}
break;
case 24:
if (true) {
return myConceptBuildLayout_Comment;
}
break;
case 25:
if (true) {
return myConceptBuildLayout_CompileOutputOf;
}
break;
case 26:
if (true) {
return myConceptBuildLayout_Container;
}
break;
case 27:
if (true) {
return myConceptBuildLayout_ContainerAcceptingFileSet;
}
break;
case 28:
if (true) {
return myConceptBuildLayout_Copy;
}
break;
case 29:
if (true) {
return myConceptBuildLayout_CopyFilter;
}
break;
case 30:
if (true) {
return myConceptBuildLayout_CopyFilterFixCRLF;
}
break;
case 31:
if (true) {
return myConceptBuildLayout_CopyFilterReplaceRegex;
}
break;
case 32:
if (true) {
return myConceptBuildLayout_CopyFilterReplaceTokens;
}
break;
case 33:
if (true) {
return myConceptBuildLayout_CopyFlattenMapper;
}
break;
case 34:
if (true) {
return myConceptBuildLayout_CopyGlobMapper;
}
break;
case 35:
if (true) {
return myConceptBuildLayout_CopyHandler;
}
break;
case 36:
if (true) {
return myConceptBuildLayout_CopyMapper;
}
break;
case 37:
if (true) {
return myConceptBuildLayout_CopyParameter;
}
break;
case 38:
if (true) {
return myConceptBuildLayout_CopyProcessor;
}
break;
case 39:
if (true) {
return myConceptBuildLayout_CopyRegexMapper;
}
break;
case 40:
if (true) {
return myConceptBuildLayout_CustomCopy;
}
break;
case 41:
if (true) {
return myConceptBuildLayout_EchoProperties;
}
break;
case 42:
if (true) {
return myConceptBuildLayout_EchoPropertyEntry;
}
break;
case 43:
if (true) {
return myConceptBuildLayout_EchoXml;
}
break;
case 44:
if (true) {
return myConceptBuildLayout_ExportAsJavaLibrary;
}
break;
case 45:
if (true) {
return myConceptBuildLayout_File;
}
break;
case 46:
if (true) {
return myConceptBuildLayout_FileSet;
}
break;
case 47:
if (true) {
return myConceptBuildLayout_FileStub;
}
break;
case 48:
if (true) {
return myConceptBuildLayout_Filemode;
}
break;
case 49:
if (true) {
return myConceptBuildLayout_Files;
}
break;
case 50:
if (true) {
return myConceptBuildLayout_FilesOf;
}
break;
case 51:
if (true) {
return myConceptBuildLayout_Folder;
}
break;
case 52:
if (true) {
return myConceptBuildLayout_Import;
}
break;
case 53:
if (true) {
return myConceptBuildLayout_ImportContent;
}
break;
case 54:
if (true) {
return myConceptBuildLayout_InJarNode;
}
break;
case 55:
if (true) {
return myConceptBuildLayout_Jar;
}
break;
case 56:
if (true) {
return myConceptBuildLayout_JarManifest;
}
break;
case 57:
if (true) {
return myConceptBuildLayout_JarManifest_Attribute;
}
break;
case 58:
if (true) {
return myConceptBuildLayout_JarManifest_Part;
}
break;
case 59:
if (true) {
return myConceptBuildLayout_JarManifest_Section;
}
break;
case 60:
if (true) {
return myConceptBuildLayout_NamedContainer;
}
break;
case 61:
if (true) {
return myConceptBuildLayout_Node;
}
break;
case 62:
if (true) {
return myConceptBuildLayout_PathElement;
}
break;
case 63:
if (true) {
return myConceptBuildLayout_PureNode;
}
break;
case 64:
if (true) {
return myConceptBuildLayout_Tar;
}
break;
case 65:
if (true) {
return myConceptBuildLayout_TransparentContainer;
}
break;
case 66:
if (true) {
return myConceptBuildLayout_War;
}
break;
case 67:
if (true) {
return myConceptBuildLayout_Zip;
}
break;
case 68:
if (true) {
return myConceptBuildMacro;
}
break;
case 69:
if (true) {
return myConceptBuildNamedLayout;
}
break;
case 70:
if (true) {
return myConceptBuildPlugin;
}
break;
case 71:
if (true) {
return myConceptBuildProject;
}
break;
case 72:
if (true) {
return myConceptBuildProjectDependency;
}
break;
case 73:
if (true) {
return myConceptBuildProjectPart;
}
break;
case 74:
if (true) {
return myConceptBuildRelativePath;
}
break;
case 75:
if (true) {
return myConceptBuildSourceArchiveRelativePath;
}
break;
case 76:
if (true) {
return myConceptBuildSourceMacroRelativePath;
}
break;
case 77:
if (true) {
return myConceptBuildSourcePath;
}
break;
case 78:
if (true) {
return myConceptBuildSourceProjectRelativePath;
}
break;
case 79:
if (true) {
return myConceptBuildSourceSetContainer;
}
break;
case 80:
if (true) {
return myConceptBuildSource_CompilablePart;
}
break;
case 81:
if (true) {
return myConceptBuildSource_FilesetProjectPart;
}
break;
case 82:
if (true) {
return myConceptBuildSource_JavaCP;
}
break;
case 83:
if (true) {
return myConceptBuildSource_JavaClassFolder;
}
break;
case 84:
if (true) {
return myConceptBuildSource_JavaContentFolder;
}
break;
case 85:
if (true) {
return myConceptBuildSource_JavaContentRoot;
}
break;
case 86:
if (true) {
return myConceptBuildSource_JavaDependency;
}
break;
case 87:
if (true) {
return myConceptBuildSource_JavaDependencyExternalJar;
}
break;
case 88:
if (true) {
return myConceptBuildSource_JavaDependencyExternalJarInFolder;
}
break;
case 89:
if (true) {
return myConceptBuildSource_JavaDependencyFileset;
}
break;
case 90:
if (true) {
return myConceptBuildSource_JavaDependencyJar;
}
break;
case 91:
if (true) {
return myConceptBuildSource_JavaDependencyLibrary;
}
break;
case 92:
if (true) {
return myConceptBuildSource_JavaDependencyModule;
}
break;
case 93:
if (true) {
return myConceptBuildSource_JavaExternalJarFolderRef;
}
break;
case 94:
if (true) {
return myConceptBuildSource_JavaExternalJarRef;
}
break;
case 95:
if (true) {
return myConceptBuildSource_JavaFiles;
}
break;
case 96:
if (true) {
return myConceptBuildSource_JavaJar;
}
break;
case 97:
if (true) {
return myConceptBuildSource_JavaJars;
}
break;
case 98:
if (true) {
return myConceptBuildSource_JavaLibrary;
}
break;
case 99:
if (true) {
return myConceptBuildSource_JavaLibraryCP;
}
break;
case 100:
if (true) {
return myConceptBuildSource_JavaLibraryElement;
}
break;
case 101:
if (true) {
return myConceptBuildSource_JavaLibraryExternalJar;
}
break;
case 102:
if (true) {
return myConceptBuildSource_JavaLibraryExternalJarFolder;
}
break;
case 103:
if (true) {
return myConceptBuildSource_JavaModule;
}
break;
case 104:
if (true) {
return myConceptBuildSource_JavaModuleOptions;
}
break;
case 105:
if (true) {
return myConceptBuildSource_JavaOptions;
}
break;
case 106:
if (true) {
return myConceptBuildSource_JavaResources;
}
break;
case 107:
if (true) {
return myConceptBuildSource_JavaSources;
}
break;
case 108:
if (true) {
return myConceptBuildSource_SingleFile;
}
break;
case 109:
if (true) {
return myConceptBuildSource_SingleFolder;
}
break;
case 110:
if (true) {
return myConceptBuildString;
}
break;
case 111:
if (true) {
return myConceptBuildStringContainer;
}
break;
case 112:
if (true) {
return myConceptBuildStringNotEmpty;
}
break;
case 113:
if (true) {
return myConceptBuildStringPart;
}
break;
case 114:
if (true) {
return myConceptBuildTextStringPart;
}
break;
case 115:
if (true) {
return myConceptBuildVarRefStringPart;
}
break;
case 116:
if (true) {
return myConceptBuildVariableMacro;
}
break;
case 117:
if (true) {
return myConceptBuildVariableMacroInitValue;
}
break;
case 118:
if (true) {
return myConceptBuildVariableMacroInitWithDate;
}
break;
case 119:
if (true) {
return myConceptBuildVariableMacroInitWithString;
}
break;
case 120:
if (true) {
return myConceptBuildVariableMacroInitWithValueFromFile;
}
break;
case 121:
if (true) {
return myConceptGeneratorInternal_BuildSource_Folder;
}
break;
case 122:
if (true) {
return myConceptGeneratorInternal_BuildSource_JarFolder;
}
break;
case 123:
if (true) {
return myConceptGeneratorInternal_BuildSource_JavaJar;
}
break;
case 124:
if (true) {
return myConceptGeneratorInternal_BuildSource_JavaLibrary;
}
break;
case 125:
if (true) {
return myConceptGeneratorInternal_BuildSource_JavaModule;
}
break;
case 126:
if (true) {
return myConceptGeneratorInternal_BuildSource_SingleFile;
}
break;
case 127:
if (true) {
return myConceptGeneratorInternal_IWorkflowParticipantReference;
}
break;
case 128:
if (true) {
return myConceptGeneratorInternal_IWorkfowParticipants;
}
break;
case 129:
if (true) {
return myConceptGeneratorInternal_LibraryArtifacts;
}
break;
case 130:
if (true) {
return myConceptGeneratorInternal_Mapping;
}
break;
case 131:
if (true) {
return myConceptGeneratorInternal_ProjectDependency;
}
break;
case 132:
if (true) {
return myConceptIWorkflowParticipant;
}
break;
default :
}
}
return null;
}
