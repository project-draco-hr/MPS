{
  this.myIsTestMethods=isTestMethods;
  this.setLayout(new BorderLayout());
  this.myValues=nodes;
  this.myListModel=new ListPanel.MyAbstractListModel();
  this.myListComponent=new JBList(this.myListModel);
  AnAction add=new ListAddAction(this.myListComponent){
    protected int doAdd(    AnActionEvent p0){
      List<SNodePointer> nodesList=getCandidates();
      NodeChooserDialog chooserDialog=new NodeChooserDialog(myProject,nodesList);
      chooserDialog.show();
      final SNodePointer resultNode=chooserDialog.getResult();
      if (resultNode == null) {
        return -1;
      }
      final Wrappers._T<ITestNodeWrapper> wrapper=new Wrappers._T<ITestNodeWrapper>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          wrapper.value=TestNodeWrapperFactory.tryToWrap(resultNode.getNode());
        }
      }
);
      if (wrapper.value == null) {
        return -1;
      }
      ListSequence.fromList(ListPanel.this.myValues).addElement(wrapper.value);
      if (ListPanel.this.myListener != null) {
        ListPanel.this.myListener.actionPerformed(null);
      }
      ListPanel.this.myListComponent.updateUI();
      ListPanel.this.myListModel.fireSomethingChanged();
      return ListSequence.fromList(ListPanel.this.myValues).indexOf(wrapper.value);
    }
  }
;
  AnAction remove=new ListRemoveAction(this.myListComponent){
    protected void doRemove(    AnActionEvent p0){
      for (      Object value : ListPanel.this.myListComponent.getSelectedValues()) {
        for (        final ITestNodeWrapper node : ListPanel.this.myValues) {
          final Wrappers._T<String> fqName=new Wrappers._T<String>();
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              fqName.value=node.getFqName();
            }
          }
);
          if (fqName.value.equals(value)) {
            ListSequence.fromList(ListPanel.this.myValues).removeElement(node);
            break;
          }
        }
      }
      if (ListPanel.this.myListener != null) {
        ListPanel.this.myListener.actionPerformed(null);
      }
      ListPanel.this.myListComponent.updateUI();
      ListPanel.this.myListModel.fireSomethingChanged();
    }
  }
;
  this.setBorder(new TitledBorder("Test"));
  DefaultActionGroup group=ActionUtils.groupFromActions(add,remove);
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,false);
  this.add(toolbar.getComponent(),BorderLayout.WEST);
  JScrollPane comp=ScrollPaneFactory.createScrollPane(myListComponent);
  comp.doLayout();
  this.add(comp,BorderLayout.CENTER);
  this.add(new JLabel((this.myIsTestMethods ? "Methods" : "Classes")),BorderLayout.PAGE_START);
  this.myListComponent.updateUI();
}
