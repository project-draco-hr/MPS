{
  boolean needsUpdate;
synchronized (myLock) {
    needsUpdate=this.myCandidates == null;
  }
  if (needsUpdate) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        final List<SNode> nodesList=new ArrayList<SNode>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            SNode concept : Sequence.fromIterable(TestNodeWrapperFactory.getWrappedRootConcepts())) {
              ListSequence.fromList(nodesList).addSequence(SetSequence.fromSet(FindUsagesManager.getInstance().findUsages(Collections.singleton(concept),SearchType.INSTANCES,GlobalScope.getInstance(),new ProgressMonitorAdapter(ProgressManager.getInstance().getProgressIndicator()))));
            }
          }
        }
);
        if (ListPanel.this.myIsTestMethods) {
          final List<ITestNodeWrapper> methodsList=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              for (              SNode testCase : nodesList) {
                ITestNodeWrapper wrapper=TestNodeWrapperFactory.tryToWrap(testCase);
                if (wrapper == null) {
                  continue;
                }
                ListSequence.fromList(methodsList).addSequence(Sequence.fromIterable(wrapper.getTestMethods()));
              }
            }
          }
);
synchronized (myLock) {
            ListPanel.this.myCandidates=methodsList;
          }
        }
 else {
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
synchronized (myLock) {
                ListPanel.this.myCandidates=ListSequence.fromList(nodesList).select(new ISelector<SNode,ITestNodeWrapper>(){
                  public ITestNodeWrapper select(                  SNode it){
                    return TestNodeWrapperFactory.tryToWrap(it);
                  }
                }
).where(new IWhereFilter<ITestNodeWrapper>(){
                  public boolean accept(                  ITestNodeWrapper it){
                    return it != null;
                  }
                }
).toListSequence();
              }
            }
          }
);
        }
      }
    }
,"Searching for test nodes",false,myProject);
  }
synchronized (myLock) {
    ListSequence.fromList(this.myCandidates).removeSequence(ListSequence.fromList(this.myValues));
    return ListSequence.fromList(this.myCandidates).select(new ISelector<ITestNodeWrapper,SNodePointer>(){
      public SNodePointer select(      ITestNodeWrapper it){
        return it.getNodePointer();
      }
    }
).toListSequence();
  }
}
