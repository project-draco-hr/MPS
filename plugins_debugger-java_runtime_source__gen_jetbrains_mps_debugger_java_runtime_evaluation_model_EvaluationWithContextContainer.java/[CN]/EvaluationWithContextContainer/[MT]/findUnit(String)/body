{
  SModel stub=findStubForFqName(modelFqNameFromUnitName(unitName));
  if (stub != null) {
    org.jetbrains.mps.openapi.model.SModel model=stub.getSModel();
    SNode node=ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getNodes(model,"jetbrains.mps.lang.traceable.structure.UnitConcept")).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return eq_v5yv3u_a0a0a0a0a0a0b0d0o(BehaviorReflection.invokeVirtual(String.class,it,"virtual_getUnitName_5067982036267369911",new Object[]{}),unitName) && SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Classifier");
      }
    }
);
    if (node != null) {
      return node;
    }
  }
  FindUsagesManager manager=FindUsagesManager.getInstance();
  SConcept concept=SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.traceable.structure.UnitConcept");
  Set<SNode> instances=manager.findUsages(Collections.singleton(concept),SearchType.INSTANCES,new ModelsScope(getCandidateNonStubModels(unitName)),new EmptyProgressMonitor());
  return SNodeOperations.cast(SetSequence.fromSet(instances).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(((SNode)it),"jetbrains.mps.baseLanguage.structure.Classifier") && BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(it,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{}).equals(unitName);
    }
  }
),"jetbrains.mps.lang.traceable.structure.UnitConcept");
}
