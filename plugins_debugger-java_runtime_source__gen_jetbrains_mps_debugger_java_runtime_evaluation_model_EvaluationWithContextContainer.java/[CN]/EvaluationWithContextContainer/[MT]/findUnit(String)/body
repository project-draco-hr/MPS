{
  SModel stub=findStubForFqName(modelFqNameFromUnitName(unitName));
  if (stub != null) {
    SModel model=stub;
    SNode node=ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.nodes(model,MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L,0xbfd948636cfe8bc3L,0x465516cf87c705a4L,"jetbrains.mps.lang.traceable.structure.UnitConcept"))).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return eq_v5yv3u_a0a0a0a0a0a0b0d0o(((String)BHReflection.invoke(it,SMethodTrimmedId.create("getUnitName",null,"4pl5GY7LKmR"))),unitName) && SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
      }
    }
);
    if (node != null) {
      return node;
    }
  }
  FindUsagesFacade findUsages=FindUsagesFacade.getInstance();
  SAbstractConcept concept=MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L,0xbfd948636cfe8bc3L,0x465516cf87c705a4L,"jetbrains.mps.lang.traceable.structure.UnitConcept");
  Set<SNode> instances=findUsages.findInstances(new ModelsScope(getCandidateNonStubModels(unitName)),Collections.singleton(concept),false,new EmptyProgressMonitor());
  return SNodeOperations.cast(SetSequence.fromSet(instances).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(((SNode)it),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")) && ((String)BHReflection.invoke(SNodeOperations.cast(it,MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L,0xbfd948636cfe8bc3L,0x465516cf87c705a4L,"jetbrains.mps.lang.traceable.structure.UnitConcept")),SMethodTrimmedId.create("getUnitName",null,"4pl5GY7LKmR"))).equals(unitName);
    }
  }
),MetaAdapterFactory.getInterfaceConcept(0x9ded098bad6a4657L,0xbfd948636cfe8bc3L,0x465516cf87c705a4L,"jetbrains.mps.lang.traceable.structure.UnitConcept"));
}
