{
  try {
    _FunctionTypes._return_P1_E0<? extends SNode,? super String> createClassifierType=new _FunctionTypes._return_P1_E0<SNode,String>(){
      public SNode invoke(      String name){
        return createClassifierType(name);
      }
    }
;
    Map<String,VariableDescription> contextVariables=myEvaluationContext.getVariables(createClassifierType);
    Map<String,SNode> declaredVariables=MapSequence.fromMap(new LinkedHashMap<String,SNode>(16,(float)0.75,false));
    for (    SNode var : ListSequence.fromList(SLinkOperations.getChildren(evaluatorConcept,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d925L,0x53c5060c6b19c797L,"variables")))) {
      MapSequence.fromMap(declaredVariables).put(SPropertyOperations.getString(var,MetaAdapterFactory.getProperty(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d926L,0x4db8c07036eb94eeL,"lowLevelName")),var);
    }
    final Set<SNode> foundVars=SetSequence.fromSet(new HashSet<SNode>());
    for (    String variable : MapSequence.fromMap(contextVariables).keySet()) {
      String name=variable;
      SNode lowLevelVarNode=MapSequence.fromMap(declaredVariables).get(name);
      if (needUpdateVariables()) {
        if (lowLevelVarNode == null) {
          lowLevelVarNode=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d926L,"jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable"));
          ListSequence.fromList(SLinkOperations.getChildren(evaluatorConcept,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d925L,0x53c5060c6b19c797L,"variables"))).addElement(lowLevelVarNode);
          MapSequence.fromMap(declaredVariables).put(name,lowLevelVarNode);
        }
        MapSequence.fromMap(contextVariables).get(variable).updateLowLevelVariable(lowLevelVarNode);
      }
      SetSequence.fromSet(foundVars).addElement(lowLevelVarNode);
    }
    Sequence.fromIterable(MapSequence.fromMap(declaredVariables).values()).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        SPropertyOperations.set(it,MetaAdapterFactory.getProperty(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d926L,0x554b4e03d5950431L,"isOutOfScope"),"" + (!(SetSequence.fromSet(foundVars).contains(it))));
      }
    }
);
    if (needUpdateVariables()) {
      SLinkOperations.setTarget(evaluatorConcept,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d925L,0x3f11b1341fa23615L,"contextNode"),myEvaluationContext.getStaticContextType(createClassifierType));
      SLinkOperations.setTarget(evaluatorConcept,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b18d925L,0x3f11b1341fa23613L,"thisNode"),myEvaluationContext.getThisClassifierType(createClassifierType));
    }
  }
 catch (  InvalidStackFrameException e) {
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("InvalidStackFrameException",e);
    }
  }
  myVariablesInitialized=true;
}
