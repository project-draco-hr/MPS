{
  if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(op),"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation")) {
    return;
  }
  final SNode leftExpression=SNodeOperation_Behavior.call_getLeftExpression_1213877508894(op);
{
    final SNode LeftType=TypeChecker.getInstance().getRuntimeSupport().typeOf(leftExpression,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1206099323449",false);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(LeftType,new Runnable(){
      public void run(){
        boolean isGood=false;
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_model")) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),new QuotationClass_33().createNode(),false,false)) {
            isGood=true;
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept")) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),new QuotationClass_34().createNode(),false,false)) {
            isGood=true;
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_node")) {
          if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),new QuotationClass_35().createNode(),false,false)) {
            isGood=true;
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_link")) {
          SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure._LinkAccessT"),false);
          if (linkAccessT != null) {
            isGood=SPropertyOperations.getBoolean(linkAccessT,"singularCradinality");
            if (isGood) {
              if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept") && !(SConceptPropertyOperations.getBoolean(op,"applicable_to_node"))) {
                isGood=TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),new QuotationClass_85().createNode());
              }
            }
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_linkList")) {
          SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure._LinkAccessT"),false);
          if (linkAccessT != null) {
            isGood=!(SPropertyOperations.getBoolean(linkAccessT,"singularCradinality"));
          }
        }
        SNode leftOperation=SNodeOperation_Behavior.call_getLeftExpressionOperation_1213877508946(op);
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_simple_property")) {
          if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
            SNode propertyDecl=SLinkOperations.getTarget(leftOperation,"property",false);
            if (DataTypeDeclaration_Behavior.call_isSimple_1220268671473(SLinkOperations.getTarget(propertyDecl,"dataType",false))) {
              isGood=true;
            }
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_enum_property")) {
          if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
            SNode propertyDecl=SLinkOperations.getTarget(leftOperation,"property",false);
            if (DataTypeDeclaration_Behavior.call_isEnum_1220268692373(SLinkOperations.getTarget(propertyDecl,"dataType",false))) {
              isGood=true;
            }
          }
        }
        if (SConceptPropertyOperations.getBoolean(op,"applicable_to_concept_property")) {
          if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(leftOperation),"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess")) {
            isGood=true;
          }
        }
        if (!(isGood)) {
          TypeChecker.getInstance().reportTypeError(op,"operation is not applicable to " + TypeChecker.getInstance().getEquationManager().getRepresentator(LeftType),"jetbrains.mps.bootstrap.smodelLanguage.helgins","1186067417054");
        }
      }
    }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins@9_0","1186065634833");
  }
}
