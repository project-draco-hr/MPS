{
  SNode module=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module");
  List<SNode> deps=ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(module,"dependencies",true));
  Map<String,SNode> ndeps=MapSequence.fromMap(new HashMap<String,SNode>());
  Set<String> extendedLanguages=SetSequence.fromSet(new HashSet<String>());
  Set<String> usedLanguages=SetSequence.fromSet(new HashSet<String>());
  for (  SNode originalDep : deps) {
    SNode dep=(SNodeOperations.isInstanceOf(originalDep,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency") ? SLinkOperations.getTarget(SNodeOperations.cast(originalDep,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"),"dependency",true) : originalDep);
    if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule")) {
      SNode depOnModule=SNodeOperations.cast(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule");
      String uuid=SPropertyOperations.getString(SLinkOperations.getTarget(depOnModule,"module",false),"uuid");
      if (MapSequence.fromMap(ndeps).containsKey(uuid)) {
        SPropertyOperations.set(MapSequence.fromMap(ndeps).get(uuid),"reexport","" + (SPropertyOperations.getBoolean(MapSequence.fromMap(ndeps).get(uuid),"reexport") || SPropertyOperations.getBoolean(depOnModule,"reexport")));
        SNodeOperations.deleteNode(originalDep);
        continue;
      }
      MapSequence.fromMap(ndeps).put(uuid,depOnModule);
    }
 else     if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage")) {
      SNode extLang=SNodeOperations.cast(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage");
      String uuid=SPropertyOperations.getString(SLinkOperations.getTarget(extLang,"language",false),"uuid");
      if (SetSequence.fromSet(extendedLanguages).contains(uuid)) {
        SNodeOperations.deleteNode(originalDep);
        continue;
      }
      SetSequence.fromSet(extendedLanguages).addElement(uuid);
    }
 else     if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage")) {
      SNode extLang=SNodeOperations.cast(dep,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage");
      String uuid=SPropertyOperations.getString(SLinkOperations.getTarget(extLang,"language",false),"uuid");
      if (SetSequence.fromSet(usedLanguages).contains(uuid)) {
        SNodeOperations.deleteNode(originalDep);
        continue;
      }
      SetSequence.fromSet(usedLanguages).addElement(uuid);
    }
  }
  for (  SNode dep : ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(module,"dependencies",true))) {
    if (SNodeOperations.isInstanceOf(dep,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency")) {
      SNodeOperations.replaceWithAnother(dep,SLinkOperations.getTarget(SNodeOperations.cast(dep,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"),"dependency",true));
    }
  }
}
