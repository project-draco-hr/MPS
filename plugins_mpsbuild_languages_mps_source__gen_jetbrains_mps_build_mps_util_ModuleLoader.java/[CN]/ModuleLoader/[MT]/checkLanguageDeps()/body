{
  LanguageDescriptor descriptor=((LanguageDescriptor)myModuleDescriptor);
  for (  ModuleReference lang : descriptor.getExtendedLanguages()) {
    final SNode resolved=SNodeOperations.as(visible.resolve(lang.getModuleFqName(),lang.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find extended language in dependencies: " + lang.getModuleFqName(),myModule);
      continue;
    }
    if (!(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language"),"dependencies",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"),"language",false) == resolved;
      }
    }
))) {
      report("extends language dependency should be extracted into build script: " + lang.toString(),myOriginalModule);
    }
  }
}
