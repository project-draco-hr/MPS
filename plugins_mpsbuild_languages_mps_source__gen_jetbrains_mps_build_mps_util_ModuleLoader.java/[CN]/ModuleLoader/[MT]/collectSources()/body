{
  SNode module=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module");
  List<String> res=new ArrayList<String>();
  for (  String sp : myModuleDescriptor.getSourcePaths()) {
    res.add(sp);
  }
  IFile genPath=ProjectPathUtil.getGeneratorOutputPath(myModuleFile,myModuleDescriptor);
  if (genPath != null) {
    res.add(genPath.getPath());
  }
  for (  String path : res) {
    SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
    if (p == null) {
      continue;
    }
    SNode javaSource=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource",null);
    SLinkOperations.setTarget(javaSource,"folder",SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildInputSingleFolder",null),true);
    SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(javaSource,"folder",true),"jetbrains.mps.build.structure.BuildInputSingleFolder"),"path",p,true);
    ListSequence.fromList(SLinkOperations.getTargets(module,"sources",true)).addElement(javaSource);
  }
  Iterable<ModelRoot> modelRoots=myModuleDescriptor.getModelRoots();
  if (myModuleDescriptor instanceof LanguageDescriptor) {
    Iterable<GeneratorDescriptor> generators=((LanguageDescriptor)myModuleDescriptor).getGenerators();
    modelRoots=Sequence.fromIterable(modelRoots).concat(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor,ModelRoot>(){
      public Iterable<ModelRoot> translate(      GeneratorDescriptor it){
        return it.getModelRoots();
      }
    }
));
  }
  for (  ModelRoot modelRoot : modelRoots) {
    if (modelRoot.getManager() != null) {
      continue;
    }
    String path=modelRoot.getPath();
    SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
    if (p == null) {
      continue;
    }
    SNode mroot=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot",null);
    SLinkOperations.setTarget(mroot,"folder",p,true);
    ListSequence.fromList(SLinkOperations.getTargets(module,"sources",true)).addElement(mroot);
  }
}
