{
  List<String> result=ListSequence.fromList(new ArrayList<String>());
  for (  SNode memberType : ListSequence.fromList(Arrays.asList(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")))) {
    Scope scope=((Scope)BehaviorManager.getInstance().invoke(Object.class,classifier,"virtual_getMembers_2201875424515824604",new Class[]{SNode.class,SNode.class},memberType));
    for (    SNode member : scope.getAvailableElements(null)) {
      if (!(SNodeOperations.isInstanceOf(member,"jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
        ListSequence.fromList(result).addElement("Not ClassifierMember member: " + member);
      }
 else {
        ListSequence.fromList(result).addElement(((((Boolean)BehaviorManager.getInstance().invoke(Boolean.class,SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"virtual_isStatic_8986964027630462944",new Class[]{SNode.class})) ? "static " : "")) + getSignature(member,classifier));
      }
    }
  }
  return result;
}
