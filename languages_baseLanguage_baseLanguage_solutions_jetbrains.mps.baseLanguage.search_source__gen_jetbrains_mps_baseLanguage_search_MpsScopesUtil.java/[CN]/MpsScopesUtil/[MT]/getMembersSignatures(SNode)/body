{
  List<String> result=ListSequence.fromList(new ArrayList<String>());
  for (  SNode member : ((Iterable<SNode>)BHReflection.invoke(((SNode)BHReflection.invoke(classifier,SMethodTrimmedId.create("getThisType",null,"6r77ob2UWbY"))),SMethodTrimmedId.create("getMembers",MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x66c71d82c2eb7f7eL,"jetbrains.mps.baseLanguage.structure.IClassifierType"),"6r77ob2V1Fr")))) {
    if (!(SNodeOperations.isInstanceOf(member,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember")))) {
      ListSequence.fromList(result).addElement("Not ClassifierMember member: " + member);
    }
 else {
      ListSequence.fromList(result).addElement(((((boolean)(Boolean)BHReflection.invoke(SNodeOperations.cast(member,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember")),SMethodTrimmedId.create("isStatic",null,"7MS72Gc8avw"))) ? "static " : "")) + getSignature(member,classifier));
    }
  }
  return result;
}
