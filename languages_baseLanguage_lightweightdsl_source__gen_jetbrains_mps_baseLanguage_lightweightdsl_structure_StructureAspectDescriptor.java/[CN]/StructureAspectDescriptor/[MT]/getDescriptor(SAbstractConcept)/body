{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0cb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAutoInitDSLClass;
      }
    break;
case 1:
  if (true) {
    return myConceptBooleanPropertyInstance;
  }
break;
case 2:
if (true) {
return myConceptCustomMemberDescriptor;
}
break;
case 3:
if (true) {
return myConceptDSLAnnotation;
}
break;
case 4:
if (true) {
return myConceptDSLClassMember;
}
break;
case 5:
if (true) {
return myConceptDSLDescriptor;
}
break;
case 6:
if (true) {
return myConceptDependentTypeDescriptor;
}
break;
case 7:
if (true) {
return myConceptDependentTypeInstance;
}
break;
case 8:
if (true) {
return myConceptEmptyMemberDescriptor;
}
break;
case 9:
if (true) {
return myConceptGenerateModifier;
}
break;
case 10:
if (true) {
return myConceptIntegerPropertyInstance;
}
break;
case 11:
if (true) {
return myConceptMemberInstance;
}
break;
case 12:
if (true) {
return myConceptMemberModifier;
}
break;
case 13:
if (true) {
return myConceptMemberPlaceholder;
}
break;
case 14:
if (true) {
return myConceptMethodDescriptor;
}
break;
case 15:
if (true) {
return myConceptMethodInstance;
}
break;
case 16:
if (true) {
return myConceptMethodParameterInstance;
}
break;
case 17:
if (true) {
return myConceptMultipleModifier;
}
break;
case 18:
if (true) {
return myConceptParameterDescriptor;
}
break;
case 19:
if (true) {
return myConceptPlaceholderModifier;
}
break;
case 20:
if (true) {
return myConceptPropertyDescriptor;
}
break;
case 21:
if (true) {
return myConceptPropertyInstance;
}
break;
case 22:
if (true) {
return myConceptRequiredModifier;
}
break;
case 23:
if (true) {
return myConceptStringPropertyInstance;
}
break;
default :
}
}
return null;
}
