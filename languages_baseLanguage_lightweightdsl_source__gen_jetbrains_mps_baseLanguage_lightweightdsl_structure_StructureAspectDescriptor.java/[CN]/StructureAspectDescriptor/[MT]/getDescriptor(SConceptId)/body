{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AutoInitDSLClass:
    return myConceptAutoInitDSLClass;
case LanguageConceptSwitch.BooleanPropertyInstance:
  return myConceptBooleanPropertyInstance;
case LanguageConceptSwitch.CustomMemberDescriptor:
return myConceptCustomMemberDescriptor;
case LanguageConceptSwitch.DSLAnnotation:
return myConceptDSLAnnotation;
case LanguageConceptSwitch.DSLClassMember:
return myConceptDSLClassMember;
case LanguageConceptSwitch.DSLDescriptor:
return myConceptDSLDescriptor;
case LanguageConceptSwitch.DependentTypeDescriptor:
return myConceptDependentTypeDescriptor;
case LanguageConceptSwitch.DependentTypeInstance:
return myConceptDependentTypeInstance;
case LanguageConceptSwitch.EmptyMemberDescriptor:
return myConceptEmptyMemberDescriptor;
case LanguageConceptSwitch.GenerateModifier:
return myConceptGenerateModifier;
case LanguageConceptSwitch.IntegerPropertyInstance:
return myConceptIntegerPropertyInstance;
case LanguageConceptSwitch.MemberInstance:
return myConceptMemberInstance;
case LanguageConceptSwitch.MemberModifier:
return myConceptMemberModifier;
case LanguageConceptSwitch.MemberPlaceholder:
return myConceptMemberPlaceholder;
case LanguageConceptSwitch.MethodDescriptor:
return myConceptMethodDescriptor;
case LanguageConceptSwitch.MethodInstance:
return myConceptMethodInstance;
case LanguageConceptSwitch.MethodParameterInstance:
return myConceptMethodParameterInstance;
case LanguageConceptSwitch.MultipleModifier:
return myConceptMultipleModifier;
case LanguageConceptSwitch.ParameterDescriptor:
return myConceptParameterDescriptor;
case LanguageConceptSwitch.PlaceholderModifier:
return myConceptPlaceholderModifier;
case LanguageConceptSwitch.PropertyDescriptor:
return myConceptPropertyDescriptor;
case LanguageConceptSwitch.PropertyInstance:
return myConceptPropertyInstance;
case LanguageConceptSwitch.RequiredModifier:
return myConceptRequiredModifier;
case LanguageConceptSwitch.StringPropertyInstance:
return myConceptStringPropertyInstance;
default :
return null;
}
}
