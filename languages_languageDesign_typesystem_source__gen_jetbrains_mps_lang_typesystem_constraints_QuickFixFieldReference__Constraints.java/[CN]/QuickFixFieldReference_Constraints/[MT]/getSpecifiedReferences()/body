{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x70489eee8479b55dL,0x70489eee8479b55eL,"quickFixField"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x70489eee8479b55dL,0x70489eee8479b55eL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=new ArrayList<SNode>();
          SNode quickFix=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11b36163865L,"jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix"),false,false);
          if ((quickFix != null)) {
            ListSequence.fromList(nodes).addSequence(ListSequence.fromList(SLinkOperations.getChildren(quickFix,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11b36163865L,0x70489eee847aabdfL,"quickFixField"))));
          }
          return nodes;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_rgybaw_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
