{
  GlobalSearchScope projectScope=project.getUserData(PROJECT_SCOPE_KEY);
  if (projectScope == null) {
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);
    if (projectRootManager == null) {
      projectScope=new EverythingGlobalScope(project){
        public boolean isSearchInLibraries(){
          return false;
        }
      }
;
    }
 else {
      projectScope=new GlobalSearchScope(project){
        private final ProjectFileIndex myFileIndex=projectRootManager.getFileIndex();
        @Patch public boolean contains(        VirtualFile file){
          if (myFileIndex.isInLibraryClasses(file))           return false;
          while (file.getParent() != null) {
            if (file.getParent().getName().startsWith(".")) {
              return false;
            }
 else {
              file=file.getParent();
            }
          }
          return true;
        }
        public int compare(        VirtualFile file1,        VirtualFile file2){
          return 0;
        }
        public boolean isSearchInModuleContent(        @NotNull Module aModule){
          return true;
        }
        public boolean isSearchInLibraries(){
          return false;
        }
        public String getDisplayName(){
          return PsiBundle.message("psi.search.scope.project");
        }
        public String toString(){
          return getDisplayName();
        }
        @Override public GlobalSearchScope uniteWith(        @NotNull GlobalSearchScope scope){
          if (scope == this || !scope.isSearchInLibraries())           return this;
          return super.uniteWith(scope);
        }
        @NotNull @Override public GlobalSearchScope intersectWith(        @NotNull GlobalSearchScope scope){
          if (scope == this)           return this;
          if (!scope.isSearchInLibraries())           return scope;
          return super.intersectWith(scope);
        }
      }
;
    }
    projectScope=((UserDataHolderEx)project).putUserDataIfAbsent(PROJECT_SCOPE_KEY,projectScope);
  }
  return projectScope;
}
