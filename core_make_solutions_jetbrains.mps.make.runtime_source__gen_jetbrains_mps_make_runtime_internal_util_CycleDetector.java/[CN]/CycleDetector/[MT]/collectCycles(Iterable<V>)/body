{
  final List<List<V>> cycles=ListSequence.fromList(new ArrayList<List<V>>());
  Sequence.fromIterable(vertices).sort(new ISelector<V,Comparable<?>>(){
    public Comparable<?> select(    V v){
      return MapSequence.fromMap(dataMap).get(v).endTime;
    }
  }
,false).visitAll(new IVisitor<V>(){
    public void visit(    V v){
      if (CycleDetector.Color.BLACK == MapSequence.fromMap(dataMap).get(v).color) {
        visitBackward(v);
        if (ListSequence.fromList(MapSequence.fromMap(dataMap).get(v).successors).isNotEmpty()) {
          List<V> cycle=ListSequence.fromListAndArray(new ArrayList<V>(),v);
          collectSuccessors(v,cycle);
          ListSequence.fromList(cycles).addElement(cycle);
        }
      }
    }
  }
);
  return cycles;
}
