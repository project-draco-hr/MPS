{
  final List<List<V>> cycles=ListSequence.fromList(new ArrayList<List<V>>());
  Sequence.fromIterable(ws).visitAll(new IVisitor<CycleDetector.Wrapper<V>>(){
    public void visit(    CycleDetector.Wrapper<V> w){
      w.clear();
    }
  }
);
  Sequence.fromIterable(ws).sort(new ISelector<CycleDetector.Wrapper<V>,Comparable<?>>(){
    public Comparable<?> select(    CycleDetector.Wrapper<V> w){
      return w.endTime;
    }
  }
,false).where(new IWhereFilter<CycleDetector.Wrapper<V>>(){
    public boolean accept(    CycleDetector.Wrapper<V> w){
      return !(w.entered);
    }
  }
).visitAll(new IVisitor<CycleDetector.Wrapper<V>>(){
    public void visit(    final CycleDetector.Wrapper<V> w){
      dfsVisit(w,new _FunctionTypes._void_P2_E0<CycleDetector.Wrapper<V>,_FunctionTypes._void_P0_E0>(){
        public void invoke(        CycleDetector.Wrapper<V> ww,        _FunctionTypes._void_P0_E0 cont){
          cont.invoke();
          w.successor(ww);
        }
      }
,backward);
      if (ListSequence.fromList(w.successors).isNotEmpty()) {
        ListSequence.fromList(cycles).addElement(collectSuccessors(w,ListSequence.fromListAndArray(new ArrayList<V>(),w.vertex)));
      }
    }
  }
);
  return cycles;
}
