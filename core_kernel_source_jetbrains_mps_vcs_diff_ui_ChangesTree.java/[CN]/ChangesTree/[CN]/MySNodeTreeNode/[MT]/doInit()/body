{
  this.removeAllChildren();
  SNode n=getSNode();
  if (n == null)   return;
  if (!n.getProperties().isEmpty()) {
    add(new PropertiesTreeNode(getOperationContext(),n));
  }
  if (!n.getReferences().isEmpty()) {
    add(new ReferencesTreeNode(getOperationContext(),n));
  }
  SNodeId id=n.getSNodeId();
  Set<SNode> children=new LinkedHashSet();
  SNode newNode=myNewModel.getNodeById(id);
  if (newNode != null) {
    children.addAll(newNode.getChildren());
  }
  SNode oldNode=myOldModel.getNodeById(id);
  if (oldNode != null) {
    for (    SNode node : oldNode.getChildren()) {
      if (myDeletedNodes.contains(node.getSNodeId())) {
        children.add(node);
      }
    }
  }
  Set<SNode> filteredChildren=CollectionUtil.filter(children,new Condition<SNode>(){
    public boolean met(    SNode object){
      return myChangedSubtree.contains(object.getSNodeId());
    }
  }
);
  for (  SNode childNode : filteredChildren) {
    SNodeTreeNode child=createChildTreeNode(childNode,childNode.getRole_(),getOperationContext());
    add(child);
  }
  DefaultTreeModel treeModel=(DefaultTreeModel)getTree().getModel();
  treeModel.nodeStructureChanged(this);
  myInitialized=true;
}
