{
  final Entry<K,V>[] table=_table;
  final int hash=key.hashCode();
  final int index=(hash & 0x7fffffff) % table.length;
  for (Entry<K,V> e=table[index]; e != null; e=e._hashNext) {
    final K entryKey;
    if (e.getKeyHash() == hash && ((entryKey=e.getKey()) == key || entryKey.equals(key))) {
      moveToTop(e);
      return e.setValue(value);
    }
  }
  final Entry<K,V> e=new Entry<K,V>(key,value);
  e._hashNext=table[index];
  table[index]=e;
  final Entry<K,V> top=_top;
  e.setNext(top);
  if (top != null) {
    top.setPrevious(e);
  }
 else {
    _back=e;
  }
  _top=e;
  _size=_size + 1;
  if (removeEldestEntry(_back)) {
    remove(_back.getKey());
  }
 else   if (_size > _capacity) {
    rehash((int)(_capacity * HashUtil.CAPACITY_MULTIPLE));
  }
  return null;
}
