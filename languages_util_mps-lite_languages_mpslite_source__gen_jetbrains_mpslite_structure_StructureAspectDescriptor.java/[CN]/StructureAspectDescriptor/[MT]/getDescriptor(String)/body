{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.AbstractConceptReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("conceptDeclaration").abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.BinaryOperationConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").properties("leftTargetRole","rightTargetRole","sign").children(new String[]{"leftTarget","rightTarget","expressionConcept"},new boolean[]{false,false,false}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.BlockBodyPart").super_("jetbrains.mpslite.structure.ChildPart").parents("jetbrains.mpslite.structure.ChildPart").alias("[BODY]","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.BlockConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").children(new String[]{"concreteSyntax"},new boolean[]{false}).create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.BlockReference").super_("jetbrains.mpslite.structure.MPSLiteConceptReference").parents("jetbrains.mpslite.structure.MPSLiteConceptReference").references("blockConcept").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ChildPart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").properties("separator","multiple","vertical").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ConceptContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"statementConcept","expressionConcept","mpsLiteConcept"},new boolean[]{false,false,true}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ConcreteChildPart").super_("jetbrains.mpslite.structure.ChildPart").parents("jetbrains.mpslite.structure.ChildPart","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"conceptReference"},new boolean[]{false}).alias("[ Child.. ]","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ConcretePropertyPart").super_("jetbrains.mpslite.structure.PropertyPart").parents("jetbrains.mpslite.structure.PropertyPart","jetbrains.mps.lang.core.structure.INamedConcept").properties("propertyType").alias("{ property.. }","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ConcreteReferencePart").super_("jetbrains.mpslite.structure.ReferencePart").parents("jetbrains.mpslite.structure.ReferencePart","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"conceptReference"},new boolean[]{false}).alias("< Referent.. >","reference declaration").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ConstantLinePart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").properties("text").alias("constant text","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ExpressionConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.FeatureAccessConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.IMPSLiteConcept").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").properties("root","abstract").children(new String[]{"extends"},new boolean[]{false}).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.IndentLinePart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").alias("--->","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.Line").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"linePart"},new boolean[]{true}).create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.LineList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"line"},new boolean[]{true}).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.LinePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.MPSLiteConceptDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").children(new String[]{"lineList"},new boolean[]{false}).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.MPSLiteConceptReference").super_("jetbrains.mpslite.structure.AbstractConceptReference").parents("jetbrains.mpslite.structure.AbstractConceptReference").references("mpsLiteConceptDeclaration").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.NamePropertyNamePart").super_("jetbrains.mpslite.structure.PropertyPart").parents("jetbrains.mpslite.structure.PropertyPart").alias("{NAME}","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.OptionalPart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").children(new String[]{"part"},new boolean[]{true}).alias("optional","").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.PropertyPart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").abstract_().create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.ReferencePart").super_("jetbrains.mpslite.structure.LinePart").parents("jetbrains.mpslite.structure.LinePart").properties("optional").abstract_().create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.RegularConceptReference").super_("jetbrains.mpslite.structure.AbstractConceptReference").parents("jetbrains.mpslite.structure.AbstractConceptReference").references("regularConceptDeclaration").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.StatementConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.TypePart").super_("jetbrains.mpslite.structure.ChildPart").parents("jetbrains.mpslite.structure.ChildPart").alias("[TYPE]","").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mpslite.structure.VariableConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept").properties("namePropertyName","typeRole").children(new String[]{"typeConcept","reference","concreteSyntax","scopeBlock"},new boolean[]{false,false,false,true}).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
