{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mpslite.structure.AbstractConceptReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"conceptDeclaration"},new String[]{},new boolean[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mpslite.structure.BinaryOperationConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{"leftTargetRole","rightTargetRole","sign"},new String[]{},new String[]{"leftTarget","rightTarget","expressionConcept"},new boolean[]{false,false,false});
case 2:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.BlockBodyPart","jetbrains.mpslite.structure.ChildPart",false,new String[]{"jetbrains.mpslite.structure.ChildPart"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.BlockConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{},new String[]{},new String[]{"concreteSyntax"},new boolean[]{false});
case 4:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.BlockReference","jetbrains.mpslite.structure.MPSLiteConceptReference",false,new String[]{"jetbrains.mpslite.structure.MPSLiteConceptReference"},new String[]{},new String[]{"blockConcept"},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ChildPart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{"separator","multiple","vertical"},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ConceptContainer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"statementConcept","expressionConcept","mpsLiteConcept"},new boolean[]{false,false,true});
case 7:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ConcreteChildPart","jetbrains.mpslite.structure.ChildPart",false,new String[]{"jetbrains.mpslite.structure.ChildPart","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"conceptReference"},new boolean[]{false});
case 8:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ConcretePropertyPart","jetbrains.mpslite.structure.PropertyPart",false,new String[]{"jetbrains.mpslite.structure.PropertyPart","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"propertyType"},new String[]{},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ConcreteReferencePart","jetbrains.mpslite.structure.ReferencePart",false,new String[]{"jetbrains.mpslite.structure.ReferencePart","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"conceptReference"},new boolean[]{false});
case 10:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ConstantLinePart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ExpressionConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.FeatureAccessConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.IMPSLiteConcept",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"root","abstract"},new String[]{},new String[]{"extends"},new boolean[]{false});
case 14:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.IndentLinePart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.Line","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"linePart"},new boolean[]{true});
case 16:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.LineList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"line"},new boolean[]{true});
case 17:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.LinePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.MPSLiteConceptDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{},new String[]{},new String[]{"lineList"},new boolean[]{false});
case 19:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.MPSLiteConceptReference","jetbrains.mpslite.structure.AbstractConceptReference",false,new String[]{"jetbrains.mpslite.structure.AbstractConceptReference"},new String[]{},new String[]{"mpsLiteConceptDeclaration"},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.NamePropertyNamePart","jetbrains.mpslite.structure.PropertyPart",false,new String[]{"jetbrains.mpslite.structure.PropertyPart"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.OptionalPart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{},new String[]{},new String[]{"part"},new boolean[]{true});
case 22:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.PropertyPart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.ReferencePart","jetbrains.mpslite.structure.LinePart",false,new String[]{"jetbrains.mpslite.structure.LinePart"},new String[]{"optional"},new String[]{},new String[]{},new boolean[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.RegularConceptReference","jetbrains.mpslite.structure.AbstractConceptReference",false,new String[]{"jetbrains.mpslite.structure.AbstractConceptReference"},new String[]{},new String[]{"regularConceptDeclaration"},new String[]{},new boolean[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.StatementConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.TypePart","jetbrains.mpslite.structure.ChildPart",false,new String[]{"jetbrains.mpslite.structure.ChildPart"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mpslite.structure.VariableConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mpslite.structure.IMPSLiteConcept"},new String[]{"namePropertyName","typeRole"},new String[]{},new String[]{"typeConcept","reference","concreteSyntax","scopeBlock"},new boolean[]{false,false,false,true});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
