{
  List<ChangeEditorMessage> messages=ListSequence.fromList(new LinkedList<ChangeEditorMessage>());
  SNodeId id;
  MessageTarget messageTarget;
  if (change instanceof AddRootChange || change instanceof DeleteRootChange) {
    id=change.getRootId();
    messageTarget=new NodeMessageTarget();
  }
 else   if (change instanceof SetPropertyChange) {
    id=((NodeChange)change).getAffectedNodeId();
    messageTarget=new PropertyMessageTarget(((SetPropertyChange)change).getPropertyName());
  }
 else   if (change instanceof SetReferenceChange) {
    id=((NodeChange)change).getAffectedNodeId();
    messageTarget=new ReferenceMessageTarget(((SetReferenceChange)change).getRole());
  }
 else   if (change instanceof NodeGroupChange) {
    NodeGroupChange ngc=((NodeGroupChange)change);
    SModel changeModel=change.getChangeSet().getNewModel();
    boolean reversed=changeModel != editedModel;
    if (reversed) {
      changeModel=change.getChangeSet().getOldModel();
    }
    String role=ngc.getRole();
    SNodeId parentId=ngc.getParentNodeId();
    SNode parentNode=changeModel.getNodeById(parentId);
    if (parentNode == null) {
      return null;
    }
    List<? extends SNode> changeChildren=IterableUtil.asList(parentNode.getChildren(role));
    int changeBegin=(reversed ? ngc.getBegin() : ngc.getResultBegin());
    int changeEnd=(reversed ? ngc.getEnd() : ngc.getResultEnd());
    SNodeId beginId=(changeBegin < changeChildren.size() ? changeChildren.get(changeBegin).getNodeId() : null);
    SNodeId endId=(changeEnd < changeChildren.size() ? changeChildren.get(changeEnd).getNodeId() : null);
    int currentChildrenSize=IterableUtil.asCollection(parentNode.getChildren(role)).size();
    int beginIndex=(beginId == null ? currentChildrenSize : SNodeOperations.getIndexInParent(((SNode)editedModel.getNodeById(beginId))));
    int endIndex=(endId == null ? currentChildrenSize : SNodeOperations.getIndexInParent(((SNode)editedModel.getNodeById(endId))));
    if (!(0 <= beginIndex && beginIndex <= endIndex && endIndex <= currentChildrenSize)) {
      return null;
    }
    if (beginIndex == endIndex) {
      id=parentId;
      messageTarget=new DeletedNodeMessageTarget(role,beginIndex);
    }
 else {
      List<jetbrains.mps.smodel.SNode> editedChildren=IterableUtil.asList(editedModel.getNodeById(parentId).getChildren(role));
      for (int i=beginIndex; i < endIndex; i++) {
        ListSequence.fromList(messages).addElement(new ChangeEditorMessage(editedChildren.get(i),new NodeMessageTarget(),owner,change,conflictChecker,highlighted));
      }
      return messages;
    }
  }
 else {
    return null;
  }
  SNode node=editedModel.getNodeById(id);
  ListSequence.fromList(messages).addElement(new ChangeEditorMessage(node,messageTarget,owner,change,conflictChecker,highlighted));
  return messages;
}
