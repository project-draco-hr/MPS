{
  Editor editor=e.getData(DataKeys.EDITOR);
  if (editor == null)   return;
  final Project project=e.getData(DataKeys.PROJECT);
  if (project == null)   return;
  int offset=editor.getCaretModel().getOffset();
  PsiFile file=PsiDocumentManager.getInstance(project).getCachedPsiFile(editor.getDocument());
  if (file == null)   return;
  PsiElement element=file.findElementAt(offset);
  final PsiClass pc=getPsiClass(element);
  if (pc == null)   return;
  File baseDir=getProjectBaseDir(project);
  String ptns=showInputDialog(project,"I want cookie! Give me the cookie!","Cookie monster",Icons.JUNIT_TEST_CLASS_ICON);
  if (ptns == null)   return;
  Map<File,Set<String>> includePathsMap=new HashMap<File,Set<String>>();
  Map<File,Set<String>> excludePathsMap=new HashMap<File,Set<String>>();
  final List<String> errors=new ArrayList<String>();
  for (  String ptn : ptns.split("\\n")) {
    FilePattern fp;
    try {
      fp=FilePattern.fromString(ptn);
    }
 catch (    FilePatternParseException ex) {
      errors.add("Bad cookie: \"" + ptn + "\"");
      continue;
    }
    ModulesSourcePath msp=new ModulesSourcePath(fp.modulePtn,project);
    PatternFileSearcher pfs=new PatternFileSearcher(fp.filePtn,Collections.unmodifiableList(msp.getSourcePath()));
    for (    Pair<File,String> pear : pfs.getRelativePaths()) {
      Map<File,Set<String>> pathsMap=fp.include ? includePathsMap : excludePathsMap;
      Set<String> paths=pathsMap.get(pear.getFirst());
      if (paths == null) {
        paths=new HashSet<String>();
        pathsMap.put(pear.getFirst(),paths);
      }
      paths.add(pear.getSecond());
    }
  }
  final Set<String> suiteClasses=new TreeSet<String>();
  for (  Map.Entry<File,Set<String>> en : includePathsMap.entrySet()) {
    Set<String> include=en.getValue();
    Set<String> exclude=excludePathsMap.get(en.getKey());
    if (exclude != null) {
      include.removeAll(exclude);
    }
    for (    String p : include) {
      suiteClasses.add(filePathToJavaClass(p));
    }
  }
  final WriteAction<String> action=new WriteAction<String>(){
    @Override protected void run(    Result<String> stringResult) throws Throwable {
      stringResult.setResult(null);
      StringBuilder sb=new StringBuilder("@SuiteClassSymbols({");
      String sep="";
      for (      String sc : suiteClasses) {
        sb.append(sep).append("\"").append(sc).append("\"");
        sep=",\n";
      }
      sb.append("})");
      try {
        PsiJavaParserFacade javaParserFacade=JavaPsiFacade.getInstance(project).getParserFacade();
        PsiAnnotation newann=javaParserFacade.createAnnotationFromText(sb.toString(),pc.getParent());
        PsiAnnotation oldann=null;
        for (        PsiAnnotation ann : pc.getModifierList().getAnnotations()) {
          if (String.valueOf(ann.getQualifiedName()).contains("SuiteClassSymbols")) {
            oldann=ann;
            break;
          }
        }
        if (oldann != null) {
          oldann.replace(newann);
        }
 else {
          pc.getParent().addBefore(newann,pc);
        }
      }
 catch (      Exception ex) {
        stringResult.setResult(ex.toString());
      }
    }
  }
;
  if (!suiteClasses.isEmpty()) {
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      public void run(){
        String error=action.execute().getResultObject();
        if (error != null) {
          errors.add(error);
        }
      }
    }
,e.getPresentation().getText(),null);
  }
 else {
    errors.add("No cookie, no work. :-|");
  }
  if (!errors.isEmpty()) {
    StringBuilder sb=new StringBuilder("");
    String sep="";
    for (    String er : errors) {
      sb.append(sep).append(er);
      sep="\n";
    }
    Messages.showErrorDialog(project,sb.toString(),"I have a bad feeling about this");
  }
}
