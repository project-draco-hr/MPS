{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.logging.structure.LogStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c8959057f(jetbrains.mps.baseLanguage.logging.structure)","Severity"));
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.<INodeSubstituteAction>fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode logStatement=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.logging.structure.LogStatement",null);
              SPropertyOperations.set(logStatement,"severity",SEnumOperations.getEnumMemberValue((item)));
              SNodeFactoryOperations.setNewChild(logStatement,"logExpression","jetbrains.mps.baseLanguage.structure.StringLiteral");
              SNode catchClause=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.CatchClause",true,false);
              if ((catchClause != null) && (SLinkOperations.getTarget(catchClause,"throwable",true) != null)) {
                SPropertyOperations.set(logStatement,"hasException","" + (true));
                SNode lvr=SNodeFactoryOperations.setNewChild(logStatement,"exception","jetbrains.mps.baseLanguage.structure.LocalVariableReference");
                SLinkOperations.setTarget(lvr,"variableDeclaration",SLinkOperations.getTarget(catchClause,"throwable",true),false);
              }
              return logStatement;
            }
            public String getMatchingText(            String pattern){
              return SEnumOperations.getEnumMemberValue((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "Log statement";
            }
          }
);
        }
      }
    }
  }
  return result;
}
