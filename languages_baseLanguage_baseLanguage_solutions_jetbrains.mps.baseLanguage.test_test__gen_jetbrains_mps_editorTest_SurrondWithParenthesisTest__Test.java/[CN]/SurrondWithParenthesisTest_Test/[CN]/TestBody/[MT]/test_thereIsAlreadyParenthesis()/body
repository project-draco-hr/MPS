{
  this.addNodeById("3852894662483077200");
  this.addNodeById("3852894662483077206");
  this.addNodeById("3852894662483228699");
  this.addNodeById("3852894662483230132");
  this.addNodeById("3852894662483240397");
  this.addNodeById("3852894662483240422");
  ParenthesisUtil.createParenthesis(SNodeOperations.cast(this.getNodeById("3852894662483230127"),"jetbrains.mps.baseLanguage.structure.IntegerConstant"),true);
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("3852894662483230135"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement") + "' and '"+ SNodeOperations.cast(this.getNodeById("3852894662483230126"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("3852894662483230135"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("3852894662483230126"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))));
}
