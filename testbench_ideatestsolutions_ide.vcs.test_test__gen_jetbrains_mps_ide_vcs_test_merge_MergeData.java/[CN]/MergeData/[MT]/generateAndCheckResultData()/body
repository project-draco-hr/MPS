{
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(new LightModelEnvironmentInfoImpl());
  final SModel baseModel=PersistenceUtil.loadModel(myBaseModelString,"mps");
  final SModel mineModel=PersistenceUtil.loadModel(myMineModelString,"mps");
  final SModel repositoryModel=PersistenceUtil.loadModel(myRepositoryModelString,"mps");
  final Wrappers._T<MergeSession> session=new Wrappers._T<MergeSession>(null);
  final Wrappers._T<String> resultModelString=new Wrappers._T<String>(null);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      session.value=MergeSession.createMergeSession(baseModel,mineModel,repositoryModel);
      if (Sequence.fromIterable(session.value.getAllChanges()).all(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange c){
          return Sequence.fromIterable(session.value.getConflictedWith(c)).isEmpty();
        }
      }
)) {
        session.value.applyChanges(Sequence.fromIterable(session.value.getAllChanges()).toListSequence());
        resultModelString.value=ModelPersistence.modelToString(as_u0rai9_a0a0a2a1a0a0a0a8a71(session.value.getResultModel(),SModelBase.class).getSModelInternal());
      }
    }
  }
);
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(null);
  String changesMineString=dumpChangeSet(session.value.getMyChangeSet(),session.value);
  String changesRepositoryString=dumpChangeSet(session.value.getRepositoryChangeSet(),session.value);
  if (check("result model",myResultModelString,resultModelString.value) & check("my change list",myChangesMineString,changesMineString) & check("my repository list",myChangesRepositoryString,changesRepositoryString)) {
    return true;
  }
 else {
    myResultModelString=resultModelString.value;
    myChangesMineString=changesMineString;
    myChangesRepositoryString=changesRepositoryString;
    return false;
  }
}
