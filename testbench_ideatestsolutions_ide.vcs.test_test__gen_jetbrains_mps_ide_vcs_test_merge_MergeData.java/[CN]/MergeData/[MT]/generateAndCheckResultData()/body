{
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(new LightModelEnvironmentInfoImpl());
  SModel baseModel=PersistenceUtil.loadModel(myBaseModelString,"mps");
  SModel mineModel=PersistenceUtil.loadModel(myMineModelString,"mps");
  SModel repositoryModel=PersistenceUtil.loadModel(myRepositoryModelString,"mps");
  final MergeSession session=MergeSession.createMergeSession(baseModel,mineModel,repositoryModel);
  final Wrappers._T<String> resultModelString=new Wrappers._T<String>(null);
  if (Sequence.fromIterable(session.getAllChanges()).all(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange c){
      return Sequence.fromIterable(session.getConflictedWith(c)).isEmpty();
    }
  }
)) {
    ModelAccess.instance().runReadAction(new Computable<String>(){
      public String compute(){
        session.applyChanges(Sequence.fromIterable(session.getAllChanges()).toListSequence());
        return resultModelString.value=ModelPersistence.modelToString(as_u0rai9_a0a0a1a0a0a0a1a8a71(session.getResultModel(),SModelBase.class).getSModelInternal());
      }
    }
);
  }
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(null);
  String changesMineString=dumpChangeSet(session.getMyChangeSet(),session);
  String changesRepositoryString=dumpChangeSet(session.getRepositoryChangeSet(),session);
  if (check("result model",myResultModelString,resultModelString.value) & check("my change list",myChangesMineString,changesMineString) & check("my repository list",myChangesRepositoryString,changesRepositoryString)) {
    return true;
  }
 else {
    myResultModelString=resultModelString.value;
    myChangesMineString=changesMineString;
    myChangesRepositoryString=changesRepositoryString;
    return false;
  }
}
