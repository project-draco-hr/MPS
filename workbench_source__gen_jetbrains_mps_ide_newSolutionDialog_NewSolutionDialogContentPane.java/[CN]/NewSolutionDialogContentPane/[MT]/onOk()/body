{
  if (myThis.getSolutionPath().length() == 0) {
    myThis.getDialog().setErrorText("Enter solution directory");
    return;
  }
  if (myThis.getSolutionName().length() == 0) {
    myThis.getDialog().setErrorText("Enter solution name");
    return;
  }
  if (MPSModuleRepository.getInstance().getModuleByUID(myThis.getSolutionName()) != null) {
    myThis.getDialog().setErrorText("Duplicate solution name");
    return;
  }
  String descriptorPath=myThis.getSolutionPath() + File.separator + myThis.getSolutionName()+ MPSExtentions.DOT_SOLUTION;
  final File file=new File(descriptorPath);
  File dir=file.getParentFile();
  if (!(dir.isAbsolute())) {
    myThis.getDialog().setErrorText("Path should be absolute");
    return;
  }
  if (dir.exists() && dir.list().length != 0) {
    myThis.getDialog().setErrorText("The selected folder is not empty. Please select an empty folder to create solution");
    return;
  }
  if (file == null) {
    myThis.getDialog().setErrorText("Can't create " + file);
    return;
  }
  myThis.getDialog().dispose();
  ProgressManager.getInstance().run(new Task.Modal(myThis.getProject().getComponent(Project.class),"Creating",false){
    public void run(    @NotNull() ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          myThis.setResult(myThis.createNewSolution(myThis.getSolutionName(),FileSystem.getFile(file)));
        }
      }
);
    }
  }
);
}
