{
  if (SHOW_LOG > 0) {
    System.out.println("before: \n" + embeddedGraph);
  }
  Set<Edge> removed=SetSequence.<Edge>fromSet(new HashSet<Edge>());
  for (  Edge edge : ListSequence.<Edge>fromList(start.getEdges())) {
    if (SetSequence.<Node>fromSet(toBeAdded).contains(edge.getOpposite(start))) {
      SetSequence.fromSet(removed).addElement(edge);
    }
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(removed)) {
    embeddedGraph.getGraph().removeEdge(edge);
  }
  List<Edge> path=ShortestPath.getPath(embeddedGraph.getGraph(),toAdd,start,Edge.Direction.BOTH);
  int endIndex=0;
  Node cur=toAdd;
  while (SetSequence.<Node>fromSet(toBeAdded).contains(cur)) {
    cur=ListSequence.<Edge>fromList(path).getElement(endIndex).getOpposite(cur);
    endIndex++;
  }
  path=ListSequence.<Edge>fromList(path).subListSequence(0,endIndex);
  for (  Edge edge : SetSequence.<Edge>fromSet(removed)) {
    embeddedGraph.getGraph().addEdge(edge);
  }
  ListSequence.<Edge>fromList(path).insertElement(0,ListSequence.<Edge>fromList(SetSequence.<Edge>fromSet(removed).where(new IWhereFilter<Edge>(){
    public boolean accept(    Edge it){
      return it.getOpposite(start) == toAdd;
    }
  }
).toListSequence()).getElement(0));
  for (  Edge edge : ListSequence.<Edge>fromList(path)) {
    for (    Node node : ListSequence.<Node>fromList(edge.getAdjacentNodes())) {
      SetSequence.fromSet(toBeAdded).removeElement(node);
    }
  }
  if (SHOW_LOG > 0) {
    System.out.println("find path: " + path);
  }
  connect(embeddedGraph,path,start,cur);
}
