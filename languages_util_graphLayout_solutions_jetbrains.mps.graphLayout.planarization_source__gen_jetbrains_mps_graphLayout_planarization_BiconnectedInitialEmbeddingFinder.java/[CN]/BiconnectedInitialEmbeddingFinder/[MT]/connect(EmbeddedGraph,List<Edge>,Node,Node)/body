{
  Graph graph=embeddedGraph.getGraph();
  DualGraph dualGraph=new DualGraph(embeddedGraph);
  Node dualStart=dualGraph.addRealNode(start);
  Node dualEnd=dualGraph.addRealNode(end);
  List<Edge> dualPath=ShortestPath.getPath(dualGraph,dualStart,dualEnd,Edge.Direction.BOTH);
  List<Node> nodePath=ListSequence.fromList(new ArrayList<Node>());
  List<Face> facePath=ListSequence.fromList(new ArrayList<Face>());
  ListSequence.fromList(nodePath).addElement(start);
  Node cur=dualStart;
  for (  Edge edge : ListSequence.fromList(dualPath)) {
    Edge realEdge=MapSequence.fromMap(dualGraph.getEdgesMap()).get(edge);
    if (embeddedGraph.getAdjacentFaces(realEdge) != null) {
      ListSequence.fromList(nodePath).addElement(embeddedGraph.splitEdge(MapSequence.fromMap(dualGraph.getEdgesMap()).get(edge)));
    }
    cur=edge.getOpposite(cur);
    Face curFace=MapSequence.fromMap(dualGraph.getFacesMap()).get(cur);
    if (curFace != null) {
      ListSequence.fromList(facePath).addElement(curFace);
    }
  }
  ListSequence.fromList(nodePath).addElement(end);
  Edge deletedEdge=null;
  List<Edge> newEdges=ListSequence.fromList(new ArrayList<Edge>());
  for (int i=0; i < ListSequence.fromList(nodePath).count() - 1; i++) {
    Node curStart=ListSequence.fromList(nodePath).getElement(i);
    Node curEnd=ListSequence.fromList(nodePath).getElement(i + 1);
    List<Edge> tempPath=ListSequence.fromList(new ArrayList<Edge>());
    if (i == 0) {
      if (end == ListSequence.fromList(nodePath).getElement(i + 1)) {
        ListSequence.fromList(tempPath).addSequence(ListSequence.fromList(path));
      }
 else {
        Edge lastEdge=ListSequence.fromList(path).removeLastElement();
        graph.removeEdge(lastEdge);
        deletedEdge=lastEdge;
        ListSequence.fromList(tempPath).addSequence(ListSequence.fromList(path));
        Edge newEdge;
        newEdge=graph.connect(lastEdge.getOpposite(end),curEnd);
        ListSequence.fromList(newEdges).addElement(newEdge);
        ListSequence.fromList(tempPath).addElement(newEdge);
      }
    }
 else {
      Edge newEdge;
      newEdge=graph.connect(curStart,curEnd);
      ListSequence.fromList(newEdges).addElement(newEdge);
      ListSequence.fromList(tempPath).addElement(newEdge);
    }
    embeddedGraph.splitFace(ListSequence.fromList(facePath).getElement(i),tempPath,curStart,curEnd);
    if (deletedEdge != null) {
      GraphModificationEvent splitEvent=new GraphModificationEvent(GraphModificationEvent.Type.EDGE_SPLITTED,deletedEdge,newEdges);
      graph.getModificationProcessor().fire(splitEvent);
    }
  }
}
