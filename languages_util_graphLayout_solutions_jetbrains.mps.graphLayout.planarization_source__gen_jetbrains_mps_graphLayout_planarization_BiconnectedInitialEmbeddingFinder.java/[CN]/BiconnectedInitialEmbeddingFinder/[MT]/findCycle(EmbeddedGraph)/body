{
  Set<Node> visited=SetSequence.<Node>fromSet(new HashSet<Node>());
  List<Dart> darts=ListSequence.<Dart>fromList(new ArrayList<Dart>());
  Graph graph=embeddedGraph.getGraph();
  Node cur=graph.getNode(0);
  Edge prevEdge=null;
  while (!(SetSequence.<Node>fromSet(visited).contains(cur))) {
    SetSequence.fromSet(visited).addElement(cur);
    Edge next=ListSequence.<Edge>fromList(cur.getEdges()).getElement(0);
    if (next == prevEdge) {
      next=ListSequence.<Edge>fromList(cur.getEdges()).getElement(1);
    }
    ListSequence.<Dart>fromList(darts).addElement(new Dart(next,cur));
    cur=next.getOpposite(cur);
    prevEdge=next;
  }
  List<Dart> path=ListSequence.<Dart>fromList(new ArrayList<Dart>());
  boolean inCycle=false;
  for (  Dart dart : ListSequence.<Dart>fromList(darts)) {
    if (dart.getSource() == cur) {
      inCycle=true;
    }
    if (inCycle) {
      ListSequence.<Dart>fromList(path).addElement(dart);
    }
  }
  Face innerFace=new Face(graph);
  for (  Dart dart : ListSequence.<Dart>fromList(path)) {
    innerFace.addLast(dart);
  }
  Face outerFace=new Face(graph);
  for (  Dart dart : ListSequence.<Dart>fromList(path).reversedList()) {
    outerFace.addLast(new Dart(dart.getEdge(),dart.getTarget()));
  }
  embeddedGraph.addFace(innerFace);
  embeddedGraph.addFace(outerFace);
  embeddedGraph.setOuterFace(outerFace);
}
