{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("d7a92d38-f7db-40d0-8431-763b0c3c9f20"),"jetbrains.mps.lang.intentions")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_BaseIntentionDeclaration;
case 1:
  return props_ChildFilterBlock;
case 2:
return props_ChildFilterFunction;
case 3:
return props_ConceptFunctionParameter_childNode;
case 4:
return props_ConceptFunctionParameter_node;
case 5:
return props_DescriptionBlock;
case 6:
return props_ErrorIntentionPriority;
case 7:
return props_ExecuteBlock;
case 8:
return props_ForConceptMethodParameter;
case 9:
return props_Intention;
case 10:
return props_IntentionDeclaration;
case 11:
return props_IntentionParameter;
case 12:
return props_IntentionPriority;
case 13:
return props_IsApplicableBlock;
case 14:
return props_Parameter;
case 15:
return props_ParameterizedDescriptionBlock;
case 16:
return props_ParameterizedExecuteBlock;
case 17:
return props_ParameterizedIntentionDeclaration;
case 18:
return props_QueryBlock;
case 19:
return props_SurroundWithIntentionDeclaration;
}
throw new IllegalStateException();
}
