{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0v.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BaseIntentionDeclaration;
      }
    break;
case 1:
  if (true) {
    return props_ChildFilterBlock;
  }
break;
case 2:
if (true) {
return props_ChildFilterFunction;
}
break;
case 3:
if (true) {
return props_ConceptFunctionParameter_childNode;
}
break;
case 4:
if (true) {
return props_ConceptFunctionParameter_node;
}
break;
case 5:
if (true) {
return props_DescriptionBlock;
}
break;
case 6:
if (true) {
return props_ErrorIntentionPriority;
}
break;
case 7:
if (true) {
return props_ExecuteBlock;
}
break;
case 8:
if (true) {
return props_ForConceptMethodParameter;
}
break;
case 9:
if (true) {
return props_Intention;
}
break;
case 10:
if (true) {
return props_IntentionDeclaration;
}
break;
case 11:
if (true) {
return props_IntentionParameter;
}
break;
case 12:
if (true) {
return props_IntentionPriority;
}
break;
case 13:
if (true) {
return props_IsApplicableBlock;
}
break;
case 14:
if (true) {
return props_Parameter;
}
break;
case 15:
if (true) {
return props_ParameterizedDescriptionBlock;
}
break;
case 16:
if (true) {
return props_ParameterizedExecuteBlock;
}
break;
case 17:
if (true) {
return props_ParameterizedIntentionDeclaration;
}
break;
case 18:
if (true) {
return props_QueryBlock;
}
break;
case 19:
if (true) {
return props_SurroundWithIntentionDeclaration;
}
break;
default :
}
}
throw new IllegalStateException();
}
