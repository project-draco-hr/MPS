{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("definition",new BaseReferenceConstraintsDescriptor("definition",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_b5nlto_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            final CompositeScope scope=new CompositeScope(SimpleRoleScope.forNamedElements(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Script","definitions")),SimpleRoleScope.forNamedElements(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Library",true,false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Library","definitions")),new ListScope(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"body",true),"commands",true)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition");
              }
            }
)){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,"jetbrains.mps.lang.core.structure.INamedConcept"),"name");
              }
            }
);
            ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"jetbrains.mps.samples.Kaja.structure.Require",false,new String[]{})).visitAll(new IVisitor<SNode>(){
              public void visit(              SNode it){
                scope.addScope(SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(it,"library",false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Library","definitions")));
              }
            }
);
            return scope;
          }
        }
      }
;
    }
  }
);
  return references;
}
