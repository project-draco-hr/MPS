{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("definition",new BaseReferenceConstraintsDescriptor("definition",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_b5nlto_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            final CompositeScope scope=new CompositeScope(SimpleRoleScope.forNamedElements(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Script","definitions")),SimpleRoleScope.forNamedElements(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Library",true,false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Library","definitions")),new Scope(){
              /** 
 * Returns all available elements in the scope.
 * @param prefix (if not null) filters out elements whose reference text doesn't start with prefix
 * @return list of nodes in the scope
 */
              public Iterable<SNode> getAvailableElements(              @Nullable String prefix){
                return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"body",true),"commands",true)).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SNodeOperations.isInstanceOf(it,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition");
                  }
                }
);
              }
              /** 
 * Resolves element by reference text.
 * Invariant: getReferenceText(contextNode, resolve(contextNode, refText)) == refText
 * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
 * @param refText reference text
 * @return resolved element when reference text unambiguously identifies element, null otherwise
 */
              @Nullable public SNode resolve(              SNode contextNode,              @NotNull final String refText){
                return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"body",true),"commands",true)).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SNodeOperations.isInstanceOf(it,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition");
                  }
                }
).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition"),"name").equals(refText);
                  }
                }
).first();
              }
              /** 
 * Creates textual reference for scope element. If element has no textual representation
 * for the reference, returns null.
 * Invariant: resolve(contextNode, getReferenceText(contextNode, node)) == node
 * @param contextNode source node for the reference, or its nearest parent node (if source node is unavailable)
 * @param node element from the current scope (contains(node) == true)
 * @return reference text for the node element in the current scope
 */
              @Nullable public String getReferenceText(              SNode contextNode,              @NotNull SNode node){
                if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition")) {
                  return SPropertyOperations.getString(SNodeOperations.cast(node,"jetbrains.mps.samples.Kaja.structure.RoutineDefinition"),"name");
                }
 else {
                  return null;
                }
              }
            }
);
            ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.Kaja.structure.Script",true,false),"jetbrains.mps.samples.Kaja.structure.Require",false,new String[]{})).visitAll(new IVisitor<SNode>(){
              public void visit(              SNode it){
                scope.addScope(SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(it,"library",false),SLinkOperations.findLinkDeclaration("jetbrains.mps.samples.Kaja.structure.Library","definitions")));
              }
            }
);
            return scope;
          }
        }
      }
;
    }
  }
);
  return references;
}
