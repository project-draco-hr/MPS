{
  final Wrappers._T<MigrationManager.MigrationStep> result=new Wrappers._T<MigrationManager.MigrationStep>(null);
  myMpsMproject.getRepository().getModelAccess().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<MigrationManager.MigrationStep>(){
    public MigrationManager.MigrationStep invoke(){
      return result.value=Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(ProjectHelper.toMPSProject(myProject))).translate(new ITranslator2<SModule,ScriptApplied.ScriptAppliedReference>(){
        public Iterable<ScriptApplied.ScriptAppliedReference> translate(        SModule module){
          return MigrationsUtil.getAllSteps(module);
        }
      }
).select(new ISelector<ScriptApplied.ScriptAppliedReference,ScriptApplied>(){
        public ScriptApplied select(        ScriptApplied.ScriptAppliedReference it){
          return it.resolve(myMigrationComponent,false);
        }
      }
).where(new IWhereFilter<ScriptApplied>(){
        public boolean accept(        ScriptApplied it){
          return it != null && Sequence.fromIterable(it.getDependencies()).where(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
            public boolean accept(            ScriptApplied.ScriptAppliedReference it){
              return !(it.isAlreadyDone());
            }
          }
).isEmpty();
        }
      }
).select(new ISelector<ScriptApplied,MigrationManager.MigrationStep>(){
        public MigrationManager.MigrationStep select(        final ScriptApplied it){
          return new MigrationManager.MigrationStep(){
            public String getDescription(){
              return it.getDescription();
            }
            public boolean execute(){
              return it.execute(myMigrationComponent);
            }
            public void forceExecutionNextTime(){
              throw new UnsupportedOperationException("not supported for module migrations");
            }
          }
;
        }
      }
).first();
    }
  }
));
  return result.value;
}
