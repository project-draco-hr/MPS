{
  List<Node> fixedLayer;
  if (dir == Edge.Direction.FRONT) {
    fixedLayer=nodeOrder.getOrder(layerToSort + 1);
  }
 else {
    fixedLayer=nodeOrder.getOrder(layerToSort - 1);
  }
  Map<Node,Integer> nodesOrder=MapSequence.fromMap(new HashMap<Node,Integer>());
  for (int i=0; i < ListSequence.fromList(fixedLayer).count(); i++) {
    MapSequence.fromMap(nodesOrder).put(ListSequence.fromList(fixedLayer).getElement(i),i);
  }
  final Map<Node,Integer> median=MapSequence.fromMap(new HashMap<Node,Integer>());
  List<Node> layerOrder=nodeOrder.getOrder(layerToSort);
  for (  Node node : ListSequence.fromList(layerOrder)) {
    MapSequence.fromMap(median).put(node,computeMedian(node,nodesOrder,dir));
  }
  layerOrder=ListSequence.fromList(layerOrder).sort(new Comparator<Node>(){
    public int compare(    Node a,    Node b){
      int ma=MapSequence.fromMap(median).get(a);
      int mb=MapSequence.fromMap(median).get(b);
      if (ma != mb) {
        return ma - mb;
      }
      return ListSequence.fromList(b.getEdges(dir)).count() % 2 - ListSequence.fromList(a.getEdges(dir)).count() % 2;
    }
  }
,true).toListSequence();
}
