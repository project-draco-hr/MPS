{
  for (  SNode kmap : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x498be7ea73fa71eL,0x498be7ea73fa880L,"keymapsRef"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x498be7ea73fa87eL,0x498be7ea73fa87fL,"keymap")),MetaAdapterFactory.getProperty(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x15afe07f2a9bb075L,0x77ff578948f6b772L,"isPluginXmlKeymap")));
    }
  }
)) {
    _context.showErrorMessage(_context.getOriginalCopiedInputNode(kmap),"keymap should have property 'register via plugin.xml: true'");
  }
  return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x498be7ea73fa71eL,0x498be7ea73fa722L,"actionGroups"))).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      List<SNode> actions=new ArrayList<SNode>();
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x498be7ea73fa71fL,0x498be7ea73fa720L,"group")),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,0x1190f76acfcL,"contents")),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,"jetbrains.mps.lang.plugin.structure.ElementListContents")))) {
        _context.showErrorMessage(it,"only groups with static content are supported");
        return actions;
      }
      for (      SNode el : SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x498be7ea73fa71fL,0x498be7ea73fa720L,"group")),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,0x1190f76acfcL,"contents")),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,"jetbrains.mps.lang.plugin.structure.ElementListContents")),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,0x1190f75fe95L,"reference"))) {
        if (SNodeOperations.isInstanceOf(el,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da2ba57L,"jetbrains.mps.lang.plugin.structure.ActionInstance"))) {
          SNode action=SLinkOperations.getTarget(SNodeOperations.cast(el,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da2ba57L,"jetbrains.mps.lang.plugin.structure.ActionInstance")),MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da2ba57L,0x1181da2f27fL,"action"));
          if (ListSequence.fromList(SLinkOperations.getChildren(action,MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181ca87c38L,0x11daf6ca9baL,"constructionParameter"))).isNotEmpty()) {
            _context.showErrorMessage(it,"parametrized actions are not supported");
            continue;
          }
          ListSequence.fromList(actions).addElement(action);
        }
 else         if (SNodeOperations.isInstanceOf(el,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1188a1ecd8aL,"jetbrains.mps.lang.plugin.structure.Separator")) || SNodeOperations.isInstanceOf(el,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x11840f36089L,"jetbrains.mps.lang.plugin.structure.GroupAnchor"))) {
        }
 else {
          _context.showErrorMessage(it,"group with unknown content found");
        }
      }
      return actions;
    }
  }
).distinct().sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return ActionDeclaration_BehaviorDescriptor.getGeneratedName_idhEwIGgA.invoke(it);
    }
  }
,true);
}
