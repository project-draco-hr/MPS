{
  for (  SNode kmap : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),331224023792854814l,331224023792855168l,"keymapsRef"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(2952642368903463569l,-5856357300648461647l),331224023792855166l,331224023792855167l,"keymap")),MetaAdapterFactory.getProperty(new UUID(2952642368903463569l,-5856357300648461647l),1562714432501166197l,8646726056720906098l,"isPluginXmlKeymap")));
    }
  }
)) {
    _context.showErrorMessage(_context.getOriginalCopiedInputNode(kmap),"keymap should have property 'register via plugin.xml: true'");
  }
  return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),331224023792854814l,331224023792854818l,"actionGroups"))).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      List<SNode> actions=new ArrayList<SNode>();
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(2952642368903463569l,-5856357300648461647l),331224023792854815l,331224023792854816l,"group")),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1203087890642l,1207145245948l,"contents")),"jetbrains.mps.lang.plugin.structure.ElementListContents"))) {
        _context.showErrorMessage(it,"only groups with static content are supported");
        return actions;
      }
      for (      SNode el : SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(2952642368903463569l,-5856357300648461647l),331224023792854815l,331224023792854816l,"group")),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1203087890642l,1207145245948l,"contents")),"jetbrains.mps.lang.plugin.structure.ElementListContents"),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1207145163717l,1207145201301l,"reference"))) {
        if (SNodeOperations.isInstanceOf(el,"jetbrains.mps.lang.plugin.structure.ActionInstance")) {
          SNode action=SLinkOperations.getTarget(SNodeOperations.cast(el,"jetbrains.mps.lang.plugin.structure.ActionInstance"),MetaAdapterFactory.getReferenceLink(new UUID(2952642368903463569l,-5856357300648461647l),1203088046679l,1203088061055l,"action"));
          if (ListSequence.fromList(SLinkOperations.getChildren(action,MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1203071646776l,1227008813498l,"constructionParameter"))).isNotEmpty()) {
            _context.showErrorMessage(it,"parametrized actions are not supported");
            continue;
          }
          ListSequence.fromList(actions).addElement(action);
        }
 else         if (SNodeOperations.isInstanceOf(el,"jetbrains.mps.lang.plugin.structure.Separator") || SNodeOperations.isInstanceOf(el,"jetbrains.mps.lang.plugin.structure.GroupAnchor")) {
        }
 else {
          _context.showErrorMessage(it,"group with unknown content found");
        }
      }
      return actions;
    }
  }
).distinct().sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return ActionDeclaration_Behavior.call_getGeneratedName_1213877371942(it);
    }
  }
,true);
}
