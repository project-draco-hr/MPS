{
  String role=myReferenceMacro.getLink().getRole();
  ReferenceMacro_GetReferent function=myReferenceMacro.getReferentFunction();
  if (function == null) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    return null;
  }
  SNode templateValue=myTemplateReferenceNode.getReferent(role);
  String methodName=TemplateFunctionMethodName.referenceMacro_GetReferent(function.getNode());
  Object[] args_old=new Object[]{getInputNode(),templateValue,myTemplateReferenceNode,generator.getInputModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
  Object[] args_new=new Object[]{getInputNode(),myTemplateReferenceNode,getOutputSourceNode(),generator.getInputModel(),generator};
  SNode outputTargetNode=null;
  try {
    Object result=QueryMethodGenerated.invoke_GetReferent(methodName,args_old,args_new,myReferenceMacro.getModel());
    if (result instanceof SNode) {
      outputTargetNode=(SNode)result;
    }
 else {
      myResolveInfoForDynamicResolve=(String)result;
    }
  }
 catch (  Throwable t) {
    generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
    Logger.getLogger(this.getClass()).error(t,myReferenceMacro.getNode());
    return null;
  }
  if (outputTargetNode == null) {
    return null;
  }
  if (outputTargetNode.getModel() == generator.getInputModel()) {
    generator.showWarningMessage(getOutputSourceNode(),"reference '" + role + "' to input model in output node "+ getOutputSourceNode().getDebugText());
    generator.showInformationMessage(outputTargetNode," -- referent node: " + outputTargetNode.getDebugText());
    generator.showInformationMessage(myReferenceMacro.getNode()," -- template node: " + myReferenceMacro.getNode().getDebugText());
    generator.getGeneratorSessionContext().addTransientModelToKeep(generator.getInputModel());
  }
  return outputTargetNode;
}
