{
  SNode referentNode;
  String linkRole=myReferenceMacro.getLink().getRole();
  ReferenceMacro_GetReferent function=myReferenceMacro.getReferentFunction();
  if (function != null) {
    SNode templateValue=myTemplateReferenceNode.getReferent(linkRole);
    String methodName=TemplateFunctionMethodName.referenceMacro_GetReferent(function.getNode());
    Object[] args_old=new Object[]{getInputNode(),templateValue,myTemplateReferenceNode,generator.getSourceModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
    Object[] args_new=new Object[]{getInputNode(),myTemplateReferenceNode,getOutputNode(),generator.getSourceModel(),generator};
    try {
      referentNode=(SNode)QueryMethodGenerated.invoke_GetReferent(methodName,args_old,args_new,myReferenceMacro.getModel());
    }
 catch (    Exception e) {
      generator.showErrorMessage(getInputNode(),myReferenceMacro.getNode(),"couldn't evaluate reference macro");
      return null;
    }
  }
 else {
    Object[] args=new Object[]{getInputNode(),myTemplateReferenceNode,myReferenceMacro.getLink(),generator};
    try {
      referentNode=(SNode)QueryMethod.invoke("referenceMacro_" + myReferenceMacro.getAspectMethodName(),args,myReferenceMacro.getModel());
    }
 catch (    Throwable t) {
      String message=NameUtil.shortNameFromLongName(t.getClass().getName()) + " occured while expanding reference macro with query: \"referenceMacro_" + myReferenceMacro.getAspectMethodName();
      generator.showErrorMessage(getInputNode(),myTemplateReferenceNode,message);
      return null;
    }
  }
  if (referentNode == null) {
    return null;
  }
  if (referentNode.getModel() == generator.getSourceModel()) {
    generator.showWarningMessage(getOutputNode(),"reference '" + linkRole + "' to input model in output node "+ getOutputNode().getDebugText());
    generator.showInformationMessage(referentNode," -- referent node: " + referentNode.getDebugText());
    generator.showInformationMessage(myReferenceMacro.getNode()," -- template node: " + myReferenceMacro.getNode().getDebugText());
    generator.getGeneratorSessionContext().addTransientModelToKeep(generator.getSourceModel());
  }
  return referentNode;
}
