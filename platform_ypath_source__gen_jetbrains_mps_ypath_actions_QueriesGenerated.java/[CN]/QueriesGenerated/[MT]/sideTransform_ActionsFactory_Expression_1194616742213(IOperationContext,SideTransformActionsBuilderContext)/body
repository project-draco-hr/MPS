{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.IsWithinRangeExpression");
        SLinkOperations.setTarget(res,"range",_context.getSourceNode(),true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".isWithinRange ()";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "IRange expression";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.IsAtInsertionPointExpression");
        SLinkOperations.setTarget(res,"range",_context.getSourceNode(),true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".isAtInsertionPoint ()";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "IRange expression";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.ypath.structure.NextElementStatement");
        SLinkOperations.setTarget(res,"range",_context.getSourceNode(),true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".next ()";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "IRange statement";
      }
    }
);
  }
  return result;
}
