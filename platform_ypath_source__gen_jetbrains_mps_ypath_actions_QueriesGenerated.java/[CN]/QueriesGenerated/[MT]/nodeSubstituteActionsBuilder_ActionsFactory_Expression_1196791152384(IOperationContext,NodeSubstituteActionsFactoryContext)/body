{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("?output concept is not specified?",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.EmptySequenceExpression",null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern){
          return SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.ypath.structure.ReplaceWritePathStatement");
        }
        public String getMatchingText(        String pattern){
          return "NOTHING";
        }
      }
);
    }
  }
  return result;
}
