{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("arg",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode call=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall");
      return ExternalCommandCall_Behavior.call_getUnusedArguments_3263637656466355284(call);
    }
    public ISearchScope createNodeReferentSearchScope(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new ProviderGeneratedSearchScope(this,operationContext,_context){
        public boolean isInScope(        SNode checkedNode){
          SNode call=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall");
          Iterable<SNode> argumentReferences=ListSequence.fromList(SLinkOperations.getTargets(call,"refToOptions",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.bash.structure.ArgumentReference");
            }
          }
);
          return Sequence.fromIterable(argumentReferences).<SNode>select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.bash.structure.ArgumentReference"),"arg",false);
            }
          }
).distinct().count() == Sequence.fromIterable(argumentReferences).count();
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:32c4fb44-9e66-4976-aa43-e37da5fe27dd(jetbrains.mps.bash.constraints)","3411949499900739977");
    }
  }
);
  return result;
}
