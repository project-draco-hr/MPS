{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("arg",new BaseReferenceConstraintsDescriptor("arg",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode call=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall");
          return ExternalCommandCall_Behavior.call_getUnusedArguments_3263637656466355284(call);
        }
        @Override public ISearchScope createSearchScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ProviderGeneratedSearchScope(this,operationContext,_context){
            public boolean isInScope(            SNode checkedNode){
              SNode call=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.bash.structure.ExternalCommandCall");
              Iterable<SNode> argumentReferences=ListSequence.fromList(SLinkOperations.getTargets(call,"refToOptions",true)).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,"jetbrains.mps.bash.structure.ArgumentReference");
                }
              }
);
              return Sequence.fromIterable(argumentReferences).select(new ISelector<SNode,SNode>(){
                public SNode select(                SNode it){
                  return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.bash.structure.ArgumentReference"),"arg",false);
                }
              }
).distinct().count() == Sequence.fromIterable(argumentReferences).count();
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_xbl5ia_a0a2a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
