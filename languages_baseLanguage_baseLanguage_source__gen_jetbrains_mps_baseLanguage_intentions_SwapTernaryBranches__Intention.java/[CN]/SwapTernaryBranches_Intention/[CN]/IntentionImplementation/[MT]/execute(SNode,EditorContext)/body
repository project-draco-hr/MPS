{
  boolean unidentifiedConditionExpr=false;
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
    SNode left=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true);
    SNode right=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.NPEEqualsExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
      SNode eq=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression",null);
      SLinkOperations.setTarget(eq,"leftExpression",left,true);
      SLinkOperations.setTarget(eq,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",eq,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.GreaterThanExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.LessThanExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
      SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
      SLinkOperations.setTarget(not,"leftExpression",left,true);
      SLinkOperations.setTarget(not,"rightExpression",right,true);
      SLinkOperations.setTarget(node,"condition",not,true);
    }
 else {
      unidentifiedConditionExpr=true;
    }
  }
 else {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.NotExpression")) {
      SLinkOperations.setTarget(node,"condition",SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.NotExpression"),"expression",true),true);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BooleanConstant")) {
      boolean currentValue=SPropertyOperations.getBoolean(SNodeOperations.cast(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BooleanConstant"),"value");
      SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(node,"condition",true),"jetbrains.mps.baseLanguage.structure.BooleanConstant"),"value","" + ((currentValue ? false : true)));
    }
 else {
      unidentifiedConditionExpr=true;
    }
  }
  if (unidentifiedConditionExpr) {
    SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression",null);
    SLinkOperations.setTarget(not,"expression",SLinkOperations.getTarget(node,"condition",true),true);
    SLinkOperations.setTarget(node,"condition",not,true);
  }
  SNode ifTrue=SNodeOperations.copyNode(SLinkOperations.getTarget(node,"ifTrue",true));
  SLinkOperations.setTarget(node,"ifTrue",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"ifFalse",true)),true);
  SLinkOperations.setTarget(node,"ifFalse",ifTrue,true);
}
