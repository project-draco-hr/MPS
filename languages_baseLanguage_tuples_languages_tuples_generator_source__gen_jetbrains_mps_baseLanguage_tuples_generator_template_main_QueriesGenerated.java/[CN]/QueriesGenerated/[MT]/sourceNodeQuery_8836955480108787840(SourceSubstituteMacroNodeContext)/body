{
  Object idx=BehaviorReflection.invokeVirtual(Object.class,SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1238857743184l,1238857834412l,"index")),"virtual_getCompileTimeConstantValue_1238860310638",new Object[]{SNodeOperations.getModel(_context.getNode()).getModule()});
  Integer index=(Integer)idx;
  List<SNode> componentType=SLinkOperations.getChildren(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1238857743184l,1238857764950l,"tuple"))),"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType"),MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1238852151516l,1238852204892l,"componentType"));
  SNode result=null;
  if (index >= ListSequence.fromList(componentType).count()) {
    _context.showErrorMessage(_context.getNode(),"out of bounds access to indexed tuple");
  }
 else {
    result=ListSequence.fromList(componentType).getElement(index);
  }
  return result;
}
