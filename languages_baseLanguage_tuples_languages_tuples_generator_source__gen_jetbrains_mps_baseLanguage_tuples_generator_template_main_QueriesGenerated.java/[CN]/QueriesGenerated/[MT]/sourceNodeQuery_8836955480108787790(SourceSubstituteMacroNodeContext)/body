{
  Object idx=Expression_BehaviorDescriptor.getCompileTimeConstantValue_idi1LP2xI.invoke(SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,0x12071ae5facL,"index")),SNodeOperations.getModel(_context.getNode()).getModule());
  Integer index=(Integer)idx;
  List<SNode> componentType=SLinkOperations.getChildren(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(),MetaAdapterFactory.getContainmentLink(0xa247e09e243545baL,0xb8d207e93feba96aL,0x12071acfb50L,0x12071ad5056L,"tuple"))),MetaAdapterFactory.getConcept(0xa247e09e243545baL,0xb8d207e93feba96aL,0x1207157a8dcL,"jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType")),MetaAdapterFactory.getContainmentLink(0xa247e09e243545baL,0xb8d207e93feba96aL,0x1207157a8dcL,0x1207158795cL,"componentType"));
  SNode result=null;
  if (index >= ListSequence.fromList(componentType).count()) {
    _context.showErrorMessage(_context.getNode(),"out of bounds access to indexed tuple");
  }
 else {
    result=ListSequence.fromList(componentType).getElement(index);
  }
  return result;
}
