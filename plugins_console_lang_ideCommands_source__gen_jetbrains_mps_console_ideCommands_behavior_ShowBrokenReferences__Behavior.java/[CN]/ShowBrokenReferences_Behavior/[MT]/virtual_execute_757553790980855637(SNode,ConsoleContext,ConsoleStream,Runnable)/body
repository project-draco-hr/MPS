{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      callback.run();
      Collection<SReference> brokenReferences=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SLinkOperations.getTarget(thisNode,"target",true),"virtual_getNodes_5207260697411458163",new Object[]{c})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          return SNodeOperations.getReferences(it);
        }
      }
).where(new IWhereFilter<SReference>(){
        public boolean accept(        SReference it){
          return jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(it) == null;
        }
      }
).toListSequence();
      IOperationContext context=new ProjectOperationContext(c.getProject());
      for (      SReference ref : CollectionSequence.fromCollection(brokenReferences)) {
        console.addText("model id = " + ref.getTargetSModelReference());
        console.addText("\n");
        console.addText("node  id = " + ref.getTargetNodeId());
        SNode targetNode=ref.getSourceNode();
        console.addText("\n");
        console.addNodeReference(targetNode);
        console.addText("\n");
        console.addText("\n");
      }
    }
  }
);
}
