{
  final Map<SModel,ModuleBuildTarget> toCompile=new LinkedHashMap<SModel,ModuleBuildTarget>();
  dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor,ModuleBuildTarget>(){
    @Override public boolean apply(    ModuleBuildTarget target,    File file,    JavaSourceRootDescriptor sourceRoot) throws IOException {
      JpsSolutionIdea solution=JpsMPSRepositoryFacade.getInstance().getSolution(target.getModule());
      if (solution == null)       return true;
      String suffix=FileUtilRt.getExtension(file.getName());
      if (!suffix.equals(MODEL_HEADER)) {
        ModelFactory modelFactory=PersistenceFacade.getInstance().getModelFactory(suffix);
        if (modelFactory == null)         return true;
      }
      String path=FileUtil.toCanonicalPath(file.getPath());
      SModel model=solution.getModelByPath(path);
      if (model == null) {
        compileContext.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.WARNING,"cannot find MPS model for " + path));
        return true;
      }
      toCompile.put(model,target);
      return true;
    }
  }
);
  return toCompile;
}
