{
  ExitCode status=ExitCode.NOTHING_DONE;
  if (moduleChunk.getModules().isEmpty())   return status;
  try {
    final JpsMPSProject project=new JpsMPSProject(compileContext.getProjectDescriptor().getProject());
    JpsGeneratorWorker worker=new JpsGeneratorWorker(project,compileContext);
    for (    JpsModule jpsModule : moduleChunk.getModules()) {
      JpsMPSModuleExtension extension=JpsMPSExtensionService.getInstance().getExtension(jpsModule);
      if (extension == null) {
        compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO,"Ignoring (no facet) " + jpsModule.getName()));
        continue;
      }
      JpsMPSRepositoryFacade.getInstance().init(compileContext);
      compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO,"Processing " + jpsModule.getName() + ": "+ extension.getConfiguration().getUUID()));
      for (      ModelRoot root : extension.getConfiguration().getModelRoots()) {
        compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," -- " + root.getPresentation()));
      }
    }
    dirtyFilesHolder.processDirtyFiles(worker);
    for (    SModel m : worker.getModels()) {
      compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," model to generate: " + m.getModelName()));
    }
    worker.generate();
  }
 catch (  Exception ex) {
    throw new ProjectBuildException(ex);
  }
  compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.WARNING,"<simple warning to show Messages tool>"));
  return status;
}
