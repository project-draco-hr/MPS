{
  ExitCode status=ExitCode.NOTHING_DONE;
  if (moduleChunk.getModules().isEmpty())   return status;
  try {
    final JpsMPSProject project=new JpsMPSProject(moduleChunk.getModules().iterator().next().getProject());
    JpsGeneratorWorker worker=new JpsGeneratorWorker(project,compileContext);
    compileContext.getProjectDescriptor().getProject();
    for (    JpsModule jpsModule : moduleChunk.getModules()) {
      JpsMPSModuleExtension extension=JpsMPSExtensionService.getInstance().getExtension(jpsModule);
      if (extension == null) {
        compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO,"Ignoring (no facet) " + jpsModule.getName()));
        continue;
      }
      JpsMPSRepositoryFacade.getInstance().init(compileContext);
      compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO,"Processing " + jpsModule.getName() + ": "+ extension.getConfiguration().getUUID()));
      SolutionDescriptor descriptor=extension.getConfiguration().getSolutionDescriptor();
      final JpsSolutionIdea solution=new JpsSolutionIdea(jpsModule,descriptor);
      ModelAccess.instance().runWriteAction(new Runnable(){
        @Override public void run(){
          MPSModuleRepository.getInstance().registerModule(solution,project);
          solution.updateModelsSet();
          compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO,"FQ name: " + solution.getModuleReference().getModuleFqName()));
        }
      }
);
      for (      final SModelDescriptor desc : SModelRepository.getInstance().getModelDescriptors(solution)) {
        compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," ++ " + desc.getLongName()));
        ModelAccess.instance().runReadAction(new Runnable(){
          @Override public void run(){
            for (            SNode n : desc.getRootNodes()) {
              compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," root: " + n.getName()));
            }
          }
        }
);
      }
      for (      ModelRoot root : extension.getConfiguration().getModelRoots()) {
        compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," -- " + root.getPresentation()));
      }
    }
    dirtyFilesHolder.processDirtyFiles(worker);
    for (    SModel m : worker.getModels()) {
      compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.INFO," model to generate: " + m.getModelName()));
    }
    worker.generate();
  }
 catch (  Exception ex) {
    throw new ProjectBuildException(ex);
  }
  compileContext.processMessage(new CompilerMessage(MPSCompilerUtil.BUILDER_ID,Kind.WARNING,"<simple warning to show Messages tool>"));
  return status;
}
