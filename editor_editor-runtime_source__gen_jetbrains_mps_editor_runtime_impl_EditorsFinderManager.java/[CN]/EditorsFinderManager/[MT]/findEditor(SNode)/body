{
  return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<INodeEditor>(){
    public INodeEditor compute(){
      SNode nodeConcept=SNodeOperations.getConceptDeclaration(nodeToEdit);
      if (nodeConcept == null) {
        EditorsFinderManager.LOG.error("error loading editor for node " + jetbrains.mps.util.SNodeOperations.getDebugText(nodeToEdit) + "\n"+ "couldn't find node concept");
        return null;
      }
      if (SNodeOperations.isInstanceOf(nodeConcept,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
        return new EditorsFinderManager.DefaultInterfaceEditor();
      }
      final Queue<SNode> conceptQueue=QueueSequence.fromQueue(new LinkedList<SNode>());
      Set<SNode> processedConcepts=SetSequence.fromSet(new HashSet<SNode>());
      QueueSequence.fromQueue(conceptQueue).addLastElement(nodeConcept);
      while (!(QueueSequence.fromQueue(conceptQueue).isEmpty())) {
        SNode abstractConceptDeclaration=QueueSequence.fromQueue(conceptQueue).removeFirstElement();
        if (SetSequence.fromSet(processedConcepts).contains(abstractConceptDeclaration)) {
          continue;
        }
 else {
          SetSequence.fromSet(processedConcepts).addElement(abstractConceptDeclaration);
        }
        INodeEditor nodeEditor=findEditorByConcept(abstractConceptDeclaration);
        if (nodeEditor != null) {
          return nodeEditor;
        }
        if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
          SNode conceptDeclaration=SNodeOperations.cast(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
          if (SLinkOperations.getTarget(conceptDeclaration,"extends",false) != null && SLinkOperations.getTarget(conceptDeclaration,"extends",false) != SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")) {
            QueueSequence.fromQueue(conceptQueue).addLastElement(SLinkOperations.getTarget(conceptDeclaration,"extends",false));
          }
          ListSequence.fromList(SLinkOperations.getTargets(conceptDeclaration,"implements",true)).visitAll(new IVisitor<SNode>(){
            public void visit(            SNode it){
              QueueSequence.fromQueue(conceptQueue).addLastElement(SLinkOperations.getTarget(it,"intfc",false));
            }
          }
);
        }
 else         if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"),"extends",true)).visitAll(new IVisitor<SNode>(){
            public void visit(            SNode it){
              QueueSequence.fromQueue(conceptQueue).addLastElement(SLinkOperations.getTarget(it,"intfc",false));
            }
          }
);
        }
      }
      return findEditorByConcept(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"));
    }
  }
);
}
