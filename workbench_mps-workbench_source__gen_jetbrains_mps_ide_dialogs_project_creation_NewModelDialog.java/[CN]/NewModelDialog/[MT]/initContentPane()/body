{
  JPanel mainPanel=new JPanel(new GridLayoutManager(8,1));
  mainPanel.setPreferredSize(new Dimension(200,50));
  GridConstraints constraints=new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null);
  mainPanel.add(new JLabel("Model root:"),constraints);
  constraints.setRow(constraints.getRow() + 1);
  mainPanel.add(myModelRoots,constraints);
  constraints.setRow(constraints.getRow() + 1);
  DefaultComboBoxModel model=new DefaultComboBoxModel();
  for (  ModelRoot root : myModule.getModelRoots()) {
    if (root.canCreateModels()) {
      model.addElement(root);
    }
 else     if (myModule instanceof Language && root instanceof FileBasedModelRoot) {
      model.addElement(root);
    }
  }
  if (model.getSize() == 0) {
    model.addElement("<NO MODEL ROOTS FOR SELECTED NAMESPACE>");
  }
  myModelRoots.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object object,    int i,    boolean b,    boolean b1){
      if (object instanceof ModelRoot) {
        object=((ModelRoot)object).getPresentation();
      }
      return super.getListCellRendererComponent(list,object,i,b,b1);
    }
  }
);
  myModelRoots.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      check();
      myModelStorageFormat.setVisible(myModelRoots.getSelectedItem() instanceof DefaultModelRoot);
    }
  }
);
  myModelRoots.setModel(model);
  myModelName.setText((myNamespace.length() == 0 ? myNamespace : myNamespace + "."));
  mainPanel.add(new JLabel("Model name:"),constraints);
  constraints.setRow(constraints.getRow() + 1);
  mainPanel.add(myModelName,constraints);
  constraints.setRow(constraints.getRow() + 1);
  myModelName.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent event){
      check();
    }
  }
);
  mainPanel.add(new JLabel("Stereotype:"),constraints);
  constraints.setRow(constraints.getRow() + 1);
  myModelStereotype.setEditable(true);
  myModelStereotype.setModel(new DefaultComboBoxModel(SModelStereotype.values));
  myModelStereotype.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent event){
      check();
    }
  }
);
  myModelStereotype.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent p0){
      check();
    }
  }
);
  mainPanel.add(myModelStereotype,constraints);
  constraints.setRow(constraints.getRow() + 1);
  mainPanel.add(new JLabel("Storage format:"),constraints);
  constraints.setRow(constraints.getRow() + 1);
  myModelStorageFormat.setModel(new DefaultComboBoxModel(getStorageFormats()));
  myModelStorageFormat.setRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    JList p0,    Object p1,    int p2,    boolean p3,    boolean p4){
      if (!(p1 instanceof ModelFactory)) {
        return;
      }
      append(((ModelFactory)p1).getFormatTitle());
    }
  }
);
  myModelStorageFormat.setSelectedItem(PersistenceFacade.getInstance().getDefaultModelFactory());
  mainPanel.add(myModelStorageFormat,constraints);
  constraints.setRow(constraints.getRow() + 1);
  myContentPane.add(mainPanel,BorderLayout.CENTER);
}
