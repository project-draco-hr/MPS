{
  final Set<SNodeDescriptor> keys=new HashSet<SNodeDescriptor>();
  final Set<SModelReference> hasToLoad=new HashSet<SModelReference>();
  final Set<SModelReference> changedModels=new HashSet<SModelReference>();
  for (  SModelDescriptor sm : SModelRepository.getInstance().getChangedModels()) {
    if (scope instanceof GlobalScope || scope.getModelDescriptors().contains(sm)) {
      changedModels.add(sm.getSModelReference());
    }
  }
  final ID<String,SNodeDescriptor> indexName=myIndex.getName();
  final ModelConstraintsManager cm=ModelConstraintsManager.getInstance();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  fileBasedIndex.processAllValues(indexName,new AllValuesProcessor<SNodeDescriptor>(){
    @Override public void process(    int inputId,    SNodeDescriptor s){
      if (scope.getModelDescriptor(s.getModelReference()) == null)       return;
      if (changedModels.contains(s.getModelReference()) || cm.hasGetter(s.getConceptFqName(),INamedConcept.NAME)) {
        hasToLoad.add(s.getModelReference());
      }
 else {
        keys.add(s);
      }
    }
  }
,getIdeaProject());
  for (  SModelReference ref : hasToLoad) {
    SModelDescriptor sm=scope.getModelDescriptor(ref);
    if (sm == null)     continue;
    List<SNode> nodes=myIndex.getNodesToIterate(sm.getSModel());
    for (    SNode root : nodes) {
      int number=nodes.indexOf(root);
      String nodeName=(root.getName() == null) ? "null" : root.getName();
      SNodeDescriptor nodeDescriptor=SNodeDescriptor.fromModelReference(nodeName,root.getConceptFqName(),root.getModel().getSModelReference(),number);
      if (!keys.contains(nodeDescriptor)) {
        keys.add(nodeDescriptor);
      }
    }
  }
  addJavaStubs(keys,scope);
  return keys.toArray(new SNodeDescriptor[keys.size()]);
}
