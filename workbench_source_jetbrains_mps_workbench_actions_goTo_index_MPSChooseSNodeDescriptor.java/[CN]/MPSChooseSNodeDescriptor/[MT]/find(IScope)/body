{
  final Set<BaseSNodeDescriptor> keys=new HashSet<BaseSNodeDescriptor>();
  final ID<Integer,List<BaseSNodeDescriptor>> indexName=myIndex.getName();
  final ModelConstraintsManager cm=ModelConstraintsManager.getInstance();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  Set<SModelDescriptor> findDirectly=new HashSet<SModelDescriptor>();
  for (  SModelDescriptor sm : scope.getModelDescriptors()) {
    if (!SModelStereotype.isUserModel(sm))     continue;
    if (sm.getLoadingState() == ModelLoadingState.FULLY_LOADED) {
      findDirectly.add(sm);
      continue;
    }
    if (!(sm instanceof EditableSModelDescriptor))     continue;
    EditableSModelDescriptor esm=(EditableSModelDescriptor)sm;
    IFile modelFile=esm.getModelFile();
    if (modelFile == null)     continue;
    VirtualFile vf=VirtualFileUtils.getVirtualFile(modelFile);
    if (vf == null)     continue;
    int fileId=FileBasedIndex.getFileId(vf);
    List<List<BaseSNodeDescriptor>> descriptors=fileBasedIndex.getValues(indexName,fileId,GlobalSearchScope.fileScope(getProject(),vf));
    if (descriptors.isEmpty())     continue;
    boolean needToLoad=false;
    for (    BaseSNodeDescriptor snd : descriptors.get(0)) {
      PropertyConstraintsDescriptor descriptor=ConceptRegistry.getInstance().getConstraintsDescriptor(snd.getConceptFqName()).getProperty(SNodeUtil.property_INamedConcept_name);
      if (descriptor instanceof BasePropertyConstraintsDescriptor && ((BasePropertyConstraintsDescriptor)descriptor).isGetterDefault()) {
        needToLoad=true;
        break;
      }
    }
    if (needToLoad) {
      findDirectly.add(sm);
    }
 else {
      keys.addAll(descriptors.get(0));
    }
  }
  for (  SModelDescriptor sm : findDirectly) {
    for (    SNode root : myIndex.getRootsToIterate(sm.getSModel())) {
      String nodeName=(root.getName() == null) ? "null" : root.getName();
      BaseSNodeDescriptor nodeDescriptor=SNodeDescriptor.fromModelReference(nodeName,root.getConceptFqName(),root.getModel().getSModelReference(),root.getSNodeId());
      keys.add(nodeDescriptor);
    }
  }
  for (  IModule m : scope.getVisibleModules()) {
    keys.addAll(StubsNodeDescriptorsCache.getInstance().getSNodeDescriptors(m));
  }
  return keys.toArray(new BaseSNodeDescriptor[keys.size()]);
}
