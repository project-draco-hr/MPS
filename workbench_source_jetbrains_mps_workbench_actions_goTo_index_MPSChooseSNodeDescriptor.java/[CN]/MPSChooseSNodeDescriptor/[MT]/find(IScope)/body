{
  final Set<SNodeDescriptor> keys=new HashSet<SNodeDescriptor>();
  final ID<Integer,List<SNodeDescriptor>> indexName=myIndex.getName();
  final ModelConstraintsManager cm=ModelConstraintsManager.getInstance();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  Set<SModelDescriptor> findDirectly=new HashSet<SModelDescriptor>();
  for (  SModelDescriptor sm : scope.getModelDescriptors()) {
    if (!SModelStereotype.isUserModel(sm))     continue;
    if (sm.isInitialized()) {
      findDirectly.add(sm);
      continue;
    }
    IFile modelFile=sm.getModelFile();
    if (modelFile == null)     continue;
    VirtualFile vf=modelFile.toVirtualFile();
    if (vf == null)     continue;
    int fileId=FileBasedIndex.getFileId(vf);
    List<List<SNodeDescriptor>> descriptors=fileBasedIndex.getValues(indexName,fileId,GlobalSearchScope.fileScope(getProject(),vf));
    if (!descriptors.isEmpty()) {
      boolean needToLoad=false;
      for (      SNodeDescriptor snd : descriptors.get(0)) {
        if (cm.hasGetter(snd.getConceptFqName(),INamedConcept.NAME)) {
          needToLoad=true;
          break;
        }
      }
      if (needToLoad) {
        findDirectly.add(sm);
      }
 else {
        keys.addAll(descriptors.get(0));
      }
    }
  }
  for (  SModelDescriptor sm : findDirectly) {
    List<SNode> nodes=myIndex.getNodesToIterate(sm.getSModel());
    for (    SNode root : nodes) {
      int number=nodes.indexOf(root);
      String nodeName=(root.getName() == null) ? "null" : root.getName();
      SNodeDescriptor nodeDescriptor=SNodeDescriptor.fromModelReference(nodeName,root.getConceptFqName(),root.getModel().getSModelReference(),number);
      keys.add(nodeDescriptor);
    }
  }
  addJavaStubs(keys,scope);
  return keys.toArray(new SNodeDescriptor[keys.size()]);
}
