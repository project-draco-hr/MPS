{
  IOperationContext operationContext=getOperationContext();
  for (  LanguageAspect aspect : LanguageAspect.values()) {
    if (aspect.get(getLanguage()) != null) {
      add(new SModelTreeNode(aspect.get(getLanguage()),null,operationContext,false));
    }
  }
  if (myLanguage.getAccessoryModels().size() > 0) {
    TextTreeNode accessories=new TextTreeNode("accessories"){
{
        setIcon(Icons.LIB_ICON);
      }
    }
;
    List<SModelDescriptor> sortedModels=SortUtil.sortModels(myLanguage.getAccessoryModels());
    for (    SModelDescriptor model : sortedModels) {
      Set<IModule> modules=model.getModules();
      if (modules.contains(myLanguage)) {
        accessories.add(new SModelTreeNode(model,null,model.getOperationContext()));
      }
 else {
        IModule module=model.getModule();
        accessories.add(new SModelTreeNode(model,null,new ModuleContext(module,myProject)));
      }
    }
    this.add(accessories);
  }
  for (  Generator generator : myLanguage.getGenerators()) {
    MPSTreeNode generatorNode=new GeneratorTreeNode(generator,myProject);
    add(generatorNode);
  }
  TextTreeNode languageRuntime=new TextTreeNode("runtime");
  for (  IModule m : myLanguage.getRuntimeDependOnModules()) {
    languageRuntime.add(createFor(myProject,m));
  }
  add(languageRuntime);
  TextTreeNode allModels=new TextTreeNode("all models");
  allModels.setIcon(Icons.PROJECT_MODELS_ICON);
  SModelsSubtree.create(allModels,getOperationContext());
  add(allModels);
}
