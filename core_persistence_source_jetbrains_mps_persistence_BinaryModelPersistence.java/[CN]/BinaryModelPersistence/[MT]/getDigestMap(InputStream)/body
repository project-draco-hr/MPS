{
  Map<String,String> result=new LinkedHashMap<String,String>();
  try {
    BinarySModel model=BinaryPersistence.readModel(input);
    for (    SNode node : model.roots()) {
      DigestBuilderOutputStream os=ModelDigestUtil.createDigestBuilderOutputStream();
      try {
        new NodesWriter(model.getSModelReference()).writeNode(node,new ModelOutputStream(os));
      }
 catch (      IOException ignored) {
      }
      SNodeId nodeId=node.getNodeId();
      if (nodeId != null) {
        result.put(nodeId.toString(),os.getResult());
      }
    }
    DigestBuilderOutputStream os=ModelDigestUtil.createDigestBuilderOutputStream();
    BinaryPersistence.saveModelProperties(model,new ModelOutputStream(os));
    result.put(GeneratableSModelDescriptor.HEADER,os.getResult());
    StringBuilder combinedHash=new StringBuilder();
    for (    Entry<String,String> entry : result.entrySet()) {
      combinedHash.append(entry.getKey()).append(" ").append(entry.getValue()).append("\n");
    }
    result.put(GeneratableSModelDescriptor.FILE,ModelDigestUtil.hashText(combinedHash.toString()));
  }
 catch (  ModelReadException ignored) {
  }
catch (  IOException ignored) {
  }
  return null;
}
