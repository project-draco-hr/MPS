{
  return ModelAccess.instance().runReadAction(new Computable<VirtualFile>(){
    @Override public VirtualFile compute(){
      String modelOrNodePath=path;
      Matcher modelRef=MODEL_UID_PATTERN.matcher(modelOrNodePath);
      Matcher nodePath=NODE_PATH.matcher(modelOrNodePath);
      if (!nodePath.matches() && !modelRef.matches())       return null;
      if (nodePath.matches()) {
        SModelReference reference=PersistenceFacade.getInstance().createModelReference(nodePath.group(1));
        final String name=nodePath.group(2);
        SModel sm=SModelRepository.getInstance().getModelDescriptor(reference);
        if (sm == null)         return null;
        Condition<SNode> cond=new Condition<SNode>(){
          @Override public boolean met(          SNode node){
            return node.getPresentation().equals(name);
          }
        }
;
        Iterator<SNode> iter=new ConditionalIterator<SNode>(sm.getRootNodes().iterator(),cond);
        if (!iter.hasNext())         return null;
        return getFileFor(iter.next());
      }
 else {
        final SModelReference modelReference=PersistenceFacade.getInstance().createModelReference(modelRef.group());
        return getFileFor(modelReference);
      }
    }
  }
);
}
