{
  FileStatus status=ModelAccess.instance().runReadAction(new Computable<FileStatus>(){
    public FileStatus compute(){
      SModel m=SModelRepository.getInstance().getModelDescriptor(root.getModelReference());
      if (m instanceof EditableSModel && m.getSource() instanceof FileDataSource && !(((EditableSModel)m).isReadOnly())) {
        EditableSModel model=(EditableSModel)m;
        if (ConflictsUtil.isModelOrModuleConflicting(model,myProject)) {
          return FileStatus.MERGED_WITH_CONFLICTS;
        }
        CurrentDifference diff=myRegistry.getCurrentDifference(model);
        List<ModelChange> modelChanges=check_onkh7z_a0d0b0a0a0a0j(diff.getChangeSet());
        List<ModelChange> rootChanges=ListSequence.fromList(modelChanges).where(new IWhereFilter<ModelChange>(){
          public boolean accept(          ModelChange ch){
            return ((SNodePointer)root).getNodeId().equals(ch.getRootId());
          }
        }
).toListSequence();
        if (ListSequence.fromList(rootChanges).count() != 0) {
          if (ListSequence.fromList(rootChanges).first() instanceof AddRootChange) {
            VirtualFile vf=VirtualFileUtils.getVirtualFile(((FileDataSource)m.getSource()).getFile());
            if (vf != null) {
              FileStatus modelStatus=FileStatusManager.getInstance(myProject).getStatus(vf);
              if (BaseVersionUtil.isAddedFileStatus(modelStatus)) {
                return modelStatus;
              }
            }
            return FileStatus.ADDED;
          }
          return FileStatus.MODIFIED;
        }
      }
      return FileStatus.NOT_CHANGED;
    }
  }
);
synchronized (myFileStatusMap) {
    if (MapSequence.fromMap(myFileStatusMap).get(root) != status) {
      MapSequence.fromMap(myFileStatusMap).put(root,status);
      return true;
    }
 else {
      return false;
    }
  }
}
