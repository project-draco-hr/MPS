{
  Map<SPropertyId,PropertyConstraintsDescriptor> properties=new HashMap<SPropertyId,PropertyConstraintsDescriptor>();
  properties.put(MetaIdFactory.propId(new UUID(-5173455103397510980l,-8487484424797171117l),7166719696753421196l,7166719696753421197l),new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(new UUID(-5173455103397510980l,-8487484424797171117l),7166719696753421196l,7166719696753421197l),this){
    @Override public boolean hasOwnValidator(){
      return true;
    }
    @Override public boolean validateValue(    SNode node,    String propertyValue){
      String propertyName="encoding";
      if (isEmptyString(trim_p9uqyx_a0a0a1a1a0b0a1a1((SPropertyOperations.getString(propertyValue))))) {
        return false;
      }
      if ((SPropertyOperations.getString(propertyValue)).equals("binary")) {
        return true;
      }
      try {
        Charset.forName((SPropertyOperations.getString(propertyValue)));
        return true;
      }
 catch (      IllegalArgumentException uc) {
        return false;
      }
    }
  }
);
  return properties;
}
