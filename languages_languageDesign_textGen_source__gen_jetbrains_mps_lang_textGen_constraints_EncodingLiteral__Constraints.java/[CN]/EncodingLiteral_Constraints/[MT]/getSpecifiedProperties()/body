{
  Map<SProperty,PropertyConstraintsDescriptor> properties=new HashMap<SProperty,PropertyConstraintsDescriptor>();
  properties.put(MetaAdapterFactory.getProperty(0xb83431fe5c8f40bcL,0x8a3665e25f4dd253L,0x63754d97e1c86b8cL,0x63754d97e1c86b8dL,"encoding"),new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xb83431fe5c8f40bcL,0x8a3665e25f4dd253L,0x63754d97e1c86b8cL,0x63754d97e1c86b8dL),this){
    @Override public boolean hasOwnValidator(){
      return true;
    }
    @Override public boolean validateValue(    SNode node,    String propertyValue){
      String propertyName="encoding";
      if (isEmptyString(trim_p9uqyx_a0a0a1a1a0b0a1a1((SPropertyOperations.getString(propertyValue))))) {
        return false;
      }
      if ((SPropertyOperations.getString(propertyValue)).equals("binary")) {
        return true;
      }
      try {
        Charset.forName((SPropertyOperations.getString(propertyValue)));
        return true;
      }
 catch (      IllegalArgumentException uc) {
        return false;
      }
    }
  }
);
  return properties;
}
