{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.plugin.structure.ActionParameter");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return ListSequence.fromListAndArray(new ArrayList<SNode>(),new QueriesGenerated.QuotationClass_x583g4_a1a0a0a0a0a0c0a0b0d().createNode(),new QueriesGenerated.QuotationClass_x583g4_a2a0a0a0a0a0c0a0b0d().createNode(),new QueriesGenerated.QuotationClass_x583g4_a3a0a0a0a0a0c0a0b0d().createNode());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.lang.plugin.structure.ActionParameterDeclaration",null);
              SLinkOperations.setTarget(result,"type",(item),true);
              return result;
            }
            public String getDescriptionText(            String pattern){
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SNodeType")) {
                return "current node";
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SNodeListType")) {
                return "current nodes";
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.lang.smodel.structure.SModelType")) {
                return "current model";
              }
              return "";
            }
          }
);
        }
      }
    }
  }
  return result;
}
