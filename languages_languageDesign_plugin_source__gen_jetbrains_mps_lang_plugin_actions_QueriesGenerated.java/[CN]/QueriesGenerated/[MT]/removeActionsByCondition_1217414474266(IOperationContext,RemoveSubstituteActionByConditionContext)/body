{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type");
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        boolean isNode=SConceptOperations.isExactly(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType"));
        boolean isNList=SConceptOperations.isExactly(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10aae26be32L,"jetbrains.mps.lang.smodel.structure.SNodeListType"));
        boolean isModel=SConceptOperations.isExactly(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10a2d94c0cdL,"jetbrains.mps.lang.smodel.structure.SModelType"));
        return !((isNode || isNList || isModel));
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(applicableConcept),SNodeOperations.asSConcept(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
