{
  Map<Node,Integer> components=ConnectivityComponents.getComponents(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    if (MapSequence.fromMap(components).get(node) != 0) {
      throw new RuntimeException("graph isn't connected!!!");
    }
  }
  myGraph=graph;
  myNumbering=GraphOrientation.orientST(graph);
  PQPlanarityTest pqPlanarityTest=new PQPlanarityTest();
  Set<Edge> removed=pqPlanarityTest.removeEdgesToPlanarity(graph,myNumbering);
  if (SHOW_LOG > 0) {
    System.out.println("removed edges:");
    System.out.println(removed);
  }
  if (SetSequence.fromSet(removed).count() == 0) {
    return pqPlanarityTest.getEmbedding(graph,myNumbering);
  }
 else {
    for (    Edge edge : SetSequence.fromSet(removed)) {
      edge.removeFromGraph();
    }
    BiconnectedComponent tree=BiconnectedComponent.createTree(graph);
    if (SHOW_LOG > 0) {
      System.out.println(tree.toString(""));
    }
    EmbeddedGraph embeddedGraph=createEmbedding(tree);
    for (    Edge edge : SetSequence.fromSet(removed)) {
      edge.addToGraph();
    }
    return embeddedGraph;
  }
}
