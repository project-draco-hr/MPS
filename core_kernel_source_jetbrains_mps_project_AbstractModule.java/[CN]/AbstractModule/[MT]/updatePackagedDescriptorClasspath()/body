{
  if (!isPackaged())   return;
  ModuleDescriptor descriptor=getModuleDescriptor();
  if (descriptor == null)   return;
  IFile bundleHomeFile=getBundleHome();
  if (bundleHomeFile == null)   return;
  IFile bundleParent=bundleHomeFile.getParent();
  if (bundleParent == null || !bundleParent.exists())   return;
  String packagedSourcesPath=bundleHomeFile.getPath();
  if (packagedSourcesPath.endsWith(".jar")) {
    packagedSourcesPath=(packagedSourcesPath.substring(0,packagedSourcesPath.length() - 4) + "-src.jar!/").toLowerCase();
  }
 else {
    packagedSourcesPath=null;
  }
  if (addBundleAsLibrary() && descriptor.getDeploymentDescriptor() != null) {
    descriptor.getDeploymentDescriptor().getLibraries().add(bundleHomeFile.getName());
  }
  List<ModelRoot> toRemove=new ArrayList<ModelRoot>();
  for (  ModelRoot sme : descriptor.getStubModelEntries()) {
    String path=sme.getPath();
    if (packagedSourcesPath == null || !FileUtil.getCanonicalPath(path).toLowerCase().startsWith(packagedSourcesPath)) {
      String shrinked=MacrosFactory.moduleDescriptor(this).shrinkPath(path,getDescriptorFile());
      if (MacrosFactory.containsNonMPSMacros(shrinked))       continue;
    }
    toRemove.add(sme);
  }
  descriptor.getStubModelEntries().removeAll(toRemove);
  descriptor.getModelRoots().removeAll(toRemove);
  DeploymentDescriptor dd=descriptor.getDeploymentDescriptor();
  if (dd == null)   return;
  for (  String jarFile : dd.getLibraries()) {
    IFile jar=jarFile.startsWith("/") ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile) : bundleParent.getDescendant(jarFile);
    if (jar.exists()) {
      ClassPathEntry jarEntry=new ClassPathEntry();
      jarEntry.setPath(jar.getPath());
      ModelRoot mr=jetbrains.mps.project.structure.model.ModelRootUtil.fromClassPathEntry(jarEntry);
      descriptor.getStubModelEntries().add(mr);
      descriptor.getModelRoots().add(mr);
    }
  }
}
