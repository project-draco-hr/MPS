{
  if (!isPackaged())   return;
  ModuleDescriptor descriptor=getModuleDescriptor();
  if (descriptor == null)   return;
  IFile bundleHomeFile=getBundleHome();
  if (bundleHomeFile == null)   return;
  IFile bundleParent=bundleHomeFile.getParent();
  if (bundleParent == null || !bundleParent.exists())   return;
  List<ModelRoot> toRemove=new ArrayList<ModelRoot>();
  for (  ModelRoot sme : descriptor.getStubModelEntries()) {
    String path=sme.getPath();
    String shrinked=MacrosFactory.moduleDescriptor(this).shrinkPath(path,getDescriptorFile());
    if (MacrosFactory.containsNonMPSMacros(shrinked))     continue;
    toRemove.add(sme);
  }
  descriptor.getStubModelEntries().removeAll(toRemove);
  DeploymentDescriptor dd=descriptor.getDeploymentDescriptor();
  if (dd == null)   return;
  for (  String jarFile : dd.getLibraries()) {
    IFile jar=jarFile.startsWith("/") ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile) : bundleParent.getDescendant(jarFile);
    if (jar.exists()) {
      ClassPathEntry jarEntry=new ClassPathEntry();
      jarEntry.setPath(jar.getPath());
      descriptor.getStubModelEntries().add(jetbrains.mps.project.structure.model.ModelRootUtil.fromClassPathEntry(jarEntry));
    }
  }
}
