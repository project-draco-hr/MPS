{
  if (!isPackaged())   return;
  ModuleDescriptor descriptor=getModuleDescriptor();
  if (descriptor == null)   return;
  final IFile bundleHomeFile=getBundleHome();
  if (bundleHomeFile == null)   return;
  IFile bundleParent=bundleHomeFile.getParent();
  if (bundleParent == null || !bundleParent.exists())   return;
  String packagedSourcesPath=bundleHomeFile.getPath();
  if (packagedSourcesPath.endsWith(".jar")) {
    packagedSourcesPath=(packagedSourcesPath.substring(0,packagedSourcesPath.length() - 4) + "-src.jar!/").toLowerCase();
  }
 else {
    packagedSourcesPath=null;
  }
  boolean addBundleAsModelRoot=false;
  final DeploymentDescriptor dd=descriptor.getDeploymentDescriptor();
  String libPath=dd == null ? FileUtil.getCanonicalPath(PathManager.getHomePath() + File.separator + "lib").toLowerCase() : null;
  List<String> toRemovePaths=new ArrayList<String>();
  for (  String path : descriptor.getAdditionalJavaStubPaths()) {
    String canonicalPath=FileUtil.getCanonicalPath(path).toLowerCase();
    if (packagedSourcesPath == null || !canonicalPath.startsWith(packagedSourcesPath)) {
      String shrinked=MacrosFactory.forModuleFile(getDescriptorFile()).shrinkPath(path);
      if (MacrosFactory.containsNonMPSMacros(shrinked))       continue;
    }
    if (dd == null && canonicalPath.startsWith(libPath)) {
      continue;
    }
    toRemovePaths.add(path);
  }
  descriptor.getAdditionalJavaStubPaths().removeAll(toRemovePaths);
  List<ModelRoot> toRemove=new ArrayList<ModelRoot>();
  for (  ModelRoot sme : descriptor.getModelRoots()) {
    if (!LanguageID.JAVA_MANAGER.equals(sme.getManager()))     continue;
    String path=sme.getPath();
    String canonicalPath=FileUtil.getCanonicalPath(path).toLowerCase();
    String suffix=descriptor.getCompileInMPS() ? "classes_gen" : "classes";
    if (canonicalPath.endsWith(suffix)) {
      IFile parent=dd == null ? getDescriptorFile().getParent() : ModulesMiner.getRealDescriptorFile(getDescriptorFile().getPath(),dd);
      if (dd != null && parent != null) {
        parent=parent.getParent();
      }
      IFile classes=parent != null ? parent.getDescendant(suffix) : null;
      addBundleAsModelRoot=classes != null && FileUtil.getCanonicalPath(classes.getPath()).equalsIgnoreCase(canonicalPath);
    }
 else     if (FileUtil.getCanonicalPath(bundleHomeFile.getPath()).equalsIgnoreCase(canonicalPath)) {
      addBundleAsModelRoot=true;
    }
    if (packagedSourcesPath == null || !canonicalPath.startsWith(packagedSourcesPath)) {
      String shrinked=MacrosFactory.forModuleFile(getDescriptorFile()).shrinkPath(path);
      if (MacrosFactory.containsNonMPSMacros(shrinked))       continue;
    }
    if (dd == null && canonicalPath.startsWith(libPath)) {
      continue;
    }
    toRemove.add(sme);
  }
  descriptor.getModelRoots().removeAll(toRemove);
  if (addBundleAsModelRoot) {
    ModelRoot mr=new ModelRoot();
    mr.setPath(bundleHomeFile.getPath());
    mr.setManager(LanguageID.JAVA_MANAGER);
    if (!descriptor.getModelRoots().contains(mr)) {
      descriptor.getModelRoots().add(mr);
    }
  }
  if (dd == null) {
    return;
  }
  for (  String jarFile : dd.getLibraries()) {
    IFile jar=jarFile.startsWith("/") ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile) : bundleParent.getDescendant(jarFile);
    if (jar.exists()) {
      ModelRoot mr=new ModelRoot();
      mr.setPath(jar.getPath());
      mr.setManager(LanguageID.JAVA_MANAGER);
      descriptor.getAdditionalJavaStubPaths().add(mr.getPath());
      descriptor.getModelRoots().add(mr);
    }
  }
}
