{
  StringBuilder result=new StringBuilder();
  IFile descriptor=getDescriptorFile();
  if (descriptor == null) {
    return "";
  }
  String basePath=descriptor.getParent().getCanonicalPath();
  List<String> classpath=getClassPath();
  String classesGen=getClassesGen().getCanonicalPath();
  if (!classpath.contains(classesGen)) {
    classpath.add(classesGen);
  }
  Iterator<String> it=classpath.iterator();
  while (it.hasNext()) {
    String s=it.next();
    if (FileSystem.getFile(s).isDirectory()) {
      s+="/";
    }
    if (getPathRelativeTo(s,basePath) == null) {
      it.remove();
    }
  }
  for (int i=0; i < classpath.size(); i++) {
    String s=classpath.get(i);
    if (FileSystem.getFile(s).isDirectory()) {
      s+="/";
    }
    String relativePath=getPathRelativeTo(s,basePath);
    relativePath=relativePath.replace(File.separatorChar,'/');
    result.append("  ").append(relativePath);
    if (i != classpath.size() - 1) {
      result.append(",");
    }
    result.append("\n");
  }
  return result.toString();
}
