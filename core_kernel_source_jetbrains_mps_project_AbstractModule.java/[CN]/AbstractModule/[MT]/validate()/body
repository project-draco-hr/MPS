{
  List<String> errors=new ArrayList<String>();
  for (  Dependency dep : getDependOn()) {
    ModuleReference moduleRef=dep.getModuleRef();
    if (MPSModuleRepository.getInstance().getModule(moduleRef) == null) {
      errors.add("Can't find dependency: " + moduleRef.getModuleFqName());
    }
  }
  for (  ModuleReference reference : getUsedLanguagesReferences()) {
    if (MPSModuleRepository.getInstance().getLanguage(reference) == null) {
      errors.add("Can't find used language: " + reference.getModuleFqName());
    }
  }
  for (  ModuleReference reference : getUsedDevkitReferences()) {
    if (MPSModuleRepository.getInstance().getModule(reference) == null) {
      errors.add("Can't find used devkit: " + reference.getModuleFqName());
    }
  }
  if (getModuleDescriptor() != null) {
    if (getModuleDescriptor().getSourcePaths() != null && !isPackaged()) {
      for (      String sourcePath : getModuleDescriptor().getSourcePaths()) {
        VirtualFile vfile=VFileSystem.getFile(sourcePath);
        if (vfile == null || !vfile.exists()) {
          errors.add("Can't find source path: " + sourcePath);
        }
      }
    }
    if (getModuleDescriptor().getStubModelEntries() != null) {
      for (      StubModelsEntry stubModelsEntry : getModuleDescriptor().getStubModelEntries()) {
        VirtualFile vfile=VFileSystem.getFile(stubModelsEntry.getPath());
        if (vfile == null || !vfile.exists()) {
          errors.add("Can't find library: " + stubModelsEntry.getPath());
        }
      }
    }
  }
  return errors;
}
