{
  if (!isPackaged())   return;
  ModuleDescriptor descriptor=getModuleDescriptor();
  DeploymentDescriptor dd=descriptor.getDeploymentDescriptor();
  if (descriptor == null || dd == null)   return;
  final IFile bundleHomeFile=FileSystem.getInstance().getBundleHome(getDescriptorFile());
  if (bundleHomeFile == null)   return;
  IFile bundleParent=bundleHomeFile.getParent();
  if (bundleParent == null || !bundleParent.exists())   return;
  String packagedSourcesPath=getModuleSourceDir() != null ? getModuleSourceDir().getPath() : null;
  boolean addBundleAsModelRoot=false;
  List<String> toRemovePaths=new ArrayList<String>();
  for (  String path : descriptor.getAdditionalJavaStubPaths()) {
    String canonicalPath=FileUtil.getCanonicalPath(path).toLowerCase();
    if (packagedSourcesPath == null || !canonicalPath.startsWith(packagedSourcesPath)) {
      String shrinked=MacrosFactory.forModule(this).shrinkPath(path);
      if (MacrosFactory.containsNonMPSMacros(shrinked))       continue;
    }
    toRemovePaths.add(path);
  }
  descriptor.getAdditionalJavaStubPaths().removeAll(toRemovePaths);
  List<ModelRootDescriptor> toRemove=new ArrayList<ModelRootDescriptor>();
  for (  ModelRootDescriptor mrd : descriptor.getModelRootDescriptors()) {
    if (!mrd.getType().equals(PersistenceRegistry.JAVA_CLASSES_ROOT))     continue;
    String path=mrd.getMemento().get("path");
    String canonicalPath=FileUtil.getCanonicalPath(path).toLowerCase();
    String suffix=descriptor.getCompileInMPS() ? CLASSES_GEN : CLASSES;
    if (canonicalPath.endsWith(suffix)) {
      IFile originalDescriptorFile=ModulesMiner.getRealDescriptorFile(getDescriptorFile().getPath(),dd);
      MacroHelper macroHelper=MacrosFactory.forModuleFile(originalDescriptorFile != null ? originalDescriptorFile : getDescriptorFile());
      String classes=macroHelper.expandPath("${module}/" + suffix);
      addBundleAsModelRoot=FileUtil.getCanonicalPath(classes).equalsIgnoreCase(canonicalPath);
    }
 else     if (FileUtil.getCanonicalPath(bundleHomeFile.getPath()).equalsIgnoreCase(canonicalPath)) {
      addBundleAsModelRoot=true;
    }
    if (packagedSourcesPath == null || !canonicalPath.startsWith(packagedSourcesPath)) {
      String shrinked=MacrosFactory.forModule(this).shrinkPath(path);
      if (MacrosFactory.containsNonMPSMacros(shrinked))       continue;
    }
    toRemove.add(mrd);
  }
  descriptor.getModelRootDescriptors().removeAll(toRemove);
  if (addBundleAsModelRoot) {
    descriptor.getModelRootDescriptors().add(ModelRootDescriptor.getJavaStubsModelRoot(bundleHomeFile.getPath()));
  }
  for (  String jarFile : dd.getLibraries()) {
    IFile jar=jarFile.startsWith("/") ? FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + jarFile) : bundleParent.getDescendant(jarFile);
    if (jar.exists()) {
      String path=jar.getPath();
      descriptor.getAdditionalJavaStubPaths().add(path);
      descriptor.getModelRootDescriptors().add(ModelRootDescriptor.getJavaStubsModelRoot(path));
    }
  }
}
