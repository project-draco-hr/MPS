{
  SNode module=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module");
  Iterable<ModelRootDescriptor> modelRoots=myModuleDescriptor.getModelRootDescriptors();
  boolean hasModels=false;
  if (myModuleDescriptor instanceof LanguageDescriptor) {
    Iterable<GeneratorDescriptor> generators=((LanguageDescriptor)myModuleDescriptor).getGenerators();
    modelRoots=Sequence.fromIterable(modelRoots).concat(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor,ModelRootDescriptor>(){
      public Iterable<ModelRootDescriptor> translate(      GeneratorDescriptor it){
        return it.getModelRootDescriptors();
      }
    }
));
  }
  for (  ModelRootDescriptor modelRootDescriptor : modelRoots) {
    if (!(PersistenceRegistry.DEFAULT_MODEL_ROOT.equals(modelRootDescriptor.getType()))) {
      continue;
    }
    DefaultModelRoot mr=new DefaultModelRoot();
    mr.load(modelRootDescriptor.getMemento());
    for (    String path : mr.getFiles(DefaultModelRoot.SOURCE_ROOTS)) {
      if (path == null) {
        continue;
      }
      SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
      if (p == null) {
        continue;
      }
      if (!(checkOnly)) {
        SNode mroot=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot",null);
        SLinkOperations.setTarget(mroot,"folder",p,true);
        ListSequence.fromList(SLinkOperations.getTargets(module,"sources",true)).addElement(mroot);
      }
      hasModels=true;
    }
  }
  List<String> res=new ArrayList<String>();
  for (  String sp : myModuleDescriptor.getSourcePaths()) {
    res.add(sp);
  }
  String genPath=null;
  if (!(SNodeOperations.isInstanceOf(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Solution")) || hasModels) {
    IFile genPathFile=ProjectPathUtil.getGeneratorOutputPath(myModuleSourceDir,myModuleDescriptor);
    if (genPathFile != null) {
      genPath=genPathFile.getPath();
      res.add(genPath);
    }
  }
  boolean doNotCompile=myModuleDescriptor instanceof SolutionDescriptor && (!(((SolutionDescriptor)myModuleDescriptor).getCompileInMPS()) || res.isEmpty());
  if (checkOnly && importOnly) {
    SPropertyOperations.set(module,"doNotCompile","" + (doNotCompile));
  }
 else   if (SPropertyOperations.getBoolean(module,"doNotCompile") != doNotCompile) {
    report("compile in MPS flag doesn't match file content " + SPropertyOperations.getString(myModule,"name") + ", should be: "+ doNotCompile,myOriginalModule);
  }
  if (checkOnly) {
    return;
  }
  for (  String path : res) {
    SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
    if (p == null) {
      continue;
    }
    SNode javaSource=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource",null);
    SLinkOperations.setTarget(javaSource,"folder",SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildInputSingleFolder",null),true);
    SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(javaSource,"folder",true),"jetbrains.mps.build.structure.BuildInputSingleFolder"),"path",p,true);
    SPropertyOperations.set(javaSource,"isGenerated","" + (path.equals(genPath)));
    ListSequence.fromList(SLinkOperations.getTargets(module,"sources",true)).addElement(javaSource);
  }
}
