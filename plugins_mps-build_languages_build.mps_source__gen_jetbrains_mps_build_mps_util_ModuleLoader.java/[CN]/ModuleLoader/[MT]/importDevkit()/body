{
  DevkitDescriptor descriptor=((DevkitDescriptor)myModuleDescriptor);
  SNode devkit=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_DevKit");
  List<SNode> prevExt=ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(devkit,"extends",true));
  List<SNode> prevExp=ListSequence.fromListWithValues(new ArrayList<SNode>(),SLinkOperations.getTargets(devkit,"exports",true));
  for (  ModuleReference module : descriptor.getExtendedDevkits()) {
    final SNode resolved=SNodeOperations.as(visible.resolve(module.getModuleFqName(),module.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_DevKit");
    if (resolved == null) {
      report("cannot find devkit in dependencies: " + module.getModuleFqName(),myModule);
      continue;
    }
    SNode ul=ListSequence.fromList(prevExt).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SLinkOperations.getTarget(it,"devkit",false) == resolved;
      }
    }
);
    if (ul == null) {
      ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitRef",null);
      SLinkOperations.setTarget(ul,"devkit",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(devkit,"extends",true)).addElement(ul);
    }
 else {
      ListSequence.fromList(prevExt).removeElement(ul);
    }
  }
  for (  ModuleReference module : descriptor.getExportedLanguages()) {
    final SNode resolved=SNodeOperations.as(visible.resolve(module.getModuleFqName(),module.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find exported languages in dependencies: " + module.getModuleFqName(),myModule);
      continue;
    }
    SNode ul=SNodeOperations.as(ListSequence.fromList(prevExp).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage"),"language",false) == resolved;
      }
    }
),"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage");
    if (ul == null) {
      ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage",null);
      SLinkOperations.setTarget(ul,"language",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(devkit,"exports",true)).addElement(ul);
    }
 else {
      ListSequence.fromList(prevExp).removeElement(ul);
    }
  }
  for (  ModuleReference module : descriptor.getExportedSolutions()) {
    final SNode resolved=SNodeOperations.as(visible.resolve(module.getModuleFqName(),module.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Solution");
    if (resolved == null) {
      report("cannot find exported solution in dependencies: " + module.getModuleFqName(),myModule);
      continue;
    }
    SNode ul=SNodeOperations.as(ListSequence.fromList(prevExp).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution"),"solution",false) == resolved;
      }
    }
),"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution");
    if (ul == null) {
      ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution",null);
      SLinkOperations.setTarget(ul,"solution",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(devkit,"exports",true)).addElement(ul);
    }
 else {
      ListSequence.fromList(prevExp).removeElement(ul);
    }
  }
  ListSequence.fromList(SLinkOperations.getTargets(devkit,"extends",true)).removeSequence(ListSequence.fromList(prevExt));
  ListSequence.fromList(SLinkOperations.getTargets(devkit,"exports",true)).removeSequence(ListSequence.fromList(prevExp));
}
