{
  LanguageDescriptor descriptor=((LanguageDescriptor)myModuleDescriptor);
  boolean importsCore=false;
  boolean importsDescriptor=false;
  for (  ModuleReference lang : descriptor.getExtendedLanguages()) {
    if (!(importsCore) && CORE_LANGUAGE_UID.equals(lang.getModuleId().toString())) {
      importsCore=true;
    }
    if (!(importsDescriptor) && DESCRIPTOR_LANGUAGE_UID.equals(lang.getModuleId().toString())) {
      importsDescriptor=true;
    }
    final SNode resolved=SNodeOperations.as(visible.resolve(lang.getModuleName(),lang.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find extended language in dependencies: " + lang.getModuleName(),myModule);
      continue;
    }
    if (!(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language"),"dependencies",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        SNode em=SNodeOperations.as(it,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency");
        return em != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(em,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage") && asOriginal(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(em,"dependency",true),"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage"),"language",false)) == resolved;
      }
    }
))) {
      report("extends language dependency should be extracted into build script: " + lang.toString(),myOriginalModule);
    }
  }
  if (!(importsCore) && !(checkOnly)) {
    SNode resolved=SNodeOperations.as(visible.resolve("jetbrains.mps.lang.core",CORE_LANGUAGE_UID),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find jetbrains.mps.lang.core language in dependencies for " + SPropertyOperations.getString(myModule,"name"),myModule);
    }
 else {
      SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage",null);
      SLinkOperations.setTarget(ul,"language",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module"),"dependencies",true)).addElement(ul);
    }
  }
  if (!(importsDescriptor) && !(checkOnly)) {
    SNode resolved=SNodeOperations.as(visible.resolve("jetbrains.mps.lang.descriptor",DESCRIPTOR_LANGUAGE_UID),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find jetbrains.mps.lang.descriptor language in dependencies for " + SPropertyOperations.getString(myModule,"name"),myModule);
    }
 else {
      SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage",null);
      SLinkOperations.setTarget(ul,"language",resolved,false);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module"),"dependencies",true)).addElement(ul);
    }
  }
  String langName=myModuleDescriptor.getModuleReference().getModuleName();
  for (  GeneratorDescriptor generator : descriptor.getGenerators()) {
    String generatorName=generator.getGeneratorUID();
    if (generatorName != null && !(generatorName.startsWith(langName + "#"))) {
      report("wrong generator name `" + generatorName + "', should start with `"+ langName+ "#'",myOriginalModule);
    }
  }
}
