{
  SNode module=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module");
  Iterable<Dependency> dependencies=myModuleDescriptor.getDependencies();
  if (myModuleDescriptor instanceof LanguageDescriptor) {
    Iterable<GeneratorDescriptor> generators=((LanguageDescriptor)myModuleDescriptor).getGenerators();
    dependencies=Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor,Dependency>(){
      public Iterable<Dependency> translate(      GeneratorDescriptor it){
        return it.getDependencies();
      }
    }
));
  }
  Set<SNode> seen=new HashSet<SNode>();
  for (  Dependency dep : dependencies) {
    boolean reexport=dep.isReexport();
    if (!(reexport)) {
      continue;
    }
    ModuleReference moduleRef=dep.getModuleRef();
    SNode resolved;
    String targetName=moduleRef.getModuleFqName();
    int sharpIndex=targetName.indexOf("#");
    if (sharpIndex >= 0) {
      resolved=SNodeOperations.as(visible.resolve(targetName.substring(0,sharpIndex),null),"jetbrains.mps.build.mps.structure.BuildMps_Module");
      if (resolved == null) {
        report("cannot resolve reference on generator's containing language by module name: " + targetName,myOriginalModule);
        continue;
      }
    }
 else {
      resolved=SNodeOperations.as(visible.resolve(targetName,moduleRef.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Module");
      if (resolved == null) {
        report("unsatisfied dependency: " + dep.getModuleRef().toString(),myOriginalModule);
        continue;
      }
    }
    if (!(seen.add(resolved))) {
      continue;
    }
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule",null);
    SLinkOperations.setTarget(res,"module",resolved,false);
    SPropertyOperations.set(res,"reexport","" + reexport);
    SNode extr=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency",null);
    SLinkOperations.setTarget(extr,"dependency",res,true);
    ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).addElement(extr);
  }
  for (  ModelRoot entry : myModuleDescriptor.getStubModelEntries()) {
    if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {
      continue;
    }
    String path=entry.getPath();
    SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
    if (p == null) {
      continue;
    }
    if (path.endsWith(".jar")) {
      SNode jar=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar",null);
      SLinkOperations.setTarget(jar,"path",p,true);
      SNode extr=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency",null);
      SLinkOperations.setTarget(extr,"dependency",jar,true);
      ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).addElement(extr);
    }
 else {
      report("only jar stub libraries are supported, found: " + path,myOriginalModule);
    }
  }
}
