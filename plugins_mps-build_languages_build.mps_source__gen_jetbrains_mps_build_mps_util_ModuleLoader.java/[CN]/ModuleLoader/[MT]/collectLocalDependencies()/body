{
  SNode module=SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module");
  Iterable<SModuleReference> usedLanguages=myModuleDescriptor.getUsedLanguages();
  Iterable<SModuleReference> usedDevkits=myModuleDescriptor.getUsedDevkits();
  if (myModuleDescriptor instanceof LanguageDescriptor) {
    Iterable<GeneratorDescriptor> generators=((LanguageDescriptor)myModuleDescriptor).getGenerators();
    usedLanguages=Sequence.fromIterable(usedLanguages).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor,SModuleReference>(){
      public Iterable<SModuleReference> translate(      GeneratorDescriptor it){
        return it.getUsedLanguages();
      }
    }
));
    usedDevkits=Sequence.fromIterable(usedDevkits).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor,SModuleReference>(){
      public Iterable<SModuleReference> translate(      GeneratorDescriptor it){
        return it.getUsedDevkits();
      }
    }
));
  }
  for (  SModuleReference lang : usedLanguages) {
    SNode resolved=SNodeOperations.as(myVisibleModules.resolve(lang.getModuleName(),lang.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Language");
    if (resolved == null) {
      report("cannot find used language in dependencies: " + lang.getModuleName(),myModule);
      continue;
    }
    SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage",null);
    SLinkOperations.setTarget(ul,"language",resolved,false);
    ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).addElement(ul);
  }
  for (  SModuleReference devkit : usedDevkits) {
    SNode resolved=SNodeOperations.as(myVisibleModules.resolve(devkit.getModuleName(),devkit.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_DevKit");
    if (resolved == null) {
      report("cannot find used devkit in dependencies: " + devkit.getModuleName(),myModule);
      continue;
    }
    SNode ud=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit",null);
    SLinkOperations.setTarget(ud,"devkit",resolved,false);
    ListSequence.fromList(SLinkOperations.getTargets(module,"dependencies",true)).addElement(ud);
  }
}
