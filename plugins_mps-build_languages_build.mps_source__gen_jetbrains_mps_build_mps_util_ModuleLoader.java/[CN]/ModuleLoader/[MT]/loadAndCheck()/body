{
  SPropertyOperations.set(myModule,"compact","" + (false));
  if (myModuleDescriptor == null) {
    return;
  }
  if (!(myChecker.checkModuleReference(ModuleChecker.CheckType.LOAD_ALL))) {
    return;
  }
  if (SNodeOperations.isInstanceOf(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language")) {
    if (!(myModuleDescriptor instanceof LanguageDescriptor)) {
      report("imported file is not a language file " + SPropertyOperations.getString(myModule,"name"),myOriginalModule);
      return;
    }
    myChecker.checkLanguage(ModuleChecker.CheckType.LOAD_ALL,null);
    loadGenerators();
  }
 else   if (SNodeOperations.isInstanceOf(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Solution")) {
    if (!(myModuleDescriptor instanceof SolutionDescriptor)) {
      report("imported file is not a solution file " + SPropertyOperations.getString(myModule,"name"),myOriginalModule);
      return;
    }
  }
 else   if (SNodeOperations.isInstanceOf(myModule,"jetbrains.mps.build.mps.structure.BuildMps_DevKit")) {
    if (!(myModuleDescriptor instanceof DevkitDescriptor)) {
      report("imported file is not a devkit file " + SPropertyOperations.getString(myModule,"name"),myOriginalModule);
      return;
    }
    myChecker.checkDevkit(ModuleChecker.CheckType.LOAD_ALL);
  }
  if (SNodeOperations.isInstanceOf(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Module")) {
    myChecker.collectDependencies(ModuleChecker.CheckType.LOAD_ALL,null);
    collectLocalDependencies();
    myChecker.collectSources(ModuleChecker.CheckType.LOAD_ALL);
    optimizeDeps();
  }
}
