{
  LanguageDescriptor descriptor=((LanguageDescriptor)myModuleDescriptor);
  for (  ModuleReference module : descriptor.getRuntimeModules()) {
    SNode resolved=SNodeOperations.as(visible.resolve(module.getModuleFqName(),module.getModuleId().toString()),"jetbrains.mps.build.mps.structure.BuildMps_Solution");
    if (resolved == null) {
      report("cannot find runtime solution in dependencies: " + module.getModuleFqName(),myModule);
      continue;
    }
    SNode ul=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime",null);
    SLinkOperations.setTarget(ul,"solution",resolved,false);
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language"),"runtime",true)).addElement(ul);
  }
  for (  ModelRoot entry : descriptor.getRuntimeStubModels()) {
    if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {
      continue;
    }
    String path=entry.getPath();
    SNode p=ListSequence.fromList(convertPath(path,myOriginalModule)).first();
    if (p == null) {
      continue;
    }
    if (path.endsWith(".jar")) {
      SNode jar=SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime",null);
      SLinkOperations.setTarget(jar,"path",p,true);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule,"jetbrains.mps.build.mps.structure.BuildMps_Language"),"runtime",true)).addElement(jar);
    }
 else {
      report("only jar runtimes are supported in runtime stubs, found: " + path,myOriginalModule);
    }
  }
}
