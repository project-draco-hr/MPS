{
  Set<IRefactoring> result=new HashSet<IRefactoring>();
{
    SModelDescriptor scriptsModelDescriptor=LanguageAspect.SCRIPTS.get(language);
    if (scriptsModelDescriptor != null) {
      SModel scriptsModel=scriptsModelDescriptor.getSModel();
      String packageName=scriptsModel.getLongName();
      for (      OldRefactoring refactoring : scriptsModel.getRootsAdapters(OldRefactoring.class)) {
        try {
          String fqName=packageName + "." + refactoring.getName();
          Class<AbstractLoggableRefactoring> cls=language.getClass(fqName);
          if (cls == null) {
            LOG.error("Can't find " + fqName);
            continue;
          }
          Constructor<AbstractLoggableRefactoring> constructor=cls.getConstructor();
          constructor.setAccessible(false);
          AbstractLoggableRefactoring oldRefactoring=constructor.newInstance();
          result.add(OldRefactoringAdapter.createAdapterFor(oldRefactoring));
        }
 catch (        Throwable t) {
          LOG.error(t);
        }
      }
    }
  }
  SModelDescriptor refModelDescriptor=LanguageAspect.REFACTORINGS.get(language);
  if (refModelDescriptor != null) {
    SModel refactoringsModel=refModelDescriptor.getSModel();
    String packageName=refactoringsModel.getLongName();
    for (    Refactoring refactoring : refactoringsModel.getRootsAdapters(Refactoring.class)) {
      try {
        String fqName=packageName + "." + refactoring.getName();
        Class<IRefactoring> cls=language.getClass(fqName);
        if (cls == null) {
          LOG.error("Can't find " + fqName);
          continue;
        }
        Constructor<IRefactoring> constructor=cls.getConstructor();
        constructor.setAccessible(false);
        result.add(constructor.newInstance());
      }
 catch (      Throwable t) {
        LOG.error(t);
      }
    }
  }
  return result;
}
