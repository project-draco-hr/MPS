{
  Set<IRefactoring> result=new HashSet<IRefactoring>();
  SModel refModelDescriptor=SModuleOperations.getAspect(language,"refactorings");
  if (refModelDescriptor != null) {
    SModel refactoringsModel=refModelDescriptor;
    String packageName=SNodeOperations.getModelLongName(refactoringsModel);
    for (    SNode refactoring : SModelOperations.roots(refactoringsModel,MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL,0x886c135ecc69b742L,0x5fb04b74a778e245L,"jetbrains.mps.lang.refactoring.structure.Refactoring"))) {
      try {
        String fqName=packageName + "." + SPropertyOperations.getString(refactoring,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        Class<IRefactoring> cls=null;
        try {
          cls=((Class<IRefactoring>)language.getOwnClass(fqName));
        }
 catch (        ClassNotFoundException e) {
        }
        if (cls == null) {
          if (LOG_1635700302.isEnabledFor(Level.WARN)) {
            LOG_1635700302.warn("Can't find class " + fqName + " for refactoring. Refactoring disabled.");
          }
          continue;
        }
        Constructor<IRefactoring> constructor=cls.getConstructor();
        constructor.setAccessible(false);
        result.add(constructor.newInstance());
      }
 catch (      InstantiationException e) {
        if (LOG_1635700302.isEnabledFor(Level.ERROR)) {
          LOG_1635700302.error("",e);
        }
      }
catch (      InvocationTargetException e) {
        if (LOG_1635700302.isEnabledFor(Level.ERROR)) {
          LOG_1635700302.error("",e);
        }
      }
catch (      IllegalAccessException e) {
        if (LOG_1635700302.isEnabledFor(Level.ERROR)) {
          LOG_1635700302.error("",e);
        }
      }
catch (      NoSuchMethodException e) {
        if (LOG_1635700302.isEnabledFor(Level.ERROR)) {
          LOG_1635700302.error("",e);
        }
      }
    }
  }
  return result;
}
