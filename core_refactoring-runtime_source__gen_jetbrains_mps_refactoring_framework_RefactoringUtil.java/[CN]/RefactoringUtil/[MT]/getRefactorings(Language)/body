{
  Set<IRefactoring> result=new HashSet<IRefactoring>();
{
    SModel scriptsModelDescriptor=LanguageAspect.SCRIPTS.get(language);
    if (scriptsModelDescriptor != null) {
      SModel scriptsModel=scriptsModelDescriptor;
      String packageName=SNodeOperations.getModelLongName(scriptsModel);
      for (      SNode refactoring : SModelOperations.getRoots(scriptsModel,"jetbrains.mps.lang.refactoring.structure.OldRefactoring")) {
        try {
          String fqName=packageName + "." + SPropertyOperations.getString(refactoring,"name");
          Class<AbstractLoggableRefactoring> cls=ClassLoaderManager.getInstance().getClass(language,fqName);
          if (cls == null) {
            LOG.error("Can't find " + fqName);
            continue;
          }
          Constructor<AbstractLoggableRefactoring> constructor=cls.getConstructor();
          constructor.setAccessible(false);
          AbstractLoggableRefactoring oldRefactoring=constructor.newInstance();
          result.add(OldRefactoringAdapter.createAdapterFor(oldRefactoring));
        }
 catch (        Throwable t) {
          LOG.error(t);
        }
      }
    }
  }
  SModel refModelDescriptor=LanguageAspect.REFACTORINGS.get(language);
  if (refModelDescriptor != null) {
    SModel refactoringsModel=refModelDescriptor;
    String packageName=SNodeOperations.getModelLongName(refactoringsModel);
    for (    SNode refactoring : SModelOperations.getRoots(refactoringsModel,"jetbrains.mps.lang.refactoring.structure.Refactoring")) {
      try {
        String fqName=packageName + "." + SPropertyOperations.getString(refactoring,"name");
        Class<IRefactoring> cls=ClassLoaderManager.getInstance().getClass(language,fqName);
        if (cls == null) {
          LOG.error("Can't find " + fqName);
          continue;
        }
        Constructor<IRefactoring> constructor=cls.getConstructor();
        constructor.setAccessible(false);
        result.add(constructor.newInstance());
      }
 catch (      Throwable t) {
        LOG.error(t);
      }
    }
  }
  return result;
}
