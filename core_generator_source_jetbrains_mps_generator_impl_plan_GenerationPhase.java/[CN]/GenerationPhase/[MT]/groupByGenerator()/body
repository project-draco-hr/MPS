{
  LinkedHashMap<TemplateModule,Group> groupByModule=new LinkedHashMap<TemplateModule,Group>();
  LinkedHashMap<Group,Set<TemplateModule>> groupsWithFewModules=new LinkedHashMap<Group,Set<TemplateModule>>();
  ArrayList<Group> step=new ArrayList<Group>();
  Group[] phaseElements=myPhaseElements.toArray(new Group[myPhaseElements.size()]);
  Arrays.sort(phaseElements,new GroupComparator());
  for (  Group g : phaseElements) {
    final Set<TemplateModule> involvedGenerators=getInvolvedGenerators(g);
    if (involvedGenerators.size() == 1) {
      final TemplateModule generator=involvedGenerators.iterator().next();
      Group sameModuleGroup=groupByModule.get(generator);
      groupByModule.put(generator,sameModuleGroup == null ? g : sameModuleGroup.union(g));
    }
 else {
      groupsWithFewModules.put(g,involvedGenerators);
    }
  }
  for (  Entry<Group,Set<TemplateModule>> e : groupsWithFewModules.entrySet()) {
    Group compositeGroup=e.getKey();
    for (    TemplateModule tm : e.getValue()) {
      if (groupByModule.containsKey(tm)) {
        compositeGroup=compositeGroup.union(groupByModule.remove(tm));
      }
    }
    step.add(compositeGroup);
  }
  step.addAll(groupByModule.values());
  return step;
}
