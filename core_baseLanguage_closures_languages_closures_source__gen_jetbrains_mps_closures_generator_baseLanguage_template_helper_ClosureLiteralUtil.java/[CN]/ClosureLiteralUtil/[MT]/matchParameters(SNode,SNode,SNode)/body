{
  Map<String,SNode> map=null;
  List<SNode> imds=SLinkOperations.getTargets(SLinkOperations.getTarget(ctNoParams,"classifier",false),"method",true);
  SNode absRetCT=null;
  if (imds.size() > 0) {
    SNode method=imds.get(0);
    if ((SLinkOperations.getTarget(method,"returnType",true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
      map=ClosureLiteralUtil.matchReturnType(SLinkOperations.getTarget(method,"returnType",true),FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(ft),map);
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        absRetCT=SNodeOperations.copyNode(SLinkOperations.getTarget(method,"returnType",true));
      }
    }
    List<SNode> ptypes=FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(ft);
    int idx=0;
    for (    SNode pd : SLinkOperations.getTargets(method,"parameter",true)) {
      map=ClosureLiteralUtil.matchType(SLinkOperations.getTarget(pd,"type",true),ptypes.get(idx),map);
      idx=idx + 1;
    }
  }
  ((SNode)ctNoParams).putUserObject("typeMap",map);
  if ((absRetCT != null)) {
    SNode ftResCT=FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(ft);
    String adapterName=JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(absRetCT,"classifier",false),"name")) + JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(ftResCT,"classifier",false),"name")) + "Adapter";
    for (    SNode cls : SModelOperations.getNodes(SNodeOperations.getModel(SLinkOperations.getTarget(absRetCT,"classifier",false)),"jetbrains.mps.baseLanguage.structure.Classifier")) {
      if (adapterName.equals(JavaNameUtil.shortName(SPropertyOperations.getString(cls,"name")))) {
        SNode newRetCT=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
        SLinkOperations.setTarget(newRetCT,"classifier",cls,false);
        ((SNode)ctNoParams).putUserObject("returnType",newRetCT);
        break;
      }
    }
  }
  List<SNode> varDecls=SLinkOperations.getTargets(SLinkOperations.getTarget(origCT,"classifier",false),"typeVariableDeclaration",true);
  int idx=0;
  for (  SNode p : SLinkOperations.getTargets(origCT,"parameter",true)) {
    if (SNodeOperations.isInstanceOf(p,"jetbrains.mps.baseLanguage.structure.UpperBoundType") || SNodeOperations.isInstanceOf(p,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
      p=(SNodeOperations.isInstanceOf(p,"jetbrains.mps.baseLanguage.structure.UpperBoundType") ? SLinkOperations.getTarget(p,"bound",true) : SLinkOperations.getTarget(p,"bound",true));
    }
    if (SNodeOperations.isInstanceOf(p,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      if (idx < varDecls.size()) {
        SNode tvd=varDecls.get(idx);
        SLinkOperations.addChild(ctNoParams,"parameter",(map != null ? map.get(SPropertyOperations.getString(tvd,"name")) : null));
      }
    }
 else {
      SLinkOperations.addChild(ctNoParams,"parameter",SNodeOperations.copyNode(p));
    }
    idx=idx + 1;
  }
}
