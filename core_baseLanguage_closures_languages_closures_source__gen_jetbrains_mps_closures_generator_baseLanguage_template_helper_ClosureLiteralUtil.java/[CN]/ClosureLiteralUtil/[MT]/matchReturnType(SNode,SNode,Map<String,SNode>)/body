{
  Set<String> visited=new HashSet<String>();
  LinkedList<SNode> queue=new LinkedList<SNode>();
  queue.addLast(realType);
  while (!(queue.isEmpty())) {
    SNode candidate=queue.removeFirst();
    if (!(visited.contains(BaseConcept_Behavior.call_getPresentation_1180102203531(candidate)))) {
      if (SNodeOperations.isInstanceOf(absType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference") || (SNodeOperations.getConceptDeclaration(absType) == SNodeOperations.getConceptDeclaration(candidate) && (!(SNodeOperations.isInstanceOf(absType,"jetbrains.mps.baseLanguage.structure.ClassifierType")) || SLinkOperations.getTarget(absType,"classifier",false) == SLinkOperations.getTarget(candidate,"classifier",false)))) {
        map=ClosureLiteralUtil.matchType(absType,candidate,map);
        return map;
      }
      visited.add(BaseConcept_Behavior.call_getPresentation_1180102203531(candidate));
      for (      SNode superType : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(candidate)) {
        queue.addLast(superType);
      }
    }
  }
  return map;
}
