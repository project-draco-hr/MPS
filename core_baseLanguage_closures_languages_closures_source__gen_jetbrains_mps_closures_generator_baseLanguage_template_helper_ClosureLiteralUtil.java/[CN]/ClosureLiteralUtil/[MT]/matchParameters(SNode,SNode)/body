{
  Map<String,SNode> map=null;
  List<SNode> imds=SLinkOperations.getTargets(SLinkOperations.getTarget(ctNoParams,"classifier",false),"method",true);
  if (imds.size() > 0) {
    SNode method=imds.get(0);
    if ((SLinkOperations.getTarget(method,"returnType",true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
      map=ClosureLiteralUtil.matchType(SLinkOperations.getTarget(method,"returnType",true),FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(ft),map);
    }
    List<SNode> ptypes=FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(ft);
    int idx=0;
    for (    SNode pd : SLinkOperations.getTargets(method,"parameter",true)) {
      map=ClosureLiteralUtil.matchType(SLinkOperations.getTarget(pd,"type",true),ptypes.get(idx),map);
      idx=idx + 1;
    }
  }
  ((SNode)ctNoParams).putUserObject("typeMap",map);
  for (  SNode tvar : SLinkOperations.getTargets(SLinkOperations.getTarget(ctNoParams,"classifier",false),"typeVariableDeclaration",true)) {
    SLinkOperations.addChild(ctNoParams,"parameter",map.get(SPropertyOperations.getString(tvar,"name")));
  }
}
