{
  myUsedLanguagesTableModel=new UsedLanguagesTableModel();
  myUsedlanguagesTable=new JBTable(myUsedLanguagesTableModel);
  myUsedlanguagesTable.setShowGrid(false);
  myUsedlanguagesTable.setDragEnabled(false);
  myUsedlanguagesTable.setShowHorizontalLines(false);
  myUsedlanguagesTable.setShowVerticalLines(false);
  myUsedlanguagesTable.setIntercellSpacing(new Dimension(0,0));
  myUsedlanguagesTable.setBorder(new LineBorder(UIUtil.getBorderColor()));
  myUsedlanguagesTable.setDefaultRenderer(ModuleReference.class,new ColoredTableCellRenderer(){
    @Override protected void customizeCellRenderer(    JTable table,    Object value,    boolean selected,    boolean hasFocus,    int row,    int column){
      setPaintFocusBorder(false);
      setFocusBorderAroundIcon(true);
      setBorder(NO_FOCUS_BORDER);
      if (value instanceof ModuleReference) {
        ModuleReference tableItem=(ModuleReference)value;
        setIcon(MPSIcons.LANGUAGE_ICON);
        Language language=MPSModuleRepository.getInstance().getLanguage(tableItem);
        append(tableItem.getModuleFqName(),language == null ? SimpleTextAttributes.ERROR_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
      }
    }
  }
);
  myUsedlanguagesTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  new SpeedSearchBase<JBTable>(myUsedlanguagesTable){
    public int getSelectedIndex(){
      return myUsedlanguagesTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return myUsedlanguagesTable.convertRowIndexToModel(viewIndex);
    }
    public Object[] getAllElements(){
      final int count=myUsedLanguagesTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myUsedLanguagesTableModel.getValueAt(0,idx);
      }
      return elements;
    }
    public String getElementText(    Object element){
      return ((ModuleReference)element).getModuleFqName();
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myUsedLanguagesTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myUsedLanguagesTableModel.getValueAt(0,row))) {
          final int viewRow=myUsedlanguagesTable.convertRowIndexToView(row);
          myUsedlanguagesTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(myUsedlanguagesTable);
          break;
        }
      }
    }
  }
;
  JComponent buttonsBlock=createButtonsBlock();
  JPanel result=new JPanel();
  result.setBorder(BorderFactory.createEmptyBorder(6,6,6,6));
  result.setLayout(new BorderLayout());
  result.add(buttonsBlock,BorderLayout.EAST);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myUsedlanguagesTable);
  scrollPane.setBorder(IdeBorderFactory.createEmptyBorder(0));
  result.add(scrollPane,BorderLayout.CENTER);
  return result;
}
