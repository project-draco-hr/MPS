{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SLinkOperations.addNewChild(SLinkOperations.getTarget(SNodeOperations.getParent(_context.getSourceNode()),"controlClosure",true),"parameter","jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return ":";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add formal parameter";
      }
    }
);
  }
  return result;
}
