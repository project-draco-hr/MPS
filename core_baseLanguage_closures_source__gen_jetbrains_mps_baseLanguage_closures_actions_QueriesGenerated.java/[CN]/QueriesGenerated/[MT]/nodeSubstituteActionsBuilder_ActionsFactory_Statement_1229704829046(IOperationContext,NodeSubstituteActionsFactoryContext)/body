{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          VisibleClassifiersScope scope=new VisibleClassifiersScope(_context.getModel(),IClassifiersSearchScope.STATIC_METHOD,operationContext.getScope());
          List<SNode> nodes=scope.getNodes(new Condition<SNode>(){
            public boolean met(            SNode smd){
              return ControlMethodUtil.isControlMethod(smd);
            }
          }
);
          return nodes;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode ccs=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement",null);
              SLinkOperations.setTarget(ccs,"controlMethod",(item),false);
              SLinkOperations.addNewChild(ccs,"closure","jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral");
              return ccs;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "custom control statement using " + INamedConcept_Behavior.call_getFqName_1213877404258((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
