{
  List<SNode> _results=new ArrayList<SNode>();
{
    ICursor<SNode> _zCursor=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",SNodeOperations.getParent(node,null,false,false),scope));
    try {
      while (_zCursor.moveToNext()) {
        SNode classNode=_zCursor.getCurrent();
{
          Iterable<SNode> methodsOfSameKind;
          if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
            methodsOfSameKind=SLinkOperations.getTargets(classNode,"method",true);
          }
 else {
            methodsOfSameKind=SLinkOperations.getTargets(classNode,"staticMethod",true);
          }
{
            ICursor<SNode> _zCursor1=CursorFactory.createCursor(methodsOfSameKind);
            try {
              while (_zCursor1.moveToNext()) {
                SNode sMethod=_zCursor1.getCurrent();
                if (SPropertyOperations.getString(sMethod,"name").equals(SPropertyOperations.getString(node,"name")) && SLinkOperations.getCount(sMethod,"parameter") == SLinkOperations.getCount(node,"parameter")) {
                  if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1204901126405(sMethod,node)) {
                    ListOperations.addElement(_results,sMethod);
                  }
                }
              }
            }
  finally {
              _zCursor1.release();
            }
          }
        }
      }
    }
  finally {
      _zCursor.release();
    }
  }
  return _results;
}
