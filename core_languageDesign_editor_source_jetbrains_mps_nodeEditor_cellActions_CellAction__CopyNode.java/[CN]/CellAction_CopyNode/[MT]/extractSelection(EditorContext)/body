{
  List<SNode> nodeList=new LinkedList<SNode>();
  EditorComponent editorComponent=context.getNodeEditorComponent();
  TextBuilder textBuilder=TextRenderUtil.getTextBuilderForSelectedCellsOfEditor(editorComponent);
  NodeRangeSelection nodeRangeSelection=editorComponent.getNodeRangeSelection();
  if (nodeRangeSelection.isActive()) {
    nodeList.addAll(nodeRangeSelection.getNodes());
    LOG.debug("Copy " + nodeList.size() + " nodes : ");
    for (    SNode aNodeList : nodeList) {
      LOG.debug("    " + aNodeList.getDebugText());
    }
  }
 else {
    EditorCell selectedCell=editorComponent.getSelectedCell();
    if (!(selectedCell instanceof EditorCell_Label)) {
      SNode sNode=selectedCell.getSNode();
      if (sNode != null) {
        nodeList.add(sNode);
        LOG.debug("Copy node : " + nodeList.get(0).getDebugText());
      }
    }
  }
  if (nodeList.size() == 0) {
    return null;
  }
  List<SNode> copyNodeList=new ArrayList<SNode>();
  Map<SNode,Set<SNode>> nodesAndAttributes=new HashMap<SNode,Set<SNode>>();
  for (  SNode node : nodeList) {
    final SNode parent=node.getParent();
    if (parent != null && AttributeOperations.isAttribute(node)) {
      EditorCell selectedCell=editorComponent.getSelectedCell();
      Condition<EditorCell> condition=new Condition<EditorCell>(){
        public boolean met(        EditorCell object){
          SNode selectedNode=object.getSNode();
          return selectedNode != null && selectedNode.getParent() == parent && AttributeOperations.isAttribute(selectedNode);
        }
      }
;
      Set<SNode> selectedAttributes=new HashSet<SNode>();
      if (selectedCell instanceof EditorCell_Collection) {
        EditorCell_Collection selectedCollection=(EditorCell_Collection)selectedCell;
        for (        EditorCell cell : selectedCollection.dfsCells()) {
          if (condition.met(cell)) {
            selectedAttributes.add(cell.getSNode());
          }
        }
      }
 else {
        if (condition.met(selectedCell)) {
          selectedAttributes.add(selectedCell.getSNode());
        }
      }
      copyNodeList.add(parent);
      nodesAndAttributes.put(parent,selectedAttributes);
    }
 else {
      copyNodeList.add(node);
    }
  }
  return new MultiTuple._3<List<SNode>,Map<SNode,Set<SNode>>,String>(copyNodeList,nodesAndAttributes,textBuilder.getText());
}
