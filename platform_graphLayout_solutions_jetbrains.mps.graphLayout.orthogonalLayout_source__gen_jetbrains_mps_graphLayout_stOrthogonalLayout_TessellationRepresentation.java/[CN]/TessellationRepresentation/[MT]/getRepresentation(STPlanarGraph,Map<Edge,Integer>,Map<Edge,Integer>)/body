{
  Graph graph=planarGraph.getGraph();
  EmbeddedGraph embeddedGraph=planarGraph.getEmbeddedGraph();
  DualGraph dualGraph=planarGraph.getModifiedDualGraph();
  Node dualTarget=dualGraph.getNode(dualGraph.getNumNodes() - 1);
  Map<Edge,Integer> dualConstraints=MapSequence.fromMap(new HashMap<Edge,Integer>());
  for (  Edge edge : ListSequence.fromList(dualGraph.getEdges())) {
    Edge realEdge=MapSequence.fromMap(dualGraph.getEdgesMap()).get(edge);
    MapSequence.fromMap(dualConstraints).put(edge,MapSequence.fromMap(horizontalEdgeConstraints).get(realEdge));
  }
  Map<Node,Integer> verticalNumbering=WeightedTopologicalNumbering.number(graph,verticalEdgeConstraints);
  Map<Node,Integer> horizontalNumbering=WeightedTopologicalNumbering.number(dualGraph,dualConstraints);
  List<Object> graphObjects=ListSequence.fromList(new ArrayList<Object>());
  ListSequence.fromList(graphObjects).addSequence(ListSequence.fromList(graph.getNodes()));
  ListSequence.fromList(graphObjects).addSequence(ListSequence.fromList(graph.getEdges()));
  ListSequence.fromList(graphObjects).addSequence(ListSequence.fromList(embeddedGraph.getFaces()));
  Map<Object,Rectangle> representation=MapSequence.fromMap(new HashMap<Object,Rectangle>());
  for (  Object object : ListSequence.fromList(graphObjects)) {
    Face leftFace=planarGraph.getLeftFace(object);
    Face rightFace=planarGraph.getRightFace(object);
    int minX=MapSequence.fromMap(horizontalNumbering).get(MapSequence.fromMap(dualGraph.getNodesMap()).get(leftFace));
    int maxX=MapSequence.fromMap(horizontalNumbering).get(MapSequence.fromMap(dualGraph.getNodesMap()).get(rightFace));
    if (rightFace == embeddedGraph.getOuterFace()) {
      maxX=MapSequence.fromMap(horizontalNumbering).get(dualTarget);
    }
    int minY=MapSequence.fromMap(verticalNumbering).get(planarGraph.getOrigNode(object));
    int maxY=MapSequence.fromMap(verticalNumbering).get(planarGraph.getDestNode(object));
    MapSequence.fromMap(representation).put(object,new Rectangle(minX,minY,maxX - minX,maxY - minY));
  }
  return null;
}
