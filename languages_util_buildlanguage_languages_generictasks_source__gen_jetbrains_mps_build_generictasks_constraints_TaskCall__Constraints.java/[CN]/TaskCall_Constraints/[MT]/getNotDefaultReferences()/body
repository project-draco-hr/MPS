{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("declaration",new BaseReferenceConstraintsDescriptor("declaration",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      for (      SNode attrDecl : ITaskDeclaration_Behavior.call_getAttributesDeclarations_1190349257898147625(newReferentNode)) {
        if (AttributeDeclaration_Behavior.call_isRequired_353793545802643811(attrDecl)) {
          SNode attr=SConceptOperations.createNewNode("jetbrains.mps.build.generictasks.structure.Attribute",null);
          SLinkOperations.setTarget(attr,"attributeDeclaration",attrDecl,false);
          ListSequence.fromList(SLinkOperations.getTargets(referenceNode,"atributes",true)).addElement(attr);
        }
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> declarations=SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.build.generictasks.structure.ITaskDeclaration");
          if (!(SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.TaskCall"))) {
            return new SequenceSearchScope(ListSequence.fromList(declarations).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return ITaskDeclaration_Behavior.call_canBeRootTask_1449762848926780427(it);
              }
            }
)){
              @Override public boolean isInScope(              SNode node){
                return SNodeOperations.isInstanceOf(node,"jetbrains.mps.build.generictasks.structure.ITaskDeclaration") && ITaskDeclaration_Behavior.call_canBeRootTask_1449762848926780427(SNodeOperations.cast(node,"jetbrains.mps.build.generictasks.structure.ITaskDeclaration"));
              }
            }
;
          }
          final List<SNode> nesteds=ITaskDeclaration_Behavior.call_getNestedTasks_4241383766070831847(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.TaskCall"),"declaration",false));
          return new SequenceSearchScope(ITaskDeclaration_Behavior.call_getPossibleNesteds_1449762848926780436(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.TaskCall"),"declaration",false),declarations)){
            @Override public boolean isInScope(            SNode node){
              return SNodeOperations.isInstanceOf(node,"jetbrains.mps.build.generictasks.structure.ITaskDeclaration") && ITaskDeclaration_Behavior.call_isPossibleNested_1648602681640249389(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.TaskCall"),"declaration",false),SNodeOperations.cast(node,"jetbrains.mps.build.generictasks.structure.ITaskDeclaration"),nesteds);
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_sufet9_a0a1a0a0a4a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
