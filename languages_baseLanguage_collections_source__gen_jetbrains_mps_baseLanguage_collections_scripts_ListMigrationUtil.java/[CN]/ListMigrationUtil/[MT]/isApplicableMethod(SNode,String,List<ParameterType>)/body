{
  SNode declaration=SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
  if (neq_gtz9m1_a0b0g(SPropertyOperations.getString(declaration,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),name)) {
    return false;
  }
  if (!((eq_gtz9m1_a0a0c0g(SModelOperations.getModelName(SNodeOperations.getModel(declaration)),"java.util")))) {
    return false;
  }
  if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"))).count() != ListSequence.fromList(params).count()) {
    return false;
  }
{
    SNode argument;
    ParameterType param;
    Iterator<SNode> argument_iterator=ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"))).iterator();
    Iterator<ParameterType> param_iterator=ListSequence.fromList(params).iterator();
    while (true) {
      if (!(argument_iterator.hasNext())) {
        break;
      }
      if (!(param_iterator.hasNext())) {
        break;
      }
      argument=argument_iterator.next();
      param=param_iterator.next();
      if (param == ParameterType.INT) {
        if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(argument),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940d22479L,"jetbrains.mps.baseLanguage.structure.IntegerType")))) {
          return false;
        }
      }
      if (param == ParameterType.NOT_INT) {
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(argument),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940d22479L,"jetbrains.mps.baseLanguage.structure.IntegerType"))) {
          return false;
        }
      }
    }
  }
  return true;
}
