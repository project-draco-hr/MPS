{
  List<MigrationUnitReference> result=ListSequence.fromList(new ArrayList<MigrationUnitReference>());
  for (  SLanguage lang : SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended())) {
    int currentLangVersion=lang.getLanguageVersion();
    int ver=module.getUsedLanguageVersion(lang);
    ver=Math.max(ver,0);
    currentLangVersion=Math.max(currentLangVersion,0);
    if (ver < currentLangVersion) {
      ListSequence.fromList(result).addElement(new MigrationScriptReference(lang,ver));
    }
  }
  List<SModule> visible=ListSequence.fromList(new ArrayList<SModule>());
  ListSequence.fromList(visible).addElement(module);
  ListSequence.fromList(visible).addSequence(CollectionSequence.fromCollection(new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE)));
  for (  SModule dep : ListSequence.fromList(visible)) {
    int currentDepVersion=((AbstractModule)dep).getModuleVersion();
    int ver=((AbstractModule)module).getDependencyVersion(dep);
    ver=Math.max(ver,0);
    currentDepVersion=Math.max(currentDepVersion,0);
    if (ver < currentDepVersion) {
      ListSequence.fromList(result).addElement(new RefactoringStepReference(dep.getModuleReference(),ver));
    }
  }
  return result;
}
