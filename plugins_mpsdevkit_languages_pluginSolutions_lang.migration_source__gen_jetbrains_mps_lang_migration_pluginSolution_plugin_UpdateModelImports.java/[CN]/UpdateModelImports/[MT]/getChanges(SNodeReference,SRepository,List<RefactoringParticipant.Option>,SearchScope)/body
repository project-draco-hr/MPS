{
  if (!(ListSequence.fromList(selectedOptions).contains(OPTION))) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>());
  }
  return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>(),new RefactoringParticipant.Change<SNodeReference,SNodeReference>(){
    public MoveNodeRefactoringParticipant<SNodeReference,SNodeReference> getParticipant(){
      return UpdateModelImports.this;
    }
    public SearchResults getSearchResults(){
      return new SearchResults();
    }
    public boolean needsToPreserveOldNode(){
      return false;
    }
    public void confirm(    final SNodeReference finalState,    final SRepository repository,    RefactoringSession refactoringSession){
      refactoringSession.registerChange(new Runnable(){
        public void run(){
          SNode node=finalState.resolve(repository);
          SModel model=node.getModel();
          addLanguageImport(model,node.getConcept().getLanguage());
          for (          SReference ref : Sequence.fromIterable(node.getReferences())) {
            addModelImport(model,ref.getTargetSModelReference().resolve(repository));
          }
        }
      }
);
    }
  }
);
}
