{
  List<SearchResult<SNode>> results=new ArrayList<SearchResult<SNode>>();
  List<SNode> mappingConfigs=(List<SNode>)GenerationFacade.getOwnMappings(myGenerator);
  List<SNode> nodesToCheck=new ArrayList<SNode>();
  for (  SNode mappingConfig : mappingConfigs) {
    for (    SNode rule : ListSequence.fromList(SNodeOperations.getChildren(mappingConfig)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.generator.structure.BaseMappingRule");
      }
    }
)) {
      nodesToCheck.add(rule);
      collectChildrenThatMayHaveReferenceOnTemplate(rule,nodesToCheck);
    }
    nodesToCheck.addAll(SLinkOperations.getTargets(mappingConfig,"createRootRule",true));
  }
  for (  SNode node : nodesToCheck) {
    for (    SReference reference : node.getReferences()) {
      if (myNodeToFindUsages.getNodeId().equals(reference.getTargetNodeId())) {
        SearchResult<SNode> result=new SearchResult<SNode>(node,"");
        results.add(result);
        break;
      }
    }
  }
  return new SearchResults<SNode>(CollectionUtil.set(myNodeToFindUsages),results);
}
