{
  SNode result=null;
  SNode operand=UnknownNameRef_Behavior.call_resolveTokens_4018023047319628331(thisNode);
  if ((operand == null)) {
    return null;
  }
 else   if (SNodeOperations.isInstanceOf(operand,"jetbrains.mps.baseLanguage.structure.Classifier")) {
    SNode target=SNodeOperations.cast(operand,"jetbrains.mps.baseLanguage.structure.Classifier");
    if (!(SNodeOperations.isInstanceOf(target,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return null;
    }
    SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(call,"classConcept",SNodeOperations.cast(target,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SReference sref=new DynamicReference("staticMethodDeclaration",call,null,SPropertyOperations.getString(thisNode,"callee"));
    call.addReference(sref);
    for (    SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"actualArgument",true))) {
      ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addElement(SNodeOperations.copyNode(arg));
    }
    result=call;
    return result;
  }
 else   if (SNodeOperations.isInstanceOf(operand,"jetbrains.mps.baseLanguage.structure.Expression")) {
    System.out.println("DEBUG: operand in dot call is expression");
    SNode dotExpr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
    SLinkOperations.setTarget(dotExpr,"operand",SNodeOperations.cast(operand,"jetbrains.mps.baseLanguage.structure.Expression"),true);
    SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
    SLinkOperations.setTarget(dotExpr,"operation",call,true);
    SReference sref=new DynamicReference("instanceMethodDeclaration",call,null,SPropertyOperations.getString(thisNode,"callee"));
    call.addReference(sref);
    for (    SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"actualArgument",true))) {
      ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addElement(SNodeOperations.copyNode(arg));
    }
    result=dotExpr;
    return result;
  }
 else {
    return null;
  }
}
