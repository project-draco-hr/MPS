{
  final Wrappers._T<SModel> targetModelDescriptor=new Wrappers._T<SModel>();
  ModelAccess modelAccess=project.getRepository().getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      targetModelDescriptor.value=SNodeOperations.getModel(ListSequence.fromList(target).first());
    }
  }
);
  final Object newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),targetModelDescriptor.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    Object selectedObject,    SModel model){
      return selectedObject instanceof SNode || selectedObject instanceof SModel;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  modelAccess.runReadInEDT(new Runnable(){
    @Override public void run(){
      for (      SNode node : ListSequence.fromList(target)) {
        if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(node)) {
          return;
        }
      }
      if (newLocation instanceof SNode && (!(((SNode)newLocation).getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)newLocation)))) {
        return;
      }
      if (newLocation instanceof SModel && (((SModel)newLocation).getReference().resolve(MPSModuleRepository.getInstance()) != newLocation)) {
        return;
      }
      executeRefactoring.run(newLocation);
    }
  }
);
}
