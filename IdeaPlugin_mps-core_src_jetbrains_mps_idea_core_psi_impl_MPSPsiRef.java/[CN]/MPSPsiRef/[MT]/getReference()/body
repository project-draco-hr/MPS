{
  return new PsiReference(){
    @Override public PsiElement getElement(){
      return MPSPsiRef.this;
    }
    @Override public TextRange getRangeInElement(){
      return new TextRange(0,1);
    }
    @Nullable @Override public PsiElement resolve(){
      return MPSPsiRef.this.resolve();
    }
    @NotNull @Override public String getCanonicalText(){
      return null;
    }
    private void setTarget(    final SNode ourSource,    @Nullable final SNodeReference nodeReference,    final String resolveInfo){
      if (nodeReference == null) {
        ourSource.setReferenceTarget(role,null);
        model=null;
        nodeId=null;
        referenceText=null;
      }
 else {
        SReference ref=StaticReference.create(role,ourSource,nodeReference,resolveInfo);
        ourSource.setReference(role,ref);
        model=nodeReference.getModelReference();
        nodeId=((SNodePointer)nodeReference).getNodeId();
        referenceText=resolveInfo;
      }
    }
    @Override public PsiElement handleElementRename(    final String newElementName) throws IncorrectOperationException {
      return MPSPsiRef.this;
    }
    @Override public PsiElement bindToElement(    final @NotNull PsiElement element) throws IncorrectOperationException {
      return MPSPsiRef.this;
    }
    @Override public boolean isReferenceTo(    PsiElement element){
      return false;
    }
    @NotNull @Override public Object[] getVariants(){
      return new Object[0];
    }
    @Override public boolean isSoft(){
      return false;
    }
  }
;
}
