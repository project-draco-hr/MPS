{
  return new PsiReference(){
    @Override public PsiElement getElement(){
      return getContainingModel();
    }
    @Override public TextRange getRangeInElement(){
      return new TextRange(0,1);
    }
    @Nullable @Override public PsiElement resolve(){
      return MPSPsiRef.this.resolve();
    }
    @NotNull @Override public String getCanonicalText(){
      return null;
    }
    @Override public PsiElement handleElementRename(    String newElementName) throws IncorrectOperationException {
      return MPSPsiRef.this;
    }
    @Override public PsiElement bindToElement(    final @NotNull PsiElement element) throws IncorrectOperationException {
      if (element instanceof MPSPsiNodeBase) {
      }
 else {
        final Project project=getProject();
        final SNode newTargetNode=MPS2PsiMapperUtil.findNodeByPsi(element,project);
        PsiElement psiParent=getParent();
        if (psiParent instanceof MPSPsiNode) {
          MPSPsiNode mpsParent=(MPSPsiNode)psiParent;
          final SNode parentNode=mpsParent.getSNodeReference().resolve(MPSModuleRepository.getInstance());
          ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
            @Override public void run(){
              if (newTargetNode == null) {
                parentNode.setReferenceTarget(role,null);
              }
 else {
                SReference ref=new StaticReference(role,parentNode,newTargetNode);
                parentNode.setReference(role,ref);
                model=newTargetNode.getModel().getReference();
                nodeId=newTargetNode.getNodeId();
                referenceText=element instanceof PsiNamedElement ? ((PsiNamedElement)element).getName() : element.toString();
              }
            }
          }
,new MPSProject(project));
        }
      }
      return MPSPsiRef.this;
    }
    @Override public boolean isReferenceTo(    PsiElement element){
      return false;
    }
    @NotNull @Override public Object[] getVariants(){
      return new Object[0];
    }
    @Override public boolean isSoft(){
      return false;
    }
  }
;
}
