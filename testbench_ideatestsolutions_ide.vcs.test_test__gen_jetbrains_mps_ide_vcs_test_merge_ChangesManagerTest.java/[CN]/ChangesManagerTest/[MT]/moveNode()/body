{
  final Wrappers._T<SNode> root=new Wrappers._T<SNode>();
  final Wrappers._T<SNode> field=new Wrappers._T<SNode>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      root.value=getDocumentLayoutRoot();
      field.value=Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),root.value,"jetbrains.mps.baseLanguage.structure.ClassConcept","call_fields_5292274854859383272",new Object[]{})).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode f){
          return "textPositions".equals(SPropertyOperations.getString(f,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
        }
      }
);
    }
  }
);
  Assert.assertNotNull(field.value);
  _FunctionTypes._return_P0_E0<? extends SNode> moveUpTwice=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.insertPrevSiblingChild(field.value,jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getPrevSibling(field.value));
      jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.insertPrevSiblingChild(field.value,jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getPrevSibling(field.value));
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  _FunctionTypes._return_P0_E0<? extends SNode> moveDown=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.insertNextSiblingChild(field.value,jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getNextSibling(field.value));
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  _FunctionTypes._return_P0_E0<? extends SNode> moveToOtherClass=new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      SNode inner=jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),root.value,"jetbrains.mps.baseLanguage.structure.Classifier","call_nestedClassifiers_5292274854859193142",new Object[]{})).first(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
      ListSequence.fromList(SLinkOperations.getChildren(inner,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member"))).addElement(field.value);
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getContainingRoot(field.value);
    }
  }
;
  List<_FunctionTypes._return_P0_E0<? extends SNode>> tasks=ListSequence.fromList(new ArrayList<_FunctionTypes._return_P0_E0<? extends SNode>>());
  for (int i=0; i < 3; i++) {
    ListSequence.fromList(tasks).addElement(moveUpTwice);
  }
  for (int i=0; i < 19; i++) {
    ListSequence.fromList(tasks).addElement(moveDown);
  }
  ListSequence.fromList(tasks).addElement(moveToOtherClass);
  doSomethingAndUndo(myUiDiff,false,tasks);
}
