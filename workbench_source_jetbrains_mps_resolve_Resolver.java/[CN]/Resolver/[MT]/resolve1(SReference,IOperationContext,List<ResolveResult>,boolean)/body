{
  final SNode referenceNode=reference.getSourceNode();
  if (referenceNode == null)   return false;
  final ConceptDeclaration referenceNodeConcept=(ConceptDeclaration)referenceNode.getConceptDeclarationAdapter();
  final LinkDeclaration linkDeclaration=SModelSearchUtil.findLinkDeclaration(referenceNodeConcept,reference.getRole());
  if (linkDeclaration == null) {
    return false;
  }
  final AbstractConceptDeclaration referentConcept=linkDeclaration.getTarget();
  Boolean result=TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      SearchScopeStatus status=ModelConstraintsUtil.getSearchScope(referenceNode.getParent(),referenceNode,referenceNodeConcept,linkDeclaration,operationContext);
      if (status.isError()) {
        LOG.error("Couldn't create referent search scope : " + status.getMessage());
        return false;
      }
      ISearchScope searchScope=status.getSearchScope();
      List<SNode> nodes=searchScope.getNodes(new IsInstanceCondition(referentConcept));
      Condition<SNode> nameMatchesCondition=new Condition<SNode>(){
        public boolean met(        SNode object){
          String resolveInfo=reference.getResolveInfo();
          return resolveInfo != null && resolveInfo.equals(object.getName());
        }
      }
;
      List<SNode> filtered=CollectionUtil.filter(nodes,nameMatchesCondition);
      if (!filtered.isEmpty()) {
        ResolveResult resolveResult=new ResolveResult(referenceNode,filtered.get(0),reference.getRole(),null);
        results.add(resolveResult);
        if (forceResolve) {
          resolveResult.setTarget();
        }
        return true;
      }
      return false;
    }
  }
);
  return result;
}
