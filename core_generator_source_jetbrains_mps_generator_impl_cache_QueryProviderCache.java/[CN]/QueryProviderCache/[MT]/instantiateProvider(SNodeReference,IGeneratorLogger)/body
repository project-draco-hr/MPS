{
  final SModelReference mr=templateNode.getModelReference();
  try {
    Class<?> qg=QueryMethodGenerated.getQueriesGeneratedClassFor(mr,true);
    if (GeneratorQueryProvider.class.isAssignableFrom(qg)) {
      @SuppressWarnings("unchecked") Class<GeneratorQueryProvider> providerClass=(Class<GeneratorQueryProvider>)qg;
      GeneratorQueryProvider gqp=providerClass.newInstance();
      if (((QueryProviderBase)gqp).needsReflectiveFallback()) {
        ((QueryProviderBase)gqp).useReflectiveFallback(new ReflectiveQueryProvider(qg));
      }
      return gqp;
    }
 else {
      return new ReflectiveQueryProvider(qg);
    }
  }
 catch (  ClassNotFoundException e) {
    log.error(templateNode,e.getMessage());
  }
catch (  InstantiationException|IllegalAccessException e) {
    log.handleException(e);
    log.error(templateNode,e.toString());
  }
  return null;
}
