{
  final SModelReference mr=templateNode.getModelReference();
  if (myReflectionQueries.contains(mr)) {
    return new ReflectiveQueryProvider();
  }
  if (myDirectQueries.containsKey(mr)) {
    return myDirectQueries.get(mr);
  }
  try {
    Class<?> qg=QueryMethodGenerated.getQueriesGeneratedClassFor(mr,true);
    if (GeneratorQueryProvider.class.isAssignableFrom(qg)) {
      @SuppressWarnings("unchecked") Class<GeneratorQueryProvider> providerClass=(Class<GeneratorQueryProvider>)qg;
      GeneratorQueryProvider p=providerClass.newInstance();
      myDirectQueries.put(mr,p);
      return p;
    }
  }
 catch (  ClassNotFoundException e) {
    myLog.error(templateNode,e.getMessage());
  }
catch (  InstantiationException e) {
    myLog.handleException(e);
    myLog.error(templateNode,e.toString());
  }
catch (  IllegalAccessException e) {
    myLog.handleException(e);
    myLog.error(templateNode,e.toString());
  }
  myReflectionQueries.add(mr);
  return new ReflectiveQueryProvider();
}
