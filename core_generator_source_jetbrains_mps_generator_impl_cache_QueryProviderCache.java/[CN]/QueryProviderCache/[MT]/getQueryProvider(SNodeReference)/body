{
  final SModelReference mr=templateNode.getModelReference();
  ReflectiveQueryProvider rqp=myReflectionQueries.get(mr);
  if (rqp != null) {
    return rqp;
  }
  GeneratorQueryProvider gqp=myDirectQueries.get(mr);
  if (gqp != null) {
    return gqp;
  }
  try {
    Class<?> qg=QueryMethodGenerated.getQueriesGeneratedClassFor(mr,true);
    if (GeneratorQueryProvider.class.isAssignableFrom(qg)) {
      @SuppressWarnings("unchecked") Class<GeneratorQueryProvider> providerClass=(Class<GeneratorQueryProvider>)qg;
      gqp=providerClass.newInstance();
      if (((QueryProviderBase)gqp).needsReflectiveFallback()) {
        ((QueryProviderBase)gqp).useReflectiveFallback(new ReflectiveQueryProvider(qg));
      }
      myDirectQueries.put(mr,gqp);
      return gqp;
    }
 else {
      rqp=new ReflectiveQueryProvider(qg);
      myReflectionQueries.put(mr,rqp);
      return rqp;
    }
  }
 catch (  ClassNotFoundException e) {
    myLog.error(templateNode,e.getMessage());
  }
catch (  InstantiationException e) {
    myLog.handleException(e);
    myLog.error(templateNode,e.toString());
  }
catch (  IllegalAccessException e) {
    myLog.handleException(e);
    myLog.error(templateNode,e.toString());
  }
  return new QueryProviderBase(1){
  }
;
}
