{
  List<String> params=ListSequence.<String>fromArray();
  this.addJavaCommand(params);
  if (this.unitTestPreferences.useDebug) {
    this.addDebug(params,this.unitTestPreferences.debugPort,false);
  }
  this.addClassPath(params,ListSequence.fromList(tests).first());
  ListSequence.fromList(params).addElement(TestRunner.class.getName());
  for (  SNode test : tests) {
    if (SNodeOperations.isInstanceOf(test,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      SNode testCase=test;
      ListSequence.fromList(params).addElement("-c");
      ListSequence.fromList(params).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(testCase));
    }
 else     if (SNodeOperations.isInstanceOf(test,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      SNode testMethod=test;
      SNode testCase=SNodeOperations.getAncestor(test,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
      ListSequence.fromList(params).addElement("-m");
      ListSequence.fromList(params).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(testCase) + "." + SPropertyOperations.getString(testMethod,"name"));
    }
  }
  ProcessBuilder p=new ProcessBuilder(params);
  this.component.appendInternal(this.getCommandString(p) + "\n\n");
  try {
    Process pro=p.start();
    UnitTestRunOutputReader outReader=new UnitTestRunOutputReader(pro.getInputStream(),this.component,false);
    UnitTestRunOutputReader errReader=new UnitTestRunOutputReader(pro.getErrorStream(),this.component,true);
    CyclicBarrier barrier=new CyclicBarrier(2,outReader.getExecutor());
    outReader.setBarrier(barrier);
    errReader.setBarrier(barrier);
    outReader.start();
    errReader.start();
  }
 catch (  IOException e) {
    Logger.getLogger(UnitTestRunner.class).error("Can't run tests",e);
  }
}
