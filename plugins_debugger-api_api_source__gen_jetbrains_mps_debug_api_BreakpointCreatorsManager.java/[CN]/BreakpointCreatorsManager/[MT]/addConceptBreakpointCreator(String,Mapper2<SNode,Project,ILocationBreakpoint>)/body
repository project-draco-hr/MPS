{
  final Wrappers._T<SAbstractConcept> cBase=new Wrappers._T<SAbstractConcept>(MetaAdapterFactoryByName.getConcept(baseConcept));
  if (cBase.value == null) {
    cBase.value=MetaAdapterFactoryByName.getInterfaceConcept(baseConcept);
  }
  BreakpointCreator pair=new BreakpointCreator(null,null);
  pair.canCreate(new _FunctionTypes._return_P2_E0<Boolean,SAbstractConcept,SNode>(){
    public Boolean invoke(    SAbstractConcept c,    SNode n){
      return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.asSConcept(c)),SNodeOperations.asSConcept(cBase.value));
    }
  }
);
  pair.create(new _FunctionTypes._return_P2_E0<ILocationBreakpoint,SNode,Project>(){
    public ILocationBreakpoint invoke(    SNode node,    Project project){
      return breakpointCreator.value(node,project);
    }
  }
);
  MapSequence.fromMap(myCreatorsByConcept).put(baseConcept,pair);
  SetSequence.fromSet(myCreators).addElement(pair);
}
