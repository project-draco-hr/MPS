{
switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a,fqName)) {
case 11:
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable"));
case 10:
  return new DataHolderConstraintsDescriptor(new DateFormat_Constraints());
case 37:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.LiteralFormatToken"));
case 33:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.FormatToken"));
case 31:
return new DataHolderConstraintsDescriptor(new FormatExpression_Constraints());
case 3:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConditionalFormatToken"));
case 58:
return new DataHolderConstraintsDescriptor(new ReferenceFormatToken_Constraints());
case 70:
return new DataHolderConstraintsDescriptor(new TokenConditionalPair_Constraints());
case 43:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NowExpression"));
case 68:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TokenCondition"));
case 69:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TokenCondition_datetimeToFormat"));
case 20:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeType"));
case 72:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation"));
case 12:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation"));
case 59:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation"));
case 29:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.FloorDateTimeOperation"));
case 2:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.CeilingDateTimeOperation"));
case 21:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithPropertyOperation"));
case 57:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodType"));
case 47:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant"));
case 28:
return new DataHolderConstraintsDescriptor(new FixedLocaleFormatToken_Constraints());
case 18:
return new DataHolderConstraintsDescriptor(new DateTimePropertyFormatToken_Constraints());
case 36:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InlineFormatExpression"));
case 15:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken"));
case 27:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DurationTypeReference"));
case 13:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation"));
case 0:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.AbsDateTimeMinusOperation"));
case 60:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ScheduleLiteral"));
case 17:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimePlusPeriodOperation"));
case 14:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusPeriodOperation"));
case 5:
return new DataHolderConstraintsDescriptor(new ConvertToDateTimeOperation_Constraints());
case 16:
return new DataHolderConstraintsDescriptor(new DateTimeOperation_Constraints());
case 42:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NotNullOperation"));
case 44:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NullOperation"));
case 7:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaCalendarOperation"));
case 8:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJavaDateOperation"));
case 9:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConvertToJodaDateTimeOperation"));
case 19:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimePropetyReferenceOperation"));
case 41:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.NeverExpression"));
case 38:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation"));
case 40:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MinDateTimeOperation"));
case 39:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.MaxDateTimeOperation"));
case 24:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneType"));
case 62:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant"));
case 25:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DefaultTimeZoneConstant"));
case 71:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.UTCTimeZoneConstant"));
case 23:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneCreator"));
case 4:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ConstantTimeZoneRef"));
case 63:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString"));
case 52:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyOperation"));
case 73:
return new DataHolderConstraintsDescriptor(new WithPropertyCompareExpression_Constraints());
case 46:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ParseExpression"));
case 64:
return new DataHolderConstraintsDescriptor(new TimeZoneIDExpression_Constraints());
case 67:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression"));
case 22:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DateTimeWithTZType"));
case 34:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InTimezoneExpression"));
case 45:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.ParseDateTimeExpression"));
case 30:
return new DataHolderConstraintsDescriptor(new FormatDateTimeExpression_Constraints());
case 35:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression"));
case 26:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.DurationType"));
case 6:
return new DataHolderConstraintsDescriptor(new ConvertToDurationOperation_Constraints());
case 51:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression"));
case 61:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.TimeConstant"));
case 32:
return new DataHolderConstraintsDescriptor(new FormatPeriodExpression_Constraints());
case 48:
return new DataHolderConstraintsDescriptor(new PeriodFormat_Constraints());
case 49:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatToken"));
case 53:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodLiteralFormatToken"));
case 50:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodFormatsTable"));
case 54:
return new DataHolderConstraintsDescriptor(new PeriodPropertyFormatToken_Constraints());
case 55:
return new DataHolderConstraintsDescriptor(new PeriodReferenceFormatToken_Constraints());
case 56:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.PeriodSeparatorFormatToken"));
case 65:
return new DataHolderConstraintsDescriptor(new TimeZoneIdOperation_Constraints());
case 66:
return new DataHolderConstraintsDescriptor(new TimeZoneNameOperation_Constraints());
case 1:
return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.baseLanguage.dates.structure.AllTimeZonesConstant"));
default :
return null;
}
}
