{
  final EditorCell selectedCell=getEditorCell();
  if (type == CellActionType.DELETE && APICellAdapter.isLastPositionInBigCell(selectedCell) && !APICellAdapter.isFirstPositionInBigCell(selectedCell)) {
    final EditorCell target;
    EditorCell bigCellNextSibling=CellTraversalUtil.getNextSibling(APICellAdapter.getContainingBigCell(selectedCell));
    if (bigCellNextSibling != null) {
      target=bigCellNextSibling;
    }
 else {
      EditorCell nextSibling=CellTraversalUtil.getNextSibling(APICellAdapter.getContainingBigCell(selectedCell));
      if (nextSibling != null) {
        target=nextSibling;
      }
 else {
        target=CellTraversalUtil.getNextLeaf(selectedCell,jetbrains.mps.openapi.editor.cells.CellConditions.SELECTABLE);
      }
    }
    if (target == null || ModelAccess.instance().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return jetbrains.mps.util.SNodeOperations.isAncestor(target.getSNode(),selectedCell.getSNode());
      }
    }
))     return false;
    return getEditorComponent().getActionHandler().executeAction(target,CellActionType.DELETE);
  }
  if (type == CellActionType.BACKSPACE && APICellAdapter.isFirstPositionInBigCell(selectedCell) && !APICellAdapter.isLastPositionInBigCell(selectedCell)) {
    final EditorCell target;
    EditorCell bigCellPrevSibling=CellTraversalUtil.getPrevSibling(APICellAdapter.getContainingBigCell(selectedCell));
    if (bigCellPrevSibling != null) {
      target=bigCellPrevSibling;
    }
 else {
      EditorCell prevSibling=CellTraversalUtil.getPrevSibling(selectedCell);
      if (prevSibling != null) {
        target=prevSibling;
      }
 else {
        target=CellTraversalUtil.getPrevLeaf(selectedCell,jetbrains.mps.openapi.editor.cells.CellConditions.SELECTABLE);
      }
    }
    if (target == null)     return false;
    return getEditorComponent().getActionHandler().executeAction(target,CellActionType.DELETE);
  }
  return false;
}
