{
  final EditorCell selectedCell=getEditorCell();
  if (type == CellActionType.DELETE && selectedCell.isLastPositionInBigCell() && !selectedCell.isFirstPositionInBigCell()) {
    final jetbrains.mps.openapi.editor.cells.EditorCell target;
    jetbrains.mps.openapi.editor.cells.EditorCell bigCellNextSibling=APICellAdapter.getNextSibling(selectedCell.getContainingBigCell());
    if (selectedCell.isLastPositionInBigCell() && bigCellNextSibling != null) {
      target=bigCellNextSibling;
    }
 else {
      jetbrains.mps.openapi.editor.cells.EditorCell nextSibling=APICellAdapter.getNextSibling(selectedCell.getContainingBigCell());
      if (nextSibling != null) {
        target=nextSibling;
      }
 else {
        target=selectedCell.getNextLeaf(CellConditions.SELECTABLE);
      }
    }
    if (target == null || ModelAccess.instance().runReadAction(new Computable<Boolean>(){
      public Boolean compute(){
        return jetbrains.mps.util.SNodeOperations.isAncestor(target.getSNode(),selectedCell.getSNode());
      }
    }
))     return false;
    return getEditorComponent().getActionHandler().executeAction(target,CellActionType.DELETE);
  }
  if (type == CellActionType.BACKSPACE && selectedCell.isFirstPositionInBigCell() && !selectedCell.isLastPositionInBigCell()) {
    final jetbrains.mps.openapi.editor.cells.EditorCell target;
    jetbrains.mps.openapi.editor.cells.EditorCell bigCellPrevSibling=APICellAdapter.getPrevSibling(selectedCell.getContainingBigCell());
    if (selectedCell.isFirstPositionInBigCell() && bigCellPrevSibling != null) {
      target=bigCellPrevSibling;
    }
 else {
      jetbrains.mps.openapi.editor.cells.EditorCell prevSibling=APICellAdapter.getPrevSibling(selectedCell);
      if (prevSibling != null) {
        target=prevSibling;
      }
 else {
        target=selectedCell.getPrevLeaf(CellConditions.SELECTABLE);
      }
    }
    if (target == null)     return false;
    return getEditorComponent().getActionHandler().executeAction(target,CellActionType.DELETE);
  }
  return false;
}
