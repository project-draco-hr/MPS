{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseVariableDeclaration",new BaseReferenceConstraintsDescriptor("baseVariableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode evaluator=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept",false,false);
          if (SPropertyOperations.getBoolean(evaluator,"isShowContext")) {
            return SLinkOperations.getTargets(evaluator,"variables",true);
          }
          return ListSequence.fromList(SLinkOperations.getTargets(evaluator,"variables",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SPropertyOperations.getBoolean(it,"isOutOfScope"));
            }
          }
);
        }
        @Override public ISearchScope createSearchScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ProviderGeneratedSearchScope(this,operationContext,_context){
            public boolean isInScope(            SNode checkedNode){
              return !(SPropertyOperations.getBoolean(checkedNode,"isOutOfScope"));
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8w715n_a0a2a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
