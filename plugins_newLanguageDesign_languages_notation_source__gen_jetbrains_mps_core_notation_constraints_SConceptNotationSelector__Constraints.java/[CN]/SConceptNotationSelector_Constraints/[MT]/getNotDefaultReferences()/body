{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("concept",new BaseReferenceConstraintsDescriptor("concept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),"name") + ".*";
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_kqk3ye_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            Iterable<SNode> visibleNotations=new ModelPlusImportedScope(_context.getModel(),false,"jetbrains.mps.core.notation.structure.SNotation").getAvailableElements(null);
            return new NamedElementsScope(Sequence.fromIterable(visibleNotations).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.core.notation.structure.SNotation"),"context",true),"jetbrains.mps.core.notation.structure.SNotationConceptContext"),"element",false);
              }
            }
).distinct());
          }
        }
      }
;
    }
  }
);
  return references;
}
