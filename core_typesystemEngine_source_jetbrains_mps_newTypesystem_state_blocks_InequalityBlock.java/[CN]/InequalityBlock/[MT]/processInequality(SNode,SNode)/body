{
  if (subType == null || superType == null || subType == superType) {
    return;
  }
  if (!TypesUtil.hasVariablesInside(subType) && !TypesUtil.hasVariablesInside(superType)) {
    if (getState().getTypeCheckingContext().isSingleTypeComputation())     return;
    if (TypesUtil.match(subType,superType)) {
      getState().executeOperation(new AddRemarkOperation("Matched: " + subType + " and "+ superType));
      return;
    }
  }
  if (processReplacementRules(subType,superType)) {
    return;
  }
  final SubTypingManagerNew subTyping=(SubTypingManagerNew)TypeChecker.getInstance().getSubtypingManager();
  getState().executeOperation(new CheckSubTypeOperation(subType,superType,new Runnable(){
    @Override public void run(){
      if (!calcIsSubtype(subTyping,subType,superType)) {
        getState().getNodeMaps().reportSubTypeError(subType,superType,myEquationInfo,myRelationKind.isWeak());
      }
    }
  }
));
}
