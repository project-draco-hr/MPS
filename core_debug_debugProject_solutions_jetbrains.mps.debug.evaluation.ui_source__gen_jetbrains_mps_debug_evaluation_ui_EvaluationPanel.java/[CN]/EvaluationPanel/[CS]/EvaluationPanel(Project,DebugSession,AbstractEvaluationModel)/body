{
  super(new BorderLayout());
  myHighlighter=project.getComponent(Highlighter.class);
  myDebugSession=session;
  mySessionChangeListener=new EvaluationPanel.MySessionChangeListener();
  myDebugSession.addChangeListener(mySessionChangeListener);
  myEvaluationModel=evaluationModel;
  if (myEvaluationModel.isDeveloperMode()) {
    myEvaluationModel.addGenerationListener(new _FunctionTypes._void_P1_E0<SNode>(){
      public void invoke(      SNode result){
        EvaluationPanel.this.updateGenerationResultTab(result);
      }
    }
);
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      myEditor=new EmbeddableEditor(new ModuleContext(myEvaluationModel.getModule(),myEvaluationModel.getModule().getMPSProject().getProject()),myEvaluationModel.getModule(),myEvaluationModel.getRootToShow(),myEvaluationModel.getNodeToShow(),true);
      for (      Language language : myEvaluationModel.getRequiredLanguages()) {
        myEditor.addLanguage(language);
      }
    }
  }
);
  final Wrappers._T<EditableSModelDescriptor> d=new Wrappers._T<EditableSModelDescriptor>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      d.value=myEditor.getModel();
    }
  }
);
  myEvaluationModel.setModel(d.value);
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  splitPane.setResizeWeight(0.5);
  splitPane.setTopComponent(myEditor.getComponenet());
  myTree=new EvaluationPanel.MyTree(session.getUiState().getStackFrame().getLocation().getUnitName(),session.getUiState().getThread().getThread());
  splitPane.setBottomComponent(new JBScrollPane(myTree));
  if (myEvaluationModel.isDeveloperMode()) {
    myTabbedPane.addTab("Main",splitPane);
    add(myTabbedPane);
  }
 else {
    add(splitPane);
  }
  myEditor.getComponenet().registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent p0){
      evaluate();
    }
  }
,KeyStroke.getKeyStroke("ctrl ENTER"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myHighlighter.addAdditionalEditor(myEditor.getEditor());
}
