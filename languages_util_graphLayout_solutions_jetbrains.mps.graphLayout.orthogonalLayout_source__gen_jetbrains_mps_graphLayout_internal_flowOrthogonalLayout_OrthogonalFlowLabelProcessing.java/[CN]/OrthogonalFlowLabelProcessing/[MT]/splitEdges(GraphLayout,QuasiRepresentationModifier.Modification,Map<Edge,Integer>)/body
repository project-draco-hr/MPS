{
  List<Edge> edges=modification.getModifiedEdges();
  Edge firstEdge=ListSequence.fromList(edges).first();
  List<Point> path=layout.getEdgeLayout(firstEdge);
  Node node=modification.getSource();
  Direction2D dartsDir;
  if (firstEdge.getSource() == node) {
    dartsDir=OrthogonalUtil.getDirection(ListSequence.fromList(path).getElement(0),ListSequence.fromList(path).getElement(1));
  }
 else {
    int last=ListSequence.fromList(path).count() - 1;
    dartsDir=OrthogonalUtil.getDirection(ListSequence.fromList(path).getElement(last),ListSequence.fromList(path).getElement(last - 1));
  }
  Direction2D shiftDir=dartsDir.turnClockwise(3);
  int dx=shiftDir.dx();
  int dy=shiftDir.dy();
  Iterator<Edge> newEdgeItr=ListSequence.fromList(modification.getNewEdges()).iterator();
  for (  Edge edge : ListSequence.fromList(edges)) {
    layout.removeStraightBends(edge);
    List<Point> edgeLayout=layout.getEdgeLayout(edge);
    List<Point> pointsToShift;
    if (edge.getSource() == node) {
      pointsToShift=ListSequence.fromListAndArray(new ArrayList<Point>(),ListSequence.fromList(edgeLayout).getElement(0),ListSequence.fromList(edgeLayout).getElement(1));
    }
 else {
      int last=ListSequence.fromList(edgeLayout).count() - 1;
      pointsToShift=ListSequence.fromListAndArray(new ArrayList<Point>(),ListSequence.fromList(edgeLayout).getElement(last),ListSequence.fromList(edgeLayout).getElement(last - 1));
    }
    Edge newEdge=newEdgeItr.next();
    for (    Point point : ListSequence.fromList(pointsToShift)) {
      point.translate(dx * MapSequence.fromMap(edgeShifts).get(newEdge),dy * MapSequence.fromMap(edgeShifts).get(newEdge));
    }
  }
}
