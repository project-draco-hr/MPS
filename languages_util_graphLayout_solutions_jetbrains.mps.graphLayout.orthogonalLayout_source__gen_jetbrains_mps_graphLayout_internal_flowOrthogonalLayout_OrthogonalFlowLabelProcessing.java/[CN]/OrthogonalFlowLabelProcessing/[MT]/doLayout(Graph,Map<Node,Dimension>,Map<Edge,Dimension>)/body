{
  Graph copy=new Graph();
  Map<Node,Node> nodeMap=MapSequence.<Node,Node>fromMap(new HashMap<Node,Node>());
  Map<Edge,Edge> edgeMap=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  Map<Node,Dimension> copyNodeSizes=MapSequence.<Node,Dimension>fromMap(new LinkedHashMap<Node,Dimension>(16,(float)0.75,false));
  Map<Edge,Dimension> copyLabelSizes=MapSequence.<Edge,Dimension>fromMap(new HashMap<Edge,Dimension>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Node copyNode=copy.createNode();
    MapSequence.<Node,Node>fromMap(nodeMap).put(node,copyNode);
    MapSequence.<Node,Dimension>fromMap(copyNodeSizes).put(copyNode,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Edge copyEdge=copy.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource()),MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getTarget()));
    MapSequence.<Edge,Edge>fromMap(edgeMap).put(edge,copyEdge);
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(labelSizes).keySet())) {
    MapSequence.<Edge,Dimension>fromMap(copyLabelSizes).put(MapSequence.<Edge,Edge>fromMap(edgeMap).get(edge),MapSequence.<Edge,Dimension>fromMap(labelSizes).get(edge));
  }
  GraphLayout copyLayout=getLayoutCorruptGraph(copy,copyNodeSizes,copyLabelSizes);
  GraphLayout layout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    layout.setLayoutFor(node,copyLayout.getNodeLayout(MapSequence.<Node,Node>fromMap(nodeMap).get(node)));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Edge copyEdge=MapSequence.<Edge,Edge>fromMap(edgeMap).get(edge);
    List<Point> copyEdgeLayout=copyLayout.getEdgeLayout(copyEdge);
    if (copyEdge.getSource() != MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource())) {
      copyEdgeLayout=ListSequence.<Point>fromList(copyEdgeLayout).reversedList();
    }
    layout.setLayoutFor(edge,copyEdgeLayout);
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(labelSizes).keySet())) {
    layout.setLabelLayout(edge,copyLayout.getLabelLayout(MapSequence.<Edge,Edge>fromMap(edgeMap).get(edge)));
  }
  Rectangle rect=layout.getContainingRectangle();
  layout=layout.shift(20 - rect.x,20 - rect.y);
  return layout;
}
