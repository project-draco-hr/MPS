{
  Graph graph=embeddedGraph.getGraph();
  List<Edge> oldEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(oldEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  List<Node> oldNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  ListSequence.<Node>fromList(oldNodes).addSequence(SetSequence.<Node>fromSet(MapSequence.fromMap(nodeSizes).keySet()));
  Map<Edge,Node> labelNodes=MapSequence.<Edge,Node>fromMap(new HashMap<Edge,Node>());
  Map<Edge,List<Edge>> labelEdges=MapSequence.<Edge,List<Edge>>fromMap(new HashMap<Edge,List<Edge>>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(labelSizes).keySet())) {
    List<Edge> newEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
    MapSequence.<Edge,Node>fromMap(labelNodes).put(edge,embeddedGraph.splitEdge(edge,newEdges));
    MapSequence.<Edge,List<Edge>>fromMap(labelEdges).put(edge,newEdges);
  }
  Map<Node,Dimension> labelAndNodeSizes=MapSequence.<Node,Dimension>fromMap(new HashMap<Node,Dimension>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(labelSizes).keySet())) {
    MapSequence.<Node,Dimension>fromMap(labelAndNodeSizes).put(MapSequence.<Edge,Node>fromMap(labelNodes).get(edge),MapSequence.<Edge,Dimension>fromMap(labelSizes).get(edge));
  }
  Map<Node,Map<Direction2D,Integer>> labelAndNodeDirectionSizes=getNodeDirectionSizes(labelAndNodeSizes);
  Map<Node,Map<Direction2D,Integer>> nodeDirectionSizes=getNodeDirectionSizes(nodeSizes);
  for (  Node node : SetSequence.<Node>fromSet(MapSequence.fromMap(nodeSizes).keySet())) {
    MapSequence.<Node,Dimension>fromMap(labelAndNodeSizes).put(node,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node));
    MapSequence.<Node,Map<Direction2D,Integer>>fromMap(labelAndNodeDirectionSizes).put(node,MapSequence.<Node,Map<Direction2D,Integer>>fromMap(nodeDirectionSizes).get(node));
  }
  GraphLayout layout=getLayoutFromEmbeddedGraph(embeddedGraph,labelAndNodeSizes,labelAndNodeDirectionSizes,historyManager);
  GraphLayout initialLayout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(oldNodes)) {
    initialLayout.setLayoutFor(node,layout.getNodeLayout(node));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(oldEdges)) {
    initialLayout.setLabelLayout(edge,layout.getNodeLayout(MapSequence.<Edge,Node>fromMap(labelNodes).get(edge)));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(oldEdges)) {
    if (MapSequence.fromMap(labelEdges).containsKey(edge)) {
      List<Edge> newEdges=MapSequence.<Edge,List<Edge>>fromMap(labelEdges).get(edge);
      List<Point> edgeLayout=layout.getEdgeLayout(ListSequence.<Edge>fromList(newEdges).getElement(0));
      ListSequence.<Point>fromList(edgeLayout).addSequence(ListSequence.<Point>fromList(layout.getEdgeLayout(ListSequence.<Edge>fromList(newEdges).getElement(1))));
      initialLayout.setLayoutFor(edge,edgeLayout);
    }
 else {
      initialLayout.setLayoutFor(edge,layout.getEdgeLayout(edge));
    }
  }
  return initialLayout;
}
