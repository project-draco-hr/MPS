{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("to",new BaseReferenceConstraintsDescriptor("to",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_p94dcx_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ListScope(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.samples.componentDependencies.structure.ComponentSet",true,false),"component",true)){
            public String getName(            SNode child){
              return SPropertyOperations.getString(SNodeOperations.cast(child,"jetbrains.mps.samples.componentDependencies.structure.Component"),"name");
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
