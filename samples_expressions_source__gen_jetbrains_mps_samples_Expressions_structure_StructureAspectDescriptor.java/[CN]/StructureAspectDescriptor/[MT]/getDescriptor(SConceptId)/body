{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AndSimpleMathExpression:
    return myConceptAndSimpleMathExpression;
case LanguageConceptSwitch.ArithmeticSimpleMathExpression:
  return myConceptArithmeticSimpleMathExpression;
case LanguageConceptSwitch.BinarySimpleMathExpression:
return myConceptBinarySimpleMathExpression;
case LanguageConceptSwitch.LogicalSimpleMathExpression:
return myConceptLogicalSimpleMathExpression;
case LanguageConceptSwitch.NotSimpleMathExpression:
return myConceptNotSimpleMathExpression;
case LanguageConceptSwitch.OrSimpleMathExpression:
return myConceptOrSimpleMathExpression;
case LanguageConceptSwitch.SimpleMathAssignment:
return myConceptSimpleMathAssignment;
case LanguageConceptSwitch.SimpleMathBooleanConstant:
return myConceptSimpleMathBooleanConstant;
case LanguageConceptSwitch.SimpleMathBooleanType:
return myConceptSimpleMathBooleanType;
case LanguageConceptSwitch.SimpleMathElementType:
return myConceptSimpleMathElementType;
case LanguageConceptSwitch.SimpleMathExpression:
return myConceptSimpleMathExpression;
case LanguageConceptSwitch.SimpleMathFloatConstant:
return myConceptSimpleMathFloatConstant;
case LanguageConceptSwitch.SimpleMathFloatType:
return myConceptSimpleMathFloatType;
case LanguageConceptSwitch.SimpleMathIntegerConstant:
return myConceptSimpleMathIntegerConstant;
case LanguageConceptSwitch.SimpleMathIntegerType:
return myConceptSimpleMathIntegerType;
case LanguageConceptSwitch.SimpleMathLongConstant:
return myConceptSimpleMathLongConstant;
case LanguageConceptSwitch.SimpleMathLongType:
return myConceptSimpleMathLongType;
case LanguageConceptSwitch.SimpleMathNumberType:
return myConceptSimpleMathNumberType;
case LanguageConceptSwitch.SimpleMathType:
return myConceptSimpleMathType;
case LanguageConceptSwitch.SimpleMathTypedVarDeclaration:
return myConceptSimpleMathTypedVarDeclaration;
case LanguageConceptSwitch.SimpleMathVarDeclaration:
return myConceptSimpleMathVarDeclaration;
case LanguageConceptSwitch.SimpleMathVarReference:
return myConceptSimpleMathVarReference;
case LanguageConceptSwitch.SimpleMathWrapper:
return myConceptSimpleMathWrapper;
case LanguageConceptSwitch.UnarySimpleMathExpression:
return myConceptUnarySimpleMathExpression;
default :
return null;
}
}
