{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.AndSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").alias("and","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").properties("operator").staticScope(StaticScope.NONE).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").children(new String[]{"left","right"},new boolean[]{false,false}).abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.NotSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").alias("not","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.OrSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").alias("or","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Bool","").staticScope(StaticScope.NONE).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Int","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"initializer"},new boolean[]{false}).alias("var","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarReference").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").references("declaration").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathWrapper").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expressions"},new boolean[]{true}).create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").children(new String[]{"original"},new boolean[]{false}).abstract_().create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
