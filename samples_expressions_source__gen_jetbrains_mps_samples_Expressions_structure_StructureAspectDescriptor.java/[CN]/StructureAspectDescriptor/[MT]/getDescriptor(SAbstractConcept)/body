{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0cb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAndSimpleMathExpression;
      }
    break;
case 1:
  if (true) {
    return myConceptArithmeticSimpleMathExpression;
  }
break;
case 2:
if (true) {
return myConceptBinarySimpleMathExpression;
}
break;
case 3:
if (true) {
return myConceptLogicalSimpleMathExpression;
}
break;
case 4:
if (true) {
return myConceptNotSimpleMathExpression;
}
break;
case 5:
if (true) {
return myConceptOrSimpleMathExpression;
}
break;
case 6:
if (true) {
return myConceptSimpleMathAssignment;
}
break;
case 7:
if (true) {
return myConceptSimpleMathBooleanConstant;
}
break;
case 8:
if (true) {
return myConceptSimpleMathBooleanType;
}
break;
case 9:
if (true) {
return myConceptSimpleMathElementType;
}
break;
case 10:
if (true) {
return myConceptSimpleMathExpression;
}
break;
case 11:
if (true) {
return myConceptSimpleMathFloatConstant;
}
break;
case 12:
if (true) {
return myConceptSimpleMathFloatType;
}
break;
case 13:
if (true) {
return myConceptSimpleMathIntegerConstant;
}
break;
case 14:
if (true) {
return myConceptSimpleMathIntegerType;
}
break;
case 15:
if (true) {
return myConceptSimpleMathLongConstant;
}
break;
case 16:
if (true) {
return myConceptSimpleMathLongType;
}
break;
case 17:
if (true) {
return myConceptSimpleMathNumberType;
}
break;
case 18:
if (true) {
return myConceptSimpleMathType;
}
break;
case 19:
if (true) {
return myConceptSimpleMathTypedVarDeclaration;
}
break;
case 20:
if (true) {
return myConceptSimpleMathVarDeclaration;
}
break;
case 21:
if (true) {
return myConceptSimpleMathVarReference;
}
break;
case 22:
if (true) {
return myConceptSimpleMathWrapper;
}
break;
case 23:
if (true) {
return myConceptUnarySimpleMathExpression;
}
break;
default :
}
}
return null;
}
