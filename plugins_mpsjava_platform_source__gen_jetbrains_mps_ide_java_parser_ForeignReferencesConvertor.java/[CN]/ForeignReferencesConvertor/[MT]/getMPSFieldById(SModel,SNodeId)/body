{
  String idString=nodeId.toString();
  SNode classifier=getMPSClassByIdString(model,NameUtil.namespaceFromLongName(idString));
  if ((classifier == null)) {
    return null;
  }
  String fieldName=NameUtil.shortNameFromLongName(idString);
  for (  SNode field : BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),classifier,"jetbrains.mps.baseLanguage.structure.Classifier","call_staticFields_5292274854859223538",new Object[]{})) {
    if (SPropertyOperations.getString(field,"name").equals(fieldName)) {
      return field;
    }
  }
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    for (    SNode field : BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>)((Class)Object.class),SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"jetbrains.mps.baseLanguage.structure.ClassConcept","call_fields_5292274854859383272",new Object[]{})) {
      if (SPropertyOperations.getString(field,"name").equals(fieldName)) {
        return field;
      }
    }
  }
  return null;
}
