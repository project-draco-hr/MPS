{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("containerDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode expr=SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Expression");
      return ((expr != null) ? Sequence.fromIterable(CustomContainersUtil.containerDeclarations(SNodeOperations.getModel(expr),TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.as(SNodeOperations.getParent(expr),"jetbrains.mps.baseLanguage.structure.TypeDerivable"),expr))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(it,"containerType",true)),"jetbrains.mps.baseLanguage.collections.structure.MapType"));
        }
      }
) : Sequence.fromIterable(Collections.<SNode>emptyList()));
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)","9034802358628295001");
    }
  }
);
  return result;
}
