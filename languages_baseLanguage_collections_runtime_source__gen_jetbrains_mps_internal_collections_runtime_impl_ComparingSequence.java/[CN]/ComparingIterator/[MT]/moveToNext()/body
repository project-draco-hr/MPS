{
  next=null;
  hasNext=HasNextState.AT_END;
  loop:   do {
switch (kind) {
case SUBSTRACTION:
      if (leftIt.hasNext()) {
        U tmp=leftIt.next();
        if (cardMap.postDec(tmp) == 0) {
          setNext(tmp);
          break loop;
        }
      }
 else {
        break loop;
      }
    break;
case INTERSECTION:
  if (leftIt.hasNext()) {
    U tmp=leftIt.next();
    if (cardMap.postDec(tmp) > 0) {
      setNext(tmp);
      break loop;
    }
  }
 else {
    break loop;
  }
break;
case UNION:
if (leftIt.hasNext()) {
U tmp=leftIt.next();
cardMap.postInc(tmp);
setNext(tmp);
break loop;
}
if (rightIt.hasNext()) {
U tmp=rightIt.next();
if (cardMap.postDec(tmp) == 0) {
setNext(tmp);
break loop;
}
}
 else {
break loop;
}
break;
case DISJUNCTION:
if (leftIt.hasNext()) {
U tmp=leftIt.next();
if (cardMap.postDec(tmp) == 0) {
setNext(tmp);
break loop;
}
}
 else if (rightIt.hasNext()) {
U tmp=rightIt.next();
if (cardMap.postDec(tmp) > 0) {
setNext(tmp);
break loop;
}
}
 else {
break loop;
}
break;
default :
break;
}
}
 while (true);
if (!((hasNext.hasNext()))) {
destroy();
}
}
