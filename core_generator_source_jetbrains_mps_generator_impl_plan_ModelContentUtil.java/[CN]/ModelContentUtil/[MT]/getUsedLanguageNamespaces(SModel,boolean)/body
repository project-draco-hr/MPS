{
  if (isTemplateModel) {
    return getUsedLanguageNamespacesInTemplateModel(model);
  }
  if (SModelStereotype.isGeneratorModel(model)) {
    TemplateModelScanner templateModelScanner=new TemplateModelScanner(model);
    templateModelScanner.scan();
    Set<String> namespaces=new HashSet<String>(templateModelScanner.getQueryLanguages());
    for (    SModuleReference ref : ((jetbrains.mps.smodel.SModelInternal)model).engagedOnGenerationLanguages()) {
      namespaces.add(ref.getModuleName());
    }
    return namespaces;
  }
  Set<String> namespaces=new HashSet<String>();
  for (  SModuleReference ref : ((jetbrains.mps.smodel.SModelInternal)model).engagedOnGenerationLanguages()) {
    namespaces.add(ref.getModuleName());
  }
  for (  SNode root : model.getRootNodes()) {
    namespaces.add(root.getConcept().getLanguage().getQualifiedName());
    for (    SNode child : jetbrains.mps.util.SNodeOperations.getDescendants(root,null)) {
      namespaces.add(child.getConcept().getLanguage().getQualifiedName());
    }
  }
  if (model.getModule() instanceof Language && LanguageAspect.BEHAVIOR.is(model)) {
    namespaces.add(BootstrapLanguages.BEHAVIOR.getModuleName());
  }
  return namespaces;
}
