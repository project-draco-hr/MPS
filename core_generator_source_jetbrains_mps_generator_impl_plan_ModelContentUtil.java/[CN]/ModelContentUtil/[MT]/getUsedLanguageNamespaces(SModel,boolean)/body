{
  if (isTemplateModel) {
    return getUsedLanguageNamespacesInTemplateModel(model);
  }
  if (SModelStereotype.isGeneratorModel(model)) {
    TemplateModelScanner templateModelScanner=new TemplateModelScanner(model);
    templateModelScanner.scan();
    Set<String> namespaces=new HashSet<String>(templateModelScanner.getQueryLanguages());
    for (    ModuleReference ref : model.engagedOnGenerationLanguages()) {
      namespaces.add(ref.getModuleFqName());
    }
    return namespaces;
  }
  Set<String> namespaces=new HashSet<String>();
  for (  ModuleReference ref : model.engagedOnGenerationLanguages()) {
    namespaces.add(ref.getModuleFqName());
  }
  for (  SNode root : model.roots()) {
    for (    SNode child : root.getDescendantsIterable(null,true)) {
      String namespace1=NameUtil.namespaceFromConceptFQName(child.getConcept().getQualifiedName());
      namespaces.add(namespace1);
    }
  }
  SModelDescriptor modelDescriptor=model.getModelDescriptor();
  if (modelDescriptor != null && modelDescriptor.getModule() instanceof Language && LanguageAspect.BEHAVIOR.is(modelDescriptor)) {
    namespaces.add(BootstrapLanguages.BEHAVIOR.getModuleFqName());
  }
  return namespaces;
}
