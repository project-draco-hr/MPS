{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("belongsTo",new BaseReferenceConstraintsDescriptor("belongsTo",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=SModelOperations.getNodesIncludingImported(_context.getModel(),GlobalScope.getInstance(),"jetbrains.mps.ui.modeling.structure.UIObject");
          if ((_context.getReferenceNode() == null)) {
            return nodes;
          }
          SNode uio=SNodeOperations.cast(_context.getReferenceNode(),"jetbrains.mps.ui.modeling.structure.UIObject");
          final SNode mbt=UIObject_Behavior.call_mustBelongTo_1719339442171055203(uio);
          if (mbt != null) {
            ListSequence.fromList(nodes).removeWhere(new IWhereFilter<SNode>(){
              public boolean accept(              SNode n){
                return !(Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(n)).contains(mbt));
              }
            }
);
          }
          return nodes;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8gus11_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
