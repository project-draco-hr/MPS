{
  Set<SNode> result=new HashSet<SNode>();
  if (MatchingUtil.matchNodes(a,b)) {
    result.add(a);
    return result;
  }
  Set<SNode> superTypesA=new HashSet<SNode>(subTypesToSuperTypes.get(a));
  superTypesA.add(a);
  Set<SNode> superTypesB=new HashSet<SNode>(subTypesToSuperTypes.get(b));
  superTypesB.add(b);
  for (  SNode superTypeA : new HashSet<SNode>(superTypesA)) {
    boolean matches=false;
    for (    SNode superTypeB : superTypesB) {
      if (MatchingUtil.matchNodes(superTypeA,superTypeB)) {
        matches=true;
        break;
      }
    }
    if (!matches) {
      superTypesA.remove(superTypeA);
    }
  }
  Set<SNode> commonSupertypes=superTypesA;
  for (  SNode commonSupertype : new HashSet<SNode>(commonSupertypes)) {
    Set<SNode> superTypes=subTypesToSuperTypes.get(commonSupertype);
    if (superTypes != null) {
      for (      SNode superType : superTypes) {
        removeStructurally(commonSupertypes,superType);
      }
    }
  }
  return commonSupertypes;
}
