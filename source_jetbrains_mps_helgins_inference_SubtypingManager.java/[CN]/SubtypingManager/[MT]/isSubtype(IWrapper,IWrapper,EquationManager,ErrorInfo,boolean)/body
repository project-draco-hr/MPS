{
  IWrapper subRepresentator=subtype;
  IWrapper superRepresentator=supertype;
  if (equationManager != null) {
    subRepresentator=equationManager.getRepresentatorWrapper(subtype);
    superRepresentator=equationManager.getRepresentatorWrapper(supertype);
  }
  if (subRepresentator == superRepresentator)   return true;
  if (subRepresentator == null || superRepresentator == null)   return false;
  if (equationManager != null && subRepresentator instanceof NodeWrapper) {
    NodeWrapper subtypeNodeWrapper=(NodeWrapper)subRepresentator;
    SModel typesModel=getRuntimeTypesModel();
    NodeWrapper representatorCopy=new NodeWrapper(CopyUtil.copy(subtypeNodeWrapper.getNode(),typesModel));
    subRepresentator=equationManager.expandWrapper(null,representatorCopy,typesModel);
  }
  if (superRepresentator.matchesWith(subRepresentator,equationManager,errorInfo)) {
    return true;
  }
  return isStrictSubtype(subRepresentator,superRepresentator,equationManager,errorInfo,isWeak);
}
