{
  StructuralNodeSet result=new StructuralNodeSet();
  if (MatchingUtil.matchNodes(a,b)) {
    result.add(a);
    return result;
  }
  StructuralNodeSet<?> superTypesA=subTypesToSuperTypes.get(a) != null ? new StructuralNodeSet(subTypesToSuperTypes.get(a)) : new StructuralNodeSet();
  superTypesA.add(a);
  StructuralNodeSet<?> superTypesB=subTypesToSuperTypes.get(b) != null ? new StructuralNodeSet(subTypesToSuperTypes.get(b)) : new StructuralNodeSet();
  superTypesB.add(b);
  for (  SNode superTypeA : new HashSet<SNode>(superTypesA)) {
    boolean matches=false;
    for (    SNode superTypeB : superTypesB) {
      if (MatchingUtil.matchNodes(superTypeA,superTypeB)) {
        matches=true;
        break;
      }
    }
    if (!matches) {
      superTypesA.remove(superTypeA);
    }
  }
  StructuralNodeSet commonSupertypes=superTypesA;
  for (  SNode commonSupertype : new HashSet<SNode>(commonSupertypes)) {
    Set<SNode> superTypes=subTypesToSuperTypes.get(commonSupertype);
    if (superTypes != null) {
      for (      SNode superType : superTypes) {
        if (!MatchingUtil.matchNodes(superType,commonSupertype)) {
          commonSupertypes.removeStructurally(superType);
        }
      }
    }
  }
  return commonSupertypes;
}
