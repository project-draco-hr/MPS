{
  ExpressionContext expressionContext=new ExpressionContext();
  AnalyzedTermDeclaration analyzedTermDeclaration=AnalyzedTermDeclaration.newInstance(getRuntimeTypesModel());
  ConceptReference condition=ConceptReference.newInstance(getRuntimeTypesModel());
  condition.setConcept(SModelUtil_new.findConceptDeclaration(aClass,GlobalScope.getInstance()));
  analyzedTermDeclaration.setCondition(condition);
  coerceSubtyping(subtype,analyzedTermDeclaration,expressionContext);
  return (T)BaseAdapter.fromNode((SNode)expressionContext.getValue(analyzedTermDeclaration));
}
