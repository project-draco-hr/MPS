{
  SNode subRepresentator=myTypeChecker.getEquationManager().getRepresentator(subtype);
  SNode superRepresentator=myTypeChecker.getEquationManager().getRepresentator(supertype);
  Set<SNode> frontier=new HashSet<SNode>();
  Set<SNode> newFrontier=new HashSet<SNode>();
  frontier.add(subRepresentator);
  while (!frontier.isEmpty()) {
    for (    SNode node : frontier) {
      Set<SNode> ancestors=collectSupertypes(node);
      if (ancestors == null)       continue;
      ancestors.remove(node);
      for (      SNode ancestor : ancestors) {
        if (MatchingUtil.matchNodes(ancestor,superRepresentator)) {
          return true;
        }
      }
      newFrontier.addAll(ancestors);
    }
    frontier=newFrontier;
    newFrontier=new HashSet<SNode>();
  }
  frontier=new HashSet<SNode>();
  newFrontier=new HashSet<SNode>();
  frontier.add(superRepresentator);
  while (!frontier.isEmpty()) {
    for (    SNode node : frontier) {
      Set<SNode> descendants=collectSubtypes(node);
      if (descendants == null)       continue;
      descendants.remove(node);
      for (      SNode descendant : descendants) {
        if (MatchingUtil.matchNodes(descendant,superRepresentator)) {
          return true;
        }
      }
      newFrontier.addAll(descendants);
    }
    frontier=newFrontier;
    newFrontier=new HashSet<SNode>();
  }
  return false;
}
