{
  StructuralNodeSet result=new StructuralNodeSet();
  if (term == null)   return result;
  Set<SupertypingRule_Runtime> supertypingRule_runtimes=myTypeChecker.getRulesManager().getSupertypingRules(term,isWeak);
  if (supertypingRule_runtimes != null) {
    for (    SupertypingRule_Runtime supertypingRule : supertypingRule_runtimes) {
      List<SNode> subtypes=supertypingRule.getSubOrSuperTypes(term);
      result.addAll(subtypes);
    }
  }
  Set<SupertypingRule> supertypingRules=myConceptsToSupertypingRulesCache.get((ConceptDeclaration)term.getConceptDeclarationAdapter());
  if (supertypingRules == null)   return result;
  for (  SupertypingRule rule : supertypingRules) {
    AnalyzedTermDeclaration applicableNode=rule.getApplicableNode();
    if (applicableNode == null)     continue;
    Expression expression=rule.getSubtype();
    if (expression == null)     continue;
    List<SNode> subtypes=getSupertypesOrSubtypes(term,applicableNode,expression);
    if (subtypes != null) {
      result.addAll(subtypes);
    }
  }
  return result;
}
