{
  StructuralNodeSet result=new StructuralNodeSet();
  if (term == null) {
    return result;
  }
  Set<SubtypingRule_Runtime> subtypingRule_runtimes=myTypeChecker.getRulesManager().getSubtypingRules(term,isWeak);
  if (subtypingRule_runtimes != null) {
    for (    SubtypingRule_Runtime subtypingRule : subtypingRule_runtimes) {
      List<SNode> supertypes=subtypingRule.getSubOrSuperTypes(term);
      result.addAll(supertypes);
    }
  }
  Set<SubtypingRule> subtypingRules=myConceptsToSubtypingRulesCache.get((ConceptDeclaration)term.getConceptDeclarationAdapter());
  if (subtypingRules != null) {
    for (    SubtypingRule rule : subtypingRules) {
      AnalyzedTermDeclaration applicableNode=rule.getApplicableNode();
      if (applicableNode == null)       continue;
      Expression expression=rule.getSupertype();
      if (expression == null)       continue;
      List<SNode> supertypes=getSupertypesOrSubtypes(term,applicableNode,expression);
      if (supertypes != null) {
        result.addAll(supertypes);
      }
    }
  }
  return result;
}
