{
  if (types.size() == 1)   return new HashSet<SNode>(types);
  StructuralNodeSet allTypes=new StructuralNodeSet();
  StructuralNodeSet result=new StructuralNodeSet(types);
  allTypes.addAllStructurally((Set<SNode>)types);
  HashMap<SNode,StructuralNodeSet> subTypesToSupertypes=new HashMap<SNode,StructuralNodeSet>();
  Set<SNode> frontier=new HashSet<SNode>(types);
  Set<SNode> newFrontier=new HashSet<SNode>();
  StructuralNodeSet subTypesToSupertypesKeySet=new StructuralNodeSet(subTypesToSupertypes.keySet());
  while (!frontier.isEmpty()) {
    for (    SNode type : frontier) {
      if (subTypesToSupertypesKeySet.containsStructurally(type)) {
        continue;
      }
      StructuralNodeSet superTypes=collectImmediateSupertypes(type);
      subTypesToSupertypes.put(type,superTypes);
      subTypesToSupertypesKeySet.addStructurally(type);
      newFrontier.addAll(superTypes);
      allTypes.addAllStructurally(superTypes);
    }
    frontier=newFrontier;
    newFrontier=new HashSet<SNode>();
  }
  for (  SNode node2 : allTypes) {
    for (    SNode node1 : allTypes) {
      for (      SNode node3 : allTypes) {
        StructuralNodeSet supertypes1=subTypesToSupertypes.get(node1);
        if (supertypes1 == null)         continue;
        StructuralNodeSet supertypes2=subTypesToSupertypes.get(node2);
        if (supertypes2 == null)         continue;
        if (supertypes1.containsStructurally(node2) && supertypes2.containsStructurally(node3)) {
          supertypes1.addStructurally(node3);
        }
      }
    }
  }
  while (result.size() >= 2) {
    Iterator<? extends SNode> iterator=result.iterator();
    SNode a=iterator.next();
    SNode b=iterator.next();
    result.remove(a);
    result.remove(b);
    result.addAllStructurally(leastCommonSupertypes(a,b,subTypesToSupertypes));
  }
  return result;
}
