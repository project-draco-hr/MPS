{
  String[] tokens=SPropertyOperations.getString(x,"tokens").split("\\.");
  SNode operand=null;
  int tokPos=0;
  SNode mbVarRef=ResolveUnknownUtil.tryFirstTokenAsVarRef(x);
  if ((mbVarRef != null)) {
    operand=mbVarRef;
    tokPos=1;
  }
 else {
    Tuples._2<SNode,Integer> classAndPos=ResolveUnknownUtil.tryFindClass(x);
    if (classAndPos == null) {
      return null;
    }
    SNode cls=classAndPos._0();
    tokPos=(int)(classAndPos._1());
    if (tokPos == tokens.length) {
      return cls;
    }
 else {
      final String memberName=tokens[tokPos];
      SNode mbEnumConst=null;
      if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.EnumClass")) {
        mbEnumConst=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.EnumClass"),"enumConstant",true)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return memberName.equals(SPropertyOperations.getString(it,"name"));
          }
        }
).first();
      }
      if (mbEnumConst != null) {
        SNode enumRef=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference",null);
        SLinkOperations.setTarget(enumRef,"enumClass",SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.EnumClass"),false);
        SLinkOperations.setTarget(enumRef,"enumConstantDeclaration",mbEnumConst,false);
        operand=enumRef;
      }
 else {
        SNode statFieldRef=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
        SLinkOperations.setTarget(statFieldRef,"classifier",cls,false);
        SReference fieldRef;
        fieldRef=new DynamicReference("variableDeclaration",statFieldRef,null,memberName);
        statFieldRef.setReference(fieldRef.getRole(),fieldRef);
        operand=statFieldRef;
      }
      tokPos=tokPos + 1;
    }
  }
  if ((operand == null)) {
    return null;
  }
  while (tokPos < tokens.length) {
    SNode dotExpr=ResolveUnknownUtil.makeFieldDotExpression(operand,tokens[tokPos]);
    operand=dotExpr;
    tokPos++;
  }
  return operand;
}
