{
  final SNode typ=findClass(x,SPropertyOperations.getString(x,"className"));
  if ((typ == null)) {
    return null;
  }
  if (!(SNodeOperations.isInstanceOf(typ,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
    return null;
  }
  return new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GenericNewExpression",null);
      SNode creator;
      Tuples._2<SNode,Boolean> resolveResult=MethodResolveUtil.resolveMethod(x,"");
      SNode ctor=(resolveResult == null ? null : SNodeOperations.as(resolveResult._0(),"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
      if ((ctor == null)) {
        if (ListSequence.fromList(SLinkOperations.getTargets(x,"actualArgument",true)).isNotEmpty()) {
          return null;
        }
        SNode defaultConsCreator=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DefaultClassCreator",null);
        SLinkOperations.setTarget(defaultConsCreator,"classifier",typ,false);
        for (        SNode arg : ListSequence.fromList(SLinkOperations.getTargets(x,"typeArgument",true))) {
          SNodeOperations.detachNode(arg);
          ListSequence.fromList(SLinkOperations.getTargets(defaultConsCreator,"typeParameter",true)).addElement(arg);
        }
        creator=defaultConsCreator;
      }
 else {
        SNode classCreator=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassCreator",null);
        reattachMethodArguments(x,classCreator);
        for (        SNode arg : ListSequence.fromList(SLinkOperations.getTargets(x,"typeArgument",true))) {
          SNodeOperations.detachNode(arg);
          ListSequence.fromList(SLinkOperations.getTargets(classCreator,"typeParameter",true)).addElement(arg);
        }
        SLinkOperations.setTarget(classCreator,"baseMethodDeclaration",ctor,false);
        creator=classCreator;
      }
      SLinkOperations.setTarget(result,"creator",creator,true);
      return result;
    }
  }
;
}
