{
  final SNode operand=ResolveUnknownUtil.resolveTokens(x);
  final String className=null;
  if ((operand == null)) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(operand,"jetbrains.mps.baseLanguage.structure.Classifier")) {
    final SNode target=((operand == null) ? null : SNodeOperations.cast(operand,"jetbrains.mps.baseLanguage.structure.Classifier"));
    if ((target != null) && !(SNodeOperations.isInstanceOf(target,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return null;
    }
    return new _FunctionTypes._return_P0_E0<SNode>(){
      public SNode invoke(){
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
        if ((target != null)) {
          SLinkOperations.setTarget(call,"classConcept",SNodeOperations.cast(target,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
        }
 else {
          call.setReference(new DynamicReference("classConcept",call,null,className).getRole(),new DynamicReference("classConcept",call,null,className));
        }
        SReference sref=new DynamicReference("baseMethodDeclaration",call,null,SPropertyOperations.getString(x,"callee"));
        call.setReference(sref.getRole(),sref);
        reattachMethodArguments(x,call);
        return call;
      }
    }
;
  }
 else   if (SNodeOperations.isInstanceOf(operand,"jetbrains.mps.baseLanguage.structure.Expression")) {
    return new _FunctionTypes._return_P0_E0<SNode>(){
      public SNode invoke(){
        SNode dotExpr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
        SLinkOperations.setTarget(dotExpr,"operand",SNodeOperations.cast(operand,"jetbrains.mps.baseLanguage.structure.Expression"),true);
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
        SLinkOperations.setTarget(dotExpr,"operation",call,true);
        SReference sref=new DynamicReference("baseMethodDeclaration",call,null,SPropertyOperations.getString(x,"callee"));
        call.setReference(sref.getRole(),sref);
        reattachMethodArguments(x,call);
        return dotExpr;
      }
    }
;
  }
 else {
    return null;
  }
}
