{
  final Wrappers._T<SNode> call=new Wrappers._T<SNode>(null);
  Scope methodsScope=Scope.getScope(SNodeOperations.getParent(x),x,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.MethodDeclaration"));
  if (methodsScope == null) {
    return null;
  }
  SNode node=methodsScope.resolve(x,SPropertyOperations.getString(x,"callee"));
  if ((node == null)) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
    SNode decl=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    SNode scall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(scall,"baseMethodDeclaration",decl,false);
    call.value=scall;
  }
 else   if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
    SNode decl=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SNode icall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalMethodCall",null);
    SLinkOperations.setTarget(icall,"baseMethodDeclaration",decl,false);
    call.value=icall;
  }
  if ((call.value == null)) {
    return null;
  }
  return new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      reattachMethodArguments(x,call.value);
      return call.value;
    }
  }
;
}
