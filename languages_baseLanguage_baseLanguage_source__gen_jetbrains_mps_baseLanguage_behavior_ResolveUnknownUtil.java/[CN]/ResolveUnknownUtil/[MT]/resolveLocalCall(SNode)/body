{
  final Wrappers._T<SNode> call=new Wrappers._T<SNode>(null);
  Scope staticMethodsScope=Scope.getScope(SNodeOperations.getParent(x),x,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  Scope instMethodsScope=Scope.getScope(SNodeOperations.getParent(x),x,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  Iterable<SNode> staticMethods=staticMethodsScope.getAvailableElements(SPropertyOperations.getString(x,"callee"));
  Iterable<SNode> instMethods=instMethodsScope.getAvailableElements(SPropertyOperations.getString(x,"callee"));
  if (Sequence.fromIterable(staticMethods).isNotEmpty()) {
    SNode decl=SNodeOperations.cast(Sequence.fromIterable(staticMethods).iterator().next(),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    SNode scall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(scall,"baseMethodDeclaration",decl,false);
    call.value=scall;
  }
 else   if (Sequence.fromIterable(instMethods).isNotEmpty()) {
    SNode decl=null;
    if (Sequence.fromIterable(instMethods).isNotEmpty()) {
      decl=SNodeOperations.cast(Sequence.fromIterable(instMethods).iterator().next(),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    }
    SNode icall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",null);
    SLinkOperations.setTarget(icall,"baseMethodDeclaration",decl,false);
    call.value=icall;
  }
  if ((call.value == null)) {
    return null;
  }
  return new _FunctionTypes._return_P0_E0<SNode>(){
    public SNode invoke(){
      reattachMethodArguments(x,call.value);
      return call.value;
    }
  }
;
}
