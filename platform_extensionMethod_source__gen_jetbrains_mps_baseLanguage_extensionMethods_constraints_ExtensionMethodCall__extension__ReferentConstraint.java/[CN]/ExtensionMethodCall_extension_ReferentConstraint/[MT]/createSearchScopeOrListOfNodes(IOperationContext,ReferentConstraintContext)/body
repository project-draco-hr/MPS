{
  List<SNode> result=new ArrayList<SNode>();
  SNode operandType=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
  for (  SNode extension : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension"))) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operandType),SLinkOperations.getTarget(extension,"type",true))) {
      for (      SNode method : ListSequence.fromList(SLinkOperations.getTargets(extension,"methods",true))) {
        if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
          ListSequence.fromList(result).addElement(method);
        }
      }
    }
  }
  for (  SNode container : ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer"))) {
    for (    SNode method : ListSequence.fromList(SLinkOperations.getTargets(container,"methods",true))) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operandType),SLinkOperations.getTarget(method,"extendedType",true))) {
        if (VisibilityUtil.isVisible(_context.getEnclosingNode(),method)) {
          ListSequence.fromList(result).addElement(method);
        }
      }
    }
  }
  return result;
}
