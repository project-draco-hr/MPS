{
  Map<String,PropertyConstraintsDescriptor> properties=new HashMap();
  properties.put("nestedName",new BasePropertyConstraintsDescriptor("nestedName",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="nestedName";
      return Classifier_Behavior.call_getNestedName_8540045600162184125(node);
    }
  }
);
  properties.put("resolveInfo",new BasePropertyConstraintsDescriptor("resolveInfo",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="resolveInfo";
      return SPropertyOperations.getString(node,"nestedName");
    }
  }
);
  properties.put("shortDescription",new BasePropertyConstraintsDescriptor("shortDescription",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="shortDescription";
      return NodePresentationUtil.getAliasOrConceptName(node) + " (" + SNodeOperations.getModel(node).getSModelFqName().getCompactPresentation()+ ")";
    }
  }
);
  return properties;
}
