{
  List<SNode> methods=ListSequence.fromList(new ArrayList<SNode>());
  Set<SNode> extendedConcepts=SetSequence.fromSet(new HashSet<SNode>());
  SNode concept=thisNode;
  while ((concept != null) && !(SetSequence.fromSet(extendedConcepts).contains(concept))) {
    SetSequence.fromSet(extendedConcepts).addElement(concept);
    ListSequence.fromList(methods).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept,LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true)));
    concept=((SLinkOperations.getTarget(thisNode,"extends",false) != null) ? SLinkOperations.getTarget(thisNode,"extends",false) : SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626"));
  }
  for (  SNode interfaceConcept : ListSequence.fromList(SLinkOperations.getTargets(thisNode,"implements",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"intfc",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"intfc",false);
    }
  }
)) {
    ListSequence.fromList(methods).addSequence(ListSequence.fromList(InterfaceConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386413(interfaceConcept)));
  }
  return methods;
}
