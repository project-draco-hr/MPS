{
  final Set<String> existing=SetSequence.fromSet(new HashSet<String>());
  for (  SNode importProject : ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.buildlanguage.structure.ImportProject",false,new String[]{}))) {
    SetSequence.fromSet(existing).addElement(SPropertyOperations.getString(SLinkOperations.getTarget(importProject,"project",false),"name"));
  }
  Iterable<SNode> projects=ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.buildlanguage.structure.ITargetReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      boolean b=!(SetSequence.fromSet(existing).contains(BehaviorReflection.invokeVirtual(String.class,it,"virtual_getProjectFileName_1230222765831",new Object[]{})));
      SetSequence.fromSet(existing).addElement(BehaviorReflection.invokeVirtual(String.class,it,"virtual_getProjectFileName_1230222765831",new Object[]{}));
      return b;
    }
  }
);
  return Sequence.fromIterable(projects).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      return BehaviorReflection.invokeVirtual(String.class,a,"virtual_getProjectFileName_1230222765831",new Object[]{}).compareToIgnoreCase(BehaviorReflection.invokeVirtual(String.class,b,"virtual_getProjectFileName_1230222765831",new Object[]{}));
    }
  }
,true);
}
