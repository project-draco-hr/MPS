{
  try {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.inline");
    ModelAccess modelAccess=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess();
    final Wrappers._T<InlineVariableRefactoring> ref=new Wrappers._T<InlineVariableRefactoring>();
    final Wrappers._boolean isAvailable=new Wrappers._boolean(true);
    String messageDialogTitle="Inline Variable";
    final Wrappers._T<String> infoMessage=new Wrappers._T<String>(null);
    final Wrappers._T<String> yesNoMessage=new Wrappers._T<String>(null);
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7efL,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
          SNode localVariableDeclaration=SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7efL,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
          InlineVariableAssignmentRefactoring inlineVARef=new InlineVariableAssignmentRefactoring(localVariableDeclaration);
          if ((SLinkOperations.getTarget(localVariableDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,0xf8c37f506eL,"initializer")) == null)) {
            isAvailable.value=false;
          }
          String variableName=SPropertyOperations.getString(localVariableDeclaration,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
          int nodesCount=ListSequence.fromList(inlineVARef.getNodesToRefactor()).count();
          if (nodesCount == 0) {
            infoMessage.value="Variable " + variableName + " is never used";
          }
 else {
            yesNoMessage.value="Inline local variable '" + variableName + "'? ("+ NameUtil.formatNumericalString(nodesCount,"occurence")+ ")";
          }
          ref.value=inlineVARef;
        }
 else {
          SNode localVariableReference=SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,"jetbrains.mps.baseLanguage.structure.VariableReference"));
          ref.value=new InlineVariableReferenceRefactoring(localVariableReference);
        }
      }
    }
);
    if (!(isAvailable.value)) {
      return;
    }
    if (infoMessage.value != null) {
      Messages.showInfoMessage(((Frame)MapSequence.fromMap(_params).get("frame")),infoMessage.value,messageDialogTitle);
      return;
    }
    if (yesNoMessage.value != null) {
      int code=Messages.showYesNoDialog(((Frame)MapSequence.fromMap(_params).get("frame")),yesNoMessage.value,messageDialogTitle,null);
      if (code != 0) {
        return;
      }
    }
    modelAccess.executeCommand(new Runnable(){
      public void run(){
        SNode result=ref.value.doRefactoring();
        ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).select(result);
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "InlineLocalVariable",t);
    }
  }
}
