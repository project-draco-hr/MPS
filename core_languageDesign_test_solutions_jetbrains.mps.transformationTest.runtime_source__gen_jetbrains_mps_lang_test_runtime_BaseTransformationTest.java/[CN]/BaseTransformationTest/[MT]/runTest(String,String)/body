{
  final Wrappers._T<Class> clazz=new Wrappers._T<Class>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      clazz.value=BaseTransformationTest.this.myModel.getModule().getClass(className);
    }
  }
);
  final Object obj=clazz.value.newInstance();
  clazz.value.getField("myModel").set(obj,this.myTransidentModel);
  clazz.value.getField("myProject").set(obj,this.myProject);
  SwingUtilities.invokeAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          try {
            clazz.value.getDeclaredMethod(methodName).invoke(obj);
          }
 catch (          Throwable e) {
            e.printStackTrace();
          }
        }
      }
);
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      SModelRepository.getInstance().removeModelDescriptor(BaseTransformationTest.this.myTransidentModel);
    }
  }
);
}
