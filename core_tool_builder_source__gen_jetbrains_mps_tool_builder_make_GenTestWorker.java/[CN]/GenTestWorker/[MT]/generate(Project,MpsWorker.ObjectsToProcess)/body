{
  StringBuffer s=new StringBuffer("Generating:");
  for (  Project p : go.getProjects()) {
    s.append("\n    ");
    s.append(p);
  }
  for (  SModule m : go.getModules()) {
    s.append("\n    ");
    s.append(m);
  }
  for (  SModel m : go.getModels()) {
    s.append("\n    ");
    s.append(m);
  }
  info(s.toString());
  final _FunctionTypes._void_P1_E0<? super String> startTestFormat=new _FunctionTypes._void_P1_E0<String>(){
    public void invoke(    String msg){
      myReporter.testStarted(((msg == null ? null : msg.trim())));
    }
  }
;
  final _FunctionTypes._void_P1_E0<? super String> finishTestFormat=new _FunctionTypes._void_P1_E0<String>(){
    public void invoke(    String msg){
      myReporter.testFinished(((msg == null ? null : msg.trim())));
    }
  }
;
  IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(),new GenTestWorker.MyJobMonitor(new GenTestWorker.MyProgress(startTestFormat,finishTestFormat))){
    @Override public void setup(    IPropertiesPool ppool,    Iterable<ITarget> toExecute,    Iterable<? extends IResource> input){
      super.setup(ppool,toExecute,input);
      new MakeFacetInitializer().setPathToFile(new _FunctionTypes._return_P1_E0<IFile,String>(){
        public IFile invoke(        String path){
          return tmpFile(path);
        }
      }
).populate(ppool);
      new TextGenFacetInitializer().failNoTextGen(false).populate(ppool);
      Tuples._2<_FunctionTypes._return_P1_E0<? extends String,? super IFile>,Set<File>> dparams=(Tuples._2<_FunctionTypes._return_P1_E0<? extends String,? super IFile>,Set<File>>)ppool.properties(new ITarget.Name("jetbrains.mps.tool.gentest.Diff.diff"),Object.class);
      if (dparams != null && isShowDiff()) {
        dparams._0(new _FunctionTypes._return_P1_E0<String,IFile>(){
          public String invoke(          IFile f){
            return pathOfTmpFile(f);
          }
        }
);
        dparams._1(myWhatToDo.getExcludedFromDiffFiles());
      }
      if (isInvokeTestsSet()) {
        Tuples._1<UnitTestListener> testParams=(Tuples._1<UnitTestListener>)ppool.properties(new ITarget.Name("jetbrains.mps.tool.gentest.Test.runTests"),Object.class);
        testParams._0(new GenTestWorker.MyUnitTestAdapter());
      }
      myReporter.finishRun();
      myReporter.startRun(GenTestWorker.this.myWhatToDo.getProperty("ant.project.name"));
    }
  }
;
  IOperationContext context=new ProjectOperationContext(project);
  try {
    BuildMakeService bms=new BuildMakeService();
    MakeSession ms=new MakeSession(context,myMessageHandler,true){
      @Override public IScript toScript(      ScriptBuilder scriptBuilder){
        if (isInvokeTestsSet()) {
          scriptBuilder.withFacetName(new IFacet.Name("jetbrains.mps.tool.gentest.Test"));
        }
        if (isShowDiff()) {
          scriptBuilder.withFacetName(new IFacet.Name("jetbrains.mps.tool.gentest.Diff"));
        }
        return scriptBuilder.toScript();
      }
    }
;
    Future<IResult> result=bms.make(ms,collectResources(context,go.getModules(),go.getModels()),null,ctl,new GenTestWorker.MyProgressMonitorBase(startTestFormat,finishTestFormat));
    if (!(result.get().isSucessful())) {
      myErrors.add("Make was not successful " + result.get().output());
    }
  }
 catch (  InterruptedException e) {
    myErrors.add(e.toString());
  }
catch (  ExecutionException e) {
    myErrors.add(e.toString());
  }
}
