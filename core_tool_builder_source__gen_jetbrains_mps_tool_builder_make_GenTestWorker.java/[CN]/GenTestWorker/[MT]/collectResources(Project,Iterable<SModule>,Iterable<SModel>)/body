{
  final Wrappers._T<Iterable<SModel>> result=new Wrappers._T<Iterable<SModel>>(null);
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
        public Iterable<SModel> translate(        SModule m){
          return m.getModels();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(modules).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule it){
          return it instanceof Language;
        }
      }
).translate(new ITranslator2<SModule,Generator>(){
        public Iterable<Generator> translate(        SModule it){
          return ((Language)it).getGenerators();
        }
      }
).translate(new ITranslator2<Generator,SModel>(){
        public Iterable<SModel> translate(        Generator gen){
          return gen.getModels();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(models));
    }
  }
);
  return new ModelsToResources(Sequence.fromIterable(result.value).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel smd){
      return GenerationFacade.canGenerate(smd);
    }
  }
)).resources(false);
}
