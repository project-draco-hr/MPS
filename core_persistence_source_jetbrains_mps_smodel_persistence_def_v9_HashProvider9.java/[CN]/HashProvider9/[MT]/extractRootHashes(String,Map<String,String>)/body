{
  XmlFastScanner scanner=new XmlFastScanner(content.toCharArray());
  int token, nodeStart=-1, nodeEnd=-1;
  String rootId=null;
  final Matcher nodeIdMatcher=Pattern.compile("\\sid\\s*=\\s*\"([^\"]+)\"").matcher("");
  final IdEncoder idEncoder=new IdEncoder();
  boolean nodeElementFound=false;
  while ((token=scanner.next()) != XmlFastScanner.EOI) {
    if (token != XmlFastScanner.OPEN_TAG && token != XmlFastScanner.SIMPLE_TAG && token != XmlFastScanner.CLOSE_TAG) {
      continue;
    }
    if (scanner.tagDepth() != 1 || !ModelPersistence.NODE.equals(scanner.getName())) {
      continue;
    }
switch (token) {
case XmlFastScanner.SIMPLE_TAG:
      nodeEnd=scanner.getOffset();
case XmlFastScanner.OPEN_TAG:
    nodeStart=scanner.getTokenOffset();
  if (nodeIdMatcher.reset(scanner.token()).find()) {
    rootId=nodeIdMatcher.group(1);
  }
 else {
    rootId=null;
  }
if (rootId != null && !nodeElementFound) {
  rootHashes.put(GeneratableSModel.HEADER,ModelDigestUtil.hashText(scanner.getText(0,nodeStart)));
  nodeElementFound=true;
}
break;
case XmlFastScanner.CLOSE_TAG:
nodeEnd=scanner.getOffset();
break;
}
if (rootId != null && nodeStart != -1 && nodeEnd != -1) {
String s=scanner.getText(nodeStart,nodeEnd);
SNodeId nodeId=null;
try {
nodeId=idEncoder.parseNodeId(rootId);
}
 catch (EncodingException e) {
throw new IllegalArgumentException(e);
}
rootHashes.put(nodeId.toString(),ModelDigestUtil.hashText(s));
nodeStart=nodeEnd=-1;
rootId=null;
}
}
if (!nodeElementFound) {
rootHashes.put(GeneratableSModel.HEADER,ModelDigestUtil.hashText(content));
}
}
