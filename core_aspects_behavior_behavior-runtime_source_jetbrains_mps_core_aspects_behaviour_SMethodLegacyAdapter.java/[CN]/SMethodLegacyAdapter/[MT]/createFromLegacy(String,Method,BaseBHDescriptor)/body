{
  SAbstractConcept concept=descriptor.getConcept();
  if (legacyMethodName.equals(DEFAULT_CONSTRUCTOR_METHOD_NAME)) {
    return new SDefaultConstructorImpl(descriptor,AccessPrivileges.PUBLIC);
  }
  String methodName=extractNewMethodNameFromOld(legacyMethodName);
  SModifiers modifiers=extractMethodModifiers(legacyMethodName,legacyBHMethod);
  String methodNodeId=extractMethodId(legacyMethodName);
  List<SParameter> parameters=new ArrayList<SParameter>();
  for (  Class<?> param : legacyBHMethod.getParameterTypes()) {
    parameters.add(new SParameterImpl(new SJavaCompoundTypeImpl(param),""));
  }
  return SMethodImpl.create(methodName,modifiers,new SJavaCompoundTypeImpl(legacyBHMethod.getReturnType()),concept,methodNodeId,descriptor.getBehaviorRegistry(),parameters);
}
