{
  if (!((SMethodImpl)methodCandidate).getBaseName().equals(myMethodBaseName))   return false;
  if (!((SMethodImpl)methodCandidate).getModifiers().isVirtual() == myModifiers.isVirtual())   return false;
  if (!methodCandidate.isStatic() == myModifiers.isStatic())   return false;
  if (!myModifiers.isVirtual()) {
    if (!EqualUtil.equals(methodCandidate.getConcept(),myConcept))     return false;
  }
  if (myParameters.length != methodCandidate.getParameters().size()) {
    return false;
  }
  for (int i=0; i < myParameters.length; ++i) {
    Class<?> passedParameterType=myParameters[i].getClass();
    SParameter sParameter=methodCandidate.getParameters().get(i);
    SAbstractType methodArgumentType=sParameter.getType();
    if (!methodArgumentType.isAssignableFrom(new SJavaCompoundTypeImpl(passedParameterType))) {
      return false;
    }
  }
  return true;
}
