{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.VariableAssingment");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode assingment=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.VariableAssingment",null);
          SNode lvalue=null;
          String newVarName=pattern;
          if (newVarName.endsWith("=")) {
            newVarName=newVarName.substring(0,pattern.length() - 1);
          }
          SNode name=VariableNameDeclaration_Behavior.testName_9034131902194480300(_context.getCurrentTargetNode(),newVarName);
          if ((name != null)) {
            lvalue=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.VariableReference",null);
            SLinkOperations.setTarget(SNodeOperations.cast(lvalue,"jetbrains.mps.bash.structure.VariableReference"),"variable",name,false);
          }
          if ((lvalue == null)) {
            lvalue=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.VariableNameDeclaration",null);
            SPropertyOperations.set(SNodeOperations.cast(lvalue,"jetbrains.mps.bash.structure.VariableNameDeclaration"),"name",newVarName);
          }
          SLinkOperations.setTarget(assingment,"lvalue",lvalue,true);
          return assingment;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          SNode name=VariableNameDeclaration_Behavior.testName_9034131902194480300(_context.getCurrentTargetNode(),pattern);
          if ((name != null)) {
            return true;
          }
          return REGEXP_x583g4_a0a2a2a0a0a0a2a0a1a2.matcher(pattern).matches();
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.VariableAssingment");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.bash.structure.ShellScript",true,false),"usedVars",true);
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode variableAssignment=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.VariableAssingment",null);
              SNode lvalue=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.VariableReference",null);
              SLinkOperations.setTarget(lvalue,"variable",(item),false);
              SLinkOperations.setTarget(variableAssignment,"lvalue",lvalue,true);
              return variableAssignment;
            }
            public String getDescriptionText(            String pattern){
              return "variable assignment";
            }
          }
);
        }
      }
    }
  }
  return result;
}
