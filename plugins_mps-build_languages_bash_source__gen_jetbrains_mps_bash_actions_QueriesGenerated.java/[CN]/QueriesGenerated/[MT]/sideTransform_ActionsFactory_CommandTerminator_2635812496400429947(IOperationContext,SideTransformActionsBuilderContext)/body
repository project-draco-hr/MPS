{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.CommentedText"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode commonCommand=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.bash.structure.CommandList",false,false);
      SNodeFactoryOperations.setNewChild(commonCommand,"comment","jetbrains.mps.bash.structure.CommentedText");
      return SLinkOperations.getTarget(commonCommand,"comment",true);
    }
    public String getMatchingText(    String pattern){
      return "#";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "simple text comment";
    }
  }
);
  return result;
}
