{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.CommentedFollowingCommandList");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode comment=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.CommentedFollowingCommandList",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),comment);
        SLinkOperations.setTarget(comment,"command",_context.getSourceNode(),true);
        return comment;
      }
      public String getMatchingText(      String pattern){
        if (pattern.startsWith("#")) {
          return pattern;
        }
        return "";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
