{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<INodeSubstituteAction> list=ModelActions.createChildSubstituteActions(_context.getSourceNode(),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.FollowingCommandList"),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      IScope p3,      @Nullable EditorContext editorContext){
        return substitute(newChild,lastPattern[0],editorContext);
      }
      private SNode substitute(      SNode result,      String pattern,      @Nullable EditorContext editorContext){
        SLinkOperations.setTarget(SLinkOperations.getTarget(result,"baseCommand",true),"following",SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"baseCommand",true),"following",true),true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(result,"baseCommand",true),"base",SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"baseCommand",true),"base",true),true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(_context.getSourceNode(),"baseCommand",true),"following",result,true);
        SNodeFactoryOperations.setNewChild(SLinkOperations.getTarget(_context.getSourceNode(),"baseCommand",true),"base","jetbrains.mps.bash.structure.HeadPipeline");
        SNodeFactoryOperations.setNewChild(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"baseCommand",true),"base",true),"command","jetbrains.mps.bash.structure.AbstractCommand");
        return _context.getSourceNode();
      }
    }
,operationContext);
    for (    final INodeSubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
