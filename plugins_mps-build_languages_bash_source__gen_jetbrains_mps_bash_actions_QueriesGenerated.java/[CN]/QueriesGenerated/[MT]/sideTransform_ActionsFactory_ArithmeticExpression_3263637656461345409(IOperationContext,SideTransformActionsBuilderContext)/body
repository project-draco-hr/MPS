{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<INodeSubstituteAction> list=ModelActions.createChildSubstituteActions(_context.getSourceNode(),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.BinaryArithmeticExpression"),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      IScope p3){
        return substitute(newChild,lastPattern[0]);
      }
      private SNode substitute(      SNode result,      String pattern){
        SNode source=SNodeOperations.cast(_context.getSourceNode(),"jetbrains.mps.bash.structure.ArithmeticExpression");
        while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(source),"jetbrains.mps.bash.structure.BinaryArithmeticExpression")) {
          SNode parent=SNodeOperations.cast(SNodeOperations.getParent(source),"jetbrains.mps.bash.structure.BinaryArithmeticExpression");
          if (BehaviorReflection.invokeVirtualStatic(Integer.TYPE,new SConceptNodeAdapter(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(result))),"virtual_getPriority_1262430001741497876",new Object[]{}) < BehaviorReflection.invokeVirtualStatic(Integer.TYPE,new SConceptNodeAdapter(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))),"virtual_getPriority_1262430001741497876",new Object[]{})) {
            source=parent;
          }
 else {
            break;
          }
        }
        SNodeOperations.replaceWithAnother(source,result);
        SLinkOperations.setTarget(result,"leftExpression",source,true);
        return result;
      }
    }
,operationContext);
    for (    final INodeSubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
