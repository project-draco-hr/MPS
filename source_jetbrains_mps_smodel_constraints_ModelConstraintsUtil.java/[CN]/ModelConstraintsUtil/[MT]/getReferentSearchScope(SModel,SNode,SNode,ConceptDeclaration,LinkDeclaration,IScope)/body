{
  String genuineReferenceRole=SModelUtil.getGenuineLinkRole(referenceLinkDeclaration);
  INodeReferentSearchScopeProvider scopeProvider=ModelConstraintsManager.getInstance().getNodeReferentSearchScopeProvider(referenceNodeConcept,genuineReferenceRole);
  if (scopeProvider != null) {
    if (scopeProvider.canCreateNodeReferentSearchScope(model,enclosingNode,referenceNode,scope)) {
      ISearchScope searchScope=scopeProvider.createNodeReferentSearchScope(model,enclosingNode,referenceNode,scope);
      return new Status.OK(searchScope);
    }
    return new Status.ERROR("can't create referent search scope: " + scopeProvider.getNodeReferentSearchScopeDescription());
  }
  ConceptDeclaration referentConcept=referenceLinkDeclaration.getTarget();
  scopeProvider=ModelConstraintsManager.getInstance().getNodeDefaultSearchScopeProvider(referentConcept);
  if (scopeProvider != null) {
    if (scopeProvider.canCreateNodeReferentSearchScope(model,enclosingNode,referenceNode,scope)) {
      ISearchScope searchScope=scopeProvider.createNodeReferentSearchScope(model,enclosingNode,referenceNode,scope);
      return new Status.OK(searchScope);
    }
    return new Status.ERROR("can't create default search scope: " + scopeProvider.getNodeReferentSearchScopeDescription());
  }
  ISearchScope searchScope=SModelSearchUtil.createModelAndImportedModelsScope(model,false,scope);
  return new Status.OK(searchScope);
}
