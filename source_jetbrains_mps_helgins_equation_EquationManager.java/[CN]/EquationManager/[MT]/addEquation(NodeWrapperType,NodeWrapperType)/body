{
  NodeWrapperType rhsRepresentator=rhs.getRepresentator();
  NodeWrapperType lhsRepresentator=lhs.getRepresentator();
  if (rhsRepresentator == lhsRepresentator)   return;
  RuntimeTypeVariable varRhs=NodeWrapperType.getTypeVar(rhsRepresentator);
  RuntimeTypeVariable varLhs=NodeWrapperType.getTypeVar(lhsRepresentator);
  if (varRhs != null) {
    processEquation(rhsRepresentator,lhsRepresentator);
    return;
  }
 else {
    if (varLhs != null) {
      processEquation(lhsRepresentator,rhsRepresentator);
      return;
    }
  }
  if (!compareNodes(rhsRepresentator.getNodeWrapper(),lhsRepresentator.getNodeWrapper())) {
    String error="incompatible types: " + rhsRepresentator + " and "+ lhsRepresentator;
    SModel typesModel=rhsRepresentator.getSNode().getModel();
    addEquation(rhs,NodeWrapperType.getType(TypeVariablesManager.getInstance().createRuntimeErrorType(typesModel,error)));
    addEquation(lhs,NodeWrapperType.getType(TypeVariablesManager.getInstance().createRuntimeErrorType(typesModel,error)));
    return;
  }
  Set<Pair<NodeWrapperType,NodeWrapperType>> childEQs=createChildEquations(rhsRepresentator.getNodeWrapper(),lhsRepresentator.getNodeWrapper());
  for (  Pair<NodeWrapperType,NodeWrapperType> eq : childEQs) {
    addEquation(eq.o1,eq.o2);
  }
}
