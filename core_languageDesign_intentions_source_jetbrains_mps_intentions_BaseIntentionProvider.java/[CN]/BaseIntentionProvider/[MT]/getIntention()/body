{
  final QuickFix_Runtime quickFix=getQuickFix();
  if (quickFix == null) {
    return null;
  }
  return new BaseIntention(){
    public String getConcept(){
      return null;
    }
    public boolean isParameterized(){
      return false;
    }
    public String getDescription(    SNode node,    EditorContext editorContext){
      return quickFix.getDescription();
    }
    public boolean isApplicable(    SNode node,    EditorContext editorContext){
      return false;
    }
    public boolean isAvailableInChildNodes(){
      return true;
    }
    public List parameter(    SNode node,    EditorContext editorContext){
      return null;
    }
    public void execute(    SNode node,    EditorContext editorContext){
      quickFix.execute(node);
      quickFix.setSelection(node,editorContext);
    }
    public IntentionType getType(){
      return myIsError ? IntentionType.ERROR : IntentionType.NORMAL;
    }
    public void putArgument(    String key,    Object argument){
    }
    public String getLocationString(){
      return null;
    }
    public SNode getNodeByIntention(){
      SModelReference reference=SModelReference.fromString(NameUtil.namespaceFromLongName(myClassFQName));
      SModelDescriptor sModelDescriptor=GlobalScope.getInstance().getModelDescriptor(reference);
      if (sModelDescriptor != null) {
        SModel model=sModelDescriptor.getSModel();
        if (model != null) {
          String shortName=NameUtil.shortNameFromLongName(myClassFQName);
          String rootName=shortName.substring(0,shortName.length() - "_QuickFix".length());
          SNode node=model.getRootByName(rootName);
          return node;
        }
      }
      return null;
    }
    public List<Intention> getParameterizedInstances(    SNode node,    EditorContext editorContext){
      List<Intention> list=new ArrayList<Intention>();
      list.add(this);
      return list;
    }
  }
;
}
