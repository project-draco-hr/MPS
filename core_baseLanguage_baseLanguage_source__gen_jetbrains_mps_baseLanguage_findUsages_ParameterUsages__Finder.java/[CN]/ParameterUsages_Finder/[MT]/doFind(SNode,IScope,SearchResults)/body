{
  SNode nodeParentMethod;
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false) != null) {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false);
  }
 else {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,false);
  }
  List<SNode> overridingMethods=this.executejetbrainsMpsBaseLanguageFindUsagesOverridingMethods_Finder(nodeParentMethod,scope);
  ListOperations.addElement(overridingMethods,nodeParentMethod);
{
    ICursor<SNode> _zCursor10=CursorFactory.createCursor(overridingMethods);
    try {
      while (_zCursor10.moveToNext()) {
        SNode methodNode=_zCursor10.getCurrent();
{
          SNode parameterNode=ListOperations.getElement(SLinkOperations.getTargets(methodNode,"parameter",true),SNodeOperations.getIndexInParent(node));
          results.getSearchedNodePointers().add(new SNodePointer(parameterNode));
{
            ICursor<SNode> _zCursor11=CursorFactory.createCursor(this.executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(parameterNode,scope));
            try {
              while (_zCursor11.moveToNext()) {
                SNode parameterUsage=_zCursor11.getCurrent();
                results.getSearchResults().add(new SearchResult(new SNodePointer(parameterUsage),"Parameter Usages"));
              }
            }
  finally {
              _zCursor11.release();
            }
          }
        }
      }
    }
  finally {
      _zCursor10.release();
    }
  }
}
