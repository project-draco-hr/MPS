{
  SNode nodeParentMethod;
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false) != null) {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false);
  }
 else {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,false);
  }
  List<SNode> overridingMethods=this.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope,monitor);
  ListSequence.fromList(overridingMethods).addElement(nodeParentMethod);
  for (  SNode methodNode : overridingMethods) {
    SNode parameterNode=ListSequence.fromList(SLinkOperations.getTargets(methodNode,"parameter",true)).getElement(SNodeOperations.getIndexInParent(node));
    for (    SNode parameterUsage : this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",parameterNode,scope,monitor)) {
      ListOperations.addElement(_results,parameterUsage);
    }
  }
}
