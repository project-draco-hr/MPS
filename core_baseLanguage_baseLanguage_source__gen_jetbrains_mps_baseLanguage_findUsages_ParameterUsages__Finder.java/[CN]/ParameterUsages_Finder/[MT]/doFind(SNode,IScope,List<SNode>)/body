{
  SNode nodeParentMethod;
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false) != null) {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false);
  }
 else {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,false);
  }
  List<SNode> overridingMethods=this.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope);
  ListOperations.addElement(overridingMethods,nodeParentMethod);
{
    ICursor<SNode> _zCursor14=CursorFactory.createCursor(overridingMethods);
    try {
      while (_zCursor14.moveToNext()) {
        SNode methodNode=_zCursor14.getCurrent();
{
          SNode parameterNode=ListOperations.getElement(SLinkOperations.getTargets(methodNode,"parameter",true),SNodeOperations.getIndexInParent(node));
{
            ICursor<SNode> _zCursor15=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",parameterNode,scope));
            try {
              while (_zCursor15.moveToNext()) {
                SNode parameterUsage=_zCursor15.getCurrent();
                ListOperations.addElement(_results,parameterUsage);
              }
            }
  finally {
              _zCursor15.release();
            }
          }
        }
      }
    }
  finally {
      _zCursor14.release();
    }
  }
}
