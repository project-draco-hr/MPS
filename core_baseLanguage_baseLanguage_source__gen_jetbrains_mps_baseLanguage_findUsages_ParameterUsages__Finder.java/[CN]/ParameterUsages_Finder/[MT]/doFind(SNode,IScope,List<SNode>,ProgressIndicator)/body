{
  SNode nodeParentMethod=SNodeOperations.getAncestorWhereConceptInList(node,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"},false,false);
  List<SNode> overridingMethods=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope,indicator);
  ListSequence.fromList(overridingMethods).addElement(nodeParentMethod);
  for (  SNode methodNode : overridingMethods) {
    SNode parameterNode=ListSequence.fromList(SLinkOperations.getTargets(methodNode,"parameter",true)).getElement(SNodeOperations.getIndexInParent(node));
    for (    SNode parameterUsage : FindUtils.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",parameterNode,scope,indicator)) {
      ListOperations.addElement(_results,parameterUsage);
    }
  }
}
