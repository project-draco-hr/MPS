{
  SNode nodeParentMethod=SNodeOperations.getAncestorWhereConceptInList(node,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"},false,false);
  List<SNode> overridingMethods=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope,new EmptyProgressIndicator());
  ListSequence.<SNode>fromList(overridingMethods).addElement(nodeParentMethod);
  for (  SNode methodNode : ListSequence.<SNode>fromList(overridingMethods)) {
    ListSequence.<SNode>fromList(_results).addElement(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(methodNode,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"parameter",true)).getElement(SNodeOperations.getIndexInParent(node)));
  }
}
