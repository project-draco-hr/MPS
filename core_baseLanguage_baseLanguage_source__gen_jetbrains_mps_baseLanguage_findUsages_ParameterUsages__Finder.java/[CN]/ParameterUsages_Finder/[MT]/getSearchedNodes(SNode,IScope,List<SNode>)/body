{
  SNode nodeParentMethod;
  if (SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false) != null) {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false);
  }
 else {
    nodeParentMethod=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,false);
  }
  List<SNode> overridingMethods=this.executeFinder("jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder",nodeParentMethod,scope,new NullAdaptiveProgressMonitor());
  ListOperations.addElement(overridingMethods,nodeParentMethod);
{
    ICursor<SNode> _zCursor16=CursorFactory.createCursor(overridingMethods);
    try {
      while (_zCursor16.moveToNext()) {
        SNode methodNode=_zCursor16.getCurrent();
        ListOperations.addElement(_results,ListOperations.getElement(SLinkOperations.getTargets(methodNode,"parameter",true),SNodeOperations.getIndexInParent(node)));
      }
    }
  finally {
      _zCursor16.release();
    }
  }
}
