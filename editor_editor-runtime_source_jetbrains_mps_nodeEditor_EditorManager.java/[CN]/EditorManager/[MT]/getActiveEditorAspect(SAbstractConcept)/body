{
  Queue<SAbstractConcept> queue=new LinkedList<SAbstractConcept>();
  Set<SAbstractConcept> processedConcepts=new HashSet<SAbstractConcept>();
  queue.add(abstractConcept);
  processedConcepts.add(abstractConcept);
  while (!queue.isEmpty()) {
    SAbstractConcept nextConcept=queue.remove();
    EditorAspect editorAspect=getEditorAspect(nextConcept);
    if (editorAspect != null) {
      return editorAspect;
    }
    if (nextConcept instanceof SInterfaceConcept) {
      for (      SInterfaceConcept superInterface : ((SInterfaceConcept)nextConcept).getSuperInterfaces()) {
        if (processedConcepts.contains(superInterface)) {
          continue;
        }
        queue.add(superInterface);
        processedConcepts.add(superInterface);
      }
    }
 else {
      SConcept concept=(SConcept)nextConcept;
      SConcept superConcept=concept.getSuperConcept();
      if (superConcept != null && !processedConcepts.contains(superConcept)) {
        queue.add(superConcept);
        processedConcepts.add(superConcept);
      }
      for (      SInterfaceConcept superInterface : concept.getSuperInterfaces()) {
        if (processedConcepts.contains(superInterface)) {
          continue;
        }
        queue.add(superInterface);
        processedConcepts.add(superInterface);
      }
    }
  }
  return null;
}
