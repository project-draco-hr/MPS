{
  TraceInfoGenerationUtil.createPositionInfo(this,node);
  TraceInfoGenerationUtil.createScopeInfo(this,node);
  if ((SLinkOperations.getTarget(node,AttributesRolesUtil.childRoleFromAttributeRole("methodDocComment"),true) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,AttributesRolesUtil.childRoleFromAttributeRole("methodDocComment"),true),this.getSNode());
  }
  this.appendNewLine();
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,"visibility",true),this);
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    this.append("static ");
  }
  if (SPropertyOperations.getBoolean(node,"isSynchronized")) {
    this.append("synchronized ");
  }
  GenericDeclarationTextGen2.typeDeclarations(node,this);
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"typeVariableDeclaration",true)).isNotEmpty()) {
    this.append(" ");
  }
  TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"returnType",true),this.getSNode());
  this.append(" ");
  this.append(SPropertyOperations.getString(node,"name"));
  this.append("(");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).isNotEmpty()) {
    for (    SNode item : SLinkOperations.getTargets(node,"parameter",true)) {
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
      if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).last()) {
        this.append(", ");
      }
    }
  }
  this.append(")");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true)).isNotEmpty()) {
    this.append(" throws ");
    if (ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true)).isNotEmpty()) {
      for (      SNode item : SLinkOperations.getTargets(node,"throwsItem",true)) {
        TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true)).last()) {
          this.append(", ");
        }
      }
    }
  }
  this.append(" {");
  this.increaseDepth();
  if ((SLinkOperations.getTarget(node,"body",true) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"body",true),this.getSNode());
  }
 else {
    this.appendNewLine();
    this.appendWithIndent("throw new RuntimeException(\"NOT IMPLEMENTED\");");
  }
  this.decreaseDepth();
  this.appendNewLine();
  this.appendWithIndent("}");
  this.appendNewLine();
  TraceInfoGenerationUtil.fillPositionInfo(this,node);
  TraceInfoGenerationUtil.fillScopeInfo(this,node);
}
