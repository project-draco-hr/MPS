{
  Map<SNode,PositionInfo> positions=result.getPositions();
  Map<SNode,ScopePositionInfo> scopePositions=result.getScopePositions();
  if (positions == null && scopePositions == null) {
    return;
  }
  String fileName=outputNode.getName() + ".java";
  if (positions != null) {
    for (    SNode out : positions.keySet()) {
      SNode input=out;
      input=getOriginalInputNode(input);
      if (input != null && !(input.isDisposed())) {
        PositionInfo positionInfo=result.getPositions().get(out);
        positionInfo.setNodeId(input.getId());
        info.setModel(input.getModel());
        positionInfo.setFileName(fileName);
        info.addPosition(positionInfo,rootNodeId);
      }
    }
  }
  if (scopePositions != null) {
    for (    SNode out : scopePositions.keySet()) {
      SNode input=out;
      input=getOriginalInputNode(input);
      if (input != null && !(input.isDisposed())) {
        ScopePositionInfo positionInfo=result.getScopePositions().get(out);
        positionInfo.setNodeId(input.getId());
        info.setModel(input.getModel());
        positionInfo.setFileName(fileName);
        Map<SNode,VarInfo> varMap=positionInfo.getTempVarInfoMap();
        for (        SNode varNode : varMap.keySet()) {
          SNode originalVar=getOriginalInputNode(varNode);
          VarInfo varInfo=varMap.get(varNode);
          if (originalVar != null && !(originalVar.isDisposed())) {
            String s=originalVar.getId();
            varInfo.setNodeId(s);
          }
 else {
            positionInfo.removeVarInfo(varInfo);
          }
        }
        info.addScopePosition(positionInfo,rootNodeId);
      }
    }
  }
}
