{
  final List<String> result=ListSequence.<String>fromList(new ArrayList<String>());
  ClassLoader classLoader=UrlClassLoader.class.getClassLoader();
  Class cls=classLoader.getClass();
  try {
    List<URL> urls=((List<URL>)cls.getMethod("getUrls",new Class[0]).invoke(classLoader,new Object[0]));
    for (    URL url : urls) {
      ListSequence.<String>fromList(result).addElement(new URI(url.toString()).getPath());
    }
  }
 catch (  Throwable e) {
  }
  Language testsLanguage=(Language)SNodeOperations.getModel(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodesTestCase")).getModelDescriptor().getModule();
  for (  StubPath path : ListSequence.<StubPath>fromList(testsLanguage.getRuntimeStubPaths())) {
    ListSequence.<String>fromList(result).addElement(path.getPath());
  }
  for (  Dependency dep : ListSequence.<Dependency>fromList(testsLanguage.getRuntimeDependencies())) {
    AbstractModule module=(AbstractModule)MPSModuleRepository.getInstance().getModule(dep.getModuleRef());
    for (    StubPath path : ListSequence.<StubPath>fromList(module.getStubPaths())) {
      ListSequence.<String>fromList(result).addElement(path.getPath());
    }
  }
  ListSequence.<String>fromList(result).addSequence(ListSequence.<String>fromList(NodesTestCase_Behavior.getPluginsClassPath_2937573621172202149()));
  return result;
}
