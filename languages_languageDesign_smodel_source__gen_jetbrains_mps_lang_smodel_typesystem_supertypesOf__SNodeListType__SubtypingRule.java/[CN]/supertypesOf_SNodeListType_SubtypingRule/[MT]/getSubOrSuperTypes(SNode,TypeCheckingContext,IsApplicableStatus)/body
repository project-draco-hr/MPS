{
  List<SNode> supertypes=ListSequence.fromList(new ArrayList<SNode>());
  SNode elementConcept=SLinkOperations.getTarget(type,"elementConcept",false);
  if (elementConcept != null) {
    ListSequence.fromList(supertypes).addElement(new supertypesOf_SNodeListType_SubtypingRule.QuotationClass_f6ipu3_a0a0a0c0a().createNode(elementConcept,typeCheckingContext));
    List<SNode> superConcepts=SConceptOperations.getDirectSuperConcepts(elementConcept,false);
    for (    SNode superConcept : ListSequence.fromList(superConcepts)) {
      ListSequence.fromList(supertypes).addElement(new supertypesOf_SNodeListType_SubtypingRule.QuotationClass_f6ipu3_a0a0a0c0c0a().createNode(superConcept,typeCheckingContext));
    }
    ListSequence.fromList(supertypes).addElement(new supertypesOf_SNodeListType_SubtypingRule.QuotationClass_f6ipu3_a0a0e0c0a().createNode(typeCheckingContext));
  }
  ListSequence.fromList(supertypes).addElement(new supertypesOf_SNodeListType_SubtypingRule.QuotationClass_f6ipu3_a0a0d0a().createNode(typeCheckingContext));
  return supertypes;
}
