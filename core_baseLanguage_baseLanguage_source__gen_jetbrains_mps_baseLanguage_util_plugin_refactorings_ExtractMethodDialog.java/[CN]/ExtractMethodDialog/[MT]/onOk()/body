{
  this.myParameters.setVisibilityLevel(this.myVisibilityPanel.getResult());
  final Wrappers._T<SNode> result=new Wrappers._T<SNode>(null);
  if (!(this.myCanRefactor)) {
    JOptionPane.showMessageDialog(this,"Can't refactor. See errors.","Can't perform refactoring",JOptionPane.ERROR_MESSAGE);
  }
 else {
    if ((this.myStaticTarget != null) && !(this.myExtractIntoCurrentContainer)) {
      this.setStaticContainer();
    }
 else     if (this.myParameters.getAnalyzer().shouldChooseOuterContainer()) {
      chooseStaticContainer();
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        result.value=ExtractMethodDialog.this.myRefactoring.doRefactor();
        ExtractMethodDialog.this.myContext.select(result.value);
        if ((myRefactoringModel != null) && !(ExtractMethodDialog.this.myExtractIntoCurrentContainer)) {
          SModelReference ref=SNodeOperations.getModel(myStaticTarget).getSModelReference();
          myRefactoringModel.addModelImport(ref,false);
        }
      }
    }
);
  }
  this.dispose();
  if ((result.value != null)) {
    new ExtractMethodDialog.MyMethodDuplicatesProcessor(this.myContext,result.value).process(this.myRefactoring.getMatches());
  }
}
