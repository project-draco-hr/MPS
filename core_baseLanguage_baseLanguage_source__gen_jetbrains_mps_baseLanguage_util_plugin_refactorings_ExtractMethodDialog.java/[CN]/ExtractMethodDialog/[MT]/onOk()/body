{
  if (!(this.myCanRefactor)) {
    JOptionPane.showMessageDialog(this,"Can't refactor. See errors.","Can't perform refactoring",JOptionPane.ERROR_MESSAGE);
  }
 else {
    final Wrappers._T<SNode> staticTarget=new Wrappers._T<SNode>();
    final Wrappers._T<SModel> refactoringModel=new Wrappers._T<SModel>();
    if (this.myParameters.getAnalyzer().getExtractMethodReafactoringProcessor().getClass() == AbstractExtractMethodRefactoringProcessor.class) {
      final Wrappers._T<SModelDescriptor> model=new Wrappers._T<SModelDescriptor>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          refactoringModel.value=SNodeOperations.getModel(ListSequence.fromList(ExtractMethodDialog.this.myParameters.getNodesToRefactor()).first());
          model.value=refactoringModel.value.getModelDescriptor();
        }
      }
);
      staticTarget.value=BLDialogs.showStaticContainerChooser(this.myContext.getOperationContext(),model.value);
      if (staticTarget.value == null) {
        return;
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          ExtractMethodDialog.this.myRefactoring.setStaticContainer(staticTarget.value);
        }
      }
);
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        SNode result=ExtractMethodDialog.this.myRefactoring.doRefactor();
        ExtractMethodDialog.this.myContext.select(result);
        refactoringModel.value.addImportedModel(SNodeOperations.getModel(staticTarget.value).getSModelReference());
      }
    }
);
  }
  this.dispose();
}
