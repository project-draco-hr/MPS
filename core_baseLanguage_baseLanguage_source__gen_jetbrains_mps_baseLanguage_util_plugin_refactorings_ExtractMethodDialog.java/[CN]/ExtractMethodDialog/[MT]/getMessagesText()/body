{
  StringBuffer buff=new StringBuffer();
  String methodName=this.myParameters.getName();
  if (methodName.length() == 0) {
    buff.append("Method name is empty.\n");
  }
 else {
    boolean nameIsGood=Character.isJavaIdentifierStart(methodName.charAt(0));
    for (int i=1; i < methodName.length(); i++) {
      nameIsGood=nameIsGood && Character.isJavaIdentifierPart(methodName.charAt(0));
    }
    if (!(nameIsGood)) {
      buff.append("Method name is incorrect.");
    }
  }
  String errors=ExtractMethodFabric.getErrors(this.myParameters.getNodesToRefactor());
  if (errors != null) {
    buff.append(errors);
    this.myCanRefactor=false;
  }
 else {
    this.myCanRefactor=true;
  }
  SNode overrides=this.myParameters.getOverridingMethodClass();
  if (overrides != null) {
    if (overrides == SNodeOperations.getAncestor(this.myParameters.getContainerMethod(),"jetbrains.mps.baseLanguage.structure.Classifier",false,false)) {
      buff.append("Such method already exists.\n");
    }
 else {
      buff.append("Method overrides method from class ").append(SPropertyOperations.getString(overrides,"name")).append("\n");
    }
  }
  if (buff.length() == 0) {
    buff.append("\n");
  }
  return buff.toString();
}
