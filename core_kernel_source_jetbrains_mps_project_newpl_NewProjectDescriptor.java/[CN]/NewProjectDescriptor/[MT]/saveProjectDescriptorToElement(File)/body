{
  Macros macros=Macros.projectDescriptor();
  Element projectElement=new Element(PROJECT);
  projectElement.setAttribute(AUTO_IMPORT_CLASSPATH,"" + getAutoImportFromIDEA());
  Element projectSolutionsElement=new Element(PROJECT_SOLUTIONS);
  projectElement.addContent(projectSolutionsElement);
  for (  Path solutionPath : mySolutions) {
    Element solutionPathElement=new Element(SOLUTION_PATH);
    if (solutionPath.getPath() != null) {
      solutionPathElement.setAttribute(PATH,macros.shrinkPath(solutionPath.getPath(),file));
    }
    if (solutionPath.getFolder() != null) {
      solutionPathElement.setAttribute(FOLDER,solutionPath.getFolder());
    }
    projectSolutionsElement.addContent(solutionPathElement);
  }
  Element projectLanguagesElement=new Element(PROJECT_LANGUAGES);
  projectElement.addContent(projectLanguagesElement);
  for (  Path languagePath : myLanguages) {
    Element languagePathElement=new Element(LANGUAGE_PATH);
    if (languagePath.getPath() != null) {
      languagePathElement.setAttribute(PATH,macros.shrinkPath(languagePath.getPath(),file));
    }
    if (languagePath.getFolder() != null) {
      languagePathElement.setAttribute(FOLDER,languagePath.getFolder());
    }
    projectLanguagesElement.addContent(languagePathElement);
  }
  Element projectDevkitsElement=new Element(PROJECT_DEVKITS);
  projectElement.addContent(projectDevkitsElement);
  for (  Path devkitPath : myDevkits) {
    Element devkit=new Element(DEVKIT_PATH);
    if (devkitPath.getPath() != null) {
      devkit.setAttribute(PATH,macros.shrinkPath(devkitPath.getPath(),file));
    }
    if (devkitPath.getFolder() != null) {
      devkit.setAttribute(FOLDER,devkitPath.getFolder());
    }
    projectDevkitsElement.addContent(devkit);
  }
  Element libraries=new Element(LIBRARIES);
  projectElement.addContent(libraries);
  for (  Library lib : myLibs) {
    Element library=new Element(LIBRARY);
    library.setText(lib.getName());
    libraries.addContent(library);
  }
  projectElement.setAttribute(TEST_ALL_LANGUAGES,"" + myTestAllLanguages);
  Element tests=new Element(GEN_CONFS);
  projectElement.addContent(tests);
  for (  BaseGeneratorConfiguration tc : myGenConfigs) {
    if (tc instanceof ModelsGeneratorConfiguration) {
      ModelsGeneratorConfiguration mgc=(ModelsGeneratorConfiguration)tc;
      Element t=new Element(GEN_CONF);
      if (mgc.getName() != null) {
        t.setAttribute(NAME,mgc.getName());
      }
      Element models=new Element(MODELS);
      for (      Model m : mgc.getModels()) {
        Element model=new Element(MODEL);
        model.setAttribute(MODEL_UID,m.getModelRef());
        models.addContent(model);
      }
      t.addContent(models);
      tests.addContent(t);
    }
    if (tc instanceof ModuleGeneratorConfiguration) {
      ModuleGeneratorConfiguration sgc=(ModuleGeneratorConfiguration)tc;
      Element t=new Element(GEN_CONF_SOLUTION);
      if (sgc.getName() != null) {
        t.setAttribute(NAME,sgc.getName());
      }
      if (sgc.getModuleUID() != null) {
        t.setAttribute(SOLUTION,sgc.getModuleUID());
      }
      tests.addContent(t);
    }
    if (tc instanceof ModuleGeneratorConfiguration) {
      ModuleGeneratorConfiguration lgc=(ModuleGeneratorConfiguration)tc;
      Element t=new Element(GEN_CONF_LANGUAGE);
      if (lgc.getName() != null) {
        t.setAttribute(NAME,lgc.getName());
      }
      if (lgc.getModuleUID() != null) {
        t.setAttribute(LANGUAGE,lgc.getModuleUID());
      }
      tests.addContent(t);
    }
  }
  return projectElement;
}
