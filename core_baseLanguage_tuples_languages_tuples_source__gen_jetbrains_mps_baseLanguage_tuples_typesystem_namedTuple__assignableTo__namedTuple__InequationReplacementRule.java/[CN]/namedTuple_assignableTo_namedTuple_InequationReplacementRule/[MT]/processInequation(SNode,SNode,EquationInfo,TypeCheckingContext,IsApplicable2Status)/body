{
  if (!(SLinkOperations.getTarget(subtype,"classifier",false) == SLinkOperations.getTarget(supertype,"classifier",false))) {
    BaseQuickFixProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"Different named tuples","r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","1239579585554",intentionProvider,errorTarget);
    _reporter_2309309498.addAdditionalRuleIdsFromInfo(equationInfo);
  }
  if (!(ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameter",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameter",true)).count())) {
    BaseQuickFixProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"Parameter types counts don't match","r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","1239968591797",intentionProvider,errorTarget);
    _reporter_2309309498.addAdditionalRuleIdsFromInfo(equationInfo);
  }
{
    SNode lp;
    SNode rp;
    Iterator<SNode> lp_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameter",true)).iterator();
    Iterator<SNode> rp_iterator=ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameter",true)).iterator();
    while (true) {
      if (!(lp_iterator.hasNext())) {
        break;
      }
      if (!(rp_iterator.hasNext())) {
        break;
      }
      lp=lp_iterator.next();
      rp=rp_iterator.next();
{
        SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
        BaseQuickFixProvider intentionProvider=null;
        EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:e119dbbd-3529-4067-8bad-6b9edd79d0b6(jetbrains.mps.baseLanguage.tuples.typesystem)","1239968769054",0,intentionProvider);
        _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
        _info_12389875345.setInequationGroup("default");
        typeCheckingContext.createLessThanInequation((SNode)lp,(SNode)rp,false,_info_12389875345);
      }
    }
  }
}
