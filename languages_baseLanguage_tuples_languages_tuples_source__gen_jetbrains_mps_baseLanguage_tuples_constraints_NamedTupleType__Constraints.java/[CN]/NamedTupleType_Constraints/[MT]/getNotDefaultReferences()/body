{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.ANYTHING,operationContext.getScope()){
            protected List<SNode> getNodesFormClassifiersList(            List<SNode> classifiers,            int constraint,            Condition<SNode> condition){
              List<SNode> result=new ArrayList<SNode>();
              for (              SNode classifier : classifiers) {
                if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration")) {
                  result.add(classifier);
                }
              }
              return result;
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_rcfzhs_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
