{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_rcfzhs_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ClassifierScopes.getVisibleClassifiersScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),false);
        }
      }
;
    }
  }
);
  return references;
}
