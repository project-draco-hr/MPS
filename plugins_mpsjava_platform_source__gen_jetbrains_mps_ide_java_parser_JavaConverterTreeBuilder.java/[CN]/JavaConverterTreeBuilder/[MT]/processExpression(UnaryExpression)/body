{
  int operator=((x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT);
switch (operator) {
case OperatorIds.MINUS:
    SNode unaryMinus=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.UnaryMinus",null);
  SLinkOperations.setTarget(unaryMinus,"expression",processExpressionRefl(x.expression),true);
return unaryMinus;
case OperatorIds.NOT:
SNode notExpression=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.NotExpression",null);
SLinkOperations.setTarget(notExpression,"expression",processExpressionRefl(x.expression),true);
return notExpression;
case OperatorIds.PLUS:
return processExpressionRefl(x.expression);
case OperatorIds.TWIDDLE:
SNode twiddle=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression",null);
SLinkOperations.setTarget(twiddle,"expression",processExpressionRefl(x.expression),true);
return twiddle;
default :
throw new JavaConverterException("Unexpected operator for unary expression");
}
}
