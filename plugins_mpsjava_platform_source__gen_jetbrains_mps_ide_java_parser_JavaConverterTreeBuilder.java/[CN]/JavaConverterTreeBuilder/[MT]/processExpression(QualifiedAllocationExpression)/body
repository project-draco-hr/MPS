{
  MethodBinding b=x.binding;
  SNode creator=null;
  if (x.anonymousType != null) {
    SNode anonymousClassCreator=SModelOperations.createNewNode(myCurrentModel,null,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
    creator=anonymousClassCreator;
    SNode anonymousClass=SNodeOperations.cast(myTypesProvider.getRaw(x.anonymousType.binding),"jetbrains.mps.baseLanguage.structure.AnonymousClass");
    if (x.anonymousType.methods.length > 0 && x.anonymousType.methods[0] instanceof ConstructorDeclaration) {
      MethodBinding superConstructorBinding=((ConstructorDeclaration)x.anonymousType.methods[0]).constructorCall.binding;
      SReference methodReference=myTypesProvider.createMethodReference(superConstructorBinding,"baseMethodDeclaration",anonymousClass);
      anonymousClass.setReference(methodReference.getRole(),methodReference);
      addCallArgs(x.arguments,anonymousClass);
    }
    SLinkOperations.setTarget(anonymousClassCreator,"cls",anonymousClass,true);
  }
 else {
    if (x.enclosingInstance() == null) {
      return processExpression((AllocationExpression)x);
    }
  }
  SNode result=SModelOperations.createNewNode(myCurrentModel,null,"jetbrains.mps.baseLanguage.structure.GenericNewExpression");
  SLinkOperations.setTarget(result,"creator",creator,true);
  return result;
}
