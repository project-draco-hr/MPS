{
  if (x.binding instanceof SyntheticMethodBinding) {
    SyntheticMethodBinding syntheticMethodBinding=(SyntheticMethodBinding)x.binding;
    if (syntheticMethodBinding.purpose == SyntheticMethodBinding.EnumValues) {
      return processValuesExpression(syntheticMethodBinding);
    }
    if (syntheticMethodBinding.purpose == SyntheticMethodBinding.EnumValueOf) {
      return processValueOfExpression(syntheticMethodBinding,x);
    }
  }
  SNode methodCall=null;
  SNode result;
  if (x.binding != null && x.binding.isStatic()) {
    SNode smc=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    methodCall=smc;
    result=smc;
    SReference classifierReference=myTypesProvider.createClassifierReference(x.binding.declaringClass,"classConcept",smc);
    smc.setReference(classifierReference.getRole(),classifierReference);
  }
 else   if (x.receiver instanceof SuperReference || x.receiver instanceof QualifiedSuperReference) {
    SNode smc=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.SuperMethodCall",null);
    methodCall=smc;
    result=smc;
  }
 else {
    if (x.receiver instanceof ThisReference && x.receiver.isImplicitThis()) {
      SNode limc=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",null);
      methodCall=limc;
      result=limc;
    }
 else {
      SNode qualifier;
      SNode imco=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
      methodCall=imco;
      qualifier=processExpressionRefl(x.receiver);
      SNode dotExpression=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.DotExpression",null);
      SLinkOperations.setTarget(dotExpression,"operand",qualifier,true);
      SLinkOperations.setTarget(dotExpression,"operation",imco,true);
      result=dotExpression;
    }
  }
  SReference methodReference;
  if (x.binding == null) {
    methodReference=myTypesProvider.createErrorReference("baseMethodDeclaration",new String(x.selector),methodCall);
  }
 else   if (x.binding instanceof ProblemMethodBinding) {
    ProblemMethodBinding problemMethodBinding=(ProblemMethodBinding)x.binding;
    methodReference=myTypesProvider.createErrorReference("baseMethodDeclaration",new String(problemMethodBinding.selector),methodCall);
  }
 else {
    methodReference=myTypesProvider.createMethodReference(x.binding,"baseMethodDeclaration",methodCall);
  }
  if (methodReference != null) {
    methodCall.setReference(methodReference.getRole(),methodReference);
  }
  addMethodTypeArgs(x.typeArguments,methodCall);
  addCallArgs(x.arguments,methodCall);
  return result;
}
