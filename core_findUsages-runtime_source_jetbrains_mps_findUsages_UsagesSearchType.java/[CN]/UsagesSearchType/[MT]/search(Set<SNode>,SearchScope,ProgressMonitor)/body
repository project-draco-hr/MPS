{
  final HashSet<SReference> rv=new HashSet<SReference>();
  CollectConsumer<SReference> consumer=new CollectConsumer<SReference>(rv);
  Collection<FindUsagesParticipant> participants=PersistenceRegistry.getInstance().getFindUsagesParticipants();
  monitor.start("Finding usages...",participants.size() + 4);
  try {
    Collection<SModel> current=IterableUtil.asCollection(scope.getModels());
    for (    FindUsagesParticipant participant : participants) {
      final Set<SModel> next=new HashSet<SModel>(current);
      participant.findUsages(current,nodes,consumer,new Consumer<SModel>(){
        @Override public void consume(        SModel sModel){
          if (sModel instanceof EditableSModel && ((EditableSModel)sModel).isChanged()) {
            return;
          }
          next.remove(sModel);
        }
      }
);
      current=next;
      monitor.advance(1);
    }
    ProgressMonitor subMonitor=monitor.subTask(4,SubProgressKind.DEFAULT);
    subMonitor.start("",current.size());
    NodeUsageFinder nf=new NodeUsageFinder(nodes,consumer);
    for (    SModel m : current) {
      subMonitor.step(m.getModelName());
      nf.collectUsages(m);
      if (monitor.isCanceled()) {
        break;
      }
      subMonitor.advance(1);
    }
    subMonitor.done();
  }
  finally {
    monitor.done();
  }
  return rv;
}
