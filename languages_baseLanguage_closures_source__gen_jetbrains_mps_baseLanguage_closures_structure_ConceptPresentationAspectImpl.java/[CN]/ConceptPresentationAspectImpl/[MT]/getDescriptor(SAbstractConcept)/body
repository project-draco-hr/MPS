{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("fd392034-7849-419d-9071-12563d152375"),"jetbrains.mps.baseLanguage.closures")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractFunctionType;
case 1:
  return props_ClosureArgReference;
case 2:
return props_ClosureControlStatement;
case 3:
return props_ClosureLiteral;
case 4:
return props_ClosureLiteralType;
case 5:
return props_CompactInvokeFunctionExpression;
case 6:
return props_ControlAbstractionContainer;
case 7:
return props_ControlAbstractionDeclaration;
case 8:
return props_ControlClosureLiteral;
case 9:
return props_FunctionMethodDeclaration;
case 10:
return props_FunctionType;
case 11:
return props_InvokeExpression;
case 12:
return props_InvokeFunctionExpression;
case 13:
return props_InvokeFunctionOperation;
case 14:
return props_PairOfInts;
case 15:
return props_StringPropertyHolder;
case 16:
return props_UnboundClosureParameterDeclaration;
case 17:
return props_UnrestrictedClosureLiteral;
case 18:
return props_UnrestrictedFunctionType;
case 19:
return props_YieldAllStatement;
case 20:
return props_YieldStatement;
}
throw new IllegalStateException();
}
