{
  String namespace=node.getNode().getLanguageNamespace();
  if (namespace.equals("jetbrains.mps.bootstrap.structureLanguage") && propertyName.equals(NamedConcept.NAME) && !node.getConceptFQName().equals("jetbrains.mps.bootstrap.structureLanguage.structure.AnnotationLinkDeclaration")) {
    return null;
  }
  if (namespace.equals("jetbrains.mps.projectLanguage")) {
    return null;
  }
  if (node instanceof RuntimeTypeVariable) {
    return null;
  }
  if (!myAddedLanguageNamespaces.containsKey(namespace)) {
    return null;
  }
  String nodeConceptFqName=node.getConceptFQName();
  String originalKey=nodeConceptFqName + "#" + propertyName;
  if (isSetter) {
    if (myNodePropertySettersCache.containsKey(originalKey)) {
      return myNodePropertySettersCache.get(originalKey);
    }
  }
 else {
    if (myNodePropertyGettersCache.containsKey(originalKey)) {
      return myNodePropertyGettersCache.get(originalKey);
    }
  }
  Set<AbstractConceptDeclaration> hierarchy=SModelUtil_new.getConceptHierarchy(node.getConceptDeclarationAdapter());
  for (  AbstractConceptDeclaration concept : hierarchy) {
    String conceptFqName=NameUtil.nodeFQName(concept);
    IModelConstraints result;
    if (isSetter) {
      result=myNodePropertySettersMap.get(conceptFqName + "#" + propertyName);
    }
 else {
      result=myNodePropertyGettersMap.get(conceptFqName + "#" + propertyName);
    }
    if (result != null) {
      if (isSetter) {
        myNodePropertySettersCache.put(originalKey,(INodePropertySetter)result);
      }
 else {
        myNodePropertyGettersCache.put(originalKey,(INodePropertyGetter)result);
      }
      return result;
    }
  }
  if (isSetter) {
    myNodePropertySettersCache.put(originalKey,null);
  }
 else {
    myNodePropertyGettersCache.put(originalKey,null);
  }
  return null;
}
