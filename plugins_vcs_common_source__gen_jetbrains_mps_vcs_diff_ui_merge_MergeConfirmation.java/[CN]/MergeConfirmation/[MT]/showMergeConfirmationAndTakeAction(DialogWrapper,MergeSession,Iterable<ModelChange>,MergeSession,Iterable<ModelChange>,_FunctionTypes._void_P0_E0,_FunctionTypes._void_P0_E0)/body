{
  List<ModelChange> changes=Sequence.fromIterable(allRelevantChanges).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return !(mergeSession.isChangeResolved(ch));
    }
  }
).toListSequence();
  int nChanges=ListSequence.fromList(changes).count();
  int nConflicts=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return Sequence.fromIterable(mergeSession.getConflictedWith(ch)).isNotEmpty();
    }
  }
).count();
  if (mergeSession2 != null) {
    changes=Sequence.fromIterable(allRelevantChanges2).where(new IWhereFilter<ModelChange>(){
      public boolean accept(      ModelChange ch){
        return !(mergeSession2.isChangeResolved(ch));
      }
    }
).toListSequence();
    nChanges+=ListSequence.fromList(changes).count();
    nConflicts+=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
      public boolean accept(      ModelChange ch){
        return Sequence.fromIterable(mergeSession2.getConflictedWith(ch)).isNotEmpty();
      }
    }
).count();
  }
  int result=MergeConfirmation.showMergeConfirmationIfNeeded(dialog,nChanges,nConflicts);
  if (result == RETURN) {
  }
 else   if (result == SAVE_AS_IS) {
    saveAndCloseTask.invoke();
  }
 else   if (result == RESOLVE_AUTOMATICALLY) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        resolveTask.invoke();
        saveAndCloseTask.invoke();
      }
    }
);
  }
}
