{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=SNodeOperations.getAncestors(_context.getEnclosingNode(),null,false);
          List<SNode> vars=new ArrayList<SNode>();
          for (          SNode node : nodes) {
            if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.samples.matrixLanguage.structure.ForEachMatrixElement")) {
              ListSequence.fromList(vars).addElement(SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.samples.matrixLanguage.structure.ForEachMatrixElement"),"element",true));
            }
          }
          SimpleSearchScope result=new SimpleSearchScope(vars);
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_5r9sz9_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
