{
  List<RTransformHintSubstituteActionsBuilder> actionsBuilders=new LinkedList<RTransformHintSubstituteActionsBuilder>();
  IScope scope=myContext.getScope();
  final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
  final RTransformTag tag=RTransformTag.parseValue(myTransformTag);
  List<Language> languages=mySourceNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    SModelDescriptor actionsModel=language.getActionsModelDescriptor();
    if (actionsModel != null && actionsModel.getSModel() != null) {
      List<SNode> list=actionsModel.getSModel().allNodes(new Condition<SNode>(){
        public boolean met(        SNode node){
          if (BaseAdapter.fromNode(node) instanceof RTransformHintSubstituteActionsBuilder) {
            RTransformHintSubstituteActionsBuilder actionsBuilder=(RTransformHintSubstituteActionsBuilder)BaseAdapter.fromNode(node);
            if (actionsBuilder.getTransformTag() != tag) {
              return false;
            }
            return SModelUtil_new.isAssignableConcept(sourceConcept,actionsBuilder.getApplicableConcept()) && satisfiesPrecondition(actionsBuilder);
          }
          return false;
        }
      }
);
      actionsBuilders.addAll((List)BaseAdapter.toAdapters(list));
    }
  }
  return actionsBuilders;
}
