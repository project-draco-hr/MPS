{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("link",new BaseReferenceConstraintsDescriptor("link",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_t1q7r2_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",false,false),"concept",false);
          return new SimpleScope(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept)){
            @Nullable public String getReferenceText(            @NotNull SNode target){
              return SPropertyOperations.getString(SNodeOperations.cast(target,"jetbrains.mps.lang.structure.structure.LinkDeclaration"),"role");
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
