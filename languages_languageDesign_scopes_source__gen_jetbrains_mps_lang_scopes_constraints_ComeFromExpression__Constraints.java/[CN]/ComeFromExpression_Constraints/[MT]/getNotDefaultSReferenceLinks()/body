{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xd8f591ec4d864af2L,0x9f92a9e93c803ffaL,0x701a981462928bdfL,0x701a981462928f1eL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd8f591ec4d864af2L,0x9f92a9e93c803ffaL,0x701a981462928bdfL,0x701a981462928f1eL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_t1q7r2_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode concept=SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),false,false),MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,0x11d43447b1fL,"concept"));
            return new SimpleScope(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept)){
              @Nullable @Override public String getReferenceText(              @NotNull SNode target){
                return SPropertyOperations.getString(SNodeOperations.cast(target,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,"jetbrains.mps.lang.structure.structure.LinkDeclaration")),MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98052f333L,"role"));
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
