{
  if (operationContext == null || node == null || SNodeOperations.getModel(node) == null) {
    return;
  }
  IModule module=check_bt3k2y_a0b0b(SNodeOperations.getModel(node).getModelDescriptor());
  if (module == null) {
    return;
  }
  SNode concept=SNodeOperations.getConceptDeclaration(node);
  for (  SReference ref : SNodeOperations.getReferences(node)) {
    SNode target=SLinkOperations.getTargetNode(ref);
    SNode ld=SLinkOperations.findLinkDeclaration(ref);
    if ((target == null) || ld == null) {
      continue;
    }
    component.addDependency(target);
    component.addDependency(ld);
    component.addDependency(node);
    component.addDependency(SNodeOperations.getParent(node));
    for (    SNode c : SNodeOperations.getChildren(node)) {
      component.addDependency(c);
    }
    Scope refScope=ModelConstraints.getScope(ref);
    if (refScope instanceof ErrorScope) {
      component.addError(node,((ErrorScope)refScope).getMessage(),null,new ReferenceMessageTarget(SLinkOperations.getRole(ref)));
    }
 else     if (!(refScope.contains(target))) {
      String name=target.getName();
      ReferenceScopeProvider scopeProvider=ModelConstraintsManager.getNodeReferentSearchScopeProvider(concept,ref.getRole());
      SNode ruleNode=null;
      if (scopeProvider != null) {
        ruleNode=(scopeProvider.getSearchScopeValidatorNode() != null ? scopeProvider.getSearchScopeValidatorNode().getNode() : null);
      }
      component.addError(node,"reference" + ((name == null ? "" : " " + name)) + " ("+ SLinkOperations.getRole(ref)+ ") is out of search scope",ruleNode,new ReferenceMessageTarget(SLinkOperations.getRole(ref)),new RefScopeChecker.ResolveReferenceQuickFix(ref,operationContext));
    }
  }
}
