{
  MPSModulesPartitioner partitioner=new MPSModulesPartitioner(_context.getNode());
  partitioner.buildChunks();
  partitioner.buildExternalDependencies();
  if (ListSequence.fromList(partitioner.getChunks()).any(new IWhereFilter<MPSModulesPartitioner.Chunk>(){
    public boolean accept(    MPSModulesPartitioner.Chunk it){
      return it.isBootstrap();
    }
  }
) && !(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(),MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l,-5075149991798053422l),5617550519002745363l,3542413272732620719l,"aspects"))).any(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMpsAspect") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMpsAspect"),MetaAdapterFactory.getProperty(new UUID(934837630734519964l,-6831122735637083229l),6503355885715333289l,6503355885715353788l,"bootstrap"));
    }
  }
))) {
    Iterable<SNode> samples=ListSequence.fromList(partitioner.getChunks()).where(new IWhereFilter<MPSModulesPartitioner.Chunk>(){
      public boolean accept(      MPSModulesPartitioner.Chunk it){
        return it.isBootstrap();
      }
    }
).translate(new ITranslator2<MPSModulesPartitioner.Chunk,SNode>(){
      public Iterable<SNode> translate(      MPSModulesPartitioner.Chunk it){
        return it.getConflicting();
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.as(DependenciesHelper.getOriginalNode(it,_context),"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule");
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_Module");
      }
    }
);
    _context.showErrorMessage(null,"cannot create `generate' task, there is a dependency cycle between a language and modules using it; add `mps settings' aspect with bootstrap = true to turn off the check");
    for (    SNode c : Sequence.fromIterable(samples)) {
      _context.showErrorMessage(c,"(bootstrap cycle) " + SPropertyOperations.getString(c,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + "; right click on a module -> Analyze -> Analyze Module Dependencies");
    }
  }
  return partitioner;
}
