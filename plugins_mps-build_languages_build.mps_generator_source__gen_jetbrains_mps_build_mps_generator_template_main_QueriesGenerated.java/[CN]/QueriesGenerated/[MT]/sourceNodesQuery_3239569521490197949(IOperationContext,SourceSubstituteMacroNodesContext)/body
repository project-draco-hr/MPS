{
  return ListSequence.fromList(((MPSModulesPartitioner)_context.getVariable("var:closure")).getChunks()).translate(new ITranslator2<MPSModulesPartitioner.Chunk,SNode>(){
    public Iterable<SNode> translate(    MPSModulesPartitioner.Chunk it){
      return it.getModules();
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_Generator"));
    }
  }
).sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
,true);
}
