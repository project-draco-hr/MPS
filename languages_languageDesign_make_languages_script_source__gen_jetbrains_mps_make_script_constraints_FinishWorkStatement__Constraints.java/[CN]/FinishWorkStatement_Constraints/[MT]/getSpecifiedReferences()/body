{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x29929a95c9e6987L,0x97a1ce11862c6ddL,"workStatement"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x29929a95c9e6987L,0x97a1ce11862c6ddL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x29929a95c9e6982L,0x97a1ce11865e911L,"workName"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x20c069f80a972dabL,"jetbrains.mps.make.script.structure.JobDefinition"),false,false),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x108bbca0f48L,0x108bbd29b4aL,"body")),MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L,0xa65e763c9bae2d3bL,0x29929a95c9e6982L,"jetbrains.mps.make.script.structure.BeginWorkStatement"),false,new SAbstractConcept[]{});
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_tiy6xt_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
