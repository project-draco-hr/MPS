{
  if (s == null)   return null;
  s=s.trim();
  int lParen=s.indexOf('(');
  int rParen=s.lastIndexOf(')');
  String presentationPart=null;
  if (lParen > 0 && rParen == s.length() - 1) {
    presentationPart=s.substring(lParen + 1,rParen);
    s=s.substring(0,lParen);
    lParen=s.indexOf('(');
    rParen=s.lastIndexOf(')');
  }
  if (lParen != -1 || rParen != -1) {
    throw new IllegalArgumentException("parentheses do not match in: `" + s + "'");
  }
  ModuleId moduleId=null;
  int slash=s.indexOf('/');
  if (slash >= 0) {
    moduleId=ModuleId.fromString(StringUtil.unescapeRefChars(s.substring(0,slash)));
    s=s.substring(slash + 1);
  }
  String modelIDString=StringUtil.unescapeRefChars(s);
  SModelId modelId;
  if (modelIDString.indexOf(':') >= 0) {
    PersistenceFacade facade=PersistenceFacade.getInstance();
    modelId=facade != null ? facade.createModelId(modelIDString) : jetbrains.mps.smodel.SModelId.fromString(modelIDString);
  }
 else {
    modelId=new ModelNameSModelId(modelIDString);
  }
  SModelId nid=StubMigrationHelper.convertModelId(modelId,false);
  if (nid != null)   modelId=nid;
  String moduleName=null;
  String modelName=null;
  if (presentationPart != null) {
    slash=presentationPart.indexOf('/');
    if (slash >= 0) {
      moduleName=StringUtil.unescapeRefChars(presentationPart.substring(0,slash));
      modelName=StringUtil.unescapeRefChars(presentationPart.substring(slash + 1));
    }
 else {
      modelName=StringUtil.unescapeRefChars(presentationPart);
    }
  }
  if (modelName == null) {
    modelName=modelId.getModelName();
    if (modelName == null) {
      throw new IllegalArgumentException("incomplete model reference, presentation part is absent");
    }
  }
  SModuleReference moduleRef=moduleId != null || moduleName != null ? new jetbrains.mps.project.structure.modules.ModuleReference(moduleName,moduleId) : null;
  return new SModelReference(moduleRef,modelId,modelName);
}
