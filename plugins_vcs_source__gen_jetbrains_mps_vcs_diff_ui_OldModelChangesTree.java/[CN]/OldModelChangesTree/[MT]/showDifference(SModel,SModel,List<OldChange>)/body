{
  myChanges=changes;
  myOldModel=oldModel;
  myNewModel=newModel;
  myAddedNodes.clear();
  myChangedNodes.clear();
  myDeletedNodes.clear();
  myChangedSubtree.clear();
  for (  OldChange change : changes) {
    SNodeId id=change.getAffectedNodeId();
    if (id != null) {
      addToChangeSubtree(change,change.getAffectedNodeId(),newModel,oldModel);
    }
  }
  for (  OldAddRootChange ar : CollectionUtil.filter(OldAddRootChange.class,changes)) {
    myAddedNodes.add(ar.getAffectedNodeId());
  }
  for (  AddNodeChange an : CollectionUtil.filter(AddNodeChange.class,changes)) {
    myAddedNodes.add(an.getAffectedNodeId());
  }
  for (  SetNodeChange c : CollectionUtil.filter(SetNodeChange.class,changes)) {
    myAddedNodes.add(c.getAffectedNodeId());
  }
  for (  OldSetPropertyChange p : CollectionUtil.filter(OldSetPropertyChange.class,changes)) {
    myChangedNodes.add(p.getAffectedNodeId());
  }
  for (  OldSetReferenceChange r : CollectionUtil.filter(OldSetReferenceChange.class,changes)) {
    myChangedNodes.add(r.getAffectedNodeId());
  }
  for (  ChangeConceptChange ch : CollectionUtil.filter(ChangeConceptChange.class,changes)) {
    myChangedNodes.add(ch.getAffectedNodeId());
  }
  for (  DeleteNodeChange ch : CollectionUtil.filter(DeleteNodeChange.class,changes)) {
    myDeletedNodes.add(ch.getAffectedNodeId());
  }
  rebuildNow();
  expandRoot();
  return this;
}
