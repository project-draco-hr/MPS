{
  SNodeId id=getSNode().getSNodeId();
  ActionGroup groupForChanges=getActionGroupForChanges(myChangesMap.get(id));
  final SNode node=getSNode();
  if (node != null) {
    BaseAction showRootDiffDialog=new BaseAction("Show Difference In MPS Editor"){
{
        String keyStroke="ctrl D";
        KeyboardShortcut shortcut=new KeyboardShortcut(KeyStroke.getKeyStroke(keyStroke),null);
        KeymapManager.getInstance().getKeymap(KeymapManager.DEFAULT_IDEA_KEYMAP).addShortcut(getActionId(),shortcut);
      }
      protected void doExecute(      AnActionEvent event,      Map<String,Object> map){
        doubleClickOnNode(node);
      }
    }
;
    showRootDiffDialog.setExecuteOutsideCommand(true);
    BaseAction showNodeInEditor=new BaseAction("Open in Editor"){
{
        String keyStroke="F4";
        KeyboardShortcut shortcut=new KeyboardShortcut(KeyStroke.getKeyStroke(keyStroke),null);
        KeymapManager.getInstance().getKeymap(KeymapManager.DEFAULT_IDEA_KEYMAP).addShortcut(getActionId(),shortcut);
      }
      @Override protected void doUpdate(      final AnActionEvent e,      Map<String,Object> map){
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            boolean enabled=!(node.getModel().isNotEditable());
            e.getPresentation().setEnabled(enabled);
            e.getPresentation().setVisible(enabled);
          }
        }
);
      }
      protected void doExecute(      AnActionEvent event,      Map<String,Object> map){
        getOperationContext().getComponent(MPSEditorOpener.class).editNode(node,getOperationContext());
      }
    }
;
    showNodeInEditor.setExecuteOutsideCommand(true);
    DefaultActionGroup group=ActionUtils.groupFromActions(showRootDiffDialog,showNodeInEditor);
    if (groupForChanges != null) {
      group.addSeparator();
      group.addAll(groupForChanges);
    }
    return group;
  }
 else {
    return groupForChanges;
  }
}
