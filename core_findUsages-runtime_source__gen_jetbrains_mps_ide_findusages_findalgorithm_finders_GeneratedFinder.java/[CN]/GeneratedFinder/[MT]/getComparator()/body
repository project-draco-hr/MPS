{
  return new Comparator<SNode>(){
    private Pair<Integer,Boolean> indexInEditor(    SNode editorNode,    String role,    Pair<Integer,Boolean> index){
      index.o1++;
      if (editorNode.toString().startsWith("%" + role + "%")) {
        return new Pair(index.o1,true);
      }
      for (      SNode childEditorNode : editorNode.getChildren()) {
        Pair<Integer,Boolean> result=indexInEditor(childEditorNode,role,index);
        if (result.o2) {
          return result;
        }
      }
      return new Pair(-1,false);
    }
    private int searchInEditors(    SNode ancestor,    SNode searchedNode){
      final SNode conceptDeclaration=ancestor.getConceptDeclarationNode();
      SModel structureModel=conceptDeclaration.getModel();
      Language language=(Language)structureModel.getModelDescriptor().getModule();
      SModel editorModel=language.getEditorModelDescriptor().getSModel();
      SNode editorNode=ListSequence.fromList(SModelOperations.getRoots(editorModel,"jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration")).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SLinkOperations.getTarget(it,"conceptDeclaration",false) == conceptDeclaration;
        }
      }
);
      if ((editorNode == null)) {
        return -1;
      }
      int index=indexInEditor(editorNode,searchedNode.getRole_(),new Pair(-1,false)).o1;
      if (index != -1 || ancestor.getParent() == null) {
        return index;
      }
      return searchInEditors(ancestor.getParent(),searchedNode);
    }
    private int compareWithEditor(    SNode ancestor,    SNode node1,    SNode node2){
      Integer index1=searchInEditors(ancestor,node1);
      Integer index2=searchInEditors(ancestor,node2);
      return index1.compareTo(index2);
    }
    private int compareBrothers(    SNode n1,    SNode n2){
      if (SNodeOperations.getContainingLinkRole(n1) == null) {
        return n1.toString().compareTo(n2.toString());
      }
      if (SNodeOperations.getContainingLinkRole(n1).equals(SNodeOperations.getContainingLinkRole(n2))) {
        return SNodeOperations.getIndexInParent(n1) - SNodeOperations.getIndexInParent(n2);
      }
      return compareWithEditor(SNodeOperations.getParent(n1),n1,n2);
    }
    public int compare(    SNode n1,    SNode n2){
      List<SNode> path1=ListSequence.fromList(SNodeOperations.getAncestors(n1,null,true)).reversedList();
      List<SNode> path2=ListSequence.fromList(SNodeOperations.getAncestors(n2,null,true)).reversedList();
      for (int i=0; i < ListSequence.fromList(path1).count() && i < ListSequence.fromList(path2).count(); ++i) {
        if (ListSequence.fromList(path1).getElement(i) != ListSequence.fromList(path2).getElement(i)) {
          return compareBrothers(ListSequence.fromList(path1).getElement(i),ListSequence.fromList(path2).getElement(i));
        }
      }
      return ListSequence.fromList(path1).count() - ListSequence.fromList(path2).count();
    }
  }
;
}
