{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createUnitInfo(this,node);
  }
  BaseLanguageTextGen.fileHeader(node,this);
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,"visibility",true),this);
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")) != null)) {
    appendNode(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")));
  }
  if (!(SNodeOperations.isRoot(node))) {
    this.append("static ");
  }
  this.appendWithIndent("enum ");
  this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node,"name")));
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"implementedInterface",true)).isNotEmpty()) {
    this.append(" implements ");
{
      Iterable<SNode> collection=SLinkOperations.getTargets(node,"implementedInterface",true);
      final SNode lastItem=Sequence.fromIterable(collection).last();
      for (      SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
  }
  this.append(" {");
  this.increaseDepth();
{
    Iterable<SNode> collection=SLinkOperations.getTargets(node,"enumConstant",true);
    final SNode lastItem=Sequence.fromIterable(collection).last();
    for (    SNode item : collection) {
      appendNode(item);
      if (item != lastItem) {
        append(",");
      }
    }
  }
  this.append(";");
  this.appendNewLine();
  this.appendNewLine();
  BaseClassConceptTextGen.members(node,this);
  this.decreaseDepth();
  this.appendWithIndent("}");
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String unitName=null;
      try {
        unitName=BehaviorReflection.invokeVirtual(String.class,jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.UnitConcept"),"virtual_getUnitName_5067982036267369911",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate unit name for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillUnitInfo(this,node,unitName);
    }
  }
}
