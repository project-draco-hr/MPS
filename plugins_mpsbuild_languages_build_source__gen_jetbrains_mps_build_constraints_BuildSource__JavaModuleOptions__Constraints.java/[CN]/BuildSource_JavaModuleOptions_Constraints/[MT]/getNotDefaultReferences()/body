{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("compileOptions",new BaseReferenceConstraintsDescriptor("compileOptions",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return ((StringUtils.isEmpty(SPropertyOperations.getString(_context.getParameterNode(),"optionsName")) ? "<default options>" : SPropertyOperations.getString(_context.getParameterNode(),"optionsName")));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_q5t0js_a0a2a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Scope.getScope(_context.getContextNode(),_context.getContextRole(),_context.getPosition(),SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSource_JavaOptions"));
        }
      }
;
    }
  }
);
  return references;
}
