{
  SModel m=sm.resolve(MPSModuleRepository.getInstance());
  SModule module=m == null ? null : m.getModule();
  if (module == null) {
    reportErrorWhileClassLoading(className,suppressErrorLogging,String.format("couldn't find class '%s': no module for model '%s",className,sm));
  }
  if (!(module instanceof ReloadableModule && ((ReloadableModule)module).willLoad())) {
    reportErrorWhileClassLoading(className,suppressErrorLogging,String.format("couldn't find class '%s': module %s couldn't be loaded",className,module.getModuleName()));
  }
  Class queriesClass=null;
  try {
    queriesClass=((ReloadableModule)module).getClass(className);
  }
 catch (  ModuleIsNotLoadableException e) {
    LOG.error("Please check the module " + e.getModule() + " is eligible for class loading");
  }
  if (queriesClass == null) {
    reportErrorWhileClassLoading(className,suppressErrorLogging,String.format("couldn't find class '%s' for model '%s' : TRY TO GENERATE",className,sm));
  }
  return queriesClass;
}
