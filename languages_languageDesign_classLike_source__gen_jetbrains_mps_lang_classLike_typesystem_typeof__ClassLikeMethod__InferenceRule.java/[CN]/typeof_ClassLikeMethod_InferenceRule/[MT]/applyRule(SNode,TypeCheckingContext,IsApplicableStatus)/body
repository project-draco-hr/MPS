{
  boolean error=false;
  if (ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(classLikeMethod,"decl",false),"param",true)).count()) {
    for (int i=0; i < ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).count(); i++) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(classLikeMethod,"decl",false),"param",true)).getElement(i),"type",true),"jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration")) {
        error|=!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).getElement(i),"type",true),"jetbrains.mps.lang.classLike.structure.DependentTypeInstance") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).getElement(i),"type",true),"jetbrains.mps.lang.classLike.structure.DependentTypeInstance"),"decl",false) == SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(classLikeMethod,"decl",false),"param",true)).getElement(i),"type",true));
      }
 else {
        error|=!(MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).getElement(i),"type",true),SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(classLikeMethod,"decl",false),"param",true)).getElement(i),"type",true)));
      }
      error|=neq_w6mbdo_a0a1a0a2a1(SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(classLikeMethod,"decl",false),"param",true)).getElement(i),"name"),SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(classLikeMethod,"parameter",true)).getElement(i),"name"));
    }
  }
 else {
    error=true;
  }
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(classLikeMethod,"decl",false),"retType",true),"jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration")) {
    error|=!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(classLikeMethod,"returnType",true),"jetbrains.mps.lang.classLike.structure.DependentTypeInstance") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(classLikeMethod,"returnType",true),"jetbrains.mps.lang.classLike.structure.DependentTypeInstance"),"decl",false) == SLinkOperations.getTarget(SLinkOperations.getTarget(classLikeMethod,"decl",false),"retType",true));
  }
 else {
    error|=!(MatchingUtil.matchNodes(SLinkOperations.getTarget(classLikeMethod,"returnType",true),SLinkOperations.getTarget(SLinkOperations.getTarget(classLikeMethod,"decl",false),"retType",true)));
  }
  if (error) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      errorTarget=new PropertyMessageTarget("name");
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(classLikeMethod,"Method signature is not the same as in descriptor","c7d5b9dd-a05f-4be2-bc73-f2e16994cc67/r:e04b7053-8c89-4f87-b296-94779c625d9d(jetbrains.mps.lang.classLike/jetbrains.mps.lang.classLike.typesystem)","1901385213796809109",null,errorTarget);
{
        BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.lang.classLike.typesystem.fix_SignatureMismatch_QuickFix",false);
        _reporter_2309309498.addIntentionProvider(intentionProvider);
      }
    }
  }
}
