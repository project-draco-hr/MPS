{
  Element rootElement=document.getRootElement();
  SModelReference modelReference=SModelReference.fromString(rootElement.getAttributeValue(ModelPersistence.MODEL_UID));
  SModel model=new SModel(modelReference);
  model.setPersistenceVersion(getVersion());
  model.getSModelHeader().updateDefaults(header);
  for (  Object att : rootElement.getAttributes()) {
    String name=((Attribute)att).getQualifiedName();
    String value=((Attribute)att).getValue();
    if (SModelHeader.VERSION.equals(name)) {
      model.getSModelHeader().setVersion(AttributeUtils.integerWithDefault(value,-1));
    }
 else     if (SModelHeader.DO_NOT_GENERATE.equals(name)) {
      model.getSModelHeader().setDoNotGenerate(AttributeUtils.booleanWithDefault(value,false));
    }
 else     if (!ModelPersistence.MODEL_UID.equals(name)) {
      model.getSModelHeader().setOptionalProperty(name,XmlStringUtil.unescapeXml(value));
    }
  }
  myHelper=new ReadHelper(modelReference);
  myLinkMap=new ModelLinkMap(model);
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.LANGUAGE)) {
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addLanguage(ModuleReference.fromString(languageNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION)) {
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addEngagedOnGenerationLanguage(ModuleReference.fromString(languageNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.DEVKIT)) {
    String devkitNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addDevKit(ModuleReference.fromString(devkitNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.IMPORT_ELEMENT)) {
    String indexValue=element.getAttributeValue(ModelPersistence.MODEL_IMPORT_INDEX);
    int usedModelVersion=Integer.parseInt(element.getAttributeValue(ModelPersistence.VERSION,"-1"));
    String importedModelUIDString=element.getAttributeValue(ModelPersistence.MODEL_UID);
    myHelper.addImportToModel(model,indexValue,importedModelUIDString,usedModelVersion,element.getAttributeValue(ModelPersistence.IMPLICIT) != null);
  }
  Element roots=rootElement.getChild(ModelPersistence.ROOTS);
  for (  Element element : (List<Element>)roots.getChildren(ModelPersistence.NODE)) {
    SNode node=readNode(element,model,true);
    if (node != null) {
      model.addRoot(node);
    }
  }
  for (  Element root : (List<Element>)rootElement.getChildren(ModelPersistence.ROOT_CONTENT)) {
    SNode node=model.getNodeById(SNodeId.fromString(root.getAttributeValue(ModelPersistence.ID)));
    if (node == null) {
      LOG.errorWithTrace("Cannot find root for " + root.getAttributeValue(ModelPersistence.ID));
      continue;
    }
    readChildren(node,root);
  }
  new StructureModificationProcessor(myLinkMap,model).updateModelOnLoad();
  return model;
}
