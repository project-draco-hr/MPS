{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(7596465798203917883l,-4873580700227838512l),6447445394688422642l,6447445394688422643l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(7596465798203917883l,-4873580700227838512l),6447445394688422642l,6447445394688422643l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SModelOperations.nodesIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(new UUID(7596465798203917883l,-4873580700227838512l),6418371274763029523l,"jetbrains.mps.make.facet.structure.FacetDeclaration"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_n4zw7m_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
