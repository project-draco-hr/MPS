{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_t8hmqt_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new AdditionalForLoopVariable_TextGen();
      }
    break;
case 1:
  if (true) {
    return new AndExpression_TextGen();
  }
break;
case 2:
if (true) {
return new Annotation_TextGen();
}
break;
case 3:
if (true) {
return new AnnotationInstance_TextGen();
}
break;
case 4:
if (true) {
return new AnnotationInstanceExpression_TextGen();
}
break;
case 5:
if (true) {
return new AnnotationInstanceValue_TextGen();
}
break;
case 6:
if (true) {
return new AnnotationMethodDeclaration_TextGen();
}
break;
case 7:
if (true) {
return new AnonymousClass_TextGen();
}
break;
case 8:
if (true) {
return new AnonymousClassCreator_TextGen();
}
break;
case 9:
if (true) {
return new ArrayAccessExpression_TextGen();
}
break;
case 10:
if (true) {
return new ArrayClassExpression_TextGen();
}
break;
case 11:
if (true) {
return new ArrayCloneOperation_TextGen();
}
break;
case 12:
if (true) {
return new ArrayCreator_TextGen();
}
break;
case 13:
if (true) {
return new ArrayCreatorWithInitializer_TextGen();
}
break;
case 14:
if (true) {
return new ArrayLengthOperation_TextGen();
}
break;
case 15:
if (true) {
return new ArrayLiteral_TextGen();
}
break;
case 16:
if (true) {
return new ArrayType_TextGen();
}
break;
case 17:
if (true) {
return new AssertStatement_TextGen();
}
break;
case 18:
if (true) {
return new BaseAssignmentExpression_TextGen();
}
break;
case 19:
if (true) {
return new BitwiseAndExpression_TextGen();
}
break;
case 20:
if (true) {
return new BitwiseNotExpression_TextGen();
}
break;
case 21:
if (true) {
return new BitwiseOrExpression_TextGen();
}
break;
case 22:
if (true) {
return new BitwiseXorExpression_TextGen();
}
break;
case 23:
if (true) {
return new BlockStatement_TextGen();
}
break;
case 24:
if (true) {
return new BooleanConstant_TextGen();
}
break;
case 25:
if (true) {
return new BooleanType_TextGen();
}
break;
case 26:
if (true) {
return new BreakStatement_TextGen();
}
break;
case 27:
if (true) {
return new ByteType_TextGen();
}
break;
case 28:
if (true) {
return new CastExpression_TextGen();
}
break;
case 29:
if (true) {
return new CatchClause_TextGen();
}
break;
case 30:
if (true) {
return new CharConstant_TextGen();
}
break;
case 31:
if (true) {
return new CharType_TextGen();
}
break;
case 32:
if (true) {
return new ClassConcept_TextGen();
}
break;
case 33:
if (true) {
return new ClassCreator_TextGen();
}
break;
case 34:
if (true) {
return new ClassifierClassExpression_TextGen();
}
break;
case 35:
if (true) {
return new ClassifierType_TextGen();
}
break;
case 36:
if (true) {
return new CommentedStatement_TextGen();
}
break;
case 37:
if (true) {
return new CommentedStatementsBlock_TextGen();
}
break;
case 38:
if (true) {
return new ConceptFunctionParameter_TextGen();
}
break;
case 39:
if (true) {
return new ConstructorDeclaration_TextGen();
}
break;
case 40:
if (true) {
return new ContinueStatement_TextGen();
}
break;
case 41:
if (true) {
return new DefaultClassCreator_TextGen();
}
break;
case 42:
if (true) {
return new DimensionExpression_TextGen();
}
break;
case 43:
if (true) {
return new DivExpression_TextGen();
}
break;
case 44:
if (true) {
return new DoWhileStatement_TextGen();
}
break;
case 45:
if (true) {
return new DotExpression_TextGen();
}
break;
case 46:
if (true) {
return new DoubleType_TextGen();
}
break;
case 47:
if (true) {
return new ElsifClause_TextGen();
}
break;
case 48:
if (true) {
return new EnumClass_TextGen();
}
break;
case 49:
if (true) {
return new EnumConstantDeclaration_TextGen();
}
break;
case 50:
if (true) {
return new EnumConstantReference_TextGen();
}
break;
case 51:
if (true) {
return new EnumValueOfExpression_TextGen();
}
break;
case 52:
if (true) {
return new EnumValuesExpression_TextGen();
}
break;
case 53:
if (true) {
return new EqualsExpression_TextGen();
}
break;
case 54:
if (true) {
return new ExpressionStatement_TextGen();
}
break;
case 55:
if (true) {
return new FieldDeclaration_TextGen();
}
break;
case 56:
if (true) {
return new FieldReferenceOperation_TextGen();
}
break;
case 57:
if (true) {
return new FloatType_TextGen();
}
break;
case 58:
if (true) {
return new FloatingPointConstant_TextGen();
}
break;
case 59:
if (true) {
return new FloatingPointFloatConstant_TextGen();
}
break;
case 60:
if (true) {
return new ForStatement_TextGen();
}
break;
case 61:
if (true) {
return new ForeachStatement_TextGen();
}
break;
case 62:
if (true) {
return new GenericNewExpression_TextGen();
}
break;
case 63:
if (true) {
return new GreaterThanExpression_TextGen();
}
break;
case 64:
if (true) {
return new GreaterThanOrEqualsExpression_TextGen();
}
break;
case 65:
if (true) {
return new HexIntegerLiteral_TextGen();
}
break;
case 66:
if (true) {
return new IfStatement_TextGen();
}
break;
case 67:
if (true) {
return new ImplicitAnnotationInstanceValue_TextGen();
}
break;
case 68:
if (true) {
return new InstanceInitializer_TextGen();
}
break;
case 69:
if (true) {
return new InstanceMethodCallOperation_TextGen();
}
break;
case 70:
if (true) {
return new InstanceMethodDeclaration_TextGen();
}
break;
case 71:
if (true) {
return new InstanceOfExpression_TextGen();
}
break;
case 72:
if (true) {
return new IntegerConstant_TextGen();
}
break;
case 73:
if (true) {
return new IntegerType_TextGen();
}
break;
case 74:
if (true) {
return new Interface_TextGen();
}
break;
case 75:
if (true) {
return new LessThanExpression_TextGen();
}
break;
case 76:
if (true) {
return new LessThanOrEqualsExpression_TextGen();
}
break;
case 77:
if (true) {
return new LocalMethodCall_TextGen();
}
break;
case 78:
if (true) {
return new LocalVariableDeclaration_TextGen();
}
break;
case 79:
if (true) {
return new LocalVariableDeclarationStatement_TextGen();
}
break;
case 80:
if (true) {
return new LongLiteral_TextGen();
}
break;
case 81:
if (true) {
return new LongType_TextGen();
}
break;
case 82:
if (true) {
return new LowerBoundType_TextGen();
}
break;
case 83:
if (true) {
return new MinusExpression_TextGen();
}
break;
case 84:
if (true) {
return new MulExpression_TextGen();
}
break;
case 85:
if (true) {
return new NestedNewExpression_TextGen();
}
break;
case 86:
if (true) {
return new NotEqualsExpression_TextGen();
}
break;
case 87:
if (true) {
return new NotExpression_TextGen();
}
break;
case 88:
if (true) {
return new NullLiteral_TextGen();
}
break;
case 89:
if (true) {
return new OrExpression_TextGen();
}
break;
case 90:
if (true) {
return new ParameterDeclaration_TextGen();
}
break;
case 91:
if (true) {
return new ParenthesizedExpression_TextGen();
}
break;
case 92:
if (true) {
return new PlaceholderMember_TextGen();
}
break;
case 93:
if (true) {
return new PlusExpression_TextGen();
}
break;
case 94:
if (true) {
return new PostfixDecrementExpression_TextGen();
}
break;
case 95:
if (true) {
return new PostfixIncrementExpression_TextGen();
}
break;
case 96:
if (true) {
return new PrefixDecrementExpression_TextGen();
}
break;
case 97:
if (true) {
return new PrefixIncrementExpression_TextGen();
}
break;
case 98:
if (true) {
return new PrimitiveClassExpression_TextGen();
}
break;
case 99:
if (true) {
return new QualifiedSuperMethodCall_TextGen();
}
break;
case 100:
if (true) {
return new RemExpression_TextGen();
}
break;
case 101:
if (true) {
return new RemarkStatement_TextGen();
}
break;
case 102:
if (true) {
return new ReturnStatement_TextGen();
}
break;
case 103:
if (true) {
return new ShiftLeftExpression_TextGen();
}
break;
case 104:
if (true) {
return new ShiftRightExpression_TextGen();
}
break;
case 105:
if (true) {
return new ShiftRightUnsignedExpression_TextGen();
}
break;
case 106:
if (true) {
return new ShortType_TextGen();
}
break;
case 107:
if (true) {
return new SingleLineComment_TextGen();
}
break;
case 108:
if (true) {
return new Statement_TextGen();
}
break;
case 109:
if (true) {
return new StatementCommentPart_TextGen();
}
break;
case 110:
if (true) {
return new StatementList_TextGen();
}
break;
case 111:
if (true) {
return new StaticFieldDeclaration_TextGen();
}
break;
case 112:
if (true) {
return new StaticFieldReference_TextGen();
}
break;
case 113:
if (true) {
return new StaticInitializer_TextGen();
}
break;
case 114:
if (true) {
return new StaticMethodCall_TextGen();
}
break;
case 115:
if (true) {
return new StaticMethodDeclaration_TextGen();
}
break;
case 116:
if (true) {
return new StringLiteral_TextGen();
}
break;
case 117:
if (true) {
return new StringType_TextGen();
}
break;
case 118:
if (true) {
return new SuperConstructorInvocation_TextGen();
}
break;
case 119:
if (true) {
return new SuperMethodCall_TextGen();
}
break;
case 120:
if (true) {
return new SwitchStatement_TextGen();
}
break;
case 121:
if (true) {
return new SynchronizedStatement_TextGen();
}
break;
case 122:
if (true) {
return new TernaryOperatorExpression_TextGen();
}
break;
case 123:
if (true) {
return new TextCommentPart_TextGen();
}
break;
case 124:
if (true) {
return new ThisConstructorInvocation_TextGen();
}
break;
case 125:
if (true) {
return new ThisExpression_TextGen();
}
break;
case 126:
if (true) {
return new ThrowStatement_TextGen();
}
break;
case 127:
if (true) {
return new TryCatchStatement_TextGen();
}
break;
case 128:
if (true) {
return new TryStatement_TextGen();
}
break;
case 129:
if (true) {
return new TypeVariableDeclaration_TextGen();
}
break;
case 130:
if (true) {
return new TypeVariableReference_TextGen();
}
break;
case 131:
if (true) {
return new UnaryMinus_TextGen();
}
break;
case 132:
if (true) {
return new UpperBoundType_TextGen();
}
break;
case 133:
if (true) {
return new VarType_TextGen();
}
break;
case 134:
if (true) {
return new VariableArityType_TextGen();
}
break;
case 135:
if (true) {
return new VariableDeclaration_TextGen();
}
break;
case 136:
if (true) {
return new VariableReference_TextGen();
}
break;
case 137:
if (true) {
return new Visibility_TextGen();
}
break;
case 138:
if (true) {
return new VoidType_TextGen();
}
break;
case 139:
if (true) {
return new WhileStatement_TextGen();
}
break;
case 140:
if (true) {
return new WildCardType_TextGen();
}
break;
default :
}
}
return null;
}
