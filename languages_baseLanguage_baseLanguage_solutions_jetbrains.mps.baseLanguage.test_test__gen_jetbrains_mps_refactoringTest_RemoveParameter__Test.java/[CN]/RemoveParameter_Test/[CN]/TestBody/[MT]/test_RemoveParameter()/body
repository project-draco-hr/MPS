{
  this.addNodeById("1230052944082");
  this.addNodeById("1230052944093");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052944084"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).clear();
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052944084"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052944083"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052944094"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
