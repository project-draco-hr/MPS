{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_21gswx_a0b=null;
      final Iterable<GResource> input=(Iterable<GResource>)(Iterable)rawInput;
switch (0) {
case 0:
        final jetbrains.mps.text.TextGeneratorEngine tgEngine=new jetbrains.mps.text.TextGeneratorEngine();
      try {
        int modelsCount=Sequence.fromIterable(input).count();
        final ArrayBlockingQueue<TextGenResult> resultQueue=new ArrayBlockingQueue<TextGenResult>(modelsCount);
        for (        GResource resource : Sequence.fromIterable(input)) {
          final SModel model=resource.status().getOutputModel();
          if (model == null) {
            modelsCount--;
            monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Generated model in null")));
            continue;
          }
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              tgEngine.schedule(model,resultQueue);
            }
          }
);
        }
        while (modelsCount-- > 0) {
          final TextGenResult tgr=resultQueue.poll(1,TimeUnit.MINUTES);
          Map<String,Object> texts=MapSequence.fromMap(new HashMap<String,Object>());
          Map<SNodeReference,String> rootNodeToFileName=MapSequence.fromMap(new HashMap<SNodeReference,String>());
          for (          TextUnit tu : tgr.getUnits()) {
            boolean errors=false;
            if (errors) {
              monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
              break;
            }
            String fname=tu.getFileName();
            MapSequence.fromMap(texts).put(fname,tu);
            SNodeReference sourceNode=TracingUtil.getInput(tu.getStartNode());
            if (sourceNode != null) {
              if ((MapSequence.fromMap(rootNodeToFileName).get(sourceNode) == null) || (fname.compareTo(MapSequence.fromMap(rootNodeToFileName).get(sourceNode)) < 0)) {
                MapSequence.fromMap(rootNodeToFileName).put(sourceNode,fname);
              }
            }
          }
          _output_21gswx_a0b=Sequence.fromIterable(_output_21gswx_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new FResource(JavaNameUtil.packageName(tgr.getModel()),texts,rootNodeToFileName,null,tgr.getModel()))));
        }
      }
 catch (      InterruptedException ex) {
        monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("TextGen interrupted")));
      }
 finally {
        tgEngine.shutdown();
      }
default :
    return new IResult.SUCCESS(_output_21gswx_a0b);
}
}
}
;
}
