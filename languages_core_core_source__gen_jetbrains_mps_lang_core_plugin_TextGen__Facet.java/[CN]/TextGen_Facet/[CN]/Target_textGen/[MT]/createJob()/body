{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_21gswx_a0a=null;
      final Iterable<GResource> input=(Iterable<GResource>)(Iterable)rawInput;
switch (0) {
case 0:
        if (Sequence.fromIterable(input).any(new IWhereFilter<GResource>(){
          public boolean accept(          GResource it){
            return !(it.status().isOk());
          }
        }
)) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Generation was not OK")));
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
      for (      GResource resource : Sequence.fromIterable(input)) {
        if (SModuleOperations.getOutputPathFor(resource.model()) == null) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no output location for " + SNodeOperations.getModelLongName(resource.model()))));
        }
      }
    Iterable<GResource> resourcesWithOutput=Sequence.fromIterable(input).where(new IWhereFilter<GResource>(){
      public boolean accept(      GResource it){
        return SModuleOperations.getOutputPathFor(it.model()) != null;
      }
    }
);
  final boolean _generateDebugInfo=vars(pa.global()).generateDebugInfo() == null || vars(pa.global()).generateDebugInfo();
final boolean _failIfNoTextgen=vars(pa.global()).failIfNoTextgen() != null && vars(pa.global()).failIfNoTextgen();
int MAX_ROOTS_COUNT=1000;
final List<GResource> currentInput=ListSequence.fromList(new ArrayList<GResource>());
final Wrappers._int currentRootsCount=new Wrappers._int(0);
monitor.currentProgress().beginWork("Writing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
final TextGeneratorEngine engine=new TextGeneratorEngine();
try {
IResource lastResource=Sequence.fromIterable(resourcesWithOutput).last();
for (final GResource currentResource : Sequence.fromIterable(resourcesWithOutput)) {
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
SModel outputModel=currentResource.status().getOutputModel();
if (outputModel == null) {
return;
}
for (SNode n : outputModel.getRootNodes()) {
currentRootsCount.value++;
}
}
}
);
ListSequence.fromList(currentInput).addElement(currentResource);
if (currentRootsCount.value < MAX_ROOTS_COUNT && currentResource != lastResource) {
continue;
}
final Map<IResource,List<IDelta>> deltas=Collections.synchronizedMap(new HashMap<IResource,List<IDelta>>());
for (GResource resource : ListSequence.fromList(currentInput)) {
Iterable<IDelta> retainedFilesDelta=RetainedUtil.retainedDeltas(Sequence.fromIterable(resource.retainedModels()).where(new IWhereFilter<SModel>(){
public boolean accept(SModel smd){
return GenerationFacade.canGenerate(smd);
}
}
),Target_make.vars(pa.global()).pathToFile());
MapSequence.fromMap(deltas).put(resource,ListSequence.fromListWithValues(new ArrayList<IDelta>(),retainedFilesDelta));
}
String nameOfStep=SModelStereotype.withoutStereotype(ListSequence.fromList(currentInput).first().status().getInputModel().getReference().getModelName());
monitor.currentProgress().advanceWork("Writing",ListSequence.fromList(currentInput).count() * 100,nameOfStep);
final List<IMessage> errors=ListSequence.fromList((ListSequence.fromList(new ArrayList<IMessage>()))).asSynchronized();
final List<FileProcessor> fileProcessors=ListSequence.fromList((ListSequence.fromList(new ArrayList<FileProcessor>()))).asSynchronized();
for (final GResource inputResource : ListSequence.fromList(currentInput)) {
final TextFacility tf=new TextFacility(engine,inputResource.status());
tf.failNoTextGen(_failIfNoTextgen).generateDebug(_generateDebugInfo).generateBaseLangDeps(true);
tf.produceTextModel();
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
String output=SModuleOperations.getOutputPathFor(inputResource.model());
final IFile javaOutputDir=TextGenUtil.getOutputDir(Target_make.vars(pa.global()).pathToFile().invoke(output),inputResource.model(),TextGenUtil.getOverriddenOutputDir(inputResource.model()));
final IFile cacheOutputDir=TextGenUtil.getOutputDir(Target_make.vars(pa.global()).pathToFile().invoke(FileGenerationUtil.getCachesPath(output)),inputResource.model(),null);
FilesDelta d1=new FilesDelta(javaOutputDir);
FilesDelta d2=new FilesDelta(cacheOutputDir);
StaleFilesCollector staleFileCollector=new StaleFilesCollector(javaOutputDir);
staleFileCollector.recordGeneratedChildren(cacheOutputDir);
FileProcessor fp=new FileProcessor();
ListSequence.fromList(fileProcessors).addElement(fp);
FileDeltaCollector javaSourcesLoc=new FileDeltaCollector(javaOutputDir,d1,fp);
FileDeltaCollector cachesLocation=new FileDeltaCollector(cacheOutputDir,d2,fp);
tf.serializeOutcome(javaSourcesLoc);
CacheGenLayout cgl=new CacheGenLayout();
cgl.register(cachesLocation,BLDependenciesCache.getInstance().getGenerator());
cgl.register(cachesLocation,GenerationDependenciesCache.getInstance().getGenerator());
if (_generateDebugInfo) {
cgl.register(javaSourcesLoc,TraceInfoCache.getInstance().getGenerator());
}
tf.serializeCaches(cgl);
staleFileCollector.updateDelta(d1);
new StaleFilesCollector(cacheOutputDir).updateDelta(d2);
ListSequence.fromList(errors).addSequence(ListSequence.fromList(tf.getErrors()));
ListSequence.fromList(MapSequence.fromMap(deltas).get(inputResource)).addElement(d1);
ListSequence.fromList(MapSequence.fromMap(deltas).get(inputResource)).addElement(d2);
fp.invalidateModel(inputResource.model());
}
}
);
tf.dispose();
}
if (ListSequence.fromList(errors).isNotEmpty()) {
{
Iterator<IMessage> error_it=ListSequence.fromList(errors).iterator();
IMessage error_var;
while (error_it.hasNext()) {
error_var=error_it.next();
monitor.reportFeedback(new IFeedback.MESSAGE(error_var));
}
}
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
if (!(TextGenUtil.runWriteTransaction(new Runnable(){
public void run(){
for (FileProcessor fp : ListSequence.fromList(fileProcessors)) {
fp.flushChanges();
}
}
}
))) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to save files")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
for (GResource resource : ListSequence.fromList(currentInput)) {
Iterable<IDelta> delta=MapSequence.fromMap(deltas).get(resource);
IResource result=new TResource(delta,resource.module(),resource.model());
_output_21gswx_a0a=Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(result)));
}
if (!(TextGenUtil.runWriteTransaction(new Runnable(){
public void run(){
ModelAccess.instance().requireWrite(new Runnable(){
public void run(){
if (!(Boolean.TRUE.equals(Generate_Facet.Target_configure.vars(pa.global()).saveTransient()))) {
  for (  GResource resource : ListSequence.fromList(currentInput)) {
    SModel outputMD=resource.status().getOutputModelDescriptor();
    if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
      ((TransientModelsModule)outputMD.getModule()).removeModel(outputMD);
    }
  }
}
CleanupManager.getInstance().cleanup();
}
}
);
}
}
))) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to remove transient models")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
currentRootsCount.value=0;
ListSequence.fromList(currentInput).clear();
}
}
 catch (Exception e) {
if (LOG.isEnabledFor(Level.ERROR)) {
LOG.error("Exception while textGen",e);
}
throw new RuntimeException(e);
}
 finally {
engine.shutdown();
monitor.currentProgress().finishWork("Writing");
}
default :
return new IResult.SUCCESS(_output_21gswx_a0a);
}
}
}
;
}
