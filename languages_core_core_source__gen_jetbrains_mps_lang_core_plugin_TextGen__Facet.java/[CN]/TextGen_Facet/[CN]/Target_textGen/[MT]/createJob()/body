{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_21gswx_a0a=null;
switch (0) {
case 0:
        monitor.currentProgress().beginWork("Writing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
      for (      IResource resource : Sequence.fromIterable(input)) {
        final GResource gres=(GResource)resource;
        monitor.currentProgress().advanceWork("Writing",50,gres.status().getInputModel().getSModelReference().getSModelFqName().getLongName());
        if (!(gres.status().isOk())) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Generation was not OK")));
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
        String output=gres.module().getOutputFor(gres.model());
        if (output == null) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no output location for " + gres.model().getLongName())));
          continue;
        }
        final IFile targetDir=(pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).pathToFile() != null ? pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).pathToFile().invoke(output) : FileSystem.getInstance().getFileByPath(output));
        final IFile cachesDir=FileGenerationUtil.getCachesDir(targetDir);
        final FilesDelta targetDelta=new FilesDelta(targetDir);
        Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>(){
          public boolean accept(          SModelDescriptor smd){
            return !(GeneratorManager.isDoNotGenerate(smd));
          }
        }
).visitAll(new IVisitor<SModelDescriptor>(){
          public void visit(          SModelDescriptor smd){
            targetDelta.kept(FileGenerationUtil.getDefaultOutputDir(smd,targetDir));
          }
        }
);
        final FilesDelta cachesDelta=new FilesDelta(cachesDir);
        Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>(){
          public boolean accept(          SModelDescriptor smd){
            return !(GeneratorManager.isDoNotGenerate(smd));
          }
        }
).visitAll(new IVisitor<SModelDescriptor>(){
          public void visit(          SModelDescriptor smd){
            cachesDelta.kept(FileGenerationUtil.getDefaultOutputDir(smd,cachesDir));
          }
        }
);
        final JavaStreamHandler javaStreamHandler=new JavaStreamHandler(gres.model(),targetDir,cachesDir);
        final Wrappers._boolean ok=new Wrappers._boolean();
        boolean generateDI=pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo() == null || pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo();
        final TextGenerator textgen=new TextGenerator(javaStreamHandler,BLDependenciesCache.getInstance().getGenerator(),(generateDI ? TraceInfoCache.getInstance().getGenerator() : null),GenerationDependenciesCache.getInstance().getGenerator());
        textgen.setFailIfNoTextgen(pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen() != null && pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen());
        textgen.setGenerateDebugInfo(generateDI);
        try {
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              ok.value=textgen.handleOutput(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Generate_Facet.Target_checkParameters.Variables.class).operationContext(),gres.status());
            }
          }
);
        }
  finally {
          javaStreamHandler.dispose();
        }
        final SModelDescriptor outputMD=gres.status().getOutputModelDescriptor();
        if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
          ThreadUtils.runInUIThreadAndWait(new Runnable(){
            public void run(){
              ModelAccess.instance().requireWrite(new Runnable(){
                public void run(){
                  TransientModelsModule.TransientSModelDescriptor tmd=(TransientModelsModule.TransientSModelDescriptor)outputMD;
                  ((TransientModelsModule)tmd.getModule()).removeModel(tmd);
                  CleanupManager.getInstance().cleanup();
                }
              }
);
            }
          }
);
        }
        if (!(ok.value)) {
          for (          String err : textgen.errors()) {
            monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(err)));
          }
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
        ThreadUtils.runInUIThreadAndWait(new Runnable(){
          public void run(){
            ModelAccess.instance().requireWrite(new Runnable(){
              public void run(){
                javaStreamHandler.flush();
              }
            }
);
          }
        }
);
        monitor.currentProgress().advanceWork("Writing",50);
        _output_21gswx_a0a=Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module(),Sequence.fromIterable(javaStreamHandler.delta()).concat(Sequence.fromIterable(Sequence.fromArray(new IDelta[]{targetDelta,cachesDelta})))))));
      }
    monitor.currentProgress().finishWork("Writing");
default :
  return new IResult.SUCCESS(_output_21gswx_a0a);
}
}
}
;
}
