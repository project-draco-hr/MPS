{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_21gswx_a0a=null;
switch (0) {
case 0:
        long startTime=System.currentTimeMillis();
      long prepareTime=0;
    final Wrappers._long textGenTime=new Wrappers._long(0);
  long textGenTimePlusReadActionTime=0;
final Wrappers._long cleanUpTime=new Wrappers._long(0);
long cleanUpTimePlusWriteTransactionTime=0;
final Wrappers._long flushTime=new Wrappers._long(0);
long flushTimePlusWriteTransactionTime=0;
monitor.currentProgress().beginWork("Writing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
for (IResource resource : Sequence.fromIterable(input)) {
final GResource gres=(GResource)resource;
monitor.currentProgress().advanceWork("Writing",100,gres.status().getInputModel().getSModelReference().getSModelFqName().getLongName());
if (!(gres.status().isOk())) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Generation was not OK")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
String output=gres.module().getOutputFor(gres.model());
if (output == null) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no output location for " + gres.model().getLongName())));
continue;
}
long currentTime=System.currentTimeMillis();
Iterable<IDelta> retainedFilesDelta=RetainedUtil.retainedFilesDelta(Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>(){
public boolean accept(SModelDescriptor smd){
return GenerationFacade.canGenerate(smd);
}
}
),gres.module(),pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Make_Facet.Target_make.Parameters.class).pathToFile());
Iterable<IDelta> retainedCachesDelta=RetainedUtil.retainedCachesDelta(Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>(){
public boolean accept(SModelDescriptor smd){
return GenerationFacade.canGenerate(smd);
}
}
),gres.module(),pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Make_Facet.Target_make.Parameters.class).pathToFile());
final JavaStreamHandler javaStreamHandler=new JavaStreamHandler(gres.model(),pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Make_Facet.Target_make.Parameters.class).pathToFile().invoke(output),pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Make_Facet.Target_make.Parameters.class).pathToFile().invoke(FileGenerationUtil.getCachesPath(output)));
final Wrappers._boolean ok=new Wrappers._boolean();
boolean generateDI=pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo() == null || pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo();
final TextGenerator textgen=new TextGenerator(javaStreamHandler,BLDependenciesCache.getInstance().getGenerator(),(generateDI ? TraceInfoCache.getInstance().getGenerator() : null),GenerationDependenciesCache.getInstance().getGenerator());
textgen.setFailIfNoTextgen(pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen() != null && pa.global().properties(Target_textGen.this.getName(),TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen());
textgen.setGenerateDebugInfo(generateDI);
prepareTime+=System.currentTimeMillis() - currentTime;
currentTime=System.currentTimeMillis();
try {
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
long innerTime=System.currentTimeMillis();
ok.value=textgen.handleOutput(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Generate_Facet.Target_checkParameters.Variables.class).operationContext(),gres.status());
textGenTime.value+=System.currentTimeMillis() - innerTime;
}
}
);
}
  finally {
javaStreamHandler.dispose();
}
textGenTimePlusReadActionTime+=System.currentTimeMillis() - currentTime;
if (!(ok.value)) {
for (IMessage err : textgen.errors()) {
monitor.reportFeedback(new IFeedback.MESSAGE(err));
}
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
currentTime=System.currentTimeMillis();
if (!(FileSystem.getInstance().runWriteTransaction(new Runnable(){
public void run(){
long innerTime=System.currentTimeMillis();
javaStreamHandler.flush();
flushTime.value+=System.currentTimeMillis() - innerTime;
}
}
))) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to save files")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
flushTimePlusWriteTransactionTime+=System.currentTimeMillis() - currentTime;
_output_21gswx_a0a=Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module(),Sequence.fromIterable(javaStreamHandler.delta()).concat(Sequence.fromIterable(retainedFilesDelta)).concat(Sequence.fromIterable(retainedCachesDelta)),gres.model()))));
}
long currentTime=System.currentTimeMillis();
if (!(FileSystem.getInstance().runWriteTransaction(new Runnable(){
public void run(){
ModelAccess.instance().requireWrite(new Runnable(){
public void run(){
long innerTime=System.currentTimeMillis();
if (!(Boolean.TRUE.equals(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.configure"),Generate_Facet.Target_configure.Variables.class).saveTransient()))) {
for (IResource resource : Sequence.fromIterable(input)) {
GResource gres=(GResource)resource;
SModelDescriptor outputMD=gres.status().getOutputModelDescriptor();
if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
((TransientModelsModule)outputMD.getModule()).removeModel(outputMD);
}
}
}
CleanupManager.getInstance().cleanup();
cleanUpTime.value+=System.currentTimeMillis() - innerTime;
}
}
);
}
}
))) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to remove transient models")));
return new IResult.FAILURE(_output_21gswx_a0a);
}
cleanUpTimePlusWriteTransactionTime+=System.currentTimeMillis() - currentTime;
monitor.currentProgress().finishWork("Writing");
long overallTime=System.currentTimeMillis() - startTime;
if (true) {
LOG.info("text gen overall time: " + overallTime);
LOG.info("text gen prepare time: " + prepareTime);
LOG.info("text gen generate time: " + textGenTime.value);
LOG.info("text gen generate time plus read action: " + textGenTimePlusReadActionTime);
LOG.info("text gen clean up time: " + cleanUpTime.value);
LOG.info("text gen clean up time plus write transaction: " + cleanUpTimePlusWriteTransactionTime);
LOG.info("text gen flush time: " + flushTime.value);
LOG.info("text gen flush time plus write transaction: " + flushTimePlusWriteTransactionTime);
}
default :
return new IResult.SUCCESS(_output_21gswx_a0a);
}
}
}
;
}
