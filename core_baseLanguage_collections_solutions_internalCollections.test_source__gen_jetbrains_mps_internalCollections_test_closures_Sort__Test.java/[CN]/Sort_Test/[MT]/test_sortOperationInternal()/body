{
  Iterable<String> input=Arrays.asList("Z","YY","XXX","WWWW");
  Iterable<String> test=Sequence.fromIterable(input).sort(new ISelector<String,Comparable<?>>(){
    public Comparable<?> select(    String it){
      return it.length();
    }
  }
,false);
  this.assertIterableEquals(Arrays.asList("WWWW","XXX","YY","Z"),test);
  this.assertIterableEquals(input,Sequence.fromIterable(test).sort(new ISelector<String,Comparable<?>>(){
    public Comparable<?> select(    String it){
      return it.length();
    }
  }
,true));
  _FunctionTypes._return_P1_E0<? extends Integer,? super String> cl=new _FunctionTypes._return_P1_E0<Integer,String>(){
    public Integer invoke(    String it){
      return it.length();
    }
  }
;
  this.assertIterableEquals(input,Sequence.fromIterable(test).sort(cl,true));
  this.assertIterableEquals(Arrays.asList("WWWW","XXX","YY","Z"),Sequence.fromIterable(input).sort(new Comparator<String>(){
    public int compare(    String a,    String b){
      return a.length() - b.length();
    }
  }
,false));
}
