{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.properties.structure.PropertiesDeclaration");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode pd=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.properties.structure.PropertiesDeclaration",null);
          if (!(StringUtils.isEmpty(pattern))) {
            String name=pattern;
            if (pattern.endsWith("=")) {
              name=name.substring(0,name.length() - 1);
            }
            SPropertyOperations.set(pd,"name",name);
          }
          return pd;
        }
        public String getMatchingText(        String pattern){
          if (!(StringUtils.isEmpty(pattern)) && !(pattern.equals("#"))) {
            String name=pattern;
            if (pattern.endsWith("=")) {
              name=name.substring(0,name.length() - 1);
            }
            return name + "=";
          }
          return "key=value";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
