{
  try {
    monitor.start("Overriding methods",10);
    List<SNode> nodes=FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",node,scope,monitor.subTask(2));
    ProgressMonitor sm=monitor.subTask(8);
    final SNode n=node;
    sm.start("",ListSequence.fromList(nodes).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),"overriddenMethod",false) == n;
      }
    }
).count());
    for (    SNode nodeUsage : ListSequence.fromList(nodes)) {
      if (SNodeOperations.isInstanceOf(nodeUsage,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration") && SLinkOperations.getTarget(SNodeOperations.cast(nodeUsage,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),"overriddenMethod",false) == node) {
        ListSequence.fromList(_results).addElement(nodeUsage);
        for (        SNode overriding : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.behavior.findUsages.OverridingMethods_Finder",nodeUsage,scope,sm.subTask(1)))) {
          ListSequence.fromList(_results).addElement(overriding);
        }
      }
    }
    sm.done();
  }
  finally {
    monitor.done();
  }
}
