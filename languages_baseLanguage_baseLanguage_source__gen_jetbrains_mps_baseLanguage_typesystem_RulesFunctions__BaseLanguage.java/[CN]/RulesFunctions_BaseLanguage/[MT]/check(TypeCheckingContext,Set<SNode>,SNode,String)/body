{
  List<SNode> throwTypes=ListSequence.fromListWithValues(new ArrayList<SNode>(),throwables);
  ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>(){
    public boolean accept(    SNode tt){
      return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt,new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a1a0a0a0a0a0a1a81_0().createNode(typeCheckingContext)) || TypeChecker.getInstance().getSubtypingManager().isSubtype(tt,new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a1a0a0a0a0a0a1a81().createNode(typeCheckingContext));
    }
  }
);
  if (ListSequence.fromList(throwTypes).isEmpty()) {
    return;
  }
  List<SNode> ancSLs=SNodeOperations.getAncestors(mainNode,"jetbrains.mps.baseLanguage.structure.StatementList",false);
  boolean useQuickfix=false;
  boolean supportsCheckedExceptions=true;
  for (  SNode anc : SNodeOperations.getAncestorsWhereConceptInList(mainNode,new String[]{"jetbrains.mps.baseLanguage.structure.TryStatement","jetbrains.mps.baseLanguage.structure.TryCatchStatement","jetbrains.mps.baseLanguage.structure.IStatementListContainer"},false)) {
    if (ListSequence.fromList(throwTypes).isEmpty()) {
      return;
    }
{
      SNode matchedNode_5ahx9e_b0g0s=anc;
{
        boolean matches_5ahx9e_a1a6a81=false;
{
          SNode matchingNode_5ahx9e_a1a6a81=anc;
          if (matchingNode_5ahx9e_a1a6a81 != null) {
            matches_5ahx9e_a1a6a81=SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_a1a6a81.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.TryStatement");
          }
        }
        if (matches_5ahx9e_a1a6a81) {
          if (ListSequence.fromList(ancSLs).contains(SLinkOperations.getTarget(matchedNode_5ahx9e_b0g0s,"body",true))) {
            for (            final SNode cc : SLinkOperations.getTargets(matchedNode_5ahx9e_b0g0s,"catchClause",true)) {
              ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>(){
                public boolean accept(                SNode tt){
                  return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt,SLinkOperations.getTarget(SLinkOperations.getTarget(cc,"throwable",true),"type",true));
                }
              }
);
            }
          }
        }
 else {
          boolean matches_5ahx9e_b1a6a81=false;
{
            SNode matchingNode_5ahx9e_b1a6a81=anc;
            if (matchingNode_5ahx9e_b1a6a81 != null) {
              matches_5ahx9e_b1a6a81=SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_b1a6a81.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.TryCatchStatement");
            }
          }
          if (matches_5ahx9e_b1a6a81) {
            if (ListSequence.fromList(ancSLs).contains(SLinkOperations.getTarget(matchedNode_5ahx9e_b0g0s,"body",true))) {
              for (              final SNode cc : SLinkOperations.getTargets(matchedNode_5ahx9e_b0g0s,"catchClause",true)) {
                ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode tt){
                    return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt,SLinkOperations.getTarget(SLinkOperations.getTarget(cc,"throwable",true),"type",true));
                  }
                }
);
              }
            }
          }
 else {
            if (ListSequence.fromList(ancSLs).contains(IMethodLike_Behavior.call_getBody_1239354440022(SNodeOperations.as(anc,"jetbrains.mps.baseLanguage.structure.IMethodLike")))) {
              SNode methodLike=SNodeOperations.cast(anc,"jetbrains.mps.baseLanguage.structure.IMethodLike");
              supportsCheckedExceptions=IMethodLike_Behavior.call_supportsCheckedExceptions_8510677279630867629(methodLike);
              if (IMethodLike_Behavior.call_implicitThrows_4989157187872658723(methodLike)) {
                ListSequence.fromList(throwTypes).clear();
              }
 else {
                for (                final SNode thr : IMethodLike_Behavior.call_getThrowableTypes_6204026822016975623(methodLike)) {
                  ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode tt){
                      return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt,thr);
                    }
                  }
);
                }
                useQuickfix=true;
              }
            }
            break;
          }
        }
      }
    }
    if (ListSequence.fromList(throwTypes).isEmpty()) {
      return;
    }
  }
  if (!(ListSequence.fromList(throwTypes).isEmpty())) {
    String errorString=message;
    for (    SNode exc : throwTypes) {
      errorString=errorString + " " + exc;
    }
    if (useQuickfix && supportsCheckedExceptions) {
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(mainNode,errorString,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4460871289557453850",null,errorTarget);
{
          BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.AddExceptionToMethodSignature_QuickFix",false);
          intentionProvider.putArgument("throwableType",ListSequence.fromList(throwTypes).first());
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
 else {
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(mainNode,errorString,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4460871289557914789",null,errorTarget);
      }
    }
  }
}
