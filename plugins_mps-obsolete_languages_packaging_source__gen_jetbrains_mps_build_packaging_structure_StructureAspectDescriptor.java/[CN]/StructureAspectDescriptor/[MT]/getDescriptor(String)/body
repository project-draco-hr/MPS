{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"configuration","title"},new boolean[]{true,false},true,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Antcall","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{"project","targetDeclaration"},new String[]{"delete"},new boolean[]{false},false,false,"antcall","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BaseDirPath","jetbrains.mps.build.packaging.structure.Path",false,new String[]{"jetbrains.mps.build.packaging.structure.Path"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Block","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.build.packaging.structure.IVariableHolder"},new String[]{},new String[]{"layout"},new String[]{"entry"},new boolean[]{true},false,false,"block","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BlockReference","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{"block"},new String[]{},new boolean[]{},false,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Branding","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"major","minor","eap"},new String[]{},new String[]{"splashScreen","aboutScreen","buildNumber","icon32","icon16","icon32opaque","welcomeScreen","updateWebsite","shortName","fullName","codename","help","textColor"},new boolean[]{false,false,false,false,false,false,false,false,false,false,false,false,false},false,false,"branding.jar","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"targetDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ComponentsList","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent","jetbrains.mps.build.packaging.structure.ITransparentProjectComponent"},new String[]{},new String[]{},new String[]{"entry"},new boolean[]{true},false,false,"list","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.CompositePathComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"pathComponent"},new boolean[]{true},false,false,"","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.CompositeString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{},new String[]{"left","right"},new boolean[]{false,false},false,false,"composite string","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Configuration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"fullName"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ConfigurationReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"configuration"},new String[]{},new boolean[]{},false,false,"","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Copy","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"excludes","includes"},new String[]{},new String[]{"sourcePath"},new boolean[]{false},false,false,"copy","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Delete","jetbrains.mps.build.packaging.structure.PostProcessingTask",false,new String[]{"jetbrains.mps.build.packaging.structure.PostProcessingTask"},new String[]{"path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Echo","jetbrains.mps.build.packaging.structure.File",false,new String[]{"jetbrains.mps.build.packaging.structure.File"},new String[]{"append"},new String[]{},new String[]{"message"},new boolean[]{false},false,false,"echo","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.File","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{},new String[]{"sourcePath"},new boolean[]{false},false,false,"file","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.FileExistsCondition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition"},new String[]{},new String[]{},new String[]{"pathToCheck"},new boolean[]{false},false,false,"exists","file exists condition","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Folder","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{},new String[]{"sourcePath"},new boolean[]{false},false,false,"folder","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Help","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"url","root","file"},new boolean[]{false,false,false},false,false,"","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ICompositeComponent",null,true,new String[]{"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent"},new String[]{"excludes","includes"},new String[]{},new String[]{"entry"},new boolean[]{true},false,false,"","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ICondition",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ILayoutComponent",null,true,new String[]{"jetbrains.mps.build.packaging.structure.IMacroHolder"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IMacroHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{"macro"},new boolean[]{true},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.INotBuildableComponent",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IPath",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IPlugin",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IStringExpression",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ITransparentProjectComponent",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IVariableHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.IdeaInitializerReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"ideaInitializer"},new String[]{},new boolean[]{},false,false,"","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Jar","jetbrains.mps.build.packaging.structure.Zip",false,new String[]{"jetbrains.mps.build.packaging.structure.Zip"},new String[]{},new String[]{},new String[]{"manifest"},new boolean[]{false},false,false,"jar","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Layout","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ILayoutComponent","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IVariableHolder","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.buildlanguage.structure.IAntScript"},new String[]{"compile","scriptsFolder","useTmpDir"},new String[]{},new String[]{"configuration","component","variable","builtInVariable","cycle","baseDirectory","deployDirectory","scriptsDirectory","propertyFile"},new boolean[]{true,true,true,true,true,false,false,false,false},false,false,"build script","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Library","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"path"},new String[]{},new String[]{"module"},new boolean[]{true},false,false,"library","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression"},new String[]{},new String[]{"configuration"},new String[]{},new boolean[]{},false,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Macro","jetbrains.mps.buildlanguage.structure.PropertyDeclaration",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyDeclaration","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.MacroReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"name","path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Manifest","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"manifestAttribute"},new boolean[]{true},false,false,"","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ManifestAttribute","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{true},false,false,"","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Module","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{"id","doNotJar","includeResources","excludeResources"},new String[]{"cycle"},new String[]{"pluginXml"},new boolean[]{false},false,false,"module","","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ModuleCycle","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"moduleReference","dependency"},new boolean[]{true,true},false,false,"","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.ModuleCycleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"cycle"},new String[]{},new boolean[]{},false,false,"","","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NewModuleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"module"},new String[]{},new boolean[]{},false,false,"","","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NonExistingPath","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IPath"},new String[]{"pathToCheck"},new String[]{},new String[]{"macro"},new boolean[]{false},false,false,"","","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.NotCondition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"!","not condition","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Pair","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"first","second"},new boolean[]{false,false},false,false,"","","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Path","jetbrains.mps.buildlanguage.structure.PropertyValueExpression",false,new String[]{"jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.build.packaging.structure.IPath"},new String[]{},new String[]{},new String[]{"macro","compositePathComponent"},new boolean[]{false,false},false,false,"","","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PathComponent","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"path"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PathHolder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"fullPath","moduleRelativePath"},new String[]{"macro","module"},new String[]{},new boolean[]{},false,false,"","","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Plugin","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IPlugin","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{},new String[]{},new String[]{"sourcePath","entry"},new boolean[]{false,true},false,false,"plugin","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PluginModule","jetbrains.mps.build.packaging.structure.Module",false,new String[]{"jetbrains.mps.build.packaging.structure.Module","jetbrains.mps.build.packaging.structure.ICompositeComponent","jetbrains.mps.build.packaging.structure.IPlugin"},new String[]{},new String[]{},new String[]{"pluginXmlReference","content"},new boolean[]{false,true},false,false,"plugin-module","","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PostProcessingTask","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertiesImport","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertyFileImport","jetbrains.mps.build.packaging.structure.PropertiesImport",false,new String[]{"jetbrains.mps.build.packaging.structure.PropertiesImport"},new String[]{},new String[]{},new String[]{"file"},new boolean[]{false},false,false,"file","","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.PropertyNodeImport","jetbrains.mps.build.packaging.structure.PropertiesImport",false,new String[]{"jetbrains.mps.build.packaging.structure.PropertiesImport"},new String[]{},new String[]{"propertyNode"},new String[]{},new boolean[]{},false,false,"node","","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Replace","jetbrains.mps.build.packaging.structure.File",false,new String[]{"jetbrains.mps.build.packaging.structure.File"},new String[]{},new String[]{},new String[]{"replacingPair"},new boolean[]{true},false,false,"replace","","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.SimpleString","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{"name"},new String[]{},new String[]{},new boolean[]{},false,false,"string","","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Space","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"space","","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.UpdateWebsite","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"checkUrl","updateUrl","updateChannel"},new boolean[]{false,false,false},false,false,"update website","","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Variable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"antName"},new String[]{},new String[]{},new boolean[]{},false,false,"var","","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.VariableReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{},false,false,"","","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.WelcomeScreen","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"caption","slogan"},new boolean[]{false,false},false,false,"welcome","","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.build.packaging.structure.Zip","jetbrains.mps.build.packaging.structure.AbstractProjectComponent",false,new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent"},new String[]{"filemode","dirmode"},new String[]{},new String[]{"delete"},new boolean[]{false},false,false,"zip","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
