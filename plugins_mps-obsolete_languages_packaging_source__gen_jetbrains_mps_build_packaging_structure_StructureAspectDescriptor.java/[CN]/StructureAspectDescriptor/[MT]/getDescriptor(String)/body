{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"configuration","title"},new boolean[]{true,false}).abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Antcall").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent").references("project","targetDeclaration").children(new String[]{"delete"},new boolean[]{false}).alias("antcall","").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.BaseDirPath").super_("jetbrains.mps.build.packaging.structure.Path").parents("jetbrains.mps.build.packaging.structure.Path").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Block").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.build.packaging.structure.IVariableHolder").references("layout").children(new String[]{"entry"},new boolean[]{true}).alias("block","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.BlockReference").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").references("block").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Branding").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").properties("major","minor","eap").children(new String[]{"splashScreen","aboutScreen","buildNumber","icon32","icon16","icon32opaque","welcomeScreen","updateWebsite","shortName","fullName","codename","help","textColor"},new boolean[]{false,false,false,false,false,false,false,false,false,false,false,false,false}).alias("branding.jar","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetDeclaration").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ComponentsList").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent","jetbrains.mps.build.packaging.structure.ITransparentProjectComponent").children(new String[]{"entry"},new boolean[]{true}).alias("list","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.CompositePathComponent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"pathComponent"},new boolean[]{true}).create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.CompositeString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression").children(new String[]{"left","right"},new boolean[]{false,false}).alias("composite string","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Configuration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("fullName").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ConfigurationReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("configuration").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Copy").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").properties("excludes","includes").children(new String[]{"sourcePath"},new boolean[]{false}).alias("copy","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Delete").super_("jetbrains.mps.build.packaging.structure.PostProcessingTask").parents("jetbrains.mps.build.packaging.structure.PostProcessingTask").properties("path").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Echo").super_("jetbrains.mps.build.packaging.structure.File").parents("jetbrains.mps.build.packaging.structure.File").properties("append").children(new String[]{"message"},new boolean[]{false}).alias("echo","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.File").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").children(new String[]{"sourcePath"},new boolean[]{false}).alias("file","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.FileExistsCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition").children(new String[]{"pathToCheck"},new boolean[]{false}).alias("exists","file exists condition").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Folder").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent").children(new String[]{"sourcePath"},new boolean[]{false}).alias("folder","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Help").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"url","root","file"},new boolean[]{false,false,false}).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ICompositeComponent").interface_().parents("jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent").properties("excludes","includes").children(new String[]{"entry"},new boolean[]{true}).create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ICondition").interface_().create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ILayoutComponent").interface_().parents("jetbrains.mps.build.packaging.structure.IMacroHolder").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IMacroHolder").interface_().children(new String[]{"macro"},new boolean[]{true}).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.INotBuildableComponent").interface_().create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IPath").interface_().create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IPlugin").interface_().create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IStringExpression").interface_().create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ITransparentProjectComponent").interface_().create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IVariableHolder").interface_().create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.IdeaInitializerReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("ideaInitializer").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Jar").super_("jetbrains.mps.build.packaging.structure.Zip").parents("jetbrains.mps.build.packaging.structure.Zip").children(new String[]{"manifest"},new boolean[]{false}).alias("jar","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Layout").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ILayoutComponent","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.build.packaging.structure.IVariableHolder","jetbrains.mps.build.packaging.structure.IMacroHolder","jetbrains.mps.buildlanguage.structure.IAntScript").properties("compile","scriptsFolder","useTmpDir").children(new String[]{"configuration","component","variable","builtInVariable","cycle","baseDirectory","deployDirectory","scriptsDirectory","propertyFile"},new boolean[]{true,true,true,true,true,false,false,false,false}).alias("build script","").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Library").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").properties("path").children(new String[]{"module"},new boolean[]{true}).alias("library","").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").references("configuration").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Macro").super_("jetbrains.mps.buildlanguage.structure.PropertyDeclaration").parents("jetbrains.mps.buildlanguage.structure.PropertyDeclaration","jetbrains.mps.lang.core.structure.INamedConcept").properties("path").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.MacroReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("name","path").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Manifest").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"manifestAttribute"},new boolean[]{true}).create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ManifestAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"value"},new boolean[]{true}).create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Module").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").properties("id","doNotJar","includeResources","excludeResources").references("cycle").children(new String[]{"pluginXml"},new boolean[]{false}).alias("module","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ModuleCycle").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"moduleReference","dependency"},new boolean[]{true,true}).create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.ModuleCycleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("cycle").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.NewModuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("module").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.NonExistingPath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IPath").properties("pathToCheck").children(new String[]{"macro"},new boolean[]{false}).create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.NotCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.ICondition").children(new String[]{"condition"},new boolean[]{false}).alias("!","not condition").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Pair").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"first","second"},new boolean[]{false,false}).create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Path").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression","jetbrains.mps.build.packaging.structure.IPath").children(new String[]{"macro","compositePathComponent"},new boolean[]{false,false}).create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PathComponent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PathHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("fullPath","moduleRelativePath").references("macro","module").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Plugin").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.IPlugin","jetbrains.mps.build.packaging.structure.ICompositeComponent").children(new String[]{"sourcePath","entry"},new boolean[]{false,true}).alias("plugin","").create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PluginModule").super_("jetbrains.mps.build.packaging.structure.Module").parents("jetbrains.mps.build.packaging.structure.Module","jetbrains.mps.build.packaging.structure.ICompositeComponent","jetbrains.mps.build.packaging.structure.IPlugin").children(new String[]{"pluginXmlReference","content"},new boolean[]{false,true}).alias("plugin-module","").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PostProcessingTask").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").abstract_().create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PropertiesImport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PropertyFileImport").super_("jetbrains.mps.build.packaging.structure.PropertiesImport").parents("jetbrains.mps.build.packaging.structure.PropertiesImport").children(new String[]{"file"},new boolean[]{false}).alias("file","").create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.PropertyNodeImport").super_("jetbrains.mps.build.packaging.structure.PropertiesImport").parents("jetbrains.mps.build.packaging.structure.PropertiesImport").references("propertyNode").alias("node","").create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Replace").super_("jetbrains.mps.build.packaging.structure.File").parents("jetbrains.mps.build.packaging.structure.File").children(new String[]{"replacingPair"},new boolean[]{true}).alias("replace","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.SimpleString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression").properties("name").alias("string","").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Space").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression").alias("space","").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.UpdateWebsite").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"checkUrl","updateUrl","updateChannel"},new boolean[]{false,false,false}).alias("update website","").create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Variable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("antName").alias("var","").create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.VariableReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.build.packaging.structure.IStringExpression").references("variable").create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.WelcomeScreen").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"caption","slogan"},new boolean[]{false,false}).alias("welcome","").create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.build.packaging.structure.Zip").super_("jetbrains.mps.build.packaging.structure.AbstractProjectComponent").parents("jetbrains.mps.build.packaging.structure.AbstractProjectComponent","jetbrains.mps.build.packaging.structure.ICompositeComponent").properties("filemode","dirmode").children(new String[]{"delete"},new boolean[]{false}).alias("zip","").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
