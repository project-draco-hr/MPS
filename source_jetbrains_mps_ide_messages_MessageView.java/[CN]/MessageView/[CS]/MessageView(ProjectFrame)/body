{
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myProjectFrame=ideMain;
  myComponent.setLayout(new BorderLayout());
  myComponent.add(new JScrollPane(myList),BorderLayout.CENTER);
  myList.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      openCurrentMessageNodeIfPossible();
    }
  }
,KeyStroke.getKeyStroke("F4"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      openCurrentMessageNodeIfPossible();
    }
  }
,KeyStroke.getKeyStroke("ENTER"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        openCurrentMessageNodeIfPossible();
      }
    }
    public void mousePressed(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
    public void mouseReleased(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
  }
);
  myList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      Message msg=(Message)value;
      setText(msg.getText());
switch (msg.getKind()) {
case INFORMATION:
        setIcon(INFORMATION_ICON);
      break;
case WARNING:
    setIcon(WARNING_ICON);
  break;
case ERROR:
setIcon(ERROR_ICON);
break;
}
return this;
}
}
);
}
