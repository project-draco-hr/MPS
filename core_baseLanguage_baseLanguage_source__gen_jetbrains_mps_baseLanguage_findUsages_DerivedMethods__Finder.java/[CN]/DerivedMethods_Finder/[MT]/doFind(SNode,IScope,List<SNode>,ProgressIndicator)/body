{
  SNode classifier=(SNode)SNodeOperations.getParent(node);
  final SNode instanceMethod=node;
  List<SNode> derivedClassifiers=ClassifierSuccessorsFinder.getDerivedClassifiers(SNodeOperations.getParent(node),scope);
  for (  SNode derivedClassifier : ListSequence.fromList(derivedClassifiers).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.as(it,"jetbrains.mps.baseLanguage.structure.Classifier");
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it != null;
    }
  }
)) {
    ListSequence.fromList(SLinkOperations.getTargets(derivedClassifier,"method",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(it,instanceMethod);
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        ListSequence.fromList(_results).addElement(it);
      }
    }
);
  }
}
