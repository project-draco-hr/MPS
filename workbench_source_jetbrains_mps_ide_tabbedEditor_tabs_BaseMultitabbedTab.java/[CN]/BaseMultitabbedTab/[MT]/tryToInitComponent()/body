{
  List<Pair<SNode,IOperationContext>> loadableNodes=tryToLoadNodes();
  if (loadableNodes.isEmpty())   return;
  myComponent=new JPanel(new BorderLayout());
  myInnerTabbedPane=new JTabbedPane();
  myInnerTabbedPane.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON3) {
        BaseGroup baseGroup=ActionUtils.getGroup(EditorTabActions_ActionGroup.ID);
        baseGroup.setPopup(false);
        DefaultActionGroup group=ActionUtils.groupFromActions(baseGroup);
        JPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.EDITOR_TAB,group).getComponent();
        popupMenu.show(myInnerTabbedPane,e.getX(),e.getY());
      }
    }
  }
);
  try {
    myInnerTabbedPane.setSelectedIndex(Math.max(myCurrentIndex,0));
  }
 catch (  IndexOutOfBoundsException ignored) {
  }
  for (  Pair<SNode,IOperationContext> loadableNodeAndContext : loadableNodes) {
    addInnerTab(loadableNodeAndContext.o1,loadableNodeAndContext.o2);
  }
  if (myInnerTabbedPane.getTabCount() != 0) {
    myInnerTabbedPane.setSelectedIndex(0);
  }
  myComponent.add(myInnerTabbedPane,BorderLayout.CENTER);
  if (canCreate()) {
    final JPanel panel=new JPanel(new BorderLayout());
    final JButton button=new JButton();
    AbstractAction action=new AbstractAction("Create new"){
      public void actionPerformed(      final ActionEvent e){
        List<SNode> concepts=ModelAccess.instance().runReadAction(new Computable<List<SNode>>(){
          public List<SNode> compute(){
            return getAvailableConcepts();
          }
        }
);
        if (concepts.size() == 0) {
          createLoadableNode(true,null);
        }
 else {
          showConceptList(new RelativePoint(button,new Point(0,button.getHeight())));
        }
      }
    }
;
    button.setAction(action);
    panel.add(button,BorderLayout.WEST);
    myComponent.add(panel,BorderLayout.NORTH);
  }
  getTabbedEditor().getTabbedPane().updateTabComponent(this);
}
