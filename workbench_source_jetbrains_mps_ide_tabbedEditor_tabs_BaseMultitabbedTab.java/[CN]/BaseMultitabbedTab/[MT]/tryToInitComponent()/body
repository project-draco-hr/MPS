{
  List<Pair<SNode,IOperationContext>> loadableNodes=tryToLoadNodes();
  if (loadableNodes.isEmpty())   return false;
  myComponent=new JPanel(new BorderLayout());
  myInnerTabbedPane=new JTabbedPane();
  myInnerTabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      myTabbedEditor.onSelectInnerTab();
    }
  }
);
  try {
    myInnerTabbedPane.setSelectedIndex(Math.max(myCurrentIndex,0));
  }
 catch (  IndexOutOfBoundsException e) {
  }
  for (  Pair<SNode,IOperationContext> loadableNodeAndContext : loadableNodes) {
    addInnerTab(loadableNodeAndContext.o1,loadableNodeAndContext.o2);
  }
  myComponent.add(myInnerTabbedPane,BorderLayout.CENTER);
  if (canCreate()) {
    JPanel panel=new JPanel(new BorderLayout());
    final List<SNode> concepts=getAvailableConcepts();
    panel.add(new JButton(new AbstractAction("Create new"){
      public void actionPerformed(      ActionEvent e){
        if (concepts.size() == 0) {
          createNewInnerTab(null);
        }
 else {
          final ListPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<SNode>("Choose concept",concepts){
            public Icon getIconFor(            SNode conceptDeclaration){
              return IconManager.getIconFor(conceptDeclaration);
            }
            @NotNull public String getTextFor(            SNode value){
              return value.getConceptShortName();
            }
            public PopupStep onChosen(            SNode selectedValue,            boolean finalChoice){
              createNewInnerTab(selectedValue);
              return FINAL_CHOICE;
            }
          }
);
        }
      }
    }
),BorderLayout.WEST);
    myComponent.add(panel,BorderLayout.NORTH);
  }
  return true;
}
