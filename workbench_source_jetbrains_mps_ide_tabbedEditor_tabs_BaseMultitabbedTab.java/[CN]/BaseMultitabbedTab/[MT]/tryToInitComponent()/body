{
  List<Pair<SNode,IOperationContext>> loadableNodes=tryToLoadNodes();
  if (loadableNodes.isEmpty())   return false;
  myComponent=new JPanel(new BorderLayout());
  myInnerTabbedPane=new JTabbedPane();
  myInnerTabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      myTabbedEditor.onSelectInnerTab();
    }
  }
);
  try {
    myInnerTabbedPane.setSelectedIndex(Math.max(myCurrentIndex,0));
  }
 catch (  IndexOutOfBoundsException e) {
  }
  for (  Pair<SNode,IOperationContext> loadableNodeAndContext : loadableNodes) {
    addInnerTab(loadableNodeAndContext.o1,loadableNodeAndContext.o2);
  }
  myComponent.add(myInnerTabbedPane,BorderLayout.CENTER);
  if (canCreate()) {
    final JPanel panel=new JPanel(new BorderLayout());
    final List<SNode> nodeList=getAvailableConcepts();
    final SNode[] concepts=new SNode[nodeList.size()];
    for (int i=0; i < nodeList.size(); i++) {
      concepts[i]=nodeList.get(i);
    }
    final JButton button=new JButton();
    AbstractAction action=new AbstractAction("Create new"){
      public void actionPerformed(      ActionEvent e){
        if (nodeList.size() == 0) {
          createNewInnerTab(null);
        }
 else {
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              final ListPopup popup;
              popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<SNode>("Choose concept",concepts){
                public Icon getIconFor(                final SNode concept){
                  final Icon[] result=new Icon[1];
                  ModelAccess.instance().runReadAction(new Runnable(){
                    public void run(){
                      String name=NameUtil.longNameFromNamespaceAndShortName(concept.getModel().getSModelFqName().getLongName(),concept.getName());
                      result[0]=IconManager.getIconForConceptFQName(name);
                    }
                  }
);
                  return result[0];
                }
                @NotNull public String getTextFor(                final SNode concept){
                  final String[] result=new String[]{null};
                  ModelAccess.instance().runReadAction(new Runnable(){
                    public void run(){
                      result[0]=concept.getName();
                    }
                  }
);
                  return result[0];
                }
                public PopupStep onChosen(                SNode selectedValue,                boolean finalChoice){
                  createNewInnerTab(selectedValue);
                  return FINAL_CHOICE;
                }
              }
);
              popup.show(panel);
            }
          }
);
        }
      }
    }
;
    button.setAction(action);
    panel.add(button,BorderLayout.WEST);
    myComponent.add(panel,BorderLayout.NORTH);
  }
  return true;
}
