{
  OverridingMethodsFinder finder=new OverridingMethodsFinder(classifier);
  for (  SNode overridingMethod : SetSequence.fromSet(finder.getOverridingMethods())) {
    Set<Tuples._2<SNode,SNode>> overridenMethods=finder.getOverridenMethods(overridingMethod);
    for (Iterator<Tuples._2<SNode,SNode>> it=SetSequence.fromSet(overridenMethods).iterator(); it.hasNext(); ) {
      SNode overridenMethod=it.next()._0();
      SNode returnType=SLinkOperations.getTarget(overridenMethod,"returnType",true);
      SNode ancestor=SNodeOperations.cast(SNodeOperations.getParent(overridenMethod),"jetbrains.mps.baseLanguage.structure.Classifier");
      SNode descendant=SNodeOperations.cast(SNodeOperations.getParent(overridingMethod),"jetbrains.mps.baseLanguage.structure.Classifier");
      SNode resolvedReturnType=Classifier_Behavior.call_getWithResolvedTypevars_3305065273710852527(descendant,returnType,ancestor);
      if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(overridingMethod,"returnType",true),resolvedReturnType))) {
{
          BaseQuickFixProvider intentionProvider=null;
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(overridingMethod,"method's return type is incompatible with overridden method ","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2792291462223216211",intentionProvider,errorTarget);
        }
        break;
      }
    }
  }
}
