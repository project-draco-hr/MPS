{
  return new Mapper<SNode,NodeDecoratorView>(getSNode(),new NodeDecoratorView()){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      DiagramCell diagramCell=getDiagramCell();
      if (diagramCell == null) {
        return;
      }
      Mapper<SNode,DiagramNodeView> blockMapper=getBlockMapper();
      if (blockMapper == null) {
        return;
      }
      configuration.add(Synchronizers.forProperty(myErrorItem,getTarget().hasError));
      configuration.add(Synchronizers.forProperty(blockMapper.getTarget().focused(),getTarget().isSelected));
      ReadableProperty<Rectangle> bounds=blockMapper.getTarget().rect.bounds();
      configuration.add(Synchronizers.forProperty(bounds,getTarget().bounds));
      configuration.add(Synchronizers.forObservableRole(this,myInputPorts,getTarget().inputPortDecotatorView.children(),new MapperFactory<SNode,PortDecoratorView>(){
        public Mapper<? extends SNode,? extends PortDecoratorView> createMapper(        final SNode id){
          return new Mapper<SNode,PortDecoratorView>(id,new PortDecoratorView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              DiagramCell diagramCell=getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              Mapper<? super SNode,?> blockDescendantMapper=getDiagramCell().getRootMapper().getDescendantMapper(getSNode());
              if (blockDescendantMapper == null) {
                return;
              }
              Set<Mapper<? super SNode,?>> mappers=blockDescendantMapper.getMappingContext().getMappers(blockDescendantMapper,id);
              if (mappers.isEmpty()) {
                return;
              }
              final Mapper<SNode,View> descendantMapper=((Mapper<SNode,View>)mappers.iterator().next());
              configuration.add(Synchronizers.forProperty(((View)descendantMapper.getTarget()).focused(),getTarget().isSelected));
              ReadableProperty<Rectangle> bounds=((View)descendantMapper.getTarget()).bounds();
              configuration.add(Synchronizers.forProperty(bounds,getTarget().bounds));
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,myOutputPorts,getTarget().outputPortDecotatorView.children(),new MapperFactory<SNode,PortDecoratorView>(){
        public Mapper<? extends SNode,? extends PortDecoratorView> createMapper(        final SNode id){
          return new Mapper<SNode,PortDecoratorView>(id,new PortDecoratorView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              DiagramCell diagramCell=getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              Mapper<? super SNode,?> blockDescendantMapper=getDiagramCell().getRootMapper().getDescendantMapper(getSNode());
              if (blockDescendantMapper == null) {
                return;
              }
              Set<Mapper<? super SNode,?>> mappers=blockDescendantMapper.getMappingContext().getMappers(blockDescendantMapper,id);
              if (mappers.isEmpty()) {
                return;
              }
              final Mapper<SNode,View> descendantMapper=((Mapper<SNode,View>)mappers.iterator().next());
              configuration.add(Synchronizers.forProperty(((View)descendantMapper.getTarget()).focused(),getTarget().isSelected));
              ReadableProperty<Rectangle> bounds=((View)descendantMapper.getTarget()).bounds();
              configuration.add(Synchronizers.forProperty(bounds,getTarget().bounds));
            }
          }
;
        }
      }
));
    }
  }
;
}
