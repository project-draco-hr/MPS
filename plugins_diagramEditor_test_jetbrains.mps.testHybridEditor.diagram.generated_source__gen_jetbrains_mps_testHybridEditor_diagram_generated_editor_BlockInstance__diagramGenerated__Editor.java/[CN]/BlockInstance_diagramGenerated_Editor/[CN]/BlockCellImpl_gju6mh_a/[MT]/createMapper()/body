{
  return new Mapper<SNode,DiagramNodeView>(getSNode(),createDiagramNodeView()){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forObservableRole(this,myInputPorts,getTarget().inputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode id){
          return new Mapper<SNode,RectView>(id,createPortView(id)){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              getTarget().background().set(Color.LIGHT_GRAY);
              getTarget().dimension().set(new Vector(10,10));
              getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
              configuration.add(Synchronizers.forProperty(getTarget().focused(),new Runnable(){
                public void run(){
                  if (getTarget().focused().get()) {
                    SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
                  }
                }
              }
));
            }
          }
;
        }
        private RectView createPortView(        SNode id){
          RectView view=new RectView();
          view.prop(JetpadUtils.SOURCE).set(getSNode());
          view.prop(JetpadUtils.ID).set(id);
          view.focusable().set(true);
          return view;
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,myOutputPorts,getTarget().outputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode id){
          return new Mapper<SNode,RectView>(id,createPortView(id)){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              getTarget().background().set(Color.GRAY);
              getTarget().dimension().set(new Vector(10,10));
              getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
                @Override public void handle(                View view,                MouseEvent e){
                  DiagramCell diagramCell=getDiagramCell();
                  if (diagramCell == null) {
                    return;
                  }
                  if (!(diagramCell.hasConnectionDragFeedback())) {
                    diagramCell.showConnectionDragFeedback(getTarget());
                  }
                  diagramCell.updateConnectionDragFeedback(e.location());
                }
              }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
                @Override public void handle(                View view,                MouseEvent e){
                  DiagramCell diagramCell=getDiagramCell();
                  if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                    return;
                  }
                  diagramCell.updateConnectionDragFeedback(e.location());
                  diagramCell.createNewDiagramElement(e.location().x,e.location().y);
                }
              }
).build());
              getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
              configuration.add(Synchronizers.forProperty(getTarget().focused(),new Runnable(){
                public void run(){
                  if (getTarget().focused().get()) {
                    SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
                  }
                }
              }
));
            }
          }
;
        }
        private RectView createPortView(        SNode id){
          RectView view=new RectView();
          view.prop(JetpadUtils.SOURCE).set(getSNode());
          view.prop(JetpadUtils.ID).set(id);
          view.focusable().set(true);
          return view;
        }
      }
));
      configuration.add(Synchronizers.forConstantRole(this,getSource().getNodeId().toString(),getTarget().contentView.children(),new MapperFactory<String,PolygonContentView>(){
        public Mapper<? extends String,? extends PolygonContentView> createMapper(        String block){
          return new Mapper<String,PolygonContentView>(block,new PolygonContentView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              myPropertyCell_gju6mh_a0a.registerSynchronizers(configuration,getTarget().text());
              configuration.add(Synchronizers.forProperty(myProperty_gju6mh_a1a,getTarget().metaText()));
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forProperty(getTarget().bounds(),new WritableProperty<Rectangle>(){
        public void set(        Rectangle rect){
          DiagramCell diagramCell=getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          setX(rect.origin.x + diagramCell.getX());
          setY(rect.origin.y + diagramCell.getY());
          setWidth(rect.dimension.x);
          setHeight(rect.dimension.y);
        }
      }
));
      configuration.add(Synchronizers.forProperty(Properties.ifProp(getTarget().focused(),Properties.constant(Color.BLACK),Properties.constant(Color.TRANSPARENT)),getTarget().rect.border()));
      configuration.add(Synchronizers.forProperty(getTarget().focused(),new Runnable(){
        public void run(){
          if (getTarget().focused().get()) {
            SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
          }
        }
      }
));
    }
  }
;
}
