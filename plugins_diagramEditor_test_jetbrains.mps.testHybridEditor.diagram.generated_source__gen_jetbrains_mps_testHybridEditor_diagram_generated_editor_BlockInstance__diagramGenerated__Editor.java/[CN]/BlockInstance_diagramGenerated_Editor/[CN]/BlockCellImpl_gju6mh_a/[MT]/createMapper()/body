{
  return new Mapper<SNode,DiagramNodeView>(getSNode(),createDiagramNodeView()){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forObservableRole(this,myInputPorts,getTarget().inputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode id){
          return new Mapper<SNode,RectView>(id,new RectView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              getTarget().background().set(Color.LIGHT_GRAY);
              getTarget().dimension().set(new Vector(10,10));
              getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
              getTarget().prop(JetpadUtils.SOURCE).set(getSNode());
              getTarget().prop(JetpadUtils.ID).set(getSource());
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,myOutputPorts,getTarget().outputs.children(),new MapperFactory<SNode,View>(){
        public Mapper<? extends SNode,? extends View> createMapper(        SNode id){
          return new Mapper<SNode,RectView>(id,new RectView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              getTarget().background().set(Color.GRAY);
              getTarget().dimension().set(new Vector(10,10));
              getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
                @Override public void handle(                View view,                MouseEvent e){
                  DiagramCell diagramCell=getDiagramCell();
                  if (diagramCell == null) {
                    return;
                  }
                  if (!(diagramCell.hasConnectionDragFeedback())) {
                    diagramCell.showConnectionDragFeedback(getTarget());
                  }
                  diagramCell.updateConnectionDragFeedback(e.location());
                }
              }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
                @Override public void handle(                View view,                MouseEvent e){
                  DiagramCell diagramCell=getDiagramCell();
                  if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                    return;
                  }
                  diagramCell.updateConnectionDragFeedback(e.location());
                  diagramCell.createNewDiagramElement(e.location().x,e.location().y);
                }
              }
).build());
              getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
              getTarget().prop(JetpadUtils.SOURCE).set(getSNode());
              getTarget().prop(JetpadUtils.ID).set(getSource());
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forConstantRole(this,getSource().getNodeId().toString(),getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
        public Mapper<? extends String,? extends BlockContentView> createMapper(        String block){
          return new Mapper<String,BlockContentView>(block,new BlockContentView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              myPropertyCell_gju6mh_a0a.registerSynchronizers(configuration,getTarget().text());
              configuration.add(Synchronizers.forProperty(myProperty_gju6mh_a1a,getTarget().isClicked));
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forConstantRole(this,new Object(),getDiagramCell().getRootMapper().getTarget().decorationRoot().children(),new MapperFactory<Object,View>(){
        public Mapper<? extends Object,? extends View> createMapper(        Object source){
          final ReadableProperty<Rectangle> bounds=getTarget().rect.bounds();
          return new Mapper<Object,View>(source,new GroupView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              configuration.add(Synchronizers.forObservableRole(this,myErrorItem,getTarget().children(),new MapperFactory<Boolean,View>(){
                public Mapper<? extends Boolean,? extends View> createMapper(                Boolean source){
                  PolyLineView errorView=createErrorView(bounds.get());
                  return new Mapper<Boolean,PolyLineView>(source,errorView){
                    @Override protected void registerSynchronizers(                    Mapper.SynchronizersConfiguration configuration){
                      super.registerSynchronizers(configuration);
                      configuration.add(Synchronizers.forProperty(bounds,new WritableProperty<Rectangle>(){
                        public void set(                        Rectangle bounds){
                          getTarget().points.clear();
                          getTarget().points.addAll(ListSequence.fromListAndArray(new ArrayList<Vector>(),new Vector(bounds.origin.x,bounds.origin.y),new Vector(bounds.origin.x + bounds.dimension.x,bounds.origin.y),new Vector(bounds.origin.x + bounds.dimension.x,bounds.origin.y + bounds.dimension.y),new Vector(bounds.origin.x,bounds.origin.y + bounds.dimension.y),new Vector(bounds.origin.x,bounds.origin.y)));
                          getTarget().invalidate();
                        }
                      }
));
                    }
                  }
;
                }
              }
));
            }
          }
;
        }
      }
));
      configuration.add(Synchronizers.forProperty(getTarget().bounds(),new WritableProperty<Rectangle>(){
        public void set(        Rectangle rect){
          myXValueProperty=rect.origin.x;
          myYValueProperty=rect.origin.y;
          myWidthValueProperty=rect.dimension.x;
          myHeightValueProperty=rect.dimension.y;
        }
      }
));
      configuration.add(Synchronizers.forProperty(Properties.ifProp(getTarget().focused(),Properties.constant(Color.BLACK),Properties.constant(Color.TRANSPARENT)),getTarget().rect.border()));
      configuration.add(Synchronizers.forProperty(getTarget().focused(),new Runnable(){
        public void run(){
          if (getTarget().focused().get()) {
            SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
          }
        }
      }
));
    }
  }
;
}
