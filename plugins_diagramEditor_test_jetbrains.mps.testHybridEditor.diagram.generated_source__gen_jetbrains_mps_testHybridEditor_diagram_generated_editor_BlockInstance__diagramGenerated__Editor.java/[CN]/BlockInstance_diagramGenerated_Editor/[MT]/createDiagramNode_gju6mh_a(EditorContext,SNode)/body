{
  final PropertyMapperCell parameterPropertyCell_gju6mh_a0a=new PropertyMapperCell<String>(editorContext,node){
    protected String getModelPropertyValueImpl(){
      return SPropertyOperations.getString(node,"name");
    }
    protected void setModelPropertyValueImpl(    String value){
      SPropertyOperations.set(node,"name",value);
    }
  }
;
  final PropertyMapperCell parameterPropertyCell_gju6mh_a1a=new PropertyMapperCell<Boolean>(editorContext,node){
    protected Boolean getModelPropertyValueImpl(){
      return SPropertyOperations.getBoolean(node,"myBooleanProperty");
    }
    protected void setModelPropertyValueImpl(    Boolean value){
      SPropertyOperations.set(node,"myBooleanProperty","" + (value));
    }
  }
;
  BlockCell editorCell=new BlockCell(editorContext,node,JetpadUtils.modelProperty(new Computable<Integer>(){
    public Integer compute(){
      return SPropertyOperations.getInteger(node,"x");
    }
  }
),JetpadUtils.modelProperty(new Computable<Integer>(){
    public Integer compute(){
      return SPropertyOperations.getInteger(node,"y");
    }
  }
)){
    public Mapper<SNode,DiagramNodeView> getMapper(){
      final Mapper<SNode,DiagramNodeView> mapper=new Mapper<SNode,DiagramNodeView>(node,createDiagramNodeView_gju6mh_a(editorContext,node,this)){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forSimpleRole(this,ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"inMetaPorts",true)),getTarget().inputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            final SNode id){
              Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(id,new RectView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  getTarget().background().set(Color.LIGHT_GRAY);
                  getTarget().dimension().set(new Vector(10,10));
                  getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                  getTarget().prop(JetpadUtils.SOURCE).set(node);
                  getTarget().prop(JetpadUtils.ID).set(id);
                }
              }
;
              return mapper;
            }
          }
));
          configuration.add(Synchronizers.forSimpleRole(this,ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"outMetaPorts",true)),getTarget().outputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            final SNode id){
              Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(id,new RectView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  getTarget().background().set(Color.GRAY);
                  getTarget().dimension().set(new Vector(10,10));
                  getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
                    @Override public void handle(                    View view,                    MouseEvent e){
                      DiagramCell diagramCell=getDiagramCell();
                      if (diagramCell == null) {
                        return;
                      }
                      if (!(diagramCell.hasConnectionDragFeedback())) {
                        diagramCell.showConnectionDragFeedback(getTarget());
                      }
                      diagramCell.updateConnectionDragFeedback(e.location());
                    }
                  }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
                    @Override public void handle(                    View view,                    MouseEvent e){
                      DiagramCell diagramCell=getDiagramCell();
                      if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                        return;
                      }
                      diagramCell.updateConnectionDragFeedback(e.location());
                      diagramCell.createNewDiagramElement(e.location().x,e.location().y);
                    }
                  }
).build());
                  getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                  getTarget().prop(JetpadUtils.SOURCE).set(node);
                  getTarget().prop(JetpadUtils.ID).set(id);
                }
              }
;
              return mapper;
            }
          }
));
          configuration.add(Synchronizers.forConstantRole(this,getSource().getNodeId().toString(),getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
            public Mapper<? extends String,? extends BlockContentView> createMapper(            String block){
              return new Mapper<String,BlockContentView>(block,new BlockContentView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  parameterPropertyCell_gju6mh_a0a.registerSynchronizers(configuration,getTarget().text());
                  parameterPropertyCell_gju6mh_a1a.registerSynchronizers(configuration,getTarget().isClicked);
                }
              }
;
            }
          }
));
        }
      }
;
      return mapper;
    }
  }
;
  editorCell.addEditorCell(parameterPropertyCell_gju6mh_a0a);
  editorCell.addEditorCell(parameterPropertyCell_gju6mh_a1a);
  parameterPropertyCell_gju6mh_a0a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_gju6mh_a0a,new Pair<SNodeReference,String>(new SNodePointer(node),"name"));
  parameterPropertyCell_gju6mh_a1a.getEditor().addCellDependentOnNodeProperty(parameterPropertyCell_gju6mh_a1a,new Pair<SNodeReference,String>(new SNodePointer(node),"myBooleanProperty"));
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"x"));
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"y"));
  editorCell.setCellId("DiagramNode_gju6mh_a");
  editorCell.setBig(true);
  return editorCell;
}
