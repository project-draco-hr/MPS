{
  final BlockInstanceView view=new BlockInstanceView();
  GenericViewCell editorCell=GenericViewCell.createViewCell(editorContext,node,view);
  createDiagramNode_gju6mh_a0(editorCell,editorContext,node,view.x);
  createDiagramNode_gju6mh_b0(editorCell,editorContext,node,view.y);
  createDiagramNode_gju6mh_c0(editorCell,editorContext,node,view.text);
  view.inputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"inMetaPorts",true)).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
).toListSequence());
  view.outputPortNames.addAll(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"outMetaPorts",true)).select(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(it,"name");
    }
  }
).toListSequence());
  ModelAccess.instance().runCommandInEDT(new Runnable(){
    public void run(){
      new Mapper<View,SNode>(view,node){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          configuration.add(Synchronizers.forProperty(view.x,new Runnable(){
            public void run(){
              ModelAccess.instance().executeCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"x","" + (view.x.get()));
                }
              }
,editorContext.getOperationContext().getProject());
            }
          }
));
          configuration.add(Synchronizers.forProperty(view.y,new Runnable(){
            public void run(){
              ModelAccess.instance().executeCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"y","" + (view.y.get()));
                }
              }
,editorContext.getOperationContext().getProject());
            }
          }
));
          configuration.add(Synchronizers.forProperty(view.text,new Runnable(){
            public void run(){
              ModelAccess.instance().executeCommand(new Runnable(){
                public void run(){
                  SPropertyOperations.set(node,"name",view.text.get());
                }
              }
,editorContext.getOperationContext().getProject());
            }
          }
));
        }
      }
.attachRoot();
    }
  }
,editorContext.getOperationContext().getProject());
  view.visible().set(true);
  editorCell.setCellId("DiagramNode_gju6mh_a");
  editorCell.setBig(true);
  return editorCell;
}
