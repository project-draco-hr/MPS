{
  BlockCell editorCell=new BlockCell(editorContext,node){
    public Mapper<SNode,DiagramNodeView> getMapper(){
      final Mapper<SNode,DiagramNodeView> mapper=new Mapper<SNode,DiagramNodeView>(node,new BlockView()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          configuration.add(Synchronizers.forSimpleRole(this,ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"inMetaPorts",true)),getTarget().inputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            final SNode id){
              Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(id,new RectView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  getTarget().background().set(Color.LIGHT_GRAY);
                  getTarget().dimension().set(new Vector(10,10));
                  getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                  getTarget().prop(JetpadUtils.SOURCE).set(node);
                  getTarget().prop(JetpadUtils.ID).set(id);
                }
              }
;
              return mapper;
            }
          }
));
          configuration.add(Synchronizers.forSimpleRole(this,ListSequence.fromIterable(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"metaBlock",false),"outMetaPorts",true)),getTarget().outputs.children(),new MapperFactory<SNode,View>(){
            public Mapper<? extends SNode,? extends View> createMapper(            final SNode id){
              Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(id,new RectView()){
                @Override protected void registerSynchronizers(                Mapper.SynchronizersConfiguration configuration){
                  super.registerSynchronizers(configuration);
                  getTarget().background().set(Color.GRAY);
                  getTarget().dimension().set(new Vector(10,10));
                  getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
                    @Override public void handle(                    View view,                    MouseEvent e){
                      DiagramCell diagramCell=getDiagramCell();
                      if (diagramCell == null) {
                        return;
                      }
                      if (!(diagramCell.hasConnectionDragFeedback())) {
                        diagramCell.showConnectionDragFeedback(getTarget());
                      }
                      diagramCell.updateConnectionDragFeedback(e.location());
                    }
                  }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
                    @Override public void handle(                    View view,                    MouseEvent e){
                      DiagramCell diagramCell=getDiagramCell();
                      if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                        return;
                      }
                      diagramCell.updateConnectionDragFeedback(e.location());
                      diagramCell.createNewDiagramElement(e.location().x,e.location().y);
                    }
                  }
).build());
                  getTarget().prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
                  getTarget().prop(JetpadUtils.SOURCE).set(node);
                  getTarget().prop(JetpadUtils.ID).set(id);
                }
              }
;
              return mapper;
            }
          }
));
{
            myXProperty=JetpadUtils.modelProperty(new Computable<Integer>(){
              public Integer compute(){
                return SPropertyOperations.getInteger(node,"x");
              }
            }
);
            myYProperty=JetpadUtils.modelProperty(new Computable<Integer>(){
              public Integer compute(){
                return SPropertyOperations.getInteger(node,"y");
              }
            }
);
            final DiagramNodeView view=getTarget();
            getTarget().moveTo(new Vector(myXProperty.get(),myYProperty.get()));
            view.rect.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler(){
              public void move(              final Vector delta){
                String groupId=ModelAccess.instance().runReadAction(new Computable<String>(){
                  public String compute(){
                    return getCellId() + "_" + getSNode().getNodeId().toString();
                  }
                }
);
                getContext().flushEvents();
                ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                  public void run(){
                    SPropertyOperations.set(((SNode)getSource()),"x","" + (SPropertyOperations.getInteger(((SNode)getSource()),"x") + delta.x));
                  }
                }
,null,groupId,false,editorContext.getOperationContext().getProject());
                ModelAccess.instance().runWriteActionInCommand(new Runnable(){
                  public void run(){
                    SPropertyOperations.set(((SNode)getSource()),"y","" + (SPropertyOperations.getInteger(((SNode)getSource()),"y") + delta.y));
                  }
                }
,null,groupId,false,editorContext.getOperationContext().getProject());
                getTarget().moveTo(new Vector(myXProperty.get(),myYProperty.get()));
                getTarget().invalidate();
              }
            }
);
          }
          registerAditionalSynchronizers(configuration,this);
          getTarget().contentView.prop(JetpadUtils.CONNECTABLE).set(Boolean.TRUE);
          getTarget().rect.prop(JetpadUtils.SOURCE).set(getSource());
          BlockInstance_diagramGenerated_Editor.setDiagramNodeView(getTarget());
        }
      }
;
      return mapper;
    }
    public void registerAditionalSynchronizers(    Mapper.SynchronizersConfiguration configuration,    final Mapper<SNode,DiagramNodeView> mapper){
      configuration.add(Synchronizers.forConstantRole(mapper,mapper.getSource().getNodeId().toString(),mapper.getTarget().contentView.children(),new MapperFactory<String,BlockContentView>(){
        public Mapper<? extends String,? extends BlockContentView> createMapper(        String block){
          return new Mapper<String,BlockContentView>(block,new BlockContentView()){
            @Override protected void registerSynchronizers(            Mapper.SynchronizersConfiguration configuration){
              super.registerSynchronizers(configuration);
              final PropertyMapperCell cell_gju6mh_a0a=new PropertyMapperCell(editorContext,node,getTarget().text(),JetpadUtils.modelProperty(new Computable<String>(){
                public String compute(){
                  return SPropertyOperations.getString(node,"name");
                }
              }
),"name");
              addEditorCell(cell_gju6mh_a0a);
              configuration.add(Synchronizers.forProperty(JetpadUtils.modelProperty(new Computable<String>(){
                public String compute(){
                  return SPropertyOperations.getString(node,"name");
                }
              }
),getTarget().text()));
              configuration.add(Synchronizers.forProperty(getTarget().text(),new Runnable(){
                public void run(){
                  cell_gju6mh_a0a.updateModel();
                }
              }
));
              final PropertyMapperCell cell_gju6mh_a1a=new PropertyMapperCell(editorContext,node,getTarget().isClicked,JetpadUtils.modelProperty(new Computable<Boolean>(){
                public Boolean compute(){
                  return SPropertyOperations.getBoolean(node,"myBooleanProperty");
                }
              }
),"myBooleanProperty");
              addEditorCell(cell_gju6mh_a1a);
              configuration.add(Synchronizers.forProperty(JetpadUtils.modelProperty(new Computable<Boolean>(){
                public Boolean compute(){
                  return SPropertyOperations.getBoolean(node,"myBooleanProperty");
                }
              }
),getTarget().isClicked));
              configuration.add(Synchronizers.forProperty(getTarget().isClicked,new Runnable(){
                public void run(){
                  cell_gju6mh_a1a.updateModel();
                }
              }
));
            }
          }
;
        }
      }
));
    }
  }
;
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"x"));
  editorCell.getEditor().addCellDependentOnNodeProperty(editorCell,new Pair<SNodeReference,String>(new SNodePointer(node),"y"));
  editorCell.setCellId("DiagramNode_gju6mh_a");
  editorCell.setBig(true);
  return editorCell;
}
