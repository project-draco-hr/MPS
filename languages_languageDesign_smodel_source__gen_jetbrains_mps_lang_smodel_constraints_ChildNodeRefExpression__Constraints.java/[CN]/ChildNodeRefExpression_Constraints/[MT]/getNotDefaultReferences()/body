{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("targetNode",new BaseReferenceConstraintsDescriptor("targetNode",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_uq3qb6_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode parentTarget=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SLinkOperations.getTarget(_context.getReferenceNode(),"parent",true),"virtual_getTargetNode_3575813534625153815",new Object[]{});
            Iterable<SNode> children=ListSequence.fromList(SNodeOperations.getChildren(parentTarget)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.core.structure.INamedConcept");
              }
            }
).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return SNodeOperations.cast(it,"jetbrains.mps.lang.core.structure.INamedConcept");
              }
            }
);
            return new NamedElementsScope(children);
          }
        }
      }
;
    }
  }
);
  return references;
}
