{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x84baf20c71f8a79L,0x84baf20c71f9250L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x84baf20c71f8a79L,0x84baf20c71f9250L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_uq3qb6_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new NamedElementsScope(AbstractNodeRefExpression_BehaviorDescriptor.getPossibleTargetNodes_id4x3U0fpSqvX.invoke(SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x84baf20c71f8a79L,0x84baf20c71f924eL,"parent"))));
        }
      }
;
    }
  }
);
  return references;
}
