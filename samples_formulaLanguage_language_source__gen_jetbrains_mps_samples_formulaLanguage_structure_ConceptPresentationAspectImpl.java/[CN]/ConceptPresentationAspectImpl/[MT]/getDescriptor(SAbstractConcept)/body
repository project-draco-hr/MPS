{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("b1a9bc47-8a26-4792-8b68-4660c531090a"),"jetbrains.mps.samples.formulaLanguage")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AndOperation;
case 1:
  return props_Constant;
case 2:
return props_EqualsOperation;
case 3:
return props_Expression;
case 4:
return props_FloatingPointConstant;
case 5:
return props_Formula;
case 6:
return props_Function;
case 7:
return props_GreaterThanOperation;
case 8:
return props_IfFunction;
case 9:
return props_IntegerConstant;
case 10:
return props_IsNullOperation;
case 11:
return props_LessThanOperation;
case 12:
return props_MinusOperation;
case 13:
return props_MultOperation;
case 14:
return props_NotOperation;
case 15:
return props_NullConstant;
case 16:
return props_Operation;
case 17:
return props_OrOperation;
case 18:
return props_ParenthisizedExpression;
case 19:
return props_PlusOperation;
case 20:
return props_Reference;
case 21:
return props_StringConstant;
}
throw new IllegalStateException();
}
