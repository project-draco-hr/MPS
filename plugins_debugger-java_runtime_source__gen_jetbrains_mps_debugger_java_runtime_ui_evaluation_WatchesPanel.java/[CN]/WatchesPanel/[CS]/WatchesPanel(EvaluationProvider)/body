{
  super(provider.getDebugSession(),true);
  myTree.setActionGroup(((BaseGroup)ActionManager.getInstance().getAction("jetbrains.mps.debugger.java.runtime.ui.actions.WatchesTreeActions_ActionGroup")));
  myProvider=provider;
  myProvider.addWatchListener(new EvaluationProvider.WatchAdapter(){
    @Override public void watchAdded(    final IEvaluationContainer model){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          myTree.addModel(model);
          evaluate(model);
          myTree.rebuildEvaluationTreeNowIfNotDisposed();
        }
      }
);
    }
    @Override public void watchUpdated(    final IEvaluationContainer model){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          evaluate(model);
        }
      }
);
    }
    @Override public void watchRemoved(    final IEvaluationContainer model){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          myTree.removeModel(model);
          myTree.rebuildEvaluationTreeNowIfNotDisposed();
        }
      }
);
    }
  }
);
  mySessionStopDisposer=new SessionStopDisposer(myDebugSession){
    @Override public void doDispose(){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          WatchesPanel.this.dispose();
        }
      }
);
    }
  }
;
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,((BaseGroup)ActionManager.getInstance().getAction("jetbrains.mps.debugger.java.runtime.ui.actions.WatchesToolbarActions_ActionGroup")),false);
  toolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
  add(toolbar.getComponent(),BorderLayout.WEST);
  add(new JBScrollPane(myTree),BorderLayout.CENTER);
}
