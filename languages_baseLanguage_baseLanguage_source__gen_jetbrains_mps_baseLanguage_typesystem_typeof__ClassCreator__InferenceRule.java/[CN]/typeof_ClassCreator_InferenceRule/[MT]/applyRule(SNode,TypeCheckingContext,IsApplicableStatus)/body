{
  SNode cdecl=SLinkOperations.getTarget(creator,"baseMethodDeclaration",false);
  if (cdecl == null) {
    return;
  }
  final SNode classifier=SNodeOperations.getAncestor(cdecl,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  if ((classifier == null)) {
    return;
  }
  if (!(ListSequence.fromList(SLinkOperations.getTargets(creator,"typeParameter",true)).isEmpty() || (int)ListSequence.fromList(SLinkOperations.getTargets(creator,"typeParameter",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).count())) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(creator,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1216200944338",null,errorTarget);
    }
  }
  for (  SNode parameter : SLinkOperations.getTargets(creator,"typeParameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(parameter,SLinkOperations.getTarget(_quotation_createNode_4w0o2k_a1a0a0a7a1(),"descriptor",false),false)))) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"primitive type not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606006",null,errorTarget);
    }
  }
  final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(cdecl,"typeVariableDeclaration",true))) {
    if (!(MapSequence.fromMap(subs).containsKey(tvd))) {
      final SNode T_typevar_4690171080787098805=typeCheckingContext.createNewRuntimeTypesVariable();
      MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_4690171080787098805));
    }
  }
  List<SNode> typeParam=ListSequence.fromList(SLinkOperations.getTargets(creator,"typeParameter",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode tp){
      final SNode TP_typevar_4340163696368051056=typeCheckingContext.createNewRuntimeTypesVariable();
      SNode tmp=typeCheckingContext.getRepresentative(TP_typevar_4340163696368051056);
{
        SNode _nodeToCheck_1029348928467=tp;
        EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4340163696365984469",0,null);
        typeCheckingContext.createEquation((SNode)typeCheckingContext.getRepresentative(TP_typevar_4340163696368051056),(SNode)tp,_info_12389875345);
      }
      return tmp;
    }
  }
).toListSequence();
  SNode newType=_quotation_createNode_4w0o2k_a0o0b(classifier,typeParam);
  BehaviorReflection.invokeVirtual(Void.class,newType,"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
  List<SNode> argl=SLinkOperations.getTargets(creator,"actualArgument",true);
  List<SNode> typel=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),cdecl,"virtual_getTypeApplicationParameters_8277080359323839095",new Object[]{ListSequence.fromList(argl).count()});
  for (  SNode type : ListSequence.fromList(typel)) {
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
      BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
    }
  }
{
    Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
    Iterator<SNode> arg_it=ListSequence.fromList(argl).iterator();
    SNode type_var;
    SNode arg_var;
    while (type_it.hasNext() && arg_it.hasNext()) {
      type_var=type_it.next();
      arg_var=arg_it.next();
      if (SNodeOperations.isInstanceOf(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
{
          SNode _nodeToCheck_1029348928467=arg_var;
          EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102048",0,null);
          typeCheckingContext.createGreaterThanInequality((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_expandGenerics_4107091686347199582",new Object[]{subs}),(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102050",true),false,true,_info_12389875345);
        }
      }
 else {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
{
            SNode _nodeToCheck_1029348928467=arg_var;
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102064",0,null);
            typeCheckingContext.createGreaterThanInequality((SNode)type_var,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102066",true),true,true,_info_12389875345);
          }
        }
      }
    }
  }
{
    SNode _nodeToCheck_1029348928467=creator;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102070",0,null);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2062135263152102075",true),(SNode)newType,_info_12389875345);
  }
}
