{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.FollowingPipeline");
    Iterable<SNode> concepts;
    concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      ListSequence.<INodeSubstituteAction>fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
          SLinkOperations.setTarget(SLinkOperations.getTarget(result,"basePipeline",true),"following",SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"basePipeline",true),"following",true),true);
          SLinkOperations.setTarget(SLinkOperations.getTarget(result,"basePipeline",true),"command",SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"basePipeline",true),"command",true),true);
          SNodeFactoryOperations.setNewChild(SLinkOperations.getTarget(_context.getSourceNode(),"basePipeline",true),"command","jetbrains.mps.bash.structure.AbstractCommand");
          SLinkOperations.setTarget(SLinkOperations.getTarget(_context.getSourceNode(),"basePipeline",true),"following",result,true);
          return result;
        }
      }
);
    }
  }
  return result;
}
