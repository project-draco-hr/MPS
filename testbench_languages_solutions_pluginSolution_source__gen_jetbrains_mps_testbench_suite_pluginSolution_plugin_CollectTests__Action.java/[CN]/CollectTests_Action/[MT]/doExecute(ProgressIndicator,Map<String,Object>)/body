{
  final Logger LOG=LogManager.getLogger("jetbrains.mps.testbench.suite");
  final SModel model=((SModel)MapSequence.fromMap(_params).get("modelDesc"));
  final Wrappers._T<List<SModuleReference>> solutions=new Wrappers._T<List<SModuleReference>>();
  final Wrappers._T<List<SModuleReference>> existing=new Wrappers._T<List<SModuleReference>>();
  ProjectHelper.getModelAccess(((Project)MapSequence.fromMap(_params).get("project"))).runReadAction(new Runnable(){
    public void run(){
      solutions.value=CollectTests_Action.this.allSolutions(_params);
      existing.value=CollectTests_Action.this.existingSolutions(model,_params);
    }
  }
);
  ListSequence.fromList(solutions.value).removeSequence(ListSequence.fromList(existing.value));
  int done=0;
  for (  SModuleReference mref : solutions.value) {
    if (proInd.isCanceled()) {
      return false;
    }
    proInd.setText("Processing " + mref.getModuleName());
    final SModule module=ModuleRepositoryFacade.getInstance().getModule(mref);
    if (module != null) {
      final Wrappers._T<SNode> suite=new Wrappers._T<SNode>(null);
      for (      final SModel smodel : module.getModels()) {
        if (!(CollectTests_Action.this.isUserEditableGeneratableModel(smodel,_params))) {
          continue;
        }
        if (new TestCollector().collectTests(smodel,new _FunctionTypes._void_P1_E0<_FunctionTypes._return_P0_E0<? extends SNode>>(){
          public void invoke(          final _FunctionTypes._return_P0_E0<? extends SNode> tref){
            ThreadUtils.runInUIThreadAndWait(new Runnable(){
              public void run(){
                ProjectHelper.getModelAccess(((Project)MapSequence.fromMap(_params).get("project"))).executeCommand(new Runnable(){
                  public void run(){
                    if (suite.value == null) {
                      suite.value=SModelOperations.createNewRootNode(model,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x3e81ed1e2be77cb5L,"jetbrains.mps.testbench.suite.structure.ModuleSuite")));
                      SNode sref=SLinkOperations.setNewChild(suite.value,MetaAdapterFactory.getContainmentLink(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x3e81ed1e2be77cb5L,0x11c3fc56a6d1cc88L,"moduleRef"),SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,"jetbrains.mps.testbench.suite.structure.SolutionRef")));
                      SModuleReference mref=module.getModuleReference();
                      SPropertyOperations.set(sref,MetaAdapterFactory.getProperty(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,0x11c3fc56a6d1cbddL,"moduleFQName"),mref.getModuleName());
                      SPropertyOperations.set(sref,MetaAdapterFactory.getProperty(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,0x11c3fc56a6d1cbdeL,"moduleID"),mref.getModuleId().toString());
                    }
                    ListSequence.fromList(SLinkOperations.getChildren(suite.value,MetaAdapterFactory.getContainmentLink(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x3e81ed1e2be77cb5L,0x3e81ed1e2be77cbeL,"testRef"))).addElement(tref.invoke());
                    ((SModelInternal)model).addModelImport(smodel.getReference(),false);
                    ((AbstractModule)((SModel)MapSequence.fromMap(_params).get("modelDesc")).getModule()).addDependency(module.getModuleReference(),false);
                  }
                }
);
              }
            }
);
          }
        }
)) {
        }
      }
    }
    proInd.setFraction(((double)++done) / ListSequence.fromList(solutions.value).count());
  }
  return true;
}
