{
  LanguageRuntime runtime=LanguageRegistry.getInstance().getLanguage(myLanguageFqName);
  if (runtime == null) {
    return Collections.<SAbstractConcept>emptySet();
  }
  Iterable<SNode> roots=(Iterable<SNode>)LanguageAspect.STRUCTURE.get(getSourceModule()).getRootNodes();
  List<SAbstractConcept> c=ListSequence.fromList(new ArrayList<SAbstractConcept>());
  ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    }
  }
).select(new ISelector<SNode,SConcept>(){
    public SConcept select(    SNode it){
      return ((SConcept)SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(it)));
    }
  }
));
  ListSequence.fromList(c).addSequence(Sequence.fromIterable(roots).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
    }
  }
).select(new ISelector<SNode,SInterfaceConceptAdapter>(){
    public SInterfaceConceptAdapter select(    SNode it){
      return new SInterfaceConceptAdapter(IdHelper.getConceptId((jetbrains.mps.smodel.SNode)it));
    }
  }
));
  return c;
}
