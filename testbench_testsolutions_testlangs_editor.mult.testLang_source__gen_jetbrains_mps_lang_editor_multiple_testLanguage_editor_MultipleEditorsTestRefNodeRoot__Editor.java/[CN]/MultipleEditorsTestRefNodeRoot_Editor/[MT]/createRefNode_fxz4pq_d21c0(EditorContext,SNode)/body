{
  CellProviderWithRole provider=new RefNodeCellProvider(node,editorContext){
    @Override protected EditorCell createRefCell(    EditorContext editorContext,    SNode referencedNode,    SNode node){
      try {
        editorContext.getCellFactory().pushCellContext();
        editorContext.getCellFactory().addCellContextHints(Sequence.fromIterable(getEditorHints_fxz4pq_a3m2a(node,editorContext)).toGenericArray(String.class));
        editorContext.getCellFactory().removeCellContextHints(Sequence.fromIterable(getEditorHints_fxz4pq_a3m2a_0(node,editorContext)).toGenericArray(String.class));
        return super.createRefCell(editorContext,referencedNode,node);
      }
  finally {
        editorContext.getCellFactory().popCellContext();
      }
    }
  }
;
  provider.setRole("conditionallyRichOrCompactChild");
  provider.setNoTargetText("<no conditionallyRichOrCompactChild>");
  EditorCell editorCell;
  editorCell=provider.createEditorCell(editorContext);
  if (editorCell.getRole() == null) {
    editorCell.setRole("conditionallyRichOrCompactChild");
  }
  Style style=new StyleImpl();
  style.set(StyleAttributes.INDENT_LAYOUT_INDENT,0,true);
  style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE,0,true);
  editorCell.getStyle().putAll(style);
  editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
  SNode attributeConcept=provider.getRoleAttribute();
  Class attributeKind=provider.getRoleAttributeClass();
  if (attributeConcept != null) {
    EditorManager manager=EditorManager.getInstanceFromContext(editorContext);
    return manager.createNodeRoleAttributeCell(attributeConcept,attributeKind,editorCell);
  }
 else   return editorCell;
}
