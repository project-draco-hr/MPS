{
  this.findDuplicates();
  SNode var=new IntroduceLocalVariableRefactoring.QuotationClass_nngwe4_a0a1a0().createNode(this.getExpressionType(),this.getExpression(),this.getName());
  if (myIsFinal) {
    SPropertyOperations.set(SLinkOperations.getTarget(var,"localVariableDeclaration",true),"isFinal","" + true);
  }
  SNode varDeclaration=SLinkOperations.getTarget(var,"localVariableDeclaration",true);
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(this.getExpression()),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
    SNodeOperations.replaceWithAnother(SNodeOperations.getParent(this.getExpression()),var);
  }
 else {
    SNode parentStatement=SNodeOperations.getAncestor(this.getExpression(),"jetbrains.mps.baseLanguage.structure.Statement",false,false);
    while (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentStatement),"jetbrains.mps.baseLanguage.structure.StatementList"))) {
      parentStatement=SNodeOperations.getAncestor(parentStatement,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
    }
    SNodeOperations.insertPrevSiblingChild(parentStatement,var);
    replaceNode(getExpression(),varDeclaration);
  }
  if (myIsReplacingAll) {
    for (    SNode duplicate : ListSequence.fromList(myDuplicates)) {
      replaceNode(duplicate,varDeclaration);
    }
  }
  return varDeclaration;
}
