{
  super("Specify rule references in tests for tags 'has error' and 'has warning'");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Specify Rule References";
    }
    public String getAdditionalInfo(){
      return "Specify Rule References";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer")) != null);
    }
    public void doUpdateInstanceNode(    SNode node){
      ITypeContextOwner owner=new DefaultTypecheckingContextOwner();
      SNode root=SNodeOperations.getContainingRoot(node);
      final SNode nodeToCheck=node;
      final SNode myNode=AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
      NodeOperationsContainer_Behavior.call_detachAllErrorOperations_5587533744543326483(myNode);
      TypeContextManager.getInstance().runTypeCheckingAction(owner,root,new ITypechecking.Action(){
        @Override public void run(        TypeCheckingContext p0){
          p0.checkIfNotChecked(nodeToCheck,true);
          for (          IErrorReporter reporter : p0.getTypeMessagesDontCheck(nodeToCheck)) {
            SNode ruleNode=NodeCheckerUtil.getRuleNode(reporter);
            NodeOperationsContainer_Behavior.call_attachReference_428590876657265140(myNode,ruleNode,reporter);
            ((SModelBase)SNodeOperations.getModel(myNode)).addModelImport(SNodeOperations.getModel(ruleNode).getReference(),false);
          }
          MissingDependenciesFixer.fixDependencies(SNodeOperations.getModel(myNode),true);
        }
      }
);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
