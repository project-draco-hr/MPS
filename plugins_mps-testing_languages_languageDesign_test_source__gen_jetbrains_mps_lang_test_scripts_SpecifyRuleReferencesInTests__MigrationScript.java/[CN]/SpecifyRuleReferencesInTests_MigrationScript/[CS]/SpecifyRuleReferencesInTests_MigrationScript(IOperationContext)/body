{
  super("Specify rule references in tests for tags 'has error' and 'has warning'");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Specify Rule References";
    }
    public String getAdditionalInfo(){
      return "Specify Rule References";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.test.structure.NodeRuleCheckOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      ITypeContextOwner owner=new DefaultTypecheckingContextOwner();
      SNode root=SNodeOperations.getContainingRoot(node);
      final SNode nodeToCheck=SNodeOperations.getParent(SNodeOperations.getParent(node));
      final SNode myNode=node;
      TypeContextManager.getInstance().runTypeCheckingAction(owner,root,new ITypechecking.Action(){
        public void run(        TypeCheckingContext p0){
          p0.checkIfNotChecked(nodeToCheck,true);
          IErrorReporter reporter=p0.getTypeMessageDontCheck(nodeToCheck);
          SNodePointer ref=new SNodePointer(reporter.getRuleModel(),reporter.getRuleId());
          SNode message=SNodeOperations.cast(ref.resolve(MPSModuleRepository.getInstance()),"jetbrains.mps.lang.typesystem.structure.MessageStatement");
          if ((AttributeOperations.getAttribute(message,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation")) == null)) {
            BehaviorReflection.invokeVirtual(Void.class,message,"virtual_attachNewMessageAnnotation_8489045168661849665",new Object[]{});
          }
          SNode msgStatementAnnotation=AttributeOperations.getAttribute(message,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation"));
          if (BehaviorReflection.invokeVirtual(Boolean.TYPE,myNode,"virtual_canAttachDeclaration_1334460907022490922",new Object[]{msgStatementAnnotation})) {
            BehaviorReflection.invokeVirtual(Void.class,myNode,"virtual_attachDeclaration_8489045168660953479",new Object[]{msgStatementAnnotation});
          }
 else {
            Messages.showErrorDialog("The types of annotation and actual error/warning message do not match","Could no apply intention");
            return;
          }
          ((SModelBase)SNodeOperations.getModel(myNode)).addModelImport(SNodeOperations.getModel(msgStatementAnnotation).getReference(),false);
          MissingDependenciesFixer.fixDependencies(SNodeOperations.getModel(myNode),true);
        }
      }
);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
