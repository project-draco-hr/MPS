{
  if (askIfMany && (ModelAccess.instance().canRead() || ModelAccess.instance().canWrite())) {
    LOG.errorWithTrace("Invocation of operations which might show dialog with lock held");
  }
  Set<IModule> owningModules=ModelAccess.instance().runReadAction(new Computable<Set<IModule>>(){
    public Set<IModule> compute(){
      return SModelRepository.getInstance().getOwners(model,IModule.class);
    }
  }
);
  if (owningModules.isEmpty()) {
    LOG.error("couldn't create module context for node:" + "\ncouldn't find owner module for model '" + model.getSModelReference() + "'");
    return null;
  }
  IModule module;
  if (owningModules.size() == 1 || !askIfMany) {
    module=owningModules.iterator().next();
  }
 else {
    Frame frame=null;
    ChooseModuleDialog md=new ChooseModuleDialog("Choose Context Module",frame,owningModules);
    md.showDialog();
    module=md.getResult();
  }
  if (module == null)   return null;
  return new ModuleContext(module,project);
}
