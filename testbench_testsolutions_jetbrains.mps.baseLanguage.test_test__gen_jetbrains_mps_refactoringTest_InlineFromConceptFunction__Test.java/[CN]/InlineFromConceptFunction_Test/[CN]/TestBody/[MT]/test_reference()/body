{
  this.addNodeById("1230053266366");
  this.addNodeById("1230053266380");
  InlineVariableRefactoring ref=new InlineVariableReferenceRefactoring(SNodeOperations.cast(this.getNodeById("1230053266377"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,"jetbrains.mps.baseLanguage.structure.VariableReference")));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266367"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1137021947720l,"jetbrains.mps.baseLanguage.structure.ConceptFunction")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053266381"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1137021947720l,"jetbrains.mps.baseLanguage.structure.ConceptFunction")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
