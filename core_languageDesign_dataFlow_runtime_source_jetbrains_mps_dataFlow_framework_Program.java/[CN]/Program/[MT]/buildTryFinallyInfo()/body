{
  Stack<TryFinallyInfo> stack=new Stack<TryFinallyInfo>();
  for (  Instruction i : myInstructions) {
    if (i instanceof TryInstruction) {
      Program.TryFinallyInfo info=new TryFinallyInfo();
      info.myTry=(TryInstruction)i;
      myTryFinallyInfo.add(info);
      if (!stack.isEmpty()) {
        info.myParent=stack.peek();
      }
      stack.push(info);
    }
    if (i instanceof FinallyInstruction) {
      if (stack.isEmpty() || stack.peek().myFinally != null) {
        throw new IllegalStateException("unexpected finally");
      }
      stack.peek().myFinally=(FinallyInstruction)i;
    }
    if (i instanceof EndTryInstruction) {
      if (stack.isEmpty() || stack.peek().myEndTry != null) {
        throw new IllegalStateException("unexpected endtry");
      }
      stack.peek().myEndTry=(EndTryInstruction)i;
      stack.pop();
    }
  }
  if (!stack.isEmpty()) {
    throw new IllegalStateException("incomplete try blocks");
  }
}
