{
  Class c=loadFromSelf(name);
  if (c != null) {
    return c;
  }
  List<IClassLoadingModule> queue=new ArrayList<IClassLoadingModule>();
  for (  IClassLoadingModule m : myModule.getClassLoadingDependencies()) {
    if (m.equals(myModule))     continue;
    if (!ClassLoaderManager.getInstance().canLoad((SModule)myModule))     continue;
    if (m.canLoadFromSelf() && getLocator().canFindClass(name)) {
      return Class.forName(name,false,ClassLoaderManager.getInstance().getClassLoader((SModule)m));
    }
 else {
      queue.add(m);
    }
  }
  Set<ClassLoader> processedParentClassLoaders=new HashSet<ClassLoader>();
  for (  IClassLoadingModule m : queue) {
    try {
      ModuleClassLoader classLoader=ClassLoaderManager.getInstance().getClassLoader((SModule)m);
      if (classLoader == null) {
        LOG.warning("Null classloader for module with canLoad() = true; module name: " + ((SModule)m).getModuleName() + "; module class "+ m.getClass());
        continue;
      }
      if (processedParentClassLoaders.contains(classLoader.getParent())) {
        continue;
      }
      processedParentClassLoaders.add(classLoader.getParent());
      return Class.forName(name,false,classLoader.getParent());
    }
 catch (    ClassNotFoundException e) {
    }
  }
  return processedParentClassLoaders.contains(getParent()) ? null : loadFromParent(name);
}
