{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          String target=BuildLayout_NamedContainer_Behavior.call_getReferenceText_841011766566134611(_context.getParameterNode());
          if ((_context.getContextNode() != null)) {
            SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.buildScript.structure.BuildProject",true,false);
            final SNode parameterProject=SNodeOperations.getAncestor(_context.getParameterNode(),"jetbrains.mps.buildScript.structure.BuildProject",true,false);
            if ((contextProject != null) && (parameterProject != null)) {
              if (ListSequence.fromList(SLinkOperations.getTargets(contextProject,"dependencies",true)).any(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,"jetbrains.mps.buildScript.structure.BuildProjectDependency") && SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.buildScript.structure.BuildProjectDependency"),"script",false) == parameterProject;
                }
              }
)) {
                target=SPropertyOperations.getString(parameterProject,"name") + "/" + target;
              }
            }
          }
          return (_context.getSmartReference() ? "import " + target : target);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_gjnfdd_a0a2a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.buildScript.structure.BuildProject",true,false);
          if ((contextProject != null)) {
            final List<SNode> list=ListSequence.fromList(SLinkOperations.getTargets(contextProject,"dependencies",true)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.buildScript.structure.BuildProjectDependency");
              }
            }
).translate(new ITranslator2<SNode,SNode>(){
              public Iterable<SNode> translate(              SNode it){
                return ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.buildScript.structure.BuildProjectDependency"),"script",false),"jetbrains.mps.buildScript.structure.BuildLayout_NamedContainer",false,new String[]{})).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode nc){
                    return BuildLayout_NamedContainer_Behavior.call_isFile_6547494638219485308(nc) || BuildLayout_NamedContainer_Behavior.call_isFolder_6547494638219485301(nc);
                  }
                }
);
              }
            }
).toListSequence();
            return new Scope(){
              /** 
 * javadoc suxx
 */
              public List<SNode> getAvailableElements(              @Nullable String prefix){
                return list;
              }
              /** 
 * javadoc suxx
 */
              @Nullable public SNode resolve(              SNode contextNode,              @NotNull String refText){
                return null;
              }
              /** 
 * javadoc suxx
 */
              @Nullable public String getReferenceText(              SNode contextNode,              @NotNull SNode node){
                return null;
              }
            }
;
          }
          return new EmptyScope();
        }
      }
;
    }
  }
);
  return references;
}
