{
  int[][] maxSeq=new int[s.length + 1][p.length + 1];
  for (int sn=0; sn < s.length; sn++) {
    for (int pn=0; pn < p.length; pn++) {
      int prev=Math.max(maxSeq[sn][pn + 1],maxSeq[sn + 1][pn]);
      maxSeq[sn + 1][pn + 1]=prev;
      if (s[sn].equals(p[pn])) {
        maxSeq[sn + 1][pn + 1]=Math.max(prev,maxSeq[sn][pn + 1] + 1);
      }
    }
  }
  if (showInfo > 0) {
    for (int i=0; i <= s.length; i++) {
      for (int j=0; j <= p.length; j++) {
        System.out.print((Integer)(maxSeq[i][j]) + " ");
      }
      System.out.println();
    }
  }
  int max=0;
  int pMax=-1;
  for (int pn=1; pn <= p.length; pn++) {
    int curMax=maxSeq[s.length][pn];
    if (curMax > max) {
      pMax=pn;
      max=curMax;
    }
  }
  List<Tuples._2<Integer,Integer>> pos=ListSequence.fromList(new LinkedList<Tuples._2<Integer,Integer>>());
  int curP=pMax;
  int curS=s.length;
  while (max != 0) {
    if (max == maxSeq[curS - 1][curP]) {
      curS--;
    }
 else {
      if (s[curS - 1] == p[curP - 1]) {
        ListSequence.fromList(pos).insertElement(0,MultiTuple.<Integer,Integer>from(curS - 1,curP - 1));
        max--;
      }
 else {
        curP--;
      }
    }
  }
  return pos;
}
