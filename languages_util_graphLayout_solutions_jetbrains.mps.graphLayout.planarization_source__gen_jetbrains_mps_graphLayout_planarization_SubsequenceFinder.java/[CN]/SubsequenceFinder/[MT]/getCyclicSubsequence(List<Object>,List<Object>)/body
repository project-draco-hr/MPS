{
  List<Object> copy=ListSequence.<Object>fromList(new LinkedList<Object>());
  ListSequence.<Object>fromList(copy).addSequence(ListSequence.<Object>fromList(cyclic));
  int size=ListSequence.<Object>fromList(copy).count();
  Object[] s=ListSequence.<Object>fromList(sample).toGenericArray(Object.class);
  List<Tuples._2<Integer,Integer>> pos=null;
  int max=-1;
  for (int i=0; i < size; i++) {
    Object[] p=ListSequence.<Object>fromList(copy).toGenericArray(Object.class);
    List<Tuples._2<Integer,Integer>> pairs=getSubsequence(s,p);
    if (max < ListSequence.<Tuples._2<Integer,Integer>>fromList(pairs).count()) {
      max=ListSequence.<Tuples._2<Integer,Integer>>fromList(pairs).count();
      List<Tuples._2<Integer,Integer>> realPos=ListSequence.<Tuples._2<Integer,Integer>>fromList(new LinkedList<Tuples._2<Integer,Integer>>());
      for (      Tuples._2<Integer,Integer> pair : ListSequence.<Tuples._2<Integer,Integer>>fromList(pairs)) {
        int real=(int)pair._1() + i;
        if (real >= size) {
          real-=size;
        }
        ListSequence.<Tuples._2<Integer,Integer>>fromList(realPos).addElement(MultiTuple.<Integer,Integer>from((int)pair._0(),real));
      }
      pos=realPos;
    }
    ListSequence.<Object>fromList(copy).addElement(ListSequence.<Object>fromList(copy).removeElementAt(0));
  }
  return pos;
}
