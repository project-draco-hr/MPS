{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"elementType","initValue","copyFrom","initSize"},new boolean[]{false,true,false,false},true,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},true,false,"","container type","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"addAll","add all elements","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"addAll","add all elements","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"add","add an element","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"addFirst","add element as first","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"addLast","add element as last","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"add","add an element","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AllConstant","jetbrains.mps.baseLanguage.structure.IntegerConstant",false,new String[]{"jetbrains.mps.baseLanguage.structure.IntegerConstant"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"ALL","all elements","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AllOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"all","check if all elements match the condition","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation","jetbrains.mps.baseLanguage.collections.structure.SortOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"alsoSortBy","sort by secondary key","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AnyOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"any","check if there are any elements matching the condition","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation","jetbrains.mps.baseLanguage.structure.AbstractOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractOperation","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"asSequence","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"asSynchronized","synchronized collection","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"asUnmodifiable","unmodifiable collection","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"rightExpression"},new boolean[]{false},true,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"length"},new boolean[]{false},true,false,"","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"clear","clear all elements","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"clear","clear all elements","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CollectionType","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"collection","abstract collection type","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"comparator","ascending"},new boolean[]{false,false},false,false,"sort","sort using comparator","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ConcatOperation","jetbrains.mps.baseLanguage.collections.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"concat","produce a sequence concatenation","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType","jetbrains.mps.baseLanguage.collections.structure.IteratorType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IteratorType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"modifying_iterator","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"containsAll","test if sequence contains all element","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{"key"},new boolean[]{false},false,false,"containsKey","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"contains","test if sequence contains an element","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{"value"},new boolean[]{false},false,false,"containsValue","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"},new String[]{},new String[]{"containerDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration","jetbrains.mps.baseLanguage.structure.GenericDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IVisible"},new String[]{},new String[]{},new String[]{"containerType","runtimeType","factory"},new boolean[]{false,false,false},false,false,"","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CustomContainers","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"containerDeclaration"},new boolean[]{true},false,false,"","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator","jetbrains.mps.baseLanguage.collections.structure.HashMapCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.HashMapCreator"},new String[]{},new String[]{"containerDeclaration"},new String[]{},new boolean[]{},false,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.CutOperation","jetbrains.mps.baseLanguage.collections.structure.ChunkOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.ChunkOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"cut","exclude elements from the end","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.DequeType","jetbrains.mps.baseLanguage.collections.structure.QueueType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.QueueType","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"deque","","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation","jetbrains.mps.baseLanguage.collections.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"disjunction","produce an exclusive disjunction","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.DistinctOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"distinct","produce sequence with unique elements","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.DowncastExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"downcast","","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.EnumeratorType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"enumerator","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation","jetbrains.mps.baseLanguage.collections.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"except","subtract a sequence","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"findFirst","find first element that matches","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.FindLastOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"findLast","find last element that matches","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"comb","seed"},new boolean[]{false,false},false,false,"foldLeft","perform left folding","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"comb","seed"},new boolean[]{false,false},false,false,"foldRight","perform right folding","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"variable","inputSequence"},new boolean[]{false,false},false,false,"foreach","foreach <e> in <sequence>","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IVariableReference"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{},false,false,"","","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"current","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"get","get element by index","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"enumerator","get the enumerator","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"first","get the first element","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"indexOf","get the index of an element","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"iterator","get the iterator","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"keys","","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"lastIndexOf","get the index of an element","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetLastOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"last","get the last element","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"next","","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"size","get the sequence size","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"values","","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"hasNext","","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"keyType","valueType","initializer","initSize"},new boolean[]{false,false,false,false},false,false,"hashmap","","");
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"hashset","create new hashset","");
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HeadListOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"upToIndex"},new boolean[]{false},false,false,"headList","head list","");
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation","jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation"},new String[]{},new String[]{},new String[]{"toKey"},new boolean[]{false},false,false,"headMap","","");
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation","jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation"},new String[]{},new String[]{},new String[]{"toElement"},new boolean[]{false},false,false,"headSet","","");
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IDequeOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IListOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IStackOperation",null,true,new String[]{"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"index","element"},new boolean[]{false,false},false,false,"insert","insert element at an index","");
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"closure"},new boolean[]{false},true,false,"","","");
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IntersectOperation","jetbrains.mps.baseLanguage.collections.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"intersect","produce an intersection","");
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"isEmpty","test if sequence is empty","");
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"isNotEmpty","test if sequence is not empty","");
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.IteratorType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"iterator","","");
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.JoinOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"delimiter"},new boolean[]{false},false,false,"join","","");
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"key","","");
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator","jetbrains.mps.baseLanguage.collections.structure.HashMapCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.HashMapCreator"},new String[]{"order"},new String[]{},new String[]{},new boolean[]{},false,false,"linked_hashmap","","");
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator","jetbrains.mps.baseLanguage.collections.structure.HashSetCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.HashSetCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"linked_hashset","create new linked hashset","");
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"linkedlist","create new linked list","");
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.LinkedListType","jetbrains.mps.baseLanguage.collections.structure.ListType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.ListType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"linkedlist","","");
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"arraylist","create new array list","");
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"list","index"},new boolean[]{false,false},false,false,"","","");
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ListType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"list","","");
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapClearOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"clear","","");
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapElement","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"map","key"},new boolean[]{false,false},false,false,"","","");
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapEntry","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"key","value"},new boolean[]{false,false},false,false,"","","");
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapInitializer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"entries"},new boolean[]{true},false,false,"","","");
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"expression","mapOperation"},new boolean[]{false,false},false,false,"","","");
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{"key"},new boolean[]{false},false,false,"removeKey","","");
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MapType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"keyType","valueType"},new boolean[]{false,false},false,false,"map","","");
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MappingType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"keyType","valueType"},new boolean[]{false,false},false,false,"mapping","","");
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"mappings","","");
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"moveNext","","");
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"variable","input"},new boolean[]{false,false},false,false,"","","");
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"forEach"},new boolean[]{true},false,false,"foreach","foreach loop over multiple variables","");
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{},false,false,"","","");
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"requestedType"},new boolean[]{false},false,false,"ofType","select elements of the specified type","");
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PageOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"fromElement","toElement"},new boolean[]{false,false},false,false,"page","select a subsequence","");
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PeekOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"peek","","");
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PopOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"pop","","");
case 114:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"priority_queue","create new priority queue","");
case 115:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PushOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"push","","");
case 116:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.PutAllOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{"map"},new boolean[]{false},false,false,"putAll","","");
case 117:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.QueueType","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"queue","","");
case 118:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"comb"},new boolean[]{false},false,false,"reduceLeft","perform left reduction","");
case 119:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"comb"},new boolean[]{false},false,false,"reduceRight","perform right reduction","");
case 120:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"removeAll","remove all elements","");
case 121:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"removeAll","remove all elements","");
case 122:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"index"},new boolean[]{false},false,false,"removeAt","remove element at an index","");
case 123:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"remove","remove an element","");
case 124:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"removeFirst","remove first element","");
case 125:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"removeLast","remove last element","");
case 126:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"remove","","");
case 127:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},false,false,"remove","remove an element","");
case 128:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"removeWhere","filter out the matched elements","");
case 129:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ReverseOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"reverse","create a list with elements in reverse order","");
case 130:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SelectOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"selector"},new boolean[]{false},false,false,"select","transform each element to another type","");
case 131:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SequenceCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"elementType","initializer"},new boolean[]{false,false},false,false,"sequence","create new sequence","");
case 132:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 133:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SequenceType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"sequence","","");
case 134:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"index","element"},new boolean[]{false,false},false,false,"set","set an element at an index","");
case 135:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SetType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"elementType"},new boolean[]{false},false,false,"set","","");
case 136:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false},true,false,"","","");
case 137:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"elementType","singletonValue"},new boolean[]{false,false},false,false,"singleton","create singleton sequence","");
case 138:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SkipOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"elementsToSkip"},new boolean[]{false},false,false,"skip","exclude elements from the beginning","");
case 139:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SkipStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"skip","skip to next element in input sequence","");
case 140:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration","jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"~ <name>","smart closure parameter","");
case 141:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortDirection","jetbrains.mps.baseLanguage.structure.BooleanConstant",false,new String[]{"jetbrains.mps.baseLanguage.structure.BooleanConstant","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 142:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"toComparable","ascending"},new boolean[]{false,false},false,false,"sortBy","sort by key","");
case 143:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation","jetbrains.mps.baseLanguage.collections.structure.MapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 144:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortedMapType","jetbrains.mps.baseLanguage.collections.structure.MapType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.MapType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sorted_map","","");
case 145:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 146:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SortedSetType","jetbrains.mps.baseLanguage.collections.structure.SetType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SetType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"sorted_set","","");
case 147:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.StackType","jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"stack","","");
case 148:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.StopStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"stop","stop iterating input sequence","");
case 149:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SubListOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"fromIndex","upToIndex"},new boolean[]{false,false},false,false,"subList","sub list","");
case 150:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SubMapOperation","jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation"},new String[]{},new String[]{},new String[]{"fromKey","toKey"},new boolean[]{false,false},false,false,"subMap","","");
case 151:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.SubSetOperation","jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation"},new String[]{},new String[]{},new String[]{"fromElement","toElement"},new boolean[]{false,false},false,false,"subSet","","");
case 152:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TailListOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"},new String[]{},new String[]{},new String[]{"fromIndex"},new boolean[]{false},false,false,"tailList","tail list","");
case 153:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TailMapOperation","jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation"},new String[]{},new String[]{},new String[]{"fromKey"},new boolean[]{false},false,false,"tailMap","","");
case 154:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TailOperation","jetbrains.mps.baseLanguage.collections.structure.ChunkOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.ChunkOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"tail","include elements at the end","");
case 155:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TailSetOperation","jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation"},new String[]{},new String[]{},new String[]{"fromElement"},new boolean[]{false},false,false,"tailSet","","");
case 156:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TakeOperation","jetbrains.mps.baseLanguage.collections.structure.SequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"},new String[]{},new String[]{},new String[]{"elementsToTake"},new boolean[]{false},false,false,"take","include elements at the beginning","");
case 157:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"testAdd","add an element and test the outcome","");
case 158:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation","jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"testRemove","remove an element and test the outcome","");
case 159:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"toArray","convert to an array","");
case 160:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"iterator","convert to an iterator","");
case 161:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ToListOperation","jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"toList","convert to a list","");
case 162:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"mapper"},new boolean[]{false},false,false,"selectMany","transform each element to a sequence","");
case 163:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator","jetbrains.mps.baseLanguage.collections.structure.HashMapCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.HashMapCreator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"treemap","","");
case 164:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator","jetbrains.mps.baseLanguage.collections.structure.HashSetCreator",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.HashSetCreator"},new String[]{},new String[]{},new String[]{"comparator"},new boolean[]{false},false,false,"treeset","create new treeset","");
case 165:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.UnionOperation","jetbrains.mps.baseLanguage.collections.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"union","produce an union","");
case 166:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation","jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"value","","");
case 167:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"visitor"},new boolean[]{false},false,false,"forEach","execute for each element","");
case 168:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.collections.structure.WhereOperation","jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation",false,new String[]{"jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation"},new String[]{},new String[]{},new String[]{"filter"},new boolean[]{false},false,false,"where","include only matched element","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
