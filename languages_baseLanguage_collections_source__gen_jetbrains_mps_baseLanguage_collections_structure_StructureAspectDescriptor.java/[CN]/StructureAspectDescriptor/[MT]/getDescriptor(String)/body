{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType","initValue","copyFrom","initSize"},new boolean[]{false,true,false,false}).abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"},new boolean[]{false}).abstract_().alias("","container type").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"},new boolean[]{false}).alias("addAll","add all elements").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"},new boolean[]{false}).alias("addAll","add all elements").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"},new boolean[]{false}).alias("add","add an element").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"},new boolean[]{false}).alias("addFirst","add element as first").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"argument"},new boolean[]{false}).alias("addLast","add element as last").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"},new boolean[]{false}).alias("add","add an element").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerConstant").parents("jetbrains.mps.baseLanguage.structure.IntegerConstant").alias("ALL","all elements").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"},new boolean[]{false}).alias("all","check if all elements match the condition").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AlsoSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortOperation").alias("alsoSortBy","sort by secondary key").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AnyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"},new boolean[]{false}).alias("any","check if there are any elements matching the condition").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSequenceOperation").super_("jetbrains.mps.baseLanguage.structure.AbstractOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractOperation","jetbrains.mps.baseLanguage.structure.IOperation").alias("asSequence","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsSynchronizedOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asSynchronized","synchronized collection").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.AsUnmodifiableOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("asUnmodifiable","unmodifiable collection").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"rightExpression"},new boolean[]{false}).abstract_().create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"length"},new boolean[]{false}).abstract_().create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("clear","clear all elements").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ClearSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").alias("clear","clear all elements").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CollectionType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType").alias("collection","abstract collection type").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ComparatorSortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comparator","ascending"},new boolean[]{false,false}).alias("sort","sort using comparator").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ConcatOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("concat","produce a sequence concatenation").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainerIteratorType").super_("jetbrains.mps.baseLanguage.collections.structure.IteratorType").parents("jetbrains.mps.baseLanguage.collections.structure.IteratorType").alias("modifying_iterator","").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"},new boolean[]{false}).alias("containsAll","test if sequence contains all element").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsKeyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"},new boolean[]{false}).alias("containsKey","").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"},new boolean[]{false}).alias("contains","test if sequence contains an element").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ContainsValueOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"value"},new boolean[]{false}).alias("containsValue","").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").references("containerDeclaration").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainerDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IVisible").children(new String[]{"containerType","runtimeType","factory"},new boolean[]{false,false,false}).create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomContainers").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"containerDeclaration"},new boolean[]{true}).create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").references("containerDeclaration").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.CutOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("cut","exclude elements from the end").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DequeType").super_("jetbrains.mps.baseLanguage.collections.structure.QueueType").parents("jetbrains.mps.baseLanguage.collections.structure.QueueType","jetbrains.mps.baseLanguage.structure.IGenericType").alias("deque","").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DisjunctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("disjunction","produce an exclusive disjunction").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DistinctOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("distinct","produce sequence with unique elements").create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.DowncastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression"},new boolean[]{false}).alias("downcast","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.EnumeratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"},new boolean[]{false}).alias("enumerator","").create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ExcludeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("except","subtract a sequence").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"},new boolean[]{false}).alias("findFirst","find first element that matches").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FindLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"},new boolean[]{false}).alias("findLast","find last element that matches").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb","seed"},new boolean[]{false,false}).alias("foldLeft","perform left folding").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb","seed"},new boolean[]{false,false}).alias("foldRight","perform right folding").create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable","inputSequence"},new boolean[]{false,false}).alias("foreach","foreach <e> in <sequence>").create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVariableDeclaration").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IVariableReference").references("variable").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetCurrentOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("current","").create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"argument"},new boolean[]{false}).alias("get","get element by index").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetEnumeratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("enumerator","get the enumerator").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetFirstOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("first","get the first element").create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"},new boolean[]{false}).alias("indexOf","get the index of an element").create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("iterator","get the iterator").create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetKeysOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("keys","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastIndexOfOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").children(new String[]{"argument"},new boolean[]{false}).alias("lastIndexOf","get the index of an element").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetLastOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("last","get the last element").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("next","").create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("size","get the sequence size").create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.GetValuesOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("values","").create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HasNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("hasNext","").create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"keyType","valueType","initializer","initSize"},new boolean[]{false,false,false,false}).alias("hashmap","").create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("hashset","create new hashset").create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"upToIndex"},new boolean[]{false}).alias("headList","head list").create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"toKey"},new boolean[]{false}).alias("headMap","").create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.HeadSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"toElement"},new boolean[]{false}).alias("headSet","").create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").create();
case 68:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
case 69:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").create();
case 70:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing").interface_().create();
case 71:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
case 72:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").create();
case 73:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
case 74:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").create();
case 75:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IDequeOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation").create();
case 76:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IListOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.ICollectionOperation").create();
case 77:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IQueueOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
case 78:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IStackOperation").interface_().parents("jetbrains.mps.baseLanguage.collections.structure.IContainerOperation").create();
case 79:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index","element"},new boolean[]{false,false}).alias("insert","insert element at an index").create();
case 80:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"closure"},new boolean[]{false}).abstract_().create();
case 81:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IntersectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("intersect","produce an intersection").create();
case 82:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isEmpty","test if sequence is empty").create();
case 83:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("isNotEmpty","test if sequence is not empty").create();
case 84:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.IteratorType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"elementType"},new boolean[]{false}).alias("iterator","").create();
case 85:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.JoinOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"delimiter"},new boolean[]{false}).alias("join","").create();
case 86:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.KeyAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("key","").create();
case 87:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").properties("order").alias("linked_hashmap","").create();
case 88:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").alias("linked_hashset","create new linked hashset").create();
case 89:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("linkedlist","create new linked list").create();
case 90:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.LinkedListType").super_("jetbrains.mps.baseLanguage.collections.structure.ListType").parents("jetbrains.mps.baseLanguage.collections.structure.ListType").alias("linkedlist","").create();
case 91:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("arraylist","create new array list").create();
case 92:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"list","index"},new boolean[]{false,false}).create();
case 93:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ListType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"},new boolean[]{false}).alias("list","").create();
case 94:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapClearOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("clear","").create();
case 95:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapElement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"map","key"},new boolean[]{false,false}).create();
case 96:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"key","value"},new boolean[]{false,false}).create();
case 97:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"entries"},new boolean[]{true}).create();
case 98:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 99:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapOperationExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression","mapOperation"},new boolean[]{false,false}).create();
case 100:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapRemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"key"},new boolean[]{false}).alias("removeKey","").create();
case 101:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MapType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType","valueType"},new boolean[]{false,false}).alias("map","").create();
case 102:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"keyType","valueType"},new boolean[]{false,false}).alias("mapping","").create();
case 103:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MappingsSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").alias("mappings","").create();
case 104:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MoveNextOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractEnumeratorOperation").alias("moveNext","").create();
case 105:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"variable","input"},new boolean[]{false,false}).create();
case 106:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"forEach"},new boolean[]{true}).alias("foreach","foreach loop over multiple variables").create();
case 107:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVariableDeclaration").create();
case 108:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("variable").create();
case 109:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").abstract_().create();
case 110:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.OfTypeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"requestedType"},new boolean[]{false}).alias("ofType","select elements of the specified type").create();
case 111:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PageOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"fromElement","toElement"},new boolean[]{false,false}).alias("page","select a subsequence").create();
case 112:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PeekOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("peek","").create();
case 113:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PopOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("pop","").create();
case 114:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator").alias("priority_queue","create new priority queue").create();
case 115:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PushOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"},new boolean[]{false}).alias("push","").create();
case 116:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.PutAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").children(new String[]{"map"},new boolean[]{false}).alias("putAll","").create();
case 117:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.QueueType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType").alias("queue","").create();
case 118:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceLeftOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"},new boolean[]{false}).alias("reduceLeft","perform left reduction").create();
case 119:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReduceRightOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"comb"},new boolean[]{false}).alias("reduceRight","perform right reduction").create();
case 120:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").children(new String[]{"argument"},new boolean[]{false}).alias("removeAll","remove all elements").create();
case 121:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"},new boolean[]{false}).alias("removeAll","remove all elements").create();
case 122:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index"},new boolean[]{false}).alias("removeAt","remove element at an index").create();
case 123:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").children(new String[]{"argument"},new boolean[]{false}).alias("remove","remove an element").create();
case 124:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack").alias("removeFirst","remove first element").create();
case 125:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveLastElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque").alias("removeLast","remove last element").create();
case 126:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation").alias("remove","").create();
case 127:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").children(new String[]{"argument"},new boolean[]{false}).alias("remove","remove an element").create();
case 128:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.RemoveWhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IStackOperation","jetbrains.mps.baseLanguage.collections.structure.IQueueOperation","jetbrains.mps.baseLanguage.collections.structure.IDequeOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList","jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack","jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue").children(new String[]{"filter"},new boolean[]{false}).alias("removeWhere","filter out the matched elements").create();
case 129:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ReverseOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").alias("reverse","create a list with elements in reverse order").create();
case 130:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SelectOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"selector"},new boolean[]{false}).alias("select","transform each element to another type").create();
case 131:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType","initializer"},new boolean[]{false,false}).alias("sequence","create new sequence").create();
case 132:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 133:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SequenceType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"},new boolean[]{false}).alias("sequence","").create();
case 134:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"index","element"},new boolean[]{false,false}).alias("set","set an element at an index").create();
case 135:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SetType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"elementType"},new boolean[]{false}).alias("set","").create();
case 136:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"argument"},new boolean[]{false}).abstract_().create();
case 137:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SingletonSequenceCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"elementType","singletonValue"},new boolean[]{false,false}).alias("singleton","create singleton sequence").create();
case 138:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToSkip"},new boolean[]{false}).alias("skip","exclude elements from the beginning").create();
case 139:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SkipStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("skip","skip to next element in input sequence").create();
case 140:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").parents("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").alias("~ <name>","smart closure parameter").create();
case 141:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortDirection").super_("jetbrains.mps.baseLanguage.structure.BooleanConstant").parents("jetbrains.mps.baseLanguage.structure.BooleanConstant","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
case 142:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"toComparable","ascending"},new boolean[]{false,false}).alias("sortBy","sort by key").create();
case 143:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.MapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.MapOperation").abstract_().create();
case 144:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedMapType").super_("jetbrains.mps.baseLanguage.collections.structure.MapType").parents("jetbrains.mps.baseLanguage.collections.structure.MapType").alias("sorted_map","").create();
case 145:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation").abstract_().create();
case 146:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SortedSetType").super_("jetbrains.mps.baseLanguage.collections.structure.SetType").parents("jetbrains.mps.baseLanguage.collections.structure.SetType").alias("sorted_set","").create();
case 147:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StackType").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType","jetbrains.mps.baseLanguage.structure.IGenericType").alias("stack","").create();
case 148:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.StopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("stop","stop iterating input sequence").create();
case 149:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex","upToIndex"},new boolean[]{false,false}).alias("subList","sub list").create();
case 150:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey","toKey"},new boolean[]{false,false}).alias("subMap","").create();
case 151:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.SubSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement","toElement"},new boolean[]{false,false}).alias("subSet","").create();
case 152:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToList").children(new String[]{"fromIndex"},new boolean[]{false}).alias("tailList","tail list").create();
case 153:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailMapOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation").children(new String[]{"fromKey"},new boolean[]{false}).alias("tailMap","").create();
case 154:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailOperation").super_("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").parents("jetbrains.mps.baseLanguage.collections.structure.ChunkOperation").alias("tail","include elements at the end").create();
case 155:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TailSetOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation").children(new String[]{"fromElement"},new boolean[]{false}).alias("tailSet","").create();
case 156:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TakeOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"elementsToTake"},new boolean[]{false}).alias("take","include elements at the beginning").create();
case 157:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestAddElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testAdd","add an element and test the outcome").create();
case 158:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TestRemoveElementOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SingleArgumentSequenceOperation","jetbrains.mps.baseLanguage.collections.structure.IListOperation","jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection").alias("testRemove","remove an element and test the outcome").create();
case 159:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToArrayOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toArray","convert to an array").create();
case 160:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToIteratorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("iterator","convert to an iterator").create();
case 161:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ToListOperation").super_("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.NoArgumentsSequenceOperation").alias("toList","convert to a list").create();
case 162:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TranslateOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"mapper"},new boolean[]{false}).alias("selectMany","transform each element to a sequence").create();
case 163:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashMapCreator").alias("treemap","").create();
case 164:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator").super_("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").parents("jetbrains.mps.baseLanguage.collections.structure.HashSetCreator").children(new String[]{"comparator"},new boolean[]{false}).alias("treeset","create new treeset").create();
case 165:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.UnionOperation").super_("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.collections.structure.BinaryOperation").alias("union","produce an union").create();
case 166:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation").super_("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").parents("jetbrains.mps.baseLanguage.collections.structure.AbstractMappingOperation").alias("value","").create();
case 167:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.VisitAllOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"visitor"},new boolean[]{false}).alias("forEach","execute for each element").create();
case 168:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.collections.structure.WhereOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").children(new String[]{"filter"},new boolean[]{false}).alias("where","include only matched element").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
