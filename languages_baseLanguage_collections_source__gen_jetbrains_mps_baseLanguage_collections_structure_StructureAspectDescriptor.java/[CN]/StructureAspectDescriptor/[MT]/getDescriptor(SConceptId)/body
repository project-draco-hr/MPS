{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractContainerCreator;
case 1:
  return myConceptAbstractContainerType;
case 2:
return myConceptAbstractEnumeratorOperation;
case 3:
return myConceptAbstractIteratorOperation;
case 4:
return myConceptAbstractMappingOperation;
case 5:
return myConceptAbstractSetOperation;
case 6:
return myConceptAddAllElementsOperation;
case 7:
return myConceptAddAllSetElementsOperation;
case 8:
return myConceptAddElementOperation;
case 9:
return myConceptAddFirstElementOperation;
case 10:
return myConceptAddLastElementOperation;
case 11:
return myConceptAddSetElementOperation;
case 12:
return myConceptAllConstant;
case 13:
return myConceptAllOperation;
case 14:
return myConceptAlsoSortOperation;
case 15:
return myConceptAnyOperation;
case 16:
return myConceptAsSequenceOperation;
case 17:
return myConceptAsSynchronizedOperation;
case 18:
return myConceptAsUnmodifiableOperation;
case 19:
return myConceptBinaryOperation;
case 20:
return myConceptChunkOperation;
case 21:
return myConceptClearAllElementsOperation;
case 22:
return myConceptClearSetOperation;
case 23:
return myConceptCollectionType;
case 24:
return myConceptComparatorSortOperation;
case 25:
return myConceptConcatOperation;
case 26:
return myConceptContainerIteratorType;
case 27:
return myConceptContainsAllOperation;
case 28:
return myConceptContainsKeyOperation;
case 29:
return myConceptContainsOperation;
case 30:
return myConceptContainsValueOperation;
case 31:
return myConceptCustomContainerCreator;
case 32:
return myConceptCustomContainerDeclaration;
case 33:
return myConceptCustomContainers;
case 34:
return myConceptCustomMapCreator;
case 35:
return myConceptCutOperation;
case 36:
return myConceptDequeType;
case 37:
return myConceptDisjunctOperation;
case 38:
return myConceptDistinctOperation;
case 39:
return myConceptDowncastExpression;
case 40:
return myConceptEnumeratorType;
case 41:
return myConceptExcludeOperation;
case 42:
return myConceptFindFirstOperation;
case 43:
return myConceptFindLastOperation;
case 44:
return myConceptFoldLeftOperation;
case 45:
return myConceptFoldRightOperation;
case 46:
return myConceptForEachStatement;
case 47:
return myConceptForEachVariable;
case 48:
return myConceptForEachVariableReference;
case 49:
return myConceptGetCurrentOperation;
case 50:
return myConceptGetElementOperation;
case 51:
return myConceptGetEnumeratorOperation;
case 52:
return myConceptGetFirstOperation;
case 53:
return myConceptGetIndexOfOperation;
case 54:
return myConceptGetIteratorOperation;
case 55:
return myConceptGetKeysOperation;
case 56:
return myConceptGetLastIndexOfOperation;
case 57:
return myConceptGetLastOperation;
case 58:
return myConceptGetNextOperation;
case 59:
return myConceptGetSizeOperation;
case 60:
return myConceptGetValuesOperation;
case 61:
return myConceptHasNextOperation;
case 62:
return myConceptHashMapCreator;
case 63:
return myConceptHashSetCreator;
case 64:
return myConceptHeadListOperation;
case 65:
return myConceptHeadMapOperation;
case 66:
return myConceptHeadSetOperation;
case 67:
return myConceptIApplicableToCollection;
case 68:
return myConceptIApplicableToDeque;
case 69:
return myConceptIApplicableToList;
case 70:
return myConceptIApplicableToNothing;
case 71:
return myConceptIApplicableToQueue;
case 72:
return myConceptIApplicableToStack;
case 73:
return myConceptICollectionOperation;
case 74:
return myConceptIContainerOperation;
case 75:
return myConceptIDequeOperation;
case 76:
return myConceptIListOperation;
case 77:
return myConceptIQueueOperation;
case 78:
return myConceptIStackOperation;
case 79:
return myConceptInsertElementOperation;
case 80:
return myConceptInternalSequenceOperation;
case 81:
return myConceptIntersectOperation;
case 82:
return myConceptIsEmptyOperation;
case 83:
return myConceptIsNotEmptyOperation;
case 84:
return myConceptIteratorType;
case 85:
return myConceptJoinOperation;
case 86:
return myConceptKeyAccessOperation;
case 87:
return myConceptLinkedHashMapCreator;
case 88:
return myConceptLinkedHashSetCreator;
case 89:
return myConceptLinkedListCreator;
case 90:
return myConceptLinkedListType;
case 91:
return myConceptListCreatorWithInit;
case 92:
return myConceptListElementAccessExpression;
case 93:
return myConceptListType;
case 94:
return myConceptMapAsSequenceVarRef;
case 95:
return myConceptMapClearOperation;
case 96:
return myConceptMapElement;
case 97:
return myConceptMapEntry;
case 98:
return myConceptMapInitializer;
case 99:
return myConceptMapOperation;
case 100:
return myConceptMapOperationExpression;
case 101:
return myConceptMapRemoveOperation;
case 102:
return myConceptMapType;
case 103:
return myConceptMappingType;
case 104:
return myConceptMappingsSetOperation;
case 105:
return myConceptMoveNextOperation;
case 106:
return myConceptMultiForEachPair;
case 107:
return myConceptMultiForEachStatement;
case 108:
return myConceptMultiForEachVariable;
case 109:
return myConceptMultiForEachVariableReference;
case 110:
return myConceptNoArgumentsSequenceOperation;
case 111:
return myConceptOfTypeOperation;
case 112:
return myConceptPageOperation;
case 113:
return myConceptPeekOperation;
case 114:
return myConceptPopOperation;
case 115:
return myConceptPriorityQueueCreator;
case 116:
return myConceptPushOperation;
case 117:
return myConceptPutAllOperation;
case 118:
return myConceptQueueType;
case 119:
return myConceptReduceLeftOperation;
case 120:
return myConceptReduceRightOperation;
case 121:
return myConceptRemoveAllElementsOperation;
case 122:
return myConceptRemoveAllSetElementsOperation;
case 123:
return myConceptRemoveAtElementOperation;
case 124:
return myConceptRemoveElementOperation;
case 125:
return myConceptRemoveFirstElementOperation;
case 126:
return myConceptRemoveLastElementOperation;
case 127:
return myConceptRemoveOperation;
case 128:
return myConceptRemoveSetElementOperation;
case 129:
return myConceptRemoveWhereOperation;
case 130:
return myConceptReverseOperation;
case 131:
return myConceptSelectOperation;
case 132:
return myConceptSequenceCreator;
case 133:
return myConceptSequenceOperation;
case 134:
return myConceptSequenceType;
case 135:
return myConceptSetElementOperation;
case 136:
return myConceptSetType;
case 137:
return myConceptSingleArgumentSequenceOperation;
case 138:
return myConceptSingletonSequenceCreator;
case 139:
return myConceptSkipOperation;
case 140:
return myConceptSkipStatement;
case 141:
return myConceptSmartClosureParameterDeclaration;
case 142:
return myConceptSortDirection;
case 143:
return myConceptSortOperation;
case 144:
return myConceptSortedMapOperation;
case 145:
return myConceptSortedMapType;
case 146:
return myConceptSortedSetOperation;
case 147:
return myConceptSortedSetType;
case 148:
return myConceptStackType;
case 149:
return myConceptStopStatement;
case 150:
return myConceptSubListOperation;
case 151:
return myConceptSubMapOperation;
case 152:
return myConceptSubSetOperation;
case 153:
return myConceptTailListOperation;
case 154:
return myConceptTailMapOperation;
case 155:
return myConceptTailOperation;
case 156:
return myConceptTailSetOperation;
case 157:
return myConceptTakeOperation;
case 158:
return myConceptTestAddElementOperation;
case 159:
return myConceptTestRemoveElementOperation;
case 160:
return myConceptToArrayOperation;
case 161:
return myConceptToIteratorOperation;
case 162:
return myConceptToListOperation;
case 163:
return myConceptTranslateOperation;
case 164:
return myConceptTreeMapCreator;
case 165:
return myConceptTreeSetCreator;
case 166:
return myConceptUnionOperation;
case 167:
return myConceptValueAccessOperation;
case 168:
return myConceptVisitAllOperation;
case 169:
return myConceptWhereOperation;
default :
throw new IllegalStateException();
}
}
