{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0sg.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractContainerCreator;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractContainerType;
  }
break;
case 2:
if (true) {
return myConceptAbstractEnumeratorOperation;
}
break;
case 3:
if (true) {
return myConceptAbstractIteratorOperation;
}
break;
case 4:
if (true) {
return myConceptAbstractMappingOperation;
}
break;
case 5:
if (true) {
return myConceptAbstractSetOperation;
}
break;
case 6:
if (true) {
return myConceptAddAllElementsOperation;
}
break;
case 7:
if (true) {
return myConceptAddAllSetElementsOperation;
}
break;
case 8:
if (true) {
return myConceptAddElementOperation;
}
break;
case 9:
if (true) {
return myConceptAddFirstElementOperation;
}
break;
case 10:
if (true) {
return myConceptAddLastElementOperation;
}
break;
case 11:
if (true) {
return myConceptAddSetElementOperation;
}
break;
case 12:
if (true) {
return myConceptAllConstant;
}
break;
case 13:
if (true) {
return myConceptAllOperation;
}
break;
case 14:
if (true) {
return myConceptAlsoSortOperation;
}
break;
case 15:
if (true) {
return myConceptAnyOperation;
}
break;
case 16:
if (true) {
return myConceptAsSequenceOperation;
}
break;
case 17:
if (true) {
return myConceptAsSynchronizedOperation;
}
break;
case 18:
if (true) {
return myConceptAsUnmodifiableOperation;
}
break;
case 19:
if (true) {
return myConceptBinaryOperation;
}
break;
case 20:
if (true) {
return myConceptChunkOperation;
}
break;
case 21:
if (true) {
return myConceptClearAllElementsOperation;
}
break;
case 22:
if (true) {
return myConceptClearSetOperation;
}
break;
case 23:
if (true) {
return myConceptCollectionType;
}
break;
case 24:
if (true) {
return myConceptComparatorSortOperation;
}
break;
case 25:
if (true) {
return myConceptConcatOperation;
}
break;
case 26:
if (true) {
return myConceptContainerIteratorType;
}
break;
case 27:
if (true) {
return myConceptContainsAllOperation;
}
break;
case 28:
if (true) {
return myConceptContainsKeyOperation;
}
break;
case 29:
if (true) {
return myConceptContainsOperation;
}
break;
case 30:
if (true) {
return myConceptContainsValueOperation;
}
break;
case 31:
if (true) {
return myConceptCustomContainerCreator;
}
break;
case 32:
if (true) {
return myConceptCustomContainerDeclaration;
}
break;
case 33:
if (true) {
return myConceptCustomContainers;
}
break;
case 34:
if (true) {
return myConceptCustomMapCreator;
}
break;
case 35:
if (true) {
return myConceptCutOperation;
}
break;
case 36:
if (true) {
return myConceptDequeType;
}
break;
case 37:
if (true) {
return myConceptDisjunctOperation;
}
break;
case 38:
if (true) {
return myConceptDistinctOperation;
}
break;
case 39:
if (true) {
return myConceptDowncastExpression;
}
break;
case 40:
if (true) {
return myConceptEnumeratorType;
}
break;
case 41:
if (true) {
return myConceptExcludeOperation;
}
break;
case 42:
if (true) {
return myConceptFindFirstOperation;
}
break;
case 43:
if (true) {
return myConceptFindLastOperation;
}
break;
case 44:
if (true) {
return myConceptFoldLeftOperation;
}
break;
case 45:
if (true) {
return myConceptFoldRightOperation;
}
break;
case 46:
if (true) {
return myConceptForEachStatement;
}
break;
case 47:
if (true) {
return myConceptForEachVariable;
}
break;
case 48:
if (true) {
return myConceptForEachVariableReference;
}
break;
case 49:
if (true) {
return myConceptGetCurrentOperation;
}
break;
case 50:
if (true) {
return myConceptGetElementOperation;
}
break;
case 51:
if (true) {
return myConceptGetEnumeratorOperation;
}
break;
case 52:
if (true) {
return myConceptGetFirstOperation;
}
break;
case 53:
if (true) {
return myConceptGetIndexOfOperation;
}
break;
case 54:
if (true) {
return myConceptGetIteratorOperation;
}
break;
case 55:
if (true) {
return myConceptGetKeysOperation;
}
break;
case 56:
if (true) {
return myConceptGetLastIndexOfOperation;
}
break;
case 57:
if (true) {
return myConceptGetLastOperation;
}
break;
case 58:
if (true) {
return myConceptGetNextOperation;
}
break;
case 59:
if (true) {
return myConceptGetSizeOperation;
}
break;
case 60:
if (true) {
return myConceptGetValuesOperation;
}
break;
case 61:
if (true) {
return myConceptHasNextOperation;
}
break;
case 62:
if (true) {
return myConceptHashMapCreator;
}
break;
case 63:
if (true) {
return myConceptHashSetCreator;
}
break;
case 64:
if (true) {
return myConceptHeadListOperation;
}
break;
case 65:
if (true) {
return myConceptHeadMapOperation;
}
break;
case 66:
if (true) {
return myConceptHeadSetOperation;
}
break;
case 67:
if (true) {
return myConceptIApplicableToCollection;
}
break;
case 68:
if (true) {
return myConceptIApplicableToDeque;
}
break;
case 69:
if (true) {
return myConceptIApplicableToList;
}
break;
case 70:
if (true) {
return myConceptIApplicableToNothing;
}
break;
case 71:
if (true) {
return myConceptIApplicableToQueue;
}
break;
case 72:
if (true) {
return myConceptIApplicableToStack;
}
break;
case 73:
if (true) {
return myConceptICollectionOperation;
}
break;
case 74:
if (true) {
return myConceptIContainerOperation;
}
break;
case 75:
if (true) {
return myConceptIDequeOperation;
}
break;
case 76:
if (true) {
return myConceptIListOperation;
}
break;
case 77:
if (true) {
return myConceptIQueueOperation;
}
break;
case 78:
if (true) {
return myConceptIStackOperation;
}
break;
case 79:
if (true) {
return myConceptInsertElementOperation;
}
break;
case 80:
if (true) {
return myConceptInternalSequenceOperation;
}
break;
case 81:
if (true) {
return myConceptIntersectOperation;
}
break;
case 82:
if (true) {
return myConceptIsEmptyOperation;
}
break;
case 83:
if (true) {
return myConceptIsNotEmptyOperation;
}
break;
case 84:
if (true) {
return myConceptIteratorType;
}
break;
case 85:
if (true) {
return myConceptJoinOperation;
}
break;
case 86:
if (true) {
return myConceptKeyAccessOperation;
}
break;
case 87:
if (true) {
return myConceptLinkedHashMapCreator;
}
break;
case 88:
if (true) {
return myConceptLinkedHashSetCreator;
}
break;
case 89:
if (true) {
return myConceptLinkedListCreator;
}
break;
case 90:
if (true) {
return myConceptLinkedListType;
}
break;
case 91:
if (true) {
return myConceptListCreatorWithInit;
}
break;
case 92:
if (true) {
return myConceptListElementAccessExpression;
}
break;
case 93:
if (true) {
return myConceptListType;
}
break;
case 94:
if (true) {
return myConceptMapAsSequenceVarRef;
}
break;
case 95:
if (true) {
return myConceptMapClearOperation;
}
break;
case 96:
if (true) {
return myConceptMapElement;
}
break;
case 97:
if (true) {
return myConceptMapEntry;
}
break;
case 98:
if (true) {
return myConceptMapInitializer;
}
break;
case 99:
if (true) {
return myConceptMapOperation;
}
break;
case 100:
if (true) {
return myConceptMapOperationExpression;
}
break;
case 101:
if (true) {
return myConceptMapRemoveOperation;
}
break;
case 102:
if (true) {
return myConceptMapType;
}
break;
case 103:
if (true) {
return myConceptMappingType;
}
break;
case 104:
if (true) {
return myConceptMappingsSetOperation;
}
break;
case 105:
if (true) {
return myConceptMoveNextOperation;
}
break;
case 106:
if (true) {
return myConceptMultiForEachPair;
}
break;
case 107:
if (true) {
return myConceptMultiForEachStatement;
}
break;
case 108:
if (true) {
return myConceptMultiForEachVariable;
}
break;
case 109:
if (true) {
return myConceptMultiForEachVariableReference;
}
break;
case 110:
if (true) {
return myConceptNoArgumentsSequenceOperation;
}
break;
case 111:
if (true) {
return myConceptOfTypeOperation;
}
break;
case 112:
if (true) {
return myConceptPageOperation;
}
break;
case 113:
if (true) {
return myConceptPeekOperation;
}
break;
case 114:
if (true) {
return myConceptPopOperation;
}
break;
case 115:
if (true) {
return myConceptPriorityQueueCreator;
}
break;
case 116:
if (true) {
return myConceptPushOperation;
}
break;
case 117:
if (true) {
return myConceptPutAllOperation;
}
break;
case 118:
if (true) {
return myConceptQueueType;
}
break;
case 119:
if (true) {
return myConceptReduceLeftOperation;
}
break;
case 120:
if (true) {
return myConceptReduceRightOperation;
}
break;
case 121:
if (true) {
return myConceptRemoveAllElementsOperation;
}
break;
case 122:
if (true) {
return myConceptRemoveAllSetElementsOperation;
}
break;
case 123:
if (true) {
return myConceptRemoveAtElementOperation;
}
break;
case 124:
if (true) {
return myConceptRemoveElementOperation;
}
break;
case 125:
if (true) {
return myConceptRemoveFirstElementOperation;
}
break;
case 126:
if (true) {
return myConceptRemoveLastElementOperation;
}
break;
case 127:
if (true) {
return myConceptRemoveOperation;
}
break;
case 128:
if (true) {
return myConceptRemoveSetElementOperation;
}
break;
case 129:
if (true) {
return myConceptRemoveWhereOperation;
}
break;
case 130:
if (true) {
return myConceptReverseOperation;
}
break;
case 131:
if (true) {
return myConceptSelectOperation;
}
break;
case 132:
if (true) {
return myConceptSequenceCreator;
}
break;
case 133:
if (true) {
return myConceptSequenceOperation;
}
break;
case 134:
if (true) {
return myConceptSequenceType;
}
break;
case 135:
if (true) {
return myConceptSetElementOperation;
}
break;
case 136:
if (true) {
return myConceptSetType;
}
break;
case 137:
if (true) {
return myConceptSingleArgumentSequenceOperation;
}
break;
case 138:
if (true) {
return myConceptSingletonSequenceCreator;
}
break;
case 139:
if (true) {
return myConceptSkipOperation;
}
break;
case 140:
if (true) {
return myConceptSkipStatement;
}
break;
case 141:
if (true) {
return myConceptSmartClosureParameterDeclaration;
}
break;
case 142:
if (true) {
return myConceptSortDirection;
}
break;
case 143:
if (true) {
return myConceptSortOperation;
}
break;
case 144:
if (true) {
return myConceptSortedMapOperation;
}
break;
case 145:
if (true) {
return myConceptSortedMapType;
}
break;
case 146:
if (true) {
return myConceptSortedSetOperation;
}
break;
case 147:
if (true) {
return myConceptSortedSetType;
}
break;
case 148:
if (true) {
return myConceptStackType;
}
break;
case 149:
if (true) {
return myConceptStopStatement;
}
break;
case 150:
if (true) {
return myConceptSubListOperation;
}
break;
case 151:
if (true) {
return myConceptSubMapOperation;
}
break;
case 152:
if (true) {
return myConceptSubSetOperation;
}
break;
case 153:
if (true) {
return myConceptTailListOperation;
}
break;
case 154:
if (true) {
return myConceptTailMapOperation;
}
break;
case 155:
if (true) {
return myConceptTailOperation;
}
break;
case 156:
if (true) {
return myConceptTailSetOperation;
}
break;
case 157:
if (true) {
return myConceptTakeOperation;
}
break;
case 158:
if (true) {
return myConceptTestAddElementOperation;
}
break;
case 159:
if (true) {
return myConceptTestRemoveElementOperation;
}
break;
case 160:
if (true) {
return myConceptToArrayOperation;
}
break;
case 161:
if (true) {
return myConceptToIteratorOperation;
}
break;
case 162:
if (true) {
return myConceptToListOperation;
}
break;
case 163:
if (true) {
return myConceptTranslateOperation;
}
break;
case 164:
if (true) {
return myConceptTreeMapCreator;
}
break;
case 165:
if (true) {
return myConceptTreeSetCreator;
}
break;
case 166:
if (true) {
return myConceptUnionOperation;
}
break;
case 167:
if (true) {
return myConceptValueAccessOperation;
}
break;
case 168:
if (true) {
return myConceptVisitAllOperation;
}
break;
case 169:
if (true) {
return myConceptWhereOperation;
}
break;
default :
}
}
return null;
}
