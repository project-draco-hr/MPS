{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0ob.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractRequestDescription;
      }
    break;
case 1:
  if (true) {
    return props_Address;
  }
break;
case 2:
if (true) {
return props_AddressReference;
}
break;
case 3:
if (true) {
return props_AgendaItem;
}
break;
case 4:
if (true) {
return props_Apple;
}
break;
case 5:
if (true) {
return props_Car;
}
break;
case 6:
if (true) {
return props_CombinedPerformance;
}
break;
case 7:
if (true) {
return props_Component;
}
break;
case 8:
if (true) {
return props_ComponentUsage;
}
break;
case 9:
if (true) {
return props_Concert;
}
break;
case 10:
if (true) {
return props_Container;
}
break;
case 11:
if (true) {
return props_DottedLine;
}
break;
case 12:
if (true) {
return props_DrawCommand;
}
break;
case 13:
if (true) {
return props_DrawLine;
}
break;
case 14:
if (true) {
return props_DrawRect;
}
break;
case 15:
if (true) {
return props_EmptyLine;
}
break;
case 16:
if (true) {
return props_FormDescription;
}
break;
case 17:
if (true) {
return props_Fruit;
}
break;
case 18:
if (true) {
return props_FruitPlate;
}
break;
case 19:
if (true) {
return props_IncompleteCommand;
}
break;
case 20:
if (true) {
return props_Item;
}
break;
case 21:
if (true) {
return props_ItemReference;
}
break;
case 22:
if (true) {
return props_LineStyle;
}
break;
case 23:
if (true) {
return props_ListOfDrawCommands;
}
break;
case 24:
if (true) {
return props_OperationOnAddress;
}
break;
case 25:
if (true) {
return props_Orange;
}
break;
case 26:
if (true) {
return props_Participant;
}
break;
case 27:
if (true) {
return props_Performance;
}
break;
case 28:
if (true) {
return props_PerformanceWithTitle;
}
break;
case 29:
if (true) {
return props_RaceParticipant;
}
break;
case 30:
if (true) {
return props_Request;
}
break;
case 31:
if (true) {
return props_SimplifiedFormDescription;
}
break;
case 32:
if (true) {
return props_Singer;
}
break;
case 33:
if (true) {
return props_SolidLine;
}
break;
case 34:
if (true) {
return props_SomeForm;
}
break;
case 35:
if (true) {
return props_StreetOperation;
}
break;
case 36:
if (true) {
return props_StringDescription;
}
break;
case 37:
if (true) {
return props_Truck;
}
break;
case 38:
if (true) {
return props_ZipOperation;
}
break;
default :
}
}
throw new IllegalStateException();
}
