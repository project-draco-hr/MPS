{
  DebugInfoManager manager=DebugInfoManager.getInstance();
  manager.addDebuggableConcept("jetbrains.mps.baseLanguage.structure.Statement",new Mapper2<SNode,Project,AbstractMPSBreakpoint>(){
    public AbstractMPSBreakpoint value(    SNode debuggableNode,    Project project){
      return new MPSBreakpoint(debuggableNode,project);
    }
  }
);
  manager.addDebuggableConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration",new Mapper2<SNode,Project,AbstractMPSBreakpoint>(){
    public AbstractMPSBreakpoint value(    SNode debuggableNode,    Project project){
      return new MPSBreakpoint(debuggableNode,project);
    }
  }
);
  manager.addDebuggableConcept("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration",new Mapper2<SNode,Project,AbstractMPSBreakpoint>(){
    public AbstractMPSBreakpoint value(    SNode debuggableNode,    Project project){
      return new MPSBreakpoint(debuggableNode,project);
    }
  }
);
  manager.addDebuggableConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",new Mapper2<SNode,Project,AbstractMPSBreakpoint>(){
    public AbstractMPSBreakpoint value(    SNode debuggableNode,    Project project){
      return new MPSBreakpoint(debuggableNode,project);
    }
  }
);
  manager.addScopeConcept("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",new Mapper<SNode,List<SNode>>(){
    public List<SNode> value(    SNode scopeNode){
      return SLinkOperations.getTargets(scopeNode,"parameter",true);
    }
  }
);
  manager.addScopeConcept("jetbrains.mps.baseLanguage.structure.StatementList",new Mapper<SNode,List<SNode>>(){
    public List<SNode> value(    SNode scopeNode){
      List<SNode> result=new ArrayList<SNode>();
      for (      SNode statement : SLinkOperations.getTargets(scopeNode,"statement",true)) {
        if (SNodeOperations.isInstanceOf(statement,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
          ListSequence.fromList(result).addElement(SLinkOperations.getTarget(SNodeOperations.cast(statement,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),"localVariableDeclaration",true));
        }
      }
      return result;
    }
  }
);
  manager.addScopeConcept("jetbrains.mps.baseLanguage.structure.ForeachStatement",new Mapper<SNode,List<SNode>>(){
    public List<SNode> value(    SNode scopeNode){
      return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(scopeNode,"variable",true));
    }
  }
);
  manager.addScopeConcept("jetbrains.mps.baseLanguage.structure.ForStatement",new Mapper<SNode,List<SNode>>(){
    public List<SNode> value(    SNode scopeNode){
      return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(scopeNode,"variable",true));
    }
  }
);
  manager.addScopeConcept("jetbrains.mps.baseLanguage.structure.CatchClause",new Mapper<SNode,List<SNode>>(){
    public List<SNode> value(    SNode scopeNode){
      return ListSequence.fromListAndArray(new ArrayList<SNode>(),SLinkOperations.getTarget(scopeNode,"throwable",true));
    }
  }
);
  manager.addUnitConcept("jetbrains.mps.baseLanguage.structure.AnonymousClass",new Mapper<SNode,String>(){
    public String value(    SNode unitNode){
      return AnonymousClass_Behavior.call_getJavaName_2977939203456914071(unitNode);
    }
  }
);
  manager.addUnitConcept("jetbrains.mps.baseLanguage.structure.Interface",new Mapper<SNode,String>(){
    public String value(    SNode unitNode){
      String fqName=INamedConcept_Behavior.call_getFqName_1213877404258(unitNode);
      if (SNodeOperations.getAncestor(unitNode,"jetbrains.mps.baseLanguage.structure.Classifier",false,false) == null) {
        return fqName;
      }
      int index=fqName.lastIndexOf(".");
      if (index <= 0) {
        return fqName;
      }
      return fqName.substring(0,index) + "$" + fqName.substring(index + 1);
    }
  }
);
  manager.addUnitConcept("jetbrains.mps.baseLanguage.structure.ClassConcept",new Mapper<SNode,String>(){
    public String value(    SNode unitNode){
      String fqName=INamedConcept_Behavior.call_getFqName_1213877404258(unitNode);
      if (SNodeOperations.getAncestor(unitNode,"jetbrains.mps.baseLanguage.structure.Classifier",false,false) == null) {
        return fqName;
      }
      int index=fqName.lastIndexOf(".");
      if (index <= 0) {
        return fqName;
      }
      return fqName.substring(0,index) + "$" + fqName.substring(index + 1);
    }
  }
);
  BreakpointManagerComponent.notifyDebuggableConceptsAdded();
}
