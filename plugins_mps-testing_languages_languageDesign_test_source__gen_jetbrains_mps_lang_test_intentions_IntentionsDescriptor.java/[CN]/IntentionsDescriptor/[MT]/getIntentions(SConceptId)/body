{
  final int index=Arrays.binarySearch(myId2Index,conceptId.getIdValue());
switch (index) {
case 0:
    if (myIntentions0 == null) {
      myIntentions0=new IntentionFactory[8];
      myIntentions0[0]=new AddTestAnnotation_Intention();
      myIntentions0[1]=new AddOperationsAnnotation_Intention();
      myIntentions0[2]=new AddCellAnnotation_Intention();
      myIntentions0[3]=new AddMockAnnotation_Intention();
      myIntentions0[4]=new AddNodeHasErrorAnnotation_Intention();
      myIntentions0[5]=new AddScopeTestAnnotation_Intention();
      myIntentions0[6]=new AddNodeHasWarningAnnotation_Intention();
      myIntentions0[7]=new SpecifyRuleReferences_Intention();
    }
  return Arrays.asList(myIntentions0);
case 1:
if (myIntentions1 == null) {
  myIntentions1=new IntentionFactory[1];
  myIntentions1[0]=new AddMessageAnnotation_Intention();
}
return Arrays.asList(myIntentions1);
case 2:
if (myIntentions2 == null) {
myIntentions2=new IntentionFactory[1];
myIntentions2[0]=new AddScopeExpectedNodes_Intention();
}
return Arrays.asList(myIntentions2);
default :
return null;
}
}
