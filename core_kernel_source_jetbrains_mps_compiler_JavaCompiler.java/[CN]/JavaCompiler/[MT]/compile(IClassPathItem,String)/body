{
  Map compilerOptions=new HashMap();
  compilerOptions.put(CompilerOptions.OPTION_Source,CompilerOptions.VERSION_1_6);
  String actualJavaTargetVersion=targetJavaVersion != null ? targetJavaVersion : JavaCompilerOptionsComponent.DEFAULT_JAVA_VERSION;
  compilerOptions.put(CompilerOptions.OPTION_Compliance,actualJavaTargetVersion);
  compilerOptions.put(CompilerOptions.OPTION_TargetPlatform,actualJavaTargetVersion);
  compilerOptions.put(CompilerOptions.OPTION_LocalVariableAttribute,CompilerOptions.GENERATE);
  compilerOptions.put(CompilerOptions.OPTION_LineNumberAttribute,CompilerOptions.GENERATE);
  compilerOptions.put(CompilerOptions.OPTION_SourceFileAttribute,CompilerOptions.GENERATE);
  CompilerOptions options=new CompilerOptions(compilerOptions);
  org.eclipse.jdt.internal.compiler.Compiler c=new Compiler(new MyNameEnvironment(classPath),new MyErrorHandlingPolicy(),options,new MyCompilerRequestor(),new DefaultProblemFactory());
  try {
    c.compile(myCompilationUnits.values().toArray(new CompilationUnit[0]));
  }
 catch (  RuntimeException ex) {
    onFatalError(ex.getMessage());
  }
}
