{
  SNode parent=helper.parent(thisNode);
  String parentLocation=helper.contentLocations().get(parent);
  String zipLocation=parentLocation + "/" + helper.toString(SLinkOperations.getTarget(thisNode,"containerName",true));
  helper.locations().put(thisNode,zipLocation);
  boolean needUnpack=false;
  for (  SNode c : SLinkOperations.getTargets(thisNode,"children",true)) {
    if (helper.isRequired(c)) {
      needUnpack=true;
      break;
    }
  }
  if (needUnpack) {
    String tempPath=helper.getPathProvider().createTempPath(SPropertyOperations.getString(thisNode,"name"),"deps",SPropertyOperations.getString(SNodeOperations.getAncestor(thisNode,"jetbrains.mps.buildScript.structure.BuildProject",false,false),"name"));
    helper.emit(new BuildLayout_Jar_Behavior.QuotationClass_20awhq_a0a0b0h0b().createNode(tempPath));
    helper.emit(new BuildLayout_Jar_Behavior.QuotationClass_20awhq_a0a0c0h0b().createNode(zipLocation,tempPath));
    helper.contentLocations().put(thisNode,tempPath);
  }
}
