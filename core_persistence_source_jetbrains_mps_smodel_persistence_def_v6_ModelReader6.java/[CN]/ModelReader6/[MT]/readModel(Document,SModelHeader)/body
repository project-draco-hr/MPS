{
  Element rootElement=document.getRootElement();
  SModelReference modelReference=SModelReference.fromString(rootElement.getAttributeValue(ModelPersistence.MODEL_UID));
  DefaultSModel model=new DefaultSModel(modelReference);
  model.setPersistenceVersion(getVersion());
  model.getSModelHeader().updateDefaults(header);
  myHelper=new VersionUtil(modelReference);
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.LANGUAGE)) {
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    ((jetbrains.mps.smodel.SModel)model).addLanguage(ModuleReference.fromString(languageNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION)) {
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    ((jetbrains.mps.smodel.SModel)model).addEngagedOnGenerationLanguage(ModuleReference.fromString(languageNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.DEVKIT)) {
    String devkitNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    ((jetbrains.mps.smodel.SModel)model).addDevKit(ModuleReference.fromString(devkitNamespace));
  }
  for (  Element element : (List<Element>)rootElement.getChildren(ModelPersistence.IMPORT_ELEMENT)) {
    String indexValue=element.getAttributeValue(ModelPersistence.MODEL_IMPORT_INDEX);
    int usedModelVersion=Integer.parseInt(element.getAttributeValue(ModelPersistence.VERSION,"-1"));
    String importedModelUIDString=element.getAttributeValue(ModelPersistence.MODEL_UID);
    myHelper.addImport(model,indexValue,importedModelUIDString,usedModelVersion,element.getAttributeValue(ModelPersistence.IMPLICIT) != null);
  }
  for (  Element child : (List<Element>)rootElement.getChildren(ModelPersistence.NODE)) {
    SNode snode=readNode(child,model);
    if (snode != null) {
      model.addRootNode(snode);
    }
  }
  return model;
}
