{
  Set<String> classpathItems=SetSequence.fromSet(new LinkedHashSet<String>());
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(MergeDriverPacker.mpsAddJars).select(new ISelector<String,String>(){
    public String select(    String it){
      return PathManager.getLibPath() + File.separator + it;
    }
  }
));
  final Iterable<String> CLASSPATHS=Arrays.asList("runtime","kernel","openapi","make-runtime","generator","typesystemEngine","findUsages-runtime","refactoring-runtime","analyzers","persistence");
  String homePath=PathManager.getHomePath();
  final String corePath=homePath + File.separator + "core";
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(CLASSPATHS).select(new ISelector<String,String>(){
    public String select(    String it){
      return corePath + File.separator + it+ File.separator+ "classes";
    }
  }
));
  final String languagesPath=homePath + File.separator + "languages";
  final Iterable<String> OTHER_CLASSES=Arrays.asList("closures","collections","tuples");
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String,String>(){
    public String select(    String it){
      return languagesPath + File.separator + "baseLanguage"+ File.separator+ it+ File.separator+ "runtime"+ File.separator+ "classes";
    }
  }
));
  SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage"+ File.separator+ "baseLanguage"+ File.separator+ "solutions"+ File.separator+ "jetbrains.mps.baseLanguage.search"+ File.separator+ "classes");
  SetSequence.fromSet(classpathItems).addElement(languagesPath + File.separator + "baseLanguage"+ File.separator+ "baseLanguage"+ File.separator+ "solutions"+ File.separator+ "jetbrains.mps.baseLanguage.util"+ File.separator+ "classes");
  SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + File.separator + "lib"+ File.separator+ "classes");
  return classpathItems;
}
