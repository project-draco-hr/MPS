{
  Set<String> classpathItems=SetSequence.fromSet(new LinkedHashSet<String>());
  final String fsep=File.separator;
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(MergeDriverPacker.mpsAddJars).select(new ISelector<String,String>(){
    public String select(    String it){
      return PathManager.getLibPath() + fsep + it;
    }
  }
));
  final Iterable<String> CLASSPATHS=Arrays.asList("kernel","logging","openapi","smodel","mps-core","make-runtime","kernel" + fsep + "dataFlowRuntime","project","generator","typesystemEngine","findUsages-runtime","refactoring-runtime","analyzers","persistence","platform","components","migration-runtime","textgen","java-stub","aspects" + fsep + "behavior"+ fsep+ "behavior-api","aspects" + fsep + "behavior"+ fsep+ "behavior-runtime","make-runtime" + fsep + "solutions"+ fsep+ "jetbrains.mps.make.facets");
  String homePath=PathManager.getHomePath();
  final String corePath=homePath + fsep + "core";
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(CLASSPATHS).select(new ISelector<String,String>(){
    public String select(    String it){
      return corePath + fsep + it+ fsep+ "classes";
    }
  }
));
  final String languagesPath=homePath + fsep + "languages";
  final Iterable<String> OTHER_CLASSES=Arrays.asList("closures","collections","tuples");
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String,String>(){
    public String select(    String it){
      return languagesPath + fsep + "baseLanguage"+ fsep+ it+ fsep+ "runtime"+ fsep+ "classes";
    }
  }
));
  SetSequence.fromSet(classpathItems).addElement(languagesPath + fsep + "baseLanguage"+ fsep+ "baseLanguage"+ fsep+ "solutions"+ fsep+ "jetbrains.mps.baseLanguage.search"+ fsep+ "classes");
  SetSequence.fromSet(classpathItems).addElement(languagesPath + fsep + "baseLanguage"+ fsep+ "baseLanguage"+ fsep+ "solutions"+ fsep+ "jetbrains.mps.baseLanguage.util"+ fsep+ "classes");
  SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + fsep + "lib"+ fsep+ "classes");
  return classpathItems;
}
