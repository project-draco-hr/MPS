{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseEmitJumpStatement_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseEmitVariableStatement_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new BaseInstructionOperation_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new DataFlowBuilderDeclaration_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitCodeForStatement_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitLabelStatement_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitMayBeUnreachable_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitNopStatement_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitRetStatement_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitTryFinallyStatement_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new EmitWriteStatement_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetCodeForExpression_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InsertAfter_Editor()));
case 13:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new InsertBefore_Editor()));
case 14:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new LabelPosition_Editor()));
case 15:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new RelativePosition_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
