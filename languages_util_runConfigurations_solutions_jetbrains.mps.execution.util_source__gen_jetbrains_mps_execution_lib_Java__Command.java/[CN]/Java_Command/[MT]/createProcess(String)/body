{
  String java=Java_Command.getJavaCommand(myJrePath);
  String classPathString=IterableUtils.join(ListSequence.fromList(myClassPath).<String>select(new ISelector<String,String>(){
    public String select(    String it){
      return Java_Command.protect(it);
    }
  }
),File.pathSeparator);
  if (StringUtils.isEmpty(className)) {
    throw new ExecutionException("Classname is empty");
  }
  if (check_yvpt_a0a3a0a(myProgramParameter) + classPathString.length() >= Java_Command.getMaxCommandLine()) {
    try {
      String parametersFile=Java_Command.writeToTmpFile(ProcessHandlerBuilder.splitCommandInParts((myProgramParameter == null ? "" : myProgramParameter)));
      String classPathFile=Java_Command.writeToTmpFile(myClassPath);
      String classRunnerClassPath=IterableUtils.join(ListSequence.fromList(Java_Command.getClassRunnerClassPath()).<String>select(new ISelector<String,String>(){
        public String select(        String it){
          return Java_Command.protect(it);
        }
      }
),File.pathSeparator);
      return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter).append(myDebuggerSettings).appendKey("classpath",classRunnerClassPath).append("jetbrains.mps.execution.lib.startup.ClassRunner").appendKey(("c"),className).appendKey(("p"),classPathFile).appendKey(("f"),parametersFile).build(myWorkingDirectory);
    }
 catch (    FileNotFoundException e) {
      throw new ExecutionException("Could not create temporal file for program parameters.",e);
    }
  }
 else {
    return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter).append(myDebuggerSettings).appendKey("classpath",classPathString).append(className).append(myProgramParameter).build(myWorkingDirectory);
  }
}
