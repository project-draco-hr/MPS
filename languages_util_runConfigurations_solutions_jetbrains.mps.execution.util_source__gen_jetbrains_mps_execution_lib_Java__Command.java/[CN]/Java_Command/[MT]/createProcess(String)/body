{
  String java=Java_Command.getJavaCommand(myJrePath);
  String classPathString=IterableUtils.join(ListSequence.fromList(myClassPath).<String>select(new ISelector<String,String>(){
    public String select(    String it){
      return Java_Command.protect(it);
    }
  }
),File.pathSeparator);
  if (StringUtils.isEmpty(className)) {
    throw new ExecutionException("Classname is empty");
  }
  if (check_yvpt_a0a3a0a(myProgramParameter) + classPathString.length() >= Java_Command.getMaxCommandLine()) {
    try {
      String parametersFile=Java_Command.writeToTmpFile(myProgramParameter);
      String classpathFile=Java_Command.writeToTmpFile(classPathString);
      return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter).append(myDebuggerSettings).appendKey("classpath",IterableUtils.join(ListSequence.fromList(Java_Command.getMpsClassPath()).<String>select(new ISelector<String,String>(){
        public String select(        String it){
          return Java_Command.protect(it);
        }
      }
),File.pathSeparator)).append(ClassRunner.class.getName()).appendKey(ClassRunner.CLASS_PREFIX,className).appendKey(ClassRunner.CLASSPATH_PREFIX,classpathFile).appendKey(ClassRunner.FILE_PREFIX,parametersFile).build(myWorkingDirectory);
    }
 catch (    FileNotFoundException e) {
      throw new ExecutionException("Could not create temporal file for program parameters.",e);
    }
  }
 else {
    return new ProcessHandlerBuilder().append(java).append(myVirtualMachineParameter).append(myDebuggerSettings).appendKey("classpath",classPathString).append(className).append(myProgramParameter).build(myWorkingDirectory);
  }
}
