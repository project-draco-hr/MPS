{
  if ("jetbrains.mps.lang.quotation.structure.AbstractAntiquotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new AbstractAntiquotation_Constraints());
  }
  if ("jetbrains.mps.lang.quotation.structure.Antiquotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.quotation.structure.Antiquotation"));
  }
  if ("jetbrains.mps.lang.quotation.structure.Quotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new Quotation_Constraints());
  }
  if ("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation"));
  }
  if ("jetbrains.mps.lang.quotation.structure.ListAntiquotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.quotation.structure.ListAntiquotation"));
  }
  if ("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation"));
  }
  return null;
}
