{
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    SNode clazz=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    if ((SLinkOperations.getTarget(clazz,"superclass",true) != null)) {
      SNode superClassifier=SLinkOperations.getTarget(SLinkOperations.getTarget(clazz,"superclass",true),"classifier",false);
      if (addIfNotContains(visitedClassifiers,superClassifier)) {
        collectOverridingMethods(superClassifier,nameToMethodsMap,visitedClassifiers);
      }
    }
    ListSequence.fromList(SLinkOperations.getTargets(clazz,"implementedInterface",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"classifier",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return addIfNotContains(visitedClassifiers,it);
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        collectOverridingMethods(it,nameToMethodsMap,visitedClassifiers);
      }
    }
);
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      SNode superClassifier=SLinkOperations.getTarget(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false);
      if (addIfNotContains(visitedClassifiers,superClassifier)) {
        collectOverridingMethods(superClassifier,nameToMethodsMap,visitedClassifiers);
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"classifier",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return addIfNotContains(visitedClassifiers,it);
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        collectOverridingMethods(it,nameToMethodsMap,visitedClassifiers);
      }
    }
);
  }
}
