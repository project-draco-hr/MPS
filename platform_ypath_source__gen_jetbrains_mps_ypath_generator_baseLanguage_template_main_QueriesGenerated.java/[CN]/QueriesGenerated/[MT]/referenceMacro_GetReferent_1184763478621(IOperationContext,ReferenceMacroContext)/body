{
  final SNode fun=SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.structure.ConceptFunction",false,false);
  SNode feature=SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.ypath.structure.IParamFeature",false,false);
  SNode designClass=_context.getGenerator().findOutputNodeByInputNodeAndMappingName(feature,"feature_design");
  SNode method=ListSequence.fromList(SLinkOperations.getTargets(designClass,"method",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getString(it,"name").equals(SConceptPropertyOperations.getString(fun,"alias"));
    }
  }
).first();
  return ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return "nodeType".equals(SPropertyOperations.getString(it,"name"));
    }
  }
).first();
}
