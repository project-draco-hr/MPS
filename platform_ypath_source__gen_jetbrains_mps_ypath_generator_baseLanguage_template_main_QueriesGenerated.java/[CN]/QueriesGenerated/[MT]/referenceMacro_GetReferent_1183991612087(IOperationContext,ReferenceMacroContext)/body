{
  SNode fun=SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.structure.ConceptFunction",false,false);
  SNode body=_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(fun,"body",true),"function_body");
  SNode imd=SNodeOperations.getAncestor(body,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,false);
  return ListSequence.fromList(SLinkOperations.getTargets(imd,"parameter",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getString(it,"name").equals("value");
    }
  }
).first();
}
