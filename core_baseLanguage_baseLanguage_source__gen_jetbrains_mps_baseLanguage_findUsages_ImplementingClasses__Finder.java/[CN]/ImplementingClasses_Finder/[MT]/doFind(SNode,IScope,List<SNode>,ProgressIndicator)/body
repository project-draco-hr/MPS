{
  List<SNode> derivedInterfaces=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder",node,scope,indicator);
  ListSequence.fromList(derivedInterfaces).addElement(node);
  List<SNode> derivedInterfacesUsages=new ArrayList<SNode>();
  for (  SNode derivedInterface : derivedInterfaces) {
    ListSequence.fromList(derivedInterfacesUsages).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder",derivedInterface,scope,indicator)));
  }
  for (  SNode interfaceNode : derivedInterfacesUsages) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (SNodeOperations.hasRole(interfaceNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
        ListOperations.addElement(_results,SNodeOperations.getParent(interfaceNode));
        for (        SNode classNode : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",SNodeOperations.getParent(interfaceNode),scope,indicator))) {
          ListOperations.addElement(_results,classNode);
        }
      }
    }
  }
}
