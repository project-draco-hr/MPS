{
  List<SNode> derivedInterfaces=this.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder",node,scope);
  ListOperations.addElement(derivedInterfaces,node);
  List<SNode> derivedInterfacesUsages=new ArrayList<SNode>();
  for (  SNode derivedInterface : derivedInterfaces) {
    ListOperations.addAllElements(derivedInterfacesUsages,this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",derivedInterface,scope));
  }
  for (  SNode interfaceNode : derivedInterfacesUsages) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode,null,false,false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (SNodeOperations.hasRole(interfaceNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
        ListOperations.addElement(_results,SNodeOperations.getParent(interfaceNode,null,false,false));
        for (        SNode classNode : this.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",interfaceNode,scope)) {
          ListOperations.addElement(_results,classNode);
        }
      }
    }
  }
}
