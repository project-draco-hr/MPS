{
  List<SNode> derivedInterfaces=this.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder",node,scope,monitor);
  ListOperations.addElement(derivedInterfaces,node);
  List<SNode> derivedInterfacesUsages=new ArrayList<SNode>();
  for (  SNode derivedInterface : derivedInterfaces) {
    ListOperations.addAllElements(derivedInterfacesUsages,this.executeFinder("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder",derivedInterface,scope,monitor));
  }
  for (  SNode interfaceNode : derivedInterfacesUsages) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode,null,false,false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (SNodeOperations.hasRole(interfaceNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
        ListOperations.addElement(_results,SNodeOperations.getParent(interfaceNode,null,false,false));
{
          ICursor<SNode> _zCursor2=CursorFactory.createCursor(this.executeFinder("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder",interfaceNode,scope,monitor));
          try {
            while (_zCursor2.moveToNext()) {
              SNode classNode=_zCursor2.getCurrent();
              ListOperations.addElement(_results,classNode);
            }
          }
  finally {
            _zCursor2.release();
          }
        }
      }
    }
  }
}
