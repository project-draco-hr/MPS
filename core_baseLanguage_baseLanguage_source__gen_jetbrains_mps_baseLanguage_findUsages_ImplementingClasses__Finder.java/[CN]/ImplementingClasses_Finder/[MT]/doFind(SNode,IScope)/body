{
  List<SNode> _results=new ArrayList<SNode>();
{
    List<SNode> derivedInterfaces=this.executejetbrainsMpsBaseLanguageFindUsagesDerivedInterfaces_Finder(node,scope);
    ListOperations.addElement(derivedInterfaces,node);
    List<SNode> derivedInterfacesUsages=new ArrayList<SNode>();
    for (    SNode derivedInterface : derivedInterfaces) {
      ListOperations.addElement(_results,derivedInterface);
      ListOperations.addAllElements(derivedInterfacesUsages,this.executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(derivedInterface,scope));
    }
    for (    SNode interfaceNode : derivedInterfacesUsages) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode,null,false,false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        if (SNodeOperations.hasRole(interfaceNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
          ListOperations.addElement(_results,SNodeOperations.getParent(interfaceNode,null,false,false));
          for (          SNode classNode : this.executejetbrainsMpsBaseLanguageFindUsagesDerivedClasses_Finder(interfaceNode,scope)) {
            ListOperations.addElement(_results,classNode);
          }
        }
      }
    }
  }
  return _results;
}
