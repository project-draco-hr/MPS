{
  List<SearchResult> derivedInterfaces=new ArrayList<SearchResult>();
  derivedInterfaces.add(new SearchResult(new SNodePointer(node),""));
  try {
    GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder").newInstance();
    SNode _node=node;
    IScope _scope;
    _scope=scope;
    boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Interface");
    if (!(rightConcept)) {
      ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
    }
 else {
      boolean isApplicable=_finder.isApplicable(_node);
      if (!(isApplicable)) {
        ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
      }
 else {
        SearchResults results_1=_finder.find(new SearchQuery(_node,_scope));
        for (        SearchResult result : results_1.getSearchResults()) {
          derivedInterfaces.add(result);
        }
      }
    }
  }
 catch (  Throwable t) {
    ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder" + "\"  Message:"+ t.getMessage());
  }
  List<SearchResult> derivedInterfacesUsages=new ArrayList<SearchResult>();
  for (  SearchResult derivedInterface : derivedInterfaces) {
    results.getSearchedNodePointers().add(new SNodePointer(derivedInterface.getNode()));
    try {
      GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder").newInstance();
      SNode _node=derivedInterface.getNode();
      IScope _scope;
      _scope=scope;
      boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.core.structure.BaseConcept");
      if (!(rightConcept)) {
        ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
      }
 else {
        boolean isApplicable=_finder.isApplicable(_node);
        if (!(isApplicable)) {
          ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
        }
 else {
          SearchResults results_2=_finder.find(new SearchQuery(_node,_scope));
          for (          SearchResult result : results_2.getSearchResults()) {
            derivedInterfacesUsages.add(result);
          }
        }
      }
    }
 catch (    Throwable t) {
      ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder" + "\"  Message:"+ t.getMessage());
    }
  }
  for (  SearchResult interfaceResult : derivedInterfacesUsages) {
    SNode resNode=interfaceResult.getNode();
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(resNode,null,false,false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (SNodeOperations.hasRole(resNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
        results.getSearchResults().add(new SearchResult(new SNodePointer(SNodeOperations.getParent(resNode,null,false,false)),"Implementing Classes"));
        List<SearchResult> classesResult=new ArrayList<SearchResult>();
        try {
          GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
          SNode _node=SNodeOperations.getParent(resNode,null,false,false);
          IScope _scope;
          _scope=scope;
          boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ClassConcept");
          if (!(rightConcept)) {
            ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
          }
 else {
            boolean isApplicable=_finder.isApplicable(_node);
            if (!(isApplicable)) {
              ImplementingClasses_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
            }
 else {
              SearchResults results_3=_finder.find(new SearchQuery(_node,_scope));
              for (              SearchResult result : results_3.getSearchResults()) {
                classesResult.add(result);
              }
            }
          }
        }
 catch (        Throwable t) {
          ImplementingClasses_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:"+ t.getMessage());
        }
        for (        SearchResult classResult : classesResult) {
          results.getSearchResults().add(new SearchResult(new SNodePointer(classResult.getNode()),"Implementing Classes"));
        }
      }
    }
  }
}
