{
  List<SNode> derivedInterfaces=this.executejetbrainsMpsBaseLanguageFindUsagesDerivedInterfaces_Finder(node,scope);
  ListOperations.addElement(derivedInterfaces,node);
  List<SNode> derivedInterfacesUsages=new ArrayList<SNode>();
  for (  SNode derivedInterface : derivedInterfaces) {
    results.getSearchedNodePointers().add(new SNodePointer(derivedInterface));
    ListOperations.addAllElements(derivedInterfacesUsages,this.executejetbrainsMpsBootstrapStructureLanguageFindUsagesNodeUsages_Finder(derivedInterface,scope));
  }
  for (  SNode interfaceNode : derivedInterfacesUsages) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(interfaceNode,null,false,false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (SNodeOperations.hasRole(interfaceNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface")) {
        results.getSearchResults().add(new SearchResult(new SNodePointer(SNodeOperations.getParent(interfaceNode,null,false,false)),"Implementing Classes"));
        for (        SNode classNode : this.executejetbrainsMpsBaseLanguageFindUsagesDerivedClasses_Finder(interfaceNode,scope)) {
          results.getSearchResults().add(new SearchResult(new SNodePointer(classNode),"Implementing Classes"));
        }
      }
    }
  }
}
