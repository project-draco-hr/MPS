{
  int hash=conceptFqName.hashCode();
  if (hash == -1751214806) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandList","jetbrains.mps.bash.structure.InputLine");
  }
  if (hash == -1688580460) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLines","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1169679804) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ShellScript","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept");
  }
  if (hash == -478649446) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept");
  }
  if (hash == -162753593) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordList","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == -1791009375) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncOperator","jetbrains.mps.bash.structure.FollowingCommandList");
  }
  if (hash == -942253325) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandTerminator","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 610030745) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonTerminator","jetbrains.mps.bash.structure.CommandTerminator");
  }
  if (hash == -191301340) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncTerminator","jetbrains.mps.bash.structure.CommandTerminator");
  }
  if (hash == -130393050) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == 918159304) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UntilLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand");
  }
  if (hash == -1329630486) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command");
  }
  if (hash == -1075895787) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WhileLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand");
  }
  if (hash == -1296101536) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForeachCommand","jetbrains.mps.bash.structure.AbstractLoopCommand");
  }
  if (hash == -1380544268) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableNameDeclaration","jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.INamedConcept");
  }
  if (hash == -958947455) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForCommand","jetbrains.mps.bash.structure.AbstractLoopCommand");
  }
  if (hash == -1395519135) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1861239375) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IfCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == -1952887480) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ElifCommand","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == -242628098) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseClause","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1165178012) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == 627780097) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolon","jetbrains.mps.bash.structure.CaseTerminator");
  }
  if (hash == 2094558326) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseTerminator","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 663266273) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonEt","jetbrains.mps.bash.structure.CaseTerminator");
  }
  if (hash == 2001254032) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolonEt","jetbrains.mps.bash.structure.CaseTerminator");
  }
  if (hash == -1871775472) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SelectCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == -932595991) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupingCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == 1812296375) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BraceGrouping","jetbrains.mps.bash.structure.GroupingCommand");
  }
  if (hash == -335053844) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketGrouping","jetbrains.mps.bash.structure.GroupingCommand");
  }
  if (hash == 356461506) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression");
  }
  if (hash == 451754973) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MulExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 753745002) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 1167967643) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -1026073478) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AddExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -519018663) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SubExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -1004536542) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand","jetbrains.mps.bash.structure.IArithmeticHolder");
  }
  if (hash == 392289170) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == 1141822899) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostVariableExpression","jetbrains.mps.bash.structure.WordExpression");
  }
  if (hash == 1570872216) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreVariableExpression","jetbrains.mps.bash.structure.WordExpression");
  }
  if (hash == 444388919) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostIncExpression","jetbrains.mps.bash.structure.PostVariableExpression");
  }
  if (hash == 749659483) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostDecExpression","jetbrains.mps.bash.structure.PostVariableExpression");
  }
  if (hash == 1640314162) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreIncExpression","jetbrains.mps.bash.structure.PreVariableExpression");
  }
  if (hash == 1945584726) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreDecExpression","jetbrains.mps.bash.structure.PreVariableExpression");
  }
  if (hash == 664537218) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryPlusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression");
  }
  if (hash == 590404728) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryMinusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression");
  }
  if (hash == -2140698457) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression");
  }
  if (hash == -2086776369) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression");
  }
  if (hash == 293389046) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExpExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -67688081) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 1608290086) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 899464561) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -87418986) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -240007523) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 1985326157) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -1951741919) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseXorExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -41441083) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 883352869) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -1539845778) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommaExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 1015035728) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IntegerLiteral","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == -1457229770) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DecimalConstant","jetbrains.mps.bash.structure.IntegerLiteral");
  }
  if (hash == -729531539) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HexIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral");
  }
  if (hash == -1309172283) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasedIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral");
  }
  if (hash == 1343773505) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketExpression","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == 363248404) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 1218207569) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == 422166669) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -1711583824) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression");
  }
  if (hash == -281672704) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalOperation","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == -1118189049) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseAssingmentExpression","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == -32343786) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == 1928991312) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PlusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == 1738033160) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MinusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -1234235357) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -231289367) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -766095910) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -1550893997) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -1480136900) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -780311505) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -1835186215) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -1294643021) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.XorAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression");
  }
  if (hash == -551242325) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseVariableAssingment","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == -49554310) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment");
  }
  if (hash == 177057029) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasicParameterExpansion","jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit");
  }
  if (hash == -1770336042) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpansion","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IArithmeticHolder");
  }
  if (hash == -694653434) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TildeExpansion","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit");
  }
  if (hash == 1629363139) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GeneralizedWord","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 788741532) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IGeneralizedWordUnit");
  }
  if (hash == -193905381) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleWord","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit");
  }
  if (hash == -1762334600) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit");
  }
  if (hash == -1716626478) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotesCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit");
  }
  if (hash == -1113380082) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BuckCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution");
  }
  if (hash == 902159153) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RedirectedCommand","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == 1680634189) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == -382894463) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputRedirection","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 1257097420) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputRedirection","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 957655079) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection");
  }
  if (hash == -1853958014) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputRedirection","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 1607356772) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputErrorRedirection","jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection");
  }
  if (hash == 1528865646) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection","jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection");
  }
  if (hash == 1387791901) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IToWordRedirection");
  }
  if (hash == -971062878) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereDocumentRedirection","jetbrains.mps.bash.structure.Redirection");
  }
  if (hash == -741151444) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereStringRedirection","jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection");
  }
  if (hash == 794347757) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 1676082044) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 1738412221) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadingWritingRedirection","jetbrains.mps.bash.structure.IORedirection");
  }
  if (hash == 985026595) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionDeclaration","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept");
  }
  if (hash == -1649341066) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == -744484426) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionCallCommand","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == 775606169) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandDeclaration","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept");
  }
  if (hash == 515421471) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandCall","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == -89410516) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionReference","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 222776974) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSet","jetbrains.mps.bash.structure.ExternalOptionDeclaration");
  }
  if (hash == 348322100) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Option","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.bash.structure.IDescribedConcept");
  }
  if (hash == -529709933) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParam","jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept");
  }
  if (hash == -1508784762) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ISymbolConcept");
  }
  if (hash == 857250201) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IDescribedConcept");
  }
  if (hash == -2036451813) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 337285213) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSetReference","jetbrains.mps.bash.structure.ExternalOptionReference");
  }
  if (hash == 1941799031) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionReference","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1387827192) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParamReference","jetbrains.mps.bash.structure.ExternalOptionReference");
  }
  if (hash == 1700150536) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICommandParameter");
  }
  if (hash == 1100756719) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentReference","jetbrains.mps.bash.structure.ExternalOptionReference");
  }
  if (hash == -1780573252) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Argument","jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept");
  }
  if (hash == 160858746) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentList","jetbrains.mps.bash.structure.ExternalOptionDeclaration");
  }
  if (hash == 1441334769) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentListReference","jetbrains.mps.bash.structure.ExternalOptionReference");
  }
  if (hash == -356655068) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalCommand","jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand");
  }
  if (hash == -1771122223) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotedWord","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit");
  }
  if (hash == 436823485) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IConcreteWordUnit");
  }
  if (hash == -2034342475) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SingleQuote","jetbrains.mps.bash.structure.QuotedWord");
  }
  if (hash == -1920353332) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleQuote","jetbrains.mps.bash.structure.QuotedWord");
  }
  if (hash == 246545734) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IPriorityExpression");
  }
  if (hash == 1941877505) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordExpression","jetbrains.mps.bash.structure.ArithmeticExpression");
  }
  if (hash == 84076991) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLine","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 767988458) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedCommandList","jetbrains.mps.bash.structure.InputLine","jetbrains.mps.bash.structure.IComment");
  }
  if (hash == -1253324118) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadCommandList","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == -1929232969) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList");
  }
  if (hash == 565276220) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndOperator","jetbrains.mps.bash.structure.FollowingCommandList");
  }
  if (hash == 572129510) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrOperator","jetbrains.mps.bash.structure.FollowingCommandList");
  }
  if (hash == -1097091081) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedFollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment");
  }
  if (hash == 552013305) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 793551393) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadPipeline","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 451990068) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingPipeline","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 620913699) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorConnection","jetbrains.mps.bash.structure.FollowingPipeline");
  }
  if (hash == -1853234975) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection","jetbrains.mps.bash.structure.FollowingPipeline");
  }
  if (hash == -199765012) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedText","jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IComment");
  }
  if (hash == 112952940) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Command","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 735652533) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IComment");
  }
  if (hash == 398757728) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IArithmeticHolder");
  }
  if (hash == 237860132) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1804831248) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableReference","jetbrains.mps.bash.structure.LValue","jetbrains.mps.bash.structure.IGeneralizedWordUnit");
  }
  if (hash == -1941555425) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.lang.core.structure.BaseConcept");
  }
  if (hash == 1940894478) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression");
  }
  if (hash == 161410630) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -753744556) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BlockFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1120091981) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CharFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1998219536) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DirectoryConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1280160168) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 310818149) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RegularFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1479476893) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1547158652) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 2026297721) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StickyBitConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -234560111) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -169141321) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1686489374) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SizeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1877649667) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TerminalConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1334062151) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 726617324) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WriteTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1614086884) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExecTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1031523696) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1160759668) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -822908914) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -808365908) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SocketConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1210648525) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LastReadConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1925171150) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptnameStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == -1710291322) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 501453335) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression");
  }
  if (hash == 1725251278) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StringConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression");
  }
  if (hash == 830236894) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression");
  }
  if (hash == -1705769873) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NewerThan","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 413812662) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OlderThan","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 1115470822) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SameReference","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == -82571703) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == -1391956412) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 851669322) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == -1015011699) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 558087648) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FreeCommand","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == 1704792662) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonOperator","jetbrains.mps.bash.structure.FollowingCommandList");
  }
  if (hash == -297275803) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAddAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment");
  }
  if (hash == 954565175) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NotCommand","jetbrains.mps.bash.structure.AbstractCommand");
  }
  if (hash == -1849847993) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 963336866) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 709291138) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 1340203617) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == -1157389883) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == -754210795) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqual","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  if (hash == 2047084705) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CombiningConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression");
  }
  if (hash == 1034962617) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndCombiningComditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression");
  }
  if (hash == -602308700) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrCombiningConditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression");
  }
  if (hash == 674529653) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression");
  }
  if (hash == 1735244553) {
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings2","jetbrains.mps.bash.structure.BinaryConditionalExpression");
  }
  return null;
}
