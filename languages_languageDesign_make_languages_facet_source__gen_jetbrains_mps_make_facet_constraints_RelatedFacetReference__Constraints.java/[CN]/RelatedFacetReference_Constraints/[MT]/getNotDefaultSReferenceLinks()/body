{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x5979ed6d2b21b2f2L,0x5979ed6d2b21b2f3L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x5979ed6d2b21b2f2L,0x5979ed6d2b21b2f3L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Sequence.fromIterable(new FacetsScope(_context.getContextNode()).getAvailableElements(null)).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x5912a2ab1cd24c13L,"jetbrains.mps.make.facet.structure.FacetDeclaration"));
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !((it == _context.getEnclosingNode()));
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_9mk1l7_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
