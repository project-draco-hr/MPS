{
  if (!((SLinkOperations.getTarget(argument,"conceptMethodDeclaration",false) != null))) {
    TypeChecker.getInstance().reportTypeError(argument,"no method declaration","jetbrains.mps.bootstrap.smodelLanguage.helgins","1179410829052");
  }
  int actCount=SLinkOperations.getCount(argument,"actualArgument");
  int expCount=SLinkOperations.getCount(SLinkOperations.getTarget(argument,"conceptMethodDeclaration",false),"parameter");
  if (!(actCount == expCount)) {
    TypeChecker.getInstance().reportTypeError(argument,"Wrong parameters number: expected " + expCount + ", actual "+ actCount,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1179410886099");
  }
{
    SNode arg;
    SNode parameter;
    Iterator<SNode> arg_iterator=SLinkOperations.getTargets(argument,"actualArgument",true).iterator();
    Iterator<SNode> parameter_iterator=SLinkOperations.getTargets(SLinkOperations.getTarget(argument,"conceptMethodDeclaration",false),"parameter",true).iterator();
    while (true) {
      if (!(arg_iterator.hasNext())) {
        break;
      }
      if (!(parameter_iterator.hasNext())) {
        break;
      }
      arg=arg_iterator.next();
      parameter=parameter_iterator.next();
      TypeChecker.getInstance().getRuntimeSupport().check(parameter,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1179411061746");
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(arg),TypeChecker.getInstance().getRuntimeSupport().typeOf(parameter),arg,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1179411081637");
    }
  }
  TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument),SLinkOperations.getTarget(SLinkOperations.getTarget(argument,"conceptMethodDeclaration",false),"returnType",true),argument,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1179410535708");
}
