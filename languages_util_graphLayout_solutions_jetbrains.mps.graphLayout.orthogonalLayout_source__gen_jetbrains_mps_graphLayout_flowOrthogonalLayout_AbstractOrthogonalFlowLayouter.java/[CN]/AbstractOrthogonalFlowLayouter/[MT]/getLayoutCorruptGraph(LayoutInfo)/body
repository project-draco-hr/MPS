{
  myStraightEdges=null;
  Graph graph=layoutInfo.getGraph();
  if (graph.getNumNodes() == 1) {
    GraphLayout layout=this.getSingleNodeLayout(graph,layoutInfo);
    return layout;
  }
  CreationStageManager stageManager=new CreationStageManager(graph);
  EdgesHistoryManager historyManager=new EdgesHistoryManager(graph);
  Set<Node> initialNodes=SetSequence.<Node>fromSet(new LinkedHashSet<Node>());
  SetSequence.fromSet(initialNodes).addSequence(ListSequence.<Node>fromList(graph.getNodes()));
  myRealNodes=SetSequence.<Node>fromSet(new HashSet<Node>());
  SetSequence.fromSet(myRealNodes).addSequence(ListSequence.<Node>fromList(graph.getNodes()));
  Set<Edge> initialEdges=SetSequence.<Edge>fromSet(new LinkedHashSet<Edge>());
  SetSequence.fromSet(initialEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  Set<Edge> loops=SetSequence.<Edge>fromSet(new LinkedHashSet<Edge>());
  this.removeLoops(graph,loops);
  BiconnectAugmentation.smartMakeBiconnected(graph);
  stageManager.nextStage();
  EmbeddedGraph embeddedGraph=getEmbedding(graph);
  addLoops(loops,embeddedGraph);
  myRealEdges=SetSequence.<Edge>fromSet(new HashSet<Edge>());
  Map<Edge,List<Edge>> history=MapSequence.<Edge,List<Edge>>fromMap(new HashMap<Edge,List<Edge>>());
  for (  Edge edge : SetSequence.<Edge>fromSet(initialEdges)) {
    List<Edge> historyEdges=historyManager.getHistory(edge);
    MapSequence.<Edge,List<Edge>>fromMap(history).put(edge,historyEdges);
    SetSequence.fromSet(myRealEdges).addSequence(ListSequence.<Edge>fromList(historyEdges));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Edge,List<Edge>>fromMap(history).put(edge,historyManager.getHistory(edge));
  }
  Map<Edge,Edge> labeledEdges=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  LayoutInfo newInfo=new LayoutInfo(graph);
  for (  Node node : SetSequence.<Node>fromSet(layoutInfo.getNodesWithSize())) {
    Dimension size=layoutInfo.getNodeSize(node);
    if (size != null) {
      newInfo.setNodeSize(node,size);
    }
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(layoutInfo.getLabeledEdges())) {
    Edge labeledEdge=getLabeledEdge(MapSequence.<Edge,List<Edge>>fromMap(history).get(edge));
    MapSequence.<Edge,Edge>fromMap(labeledEdges).put(edge,labeledEdge);
    newInfo.setLabelSize(labeledEdge,layoutInfo.getLabelSize(edge));
  }
  GraphLayout layout=getLayoutFromEmbeddedGraph(embeddedGraph,newInfo);
  GraphLayout initialLayout=this.refineLayout(graph,initialNodes,layout,initialEdges,history,labeledEdges);
  return initialLayout;
}
