{
  final Map<SLanguage,SNode> problemLangs=MapSequence.fromMap(new HashMap<SLanguage,SNode>());
  int modulesCount=Sequence.fromIterable(modules).count();
  int processedModules=0;
  for (  SModule module : Sequence.fromIterable(modules)) {
    Sequence.fromIterable(allNodes(module.getModels())).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        SLanguage lang=it.getConcept().getLanguage();
        if (((SLanguageAdapter)lang).getLanguageDescriptor() == null) {
          MapSequence.fromMap(problemLangs).put(lang,it);
        }
      }
    }
);
    processedModules++;
    progressCallback.invoke(1.0 * processedModules / modulesCount);
  }
  final Set<LanguageMissingProblem> problems=SetSequence.fromSet(new HashSet<LanguageMissingProblem>());
  MapSequence.fromMap(problemLangs).take(maxErrors).visitAll(new IVisitor<IMapping<SLanguage,SNode>>(){
    public void visit(    IMapping<SLanguage,SNode> it){
      if (it.key().getSourceModule() == null) {
        SetSequence.fromSet(problems).addElement(new LanguageAbsentInRepoProblem(it.key(),it.value()));
      }
 else {
        SetSequence.fromSet(problems).addElement(new LanguageNotLoadedProblem(it.key(),it.value()));
      }
    }
  }
);
  return problems;
}
