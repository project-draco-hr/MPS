{
  final List<DependencyProblem> rv=ListSequence.fromList(new ArrayList<DependencyProblem>());
  Sequence.fromIterable(modules).ofType(ReloadableModule.class).where(new IWhereFilter<ReloadableModule>(){
    public boolean accept(    ReloadableModule it){
      return ModuleClassLoaderSupport.canCreate(it);
    }
  }
).visitAll(new IVisitor<ReloadableModule>(){
    public void visit(    final ReloadableModule module){
      Iterable<SDependency> deps=module.getDeclaredDependencies();
      Sequence.fromIterable(deps).where(new IWhereFilter<SDependency>(){
        public boolean accept(        SDependency it){
          return it.getTarget() == null;
        }
      }
).visitAll(new IVisitor<SDependency>(){
        public void visit(        SDependency dep){
          ListSequence.fromList(rv).addElement(new DependencyProblem(module,String.format("Unresolved dependency in module %s: Module %s not found in repository",module.getModuleName(),dep.getTargetModule().getModuleName())));
        }
      }
);
    }
  }
);
  return ListSequence.fromList(rv).take(maxErrors).toListSequence();
}
