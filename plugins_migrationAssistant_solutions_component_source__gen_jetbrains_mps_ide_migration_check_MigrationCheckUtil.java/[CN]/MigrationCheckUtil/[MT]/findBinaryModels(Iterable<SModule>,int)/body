{
  return Sequence.fromIterable(modules).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return !(it.isPackaged());
    }
  }
).ofType(AbstractModule.class).translate(new ITranslator2<AbstractModule,BinaryModelProblem>(){
    public Iterable<BinaryModelProblem> translate(    AbstractModule it){
      return getBinaryModelsUnder(it);
    }
  }
).take(maxErrors).toListSequence();
}
