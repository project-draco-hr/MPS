{
  final SNode target=SNodeOperations.cast(ListSequence.fromList(nodes).first(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93c84351fL,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));
  final SNode whereToMove=MoveNodeDialog.getSelectedObject(project.getProject(),target,new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node"){
    @Override public boolean check(    SNode selectedObject,    SNode nodeToMove,    SModel modelOfSelectedObject){
      return SNodeOperations.isInstanceOf(selectedObject,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")) && !(ListSequence.fromList(SNodeOperations.getNodeAncestors(nodeToMove,null,false)).contains(selectedObject));
    }
  }
);
  if (whereToMove == null) {
    return;
  }
  project.getRepository().getModelAccess().executeCommand(new Runnable(){
    public void run(){
      doMove(project,MapSequence.<MoveNodesActionBase.NodeProcessor,List<SNode>>fromMapAndKeysArray(new HashMap<MoveNodesActionBase.NodeProcessor,List<SNode>>(),new MoveNodesActionBase.NodeCreatingProcessor(new MoveStaticField.NodeLocationClassifierMember(SNodeOperations.cast(whereToMove,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"))),project)).withValues(ListSequence.fromListAndArray(new ArrayList<SNode>(),target)));
    }
  }
);
}
