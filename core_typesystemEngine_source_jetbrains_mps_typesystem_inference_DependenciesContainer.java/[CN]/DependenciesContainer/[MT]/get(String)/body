{
  return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Set<IDependency_Runtime>>(){
    @Override public Set<IDependency_Runtime> compute(){
      Set<IDependency_Runtime> result=myDependenciesCache.get(key);
      if (result != null) {
        return result;
      }
      if (!isInterfaceConcept(key)) {
        String conceptDeclaration=key;
        while (conceptDeclaration != null) {
          Set<IDependency_Runtime> rules=myDependencies.get(conceptDeclaration);
          if (rules != null) {
            if (conceptDeclaration != key) {
              myDependencies.putIfAbsent(key,new THashSet<IDependency_Runtime>(rules));
            }
            myDependenciesCache.putIfAbsent(key,rules);
            return Collections.unmodifiableSet(rules);
          }
          conceptDeclaration=getSuperConcept(conceptDeclaration);
        }
      }
      myDependencies.putIfAbsent(key,new THashSet<IDependency_Runtime>(1));
      myDependenciesCache.putIfAbsent(key,Collections.<IDependency_Runtime>emptySet());
      return Collections.emptySet();
    }
  }
);
}
