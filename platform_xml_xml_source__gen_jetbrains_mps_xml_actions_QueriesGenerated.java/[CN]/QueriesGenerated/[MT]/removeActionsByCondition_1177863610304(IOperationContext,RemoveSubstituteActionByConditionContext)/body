{
  final SNode parentElement;
  final boolean isMixed;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return ElementUtil.getParentElementDeclaration(_context.getParentNode(),operationContext.getScope());
      }
    }
;
    parentElement=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return (parentElement == null) || TypeExpression_Behavior.call_isMixed_1213877382388(parentElement);
      }
    }
;
    isMixed=(Boolean)calc.calculate();
  }
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.structure.Content");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        return SConceptOperations.isExactly(_context.getChildConcept(),"jetbrains.mps.xml.structure.Content") && SConceptOperations.isSuperConceptOf(SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.structure.BaseText"),NameUtil.nodeFQName(concept)) && !(isMixed);
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
