{
  AbstractExtractMethodRefactoringProcessor result=new AbstractExtractMethodRefactoringProcessor(__thisNode__,nodesToExtract){
    @Override public SNode createMethodCall(    SNode declaration,    List<SNode> arguments){
      if (SNodeOperations.isInstanceOf(declaration,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"))) {
        SNode call=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x5a277db47d54d7e1L,"jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall"));
        SLinkOperations.setTarget(call,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"),SNodeOperations.cast(declaration,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")));
        ListSequence.fromList(SLinkOperations.getChildren(call,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument"))).addSequence(ListSequence.fromList(arguments));
        return call;
      }
      return null;
    }
    @Override public SNode createNewMethod(){
      SNode method=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"));
      SPropertyOperations.set(method,MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x51613f7fe129b24dL,"isStatic"),"" + (isStatic));
      return method;
    }
  }
;
  return result;
}
