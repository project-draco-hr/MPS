{
  super("Generate",ID);
  this.setIsInternal(false);
  this.setPopup(false);
  try {
    if (BaseGroup.class.isAssignableFrom(SaveTransientModelsAction.class)) {
      this.add(new SaveTransientModelsAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(SaveTransientModelsAction.class,null));
    }
    this.addSeparator();
    if (BaseGroup.class.isAssignableFrom(GenerateAllModelsInModuleAction.class)) {
      this.add(new GenerateAllModelsInModuleAction(false));
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(GenerateAllModelsInModuleAction.class,null,false));
    }
    this.addSeparator();
    if (BaseGroup.class.isAssignableFrom(GenerateFilesFromCurrentModelAction.class)) {
      this.add(new GenerateFilesFromCurrentModelAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(GenerateFilesFromCurrentModelAction.class,null));
    }
    if (BaseGroup.class.isAssignableFrom(GenerateTextFromCurrentModelAction.class)) {
      this.add(new GenerateTextFromCurrentModelAction());
    }
 else {
      this.add(ActionFactory.getInstance().getRegisteredAction(GenerateTextFromCurrentModelAction.class,null));
    }
  }
 catch (  Throwable t) {
    LOG.error("User group error",t);
  }
}
