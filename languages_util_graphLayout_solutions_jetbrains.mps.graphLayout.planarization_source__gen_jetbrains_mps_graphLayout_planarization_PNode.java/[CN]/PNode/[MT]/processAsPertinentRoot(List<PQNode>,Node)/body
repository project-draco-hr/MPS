{
  ListSequence.<PQNode>fromList(this.getChildren()).removeWhere(new IWhereFilter<PQNode>(){
    public boolean accept(    PQNode it){
      return it.getState() != PQNode.State.EMPTY;
    }
  }
);
  children=ListSequence.<PQNode>fromList(children).removeWhere(new IWhereFilter<PQNode>(){
    public boolean accept(    PQNode it){
      return it.getState() == PQNode.State.EMPTY;
    }
  }
);
  List<PQNode> partialChildren=ListSequence.<PQNode>fromList(children).where(new IWhereFilter<PQNode>(){
    public boolean accept(    PQNode it){
      return it.getState() == PQNode.State.PARTIAL;
    }
  }
).toListSequence();
  int numPartialChildren=ListSequence.<PQNode>fromList(partialChildren).count();
  QNode newComponent=new QNode();
  PNode nextNode=new PNode(nextGraphNode,null);
  newComponent.addLastChild(nextNode);
  EdgesOrder edgesOrder=newComponent.getEdgesOrder();
  this.addLastChild(newComponent);
  if (numPartialChildren > 2) {
    throw new RuntimeException("can not make reduction: pertinent root has more than two partial children");
  }
  if (numPartialChildren == 0) {
    for (    PQNode child : ListSequence.<PQNode>fromList(children).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.FULL;
      }
    }
)) {
      child.collectEdgesOrderInSubtree(edgesOrder);
    }
  }
  if (numPartialChildren == 1) {
    PQNode partialChild=ListSequence.<PQNode>fromList(partialChildren).first();
    List<PQNode> firstEmptySegment=ListSequence.<PQNode>fromList(new ArrayList<PQNode>());
    boolean endFirstSegment=false;
    for (    PQNode child : ListSequence.<PQNode>fromList(partialChild.getChildren())) {
      if (child.getState() == PQNode.State.FULL) {
        endFirstSegment=true;
      }
 else {
        if (endFirstSegment) {
          newComponent.addLastChild(child);
        }
 else {
          ListSequence.<PQNode>fromList(firstEmptySegment).addElement(child);
        }
      }
    }
    for (    PQNode child : ListSequence.<PQNode>fromList(firstEmptySegment).reversedList()) {
      newComponent.addFirstChild(child);
    }
    ListSequence.<PQNode>fromList(partialChild.getChildren()).removeWhere(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() != PQNode.State.FULL;
      }
    }
);
    partialChild.collectEdgesOrderInSubtree(edgesOrder);
    for (    PQNode child : ListSequence.<PQNode>fromList(children).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.FULL;
      }
    }
)) {
      child.collectEdgesOrderInSubtree(edgesOrder);
    }
  }
  if (numPartialChildren == 2) {
    PQNode partialChild0=ListSequence.<PQNode>fromList(partialChildren).getElement(0);
    List<PQNode> emptyNodes=ListSequence.<PQNode>fromList(partialChild0.getChildren()).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.EMPTY;
      }
    }
).toListSequence();
    emptyNodes=ListSequence.<PQNode>fromList(emptyNodes).reversedList();
    for (    PQNode child : ListSequence.<PQNode>fromList(emptyNodes)) {
      newComponent.addFirstChild(child);
    }
    PQNode partialChild1=ListSequence.<PQNode>fromList(partialChildren).getElement(1);
    ((QNode)partialChild1).reverse();
    emptyNodes=ListSequence.<PQNode>fromList(partialChild1.getChildren()).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.EMPTY;
      }
    }
).toListSequence();
    for (    PQNode child : ListSequence.<PQNode>fromList(emptyNodes)) {
      newComponent.addLastChild(child);
    }
    ListSequence.<PQNode>fromList(partialChild0.getChildren()).removeWhere(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() != PQNode.State.FULL;
      }
    }
);
    partialChild0.collectEdgesOrderInSubtree(edgesOrder);
    for (    PQNode child : ListSequence.<PQNode>fromList(children).where(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() == PQNode.State.FULL;
      }
    }
)) {
      child.collectEdgesOrderInSubtree(edgesOrder);
    }
    ListSequence.<PQNode>fromList(partialChild1.getChildren()).removeWhere(new IWhereFilter<PQNode>(){
      public boolean accept(      PQNode it){
        return it.getState() != PQNode.State.FULL;
      }
    }
);
    partialChild1.collectEdgesOrderInSubtree(edgesOrder);
  }
  return nextNode;
}
