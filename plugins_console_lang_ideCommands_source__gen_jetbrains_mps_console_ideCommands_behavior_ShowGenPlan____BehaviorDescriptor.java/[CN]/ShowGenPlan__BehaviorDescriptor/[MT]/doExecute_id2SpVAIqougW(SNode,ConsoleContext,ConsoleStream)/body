{
  SRepository repo=context.getProject().getRepository();
  SModel model=ModelReference__BehaviorDescriptor.getModel_id67MRmR$z8Z2.invoke(SLinkOperations.getTarget(__thisNode__,MetaAdapterFactory.getContainmentLink(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x61f2dd6de47f85e4L,0x61f2dd6de47f867aL,"targetModel")),repo);
  if (model == null) {
    return;
  }
  GenPlanExtractor gpExtractor=new GenPlanExtractor(repo);
  final ModelGenerationPlan externalPlan=(gpExtractor.hasPlan(model) ? gpExtractor.getPlan(model) : null);
  MessagesViewTool messagesView=context.getProject().getComponent(MessagesViewTool.class);
  PartitioningHelper helper=new PartitioningHelper(messagesView,console);
  ModelGenerationPlan gp;
  if (SPropertyOperations.getBoolean(__thisNode__,MetaAdapterFactory.getProperty(0xa5e4de5346a344daL,0xaab368fdf1c34ed0L,0x61f2dd6de47f85e4L,0x2c510b378f8ce5ddL,"ignoreExternalPlan"))) {
    gp=new GenerationPlan(model);
    if (externalPlan != null) {
      console.addText("Model has alternative plan configured externally, ingored\n");
    }
  }
 else   if (externalPlan != null) {
    console.addText("Model uses custom plan configured externally\n");
    gp=externalPlan;
  }
 else {
    gp=new GenerationPlan(model);
  }
  helper.show(gp);
  helper.printConnectedComponents(Sequence.<SModel>singleton(model));
}
