{
  return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>(){
    public Iterable<SModelDescriptor> iterable(){
      return SModelRepository.getInstance().getModelDescriptors();
    }
  }
)).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it){
      return GlobalFileteredScope.this.acceptModel(it);
    }
  }
).toListSequence();
}
