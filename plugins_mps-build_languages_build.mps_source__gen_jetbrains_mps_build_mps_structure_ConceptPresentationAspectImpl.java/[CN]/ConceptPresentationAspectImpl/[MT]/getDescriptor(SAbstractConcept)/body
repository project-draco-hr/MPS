{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0dc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BuildLayout_ToBinaryCopyProcessor;
      }
    break;
case 1:
  if (true) {
    return props_BuildMPSPlugin;
  }
break;
case 2:
if (true) {
return props_BuildMpsAspect;
}
break;
case 3:
if (true) {
return props_BuildMpsLayout_FolderWithSources;
}
break;
case 4:
if (true) {
return props_BuildMpsLayout_ModuleJarContent;
}
break;
case 5:
if (true) {
return props_BuildMpsLayout_ModuleJars;
}
break;
case 6:
if (true) {
return props_BuildMpsLayout_ModuleSources;
}
break;
case 7:
if (true) {
return props_BuildMpsLayout_ModuleXml;
}
break;
case 8:
if (true) {
return props_BuildMpsLayout_ModuleXml_CustomJarLocation;
}
break;
case 9:
if (true) {
return props_BuildMpsLayout_Plugin;
}
break;
case 10:
if (true) {
return props_BuildMpsLayout_PluginDescriptor;
}
break;
case 11:
if (true) {
return props_BuildMps_AbstractModule;
}
break;
case 12:
if (true) {
return props_BuildMps_Branding;
}
break;
case 13:
if (true) {
return props_BuildMps_BrandingCompany;
}
break;
case 14:
if (true) {
return props_BuildMps_BrandingHelp;
}
break;
case 15:
if (true) {
return props_BuildMps_BrandingKeymap;
}
break;
case 16:
if (true) {
return props_BuildMps_BrandingStats;
}
break;
case 17:
if (true) {
return props_BuildMps_BrandingUpdateSite;
}
break;
case 18:
if (true) {
return props_BuildMps_DevKit;
}
break;
case 19:
if (true) {
return props_BuildMps_DevKitExport;
}
break;
case 20:
if (true) {
return props_BuildMps_DevKitExportLanguage;
}
break;
case 21:
if (true) {
return props_BuildMps_DevKitExportSolution;
}
break;
case 22:
if (true) {
return props_BuildMps_DevKitRef;
}
break;
case 23:
if (true) {
return props_BuildMps_ExtractedModuleDependency;
}
break;
case 24:
if (true) {
return props_BuildMps_Generator;
}
break;
case 25:
if (true) {
return props_BuildMps_GeneratorOptions;
}
break;
case 26:
if (true) {
return props_BuildMps_Group;
}
break;
case 27:
if (true) {
return props_BuildMps_IdeaPlugin;
}
break;
case 28:
if (true) {
return props_BuildMps_IdeaPluginContent;
}
break;
case 29:
if (true) {
return props_BuildMps_IdeaPluginDependency;
}
break;
case 30:
if (true) {
return props_BuildMps_IdeaPluginGroup;
}
break;
case 31:
if (true) {
return props_BuildMps_IdeaPluginGroupCustomModule;
}
break;
case 32:
if (true) {
return props_BuildMps_IdeaPluginModule;
}
break;
case 33:
if (true) {
return props_BuildMps_IdeaPluginVendor;
}
break;
case 34:
if (true) {
return props_BuildMps_Language;
}
break;
case 35:
if (true) {
return props_BuildMps_Module;
}
break;
case 36:
if (true) {
return props_BuildMps_ModuleDependency;
}
break;
case 37:
if (true) {
return props_BuildMps_ModuleDependencyExtendLanguage;
}
break;
case 38:
if (true) {
return props_BuildMps_ModuleDependencyJar;
}
break;
case 39:
if (true) {
return props_BuildMps_ModuleDependencyOnDevKit;
}
break;
case 40:
if (true) {
return props_BuildMps_ModuleDependencyOnJavaModule;
}
break;
case 41:
if (true) {
return props_BuildMps_ModuleDependencyOnModule;
}
break;
case 42:
if (true) {
return props_BuildMps_ModuleDependencyUseLanguage;
}
break;
case 43:
if (true) {
return props_BuildMps_ModuleJarRuntime;
}
break;
case 44:
if (true) {
return props_BuildMps_ModuleJavaSource;
}
break;
case 45:
if (true) {
return props_BuildMps_ModuleModelRoot;
}
break;
case 46:
if (true) {
return props_BuildMps_ModuleRuntime;
}
break;
case 47:
if (true) {
return props_BuildMps_ModuleSolutionRuntime;
}
break;
case 48:
if (true) {
return props_BuildMps_ModuleSource;
}
break;
case 49:
if (true) {
return props_BuildMps_ModuleTestSource;
}
break;
case 50:
if (true) {
return props_BuildMps_Solution;
}
break;
case 51:
if (true) {
return props_GeneratorInternal_BuildMps_Module;
}
break;
case 52:
if (true) {
return props_GeneratorInternal_BuildSourcePath;
}
break;
case 53:
if (true) {
return props_GeneratorInternal_String;
}
break;
default :
}
}
throw new IllegalStateException();
}
