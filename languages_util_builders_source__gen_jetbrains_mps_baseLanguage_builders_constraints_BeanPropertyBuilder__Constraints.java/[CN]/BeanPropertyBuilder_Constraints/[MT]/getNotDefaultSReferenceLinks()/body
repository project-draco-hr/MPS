{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(1381097486113260572l,-6346909095260771222l),2679357232283750087l,2679357232283750088l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(1381097486113260572l,-6346909095260771222l),2679357232283750087l,2679357232283750088l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return BeanPropertyBuilder_Behavior.call_getPropertyName_2679357232284040711(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder"))),SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contextBuilder=Builder_Behavior.call_getContextBuilder_7057666463730366732(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.Builder"))),_context.getEnclosingNode());
          SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),contextBuilder,"virtual_getResultType_7057666463730718251",new Object[]{}),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
          if (classifierType == null) {
            return Sequence.fromIterable(Collections.<SNode>emptyList());
          }
          List<SNode> methods=new ArrayList<SNode>();
          for (          SNode method : Members.visibleInstanceMethods(classifierType,_context.getEnclosingNode())) {
            if (ListSequence.fromList(SLinkOperations.getChildren(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).count() == 1 && BeanPropertyBuilder_Behavior.call_getPropertyName_2679357232284040711(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder"))),SPropertyOperations.getString(method,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))) != null) {
              ListSequence.fromList(methods).addElement(method);
            }
          }
          return methods;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_uhv5x2_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
