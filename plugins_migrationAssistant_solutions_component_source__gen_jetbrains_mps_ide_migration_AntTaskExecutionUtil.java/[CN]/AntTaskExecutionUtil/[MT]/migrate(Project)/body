{
  MigrationManager m=ProjectHelper.toIdeaProject(project).getComponent(MigrationManager.class);
  if (!(m.isMigrationRequired())) {
    return false;
  }
  while (true) {
    MigrationManager.MigrationStep step=m.nextProjectStep(MapSequence.fromMap(new HashMap<String,Object>()),true);
    if (step == null) {
      break;
    }
    if (!(step.execute())) {
      throw new Exception("Problem on executing cleanup migrations");
    }
  }
  List<Tuples._3<SModule,SLanguage,Integer>> missingMigrations=m.getMissingMigrations();
  if (ListSequence.fromList(missingMigrations).isNotEmpty()) {
    throw new Exception("Some migrations are missing");
  }
  final Wrappers._boolean ok=new Wrappers._boolean(true);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<SModule> modules=MigrationsUtil.getMigrateableModulesFromProject(project);
      ok.value=!(MigrationCheckUtil.haveProblems(modules,new _FunctionTypes._void_P1_E0<Double>(){
        public void invoke(        Double fraction){
        }
      }
));
    }
  }
);
  if (!(ok.value)) {
    throw new Exception("Pre-check failed");
  }
  while (true) {
    MigrationManager.MigrationStep step=m.nextProjectStep(MapSequence.fromMap(new HashMap<String,Object>()),false);
    if (step == null) {
      break;
    }
    if (!(step.execute())) {
      throw new Exception("Problem on executing project migrations");
    }
  }
  while (true) {
    MigrationManager.MigrationStep step=m.nextLanguageStep();
    if (step == null) {
      break;
    }
    if (!(step.execute())) {
      throw new Exception("Problem on executing language migrations");
    }
  }
  ModelAccess.instance().runWriteInEDT(new Runnable(){
    public void run(){
      MPSModuleRepository.getInstance().saveAll();
    }
  }
);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<SModule> modules=MigrationsUtil.getMigrateableModulesFromProject(project);
      ok.value=MigrationCheckUtil.haveProblems(modules,new _FunctionTypes._void_P1_E0<Double>(){
        public void invoke(        Double fraction){
        }
      }
);
    }
  }
);
  if (!(ok.value)) {
    throw new Exception("Post-check failed");
  }
  return true;
}
