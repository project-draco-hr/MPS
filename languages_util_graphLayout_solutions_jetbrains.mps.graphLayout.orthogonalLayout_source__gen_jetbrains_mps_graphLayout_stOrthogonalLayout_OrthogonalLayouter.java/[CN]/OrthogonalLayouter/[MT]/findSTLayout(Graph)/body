{
  BiconnectAugmentation.makeBiconnected(graph);
  final int maxIndex=graph.getNumNodes();
  TreeEmbeddingFinder embeddingFinder=new TreeEmbeddingFinder();
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new BiconnectedInitialEmbeddingFinder()).find(graph);
  List<Node> outerNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  for (  Dart dart : ListSequence.<Dart>fromList(embeddedGraph.getOuterFace().getDarts())) {
    ListSequence.<Node>fromList(outerNodes).addElement(dart.getTarget());
  }
  outerNodes=ListSequence.<Node>fromList(outerNodes).where(new IWhereFilter<Node>(){
    public boolean accept(    Node it){
      return it.getIndex() < maxIndex;
    }
  }
).toListSequence();
  Node s=ListSequence.<Node>fromList(outerNodes).getElement(0);
  Node t=ListSequence.<Node>fromList(outerNodes).getElement((ListSequence.<Node>fromList(outerNodes).count()) / 2);
  GraphOrientation.orientST(graph,s,t);
  STPlanarGraph stPlanarGraph=new STPlanarGraph(embeddedGraph,s,t);
  return new OrthogonalFromVisibility().doLayout(stPlanarGraph);
}
