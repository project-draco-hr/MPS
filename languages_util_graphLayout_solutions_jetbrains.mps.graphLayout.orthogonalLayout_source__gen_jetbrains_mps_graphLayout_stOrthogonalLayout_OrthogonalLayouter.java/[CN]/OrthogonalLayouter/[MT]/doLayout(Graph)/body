{
  Map<Node,Integer> components=ConnectivityComponents.getComponents(graph);
  int maxComponent=0;
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    maxComponent=Math.max(maxComponent,MapSequence.<Node,Integer>fromMap(components).get(node));
  }
  Map<Node,Node> newNodes=new NodeMap<Node>(graph);
  List<Graph> subgraphs=ListSequence.<Graph>fromList(new ArrayList<Graph>());
  for (int i=0; i <= maxComponent; i++) {
    ListSequence.<Graph>fromList(subgraphs).addElement(new Graph());
  }
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Graph subgraph=ListSequence.<Graph>fromList(subgraphs).getElement(MapSequence.<Node,Integer>fromMap(components).get(node));
    MapSequence.<Node,Node>fromMap(newNodes).put(node,subgraph.createNode());
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Node source=MapSequence.<Node,Node>fromMap(newNodes).get(edge.getSource());
    Graph subgraph=source.getGraph();
    subgraph.connect(source,MapSequence.<Node,Node>fromMap(newNodes).get(edge.getTarget()));
  }
  return findSTLayout(ListSequence.<Graph>fromList(subgraphs).getElement(0));
}
