{
  final Project project=myParams.getProject();
  if (project.getModelAccess().isCommandAction()) {
    throw new IllegalStateException("should be called outside of command");
  }
  new SaveRepositoryCommand(project.getRepository()).execute();
  MakeSession session=new MakeSession(project,new DefaultMakeMessageHandler(project),myParams.isCleanMake());
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    List<IResource> inputRes=null;
    final ArrayList<SModel> models=new ArrayList<SModel>();
    try {
      inputRes=new ModelAccessHelper(project.getModelAccess()).runReadAction(new Computable<List<IResource>>(){
        public List<IResource> compute(){
          List<IResource> rv=Sequence.fromIterable(myParams.collectInput()).toListSequence();
          models.addAll(ListSequence.fromList(rv).translate(new ITranslator2<IResource,SModel>(){
            public Iterable<SModel> translate(            IResource it){
              return ((MResource)it).models();
            }
          }
).toListSequence());
          return rv;
        }
      }
);
      if (!(new GenerationCheckHelper().checkModelsBeforeGenerationIfNeeded(project,models))) {
        inputRes=null;
      }
    }
 catch (    RuntimeException e) {
      IMakeService.INSTANCE.get().closeSession(session);
      throw e;
    }
    if (inputRes != null) {
      IMakeService.INSTANCE.get().make(session,inputRes);
    }
 else {
      IMakeService.INSTANCE.get().closeSession(session);
    }
  }
}
