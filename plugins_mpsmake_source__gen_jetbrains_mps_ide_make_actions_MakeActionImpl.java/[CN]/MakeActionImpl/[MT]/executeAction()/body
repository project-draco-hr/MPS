{
  if (ModelAccess.instance().isInsideCommand()) {
    throw new IllegalStateException();
  }
  final Project project=myParams.getProject();
  new SaveRepositoryCommand(project.getRepository()).execute();
  final Iterable<IResource> inputRes=new ModelAccessHelper(project.getModelAccess()).runReadAction(new Computable<Iterable<IResource>>(){
    public Iterable<IResource> compute(){
      return myParams.collectInput();
    }
  }
);
  final List<SModel> models=ListSequence.fromListWithValues(new ArrayList<SModel>(),MakeActionImpl.this.selectModels(inputRes));
  MakeSession session=new MakeSession(project,new DefaultMakeMessageHandler(project),myParams.isCleanMake()){
    @Override public void doExecute(    Runnable scriptRunnable){
      if (new GenerationCheckHelper().checkModelsBeforeGenerationIfNeeded(project,models)) {
        scriptRunnable.run();
      }
 else {
        IMakeService.INSTANCE.get().closeSession(this);
      }
    }
  }
;
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    IMakeService.INSTANCE.get().make(session,inputRes);
  }
}
