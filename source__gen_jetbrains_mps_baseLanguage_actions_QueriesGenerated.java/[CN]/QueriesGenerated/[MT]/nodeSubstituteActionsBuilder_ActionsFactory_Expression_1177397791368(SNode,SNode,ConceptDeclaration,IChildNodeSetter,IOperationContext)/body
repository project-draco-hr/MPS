{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode parentFunction=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ConceptFunction",false,false);
        List<SNode> result=new ArrayList<SNode>();
        if (parentFunction == null) {
          return result;
        }
        ListOperations.addAllElements(result,parentFunction.getConceptLinkTargets("conceptFunctionParameter",true,operationContext.getScope()));
        ListOperations.addAllElements(result,parentFunction.getConceptLinkTargets("applicableConceptFunctionParameter",true,operationContext.getScope()));
        return result;
      }
    }
;
    List queryResult=(List)calc.calculate();
    for (    Object item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()));
    }
  }
  return result;
}
