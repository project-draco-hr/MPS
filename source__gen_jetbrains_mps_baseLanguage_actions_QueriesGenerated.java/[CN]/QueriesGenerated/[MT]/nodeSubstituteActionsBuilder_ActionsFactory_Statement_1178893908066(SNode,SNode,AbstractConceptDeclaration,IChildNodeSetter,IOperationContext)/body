{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode classConcept=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
        SNode currentConstr=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",true,false);
        return SLinkOperations.getTargets(classConcept,"constructor",true);
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation",currentTargetNode);
          SLinkOperations.setTarget(newNode,"constructorDeclaration",((SNode)this.getParameterObject()),false);
          if (SNodeOperations.isInstanceOf(currentTargetNode,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation")) {
{
              ICursor<SNode> _zCursor=CursorFactory.createCursor(SLinkOperations.getTargets(currentTargetNode,"actualArgument",true));
              try {
                while (_zCursor.moveToNext()) {
                  SNode argument=_zCursor.getCurrent();
                  SLinkOperations.addChild(newNode,"actualArgument",argument);
                }
              }
  finally {
                _zCursor.release();
              }
            }
          }
          return newNode;
        }
        public String getMatchingText(        String pattern){
          StringBuilder builder=new StringBuilder(SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"),"alias"));
          QueriesUtil.appendParameterTypes_BaseMethodDeclaration(((SNode)this.getParameterObject()),builder);
          return builder.toString();
        }
        public String getDescriptionText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"),"short_description");
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode classConcept=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
        SNode superClass;
        if ((SLinkOperations.getTarget(classConcept,"superclass",true) != null) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept,"superclass",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          superClass=SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept,"superclass",true),"classifier",false);
        }
 else {
          SNode node=JavaModelUtil_new.findClassifier(Object.class).getNode();
          superClass=node;
        }
        return SLinkOperations.getTargets(superClass,"constructor",true);
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation",currentTargetNode);
          SLinkOperations.setTarget(newNode,"constructorDeclaration",((SNode)this.getParameterObject()),false);
          if (SNodeOperations.isInstanceOf(currentTargetNode,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")) {
{
              ICursor<SNode> _zCursor1=CursorFactory.createCursor(SLinkOperations.getTargets(currentTargetNode,"actualArgument",true));
              try {
                while (_zCursor1.moveToNext()) {
                  SNode argument=_zCursor1.getCurrent();
                  SLinkOperations.addChild(newNode,"actualArgument",argument);
                }
              }
  finally {
                _zCursor1.release();
              }
            }
          }
          return newNode;
        }
        public String getMatchingText(        String pattern){
          StringBuilder builder=new StringBuilder(SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"),"alias"));
          QueriesUtil.appendParameterTypes_BaseMethodDeclaration(((SNode)this.getParameterObject()),builder);
          return builder.toString();
        }
        public String getDescriptionText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"),"short_description");
        }
      }
);
    }
  }
  return result;
}
