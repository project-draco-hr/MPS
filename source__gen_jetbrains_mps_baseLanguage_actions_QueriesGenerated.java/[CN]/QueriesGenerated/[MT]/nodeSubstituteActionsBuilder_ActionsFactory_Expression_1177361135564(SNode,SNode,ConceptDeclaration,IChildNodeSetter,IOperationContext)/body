{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReference",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode classConcept=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
        List<SNode> result=ListOperations.createList(new SNode[]{});
        List<SNode> alreadyVisited=ListOperations.createList(new SNode[]{});
        while (classConcept != null && !(SequenceOperations.contains(alreadyVisited,classConcept))) {
          ListOperations.addAllElements(result,SLinkOperations.getTargets(classConcept,"field",true));
          ListOperations.addElement(alreadyVisited,classConcept);
          classConcept=SLinkOperations.getTarget(SLinkOperations.getTarget(classConcept,"superclass",true),"classifier",false);
        }
        return result;
      }
    }
;
    List<SNode> queryResult=(List)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode ref=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FieldReference");
          SLinkOperations.setTarget(ref,"variableDeclaration",((SNode)this.getParameterObject()),false);
          SLinkOperations.setTarget(ref,"instance",SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisExpression"),true);
          return ref;
        }
      }
);
    }
  }
  return result;
}
