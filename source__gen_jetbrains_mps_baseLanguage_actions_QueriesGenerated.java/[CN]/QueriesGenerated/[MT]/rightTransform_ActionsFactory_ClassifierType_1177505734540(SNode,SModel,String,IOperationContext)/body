{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(concept.getNode(),sourceNode){
      public SNode doSubstitute(      String pattern){
        SLinkOperations.addNewChild(sourceNode,"parameter","jetbrains.mps.baseLanguage.structure.Type");
        return SequenceOperations.getFirst(SLinkOperations.getTargets(sourceNode,"parameter",true));
      }
      public String getMatchingText(      String pattern){
        return "<";
      }
      public String getDescriptionText(      String pattern){
        return "add type parameter";
      }
    }
);
  }
  return result;
}
