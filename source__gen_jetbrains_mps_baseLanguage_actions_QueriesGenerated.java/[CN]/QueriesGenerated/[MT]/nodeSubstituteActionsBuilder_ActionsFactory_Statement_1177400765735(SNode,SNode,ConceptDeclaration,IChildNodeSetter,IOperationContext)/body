{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<SNode> concepts=new ArrayList<SNode>();
        ListOperations.addElement(concepts,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BreakStatement"));
        ListOperations.addElement(concepts,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ContinueStatement"));
        return concepts;
      }
    }
;
    Iterable queryResult=(Iterable)calc.calculate();
    for (    Object item : queryResult) {
      List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item),parentNode,currentTargetNode,childSetter,operationContext.getScope());
      result.addAll(defaultActions);
    }
  }
  return result;
}
