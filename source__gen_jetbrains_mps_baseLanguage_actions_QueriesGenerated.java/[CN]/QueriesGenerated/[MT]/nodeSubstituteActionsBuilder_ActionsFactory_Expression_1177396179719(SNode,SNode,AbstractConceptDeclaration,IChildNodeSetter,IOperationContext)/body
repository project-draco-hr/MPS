{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        IClassifiersSearchScope searchScope=new VisibleClassifiersScope(SNodeOperations.getModel(parentNode),IClassifiersSearchScope.CLASSIFFIER,operationContext.getScope());
        List<SNode> visibleClassifiers=(List<SNode>)searchScope.getClassifierNodes();
        List<SNode> classifiers=new ArrayList<SNode>();
        for (        SNode cls : visibleClassifiers) {
          if (SLinkOperations.getCount(cls,"staticField") > 0) {
            ListOperations.addElement(classifiers,cls);
            continue;
          }
          if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept") && SLinkOperations.getCount(cls,"staticMethod") > 0) {
            ListOperations.addElement(classifiers,cls);
            continue;
          }
          if (SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.EnumClass") && SLinkOperations.getCount(cls,"enumConstant") > 0) {
            ListOperations.addElement(classifiers,cls);
            continue;
          }
        }
        return classifiers;
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
          SLinkOperations.setTarget(result,"classifier",((SNode)this.getParameterObject()),false);
          return result;
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(((SNode)this.getParameterObject()),"name") + ".";
        }
        public String getDescriptionText(        String pattern){
          return NodePresentationUtil.descriptionText(((SNode)this.getParameterObject())) + " static access";
        }
      }
);
    }
  }
  return result;
}
