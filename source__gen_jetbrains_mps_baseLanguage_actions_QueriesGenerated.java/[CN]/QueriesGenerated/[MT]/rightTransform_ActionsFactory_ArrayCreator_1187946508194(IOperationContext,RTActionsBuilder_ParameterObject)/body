{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_parameterObject.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode newNode=SNodeOperations.replaceWithNewChild(_parameterObject.getSourceNode(),"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer");
        SLinkOperations.setTarget(newNode,"componentType",SLinkOperations.getTarget(_parameterObject.getSourceNode(),"componentType",true),true);
        return newNode;
      }
      public String getMatchingText(      String pattern){
        return "{";
      }
    }
);
  }
  return result;
}
