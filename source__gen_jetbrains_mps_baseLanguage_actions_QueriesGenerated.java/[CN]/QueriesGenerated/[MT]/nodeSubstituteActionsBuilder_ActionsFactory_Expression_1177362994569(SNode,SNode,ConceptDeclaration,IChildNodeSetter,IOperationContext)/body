{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCall",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode classConcept=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
        return BaseLanguageSearchUtil_new.getVisibleInstanceMethods(((ClassConcept)SNodeOperations.getAdapter(classConcept)),((BaseConcept)SNodeOperations.getAdapter(parentNode)));
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode call=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.InstanceMethodCall",null);
          SLinkOperations.setTarget(call,"instance",SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisExpression",null),true);
          SLinkOperations.setTarget(call,"baseMethodDeclaration",((SNode)this.getParameterObject()),false);
          return call;
        }
      }
);
    }
  }
  return result;
}
