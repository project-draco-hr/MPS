{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.actionsLanguage.structure.SimpleItemPart",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,sourceNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.IntegerConstant");
        SPropertyOperations.set(result,"value","" + (Integer.parseInt(pattern)));
        return result;
      }
      public boolean canSubstitute_internal(      String pattern){
{
          Pattern _pattern_0=Pattern.compile("(?:\\d)+",0);
          Matcher _matcher_0=_pattern_0.matcher(pattern);
          if (_matcher_0.find()) {
            return true;
          }
        }
        return false;
      }
    }
);
  }
  return result;
}
