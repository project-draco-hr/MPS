{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode to=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null);
        SNode current=sourceNode;
        while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current,null,false,false),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
          current=SNodeOperations.getParent(current,null,false,false);
        }
        SNodeOperations.replaceWithAnother(current,to);
        SLinkOperations.setTarget(to,"condition",current,true);
        return to;
      }
      public String getMatchingText(      String pattern){
        return "?";
      }
      public String getDescriptionText(      String pattern){
        return "ternary operator";
      }
    }
);
  }
  return result;
}
