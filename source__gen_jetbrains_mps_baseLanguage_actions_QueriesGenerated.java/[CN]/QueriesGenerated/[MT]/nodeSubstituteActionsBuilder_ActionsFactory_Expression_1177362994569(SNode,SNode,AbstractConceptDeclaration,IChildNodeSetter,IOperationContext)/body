{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCall",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode classConcept=SNodeOperations.getAncestor(parentNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
        ISearchScope searchScope=Classifier_Behavior.call_getVisibleMembersSearchScope_1189552517057(classConcept,parentNode,IClassifiersSearchScope.INSTANCE_METHOD);
        return searchScope.getNodes();
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode call=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.InstanceMethodCall");
          SLinkOperations.setTarget(call,"instance",SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisExpression"),true);
          SLinkOperations.setTarget(call,"baseMethodDeclaration",((SNode)this.getParameterObject()),false);
          return call;
        }
      }
);
    }
  }
  return result;
}
