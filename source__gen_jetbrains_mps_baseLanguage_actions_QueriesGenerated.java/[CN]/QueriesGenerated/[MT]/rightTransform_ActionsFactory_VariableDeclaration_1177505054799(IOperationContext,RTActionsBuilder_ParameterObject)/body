{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableDeclaration",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_parameterObject.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_parameterObject.getModel(),"jetbrains.mps.baseLanguage.structure.Expression",null);
        SLinkOperations.setTarget(_parameterObject.getSourceNode(),"initializer",result,true);
        return _parameterObject.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "=";
      }
      public String getDescriptionText(      String pattern){
        return "initializer";
      }
    }
);
  }
  return result;
}
