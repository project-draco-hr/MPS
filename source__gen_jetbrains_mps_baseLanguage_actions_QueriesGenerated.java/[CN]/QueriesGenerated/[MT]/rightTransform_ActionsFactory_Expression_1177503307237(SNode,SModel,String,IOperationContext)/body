{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(concept.getNode(),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode assignment=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
        SNodeOperations.replaceWithAnother(sourceNode,assignment);
        SLinkOperations.setTarget(assignment,"lValue",sourceNode,true);
        return assignment;
      }
      public String getMatchingText(      String pattern){
        return "=";
      }
      public String getDescriptionText(      String pattern){
        return "assignment";
      }
    }
);
  }
  return result;
}
