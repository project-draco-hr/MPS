{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode intConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
        SPropertyOperations.set(intConst,"value","" + (Integer.parseInt(pattern)));
        return intConst;
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return Pattern.compile("(?:\\d)+",0).matcher(pattern).matches();
      }
      public String getDescriptionText(      String pattern){
        return "integer constant";
      }
      public String getMatchingText(      String pattern){
        return pattern;
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode integerConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
        SPropertyOperations.set(integerConst,"value","" + (true));
        return integerConst;
      }
      public String getMatchingText(      String pattern){
        return "true";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode boolConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
        SPropertyOperations.set(boolConst,"value","" + (false));
        return boolConst;
      }
      public String getMatchingText(      String pattern){
        return "false";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode boolConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.FloatingPointConstant",null);
        SPropertyOperations.set(boolConst,"value",pattern);
        return boolConst;
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return Pattern.compile("(?:(?:(?:-)?))(?:(?:(?:\\d)+)(?:(?:\\.)(?:(?:\\d)*)))",0).matcher(pattern).matches();
      }
    }
);
  }
  return result;
}
