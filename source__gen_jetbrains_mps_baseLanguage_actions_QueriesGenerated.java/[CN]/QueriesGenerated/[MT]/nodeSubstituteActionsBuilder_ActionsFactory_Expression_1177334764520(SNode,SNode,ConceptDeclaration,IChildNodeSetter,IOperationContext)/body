{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  int m=23;
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,sourceNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode integerConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.IntegerConstant");
        SPropertyOperations.set(integerConst,"value","" + (Integer.parseInt(pattern)));
        return integerConst;
      }
      public boolean canSubstitute_internal(      String pattern){
{
          Pattern _pattern_0=Pattern.compile("(?:\\d)+",0);
          Matcher _matcher_0=_pattern_0.matcher(pattern);
          if (_matcher_0.matches()) {
            return true;
          }
        }
        return false;
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,sourceNode,currentTargetNode,childSetter,operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode booleanConst=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.BooleanConstant");
        SPropertyOperations.set(booleanConst,"value","" + (Boolean.parseBoolean(pattern)));
        return booleanConst;
      }
      public boolean canSubstitute_internal(      String pattern){
{
          Pattern _pattern_0=Pattern.compile("(?:true)|(?:false)",0);
          Matcher _matcher_0=_pattern_0.matcher(pattern);
          if (_matcher_0.matches()) {
            return true;
          }
        }
        return false;
      }
    }
);
  }
  return result;
}
