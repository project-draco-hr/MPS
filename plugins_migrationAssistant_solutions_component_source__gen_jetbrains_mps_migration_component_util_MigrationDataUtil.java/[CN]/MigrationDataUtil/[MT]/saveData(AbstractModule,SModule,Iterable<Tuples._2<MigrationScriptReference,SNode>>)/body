{
  IFile file=getDataFile(module);
  SModel model;
  FileDataSource dataSource=new FileDataSource(file);
  ModelFactory factory=PersistenceRegistry.getInstance().getModelFactory(MPSExtentions.MODEL);
  Map<String,String> options=MapSequence.<String,String>fromMapAndKeysArray(new HashMap<String,String>(),ModelFactory.OPTION_MODELNAME,ModelFactory.OPTION_MODULEREF).withValues("migrationData",dataModule.getModuleReference().toString());
  try {
    model=factory.create(dataSource,options);
  }
 catch (  IOException e) {
    throw new RuntimeException();
  }
  for (  Tuples._2<MigrationScriptReference,SNode> p : Sequence.fromIterable(data)) {
    SNode stepData=SModelOperations.createNewRootNode(model,MetaAdapterFactory.getConcept(new UUID(-7457129008680581378l,-9049539142767232014l),7417095922908669705l,"jetbrains.mps.lang.migration.util.structure.StepData"));
    SLinkOperations.setTarget(stepData,MetaAdapterFactory.getContainmentLink(new UUID(-7457129008680581378l,-9049539142767232014l),7417095922908669705l,7417095922908725796l,"script"),createMigrationScriptReference_hzite5_a0b0g0a(p._0().getModuleReference().toString(),p._0().getFromVersion()));
    SLinkOperations.setTarget(stepData,MetaAdapterFactory.getContainmentLink(new UUID(-7457129008680581378l,-9049539142767232014l),7417095922908669705l,7417095922908725798l,"data"),p._1());
  }
  try {
    factory.save(model,dataSource);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  ModelSaveException e) {
    throw new RuntimeException(e);
  }
}
