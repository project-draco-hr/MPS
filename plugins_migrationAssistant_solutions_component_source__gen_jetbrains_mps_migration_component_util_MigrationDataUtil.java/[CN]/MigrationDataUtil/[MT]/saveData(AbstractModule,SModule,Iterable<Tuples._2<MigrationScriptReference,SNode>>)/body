{
  IFile file=getDataFile(module);
  SModel model;
  FileDataSource dataSource=new FileDataSource(file);
  ModelFactory factory=PersistenceRegistry.getInstance().getModelFactory(MPSExtentions.MODEL);
  Map<String,String> options=MapSequence.<String,String>fromMapAndKeysArray(new HashMap<String,String>(),ModelFactory.OPTION_MODELNAME,ModelFactory.OPTION_MODULEREF).withValues("migrationData",dataModule.getModuleReference().toString());
  try {
    model=factory.create(dataSource,options);
  }
 catch (  IOException e) {
    throw new RuntimeException();
  }
  for (  Tuples._2<MigrationScriptReference,SNode> p : Sequence.fromIterable(data)) {
    SNode stepData=SModelOperations.createNewRootNode(model,SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x66eed171c5f82709L,"jetbrains.mps.lang.migration.util.structure.StepData")));
    SPropertyOperations.set(stepData,MetaAdapterFactory.getProperty(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x66eed171c5f82709L,0x1b62b551c10bc5f4L,"script"),p._0().serialize());
    SLinkOperations.setTarget(stepData,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x66eed171c5f82709L,0x66eed171c5f90226L,"data"),p._1());
  }
  try {
    factory.save(model,dataSource);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  ModelSaveException e) {
    throw new RuntimeException(e);
  }
}
