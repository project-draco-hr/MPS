{
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,true,true,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      return !((file.isDirectory())) && file.getName().toLowerCase().endsWith(".zip");
    }
  }
;
  descriptor.setTitle("select archive with merge files");
  descriptor.setDescription("Zip files (*.zip) ");
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      VirtualFile vFile=FileChooser.chooseFile(descriptor,((Project)MapSequence.fromMap(_params).get("project")),null);
      final String resFile;
      SModel[] zipped;
      try {
        zipped=MergeBackupUtil.loadZippedModels(new File(vFile.getCanonicalPath()),new MergeVersion[]{MergeVersion.BASE,MergeVersion.MINE,MergeVersion.REPOSITORY});
        resFile=File.createTempFile("mpstmp",".result").getAbsolutePath();
      }
 catch (      Exception e) {
        e.printStackTrace();
        return;
      }
      SimpleContent[] diffContents=Sequence.fromIterable(Sequence.fromArray(zipped)).select(new ISelector<SModel,SimpleContent>(){
        public SimpleContent select(        final SModel m){
          final Wrappers._T<String> content=new Wrappers._T<String>();
          ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable(){
            public void run(){
              content.value=ModelPersistence.modelToString(m);
            }
          }
);
          return new SimpleContent(content.value,MPSFileTypeFactory.MPS_FILE_TYPE);
        }
      }
).toGenericArray(SimpleContent.class);
    }
  }
);
}
