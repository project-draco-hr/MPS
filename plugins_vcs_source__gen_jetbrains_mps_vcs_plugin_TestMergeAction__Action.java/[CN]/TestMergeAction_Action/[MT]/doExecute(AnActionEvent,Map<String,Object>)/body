{
  try {
    final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,true,true,false,false){
      @Override public boolean isFileSelectable(      VirtualFile file){
        return !((file.isDirectory())) && file.getName().toLowerCase().endsWith(".zip");
      }
    }
;
    descriptor.setTitle("select archive with merge files");
    descriptor.setDescription("Zip files (*.zip) ");
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        VirtualFile vFile=FileChooser.chooseFile(((Project)MapSequence.fromMap(_params).get("project")),descriptor);
        final String resFile;
        SModel[] zipped;
        try {
          zipped=MergeBackupUtil.loadZippedModels(new File(vFile.getCanonicalPath()),new MergeVersion[]{MergeVersion.BASE,MergeVersion.MINE,MergeVersion.REPOSITORY});
          resFile=File.createTempFile("mpstmp",".result").getAbsolutePath();
        }
 catch (        Exception e) {
          e.printStackTrace();
          return;
        }
        MergeModelsDialog dialog=new MergeModelsDialog(new MergeTemporaryModel(zipped[0],true),new MergeTemporaryModel(zipped[1],true),new MergeTemporaryModel(zipped[2],true),new SimpleDiffRequest(((Project)MapSequence.fromMap(_params).get("project")),zipped,new String[]{"Local Version","Merge Result","Remote Version"}));
        dialog.show();
        final org.jetbrains.mps.openapi.model.SModel result=dialog.getResultModelWithFixedId();
        if (result != null) {
          ModelAccess.instance().runWriteAction(new Runnable(){
            @Override public void run(){
              IFile iFile=FileSystem.getInstance().getFileByPath(resFile);
              if (!(iFile.exists())) {
                iFile.createNewFile();
              }
              try {
                ModelPersistence.saveModel(as_81bq2k_a0a0a0c0a0a0a0a0j0a0a0a4a0a5(result,SModelBase.class).getSModelInternal(),new FileDataSource(iFile));
              }
 catch (              IOException e) {
                if (LOG.isEnabledFor(Priority.ERROR)) {
                  LOG.error("Cannot save model.",e);
                }
              }
            }
          }
);
        }
        dialog.unregisterModels();
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "TestMergeAction",t);
    }
  }
}
