{
  try {
    final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,true,true,false,false){
      @Override public boolean isFileSelectable(      VirtualFile file){
        return !((file.isDirectory())) && file.getName().toLowerCase().endsWith(".zip");
      }
    }
;
    descriptor.setTitle("select archive with merge files");
    descriptor.setDescription("Zip files (*.zip) ");
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        VirtualFile vFile=FileChooser.chooseFile(descriptor,((Project)MapSequence.fromMap(_params).get("project")),null);
        final String resFile;
        SModel[] zipped;
        try {
          zipped=MergeBackupUtil.loadZippedModels(new File(vFile.getCanonicalPath()),new MergeVersion[]{MergeVersion.BASE,MergeVersion.MINE,MergeVersion.REPOSITORY});
          resFile=File.createTempFile("mpstmp",".result").getAbsolutePath();
        }
 catch (        Exception e) {
          e.printStackTrace();
          return;
        }
        SimpleContent[] diffContents=Sequence.fromIterable(Sequence.fromArray(zipped)).select(new ISelector<SModel,SimpleContent>(){
          public SimpleContent select(          SModel m){
            return new SimpleContent(ModelPersistence.modelToString(m),MPSFileTypeFactory.MPS_FILE_TYPE);
          }
        }
).toGenericArray(SimpleContent.class);
        MergeModelsDialog dialog=new MergeModelsDialog(new MergeTemporaryModel(zipped[0],true),new MergeTemporaryModel(zipped[1],true),new MergeTemporaryModel(zipped[2],true),new SimpleDiffRequest(((Project)MapSequence.fromMap(_params).get("project")),diffContents,new String[]{"Local Version","Merge Result","Remote Version"}));
        ISaveMergedModel saver=new ISaveMergedModel(){
          public boolean save(          MergeModelsDialog parent,          final org.jetbrains.mps.openapi.model.SModel resultModel){
            ModelAccess.instance().runWriteAction(new Runnable(){
              @Override public void run(){
                IFile iFile=FileSystem.getInstance().getFileByPath(resFile);
                if (!(iFile.exists())) {
                  iFile.createNewFile();
                }
                try {
                  PersistenceFacade.getInstance().getDefaultModelFactory().save(resultModel,new FileDataSource(iFile));
                }
 catch (                Exception e) {
                  if (LOG.isEnabledFor(Level.ERROR)) {
                    LOG.error("Cannot save model.",e);
                  }
                }
              }
            }
);
            return true;
          }
        }
;
        dialog.setSaver(saver);
        dialog.show();
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "TestMergeAction",t);
    }
  }
}
