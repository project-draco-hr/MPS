{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0le.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AddMenuPart;
      }
    break;
case 1:
  if (true) {
    return props_ConceptFunctionParameter_EditorCell;
  }
break;
case 2:
if (true) {
return props_ConceptFunctionParameter_OperationContext;
}
break;
case 3:
if (true) {
return props_ConceptFunctionParameter_childConcept;
}
break;
case 4:
if (true) {
return props_ConceptFunctionParameter_childSetter;
}
break;
case 5:
if (true) {
return props_ConceptFunctionParameter_concept;
}
break;
case 6:
if (true) {
return props_ConceptFunctionParameter_createdNode;
}
break;
case 7:
if (true) {
return props_ConceptFunctionParameter_currentTargetNode;
}
break;
case 8:
if (true) {
return props_ConceptFunctionParameter_link;
}
break;
case 9:
if (true) {
return props_ConceptFunctionParameter_nodeToCopyPreProcess;
}
break;
case 10:
if (true) {
return props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal;
}
break;
case 11:
if (true) {
return props_ConceptFunctionParameter_nodeToPastePostProcess;
}
break;
case 12:
if (true) {
return props_ConceptFunctionParameter_nodeToPasteWrap;
}
break;
case 13:
if (true) {
return props_ConceptFunctionParameter_nodeToWrap;
}
break;
case 14:
if (true) {
return props_ConceptFunctionParameter_parameterObject;
}
break;
case 15:
if (true) {
return props_ConceptFunctionParameter_parentNode;
}
break;
case 16:
if (true) {
return props_ConceptFunctionParameter_pattern;
}
break;
case 17:
if (true) {
return props_ConceptFunctionParameter_result;
}
break;
case 18:
if (true) {
return props_ConceptFunctionParameter_sourceNode;
}
break;
case 19:
if (true) {
return props_ConceptFunctionParameter_strictly;
}
break;
case 20:
if (true) {
return props_ConceptFunctionParameter_targetNode;
}
break;
case 21:
if (true) {
return props_ConceptFunctionParameter_wrapped;
}
break;
case 22:
if (true) {
return props_ConceptPart;
}
break;
case 23:
if (true) {
return props_ConceptRightTransformPart;
}
break;
case 24:
if (true) {
return props_ConceptSubstitutePart;
}
break;
case 25:
if (true) {
return props_ConceptsSubstituteMenuPart;
}
break;
case 26:
if (true) {
return props_CopyPasteHandlers;
}
break;
case 27:
if (true) {
return props_CopyPreProcessFunction;
}
break;
case 28:
if (true) {
return props_CopyPreProcessor;
}
break;
case 29:
if (true) {
return props_ExecuteSmartActionFunction;
}
break;
case 30:
if (true) {
return props_GenerateCodeAction;
}
break;
case 31:
if (true) {
return props_GenericSubstituteMenuPart;
}
break;
case 32:
if (true) {
return props_GetActionUIFunction;
}
break;
case 33:
if (true) {
return props_ISideTransform_String;
}
break;
case 34:
if (true) {
return props_ISubstitute_String;
}
break;
case 35:
if (true) {
return props_IncludeRightTransformForNodePart;
}
break;
case 36:
if (true) {
return props_IsSmartActionApplicableFunction;
}
break;
case 37:
if (true) {
return props_MenuPart;
}
break;
case 38:
if (true) {
return props_NF_Concept_NewInstance;
}
break;
case 39:
if (true) {
return props_NF_LinkList_AddNewChildOperation;
}
break;
case 40:
if (true) {
return props_NF_Link_SetNewChildOperation;
}
break;
case 41:
if (true) {
return props_NF_Model_CreateNewNodeOperation;
}
break;
case 42:
if (true) {
return props_NF_Model_CreateNewRootNodeOperation;
}
break;
case 43:
if (true) {
return props_NF_Node_InsertNewNextSiblingOperation;
}
break;
case 44:
if (true) {
return props_NF_Node_InsertNewPrevSiblingOperation;
}
break;
case 45:
if (true) {
return props_NF_Node_ReplaceWithNewOperation;
}
break;
case 46:
if (true) {
return props_NodeFactories;
}
break;
case 47:
if (true) {
return props_NodeFactory;
}
break;
case 48:
if (true) {
return props_NodeSetupFunction;
}
break;
case 49:
if (true) {
return props_NodeSetupFunction_EnclosingNode;
}
break;
case 50:
if (true) {
return props_NodeSetupFunction_NewNode;
}
break;
case 51:
if (true) {
return props_NodeSetupFunction_SampleNode;
}
break;
case 52:
if (true) {
return props_NodeSubstituteActions;
}
break;
case 53:
if (true) {
return props_NodeSubstituteActionsBuilder;
}
break;
case 54:
if (true) {
return props_NodeSubstituteMenuBuilderPart;
}
break;
case 55:
if (true) {
return props_NodeSubstitutePreconditionFunction;
}
break;
case 56:
if (true) {
return props_ParameterizedSideTransformMenuPart;
}
break;
case 57:
if (true) {
return props_ParameterizedSubstituteMenuPart;
}
break;
case 58:
if (true) {
return props_PastePostProcessFunction;
}
break;
case 59:
if (true) {
return props_PastePostProcessor;
}
break;
case 60:
if (true) {
return props_PasteWrapper;
}
break;
case 61:
if (true) {
return props_PasteWrappers;
}
break;
case 62:
if (true) {
return props_QueryFunction_ActionType;
}
break;
case 63:
if (true) {
return props_QueryFunction_CanSubstitute;
}
break;
case 64:
if (true) {
return props_QueryFunction_GenericSubstituteMenuPart;
}
break;
case 65:
if (true) {
return props_QueryFunction_IconNode;
}
break;
case 66:
if (true) {
return props_QueryFunction_ParameterizedSideTransform_Handler;
}
break;
case 67:
if (true) {
return props_QueryFunction_ParameterizedSideTransform_Query;
}
break;
case 68:
if (true) {
return props_QueryFunction_ParameterizedSubstitute_Handler;
}
break;
case 69:
if (true) {
return props_QueryFunction_ParameterizedSubstitute_Icon;
}
break;
case 70:
if (true) {
return props_QueryFunction_ParameterizedSubstitute_Query;
}
break;
case 71:
if (true) {
return props_QueryFunction_ParameterizedSubstitute_String;
}
break;
case 72:
if (true) {
return props_QueryFunction_PasteWrapper;
}
break;
case 73:
if (true) {
return props_QueryFunction_RemoveBy_Condition;
}
break;
case 74:
if (true) {
return props_QueryFunction_ReturnSmallPart;
}
break;
case 75:
if (true) {
return props_QueryFunction_STVariableInitializer;
}
break;
case 76:
if (true) {
return props_QueryFunction_ST_CommonInitializer;
}
break;
case 77:
if (true) {
return props_QueryFunction_ST_RemoveBy_Condition;
}
break;
case 78:
if (true) {
return props_QueryFunction_SideTransform_ConceptHandler;
}
break;
case 79:
if (true) {
return props_QueryFunction_SideTransform_Handler;
}
break;
case 80:
if (true) {
return props_QueryFunction_SideTransform_Icon;
}
break;
case 81:
if (true) {
return props_QueryFunction_SideTransform_NodeQuery;
}
break;
case 82:
if (true) {
return props_QueryFunction_SideTransform_String;
}
break;
case 83:
if (true) {
return props_QueryFunction_SubstituteIcon;
}
break;
case 84:
if (true) {
return props_QueryFunction_SubstituteString;
}
break;
case 85:
if (true) {
return props_QueryFunction_SubstituteVariableInitializer;
}
break;
case 86:
if (true) {
return props_QueryFunction_SubstituteWrapper;
}
break;
case 87:
if (true) {
return props_QueryFunction_Substitute_CommonInitializer;
}
break;
case 88:
if (true) {
return props_QueryFunction_Substitute_Handler;
}
break;
case 89:
if (true) {
return props_QueryFunction_Substitute_SelectionHandler;
}
break;
case 90:
if (true) {
return props_RemoveByConditionPart;
}
break;
case 91:
if (true) {
return props_RemoveDefaultsPart;
}
break;
case 92:
if (true) {
return props_RemovePart;
}
break;
case 93:
if (true) {
return props_RemoveSTByConditionPart;
}
break;
case 94:
if (true) {
return props_SNodeCreatorAndInitializer;
}
break;
case 95:
if (true) {
return props_SideTransformHintSubstituteActions;
}
break;
case 96:
if (true) {
return props_SideTransformHintSubstituteActionsBuilder;
}
break;
case 97:
if (true) {
return props_SideTransformHintSubstitutePreconditionFunction;
}
break;
case 98:
if (true) {
return props_SideTransformMenuBuilderPart;
}
break;
case 99:
if (true) {
return props_SideTransformMenuPart;
}
break;
case 100:
if (true) {
return props_SideTransformVariableDeclaration;
}
break;
case 101:
if (true) {
return props_SideTransformVariableReference;
}
break;
case 102:
if (true) {
return props_SideTransform_SimpleString;
}
break;
case 103:
if (true) {
return props_SimpleItemSubstitutePart;
}
break;
case 104:
if (true) {
return props_SimpleSideTransformMenuPart;
}
break;
case 105:
if (true) {
return props_SmartActionParameter;
}
break;
case 106:
if (true) {
return props_SmartActionParameterReference;
}
break;
case 107:
if (true) {
return props_SmartEditorActions;
}
break;
case 108:
if (true) {
return props_SubstituteMenuPart;
}
break;
case 109:
if (true) {
return props_SubstituteNodeBuilderVariableDeclaration;
}
break;
case 110:
if (true) {
return props_SubstituteNodeBuilderVariableReference;
}
break;
case 111:
if (true) {
return props_Substitute_SimpleString;
}
break;
case 112:
if (true) {
return props_SurroundWithAction;
}
break;
case 113:
if (true) {
return props_WrapperSubstituteMenuPart;
}
break;
default :
}
}
throw new IllegalStateException();
}
