{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.accounting.money.structure.MoneyType")) {
          SNode mgcmc=SModelOperations.createNewNode(_context.getModel(),"jetbrains.accounting.money.structure.MoneyGetCurrencyMethodCall",null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
          SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
          return mgcmc;
        }
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return ". currency";
      }
      public String getDescriptionText(      String pattern){
        return "get currency";
      }
    }
);
  }
{
    AbstractConceptDeclaration concept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.accounting.money.structure.MoneyType")) {
          SNode mgcmc=SModelOperations.createNewNode(_context.getModel(),"jetbrains.accounting.money.structure.MoneyIsZeroMethodCall",null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
          SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
          return mgcmc;
        }
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return ". isZero";
      }
      public String getDescriptionText(      String pattern){
        return "compare to zero";
      }
    }
);
  }
{
    AbstractConceptDeclaration concept=SModelUtil_new.findAbstractConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),"jetbrains.accounting.money.structure.MoneyType")) {
          SNode mgcmc=SModelOperations.createNewNode(_context.getModel(),"jetbrains.accounting.money.structure.MoneyGetAmountMethodCall",null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
          SLinkOperations.setTarget(mgcmc,"instance",_context.getSourceNode(),true);
          return mgcmc;
        }
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return ". amount";
      }
      public String getDescriptionText(      String pattern){
        return "get amount";
      }
    }
);
  }
  return result;
}
