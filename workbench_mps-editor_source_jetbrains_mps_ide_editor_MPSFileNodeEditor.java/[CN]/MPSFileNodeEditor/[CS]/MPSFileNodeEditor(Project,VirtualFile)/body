{
  this(project,null);
  final SRepositoryContentAdapter adapter=new SRepositoryContentAdapter(){
    @Override protected void startListening(    final SModel model){
      MPSNodeVirtualFile mpsNodeVirtualFile=ModelAccess.instance().runReadAction(new Computable<MPSNodeVirtualFile>(){
        @Override public MPSNodeVirtualFile compute(){
          SModel descr=SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(file.getParent()));
          if (descr != null && descr.equals(model)) {
            for (            SNode node : descr.getRootNodes()) {
              if (node.getName().equals(file.getNameWithoutExtension())) {
                return MPSNodesVirtualFileSystem.getInstance().getFileFor(node);
              }
            }
          }
          return null;
        }
      }
);
      if (mpsNodeVirtualFile != null) {
        myFile=mpsNodeVirtualFile;
        MPSFileNodeEditor.this.recreateEditor();
        SRepositoryRegistry.getInstance().removeGlobalListener(this);
      }
    }
  }
;
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      SRepositoryRegistry.getInstance().addGlobalListener(adapter);
    }
  }
);
}
