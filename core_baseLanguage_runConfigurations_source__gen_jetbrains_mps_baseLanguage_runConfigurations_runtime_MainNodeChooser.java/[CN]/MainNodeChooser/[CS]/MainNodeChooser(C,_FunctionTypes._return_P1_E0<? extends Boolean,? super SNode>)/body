{
  super();
  this.myTargetConcept=targetConcept;
  this.myAcceptor=acceptor;
  this.init(new ActionListener(){
    public void actionPerformed(    ActionEvent p0){
      final FindUsagesManager findUsegesManager=FindUsagesManager.getInstance();
      final FindUsagesManager.ProgressAdapter progressAdapter=new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator());
      final Wrappers._T<List<SNode>> toChooseFrom=new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Set<SNode> instances=findUsegesManager.findInstances(((AbstractConceptDeclaration)SNodeOperations.getAdapter(MainNodeChooser.this.myTargetConcept)),GlobalFileteredScope.getInstance(),progressAdapter,false);
          if (MainNodeChooser.this.myAcceptor == null) {
            toChooseFrom.value=ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(),instances)).toListSequence();
          }
 else {
            toChooseFrom.value=ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(),instances)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return MainNodeChooser.this.myAcceptor.invoke(it);
              }
            }
).toListSequence();
          }
        }
      }
);
      SNode selectedNode=CommonChoosers.showDialogNodeChooser(MainNodeChooser.this,toChooseFrom.value);
      MainNodeChooser.this.setNode(selectedNode);
    }
  }
);
}
