{
  super();
  myTargetConcept=targetConcept;
  myAcceptor=acceptor;
  final Wrappers._T<IModule> module=new Wrappers._T<IModule>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      module.value=SNodeOperations.getModel(targetConcept).getModelDescriptor().getModule();
    }
  }
);
  myScope=new GlobalFilteredScope(){
    @Nullable @Override protected IModule getRequiredModule(){
      return module.value;
    }
  }
;
  this.init(new ActionListener(){
    public void actionPerformed(    ActionEvent p0){
      final FindUsagesManager findUsegesManager=FindUsagesManager.getInstance();
      final FindUsagesManager.ProgressAdapter progressAdapter=new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator());
      final Wrappers._T<List<SNode>> toChooseFrom=new Wrappers._T<List<SNode>>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Set<SNode> instances=findUsegesManager.findInstances(MainNodeChooser.this.myTargetConcept,myScope,progressAdapter,false);
          if (MainNodeChooser.this.myAcceptor == null) {
            toChooseFrom.value=ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(),instances)).toListSequence();
          }
 else {
            toChooseFrom.value=ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SNode>(),instances)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return MainNodeChooser.this.myAcceptor.invoke(it);
              }
            }
).toListSequence();
          }
        }
      }
);
      SNode selectedNode=CommonChoosers.showDialogNodeChooser(MainNodeChooser.this,toChooseFrom.value);
      MainNodeChooser.this.setNode(selectedNode);
    }
  }
);
  addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      final String text=getText();
      if (StringUtils.isEmpty(text)) {
        setNode(null);
        return;
      }
      int lastDot=text.lastIndexOf(".");
      if (lastDot <= 0) {
        setNode(null);
        return;
      }
      final List<SModelDescriptor> descriptors=myScope.getModelDescriptors(text.substring(0,lastDot));
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          SNode foundNode=null;
          for (          SModelDescriptor descriptor : ListSequence.fromList(descriptors)) {
            SModel smodel=descriptor.getSModel();
            Iterable<SNode> nodes=ListSequence.fromList(SModelOperations.getNodes(smodel,null)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                if (!(it.isInstanceOfConcept(((AbstractConceptDeclaration)SNodeOperations.getAdapter(MainNodeChooser.this.myTargetConcept))))) {
                  return false;
                }
                if (myAcceptor == null) {
                  return getFqName(it).equals(text);
                }
 else {
                  return myAcceptor.invoke(it) && getFqName(it).equals(text);
                }
              }
            }
);
            if (!(Sequence.fromIterable(nodes).isEmpty())) {
              foundNode=Sequence.fromIterable(nodes).first();
              break;
            }
          }
          setNode(foundNode);
        }
      }
);
    }
  }
);
}
