{
  final List<SNode> pathToRoot=SModelUtils.getPathToRoot(e.getChild());
  final List<SNode> currentChildren=getCurrentChildren(e.getParent(),e.getChildRole());
  myCommandQueue.runTask(new Runnable(){
    public void run(){
      fireChangeUpdateStarted();
      if (!(checkLoaded())) {
        return;
      }
      fireChangeUpdateStarted();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          if (isAncestorAlreadyAdded(pathToRoot)) {
            return;
          }
          if (removeChanges(DeleteNodeChange.class,new _FunctionTypes._return_P1_E0<Boolean,DeleteNodeChange>(){
            public Boolean invoke(            DeleteNodeChange ch){
              return ch.getAffectedNodeId().equals(e.getChild().getSNodeId()) && ObjectUtils.equals(getBaseParentId(ch.getAffectedNodeId()),e.getParent().getSNodeId());
            }
          }
) != 0) {
            return;
          }
          SNode child=e.getChild();
          String prevRole=null;
          SNode prevSibling=child.prevSibling();
          if (prevSibling != null) {
            prevRole=prevSibling.getRole_();
          }
          boolean isSingle=SModelUtils.isChildInSingleRole(e);
          if (isSingle) {
            removeChanges(DeleteNodeChange.class,new _FunctionTypes._return_P1_E0<Boolean,DeleteNodeChange>(){
              public Boolean invoke(              DeleteNodeChange ch){
                return ObjectUtils.equals(getBaseParentId(ch.getAffectedNodeId()),e.getParent().getSNodeId()) && e.getChildRole().equals(ch.getRole());
              }
            }
);
            addChange(new SetNodeChange(child.getConceptFqName(),child.getSNodeId(),e.getChildRole(),e.getParent().getSNodeId(),check_7601193928418818744(check_7601193928418818745(myBaseVersionModel.getNodeById(e.getParent().getSNodeId()),e)),prevRole),e.getAffectedRoot());
          }
 else {
            refreshMultipleChildChanges(e.getParent(),e.getChildRole(),currentChildren,false);
          }
        }
      }
);
      fireChangeUpdateFinished();
    }
  }
);
}
