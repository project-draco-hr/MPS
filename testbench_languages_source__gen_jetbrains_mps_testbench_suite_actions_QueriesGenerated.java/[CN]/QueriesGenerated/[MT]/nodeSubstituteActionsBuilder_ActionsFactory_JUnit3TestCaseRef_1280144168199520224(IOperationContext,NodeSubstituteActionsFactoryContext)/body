{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode msuite=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false);
          final IScope mscope=ModuleSuite_Behavior.call_scope_1280144168199518341(msuite);
          return Sequence.fromIterable(ModuleSuite_Behavior.call_models_1280144168199531863(msuite)).<SNode>translate(new ITranslator2<SModelDescriptor,SNode>(){
            public Iterable<SNode> translate(            SModelDescriptor smd){
              return new AllSubclassifiersScope(SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a0c0a0a0a0a2a0a1a2().createNode(),"classifier",false),smd.getSModel(),IClassifiersSearchScope.CLASS,(mscope != null ? mscope : operationContext.getScope())).getNodes(new Condition<SNode>(){
                public boolean met(                SNode cls){
                  return !(SPropertyOperations.getBoolean(cls,"abstractClass"));
                }
              }
);
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode tref=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef",null);
              SLinkOperations.setTarget(tref,"klass",(item),false);
              model.getModelDescriptor().getModule().addDependency(SNodeOperations.getModel((item)).getModelDescriptor().getModule().getModuleReference(),false);
              model.addModelImport(SNodeOperations.getModel((item)).getSModelReference(),false);
              return tref;
            }
            public String getMatchingText(            String pattern){
              return Classifier_Behavior.call_getNestedName_8540045600162184125((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
