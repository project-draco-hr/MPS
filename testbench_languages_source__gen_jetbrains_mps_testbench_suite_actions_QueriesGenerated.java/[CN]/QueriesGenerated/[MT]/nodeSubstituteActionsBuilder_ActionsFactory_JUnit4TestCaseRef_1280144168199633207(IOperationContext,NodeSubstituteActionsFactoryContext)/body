{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return JUnit3TestCaseRef_Behavior.call_getTestClassesForModule_1514755338275898928(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef"))),SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode tref=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef",null);
              SLinkOperations.setTarget(tref,"klass",(item),false);
              ((AbstractModule)model.getModule()).addDependency(SNodeOperations.getModel((item)).getModule().getModuleReference(),false);
              ((SModelInternal)model).addModelImport(SNodeOperations.getModel((item)).getReference(),false);
              return tref;
            }
            public String getMatchingText(            String pattern){
              return BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getNestedName_8540045600162184125",new Object[]{});
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
