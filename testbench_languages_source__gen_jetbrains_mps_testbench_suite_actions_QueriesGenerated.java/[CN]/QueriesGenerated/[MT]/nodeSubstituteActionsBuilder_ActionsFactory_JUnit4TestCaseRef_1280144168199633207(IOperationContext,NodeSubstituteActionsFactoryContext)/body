{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          SNode msuite=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false);
          final IScope mscope=ModuleSuite_Behavior.call_scope_1280144168199518341(msuite);
          final SNode testAnn=SLinkOperations.getTarget(_quotation_createNode_wt5x6r_a0a2a0a1a(),"annotation",false);
          return Sequence.fromIterable(ModuleSuite_Behavior.call_models_1280144168199531863(msuite)).translate(new ITranslator2<SModel,SNode>(){
            public Iterable<SNode> translate(            SModel smd){
              return new ReachableClassifiersScope(smd.getSModel(),IClassifiersSearchScope.CLASS,(mscope != null ? mscope : operationContext.getScope())).getNodes(new Condition<SNode>(){
                public boolean met(                SNode cls){
                  return Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(cls)).translate(new ITranslator2<SNode,SNode>(){
                    public Iterable<SNode> translate(                    SNode m){
                      return SLinkOperations.getTargets(m,"annotation",true);
                    }
                  }
).any(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode ani){
                      return SLinkOperations.getTarget(ani,"annotation",false) == testAnn;
                    }
                  }
);
                }
              }
);
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode tref=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit4TestCaseRef",null);
              SLinkOperations.setTarget(tref,"klass",(item),false);
              model.getModelDescriptor().getModule().addDependency(SNodeOperations.getModel((item)).getModelDescriptor().getModule().getModuleReference(),false);
              ((jetbrains.mps.smodel.SModel)model).addModelImport(SNodeOperations.getModel((item)).getReference(),false);
              return tref;
            }
            public String getMatchingText(            String pattern){
              return BehaviorReflection.invokeVirtual(String.class,(item),"virtual_getNestedName_8540045600162184125",new Object[]{});
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
