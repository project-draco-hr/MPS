{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,"jetbrains.mps.testbench.suite.structure.SolutionRef").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SModuleReference> queryResult=new Computable<Iterable<SModuleReference>>(){
        public Iterable<SModuleReference> compute(){
          Iterable<Solution> allSolutions=ModuleRepositoryFacade.getInstance().getAllModules(Solution.class);
          return Sequence.fromIterable(allSolutions).select(new ISelector<Solution,SModuleReference>(){
            public SModuleReference select(            Solution s){
              return s.getModuleReference();
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SModuleReference item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode solutionRef=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,"jetbrains.mps.testbench.suite.structure.SolutionRef"));
              SPropertyOperations.set(solutionRef,MetaAdapterFactory.getProperty(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,0x11c3fc56a6d1cbddL,"moduleFQName"),(item).getModuleName());
              SPropertyOperations.set(solutionRef,MetaAdapterFactory.getProperty(0xd3c5a46fb8c247dbL,0xad0a30b8f19c2055L,0x11c3fc56a6d1cbdcL,0x11c3fc56a6d1cbdeL,"moduleID"),(item).getModuleId().toString());
              return solutionRef;
            }
            public String getMatchingText(            String pattern){
              return (item).getModuleName();
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
