{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.testbench.suite.structure.SolutionRef");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<ModuleReference> queryResult=new Computable<Iterable<ModuleReference>>(){
        public Iterable<ModuleReference> compute(){
          Iterable<Solution> allSolutions=ModuleRepositoryFacade.getInstance().getAllModules(Solution.class);
          return Sequence.fromIterable(allSolutions).select(new ISelector<Solution,ModuleReference>(){
            public ModuleReference select(            Solution s){
              return s.getModuleReference();
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final ModuleReference item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode solutionRef=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.SolutionRef",null);
              SPropertyOperations.set(solutionRef,"moduleFQName",(item).getModuleFqName());
              SPropertyOperations.set(solutionRef,"moduleID",(item).getModuleId().toString());
              return solutionRef;
            }
            public String getMatchingText(            String pattern){
              return (item).getModuleFqName();
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
