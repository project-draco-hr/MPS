{
  super("Fix priority");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Fix priority";
    }
    public String getAdditionalInfo(){
      return "Fix priority";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.BinaryOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (SNodeOperations.getParent(node) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        SNode parent=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
        boolean isRigth=false;
        if (SLinkOperations.getTarget(parent,"rightExpression",true) == node) {
          isRigth=true;
        }
 else         if (SLinkOperations.getTarget(parent,"leftExpression",true) == node) {
          isRigth=false;
        }
        if (ParenthesisUtil.isBadPriority(node,parent,isRigth)) {
          return true;
        }
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
      if (SNodeOperations.getParent(node) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        SNode parent=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
        boolean isRigth=false;
        if (SLinkOperations.getTarget(parent,"rightExpression",true) == node) {
          isRigth=true;
        }
 else         if (SLinkOperations.getTarget(parent,"leftExpression",true) == node) {
          isRigth=false;
        }
        if (ParenthesisUtil.isBadPriority(node,parent,isRigth)) {
          if (SLinkOperations.getTarget(parent,"leftExpression",true) == node) {
            ParenthesisUtil.rotateTree(node,parent,false);
          }
 else           if (SLinkOperations.getTarget(parent,"rightExpression",true) == node) {
            ParenthesisUtil.rotateTree(node,parent,true);
          }
        }
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
