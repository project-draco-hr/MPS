{
  myEdgeLengths=MapSequence.fromMap(new HashMap<Edge,Integer>());
  for (  Node node : Sequence.fromIterable(nodesWithSize)) {
    splitEdges(node);
    Map<Direction2D,List<Edge>> rectEdges=makeRectangleForNode(node);
    for (    Direction2D dir : Direction2D.values()) {
      int length=MapSequence.fromMap(nodeSizes).get(node).width;
      if (dir.isVertical()) {
        length=MapSequence.fromMap(nodeSizes).get(node).height;
      }
      List<Edge> edges=MapSequence.fromMap(rectEdges).get(dir);
      int edgeLength=length / ListSequence.fromList(edges).count();
      for (      Edge edge : ListSequence.fromList(edges)) {
        if (edge == ListSequence.fromList(edges).last()) {
          MapSequence.fromMap(myEdgeLengths).put(edge,length - (edgeLength * (ListSequence.fromList(edges).count() - 1)));
        }
 else {
          MapSequence.fromMap(myEdgeLengths).put(edge,edgeLength);
        }
      }
    }
  }
  if (SHOW_INFO > 0) {
    for (    Face face : ListSequence.fromList(myEmbeddedGraph.getFaces())) {
      System.out.println("face: ");
      if (myEmbeddedGraph.isOuterFace(face)) {
        System.out.println("this is outer face");
      }
      for (      Dart dart : ListSequence.fromList(face.getDarts())) {
        String size=" ";
        if (MapSequence.fromMap(myEdgeLengths).containsKey(dart.getEdge())) {
          size+=MapSequence.fromMap(myEdgeLengths).get(dart.getEdge());
        }
        System.out.println("  " + dart + " dir = "+ MapSequence.fromMap(myDirections).get(dart)+ size);
      }
    }
  }
}
