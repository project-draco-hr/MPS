{
  super.updateMethod(sourceMethod,method);
  if (this.myCheckBox.isSelected()) {
    ListSequence.fromList(SLinkOperations.getTargets(method,"annotation",true)).addElement(new OverrideClassMethodStrategy.QuotationClass_2096_1().createNode());
  }
  Iterable<SNode> paramList=ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return new OverrideClassMethodStrategy.QuotationClass_2096_2().createNode(it);
    }
  }
);
  SNode superCallExpr=new OverrideClassMethodStrategy.QuotationClass_2096_0().createNode(sourceMethod,Sequence.fromIterable(paramList).toListSequence());
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType")) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(new OverrideClassMethodStrategy.QuotationClass_2096_3().createNode(superCallExpr));
  }
 else {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(this.getReturnStatement(superCallExpr));
  }
}
