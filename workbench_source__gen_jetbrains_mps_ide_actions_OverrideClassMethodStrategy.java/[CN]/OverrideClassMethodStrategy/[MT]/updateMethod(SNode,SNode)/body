{
  super.updateMethod(sourceMethod,method);
  if (myOptions != null) {
    myOptions.getStateObject().addOverrideAnnotation=myCheckBox.isSelected();
  }
  if (myCheckBox.isSelected()) {
    boolean isNeedAddAnnotation=true;
    for (    SNode annotation : SLinkOperations.getTargets(method,"annotation",true)) {
      if (SLinkOperations.getTarget(annotation,"annotation",false) == SNodeOperations.getNode("f:java_stub#java.lang(java.lang@java_stub)","~Override")) {
        isNeedAddAnnotation=false;
        break;
      }
    }
    if (isNeedAddAnnotation) {
      ListSequence.fromList(SLinkOperations.getTargets(method,"annotation",true)).addElement(new OverrideClassMethodStrategy.QuotationClass_px9rr4_a0a0a0c0c0a().createNode());
    }
  }
  Iterable<SNode> paramList=ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).<SNode>select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return new OverrideClassMethodStrategy.QuotationClass_px9rr4_a0a0a0a0e0a().createNode(it);
    }
  }
);
  SNode superCallExpr=new OverrideClassMethodStrategy.QuotationClass_px9rr4_a0a5a0().createNode(sourceMethod,Sequence.fromIterable(paramList).toListSequence());
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType")) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(new OverrideClassMethodStrategy.QuotationClass_px9rr4_a0a0a0h0a().createNode(superCallExpr));
  }
 else {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).addElement(getReturnStatement(superCallExpr));
  }
}
