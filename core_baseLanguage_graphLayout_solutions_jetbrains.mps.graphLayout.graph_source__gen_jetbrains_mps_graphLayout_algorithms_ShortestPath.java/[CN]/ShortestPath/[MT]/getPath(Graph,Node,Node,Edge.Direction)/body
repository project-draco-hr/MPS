{
  Map<Node,Integer> dist=new NodeMap<Integer>(graph);
  Map<Node,Edge> prev=new NodeMap<Edge>(graph);
  Queue<Node> queue=QueueSequence.fromQueue(new LinkedList<Node>());
  MapSequence.fromMap(dist).put(source,0);
  MapSequence.fromMap(prev).put(source,null);
  QueueSequence.fromQueue(queue).addLastElement(source);
  boolean found=false;
  while (QueueSequence.fromQueue(queue).count() > 0) {
    Node cur=QueueSequence.fromQueue(queue).removeFirstElement();
    if (cur == target) {
      found=true;
      break;
    }
    for (    Edge edge : ListSequence.fromList(cur.getEdges(direction))) {
      Node next=edge.getOpposite(cur);
      if (MapSequence.fromMap(dist).get(next) == null) {
        QueueSequence.fromQueue(queue).addLastElement(next);
        MapSequence.fromMap(dist).put(next,MapSequence.fromMap(dist).get(cur) + 1);
        MapSequence.fromMap(prev).put(next,edge);
      }
    }
  }
  if (!(found)) {
    return null;
  }
  List<Edge> path=ListSequence.fromList(new LinkedList<Edge>());
  Node cur=target;
  while (MapSequence.fromMap(prev).get(cur) != null) {
    ListSequence.fromList(path).insertElement(0,MapSequence.fromMap(prev).get(cur));
    cur=MapSequence.fromMap(prev).get(cur).getOpposite(cur);
  }
  return path;
}
