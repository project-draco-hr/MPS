{
  List<SNode> result=new ArrayList<SNode>();
  List<SNode> visited=new ArrayList<SNode>();
  with_throws:   for (  SNode tt : SLinkOperations.getTargets(thisNode,"throwsType",true)) {
    SNode clstt=SNodeOperations.as(tt,"jetbrains.mps.baseLanguage.structure.ClassifierType");
    if (clstt != null) {
      if (!(Classifier_Behavior.call_isDescendant_7165541881557222913(SLinkOperations.getTarget(clstt,"classifier",false),SLinkOperations.getTarget(new FunctionType_Behavior.QuotationClass_ksvwin_a0b0a0a1a2a41().createNode(),"classifier",false)))) {
        for (int i=0; i < ListSequence.fromList(visited).count(); ++i) {
          SNode restt=ListSequence.fromList(visited).getElement(i);
          if (Classifier_Behavior.call_isDescendant_7165541881557222913(SLinkOperations.getTarget(restt,"classifier",false),SLinkOperations.getTarget(clstt,"classifier",false))) {
            ListSequence.fromList(visited).setElement(i,clstt);
            continue with_throws;
          }
        }
        ListSequence.fromList(visited).addElement(clstt);
      }
    }
 else {
      ListSequence.fromList(result).addElement(tt);
    }
  }
  ListSequence.fromList(result).addSequence(ListSequence.fromList(visited));
  return result;
}
