{
  String rtCls=FunctionType_Behavior.call_getRuntimeClassName_1230472987259(thisNode) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(thisNode);
  SNode ice=MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(rtCls);
  if (ice == null) {
    throw new RuntimeException("No classifier found:" + rtCls);
  }
  SNode ct=new FunctionType_Behavior.QuotationClass_ksvwin_a0a3a9().createNode(ice);
  if ((FunctionType_Behavior.call_getResultType_1230475757059(thisNode) != null)) {
    ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(ClassifierTypeUtil.copyTypeRecursively(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionType_Behavior.call_getResultType_1230475757059(thisNode)),true));
  }
  if ((FunctionType_Behavior.call_getTerminateType_1232032188607(thisNode) != null)) {
    ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(ClassifierTypeUtil.copyTypeRecursively(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionType_Behavior.call_getTerminateType_1232032188607(thisNode)),true));
  }
  for (  SNode pt : SLinkOperations.getTargets(thisNode,"parameterType",true)) {
    ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(ClassifierTypeUtil.copyTypeRecursively(ClassifierTypeUtil.getTypeCoercedToClassifierType(pt),false));
  }
  for (  SNode tt : ListSequence.fromList(FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(thisNode)).sort(new ISelector<SNode,String>(){
    public String select(    SNode t){
      String key=Classifier_Behavior.call_getNestedName_8540045600162184125(SLinkOperations.getTarget(SNodeOperations.as(t,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false));
      return (key != null ? key : BaseConcept_Behavior.call_getPresentation_1213877396640(t));
    }
  }
,true)) {
    ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(ClassifierTypeUtil.copyTypeRecursively(tt,true));
  }
  return ct;
}
