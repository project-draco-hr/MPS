{
  JPanel dependenciesTab=new JPanel();
  dependenciesTab.setLayout(new GridLayoutManager(1,1,INSETS,-1,-1));
  final JBTable tableDepend=new JBTable();
  tableDepend.setShowHorizontalLines(false);
  tableDepend.setShowVerticalLines(false);
  tableDepend.setAutoCreateRowSorter(false);
  tableDepend.setAutoscrolls(true);
  tableDepend.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myDependTableModel=getDependTableModel();
  tableDepend.setModel(myDependTableModel);
  tableDepend.setDefaultRenderer(DependenciesTableItem.class,getTableCellRender());
  tableDepend.setDefaultRenderer(Boolean.class,new BooleanTableCellRenderer());
  tableDepend.setDefaultRenderer(SDependencyScope.class,new ComboBoxTableRenderer<SDependencyScope>(SDependencyScope.values()));
  tableDepend.setDefaultEditor(SDependencyScope.class,getTableCellEditor());
  tableDepend.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  TableColumn column=null;
  if (myDependTableModel.getExportColumnIndex() >= 0) {
    column=tableDepend.getTableHeader().getColumnModel().getColumn(myDependTableModel.getExportColumnIndex());
    column.setMinWidth(20);
    column.setPreferredWidth(50);
    column.setMaxWidth(50);
  }
  if (myDependTableModel.getRoleColumnIndex() >= 0) {
    column=tableDepend.getTableHeader().getColumnModel().getColumn(myDependTableModel.getRoleColumnIndex());
    column.setMinWidth(80);
    column.setPreferredWidth(100);
    column.setMaxWidth(120);
  }
  if (myDependTableModel.getItemColumnIndex() >= 0) {
    column=tableDepend.getTableHeader().getColumnModel().getColumn(myDependTableModel.getItemColumnIndex());
    column.setPreferredWidth(200);
  }
  tableDepend.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
    }
  }
);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(tableDepend);
  decorator.setAddAction(getAnActionButtonRunnable()).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      int first=tableDepend.getSelectionModel().getMinSelectionIndex();
      if (!confirmRemove(myDependTableModel.getValueAt(first,myDependTableModel.getItemColumnIndex()))) {
        return;
      }
      int last=tableDepend.getSelectionModel().getMaxSelectionIndex();
      TableUtil.removeSelectedItems(tableDepend);
      myDependTableModel.fireTableRowsDeleted(first,last);
    }
  }
).addExtraAction(new FindAnActionButton(tableDepend){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myDependTableModel.getValueAt(tableDepend.getSelectionModel().getMinSelectionIndex(),myDependTableModel.getItemColumnIndex()));
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,300));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  dependenciesTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(dependenciesTab);
  new SpeedSearchBase<JBTable>(tableDepend){
    @Override public int getSelectedIndex(){
      return tableDepend.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return tableDepend.convertRowIndexToModel(viewIndex);
    }
    @Override public Object[] getAllElements(){
      final int count=myDependTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myDependTableModel.getValueAt(idx);
      }
      return elements;
    }
    @Override public String getElementText(    Object element){
      if (!(element instanceof DependenciesTableItem))       return "";
      return ((DependenciesTableItem)element).getItem().toString();
    }
    @Override public void selectElement(    Object element,    String selectedText){
      final int count=myDependTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myDependTableModel.getValueAt(row))) {
          final int viewRow=tableDepend.convertRowIndexToView(row);
          tableDepend.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(tableDepend);
          break;
        }
      }
    }
  }
.setComparator(new SpeedSearchComparator(false,true));
}
