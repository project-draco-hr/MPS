{
  JPanel dependenciesTab=new JPanel();
  dependenciesTab.setLayout(new GridLayoutManager(1,1,INSETS,-1,-1));
  final JBTable tableDepend=new JBTable();
  tableDepend.setShowHorizontalLines(false);
  tableDepend.setShowVerticalLines(false);
  tableDepend.setAutoCreateRowSorter(false);
  tableDepend.setAutoscrolls(true);
  myDependTableModel=getDependTableModel();
  tableDepend.setModel(myDependTableModel);
  tableDepend.setDefaultRenderer(DependenciesTableItem.class,new DependencyTableCellRender(getScope()));
  tableDepend.setDefaultRenderer(Boolean.class,new BooleanTableCellRenderer());
  tableDepend.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  setFixedColumnWidth(tableDepend,DependTableModel.EXPORT_COLUMN);
  setFixedColumnWidth(tableDepend,DependTableModel.ROLE_COLUMN);
  tableDepend.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
    }
  }
);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(tableDepend);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final List<AnActionButton> list=getAnActions();
      if (list.size() == 0)       return;
 else       if (list.size() == 1) {
        list.get(0).actionPerformed(null);
      }
 else {
        final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<AnActionButton>(null,getAnActions()){
          @Override public Icon getIconFor(          AnActionButton aValue){
            return aValue.getTemplatePresentation().getIcon();
          }
          @Override public boolean hasSubstep(          AnActionButton selectedValue){
            return false;
          }
          @Override public boolean isMnemonicsNavigationEnabled(){
            return true;
          }
          @Override public PopupStep onChosen(          final AnActionButton selectedValue,          final boolean finalChoice){
            return doFinalStep(new Runnable(){
              public void run(){
                selectedValue.actionPerformed(null);
              }
            }
);
          }
          @Override @NotNull public String getTextFor(          AnActionButton value){
            return value.getTemplatePresentation().getText();
          }
        }
);
        popup.show(button.getPreferredPopupPoint());
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(tableDepend);
      myDependTableModel.fireTableDataChanged();
    }
  }
);
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  dependenciesTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(dependenciesTab);
}
