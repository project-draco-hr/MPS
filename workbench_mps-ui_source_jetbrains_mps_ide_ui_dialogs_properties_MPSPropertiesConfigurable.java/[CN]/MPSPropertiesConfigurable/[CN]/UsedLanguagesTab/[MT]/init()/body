{
  JPanel usedLangsTab=new JPanel();
  usedLangsTab.setLayout(new GridLayoutManager(1,1,INSETS,-1,-1));
  final JBTable usedLangsTable=new JBTable();
  usedLangsTable.setShowHorizontalLines(false);
  usedLangsTable.setShowVerticalLines(false);
  usedLangsTable.setAutoCreateRowSorter(false);
  usedLangsTable.setAutoscrolls(true);
  usedLangsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myUsedLangsTableModel=getUsedLangsTableModel();
  usedLangsTable.setModel(myUsedLangsTableModel);
  usedLangsTable.setDefaultRenderer(ModuleReference.class,getTableCellRender());
  JComboBox roleEditor=new JComboBox(new EnumComboBoxModel<DependenciesTableItemRole>(DependenciesTableItemRole.class));
  usedLangsTable.setDefaultEditor(DependenciesTableItemRole.class,new DefaultCellEditor(roleEditor));
  usedLangsTable.setDefaultRenderer(DependenciesTableItemRole.class,new ComboBoxTableRenderer<DependenciesTableItemRole>(DependenciesTableItemRole.values()){
    @Override protected String getTextFor(    @NotNull final DependenciesTableItemRole value){
      return value.toString();
    }
  }
);
  usedLangsTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  usedLangsTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
    }
  }
);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(usedLangsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      List<ModuleReference> list=(new LanguageOrDevKitChooser()).compute();
      for (      ModuleReference reference : list)       myUsedLangsTableModel.addItem(reference);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      int first=usedLangsTable.getSelectionModel().getMinSelectionIndex();
      if (!confirmRemove(myUsedLangsTableModel.getValueAt(first,UsedLangsTableModel.ITEM_COLUMN)))       return;
      int last=usedLangsTable.getSelectionModel().getMaxSelectionIndex();
      TableUtil.removeSelectedItems(usedLangsTable);
      myUsedLangsTableModel.fireTableRowsDeleted(first,last);
    }
  }
).addExtraAction(new FindAnActionButton(usedLangsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myUsedLangsTableModel.getValueAt(usedLangsTable.getSelectionModel().getMinSelectionIndex(),UsedLangsTableModel.ITEM_COLUMN));
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,300));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(usedLangsTab);
  new SpeedSearchBase<JBTable>(usedLangsTable){
    @Override public int getSelectedIndex(){
      return usedLangsTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return usedLangsTable.convertRowIndexToModel(viewIndex);
    }
    @Override public Object[] getAllElements(){
      final int count=myUsedLangsTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myUsedLangsTableModel.getValueAt(idx,UsedLangsTableModel.ITEM_COLUMN);
      }
      return elements;
    }
    @Override public String getElementText(    Object element){
      if (!(element instanceof ModuleReference))       return "";
      return ((ModuleReference)element).getModuleName();
    }
    @Override public void selectElement(    Object element,    String selectedText){
      final int count=myUsedLangsTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myUsedLangsTableModel.getValueAt(row,UsedLangsTableModel.ITEM_COLUMN))) {
          final int viewRow=usedLangsTable.convertRowIndexToView(row);
          usedLangsTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(usedLangsTable);
          break;
        }
      }
    }
  }
.setComparator(new SpeedSearchComparator(false,true));
}
