{
  JPanel usedLangsTab=new JPanel();
  usedLangsTab.setLayout(new GridLayoutManager(1,1,INSETS,-1,-1));
  final JBTable usedLangsTable=new JBTable();
  usedLangsTable.setShowHorizontalLines(false);
  usedLangsTable.setShowVerticalLines(false);
  usedLangsTable.setAutoCreateRowSorter(false);
  usedLangsTable.setAutoscrolls(true);
  usedLangsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myUsedLangsTableModel=getUsedLangsTableModel();
  usedLangsTable.setModel(myUsedLangsTableModel);
  usedLangsTable.setDefaultRenderer(ModuleReference.class,getTableCellRender());
  JComboBox roleEditor=new JComboBox(new EnumComboBoxModel<DependenciesTableItemRole>(DependenciesTableItemRole.class));
  usedLangsTable.setDefaultEditor(DependenciesTableItemRole.class,new DefaultCellEditor(roleEditor));
  usedLangsTable.setDefaultRenderer(DependenciesTableItemRole.class,new ComboBoxTableRenderer<DependenciesTableItemRole>(DependenciesTableItemRole.values()){
    @Override protected String getTextFor(    @NotNull final DependenciesTableItemRole value){
      return value.toString();
    }
  }
);
  usedLangsTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  usedLangsTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
    }
  }
);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(usedLangsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<AnActionButton>(null,getAnActions()){
        @Override public Icon getIconFor(        AnActionButton aValue){
          return aValue.getTemplatePresentation().getIcon();
        }
        @Override public boolean hasSubstep(        AnActionButton selectedValue){
          return false;
        }
        @Override public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        @Override public PopupStep onChosen(        final AnActionButton selectedValue,        final boolean finalChoice){
          return doFinalStep(new Runnable(){
            public void run(){
              selectedValue.actionPerformed(null);
            }
          }
);
        }
        @Override @NotNull public String getTextFor(        AnActionButton value){
          return value.getTemplatePresentation().getText();
        }
      }
);
      popup.show(button.getPreferredPopupPoint());
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      int first=usedLangsTable.getSelectionModel().getMinSelectionIndex();
      if (!confirmRemove(myUsedLangsTableModel.getValueAt(first,UsedLangsTableModel.ITEM_COLUMN)))       return;
      int last=usedLangsTable.getSelectionModel().getMaxSelectionIndex();
      TableUtil.removeSelectedItems(usedLangsTable);
      myUsedLangsTableModel.fireTableRowsDeleted(first,last);
    }
  }
).addExtraAction(new FindAnActionButton(usedLangsTable){
    @Override public void actionPerformed(    AnActionEvent e){
      findUsages(myUsedLangsTableModel.getValueAt(usedLangsTable.getSelectionModel().getMinSelectionIndex(),UsedLangsTableModel.ITEM_COLUMN));
    }
  }
);
  decorator.setPreferredSize(new Dimension(500,300));
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(usedLangsTab);
}
