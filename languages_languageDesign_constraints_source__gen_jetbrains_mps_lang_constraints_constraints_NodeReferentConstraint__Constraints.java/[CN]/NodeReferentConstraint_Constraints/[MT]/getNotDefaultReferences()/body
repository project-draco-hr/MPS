{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("applicableLink",new BaseReferenceConstraintsDescriptor("applicableLink",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode applicableConcept=NodeReferentConstraint_Behavior.call_getApplicableConcept_1213877399322(_context.getReferenceNode());
          if (applicableConcept == null) {
            SNode root=SNodeOperations.getContainingRoot(_context.getEnclosingNode());
            if (SNodeOperations.isInstanceOf(root,"jetbrains.mps.lang.constraints.structure.ConceptConstraints")) {
              applicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(root,"jetbrains.mps.lang.constraints.structure.ConceptConstraints"),"concept",false);
            }
 else {
              applicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(root,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"concept",false);
            }
          }
          return AbstractConceptDeclaration_Behavior.call_getReferenceLinkDeclarations_1213877394496(applicableConcept);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hkfysg_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
