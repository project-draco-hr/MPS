{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L,0x8b10c83066ffa4a1L,0x10b731752daL,0x10b7317b98aL,"applicableLink"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x3f4bc5f5c6c14a28L,0x8b10c83066ffa4a1L,0x10b731752daL,0x10b7317b98aL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode applicableConcept=NodeReferentConstraint__BehaviorDescriptor.getApplicableConcept_idhEwIMWq.invoke(_context.getReferenceNode());
          if (applicableConcept == null) {
            SNode root=SNodeOperations.getContainingRoot(_context.getEnclosingNode());
            if (SNodeOperations.isInstanceOf(root,MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L,0x8b10c83066ffa4a1L,0x11a7208faaeL,"jetbrains.mps.lang.constraints.structure.ConceptConstraints"))) {
              applicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(root,MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L,0x8b10c83066ffa4a1L,0x11a7208faaeL,"jetbrains.mps.lang.constraints.structure.ConceptConstraints")),MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L,0x8b10c83066ffa4a1L,0x11a7208faaeL,0x11a720969b6L,"concept"));
            }
 else {
              applicableConcept=SLinkOperations.getTarget(SNodeOperations.cast(root,MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior")),MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,0x11d43447b1fL,"concept"));
            }
          }
          return AbstractConceptDeclaration__BehaviorDescriptor.getReferenceLinkDeclarations_idhEwILL0.invoke(applicableConcept);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hkfysg_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
