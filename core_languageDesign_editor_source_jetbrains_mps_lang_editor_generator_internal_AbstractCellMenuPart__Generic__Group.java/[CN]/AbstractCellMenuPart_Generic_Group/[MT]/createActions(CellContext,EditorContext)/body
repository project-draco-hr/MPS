{
  final SNode node=(SNode)cellContext.get(BasicCellContext.EDITED_NODE);
  final IOperationContext context=editorContext.getOperationContext();
  List parameterObjects=createParameterObjects(node,context.getScope(),context);
  if (parameterObjects == null) {
    return new LinkedList<INodeSubstituteAction>();
  }
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  for (  final Object parameterObject : parameterObjects) {
    actions.add(new AbstractNodeSubstituteAction(null,parameterObject,node){
      public String getMatchingText(      String pattern){
        return AbstractCellMenuPart_Generic_Group.this.getMatchingText(parameterObject);
      }
      public String getDescriptionText(      String pattern){
        return AbstractCellMenuPart_Generic_Group.this.getDescriptionText(parameterObject);
      }
      public SNode doSubstitute(      String pattern){
        handleAction(parameterObject,node,node.getModel(),context.getScope(),context);
        return null;
      }
    }
);
  }
  return actions;
}
