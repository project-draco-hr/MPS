{
  String fileName="C:\\work\\stressQuasi.txt";
  int numNodes=Integer.parseInt(args[0]);
  int numEdges=Integer.parseInt(args[1]);
  int numIter=Integer.parseInt(args[2]);
  for (int iter=0; iter < numIter; iter++) {
    System.out.println("ITERATION: " + iter);
    Graph graph=RandomGraphGenerator.generateSimpleConnectedGraph(numNodes,numEdges);
    BiconnectAugmentation.smartMakeBiconnected(graph);
    PrintWriter out=new PrintWriter(fileName);
    GraphIO.writeGraph(graph,out);
    out.close();
    EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
    Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
    Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
    QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
    OrthogonalRepresentationChecker.checkOrthogonalRepresentation(graph,bends,angles,0);
    new QuasiRepresentationModifier(embeddedGraph,bends,angles).reduceToOrthogonalRepresentation();
    OrthogonalRepresentationChecker.checkOrthogonalRepresentation(graph,bends,angles,0);
  }
  System.out.println("END!");
}
