{
  List<SNode> methodsToImplement=BehaviorReflection.invokeSuper((Class<List<SNode>>)((Class)Object.class),thisNode,"jetbrains.mps.baseLanguage.structure.ClassConcept","virtual_getMethodsToImplement_5418393554803775106",new Object[]{});
  final List<SNode> ownMethods=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Enum"),"virtual_getOwnMethods_1906502351318572840",new Object[]{});
  Iterable<SNode> remaining=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
    public boolean accept(    final SNode toBeImplemented){
      return !(ListSequence.fromList(ownMethods).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode own){
          return !(BehaviorReflection.invokeVirtual(Boolean.TYPE,own,"virtual_isAbstract_1232982539764",new Object[]{})) && BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(toBeImplemented,own);
        }
      }
));
    }
  }
);
  return Sequence.fromIterable(remaining).toListSequence();
}
