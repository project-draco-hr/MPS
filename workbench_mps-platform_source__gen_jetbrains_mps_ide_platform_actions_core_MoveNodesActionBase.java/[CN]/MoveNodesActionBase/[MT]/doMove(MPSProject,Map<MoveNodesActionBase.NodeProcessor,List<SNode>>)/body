{
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      IMapping<MoveNodesActionBase.NodeProcessor,List<SNode>> mapping : MapSequence.fromMap(processorToMoveRoots)) {
        if (!(mapping.key().isValid(mapping.value()))) {
          throw new IllegalArgumentException();
        }
      }
    }
  }
);
  final Map<SNodeReference,List<SNodeReference>> moveRootsToDescendants=MapSequence.fromMap(new HashMap<SNodeReference,List<SNodeReference>>());
  final List<SNode> allNodes=ListSequence.fromList(new ArrayList<SNode>());
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      IMapping<MoveNodesActionBase.NodeProcessor,List<SNode>> mapping : MapSequence.fromMap(processorToMoveRoots)) {
        MoveNodesActionBase.NodeProcessor processor=mapping.key();
        for (        SNode moveRoot : ListSequence.fromList(mapping.value())) {
          List<SNode> nodesToSearch=processor.getNodesToSearch(moveRoot);
          MapSequence.fromMap(moveRootsToDescendants).put(moveRoot.getReference(),ListSequence.fromList(nodesToSearch).select(new ISelector<SNode,SNodeReference>(){
            public SNodeReference select(            SNode it){
              return it.getReference();
            }
          }
).toListSequence());
          ListSequence.fromList(allNodes).addSequence(ListSequence.fromList(nodesToSearch));
        }
      }
    }
  }
);
  final MoveNodesActionBase.ListIndex<SNodeReference> allNodeIndices=new MoveNodesActionBase.ListIndex<SNodeReference>(ListSequence.fromList(allNodes).select(new ISelector<SNode,SNodeReference>(){
    public SNodeReference select(    SNode it){
      return it.getReference();
    }
  }
).toListSequence());
  Iterable<? extends RefactoringParticipant<?,?,SNode,SNode>> participants=new ExtensionPoint<MoveNodeRefactoringParticipant<?,?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects();
  RefactoringProcessor.performRefactoring(project,getName(),participants,allNodes,new _FunctionTypes._return_P2_E0<_FunctionTypes._return_P1_E0<? extends SNode,? super SNode>,Iterable<RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode>>,RefactoringSession>(){
    public _FunctionTypes._return_P1_E0<? extends SNode,? super SNode> invoke(    Iterable<RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode>> participantStates,    RefactoringSession refactoringSession){
      return doRefactor(processorToMoveRoots,allNodeIndices,moveRootsToDescendants,participantStates,refactoringSession);
    }
  }
);
}
