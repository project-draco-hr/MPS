{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter(){
    public String getErrorMessage(    NodeLocation selectedObject){
      return "Choose model or node that can contain moving nodes";
    }
    public boolean tryToSetRole(    final NodeLocation.NodeLocationChild selectedObject){
      final Wrappers._T<SContainmentLink> role=new Wrappers._T<SContainmentLink>();
      final Wrappers._T<Collection<SContainmentLink>> containmentLinks=new Wrappers._T<Collection<SContainmentLink>>();
      project.getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          containmentLinks.value=selectedObject.getNode().resolve(project.getRepository()).getConcept().getContainmentLinks();
          role.value=ListSequence.fromList(nodesToMove).first().getContainmentLink();
        }
      }
);
      if (role.value != null && CollectionSequence.fromCollection(containmentLinks.value).contains(role.value)) {
        selectedObject.setRole(role.value);
        return true;
      }
      final Wrappers._T<Iterable<SContainmentLink>> applicableLinks=new Wrappers._T<Iterable<SContainmentLink>>();
      project.getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          applicableLinks.value=CollectionSequence.fromCollection(containmentLinks.value).where(new IWhereFilter<SContainmentLink>(){
            public boolean accept(            final SContainmentLink link){
              return ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>(){
                public boolean accept(                SNode node){
                  return SNodeOperations.getConcept(node).isSubConceptOf(link.getTargetConcept());
                }
              }
);
            }
          }
);
        }
      }
);
      if (Sequence.fromIterable(applicableLinks.value).count() == 1) {
        selectedObject.setRole(Sequence.fromIterable(applicableLinks.value).first());
        return true;
      }
      return false;
    }
    @Override public boolean check(    final NodeLocation selectedObject,    SModel model){
      if (selectedObject instanceof NodeLocation.NodeLocationChild) {
        return tryToSetRole((NodeLocation.NodeLocationChild)selectedObject);
      }
 else       if (selectedObject instanceof NodeLocation.NodeLocationRoot) {
        return new ModelAccessHelper(project.getRepository()).runReadAction(new Computable<Boolean>(){
          public Boolean compute(){
            return ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return selectedObject.canInsert(project.getRepository(),it);
              }
            }
);
          }
        }
);
      }
 else {
        return false;
      }
    }
  }
);
  if (newLocation == null) {
    return;
  }
  MoveNodesActionBase.NodeProcessor processor=new MoveNodesActionBase.NodeCreatingProcessor(newLocation,project);
  doMove(project,MapSequence.<MoveNodesActionBase.NodeProcessor,List<SNode>>fromMapAndKeysArray(new HashMap<MoveNodesActionBase.NodeProcessor,List<SNode>>(),processor).withValues(nodesToMove));
}
