{
  for (  IMapping<MoveNodesActionBase.NodeProcessor,List<SNode>> mapping : MapSequence.fromMap(processorToRoots)) {
    List<SNode> moveRoots=mapping.value();
    MoveNodesActionBase.NodeProcessor processor=mapping.key();
    Iterable<SNode> moveRootsToRemove=ListSequence.fromList(moveRoots).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode moveRoot){
        return ListSequence.fromList(MapSequence.fromMap(moveRootsToDescendants).get(moveRoot.getReference())).all(new IWhereFilter<SNodeReference>(){
          public boolean accept(          final SNodeReference descendant){
            return Sequence.fromIterable(participantStates).all(new IWhereFilter<RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode>>(){
              public boolean accept(              RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode> participantState){
                List<? extends RefactoringParticipant.Change<?,?>> changes=nodeChangesCorrespondence.getCorrespondent(participantState.getChanges(),descendant);
                return ListSequence.fromList(changes).all(new IWhereFilter<RefactoringParticipant.Change<?,?>>(){
                  public boolean accept(                  RefactoringParticipant.Change<?,?> change){
                    return !(change.needsToPreserveOldNode());
                  }
                }
);
              }
            }
);
          }
        }
);
      }
    }
);
    processor.process(moveRoots,Sequence.fromIterable(moveRootsToRemove).toListSequence(),refactoringSession);
  }
  final Map<SNode,SNode> copyMap=MoveNodesActionBase.CopyMapObject.getCopyMap(refactoringSession).getCopyMap();
  return new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode oldNode){
      return MapSequence.fromMap(copyMap).get(oldNode);
    }
  }
;
}
