{
  for (  IMapping<MoveNodesActionBase.NodeProcessor,List<SNode>> mapping : MapSequence.fromMap(processorToRoots)) {
    List<SNode> moveRoots=mapping.value();
    final MoveNodesActionBase.NodeProcessor processor=mapping.key();
    final Map<SNode,RefactoringParticipant.KeepOldNodes> ifRemoveOldRoots=MapSequence.fromMap(new HashMap<SNode,RefactoringParticipant.KeepOldNodes>());
    for (    SNode moveRoot : ListSequence.fromList(moveRoots)) {
      MapSequence.fromMap(ifRemoveOldRoots).put(moveRoot,RefactoringParticipant.KeepOldNodes.max(ListSequence.fromList(MapSequence.fromMap(moveRootsToDescendants).get(moveRoot.getReference())).translate(new ITranslator2<SNodeReference,RefactoringParticipant.KeepOldNodes>(){
        public Iterable<RefactoringParticipant.KeepOldNodes> translate(        final SNodeReference descendant){
          return Sequence.fromIterable(participantStates).select(new ISelector<RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode>,RefactoringParticipant.KeepOldNodes>(){
            public RefactoringParticipant.KeepOldNodes select(            RefactoringParticipant.ParticipantState<?,?,SNode,SNode,SNode,SNode> participantState){
              List<? extends RefactoringParticipant.Change<?,?>> changes=nodeChangesCorrespondence.getCorrespondent(participantState.getChanges(),descendant);
              return RefactoringParticipant.KeepOldNodes.max(ListSequence.fromList(changes).select(new ISelector<RefactoringParticipant.Change<?,?>,RefactoringParticipant.KeepOldNodes>(){
                public RefactoringParticipant.KeepOldNodes select(                RefactoringParticipant.Change<?,?> change){
                  return ((MoveNodeRefactoringParticipant.MoveNodeChange<?,?>)((RefactoringParticipant.Change)change)).needsToPreserveOldNode();
                }
              }
));
            }
          }
);
        }
      }
)));
    }
    processor.process(moveRoots,ifRemoveOldRoots,refactoringSession);
    refactoringSession.registerLast(new Runnable(){
      public void run(){
        processor.removeAfterRefactoring(ifRemoveOldRoots,refactoringSession);
      }
    }
);
  }
  final Map<SNode,SNode> copyMap=MoveNodesActionBase.CopyMapObject.getCopyMap(refactoringSession).getCopyMap();
  return new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode oldNode){
      return MapSequence.fromMap(copyMap).get(oldNode);
    }
  }
;
}
