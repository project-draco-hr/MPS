{
  Queue<ConceptDescriptor> queue=new LinkedList<ConceptDescriptor>();
  Set<SConceptId> processedConcepts=new HashSet<SConceptId>();
  queue.add(conceptDescriptor);
  processedConcepts.add(conceptDescriptor.getId());
  List<T> resultList=new ArrayList<T>();
  while (!queue.isEmpty()) {
    ConceptDescriptor nextConcept=queue.remove();
    T conceptEditor=getEditorForConcept(nextConcept,excludedEditors);
    if (conceptEditor != null) {
      if (isEnoughForCurrentContext(conceptEditor)) {
        return conceptEditor;
      }
 else {
        resultList.add(conceptEditor);
      }
    }
    for (    SConceptId ancestorId : nextConcept.getParentsIds()) {
      if (processedConcepts.contains(ancestorId)) {
        continue;
      }
      processedConcepts.add(ancestorId);
      queue.add(ConceptRegistry.getInstance().getConceptDescriptor(ancestorId));
    }
  }
  if (resultList.isEmpty()) {
    return null;
  }
  Collections.sort(resultList,getAncestorEditorComparator());
  return resultList.get(0);
}
