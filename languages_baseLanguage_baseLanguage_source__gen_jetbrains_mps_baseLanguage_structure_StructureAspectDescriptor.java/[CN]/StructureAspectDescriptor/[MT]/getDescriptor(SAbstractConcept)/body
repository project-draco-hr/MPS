{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0cl.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractClassifierReference;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractCreator;
  }
break;
case 2:
if (true) {
return myConceptAbstractForStatement;
}
break;
case 3:
if (true) {
return myConceptAbstractLoopStatement;
}
break;
case 4:
if (true) {
return myConceptAbstractOperation;
}
break;
case 5:
if (true) {
return myConceptAbstractUnaryNumberOperation;
}
break;
case 6:
if (true) {
return myConceptAdditionalForLoopVariable;
}
break;
case 7:
if (true) {
return myConceptAndAssignmentExpression;
}
break;
case 8:
if (true) {
return myConceptAndExpression;
}
break;
case 9:
if (true) {
return myConceptAnnotation;
}
break;
case 10:
if (true) {
return myConceptAnnotationInstance;
}
break;
case 11:
if (true) {
return myConceptAnnotationInstanceExpression;
}
break;
case 12:
if (true) {
return myConceptAnnotationInstanceValue;
}
break;
case 13:
if (true) {
return myConceptAnnotationMethodDeclaration;
}
break;
case 14:
if (true) {
return myConceptAnonymousClass;
}
break;
case 15:
if (true) {
return myConceptAnonymousClassCreator;
}
break;
case 16:
if (true) {
return myConceptArrayAccessExpression;
}
break;
case 17:
if (true) {
return myConceptArrayClassExpression;
}
break;
case 18:
if (true) {
return myConceptArrayCloneOperation;
}
break;
case 19:
if (true) {
return myConceptArrayCreator;
}
break;
case 20:
if (true) {
return myConceptArrayCreatorWithInitializer;
}
break;
case 21:
if (true) {
return myConceptArrayLengthOperation;
}
break;
case 22:
if (true) {
return myConceptArrayLiteral;
}
break;
case 23:
if (true) {
return myConceptArrayType;
}
break;
case 24:
if (true) {
return myConceptAsExpression;
}
break;
case 25:
if (true) {
return myConceptAssertStatement;
}
break;
case 26:
if (true) {
return myConceptAssignmentExpression;
}
break;
case 27:
if (true) {
return myConceptBLBottomType;
}
break;
case 28:
if (true) {
return myConceptBaseAssignmentExpression;
}
break;
case 29:
if (true) {
return myConceptBaseMethodCall;
}
break;
case 30:
if (true) {
return myConceptBaseMethodDeclaration;
}
break;
case 31:
if (true) {
return myConceptBaseStringOperation;
}
break;
case 32:
if (true) {
return myConceptBaseVariableDeclaration;
}
break;
case 33:
if (true) {
return myConceptBaseVariableReference;
}
break;
case 34:
if (true) {
return myConceptBinaryBitwiseOperation;
}
break;
case 35:
if (true) {
return myConceptBinaryCompareOperation;
}
break;
case 36:
if (true) {
return myConceptBinaryOperation;
}
break;
case 37:
if (true) {
return myConceptBitwiseAndExpression;
}
break;
case 38:
if (true) {
return myConceptBitwiseNotExpression;
}
break;
case 39:
if (true) {
return myConceptBitwiseOrExpression;
}
break;
case 40:
if (true) {
return myConceptBitwiseXorExpression;
}
break;
case 41:
if (true) {
return myConceptBlockStatement;
}
break;
case 42:
if (true) {
return myConceptBooleanConstant;
}
break;
case 43:
if (true) {
return myConceptBooleanType;
}
break;
case 44:
if (true) {
return myConceptBreakStatement;
}
break;
case 45:
if (true) {
return myConceptByteType;
}
break;
case 46:
if (true) {
return myConceptCastExpression;
}
break;
case 47:
if (true) {
return myConceptCatchClause;
}
break;
case 48:
if (true) {
return myConceptCharConstant;
}
break;
case 49:
if (true) {
return myConceptCharType;
}
break;
case 50:
if (true) {
return myConceptClassConcept;
}
break;
case 51:
if (true) {
return myConceptClassCreator;
}
break;
case 52:
if (true) {
return myConceptClassifier;
}
break;
case 53:
if (true) {
return myConceptClassifierClassExpression;
}
break;
case 54:
if (true) {
return myConceptClassifierMember;
}
break;
case 55:
if (true) {
return myConceptClassifierType;
}
break;
case 56:
if (true) {
return myConceptClosure;
}
break;
case 57:
if (true) {
return myConceptClosureParameter;
}
break;
case 58:
if (true) {
return myConceptClosureParameterReference;
}
break;
case 59:
if (true) {
return myConceptClosureoid;
}
break;
case 60:
if (true) {
return myConceptCommentPart;
}
break;
case 61:
if (true) {
return myConceptCommentedStatement;
}
break;
case 62:
if (true) {
return myConceptCommentedStatementsBlock;
}
break;
case 63:
if (true) {
return myConceptConceptFunction;
}
break;
case 64:
if (true) {
return myConceptConceptFunctionParameter;
}
break;
case 65:
if (true) {
return myConceptConstructorDeclaration;
}
break;
case 66:
if (true) {
return myConceptConstructorInvocationStatement;
}
break;
case 67:
if (true) {
return myConceptContextClassifierKind;
}
break;
case 68:
if (true) {
return myConceptContinueStatement;
}
break;
case 69:
if (true) {
return myConceptCustomPropertyImplementation;
}
break;
case 70:
if (true) {
return myConceptCustomSetterPropertyImplementation;
}
break;
case 71:
if (true) {
return myConceptDefaultClassCreator;
}
break;
case 72:
if (true) {
return myConceptDefaultGetAccessor;
}
break;
case 73:
if (true) {
return myConceptDefaultPropertyImplementation;
}
break;
case 74:
if (true) {
return myConceptDefaultSetAccessor;
}
break;
case 75:
if (true) {
return myConceptDimensionExpression;
}
break;
case 76:
if (true) {
return myConceptDivAssignmentExpression;
}
break;
case 77:
if (true) {
return myConceptDivExpression;
}
break;
case 78:
if (true) {
return myConceptDoWhileStatement;
}
break;
case 79:
if (true) {
return myConceptDotExpression;
}
break;
case 80:
if (true) {
return myConceptDoubleType;
}
break;
case 81:
if (true) {
return myConceptElsifClause;
}
break;
case 82:
if (true) {
return myConceptEnumClass;
}
break;
case 83:
if (true) {
return myConceptEnumConstantDeclaration;
}
break;
case 84:
if (true) {
return myConceptEnumConstantReference;
}
break;
case 85:
if (true) {
return myConceptEnumValueOfExpression;
}
break;
case 86:
if (true) {
return myConceptEnumValuesExpression;
}
break;
case 87:
if (true) {
return myConceptEqualsExpression;
}
break;
case 88:
if (true) {
return myConceptEscapeOperation;
}
break;
case 89:
if (true) {
return myConceptExpression;
}
break;
case 90:
if (true) {
return myConceptExpressionStatement;
}
break;
case 91:
if (true) {
return myConceptFieldDeclaration;
}
break;
case 92:
if (true) {
return myConceptFieldReferenceOperation;
}
break;
case 93:
if (true) {
return myConceptFloatType;
}
break;
case 94:
if (true) {
return myConceptFloatingPointConstant;
}
break;
case 95:
if (true) {
return myConceptFloatingPointFloatConstant;
}
break;
case 96:
if (true) {
return myConceptForStatement;
}
break;
case 97:
if (true) {
return myConceptForeachStatement;
}
break;
case 98:
if (true) {
return myConceptGenericDeclaration;
}
break;
case 99:
if (true) {
return myConceptGenericNewExpression;
}
break;
case 100:
if (true) {
return myConceptGetAccessor;
}
break;
case 101:
if (true) {
return myConceptGreaterThanExpression;
}
break;
case 102:
if (true) {
return myConceptGreaterThanOrEqualsExpression;
}
break;
case 103:
if (true) {
return myConceptHasAnnotation;
}
break;
case 104:
if (true) {
return myConceptHexIntegerLiteral;
}
break;
case 105:
if (true) {
return myConceptIAnonymousClass;
}
break;
case 106:
if (true) {
return myConceptIBLDeprecatable;
}
break;
case 107:
if (true) {
return myConceptIBinaryLike;
}
break;
case 108:
if (true) {
return myConceptIClassifier;
}
break;
case 109:
if (true) {
return myConceptIClassifierMember;
}
break;
case 110:
if (true) {
return myConceptIClassifierType;
}
break;
case 111:
if (true) {
return myConceptIConditional;
}
break;
case 112:
if (true) {
return myConceptIContainsStatementList;
}
break;
case 113:
if (true) {
return myConceptIControlFlowInterrupter;
}
break;
case 114:
if (true) {
return myConceptIExtractMethodAvailable;
}
break;
case 115:
if (true) {
return myConceptIFinalWrapper;
}
break;
case 116:
if (true) {
return myConceptIGenericType;
}
break;
case 117:
if (true) {
return myConceptIHasModifiers;
}
break;
case 118:
if (true) {
return myConceptIIncompleteParen;
}
break;
case 119:
if (true) {
return myConceptIInternalType;
}
break;
case 120:
if (true) {
return myConceptILocalDeclaration;
}
break;
case 121:
if (true) {
return myConceptILocalReference;
}
break;
case 122:
if (true) {
return myConceptILocalVariableElement;
}
break;
case 123:
if (true) {
return myConceptILocalVariableElementList;
}
break;
case 124:
if (true) {
return myConceptIMemberContainer;
}
break;
case 125:
if (true) {
return myConceptIMethodCall;
}
break;
case 126:
if (true) {
return myConceptIMethodLike;
}
break;
case 127:
if (true) {
return myConceptIOperation;
}
break;
case 128:
if (true) {
return myConceptIParameter;
}
break;
case 129:
if (true) {
return myConceptISkipsReturn;
}
break;
case 130:
if (true) {
return myConceptIStatementListContainer;
}
break;
case 131:
if (true) {
return myConceptIStaticContainerForMethods;
}
break;
case 132:
if (true) {
return myConceptIThisExpression;
}
break;
case 133:
if (true) {
return myConceptITryCatchStatement;
}
break;
case 134:
if (true) {
return myConceptITypeApplicable;
}
break;
case 135:
if (true) {
return myConceptIValidIdentifier;
}
break;
case 136:
if (true) {
return myConceptIVariableAssignment;
}
break;
case 137:
if (true) {
return myConceptIVariableDeclaration;
}
break;
case 138:
if (true) {
return myConceptIVariableReference;
}
break;
case 139:
if (true) {
return myConceptIVisible;
}
break;
case 140:
if (true) {
return myConceptIWillBeClassifier;
}
break;
case 141:
if (true) {
return myConceptIYetUnresolved;
}
break;
case 142:
if (true) {
return myConceptIfStatement;
}
break;
case 143:
if (true) {
return myConceptImplicitAnnotationInstanceValue;
}
break;
case 144:
if (true) {
return myConceptImplicitAnnotationMethodKind;
}
break;
case 145:
if (true) {
return myConceptIncompleteLeftParen;
}
break;
case 146:
if (true) {
return myConceptIncompleteMemberDeclaration;
}
break;
case 147:
if (true) {
return myConceptIncompleteRightParen;
}
break;
case 148:
if (true) {
return myConceptInstanceInitializer;
}
break;
case 149:
if (true) {
return myConceptInstanceMethodCallOperation;
}
break;
case 150:
if (true) {
return myConceptInstanceMethodDeclaration;
}
break;
case 151:
if (true) {
return myConceptInstanceOfExpression;
}
break;
case 152:
if (true) {
return myConceptIntegerConstant;
}
break;
case 153:
if (true) {
return myConceptIntegerLiteral;
}
break;
case 154:
if (true) {
return myConceptIntegerType;
}
break;
case 155:
if (true) {
return myConceptInterface;
}
break;
case 156:
if (true) {
return myConceptIsEmptyOperation;
}
break;
case 157:
if (true) {
return myConceptIsNotEmptyOperation;
}
break;
case 158:
if (true) {
return myConceptJavaImport;
}
break;
case 159:
if (true) {
return myConceptJavaImports;
}
break;
case 160:
if (true) {
return myConceptLeftShiftAssignmentExpression;
}
break;
case 161:
if (true) {
return myConceptLessThanExpression;
}
break;
case 162:
if (true) {
return myConceptLessThanOrEqualsExpression;
}
break;
case 163:
if (true) {
return myConceptLocalInstanceFieldReference;
}
break;
case 164:
if (true) {
return myConceptLocalInstanceMethodCall;
}
break;
case 165:
if (true) {
return myConceptLocalMethodCall;
}
break;
case 166:
if (true) {
return myConceptLocalPropertyReference;
}
break;
case 167:
if (true) {
return myConceptLocalStaticFieldReference;
}
break;
case 168:
if (true) {
return myConceptLocalStaticMethodCall;
}
break;
case 169:
if (true) {
return myConceptLocalToMethodKind;
}
break;
case 170:
if (true) {
return myConceptLocalVariableDeclaration;
}
break;
case 171:
if (true) {
return myConceptLocalVariableDeclarationStatement;
}
break;
case 172:
if (true) {
return myConceptLocalVariableReference;
}
break;
case 173:
if (true) {
return myConceptLongLiteral;
}
break;
case 174:
if (true) {
return myConceptLongType;
}
break;
case 175:
if (true) {
return myConceptLoopLabel;
}
break;
case 176:
if (true) {
return myConceptLoopLabelReference;
}
break;
case 177:
if (true) {
return myConceptLowerBoundType;
}
break;
case 178:
if (true) {
return myConceptMethodDeclaration;
}
break;
case 179:
if (true) {
return myConceptMinusAssignmentExpression;
}
break;
case 180:
if (true) {
return myConceptMinusExpression;
}
break;
case 181:
if (true) {
return myConceptModifier;
}
break;
case 182:
if (true) {
return myConceptMulAssignmentExpression;
}
break;
case 183:
if (true) {
return myConceptMulExpression;
}
break;
case 184:
if (true) {
return myConceptNPEEqualsExpression;
}
break;
case 185:
if (true) {
return myConceptNPENotEqualsExpression;
}
break;
case 186:
if (true) {
return myConceptNotEqualsExpression;
}
break;
case 187:
if (true) {
return myConceptNotExpression;
}
break;
case 188:
if (true) {
return myConceptNullLiteral;
}
break;
case 189:
if (true) {
return myConceptNullType;
}
break;
case 190:
if (true) {
return myConceptNumber;
}
break;
case 191:
if (true) {
return myConceptOperationAssignmentExpression;
}
break;
case 192:
if (true) {
return myConceptOrAssignmentExpression;
}
break;
case 193:
if (true) {
return myConceptOrExpression;
}
break;
case 194:
if (true) {
return myConceptParameterDeclaration;
}
break;
case 195:
if (true) {
return myConceptParameterReference;
}
break;
case 196:
if (true) {
return myConceptParenthesizedExpression;
}
break;
case 197:
if (true) {
return myConceptPlaceholderMember;
}
break;
case 198:
if (true) {
return myConceptPlusAssignmentExpression;
}
break;
case 199:
if (true) {
return myConceptPlusExpression;
}
break;
case 200:
if (true) {
return myConceptPostfixDecrementExpression;
}
break;
case 201:
if (true) {
return myConceptPostfixIncrementExpression;
}
break;
case 202:
if (true) {
return myConceptPrefixDecrementExpression;
}
break;
case 203:
if (true) {
return myConceptPrefixIncrementExpression;
}
break;
case 204:
if (true) {
return myConceptPrimitiveClassExpression;
}
break;
case 205:
if (true) {
return myConceptPrimitiveType;
}
break;
case 206:
if (true) {
return myConceptPrivateVisibility;
}
break;
case 207:
if (true) {
return myConceptProperty;
}
break;
case 208:
if (true) {
return myConceptPropertyImplementation;
}
break;
case 209:
if (true) {
return myConceptPropertyReference;
}
break;
case 210:
if (true) {
return myConceptPropertyValueReference;
}
break;
case 211:
if (true) {
return myConceptProtectedVisibility;
}
break;
case 212:
if (true) {
return myConceptPublicVisibility;
}
break;
case 213:
if (true) {
return myConceptQualifiedSuperMethodCall;
}
break;
case 214:
if (true) {
return myConceptRemAssignmentExpression;
}
break;
case 215:
if (true) {
return myConceptRemExpression;
}
break;
case 216:
if (true) {
return myConceptRemarkStatement;
}
break;
case 217:
if (true) {
return myConceptReturnStatement;
}
break;
case 218:
if (true) {
return myConceptRightShiftAssignmentExpression;
}
break;
case 219:
if (true) {
return myConceptSetAccessor;
}
break;
case 220:
if (true) {
return myConceptShiftLeftExpression;
}
break;
case 221:
if (true) {
return myConceptShiftRightExpression;
}
break;
case 222:
if (true) {
return myConceptShiftRightUnsignedExpression;
}
break;
case 223:
if (true) {
return myConceptShortType;
}
break;
case 224:
if (true) {
return myConceptSingleLineComment;
}
break;
case 225:
if (true) {
return myConceptStatement;
}
break;
case 226:
if (true) {
return myConceptStatementCommentPart;
}
break;
case 227:
if (true) {
return myConceptStatementList;
}
break;
case 228:
if (true) {
return myConceptStaticFieldDeclaration;
}
break;
case 229:
if (true) {
return myConceptStaticFieldReference;
}
break;
case 230:
if (true) {
return myConceptStaticInitializer;
}
break;
case 231:
if (true) {
return myConceptStaticKind;
}
break;
case 232:
if (true) {
return myConceptStaticMethodCall;
}
break;
case 233:
if (true) {
return myConceptStaticMethodDeclaration;
}
break;
case 234:
if (true) {
return myConceptStringBooleanOperation;
}
break;
case 235:
if (true) {
return myConceptStringLiteral;
}
break;
case 236:
if (true) {
return myConceptStringToken;
}
break;
case 237:
if (true) {
return myConceptStringType;
}
break;
case 238:
if (true) {
return myConceptStubStatementList;
}
break;
case 239:
if (true) {
return myConceptSubstringExpression;
}
break;
case 240:
if (true) {
return myConceptSuperConstructorInvocation;
}
break;
case 241:
if (true) {
return myConceptSuperConstructorKind;
}
break;
case 242:
if (true) {
return myConceptSuperInerfaceKind;
}
break;
case 243:
if (true) {
return myConceptSuperMethodCall;
}
break;
case 244:
if (true) {
return myConceptSuperMethodKind;
}
break;
case 245:
if (true) {
return myConceptSwitchCase;
}
break;
case 246:
if (true) {
return myConceptSwitchStatement;
}
break;
case 247:
if (true) {
return myConceptSynchronizedStatement;
}
break;
case 248:
if (true) {
return myConceptTernaryOperatorExpression;
}
break;
case 249:
if (true) {
return myConceptTextCommentPart;
}
break;
case 250:
if (true) {
return myConceptThisConstructorInvocation;
}
break;
case 251:
if (true) {
return myConceptThisConstructorKind;
}
break;
case 252:
if (true) {
return myConceptThisExpression;
}
break;
case 253:
if (true) {
return myConceptThrowStatement;
}
break;
case 254:
if (true) {
return myConceptTokens;
}
break;
case 255:
if (true) {
return myConceptTrimOperation;
}
break;
case 256:
if (true) {
return myConceptTryCatchStatement;
}
break;
case 257:
if (true) {
return myConceptTryStatement;
}
break;
case 258:
if (true) {
return myConceptType;
}
break;
case 259:
if (true) {
return myConceptTypeAnnotable;
}
break;
case 260:
if (true) {
return myConceptTypeDerivable;
}
break;
case 261:
if (true) {
return myConceptTypeVariableDeclaration;
}
break;
case 262:
if (true) {
return myConceptTypeVariableReference;
}
break;
case 263:
if (true) {
return myConceptUnaryMinus;
}
break;
case 264:
if (true) {
return myConceptUndefinedType;
}
break;
case 265:
if (true) {
return myConceptUnknownConsCall;
}
break;
case 266:
if (true) {
return myConceptUnknownDotCall;
}
break;
case 267:
if (true) {
return myConceptUnknownLocalCall;
}
break;
case 268:
if (true) {
return myConceptUnknownNameRef;
}
break;
case 269:
if (true) {
return myConceptUnknownNew;
}
break;
case 270:
if (true) {
return myConceptUnresolvedNameReference;
}
break;
case 271:
if (true) {
return myConceptUnsignedRightShiftAssignmentExpression;
}
break;
case 272:
if (true) {
return myConceptUpperBoundType;
}
break;
case 273:
if (true) {
return myConceptUsingStatement;
}
break;
case 274:
if (true) {
return myConceptValueParameter;
}
break;
case 275:
if (true) {
return myConceptVarType;
}
break;
case 276:
if (true) {
return myConceptVariableArityType;
}
break;
case 277:
if (true) {
return myConceptVariableDeclaration;
}
break;
case 278:
if (true) {
return myConceptVariableReference;
}
break;
case 279:
if (true) {
return myConceptVisibility;
}
break;
case 280:
if (true) {
return myConceptVoidType;
}
break;
case 281:
if (true) {
return myConceptWhileStatement;
}
break;
case 282:
if (true) {
return myConceptWildCardType;
}
break;
case 283:
if (true) {
return myConceptXorAssignmentExpression;
}
break;
default :
}
}
return null;
}
