{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractClassifierReference;
case 1:
  return myConceptAbstractCreator;
case 2:
return myConceptAbstractForStatement;
case 3:
return myConceptAbstractLoopStatement;
case 4:
return myConceptAbstractOperation;
case 5:
return myConceptAbstractUnaryNumberOperation;
case 6:
return myConceptAdditionalForLoopVariable;
case 7:
return myConceptAndAssignmentExpression;
case 8:
return myConceptAndExpression;
case 9:
return myConceptAnnotation;
case 10:
return myConceptAnnotationInstance;
case 11:
return myConceptAnnotationInstanceExpression;
case 12:
return myConceptAnnotationInstanceValue;
case 13:
return myConceptAnnotationMethodDeclaration;
case 14:
return myConceptAnonymousClass;
case 15:
return myConceptAnonymousClassCreator;
case 16:
return myConceptArrayAccessExpression;
case 17:
return myConceptArrayClassExpression;
case 18:
return myConceptArrayCloneOperation;
case 19:
return myConceptArrayCreator;
case 20:
return myConceptArrayCreatorWithInitializer;
case 21:
return myConceptArrayLengthOperation;
case 22:
return myConceptArrayLiteral;
case 23:
return myConceptArrayType;
case 24:
return myConceptAsExpression;
case 25:
return myConceptAssertStatement;
case 26:
return myConceptAssignmentExpression;
case 27:
return myConceptBLBottomType;
case 28:
return myConceptBaseAssignmentExpression;
case 29:
return myConceptBaseMethodCall;
case 30:
return myConceptBaseMethodDeclaration;
case 31:
return myConceptBaseStringOperation;
case 32:
return myConceptBaseVariableDeclaration;
case 33:
return myConceptBaseVariableReference;
case 34:
return myConceptBinaryBitwiseOperation;
case 35:
return myConceptBinaryCompareOperation;
case 36:
return myConceptBinaryOperation;
case 37:
return myConceptBitwiseAndExpression;
case 38:
return myConceptBitwiseNotExpression;
case 39:
return myConceptBitwiseOrExpression;
case 40:
return myConceptBitwiseXorExpression;
case 41:
return myConceptBlockStatement;
case 42:
return myConceptBooleanConstant;
case 43:
return myConceptBooleanType;
case 44:
return myConceptBreakStatement;
case 45:
return myConceptByteType;
case 46:
return myConceptCastExpression;
case 47:
return myConceptCatchClause;
case 48:
return myConceptCharConstant;
case 49:
return myConceptCharType;
case 50:
return myConceptClassConcept;
case 51:
return myConceptClassCreator;
case 52:
return myConceptClassifier;
case 53:
return myConceptClassifierClassExpression;
case 54:
return myConceptClassifierMember;
case 55:
return myConceptClassifierType;
case 56:
return myConceptClosure;
case 57:
return myConceptClosureParameter;
case 58:
return myConceptClosureParameterReference;
case 59:
return myConceptClosureoid;
case 60:
return myConceptCommentPart;
case 61:
return myConceptCommentedStatement;
case 62:
return myConceptCommentedStatementsBlock;
case 63:
return myConceptConceptFunction;
case 64:
return myConceptConceptFunctionParameter;
case 65:
return myConceptConstructorDeclaration;
case 66:
return myConceptConstructorInvocationStatement;
case 67:
return myConceptContextClassifierKind;
case 68:
return myConceptContinueStatement;
case 69:
return myConceptCustomPropertyImplementation;
case 70:
return myConceptCustomSetterPropertyImplementation;
case 71:
return myConceptDefaultClassCreator;
case 72:
return myConceptDefaultGetAccessor;
case 73:
return myConceptDefaultPropertyImplementation;
case 74:
return myConceptDefaultSetAccessor;
case 75:
return myConceptDimensionExpression;
case 76:
return myConceptDivAssignmentExpression;
case 77:
return myConceptDivExpression;
case 78:
return myConceptDoWhileStatement;
case 79:
return myConceptDotExpression;
case 80:
return myConceptDoubleType;
case 81:
return myConceptElsifClause;
case 82:
return myConceptEnumClass;
case 83:
return myConceptEnumConstantDeclaration;
case 84:
return myConceptEnumConstantReference;
case 85:
return myConceptEnumValueOfExpression;
case 86:
return myConceptEnumValuesExpression;
case 87:
return myConceptEqualsExpression;
case 88:
return myConceptEscapeOperation;
case 89:
return myConceptExpression;
case 90:
return myConceptExpressionStatement;
case 91:
return myConceptFieldDeclaration;
case 92:
return myConceptFieldReferenceOperation;
case 93:
return myConceptFloatType;
case 94:
return myConceptFloatingPointConstant;
case 95:
return myConceptFloatingPointFloatConstant;
case 96:
return myConceptForStatement;
case 97:
return myConceptForeachStatement;
case 98:
return myConceptGenericDeclaration;
case 99:
return myConceptGenericNewExpression;
case 100:
return myConceptGetAccessor;
case 101:
return myConceptGreaterThanExpression;
case 102:
return myConceptGreaterThanOrEqualsExpression;
case 103:
return myConceptHasAnnotation;
case 104:
return myConceptHexIntegerLiteral;
case 105:
return myConceptIAnonymousClass;
case 106:
return myConceptIBLDeprecatable;
case 107:
return myConceptIBinaryLike;
case 108:
return myConceptIClassifier;
case 109:
return myConceptIClassifierMember;
case 110:
return myConceptIClassifierType;
case 111:
return myConceptIConditional;
case 112:
return myConceptIContainsStatementList;
case 113:
return myConceptIControlFlowInterrupter;
case 114:
return myConceptIExtractMethodAvailable;
case 115:
return myConceptIFinalWrapper;
case 116:
return myConceptIGenericType;
case 117:
return myConceptIHasModifiers;
case 118:
return myConceptIIncompleteParen;
case 119:
return myConceptIInternalType;
case 120:
return myConceptILocalDeclaration;
case 121:
return myConceptILocalReference;
case 122:
return myConceptILocalVariableElement;
case 123:
return myConceptILocalVariableElementList;
case 124:
return myConceptIMemberContainer;
case 125:
return myConceptIMethodCall;
case 126:
return myConceptIMethodLike;
case 127:
return myConceptIOperation;
case 128:
return myConceptIParameter;
case 129:
return myConceptISkipsReturn;
case 130:
return myConceptIStatementListContainer;
case 131:
return myConceptIStaticContainerForMethods;
case 132:
return myConceptIThisExpression;
case 133:
return myConceptITryCatchStatement;
case 134:
return myConceptITypeApplicable;
case 135:
return myConceptIValidIdentifier;
case 136:
return myConceptIVariableAssignment;
case 137:
return myConceptIVariableDeclaration;
case 138:
return myConceptIVariableReference;
case 139:
return myConceptIVisible;
case 140:
return myConceptIWillBeClassifier;
case 141:
return myConceptIYetUnresolved;
case 142:
return myConceptIfStatement;
case 143:
return myConceptImplicitAnnotationInstanceValue;
case 144:
return myConceptImplicitAnnotationMethodKind;
case 145:
return myConceptIncompleteLeftParen;
case 146:
return myConceptIncompleteMemberDeclaration;
case 147:
return myConceptIncompleteRightParen;
case 148:
return myConceptInstanceInitializer;
case 149:
return myConceptInstanceMethodCallOperation;
case 150:
return myConceptInstanceMethodDeclaration;
case 151:
return myConceptInstanceOfExpression;
case 152:
return myConceptIntegerConstant;
case 153:
return myConceptIntegerLiteral;
case 154:
return myConceptIntegerType;
case 155:
return myConceptInterface;
case 156:
return myConceptIsEmptyOperation;
case 157:
return myConceptIsNotEmptyOperation;
case 158:
return myConceptJavaImport;
case 159:
return myConceptJavaImports;
case 160:
return myConceptLeftShiftAssignmentExpression;
case 161:
return myConceptLessThanExpression;
case 162:
return myConceptLessThanOrEqualsExpression;
case 163:
return myConceptLocalInstanceFieldReference;
case 164:
return myConceptLocalInstanceMethodCall;
case 165:
return myConceptLocalMethodCall;
case 166:
return myConceptLocalPropertyReference;
case 167:
return myConceptLocalStaticFieldReference;
case 168:
return myConceptLocalStaticMethodCall;
case 169:
return myConceptLocalToMethodKind;
case 170:
return myConceptLocalVariableDeclaration;
case 171:
return myConceptLocalVariableDeclarationStatement;
case 172:
return myConceptLocalVariableReference;
case 173:
return myConceptLongLiteral;
case 174:
return myConceptLongType;
case 175:
return myConceptLoopLabel;
case 176:
return myConceptLoopLabelReference;
case 177:
return myConceptLowerBoundType;
case 178:
return myConceptMethodDeclaration;
case 179:
return myConceptMinusAssignmentExpression;
case 180:
return myConceptMinusExpression;
case 181:
return myConceptModifier;
case 182:
return myConceptMulAssignmentExpression;
case 183:
return myConceptMulExpression;
case 184:
return myConceptNPEEqualsExpression;
case 185:
return myConceptNPENotEqualsExpression;
case 186:
return myConceptNestedNewExpression;
case 187:
return myConceptNotEqualsExpression;
case 188:
return myConceptNotExpression;
case 189:
return myConceptNullLiteral;
case 190:
return myConceptNullType;
case 191:
return myConceptNumber;
case 192:
return myConceptOperationAssignmentExpression;
case 193:
return myConceptOrAssignmentExpression;
case 194:
return myConceptOrExpression;
case 195:
return myConceptParameterDeclaration;
case 196:
return myConceptParameterReference;
case 197:
return myConceptParenthesizedExpression;
case 198:
return myConceptPlaceholderMember;
case 199:
return myConceptPlusAssignmentExpression;
case 200:
return myConceptPlusExpression;
case 201:
return myConceptPostfixDecrementExpression;
case 202:
return myConceptPostfixIncrementExpression;
case 203:
return myConceptPrefixDecrementExpression;
case 204:
return myConceptPrefixIncrementExpression;
case 205:
return myConceptPrimitiveClassExpression;
case 206:
return myConceptPrimitiveType;
case 207:
return myConceptPrivateVisibility;
case 208:
return myConceptProperty;
case 209:
return myConceptPropertyImplementation;
case 210:
return myConceptPropertyReference;
case 211:
return myConceptPropertyValueReference;
case 212:
return myConceptProtectedVisibility;
case 213:
return myConceptPublicVisibility;
case 214:
return myConceptQualifiedSuperMethodCall;
case 215:
return myConceptRemAssignmentExpression;
case 216:
return myConceptRemExpression;
case 217:
return myConceptRemarkStatement;
case 218:
return myConceptReturnStatement;
case 219:
return myConceptRightShiftAssignmentExpression;
case 220:
return myConceptSetAccessor;
case 221:
return myConceptShiftLeftExpression;
case 222:
return myConceptShiftRightExpression;
case 223:
return myConceptShiftRightUnsignedExpression;
case 224:
return myConceptShortType;
case 225:
return myConceptSingleLineComment;
case 226:
return myConceptStatement;
case 227:
return myConceptStatementCommentPart;
case 228:
return myConceptStatementList;
case 229:
return myConceptStaticFieldDeclaration;
case 230:
return myConceptStaticFieldReference;
case 231:
return myConceptStaticInitializer;
case 232:
return myConceptStaticKind;
case 233:
return myConceptStaticMethodCall;
case 234:
return myConceptStaticMethodDeclaration;
case 235:
return myConceptStringBooleanOperation;
case 236:
return myConceptStringLiteral;
case 237:
return myConceptStringToken;
case 238:
return myConceptStringType;
case 239:
return myConceptStubStatementList;
case 240:
return myConceptSubstringExpression;
case 241:
return myConceptSuperConstructorInvocation;
case 242:
return myConceptSuperConstructorKind;
case 243:
return myConceptSuperInerfaceKind;
case 244:
return myConceptSuperMethodCall;
case 245:
return myConceptSuperMethodKind;
case 246:
return myConceptSwitchCase;
case 247:
return myConceptSwitchStatement;
case 248:
return myConceptSynchronizedStatement;
case 249:
return myConceptTernaryOperatorExpression;
case 250:
return myConceptTextCommentPart;
case 251:
return myConceptThisConstructorInvocation;
case 252:
return myConceptThisConstructorKind;
case 253:
return myConceptThisExpression;
case 254:
return myConceptThrowStatement;
case 255:
return myConceptTokens;
case 256:
return myConceptTrimOperation;
case 257:
return myConceptTryCatchStatement;
case 258:
return myConceptTryStatement;
case 259:
return myConceptType;
case 260:
return myConceptTypeAnnotable;
case 261:
return myConceptTypeDerivable;
case 262:
return myConceptTypeVariableDeclaration;
case 263:
return myConceptTypeVariableReference;
case 264:
return myConceptUnaryMinus;
case 265:
return myConceptUndefinedType;
case 266:
return myConceptUnknownConsCall;
case 267:
return myConceptUnknownDotCall;
case 268:
return myConceptUnknownLocalCall;
case 269:
return myConceptUnknownNameRef;
case 270:
return myConceptUnknownNew;
case 271:
return myConceptUnresolvedNameReference;
case 272:
return myConceptUnsignedRightShiftAssignmentExpression;
case 273:
return myConceptUpperBoundType;
case 274:
return myConceptUsingStatement;
case 275:
return myConceptValueParameter;
case 276:
return myConceptVarType;
case 277:
return myConceptVariableArityType;
case 278:
return myConceptVariableDeclaration;
case 279:
return myConceptVariableReference;
case 280:
return myConceptVisibility;
case 281:
return myConceptVoidType;
case 282:
return myConceptWhileStatement;
case 283:
return myConceptWildCardType;
case 284:
return myConceptXorAssignmentExpression;
default :
throw new IllegalStateException();
}
}
