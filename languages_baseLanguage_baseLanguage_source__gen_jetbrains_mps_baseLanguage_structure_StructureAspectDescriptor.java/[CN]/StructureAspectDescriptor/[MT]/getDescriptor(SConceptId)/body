{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractClassifierReference:
    return myConceptAbstractClassifierReference;
case LanguageConceptSwitch.AbstractCreator:
  return myConceptAbstractCreator;
case LanguageConceptSwitch.AbstractForStatement:
return myConceptAbstractForStatement;
case LanguageConceptSwitch.AbstractLoopStatement:
return myConceptAbstractLoopStatement;
case LanguageConceptSwitch.AbstractOperation:
return myConceptAbstractOperation;
case LanguageConceptSwitch.AbstractUnaryNumberOperation:
return myConceptAbstractUnaryNumberOperation;
case LanguageConceptSwitch.AdditionalForLoopVariable:
return myConceptAdditionalForLoopVariable;
case LanguageConceptSwitch.AndAssignmentExpression:
return myConceptAndAssignmentExpression;
case LanguageConceptSwitch.AndExpression:
return myConceptAndExpression;
case LanguageConceptSwitch.Annotation:
return myConceptAnnotation;
case LanguageConceptSwitch.AnnotationInstance:
return myConceptAnnotationInstance;
case LanguageConceptSwitch.AnnotationInstanceExpression:
return myConceptAnnotationInstanceExpression;
case LanguageConceptSwitch.AnnotationInstanceValue:
return myConceptAnnotationInstanceValue;
case LanguageConceptSwitch.AnnotationMethodDeclaration:
return myConceptAnnotationMethodDeclaration;
case LanguageConceptSwitch.AnonymousClass:
return myConceptAnonymousClass;
case LanguageConceptSwitch.AnonymousClassCreator:
return myConceptAnonymousClassCreator;
case LanguageConceptSwitch.ArrayAccessExpression:
return myConceptArrayAccessExpression;
case LanguageConceptSwitch.ArrayClassExpression:
return myConceptArrayClassExpression;
case LanguageConceptSwitch.ArrayCloneOperation:
return myConceptArrayCloneOperation;
case LanguageConceptSwitch.ArrayCreator:
return myConceptArrayCreator;
case LanguageConceptSwitch.ArrayCreatorWithInitializer:
return myConceptArrayCreatorWithInitializer;
case LanguageConceptSwitch.ArrayLengthOperation:
return myConceptArrayLengthOperation;
case LanguageConceptSwitch.ArrayLiteral:
return myConceptArrayLiteral;
case LanguageConceptSwitch.ArrayType:
return myConceptArrayType;
case LanguageConceptSwitch.AsExpression:
return myConceptAsExpression;
case LanguageConceptSwitch.AssertStatement:
return myConceptAssertStatement;
case LanguageConceptSwitch.AssignmentExpression:
return myConceptAssignmentExpression;
case LanguageConceptSwitch.BLBottomType:
return myConceptBLBottomType;
case LanguageConceptSwitch.BaseAssignmentExpression:
return myConceptBaseAssignmentExpression;
case LanguageConceptSwitch.BaseMethodCall:
return myConceptBaseMethodCall;
case LanguageConceptSwitch.BaseMethodDeclaration:
return myConceptBaseMethodDeclaration;
case LanguageConceptSwitch.BaseStringOperation:
return myConceptBaseStringOperation;
case LanguageConceptSwitch.BaseVariableDeclaration:
return myConceptBaseVariableDeclaration;
case LanguageConceptSwitch.BaseVariableReference:
return myConceptBaseVariableReference;
case LanguageConceptSwitch.BinaryBitwiseOperation:
return myConceptBinaryBitwiseOperation;
case LanguageConceptSwitch.BinaryCompareOperation:
return myConceptBinaryCompareOperation;
case LanguageConceptSwitch.BinaryOperation:
return myConceptBinaryOperation;
case LanguageConceptSwitch.BitwiseAndExpression:
return myConceptBitwiseAndExpression;
case LanguageConceptSwitch.BitwiseNotExpression:
return myConceptBitwiseNotExpression;
case LanguageConceptSwitch.BitwiseOrExpression:
return myConceptBitwiseOrExpression;
case LanguageConceptSwitch.BitwiseXorExpression:
return myConceptBitwiseXorExpression;
case LanguageConceptSwitch.BlockStatement:
return myConceptBlockStatement;
case LanguageConceptSwitch.BooleanConstant:
return myConceptBooleanConstant;
case LanguageConceptSwitch.BooleanType:
return myConceptBooleanType;
case LanguageConceptSwitch.BreakStatement:
return myConceptBreakStatement;
case LanguageConceptSwitch.ByteType:
return myConceptByteType;
case LanguageConceptSwitch.CastExpression:
return myConceptCastExpression;
case LanguageConceptSwitch.CatchClause:
return myConceptCatchClause;
case LanguageConceptSwitch.CharConstant:
return myConceptCharConstant;
case LanguageConceptSwitch.CharType:
return myConceptCharType;
case LanguageConceptSwitch.ClassConcept:
return myConceptClassConcept;
case LanguageConceptSwitch.ClassCreator:
return myConceptClassCreator;
case LanguageConceptSwitch.Classifier:
return myConceptClassifier;
case LanguageConceptSwitch.ClassifierClassExpression:
return myConceptClassifierClassExpression;
case LanguageConceptSwitch.ClassifierMember:
return myConceptClassifierMember;
case LanguageConceptSwitch.ClassifierType:
return myConceptClassifierType;
case LanguageConceptSwitch.Closure:
return myConceptClosure;
case LanguageConceptSwitch.ClosureParameter:
return myConceptClosureParameter;
case LanguageConceptSwitch.ClosureParameterReference:
return myConceptClosureParameterReference;
case LanguageConceptSwitch.Closureoid:
return myConceptClosureoid;
case LanguageConceptSwitch.CommentPart:
return myConceptCommentPart;
case LanguageConceptSwitch.CommentedStatement:
return myConceptCommentedStatement;
case LanguageConceptSwitch.CommentedStatementsBlock:
return myConceptCommentedStatementsBlock;
case LanguageConceptSwitch.ConceptFunction:
return myConceptConceptFunction;
case LanguageConceptSwitch.ConceptFunctionParameter:
return myConceptConceptFunctionParameter;
case LanguageConceptSwitch.ConstructorDeclaration:
return myConceptConstructorDeclaration;
case LanguageConceptSwitch.ConstructorInvocationStatement:
return myConceptConstructorInvocationStatement;
case LanguageConceptSwitch.ContextClassifierKind:
return myConceptContextClassifierKind;
case LanguageConceptSwitch.ContinueStatement:
return myConceptContinueStatement;
case LanguageConceptSwitch.CustomPropertyImplementation:
return myConceptCustomPropertyImplementation;
case LanguageConceptSwitch.CustomSetterPropertyImplementation:
return myConceptCustomSetterPropertyImplementation;
case LanguageConceptSwitch.DefaultClassCreator:
return myConceptDefaultClassCreator;
case LanguageConceptSwitch.DefaultGetAccessor:
return myConceptDefaultGetAccessor;
case LanguageConceptSwitch.DefaultPropertyImplementation:
return myConceptDefaultPropertyImplementation;
case LanguageConceptSwitch.DefaultSetAccessor:
return myConceptDefaultSetAccessor;
case LanguageConceptSwitch.DimensionExpression:
return myConceptDimensionExpression;
case LanguageConceptSwitch.DivAssignmentExpression:
return myConceptDivAssignmentExpression;
case LanguageConceptSwitch.DivExpression:
return myConceptDivExpression;
case LanguageConceptSwitch.DoWhileStatement:
return myConceptDoWhileStatement;
case LanguageConceptSwitch.DotExpression:
return myConceptDotExpression;
case LanguageConceptSwitch.DoubleType:
return myConceptDoubleType;
case LanguageConceptSwitch.ElsifClause:
return myConceptElsifClause;
case LanguageConceptSwitch.EnumClass:
return myConceptEnumClass;
case LanguageConceptSwitch.EnumConstantDeclaration:
return myConceptEnumConstantDeclaration;
case LanguageConceptSwitch.EnumConstantReference:
return myConceptEnumConstantReference;
case LanguageConceptSwitch.EnumValueOfExpression:
return myConceptEnumValueOfExpression;
case LanguageConceptSwitch.EnumValuesExpression:
return myConceptEnumValuesExpression;
case LanguageConceptSwitch.EqualsExpression:
return myConceptEqualsExpression;
case LanguageConceptSwitch.EscapeOperation:
return myConceptEscapeOperation;
case LanguageConceptSwitch.Expression:
return myConceptExpression;
case LanguageConceptSwitch.ExpressionStatement:
return myConceptExpressionStatement;
case LanguageConceptSwitch.FieldDeclaration:
return myConceptFieldDeclaration;
case LanguageConceptSwitch.FieldReferenceOperation:
return myConceptFieldReferenceOperation;
case LanguageConceptSwitch.FloatType:
return myConceptFloatType;
case LanguageConceptSwitch.FloatingPointConstant:
return myConceptFloatingPointConstant;
case LanguageConceptSwitch.FloatingPointFloatConstant:
return myConceptFloatingPointFloatConstant;
case LanguageConceptSwitch.ForStatement:
return myConceptForStatement;
case LanguageConceptSwitch.ForeachStatement:
return myConceptForeachStatement;
case LanguageConceptSwitch.GenericDeclaration:
return myConceptGenericDeclaration;
case LanguageConceptSwitch.GenericNewExpression:
return myConceptGenericNewExpression;
case LanguageConceptSwitch.GetAccessor:
return myConceptGetAccessor;
case LanguageConceptSwitch.GreaterThanExpression:
return myConceptGreaterThanExpression;
case LanguageConceptSwitch.GreaterThanOrEqualsExpression:
return myConceptGreaterThanOrEqualsExpression;
case LanguageConceptSwitch.HasAnnotation:
return myConceptHasAnnotation;
case LanguageConceptSwitch.HexIntegerLiteral:
return myConceptHexIntegerLiteral;
case LanguageConceptSwitch.IAnonymousClass:
return myConceptIAnonymousClass;
case LanguageConceptSwitch.IBLDeprecatable:
return myConceptIBLDeprecatable;
case LanguageConceptSwitch.IBinaryLike:
return myConceptIBinaryLike;
case LanguageConceptSwitch.IClassifier:
return myConceptIClassifier;
case LanguageConceptSwitch.IClassifierMember:
return myConceptIClassifierMember;
case LanguageConceptSwitch.IClassifierType:
return myConceptIClassifierType;
case LanguageConceptSwitch.IConditional:
return myConceptIConditional;
case LanguageConceptSwitch.IContainsStatementList:
return myConceptIContainsStatementList;
case LanguageConceptSwitch.IControlFlowInterrupter:
return myConceptIControlFlowInterrupter;
case LanguageConceptSwitch.IExtractMethodAvailable:
return myConceptIExtractMethodAvailable;
case LanguageConceptSwitch.IFinalWrapper:
return myConceptIFinalWrapper;
case LanguageConceptSwitch.IGenericType:
return myConceptIGenericType;
case LanguageConceptSwitch.IHasModifiers:
return myConceptIHasModifiers;
case LanguageConceptSwitch.IIncompleteParen:
return myConceptIIncompleteParen;
case LanguageConceptSwitch.IInternalType:
return myConceptIInternalType;
case LanguageConceptSwitch.ILocalDeclaration:
return myConceptILocalDeclaration;
case LanguageConceptSwitch.ILocalReference:
return myConceptILocalReference;
case LanguageConceptSwitch.ILocalVariableElement:
return myConceptILocalVariableElement;
case LanguageConceptSwitch.ILocalVariableElementList:
return myConceptILocalVariableElementList;
case LanguageConceptSwitch.IMemberContainer:
return myConceptIMemberContainer;
case LanguageConceptSwitch.IMethodCall:
return myConceptIMethodCall;
case LanguageConceptSwitch.IMethodLike:
return myConceptIMethodLike;
case LanguageConceptSwitch.IOperation:
return myConceptIOperation;
case LanguageConceptSwitch.IParameter:
return myConceptIParameter;
case LanguageConceptSwitch.ISkipsReturn:
return myConceptISkipsReturn;
case LanguageConceptSwitch.IStatementListContainer:
return myConceptIStatementListContainer;
case LanguageConceptSwitch.IStaticContainerForMethods:
return myConceptIStaticContainerForMethods;
case LanguageConceptSwitch.IThisExpression:
return myConceptIThisExpression;
case LanguageConceptSwitch.ITryCatchStatement:
return myConceptITryCatchStatement;
case LanguageConceptSwitch.ITypeApplicable:
return myConceptITypeApplicable;
case LanguageConceptSwitch.IValidIdentifier:
return myConceptIValidIdentifier;
case LanguageConceptSwitch.IVariableAssignment:
return myConceptIVariableAssignment;
case LanguageConceptSwitch.IVariableDeclaration:
return myConceptIVariableDeclaration;
case LanguageConceptSwitch.IVariableReference:
return myConceptIVariableReference;
case LanguageConceptSwitch.IVisible:
return myConceptIVisible;
case LanguageConceptSwitch.IWillBeClassifier:
return myConceptIWillBeClassifier;
case LanguageConceptSwitch.IYetUnresolved:
return myConceptIYetUnresolved;
case LanguageConceptSwitch.IfStatement:
return myConceptIfStatement;
case LanguageConceptSwitch.ImplicitAnnotationInstanceValue:
return myConceptImplicitAnnotationInstanceValue;
case LanguageConceptSwitch.ImplicitAnnotationMethodKind:
return myConceptImplicitAnnotationMethodKind;
case LanguageConceptSwitch.IncompleteLeftParen:
return myConceptIncompleteLeftParen;
case LanguageConceptSwitch.IncompleteMemberDeclaration:
return myConceptIncompleteMemberDeclaration;
case LanguageConceptSwitch.IncompleteRightParen:
return myConceptIncompleteRightParen;
case LanguageConceptSwitch.InstanceInitializer:
return myConceptInstanceInitializer;
case LanguageConceptSwitch.InstanceMethodCallOperation:
return myConceptInstanceMethodCallOperation;
case LanguageConceptSwitch.InstanceMethodDeclaration:
return myConceptInstanceMethodDeclaration;
case LanguageConceptSwitch.InstanceOfExpression:
return myConceptInstanceOfExpression;
case LanguageConceptSwitch.IntegerConstant:
return myConceptIntegerConstant;
case LanguageConceptSwitch.IntegerLiteral:
return myConceptIntegerLiteral;
case LanguageConceptSwitch.IntegerType:
return myConceptIntegerType;
case LanguageConceptSwitch.Interface:
return myConceptInterface;
case LanguageConceptSwitch.IsEmptyOperation:
return myConceptIsEmptyOperation;
case LanguageConceptSwitch.IsNotEmptyOperation:
return myConceptIsNotEmptyOperation;
case LanguageConceptSwitch.JavaImport:
return myConceptJavaImport;
case LanguageConceptSwitch.JavaImports:
return myConceptJavaImports;
case LanguageConceptSwitch.LeftShiftAssignmentExpression:
return myConceptLeftShiftAssignmentExpression;
case LanguageConceptSwitch.LessThanExpression:
return myConceptLessThanExpression;
case LanguageConceptSwitch.LessThanOrEqualsExpression:
return myConceptLessThanOrEqualsExpression;
case LanguageConceptSwitch.LocalInstanceFieldReference:
return myConceptLocalInstanceFieldReference;
case LanguageConceptSwitch.LocalInstanceMethodCall:
return myConceptLocalInstanceMethodCall;
case LanguageConceptSwitch.LocalMethodCall:
return myConceptLocalMethodCall;
case LanguageConceptSwitch.LocalPropertyReference:
return myConceptLocalPropertyReference;
case LanguageConceptSwitch.LocalStaticFieldReference:
return myConceptLocalStaticFieldReference;
case LanguageConceptSwitch.LocalStaticMethodCall:
return myConceptLocalStaticMethodCall;
case LanguageConceptSwitch.LocalToMethodKind:
return myConceptLocalToMethodKind;
case LanguageConceptSwitch.LocalVariableDeclaration:
return myConceptLocalVariableDeclaration;
case LanguageConceptSwitch.LocalVariableDeclarationStatement:
return myConceptLocalVariableDeclarationStatement;
case LanguageConceptSwitch.LocalVariableReference:
return myConceptLocalVariableReference;
case LanguageConceptSwitch.LongLiteral:
return myConceptLongLiteral;
case LanguageConceptSwitch.LongType:
return myConceptLongType;
case LanguageConceptSwitch.LoopLabel:
return myConceptLoopLabel;
case LanguageConceptSwitch.LoopLabelReference:
return myConceptLoopLabelReference;
case LanguageConceptSwitch.LowerBoundType:
return myConceptLowerBoundType;
case LanguageConceptSwitch.MethodDeclaration:
return myConceptMethodDeclaration;
case LanguageConceptSwitch.MinusAssignmentExpression:
return myConceptMinusAssignmentExpression;
case LanguageConceptSwitch.MinusExpression:
return myConceptMinusExpression;
case LanguageConceptSwitch.Modifier:
return myConceptModifier;
case LanguageConceptSwitch.MulAssignmentExpression:
return myConceptMulAssignmentExpression;
case LanguageConceptSwitch.MulExpression:
return myConceptMulExpression;
case LanguageConceptSwitch.NPEEqualsExpression:
return myConceptNPEEqualsExpression;
case LanguageConceptSwitch.NPENotEqualsExpression:
return myConceptNPENotEqualsExpression;
case LanguageConceptSwitch.NestedNewExpression:
return myConceptNestedNewExpression;
case LanguageConceptSwitch.NotEqualsExpression:
return myConceptNotEqualsExpression;
case LanguageConceptSwitch.NotExpression:
return myConceptNotExpression;
case LanguageConceptSwitch.NullLiteral:
return myConceptNullLiteral;
case LanguageConceptSwitch.NullType:
return myConceptNullType;
case LanguageConceptSwitch.Number:
return myConceptNumber;
case LanguageConceptSwitch.OperationAssignmentExpression:
return myConceptOperationAssignmentExpression;
case LanguageConceptSwitch.OrAssignmentExpression:
return myConceptOrAssignmentExpression;
case LanguageConceptSwitch.OrExpression:
return myConceptOrExpression;
case LanguageConceptSwitch.ParameterDeclaration:
return myConceptParameterDeclaration;
case LanguageConceptSwitch.ParameterReference:
return myConceptParameterReference;
case LanguageConceptSwitch.ParenthesizedExpression:
return myConceptParenthesizedExpression;
case LanguageConceptSwitch.PlaceholderMember:
return myConceptPlaceholderMember;
case LanguageConceptSwitch.PlusAssignmentExpression:
return myConceptPlusAssignmentExpression;
case LanguageConceptSwitch.PlusExpression:
return myConceptPlusExpression;
case LanguageConceptSwitch.PostfixDecrementExpression:
return myConceptPostfixDecrementExpression;
case LanguageConceptSwitch.PostfixIncrementExpression:
return myConceptPostfixIncrementExpression;
case LanguageConceptSwitch.PrefixDecrementExpression:
return myConceptPrefixDecrementExpression;
case LanguageConceptSwitch.PrefixIncrementExpression:
return myConceptPrefixIncrementExpression;
case LanguageConceptSwitch.PrimitiveClassExpression:
return myConceptPrimitiveClassExpression;
case LanguageConceptSwitch.PrimitiveType:
return myConceptPrimitiveType;
case LanguageConceptSwitch.PrivateVisibility:
return myConceptPrivateVisibility;
case LanguageConceptSwitch.Property:
return myConceptProperty;
case LanguageConceptSwitch.PropertyImplementation:
return myConceptPropertyImplementation;
case LanguageConceptSwitch.PropertyReference:
return myConceptPropertyReference;
case LanguageConceptSwitch.PropertyValueReference:
return myConceptPropertyValueReference;
case LanguageConceptSwitch.ProtectedVisibility:
return myConceptProtectedVisibility;
case LanguageConceptSwitch.PublicVisibility:
return myConceptPublicVisibility;
case LanguageConceptSwitch.QualifiedSuperMethodCall:
return myConceptQualifiedSuperMethodCall;
case LanguageConceptSwitch.RemAssignmentExpression:
return myConceptRemAssignmentExpression;
case LanguageConceptSwitch.RemExpression:
return myConceptRemExpression;
case LanguageConceptSwitch.RemarkStatement:
return myConceptRemarkStatement;
case LanguageConceptSwitch.ReturnStatement:
return myConceptReturnStatement;
case LanguageConceptSwitch.RightShiftAssignmentExpression:
return myConceptRightShiftAssignmentExpression;
case LanguageConceptSwitch.SetAccessor:
return myConceptSetAccessor;
case LanguageConceptSwitch.ShiftLeftExpression:
return myConceptShiftLeftExpression;
case LanguageConceptSwitch.ShiftRightExpression:
return myConceptShiftRightExpression;
case LanguageConceptSwitch.ShiftRightUnsignedExpression:
return myConceptShiftRightUnsignedExpression;
case LanguageConceptSwitch.ShortType:
return myConceptShortType;
case LanguageConceptSwitch.SingleLineComment:
return myConceptSingleLineComment;
case LanguageConceptSwitch.Statement:
return myConceptStatement;
case LanguageConceptSwitch.StatementCommentPart:
return myConceptStatementCommentPart;
case LanguageConceptSwitch.StatementList:
return myConceptStatementList;
case LanguageConceptSwitch.StaticFieldDeclaration:
return myConceptStaticFieldDeclaration;
case LanguageConceptSwitch.StaticFieldReference:
return myConceptStaticFieldReference;
case LanguageConceptSwitch.StaticInitializer:
return myConceptStaticInitializer;
case LanguageConceptSwitch.StaticKind:
return myConceptStaticKind;
case LanguageConceptSwitch.StaticMethodCall:
return myConceptStaticMethodCall;
case LanguageConceptSwitch.StaticMethodDeclaration:
return myConceptStaticMethodDeclaration;
case LanguageConceptSwitch.StringBooleanOperation:
return myConceptStringBooleanOperation;
case LanguageConceptSwitch.StringLiteral:
return myConceptStringLiteral;
case LanguageConceptSwitch.StringToken:
return myConceptStringToken;
case LanguageConceptSwitch.StringType:
return myConceptStringType;
case LanguageConceptSwitch.StubStatementList:
return myConceptStubStatementList;
case LanguageConceptSwitch.SubstringExpression:
return myConceptSubstringExpression;
case LanguageConceptSwitch.SuperConstructorInvocation:
return myConceptSuperConstructorInvocation;
case LanguageConceptSwitch.SuperConstructorKind:
return myConceptSuperConstructorKind;
case LanguageConceptSwitch.SuperInerfaceKind:
return myConceptSuperInerfaceKind;
case LanguageConceptSwitch.SuperMethodCall:
return myConceptSuperMethodCall;
case LanguageConceptSwitch.SuperMethodKind:
return myConceptSuperMethodKind;
case LanguageConceptSwitch.SwitchCase:
return myConceptSwitchCase;
case LanguageConceptSwitch.SwitchStatement:
return myConceptSwitchStatement;
case LanguageConceptSwitch.SynchronizedStatement:
return myConceptSynchronizedStatement;
case LanguageConceptSwitch.TernaryOperatorExpression:
return myConceptTernaryOperatorExpression;
case LanguageConceptSwitch.TextCommentPart:
return myConceptTextCommentPart;
case LanguageConceptSwitch.ThisConstructorInvocation:
return myConceptThisConstructorInvocation;
case LanguageConceptSwitch.ThisConstructorKind:
return myConceptThisConstructorKind;
case LanguageConceptSwitch.ThisExpression:
return myConceptThisExpression;
case LanguageConceptSwitch.ThrowStatement:
return myConceptThrowStatement;
case LanguageConceptSwitch.Tokens:
return myConceptTokens;
case LanguageConceptSwitch.TrimOperation:
return myConceptTrimOperation;
case LanguageConceptSwitch.TryCatchStatement:
return myConceptTryCatchStatement;
case LanguageConceptSwitch.TryStatement:
return myConceptTryStatement;
case LanguageConceptSwitch.Type:
return myConceptType;
case LanguageConceptSwitch.TypeAnnotable:
return myConceptTypeAnnotable;
case LanguageConceptSwitch.TypeDerivable:
return myConceptTypeDerivable;
case LanguageConceptSwitch.TypeVariableDeclaration:
return myConceptTypeVariableDeclaration;
case LanguageConceptSwitch.TypeVariableReference:
return myConceptTypeVariableReference;
case LanguageConceptSwitch.UnaryMinus:
return myConceptUnaryMinus;
case LanguageConceptSwitch.UndefinedType:
return myConceptUndefinedType;
case LanguageConceptSwitch.UnknownConsCall:
return myConceptUnknownConsCall;
case LanguageConceptSwitch.UnknownDotCall:
return myConceptUnknownDotCall;
case LanguageConceptSwitch.UnknownLocalCall:
return myConceptUnknownLocalCall;
case LanguageConceptSwitch.UnknownNameRef:
return myConceptUnknownNameRef;
case LanguageConceptSwitch.UnknownNew:
return myConceptUnknownNew;
case LanguageConceptSwitch.UnresolvedNameReference:
return myConceptUnresolvedNameReference;
case LanguageConceptSwitch.UnsignedRightShiftAssignmentExpression:
return myConceptUnsignedRightShiftAssignmentExpression;
case LanguageConceptSwitch.UpperBoundType:
return myConceptUpperBoundType;
case LanguageConceptSwitch.UsingStatement:
return myConceptUsingStatement;
case LanguageConceptSwitch.ValueParameter:
return myConceptValueParameter;
case LanguageConceptSwitch.VarType:
return myConceptVarType;
case LanguageConceptSwitch.VariableArityType:
return myConceptVariableArityType;
case LanguageConceptSwitch.VariableDeclaration:
return myConceptVariableDeclaration;
case LanguageConceptSwitch.VariableReference:
return myConceptVariableReference;
case LanguageConceptSwitch.Visibility:
return myConceptVisibility;
case LanguageConceptSwitch.VoidType:
return myConceptVoidType;
case LanguageConceptSwitch.WhileStatement:
return myConceptWhileStatement;
case LanguageConceptSwitch.WildCardType:
return myConceptWildCardType;
case LanguageConceptSwitch.XorAssignmentExpression:
return myConceptXorAssignmentExpression;
default :
return null;
}
}
