{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"classifier"},new String[]{},new boolean[]{},false,false,"","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractForStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"variable"},new boolean[]{false},true,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{"label"},new String[]{},new String[]{"body","loopLabel"},new boolean[]{false,false},true,false,"","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable","jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&=","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AndExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&&","conditional-and operation","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Annotation","jetbrains.mps.baseLanguage.structure.Interface",false,new String[]{"jetbrains.mps.baseLanguage.structure.Interface"},new String[]{},new String[]{},new String[]{"annotationMethod"},new boolean[]{true},false,false,"@interface","Annotation declaration","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnnotationInstance","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{"annotation"},new String[]{"value"},new boolean[]{true},false,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"annotationInstance"},new boolean[]{false},false,false,"annotation instance","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"key"},new String[]{"value"},new boolean[]{false},false,false,"","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"},new String[]{},new String[]{},new String[]{"defaultValue"},new boolean[]{false},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnonymousClass","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IAnonymousClass","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"classifier","constructorDeclaration"},new String[]{"parameter","constructorArgument","typeParameter"},new boolean[]{true,true,true},false,false,"","anonymous class","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"cls"},new boolean[]{false},false,false,"anonymous class","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"array","index"},new boolean[]{false,false},false,false,"[","array access expression","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayClassExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"arrayType"},new boolean[]{false},false,false,"","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"clone()","special public method of array","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"componentType","dimensionExpression"},new boolean[]{false,true},false,false,"array","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{},new String[]{"componentType","initValue"},new boolean[]{false,true},false,false,"array with initializer","","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"length","array length readonly property","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"item"},new boolean[]{true},false,false,"{","array literal","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ArrayType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"componentType"},new boolean[]{false},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AsExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"expression","classifierType"},new boolean[]{false,false},false,false,"as","type case expression or return null","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AssertStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"condition","message"},new boolean[]{false,false},false,false,"assert","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.AssignmentExpression","jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"=","","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BLBottomType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"BLBottom","","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"lValue","rValue"},new boolean[]{false,false},true,false,"","","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseMethodCall","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.GenericDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.baseLanguage.structure.ITypeApplicable","jetbrains.mps.baseLanguage.structure.IHasModifiers","jetbrains.mps.lang.core.structure.ImplementationContainer"},new String[]{"isFinal","isSynchronized"},new String[]{},new String[]{"returnType","parameter","body","throwsItem"},new boolean[]{false,true,false,true},true,false,"","","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseStringOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"","","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BaseVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"baseVariableDeclaration"},new String[]{},new boolean[]{},true,false,"","","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BinaryOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"rightExpression","leftExpression"},new boolean[]{false,false},true,false,"<?>","abstract binary operation","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&","","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"~(expr)","bitwise not-expression","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|","","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"^","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BlockStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"statements"},new boolean[]{false},false,false,"{","block statement","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BooleanConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"boolean constant","boolean constant","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BooleanType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"boolean","","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.BreakStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"label"},new String[]{},new String[]{"loopLabelReference"},new boolean[]{false},false,false,"break","","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ByteType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"byte","","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CastExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"type","expression"},new boolean[]{false,false},false,false,"(type)exp","type cast expression","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CatchClause","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{"throwable","catchBody"},new boolean[]{false,false},false,false,"","","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CharConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{"charConstant"},new String[]{},new String[]{},new boolean[]{},false,false,"'","char constant","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CharType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"char","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{"jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{"abstractClass","isFinal","isStatic"},new String[]{},new String[]{"field","constructor","staticMethod","superclass","implementedInterface","instanceInitializer","classInitializer","staticInitializer","property"},new boolean[]{true,true,true,false,true,false,false,false,true},false,false,"class","Class declaration","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClassCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{"constructorDeclaration"},new String[]{"typeParameter"},new boolean[]{true},false,false,"","","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.baseLanguage.structure.GenericDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.IClassifier","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.IMemberContainer","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{"nestedName","isDeprecated","nonStatic"},new String[]{},new String[]{"member","staticField","method","staticInnerClassifiers"},new boolean[]{true,true,true,true},true,false,"","","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"classifier"},new String[]{},new boolean[]{},false,false,"","class of node operation","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClassifierMember",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.baseLanguage.structure.IClassifierMember"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClassifierType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IClassifierType","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{"classifier"},new String[]{"parameter"},new boolean[]{true},false,false,"","reference to classifier","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Closure","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.baseLanguage.structure.Closureoid","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClosureParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IResolveInfo"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ClosureParameterReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"closureParameter"},new String[]{},new boolean[]{},false,false,"","","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Closureoid",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CommentPart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.ISuppressErrors"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CommentedStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"statement"},new boolean[]{false},false,false,"","","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.ILocalVariableElementList","jetbrains.mps.lang.core.structure.ISuppressErrors"},new String[]{},new String[]{},new String[]{"statement"},new boolean[]{true},false,false,"/*","","");
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationContainer","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{"body"},new boolean[]{false},true,false,"","embedded block of code","");
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{"nestedName"},new String[]{},new String[]{},new boolean[]{},false,false,"constructor","","");
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{"constructorDeclaration"},new String[]{},new boolean[]{},true,false,"","","");
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ContextClassifierKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ContinueStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"label"},new String[]{},new String[]{"loopLabelReference"},new boolean[]{false},false,false,"continue","","");
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation","jetbrains.mps.baseLanguage.structure.PropertyImplementation",false,new String[]{"jetbrains.mps.baseLanguage.structure.PropertyImplementation"},new String[]{},new String[]{},new String[]{"getAccessor","setAccessor"},new boolean[]{false,false},false,false,"custom","","");
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DefaultClassCreator","jetbrains.mps.baseLanguage.structure.AbstractCreator",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractCreator"},new String[]{},new String[]{"classifier"},new String[]{"typeParameter"},new boolean[]{true},false,false,"","","");
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation","jetbrains.mps.baseLanguage.structure.PropertyImplementation",false,new String[]{"jetbrains.mps.baseLanguage.structure.PropertyImplementation"},new String[]{},new String[]{},new String[]{"defaultGetAccessor","defaultSetAccessor"},new boolean[]{false,false},false,false,"default","","");
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"visibility"},new boolean[]{false},false,false,"","","");
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DimensionExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"","","");
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"/=","","");
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DivExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"/","divide operation","");
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DoWhileStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"do","do... while loop","");
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DotExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"operand","operation"},new boolean[]{false,false},false,false,"","","");
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.DoubleType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"double","","");
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ElsifClause","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"condition","statementList"},new boolean[]{false,false},false,false,"","","");
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EnumClass","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept"},new String[]{},new String[]{},new String[]{"enumConstant"},new boolean[]{true},false,false,"enum","Enumeration class declaration","");
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{"constructor"},new String[]{"method"},new boolean[]{true},false,false,"","","");
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EnumConstantReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{"enumClass","enumConstantDeclaration"},new String[]{},new boolean[]{},false,false,".<enum>","enumeration constant reference","");
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"enumClass"},new String[]{"value"},new boolean[]{false},false,false,"valueOf","","");
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EnumValuesExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"enumClass"},new String[]{},new boolean[]{},false,false,"values","","");
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"==","equals operation","");
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.EscapeOperation","jetbrains.mps.baseLanguage.structure.BaseStringOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseStringOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"escape","escape quotation marks, back slashes, etc.","");
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ExpressionStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IWrapper"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"","expression statement","");
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.FieldDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{"isVolatile","isTransient"},new String[]{},new String[]{},new boolean[]{},false,false,"field","","");
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"fieldDeclaration"},new String[]{},new boolean[]{},false,false,"","instance field reference","");
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.FloatType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"float","","");
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.FloatingPointConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"floating point constant (double)","floating point constant (double)","");
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"floating point constant (float)","floating point constant (float)","");
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ForStatement","jetbrains.mps.baseLanguage.structure.AbstractForStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractForStatement","jetbrains.mps.lang.traceable.structure.ScopeConcept"},new String[]{},new String[]{},new String[]{"condition","iteration","additionalVar"},new boolean[]{false,true,true},false,false,"for","for(type name = init; condition; update)","");
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ForeachStatement","jetbrains.mps.baseLanguage.structure.AbstractForStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractForStatement","jetbrains.mps.lang.traceable.structure.ScopeConcept"},new String[]{},new String[]{},new String[]{"iterable"},new boolean[]{false},false,false,"for","for (type name : iterable)","");
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{"typeVariableDeclaration"},new boolean[]{true},true,false,"","","");
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.GenericNewExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"creator"},new boolean[]{false},false,false,"new","instance creation expression","");
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.GetAccessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"statementList"},new boolean[]{false},false,false,"","","");
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.GreaterThanExpression","jetbrains.mps.baseLanguage.structure.BinaryCompareOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">","greater than operation","");
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryCompareOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">=","greater than or equals operation","");
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.HasAnnotation",null,true,new String[]{},new String[]{},new String[]{},new String[]{"annotation"},new boolean[]{true},false,false,"","","");
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral","jetbrains.mps.baseLanguage.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.baseLanguage.structure.IntegerLiteral"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"0x","","");
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IAnonymousClass",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IBLDeprecatable",null,true,new String[]{"jetbrains.mps.lang.core.structure.IDeprecatable"},new String[]{"isDeprecated"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IClassifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IClassifierMember",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IClassifierType",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IContainsStatementList",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IFinalWrapper",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IGenericType",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 114:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IHasModifiers",null,true,new String[]{},new String[]{},new String[]{},new String[]{"modifiers"},new boolean[]{true},false,false,"","","");
case 115:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IInternalType",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 116:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ILocalDeclaration",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 117:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ILocalReference",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 118:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ILocalVariableElement",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 119:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 120:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IMemberContainer",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 121:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IMethodCall",null,true,new String[]{"jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.baseLanguage.structure.TypeAnnotable"},new String[]{},new String[]{"baseMethodDeclaration"},new String[]{"actualArgument","typeArgument"},new boolean[]{true,true},false,false,"","","");
case 122:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IMethodLike",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 123:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IOperation",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 124:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IParameter",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 125:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ISkipsReturn",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 126:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IStatementListContainer",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 127:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 128:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IThisExpression",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 129:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ITryCatchStatement",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 130:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ITypeApplicable",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 131:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IValidIdentifier",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 132:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IVariableAssignment",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 133:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IVariableDeclaration",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 134:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IVariableReference",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 135:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IVisible",null,true,new String[]{},new String[]{},new String[]{},new String[]{"visibility"},new boolean[]{false},false,false,"","","");
case 136:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IWillBeClassifier",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 137:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IYetUnresolved",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 138:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IfStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"forceOneLine","forceMultiLine"},new String[]{},new String[]{"condition","ifFalseStatement","ifTrue","elsifClauses"},new boolean[]{false,false,false,true},false,false,"if","","");
case 139:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue","jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue",false,new String[]{"jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 140:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 141:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"static","final","abstract","synchronized","volatile"},new String[]{},new String[]{"type"},new boolean[]{false},false,false,"","","");
case 142:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.InstanceInitializer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationPart"},new String[]{},new String[]{},new String[]{"statementList"},new boolean[]{false},false,false,"{","","");
case 143:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{"instanceMethodDeclaration"},new String[]{},new boolean[]{},false,false,"","instance method call","");
case 144:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.structure.MethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.MethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.ITypeApplicable","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{"isAbstract"},new String[]{},new String[]{},new boolean[]{},false,false,"method","","");
case 145:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.InstanceOfExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"leftExpression","classType"},new boolean[]{false,false},false,false,"instanceof","","");
case 146:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IntegerConstant","jetbrains.mps.baseLanguage.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.baseLanguage.structure.IntegerLiteral","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"integer constant","integer constant","");
case 147:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IntegerLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 148:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IntegerType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"int","","");
case 149:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Interface","jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{"jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{},new String[]{"extendedInterface"},new boolean[]{true},false,false,"interface","Interface declaration","");
case 150:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IsEmptyOperation","jetbrains.mps.baseLanguage.structure.StringBooleanOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.StringBooleanOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"isEmpty","string is null or empty","");
case 151:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation","jetbrains.mps.baseLanguage.structure.StringBooleanOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.StringBooleanOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"isNotEmpty","string is not null and not empty","");
case 152:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.JavaImport","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.Tokens"},new String[]{"onDemand","static"},new String[]{},new String[]{},new boolean[]{},false,false,"java import","","");
case 153:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.JavaImports","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{"entries"},new boolean[]{true},false,false,"","","");
case 154:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<<=","","");
case 155:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LessThanExpression","jetbrains.mps.baseLanguage.structure.BinaryCompareOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<","less then operation","");
case 156:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryCompareOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryCompareOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<=","less then or equals operation","");
case 157:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"fieldDeclaration"},new String[]{},new boolean[]{},false,false,"","local instance field reference","");
case 158:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall","jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.LocalMethodCall","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"instanceMethodDeclaration"},new String[]{},new boolean[]{},false,false,"","local instance method call","");
case 159:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"method"},new String[]{},new boolean[]{},false,false,"","local method invocation","");
case 160:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalPropertyReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{},false,false,"","","");
case 161:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"staticFieldDeclaration"},new String[]{},new boolean[]{},false,false,"","reference to local static field declaration","");
case 162:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall","jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.LocalMethodCall","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"staticMethodDeclaration"},new String[]{},new boolean[]{},false,false,"","local static method invocation","");
case 163:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalToMethodKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 164:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IVariableAssignment","jetbrains.mps.baseLanguage.structure.IVariableDeclaration","jetbrains.mps.baseLanguage.structure.ILocalDeclaration","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<type> <var>","local variable declaration","");
case 165:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IWrapper"},new String[]{},new String[]{},new String[]{"localVariableDeclaration"},new boolean[]{false},false,false,"<type> <var>;","local variable declaration statement","");
case 166:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LocalVariableReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"localVariableDeclaration"},new String[]{},new boolean[]{},false,false,"","reference to local variable declaration","");
case 167:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LongLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 168:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LongType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"long","","");
case 169:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LoopLabel","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.LocalToMethodKind","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 170:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LoopLabelReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"loopLabel"},new String[]{},new boolean[]{},false,false,"","","");
case 171:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.LowerBoundType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"bound"},new boolean[]{false},false,false,"? super","","");
case 172:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.MethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 173:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-=","","");
case 174:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.MinusExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-","minus operation","");
case 175:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Modifier","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 176:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*=","","");
case 177:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.MulExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*","multiplication operation","");
case 178:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":eq:","NPE-safe equals operation","");
case 179:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,":ne:","NPE-safe not equals operation","");
case 180:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NotEqualsExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"!=","not equals operation","");
case 181:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NotExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"!(expr)","not-expression","");
case 182:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NullLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"null","","");
case 183:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.NullType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"nulltype","","");
case 184:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Number","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 185:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression","jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 186:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|=","","");
case 187:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.OrExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"||","conditional-or operation","");
case 188:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ParameterDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IVariableAssignment","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","parameter","");
case 189:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ParameterReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"parameterDeclaration"},new String[]{},new boolean[]{},false,false,"","reference to method parameter","");
case 190:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"(expr)","parenthesis","");
case 191:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PlaceholderMember","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 192:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"empty line","","");
case 193:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+=","","");
case 194:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PlusExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+","plus operation","");
case 195:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression","jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"postfix decrement","","");
case 196:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression","jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"postfix increment","","");
case 197:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression","jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"--","","");
case 198:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression","jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"++","","");
case 199:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"primitiveType"},new boolean[]{false},false,false,"","","");
case 200:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PrimitiveType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 201:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PrivateVisibility","jetbrains.mps.baseLanguage.structure.Visibility",false,new String[]{"jetbrains.mps.baseLanguage.structure.Visibility"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"private","","");
case 202:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Property","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{"propertyName"},new String[]{},new String[]{"type","propertyImplementation"},new boolean[]{false,false},false,false,"property","","");
case 203:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PropertyImplementation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 204:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PropertyReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{},false,false,"","","");
case 205:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ProtectedVisibility","jetbrains.mps.baseLanguage.structure.Visibility",false,new String[]{"jetbrains.mps.baseLanguage.structure.Visibility"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"protected","","");
case 206:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.PublicVisibility","jetbrains.mps.baseLanguage.structure.Visibility",false,new String[]{"jetbrains.mps.baseLanguage.structure.Visibility"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"public","","");
case 207:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"%=","","");
case 208:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.RemExpression","jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"%","remainder operation","");
case 209:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.RemarkStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"//","remark","");
case 210:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ReturnStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"return","","");
case 211:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>=","","");
case 212:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SetAccessor","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"statementList"},new boolean[]{false},false,false,"setter","","");
case 213:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<<","","");
case 214:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ShiftRightExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>","","");
case 215:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression","jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>>","","");
case 216:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ShortType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"short","","");
case 217:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SingleLineComment","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{},new String[]{"commentPart"},new boolean[]{true},false,false,"//","single-line comment","");
case 218:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ILocalVariableElement","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.ICanSuppressErrors"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<statement>","","");
case 219:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StatementCommentPart","jetbrains.mps.baseLanguage.structure.CommentPart",false,new String[]{"jetbrains.mps.baseLanguage.structure.CommentPart"},new String[]{},new String[]{},new String[]{"commentedStatement"},new boolean[]{false},false,false,"","","");
case 220:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StatementList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.ILocalVariableElementList","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.ScopeFacade"},new String[]{},new String[]{},new String[]{"statement"},new boolean[]{true},false,false,"","","");
case 221:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.StaticKind","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"static field","static field declaration","");
case 222:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticFieldReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference"},new String[]{},new String[]{"classifier","staticFieldDeclaration"},new String[]{},new boolean[]{},false,false,".<static field>","reference to static field declaration","");
case 223:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticInitializer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationPart"},new String[]{},new String[]{},new String[]{"statementList"},new boolean[]{false},false,false,"static {","","");
case 224:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 225:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"classConcept","staticMethodDeclaration"},new String[]{},new boolean[]{},false,false,".<static method>","static method invocation","");
case 226:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration","jetbrains.mps.baseLanguage.structure.MethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.MethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.StaticKind","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"static method","","");
case 227:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StringBooleanOperation","jetbrains.mps.baseLanguage.structure.BaseStringOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseStringOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 228:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StringLiteral","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"\"","string literal","");
case 229:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StringToken","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 230:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StringType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"string","","");
case 231:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.StubStatementList","jetbrains.mps.baseLanguage.structure.StatementList",false,new String[]{"jetbrains.mps.baseLanguage.structure.StatementList","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 232:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SubstringExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{"operand","startIndex","endIndex"},new boolean[]{false,false,false},false,false,"[","substing","");
case 233:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation","jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"super","super constructor invocation","");
case 234:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SuperConstructorKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 235:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SuperMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"instanceMethodDeclaration"},new String[]{},new boolean[]{},false,false,"super","super method invocation","");
case 236:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SuperMethodKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 237:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SwitchCase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"expression","body"},new boolean[]{false,false},false,false,"case","","");
case 238:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SwitchStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{"label"},new String[]{},new String[]{"expression","case","defaultBlock","switchLabel"},new boolean[]{false,true,false,false},false,false,"switch","","");
case 239:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.SynchronizedStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"expression","block"},new boolean[]{false,false},false,false,"synchronized","","");
case 240:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"condition","ifTrue","ifFalse"},new boolean[]{false,false,false},false,false,"(expr) ? (expr) : expr","ternary operator","");
case 241:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TextCommentPart","jetbrains.mps.baseLanguage.structure.CommentPart",false,new String[]{"jetbrains.mps.baseLanguage.structure.CommentPart"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 242:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation","jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"this","this constructor invocation","");
case 243:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ThisConstructorKind",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 244:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ThisExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IThisExpression"},new String[]{},new String[]{"classConcept"},new String[]{},new boolean[]{},false,false,"this","","");
case 245:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ThrowStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"throwable"},new boolean[]{false},false,false,"throw","","");
case 246:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Tokens",null,true,new String[]{},new String[]{},new String[]{},new String[]{"token"},new boolean[]{true},false,false,"","","");
case 247:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TrimOperation","jetbrains.mps.baseLanguage.structure.BaseStringOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseStringOperation"},new String[]{"trimKind"},new String[]{},new String[]{},new boolean[]{},false,false,"trim","trim white spaces, line breaks, tabs, etc.","");
case 248:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TryCatchStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.ITryCatchStatement"},new String[]{},new String[]{},new String[]{"body","catchClause"},new boolean[]{false,true},false,false,"try {...} catch","","");
case 249:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TryStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.ITryCatchStatement"},new String[]{},new String[]{},new String[]{"body","finallyBody","catchClause"},new boolean[]{false,false,true},false,false,"try {...} finally","","");
case 250:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IType","jetbrains.mps.lang.core.structure.InterfacePart"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","a type","");
case 251:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TypeAnnotable",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 252:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TypeDerivable",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 253:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.IResolveInfo"},new String[]{"extends"},new String[]{},new String[]{"bound","auxBounds"},new boolean[]{false,true},false,false,"","","");
case 254:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.TypeVariableReference","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{"typeVariableDeclaration"},new String[]{},new boolean[]{},false,false,"","reference to type variable","");
case 255:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnaryMinus","jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-","unary minus","");
case 256:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UndefinedType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"undefined","undefined type","");
case 257:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnknownConsCall","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"isSuper"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 258:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnknownDotCall","jetbrains.mps.baseLanguage.structure.UnknownNameRef",false,new String[]{"jetbrains.mps.baseLanguage.structure.UnknownNameRef","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"callee"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 259:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnknownLocalCall","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"callee"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 260:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnknownNameRef","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.Tokens","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 261:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnknownNew","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"className"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 262:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"resolveName"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 263:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>>=","","");
case 264:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UpperBoundType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType"},new String[]{},new String[]{},new String[]{"bound"},new boolean[]{false},false,false,"? extends","","");
case 265:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.UsingStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"resource","body"},new boolean[]{true,false},false,false,"using(...)","","");
case 266:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.ValueParameter","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"value","","");
case 267:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.VarType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"var","","");
case 268:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.VariableArityType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{"componentType"},new boolean[]{false},false,false,"","","");
case 269:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.baseLanguage.structure.IVariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo"},new String[]{"isFinal"},new String[]{},new String[]{"initializer"},new boolean[]{false},false,false,"","","");
case 270:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.baseLanguage.structure.IVariableReference","jetbrains.mps.baseLanguage.structure.ILocalReference"},new String[]{},new String[]{"variableDeclaration"},new String[]{},new boolean[]{},false,false,"","reference to variable","");
case 271:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.Visibility","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 272:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.VoidType","jetbrains.mps.baseLanguage.structure.PrimitiveType",false,new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"void","","");
case 273:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.WhileStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"while","","");
case 274:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.WildCardType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"?","wildcard type","");
case 275:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression","jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",false,new String[]{"jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"^=","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
