{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("classifier").staticScope(StaticScope.NONE).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractCreator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable"},new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"body","loopLabel"},new boolean[]{false,false}).abstract_().staticScope(StaticScope.NONE).create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"expression"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable").super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("&=","").staticScope(StaticScope.NONE).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("&&","conditional-and operation").staticScope(StaticScope.NONE).create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Annotation").super_("jetbrains.mps.baseLanguage.structure.Interface").parents("jetbrains.mps.baseLanguage.structure.Interface").children(new String[]{"annotationMethod"},new boolean[]{true}).alias("@interface","Annotation declaration").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstance").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.ScopeProvider").references("annotation").children(new String[]{"value"},new boolean[]{true}).staticScope(StaticScope.NONE).create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"annotationInstance"},new boolean[]{false}).alias("annotation instance","").staticScope(StaticScope.NONE).create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("key").children(new String[]{"value"},new boolean[]{false}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").children(new String[]{"defaultValue"},new boolean[]{false}).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IAnonymousClass","jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier","constructorDeclaration").children(new String[]{"parameter","constructorArgument","typeParameter"},new boolean[]{true,true,true}).alias("","anonymous class").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"cls"},new boolean[]{false}).alias("anonymous class","").staticScope(StaticScope.NONE).create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"array","index"},new boolean[]{false,false}).alias("[","array access expression").staticScope(StaticScope.NONE).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"arrayType"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").alias("clone()","special public method of array").staticScope(StaticScope.NONE).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType","dimensionExpression"},new boolean[]{false,true}).alias("array","").staticScope(StaticScope.NONE).create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType","initValue"},new boolean[]{false,true}).alias("array with initializer","").staticScope(StaticScope.NONE).create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").alias("length","array length readonly property").staticScope(StaticScope.NONE).create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"item"},new boolean[]{true}).alias("{","array literal").staticScope(StaticScope.NONE).create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"componentType"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AsExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression","classifierType"},new boolean[]{false,false}).alias("as","type case expression or return null").staticScope(StaticScope.NONE).create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssertStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"condition","message"},new boolean[]{false,false}).alias("assert","").staticScope(StaticScope.NONE).create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression","jetbrains.mps.baseLanguage.structure.TypeDerivable").alias("=","").staticScope(StaticScope.NONE).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BLBottomType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("BLBottom","").staticScope(StaticScope.NONE).create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"lValue","rValue"},new boolean[]{false,false}).abstract_().staticScope(StaticScope.NONE).create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall").abstract_().staticScope(StaticScope.NONE).create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.baseLanguage.structure.ITypeApplicable","jetbrains.mps.baseLanguage.structure.IHasModifiers","jetbrains.mps.lang.core.structure.ImplementationContainer").properties("isFinal","isSynchronized").children(new String[]{"returnType","parameter","body","throwsItem"},new boolean[]{false,true,false,true}).abstract_().create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseStringOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier").children(new String[]{"type"},new boolean[]{false}).create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("baseVariableDeclaration").abstract_().staticScope(StaticScope.NONE).create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"rightExpression","leftExpression"},new boolean[]{false,false}).abstract_().alias("<?>","abstract binary operation").staticScope(StaticScope.NONE).create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("&","").staticScope(StaticScope.NONE).create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"},new boolean[]{false}).alias("~(expr)","bitwise not-expression").staticScope(StaticScope.NONE).create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("|","").staticScope(StaticScope.NONE).create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("^","").staticScope(StaticScope.NONE).create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BlockStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"statements"},new boolean[]{false}).alias("{","block statement").staticScope(StaticScope.NONE).create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("boolean constant","boolean constant").staticScope(StaticScope.NONE).create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("boolean","").staticScope(StaticScope.NONE).create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BreakStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"},new boolean[]{false}).alias("break","").staticScope(StaticScope.NONE).create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ByteType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("byte","").staticScope(StaticScope.NONE).create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"type","expression"},new boolean[]{false,false}).alias("(type)exp","type cast expression").staticScope(StaticScope.NONE).create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CatchClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"throwable","catchBody"},new boolean[]{false,false}).staticScope(StaticScope.NONE).create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("charConstant").alias("'","char constant").staticScope(StaticScope.NONE).create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("char","").staticScope(StaticScope.NONE).create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassConcept").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.InterfacePart").properties("abstractClass","isFinal","isStatic").children(new String[]{"field","constructor","staticMethod","superclass","implementedInterface","instanceInitializer","classInitializer","staticInitializer","property"},new boolean[]{true,true,true,false,true,false,false,false,true}).alias("class","Class declaration").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator","jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").children(new String[]{"typeParameter"},new boolean[]{true}).staticScope(StaticScope.NONE).create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Classifier").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.IClassifier","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.IMemberContainer","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.lang.core.structure.ScopeProvider").properties("nestedName","isDeprecated","nonStatic").children(new String[]{"member","staticField","method","staticInnerClassifiers"},new boolean[]{true,true,true,true}).unordered("member").abstract_().create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier").alias("","class of node operation").staticScope(StaticScope.NONE).create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierMember").interface_().parents("jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.baseLanguage.structure.IClassifierMember").create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IClassifierType","jetbrains.mps.baseLanguage.structure.IGenericType").references("classifier").children(new String[]{"parameter"},new boolean[]{true}).alias("","reference to classifier").staticScope(StaticScope.NONE).create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closure").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction","jetbrains.mps.baseLanguage.structure.Closureoid","jetbrains.mps.lang.core.structure.ScopeProvider").abstract_().staticScope(StaticScope.NONE).create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IResolveInfo").abstract_().create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("closureParameter").staticScope(StaticScope.NONE).create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closureoid").interface_().create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.ISuppressErrors").abstract_().staticScope(StaticScope.NONE).create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"statement"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.ILocalVariableElementList","jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"statement"},new boolean[]{true}).alias("/*","").staticScope(StaticScope.NONE).create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationContainer","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"body"},new boolean[]{false}).abstract_().alias("","embedded block of code").staticScope(StaticScope.NONE).create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.lang.core.structure.InterfacePart").properties("nestedName").alias("constructor","").create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").abstract_().staticScope(StaticScope.NONE).create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContextClassifierKind").interface_().create();
case 68:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContinueStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"},new boolean[]{false}).alias("continue","").staticScope(StaticScope.NONE).create();
case 69:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor","setAccessor"},new boolean[]{false,false}).alias("custom","").create();
case 70:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor","setAccessor"},new boolean[]{false,false}).alias("custom setter","").create();
case 71:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("classifier").children(new String[]{"typeParameter"},new boolean[]{true}).staticScope(StaticScope.NONE).create();
case 72:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 73:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"defaultGetAccessor","defaultSetAccessor"},new boolean[]{false,false}).alias("default","").create();
case 74:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"visibility"},new boolean[]{false}).create();
case 75:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DimensionExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 76:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("/=","").staticScope(StaticScope.NONE).create();
case 77:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("/","divide operation").staticScope(StaticScope.NONE).create();
case 78:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoWhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"},new boolean[]{false}).alias("do","do... while loop").staticScope(StaticScope.NONE).create();
case 79:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"operand","operation"},new boolean[]{false,false}).staticScope(StaticScope.NONE).create();
case 80:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoubleType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("double","").staticScope(StaticScope.NONE).create();
case 81:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ElsifClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"condition","statementList"},new boolean[]{false,false}).create();
case 82:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept").children(new String[]{"enumConstant"},new boolean[]{true}).alias("enum","Enumeration class declaration").create();
case 83:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.lang.core.structure.InterfacePart","jetbrains.mps.baseLanguage.structure.IMemberContainer","jetbrains.mps.lang.core.structure.ScopeProvider").references("constructor").children(new String[]{"method"},new boolean[]{true}).create();
case 84:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.ScopeProvider").references("enumClass","enumConstantDeclaration").alias(".<enum>","enumeration constant reference").staticScope(StaticScope.NONE).create();
case 85:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").children(new String[]{"value"},new boolean[]{false}).alias("valueOf","").staticScope(StaticScope.NONE).create();
case 86:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValuesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").alias("values","").staticScope(StaticScope.NONE).create();
case 87:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("==","equals operation").staticScope(StaticScope.NONE).create();
case 88:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EscapeOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").alias("escape","escape quotation marks, back slashes, etc.").staticScope(StaticScope.NONE).create();
case 89:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Expression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
case 90:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ExpressionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"expression"},new boolean[]{false}).alias("","expression statement").staticScope(StaticScope.NONE).create();
case 91:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile","isTransient").alias("field","").create();
case 92:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").references("fieldDeclaration").alias("","instance field reference").staticScope(StaticScope.NONE).create();
case 93:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("float","").staticScope(StaticScope.NONE).create();
case 94:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (double)","floating point constant (double)").staticScope(StaticScope.NONE).create();
case 95:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (float)","floating point constant (float)").staticScope(StaticScope.NONE).create();
case 96:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement","jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"condition","iteration","additionalVar"},new boolean[]{false,true,true}).alias("for","for(type name = init; condition; update)").staticScope(StaticScope.NONE).create();
case 97:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForeachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement","jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"iterable"},new boolean[]{false}).alias("for","for (type name : iterable)").staticScope(StaticScope.NONE).create();
case 98:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"typeVariableDeclaration"},new boolean[]{true}).abstract_().create();
case 99:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericNewExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"creator"},new boolean[]{false}).alias("new","instance creation expression").staticScope(StaticScope.NONE).create();
case 100:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"},new boolean[]{false}).create();
case 101:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">","greater than operation").staticScope(StaticScope.NONE).create();
case 102:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">=","greater than or equals operation").staticScope(StaticScope.NONE).create();
case 103:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HasAnnotation").interface_().children(new String[]{"annotation"},new boolean[]{true}).create();
case 104:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral").properties("value").alias("0x","").staticScope(StaticScope.NONE).create();
case 105:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IAnonymousClass").interface_().create();
case 106:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBLDeprecatable").interface_().parents("jetbrains.mps.lang.core.structure.IDeprecatable").properties("isDeprecated").create();
case 107:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBinaryLike").interface_().create();
case 108:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifier").interface_().create();
case 109:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierMember").interface_().create();
case 110:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierType").interface_().create();
case 111:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IContainsStatementList").interface_().create();
case 112:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").interface_().create();
case 113:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable").interface_().create();
case 114:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IFinalWrapper").interface_().create();
case 115:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IGenericType").interface_().create();
case 116:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IHasModifiers").interface_().children(new String[]{"modifiers"},new boolean[]{true}).create();
case 117:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IIncompleteParen").interface_().properties("count").create();
case 118:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IInternalType").interface_().create();
case 119:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalDeclaration").interface_().create();
case 120:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalReference").interface_().create();
case 121:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElement").interface_().create();
case 122:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").interface_().create();
case 123:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMemberContainer").interface_().create();
case 124:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodCall").interface_().parents("jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.baseLanguage.structure.TypeAnnotable").references("baseMethodDeclaration").children(new String[]{"actualArgument","typeArgument"},new boolean[]{true,true}).create();
case 125:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodLike").interface_().create();
case 126:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IOperation").interface_().create();
case 127:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IParameter").interface_().create();
case 128:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ISkipsReturn").interface_().create();
case 129:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStatementListContainer").interface_().create();
case 130:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods").interface_().create();
case 131:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IThisExpression").interface_().create();
case 132:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITryCatchStatement").interface_().create();
case 133:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITypeApplicable").interface_().create();
case 134:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IValidIdentifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 135:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableAssignment").interface_().create();
case 136:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableDeclaration").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 137:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableReference").interface_().create();
case 138:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVisible").interface_().children(new String[]{"visibility"},new boolean[]{false}).create();
case 139:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IWillBeClassifier").interface_().create();
case 140:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IYetUnresolved").interface_().create();
case 141:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IfStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("forceOneLine","forceMultiLine").children(new String[]{"condition","ifFalseStatement","ifTrue","elsifClauses"},new boolean[]{false,false,false,true}).alias("if","").staticScope(StaticScope.NONE).create();
case 142:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue").super_("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").parents("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
case 143:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind").interface_().create();
case 144:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute","jetbrains.mps.baseLanguage.structure.IIncompleteParen").alias("(","").create();
case 145:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("static","final","abstract","synchronized","volatile","transient","native").children(new String[]{"type"},new boolean[]{false}).create();
case 146:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteRightParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute","jetbrains.mps.baseLanguage.structure.IIncompleteParen").alias(")","").create();
case 147:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"},new boolean[]{false}).alias("{","").create();
case 148:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.structure.IMethodCall").references("instanceMethodDeclaration").alias("","instance method call").staticScope(StaticScope.NONE).create();
case 149:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.ITypeApplicable","jetbrains.mps.lang.core.structure.InterfacePart").properties("isAbstract").alias("method","").create();
case 150:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"leftExpression","classType"},new boolean[]{false,false}).alias("instanceof","").staticScope(StaticScope.NONE).create();
case 151:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("integer constant","integer constant").staticScope(StaticScope.NONE).create();
case 152:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
case 153:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("int","").staticScope(StaticScope.NONE).create();
case 154:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Interface").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.UnitConcept","jetbrains.mps.lang.core.structure.InterfacePart").children(new String[]{"extendedInterface"},new boolean[]{true}).alias("interface","Interface declaration").create();
case 155:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isEmpty","string is null or empty").staticScope(StaticScope.NONE).create();
case 156:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isNotEmpty","string is not null and not empty").staticScope(StaticScope.NONE).create();
case 157:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.Tokens").properties("onDemand","static").alias("java import","").create();
case 158:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImports").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"entries"},new boolean[]{true}).create();
case 159:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("<<=","").staticScope(StaticScope.NONE).create();
case 160:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<","less then operation").staticScope(StaticScope.NONE).create();
case 161:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<=","less then or equals operation").staticScope(StaticScope.NONE).create();
case 162:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("fieldDeclaration").alias("","local instance field reference").staticScope(StaticScope.NONE).create();
case 163:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("instanceMethodDeclaration").alias("","local instance method call").staticScope(StaticScope.NONE).create();
case 164:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("method").alias("","local method invocation").staticScope(StaticScope.NONE).create();
case 165:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalPropertyReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("property").staticScope(StaticScope.NONE).create();
case 166:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticFieldDeclaration").alias("","reference to local static field declaration").staticScope(StaticScope.NONE).create();
case 167:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticMethodDeclaration").alias("","local static method invocation").staticScope(StaticScope.NONE).create();
case 168:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalToMethodKind").interface_().create();
case 169:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IVariableAssignment","jetbrains.mps.baseLanguage.structure.IVariableDeclaration","jetbrains.mps.baseLanguage.structure.ILocalDeclaration","jetbrains.mps.lang.core.structure.ScopeProvider").alias("<type> <var>","local variable declaration").staticScope(StaticScope.ROOT).create();
case 170:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"localVariableDeclaration"},new boolean[]{false}).alias("<type> <var>;","local variable declaration statement").staticScope(StaticScope.NONE).create();
case 171:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("localVariableDeclaration").alias("","reference to local variable declaration").staticScope(StaticScope.NONE).create();
case 172:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").staticScope(StaticScope.NONE).create();
case 173:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("long","").staticScope(StaticScope.NONE).create();
case 174:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.LocalToMethodKind","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 175:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("loopLabel").create();
case 176:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LowerBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"},new boolean[]{false}).alias("? super","").staticScope(StaticScope.NONE).create();
case 177:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo").properties("isNative").abstract_().create();
case 178:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("-=","").staticScope(StaticScope.NONE).create();
case 179:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("-","minus operation").staticScope(StaticScope.NONE).create();
case 180:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Modifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 181:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("*=","").staticScope(StaticScope.NONE).create();
case 182:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("*","multiplication operation").staticScope(StaticScope.NONE).create();
case 183:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":eq:","NPE-safe equals operation").staticScope(StaticScope.NONE).create();
case 184:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":ne:","NPE-safe not equals operation").staticScope(StaticScope.NONE).create();
case 185:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("!=","not equals operation").staticScope(StaticScope.NONE).create();
case 186:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"},new boolean[]{false}).alias("!(expr)","not-expression").staticScope(StaticScope.NONE).create();
case 187:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("null","").staticScope(StaticScope.NONE).create();
case 188:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("nulltype","").staticScope(StaticScope.NONE).create();
case 189:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Number").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 190:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").staticScope(StaticScope.NONE).create();
case 191:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("|=","").staticScope(StaticScope.NONE).create();
case 192:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("||","conditional-or operation").staticScope(StaticScope.NONE).create();
case 193:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IVariableAssignment","jetbrains.mps.lang.core.structure.InterfacePart").alias("","parameter").staticScope(StaticScope.ROOT).create();
case 194:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("parameterDeclaration").alias("","reference to method parameter").staticScope(StaticScope.NONE).create();
case 195:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"},new boolean[]{false}).alias("(expr)","parenthesis").staticScope(StaticScope.NONE).create();
case 196:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMember").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
case 197:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("empty line","Use PlaceholderMember instead").create();
case 198:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("+=","").staticScope(StaticScope.NONE).create();
case 199:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("+","plus operation").staticScope(StaticScope.NONE).create();
case 200:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix decrement","").staticScope(StaticScope.NONE).create();
case 201:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix increment","").staticScope(StaticScope.NONE).create();
case 202:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("--","").staticScope(StaticScope.NONE).create();
case 203:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("++","").staticScope(StaticScope.NONE).create();
case 204:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"primitiveType"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 205:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").abstract_().staticScope(StaticScope.NONE).create();
case 206:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrivateVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("private","").staticScope(StaticScope.NONE).create();
case 207:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Property").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.InterfacePart").properties("propertyName").children(new String[]{"type","propertyImplementation"},new boolean[]{false,false}).alias("property","").create();
case 208:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyImplementation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 209:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").references("property").staticScope(StaticScope.NONE).create();
case 210:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyValueReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("owningProperty").alias("","Property value represented in custom getters and setters").create();
case 211:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ProtectedVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("protected","").staticScope(StaticScope.NONE).create();
case 212:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PublicVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("public","").staticScope(StaticScope.NONE).create();
case 213:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("%=","").staticScope(StaticScope.NONE).create();
case 214:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("%","remainder operation").staticScope(StaticScope.NONE).create();
case 215:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemarkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("//","remark").staticScope(StaticScope.NONE).create();
case 216:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ReturnStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.TypeDerivable").children(new String[]{"expression"},new boolean[]{false}).alias("return","").staticScope(StaticScope.NONE).create();
case 217:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>=","").staticScope(StaticScope.NONE).create();
case 218:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"},new boolean[]{false}).alias("setter","").create();
case 219:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("<<","").staticScope(StaticScope.NONE).create();
case 220:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>","").staticScope(StaticScope.NONE).create();
case 221:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>>","").staticScope(StaticScope.NONE).create();
case 222:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShortType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("short","").staticScope(StaticScope.NONE).create();
case 223:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SingleLineComment").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"commentPart"},new boolean[]{true}).alias("//","single-line comment").staticScope(StaticScope.NONE).create();
case 224:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Statement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ILocalVariableElement","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.ICanSuppressErrors").alias("<statement>","").staticScope(StaticScope.NONE).create();
case 225:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").children(new String[]{"commentedStatement"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 226:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IContainer","jetbrains.mps.baseLanguage.structure.ILocalVariableElementList","jetbrains.mps.lang.core.structure.ImplementationWithStubPart","jetbrains.mps.lang.traceable.structure.ScopeConcept","jetbrains.mps.lang.core.structure.ScopeProvider","jetbrains.mps.lang.core.structure.ScopeFacade").children(new String[]{"statement"},new boolean[]{true}).staticScope(StaticScope.NONE).create();
case 227:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.StaticKind","jetbrains.mps.lang.core.structure.IResolveInfo","jetbrains.mps.baseLanguage.structure.IBLDeprecatable","jetbrains.mps.lang.traceable.structure.TraceableConcept","jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile","isTransient").alias("static field","static field declaration").create();
case 228:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("classifier","staticFieldDeclaration").alias(".<static field>","reference to static field declaration").staticScope(StaticScope.NONE).create();
case 229:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.IStatementListContainer","jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"},new boolean[]{false}).alias("static {","").create();
case 230:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticKind").interface_().create();
case 231:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("classConcept","staticMethodDeclaration").alias(".<static method>","static method invocation").staticScope(StaticScope.NONE).create();
case 232:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember","jetbrains.mps.baseLanguage.structure.StaticKind","jetbrains.mps.lang.core.structure.InterfacePart").alias("static method","").create();
case 233:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").abstract_().staticScope(StaticScope.NONE).create();
case 234:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("\"","string literal").staticScope(StaticScope.NONE).create();
case 235:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringToken").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").abstract_().create();
case 236:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("string","").staticScope(StaticScope.NONE).create();
case 237:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StubStatementList").super_("jetbrains.mps.baseLanguage.structure.StatementList").parents("jetbrains.mps.baseLanguage.structure.StatementList","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
case 238:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SubstringExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"operand","startIndex","endIndex"},new boolean[]{false,false,false}).alias("[","substing").staticScope(StaticScope.NONE).create();
case 239:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("super","super constructor invocation").staticScope(StaticScope.NONE).create();
case 240:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorKind").interface_().create();
case 241:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("instanceMethodDeclaration").alias("super","super method invocation").staticScope(StaticScope.NONE).create();
case 242:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodKind").interface_().create();
case 243:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression","body"},new boolean[]{false,false}).alias("case","").create();
case 244:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"expression","case","defaultBlock","switchLabel"},new boolean[]{false,true,false,false}).alias("switch","").staticScope(StaticScope.NONE).create();
case 245:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SynchronizedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression","block"},new boolean[]{false,false}).alias("synchronized","").staticScope(StaticScope.NONE).create();
case 246:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"condition","ifTrue","ifFalse"},new boolean[]{false,false,false}).alias("(expr) ? (expr) : expr","ternary operator").staticScope(StaticScope.NONE).create();
case 247:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TextCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").properties("text").staticScope(StaticScope.NONE).create();
case 248:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("this","this constructor invocation").staticScope(StaticScope.NONE).create();
case 249:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorKind").interface_().create();
case 250:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IThisExpression").references("classConcept").alias("this","").staticScope(StaticScope.NONE).create();
case 251:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThrowStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"throwable"},new boolean[]{false}).alias("throw","").staticScope(StaticScope.NONE).create();
case 252:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Tokens").interface_().properties("tokens").create();
case 253:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TrimOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").properties("trimKind").alias("trim","trim white spaces, line breaks, tabs, etc.").staticScope(StaticScope.NONE).create();
case 254:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryCatchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body","catchClause"},new boolean[]{false,true}).alias("try {...} catch","").staticScope(StaticScope.NONE).create();
case 255:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IContainsStatementList","jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body","finallyBody","catchClause"},new boolean[]{false,false,true}).alias("try {...} finally","").staticScope(StaticScope.NONE).create();
case 256:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Type").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IType","jetbrains.mps.lang.core.structure.InterfacePart").abstract_().alias("","a type").staticScope(StaticScope.NONE).create();
case 257:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeAnnotable").interface_().create();
case 258:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeDerivable").interface_().create();
case 259:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.IResolveInfo").properties("extends").children(new String[]{"bound","auxBounds"},new boolean[]{false,true}).create();
case 260:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableReference").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").references("typeVariableDeclaration").alias("","reference to type variable").staticScope(StaticScope.NONE).create();
case 261:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnaryMinus").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("-","unary minus").staticScope(StaticScope.NONE).create();
case 262:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UndefinedType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("undefined","undefined type").staticScope(StaticScope.NONE).create();
case 263:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownConsCall").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isSuper").staticScope(StaticScope.NONE).create();
case 264:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownDotCall").super_("jetbrains.mps.baseLanguage.structure.UnknownNameRef").parents("jetbrains.mps.baseLanguage.structure.UnknownNameRef","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
case 265:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownLocalCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
case 266:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNameRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.Tokens","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
case 267:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNew").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IMethodCall","jetbrains.mps.baseLanguage.structure.IYetUnresolved","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("className").staticScope(StaticScope.NONE).create();
case 268:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("resolveName").staticScope(StaticScope.NONE).create();
case 269:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>>=","").staticScope(StaticScope.NONE).create();
case 270:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UpperBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type","jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"},new boolean[]{false}).alias("? extends","").staticScope(StaticScope.NONE).create();
case 271:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UsingStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"resource","body"},new boolean[]{true,false}).alias("using(...)","").staticScope(StaticScope.NONE).create();
case 272:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ValueParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("value","").staticScope(StaticScope.NONE).create();
case 273:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VarType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("var","").staticScope(StaticScope.NONE).create();
case 274:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableArityType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"componentType"},new boolean[]{false}).staticScope(StaticScope.NONE).create();
case 275:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.baseLanguage.structure.HasAnnotation","jetbrains.mps.baseLanguage.structure.TypeDerivable","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.baseLanguage.structure.IVariableDeclaration","jetbrains.mps.lang.core.structure.IResolveInfo").properties("isFinal").children(new String[]{"initializer"},new boolean[]{false}).create();
case 276:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.TypeAnnotable","jetbrains.mps.baseLanguage.structure.IVariableReference","jetbrains.mps.baseLanguage.structure.ILocalReference").references("variableDeclaration").alias("","reference to variable").staticScope(StaticScope.NONE).create();
case 277:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Visibility").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
case 278:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VoidType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("void","").staticScope(StaticScope.NONE).create();
case 279:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"},new boolean[]{false}).alias("while","").staticScope(StaticScope.NONE).create();
case 280:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WildCardType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("?","wildcard type").staticScope(StaticScope.NONE).create();
case 281:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("^=","").staticScope(StaticScope.NONE).create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
