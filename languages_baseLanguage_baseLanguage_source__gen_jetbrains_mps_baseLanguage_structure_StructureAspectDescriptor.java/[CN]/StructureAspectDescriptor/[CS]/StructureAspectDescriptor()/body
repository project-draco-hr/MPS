{
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractCreator",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractForStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AndExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Annotation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstance",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnonymousClass",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayClassExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCreator",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AssertStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BLBottomType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseStringOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseVariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BlockStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BooleanConstant",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BooleanType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BreakStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ByteType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CastExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CatchClause",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CharConstant",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CharType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassConcept",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassCreator",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Classifier",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierMember",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Closure",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClosureParameter",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClosureParameterReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Closureoid",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentedStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConceptFunction",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ContextClassifierKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ContinueStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultClassCreator",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DimensionExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DivExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DoWhileStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DotExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DoubleType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ElsifClause",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumClass",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumConstantReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumValuesExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EscapeOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Expression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FieldDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatingPointConstant",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ForStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ForeachStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GenericDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GenericNewExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GetAccessor",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GreaterThanExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.HasAnnotation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IAnonymousClass",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IBLDeprecatable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IBinaryLike",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifier",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifierMember",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifierType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IContainsStatementList",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IFinalWrapper",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IGenericType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IHasModifiers",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IInternalType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalVariableElement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMemberContainer",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMethodLike",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IParameter",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ISkipsReturn",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IStatementListContainer",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IThisExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ITryCatchStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ITypeApplicable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IValidIdentifier",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableAssignment",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVisible",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IWillBeClassifier",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IYetUnresolved",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IfStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteRightParen",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceInitializer",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceOfExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Interface",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IsEmptyOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.JavaImport",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.JavaImports",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalPropertyReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalToMethodKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LongLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LongType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LoopLabel",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LoopLabelReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LowerBoundType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MinusExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Modifier",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MulExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NotExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NullLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NullType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Number",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OrExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParameterReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlaceholderMember",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlusExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrimitiveType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrivateVisibility",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Property",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyImplementation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyValueReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ProtectedVisibility",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PublicVisibility",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemarkStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ReturnStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SetAccessor",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftRightExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShortType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SingleLineComment",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Statement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StatementCommentPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StatementList",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticInitializer",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringBooleanOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringLiteral",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringToken",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StubStatementList",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SubstringExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperConstructorKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperMethodCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperMethodKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SwitchCase",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SwitchStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SynchronizedStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TextCommentPart",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisConstructorKind",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThrowStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Tokens",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TrimOperation",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TryCatchStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TryStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Type",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeAnnotable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeDerivable",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeVariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnaryMinus",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UndefinedType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownConsCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownDotCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownLocalCall",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownNameRef",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownNew",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UpperBoundType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UsingStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ValueParameter",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VarType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableArityType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableDeclaration",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableReference",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Visibility",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VoidType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.WhileStatement",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.WildCardType",null);
  myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression",null);
}
