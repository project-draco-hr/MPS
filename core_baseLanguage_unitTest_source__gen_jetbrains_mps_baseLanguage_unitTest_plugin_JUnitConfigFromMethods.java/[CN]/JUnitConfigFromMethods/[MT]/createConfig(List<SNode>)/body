{
  JUnitConfigFromMethods.this.setSourceElement(new MPSPsiElement<List>(parameter));
  List<String> methodNames=ListSequence.fromList(new ArrayList<String>());
  List<String> nodeNames=ListSequence.fromList(new ArrayList<String>());
  for (  SNode method : parameter) {
    ListSequence.fromList(methodNames).addElement(ITestMethod_Behavior.call_getTestName_1216136419751(method));
    if (ListSequence.fromList(nodeNames).contains(INamedConcept_Behavior.call_getFqName_1213877404258(ITestMethod_Behavior.call_getTestCase_1216134500045(method)))) {
      continue;
    }
    ListSequence.fromList(nodeNames).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(ITestMethod_Behavior.call_getTestCase_1216134500045(method)));
  }
  boolean isCompileInMPS=SNodeOperations.getModel(Sequence.fromIterable(parameter).first()).getModelDescriptor().getModule().isCompileInMPS();
{
    JUnit_ConfigurationType configType=ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP),JUnit_ConfigurationType.class);
    DefaultJUnit_Configuration _config=new DefaultJUnit_Configuration(JUnitConfigFromMethods.this.getContext().getProject(),configType.getConfigurationFactories()[0],"NewConfig"){
      @Override public String suggestedName(){
        return "Several Test Methods";
      }
    }
;
    _config.setName(ITestMethod_Behavior.call_getTestName_1216136419751(Sequence.fromIterable(parameter).first()) + ",...");
    _config.getStateObject().type=JUnitRunTypes.METHOD;
    _config.getStateObject().methods=new ClonableList<String>(methodNames);
    _config.getStateObject().nodes=new ClonableList<String>(nodeNames);
    _config.getStateObject().compileInMPS=isCompileInMPS;
    JUnitConfigFromMethods.this.myConfig=_config;
  }
}
