{
  if (!(state instanceof BaseEditorState)) {
    return;
  }
  final BaseEditorState s=(BaseEditorState)state;
  final EditorContext editorContext=getEditorContext();
  final NodeEditorComponent editorComponent=getCurrentEditorComponent();
  if (s.memento == null || editorContext == null || editorComponent == null) {
    return;
  }
  final IdeFocusManager focusManager=myProject.getComponent(IdeFocusManager.class);
  executeInEDT(new PrioritizedTask(TaskType.EDITOR_MEMENTO,myType2TaskMap){
    @Override public void performTask(){
      if (editorComponent.isDisposed()) {
        return;
      }
      editorContext.restoreEditorComponentState(s.memento);
      editorComponent.getFocusTracker().setEffectiveFocusState(s.isEditorFocused);
      if (s.isEditorFocused && focusManager != null) {
        focusManager.requestFocus(editorComponent,true);
      }
    }
  }
);
  if (s.inspectorMemento == null) {
    return;
  }
  final EditorComponent inspectorEditorComponent=editorComponent.getInspector();
  if (inspectorEditorComponent == null) {
    LOG.error("No inspector - memento will not be restored");
    return;
  }
  final EditorContext inspectorEditorContext=inspectorEditorComponent.getEditorContext();
  executeInEDT(new PrioritizedTask(TaskType.INSPECTOR_MEMENTO,myType2TaskMap){
    @Override public void performTask(){
      inspectorEditorContext.restoreEditorComponentState(s.inspectorMemento);
      inspectorEditorComponent.getFocusTracker().setEffectiveFocusState(s.isInspectorFocused);
      if (s.isInspectorFocused && focusManager != null) {
        InspectorTool inspectorTool=myProject.getComponent(InspectorTool.class);
        if (inspectorTool != null && inspectorTool.isAvailable()) {
          inspectorTool.activate();
        }
        focusManager.requestFocus(inspectorEditorComponent,true);
      }
    }
  }
);
}
