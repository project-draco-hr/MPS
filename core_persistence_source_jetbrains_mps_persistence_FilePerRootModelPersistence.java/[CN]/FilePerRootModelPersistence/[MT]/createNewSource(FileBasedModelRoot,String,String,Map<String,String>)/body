{
  options.put(ModelFactory.OPTION_MODELNAME,modelName);
  options.put(ModelFactory.OPTION_MODULEREF,modelRoot.getModule().getModuleReference().toString());
  Collection<String> sourceRoots=new LinkedHashSet<String>(modelRoot.getFiles(FileBasedModelRoot.SOURCE_ROOTS));
  if (sourceRoots.isEmpty()) {
    throw new IOException("empty list of source roots");
  }
  if (sourceRoot == null || !sourceRoots.contains(sourceRoot)) {
    String tmpSR=null;
    for (    String sr : sourceRoots) {
      if (modelRoot instanceof DefaultModelRoot && ((DefaultModelRoot)modelRoot).isLanguageAspectsSourceRoot(sr)) {
        continue;
      }
      if (sourceRoot != null && FileUtil.isSubPath(sr,sourceRoot)) {
        tmpSR=sourceRoot;
        break;
      }
      tmpSR=tmpSR == null ? sr : tmpSR;
    }
    if (tmpSR == null) {
      throw new IOException("no suitable source root found");
    }
    sourceRoot=(sourceRoot != null && sourceRoot.equals(tmpSR)) ? sourceRoot : tmpSR;
  }
  String path=options.containsKey(ModelFactory.OPTION_RELPATH) ? sourceRoot + File.separatorChar + options.get(ModelFactory.OPTION_RELPATH) : sourceRoot;
  IFile folder=FileSystem.getInstance().getFileByPath(path);
  if (folder.getDescendant(FilePerRootDataSource.HEADER_FILE).exists()) {
    throw new IOException("model already exists");
  }
  return new FilePerRootDataSource(folder,modelRoot);
}
