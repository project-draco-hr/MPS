{
  final Wrappers._T<MigrationManager.MigrationState> result=new Wrappers._T<MigrationManager.MigrationState>();
  final Map<SModule,Iterable<Tuples._2<SLanguage,Integer>>> languageVersions=MapSequence.fromMap(new HashMap<SModule,Iterable<Tuples._2<SLanguage,Integer>>>());
  final Wrappers._T<Iterable<? extends SModule>> projectModules=new Wrappers._T<Iterable<? extends SModule>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      projectModules.value=mpsProject.getModules();
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      Sequence.fromIterable(projectModules.value).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
        public void visit(        AbstractModule it){
          MapSequence.fromMap(languageVersions).put(it,MigrationsUtil.getLanguageVersions(it));
        }
      }
);
    }
  }
);
  final Iterable<ScriptApplied> allStepScripts=Sequence.fromIterable(projectModules.value).ofType(AbstractModule.class).translate(new ITranslator2<AbstractModule,ScriptApplied>(){
    public Iterable<ScriptApplied> translate(    final AbstractModule module){
      return Sequence.fromIterable(MapSequence.fromMap(languageVersions).get(module)).where(new IWhereFilter<Tuples._2<SLanguage,Integer>>(){
        public boolean accept(        Tuples._2<SLanguage,Integer> it){
          return MigrationsUtil.isMigrationNeeded(module,it);
        }
      }
).select(new ISelector<Tuples._2<SLanguage,Integer>,MigrationScript>(){
        public MigrationScript select(        Tuples._2<SLanguage,Integer> it){
          return fetchScriptForModule(module,it);
        }
      }
).where(new IWhereFilter<MigrationScript>(){
        public boolean accept(        MigrationScript script){
          return script != null;
        }
      }
).select(new ISelector<MigrationScript,ScriptApplied>(){
        public ScriptApplied select(        MigrationScript script){
          return new ScriptApplied(script,module);
        }
      }
);
    }
  }
).toListSequence();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final ScriptApplied nextScript=calculateNextMigration(allStepScripts);
      if (nextScript == null) {
        result.value=new MigrationManager.Step(){
          public String getDescription(){
            return nextScript.toString();
          }
          public boolean execute(){
            final Wrappers._boolean res=new Wrappers._boolean();
            ModelAccess.instance().runWriteActionInCommand(new Runnable(){
              public void run(){
                res.value=executeScript(nextScript);
              }
            }
);
            return res.value;
          }
        }
;
      }
    }
  }
);
  return result.value;
}
