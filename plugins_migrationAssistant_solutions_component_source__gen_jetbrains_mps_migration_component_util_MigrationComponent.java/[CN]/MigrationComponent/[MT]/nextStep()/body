{
  final Wrappers._T<MigrationManager.MigrationState> result=new Wrappers._T<MigrationManager.MigrationState>(null);
  final Map<SModule,Iterable<MigrationScriptReference>> languageVersions=MapSequence.fromMap(new HashMap<SModule,Iterable<MigrationScriptReference>>());
  final Wrappers._T<Iterable<? extends SModule>> projectModules=new Wrappers._T<Iterable<? extends SModule>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      projectModules.value=mpsProject.getModulesWithGenerators();
    }
  }
);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      Sequence.fromIterable(projectModules.value).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
        public void visit(        AbstractModule it){
          MapSequence.fromMap(languageVersions).put(it,MigrationsUtil.getLanguageVersions(it));
        }
      }
);
    }
  }
);
  final List<ScriptApplied> allStepScripts=ListSequence.fromList(new ArrayList<ScriptApplied>());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      ListSequence.fromList(allStepScripts).addSequence(Sequence.fromIterable(projectModules.value).ofType(AbstractModule.class).translate(new ITranslator2<AbstractModule,ScriptApplied>(){
        public Iterable<ScriptApplied> translate(        final AbstractModule module){
          return Sequence.fromIterable(MapSequence.fromMap(languageVersions).get(module)).where(new IWhereFilter<MigrationScriptReference>(){
            public boolean accept(            MigrationScriptReference it){
              return MigrationsUtil.isMigrationNeeded(it.getLanguage(),it.getFromVersion(),module);
            }
          }
).select(new ISelector<MigrationScriptReference,MigrationScript>(){
            public MigrationScript select(            MigrationScriptReference it){
              return fetchScript(it);
            }
          }
).where(new IWhereFilter<MigrationScript>(){
            public boolean accept(            MigrationScript script){
              return script != null;
            }
          }
).select(new ISelector<MigrationScript,ScriptApplied>(){
            public ScriptApplied select(            MigrationScript script){
              return new ScriptApplied(script,module);
            }
          }
);
        }
      }
));
    }
  }
);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final ScriptApplied nextScript=ListSequence.fromList(allStepScripts).findFirst(new IWhereFilter<ScriptApplied>(){
        public boolean accept(        ScriptApplied it){
          return isAvailable(it);
        }
      }
);
      if (nextScript != null) {
        result.value=new MigrationManager.Step(){
          public String getDescription(){
            return nextScript.toString();
          }
          public boolean execute(){
            final Wrappers._boolean res=new Wrappers._boolean();
            ModelAccess.instance().runWriteActionInCommand(new Runnable(){
              public void run(){
                res.value=executeScript(nextScript);
              }
            }
);
            return res.value;
          }
        }
;
      }
 else {
        result.value=new MigrationManager.Finished(){
        }
;
      }
    }
  }
);
  return result.value;
}
