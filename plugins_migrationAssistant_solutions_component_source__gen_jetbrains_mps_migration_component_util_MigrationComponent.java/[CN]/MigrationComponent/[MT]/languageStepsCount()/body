{
  final Wrappers._int result=new Wrappers._int();
  ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<Integer>(){
    public Integer invoke(){
      Iterable<? extends SModule> projectModules=mpsProject.getModulesWithGenerators();
      Iterable<Integer> scriptsByModule=Sequence.fromIterable(projectModules).ofType(AbstractModule.class).select(new ISelector<AbstractModule,Integer>(){
        public Integer select(        AbstractModule module){
          int scripts=0;
          for (          SLanguage lang : SetSequence.fromSet(((AbstractModule)module).getAllUsedLanguages())) {
            int currentLangVersion=lang.getLanguageVersion();
            int ver=((AbstractModule)module).getUsedLanguageVersion(lang);
            ver=Math.max(ver,0);
            currentLangVersion=Math.max(currentLangVersion,0);
            if (ver < currentLangVersion) {
              scripts+=currentLangVersion - ver;
            }
          }
          return scripts;
        }
      }
);
      return result.value=Sequence.fromIterable(scriptsByModule).foldLeft(0,new ILeftCombinator<Integer,Integer>(){
        public Integer combine(        Integer s,        Integer it){
          return s + it;
        }
      }
);
    }
  }
));
  return result.value;
}
