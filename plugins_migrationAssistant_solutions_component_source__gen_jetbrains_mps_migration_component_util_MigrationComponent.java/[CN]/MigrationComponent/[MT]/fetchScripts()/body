{
  Iterable<? extends SModule> projectModules=mpsProject.getModules();
  return Sequence.fromIterable(projectModules).ofType(AbstractModule.class).translate(new ITranslator2<AbstractModule,ScriptApplied>(){
    public Iterable<ScriptApplied> translate(    final AbstractModule module){
      return Sequence.fromIterable(MigrationsUtil.getLanguageVersions(module)).where(new IWhereFilter<Tuples._3<SModule,Integer,Integer>>(){
        public boolean accept(        Tuples._3<SModule,Integer,Integer> it){
          return MigrationsUtil.isMigrationNeeded(module,it);
        }
      }
).select(new ISelector<Tuples._3<SModule,Integer,Integer>,MigrationScript>(){
        public MigrationScript select(        Tuples._3<SModule,Integer,Integer> it){
          return fetchScriptsForModule(module,it);
        }
      }
).where(new IWhereFilter<MigrationScript>(){
        public boolean accept(        MigrationScript script){
          return script != null;
        }
      }
).select(new ISelector<MigrationScript,ScriptApplied>(){
        public ScriptApplied select(        MigrationScript script){
          return new ScriptApplied(script,module);
        }
      }
);
    }
  }
);
}
