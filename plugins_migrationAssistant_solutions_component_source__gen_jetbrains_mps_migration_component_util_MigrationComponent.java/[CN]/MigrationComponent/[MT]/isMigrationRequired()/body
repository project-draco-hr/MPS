{
  if (RuntimeFlags.isTestMode()) {
    return false;
  }
  final Wrappers._boolean result=new Wrappers._boolean(false);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      List<ProjectMigration> pMig=ProjectMigrationsRegistry.getInstance().getMigrations();
      Iterable<? extends SModule> modules=mpsProject.getModules();
      Sequence.fromIterable(modules).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
        public void visit(        AbstractModule it){
          it.validateLanguageVersions();
        }
      }
);
      boolean projectMig=ListSequence.fromList(pMig).any(new IWhereFilter<ProjectMigration>(){
        public boolean accept(        ProjectMigration it){
          return it.shouldBeExecuted(mpsProject);
        }
      }
);
      boolean languageMig=Sequence.fromIterable(modules).ofType(AbstractModule.class).any(new IWhereFilter<AbstractModule>(){
        public boolean accept(        final AbstractModule module){
          return Sequence.fromIterable(MigrationsUtil.getLanguageVersions(module)).where(new IWhereFilter<MigrationScriptReference>(){
            public boolean accept(            MigrationScriptReference item){
              return MigrationsUtil.isMigrationNeeded(module,item);
            }
          }
).isNotEmpty();
        }
      }
);
      result.value=projectMig || languageMig;
    }
  }
);
  return result.value;
}
