{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return MPSLayout_Behavior.call_getAllMacroNames_1220980057360(SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.MPSLayout",true,true));
        }
      }
;
      Iterable<String> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode macro=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.MacroReference",null);
              SPropertyOperations.set(macro,"name",(item));
              return macro;
            }
          }
);
        }
      }
    }
  }
  return result;
}
