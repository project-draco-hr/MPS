{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode compositePathComponent=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.CompositePathComponent");
          String base=SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(compositePathComponent),"jetbrains.mps.build.packaging.structure.Path"),"macro",true),"path");
          if (base == null) {
            base="";
          }
          for (          SNode path : ListSequence.fromList(SLinkOperations.getTargets(compositePathComponent,"pathComponent",true))) {
            if (path == _context.getCurrentTargetNode()) {
              break;
            }
            base+="/" + SPropertyOperations.getString(path,"path");
          }
          File baseDir=new File(base);
          File[] suggestFiles=baseDir.listFiles();
          if (suggestFiles == null) {
            suggestFiles=File.listRoots();
            if (suggestFiles.length == 1 && suggestFiles[0].getAbsolutePath().equals("/")) {
              suggestFiles=suggestFiles[0].listFiles();
            }
          }
          SNode abstractProjectComponent=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.AbstractProjectComponent",true,false);
          boolean isFile=(abstractProjectComponent == null ? true : SConceptPropertyOperations.getBoolean(abstractProjectComponent,"acceptFiles"));
          List<String> suggestStrings=ListSequence.fromList(new ArrayList<String>());
          for (          File f : suggestFiles) {
            if (f.exists() && (isFile || f.isDirectory())) {
              ListSequence.fromList(suggestStrings).addElement(f.getName());
            }
          }
          return suggestStrings;
        }
      }
;
      Iterable<String> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode pathComponent=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.PathComponent",null);
              SPropertyOperations.set(pathComponent,"path",(item));
              return pathComponent;
            }
          }
);
        }
      }
    }
  }
  return result;
}
