{
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromArray();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.packaging.structure.Module");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return Module_Behavior.getAllAvailableModules_1222444746697();
        }
      }
;
      Iterable<IModule> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final IModule item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Module",null);
              SPropertyOperations.set(newNode,"id",(item).getModuleId().toString());
              SPropertyOperations.set(newNode,"name",Module_Behavior.extractModuleProperName_1235487584035((item)));
              return newNode;
            }
            public String getDescriptionText(            String pattern){
              return "mps module";
            }
          }
);
        }
      }
    }
  }
  return result;
}
