{
  final Wrappers._T<Iterable<IModule>> _modules=new Wrappers._T<Iterable<IModule>>(modules);
  final Wrappers._T<Iterable<SModelDescriptor>> result=new Wrappers._T<Iterable<SModelDescriptor>>(null);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      Project prj : projects) {
        if (isWholeProject(prj)) {
          _modules.value=Sequence.fromIterable(_modules.value).concat(ListSequence.fromList(prj.getModules()));
        }
 else         if (!(((FileMPSProject)prj).getDescriptor().getTestConfiturations().isEmpty())) {
          for (          BaseTestConfiguration tconf : ((FileMPSProject)prj).getDescriptor().getTestConfiturations()) {
            try {
              result.value=Sequence.fromIterable(result.value).concat(ListSequence.fromList(tconf.getGenParams(prj,true).getModelDescriptors()));
            }
 catch (            IllegalGeneratorConfigurationException e) {
              log("Error while reading configuration of project " + prj.getName(),e);
            }
          }
        }
 else {
          warning("No test configurations for project " + prj.getName());
        }
      }
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(_modules.value).translate(new ITranslator2<IModule,SModelDescriptor>(){
        public Iterable<SModelDescriptor> translate(        IModule m){
          return m.getOwnModelDescriptors();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(_modules.value).where(new IWhereFilter<IModule>(){
        public boolean accept(        IModule it){
          return it instanceof Language;
        }
      }
).translate(new ITranslator2<IModule,IModule>(){
        public Iterable<IModule> translate(        IModule it){
          return Collections.<IModule>unmodifiableCollection(((Language)it).getGenerators());
        }
      }
).translate(new ITranslator2<IModule,SModelDescriptor>(){
        public Iterable<SModelDescriptor> translate(        IModule gen){
          return gen.getOwnModelDescriptors();
        }
      }
));
      result.value=Sequence.fromIterable(result.value).concat(Sequence.fromIterable(models));
    }
  }
);
  return new ModelsToResources(context,Sequence.fromIterable(result.value).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor smd){
      return smd.isGeneratable();
    }
  }
)).resources(false);
}
