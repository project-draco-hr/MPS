{
  if (term == null) {
    return;
  }
  List<Pair<SubtypingRule_Runtime,IsApplicableStatus>> subtypingRule_runtimes=myTypeChecker.getRulesManager().getSubtypingRules(term,isWeak);
  if (subtypingRule_runtimes != null) {
    for (    final Pair<SubtypingRule_Runtime,IsApplicableStatus> subtypingRule : subtypingRule_runtimes) {
      final TypeCheckingContext tcContext=equationManager == null ? null : equationManager.getTypeCheckingContext();
      List<SNode> supertypes=ModelChange.freezeAndCompute(term,new Computable<List<SNode>>(){
        public List<SNode> compute(){
          return UndoHelper.getInstance().runNonUndoableAction(new Computable<List<SNode>>(){
            @Override public List<SNode> compute(){
              return subtypingRule.o1.getSubOrSuperTypes(term,tcContext,subtypingRule.o2);
            }
          }
);
        }
      }
);
      result.addAll(supertypes);
    }
  }
}
