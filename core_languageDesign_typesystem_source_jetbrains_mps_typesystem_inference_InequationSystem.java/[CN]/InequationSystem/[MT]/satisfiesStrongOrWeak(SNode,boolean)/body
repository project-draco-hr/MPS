{
  NodeWrapper wrapperOfMyNode=NodeWrapper.fromNode(myHoleType,myEquationManager);
  SubtypingManager subtypingManager=myEquationManager.getTypeCheckingContext().getSubtypingManager();
  Map<SNode,Set<SNode>> subtypesToSupertypesMap=isStrong ? mySubtypesToSupertypesMapStrong : mySubtypesToSupertypesMap;
  Map<SNode,Set<SNode>> supertypesToSubtypesMap=isStrong ? mySupertypesToSubtypesMapStrong : mySupertypesToSubtypesMap;
  for (  SNode subtype : subtypesToSupertypesMap.keySet()) {
    if (wrapperOfMyNode.equals(NodeWrapper.fromNode(subtype,myEquationManager))) {
      for (      SNode supertype : subtypesToSupertypesMap.get(subtype)) {
        if (wrapperOfMyNode.equals(NodeWrapper.fromNode(supertype,myEquationManager))) {
          continue;
        }
        if (!subtypingManager.isSubtype(type,supertype)) {
          return false;
        }
      }
    }
  }
  for (  SNode supertype : supertypesToSubtypesMap.keySet()) {
    if (wrapperOfMyNode.equals(NodeWrapper.fromNode(supertype,myEquationManager))) {
      for (      SNode subtype : supertypesToSubtypesMap.get(supertype)) {
        if (wrapperOfMyNode.equals(NodeWrapper.fromNode(subtype,myEquationManager))) {
          continue;
        }
        if (!subtypingManager.isSubtype(subtype,type)) {
          return false;
        }
      }
    }
  }
  return true;
}
