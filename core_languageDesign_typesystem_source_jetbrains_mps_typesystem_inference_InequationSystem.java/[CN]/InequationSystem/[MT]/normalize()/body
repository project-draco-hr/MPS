{
  SModel runtimeTypesModel=myEquationManager.getTypeCheckingContext().getRuntimeTypesModel();
{
    HashSet<IWrapper> wrappers=new HashSet<IWrapper>(myEquals);
    myEquals.clear();
    for (    IWrapper wrapper : wrappers) {
      myEquals.add(myEquationManager.expandWrapper(null,wrapper,runtimeTypesModel));
    }
  }
{
    HashSet<IWrapper> wrappers=new HashSet<IWrapper>(mySubtypes);
    mySubtypes.clear();
    for (    IWrapper wrapper : wrappers) {
      mySubtypes.add(myEquationManager.expandWrapper(null,wrapper,runtimeTypesModel));
    }
  }
{
    HashSet<IWrapper> wrappers=new HashSet<IWrapper>(mySupertypes);
    mySupertypes.clear();
    for (    IWrapper wrapper : wrappers) {
      mySupertypes.add(myEquationManager.expandWrapper(null,wrapper,runtimeTypesModel));
    }
  }
{
    HashSet<IWrapper> wrappers=new HashSet<IWrapper>(myStrongSubtypes);
    myStrongSubtypes.clear();
    for (    IWrapper wrapper : wrappers) {
      myStrongSubtypes.add(myEquationManager.expandWrapper(null,wrapper,runtimeTypesModel));
    }
  }
{
    HashSet<IWrapper> wrappers=new HashSet<IWrapper>(myStrongSupertypes);
    myStrongSupertypes.clear();
    for (    IWrapper wrapper : wrappers) {
      myStrongSupertypes.add(myEquationManager.expandWrapper(null,wrapper,runtimeTypesModel));
    }
  }
}
