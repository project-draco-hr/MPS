{
  final TemplateExecutionEnvironment environment=context.getEnvironment();
  final SNode tnode1=environment.createOutputNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
  try {
    environment.nodeCopied(context,tnode1,"tpl/r:00000000-0000-4000-0000-011c89590606/6509983489805125463");
{
      final SNode tnode2=environment.createOutputNode("jetbrains.mps.baseLanguage.structure.PlusExpression");
      try {
        environment.nodeCopied(context,tnode2,"tpl/r:00000000-0000-4000-0000-011c89590606/6509983489805125466");
{
          final SNode tnode3=environment.createOutputNode("jetbrains.mps.baseLanguage.structure.IntegerConstant");
          try {
            environment.nodeCopied(context,tnode3,"tpl/r:00000000-0000-4000-0000-011c89590606/6509983489805125465");
            SNodeAccessUtil.setProperty(tnode3,"value","12");
          }
  finally {
          }
          if (tnode3 != null) {
            tnode2.addChild("leftExpression",tnode3);
          }
        }
{
          Collection<SNode> tlist4=null;
          tlist4=new Templateprocess42(((SNode)context.getPatternVariable("patternVar_ref"))).apply(environment,context);
          for (          SNode child5 : TemplateUtil.asNotNull(tlist4)) {
            tnode2.addChild("rightExpression",child5);
          }
        }
      }
  finally {
      }
      if (tnode2 != null) {
        tnode1.addChild("expression",tnode2);
      }
    }
  }
  finally {
  }
  return TemplateUtil.singletonList(tnode1);
}
