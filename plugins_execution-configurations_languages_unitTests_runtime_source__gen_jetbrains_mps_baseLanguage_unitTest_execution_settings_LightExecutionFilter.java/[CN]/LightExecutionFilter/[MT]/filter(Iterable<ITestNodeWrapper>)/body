{
  final List<ITestNodeWrapper> seq=ListSequence.fromList(new LinkedList<ITestNodeWrapper>());
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      ListSequence.fromList(seq).addSequence(Sequence.fromIterable(ts).where(new IWhereFilter<ITestNodeWrapper>(){
        public boolean accept(        ITestNodeWrapper it){
          SNode testNode=it.getNode();
          SNode rootNode=SNodeOperations.getContainingRoot(testNode);
          if (!(SNodeOperations.isInstanceOf(testNode,"jetbrains.mps.baseLanguage.unitTest.structure.ITestable"))) {
            return false;
          }
          if (BehaviorReflection.invokeNonVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.TestInfo"))),"call_reOpenProject_1031873601093419509",new Object[]{SNodeOperations.getModel(rootNode)})) {
            return false;
          }
          return BehaviorReflection.invokeNonVirtual(Boolean.TYPE,SNodeOperations.cast(testNode,"jetbrains.mps.baseLanguage.unitTest.structure.ITestable"),"jetbrains.mps.baseLanguage.unitTest.structure.ITestable","call_canRunInProcess_6436735966448788391",new Object[]{});
        }
      }
));
    }
  }
);
  return seq;
}
