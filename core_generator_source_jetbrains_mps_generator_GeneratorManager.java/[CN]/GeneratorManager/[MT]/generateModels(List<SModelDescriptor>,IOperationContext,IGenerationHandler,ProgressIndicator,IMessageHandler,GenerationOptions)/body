{
  final boolean[] result=new boolean[1];
  final TransientModelsComponent transientModelsComponent=myProject.getComponent(TransientModelsComponent.class);
  transientModelsComponent.startGeneration(options.getNumberOfModelsToKeep());
  options.getGenerationTracer().startTracing();
  ModelAccess.instance().requireWrite(new Runnable(){
    public void run(){
      fireBeforeGeneration(inputModels,options,invocationContext);
      for (      SModelDescriptor d : inputModels) {
        transientModelsComponent.createModule(d.getModule());
      }
    }
  }
);
  GeneratorLoggerAdapter logger=new GeneratorLoggerAdapter(messages,options.isShowInfo(),options.isShowWarnings(),options.isKeepModelsWithWarnings());
  final GenerationController gc=new GenerationController(inputModels,transientModelsComponent,options,generationHandler,logger,invocationContext,progress);
  ModelAccess.instance().requireRead(new Runnable(){
    @Override public void run(){
      result[0]=UndoHelper.getInstance().runNonUndoableAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          final boolean success=gc.generate();
          return success;
        }
      }
);
    }
  }
);
  ModelAccess.instance().requireWrite(new Runnable(){
    @Override public void run(){
      CleanupManager.getInstance().cleanup();
    }
  }
);
  if (result[0]) {
    try {
      ModelAccess.instance().requireWrite(new Runnable(){
        public void run(){
          fireModelsGenerated(Collections.unmodifiableList(inputModels),result[0]);
        }
      }
);
    }
 catch (    RuntimeException e) {
      LOG.error(e);
    }
  }
  options.getGenerationTracer().finishTracing();
  ModelAccess.instance().requireWrite(new Runnable(){
    public void run(){
      fireAfterGeneration(inputModels,options,invocationContext);
      transientModelsComponent.publishAll();
      CleanupManager.getInstance().cleanup();
    }
  }
);
  generationHandler.generationCompleted();
  return result[0];
}
