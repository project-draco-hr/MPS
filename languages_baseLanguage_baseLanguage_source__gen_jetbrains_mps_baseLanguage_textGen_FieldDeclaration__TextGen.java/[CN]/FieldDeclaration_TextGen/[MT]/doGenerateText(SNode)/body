{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"))) != null)) {
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"))),this.getSNode());
  }
  BaseLanguageTextGen.annotations(node,this);
  BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node,"visibility",true),this);
  if (SPropertyOperations.getBoolean(node,"isVolatile")) {
    this.append("volatile ");
  }
  if (SPropertyOperations.getBoolean(node,"isTransient")) {
    this.append("transient ");
  }
  BaseLanguageTextGen.variableDeclaration(node,this);
  this.append(";");
  this.appendNewLine();
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
