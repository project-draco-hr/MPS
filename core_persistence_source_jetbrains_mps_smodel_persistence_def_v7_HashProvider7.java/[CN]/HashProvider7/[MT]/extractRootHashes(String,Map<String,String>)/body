{
  XmlFastScanner scanner=new XmlFastScanner(content.toCharArray());
  int depth=0, token, rootStart=-1;
  String rootId=null;
  Map<String,String> shortContent=new HashMap<String,String>();
  boolean insideRoots=false;
  while ((token=scanner.next()) != XmlFastScanner.EOI) {
switch (token) {
case XmlFastScanner.SIMPLE_TAG:
      boolean rootShortPart=insideRoots && ModelPersistence.NODE.equals(scanner.getName());
    boolean rootLongPart=depth == 1 && ModelPersistence.ROOT_CONTENT.equals(scanner.getName());
  if (rootShortPart || rootLongPart) {
    rootId=extractId(scanner.token());
    if (rootId != null) {
      String s=scanner.getText(scanner.getTokenOffset(),scanner.getOffset());
      if (rootShortPart) {
        shortContent.put(rootId,s);
      }
 else {
        addMultiHash(rootHashes,rootId,shortContent.get(rootId),s);
      }
    }
    rootId=null;
  }
break;
case XmlFastScanner.OPEN_TAG:
depth++;
if (depth == 2 && ModelPersistence.ROOTS.equals(scanner.getName())) {
insideRoots=true;
rootHashes.put(GeneratableSModelDescriptor.HEADER,ModelDigestUtil.hashText(scanner.getText(0,scanner.getTokenOffset())));
}
if (insideRoots && ModelPersistence.NODE.equals(scanner.getName())) {
rootStart=scanner.getTokenOffset();
rootId=extractId(scanner.token());
}
if (depth == 2 && ModelPersistence.ROOT_CONTENT.equals(scanner.getName())) {
rootStart=scanner.getTokenOffset();
rootId=extractId(scanner.token());
}
break;
case XmlFastScanner.CLOSE_TAG:
if (depth == 2 && ModelPersistence.ROOTS.equals(scanner.getName())) {
insideRoots=false;
}
if (insideRoots && rootId != null && ModelPersistence.NODE.equals(scanner.getName())) {
String s=scanner.getText(rootStart,scanner.getOffset());
shortContent.put(rootId,s);
rootStart=-1;
rootId=null;
}
if (depth == 2 && rootId != null && ModelPersistence.ROOT_CONTENT.equals(scanner.getName())) {
String s=scanner.getText(rootStart,scanner.getOffset());
addMultiHash(rootHashes,rootId,shortContent.get(rootId),s);
rootStart=-1;
rootId=null;
}
depth--;
break;
}
}
if (depth != 0) {
LOG.error("xml: bad data");
}
}
