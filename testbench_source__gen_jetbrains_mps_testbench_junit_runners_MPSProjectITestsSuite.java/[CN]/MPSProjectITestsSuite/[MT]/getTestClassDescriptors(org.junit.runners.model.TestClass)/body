{
  final Iterable<SModel> modelDescriptors=getModelDescriptors(klass);
  String testClassName=getTestClassName(klass);
  if (testClassName != null) {
    if (Sequence.fromIterable(modelDescriptors).isEmpty()) {
      throw new InitializationError("Unable to locate class: " + testClassName + " - no model descriptors found (model or module was not specified)");
    }
    return Collections.singletonList(MultiTuple.<String,SModule>from(testClassName,Sequence.fromIterable(modelDescriptors).first().getModule()));
  }
  final List<Tuples._2<String,SModule>> testClassDescriptors=ListSequence.fromList(new ArrayList<Tuples._2<String,SModule>>());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SModel model : Sequence.fromIterable(modelDescriptors)) {
        for (        SNode testCase : ListSequence.fromList(SModelOperations.getRoots(((jetbrains.mps.smodel.SModel)((SModelDescriptor)model).getSModel()),"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
          ListSequence.fromList(testClassDescriptors).addElement(MultiTuple.<String,SModule>from(((String)BehaviorManager.getInstance().invoke(Object.class,testCase,"virtual_getClassName_1216136193905",new Class[]{SNode.class})),model.getModule()));
        }
      }
    }
  }
);
  return testClassDescriptors;
}
