{
  editorContext.getNodeEditorComponent().hideMessageToolTip();
  if (keyEvent.isConsumed())   return false;
  AbstractEditorComponent editor=editorContext.getNodeEditorComponent();
  SNodePointer pointer=editor.getRootCell().getSNodePointer();
  boolean notEditable=pointer != null && pointer.getModel() != null && pointer.getModel().isNotEditable();
  notEditable=(editorContext.getNodeEditorComponent().isReadOnly() || notEditable);
  if (notEditable)   return false;
  EditorCell selectedCell=editor.getSelectedCell();
  if (selectedCell != null) {
    if (allowCellToProcessEvent(selectedCell,keyEvent,false)) {
      return true;
    }
  }
  if (selectedCell != null) {
    List<Pair<EditorCellKeyMapAction,EditorCell>> actionsInfo=KeyMapUtil.getKeyMapActionsForEvent(selectedCell,keyEvent,editorContext);
    if (actionsInfo.size() == 1 && !(actionsInfo.get(0).o1.isMenuAlwaysShown())) {
      EditorCellKeyMapAction action=actionsInfo.get(0).o1;
      EditorCell contextCell=actionsInfo.get(0).o2;
      KeyMapUtil.executeKeyMapAction(action,keyEvent,contextCell,editorContext);
      return true;
    }
 else     if (actionsInfo.size() > 1 || (actionsInfo.size() == 1 && actionsInfo.get(0).o1.isMenuAlwaysShown())) {
      EditorUtil.showActionsMenu(actionsInfo,keyEvent,editorContext,selectedCell);
      return true;
    }
  }
  String actionType=editor.getActionType(keyEvent,editorContext);
  boolean dontExecuteRT=false;
  if (selectedCell != null) {
    boolean endEditKeystroke=isEndEditKeystroke(keyEvent);
    boolean strictMatching=endEditKeystroke || EditorCellAction.RIGHT_TRANSFORM.equals(actionType);
    if (keyEvent.getModifiers() == KeyEvent.CTRL_MASK && keyEvent.getKeyCode() == KeyEvent.VK_F1) {
      editorContext.getNodeEditorComponent().showMessageTooltip();
      return true;
    }
    if (!EditorUtil.isValidCell(selectedCell)) {
      if (endEditKeystroke || EditorCellAction.INSERT.equals(actionType) || EditorCellAction.INSERT_BEFORE.equals(actionType)) {
        EditorUtil.validateCell(selectedCell,editorContext,strictMatching);
        return true;
      }
      if (EditorCellAction.RIGHT_TRANSFORM.equals(actionType)) {
        if (EditorUtil.validateCell(selectedCell,editorContext,strictMatching,true) != 0) {
          return true;
        }
      }
      selectedCell=editor.getSelectedCell();
      if (selectedCell == null) {
        return true;
      }
    }
    if (EditorCellAction.RIGHT_TRANSFORM.equals(actionType)) {
      if (selectedCell instanceof EditorCell_Label && selectedCell.isErrorState()) {
        dontExecuteRT=true;
      }
    }
  }
  if (selectedCell != null) {
    if (actionType != null && !actionType.equals(EditorCellAction.DELETE)) {
      if (!(EditorCellAction.RIGHT_TRANSFORM.equals(actionType) && dontExecuteRT)) {
        if (EditorUtil.executeCellAction(selectedCell,actionType,editorContext)) {
          return true;
        }
      }
    }
    if (!keyEvent.isConsumed()) {
      if ((keyEvent.getKeyCode() == KeyEvent.VK_SPACE && keyEvent.isControlDown() && !(keyEvent.isAltDown() || keyEvent.isShiftDown())) || (keyEvent.getKeyCode() == KeyEvent.VK_ENTER && (!keyEvent.isAltDown()) && !(keyEvent.isControlDown() || keyEvent.isShiftDown()))) {
        if (editor.activateNodeSubstituteChooser(selectedCell,keyEvent.getKeyCode() == KeyEvent.VK_ENTER)) {
          LOG.debug("SUBSTITUTE");
          return true;
        }
        LOG.debug("NO SUBSTITUTE");
      }
      if (editor.getNodeRangeSelection().isSelectionKeystroke(keyEvent)) {
        if (editor.getNodeRangeSelection().activate(keyEvent)) {
          return true;
        }
      }
      if (allowCellToProcessEvent(selectedCell,keyEvent,true))       return true;
    }
    if (EditorCellAction.DELETE.equals(actionType)) {
      if (EditorUtil.executeCellAction(selectedCell,actionType,editorContext)) {
        return true;
      }
    }
    if (!keyEvent.isConsumed()) {
      EditorCell deepestSelectedCell=editor.getDeepestSelectedCell();
      if (allowCellToProcessEvent(deepestSelectedCell,keyEvent,true)) {
        editor.changeSelection(deepestSelectedCell);
        return true;
      }
    }
  }
  if (actionType != null) {
    if (editor.executeComponentAction(actionType)) {
      return true;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_UP && keyEvent.isControlDown() && !keyEvent.isAltDown() && !keyEvent.isShiftDown()) {
    keyEvent.consume();
  }
  return false;
}
