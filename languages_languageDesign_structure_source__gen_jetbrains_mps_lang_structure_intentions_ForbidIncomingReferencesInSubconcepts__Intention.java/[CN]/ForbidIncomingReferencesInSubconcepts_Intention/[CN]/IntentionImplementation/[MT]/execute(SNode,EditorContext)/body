{
  Iterable<SModel> seq=Sequence.fromIterable(((Iterable<SModel>)SModelRepository.getInstance().getModelDescriptors())).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel md){
      return SModelStereotype.isUserModel(md);
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel md){
      return LanguageAspect.STRUCTURE.is(md);
    }
  }
).select(new ISelector<SModel,SModel>(){
    public SModel select(    SModel it){
      return it;
    }
  }
);
  for (  SModel model : Sequence.fromIterable(seq)) {
    for (    SNode cd : ListSequence.fromList(SModelOperations.roots(model,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")))) {
      SNode c=cd;
      if (ListSequence.fromList(SConceptOperations.getConceptHierarchy(c)).contains(node)) {
        SPropertyOperations.set(cd,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0x4b014033eedc8a48L,"staticScope"),"none");
      }
    }
  }
}
