{
  CellProviderWithRole provider=new ConceptPropertyCellProvider(node,editorContext);
  provider.setRole("alias");
  provider.setNoTargetText("<no operator>");
  EditorCell editorCell;
  editorCell=provider.createEditorCell(editorContext);
  editorCell.setCellId("conceptProperty_alias");
  BaseLanguageStyle_StyleSheet.getOperator(editorCell).apply(editorCell);
{
    Style style=editorCell.getStyle();
    style.set(StyleAttributes.SELECTABLE,true);
    style.set(StyleAttributes.EDITABLE,true);
  }
  BinaryOperation_Symbol_Actions.setCellActions(editorCell,node,editorContext);
  editorCell.addKeyMap(new CastExpression_KeyMap());
  editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext,provider.getCellContext(),new SubstituteInfoPart[]{new BinaryOperation_Editor.ReplaceWith_BinaryOperation_cellMenu_a0b0(),new BinaryOperation_Editor.BinaryOperation_generic_cellMenu_b0b0()}));
  SNode attributeConcept=provider.getRoleAttribute();
  Class attributeKind=provider.getRoleAttributeClass();
  if (attributeConcept != null) {
    IOperationContext opContext=editorContext.getOperationContext();
    EditorManager manager=EditorManager.getInstanceFromContext(opContext);
    return manager.createRoleAttributeCell(editorContext,attributeConcept,attributeKind,editorCell);
  }
 else   return editorCell;
}
