{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0kc,conceptFqName)) {
case 0:
    return myConceptAbsExpression;
case 1:
  return myConceptAbstractIndex;
case 2:
return myConceptArithmSymbol;
case 3:
return myConceptBigComplexType;
case 4:
return myConceptBigDecimalType;
case 5:
return myConceptBigIntegerType;
case 6:
return myConceptBigMaxExpression;
case 7:
return myConceptBigMinExpression;
case 8:
return myConceptBigProdExpression;
case 9:
return myConceptBigSumExpression;
case 10:
return myConceptComplexLiteral;
case 11:
return myConceptComplexType;
case 12:
return myConceptConjugateOperation;
case 13:
return myConceptCosineExpression;
case 14:
return myConceptDecimalBinaryOperation;
case 15:
return myConceptDecimalDivExpression;
case 16:
return myConceptDecimalMinusExpression;
case 17:
return myConceptDecimalMulExpression;
case 18:
return myConceptDecimalPlusExpression;
case 19:
return myConceptDeterminant;
case 20:
return myConceptDivExpressionFraction;
case 21:
return myConceptExponentExpression;
case 22:
return myConceptExponentialOperation;
case 23:
return myConceptExtrSymbol;
case 24:
return myConceptInIntervalExpression;
case 25:
return myConceptIntervalContainsExpression;
case 26:
return myConceptIntervalLiteral;
case 27:
return myConceptIntervalType;
case 28:
return myConceptLinearSolveOperation;
case 29:
return myConceptLiteralI;
case 30:
return myConceptLogExpression;
case 31:
return myConceptMathContext;
case 32:
return myConceptMathFuncExpression;
case 33:
return myConceptMathPrimitiveType;
case 34:
return myConceptMathSymbol;
case 35:
return myConceptMathSymbolFromToIndex;
case 36:
return myConceptMathSymbolIndex;
case 37:
return myConceptMathSymbolIndexReference;
case 38:
return myConceptMathTypeCast;
case 39:
return myConceptMatrixConstructor;
case 40:
return myConceptMatrixElementAccessExpression;
case 41:
return myConceptMatrixExponentialOperation;
case 42:
return myConceptMatrixIndexWildcard;
case 43:
return myConceptMatrixInitializer;
case 44:
return myConceptMatrixInitializerIndex;
case 45:
return myConceptMatrixInitializerIndexReference;
case 46:
return myConceptMatrixInverseOperation;
case 47:
return myConceptMatrixNorm;
case 48:
return myConceptMatrixOrVectorInitializer;
case 49:
return myConceptMatrixOrVectorType;
case 50:
return myConceptMatrixType;
case 51:
return myConceptMatrixUnit;
case 52:
return myConceptMatrixZero;
case 53:
return myConceptPowExpression;
case 54:
return myConceptSineExpression;
case 55:
return myConceptTangentExpression;
case 56:
return myConceptTransposeOperation;
case 57:
return myConceptVectorInitializer;
case 58:
return myConceptVectorType;
default :
return null;
}
}
