{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0lc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbsExpression;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractIndex;
  }
break;
case 2:
if (true) {
return myConceptArithmSymbol;
}
break;
case 3:
if (true) {
return myConceptBigComplexType;
}
break;
case 4:
if (true) {
return myConceptBigDecimalType;
}
break;
case 5:
if (true) {
return myConceptBigIntegerType;
}
break;
case 6:
if (true) {
return myConceptBigMaxExpression;
}
break;
case 7:
if (true) {
return myConceptBigMinExpression;
}
break;
case 8:
if (true) {
return myConceptBigProdExpression;
}
break;
case 9:
if (true) {
return myConceptBigSumExpression;
}
break;
case 10:
if (true) {
return myConceptComplexLiteral;
}
break;
case 11:
if (true) {
return myConceptComplexType;
}
break;
case 12:
if (true) {
return myConceptConjugateOperation;
}
break;
case 13:
if (true) {
return myConceptCosineExpression;
}
break;
case 14:
if (true) {
return myConceptDecimalBinaryOperation;
}
break;
case 15:
if (true) {
return myConceptDecimalDivExpression;
}
break;
case 16:
if (true) {
return myConceptDecimalMinusExpression;
}
break;
case 17:
if (true) {
return myConceptDecimalMulExpression;
}
break;
case 18:
if (true) {
return myConceptDecimalPlusExpression;
}
break;
case 19:
if (true) {
return myConceptDeterminant;
}
break;
case 20:
if (true) {
return myConceptDivExpressionFraction;
}
break;
case 21:
if (true) {
return myConceptExponentExpression;
}
break;
case 22:
if (true) {
return myConceptExponentialOperation;
}
break;
case 23:
if (true) {
return myConceptExtrSymbol;
}
break;
case 24:
if (true) {
return myConceptInIntervalExpression;
}
break;
case 25:
if (true) {
return myConceptIntervalContainsExpression;
}
break;
case 26:
if (true) {
return myConceptIntervalLiteral;
}
break;
case 27:
if (true) {
return myConceptIntervalType;
}
break;
case 28:
if (true) {
return myConceptLinearSolveOperation;
}
break;
case 29:
if (true) {
return myConceptLiteralI;
}
break;
case 30:
if (true) {
return myConceptLogExpression;
}
break;
case 31:
if (true) {
return myConceptMathContext;
}
break;
case 32:
if (true) {
return myConceptMathFuncExpression;
}
break;
case 33:
if (true) {
return myConceptMathPrimitiveType;
}
break;
case 34:
if (true) {
return myConceptMathSymbol;
}
break;
case 35:
if (true) {
return myConceptMathSymbolFromToIndex;
}
break;
case 36:
if (true) {
return myConceptMathSymbolIndex;
}
break;
case 37:
if (true) {
return myConceptMathSymbolIndexReference;
}
break;
case 38:
if (true) {
return myConceptMathTypeCast;
}
break;
case 39:
if (true) {
return myConceptMatrixConstructor;
}
break;
case 40:
if (true) {
return myConceptMatrixElementAccessExpression;
}
break;
case 41:
if (true) {
return myConceptMatrixExponentialOperation;
}
break;
case 42:
if (true) {
return myConceptMatrixIndexWildcard;
}
break;
case 43:
if (true) {
return myConceptMatrixInitializer;
}
break;
case 44:
if (true) {
return myConceptMatrixInitializerIndex;
}
break;
case 45:
if (true) {
return myConceptMatrixInitializerIndexReference;
}
break;
case 46:
if (true) {
return myConceptMatrixInverseOperation;
}
break;
case 47:
if (true) {
return myConceptMatrixNorm;
}
break;
case 48:
if (true) {
return myConceptMatrixOrVectorInitializer;
}
break;
case 49:
if (true) {
return myConceptMatrixOrVectorType;
}
break;
case 50:
if (true) {
return myConceptMatrixType;
}
break;
case 51:
if (true) {
return myConceptMatrixUnit;
}
break;
case 52:
if (true) {
return myConceptMatrixZero;
}
break;
case 53:
if (true) {
return myConceptPowExpression;
}
break;
case 54:
if (true) {
return myConceptSineExpression;
}
break;
case 55:
if (true) {
return myConceptTangentExpression;
}
break;
case 56:
if (true) {
return myConceptTransposeOperation;
}
break;
case 57:
if (true) {
return myConceptVectorInitializer;
}
break;
case 58:
if (true) {
return myConceptVectorType;
}
break;
default :
}
}
return null;
}
