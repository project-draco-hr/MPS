{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbsExpression:
    return myConceptAbsExpression;
case LanguageConceptSwitch.AbstractIndex:
  return myConceptAbstractIndex;
case LanguageConceptSwitch.ArithmSymbol:
return myConceptArithmSymbol;
case LanguageConceptSwitch.BigComplexType:
return myConceptBigComplexType;
case LanguageConceptSwitch.BigDecimalType:
return myConceptBigDecimalType;
case LanguageConceptSwitch.BigIntegerType:
return myConceptBigIntegerType;
case LanguageConceptSwitch.BigMaxExpression:
return myConceptBigMaxExpression;
case LanguageConceptSwitch.BigMinExpression:
return myConceptBigMinExpression;
case LanguageConceptSwitch.BigProdExpression:
return myConceptBigProdExpression;
case LanguageConceptSwitch.BigSumExpression:
return myConceptBigSumExpression;
case LanguageConceptSwitch.ComplexLiteral:
return myConceptComplexLiteral;
case LanguageConceptSwitch.ComplexType:
return myConceptComplexType;
case LanguageConceptSwitch.ConjugateOperation:
return myConceptConjugateOperation;
case LanguageConceptSwitch.CosineExpression:
return myConceptCosineExpression;
case LanguageConceptSwitch.DecimalBinaryOperation:
return myConceptDecimalBinaryOperation;
case LanguageConceptSwitch.DecimalDivExpression:
return myConceptDecimalDivExpression;
case LanguageConceptSwitch.DecimalMinusExpression:
return myConceptDecimalMinusExpression;
case LanguageConceptSwitch.DecimalMulExpression:
return myConceptDecimalMulExpression;
case LanguageConceptSwitch.DecimalPlusExpression:
return myConceptDecimalPlusExpression;
case LanguageConceptSwitch.Determinant:
return myConceptDeterminant;
case LanguageConceptSwitch.DivExpressionFraction:
return myConceptDivExpressionFraction;
case LanguageConceptSwitch.ExponentExpression:
return myConceptExponentExpression;
case LanguageConceptSwitch.ExponentialOperation:
return myConceptExponentialOperation;
case LanguageConceptSwitch.ExtrSymbol:
return myConceptExtrSymbol;
case LanguageConceptSwitch.InIntervalExpression:
return myConceptInIntervalExpression;
case LanguageConceptSwitch.IntervalContainsExpression:
return myConceptIntervalContainsExpression;
case LanguageConceptSwitch.IntervalLiteral:
return myConceptIntervalLiteral;
case LanguageConceptSwitch.IntervalType:
return myConceptIntervalType;
case LanguageConceptSwitch.LinearSolveOperation:
return myConceptLinearSolveOperation;
case LanguageConceptSwitch.LiteralI:
return myConceptLiteralI;
case LanguageConceptSwitch.LogExpression:
return myConceptLogExpression;
case LanguageConceptSwitch.MathContext:
return myConceptMathContext;
case LanguageConceptSwitch.MathFuncExpression:
return myConceptMathFuncExpression;
case LanguageConceptSwitch.MathPrimitiveType:
return myConceptMathPrimitiveType;
case LanguageConceptSwitch.MathSymbol:
return myConceptMathSymbol;
case LanguageConceptSwitch.MathSymbolFromToIndex:
return myConceptMathSymbolFromToIndex;
case LanguageConceptSwitch.MathSymbolIndex:
return myConceptMathSymbolIndex;
case LanguageConceptSwitch.MathSymbolIndexReference:
return myConceptMathSymbolIndexReference;
case LanguageConceptSwitch.MathTypeCast:
return myConceptMathTypeCast;
case LanguageConceptSwitch.MatrixConstructor:
return myConceptMatrixConstructor;
case LanguageConceptSwitch.MatrixElementAccessExpression:
return myConceptMatrixElementAccessExpression;
case LanguageConceptSwitch.MatrixExponentialOperation:
return myConceptMatrixExponentialOperation;
case LanguageConceptSwitch.MatrixIndexWildcard:
return myConceptMatrixIndexWildcard;
case LanguageConceptSwitch.MatrixInitializer:
return myConceptMatrixInitializer;
case LanguageConceptSwitch.MatrixInitializerIndex:
return myConceptMatrixInitializerIndex;
case LanguageConceptSwitch.MatrixInitializerIndexReference:
return myConceptMatrixInitializerIndexReference;
case LanguageConceptSwitch.MatrixInverseOperation:
return myConceptMatrixInverseOperation;
case LanguageConceptSwitch.MatrixNorm:
return myConceptMatrixNorm;
case LanguageConceptSwitch.MatrixOrVectorInitializer:
return myConceptMatrixOrVectorInitializer;
case LanguageConceptSwitch.MatrixOrVectorType:
return myConceptMatrixOrVectorType;
case LanguageConceptSwitch.MatrixType:
return myConceptMatrixType;
case LanguageConceptSwitch.MatrixUnit:
return myConceptMatrixUnit;
case LanguageConceptSwitch.MatrixZero:
return myConceptMatrixZero;
case LanguageConceptSwitch.PowExpression:
return myConceptPowExpression;
case LanguageConceptSwitch.SineExpression:
return myConceptSineExpression;
case LanguageConceptSwitch.TangentExpression:
return myConceptTangentExpression;
case LanguageConceptSwitch.TransposeOperation:
return myConceptTransposeOperation;
case LanguageConceptSwitch.VectorInitializer:
return myConceptVectorInitializer;
case LanguageConceptSwitch.VectorType:
return myConceptVectorType;
default :
return null;
}
}
