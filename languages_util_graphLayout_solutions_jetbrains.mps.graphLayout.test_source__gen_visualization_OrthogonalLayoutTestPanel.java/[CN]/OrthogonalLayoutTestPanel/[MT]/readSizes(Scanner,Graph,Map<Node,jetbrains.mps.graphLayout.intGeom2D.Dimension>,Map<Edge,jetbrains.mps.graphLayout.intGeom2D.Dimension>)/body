{
  int numNodeSizes=scanner.nextInt();
  for (int i=0; i < numNodeSizes; i++) {
    Node node=g.getNode(scanner.nextInt());
    MapSequence.<Node,jetbrains.mps.graphLayout.intGeom2D.Dimension>fromMap(nodeSizes).put(node,new jetbrains.mps.graphLayout.intGeom2D.Dimension(scanner.nextInt(),scanner.nextInt()));
  }
  int edgeLabelSizes=scanner.nextInt();
  for (int i=0; i < edgeLabelSizes; i++) {
    Node source=g.getNode(scanner.nextInt());
    final Node target=g.getNode(scanner.nextInt());
    Edge edge=ListSequence.<Edge>fromList(source.getOutEdges()).where(new IWhereFilter<Edge>(){
      public boolean accept(      Edge it){
        return it.getTarget() == target;
      }
    }
).first();
    if (edge == null) {
      throw new IllegalArgumentException("there is no edge " + source + " -> "+ target);
    }
    MapSequence.<Edge,jetbrains.mps.graphLayout.intGeom2D.Dimension>fromMap(edgeSizes).put(edge,new jetbrains.mps.graphLayout.intGeom2D.Dimension(scanner.nextInt(),scanner.nextInt()));
  }
}
