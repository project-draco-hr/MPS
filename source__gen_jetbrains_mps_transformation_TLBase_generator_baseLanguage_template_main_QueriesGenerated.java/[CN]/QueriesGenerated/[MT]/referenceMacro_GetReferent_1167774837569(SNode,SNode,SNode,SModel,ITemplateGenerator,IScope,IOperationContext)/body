{
  String alias=SConceptPropertyOperations.getString(node,"alias");
  if (alias == null) {
    generator.showErrorMessage(node,templateNode,"concept function parm has no <alias> - can't map it to method parameter");
    return null;
  }
  INodeBuilder builder=QueriesUtil.findParent_BaseMethodDeclaration_Builder(generator.getCurrentBuilder());
  if (builder != null) {
    SNode methodDeclaration=builder.getTargetNode();
{
      ICursor<SNode> _zCursor=CursorFactory.createCursor(SLinkOperations.getTargets(methodDeclaration,"parameter",true));
      try {
        while (_zCursor.moveToNext()) {
          SNode parm=_zCursor.getCurrent();
          if (alias.equals(SPropertyOperations.getString(parm,"name"))) {
            return parm;
          }
        }
      }
  finally {
        _zCursor.release();
      }
    }
  }
  generator.showErrorMessage(node,templateNode,"couldn't find method parameter for concept function parm '" + alias + "'");
  return null;
}
