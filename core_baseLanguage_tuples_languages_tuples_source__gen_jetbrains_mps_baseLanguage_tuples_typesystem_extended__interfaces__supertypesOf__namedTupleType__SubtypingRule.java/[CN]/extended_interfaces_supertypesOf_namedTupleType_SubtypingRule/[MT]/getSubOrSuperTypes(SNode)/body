{
  List<SNode> result=ListOperations.<SNode>createList();
  for (  SNode ct : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(namedTupleType,"classifier",false),"extends",true))) {
    List<SNode> paramTypes=ListOperations.<SNode>createList();
    for (    SNode pt : ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true))) {
      if (SNodeOperations.isInstanceOf(pt,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        ListSequence.fromList(paramTypes).addElement(ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(namedTupleType,"parameter",true)).toListSequence()).getElement(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.cast(pt,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false))));
      }
 else {
        ListSequence.fromList(paramTypes).addElement(pt);
      }
    }
    ListSequence.fromList(result).addElement(new _Quotations.QuotationClass_6().createNode(paramTypes,SLinkOperations.getTarget(ct,"classifier",false)));
  }
  return result;
}
