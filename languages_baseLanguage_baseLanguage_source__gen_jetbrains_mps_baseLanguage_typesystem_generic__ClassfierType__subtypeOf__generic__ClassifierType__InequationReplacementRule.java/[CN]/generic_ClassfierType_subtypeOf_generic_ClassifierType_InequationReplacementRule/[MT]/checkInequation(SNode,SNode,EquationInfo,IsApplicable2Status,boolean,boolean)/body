{
  boolean result_14532009=true;
{
    GeneratedMatchingPattern pattern_a0=new generic_ClassfierType_subtypeOf_generic_ClassifierType_InequationReplacementRule.Pattern_nn7be_a0a0a0a1a2(SLinkOperations.getTarget(supertype,"classifier",false));
    SNode coercedNode_a0=TypeChecker.getInstance().getRuntimeSupport().coerce_(subtype,pattern_a0);
    if (coercedNode_a0 != null) {
      Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
      IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(coercedNode_a0,subs);
      IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(supertype,subs);
      SNode ctLeftExp=SNodeOperations.cast(IGenericType_Behavior.call_expandGenerics_4107091686347199582(coercedNode_a0,subs),"jetbrains.mps.baseLanguage.structure.ClassifierType");
      SNode ctRightExp=SNodeOperations.cast(IGenericType_Behavior.call_expandGenerics_4107091686347199582(supertype,subs),"jetbrains.mps.baseLanguage.structure.ClassifierType");
      Iterator<SNode> leftParamIt=ListSequence.fromList(SLinkOperations.getTargets(ctLeftExp,"parameter",true)).iterator();
      Iterator<SNode> rightParamIt=ListSequence.fromList(SLinkOperations.getTargets(ctRightExp,"parameter",true)).iterator();
      while (leftParamIt.hasNext() && rightParamIt.hasNext()) {
        SNode leftParam=leftParamIt.next();
        SNode rightParam=rightParamIt.next();
        if (SNodeOperations.isInstanceOf(rightParam,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)leftParam,(SNode)SLinkOperations.getTarget(SNodeOperations.cast(rightParam,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true),true);
        }
 else         if (SNodeOperations.isInstanceOf(rightParam,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(SNodeOperations.cast(rightParam,"jetbrains.mps.baseLanguage.structure.LowerBoundType"),"bound",true),(SNode)leftParam,true);
        }
 else         if (SNodeOperations.isInstanceOf(rightParam,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)leftParam,(SNode)rightParam,true);
        }
 else         if (SNodeOperations.isInstanceOf(leftParam,"jetbrains.mps.baseLanguage.structure.ClassifierType") && SNodeOperations.isInstanceOf(rightParam,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
          result_14532009=result_14532009 && MatchingUtil.matchNodes((SNode)leftParam,(SNode)rightParam);
        }
 else {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)leftParam,(SNode)rightParam,true);
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)rightParam,(SNode)leftParam,true);
        }
      }
      if (leftParamIt.hasNext() || rightParamIt.hasNext()) {
        result_14532009=false;
      }
    }
 else {
    }
  }
  return result_14532009;
}
