{
  Set<SModel> result=SetSequence.fromSet(new HashSet<SModel>());
  SetSequence.fromSet(result).addSequence(Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return includeModel(it);
    }
  }
));
  SetSequence.fromSet(result).addSequence(Sequence.fromIterable(withGenerators(modules)).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return !(it.isReadOnly());
    }
  }
).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return includeModel(it);
    }
  }
));
  return result;
}
