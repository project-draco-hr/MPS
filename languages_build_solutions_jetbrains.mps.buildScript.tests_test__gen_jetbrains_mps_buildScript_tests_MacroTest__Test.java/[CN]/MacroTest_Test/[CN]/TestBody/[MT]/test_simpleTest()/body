{
  this.addNodeById("193602448594327347");
  Context context=new Context(){
    @Override public String getBasePath_Local(    SNode node){
      return PathManager.getHomePath();
    }
  }
;
  List<SNode> exportedMacro=context.getExportedMacro(SNodeOperations.cast(this.getNodeById("193602448594327348"),"jetbrains.mps.buildScript.structure.BuildProject"));
  List<SNode> expected=new ArrayList<SNode>();
  ListSequence.fromList(expected).addElement(new MacroTest_Test.TestBody.QuotationClass_oxxkhl_a0a0f0a0().createNode(PathManager.getHomePath() + "/build"));
  ListSequence.fromList(expected).addElement(new MacroTest_Test.TestBody.QuotationClass_oxxkhl_a0a0g0a0().createNode(PathManager.getHomePath() + "/build/resources"));
  ListSequence.fromList(expected).addElement(new MacroTest_Test.TestBody.QuotationClass_oxxkhl_a0a0h0a0().createNode(PathManager.getHomePath() + "/build/tmp/project.tmp"));
  ListSequence.fromList(expected).addElement(new MacroTest_Test.TestBody.QuotationClass_oxxkhl_a0a0i0a0().createNode(PathManager.getHomePath() + "/build/artifacts/project.artifacts"));
  for (int i=0; i < ListSequence.fromList(expected).count(); i++) {
    Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),expected.get(i)),ListSequence.fromListAndArray(new ArrayList<SNode>(),exportedMacro.get(i))));
  }
}
