{
  final List<EditorCell_Label> cells=allCells();
  List<Integer> startCellPosition=new ArrayList<Integer>();
  List<Integer> endCellPosition=new ArrayList<Integer>();
  StringBuilder sourceBuilder=new StringBuilder();
  boolean doubleSpace=false;
  for (  EditorCell_Label cell : cells) {
    boolean punctuationLeft=cell.getStyle().get(StyleAttributes.PUNCTUATION_LEFT);
    boolean punctuationRight=cell.getStyle().get(StyleAttributes.PUNCTUATION_RIGHT);
    if (!punctuationLeft && !doubleSpace) {
      sourceBuilder.append(" ");
    }
    startCellPosition.add(sourceBuilder.length());
    sourceBuilder.append(cell.getRenderedText());
    endCellPosition.add(sourceBuilder.length());
    if (!punctuationRight) {
      sourceBuilder.append(" ");
      doubleSpace=true;
    }
 else {
      doubleSpace=false;
    }
  }
  List<Integer> resultIndex=new ArrayList<Integer>();
  List<Integer> startHighlightPosition=new ArrayList<Integer>();
  List<Integer> endHighlightPosition=new ArrayList<Integer>();
  Matcher matcher=getPattern().matcher(sourceBuilder.toString());
  int index=0;
  boolean needChangeSelection, selected=false;
  while (matcher.find()) {
    while (index < cells.size() && !((startCellPosition.get(index) <= matcher.start()) && (endCellPosition.get(index) > matcher.start()))) {
      index++;
    }
    if (index == cells.size()) {
      break;
    }
    EditorCell_Label currentCell=cells.get(index);
    myCells.add(currentCell);
    CellLayout cellLayout=currentCell.getParent().getCellLayout();
    int highlightLength=0;
    needChangeSelection=index >= cells.indexOf(myEditor.getSelectedCell());
    if (needChangeSelection && !selected) {
      myEditor.changeSelection(cells.get(index));
      selected=true;
    }
    if (!(needChangeSelection && myCells.size() > 100)) {
      while (index < startCellPosition.size() && startCellPosition.get(index) < matcher.end()) {
        resultIndex.add(index);
        startHighlightPosition.add(Math.max(0,matcher.start() - startCellPosition.get(index)));
        endHighlightPosition.add(Math.min(matcher.end(),endCellPosition.get(index)) - startCellPosition.get(index));
        highlightLength++;
        index++;
      }
      index--;
    }
    if (cellLayout instanceof CellLayout_Horizontal && !cellLayout.equals(cells.get(index).getParent().getCellLayout())) {
      if (!needChangeSelection && myCells.size() > 100) {
        for (int i=0; i < highlightLength; i++) {
          resultIndex.remove(resultIndex.size() - 1);
          startHighlightPosition.remove(startHighlightPosition.size() - 1);
          endHighlightPosition.remove(endHighlightPosition.size() - 1);
        }
      }
      myCells.remove(myCells.size() - 1);
    }
  }
  myOwner=new EditorMessageOwner(){
  }
;
  if (!myCells.isEmpty() && myCells.size() <= 100) {
    highlight(resultIndex,startHighlightPosition,endHighlightPosition,cells);
  }
}
