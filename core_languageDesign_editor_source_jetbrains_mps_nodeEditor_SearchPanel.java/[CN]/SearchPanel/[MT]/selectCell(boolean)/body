{
  Pair<List<EditorCell_Label>,String> pair=allCellsAndContent();
  final List<EditorCell_Label> cells=pair.first;
  List<Integer> startCellPosition=new ArrayList<Integer>();
  List<Integer> endCellPosition=new ArrayList<Integer>();
  String content=pair.second;
  int current=0;
  List<EditorCell> emptyCells=new ArrayList<EditorCell>();
  for (  EditorCell_Label cell : cells) {
    if (cell.getRenderedText().isEmpty()) {
      emptyCells.add(cell);
    }
  }
  cells.removeAll(emptyCells);
  for (  EditorCell_Label cell : cells) {
    if (current >= content.length())     break;
    String contentPart=content.substring(current);
    int start=contentPart.indexOf(cell.getRenderedText()) + current;
    startCellPosition.add(start);
    current=start + cell.getRenderedText().length();
    endCellPosition.add(current);
  }
  List<Integer> resultIndex=new ArrayList<Integer>();
  List<Integer> startHighlightPosition=new ArrayList<Integer>();
  List<Integer> endHighlightPosition=new ArrayList<Integer>();
  Matcher matcher=getPattern().matcher(content);
  int index=0;
  boolean needChangeSelection, selected=false;
  while (matcher.find()) {
    while (index < startCellPosition.size() && !((startCellPosition.get(index) <= matcher.start()) && (endCellPosition.get(index) > matcher.start()))) {
      index++;
    }
    if (index >= startCellPosition.size()) {
      break;
    }
    EditorCell_Label currentCell=cells.get(index);
    myCells.add(currentCell);
    if (requestFocus) {
      needChangeSelection=index >= cells.indexOf(myEditor.getSelectedCell());
      if (needChangeSelection && !selected) {
        myEditor.changeSelection(cells.get(index));
        selected=true;
      }
    }
    do {
      resultIndex.add(index);
      startHighlightPosition.add(Math.max(0,matcher.start() - startCellPosition.get(index)));
      endHighlightPosition.add(Math.min(matcher.end(),endCellPosition.get(index)) - startCellPosition.get(index));
      if (index < startCellPosition.size()) {
        index++;
      }
    }
 while (index < startCellPosition.size() && startCellPosition.get(index) < matcher.end());
    index--;
  }
  myOwner=new EditorMessageOwner(){
  }
;
  if (!myCells.isEmpty() && myCells.size() <= 100) {
    highlight(resultIndex,startHighlightPosition,endHighlightPosition,cells);
  }
}
