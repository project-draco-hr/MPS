{
  boolean hasErrors=false;
  ModelDependencies dependRoot=new ModelDependencies();
  DebugInfo info=null;
  if (myGenerateDebugInfo) {
    status.setDebugInfo(info=new DebugInfo());
  }
  status.setBLDependencies(dependRoot);
  SModel outputModel=status.getOutputModel();
  if (outputModel == null)   return !hasErrors;
  StringBuilder[] buffers=new StringBuilder[]{new StringBuilder(8192),new StringBuilder(32768)};
  for (  SNode outputNode : outputModel.roots()) {
    try {
      buffers[0].setLength(0);
      buffers[1].setLength(0);
      if (buffers[0].capacity() > 100000) {
        buffers[0]=new StringBuilder(8192);
      }
      if (buffers[1].capacity() > 200000) {
        buffers[1]=new StringBuilder(32768);
      }
      TextGenerationResult result=TextGenerationUtil.generateText(context,outputNode,myFailIfNoTextgen,myGenerateDebugInfo,buffers);
      hasErrors|=result.hasErrors();
      if (result.hasErrors()) {
        myTextGenErrors.addAll(result.errors());
      }
 else {
        Object contents=result.getResult();
        if (TextGenerationUtil.NO_TEXTGEN != contents) {
          String fileName=outputNode.getName() + "." + TextGenManager.instance().getExtension(outputNode);
          if (info != null) {
            fillDebugInfo(info,fileName,result);
          }
          fillDependencies(dependRoot,outputNode,fileName,result);
          outputNodeContents.put(outputNode,contents);
        }
 else {
        }
      }
    }
  finally {
      TextGenManager.reset();
    }
  }
  return !hasErrors;
}
