{
  Map<SNode,TraceablePositionInfo> positions=result.getPositions();
  Map<SNode,ScopePositionInfo> scopePositions=result.getScopePositions();
  Map<SNode,UnitPositionInfo> unitPositions=result.getUnitPositions();
  if (positions == null && scopePositions == null && unitPositions == null) {
    return;
  }
  if (positions != null) {
    for (    SNode out : positions.keySet()) {
      SNode input=out;
      input=getOriginalInputNodeForNearestParent(input);
      if (input != null && !(input.isDisposed())) {
        TraceablePositionInfo positionInfo=positions.get(out);
        positionInfo.setNodeId(input.getId());
        positionInfo.setFileName(fileName);
        SNode topmostAncestor=input.getTopmostAncestor();
        info.addPosition(positionInfo,topmostAncestor);
      }
    }
  }
  if (scopePositions != null) {
    for (    SNode out : scopePositions.keySet()) {
      SNode input=out;
      input=getOriginalInputNodeForNearestParent(input);
      if (input != null && !(input.isDisposed())) {
        ScopePositionInfo positionInfo=scopePositions.get(out);
        positionInfo.setNodeId(input.getId());
        positionInfo.setFileName(fileName);
        Map<SNode,VarInfo> varMap=positionInfo.getTempVarInfoMap();
        for (        SNode varNode : varMap.keySet()) {
          SNode originalVar=getOriginalInputNodeForNearestParent(varNode);
          VarInfo varInfo=varMap.get(varNode);
          if (originalVar != null && !(originalVar.isDisposed())) {
            varInfo.setNodeId(originalVar.getId());
          }
 else {
            positionInfo.removeVarInfo(varInfo);
          }
        }
        positionInfo.clearTempVarInfoMap();
        info.addScopePosition(positionInfo,input.getTopmostAncestor());
      }
    }
  }
  if (unitPositions != null) {
    for (    SNode out : unitPositions.keySet()) {
      SNode input=out;
      input=getOriginalInputNodeForNearestParent(input);
      UnitPositionInfo positionInfo=unitPositions.get(out);
      positionInfo.setFileName(fileName);
      SNode topmostAncestor=null;
      if (input != null && !(input.isDisposed())) {
        positionInfo.setNodeId(input.getId());
        topmostAncestor=input.getTopmostAncestor();
      }
      info.addUnitPosition(positionInfo,topmostAncestor);
    }
  }
}
