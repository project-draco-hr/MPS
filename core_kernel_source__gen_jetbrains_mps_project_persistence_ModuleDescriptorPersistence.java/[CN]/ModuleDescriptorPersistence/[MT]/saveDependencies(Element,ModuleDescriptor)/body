{
  if (!(descriptor.getDependencies().isEmpty())) {
    Element dependencies=new Element("dependencies");
    saveDependencyList(dependencies,descriptor.getDependencies());
    result.addContent(dependencies);
  }
  if (!(descriptor.getUsedLanguages().isEmpty())) {
    Element usedLanguages=new Element("usedLanguages");
    for (    SModuleReference langRef : CollectionSequence.fromCollection(descriptor.getUsedLanguages())) {
      XmlUtil.tagWithText(usedLanguages,"usedLanguage",langRef.toString());
    }
    result.addContent(usedLanguages);
  }
  if (!(descriptor.getUsedDevkits().isEmpty())) {
    Element usedDevKits=new Element("usedDevKits");
    for (    SModuleReference dkRef : CollectionSequence.fromCollection(descriptor.getUsedDevkits())) {
      XmlUtil.tagWithText(usedDevKits,"usedDevKit",dkRef.toString());
    }
    result.addContent(usedDevKits);
  }
  Map<SLanguage,Integer> lver=descriptor.getLanguageVersions();
  ArrayList<SLanguage> langs=new ArrayList<SLanguage>(lver.keySet());
  Collections.sort(langs,new Comparator<SLanguage>(){
    public int compare(    SLanguage p0,    SLanguage p1){
      return p0.getQualifiedName().compareTo(p1.getQualifiedName());
    }
  }
);
  Element languageVersions=new Element("languageVersions");
  for (  SLanguage l : langs) {
    Element languageVersion=new Element("language");
    languageVersion.setAttribute("id",MetaIdHelper.getLanguage(l).serialize());
    languageVersion.setAttribute("fqName",l.getQualifiedName());
    languageVersion.setAttribute("version",String.valueOf(lver.get(l)));
    languageVersions.addContent(languageVersion);
  }
  result.addContent(languageVersions);
  if (descriptor instanceof LanguageDescriptor) {
    LanguageDescriptor ld=((LanguageDescriptor)descriptor);
    if (!(ld.getRuntimeModules().isEmpty())) {
      Element runtime=new Element("runtime");
      Set<SModuleReference> runtimeModules=ld.getRuntimeModules();
      saveDependencyList(runtime,SetSequence.fromSet(runtimeModules).select(new ISelector<SModuleReference,Dependency>(){
        public Dependency select(        SModuleReference it){
          return new Dependency(it,false);
        }
      }
).toListSequence());
      result.addContent(runtime);
    }
  }
}
