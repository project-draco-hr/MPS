{
  if (LOG.isEnabledFor(Level.WARN)) {
    LOG.warn("Module descriptor " + md + " from the file "+ file+ " has been loaded with error "+ exception);
  }
  md.setNamespace(FileUtil.getNameWithoutExtension(file.getName()));
  md.setId(ModuleId.regular());
  InputStreamReader r=null;
  try {
    r=new InputStreamReader(file.openInputStream(),FileUtil.DEFAULT_CHARSET);
    char[] buf=new char[1024];
    int readChars=r.read(buf);
    if (readChars >= 0) {
      String s=new String(buf,0,readChars);
      Pattern pattern=Pattern.compile(HEADER_PATTERN);
      for (      String line : s.split("\n")) {
        Matcher m=pattern.matcher(line);
        if (m.matches()) {
          md.setNamespace(m.group(3));
          md.setId(ModuleId.fromString(m.group(4)));
        }
      }
    }
  }
 catch (  IOException e) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("",e);
    }
  }
 finally {
    FileUtil.closeFileSafe(r);
  }
  setTimestamp(md,file);
  md.setLoadException((exception.getCause() == null ? exception : exception.getCause()));
}
