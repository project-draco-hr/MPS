{
  descriptor.getDependencies().addAll(loadDependenciesList(ListSequence.fromList(AttributeUtils.elementChildren(root,"dependencies")).first()));
  descriptor.getUsedLanguages().addAll(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root,"usedLanguages")).first(),"usedLanguage")).<ModuleReference>select(new ISelector<Element,ModuleReference>(){
    public ModuleReference select(    Element ul){
      return ModuleReference.fromString(ul.getText());
    }
  }
).toListSequence());
  descriptor.getUsedLanguages().addAll(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root,"usedLanguages")).first(),"usedLanguages")).<ModuleReference>select(new ISelector<Element,ModuleReference>(){
    public ModuleReference select(    Element ul){
      return ModuleReference.fromString(ul.getText());
    }
  }
).toListSequence());
  descriptor.getUsedDevkits().addAll(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(root,"usedDevKits")).first(),"usedDevKit")).<ModuleReference>select(new ISelector<Element,ModuleReference>(){
    public ModuleReference select(    Element udk){
      return ModuleReference.fromString(udk.getText());
    }
  }
).toListSequence());
  if (descriptor instanceof LanguageDescriptor) {
    LanguageDescriptor ld=(LanguageDescriptor)descriptor;
    ld.getRuntimeModules().addAll(loadDependenciesList(ListSequence.fromList(AttributeUtils.elementChildren(root,"runtime")).first()));
  }
}
