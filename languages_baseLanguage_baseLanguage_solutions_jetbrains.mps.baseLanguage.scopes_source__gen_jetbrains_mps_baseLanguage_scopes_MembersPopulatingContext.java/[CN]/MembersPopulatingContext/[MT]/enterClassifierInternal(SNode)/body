{
  SNode classifier=IClassifierType_Behavior.call_getClassifier_7405920559687237513(classifierType);
  if (classifiers.contains(classifier)) {
    return false;
  }
  classifiers.add(classifier);
  Iterable<SNode> typeParams=IClassifierType_Behavior.call_getTypeParameters_7405920559687237518(classifierType);
  if (Sequence.fromIterable(typeParams).isNotEmpty()) {
    Iterator<SNode> typeVars=Sequence.fromIterable(IClassifier_Behavior.call_getTypeVariables_7405920559687237503(classifier)).iterator();
    for (    SNode typeParm : typeParams) {
      if (!(typeVars.hasNext())) {
        break;
      }
      SNode typeVar=typeVars.next();
      MapSequence.fromMap(typeByTypeVariable).put(typeVar,typeParm);
    }
  }
  isPackageProtectedAvailable=true;
  String contextClassifierPackage=JavaNameUtil.packageName(SNodeOperations.getModel(classifiers.get(0)));
  for (  SNode inheritedClassifier : classifiers) {
    if (!(JavaNameUtil.packageName(SNodeOperations.getModel(inheritedClassifier)).equals(contextClassifierPackage))) {
      isPackageProtectedAvailable=false;
      break;
    }
  }
  return true;
}
