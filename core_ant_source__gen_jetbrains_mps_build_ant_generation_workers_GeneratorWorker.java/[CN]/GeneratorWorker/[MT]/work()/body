{
  setupEnvironment();
  final Wrappers._boolean doneSomething=new Wrappers._boolean(false);
  Map<File,List<String>> mpsProjects=myWhatToDo.getMPSProjectFiles();
  for (  File file : mpsProjects.keySet()) {
    if (!(file.getName().endsWith(MPSExtentions.DOT_MPS_PROJECT))) {
      continue;
    }
    FileMPSProject p=new FileMPSProject(file);
    p.init(new FileMPSProject.ProjectDescriptor(file));
    makeProject();
    p.projectOpened();
    info("Loaded project " + p);
    executeTask(p,new MpsWorker.ObjectsToProcess(Collections.singleton(p),new HashSet<IModule>(),new HashSet<SModelDescriptor>()));
    p.projectClosed();
    disposeProject(p);
    doneSomething.value=true;
  }
  LinkedHashSet<IModule> modules=new LinkedHashSet<IModule>();
  LinkedHashSet<SModelDescriptor> models=new LinkedHashSet<SModelDescriptor>();
  collectFromModuleFiles(modules);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      if (doneSomething.value) {
        ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
      }
 else {
        LibrariesLoader.getInstance().loadNewLibs();
      }
    }
  }
);
  collectFromModelFiles(models);
  MpsWorker.ObjectsToProcess go=new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET,modules,models);
  if (go.hasAnythingToGenerate()) {
    Project project=createDummyProject();
    executeTask(project,go);
    doneSomething.value=true;
  }
  if (!(doneSomething.value)) {
    error("Could not find anything to generate.");
    myTestFailed=true;
  }
  dispose();
  showStatistic();
}
