{
  LOG.assertLog(ModelAccess.instance().canWrite(),"Should be able to write models");
  Set<SModule> modulesToUnload=new HashSet<SModule>();
  for (  SModule module : modules) {
    if (SModuleOperations.isCompileInMps(module)) {
      modulesToUnload.add(module);
    }
  }
  monitor.start("Unloading classes...",2);
  try {
    modulesToUnload=myDependenciesWatcher.collectBackReferences(modulesToUnload);
    Set<SModule> notLoaded=new HashSet<SModule>();
    for (    SModule module : modulesToUnload) {
      if (getClassLoader(module) == null) {
        notLoaded.add(module);
      }
    }
    modulesToUnload=new HashSet<SModule>(modulesToUnload);
    modulesToUnload.removeAll(notLoaded);
    if (modulesToUnload.isEmpty())     return modulesToUnload;
    monitor.step("Disposing old classes...");
    broadCastUnload(modulesToUnload);
    monitor.advance(1);
    monitor.step("Invalidate class loaders...");
    myClassLoadersHolder.unloadClassLoaders(modulesToUnload);
    monitor.advance(1);
    return modulesToUnload;
  }
  finally {
    monitor.done();
  }
}
