{
  if (IterableUtils.isEmpty(modules)) {
    LOG.info("Reloaded 0 modules");
    return new ArrayList();
  }
  try {
    monitor.start("Reloading modules' class loaders...",2);
    boolean silentMode=true;
    for (    SModule module : modules) {
      if (!(module instanceof TempModule)) {
        silentMode=false;
        break;
      }
    }
    Collection<ReloadableModule> modulesToReload=new LinkedHashSet();
    for (    SModule module : modules) {
      if (!(module instanceof TempModule) && module.getRepository() == null)       throw new IllegalStateException("Cannot reload the module " + module + " which does not belong to a repository");
      if (canLoad(module)) {
        modulesToReload.add((ReloadableModule)module);
      }
    }
    if (modulesToReload.isEmpty())     return Collections.emptySet();
    refresh();
    myModulesWatcher.updateModules(modulesToReload);
    Collection<? extends ReloadableModule> unloadedModules=doUnloadModules(myModulesWatcher.getModuleRefs(modulesToReload),monitor.subTask(1));
    modulesToReload.addAll(unloadedModules);
    Collection<? extends ReloadableModule> loadedModules=preLoadModules(modulesToReload,monitor.subTask(1));
    if (!silentMode)     LOG.info("Reloaded " + loadedModules.size() + " module(s)");
    return new LinkedHashSet<ReloadableModule>(loadedModules);
  }
  finally {
    monitor.done();
  }
}
