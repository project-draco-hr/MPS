{
  checkWriteAccess();
  if (IterableUtils.isEmpty(modules)) {
    LOG.info("Reloaded 0 modules");
    return new ArrayList();
  }
  try {
    long beginTime=System.nanoTime();
    monitor.start("Reloading Modules",2);
    boolean silentMode=true;
    for (    SModule module : modules) {
      if (!(module instanceof TempModule)) {
        silentMode=false;
        break;
      }
    }
    Collection<ReloadableModule> modulesToReload=new LinkedHashSet();
    for (    SModule module : modules) {
      if (!(module instanceof TempModule) && module.getRepository() == null) {
        throw new IllegalStateException(String.format("Cannot reload the module %s which does not belong to a repository",module));
      }
      if (module instanceof ReloadableModule) {
        modulesToReload.add((ReloadableModule)module);
      }
    }
    if (modulesToReload.isEmpty())     return Collections.emptySet();
    myModulesWatcher.updateModules(modulesToReload);
    Collection<? extends ReloadableModule> unloadedModules=unloadModules(myModulesWatcher.getModuleRefs(modulesToReload),monitor.subTask(1));
    modulesToReload.addAll(unloadedModules);
    Collection<ReloadableModule> loadedModules=preLoadModules(modulesToReload,monitor.subTask(1));
    myBroadCaster.onReload(loadedModules);
    if (!silentMode) {
      LOG.info(String.format("Reloaded %d module(s) in %.3f s",loadedModules.size(),(System.nanoTime() - beginTime) / 1e9));
    }
    return new LinkedHashSet<ReloadableModule>(loadedModules);
  }
  finally {
    myClassLoadersHolder.scheduleClassLoaderDisposeInEDT();
    monitor.done();
  }
}
