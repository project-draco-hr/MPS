{
  monitor.start("Loading modules...",1);
  try {
    return new ModelAccessHelper(myRepository).runReadAction(new Computable<Collection<ReloadableModule>>(){
      @Override public Collection<ReloadableModule> compute(){
synchronized (myLoadingModulesLock) {
          Set<ReloadableModule> modulesToLoad=new LinkedHashSet<ReloadableModule>(filterModules(modules,myWatchableCondition,myValidCondition));
          if (modulesToLoad.isEmpty())           return Collections.emptySet();
          modulesToLoad.addAll(myModulesWatcher.getResolvedDependencies(modulesToLoad));
          modulesToLoad=filterModules(modulesToLoad,myMPSLoadableCondition,myNotLoadedCondition);
          if (modulesToLoad.isEmpty())           return Collections.emptySet();
          LOG.debug("Loading " + modulesToLoad.size() + " modules");
          monitor.advance(1);
          if (!filterModules(modulesToLoad,myUnloadedCondition).isEmpty()) {
            LOG.warn("Some modules are not preloaded yet : cannot load them");
          }
          myClassLoadersHolder.doLoadModules(modulesToLoad,monitor);
          return modulesToLoad;
        }
      }
    }
);
  }
  finally {
    monitor.done();
  }
}
