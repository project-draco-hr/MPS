{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_pm9z_a0a=null;
switch (0) {
case 0:
        if (Boolean.TRUE.equals(pa.global().properties(Target_reconcile.this.getName(),Make_Facet.Target_reconcile.Parameters.class).skipReconcile())) {
          _output_pm9z_a0a=Sequence.fromIterable(_output_pm9z_a0a).concat(Sequence.fromIterable(input));
          return new IResult.SUCCESS(_output_pm9z_a0a);
        }
      FileSystem.getInstance().runWriteTransaction(new Runnable(){
        public void run(){
          final List<IFile> writtenFiles=ListSequence.fromList(new ArrayList<IFile>());
          DeltaReconciler reconciler=new DeltaReconciler(Sequence.fromIterable(input).translate(new ITranslator2<IResource,IDelta>(){
            public Iterable<IDelta> translate(            IResource res){
              return ((IDeltaResource)res).delta();
            }
          }
).where(new IWhereFilter<IDelta>(){
            public boolean accept(            IDelta d){
              return !(d instanceof IInternalDelta);
            }
          }
));
          reconciler.reconcileAll();
          reconciler.visitAll(new FilesDelta.Visitor(){
            @Override public boolean acceptWritten(            IFile file){
              ListSequence.fromList(writtenFiles).addElement(file);
              return true;
            }
          }
);
          DeltaReconciler internalReconciler=new DeltaReconciler(Sequence.fromIterable(input).translate(new ITranslator2<IResource,IDelta>(){
            public Iterable<IDelta> translate(            IResource res){
              return ((IDeltaResource)res).delta();
            }
          }
).where(new IWhereFilter<IDelta>(){
            public boolean accept(            IDelta d){
              return d instanceof IInternalDelta;
            }
          }
));
          internalReconciler.reconcileAll();
          internalReconciler.visitAll(new FilesDelta.Visitor(){
            @Override public boolean acceptWritten(            IFile file){
              ListSequence.fromList(writtenFiles).addElement(file);
              return true;
            }
          }
);
          FileSystem.getInstance().scheduleUpdateForWrittenFiles(writtenFiles);
        }
      }
);
    _output_pm9z_a0a=Sequence.fromIterable(_output_pm9z_a0a).concat(Sequence.fromIterable(input));
default :
  return new IResult.SUCCESS(_output_pm9z_a0a);
}
}
}
;
}
