{
  super("Convert ExecuteFindersExpression");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "convert refactoring finder to findUsages' one";
    }
    public String getAdditionalInfo(){
      return "convert refactoring finder to findUsages' one";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode replacer=SConceptOperations.createNewNode("jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults",null);
      for (      SNode finder : ListSequence.fromList(SLinkOperations.getTargets(node,"finders",true))) {
        SNode finderRef=SConceptOperations.createNewNode("jetbrains.mps.lang.findUsages.structure.FinderReference",null);
        SLinkOperations.setTarget(finderRef,"finder",SLinkOperations.getTarget(finder,"finderDeclaration",false),false);
        ListSequence.fromList(SLinkOperations.getTargets(replacer,"finder",true)).addElement(finderRef);
      }
      SLinkOperations.setTarget(replacer,"queryNode",((SLinkOperations.getTarget(node,"searchNode",true) == null) ? new ConvertExecuteFinders_MigrationScript.QuotationClass_v4ym8i_a0a0c0e0a0a0b0a().createNode() : SLinkOperations.getTarget(node,"searchNode",true)),true);
      SLinkOperations.setTarget(replacer,"scope",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"searchScope",true)),true);
      SNodeOperations.replaceWithAnother(node,replacer);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
