{
  Set<Class> addedKeymaps=new HashSet<Class>();
  List<Pair<EditorCellKeyMap,EditorCell>> keyMapsAndCells=new ArrayList<Pair<EditorCellKeyMap,EditorCell>>();
  EditorCell keymapOwnerCell=selectedCell;
  while (keymapOwnerCell != null) {
    EditorCellKeyMap keymap=keymapOwnerCell.getKeyMap();
    if (keymap != null && !addedKeymaps.contains(keymap.getClass())) {
      keyMapsAndCells.add(new Pair<EditorCellKeyMap,EditorCell>(keymap,keymapOwnerCell));
      addedKeymaps.add(keymap.getClass());
    }
    keymapOwnerCell=keymapOwnerCell.getParent();
  }
  SNode node=editorContext.getNodeEditorComponent().getEditedNode();
  if (node != null) {
    SModel model=node.getModel();
    Set<ModuleReference> importedAndExtendedLanguages=new HashSet<ModuleReference>();
    for (    ModuleReference langRef : SModelOperations.getAllImportedLanguages(model)) {
      importedAndExtendedLanguages.add(langRef);
      Language l=ModuleRepositoryFacade.getInstance().getModule(langRef,Language.class);
      if (l != null) {
        for (        Language le : l.getAllExtendedLanguages()) {
          importedAndExtendedLanguages.add(le.getModuleReference());
        }
      }
    }
    for (    ModuleReference ref : importedAndExtendedLanguages) {
      Language language=editorContext.getScope().getLanguage(ref);
      if (language == null) {
        continue;
      }
      List<EditorCellKeyMap> keyMapsForNamespace=LanguagesKeymapManager.getInstance().getKeyMapsForLanguage(language);
      if (keyMapsForNamespace != null) {
        for (        EditorCellKeyMap keymap : keyMapsForNamespace) {
          if (!addedKeymaps.contains(keymap.getClass())) {
            keyMapsAndCells.add(new Pair<EditorCellKeyMap,EditorCell>(keymap,selectedCell));
            addedKeymaps.add(keymap.getClass());
          }
        }
      }
    }
  }
  return keyMapsAndCells;
}
