{
  Project project=myEnvironment.getProject();
  ProcessHandler process;
  final Tuples._2<File,File> files=myRunConfiguration.getMpsSettings().prepareFilesToOpenAndToDelete(project);
  process=new Mps_Command().setVirtualMachineParameters_String(myRunConfiguration.getMpsSettings().getVmOptions()).setJrePath_String(myRunConfiguration.getMpsSettings().getJrePath()).setConfigurationPath_String(myRunConfiguration.getMpsSettings().expandPath(myRunConfiguration.getMpsSettings().getConfigurationPath())).setSystemPath_String(myRunConfiguration.getMpsSettings().expandPath(myRunConfiguration.getMpsSettings().getSystemPath())).setDebuggerSettings_String(myDebuggerSettings.getCommandLine(true)).createProcess(files._0());
  if (files._1() != null) {
    OutputRedirector.redirect(process,new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent event){
        super.processTerminated(event);
        FileUtil.delete(files._1());
      }
    }
);
  }
  ConsoleView console=ConsoleCreator.createConsoleView(project,false);
  console.addMessageFilter(new StandaloneMPSStackTraceFilter(project));
{
    ProcessHandler _processHandler=process;
    final ConsoleView _consoleView=console;
    _processHandler.addProcessListener(new ConsoleProcessListener(_consoleView));
    return new DefaultExecutionResult(_processHandler,new DefaultExecutionConsole(_consoleView.getComponent(),new _FunctionTypes._void_P0_E0(){
      public void invoke(){
        _consoleView.dispose();
      }
    }
));
  }
}
