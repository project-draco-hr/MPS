{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  this.appendWithIndent("} catch (");
  appendNode(SLinkOperations.getTarget(node,"throwable",true));
  this.append(") {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,"catchBody",true));
  this.decreaseDepth();
  if (getBuffer().hasPositionsSupport()) {
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
