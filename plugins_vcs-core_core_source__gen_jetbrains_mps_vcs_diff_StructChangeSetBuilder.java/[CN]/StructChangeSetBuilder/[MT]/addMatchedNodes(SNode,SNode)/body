{
  MapSequence.fromMap(myOldToNewMap).put(oldNode.getNodeId(),newNode.getNodeId());
  for (  SContainmentLink role : ListSequence.fromList(SNodeOperations.getChildren(oldNode)).concat(ListSequence.fromList(SNodeOperations.getChildren(newNode))).select(new ISelector<SNode,SContainmentLink>(){
    public SContainmentLink select(    SNode ch){
      return ch.getContainmentLink();
    }
  }
).distinct()) {
    List<SNode> ch1List=IterableUtil.asList(oldNode.getChildren(role));
    List<SNode> ch2List=IterableUtil.asList(newNode.getChildren(role));
{
      Iterator<SNode> ch1_it=ListSequence.fromList(ch1List).iterator();
      Iterator<SNode> ch2_it=ListSequence.fromList(ch2List).iterator();
      SNode ch1_var;
      SNode ch2_var;
      while (ch1_it.hasNext() && ch2_it.hasNext()) {
        ch1_var=ch1_it.next();
        ch2_var=ch2_it.next();
        MapSequence.fromMap(myOldToNewMap).put(ch1_var.getNodeId(),ch2_var.getNodeId());
      }
    }
  }
}
