{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0mb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AnalysisDirection;
      }
    break;
case 1:
  if (true) {
    return props_Analyzer;
  }
break;
case 2:
if (true) {
return props_AnalyzerConstructorParameter;
}
break;
case 3:
if (true) {
return props_AnalyzerConstructorParameterReference;
}
break;
case 4:
if (true) {
return props_AnalyzerFunFunction;
}
break;
case 5:
if (true) {
return props_AnalyzerFunParameterInput;
}
break;
case 6:
if (true) {
return props_AnalyzerFunParameterProgramState;
}
break;
case 7:
if (true) {
return props_AnalyzerFunParameterStateValues;
}
break;
case 8:
if (true) {
return props_AnalyzerFunctionResultType;
}
break;
case 9:
if (true) {
return props_AnalyzerInitialFunction;
}
break;
case 10:
if (true) {
return props_AnalyzerMergeFunction;
}
break;
case 11:
if (true) {
return props_AnalyzerMergeParameterInput;
}
break;
case 12:
if (true) {
return props_AnalyzerParameterProgram;
}
break;
case 13:
if (true) {
return props_AnalyzerRunnerAnalyzeOperation;
}
break;
case 14:
if (true) {
return props_AnalyzerRunnerClassKeeper;
}
break;
case 15:
if (true) {
return props_AnalyzerRunnerCreator;
}
break;
case 16:
if (true) {
return props_AnalyzerRunnerType;
}
break;
case 17:
if (true) {
return props_ApplicableCondition;
}
break;
case 18:
if (true) {
return props_ApplicableNodeReference;
}
break;
case 19:
if (true) {
return props_BackwardDirection;
}
break;
case 20:
if (true) {
return props_ConceptCondition;
}
break;
case 21:
if (true) {
return props_CustomInstructionsContainer;
}
break;
case 22:
if (true) {
return props_CustomInstructionsContainerReference;
}
break;
case 23:
if (true) {
return props_EmitInstruction;
}
break;
case 24:
if (true) {
return props_ForwardDirection;
}
break;
case 25:
if (true) {
return props_InsertAfterPosition;
}
break;
case 26:
if (true) {
return props_InsertBeforePosition;
}
break;
case 27:
if (true) {
return props_InsertPosition;
}
break;
case 28:
if (true) {
return props_Instruction;
}
break;
case 29:
if (true) {
return props_InstructionClassKeeper;
}
break;
case 30:
if (true) {
return props_InstructionParameter;
}
break;
case 31:
if (true) {
return props_InstructionReference;
}
break;
case 32:
if (true) {
return props_IsOperation;
}
break;
case 33:
if (true) {
return props_PatternCondition;
}
break;
case 34:
if (true) {
return props_ProgramParameter;
}
break;
case 35:
if (true) {
return props_Rule;
}
break;
case 36:
if (true) {
return props_RuleReference;
}
break;
default :
}
}
throw new IllegalStateException();
}
