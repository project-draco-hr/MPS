{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("97a52717-898f-4598-8150-573d9fd03868"),"jetbrains.mps.lang.dataFlow.analyzers")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AnalysisDirection;
case 1:
  return props_Analyzer;
case 2:
return props_AnalyzerConstructorParameter;
case 3:
return props_AnalyzerConstructorParameterReference;
case 4:
return props_AnalyzerFunFunction;
case 5:
return props_AnalyzerFunParameterInput;
case 6:
return props_AnalyzerFunParameterProgramState;
case 7:
return props_AnalyzerFunParameterStateValues;
case 8:
return props_AnalyzerFunctionResultType;
case 9:
return props_AnalyzerInitialFunction;
case 10:
return props_AnalyzerMergeFunction;
case 11:
return props_AnalyzerMergeParameterInput;
case 12:
return props_AnalyzerParameterProgram;
case 13:
return props_AnalyzerRunnerAnalyzeOperation;
case 14:
return props_AnalyzerRunnerClassKeeper;
case 15:
return props_AnalyzerRunnerCreator;
case 16:
return props_AnalyzerRunnerType;
case 17:
return props_ApplicableCondition;
case 18:
return props_ApplicableNodeReference;
case 19:
return props_BackwardDirection;
case 20:
return props_ConceptCondition;
case 21:
return props_CustomInstructionsContainer;
case 22:
return props_CustomInstructionsContainerReference;
case 23:
return props_EmitInstruction;
case 24:
return props_ForwardDirection;
case 25:
return props_InsertAfterPosition;
case 26:
return props_InsertBeforePosition;
case 27:
return props_InsertPosition;
case 28:
return props_Instruction;
case 29:
return props_InstructionClassKeeper;
case 30:
return props_InstructionParameter;
case 31:
return props_InstructionReference;
case 32:
return props_IsOperation;
case 33:
return props_PatternCondition;
case 34:
return props_ProgramParameter;
case 35:
return props_Rule;
case 36:
return props_RuleReference;
}
throw new IllegalStateException();
}
