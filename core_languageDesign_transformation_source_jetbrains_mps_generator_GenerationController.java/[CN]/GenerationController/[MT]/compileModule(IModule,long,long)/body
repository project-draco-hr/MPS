{
  boolean compiledSuccessfully=true;
  if (module != null && (!isIDEAPresent() && !module.isCompileInMPS()) || !myGenerationType.requiresCompilationInIDEAfterGeneration()) {
    compiledSuccessfully=false;
  }
 else   if (module != null) {
    checkMonitorCanceled();
    CompilationResult compilationResult;
    TaskProgressHelper taskProgressHelper=new TaskProgressHelper();
    if (!module.isCompileInMPS()) {
      taskProgressHelper.startLeafTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS,myProgress,totalJob,startJobTime);
      getProjectHandler().refreshFS();
      taskProgressHelper.finishTask();
      String info="compiling in IntelliJ IDEA...";
      myProgress.setText2(info);
      info(info);
      taskProgressHelper.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_IDEA,myProgress,totalJob,startJobTime);
      compilationResult=getProjectHandler().buildModule(module.getGeneratorOutputPath());
      taskProgressHelper.finishTask();
    }
 else {
      taskProgressHelper.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_MPS,myProgress,totalJob,startJobTime);
      String info="compiling in JetBrains MPS...";
      myProgress.setText2(info);
      info(info);
      compilationResult=new ModuleMaker().make(CollectionUtil.asSet(module),new EmptyProgressIndicator());
      taskProgressHelper.finishTask();
    }
    if (compilationResult == null || compilationResult.getErrors() > 0) {
      compiledSuccessfully=false;
    }
    info("" + compilationResult);
    myProgress.setText2("");
    checkMonitorCanceled();
  }
  return compiledSuccessfully;
}
