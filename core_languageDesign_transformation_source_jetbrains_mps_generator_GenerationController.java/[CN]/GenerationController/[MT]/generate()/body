{
  myProgress.start("generating",estimateGenerationTime());
  showMessageView();
  clearMessageVew();
  myMesssages.handle(new Message(MessageKind.INFORMATION,myGenerationType.getStartText()));
  try {
    boolean generationOK=true;
    for (    Pair<IModule,List<SModelDescriptor>> moduleAndDescriptors : myModuleSequence) {
      generationOK=generationOK && generateModelsInModule(moduleAndDescriptors.o1,moduleAndDescriptors.o2);
    }
    if (generationOK) {
      boolean compiledSuccessfully=true;
      boolean needToReload=false;
      for (      Pair<IModule,List<SModelDescriptor>> moduleListPair : myModuleSequence) {
        IModule module=moduleListPair.o1;
        if (module != null && module.reloadClassesAfterGeneration()) {
          needToReload=true;
        }
        compiledSuccessfully=compiledSuccessfully && compileModule(module);
      }
      for (      SModelDescriptor sm : myModelsToContexts.keySet()) {
        ModelGenerationStatusManager.getInstance().invalidateData(sm);
      }
      if (compiledSuccessfully && needToReload) {
        reloadClasses();
      }
      if (generationOK) {
        info("generation completed successfully");
      }
 else {
        info("generation completed with errors");
      }
    }
 else     if (!generationOK) {
      info("generation finished with errors");
    }
    if (isIDEAPresent() && !myGenerationType.requiresCompilationInIDEAfterGeneration()) {
      getProjectHandler().refreshFS();
    }
  }
 catch (  GenerationCanceledException gce) {
    warning("generation canceled");
    myProgress.finishAnyway();
    showMessageView();
    return false;
  }
catch (  Throwable t) {
    LOG.error(t);
    final String text=t.toString();
    myProgress.addText(text);
    myMesssages.handle(new Message(MessageKind.ERROR,text));
  }
 finally {
    myProgress.finishAnyway();
  }
  return true;
}
