{
  boolean compiledSuccessfully=true;
  if (module != null && (!isIDEAPresent() && !module.isCompileInMPS()) || !myGenerationType.requiresCompilationInIDEAfterGeneration()) {
    compiledSuccessfully=false;
  }
 else   if (module != null) {
    checkMonitorCanceled();
    myProgress.startTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
    CompilationResult compilationResult;
    if (!module.isCompileInMPS()) {
      myProgress.startLeafTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
      getProjectHandler().refreshFS();
      myProgress.finishTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
      info("compiling in IntelliJ IDEA...");
      myProgress.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_IDEA);
      compilationResult=getProjectHandler().buildModule(module.getGeneratorOutputPath());
      myProgress.finishTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_IDEA);
    }
 else {
      myProgress.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_MPS);
      info("compiling in JetBrains MPS...");
      compilationResult=new ModuleMaker().make(CollectionUtil.asSet(module),new MessagesOnlyAdaptiveProgressMonitorWrapper(myProgress));
      myProgress.finishTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_MPS);
    }
    if (compilationResult.getErrors() > 0) {
      compiledSuccessfully=false;
    }
    info("" + compilationResult);
    myProgress.finishTask(ModelsProgressUtil.TASK_NAME_COMPILE_ON_GENERATION);
    checkMonitorCanceled();
  }
  return compiledSuccessfully;
}
