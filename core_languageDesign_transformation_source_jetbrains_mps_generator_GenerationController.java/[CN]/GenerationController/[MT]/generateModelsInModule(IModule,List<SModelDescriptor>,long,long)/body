{
  boolean currentGenerationOK=false;
  IOperationContext invocationContext=myModulesToContexts.get(module);
  myProgress.setText2("generating in module " + module);
  String outputFolder=module != null ? module.getGeneratorOutputPath() : null;
  if (outputFolder != null && !new File(outputFolder).exists()) {
    new File(outputFolder).mkdirs();
    try {
      getProjectHandler().addSourceRoot(outputFolder);
    }
 catch (    Exception e) {
      myMesssages.handle(new Message(MessageKind.WARNING,"Can't add output folder to IDEA as sources"));
    }
  }
  myMesssages.handle(new Message(MessageKind.INFORMATION,"    target root folder: \"" + outputFolder + "\""));
  Statistics.setEnabled(Statistics.TPL,myManager.isDumpStatistics());
  String wasLoggingThreshold=null;
  IGenerationSession generationSession=new GenerationSession(invocationContext,mySaveTransientModels,myProgress,myMesssages);
  try {
    if (myManager.isShowErrorsOnly()) {
      wasLoggingThreshold=Logger.setThreshold("ERROR");
    }
    Logger.addLoggingHandler(generationSession.getLoggingHandler());
    TypeChecker.getInstance().setIncrementalMode(false);
    TypeChecker.getInstance().setTypeCheckingMode(TypeCheckingMode.GENERATION);
    for (    SModelDescriptor inputModel : descriptors) {
      info("");
      String taskName=ModelsProgressUtil.generationModelTaskName(inputModel);
      myProgress.setText2(taskName);
      TaskProgressHelper progress=new TaskProgressHelper();
      progress.startLeafTask(taskName,myProgress,totalJob,startJobTime);
      GenerationStatus status=generationSession.generateModel(inputModel);
      currentGenerationOK=status.isOk();
      if (myManager.isDumpStatistics()) {
        Statistics.dumpAll();
      }
      info("handling output...");
      checkMonitorCanceled();
      if (status.getOutputModel() != null) {
        boolean result=myGenerationType.handleOutput(status,outputFolder,invocationContext,myProgress,myMesssages);
        if (!result) {
          info("there were errors.");
          currentGenerationOK=false;
        }
      }
 else       if (!(status.isCanceled() || status.isError())) {
        myGenerationType.handleEmptyOutput(status,outputFolder,invocationContext,myProgress,myMesssages);
      }
      generationSession.discardTransients();
      progress.finishTask();
      myProgress.setText2("");
    }
  }
  finally {
    if (wasLoggingThreshold != null) {
      Logger.setThreshold(wasLoggingThreshold);
    }
    generationSession.discardTransients();
    Logger.removeLoggingHandler(generationSession.getLoggingHandler());
    TypeChecker.getInstance().setIncrementalMode(true);
    TypeChecker.getInstance().resetTypeCheckingMode();
    tryToReloadModelsFromDisk();
  }
  checkMonitorCanceled();
  info("");
  myProgress.setText2("");
  return currentGenerationOK;
}
