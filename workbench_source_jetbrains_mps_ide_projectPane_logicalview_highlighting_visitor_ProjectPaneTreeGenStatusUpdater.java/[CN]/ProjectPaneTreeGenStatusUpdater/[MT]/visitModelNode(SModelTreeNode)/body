{
  if (!ProjectPane.isShowGenStatus())   return;
  Application application=ApplicationManager.getApplication();
  if (application.isDisposed() || application.isDisposeInProgress())   return;
  SModelDescriptor md=modelNode.getSModelDescriptor();
  if (!(md instanceof EditableSModelDescriptor) && !(md.isGeneratable()))   return;
  if (md.getModule() == null)   return;
  TreeNode node=modelNode;
  final ProjectModuleTreeNode moduleNode=getContainingModuleNode(node);
  boolean wasChanged=md instanceof EditableSModelDescriptor && ((EditableSModelDescriptor)md).isChanged();
  if (moduleNode.getModule().isPackaged()) {
    updateNodeLater(modelNode,GenerationStatus.PACKAGED.getMessage());
    updateNodeLater(moduleNode,GenerationStatus.PACKAGED.getMessage());
    return;
  }
  if (wasChanged) {
    updateNodeLater(modelNode,GenerationStatus.REQUIRED.getMessage());
    updateNodeLater(moduleNode,GenerationStatus.REQUIRED.getMessage());
    if (moduleNode.getModule() instanceof Generator) {
      updateNodeLater(getContainingModuleNode(moduleNode),GenerationStatus.REQUIRED.getMessage());
    }
    return;
  }
  GenerationStatus modelStatus=ModelAccess.instance().runReadAction(new Computable<GenerationStatus>(){
    public GenerationStatus compute(){
      if (modelNode.getSModelDescriptor().getModule() == null) {
        return GenerationStatus.NOT_REQUIRED;
      }
      return getGenerationStatus(modelNode);
    }
  }
);
  updateModuleStatus(moduleNode);
  if (moduleNode.getModule() instanceof Generator) {
    updateModuleStatus(getContainingModuleNode(moduleNode));
  }
  updateNodeLater(modelNode,modelStatus.getMessage());
}
