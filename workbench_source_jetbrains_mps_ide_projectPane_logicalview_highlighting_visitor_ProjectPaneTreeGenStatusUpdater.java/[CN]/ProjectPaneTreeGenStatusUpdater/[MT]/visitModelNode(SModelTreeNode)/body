{
  if (!ProjectPane.isShowGenStatus())   return;
  SModelDescriptor md=modelNode.getSModelDescriptor();
  if (!(md instanceof EditableSModelDescriptor) && !(md.isGeneratable()))   return;
  TreeNode node=modelNode;
  do {
    node=node.getParent();
  }
 while (!(node instanceof ProjectModuleTreeNode));
  final ProjectModuleTreeNode moduleNode=((ProjectModuleTreeNode)node);
  boolean wasChanged=md instanceof EditableSModelDescriptor && ((EditableSModelDescriptor)md).isChanged();
  if (moduleNode.getModule().isPackaged()) {
    updateNodeLater(modelNode,GenerationStatus.PACKAGED.getMessage());
    updateNodeLater(moduleNode,GenerationStatus.PACKAGED.getMessage());
    return;
  }
  if (wasChanged) {
    updateNodeLater(modelNode,GenerationStatus.REQUIRED.getMessage());
    updateNodeLater(moduleNode,GenerationStatus.REQUIRED.getMessage());
    return;
  }
  GenerationStatus modelStatus=ModelAccess.instance().runReadAction(new Computable<GenerationStatus>(){
    public GenerationStatus compute(){
      return getGenerationStatus(modelNode);
    }
  }
);
  GenerationStatus moduleStatus=ModelAccess.instance().runReadAction(new Computable<GenerationStatus>(){
    public GenerationStatus compute(){
      return generationRequired(moduleNode);
    }
  }
);
  updateNodeLater(modelNode,modelStatus.getMessage());
  updateNodeLater(moduleNode,moduleStatus.getMessage());
}
