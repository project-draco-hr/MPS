{
  Iterable<SConcept> seq=Sequence.<SConcept>singleton(MetaAdapterFactory.getConcept(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x671e792f3dbdfe7eL,"jetbrains.mps.lang.generator.generationContext.structure.GenerationContextOp_ContextVarRef"));
  return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0xd7706f639be2479cL,0xa3daae92af1e64d5L,0x11b5282d0d3L,"jetbrains.mps.lang.generator.generationContext.structure.GenerationContextOp_Base"),_context.getModel())).where(new IWhereFilter<SConcept>(){
    public boolean accept(    SConcept it){
      return !(it.isAbstract());
    }
  }
).subtract(Sequence.fromIterable(seq)).select(new ISelector<SConcept,SNode>(){
    public SNode select(    SConcept it){
      return (SNode)SNodeOperations.asNode(it);
    }
  }
).toListSequence().select(new ISelector<SNode,SAbstractConcept>(){
    public SAbstractConcept select(    SNode it){
      return SNodeOperations.asSConcept(it);
    }
  }
).toListSequence();
}
