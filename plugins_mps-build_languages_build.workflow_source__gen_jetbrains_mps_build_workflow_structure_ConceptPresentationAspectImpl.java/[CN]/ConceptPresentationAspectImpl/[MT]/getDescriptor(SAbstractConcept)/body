{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0db.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BwfAntStatement;
      }
    break;
case 1:
  if (true) {
    return props_BwfAntTaskBundleDeclaration;
  }
break;
case 2:
if (true) {
return props_BwfAntTaskDeclaration;
}
break;
case 3:
if (true) {
return props_BwfCustomMacro;
}
break;
case 4:
if (true) {
return props_BwfDependency;
}
break;
case 5:
if (true) {
return props_BwfFileSet;
}
break;
case 6:
if (true) {
return props_BwfJavaClassPath;
}
break;
case 7:
if (true) {
return props_BwfJavaDependency;
}
break;
case 8:
if (true) {
return props_BwfJavaDescriptor;
}
break;
case 9:
if (true) {
return props_BwfJavaLibrary;
}
break;
case 10:
if (true) {
return props_BwfJavaLibraryReference;
}
break;
case 11:
if (true) {
return props_BwfJavaModule;
}
break;
case 12:
if (true) {
return props_BwfJavaModuleReference;
}
break;
case 13:
if (true) {
return props_BwfMacro;
}
break;
case 14:
if (true) {
return props_BwfMacroListImport;
}
break;
case 15:
if (true) {
return props_BwfPathDeclaration;
}
break;
case 16:
if (true) {
return props_BwfPathReference;
}
break;
case 17:
if (true) {
return props_BwfProject;
}
break;
case 18:
if (true) {
return props_BwfProjectPart;
}
break;
case 19:
if (true) {
return props_BwfProjectPartStatement;
}
break;
case 20:
if (true) {
return props_BwfStatement;
}
break;
case 21:
if (true) {
return props_BwfSubTask;
}
break;
case 22:
if (true) {
return props_BwfSubTaskDependency;
}
break;
case 23:
if (true) {
return props_BwfTask;
}
break;
case 24:
if (true) {
return props_BwfTaskDependency;
}
break;
case 25:
if (true) {
return props_BwfTaskLibrary;
}
break;
case 26:
if (true) {
return props_BwfTaskLibraryDependency;
}
break;
case 27:
if (true) {
return props_BwfTaskPart;
}
break;
default :
}
}
throw new IllegalStateException();
}
