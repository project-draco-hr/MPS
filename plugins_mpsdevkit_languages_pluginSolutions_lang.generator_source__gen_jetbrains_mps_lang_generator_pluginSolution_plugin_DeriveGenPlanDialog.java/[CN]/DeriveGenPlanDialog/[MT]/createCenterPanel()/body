{
  myStepModuleKind=new DeriveGenPlanDialog.ExclusiveAlternativesPanel("Specify transformation with");
  myStepModuleKind.addOption("Language",1);
  myStepModuleKind.addOption("Generator",2);
  myStepGranularityKind=new DeriveGenPlanDialog.ExclusiveAlternativesPanel("Step granularity");
  myStepGranularityKind.addOption("All transformation in a single step",3);
  myStepGranularityKind.addOption("Single language/generator per step",4);
  JPanel p=new JPanel(new GridLayout(1,2));
  p.add(myStepModuleKind.getComponent());
  p.add(myStepGranularityKind.getComponent());
  Condition<SModel> isStub=new Condition<SModel>(){
    public boolean met(    SModel m){
      return SModelStereotype.isStubModel(m);
    }
  }
;
  Condition<SModel> isDescriptor=new Condition<SModel>(){
    public boolean met(    SModel m){
      return SModelStereotype.isDescriptorModel(m);
    }
  }
;
  Condition<SModel> filter=new AndCondition<SModel>(NotCondition.negate(isStub),NotCondition.negate(isDescriptor));
  ConditionalScope localScope=new ConditionalScope(myProject.getScope(),null,filter);
  ConditionalScope globalScope=new ConditionalScope(new FilteredGlobalScope(),null,filter);
  SRepository repo=myProject.getRepository();
  ChooseByNameData<SModelReference> gotoData=new ChooseByNameData<SModelReference>(new ModelsPresentation(repo));
  gotoData.derivePrompts("model").setScope(new ModelScopeIterable(localScope,repo),new ModelScopeIterable(globalScope,repo));
  myChoosePanel=MpsPopupFactory.createPanelForPackage(myProject.getProject(),gotoData,false);
  myChoosePanel.invoke(new ChooseByNamePopupComponent.Callback(){
    public void elementChosen(    Object o){
      if (o instanceof SModelReference) {
        setSampleModel(((SModelReference)o));
      }
    }
  }
,ModalityState.current(),false);
  Disposer.register(getDisposable(),myChoosePanel);
  JPanel rv=new JPanel(new BorderLayout());
  rv.add(myChoosePanel.getPanel(),BorderLayout.NORTH);
  rv.add(p,BorderLayout.CENTER);
  return rv;
}
