{
  return new Mapper<SNode,PolyLineConnection>(getSNode(),createConnection()){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      super.registerSynchronizers(configuration);
      configuration.add(Synchronizers.forProperty(myInputPort,new WritableProperty<Tuples._2<SNode,SNode>>(){
        public void set(        Tuples._2<SNode,SNode> port){
          getTarget().toView().set(getTargetView(port));
        }
        private View getTargetView(        Tuples._2<SNode,SNode> port){
          Mapper<? super SNode,?> descendantMapper=getParent().getDescendantMapper(port._0());
          if (descendantMapper == null) {
            return null;
          }
          Set<Mapper<? super SNode,?>> mappers=descendantMapper.getMappingContext().getMappers(descendantMapper,SLinkOperations.getTarget(SLinkOperations.getTarget(getSNode(),"source",true),"metaPort",false));
          if (mappers.size() > 0) {
            return (View)mappers.iterator().next().getTarget();
          }
          return (View)descendantMapper.getTarget();
        }
      }
));
      configuration.add(Synchronizers.forProperty(myOutputPort,new WritableProperty<Tuples._2<SNode,SNode>>(){
        public void set(        Tuples._2<SNode,SNode> port){
          getTarget().fromView().set(getTargetView(port));
          if (getTarget().fromView().get() == null || getTarget().toView().get() == null) {
            getTarget().fromView().set(null);
            getTarget().toView().set(null);
          }
        }
        private View getTargetView(        Tuples._2<SNode,SNode> port){
          Mapper<? super SNode,?> descendantMapper=getParent().getDescendantMapper(port._0());
          if (descendantMapper == null) {
            return null;
          }
          Set<Mapper<? super SNode,?>> mappers=descendantMapper.getMappingContext().getMappers(descendantMapper,SLinkOperations.getTarget(SLinkOperations.getTarget(getSNode(),"target",true),"metaPort",false));
          if (mappers.size() > 0) {
            return (View)mappers.iterator().next().getTarget();
          }
          return (View)descendantMapper.getTarget();
        }
      }
));
      final View targetView=this.getTarget().view();
      configuration.add(Synchronizers.forProperty(targetView.focused(),new WritableProperty<Boolean>(){
        public void set(        Boolean isFocused){
          if (isFocused && !(isSelected())) {
            SelectionUtil.selectCell(getContext(),getSNode(),getCellId());
          }
        }
      }
));
      configuration.add(Synchronizers.forProperty(mySelectedItem,new WritableProperty<Boolean>(){
        public void set(        Boolean isSelected){
          if (isSelected) {
            for (            View view : Sequence.fromIterable(JetpadUtils.getAllChildren(targetView))) {
              if (view.focused().get()) {
                return;
              }
            }
            targetView.container().focusedView().set(targetView);
          }
 else           if (!(isSelected) && targetView.focused().get()) {
            targetView.container().focusedView().set(null);
          }
        }
      }
));
      configuration.add(Synchronizers.forProperty(targetView.bounds(),new WritableProperty<Rectangle>(){
        public void set(        Rectangle rect){
          DiagramCell diagramCell=getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          setX(rect.origin.x + diagramCell.getX());
          setY(rect.origin.y + diagramCell.getY());
          setWidth(rect.dimension.x);
          setHeight(rect.dimension.y);
        }
      }
));
    }
  }
;
}
