{
  super("Replace deprecated LinkList operations with collections operations");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace 'add All' with nlist<> 'addAll' ";
    }
    public String getAdditionalInfo(){
      return "replace 'add All' with nlist<> 'addAll' ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.LinkList_AddAllOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode addAll=SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation");
      SLinkOperations.setTarget(addAll,"argument",SLinkOperations.getTarget(node,"childNodes",true),true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace 'add' with nlist<> 'add' ";
    }
    public String getAdditionalInfo(){
      return "replace 'add' with nlist<> 'add' ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.LinkList_AddChildOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode add=SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.AddElementOperation");
      SLinkOperations.setTarget(add,"argument",SLinkOperations.getTarget(node,"childNode",true),true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace 'count' with nlist<> 'size' ";
    }
    public String getAdditionalInfo(){
      return "replace 'count' with nlist<> 'size' ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.LinkList_GetCountOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace 'insert first' with nlist<> 'addFirst' ";
    }
    public String getAdditionalInfo(){
      return "replace 'insert first' with nlist<> 'addFirst' ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.LinkList_InsertChildFirstOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode addFirst=SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation");
      SLinkOperations.setTarget(addFirst,"argument",SLinkOperations.getTarget(node,"childNode",true),true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace 'remove All' with nlist<> 'clear' ";
    }
    public String getAdditionalInfo(){
      return "replace 'remove All' with nlist<> 'clear' ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.LinkList_RemoveAllChildrenOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
