{
  Element rootElement=new Element(ModelPersistence.MODEL);
  rootElement.setAttribute(ModelPersistence.MODEL_UID,sourceModel.getUID().toString());
  Element persistenceElement=new Element(ModelPersistence.PERSISTENCE);
  persistenceElement.setAttribute(ModelPersistence.PERSISTENCE_VERSION,getModelPersistenceVersion() + "");
  rootElement.addContent(persistenceElement);
  if (validate) {
    sourceModel.validateLanguagesAndImports();
  }
  RefactoringHistory history=sourceModel.getRefactoringHistory();
  rootElement.addContent(history.toElement());
  Set<String> writtenAspects=new HashSet<String>();
  for (  String languageNamespace : sourceModel.getExplicitlyImportedLanguages()) {
    Element languageElem=new Element(ModelPersistence.LANGUAGE);
    languageElem.setAttribute(ModelPersistence.NAMESPACE,languageNamespace);
    rootElement.addContent(languageElem);
  }
  for (  ImportElement aspectElement : sourceModel.getLanguageAspectModelElements()) {
    SModelReference modelReference=aspectElement.getModelUID();
    if (!writtenAspects.contains(modelReference.toString())) {
      writtenAspects.add(modelReference.toString());
      writeAspect(sourceModel,rootElement,modelReference);
    }
  }
  for (  String languageNamespace : sourceModel.getEngagedOnGenerationLanguages()) {
    Element languageElem=new Element(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);
    languageElem.setAttribute(ModelPersistence.NAMESPACE,languageNamespace);
    rootElement.addContent(languageElem);
  }
  for (  String devkitNamespace : sourceModel.getDevKitNamespaces()) {
    Element devkitElem=new Element(ModelPersistence.DEVKIT);
    devkitElem.setAttribute(ModelPersistence.NAMESPACE,devkitNamespace);
    rootElement.addContent(devkitElem);
  }
  Element maxRefID=new Element(ModelPersistence.MAX_IMPORT_INDEX);
  maxRefID.setAttribute(ModelPersistence.VALUE,"" + sourceModel.getMaxImportIndex());
  rootElement.addContent(maxRefID);
  Iterator<ImportElement> imports=sourceModel.importElements();
  while (imports.hasNext()) {
    ImportElement importElement=imports.next();
    Element importElem=new Element(ModelPersistence.IMPORT_ELEMENT);
    importElem.setAttribute(ModelPersistence.MODEL_IMPORT_INDEX,"" + importElement.getReferenceID());
    SModelReference modelReference=importElement.getModelUID();
    importElem.setAttribute(ModelPersistence.MODEL_UID,modelReference.toString());
    importElem.setAttribute(ModelPersistence.VERSION,"" + importElement.getUsedVersion());
    int version=-1;
    SModelDescriptor importedModelDescriptor=SModelRepository.getInstance().getModelDescriptor(modelReference);
    if (importedModelDescriptor != null) {
      version=importedModelDescriptor.getVersion();
    }
    if (version > -1) {
      importElem.setAttribute(ModelPersistence.VERSION,version + "");
    }
    rootElement.addContent(importElem);
  }
  VisibleModelElements visibleModelElements=new VisibleModelElements(rootElement);
  SNode log=sourceModel.getLog();
  if (log != null) {
    saveNode(rootElement,ModelPersistence.REFACTORING_LOG,log,false,visibleModelElements);
  }
  Iterator<SNode> iterator=sourceModel.roots();
  while (iterator.hasNext()) {
    SNode semanticNode=iterator.next();
    saveNode(rootElement,semanticNode,visibleModelElements);
  }
  Document document=new Document();
  document.setRootElement(rootElement);
  return document;
}
