{
  if (SNodeOperations.getParent(expression) == thisNode && SNodeOperations.hasRole(expression,"jetbrains.mps.baseLanguage.structure.IMethodCall","actualArgument")) {
    SNode method=SLinkOperations.getTarget(thisNode,"baseMethodDeclaration",false);
    int i=SNodeOperations.getIndexInParent(expression);
    if (i < ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count()) {
      SNode parameterDeclaration=ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).getElement(i);
      SNode rawType=SNodeOperations.copyNode(SLinkOperations.getTarget(parameterDeclaration,"type",true));
      SNode instanceType=IMethodCall_Behavior.call_getInstanceType_8008512149545154471(thisNode);
      if ((instanceType == null)) {
        return rawType;
      }
      SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
{
        GeneratedMatchingPattern pattern_5753_0=new IMethodCall_Behavior.Pattern_5753_0(methodClassifier);
        SNode coercedNode_5753_0=TypeChecker.getInstance().getRuntimeSupport().coerce_(instanceType,pattern_5753_0);
        if (coercedNode_5753_0 != null) {
          SNode resultType;
          if (SNodeOperations.isInstanceOf(rawType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
            resultType=IMethodCall_Behavior.call_getConcreteType_8008512149545161843(thisNode,SNodeOperations.cast(rawType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),coercedNode_5753_0,methodClassifier);
          }
 else {
            for (            SNode typeVariableReference : SNodeOperations.getDescendants(rawType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})) {
              SNode concreteType=IMethodCall_Behavior.call_getConcreteType_8008512149545161843(thisNode,typeVariableReference,coercedNode_5753_0,methodClassifier);
              SNodeOperations.replaceWithAnother(typeVariableReference,concreteType);
            }
            resultType=rawType;
          }
          return resultType;
        }
 else {
          return rawType;
        }
      }
    }
  }
  return null;
}
