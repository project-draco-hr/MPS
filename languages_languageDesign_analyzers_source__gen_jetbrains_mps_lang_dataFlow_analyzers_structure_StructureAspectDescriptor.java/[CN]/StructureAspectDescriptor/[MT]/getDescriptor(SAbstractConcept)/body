{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0mb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAnalysisDirection;
      }
    break;
case 1:
  if (true) {
    return myConceptAnalyzer;
  }
break;
case 2:
if (true) {
return myConceptAnalyzerConstructorParameter;
}
break;
case 3:
if (true) {
return myConceptAnalyzerConstructorParameterReference;
}
break;
case 4:
if (true) {
return myConceptAnalyzerFunFunction;
}
break;
case 5:
if (true) {
return myConceptAnalyzerFunParameterInput;
}
break;
case 6:
if (true) {
return myConceptAnalyzerFunParameterProgramState;
}
break;
case 7:
if (true) {
return myConceptAnalyzerFunctionResultType;
}
break;
case 8:
if (true) {
return myConceptAnalyzerInitialFunction;
}
break;
case 9:
if (true) {
return myConceptAnalyzerMergeFunction;
}
break;
case 10:
if (true) {
return myConceptAnalyzerMergeParameterInput;
}
break;
case 11:
if (true) {
return myConceptAnalyzerParameterProgram;
}
break;
case 12:
if (true) {
return myConceptAnalyzerRunnerAnalyzeOperation;
}
break;
case 13:
if (true) {
return myConceptAnalyzerRunnerClassKeeper;
}
break;
case 14:
if (true) {
return myConceptAnalyzerRunnerCreator;
}
break;
case 15:
if (true) {
return myConceptAnalyzerRunnerType;
}
break;
case 16:
if (true) {
return myConceptAnalyzerTypeAnnotation;
}
break;
case 17:
if (true) {
return myConceptApplicableCondition;
}
break;
case 18:
if (true) {
return myConceptApplicableNodeReference;
}
break;
case 19:
if (true) {
return myConceptBackwardDirection;
}
break;
case 20:
if (true) {
return myConceptConceptCondition;
}
break;
case 21:
if (true) {
return myConceptEmitInstruction;
}
break;
case 22:
if (true) {
return myConceptForwardDirection;
}
break;
case 23:
if (true) {
return myConceptInsertAfterPosition;
}
break;
case 24:
if (true) {
return myConceptInsertBeforePosition;
}
break;
case 25:
if (true) {
return myConceptInsertPosition;
}
break;
case 26:
if (true) {
return myConceptInstruction;
}
break;
case 27:
if (true) {
return myConceptInstructionClassKeeper;
}
break;
case 28:
if (true) {
return myConceptInstructionParameter;
}
break;
case 29:
if (true) {
return myConceptInstructionReference;
}
break;
case 30:
if (true) {
return myConceptIsOperation;
}
break;
case 31:
if (true) {
return myConceptPatternCondition;
}
break;
case 32:
if (true) {
return myConceptRule;
}
break;
case 33:
if (true) {
return myConceptRuleReference;
}
break;
default :
}
}
return null;
}
