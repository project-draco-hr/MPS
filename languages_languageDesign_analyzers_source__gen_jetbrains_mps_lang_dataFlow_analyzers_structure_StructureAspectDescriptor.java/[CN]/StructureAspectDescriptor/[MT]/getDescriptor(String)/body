{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterInput","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterProgramState","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunctionResultType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerInitialFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeFunction","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeParameterInput","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerParameterProgram","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerAnalyzeOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerCreator","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"analyzer"});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableNodeReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"applicableNode"});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.BackwardDirection","jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection",false,new String[]{"jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.ConceptCondition","jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition",false,new String[]{"jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"concept"});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.EmitInstruction","jetbrains.mps.lang.pattern.structure.ActionStatement",false,new String[]{"jetbrains.mps.lang.pattern.structure.ActionStatement"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.ForwardDirection","jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection",false,new String[]{"jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertAfterPosition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertBeforePosition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertPosition","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.Instruction","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionParameter","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"instruction"});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.IsOperation","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"instruction"});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.PatternCondition","jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition",false,new String[]{"jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition"},new String[]{},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.Rule","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"analyzer"});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.dataFlow.analyzers.structure.RuleReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"rule"});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
