{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"initialFunction","mergeFunction","funFunction","direction","latticeElementType","instruction"},new boolean[]{false,false,false,false,false,true}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("fun","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterInput").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("input","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterProgramState").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("state","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunctionResultType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("lattice element type","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerInitialFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("initial","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("merge","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeParameterInput").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("input","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerParameterProgram").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("program","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerAnalyzeOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").alias("analyze","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerCreator").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("analyzer").children(new String[]{"nodeToCheck"},new boolean[]{false}).alias("runner","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("analyzerRunner","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableNodeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("applicableNode").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.BackwardDirection").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").alias("backward","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ConceptCondition").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition","jetbrains.mps.lang.core.structure.INamedConcept").references("concept").alias("concept =","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.EmitInstruction").super_("jetbrains.mps.lang.pattern.structure.ActionStatement").parents("jetbrains.mps.lang.pattern.structure.ActionStatement").children(new String[]{"instructionRef","target","position"},new boolean[]{false,false,false}).alias("insert","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ForwardDirection").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").alias("forward","").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertAfterPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertBeforePosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Instruction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parameter"},new boolean[]{true}).create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"},new boolean[]{false}).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("instruction").children(new String[]{"argument"},new boolean[]{true}).create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.IsOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("instruction").children(new String[]{"left"},new boolean[]{false}).alias("is","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.PatternCondition").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").children(new String[]{"pattern"},new boolean[]{false}).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Rule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").references("analyzer").children(new String[]{"actions","condition"},new boolean[]{false,false}).create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.RuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("rule").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
