{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AnalysisDirection:
    return myConceptAnalysisDirection;
case LanguageConceptSwitch.Analyzer:
  return myConceptAnalyzer;
case LanguageConceptSwitch.AnalyzerConstructorParameter:
return myConceptAnalyzerConstructorParameter;
case LanguageConceptSwitch.AnalyzerConstructorParameterReference:
return myConceptAnalyzerConstructorParameterReference;
case LanguageConceptSwitch.AnalyzerFunFunction:
return myConceptAnalyzerFunFunction;
case LanguageConceptSwitch.AnalyzerFunParameterInput:
return myConceptAnalyzerFunParameterInput;
case LanguageConceptSwitch.AnalyzerFunParameterProgramState:
return myConceptAnalyzerFunParameterProgramState;
case LanguageConceptSwitch.AnalyzerFunParameterStateValues:
return myConceptAnalyzerFunParameterStateValues;
case LanguageConceptSwitch.AnalyzerFunctionResultType:
return myConceptAnalyzerFunctionResultType;
case LanguageConceptSwitch.AnalyzerInitialFunction:
return myConceptAnalyzerInitialFunction;
case LanguageConceptSwitch.AnalyzerMergeFunction:
return myConceptAnalyzerMergeFunction;
case LanguageConceptSwitch.AnalyzerMergeParameterInput:
return myConceptAnalyzerMergeParameterInput;
case LanguageConceptSwitch.AnalyzerParameterProgram:
return myConceptAnalyzerParameterProgram;
case LanguageConceptSwitch.AnalyzerRunnerAnalyzeOperation:
return myConceptAnalyzerRunnerAnalyzeOperation;
case LanguageConceptSwitch.AnalyzerRunnerClassKeeper:
return myConceptAnalyzerRunnerClassKeeper;
case LanguageConceptSwitch.AnalyzerRunnerCreator:
return myConceptAnalyzerRunnerCreator;
case LanguageConceptSwitch.AnalyzerRunnerType:
return myConceptAnalyzerRunnerType;
case LanguageConceptSwitch.ApplicableCondition:
return myConceptApplicableCondition;
case LanguageConceptSwitch.ApplicableNodeReference:
return myConceptApplicableNodeReference;
case LanguageConceptSwitch.BackwardDirection:
return myConceptBackwardDirection;
case LanguageConceptSwitch.ConceptCondition:
return myConceptConceptCondition;
case LanguageConceptSwitch.CustomInstructionsContainer:
return myConceptCustomInstructionsContainer;
case LanguageConceptSwitch.CustomInstructionsContainerReference:
return myConceptCustomInstructionsContainerReference;
case LanguageConceptSwitch.EmitInstruction:
return myConceptEmitInstruction;
case LanguageConceptSwitch.ForwardDirection:
return myConceptForwardDirection;
case LanguageConceptSwitch.InsertAfterPosition:
return myConceptInsertAfterPosition;
case LanguageConceptSwitch.InsertBeforePosition:
return myConceptInsertBeforePosition;
case LanguageConceptSwitch.InsertPosition:
return myConceptInsertPosition;
case LanguageConceptSwitch.Instruction:
return myConceptInstruction;
case LanguageConceptSwitch.InstructionClassKeeper:
return myConceptInstructionClassKeeper;
case LanguageConceptSwitch.InstructionParameter:
return myConceptInstructionParameter;
case LanguageConceptSwitch.InstructionReference:
return myConceptInstructionReference;
case LanguageConceptSwitch.IsOperation:
return myConceptIsOperation;
case LanguageConceptSwitch.PatternCondition:
return myConceptPatternCondition;
case LanguageConceptSwitch.ProgramParameter:
return myConceptProgramParameter;
case LanguageConceptSwitch.Rule:
return myConceptRule;
case LanguageConceptSwitch.RuleReference:
return myConceptRuleReference;
default :
return null;
}
}
