{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAnalysisDirection;
case 1:
  return myConceptAnalyzer;
case 2:
return myConceptAnalyzerConstructorParameter;
case 3:
return myConceptAnalyzerConstructorParameterReference;
case 4:
return myConceptAnalyzerFunFunction;
case 5:
return myConceptAnalyzerFunParameterInput;
case 6:
return myConceptAnalyzerFunParameterProgramState;
case 7:
return myConceptAnalyzerFunParameterStateValues;
case 8:
return myConceptAnalyzerFunctionResultType;
case 9:
return myConceptAnalyzerInitialFunction;
case 10:
return myConceptAnalyzerMergeFunction;
case 11:
return myConceptAnalyzerMergeParameterInput;
case 12:
return myConceptAnalyzerParameterProgram;
case 13:
return myConceptAnalyzerRunnerAnalyzeOperation;
case 14:
return myConceptAnalyzerRunnerClassKeeper;
case 15:
return myConceptAnalyzerRunnerCreator;
case 16:
return myConceptAnalyzerRunnerType;
case 17:
return myConceptApplicableCondition;
case 18:
return myConceptApplicableNodeReference;
case 19:
return myConceptBackwardDirection;
case 20:
return myConceptConceptCondition;
case 21:
return myConceptCustomInstructionsContainer;
case 22:
return myConceptCustomInstructionsContainerReference;
case 23:
return myConceptEmitInstruction;
case 24:
return myConceptForwardDirection;
case 25:
return myConceptInsertAfterPosition;
case 26:
return myConceptInsertBeforePosition;
case 27:
return myConceptInsertPosition;
case 28:
return myConceptInstruction;
case 29:
return myConceptInstructionClassKeeper;
case 30:
return myConceptInstructionParameter;
case 31:
return myConceptInstructionReference;
case 32:
return myConceptIsOperation;
case 33:
return myConceptPatternCondition;
case 34:
return myConceptProgramParameter;
case 35:
return myConceptRule;
case 36:
return myConceptRuleReference;
default :
throw new IllegalStateException();
}
}
