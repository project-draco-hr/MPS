{
  List<SNode> methods=new ArrayList<SNode>();
  ClassifierAndSuperClassifiersScope scope=new ClassifierAndSuperClassifiersScope(((ClassConcept)SNodeOperations.getAdapter(thisNode)),IClassifiersSearchScope.INSTANCE_METHOD);
  List<SNode> methodDeclarations=BaseAdapter.toNodes(scope.getAdapters(InstanceMethodDeclaration.class));
  for (  SNode method : ((List<SNode>)methodDeclarations)) {
    SNode cls=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    if (cls == thisNode) {
      continue;
    }
    if (!(SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      continue;
    }
    if (SPropertyOperations.getBoolean(method,"isFinal")) {
      continue;
    }
    if (SPropertyOperations.getBoolean(method,"isAbstract")) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"visibility",true),"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      continue;
    }
    ListSequence.fromList(methods).addElement(method);
  }
  return methods;
}
