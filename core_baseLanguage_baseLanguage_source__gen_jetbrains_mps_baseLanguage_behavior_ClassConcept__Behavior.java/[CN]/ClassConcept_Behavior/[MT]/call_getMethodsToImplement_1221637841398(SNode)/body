{
  List<SNode> methods=new ArrayList<SNode>();
  ClassifierAndSuperClassifiersScope scope=new ClassifierAndSuperClassifiersScope(((ClassConcept)SNodeOperations.getAdapter(thisNode)),IClassifiersSearchScope.INSTANCE_METHOD);
  for (  SNode method : scope.getNodes()) {
    boolean isOverridden=false;
    for (    SNode overridingMethod : BaseAdapter.toNodes(scope.getOverriddenMethods(((InstanceMethodDeclaration)SNodeOperations.getAdapter(method))))) {
      isOverridden=isOverridden || (SNodeOperations.isInstanceOf(overridingMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SConceptPropertyOperations.getBoolean(SNodeOperations.cast(overridingMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"abstract"));
    }
    if (isOverridden) {
      continue;
    }
    SNode container=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    if (container == thisNode || container == null) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(container,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(method,"isAbstract")) {
      ListSequence.fromList(methods).addElement(method);
    }
  }
  return methods;
}
