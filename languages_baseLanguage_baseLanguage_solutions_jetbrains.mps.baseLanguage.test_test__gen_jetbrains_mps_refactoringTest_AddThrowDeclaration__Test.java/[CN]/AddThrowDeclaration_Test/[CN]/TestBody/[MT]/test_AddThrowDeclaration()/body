{
  this.addNodeById("1230052902926");
  this.addNodeById("1230052902935");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052902928"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"throwsItem",true)).addElement(_quotation_createNode_imjg6i_a0a1a0());
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052902928"),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
  ref.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052902927"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052902936"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
