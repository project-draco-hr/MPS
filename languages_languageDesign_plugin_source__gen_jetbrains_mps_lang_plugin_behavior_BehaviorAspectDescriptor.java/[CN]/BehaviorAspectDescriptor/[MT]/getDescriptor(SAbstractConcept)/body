{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0uc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractToolKeystroke__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myActionDataParameterDeclaration__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myActionDataParameterReferenceOperation__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myActionDeclaration__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myActionGroupDeclaration__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myActionParameter__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myActionParameterDeclaration__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myActionParameterReference__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myActionParameterReferenceOperation__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myActionType__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myBaseNodeBlock__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myBaseToolDeclaration__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myBuildGroupBlock__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myConceptFunctionParameter_AnActionEvent__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myConceptFunctionParameter_Concept__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myConceptFunctionParameter_IModule__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myConceptFunctionParameter_MPSProject__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myConceptFunctionParameter_Model__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myConceptFunctionParameter_OperationContext__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myConceptFunctionParameter_Project__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myConceptFunctionParameter_SConceptClass__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myConceptFunctionParameter_node__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myConceptsBlock__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myCreateBlock__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myCreateNodeAspectBlock__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myCustomCondition__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myDisposeBlock__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myDoUpdateBlock__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myEditorTab__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myEnumerateChildrenFunction__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myExecuteBlock__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myGetComponentBlock__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myGetNodeBlock__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myGetNodesBlock__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myGroupAnchor__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myGroupType__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myIdeaInitializerDescriptor__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myIdeaPluginDependency__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myInitBlock__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myIsApplicableBlock__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myIsApplicableTabBlock__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myKeyMapKeystroke__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myKeymapChangesDeclaration__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myListenBlock__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myMPSPluginDependency__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myNumberToolShortcut__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myOldConceptsBlock__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myOldCreateBlock__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myOnAfterReadBlock__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myOnBeforeWriteBlock__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myOrder__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myOrderConstraints__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myOrderReference__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myParameterizedShortcutChange__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myPersistentPropertyDeclaration__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myPersistentPropertyReference__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myPluginDependency__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myPreferencePage__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myPreferencePageCommitBlock__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myPreferencePageIsModifiedBlock__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myPreferencePageResetBlock__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myPreferencesComponentDeclaration__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myPreferencesComponentType__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return mySimpleShortcutChange__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myToStringConceptFunction__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return myToolKeystroke__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return myToolType__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return myUpdateBlock__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return myUpdateGroupFunction__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
