{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return myActionDeclaration__BehaviorDescriptor;
case 1:
  return myDoUpdateBlock__BehaviorDescriptor;
case 2:
return myConceptFunctionParameter_AnActionEvent__BehaviorDescriptor;
case 3:
return myExecuteBlock__BehaviorDescriptor;
case 4:
return myActionGroupDeclaration__BehaviorDescriptor;
case 5:
return myGroupAnchor__BehaviorDescriptor;
case 6:
return myGetNodeBlock__BehaviorDescriptor;
case 7:
return myGetNodesBlock__BehaviorDescriptor;
case 8:
return myConceptFunctionParameter_node__BehaviorDescriptor;
case 9:
return myConceptFunctionParameter_OperationContext__BehaviorDescriptor;
case 10:
return myConceptFunctionParameter_IModule__BehaviorDescriptor;
case 11:
return myConceptFunctionParameter_MPSProject__BehaviorDescriptor;
case 12:
return myActionParameterDeclaration__BehaviorDescriptor;
case 13:
return myUpdateBlock__BehaviorDescriptor;
case 14:
return myIsApplicableBlock__BehaviorDescriptor;
case 15:
return myActionType__BehaviorDescriptor;
case 16:
return myActionParameterReferenceOperation__BehaviorDescriptor;
case 17:
return myBuildGroupBlock__BehaviorDescriptor;
case 18:
return myKeyMapKeystroke__BehaviorDescriptor;
case 19:
return myGroupType__BehaviorDescriptor;
case 20:
return myToolType__BehaviorDescriptor;
case 21:
return myPreferencesComponentDeclaration__BehaviorDescriptor;
case 22:
return myPersistentPropertyDeclaration__BehaviorDescriptor;
case 23:
return myPersistentPropertyReference__BehaviorDescriptor;
case 24:
return myPreferencesComponentType__BehaviorDescriptor;
case 25:
return myOnBeforeWriteBlock__BehaviorDescriptor;
case 26:
return myOnAfterReadBlock__BehaviorDescriptor;
case 27:
return myPreferencePage__BehaviorDescriptor;
case 28:
return myPreferencePageResetBlock__BehaviorDescriptor;
case 29:
return myPreferencePageCommitBlock__BehaviorDescriptor;
case 30:
return myPreferencePageIsModifiedBlock__BehaviorDescriptor;
case 31:
return myInitBlock__BehaviorDescriptor;
case 32:
return myDisposeBlock__BehaviorDescriptor;
case 33:
return myConceptFunctionParameter_Project__BehaviorDescriptor;
case 34:
return myGetComponentBlock__BehaviorDescriptor;
case 35:
return myActionDataParameterDeclaration__BehaviorDescriptor;
case 36:
return myActionDataParameterReferenceOperation__BehaviorDescriptor;
case 37:
return myActionParameter__BehaviorDescriptor;
case 38:
return myToStringConceptFunction__BehaviorDescriptor;
case 39:
return myUpdateGroupFunction__BehaviorDescriptor;
case 40:
return myEnumerateChildrenFunction__BehaviorDescriptor;
case 41:
return myMPSPluginDependency__BehaviorDescriptor;
case 42:
return myKeymapChangesDeclaration__BehaviorDescriptor;
case 43:
return myActionParameterReference__BehaviorDescriptor;
case 44:
return myOrderConstraints__BehaviorDescriptor;
case 45:
return myOrder__BehaviorDescriptor;
case 46:
return myOrderReference__BehaviorDescriptor;
case 47:
return myCreateNodeAspectBlock__BehaviorDescriptor;
case 48:
return myEditorTab__BehaviorDescriptor;
case 49:
return myIsApplicableTabBlock__BehaviorDescriptor;
case 50:
return myBaseNodeBlock__BehaviorDescriptor;
case 51:
return myListenBlock__BehaviorDescriptor;
case 52:
return myIdeaInitializerDescriptor__BehaviorDescriptor;
case 53:
return myCustomCondition__BehaviorDescriptor;
case 54:
return myConceptFunctionParameter_Model__BehaviorDescriptor;
case 55:
return myPluginDependency__BehaviorDescriptor;
case 56:
return myIdeaPluginDependency__BehaviorDescriptor;
case 57:
return myParameterizedShortcutChange__BehaviorDescriptor;
case 58:
return myBaseToolDeclaration__BehaviorDescriptor;
case 59:
return myGetConceptsBlock__BehaviorDescriptor;
case 60:
return myNewCreateBlock__BehaviorDescriptor;
case 61:
return myConceptFunctionParameter_Concept__BehaviorDescriptor;
default :
return null;
}
}
