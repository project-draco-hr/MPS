{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0we,conceptFqName)) {
case 0:
    return myConceptAbstractCheckingRule;
case 1:
  return myConceptAbstractComparableStatement;
case 2:
return myConceptAbstractEquationStatement;
case 3:
return myConceptAbstractInequationStatement;
case 4:
return myConceptAbstractOverloadedOpsTypeRule;
case 5:
return myConceptAbstractRule;
case 6:
return myConceptAbstractSubtypingRule;
case 7:
return myConceptAddDependencyStatement;
case 8:
return myConceptApplicableNodeCondition;
case 9:
return myConceptApplicableNodeReference;
case 10:
return myConceptAssertStatement;
case 11:
return myConceptAttributedNodeExpression;
case 12:
return myConceptCaretPositionOperation;
case 13:
return myConceptCoerceExpression;
case 14:
return myConceptCoerceStatement;
case 15:
return myConceptCoerceStrongExpression;
case 16:
return myConceptComparisonRule;
case 17:
return myConceptConceptClauseLinkInfo;
case 18:
return myConceptConceptFunctionParameter_ContextNode;
case 19:
return myConceptConceptFunctionParameter_EditorContext;
case 20:
return myConceptConceptFunctionParameter_Role;
case 21:
return myConceptConceptFunctionParameter_Selection;
case 22:
return myConceptConceptFunctionParameter_isAggregation;
case 23:
return myConceptConceptFunctionParameter_node;
case 24:
return myConceptConceptFunctionParameter_var;
case 25:
return myConceptConceptReference;
case 26:
return myConceptCreateComparableEquationStatement;
case 27:
return myConceptCreateComparableEquationStatementStrong;
case 28:
return myConceptCreateEquationStatement;
case 29:
return myConceptCreateGreaterThanInequationStatement;
case 30:
return myConceptCreateLessThanInequationStatement;
case 31:
return myConceptCreateStrongGreaterThanInequationStatement;
case 32:
return myConceptCreateStrongLessThanInequationStatement;
case 33:
return myConceptDefaultGroupReference;
case 34:
return myConceptErrorInfoExpression;
case 35:
return myConceptGetOperationType;
case 36:
return myConceptIRuleWithOneNode;
case 37:
return myConceptIRuleWithTwoNodes;
case 38:
return myConceptImmediateSupertypesExpression;
case 39:
return myConceptInequationReference;
case 40:
return myConceptInequationReplacementRule;
case 41:
return myConceptInferenceRule;
case 42:
return myConceptInfoStatement;
case 43:
return myConceptInfoStatementAnnotation;
case 44:
return myConceptIsReplacementRuleApplicable_ConceptFunction;
case 45:
return myConceptIsStrongSubtypeExpression;
case 46:
return myConceptIsSubtypeExpression;
case 47:
return myConceptJoinContainer;
case 48:
return myConceptJoinType;
case 49:
return myConceptLeftOperandType_parameter;
case 50:
return myConceptLinkPatternVariableReference;
case 51:
return myConceptMatchStatement;
case 52:
return myConceptMatchStatementItem;
case 53:
return myConceptMeetContainer;
case 54:
return myConceptMeetType;
case 55:
return myConceptMessageStatement;
case 56:
return myConceptMessageStatementAnnotation;
case 57:
return myConceptMessageTarget;
case 58:
return myConceptMultipleForeachLoop;
case 59:
return myConceptMultipleForeachLoopVariable;
case 60:
return myConceptNodeInfo;
case 61:
return myConceptNode_InferTypeOperation;
case 62:
return myConceptNode_TypeOperation;
case 63:
return myConceptNonTypesystemRule;
case 64:
return myConceptNormalTypeClause;
case 65:
return myConceptOperation_parameter;
case 66:
return myConceptOrStatement;
case 67:
return myConceptOriginalNodeId;
case 68:
return myConceptOverloadedOpIsApplicableFunction;
case 69:
return myConceptOverloadedOpRulesContainer;
case 70:
return myConceptOverloadedOpTypeRule_OneTypeSpecified;
case 71:
return myConceptOverloadedOperatorTypeFunction;
case 72:
return myConceptOverloadedOperatorTypeRule;
case 73:
return myConceptOverridesConceptFunction;
case 74:
return myConceptPatternCondition;
case 75:
return myConceptPatternVariableReference;
case 76:
return myConceptPrintToTrace;
case 77:
return myConceptProcessed;
case 78:
return myConceptPropertyMessageTarget;
case 79:
return myConceptPropertyNameTarget;
case 80:
return myConceptPropertyPatternVariableReference;
case 81:
return myConceptQuickFixArgument;
case 82:
return myConceptQuickFixArgumentReference;
case 83:
return myConceptQuickFixDescriptionBlock;
case 84:
return myConceptQuickFixExecuteBlock;
case 85:
return myConceptQuickFixField;
case 86:
return myConceptQuickFixFieldReference;
case 87:
return myConceptQuickFixSetSelectionBlock;
case 88:
return myConceptReferenceMessageTarget;
case 89:
return myConceptReferenceRoleTarget;
case 90:
return myConceptReplacementRuleReference;
case 91:
return myConceptReportErrorStatement;
case 92:
return myConceptReportErrorStatementAnnotation;
case 93:
return myConceptRightOperandType_parameter;
case 94:
return myConceptRuntimeErrorType;
case 95:
return myConceptRuntimeHoleType;
case 96:
return myConceptRuntimeListVariable;
case 97:
return myConceptRuntimeTypeVariable;
case 98:
return myConceptSelectionType;
case 99:
return myConceptSubstituteTypeRule;
case 100:
return myConceptSubstituteTypeRuleFunction;
case 101:
return myConceptSubstituteTypeRuleFunction_OriginalNode;
case 102:
return myConceptSubtypingRule;
case 103:
return myConceptSupersedeConceptFunction;
case 104:
return myConceptTypeCheckerAccessExpression;
case 105:
return myConceptTypeClause;
case 106:
return myConceptTypeOfExpression;
case 107:
return myConceptTypeVarDeclaration;
case 108:
return myConceptTypeVarReference;
case 109:
return myConceptTypesystemIntention;
case 110:
return myConceptTypesystemIntentionArgument;
case 111:
return myConceptTypesystemQuickFix;
case 112:
return myConceptVariableConverterItem;
case 113:
return myConceptVariableConverterItem_ApplicableBlock;
case 114:
return myConceptVariableConverterItem_ConvertBlock;
case 115:
return myConceptVariableConvertersContainer;
case 116:
return myConceptWarningStatement;
case 117:
return myConceptWarningStatementAnnotation;
case 118:
return myConceptWasSelectedNodeOperation;
case 119:
return myConceptWhenConcreteStatement;
case 120:
return myConceptWhenConcreteVariableDeclaration;
case 121:
return myConceptWhenConcreteVariableReference;
default :
return null;
}
}
