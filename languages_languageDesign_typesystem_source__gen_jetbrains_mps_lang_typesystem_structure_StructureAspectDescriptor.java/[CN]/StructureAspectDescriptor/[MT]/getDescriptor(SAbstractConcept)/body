{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ve.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractCheckingRule;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractComparableStatement;
  }
break;
case 2:
if (true) {
return myConceptAbstractEquationStatement;
}
break;
case 3:
if (true) {
return myConceptAbstractInequationStatement;
}
break;
case 4:
if (true) {
return myConceptAbstractOverloadedOpsTypeRule;
}
break;
case 5:
if (true) {
return myConceptAbstractRule;
}
break;
case 6:
if (true) {
return myConceptAbstractSubtypingRule;
}
break;
case 7:
if (true) {
return myConceptAddDependencyStatement;
}
break;
case 8:
if (true) {
return myConceptApplicableNodeCondition;
}
break;
case 9:
if (true) {
return myConceptApplicableNodeReference;
}
break;
case 10:
if (true) {
return myConceptAssertStatement;
}
break;
case 11:
if (true) {
return myConceptAttributedNodeExpression;
}
break;
case 12:
if (true) {
return myConceptCaretPositionOperation;
}
break;
case 13:
if (true) {
return myConceptCoerceExpression;
}
break;
case 14:
if (true) {
return myConceptCoerceStatement;
}
break;
case 15:
if (true) {
return myConceptCoerceStrongExpression;
}
break;
case 16:
if (true) {
return myConceptComparisonRule;
}
break;
case 17:
if (true) {
return myConceptConceptClauseLinkInfo;
}
break;
case 18:
if (true) {
return myConceptConceptFunctionParameter_ContextNode;
}
break;
case 19:
if (true) {
return myConceptConceptFunctionParameter_EditorContext;
}
break;
case 20:
if (true) {
return myConceptConceptFunctionParameter_Role;
}
break;
case 21:
if (true) {
return myConceptConceptFunctionParameter_Selection;
}
break;
case 22:
if (true) {
return myConceptConceptFunctionParameter_isAggregation;
}
break;
case 23:
if (true) {
return myConceptConceptFunctionParameter_node;
}
break;
case 24:
if (true) {
return myConceptConceptFunctionParameter_var;
}
break;
case 25:
if (true) {
return myConceptConceptReference;
}
break;
case 26:
if (true) {
return myConceptCreateComparableEquationStatement;
}
break;
case 27:
if (true) {
return myConceptCreateComparableEquationStatementStrong;
}
break;
case 28:
if (true) {
return myConceptCreateEquationStatement;
}
break;
case 29:
if (true) {
return myConceptCreateGreaterThanInequationStatement;
}
break;
case 30:
if (true) {
return myConceptCreateLessThanInequationStatement;
}
break;
case 31:
if (true) {
return myConceptCreateStrongGreaterThanInequationStatement;
}
break;
case 32:
if (true) {
return myConceptCreateStrongLessThanInequationStatement;
}
break;
case 33:
if (true) {
return myConceptDefaultGroupReference;
}
break;
case 34:
if (true) {
return myConceptErrorInfoExpression;
}
break;
case 35:
if (true) {
return myConceptGetOperationType;
}
break;
case 36:
if (true) {
return myConceptIRuleWithOneNode;
}
break;
case 37:
if (true) {
return myConceptIRuleWithTwoNodes;
}
break;
case 38:
if (true) {
return myConceptImmediateSupertypesExpression;
}
break;
case 39:
if (true) {
return myConceptInequationReference;
}
break;
case 40:
if (true) {
return myConceptInequationReplacementRule;
}
break;
case 41:
if (true) {
return myConceptInferenceRule;
}
break;
case 42:
if (true) {
return myConceptInfoStatement;
}
break;
case 43:
if (true) {
return myConceptInfoStatementAnnotation;
}
break;
case 44:
if (true) {
return myConceptIsApplicableConceptFunction;
}
break;
case 45:
if (true) {
return myConceptIsReplacementRuleApplicable_ConceptFunction;
}
break;
case 46:
if (true) {
return myConceptIsStrongSubtypeExpression;
}
break;
case 47:
if (true) {
return myConceptIsSubtypeExpression;
}
break;
case 48:
if (true) {
return myConceptJoinContainer;
}
break;
case 49:
if (true) {
return myConceptJoinType;
}
break;
case 50:
if (true) {
return myConceptLeftOperandType_parameter;
}
break;
case 51:
if (true) {
return myConceptLinkPatternVariableReference;
}
break;
case 52:
if (true) {
return myConceptMatchStatement;
}
break;
case 53:
if (true) {
return myConceptMatchStatementItem;
}
break;
case 54:
if (true) {
return myConceptMeetContainer;
}
break;
case 55:
if (true) {
return myConceptMeetType;
}
break;
case 56:
if (true) {
return myConceptMessageStatement;
}
break;
case 57:
if (true) {
return myConceptMessageStatementAnnotation;
}
break;
case 58:
if (true) {
return myConceptMessageTarget;
}
break;
case 59:
if (true) {
return myConceptMultipleForeachLoop;
}
break;
case 60:
if (true) {
return myConceptMultipleForeachLoopVariable;
}
break;
case 61:
if (true) {
return myConceptNodeInfo;
}
break;
case 62:
if (true) {
return myConceptNode_InferTypeOperation;
}
break;
case 63:
if (true) {
return myConceptNode_TypeOperation;
}
break;
case 64:
if (true) {
return myConceptNonTypesystemRule;
}
break;
case 65:
if (true) {
return myConceptNormalTypeClause;
}
break;
case 66:
if (true) {
return myConceptOperation_parameter;
}
break;
case 67:
if (true) {
return myConceptOrStatement;
}
break;
case 68:
if (true) {
return myConceptOriginalNodeId;
}
break;
case 69:
if (true) {
return myConceptOverloadedOpIsApplicableFunction;
}
break;
case 70:
if (true) {
return myConceptOverloadedOpRulesContainer;
}
break;
case 71:
if (true) {
return myConceptOverloadedOpTypeRule_OneTypeSpecified;
}
break;
case 72:
if (true) {
return myConceptOverloadedOperatorTypeFunction;
}
break;
case 73:
if (true) {
return myConceptOverloadedOperatorTypeRule;
}
break;
case 74:
if (true) {
return myConceptOverridesConceptFunction;
}
break;
case 75:
if (true) {
return myConceptPatternCondition;
}
break;
case 76:
if (true) {
return myConceptPatternVariableReference;
}
break;
case 77:
if (true) {
return myConceptPrintToTrace;
}
break;
case 78:
if (true) {
return myConceptProcessed;
}
break;
case 79:
if (true) {
return myConceptPropertyMessageTarget;
}
break;
case 80:
if (true) {
return myConceptPropertyNameTarget;
}
break;
case 81:
if (true) {
return myConceptPropertyPatternVariableReference;
}
break;
case 82:
if (true) {
return myConceptQuickFixArgument;
}
break;
case 83:
if (true) {
return myConceptQuickFixArgumentReference;
}
break;
case 84:
if (true) {
return myConceptQuickFixDescriptionBlock;
}
break;
case 85:
if (true) {
return myConceptQuickFixExecuteBlock;
}
break;
case 86:
if (true) {
return myConceptQuickFixField;
}
break;
case 87:
if (true) {
return myConceptQuickFixFieldReference;
}
break;
case 88:
if (true) {
return myConceptQuickFixSetSelectionBlock;
}
break;
case 89:
if (true) {
return myConceptReferenceMessageTarget;
}
break;
case 90:
if (true) {
return myConceptReferenceRoleTarget;
}
break;
case 91:
if (true) {
return myConceptReplacementRuleReference;
}
break;
case 92:
if (true) {
return myConceptReportErrorStatement;
}
break;
case 93:
if (true) {
return myConceptReportErrorStatementAnnotation;
}
break;
case 94:
if (true) {
return myConceptRightOperandType_parameter;
}
break;
case 95:
if (true) {
return myConceptRuntimeErrorType;
}
break;
case 96:
if (true) {
return myConceptRuntimeHoleType;
}
break;
case 97:
if (true) {
return myConceptRuntimeListVariable;
}
break;
case 98:
if (true) {
return myConceptRuntimeTypeVariable;
}
break;
case 99:
if (true) {
return myConceptSelectionType;
}
break;
case 100:
if (true) {
return myConceptSubstituteTypeRule;
}
break;
case 101:
if (true) {
return myConceptSubtypingRule;
}
break;
case 102:
if (true) {
return myConceptSupersedeConceptFunction;
}
break;
case 103:
if (true) {
return myConceptTypeCheckerAccessExpression;
}
break;
case 104:
if (true) {
return myConceptTypeClause;
}
break;
case 105:
if (true) {
return myConceptTypeOfExpression;
}
break;
case 106:
if (true) {
return myConceptTypeVarDeclaration;
}
break;
case 107:
if (true) {
return myConceptTypeVarReference;
}
break;
case 108:
if (true) {
return myConceptTypesystemIntention;
}
break;
case 109:
if (true) {
return myConceptTypesystemIntentionArgument;
}
break;
case 110:
if (true) {
return myConceptTypesystemQuickFix;
}
break;
case 111:
if (true) {
return myConceptVariableConverterItem;
}
break;
case 112:
if (true) {
return myConceptVariableConverterItem_ApplicableBlock;
}
break;
case 113:
if (true) {
return myConceptVariableConverterItem_ConvertBlock;
}
break;
case 114:
if (true) {
return myConceptVariableConvertersContainer;
}
break;
case 115:
if (true) {
return myConceptWarningStatement;
}
break;
case 116:
if (true) {
return myConceptWarningStatementAnnotation;
}
break;
case 117:
if (true) {
return myConceptWasSelectedNodeOperation;
}
break;
case 118:
if (true) {
return myConceptWhenConcreteStatement;
}
break;
case 119:
if (true) {
return myConceptWhenConcreteVariableDeclaration;
}
break;
case 120:
if (true) {
return myConceptWhenConcreteVariableReference;
}
break;
default :
}
}
return null;
}
