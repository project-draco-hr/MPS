{
  return Arrays.asList(myConceptAbstractCheckingRule,myConceptAbstractComparableStatement,myConceptAbstractEquationStatement,myConceptAbstractInequationStatement,myConceptAbstractOverloadedOpsTypeRule,myConceptAbstractRule,myConceptAbstractSubtypingRule,myConceptAddDependencyStatement,myConceptApplicableNodeCondition,myConceptApplicableNodeReference,myConceptAssertStatement,myConceptCaretPositionOperation,myConceptCoerceExpression,myConceptCoerceStatement,myConceptCoerceStrongExpression,myConceptComparisonRule,myConceptConceptClauseLinkInfo,myConceptConceptFunctionParameter_BlockingComputationNode,myConceptConceptFunctionParameter_ContextNode,myConceptConceptFunctionParameter_DependentComputationNode,myConceptConceptFunctionParameter_EditorContext,myConceptConceptFunctionParameter_Role,myConceptConceptFunctionParameter_Selection,myConceptConceptFunctionParameter_isAggregation,myConceptConceptFunctionParameter_node,myConceptConceptFunctionParameter_var,myConceptConceptReference,myConceptConceptTypeClause,myConceptCreateComparableEquationStatement,myConceptCreateComparableEquationStatementStrong,myConceptCreateEquationStatement,myConceptCreateGreaterThanInequationStatement,myConceptCreateLessThanInequationStatement,myConceptCreateStrongGreaterThanInequationStatement,myConceptCreateStrongLessThanInequationStatement,myConceptDefaultGroupReference,myConceptDependency,myConceptDependentComputationItem,myConceptDependentComputationItem_ApplicableBlock,myConceptDependentComputationItem_BlockingBlock,myConceptDependentComputationItem_FindMasterBlock,myConceptErrorInfoExpression,myConceptFindSourceBlock,myConceptFindSourceBlockParameter,myConceptGetOperationType,myConceptIRuleWithOneNode,myConceptIRuleWithTwoNodes,myConceptImmediateSupertypesExpression,myConceptInequationReference,myConceptInequationReplacementRule,myConceptInferenceRule,myConceptInfoStatement,myConceptInfoStatementAnnotation,myConceptIsReplacementRuleApplicable_ConceptFunction,myConceptIsStrongSubtypeExpression,myConceptIsSubtypeExpression,myConceptJoinContainer,myConceptJoinType,myConceptLeftOperandType_parameter,myConceptLinkPatternVariableReference,myConceptListVarDeclaration,myConceptMatchStatement,myConceptMatchStatementItem,myConceptMeetContainer,myConceptMeetType,myConceptMessageStatement,myConceptMessageStatementAnnotation,myConceptMessageTarget,myConceptMultipleForeachLoop,myConceptMultipleForeachLoopVariable,myConceptNodeInfo,myConceptNode_InferTypeOperation,myConceptNode_TypeOperation,myConceptNonTypesystemRule,myConceptNormalTypeClause,myConceptOperationContextExpression,myConceptOperation_parameter,myConceptOrStatement,myConceptOriginalNodeId,myConceptOverloadedOpIsApplicableFunction,myConceptOverloadedOpRulesContainer,myConceptOverloadedOpTypeRule_OneTypeSpecified,myConceptOverloadedOperatorTypeFunction,myConceptOverloadedOperatorTypeRule,myConceptPatternCondition,myConceptPatternVariableReference,myConceptPrintToTrace,myConceptProcessed,myConceptPropertyMessageTarget,myConceptPropertyNameTarget,myConceptPropertyPatternVariableReference,myConceptQuickFixArgument,myConceptQuickFixArgumentReference,myConceptQuickFixDescriptionBlock,myConceptQuickFixExecuteBlock,myConceptQuickFixField,myConceptQuickFixFieldReference,myConceptQuickFixSetSelectionBlock,myConceptReferenceMessageTarget,myConceptReferenceRoleTarget,myConceptReplacementRuleReference,myConceptReportErrorStatement,myConceptReportErrorStatementAnnotation,myConceptRightOperandType_parameter,myConceptRuntimeErrorType,myConceptRuntimeHoleType,myConceptRuntimeListVariable,myConceptRuntimeTypeVariable,myConceptSelectionType,myConceptSubtypingRule,myConceptTypeCheckerAccessExpression,myConceptTypeClause,myConceptTypeOfExpression,myConceptTypeVarDeclaration,myConceptTypeVarReference,myConceptTypesystemIntention,myConceptTypesystemIntentionArgument,myConceptTypesystemQuickFix,myConceptVariableConverterItem,myConceptVariableConverterItem_ApplicableBlock,myConceptVariableConverterItem_ConvertBlock,myConceptVariableConvertersContainer,myConceptWarningStatement,myConceptWarningStatementAnnotation,myConceptWasSelectedNodeOperation,myConceptWhenConcreteStatement,myConceptWhenConcreteVariableDeclaration,myConceptWhenConcreteVariableReference);
}
