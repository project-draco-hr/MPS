{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractCheckingRule:
    return myConceptAbstractCheckingRule;
case LanguageConceptSwitch.AbstractComparableStatement:
  return myConceptAbstractComparableStatement;
case LanguageConceptSwitch.AbstractEquationStatement:
return myConceptAbstractEquationStatement;
case LanguageConceptSwitch.AbstractInequationStatement:
return myConceptAbstractInequationStatement;
case LanguageConceptSwitch.AbstractOverloadedOpsTypeRule:
return myConceptAbstractOverloadedOpsTypeRule;
case LanguageConceptSwitch.AbstractRule:
return myConceptAbstractRule;
case LanguageConceptSwitch.AbstractSubtypingRule:
return myConceptAbstractSubtypingRule;
case LanguageConceptSwitch.AddDependencyStatement:
return myConceptAddDependencyStatement;
case LanguageConceptSwitch.ApplicableNodeCondition:
return myConceptApplicableNodeCondition;
case LanguageConceptSwitch.ApplicableNodeReference:
return myConceptApplicableNodeReference;
case LanguageConceptSwitch.AssertStatement:
return myConceptAssertStatement;
case LanguageConceptSwitch.AttributedNodeExpression:
return myConceptAttributedNodeExpression;
case LanguageConceptSwitch.CaretPositionOperation:
return myConceptCaretPositionOperation;
case LanguageConceptSwitch.CoerceExpression:
return myConceptCoerceExpression;
case LanguageConceptSwitch.CoerceStatement:
return myConceptCoerceStatement;
case LanguageConceptSwitch.CoerceStrongExpression:
return myConceptCoerceStrongExpression;
case LanguageConceptSwitch.ComparisonRule:
return myConceptComparisonRule;
case LanguageConceptSwitch.ConceptClauseLinkInfo:
return myConceptConceptClauseLinkInfo;
case LanguageConceptSwitch.ConceptFunctionParameter_ContextNode:
return myConceptConceptFunctionParameter_ContextNode;
case LanguageConceptSwitch.ConceptFunctionParameter_EditorContext:
return myConceptConceptFunctionParameter_EditorContext;
case LanguageConceptSwitch.ConceptFunctionParameter_Role:
return myConceptConceptFunctionParameter_Role;
case LanguageConceptSwitch.ConceptFunctionParameter_Selection:
return myConceptConceptFunctionParameter_Selection;
case LanguageConceptSwitch.ConceptFunctionParameter_isAggregation:
return myConceptConceptFunctionParameter_isAggregation;
case LanguageConceptSwitch.ConceptFunctionParameter_node:
return myConceptConceptFunctionParameter_node;
case LanguageConceptSwitch.ConceptFunctionParameter_var:
return myConceptConceptFunctionParameter_var;
case LanguageConceptSwitch.ConceptReference:
return myConceptConceptReference;
case LanguageConceptSwitch.CreateComparableEquationStatement:
return myConceptCreateComparableEquationStatement;
case LanguageConceptSwitch.CreateComparableEquationStatementStrong:
return myConceptCreateComparableEquationStatementStrong;
case LanguageConceptSwitch.CreateEquationStatement:
return myConceptCreateEquationStatement;
case LanguageConceptSwitch.CreateGreaterThanInequationStatement:
return myConceptCreateGreaterThanInequationStatement;
case LanguageConceptSwitch.CreateLessThanInequationStatement:
return myConceptCreateLessThanInequationStatement;
case LanguageConceptSwitch.CreateStrongGreaterThanInequationStatement:
return myConceptCreateStrongGreaterThanInequationStatement;
case LanguageConceptSwitch.CreateStrongLessThanInequationStatement:
return myConceptCreateStrongLessThanInequationStatement;
case LanguageConceptSwitch.DefaultGroupReference:
return myConceptDefaultGroupReference;
case LanguageConceptSwitch.ErrorInfoExpression:
return myConceptErrorInfoExpression;
case LanguageConceptSwitch.GetOperationType:
return myConceptGetOperationType;
case LanguageConceptSwitch.IRuleWithOneNode:
return myConceptIRuleWithOneNode;
case LanguageConceptSwitch.IRuleWithTwoNodes:
return myConceptIRuleWithTwoNodes;
case LanguageConceptSwitch.ImmediateSupertypesExpression:
return myConceptImmediateSupertypesExpression;
case LanguageConceptSwitch.InequationReference:
return myConceptInequationReference;
case LanguageConceptSwitch.InequationReplacementRule:
return myConceptInequationReplacementRule;
case LanguageConceptSwitch.InferenceRule:
return myConceptInferenceRule;
case LanguageConceptSwitch.InfoStatement:
return myConceptInfoStatement;
case LanguageConceptSwitch.InfoStatementAnnotation:
return myConceptInfoStatementAnnotation;
case LanguageConceptSwitch.IsApplicableConceptFunction:
return myConceptIsApplicableConceptFunction;
case LanguageConceptSwitch.IsReplacementRuleApplicable_ConceptFunction:
return myConceptIsReplacementRuleApplicable_ConceptFunction;
case LanguageConceptSwitch.IsStrongSubtypeExpression:
return myConceptIsStrongSubtypeExpression;
case LanguageConceptSwitch.IsSubtypeExpression:
return myConceptIsSubtypeExpression;
case LanguageConceptSwitch.JoinContainer:
return myConceptJoinContainer;
case LanguageConceptSwitch.JoinType:
return myConceptJoinType;
case LanguageConceptSwitch.LeftOperandType_parameter:
return myConceptLeftOperandType_parameter;
case LanguageConceptSwitch.LinkPatternVariableReference:
return myConceptLinkPatternVariableReference;
case LanguageConceptSwitch.MatchStatement:
return myConceptMatchStatement;
case LanguageConceptSwitch.MatchStatementItem:
return myConceptMatchStatementItem;
case LanguageConceptSwitch.MeetContainer:
return myConceptMeetContainer;
case LanguageConceptSwitch.MeetType:
return myConceptMeetType;
case LanguageConceptSwitch.MessageStatement:
return myConceptMessageStatement;
case LanguageConceptSwitch.MessageStatementAnnotation:
return myConceptMessageStatementAnnotation;
case LanguageConceptSwitch.MessageTarget:
return myConceptMessageTarget;
case LanguageConceptSwitch.MultipleForeachLoop:
return myConceptMultipleForeachLoop;
case LanguageConceptSwitch.MultipleForeachLoopVariable:
return myConceptMultipleForeachLoopVariable;
case LanguageConceptSwitch.NodeInfo:
return myConceptNodeInfo;
case LanguageConceptSwitch.Node_InferTypeOperation:
return myConceptNode_InferTypeOperation;
case LanguageConceptSwitch.Node_TypeOperation:
return myConceptNode_TypeOperation;
case LanguageConceptSwitch.NonTypesystemRule:
return myConceptNonTypesystemRule;
case LanguageConceptSwitch.NormalTypeClause:
return myConceptNormalTypeClause;
case LanguageConceptSwitch.Operation_parameter:
return myConceptOperation_parameter;
case LanguageConceptSwitch.OrStatement:
return myConceptOrStatement;
case LanguageConceptSwitch.OriginalNodeId:
return myConceptOriginalNodeId;
case LanguageConceptSwitch.OverloadedOpIsApplicableFunction:
return myConceptOverloadedOpIsApplicableFunction;
case LanguageConceptSwitch.OverloadedOpRulesContainer:
return myConceptOverloadedOpRulesContainer;
case LanguageConceptSwitch.OverloadedOpTypeRule_OneTypeSpecified:
return myConceptOverloadedOpTypeRule_OneTypeSpecified;
case LanguageConceptSwitch.OverloadedOperatorTypeFunction:
return myConceptOverloadedOperatorTypeFunction;
case LanguageConceptSwitch.OverloadedOperatorTypeRule:
return myConceptOverloadedOperatorTypeRule;
case LanguageConceptSwitch.OverridesConceptFunction:
return myConceptOverridesConceptFunction;
case LanguageConceptSwitch.PatternCondition:
return myConceptPatternCondition;
case LanguageConceptSwitch.PatternVariableReference:
return myConceptPatternVariableReference;
case LanguageConceptSwitch.PrintToTrace:
return myConceptPrintToTrace;
case LanguageConceptSwitch.Processed:
return myConceptProcessed;
case LanguageConceptSwitch.PropertyMessageTarget:
return myConceptPropertyMessageTarget;
case LanguageConceptSwitch.PropertyNameTarget:
return myConceptPropertyNameTarget;
case LanguageConceptSwitch.PropertyPatternVariableReference:
return myConceptPropertyPatternVariableReference;
case LanguageConceptSwitch.QuickFixArgument:
return myConceptQuickFixArgument;
case LanguageConceptSwitch.QuickFixArgumentReference:
return myConceptQuickFixArgumentReference;
case LanguageConceptSwitch.QuickFixDescriptionBlock:
return myConceptQuickFixDescriptionBlock;
case LanguageConceptSwitch.QuickFixExecuteBlock:
return myConceptQuickFixExecuteBlock;
case LanguageConceptSwitch.QuickFixField:
return myConceptQuickFixField;
case LanguageConceptSwitch.QuickFixFieldReference:
return myConceptQuickFixFieldReference;
case LanguageConceptSwitch.QuickFixSetSelectionBlock:
return myConceptQuickFixSetSelectionBlock;
case LanguageConceptSwitch.ReferenceMessageTarget:
return myConceptReferenceMessageTarget;
case LanguageConceptSwitch.ReferenceRoleTarget:
return myConceptReferenceRoleTarget;
case LanguageConceptSwitch.ReplacementRuleReference:
return myConceptReplacementRuleReference;
case LanguageConceptSwitch.ReportErrorStatement:
return myConceptReportErrorStatement;
case LanguageConceptSwitch.ReportErrorStatementAnnotation:
return myConceptReportErrorStatementAnnotation;
case LanguageConceptSwitch.RightOperandType_parameter:
return myConceptRightOperandType_parameter;
case LanguageConceptSwitch.RuntimeErrorType:
return myConceptRuntimeErrorType;
case LanguageConceptSwitch.RuntimeHoleType:
return myConceptRuntimeHoleType;
case LanguageConceptSwitch.RuntimeListVariable:
return myConceptRuntimeListVariable;
case LanguageConceptSwitch.RuntimeTypeVariable:
return myConceptRuntimeTypeVariable;
case LanguageConceptSwitch.SelectionType:
return myConceptSelectionType;
case LanguageConceptSwitch.SubstituteTypeRule:
return myConceptSubstituteTypeRule;
case LanguageConceptSwitch.SubtypingRule:
return myConceptSubtypingRule;
case LanguageConceptSwitch.SupersedeConceptFunction:
return myConceptSupersedeConceptFunction;
case LanguageConceptSwitch.TypeCheckerAccessExpression:
return myConceptTypeCheckerAccessExpression;
case LanguageConceptSwitch.TypeClause:
return myConceptTypeClause;
case LanguageConceptSwitch.TypeOfExpression:
return myConceptTypeOfExpression;
case LanguageConceptSwitch.TypeVarDeclaration:
return myConceptTypeVarDeclaration;
case LanguageConceptSwitch.TypeVarReference:
return myConceptTypeVarReference;
case LanguageConceptSwitch.TypesystemIntention:
return myConceptTypesystemIntention;
case LanguageConceptSwitch.TypesystemIntentionArgument:
return myConceptTypesystemIntentionArgument;
case LanguageConceptSwitch.TypesystemQuickFix:
return myConceptTypesystemQuickFix;
case LanguageConceptSwitch.VariableConverterItem:
return myConceptVariableConverterItem;
case LanguageConceptSwitch.VariableConverterItem_ApplicableBlock:
return myConceptVariableConverterItem_ApplicableBlock;
case LanguageConceptSwitch.VariableConverterItem_ConvertBlock:
return myConceptVariableConverterItem_ConvertBlock;
case LanguageConceptSwitch.VariableConvertersContainer:
return myConceptVariableConvertersContainer;
case LanguageConceptSwitch.WarningStatement:
return myConceptWarningStatement;
case LanguageConceptSwitch.WarningStatementAnnotation:
return myConceptWarningStatementAnnotation;
case LanguageConceptSwitch.WasSelectedNodeOperation:
return myConceptWasSelectedNodeOperation;
case LanguageConceptSwitch.WhenConcreteStatement:
return myConceptWhenConcreteStatement;
case LanguageConceptSwitch.WhenConcreteVariableDeclaration:
return myConceptWhenConcreteVariableDeclaration;
case LanguageConceptSwitch.WhenConcreteVariableReference:
return myConceptWhenConcreteVariableReference;
default :
return null;
}
}
