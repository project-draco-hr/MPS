{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.api.lang.structure.DebuggerReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          List<String> debuggerNames=ListSequence.fromList(new ArrayList<String>());
          for (          IDebugger debugger : ListSequence.fromList(Debuggers.getInstance().getDebuggers())) {
            ListSequence.fromList(debuggerNames).addElement(debugger.getName());
          }
          return debuggerNames;
        }
      }
;
      Iterable<String> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode debuggerReference=SNodeFactoryOperations.createNewNode("jetbrains.mps.debugger.api.lang.structure.DebuggerReference",null);
              SPropertyOperations.set(debuggerReference,"debuggerName",(item));
              return debuggerReference;
            }
            public String getMatchingText(            String pattern){
              return "debugger<" + (item) + ">";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return (item) + " Debugger";
            }
          }
);
        }
      }
    }
  }
  return result;
}
