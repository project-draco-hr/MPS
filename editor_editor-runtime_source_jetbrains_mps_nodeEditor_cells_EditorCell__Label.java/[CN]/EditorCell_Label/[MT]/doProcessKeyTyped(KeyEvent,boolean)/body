{
  final int wasPosition=getCaretPosition();
  final CellSide side;
  if (wasPosition == 0) {
    side=CellSide.LEFT;
  }
 else   if (wasPosition == getRenderedText().length()) {
    side=CellSide.RIGHT;
  }
 else {
    side=null;
  }
  myCaretIsVisible=true;
  if (isEditable()) {
    final boolean result[]=new boolean[1];
    String groupId=ModelAccess.instance().runReadAction(new Computable<String>(){
      @Override public String compute(){
        return getCellId() + "_" + getSNode().getSNodeId().toString();
      }
    }
);
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        if (processMutableKeyTyped(keyEvent,allowErrors)) {
          getEditorContext().flushEvents();
          if (isErrorState() && side != null) {
            if (allowsIntelligentInputKeyStroke(keyEvent)) {
              String pattern=getRenderedText();
              IntelligentInputUtil.processCell(EditorCell_Label.this,getEditorContext(),pattern,side);
            }
          }
          result[0]=true;
        }
 else         if (isErrorState() && wasPosition == 0 && keyEvent.getKeyChar() == ' ') {
          result[0]=true;
        }
      }
    }
,null,groupId,false,getOperationContext().getProject());
    getEditor().relayout();
    if (result[0]) {
      return true;
    }
  }
  if (!isEditable() && allowsIntelligentInputKeyStroke(keyEvent)) {
    String pattern=ModelAccess.instance().runReadAction(new Computable<String>(){
      public String compute(){
        return getRenderedTextOn(keyEvent);
      }
    }
);
    if (!pattern.equals(getRenderedText()) && side != null) {
      return IntelligentInputUtil.processCell(this,getEditorContext(),pattern,side);
    }
  }
  return false;
}
