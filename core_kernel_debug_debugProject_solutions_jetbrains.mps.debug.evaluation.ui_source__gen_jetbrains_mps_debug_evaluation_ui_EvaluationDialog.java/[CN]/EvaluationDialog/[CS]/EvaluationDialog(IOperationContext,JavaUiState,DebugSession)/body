{
  super(context.getMainFrame(),"Evaluate");
  this.myContext=context;
  this.myHighlighter=myContext.getProject().getComponent(Highlighter.class);
  myClassFQName=uiState.getStackFrame().getLocation().getUnitName();
  myThreadReference=uiState.getThread().getThread();
  myDebugSession=debugSession;
  this.setSize(new Dimension(500,500));
  this.setModal(false);
  mySessionChangeListener=new EvaluationDialog.MySessionChangeListener();
  debugSession.addChangeListener(mySessionChangeListener);
  this.myEvaluationLogic=AbstractEvaluationLogic.createInstance(context,uiState,debugSession);
  if (myEvaluationLogic.isDeveloperMode()) {
    myEvaluationLogic.addGenerationListener(new _FunctionTypes._void_P1_E0<SNode>(){
      public void invoke(      SNode result){
        EvaluationDialog.this.updateGenerationResultTab(result);
      }
    }
);
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      EvaluationDialog.this.myEditor=new EmbeddableEditor(new ModuleContext(EvaluationDialog.this.myEvaluationLogic.getModule(),EvaluationDialog.this.myEvaluationLogic.getModule().getMPSProject()),EvaluationDialog.this.myEvaluationLogic.getModule(),EvaluationDialog.this.myEvaluationLogic.getRootToShow(),myEvaluationLogic.getNodeToShow(),true);
      for (      Language language : EvaluationDialog.this.myEvaluationLogic.getRequiredLanguages()) {
        EvaluationDialog.this.myEditor.addLanguage(language);
      }
    }
  }
);
  final Wrappers._T<RegularSModelDescriptor> d=new Wrappers._T<RegularSModelDescriptor>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      d.value=myEditor.getModel();
    }
  }
);
  myEvaluationLogic.setModel(d.value);
  myPanel.add(this.myEditor.getComponenet(),BorderLayout.NORTH);
  myTree=new EvaluationDialog.MyTree(myClassFQName,myThreadReference);
  myPanel.add(new JScrollPane(myTree),BorderLayout.CENTER);
  if (myEvaluationLogic.isDeveloperMode()) {
    this.myTabbedPane.addTab("Main",myPanel);
  }
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosed(    WindowEvent event){
      debugSession.removeChangeListener(mySessionChangeListener);
      myHighlighter.removeAdditionalEditor(myEditor.getEditor());
      myEditor.disposeEditor(false);
    }
  }
);
  this.myHighlighter.addAdditionalEditor(myEditor.getEditor());
}
