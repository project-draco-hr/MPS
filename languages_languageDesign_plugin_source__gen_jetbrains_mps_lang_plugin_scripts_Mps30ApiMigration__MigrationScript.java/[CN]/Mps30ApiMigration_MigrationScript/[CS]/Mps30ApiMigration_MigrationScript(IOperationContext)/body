{
  super("OpenAPI Migration");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "SubProgressKind moved to openapi";
    }
    public String getAdditionalInfo(){
      return "SubProgressKind moved to openapi";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.EnumConstantReference";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isEnumClassifierReference(node,"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.progress(MPS.Core/jetbrains.mps.progress@java_stub)","~SubProgressKind");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeId targetNodeId=SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantReference","enumConstantDeclaration")).getTargetNodeId();
      String value=(targetNodeId != null ? targetNodeId.toString() : null);
      if (value == null || value.endsWith("DEFAULT")) {
        StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0c0a0());
      }
 else       if (value.endsWith("AS_COMMENT")) {
        StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0a2a0a());
      }
 else       if (value.endsWith("IGNORED")) {
        StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0b2a0a());
      }
 else       if (value.endsWith("REPLACING")) {
        StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0c2a0a());
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "SubProgressKind moved to openapi";
    }
    public String getAdditionalInfo(){
      return "SubProgressKind moved to openapi";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isReferenceToClass(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","classifier")),"jetbrains.mps.progress.SubProgressKind");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0a1());
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ProgressMonitor.subTask(int)";
    }
    public String getAdditionalInfo(){
      return "ProgressMonitor.subTask(int)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isInstanceMethodCall(node,"jetbrains.mps.progress.ProgressMonitor.subTask(int):jetbrains.mps.progress.ProgressMonitor");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceRefs(node,SLinkOperations.getTarget(_quotation_createNode_kyzgj4_a1a0a0c(),"operation",true));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ProgressMonitor.subTask(int,SubProgressKind)";
    }
    public String getAdditionalInfo(){
      return "ProgressMonitor.subTask(int,SubProgressKind)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isInstanceMethodCall(node,"jetbrains.mps.progress.ProgressMonitor.subTask(int,jetbrains.mps.progress.SubProgressKind):jetbrains.mps.progress.ProgressMonitor");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceRefs(node,SLinkOperations.getTarget(_quotation_createNode_kyzgj4_a1a0a0d(),"operation",true));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ProgressMonitor moved to openapi";
    }
    public String getAdditionalInfo(){
      return "ProgressMonitor moved to openapi";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isReferenceToClass(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","classifier")),"jetbrains.mps.progress.ProgressMonitor");
    }
    public void doUpdateInstanceNode(    SNode node){
      StubRefUtil.replaceRefs(node,_quotation_createNode_kyzgj4_b0a0a4());
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ModuleReference.fromString() -> PersistenceFacade";
    }
    public String getAdditionalInfo(){
      return "ModuleReference.fromString() -> PersistenceFacade";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.StaticMethodCall";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return StubRefUtil.isStaticMethodCall(node,"jetbrains.mps.project.structure.modules.ModuleReference.fromString(java.lang.String):org.jetbrains.mps.openapi.module.SModuleReference");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode arg=SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).first());
      StubRefUtil.replaceNode(node,_quotation_createNode_kyzgj4_b0b0a5(arg));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
