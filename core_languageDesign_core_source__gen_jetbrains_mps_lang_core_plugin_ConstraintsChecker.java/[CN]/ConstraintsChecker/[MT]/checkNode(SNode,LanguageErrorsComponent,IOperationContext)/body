{
  final ModelConstraintsManager cm=ModelConstraintsManager.getInstance();
  if (SNodeOperations.getParent(node) != null) {
    component.addDependency(SNodeOperations.getParent(node));
  }
  if (SNodeOperations.getParent(node) != null && !(jetbrains.mps.smodel.SNodeOperations.isUnknown(SNodeOperations.getParent(node)))) {
    final SNode link=SNodeOperations.getContainingLinkDeclaration(node);
    if (link == null && !(node.isAttribute())) {
      component.addError(node,"Child in a role with unknown link",null);
      return;
    }
    final Method cbcMethod=cm.getCanBeChildMethod(node.getConceptFqName(),operationContext);
    boolean canBeChild=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return cm.canBeChild(SNodeOperations.getConceptDeclaration(node),cbcMethod,operationContext,SNodeOperations.getParent(node),link);
      }
    }
);
    if (!(canBeChild)) {
      SNode rule=cm.getCanBeChildBlock(operationContext,cbcMethod);
      component.addError(node,"Node isn't applicable in the context",rule);
    }
  }
  if (node.isRoot()) {
    final Method method=cm.getCanBeRootMethod(node.getConceptFqName(),operationContext);
    boolean canBeRoot=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return cm.canBeRoot(operationContext,method,SNodeOperations.getModel(node),SNodeOperations.getConceptDeclaration(node));
      }
    }
);
    if (!(canBeRoot)) {
      SNode rule=cm.getCanBeRootBlock(operationContext,method);
      component.addError(node,"Not rootable concept added as root",rule);
    }
  }
  for (  SNode child : SNodeOperations.getChildren(node)) {
    component.addDependency(child);
    final SNode childConcept=SNodeOperations.getConceptDeclaration(child);
    final SNode childLink=SNodeOperations.getContainingLinkDeclaration(child);
    if (childLink == null) {
      continue;
    }
    final Method method=cm.getCanBeParentMethod(node,operationContext);
    boolean canBeParent=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return cm.canBeParent(method,node,childConcept,childLink,operationContext);
      }
    }
);
    if (!(canBeParent)) {
      SNode rule=cm.getCanBeParentBlock(operationContext,method);
      component.addError(node,"Node isn't applicable in the context",rule);
    }
    SNode rule=cm.canBeAncestorReturnBlock(node,childConcept,operationContext);
    if (rule != null) {
      component.addError(child,"Node isn't applicable in the context",rule);
    }
  }
  SNode concept=SNodeOperations.getConceptDeclaration(node);
  component.addDependency(concept);
  ConceptAndSuperConceptsScope chs=new ConceptAndSuperConceptsScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(concept)));
  for (  AbstractConceptDeclaration parentConcept : chs.getConcepts()) {
    component.addDependency(parentConcept.getNode());
  }
  List<PropertyDeclaration> props=chs.getAdapters(PropertyDeclaration.class);
  for (  PropertyDeclaration p : ListSequence.fromList(props)) {
    final PropertySupport ps=PropertySupport.getPropertySupport(p);
    final String propertyName=p.getName();
    if (propertyName == null) {
      LOG.error("Property declaration has a null name, declaration id: " + p.getNode().getSNodeId() + ", model: "+ p.getModel().getSModelFqName());
      continue;
    }
    final String value=ps.fromInternalValue(node.getProperty(propertyName));
    final INodePropertyValidator propertyValidator=ps.getValidator(node,propertyName);
    boolean canSetValue=component.runCheckingAction(new _FunctionTypes._return_P0_E0<Boolean>(){
      public Boolean invoke(){
        return ps.canSetValue(propertyValidator,node,propertyName,value,operationContext.getScope());
      }
    }
);
    if (!(canSetValue)) {
      if ("name".equals(p.getName()) && "AnonymousClass".equals(SPropertyOperations.getString(concept,"name"))) {
        continue;
      }
      component.addError(node,"Property constraint violation for property \"" + p.getName() + "\"",null,new PropertyMessageTarget(p.getName()));
    }
  }
}
