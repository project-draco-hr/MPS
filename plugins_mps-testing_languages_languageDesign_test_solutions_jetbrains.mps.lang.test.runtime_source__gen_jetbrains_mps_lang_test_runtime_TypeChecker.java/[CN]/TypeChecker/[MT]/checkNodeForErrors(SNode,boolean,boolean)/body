{
  Assert.assertFalse("should be false (never used anyway)",allowErrors || allowWarnings);
  ITypeContextOwner owner=new DefaultTypecheckingContextOwner();
  SNode containingRoot=node.getContainingRoot();
  TypeContextManager.getInstance().runTypeCheckingAction(owner,containingRoot,new ITypechecking.Action(){
    @Override public void run(    TypeCheckingContext typeCheckingContext){
      typeCheckingContext.checkIfNotChecked(node,true);
      SNode container=AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.test.structure.NodeCheckOperationsContainer"));
      if (container == null) {
        return;
      }
      for (      SNode operation : SLinkOperations.getTargets(container,"nodeCheckOperations",true)) {
        if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.test.structure.NodeTypeProperty")) {
          SNode type1=typeCheckingContext.getTypeDontCheck(node);
          if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.lang.test.structure.NodeExpectedTypeProperty")) {
            type1=jetbrains.mps.typesystem.inference.TypeChecker.getInstance().getInequalitiesForHole(node,false).getExpectedType();
          }
          SNode type2=SLinkOperations.getTarget(SNodeOperations.cast(operation,"jetbrains.mps.lang.test.structure.NodeTypeProperty"),"type",true);
          TypeChecker.assertTypesAreTheSame(type1,type2);
        }
      }
    }
  }
);
}
