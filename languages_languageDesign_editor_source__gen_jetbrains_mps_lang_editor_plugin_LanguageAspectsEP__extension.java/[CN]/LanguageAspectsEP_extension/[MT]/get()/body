{
  return new LanguageAspectDescriptor(){
    public String getPresentableAspectName(){
      return "editor";
    }
    @NotNull public Collection<SModel> getAspectModels(    final SModule language){
      if (!((language instanceof Language))) {
        return Collections.emptyList();
      }
      Iterable<SModel> allModels=language.getModels();
      return Sequence.fromIterable(allModels).where(new IWhereFilter<SModel>(){
        public boolean accept(        SModel it){
          String fullName=it.getModelName();
          return eq_ecu8yf_a0b0a0a0a0a0c0b0a0a0b(fullName,language.getModuleName() + "." + getPresentableAspectName());
        }
      }
).ofType(SModel.class).toListSequence();
    }
    @NotNull public Collection<SLanguage> getMainLanguages(){
      return ListSequence.fromListAndArray(new ArrayList<SLanguage>(),MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x18bc659203a64e29L,0xa83a7ff23bde13baL),"jetbrains.mps.lang.editor"));
    }
    @Nullable public LanguageAspectGenerator getGenerator(){
      return null;
    }
    @NotNull public Collection<SLanguage> getAdditionalLanguages(){
      return ListSequence.fromListAndArray(new ArrayList<SLanguage>(),MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x272d3b44cc8481eL,0x9e2f07793fbfcb41L),"jetbrains.mps.lang.editor.table"));
    }
    @Nullable public IconResource getIconResource(){
      return ICON;
    }
    @Nullable public String getHelpUrl(){
      return "http://confluence.jetbrains.com/display/MPSD33/Editor";
    }
    public boolean canCreate(    SModule language){
      return CollectionSequence.fromCollection(getAspectModels(language)).isEmpty();
    }
    public void create(    SModule language){
      Language l=((Language)language);
      SModel structureModel=l.getStructureModelDescriptor();
      ModelRoot modelRoot;
      if (structureModel == null) {
        modelRoot=l.getModelRoots().iterator().next();
      }
 else {
        modelRoot=structureModel.getModelRoot();
      }
      SModuleOperations.createModelWithAdjustments(l.getModuleName() + '.' + getPresentableAspectName(),modelRoot);
    }
    private final IconResource ICON=new IconResource("editorModel.png",getClass());
  }
;
}
