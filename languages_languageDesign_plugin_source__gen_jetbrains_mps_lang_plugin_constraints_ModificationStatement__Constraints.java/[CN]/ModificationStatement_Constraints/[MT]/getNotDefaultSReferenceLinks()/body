{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,1204992316090l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,1204992316090l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contents=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(_context.getReferenceNode(),MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,"jetbrains.mps.lang.plugin.structure.ModificationStatement")),MetaAdapterFactory.getReferenceLink(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,1203092736097l,"modifiedGroup")),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1203087890642l,1207145245948l,"contents"));
          if (SNodeOperations.isInstanceOf(contents,MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1207145163717l,"jetbrains.mps.lang.plugin.structure.ElementListContents"))) {
            return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(contents,MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1207145163717l,"jetbrains.mps.lang.plugin.structure.ElementListContents")),MetaAdapterFactory.getContainmentLink(new UUID(2952642368903463569l,-5856357300648461647l),1207145163717l,1207145201301l,"reference"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203680534665l,"jetbrains.mps.lang.plugin.structure.GroupAnchor"));
              }
            }
).toListSequence();
          }
          return new ArrayList<SNode>();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  references.put(MetaIdFactory.refId(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,1203092736097l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(2952642368903463569l,-5856357300648461647l),1203092361741l,1203092736097l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> actionGroupDeclarations=SModelOperations.getRootsIncludingImported(_context.getModel(),"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration");
          SNode groupDeclaration=SNodeOperations.getNodeAncestor(_context.getReferenceNode(),MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203087890642l,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration"),false,false);
          List<SNode> thisGroupChildGroups=((List<SNode>)ListSequence.fromList(SNodeOperations.getNodeDescendants(groupDeclaration,null,false,new SConcept[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(2952642368903463569l,-5856357300648461647l),1203087890642l,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration"));
            }
          }
).toListSequence());
          ListSequence.fromList(thisGroupChildGroups).addElement(groupDeclaration);
          return ListSequence.fromList(actionGroupDeclarations).subtract(ListSequence.fromList(thisGroupChildGroups)).toListSequence();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a2a1;
        }
      }
;
    }
  }
);
  return references;
}
