{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,0x1188f2392baL,"point"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,0x1188f2392baL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contents=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(_context.getReferenceNode(),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,"jetbrains.mps.lang.plugin.structure.ModificationStatement")),MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,0x1181dea4861L,"modifiedGroup")),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,0x1190f76acfcL,"contents"));
          if (SNodeOperations.isInstanceOf(contents,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,"jetbrains.mps.lang.plugin.structure.ElementListContents"))) {
            return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(contents,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,"jetbrains.mps.lang.plugin.structure.ElementListContents")),MetaAdapterFactory.getContainmentLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1190f756bc5L,0x1190f75fe95L,"reference"))).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x11840f36089L,"jetbrains.mps.lang.plugin.structure.GroupAnchor"));
              }
            }
).toListSequence();
          }
          return new ArrayList<SNode>();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  references.put(MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,0x1181dea4861L,"modifiedGroup"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181de4920dL,0x1181dea4861L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> actionGroupDeclarations=SModelOperations.rootsIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration"));
          SNode groupDeclaration=SNodeOperations.getNodeAncestor(_context.getReferenceNode(),MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration"),false,false);
          List<SNode> thisGroupChildGroups=((List<SNode>)ListSequence.fromList(SNodeOperations.getNodeDescendants(groupDeclaration,null,false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0x28f9e4973b424291L,0xaeba0a1039153ab1L,0x1181da058d2L,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration"));
            }
          }
).toListSequence());
          ListSequence.fromList(thisGroupChildGroups).addElement(groupDeclaration);
          return ListSequence.fromList(actionGroupDeclarations).subtract(ListSequence.fromList(thisGroupChildGroups)).toListSequence();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a2a2;
        }
      }
;
    }
  }
);
  return references;
}
