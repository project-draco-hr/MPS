{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("point",new BaseReferenceConstraintsDescriptor("point",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode contents=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(_context.getReferenceNode(),"jetbrains.mps.lang.plugin.structure.ModificationStatement"),"modifiedGroup",false),"contents",true);
          if (SNodeOperations.isInstanceOf(contents,"jetbrains.mps.lang.plugin.structure.ElementListContents")) {
            return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(contents,"jetbrains.mps.lang.plugin.structure.ElementListContents"),"reference",true)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.plugin.structure.GroupAnchor");
              }
            }
).toListSequence();
          }
          return new ArrayList<SNode>();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  references.put("modifiedGroup",new BaseReferenceConstraintsDescriptor("modifiedGroup",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> actionGroupDeclarations=SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration");
          SNode groupDeclaration=SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration",false,false);
          List<SNode> thisGroupChildGroups=((List<SNode>)ListSequence.fromList(SNodeOperations.getDescendants(groupDeclaration,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration");
            }
          }
).toListSequence());
          ListSequence.fromList(thisGroupChildGroups).addElement(groupDeclaration);
          return ListSequence.fromList(actionGroupDeclarations).subtract(ListSequence.fromList(thisGroupChildGroups)).toListSequence();
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_184bjp_a0a1a0a0a1a0b0a2a1;
        }
      }
;
    }
  }
);
  return references;
}
