{
  SLanguage langA=MetaAdapterFactory.getLanguage(MetaIdFactory.langId(239,0),"langA");
  SLanguage langB=MetaAdapterFactory.getLanguage(MetaIdFactory.langId(239,1),"langB");
  final MigrationScript scriptA0=new Migrations_Test.MockMigrationScript(langA,0);
  final MigrationScript scriptB0=new Migrations_Test.MockMigrationScript(langB,0){
    public Iterable<MigrationScriptReference> executeAfter(){
      return Sequence.<MigrationScriptReference>singleton(scriptA0.getDescriptor());
    }
  }
;
  final MigrationScript scriptA1=new Migrations_Test.MockMigrationScript(langA,1){
    public Iterable<MigrationScriptReference> requiresData(){
      return Sequence.<MigrationScriptReference>singleton(scriptB0.getDescriptor());
    }
  }
;
  SModule singleModule=new Migrations_Test.MockModule("singleModule",MapSequence.<SLanguage,Integer>fromMapAndKeysArray(new HashMap<SLanguage,Integer>(),langA,langB).withValues(0,0),Sequence.fromIterable(Collections.<SModule>emptyList()));
  Assert.assertTrue(Sequence.fromIterable(new MigrationScriptApplied(scriptA0,singleModule).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
  Assert.assertFalse(Sequence.fromIterable(new MigrationScriptApplied(scriptB0,singleModule).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
  List<SModule> dep1=ListSequence.fromList(new ArrayList<SModule>());
  List<SModule> dep2=ListSequence.fromList(new ArrayList<SModule>());
  SModule cyclicModule1=new Migrations_Test.MockModule("cyclicModule1",MapSequence.<SLanguage,Integer>fromMapAndKeysArray(new HashMap<SLanguage,Integer>(),langA,langB).withValues(1,0),dep1);
  SModule cyclicModule2=new Migrations_Test.MockModule("cyclicModule2",MapSequence.<SLanguage,Integer>fromMapAndKeysArray(new HashMap<SLanguage,Integer>(),langA,langB).withValues(1,0),dep2);
  ListSequence.fromList(dep1).addElement(cyclicModule2);
  ListSequence.fromList(dep2).addElement(cyclicModule1);
  Assert.assertTrue(Sequence.fromIterable(new MigrationScriptApplied(scriptB0,cyclicModule1).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
  Assert.assertTrue(Sequence.fromIterable(new MigrationScriptApplied(scriptB0,cyclicModule2).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
  Assert.assertFalse(Sequence.fromIterable(new MigrationScriptApplied(scriptA1,cyclicModule1).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
  Assert.assertFalse(Sequence.fromIterable(new MigrationScriptApplied(scriptA1,cyclicModule2).getDependencies()).all(new IWhereFilter<ScriptApplied.ScriptAppliedReference>(){
    public boolean accept(    ScriptApplied.ScriptAppliedReference it){
      return it.isAlreadyDone();
    }
  }
));
}
