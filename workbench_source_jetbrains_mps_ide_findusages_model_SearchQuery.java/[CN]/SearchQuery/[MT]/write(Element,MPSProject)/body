{
  Element scopeXML=new Element(SCOPE);
  if (myScope instanceof GlobalScope) {
    scopeXML.setAttribute(SCOPE_TYPE,SCOPE_TYPE_GLOBAL);
  }
 else   if (myScope instanceof ProjectScope) {
    scopeXML.setAttribute(SCOPE_TYPE,SCOPE_TYPE_PROJECT);
  }
 else   if (myScope instanceof ModuleScope) {
    scopeXML.setAttribute(SCOPE_TYPE,SCOPE_TYPE_MODULE);
    AbstractModule abstractModule=(AbstractModule)((ModuleScope)myScope).getModelOwner();
    if (abstractModule == null) {
      LOG.warning("Owner is not found for module");
      throw new CantSaveSomethingException("Module is not found for module. Maybe the module was deleted.");
    }
    scopeXML.setAttribute(MODULE_ID,abstractModule.getModuleUID());
  }
 else   if (myScope instanceof ModelsScope) {
    scopeXML.setAttribute(SCOPE_TYPE,SCOPE_TYPE_MODELS);
    Element modelsXML=new Element(MODELS);
    for (    SModelDescriptor sModelDescriptor : ((ModelsScope)myScope).getModelDescriptors()) {
      Element modelXML=new Element(MODEL);
      if (sModelDescriptor == null) {
        LOG.warning("No model descriptor for model. Maybe the model was deleted");
        throw new CantSaveSomethingException("Module is not found for module. Maybe the model was deleted");
      }
      modelXML.setAttribute(MODEL_ID,sModelDescriptor.getSModelReference().toString());
      modelsXML.addContent(modelXML);
    }
    scopeXML.addContent(modelsXML);
  }
 else   if (myScope instanceof BootstrapScope) {
    scopeXML.setAttribute(SCOPE_TYPE,SCOPE_TYPE_BOOTSTRAP);
  }
 else {
    throw new CantSaveSomethingException("unsupported scope " + myScope.getClass());
  }
  element.addContent(scopeXML);
  Element holderXML=new Element(HOLDER);
  holderXML.setAttribute(HOLDER_CLASS,myObjectHolder.getClass().getName());
  myObjectHolder.write(holderXML,project);
  element.addContent(holderXML);
}
