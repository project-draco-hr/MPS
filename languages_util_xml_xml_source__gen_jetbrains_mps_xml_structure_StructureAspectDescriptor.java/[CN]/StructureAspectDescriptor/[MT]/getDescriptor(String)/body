{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.Attribute","jetbrains.mps.xml.structure.BaseAttribute",false,new String[]{"jetbrains.mps.xml.structure.BaseAttribute","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"attributeDeclaration"});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.BaseAttribute","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.BaseElement","jetbrains.mps.xml.structure.Content",false,new String[]{"jetbrains.mps.xml.structure.Content"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.BaseText","jetbrains.mps.xml.structure.Content",false,new String[]{"jetbrains.mps.xml.structure.Content"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.CDATA","jetbrains.mps.xml.structure.Content",false,new String[]{"jetbrains.mps.xml.structure.Content"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.ComplexText","jetbrains.mps.xml.structure.BaseText",false,new String[]{"jetbrains.mps.xml.structure.BaseText"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.Content","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.ContentList","jetbrains.mps.xml.structure.Content",false,new String[]{"jetbrains.mps.xml.structure.Content"},new String[]{"isHorizontal"},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.Element","jetbrains.mps.xml.structure.BaseElement",false,new String[]{"jetbrains.mps.xml.structure.BaseElement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"isEmpty"},new String[]{"elementDeclaration"});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.EntityReference","jetbrains.mps.xml.structure.BaseText",false,new String[]{"jetbrains.mps.xml.structure.BaseText"},new String[]{},new String[]{"entityDeclaration"});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.Text","jetbrains.mps.xml.structure.BaseText",false,new String[]{"jetbrains.mps.xml.structure.BaseText","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{"text"},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.xml.structure.XmlRoot",null,true,new String[]{},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
