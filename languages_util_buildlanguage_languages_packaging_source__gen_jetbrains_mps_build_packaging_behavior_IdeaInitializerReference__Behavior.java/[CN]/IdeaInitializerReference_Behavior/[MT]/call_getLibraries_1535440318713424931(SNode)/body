{
  final Map<String,Tuples._2<String,List<IModule>>> libraries=MapSequence.fromMap(new HashMap<String,Tuples._2<String,List<IModule>>>());
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode,"ideaInitializer",false),"library",true)).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode lib){
      List<IModule> modules=ListSequence.fromList(new ArrayList<IModule>());
      MapSequence.fromMap(libraries).put(SPropertyOperations.getString(lib,"name"),MultiTuple.<String,List<IModule>>from(SPropertyOperations.getString(lib,"path"),modules));
      ListSequence.fromList(modules).addSequence(ListSequence.fromList(SLinkOperations.getTargets(lib,"module",true)).select(new ISelector<SNode,IModule>(){
        public IModule select(        SNode m){
          return ModuleReferenceExpression_Behavior.call_getModule_4040588429969043137(m);
        }
      }
));
    }
  }
);
  return libraries;
}
