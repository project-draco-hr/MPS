{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractNodeAssert:
    return myConceptAbstractNodeAssert;
case LanguageConceptSwitch.AbstractNodeErrorCheckOperation:
  return myConceptAbstractNodeErrorCheckOperation;
case LanguageConceptSwitch.AbstractNodeRuleCheckOperation:
return myConceptAbstractNodeRuleCheckOperation;
case LanguageConceptSwitch.AbstractNodeWarningCheckOperation:
return myConceptAbstractNodeWarningCheckOperation;
case LanguageConceptSwitch.ActionReference:
return myConceptActionReference;
case LanguageConceptSwitch.AnonymousCellAnnotation:
return myConceptAnonymousCellAnnotation;
case LanguageConceptSwitch.AssertMatch:
return myConceptAssertMatch;
case LanguageConceptSwitch.BootstrapActionReference:
return myConceptBootstrapActionReference;
case LanguageConceptSwitch.CheckDataFlowOperation:
return myConceptCheckDataFlowOperation;
case LanguageConceptSwitch.CheckNodeDataflow:
return myConceptCheckNodeDataflow;
case LanguageConceptSwitch.CheckNodeForErrorMessagesOperation:
return myConceptCheckNodeForErrorMessagesOperation;
case LanguageConceptSwitch.CheckNodeForErrors:
return myConceptCheckNodeForErrors;
case LanguageConceptSwitch.DragMouseStatement:
return myConceptDragMouseStatement;
case LanguageConceptSwitch.EditorComponentExpression:
return myConceptEditorComponentExpression;
case LanguageConceptSwitch.EditorExpression:
return myConceptEditorExpression;
case LanguageConceptSwitch.EditorOperation:
return myConceptEditorOperation;
case LanguageConceptSwitch.EditorTestCase:
return myConceptEditorTestCase;
case LanguageConceptSwitch.ExpressionContainer:
return myConceptExpressionContainer;
case LanguageConceptSwitch.IChecksRules:
return myConceptIChecksRules;
case LanguageConceptSwitch.INodeAnnotation:
return myConceptINodeAnnotation;
case LanguageConceptSwitch.INodesTestMethod:
return myConceptINodesTestMethod;
case LanguageConceptSwitch.IReferenceAttachable:
return myConceptIReferenceAttachable;
case LanguageConceptSwitch.IRuleReference:
return myConceptIRuleReference;
case LanguageConceptSwitch.InfoStatementReference:
return myConceptInfoStatementReference;
case LanguageConceptSwitch.InvokeActionStatement:
return myConceptInvokeActionStatement;
case LanguageConceptSwitch.InvokeIntentionStatement:
return myConceptInvokeIntentionStatement;
case LanguageConceptSwitch.IsIntentionApplicableExpression:
return myConceptIsIntentionApplicableExpression;
case LanguageConceptSwitch.LogEvent:
return myConceptLogEvent;
case LanguageConceptSwitch.MPSActionReference:
return myConceptMPSActionReference;
case LanguageConceptSwitch.MockAnnotation:
return myConceptMockAnnotation;
case LanguageConceptSwitch.MockScopeProvider:
return myConceptMockScopeProvider;
case LanguageConceptSwitch.ModelExpression:
return myConceptModelExpression;
case LanguageConceptSwitch.NamedNodeReference:
return myConceptNamedNodeReference;
case LanguageConceptSwitch.NodeCheckOperation:
return myConceptNodeCheckOperation;
case LanguageConceptSwitch.NodeConstraintsErrorCheckOperation:
return myConceptNodeConstraintsErrorCheckOperation;
case LanguageConceptSwitch.NodeConstraintsWarningCheckOperation:
return myConceptNodeConstraintsWarningCheckOperation;
case LanguageConceptSwitch.NodeErrorCheckOperation:
return myConceptNodeErrorCheckOperation;
case LanguageConceptSwitch.NodeExpectedTypeCheckOperation:
return myConceptNodeExpectedTypeCheckOperation;
case LanguageConceptSwitch.NodeInfoCheckOperation:
return myConceptNodeInfoCheckOperation;
case LanguageConceptSwitch.NodeOperationsContainer:
return myConceptNodeOperationsContainer;
case LanguageConceptSwitch.NodePropertiesContainer:
return myConceptNodePropertiesContainer;
case LanguageConceptSwitch.NodeReachable:
return myConceptNodeReachable;
case LanguageConceptSwitch.NodeRuleCheckOperation:
return myConceptNodeRuleCheckOperation;
case LanguageConceptSwitch.NodeTypeCheckOperation:
return myConceptNodeTypeCheckOperation;
case LanguageConceptSwitch.NodeTypeSetCheckOperation:
return myConceptNodeTypeSetCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemErrorCheckOperation:
return myConceptNodeTypeSystemErrorCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemRuleCheckOperation:
return myConceptNodeTypeSystemRuleCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemWarningCheckOperation:
return myConceptNodeTypeSystemWarningCheckOperation;
case LanguageConceptSwitch.NodeUnknownErrorCheckOperation:
return myConceptNodeUnknownErrorCheckOperation;
case LanguageConceptSwitch.NodeUnknownWarningCheckOperation:
return myConceptNodeUnknownWarningCheckOperation;
case LanguageConceptSwitch.NodeUnreachable:
return myConceptNodeUnreachable;
case LanguageConceptSwitch.NodeWarningCheckOperation:
return myConceptNodeWarningCheckOperation;
case LanguageConceptSwitch.NodesTestCase:
return myConceptNodesTestCase;
case LanguageConceptSwitch.NodesTestMethod:
return myConceptNodesTestMethod;
case LanguageConceptSwitch.PressKeyStatement:
return myConceptPressKeyStatement;
case LanguageConceptSwitch.PressMouseStatement:
return myConceptPressMouseStatement;
case LanguageConceptSwitch.ProjectExpression:
return myConceptProjectExpression;
case LanguageConceptSwitch.ReportErrorStatementReference:
return myConceptReportErrorStatementReference;
case LanguageConceptSwitch.ScopeEntry:
return myConceptScopeEntry;
case LanguageConceptSwitch.ScopesExpectedNode:
return myConceptScopesExpectedNode;
case LanguageConceptSwitch.ScopesTest:
return myConceptScopesTest;
case LanguageConceptSwitch.SimpleNodeTest:
return myConceptSimpleNodeTest;
case LanguageConceptSwitch.SwitchToInspector:
return myConceptSwitchToInspector;
case LanguageConceptSwitch.TestInfo:
return myConceptTestInfo;
case LanguageConceptSwitch.TestNode:
return myConceptTestNode;
case LanguageConceptSwitch.TestNodeAnnotation:
return myConceptTestNodeAnnotation;
case LanguageConceptSwitch.TestNodeReference:
return myConceptTestNodeReference;
case LanguageConceptSwitch.TypeKeyStatement:
return myConceptTypeKeyStatement;
case LanguageConceptSwitch.UnknownRuleReference:
return myConceptUnknownRuleReference;
case LanguageConceptSwitch.UntypedExpression:
return myConceptUntypedExpression;
case LanguageConceptSwitch.VariableAlive:
return myConceptVariableAlive;
case LanguageConceptSwitch.VariableInitialized:
return myConceptVariableInitialized;
case LanguageConceptSwitch.WarningStatementReference:
return myConceptWarningStatementReference;
default :
return null;
}
}
