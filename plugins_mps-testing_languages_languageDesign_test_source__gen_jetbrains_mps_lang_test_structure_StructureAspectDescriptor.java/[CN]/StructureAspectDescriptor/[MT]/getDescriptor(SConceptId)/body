{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractNodeAssert;
case 1:
  return myConceptAbstractNodeErrorCheckOperation;
case 2:
return myConceptAbstractNodeRuleCheckOperation;
case 3:
return myConceptAbstractNodeWarningCheckOperation;
case 4:
return myConceptActionReference;
case 5:
return myConceptAnonymousCellAnnotation;
case 6:
return myConceptAssertMatch;
case 7:
return myConceptBootstrapActionReference;
case 8:
return myConceptCheckDataFlowOperation;
case 9:
return myConceptCheckNodeDataflow;
case 10:
return myConceptCheckNodeForErrorMessagesOperation;
case 11:
return myConceptCheckNodeForErrors;
case 12:
return myConceptDragMouseStatement;
case 13:
return myConceptEditorComponentExpression;
case 14:
return myConceptEditorExpression;
case 15:
return myConceptEditorOperation;
case 16:
return myConceptEditorTestCase;
case 17:
return myConceptExpressionContainer;
case 18:
return myConceptIChecksRules;
case 19:
return myConceptINodeAnnotation;
case 20:
return myConceptINodesTestMethod;
case 21:
return myConceptIReferenceAttachable;
case 22:
return myConceptIRuleReference;
case 23:
return myConceptInfoStatementReference;
case 24:
return myConceptInvokeActionStatement;
case 25:
return myConceptInvokeIntentionStatement;
case 26:
return myConceptLogEvent;
case 27:
return myConceptMPSActionReference;
case 28:
return myConceptMockAnnotation;
case 29:
return myConceptMockScopeProvider;
case 30:
return myConceptModelExpression;
case 31:
return myConceptNamedNodeReference;
case 32:
return myConceptNodeCheckOperation;
case 33:
return myConceptNodeConstraintsErrorCheckOperation;
case 34:
return myConceptNodeConstraintsWarningCheckOperation;
case 35:
return myConceptNodeErrorCheckOperation;
case 36:
return myConceptNodeExpectedTypeCheckOperation;
case 37:
return myConceptNodeInfoCheckOperation;
case 38:
return myConceptNodeOperationsContainer;
case 39:
return myConceptNodePropertiesContainer;
case 40:
return myConceptNodeReachable;
case 41:
return myConceptNodeRuleCheckOperation;
case 42:
return myConceptNodeTypeCheckOperation;
case 43:
return myConceptNodeTypeSetCheckOperation;
case 44:
return myConceptNodeTypeSystemErrorCheckOperation;
case 45:
return myConceptNodeTypeSystemRuleCheckOperation;
case 46:
return myConceptNodeTypeSystemWarningCheckOperation;
case 47:
return myConceptNodeUnknownErrorCheckOperation;
case 48:
return myConceptNodeUnknownWarningCheckOperation;
case 49:
return myConceptNodeUnreachable;
case 50:
return myConceptNodeWarningCheckOperation;
case 51:
return myConceptNodesTestCase;
case 52:
return myConceptNodesTestMethod;
case 53:
return myConceptPressKeyStatement;
case 54:
return myConceptPressMouseStatement;
case 55:
return myConceptProjectExpression;
case 56:
return myConceptReportErrorStatementReference;
case 57:
return myConceptScopeEntry;
case 58:
return myConceptScopesExpectedNode;
case 59:
return myConceptScopesTest;
case 60:
return myConceptSimpleNodeTest;
case 61:
return myConceptSwitchToInspector;
case 62:
return myConceptTestInfo;
case 63:
return myConceptTestNode;
case 64:
return myConceptTestNodeAnnotation;
case 65:
return myConceptTestNodeReference;
case 66:
return myConceptTypeKeyStatement;
case 67:
return myConceptUnknownRuleReference;
case 68:
return myConceptUntypedExpression;
case 69:
return myConceptVariableAlive;
case 70:
return myConceptVariableInitialized;
case 71:
return myConceptWarningStatementReference;
default :
throw new IllegalStateException();
}
}
