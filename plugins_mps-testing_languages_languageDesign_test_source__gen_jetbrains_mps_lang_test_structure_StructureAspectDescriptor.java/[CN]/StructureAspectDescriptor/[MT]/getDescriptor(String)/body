{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeAssert").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"nodeToCheck"},new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation","jetbrains.mps.lang.test.structure.IChecksRules").abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ActionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation","jetbrains.mps.lang.core.structure.INamedConcept").properties("cellId","caretPosition","isLastPosition","useLabelSelection","selectionStart","selectionEnd","isInInspector").references("nodeRangeSelectionStart","nodeRangeSelectionEnd").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.AssertMatch").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"before","after"},new boolean[]{true,true}).alias("assert match","").staticScope(StaticScope.NONE).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.BootstrapActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").properties("actionId").alias("by id:","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckDataFlowOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("for dataflow messages","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeDataflow").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check node dataflow","").staticScope(StaticScope.NONE).create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").properties("allowErrors","allowWarnings").alias("for error messages","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.CheckNodeForErrors").super_("jetbrains.mps.lang.test.structure.AbstractNodeAssert").parents("jetbrains.mps.lang.test.structure.AbstractNodeAssert").alias("check nodes error messages","").staticScope(StaticScope.NONE).create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.DragMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x","y").alias("drag mouse","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorComponentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor component","").staticScope(StaticScope.NONE).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("editor","").staticScope(StaticScope.NONE).create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.EditorTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase","jetbrains.mps.lang.core.structure.ISuppressErrors").properties("description").children(new String[]{"nodeToEdit","result","code"},new boolean[]{false,false,false}).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ExpressionContainer").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"},new boolean[]{false}).alias("{ expr }","expression container (used inside test nodes)").staticScope(StaticScope.NONE).create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IChecksRules").interface_().create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.INodeAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IReferenceAttachable").interface_().create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.IRuleReference").interface_().references("declaration").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeActionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"actionReference"},new boolean[]{false}).alias("invoke action","").staticScope(StaticScope.NONE).create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.InvokeIntentionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("intention").alias("invoke intention","").staticScope(StaticScope.NONE).create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MPSActionReference").super_("jetbrains.mps.lang.test.structure.ActionReference").parents("jetbrains.mps.lang.test.structure.ActionReference").references("action").alias("->","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.MockAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ModelExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("model","").staticScope(StaticScope.NONE).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeCheckOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod","jetbrains.mps.lang.core.structure.INamedConcept").abstract_().alias("","tag for checking either type errors or error messages, attached to some node").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"},new boolean[]{false}).alias("has constraints error","").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"},new boolean[]{false}).alias("has constraints warning","").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").children(new String[]{"errorRef"},new boolean[]{false}).alias("has error","").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").alias("has expected type","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeOperationsContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeOperations"},new boolean[]{true}).create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodePropertiesContainer").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"nodeCheckOperations"},new boolean[]{true}).create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeReachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("reachable","").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation","jetbrains.mps.lang.test.structure.IReferenceAttachable").abstract_().alias("","check specific rule").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"},new boolean[]{false}).alias("has type","").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"type"},new boolean[]{true}).alias("has type in","").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem error","check for unknown typesystem error").create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeRuleCheckOperation").abstract_().create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation").alias("has typesystem warning","check for unknown typesystem warning").create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"errorRef"},new boolean[]{false}).alias("has error","").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"warningRef"},new boolean[]{false}).alias("has warning","").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeUnreachable").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").alias("unreachable","").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodeWarningCheckOperation").super_("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").parents("jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation").children(new String[]{"warningRef"},new boolean[]{false}).alias("has warning","").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase","jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").children(new String[]{"nodesToCheck","testMethods","methods"},new boolean[]{true,true,true}).create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.NodesTestMethod").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod").abstract_().create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"keyStrokes"},new boolean[]{true}).alias("press keys","").staticScope(StaticScope.NONE).create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.PressMouseStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("x","y").children(new String[]{"statementList"},new boolean[]{false}).alias("press mouse","").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ProjectExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("project","").staticScope(StaticScope.NONE).create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ReportErrorStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference","jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesExpectedNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("ref").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.ScopesTest").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("checkingReference").children(new String[]{"nodes"},new boolean[]{true}).create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SimpleNodeTest").super_("jetbrains.mps.lang.test.structure.NodesTestMethod").parents("jetbrains.mps.lang.test.structure.NodesTestMethod").alias("test method","").create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.SwitchToInspector").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("switch to inspector","").staticScope(StaticScope.NONE).create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestInfo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectPath","uiTest","reOpenProject").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"nodeToCheck"},new boolean[]{false}).alias("test node","").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeAnnotation").super_("jetbrains.mps.lang.test.structure.INodeAnnotation").parents("jetbrains.mps.lang.test.structure.INodeAnnotation","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TestNodeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").staticScope(StaticScope.NONE).create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.TypeKeyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("keys").alias("type","").staticScope(StaticScope.NONE).create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.UnknownRuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.test.structure.IRuleReference").references("declaration").create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableAlive").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"},new boolean[]{false}).alias("variable alive","").create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.VariableInitialized").super_("jetbrains.mps.lang.test.structure.NodeCheckOperation").parents("jetbrains.mps.lang.test.structure.NodeCheckOperation").children(new String[]{"var"},new boolean[]{false}).alias("variable initialized","").create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.test.structure.WarningStatementReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.test.structure.IRuleReference","jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
