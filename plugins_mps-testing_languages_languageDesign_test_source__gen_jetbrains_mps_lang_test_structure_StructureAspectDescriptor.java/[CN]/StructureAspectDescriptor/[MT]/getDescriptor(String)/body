{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.AbstractNodeAssert","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"nodeToCheck"},new boolean[]{false});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ActionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.AnonymousCellAnnotation","jetbrains.mps.lang.test.structure.INodeAnnotattion",false,new String[]{"jetbrains.mps.lang.test.structure.INodeAnnotattion","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"cellId","caretPosition","isLastPosition","useLabelSelection","selectionStart","selectionEnd","isInInspector"},new String[]{"nodeRangeSelectionStart","nodeRangeSelectionEnd"},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.AssertMatch","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"before","after"},new boolean[]{true,true});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.BootstrapActionReference","jetbrains.mps.lang.test.structure.ActionReference",false,new String[]{"jetbrains.mps.lang.test.structure.ActionReference"},new String[]{"actionId"},new String[]{},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.CheckDataFlowOperation","jetbrains.mps.lang.test.structure.NodeOperation",false,new String[]{"jetbrains.mps.lang.test.structure.NodeOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.CheckNodeDataflow","jetbrains.mps.lang.test.structure.AbstractNodeAssert",false,new String[]{"jetbrains.mps.lang.test.structure.AbstractNodeAssert"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.CheckNodeForErrors","jetbrains.mps.lang.test.structure.AbstractNodeAssert",false,new String[]{"jetbrains.mps.lang.test.structure.AbstractNodeAssert"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.EditorComponentExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.EditorExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.EditorOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.EditorTestCase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase","jetbrains.mps.lang.core.structure.ISuppressErrors"},new String[]{"description"},new String[]{},new String[]{"nodeToEdit","result","code"},new boolean[]{false,false,false});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ExpressionContainer","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.INodeAnnotattion","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.InvokeActionStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"actionReference"},new boolean[]{false});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.InvokeIntentionStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"intention"},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.MPSActionReference","jetbrains.mps.lang.test.structure.ActionReference",false,new String[]{"jetbrains.mps.lang.test.structure.ActionReference"},new String[]{},new String[]{"action"},new String[]{},new boolean[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.MockAnnotation","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ModelExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeErrorPropety","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeExpectedTypeProperty","jetbrains.mps.lang.test.structure.NodeTypeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeTypeProperty"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeOperationsContainer","jetbrains.mps.lang.test.structure.INodeAnnotattion",false,new String[]{"jetbrains.mps.lang.test.structure.INodeAnnotattion"},new String[]{},new String[]{},new String[]{"operations"},new boolean[]{true});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodePropertiesContainer","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{"properties"},new boolean[]{true});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeProperty","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeReachable","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeTypeProperty","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeTypeSetProperty","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{true});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeUnreachable","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodeWarningProperty","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodesTestCase","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.classifiers.structure.IClassifier"},new String[]{},new String[]{},new String[]{"nodesToCheck","testMethods","methods"},new boolean[]{true,true,true});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.NodesTestMethod","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.PressKeyStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"keyStrokes"},new boolean[]{true});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ProjectExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ScopesExpectedNode","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"ref"},new String[]{},new boolean[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.ScopesTest","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{"checkingReference"},new String[]{"nodes"},new boolean[]{true});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.SimpleNodeTest","jetbrains.mps.lang.test.structure.NodesTestMethod",false,new String[]{"jetbrains.mps.lang.test.structure.NodesTestMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.SwitchToInspector","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TestInfo","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"projectPath","uiTest","reOpenProject"},new String[]{},new String[]{},new boolean[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TestNode","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"nodeToCheck"},new boolean[]{false});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TestNodeAnnotation","jetbrains.mps.lang.test.structure.INodeAnnotattion",false,new String[]{"jetbrains.mps.lang.test.structure.INodeAnnotattion","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TestNodeReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"declaration"},new String[]{},new boolean[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TypeKeyStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{"keys"},new String[]{},new String[]{},new boolean[]{});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.TypesCheckOperation","jetbrains.mps.lang.test.structure.NodeOperation",false,new String[]{"jetbrains.mps.lang.test.structure.NodeOperation"},new String[]{"operationName","allowErrors","allowWarnings"},new String[]{},new String[]{},new boolean[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.VariableInialized","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{"var"},new boolean[]{false});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.lang.test.structure.VariableLive","jetbrains.mps.lang.test.structure.NodeProperty",false,new String[]{"jetbrains.mps.lang.test.structure.NodeProperty"},new String[]{},new String[]{},new String[]{"var"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
