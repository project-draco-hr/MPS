{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0sc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractNodeAssert;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractNodeErrorCheckOperation;
  }
break;
case 2:
if (true) {
return myConceptAbstractNodeRuleCheckOperation;
}
break;
case 3:
if (true) {
return myConceptAbstractNodeWarningCheckOperation;
}
break;
case 4:
if (true) {
return myConceptActionReference;
}
break;
case 5:
if (true) {
return myConceptAnonymousCellAnnotation;
}
break;
case 6:
if (true) {
return myConceptAssertMatch;
}
break;
case 7:
if (true) {
return myConceptBootstrapActionReference;
}
break;
case 8:
if (true) {
return myConceptCheckDataFlowOperation;
}
break;
case 9:
if (true) {
return myConceptCheckNodeDataflow;
}
break;
case 10:
if (true) {
return myConceptCheckNodeForErrorMessagesOperation;
}
break;
case 11:
if (true) {
return myConceptCheckNodeForErrors;
}
break;
case 12:
if (true) {
return myConceptDragMouseStatement;
}
break;
case 13:
if (true) {
return myConceptEditorComponentExpression;
}
break;
case 14:
if (true) {
return myConceptEditorExpression;
}
break;
case 15:
if (true) {
return myConceptEditorOperation;
}
break;
case 16:
if (true) {
return myConceptEditorTestCase;
}
break;
case 17:
if (true) {
return myConceptExpressionContainer;
}
break;
case 18:
if (true) {
return myConceptIChecksRules;
}
break;
case 19:
if (true) {
return myConceptINodeAnnotation;
}
break;
case 20:
if (true) {
return myConceptIReferenceAttachable;
}
break;
case 21:
if (true) {
return myConceptIRuleReference;
}
break;
case 22:
if (true) {
return myConceptInvokeActionStatement;
}
break;
case 23:
if (true) {
return myConceptInvokeIntentionStatement;
}
break;
case 24:
if (true) {
return myConceptLogEvent;
}
break;
case 25:
if (true) {
return myConceptMPSActionReference;
}
break;
case 26:
if (true) {
return myConceptMockAnnotation;
}
break;
case 27:
if (true) {
return myConceptModelExpression;
}
break;
case 28:
if (true) {
return myConceptNodeCheckOperation;
}
break;
case 29:
if (true) {
return myConceptNodeConstraintsErrorCheckOperation;
}
break;
case 30:
if (true) {
return myConceptNodeConstraintsWarningCheckOperation;
}
break;
case 31:
if (true) {
return myConceptNodeErrorCheckOperation;
}
break;
case 32:
if (true) {
return myConceptNodeExpectedTypeCheckOperation;
}
break;
case 33:
if (true) {
return myConceptNodeOperationsContainer;
}
break;
case 34:
if (true) {
return myConceptNodePropertiesContainer;
}
break;
case 35:
if (true) {
return myConceptNodeReachable;
}
break;
case 36:
if (true) {
return myConceptNodeRuleCheckOperation;
}
break;
case 37:
if (true) {
return myConceptNodeTypeCheckOperation;
}
break;
case 38:
if (true) {
return myConceptNodeTypeSetCheckOperation;
}
break;
case 39:
if (true) {
return myConceptNodeTypeSystemErrorCheckOperation;
}
break;
case 40:
if (true) {
return myConceptNodeTypeSystemRuleCheckOperation;
}
break;
case 41:
if (true) {
return myConceptNodeTypeSystemWarningCheckOperation;
}
break;
case 42:
if (true) {
return myConceptNodeUnknownErrorCheckOperation;
}
break;
case 43:
if (true) {
return myConceptNodeUnknownWarningCheckOperation;
}
break;
case 44:
if (true) {
return myConceptNodeUnreachable;
}
break;
case 45:
if (true) {
return myConceptNodeWarningCheckOperation;
}
break;
case 46:
if (true) {
return myConceptNodesTestCase;
}
break;
case 47:
if (true) {
return myConceptNodesTestMethod;
}
break;
case 48:
if (true) {
return myConceptPressKeyStatement;
}
break;
case 49:
if (true) {
return myConceptPressMouseStatement;
}
break;
case 50:
if (true) {
return myConceptProjectExpression;
}
break;
case 51:
if (true) {
return myConceptReportErrorStatementReference;
}
break;
case 52:
if (true) {
return myConceptScopesExpectedNode;
}
break;
case 53:
if (true) {
return myConceptScopesTest;
}
break;
case 54:
if (true) {
return myConceptSimpleNodeTest;
}
break;
case 55:
if (true) {
return myConceptSwitchToInspector;
}
break;
case 56:
if (true) {
return myConceptTestInfo;
}
break;
case 57:
if (true) {
return myConceptTestNode;
}
break;
case 58:
if (true) {
return myConceptTestNodeAnnotation;
}
break;
case 59:
if (true) {
return myConceptTestNodeReference;
}
break;
case 60:
if (true) {
return myConceptTypeKeyStatement;
}
break;
case 61:
if (true) {
return myConceptUnknownRuleReference;
}
break;
case 62:
if (true) {
return myConceptUntypedExpression;
}
break;
case 63:
if (true) {
return myConceptVariableAlive;
}
break;
case 64:
if (true) {
return myConceptVariableInitialized;
}
break;
case 65:
if (true) {
return myConceptWarningStatementReference;
}
break;
default :
}
}
return null;
}
