{
  for (  SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isAttribute(it));
    }
  }
)) {
    SNode link=SNodeOperations.getContainingLinkDeclaration(child);
    if (link != null && SPropertyOperations.hasValue(link,"metaClass","aggregation","reference")) {
      if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(link,"target",false),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))))) {
        component.addError(node,"incompatible target concept in role \"" + SNodeOperations.getContainingLinkRole(child) + "\"",SNodeOperations.getModel(link).getModelDescriptor());
      }
    }
  }
  for (  SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
    SNode link=SLinkOperations.findLinkDeclaration(reference);
    if (link != null && SPropertyOperations.hasValue(link,"metaClass","reference","reference")) {
      SNode target=SLinkOperations.getTargetNode(reference);
      if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(link,"target",false),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(target))))) {
        component.addError(node,"incompatible target concept in role \"" + SLinkOperations.getRole(reference) + "\"",SNodeOperations.getModel(link).getModelDescriptor());
      }
    }
  }
}
