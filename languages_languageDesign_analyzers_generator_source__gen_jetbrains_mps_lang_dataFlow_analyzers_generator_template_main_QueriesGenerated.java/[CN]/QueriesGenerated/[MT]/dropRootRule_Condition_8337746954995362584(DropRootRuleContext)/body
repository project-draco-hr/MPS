{
  SModule module=_context.getOriginalInputModel().getModule();
  if (!(module instanceof Language)) {
    return true;
  }
  Language ruleLanguage=((Language)module);
  Set<Language> extendedLanguages=LanguageDependenciesManager.getAllExtendedLanguages(ruleLanguage);
  SNode analyzer=SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(),MetaAdapterFactory.getConcept(0x97a52717898f4598L,0x8150573d9fd03868L,0x5faaa6bbd57b6c8L,"jetbrains.mps.lang.dataFlow.analyzers.structure.Rule")),MetaAdapterFactory.getReferenceLink(0x97a52717898f4598L,0x8150573d9fd03868L,0x5faaa6bbd57b6c8L,0x3952cf7bd76e6440L,"analyzer"));
  SModule analyzerModule=SNodeOperations.getModel(analyzer).getModule();
  if (!(analyzerModule instanceof Language)) {
    return true;
  }
  Language analyzerLanguage=((Language)analyzerModule);
  if (analyzerLanguage != ruleLanguage && !(SetSequence.fromSet(extendedLanguages).contains(analyzerLanguage))) {
    return true;
  }
  return false;
}
