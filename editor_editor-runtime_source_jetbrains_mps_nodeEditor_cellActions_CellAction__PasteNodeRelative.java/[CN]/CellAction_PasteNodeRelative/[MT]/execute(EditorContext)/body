{
  LOG.assertLog(context.getRepository().getModelAccess().isCommandAction(),"This action must be performed in command");
  EditorComponent editorComponent=(EditorComponent)context.getEditorComponent();
  EditorCell selectedCell=editorComponent.getSelectedCell();
  SNode anchorNode=selectedCell.getSNode();
  PasteNodeData pasteNodeData=CopyPasteUtil.getPasteNodeDataFromClipboard(anchorNode.getModel());
  if (pasteNodeData == null || pasteNodeData.getNodes().isEmpty()) {
    return;
  }
  List<SNode> pasteNodes=pasteNodeData.getNodes();
  Set<SReference> requireResolveReferences=pasteNodeData.getRequireResolveReferences();
  new NodePaster(pasteNodes).pasteRelative(anchorNode,myPastePlaceHint);
  ResolverComponent.getInstance().resolveScopesOnly(requireResolveReferences,context.getRepository());
  editorComponent.getUpdater().flushModelEvents();
  EditorCell nodeCell=editorComponent.findNodeCell(pasteNodes.get(0));
  if (nodeCell == null)   return;
  EditorCell_Label labelCell=CellFinderUtil.findChildByClass(nodeCell,EditorCell_Label.class,true);
  if (labelCell != null) {
    editorComponent.changeSelection(labelCell);
  }
  if (pasteNodes.size() == 1) {
    editorComponent.pushSelection(nodeCell);
  }
 else {
    SelectionManager selectionManager=editorComponent.getSelectionManager();
    selectionManager.pushSelection(selectionManager.createRangeSelection(pasteNodes.get(0),pasteNodes.get(pasteNodes.size() - 1)));
  }
}
