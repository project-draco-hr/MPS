{
  myElementsTableModel=new CheckboxTableModel();
  myElementsTable=new JBTable(myElementsTableModel);
  myElementsTable.setShowGrid(false);
  myElementsTable.setDragEnabled(false);
  myElementsTable.setShowHorizontalLines(false);
  myElementsTable.setShowVerticalLines(false);
  myElementsTable.setIntercellSpacing(new Dimension(0,0));
  myElementsTable.setDefaultRenderer(getElementClass(),createDefaultRenderer());
  myElementsTable.setDefaultRenderer(Boolean.class,new BooleanTableCellRenderer());
  myElementsTable.setBorder(new LineBorder(UIUtil.getBorderColor()));
  myElementsTable.setColumnSelectionAllowed(false);
  myElementsTable.setRowSelectionAllowed(false);
  TableColumn firstColumn=myElementsTable.getColumnModel().getColumn(0);
  firstColumn.setResizable(false);
  TableColumn headerColumn=myElementsTable.getTableHeader().getColumnModel().getColumn(0);
  headerColumn.setMaxWidth(headerColumn.getPreferredWidth());
  new SpeedSearchBase<JBTable>(myElementsTable){
    public int getSelectedIndex(){
      return myElementsTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return myElementsTable.convertRowIndexToModel(viewIndex);
    }
    public Object[] getAllElements(){
      List<E> elements=myElementsTableModel.getElements();
      return elements.toArray(new Object[elements.size()]);
    }
    public String getElementText(    Object element){
      return getElementText(getElement((E)element));
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myElementsTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myElementsTableModel.getValueAt(0,row))) {
          final int viewRow=myElementsTable.convertRowIndexToView(row);
          myElementsTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(myElementsTable);
          break;
        }
      }
    }
  }
;
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myElementsTable);
  JPanel panel=decorator.createPanel();
  panel.setBorder(null);
  return panel;
}
