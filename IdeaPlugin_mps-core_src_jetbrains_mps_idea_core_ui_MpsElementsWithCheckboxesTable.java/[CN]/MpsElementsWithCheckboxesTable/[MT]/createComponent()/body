{
  myElementsTableModel=new CheckboxTableModel();
  myElementsTable=new JBTable(myElementsTableModel);
  myElementsTable.setShowGrid(false);
  myElementsTable.setDragEnabled(false);
  myElementsTable.setShowHorizontalLines(false);
  myElementsTable.setShowVerticalLines(false);
  myElementsTable.setIntercellSpacing(new Dimension(0,0));
  myElementsTable.setDefaultRenderer(getElementClass(),createDefaultRenderer());
  myElementsTable.setDefaultRenderer(Boolean.class,new BooleanTableCellRenderer());
  myElementsTable.setBorder(new LineBorder(UIUtil.getBorderColor()));
  myElementsTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myElementsTable.setColumnSelectionAllowed(false);
  myElementsTable.setRowSelectionAllowed(true);
  if (myElementsTable.getRowCount() > 0) {
    myElementsTable.getSelectionModel().setSelectionInterval(0,0);
  }
  TableColumn firstColumn=myElementsTable.getColumnModel().getColumn(0);
  firstColumn.setCellEditor(new BooleanTableCellEditor());
  firstColumn.setResizable(false);
  TableColumn headerColumn=myElementsTable.getTableHeader().getColumnModel().getColumn(0);
  headerColumn.setMaxWidth(headerColumn.getPreferredWidth());
  myElementsTable.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int[] selectedRows=myElementsTable.getSelectedRows();
      boolean currentlyMarked=true;
      List<E> elements=myElementsTableModel.getElements();
      for (      int selectedRow : selectedRows) {
        E element=elements.get(selectedRow);
        if (selectedRow < 0) {
          return;
        }
        currentlyMarked&=isChecked(element);
      }
      for (      final int selectedRow : selectedRows) {
        check(elements.get(selectedRow),!currentlyMarked);
      }
      myElementsTableModel.fireTableDataChanged();
      TableUtil.selectRows(myElementsTable,selectedRows);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  new SpeedSearchBase<JBTable>(myElementsTable){
    public int getSelectedIndex(){
      return myElementsTable.getSelectedRow();
    }
    @Override protected int convertIndexToModel(    int viewIndex){
      return myElementsTable.convertRowIndexToModel(viewIndex);
    }
    public Object[] getAllElements(){
      List<E> elements=myElementsTableModel.getElements();
      return elements.toArray(new Object[elements.size()]);
    }
    public String getElementText(    Object element){
      return getElementText(getElement((E)element));
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myElementsTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myElementsTableModel.getValueAt(0,row))) {
          final int viewRow=myElementsTable.convertRowIndexToView(row);
          myElementsTable.getSelectionModel().setSelectionInterval(viewRow,viewRow);
          TableUtil.scrollSelectionToVisible(myElementsTable);
          break;
        }
      }
    }
  }
;
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myElementsTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      ModelAccess.instance().runReadInEDT(new Runnable(){
        @Override public void run(){
          final List<E> allElements=getAllVisibleElements();
          Set<S> addedElements=getAddedElements();
          Iterator<E> it=allElements.iterator();
          while (it.hasNext()) {
            if (addedElements.contains(getElement(it.next()))) {
              it.remove();
            }
          }
          Collections.sort(allElements,getComparator());
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              ChooseElementsDialog<E> chooseElementsDialog=new ChooseElementsDialog<E>(myElementsTable,allElements,getChooserTitle()){
                @Override protected String getItemText(                E item){
                  return getText(getElement(item));
                }
                @Override protected Icon getItemIcon(                E item){
                  return getIcon();
                }
              }
;
              chooseElementsDialog.show();
              Set<E> elementsToAdd=new HashSet<E>(chooseElementsDialog.getChosenElements());
              doAddElements(elementsToAdd);
            }
          }
);
        }
      }
);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(myElementsTable);
      myElementsTableModel.fireTableDataChanged();
    }
  }
);
  return postDecoratePanel(decorator.createPanel());
}
