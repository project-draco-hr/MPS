{
  List<ConceptContainer> result=new ArrayList<ConceptContainer>();
  Map<ConceptDeclaration,ConceptContainer> processed=new HashMap<ConceptDeclaration,ConceptContainer>();
  SModel structureModel=myLanguage.getStructureModelDescriptor().getSModel();
  ConceptDeclaration baseConcept=(ConceptDeclaration)BaseAdapter.fromNode(SModelUtil.getBaseConcept());
  outer:   for (  ConceptDeclaration concept : structureModel.getRootsAdapters(ConceptDeclaration.class)) {
    ConceptDeclaration parentConcept=concept;
    ConceptContainer prevConceptContainer=null;
    while (parentConcept != null && parentConcept != baseConcept && !(mySkipAncestors && parentConcept.getModel() != structureModel)) {
      ConceptContainer newConceptContainer=processed.get(parentConcept);
      if (newConceptContainer == null) {
        newConceptContainer=new ConceptContainer(parentConcept,this,parentConcept.getModel() != structureModel);
      }
      newConceptContainer.addChild(prevConceptContainer);
      prevConceptContainer=newConceptContainer;
      if (processed.containsKey(parentConcept))       continue outer;
      processed.put(parentConcept,newConceptContainer);
      parentConcept=parentConcept.getExtends();
    }
    if (prevConceptContainer != null) {
      result.add(prevConceptContainer);
    }
  }
  return result;
}
