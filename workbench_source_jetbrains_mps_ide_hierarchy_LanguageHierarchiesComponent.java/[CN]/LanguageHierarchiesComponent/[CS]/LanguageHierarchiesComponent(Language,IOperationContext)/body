{
  myLanguage=language;
  myOperationContext=new ModuleContext(language,context.getProject());
  addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      for (      ConceptContainer conceptContainer : myRoots) {
        conceptContainer.mouseClicked(e);
      }
    }
    public void mousePressed(    MouseEvent e){
      for (      ConceptContainer conceptContainer : myRoots) {
        conceptContainer.mousePressed(e);
      }
    }
    public void mouseReleased(    MouseEvent e){
      for (      ConceptContainer conceptContainer : myRoots) {
        conceptContainer.mouseReleased(e);
      }
    }
  }
);
  myPanel.setLayout(new BorderLayout());
  myPanel.setBackground(Color.WHITE);
  final JPanel toolsPane=new JPanel();
  toolsPane.setLayout(new FlowLayout(FlowLayout.LEFT));
  myScaleField=new JTextField("100%");
  myScaleField.setEditable(false);
  toolsPane.add(myScaleField);
  toolsPane.add(new JButton(new AbstractAction("+"){
    public void actionPerformed(    ActionEvent e){
      if (myScale < 6) {
        myScale+=0.2;
        if (myScale > 6)         myScale=6;
        myScaleField.setText((int)(myScale * 100) + "%");
        relayout();
        LanguageHierarchiesComponent.this.invalidate();
        getExternalComponent().revalidate();
        getExternalComponent().repaint();
      }
    }
  }
));
  toolsPane.add(new JButton(new AbstractAction("-"){
    public void actionPerformed(    ActionEvent e){
      if (myScale > 0.2) {
        myScale-=0.2;
        if (myScale < 0.2)         myScale=0.2f;
        myScaleField.setText((int)(myScale * 100) + "%");
        relayout();
        LanguageHierarchiesComponent.this.invalidate();
        getExternalComponent().revalidate();
        getExternalComponent().repaint();
      }
    }
  }
));
  toolsPane.add(new JButton(new AbstractAction("="){
    public void actionPerformed(    ActionEvent e){
      if (myScale != 1) {
        myScale=1;
        myScaleField.setText((int)(myScale * 100) + "%");
        relayout();
        LanguageHierarchiesComponent.this.invalidate();
        getExternalComponent().revalidate();
        getExternalComponent().repaint();
      }
    }
  }
));
  final JCheckBox jCheckBox=new JCheckBox();
  jCheckBox.setAction(new AbstractAction("Include Other Languages"){
    public void actionPerformed(    ActionEvent e){
      if (jCheckBox.getModel().isSelected()) {
        if (mySkipAncestors) {
          mySkipAncestors=false;
          rebuild();
          LanguageHierarchiesComponent.this.invalidate();
          getExternalComponent().revalidate();
          getExternalComponent().repaint();
        }
      }
 else {
        if (!mySkipAncestors) {
          mySkipAncestors=true;
          rebuild();
          LanguageHierarchiesComponent.this.invalidate();
          getExternalComponent().revalidate();
          getExternalComponent().repaint();
        }
      }
    }
  }
);
  toolsPane.add(jCheckBox);
  myPanel.add(toolsPane,BorderLayout.NORTH);
  JScrollPane scrollPane=new JScrollPane();
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setViewportView(this);
  scrollPane.setBorder(new LineBorder(Color.LIGHT_GRAY));
  scrollPane.setBackground(Color.WHITE);
  myPanel.add(scrollPane,BorderLayout.CENTER);
  setBackground(Color.WHITE);
}
