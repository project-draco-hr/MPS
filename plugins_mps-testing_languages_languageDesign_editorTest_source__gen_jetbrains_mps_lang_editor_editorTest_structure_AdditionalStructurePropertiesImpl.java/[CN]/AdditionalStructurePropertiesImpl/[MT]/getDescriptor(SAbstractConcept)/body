{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0xb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AttractsFocusBlock;
      }
    break;
case 1:
  if (true) {
    return props_BinaryExpression;
  }
break;
case 2:
if (true) {
return props_BracesBlock;
}
break;
case 3:
if (true) {
return props_BracesStubBlock;
}
break;
case 4:
if (true) {
return props_ClassReference;
}
break;
case 5:
if (true) {
return props_CollapsedByDefault;
}
break;
case 6:
if (true) {
return props_CollapsedConditionally;
}
break;
case 7:
if (true) {
return props_CollapsibleConcept;
}
break;
case 8:
if (true) {
return props_Composition;
}
break;
case 9:
if (true) {
return props_DelTestAbstractChild;
}
break;
case 10:
if (true) {
return props_DelTestChild1;
}
break;
case 11:
if (true) {
return props_DelTestChildContainer;
}
break;
case 12:
if (true) {
return props_DelTestRoot;
}
break;
case 13:
if (true) {
return props_FoldingContainer;
}
break;
case 14:
if (true) {
return props_IBaseTestBlock;
}
break;
case 15:
if (true) {
return props_InitAbstractChild;
}
break;
case 16:
if (true) {
return props_InitChildWithDirectCycle_card1;
}
break;
case 17:
if (true) {
return props_InitChildWithDirectCycle_card1n;
}
break;
case 18:
if (true) {
return props_InitChildWithIndirectCycle_card1;
}
break;
case 19:
if (true) {
return props_InitChildWithIndirectCycle_card1n;
}
break;
case 20:
if (true) {
return props_InitChildWithTwoSameConceptChildren;
}
break;
case 21:
if (true) {
return props_InitContainer;
}
break;
case 22:
if (true) {
return props_InitGrandChild;
}
break;
case 23:
if (true) {
return props_InitGrandChildWithIndirectCycle_card1;
}
break;
case 24:
if (true) {
return props_InitGrandChildWithIndirectCycle_card1n;
}
break;
case 25:
if (true) {
return props_InspectorBlock;
}
break;
case 26:
if (true) {
return props_IntegerLiteral;
}
break;
case 27:
if (true) {
return props_NonEmptyProperty;
}
break;
case 28:
if (true) {
return props_NotEditableVaraileReference;
}
break;
case 29:
if (true) {
return props_PlusExpression;
}
break;
case 30:
if (true) {
return props_ReferenceAnnotataion;
}
break;
case 31:
if (true) {
return props_SelectionChild;
}
break;
case 32:
if (true) {
return props_SelectionContainer;
}
break;
case 33:
if (true) {
return props_SideTranformWrapper;
}
break;
case 34:
if (true) {
return props_SimplePropertyAttribute;
}
break;
case 35:
if (true) {
return props_SimplePropertyContainer;
}
break;
case 36:
if (true) {
return props_StubBlock;
}
break;
case 37:
if (true) {
return props_StyleChild;
}
break;
case 38:
if (true) {
return props_StyleParent;
}
break;
case 39:
if (true) {
return props_SubstMiddlewareChild;
}
break;
case 40:
if (true) {
return props_SubstTestAbstractChild;
}
break;
case 41:
if (true) {
return props_SubstTestBooleanPropertyChild;
}
break;
case 42:
if (true) {
return props_SubstTestEnumPropertyChild;
}
break;
case 43:
if (true) {
return props_SubstTestRoot;
}
break;
case 44:
if (true) {
return props_TestBlockList;
}
break;
case 45:
if (true) {
return props_VariableDeclarationBlock;
}
break;
case 46:
if (true) {
return props_VariableDeclarationReference;
}
break;
case 47:
if (true) {
return props_VerticalLayoutBlockList;
}
break;
default :
}
}
throw new IllegalStateException();
}
