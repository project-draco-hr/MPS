{
  Map<SNode,SNode> newDeclarations=MapSequence.fromMap(new HashMap<SNode,SNode>());
  Iterable<SNode> typeVariableReferences=ListSequence.fromList(SLinkOperations.getTargets(this.myClassToRefactor,"typeParameter",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.TypeVariableReference");
    }
  }
);
  for (  SNode typeReference : Sequence.fromIterable(typeVariableReferences)) {
    SNode typeDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(typeReference,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false);
    if (!(MapSequence.fromMap(newDeclarations).containsKey(typeDeclaration))) {
      MapSequence.fromMap(newDeclarations).put(typeDeclaration,SNodeOperations.copyNode(typeDeclaration));
    }
    SNodeOperations.replaceWithAnother(typeReference,new ConvertAnonymousRefactoring.QuotationClass_qy1soj_a0a0c0c0h().createNode(MapSequence.fromMap(newDeclarations).get(typeDeclaration)));
  }
  ListSequence.fromList(SLinkOperations.getTargets(this.myInnerClass,"typeVariableDeclaration",true)).addSequence(Sequence.fromIterable(MapSequence.fromMap(newDeclarations).values()));
  ListSequence.fromList(SLinkOperations.getTargets(this.mySuperInner,"parameter",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(this.myClassToRefactor,"typeParameter",true)));
  for (  SNode typeReference : ListSequence.fromList(SNodeOperations.getDescendants(this.myInnerClass,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{}))) {
    if (MapSequence.fromMap(newDeclarations).containsKey(SLinkOperations.getTarget(typeReference,"typeVariableDeclaration",false))) {
      SNodeOperations.replaceWithAnother(typeReference,new ConvertAnonymousRefactoring.QuotationClass_qy1soj_a0a0a0a0f0h().createNode(MapSequence.fromMap(newDeclarations).get(SLinkOperations.getTarget(typeReference,"typeVariableDeclaration",false))));
    }
  }
}
