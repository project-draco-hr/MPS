{
  for (  SNode param : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.myClassToRefactor,"baseMethodDeclaration",false),"parameter",true))) {
    ListSequence.fromList(SLinkOperations.getTargets(this.getInnerConstructor(),"parameter",true)).addElement(SNodeOperations.copyNode(param));
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.myClassToRefactor,"baseMethodDeclaration",false),"parameter",true)).isNotEmpty()) {
    List<SNode> parameterReferences=ListSequence.fromList(SLinkOperations.getTargets(this.getInnerConstructor(),"parameter",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return new ConvertAnonymousRefactoring.QuotationClass_qy1soj_a0a0a0a0a0a1a3().createNode(it);
      }
    }
).toListSequence();
    SNode invocation=new ConvertAnonymousRefactoring.QuotationClass_qy1soj_a0a1a1a3().createNode(parameterReferences);
    SLinkOperations.setTarget(invocation,"baseMethodDeclaration",SLinkOperations.getTarget(this.myClassToRefactor,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.getInnerConstructor(),"body",true),"statement",true)).insertElement(0,invocation);
  }
}
