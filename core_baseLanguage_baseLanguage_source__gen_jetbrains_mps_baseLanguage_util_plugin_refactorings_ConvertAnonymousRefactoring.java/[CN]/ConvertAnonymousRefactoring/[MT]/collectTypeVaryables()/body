{
  this.myInnerTypeVaryables=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  Iterable<SNode> typeVariableReferences=ListSequence.fromList(SLinkOperations.getTargets(this.myClassToRefactor,"typeParameter",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.TypeVariableReference");
    }
  }
);
  for (  SNode typeReference : Sequence.fromIterable(typeVariableReferences)) {
    SNode typeDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(typeReference,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false);
    if (!(MapSequence.fromMap(this.myInnerTypeVaryables).containsKey(typeDeclaration))) {
      MapSequence.fromMap(this.myInnerTypeVaryables).put(typeDeclaration,SNodeOperations.copyNode(typeDeclaration));
    }
    SNodeOperations.replaceWithAnother(typeReference,new ConvertAnonymousRefactoring.QuotationClass_qy1soj_a0a0c0c0e().createNode(MapSequence.fromMap(this.myInnerTypeVaryables).get(typeDeclaration)));
  }
}
