{
  FindUsagesManager usages=ApplicationComponents.getInstance().getComponentSafe(FindUsagesManager.class);
  IScope scope=GlobalScope.getInstance();
  ConceptDeclaration conceptDeclaration=SModelUtil_new.findConceptDeclaration(getFqNameOfConceptToSearchInstances(),scope);
  Set<SNode> instances=usages.findInstances(conceptDeclaration,scope,monitor);
  HashSet<SNode> affectedInstances=new HashSet<SNode>();
  List<SModel> matchModels=new ArrayList<SModel>();
  String uids=getRefactoringContext().get(SMODEL_UID);
  if (uids != null) {
    for (    String uidString : uids.split("\n")) {
      SModelDescriptor desc=scope.getModelDescriptor(SModelUID.fromString(uidString));
      matchModels.add(desc.getSModel());
    }
  }
  for (  SNode instance : instances) {
    try {
      if ((matchModels.isEmpty() || matchModels.contains(instance.getModel())) && isApplicableInstanceNode(instance)) {
        affectedInstances.add(instance);
      }
    }
 catch (    Throwable t) {
      LOG.error("Refactoring failed: " + t.getMessage(),t);
    }
  }
  return affectedInstances;
}
