{
  if (SLinkOperations.getTarget(creator,"baseMethodDeclaration",false) == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  if (!(SLinkOperations.getCount(creator,"typeParameter") == 0 || SLinkOperations.getCount(creator,"typeParameter") == SLinkOperations.getCount(SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),"typeVariableDeclaration"))) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(creator,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1216200944338",intentionProvider,errorTarget);
    }
  }
  for (  SNode parameter : SLinkOperations.getTargets(creator,"typeParameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(parameter,SLinkOperations.getTarget(new _Quotations.QuotationClass_92().createNode(typeCheckingContext),"descriptor",false),false)))) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(parameter,"primitive type not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606006",intentionProvider,errorTarget);
    }
  }
  SNode constructedType=new _Quotations.QuotationClass_93().createNode(SLinkOperations.getTargets(creator,"typeParameter",true),methodClassifier,typeCheckingContext);
{
    SNode _nodeToCheck_1029348928467=creator;
    BaseIntentionProvider intentionProvider=null;
    typeCheckingContext.createEquation(typeCheckingContext.typeOf(creator,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606043",true),constructedType,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606039",intentionProvider);
  }
  final SNode instanceType_typevar_1212781606045=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=creator;
    BaseIntentionProvider intentionProvider=null;
    typeCheckingContext.createEquation(typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1212781606045),constructedType,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606046",intentionProvider);
  }
{
    final SNode _representatorVar1=typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1212781606045);
    typeCheckingContext.whenConcrete(_representatorVar1,new Runnable(){
      public void run(){
        Map<SNode,List<SNode>> mmap=new HashMap<SNode,List<SNode>>();
        RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,creator,null,mmap);
        RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1212781606045),mmap);
        RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
      }
    }
,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606052",false);
  }
}
