{
  if (SLinkOperations.getTarget(creator,"baseMethodDeclaration",false) == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  if (!(ListSequence.fromList(SLinkOperations.getTargets(creator,"typeParameter",true)).count() == 0 || ListSequence.fromList(SLinkOperations.getTargets(creator,"typeParameter",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(SLinkOperations.getTarget(creator,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),"typeVariableDeclaration",true)).count())) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(creator,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1216200944338",intentionProvider,errorTarget);
    }
  }
  for (  SNode parameter : SLinkOperations.getTargets(creator,"typeParameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(parameter,SLinkOperations.getTarget(new _Quotations.QuotationClass_72().createNode(typeCheckingContext),"descriptor",false),false)))) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"primitive type not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606006",intentionProvider,errorTarget);
    }
  }
  SNode constructedType=new _Quotations.QuotationClass_73().createNode(SLinkOperations.getTargets(creator,"typeParameter",true),methodClassifier,typeCheckingContext);
{
    SNode _nodeToCheck_1029348928467=creator;
    BaseIntentionProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606039",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606043",true),(SNode)constructedType,_info_12389875345);
  }
  final SNode instanceType_typevar_1212781606045=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=creator;
    BaseIntentionProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1212781606046",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1212781606045),(SNode)constructedType,_info_12389875345);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,creator,null,mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1212781606045),mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
