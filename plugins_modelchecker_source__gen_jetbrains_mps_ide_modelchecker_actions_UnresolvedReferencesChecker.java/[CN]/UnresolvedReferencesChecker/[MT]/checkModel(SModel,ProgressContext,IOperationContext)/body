{
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  final IScope scope=model.getModelDescriptor().getModule().getScope();
  String title="Checking " + SModelOperations.getModelName(model) + " for unresolved references...";
  for (  SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
    if (!(progressContext.checkAndUpdateIndicator(title))) {
      break;
    }
    for (    final SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.ReferenceMacro"),SLinkOperations.getRole(ref))) != null)) {
        continue;
      }
      if (ref.getTargetNodeSilently() == null) {
        addIssue(results,node,"Unresolved reference: " + SLinkOperations.getResolveInfo(ref),ModelChecker.SEVERITY_ERROR,"unresolved reference",new IModelCheckerFix(){
          public boolean doFix(){
            return Resolver.resolve1(ref,operationContext);
          }
        }
);
      }
      final SModelReference uid=ref.getTargetSModelReference();
      if (uid == null) {
        continue;
      }
      SModelDescriptor descriptor=GlobalScope.getInstance().getModelDescriptor(uid);
      if (scope.getModelDescriptor(uid) == null && descriptor != null) {
        addIssue(results,node,"Target module " + descriptor.getModule() + " should be imported",ModelChecker.SEVERITY_ERROR,"unresolved reference",new IModelCheckerFix(){
          public boolean doFix(){
            if (scope.getModelDescriptor(uid) == null && GlobalScope.getInstance().getModelDescriptor(uid) != null) {
              SModelDescriptor sm=GlobalScope.getInstance().getModelDescriptor(uid);
              operationContext.getModule().addDependency(sm.getModule().getModuleReference(),false);
              ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
              return true;
            }
            return false;
          }
        }
);
      }
    }
  }
  return results;
}
