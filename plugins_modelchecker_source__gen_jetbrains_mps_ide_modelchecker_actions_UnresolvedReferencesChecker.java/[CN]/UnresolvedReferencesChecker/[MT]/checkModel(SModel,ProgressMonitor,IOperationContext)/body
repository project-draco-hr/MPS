{
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  if (model == null || model == null || model.getModule() == null) {
    return results;
  }
  final IScope scope=((AbstractModule)model.getModule()).getScope();
  String title="Checking " + SModelOperations.getModelName(model) + " for unresolved references...";
  monitor.start(title,1);
  for (  SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
    if (monitor.isCanceled()) {
      break;
    }
    for (    final SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.ReferenceMacro"),SLinkOperations.getRole(ref))) != null)) {
        continue;
      }
      if (jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref) == null) {
        addIssue(results,node,"Unresolved reference: " + SLinkOperations.getResolveInfo(ref),ModelChecker.SEVERITY_ERROR,"unresolved reference",new IModelCheckerFix(){
          public boolean doFix(){
            return ResolverComponent.getInstance().resolve(ref,operationContext);
          }
        }
);
      }
      final SModelReference uid=ref.getTargetSModelReference();
      if (uid == null) {
        continue;
      }
      SModel descriptor=SModelRepository.getInstance().getModelDescriptor(uid);
      if (scope.getModelDescriptor(uid) == null && descriptor != null) {
        addIssue(results,node,"Target module " + descriptor.getModule() + " should be imported",ModelChecker.SEVERITY_ERROR,"target module not imported",new IModelCheckerFix(){
          public boolean doFix(){
            if (scope.getModelDescriptor(uid) == null && SModelRepository.getInstance().getModelDescriptor(uid) != null) {
              SModel sm=SModelRepository.getInstance().getModelDescriptor(uid);
              SModuleReference moduleReference=check_xiru3y_a0b0a0f0a0f0c0g0b(check_xiru3y_a0a1a0a5a0a5a2a6a1(sm));
              if (moduleReference == null) {
                return false;
              }
              SModule module=check_xiru3y_a0d0a0f0a0f0c0g0b(model);
              if (module == null) {
                return false;
              }
              ((AbstractModule)module).addDependency(moduleReference,false);
              return true;
            }
            return false;
          }
        }
);
      }
    }
  }
  monitor.done();
  return results;
}
