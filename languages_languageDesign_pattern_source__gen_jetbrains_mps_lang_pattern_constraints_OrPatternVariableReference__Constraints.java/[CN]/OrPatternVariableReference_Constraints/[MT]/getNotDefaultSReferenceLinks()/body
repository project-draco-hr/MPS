{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-3143127453834064983l,-5836335846783251545l),4264731254635442556l,4264731254635442557l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-3143127453834064983l,-5836335846783251545l),4264731254635442556l,4264731254635442557l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode orPattern=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-3143127453834064983l,-5836335846783251545l),2879868312062962308l,"jetbrains.mps.lang.pattern.structure.OrPattern"),false,false);
          return check_8aolto_a1a0a(orPattern);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8aolto_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
