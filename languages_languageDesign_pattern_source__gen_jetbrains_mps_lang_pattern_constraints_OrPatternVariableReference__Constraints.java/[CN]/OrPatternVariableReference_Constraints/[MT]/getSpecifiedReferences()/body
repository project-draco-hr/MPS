{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xd4615e3bd6714ba9L,0xaf012b78369b0ba7L,0x3b2f5e7b070d317cL,0x3b2f5e7b070d317dL,"declaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd4615e3bd6714ba9L,0xaf012b78369b0ba7L,0x3b2f5e7b070d317cL,0x3b2f5e7b070d317dL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode orPattern=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xd4615e3bd6714ba9L,0xaf012b78369b0ba7L,0x27f758f8bc6aaa84L,"jetbrains.mps.lang.pattern.structure.OrPattern"),false,false);
          return check_8aolto_a1a0a(orPattern);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8aolto_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
