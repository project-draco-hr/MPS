{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.structure.Substitute_SimpleString");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x116910ff20bL,"jetbrains.mps.lang.actions.structure.Substitute_SimpleString")),null);
          SPropertyOperations.set(result,MetaAdapterFactory.getProperty(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x116910ff20bL,0x11691130517L,"text"),pattern);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "simple text";
        }
      }
);
    }
  }
  return result;
}
