{
  Map<SModule,Iterable<SModule>> missingDependencyResult=MapSequence.fromMap(new LinkedHashMap<SModule,Iterable<SModule>>(16,(float)0.75,false));
  Set<SModule> coreModules=SetSequence.fromSet(new HashSet<SModule>());
  SetSequence.fromSet(coreModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) == null);
    }
  }
));
  for (  SModule module : SetSequence.fromSet(coreModules)) {
    List<SModule> dependencyToCheck=CheckFullDependencyUtil.getDependencyToCheck(module);
    Iterable<SModule> missingDependency=ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(coreModules));
    if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
      MapSequence.fromMap(missingDependencyResult).put(module,missingDependency);
    }
  }
  Set<SModule> pluginModules=SetSequence.fromSet(new HashSet<SModule>());
  SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<SModule>(){
    public boolean accept(    SModule it){
      return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
    }
  }
));
  for (  SModule module : SetSequence.fromSet(pluginModules)) {
    List<SModule> dependencyToCheck=CheckFullDependencyUtil.getDependencyToCheck(module);
    Iterable<SModule> missingDependency=ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()));
    if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
      MapSequence.fromMap(missingDependencyResult).put(module,missingDependency);
    }
  }
  return missingDependencyResult;
}
