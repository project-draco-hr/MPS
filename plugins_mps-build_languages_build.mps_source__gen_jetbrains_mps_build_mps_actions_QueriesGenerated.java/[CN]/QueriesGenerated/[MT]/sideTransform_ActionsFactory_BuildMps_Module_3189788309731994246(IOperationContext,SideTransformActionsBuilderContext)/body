{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Module"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SPropertyOperations.set(_context.getSourceNode(),MetaAdapterFactory.getProperty(new UUID(934837630734519964l,-6831122735637083229l),5253498789149381388l,1500819558096356884l,"doNotCompile"),"" + (true));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "(do not compile)";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Module"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Module"),null));
    }
  }
);
  return result;
}
