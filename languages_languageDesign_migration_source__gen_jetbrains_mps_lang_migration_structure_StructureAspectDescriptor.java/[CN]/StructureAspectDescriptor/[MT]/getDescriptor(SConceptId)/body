{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractNodeReference;
case 1:
  return myConceptClassifierMemberData;
case 2:
return myConceptConceptMigrationReference;
case 3:
return myConceptConsequenceFunction;
case 4:
return myConceptDataDependency;
case 5:
return myConceptDataDependencyReference;
case 6:
return myConceptDirectNodeReference;
case 7:
return myConceptExecuteAfterDeclaration;
case 8:
return myConceptIMigrationUnit;
case 9:
return myConceptIncludeMigrationPart;
case 10:
return myConceptLinkPatternVariableReference;
case 11:
return myConceptListPatternVariableReference;
case 12:
return myConceptMigrationScript;
case 13:
return myConceptMigrationScriptReference;
case 14:
return myConceptMoveConcept;
case 15:
return myConceptMoveConceptMember;
case 16:
return myConceptMoveContainmentLink;
case 17:
return myConceptMoveNodeMigrationPart;
case 18:
return myConceptMoveNodeSpecialization;
case 19:
return myConceptMoveProperty;
case 20:
return myConceptMoveReferenceLink;
case 21:
return myConceptNodePatternVariableReference;
case 22:
return myConceptOrderDependency;
case 23:
return myConceptProducedDataDeclaration;
case 24:
return myConceptPropertyPatternVariableReference;
case 25:
return myConceptPureMigrationPart;
case 26:
return myConceptPureMigrationScript;
case 27:
return myConceptQuotationConsequence;
case 28:
return myConceptRefactoringLog;
case 29:
return myConceptRefactoringOption;
case 30:
return myConceptRefactoringOptions;
case 31:
return myConceptRefactoringOrderDependency;
case 32:
return myConceptRefactoringPart;
case 33:
return myConceptReflectionNodeReference;
case 34:
return myConceptRequiredDataDeclaration;
case 35:
return myConceptTransformConsequence;
case 36:
return myConceptTransformStatement;
default :
throw new IllegalStateException();
}
}
