{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.AbstractMigrationScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("fromVersion").abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFunc").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFuncContainter").interface_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFuncParameterDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFuncParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFunctionParameter_MigrationScriptData").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("data","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.ConceptFunctionParameter_MigrationScriptPersistedData").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("dataString","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScript").super_("jetbrains.mps.lang.migration.structure.AbstractMigrationScript").parents("jetbrains.mps.lang.migration.structure.AbstractMigrationScript","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.ScopeProvider").properties("description").children(new String[]{"dataType","body","applicable","requiresData","serialize","deserialize"},new boolean[]{false,false,false,true,false,false}).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptApplicable").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptBody").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptDeserialize").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptNew").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.lang.migration.structure.ConceptFuncContainter").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("version").children(new String[]{"module"},new boolean[]{false}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationScriptSerialize").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.MigrationsPatternVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.PatternMigrationScript").super_("jetbrains.mps.lang.migration.structure.AbstractMigrationScript").parents("jetbrains.mps.lang.migration.structure.AbstractMigrationScript","jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"pattern","result"},new boolean[]{false,false}).create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.RequiredDataItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"script","type"},new boolean[]{false,false}).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.migration.structure.RequiredDataReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("item").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
