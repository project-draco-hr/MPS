{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0kb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractNodeReference;
      }
    break;
case 1:
  if (true) {
    return myConceptConsequenceFunction;
  }
break;
case 2:
if (true) {
return myConceptDataDependency;
}
break;
case 3:
if (true) {
return myConceptDataDependencyReference;
}
break;
case 4:
if (true) {
return myConceptDirectNodeReference;
}
break;
case 5:
if (true) {
return myConceptExecuteAfterDeclaration;
}
break;
case 6:
if (true) {
return myConceptIMigrationUnit;
}
break;
case 7:
if (true) {
return myConceptLinkPatternVariableReference;
}
break;
case 8:
if (true) {
return myConceptListPatternVariableReference;
}
break;
case 9:
if (true) {
return myConceptMigrationScript;
}
break;
case 10:
if (true) {
return myConceptMoveConcept;
}
break;
case 11:
if (true) {
return myConceptMoveConceptMember;
}
break;
case 12:
if (true) {
return myConceptMoveContainmentLink;
}
break;
case 13:
if (true) {
return myConceptMoveNode;
}
break;
case 14:
if (true) {
return myConceptMoveNodeSpecialization;
}
break;
case 15:
if (true) {
return myConceptMoveProperty;
}
break;
case 16:
if (true) {
return myConceptMoveReferenceLink;
}
break;
case 17:
if (true) {
return myConceptNodePatternVariableReference;
}
break;
case 18:
if (true) {
return myConceptOrderDependency;
}
break;
case 19:
if (true) {
return myConceptProducedDataDeclaration;
}
break;
case 20:
if (true) {
return myConceptPropertyPatternVariableReference;
}
break;
case 21:
if (true) {
return myConceptPureMigrationScript;
}
break;
case 22:
if (true) {
return myConceptQuotationConsequence;
}
break;
case 23:
if (true) {
return myConceptRefactoringLog;
}
break;
case 24:
if (true) {
return myConceptRefactoringOption;
}
break;
case 25:
if (true) {
return myConceptRefactoringOptions;
}
break;
case 26:
if (true) {
return myConceptRefactoringOrderDependency;
}
break;
case 27:
if (true) {
return myConceptRefactoringPart;
}
break;
case 28:
if (true) {
return myConceptReflectionNodeReference;
}
break;
case 29:
if (true) {
return myConceptRequiredDataDeclaration;
}
break;
case 30:
if (true) {
return myConceptTransformConsequence;
}
break;
case 31:
if (true) {
return myConceptTransformStatement;
}
break;
default :
}
}
return null;
}
