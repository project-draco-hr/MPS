{
  ModelCheckerViewer.this.myLastResults=ModelCheckerResultsFinder.getResults(model,scope);
  this.myNodeRepresentator.saveCheckerResults(this.myLastResults);
  IFinder finder=new IFinder(){
    public SearchResults find(    SearchQuery searchQuery,    ProgressIndicator indicator){
      List<SearchResult<SNode>> searchResults=ListSequence.fromList(new ArrayList<SearchResult<SNode>>());
      for (      ModelCheckerResults.Result result : ListSequence.fromList(ModelCheckerViewer.this.myLastResults.getResultsList())) {
        ListSequence.fromList(searchResults).addElement(new SearchResult<SNode>(result.getNode(),result.getStatus().toString()));
      }
      return new SearchResults<SNode>(new HashSet<SNode>(),searchResults);
    }
  }
;
  IResultProvider resultProvider=FindUtils.makeProvider(finder);
  SearchQuery searchQuery=new SearchQuery(this.myProject.getScope());
  this.myUsagesView.setRunOptions(resultProvider,searchQuery,new UsagesView.ButtonConfiguration(false,false,false),new SearchResults());
  ProgressManager.getInstance().run(new Task.Modal(this.myProject.getComponent(Project.class),"Searching",true){
    public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      ModelCheckerViewer.this.myUsagesView.run(indicator);
      ModelCheckerViewer.this.myTool.openToolLater(true);
    }
  }
);
}
