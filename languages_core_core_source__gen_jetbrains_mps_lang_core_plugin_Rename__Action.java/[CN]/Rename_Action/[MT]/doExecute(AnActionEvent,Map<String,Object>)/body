{
  try {
    final Wrappers._boolean canRename=new Wrappers._boolean();
    final Wrappers._T<String> oldName=new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        canRename.value=RenameUtil.canBeRenamed(((SNode)MapSequence.fromMap(_params).get("target")));
        oldName.value=SPropertyOperations.getString(((SNode)MapSequence.fromMap(_params).get("target")),"name");
      }
    }
);
    if (!(canRename.value)) {
      JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Nodes with getter for the \"name\" property can't be renamed","Node can't be renamed",JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    String newName=RenameDialog.getNewName(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),oldName.value,"node");
    if (newName == null) {
      return;
    }
    new RefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.Rename",Arrays.asList("newName"),Arrays.asList(newName),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "Rename",t);
  }
}
