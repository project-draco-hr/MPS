{
  Edge splittedEdge=event.getEdge();
  if (MapSequence.fromMap(myEdgeMap).containsKey(splittedEdge)) {
    Edge syncEdge=MapSequence.fromMap(myEdgeMap).get(splittedEdge);
    List<Edge> split=event.getSplit();
    List<Edge> syncSplit=ListSequence.fromList(new ArrayList<Edge>(ListSequence.fromList(split).count()));
    if (ListSequence.fromList(split).count() == 1) {
      Edge edge=mySynchronizedGraph.connect(syncEdge.getSource(),syncEdge.getTarget());
      MapSequence.fromMap(myEdgeMap).put(ListSequence.fromList(split).getElement(0),edge);
      ListSequence.fromList(syncSplit).addElement(edge);
    }
 else {
      for (      Edge edge : ListSequence.fromList(split)) {
        Edge newEdge;
        if (edge == ListSequence.fromList(split).first()) {
          Node source=syncEdge.getSource();
          Node target=MapSequence.fromMap(myNodeMap).get(edge.getTarget());
          if (target == null) {
            throw new RuntimeException("wrong synchrozed split");
          }
          newEdge=mySynchronizedGraph.connect(source,target);
          MapSequence.fromMap(myEdgeMap).put(edge,newEdge);
        }
 else         if (edge == ListSequence.fromList(split).last()) {
          Node source=MapSequence.fromMap(myNodeMap).get(edge.getSource());
          Node target=syncEdge.getTarget();
          if (source == null) {
            throw new RuntimeException("wrong synchrozed split");
          }
          newEdge=mySynchronizedGraph.connect(source,target);
          MapSequence.fromMap(myEdgeMap).put(edge,newEdge);
        }
 else {
          newEdge=MapSequence.fromMap(myEdgeMap).get(edge);
          if (newEdge == null) {
            throw new RuntimeException("wrong synchrozed split");
          }
        }
        ListSequence.fromList(syncSplit).addElement(newEdge);
      }
    }
    mySynchronizedGraph.getModificationProcessor().fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_SPLITTED,syncEdge,syncSplit));
  }
}
