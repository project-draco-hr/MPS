{
switch (event.getType()) {
case NODE_CREATED:
    Node addedNode=event.getNode();
  Node syncNode;
if (addedNode.isDummy()) {
  syncNode=mySynchronizedGraph.createDummyNode();
}
 else {
  syncNode=mySynchronizedGraph.createNode();
}
MapSequence.fromMap(myNodeMap).put(addedNode,syncNode);
break;
case NODE_DETETED:
Node deletedNode=event.getNode();
if (MapSequence.fromMap(myNodeMap).containsKey(deletedNode)) {
mySynchronizedGraph.deleteNode(MapSequence.fromMap(myNodeMap).get(deletedNode));
}
break;
case EDGE_ADDED:
Edge addedEdge=event.getEdge();
Node source=addedEdge.getSource();
Node target=addedEdge.getTarget();
if (MapSequence.fromMap(myEdgeMap).containsKey(addedEdge)) {
mySynchronizedGraph.addEdge(MapSequence.fromMap(myEdgeMap).get(addedEdge));
}
 else if (MapSequence.fromMap(myNodeMap).containsKey(source) && MapSequence.fromMap(myNodeMap).containsKey(target)) {
Edge edge=mySynchronizedGraph.connect(source,target);
MapSequence.fromMap(myEdgeMap).put(addedEdge,edge);
}
break;
case EDGE_REMOVED:
Edge removedEdge=event.getEdge();
if (MapSequence.fromMap(myEdgeMap).containsKey(removedEdge)) {
mySynchronizedGraph.removeEdge(MapSequence.fromMap(myEdgeMap).get(removedEdge));
}
break;
case EDGE_REVERTED:
Edge revertedEdge=event.getEdge();
if (MapSequence.fromMap(myEdgeMap).containsKey(revertedEdge)) {
mySynchronizedGraph.revertEdge(MapSequence.fromMap(myEdgeMap).get(revertedEdge));
}
break;
case EDGE_SPLITTED:
this.processSplitEvent(event);
break;
default :
}
}
