{
  return ModelAccess.instance().runReadAction(new Computable<Icon>(){
    public Icon compute(){
      Icon mainIcon=null;
      if (node.isUnknown()) {
        return Icons.UNKNOWN_ICON;
      }
      if (node.getConceptDeclarationAdapter() instanceof ConceptDeclaration) {
        ConceptDeclaration concept=(ConceptDeclaration)node.getConceptDeclarationAdapter();
        Method alternativeIconMethod=ModelConstraintsManager.getInstance().getAlternativeIconMethod(concept);
        Icon alternativeIcon=null;
        try {
          if (alternativeIconMethod != null) {
            Object iconObject=alternativeIconMethod.invoke(null,node);
            if (iconObject != null) {
              String alternativeIconPath=(String)iconObject;
              alternativeIcon=getIconFor(concept,alternativeIconPath);
            }
          }
        }
 catch (        Throwable t) {
        }
        if (alternativeIcon != null) {
          mainIcon=alternativeIcon;
        }
 else {
          mainIcon=IconManager.getIconFor(concept);
        }
      }
      if (mainIcon == null) {
        if (node.isRoot()) {
          return Icons.DEFAULT_ROOT_ICON;
        }
 else {
          return Icons.DEFAULT_NODE_ICON;
        }
      }
      RowIcon result=new RowIcon(2);
      result.setIcon(mainIcon,0);
      if (!withoutAdditional) {
        result.setIcon(BaseConcept_Behavior.call_getAdditionalIcon_5017341185733863694(node),1);
      }
      SModel model=node.getModel();
      return (!model.isDisposed() && model.isNotEditable()) ? new LayeredIcon(result,com.intellij.util.Icons.LOCKED_ICON) : result;
    }
  }
);
}
