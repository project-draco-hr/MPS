{
  try {
    final SNode whereToMove;
    whereToMove=MoveNodeDialog.getSelectedObject(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),((SNode)MapSequence.fromMap(_params).get("target")),new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node"){
      @Override public boolean check(      SNode selectedObject,      SNode nodeToMove,      SModel modelOfSelectedNode){
        return SNodeOperations.isInstanceOf(selectedObject,"jetbrains.mps.baseLanguage.structure.ClassConcept") && !(ListSequence.fromList(SNodeOperations.getAncestors(nodeToMove,null,false)).contains(selectedObject));
      }
    }
);
    if (whereToMove == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      @Override public void run(){
        SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("target")));
        if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)((SNode)MapSequence.fromMap(_params).get("target"))))) {
          return;
        }
        SNode node1=((SNode)whereToMove);
        if (!(node1.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)whereToMove))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.MoveStaticMethod",Arrays.asList("destination"),Arrays.asList(whereToMove),((SNode)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MoveStaticMethod",t);
    }
  }
}
