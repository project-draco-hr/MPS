{
  Map<Class<?>,List<String>> set=new LinkedHashMap<Class<?>,List<String>>();
  Method[] methods=this.myClass.getMethods();
  for (  Method m : methods) {
    if (m.getDeclaringClass().equals(this.myClass) && Modifier.isPublic(m.getModifiers())) {
      if (m.getReturnType().equals(void.class)) {
        String name=m.getName();
        if (name.equals("add") || name.equals("addConfigured")) {
          Class<?>[] paramTypes=m.getParameterTypes();
          if (paramTypes.length == 1) {
            ClassInfo.this.putName(paramTypes[0],Scanner.getShortClassName(paramTypes[0]));
          }
        }
 else         if (name.equals("addInner")) {
          Class<?>[] paramTypes=m.getParameterTypes();
          if (paramTypes.length == 1) {
            ClassInfo.this.putName(paramTypes[0],name.substring("add".length()).toLowerCase());
          }
        }
 else         if (name.equals("addConfiguredInner")) {
          Class<?>[] paramTypes=m.getParameterTypes();
          if (paramTypes.length == 1) {
            ClassInfo.this.putName(paramTypes[0],name.substring("addConfigured".length()).toLowerCase());
          }
        }
 else         if (name.startsWith("add")) {
          Class<?>[] paramTypes=m.getParameterTypes();
          if (paramTypes.length == 1) {
            ClassInfo.this.putName(paramTypes[0],name.substring("add".length()).toLowerCase());
          }
        }
      }
 else       if (m.getName().startsWith("create") && (m.getParameterTypes().length == 0)) {
        ClassInfo.this.putName(m.getReturnType(),m.getName().substring("create".length()).toLowerCase());
      }
    }
  }
}
