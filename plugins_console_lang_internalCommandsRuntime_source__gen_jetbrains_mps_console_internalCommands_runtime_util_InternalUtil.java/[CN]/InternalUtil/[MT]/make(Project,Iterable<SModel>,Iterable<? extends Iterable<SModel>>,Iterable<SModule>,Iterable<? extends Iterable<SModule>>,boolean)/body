{
  ProjectOperationContext context=new ProjectOperationContext(project);
  final Iterable<SModel> models=Sequence.fromIterable(models_).concat(Sequence.fromIterable(models__).translate(new ITranslator2<Iterable<SModel>,SModel>(){
    public Iterable<SModel> translate(    Iterable<SModel> it){
      return it;
    }
  }
));
  final Iterable<SModule> modules=Sequence.fromIterable(modules_).concat(Sequence.fromIterable(modules__).translate(new ITranslator2<Iterable<SModule>,SModule>(){
    public Iterable<SModule> translate(    Iterable<SModule> it){
      return it;
    }
  }
));
  final Wrappers._T<Iterable<SModel>> modelsToGenerate=new Wrappers._T<Iterable<SModel>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (Sequence.fromIterable(models_).isEmpty() && Sequence.fromIterable(models__).isEmpty() && Sequence.fromIterable(modules_).isEmpty()&& Sequence.fromIterable(modules__).isEmpty()) {
        modelsToGenerate.value=((Iterable<SModel>)SModelRepository.getInstance().getModelDescriptors());
      }
 else {
        modelsToGenerate.value=Sequence.fromIterable(models).concat(Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
          public Iterable<SModel> translate(          SModule it){
            return it.getModels();
          }
        }
));
      }
      if (dirtyOnly) {
        final ModelGenerationStatusManager mgsm=ModelGenerationStatusManager.getInstance();
        modelsToGenerate.value=Sequence.fromIterable(modelsToGenerate.value).where(new IWhereFilter<SModel>(){
          public boolean accept(          SModel it){
            return mgsm.generationRequired(it);
          }
        }
);
      }
    }
  }
);
  new MakeActionImpl(context,new MakeActionParameters(context,modelsToGenerate.value,null,null,null),dirtyOnly).executeAction();
}
