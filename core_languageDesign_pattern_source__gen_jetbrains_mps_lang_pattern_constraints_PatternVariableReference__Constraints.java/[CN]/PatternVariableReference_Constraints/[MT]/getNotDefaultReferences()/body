{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variable",new BaseReferenceConstraintsDescriptor("variable",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode declaration : SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.pattern.structure.PatternExpression",false,false),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false,new String[]{})) {
            if (SPropertyOperations.getString(declaration,"name") != null) {
              ListSequence.<SNode>fromList(result).addElement(declaration);
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_fw8caj_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
