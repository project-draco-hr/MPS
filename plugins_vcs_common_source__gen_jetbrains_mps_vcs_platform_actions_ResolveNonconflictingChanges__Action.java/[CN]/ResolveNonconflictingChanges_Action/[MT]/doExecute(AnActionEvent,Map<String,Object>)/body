{
  List<VirtualFile> conflictedModelFiles=ConflictingModelsUtil.getConflictingModelFiles(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject());
  MergeProvider provider=GitVcs.getInstance(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject()).getMergeProvider();
  MergeSession session=(provider instanceof MergeProvider2 ? ((MergeProvider2)provider).createMergeSession(conflictedModelFiles) : null);
  ConflictingModelsUtil.ModelConflictResolver resolver=ConflictingModelsUtil.getModelConflictResolverTask(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject(),provider,session,conflictedModelFiles);
  ProgressManager.getInstance().run(resolver);
  if (ListSequence.fromList(resolver.getUnresolvedFiles()).isNotEmpty()) {
    String message="Conflicts in the following model files were not autoresolved:\n";
    for (    VirtualFile file : ListSequence.fromList(resolver.getUnresolvedFiles())) {
      message+=" " + file.getPath() + "\n";
    }
    message+="This happens when you merge in models in an old persistence format and have not merged and re-generated all of their used languages." + " It is recommended to first merge and re-generate the used languages, and then try to auto resolve the conflicts again.";
    Messages.showWarningDialog(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject(),message,"Conflict Resolver");
  }
}
