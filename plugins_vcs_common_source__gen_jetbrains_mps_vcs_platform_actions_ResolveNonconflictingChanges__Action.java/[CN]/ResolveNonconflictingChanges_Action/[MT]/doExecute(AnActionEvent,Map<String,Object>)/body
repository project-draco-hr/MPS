{
  try {
    List<VirtualFile> conflictedModelFiles=ConflictingModelsUtil.getConflictingModelFiles(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject());
    MergeProvider provider=GitVcs.getInstance(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject()).getMergeProvider();
    MergeSession session=(provider instanceof MergeProvider2 ? ((MergeProvider2)provider).createMergeSession(conflictedModelFiles) : null);
    ProgressManager.getInstance().run(ConflictingModelsUtil.getModelConflictResolverTask(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),provider,session,conflictedModelFiles));
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "ResolveNonconflictingChanges",t);
    }
  }
}
