{
  final boolean needToRegenerate=myRegenerateLanguage.getModel().isSelected();
  final String fqName=getCurrentValue();
  if (MPSModuleRepository.getInstance().getModuleByFqName(fqName) != null) {
    setErrorText("Duplicate language name");
    return;
  }
  if (!((SourceVersion.isName(fqName)))) {
    setErrorText("Language namespace should be valid Java package");
    return;
  }
  final LanguageRenamer renamer=new LanguageRenamer(myProject,myLanguage,fqName);
  ModelAccess modelAccess=myProject.getRepository().getModelAccess();
  modelAccess.executeCommand(new Runnable(){
    public void run(){
      renamer.rename(needToRegenerate);
      renamer.update();
    }
  }
);
  if (needToRegenerate) {
    final Set<Language> langs=new LinkedHashSet<Language>();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        langs.add(myLanguage);
        langs.addAll(ModuleRepositoryFacade.getInstance().getAllExtendingLanguages(myLanguage));
      }
    }
);
    for (    final Language l : langs) {
      final List<SModel> models=ListSequence.fromList(new ArrayList<SModel>());
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          ListSequence.fromList(models).addSequence(Sequence.fromIterable(Sequence.fromArray(l.getModels().toArray(new SModel[0]))).where(new IWhereFilter<SModel>(){
            public boolean accept(            SModel it){
              return it instanceof GeneratableSModel && ((GeneratableSModel)it).isGeneratable();
            }
          }
));
        }
      }
);
      if (models == null) {
        setErrorText("Rebuild configuration is invalid");
        return;
      }
      ModuleContext context=new ModuleContext(myLanguage,myProject);
      MakeSession sess=new MakeSession(context);
      if (IMakeService.INSTANCE.get().openNewSession(sess)) {
        IMakeService.INSTANCE.get().make(sess,new ModelsToResources(context,models).resources(false));
      }
    }
  }
  super.doRefactoringAction();
}
