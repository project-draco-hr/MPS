{
  final boolean needToRegenerate=myRegenerateLanguage.getModel().isSelected();
  final String fqName=getCurrentValue();
  if (ModuleRepositoryFacade.getInstance().getModule(fqName,Language.class) != null) {
    setErrorText("Duplicate language name");
    return;
  }
  if (!((SourceVersion.isName(fqName)))) {
    setErrorText("Language namespace should be valid Java package");
    return;
  }
  final LanguageRenamer renamer=new LanguageRenamer(myProject,myLanguage,fqName);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      renamer.rename(needToRegenerate);
      renamer.update();
    }
  }
);
  if (needToRegenerate) {
    final Set<Language> langs=new LinkedHashSet<Language>();
    ModelAccess.instance().runReadAction(new Runnable(){
      @Override public void run(){
        langs.add(myLanguage);
        langs.addAll(ModuleRepositoryFacade.getInstance().getAllExtendingLanguages(myLanguage));
      }
    }
);
    for (    final Language l : langs) {
      GenParameters params=ModelAccess.instance().runReadAction(new Computable<GenParameters>(){
        @Override public GenParameters compute(){
          ModuleTestConfiguration languageConfig=new ModuleTestConfiguration();
          languageConfig.setModuleRef(l.getModuleReference());
          languageConfig.setName("tmp");
          try {
            return languageConfig.getGenParams(myProject.getComponent(MPSProject.class),true);
          }
 catch (          IllegalGeneratorConfigurationException e) {
            return null;
          }
        }
      }
);
      if (params == null) {
        setErrorText("Rebuild configuration is invalid");
        return;
      }
      ModuleContext context=new ModuleContext(myLanguage,ProjectHelper.toMPSProject(myProject));
      MakeSession sess=new MakeSession(context);
      if (IMakeService.INSTANCE.get().openNewSession(sess)) {
        IMakeService.INSTANCE.get().make(sess,new ModelsToResources(context,ListSequence.fromListWithValues(new ArrayList<SModel>(),(Iterable<SModel>)params.getModelDescriptors())).resources(false));
      }
    }
  }
  super.doRefactoringAction();
}
