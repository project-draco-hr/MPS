{
  Map<Edge,Integer> edgeShifts=MapSequence.fromMap(new HashMap<Edge,Integer>());
  for (  QuasiRepresentationModifier.Modification modification : ListSequence.fromList(modifications)) {
    List<Edge> edges=modification.getNewEdges();
    Node node=modification.getSource();
    Direction2D dir=MapSequence.fromMap(directions).get(modification.getSourceDart());
    int nodeLength;
    if (dir.isVertical()) {
      nodeLength=MapSequence.fromMap(nodeSizes).get(node).width;
    }
 else {
      nodeLength=MapSequence.fromMap(nodeSizes).get(node).height;
    }
    int unitShift=nodeLength / (2 * ListSequence.fromList(edges).count());
    int curShift=0;
    for (    Edge edge : ListSequence.fromList(edges)) {
      MapSequence.fromMap(edgeShifts).put(edge,curShift);
      curShift+=unitShift;
    }
  }
  return edgeShifts;
}
