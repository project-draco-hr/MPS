{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAbstractToolKeystroke;
case 1:
  return myConceptAbstractToolShortcut;
case 2:
return myConceptActionAccessOperation;
case 3:
return myConceptActionConstructionParameterDeclaration;
case 4:
return myConceptActionConstructorParameterReferenceOperation;
case 5:
return myConceptActionDataParameterDeclaration;
case 6:
return myConceptActionDataParameterReferenceOperation;
case 7:
return myConceptActionDeclaration;
case 8:
return myConceptActionGroupDeclaration;
case 9:
return myConceptActionGroupMember;
case 10:
return myConceptActionGroupRef;
case 11:
return myConceptActionInstance;
case 12:
return myConceptActionParameter;
case 13:
return myConceptActionParameterCondition;
case 14:
return myConceptActionParameterDeclaration;
case 15:
return myConceptActionParameterReference;
case 16:
return myConceptActionParameterReferenceOperation;
case 17:
return myConceptActionPlaceSpecification;
case 18:
return myConceptActionReference;
case 19:
return myConceptActionType;
case 20:
return myConceptAddElementStatement;
case 21:
return myConceptAddKeystrokeStatement;
case 22:
return myConceptAddStatement;
case 23:
return myConceptAddTabOperation;
case 24:
return myConceptBaseNodeBlock;
case 25:
return myConceptBaseProjectOperation;
case 26:
return myConceptBaseToolDeclaration;
case 27:
return myConceptBuildGroupBlock;
case 28:
return myConceptButtonCreator;
case 29:
return myConceptCloseTabOperation;
case 30:
return myConceptConceptCondition;
case 31:
return myConceptConceptFunctionParameter_AnActionEvent;
case 32:
return myConceptConceptFunctionParameter_Concept;
case 33:
return myConceptConceptFunctionParameter_CreatorType;
case 34:
return myConceptConceptFunctionParameter_IModule;
case 35:
return myConceptConceptFunctionParameter_MPSProject;
case 36:
return myConceptConceptFunctionParameter_Model;
case 37:
return myConceptConceptFunctionParameter_OperationContext;
case 38:
return myConceptConceptFunctionParameter_PreferencePage_component;
case 39:
return myConceptConceptFunctionParameter_Project;
case 40:
return myConceptConceptFunctionParameter_SConceptClass;
case 41:
return myConceptConceptFunctionParameter_node;
case 42:
return myConceptConceptsBlock;
case 43:
return myConceptCreateBlock;
case 44:
return myConceptCreateNodeAspectBlock;
case 45:
return myConceptCreateTabBlock;
case 46:
return myConceptCustomCondition;
case 47:
return myConceptCustomToolShortcut;
case 48:
return myConceptDisposeBlock;
case 49:
return myConceptDoUpdateBlock;
case 50:
return myConceptEditableModel;
case 51:
return myConceptEditorTab;
case 52:
return myConceptEditorTabReference;
case 53:
return myConceptElementListContents;
case 54:
return myConceptEnumerateChildrenFunction;
case 55:
return myConceptEverywhereActionPlace;
case 56:
return myConceptExecuteBlock;
case 57:
return myConceptGetComponentBlock;
case 58:
return myConceptGetGroupOperation;
case 59:
return myConceptGetNodeBlock;
case 60:
return myConceptGetNodesBlock;
case 61:
return myConceptGetSelectedTabOperation;
case 62:
return myConceptGroupAccessOperation;
case 63:
return myConceptGroupAnchor;
case 64:
return myConceptGroupContents;
case 65:
return myConceptGroupType;
case 66:
return myConceptIdeaActionsDescriptor;
case 67:
return myConceptIdeaConfigurationXml;
case 68:
return myConceptIdeaInitializerDescriptor;
case 69:
return myConceptIdeaPluginDependency;
case 70:
return myConceptInitBlock;
case 71:
return myConceptInterfaceExtentionPoint;
case 72:
return myConceptInterfaceGroup;
case 73:
return myConceptIsApplicableBlock;
case 74:
return myConceptIsApplicableTabBlock;
case 75:
return myConceptKeyMapKeystroke;
case 76:
return myConceptKeyStrokeType;
case 77:
return myConceptKeymapChangesDeclaration;
case 78:
return myConceptKeymapRef;
case 79:
return myConceptListenBlock;
case 80:
return myConceptMPSPluginDependency;
case 81:
return myConceptModificationStatement;
case 82:
return myConceptNodesBlock;
case 83:
return myConceptNonDumbAwareActions;
case 84:
return myConceptNumberToolShortcut;
case 85:
return myConceptOldConceptsBlock;
case 86:
return myConceptOldCreateBlock;
case 87:
return myConceptOnAfterReadBlock;
case 88:
return myConceptOnBeforeWriteBlock;
case 89:
return myConceptOrder;
case 90:
return myConceptOrderConstraints;
case 91:
return myConceptOrderReference;
case 92:
return myConceptParameterCondition_ConceptFunctionParameter;
case 93:
return myConceptParameterizedShortcutChange;
case 94:
return myConceptPersistentPropertyDeclaration;
case 95:
return myConceptPersistentPropertyReference;
case 96:
return myConceptPinTabOperation;
case 97:
return myConceptPluginDependency;
case 98:
return myConceptPopupCreator;
case 99:
return myConceptPreferencePage;
case 100:
return myConceptPreferencePageCommitBlock;
case 101:
return myConceptPreferencePageIsModifiedBlock;
case 102:
return myConceptPreferencePageResetBlock;
case 103:
return myConceptPreferencesComponentDeclaration;
case 104:
return myConceptPreferencesComponentType;
case 105:
return myConceptRequiredCondition;
case 106:
return myConceptSeparator;
case 107:
return myConceptShortcutChange;
case 108:
return myConceptSimpleActionPlace;
case 109:
return myConceptSimpleShortcutChange;
case 110:
return myConceptSmartDisposeClosureParameterDeclaration;
case 111:
return myConceptTabbedToolDeclaration;
case 112:
return myConceptTabbedToolOperation;
case 113:
return myConceptToStringConceptFunction;
case 114:
return myConceptToStringParameter;
case 115:
return myConceptToolActionPlace;
case 116:
return myConceptToolDeclaration;
case 117:
return myConceptToolInstanceExpression;
case 118:
return myConceptToolKeystroke;
case 119:
return myConceptToolTab;
case 120:
return myConceptToolType;
case 121:
return myConceptToolbarCreator;
case 122:
return myConceptUnpinTabOperation;
case 123:
return myConceptUpdateBlock;
case 124:
return myConceptUpdateGroupBlock;
case 125:
return myConceptUpdateGroupFunction;
default :
throw new IllegalStateException();
}
}
