{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0se.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptActionAccessOperation;
      }
    break;
case 1:
  if (true) {
    return myConceptActionConstructionParameterDeclaration;
  }
break;
case 2:
if (true) {
return myConceptActionConstructorParameterReferenceOperation;
}
break;
case 3:
if (true) {
return myConceptActionDataParameterDeclaration;
}
break;
case 4:
if (true) {
return myConceptActionDataParameterReferenceOperation;
}
break;
case 5:
if (true) {
return myConceptActionDeclaration;
}
break;
case 6:
if (true) {
return myConceptActionGroupDeclaration;
}
break;
case 7:
if (true) {
return myConceptActionGroupMember;
}
break;
case 8:
if (true) {
return myConceptActionGroupRef;
}
break;
case 9:
if (true) {
return myConceptActionInstance;
}
break;
case 10:
if (true) {
return myConceptActionParameter;
}
break;
case 11:
if (true) {
return myConceptActionParameterCondition;
}
break;
case 12:
if (true) {
return myConceptActionParameterDeclaration;
}
break;
case 13:
if (true) {
return myConceptActionParameterReference;
}
break;
case 14:
if (true) {
return myConceptActionParameterReferenceOperation;
}
break;
case 15:
if (true) {
return myConceptActionPlaceSpecification;
}
break;
case 16:
if (true) {
return myConceptActionReference;
}
break;
case 17:
if (true) {
return myConceptActionType;
}
break;
case 18:
if (true) {
return myConceptAddElementStatement;
}
break;
case 19:
if (true) {
return myConceptAddKeystrokeStatement;
}
break;
case 20:
if (true) {
return myConceptAddStatement;
}
break;
case 21:
if (true) {
return myConceptAddTabOperation;
}
break;
case 22:
if (true) {
return myConceptBaseNodeBlock;
}
break;
case 23:
if (true) {
return myConceptBaseProjectOperation;
}
break;
case 24:
if (true) {
return myConceptBaseToolDeclaration;
}
break;
case 25:
if (true) {
return myConceptBuildGroupBlock;
}
break;
case 26:
if (true) {
return myConceptButtonCreator;
}
break;
case 27:
if (true) {
return myConceptCloseTabOperation;
}
break;
case 28:
if (true) {
return myConceptConceptCondition;
}
break;
case 29:
if (true) {
return myConceptConceptFunctionParameter_AnActionEvent;
}
break;
case 30:
if (true) {
return myConceptConceptFunctionParameter_Concept;
}
break;
case 31:
if (true) {
return myConceptConceptFunctionParameter_CreatorType;
}
break;
case 32:
if (true) {
return myConceptConceptFunctionParameter_IModule;
}
break;
case 33:
if (true) {
return myConceptConceptFunctionParameter_MPSProject;
}
break;
case 34:
if (true) {
return myConceptConceptFunctionParameter_Model;
}
break;
case 35:
if (true) {
return myConceptConceptFunctionParameter_OperationContext;
}
break;
case 36:
if (true) {
return myConceptConceptFunctionParameter_PreferencePage_component;
}
break;
case 37:
if (true) {
return myConceptConceptFunctionParameter_Project;
}
break;
case 38:
if (true) {
return myConceptConceptFunctionParameter_node;
}
break;
case 39:
if (true) {
return myConceptCreateNodeAspectBlock;
}
break;
case 40:
if (true) {
return myConceptCreateTabBlock;
}
break;
case 41:
if (true) {
return myConceptCustomCondition;
}
break;
case 42:
if (true) {
return myConceptDisposeBlock;
}
break;
case 43:
if (true) {
return myConceptDoUpdateBlock;
}
break;
case 44:
if (true) {
return myConceptEditableModel;
}
break;
case 45:
if (true) {
return myConceptEditorTab;
}
break;
case 46:
if (true) {
return myConceptEditorTabReference;
}
break;
case 47:
if (true) {
return myConceptElementListContents;
}
break;
case 48:
if (true) {
return myConceptEnumerateChildrenFunction;
}
break;
case 49:
if (true) {
return myConceptEverywhereActionPlace;
}
break;
case 50:
if (true) {
return myConceptExecuteBlock;
}
break;
case 51:
if (true) {
return myConceptGetComponentBlock;
}
break;
case 52:
if (true) {
return myConceptGetConceptsBlock;
}
break;
case 53:
if (true) {
return myConceptGetGroupOperation;
}
break;
case 54:
if (true) {
return myConceptGetNodeBlock;
}
break;
case 55:
if (true) {
return myConceptGetNodesBlock;
}
break;
case 56:
if (true) {
return myConceptGetSelectedTabOperation;
}
break;
case 57:
if (true) {
return myConceptGroupAccessOperation;
}
break;
case 58:
if (true) {
return myConceptGroupAnchor;
}
break;
case 59:
if (true) {
return myConceptGroupContents;
}
break;
case 60:
if (true) {
return myConceptGroupType;
}
break;
case 61:
if (true) {
return myConceptIdeaActionsDescriptor;
}
break;
case 62:
if (true) {
return myConceptIdeaConfigurationXml;
}
break;
case 63:
if (true) {
return myConceptIdeaInitializerDescriptor;
}
break;
case 64:
if (true) {
return myConceptIdeaPluginDependency;
}
break;
case 65:
if (true) {
return myConceptInitBlock;
}
break;
case 66:
if (true) {
return myConceptInterfaceExtentionPoint;
}
break;
case 67:
if (true) {
return myConceptInterfaceGroup;
}
break;
case 68:
if (true) {
return myConceptIsApplicableBlock;
}
break;
case 69:
if (true) {
return myConceptIsApplicableTabBlock;
}
break;
case 70:
if (true) {
return myConceptKeyMapKeystroke;
}
break;
case 71:
if (true) {
return myConceptKeyStrokeType;
}
break;
case 72:
if (true) {
return myConceptKeymapChangesDeclaration;
}
break;
case 73:
if (true) {
return myConceptKeymapRef;
}
break;
case 74:
if (true) {
return myConceptListenBlock;
}
break;
case 75:
if (true) {
return myConceptMPSPluginDependency;
}
break;
case 76:
if (true) {
return myConceptModificationStatement;
}
break;
case 77:
if (true) {
return myConceptNewCreateBlock;
}
break;
case 78:
if (true) {
return myConceptNodesBlock;
}
break;
case 79:
if (true) {
return myConceptNonDumbAwareActions;
}
break;
case 80:
if (true) {
return myConceptOnAfterReadBlock;
}
break;
case 81:
if (true) {
return myConceptOnBeforeWriteBlock;
}
break;
case 82:
if (true) {
return myConceptOrder;
}
break;
case 83:
if (true) {
return myConceptOrderConstraints;
}
break;
case 84:
if (true) {
return myConceptOrderReference;
}
break;
case 85:
if (true) {
return myConceptParameterCondition_ConceptFunctionParameter;
}
break;
case 86:
if (true) {
return myConceptParameterizedShortcutChange;
}
break;
case 87:
if (true) {
return myConceptPersistentPropertyDeclaration;
}
break;
case 88:
if (true) {
return myConceptPersistentPropertyReference;
}
break;
case 89:
if (true) {
return myConceptPinTabOperation;
}
break;
case 90:
if (true) {
return myConceptPluginDependency;
}
break;
case 91:
if (true) {
return myConceptPopupCreator;
}
break;
case 92:
if (true) {
return myConceptPreferencePage;
}
break;
case 93:
if (true) {
return myConceptPreferencePageCommitBlock;
}
break;
case 94:
if (true) {
return myConceptPreferencePageIsModifiedBlock;
}
break;
case 95:
if (true) {
return myConceptPreferencePageResetBlock;
}
break;
case 96:
if (true) {
return myConceptPreferencesComponentDeclaration;
}
break;
case 97:
if (true) {
return myConceptPreferencesComponentType;
}
break;
case 98:
if (true) {
return myConceptRequiredCondition;
}
break;
case 99:
if (true) {
return myConceptSeparator;
}
break;
case 100:
if (true) {
return myConceptShortcutChange;
}
break;
case 101:
if (true) {
return myConceptSimpleActionPlace;
}
break;
case 102:
if (true) {
return myConceptSimpleShortcutChange;
}
break;
case 103:
if (true) {
return myConceptSmartDisposeClosureParameterDeclaration;
}
break;
case 104:
if (true) {
return myConceptTabbedToolDeclaration;
}
break;
case 105:
if (true) {
return myConceptTabbedToolOperation;
}
break;
case 106:
if (true) {
return myConceptToStringConceptFunction;
}
break;
case 107:
if (true) {
return myConceptToStringParameter;
}
break;
case 108:
if (true) {
return myConceptToolActionPlace;
}
break;
case 109:
if (true) {
return myConceptToolDeclaration;
}
break;
case 110:
if (true) {
return myConceptToolInstanceExpression;
}
break;
case 111:
if (true) {
return myConceptToolTab;
}
break;
case 112:
if (true) {
return myConceptToolType;
}
break;
case 113:
if (true) {
return myConceptToolbarCreator;
}
break;
case 114:
if (true) {
return myConceptUnpinTabOperation;
}
break;
case 115:
if (true) {
return myConceptUpdateBlock;
}
break;
case 116:
if (true) {
return myConceptUpdateGroupBlock;
}
break;
case 117:
if (true) {
return myConceptUpdateGroupFunction;
}
break;
default :
}
}
return null;
}
