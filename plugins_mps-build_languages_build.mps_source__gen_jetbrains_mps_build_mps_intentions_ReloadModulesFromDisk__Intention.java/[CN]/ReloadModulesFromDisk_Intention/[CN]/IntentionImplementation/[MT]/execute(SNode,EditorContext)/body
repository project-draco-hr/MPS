{
  VisibleModules visible=new VisibleModules(node);
  visible.collect();
  PathConverter pathConverter=new PathConverter(node);
{
    Iterator<SNode> module_it=ListSequence.fromList(SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xcf935df46994e9cL,0xa132fa109541cba3L,0x4780308f5d333ebL,"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule"),false,new SAbstractConcept[]{})).iterator();
    SNode module_var;
    while (module_it.hasNext()) {
      module_var=module_it.next();
      if (SNodeOperations.isInstanceOf(module_var,MetaAdapterFactory.getConcept(0xcf935df46994e9cL,0xa132fa109541cba3L,0x4c6db07d2e56a8b4L,"jetbrains.mps.build.mps.structure.BuildMps_Generator"))) {
        continue;
      }
      try {
        ModuleLoader.createModuleChecker(module_var,visible,pathConverter).check(ModuleChecker.CheckType.LOAD_IMPORTANT_PART);
      }
 catch (      ModuleLoaderException ex) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error(ex.getMessage());
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug(ex.getMessage(),ex);
        }
      }
    }
  }
}
