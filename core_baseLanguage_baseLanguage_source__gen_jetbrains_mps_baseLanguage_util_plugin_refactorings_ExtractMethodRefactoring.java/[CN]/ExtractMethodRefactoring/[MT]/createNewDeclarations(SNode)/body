{
  Map<SNode,List<SNode>> mapping=MapSequence.<SNode,List<SNode>>fromMap(new HashMap<SNode,List<SNode>>());
  for (  SNode reference : ListSequence.<SNode>fromList(SNodeOperations.getDescendantsWhereConceptInList(method,new String[]{"jetbrains.mps.baseLanguage.structure.LocalVariableReference","jetbrains.mps.baseLanguage.structure.ParameterReference"},false,new String[]{}))) {
    SNode declaration=SLinkOperations.getTarget(reference,"variableDeclaration",false);
    if (!(ListSequence.<SNode>fromList(SNodeOperations.getAncestors(declaration,null,false)).contains(method))) {
      if (!(SetSequence.<SNode>fromSet(MapSequence.fromMap(mapping).keySet()).contains(declaration))) {
        MapSequence.<SNode,List<SNode>>fromMap(mapping).put(declaration,new ArrayList<SNode>());
      }
      ListSequence.<SNode>fromList(MapSequence.<SNode,List<SNode>>fromMap(mapping).get(declaration)).addElement(reference);
    }
  }
  for (  SNode declaration : SetSequence.<SNode>fromSet(MapSequence.fromMap(mapping).keySet())) {
    SNode newDeclaration=new ExtractMethodRefactoring.QuotationClass_jq3ovj_a0a0a2a7().createNode(SNodeOperations.copyNode(SLinkOperations.getTarget(declaration,"type",true)),SPropertyOperations.getString(declaration,"name"));
    SNodeOperations.insertPrevSiblingChild(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method,"body",true),"statement",true)).first(),new ExtractMethodRefactoring.QuotationClass_jq3ovj_a0a0b0c0h().createNode(newDeclaration));
    for (    SNode reference : ListSequence.<SNode>fromList(MapSequence.<SNode,List<SNode>>fromMap(mapping).get(declaration))) {
      SNodeOperations.replaceWithAnother(reference,new ExtractMethodRefactoring.QuotationClass_jq3ovj_a0a0a0c0c0h().createNode(newDeclaration));
    }
  }
}
