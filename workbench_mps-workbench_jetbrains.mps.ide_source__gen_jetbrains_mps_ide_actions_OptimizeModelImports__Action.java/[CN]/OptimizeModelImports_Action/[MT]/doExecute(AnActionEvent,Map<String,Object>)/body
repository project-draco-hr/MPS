{
  final StringBuilder report=new StringBuilder();
  final Task.Modal task=new Task.Modal(((Project)MapSequence.fromMap(_params).get("ideaProject")),"Optimizing model imports",true){
    public void run(    @NotNull ProgressIndicator indicator){
      final ProgressMonitorAdapter monitor=new ProgressMonitorAdapter(indicator);
      try {
        final int modelsNumber=((List<SModel>)MapSequence.fromMap(_params).get("models")).size();
        final SRepository repo=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
        monitor.start("Optimizing imports of " + modelsNumber + " models",modelsNumber);
        WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable(){
          public void run(){
          }
        }
);
        final OptimizeImportsHelper helper=new OptimizeImportsHelper(repo);
        repo.getModelAccess().runWriteAction(new Runnable(){
          public void run(){
            String result=helper.optimizeModelsImports(((List<SModel>)MapSequence.fromMap(_params).get("models")),monitor.subTask(modelsNumber));
            report.append(result);
          }
        }
);
        if (monitor.isCanceled()) {
          return;
        }
        monitor.step("Saving...");
        WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable(){
          public void run(){
            repo.getModelAccess().executeCommand(new Runnable(){
              public void run(){
                repo.saveAll();
              }
            }
);
          }
        }
);
        monitor.advance(1);
      }
  finally {
        monitor.done();
      }
    }
  }
;
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      ProgressManager.getInstance().run(task);
      Messages.showMessageDialog(((Project)MapSequence.fromMap(_params).get("ideaProject")),(report.length() == 0 ? "Nothing to optimize" : report.toString()),"Optimize Imports",Messages.getInformationIcon());
    }
  }
,ModalityState.defaultModalityState());
}
