{
  List<Language> languages=getModuleRepository().getAllLanguages();
  for (  Language l : languages) {
    List<VirtualFile> classfiles=new ArrayList<VirtualFile>();
    addDescriptorClassFiles(classfiles,getStubDir(l,l.getClassesGen()));
    addDescriptorClassFiles(classfiles,getStubDir(l,l.getClassesDir()));
    List<String> files=new ArrayList<String>();
    for (    VirtualFile f : classfiles) {
      String name=f.getNameWithoutExtension();
      if (name.endsWith("_StubDescriptor")) {
        files.add(name);
      }
    }
    for (    String fileName : files) {
      Class descrClass=l.getClass(getName(l,fileName));
      if (descrClass == null)       continue;
      try {
        BaseLibStubDescriptor descr=(BaseLibStubDescriptor)descrClass.newInstance();
        SolutionDescriptor descriptor=new SolutionDescriptor();
        descriptor.setUUID(descr.getModuleId());
        descriptor.setNamespace(descr.getModuleName());
        descriptor.setCompileInMPS(false);
        descriptor.setEnableJavaStubs(true);
        descriptor.setExternallyVisible(true);
        descriptor.setDontLoadClasses(true);
        for (        String path : descr.getPaths()) {
          StubModelsEntry sme=new StubModelsEntry();
          sme.setIncludedInVCS(false);
          sme.setPath(path);
          sme.setManager(descr.getManager());
          descriptor.getStubModelEntries().add(sme);
        }
        Solution.newInstance(descriptor);
      }
 catch (      InstantiationException e) {
        LOG.error(e);
      }
catch (      IllegalAccessException e) {
        LOG.error(e);
      }
    }
  }
}
