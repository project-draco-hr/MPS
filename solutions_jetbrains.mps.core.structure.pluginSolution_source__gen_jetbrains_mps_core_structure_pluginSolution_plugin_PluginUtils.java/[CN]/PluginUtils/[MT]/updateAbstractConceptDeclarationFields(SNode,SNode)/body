{
  SPropertyOperations.set(destination,"name",SPropertyOperations.getString(source,"name"));
  List<SNode> properties=new ArrayList<SNode>();
  for (  SNode property : SLinkOperations.getTargets(source,"propertyDeclaration",true)) {
    properties.add(convertProperty(property));
  }
  if (ListSequence.fromList(properties).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(ListSequence.fromList(properties));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  List<SNode> links=new ArrayList<SNode>();
  for (  SNode linkNode : SLinkOperations.getTargets(source,"linkDeclaration",true)) {
    SNode link=null;
    if (SPropertyOperations.hasValue(linkNode,"metaClass","reference","reference")) {
      link=SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SReference",null);
    }
 else     if (SPropertyOperations.hasValue(linkNode,"metaClass","aggregation","reference")) {
      link=SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SChildLink",null);
    }
    SPropertyOperations.set(link,"name",SPropertyOperations.getString(linkNode,"role"));
    link.addReference(new DynamicReference("target",link,null,SPropertyOperations.getString(SLinkOperations.getTarget(linkNode,"target",false),"name")));
    SLinkOperations.setTarget(link,"cardinality",SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SCardinality",null),true);
    SPropertyOperations.set(SLinkOperations.getTarget(link,"cardinality",true),"isRequired","" + (SPropertyOperations.hasValue(linkNode,"sourceCardinality","1","0..1") || SPropertyOperations.hasValue(linkNode,"sourceCardinality","1..n","0..1")));
    SPropertyOperations.set(SLinkOperations.getTarget(link,"cardinality",true),"isMultiple","" + (SPropertyOperations.hasValue(linkNode,"sourceCardinality","0..n","0..1") || SPropertyOperations.hasValue(linkNode,"sourceCardinality","1..n","0..1")));
    ListSequence.fromList(links).addElement(link);
  }
  if (ListSequence.fromList(links).isNotEmpty()) {
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addSequence(ListSequence.fromList(links));
    ListSequence.fromList(SNodeOperations.getChildren(destination,SLinkOperations.findLinkDeclaration("jetbrains.mps.core.structure.structure.SAbstractConcept","members"))).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.structure.structure.SConceptMemberEmptyLine",null));
  }
  removeLastChild(destination);
}
