{
  Set<EditorMessage> messages=new LinkedHashSet<EditorMessage>();
  if (rootNode.getModel() == null) {
    return messages;
  }
  if (rootNode.getModel().getModelDescriptor().isTransient()) {
    return messages;
  }
  List<SReference> yetBadReferences=new ArrayList<SReference>();
  SReference.disableLogging();
  final ArrayList<ResolveResult> resolveResultArrayList=new ArrayList<ResolveResult>();
  try {
    Set<SReference> badReferences=collectBadReferences(rootNode);
    if (!badReferences.isEmpty()) {
      yetBadReferences=Resolver.resolveReferences(badReferences,operationContext,resolveResultArrayList,false);
    }
  }
  finally {
    SReference.enableLogging();
  }
  ThreadUtils.runInUIThreadNoWait(new Runnable(){
    public void run(){
      if (resolveResultArrayList.isEmpty())       return;
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
            public void run(){
              for (              ResolveResult resolveResult : resolveResultArrayList) {
                resolveResult.setTarget();
              }
            }
          }
);
        }
      }
);
    }
  }
);
  for (  SReference ref : yetBadReferences) {
    EditorMessage message=createHighlighterMessage(ref.getSourceNode(),"unresolved reference");
    messages.add(message);
  }
  return messages;
}
