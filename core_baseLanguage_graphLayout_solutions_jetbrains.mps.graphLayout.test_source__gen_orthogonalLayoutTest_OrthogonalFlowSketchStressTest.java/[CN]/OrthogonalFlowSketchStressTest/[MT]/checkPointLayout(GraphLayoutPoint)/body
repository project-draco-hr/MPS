{
  Graph graph=graphLayout.getGraph();
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Assert.assertTrue(MapSequence.fromMap(graphLayout.getNodeLayout()).containsKey(node));
  }
  List<Edge> edges=graph.getEdges();
  for (  Edge edge : ListSequence.fromList(edges)) {
    Assert.assertTrue(MapSequence.fromMap(graphLayout.getEdgeLayout()).containsKey(edge));
    List<Point> edgeLayout=graphLayout.getLayoutFor(edge);
    Assert.assertTrue(ListSequence.fromList(edgeLayout).count() == 2);
    Assert.assertTrue(ListSequence.fromList(edgeLayout).getElement(0).x == ListSequence.fromList(edgeLayout).getElement(1).x || ListSequence.fromList(edgeLayout).getElement(0).y == ListSequence.fromList(edgeLayout).getElement(1).y);
  }
  for (int i=0; i < ListSequence.fromList(edges).count(); i++) {
    for (int j=i + 1; j < ListSequence.fromList(edges).count(); j++) {
      List<Point> edgeLayout1=graphLayout.getLayoutFor(ListSequence.fromList(edges).getElement(i));
      List<Point> edgeLayout2=graphLayout.getLayoutFor(ListSequence.fromList(edges).getElement(j));
      int[] x=new int[4];
      int[] y=new int[4];
      int cur=0;
      for (      Point point : ListSequence.fromList(edgeLayout1)) {
        x[cur]=point.x;
        y[cur++]=point.y;
      }
      for (      Point point : ListSequence.fromList(edgeLayout2)) {
        x[cur]=point.x;
        y[cur++]=point.y;
      }
      if (x[0] != x[1]) {
        for (int k=0; k < 4; k++) {
          int p=x[k];
          x[k]=y[k];
          y[k]=p;
        }
      }
      if (x[2] == x[3]) {
        Assert.assertFalse(GeomUtil.insideOpenSegment(x[0],x[1],x[2]));
        Assert.assertFalse(GeomUtil.insideOpenSegment(x[0],x[1],x[3]));
      }
 else {
        boolean vInside=GeomUtil.insideOpenSegment(y[0],y[1],y[2]);
        boolean hInside=GeomUtil.insideOpenSegment(x[2],x[3],x[0]);
        Assert.assertFalse(vInside && hInside);
      }
    }
  }
}
