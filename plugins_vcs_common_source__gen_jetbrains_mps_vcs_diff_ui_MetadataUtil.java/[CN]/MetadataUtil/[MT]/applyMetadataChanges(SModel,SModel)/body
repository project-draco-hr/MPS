{
  SNode root=ListSequence.fromList(SModelOperations.getRoots(metadataModel,"jetbrains.mps.ide.vcs.modelmetadata.structure.Model")).first();
  model.setVersion(SPropertyOperations.getInteger(root,"version"));
  if (model instanceof DefaultSModel) {
    check_ca1g54_a0a2a5(((DefaultSModel)model).getSModelHeader(),root);
  }
  Set<ModuleReference> oldImpLang=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),((ABCDE)model).importedLanguages());
  Set<ModuleReference> impLang=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),ListSequence.fromList(SLinkOperations.getTargets(root,"language",true)).select(new ISelector<SNode,ModuleReference>(){
    public ModuleReference select(    SNode it){
      return new ModuleReference(SPropertyOperations.getString(it,"qualifiedName"),SPropertyOperations.getString(it,"uuid"));
    }
  }
));
  SetSequence.fromSet(oldImpLang).subtract(SetSequence.fromSet(impLang)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      ((ABCDE)model).deleteLanguage(it);
    }
  }
);
  SetSequence.fromSet(impLang).subtract(SetSequence.fromSet(oldImpLang)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      ((ABCDE)model).addLanguage(it);
    }
  }
);
  Set<ModuleReference> oldGenLang=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),model.engagedOnGenerationLanguages());
  Set<ModuleReference> genLang=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),ListSequence.fromList(SLinkOperations.getTargets(root,"languageEngagedOnGeneration",true)).select(new ISelector<SNode,ModuleReference>(){
    public ModuleReference select(    SNode it){
      return new ModuleReference(SPropertyOperations.getString(it,"qualifiedName"),SPropertyOperations.getString(it,"uuid"));
    }
  }
));
  SetSequence.fromSet(oldGenLang).subtract(SetSequence.fromSet(genLang)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      model.removeEngagedOnGenerationLanguage(it);
    }
  }
);
  SetSequence.fromSet(genLang).subtract(SetSequence.fromSet(oldGenLang)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      model.addEngagedOnGenerationLanguage(it);
    }
  }
);
  Set<ModuleReference> oldDevkit=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),((ABCDE)model).importedDevkits());
  Set<ModuleReference> devkit=SetSequence.fromSetWithValues(new LinkedHashSet<ModuleReference>(),ListSequence.fromList(SLinkOperations.getTargets(root,"devkit",true)).select(new ISelector<SNode,ModuleReference>(){
    public ModuleReference select(    SNode it){
      return new ModuleReference(SPropertyOperations.getString(it,"qualifiedName"),SPropertyOperations.getString(it,"uuid"));
    }
  }
));
  SetSequence.fromSet(oldDevkit).subtract(SetSequence.fromSet(devkit)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      ((ABCDE)model).deleteDevKit(it);
    }
  }
);
  SetSequence.fromSet(devkit).subtract(SetSequence.fromSet(oldDevkit)).visitAll(new IVisitor<ModuleReference>(){
    public void visit(    ModuleReference it){
      ((ABCDE)model).addDevKit(it);
    }
  }
);
  Set<SModelReference> oldImports=SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(),Sequence.fromIterable(((Iterable<SModel.ImportElement>)(model.importedModels()))).select(new ISelector<SModel.ImportElement,SModelReference>(){
    public SModelReference select(    SModel.ImportElement it){
      return it.getModelReference();
    }
  }
));
  Set<SModelReference> imports=SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(),ListSequence.fromList(SLinkOperations.getTargets(root,"import",true)).select(new ISelector<SNode,SModelReference>(){
    public SModelReference select(    SNode it){
      return new SModelReference(new SModelFqName(SPropertyOperations.getString(it,"qualifiedName"),SPropertyOperations.getString(it,"stereotype")),SModelId.fromString(SPropertyOperations.getString(it,"uuid")));
    }
  }
));
  SetSequence.fromSet(oldImports).subtract(SetSequence.fromSet(imports)).visitAll(new IVisitor<SModelReference>(){
    public void visit(    SModelReference it){
      model.deleteModelImport(it);
    }
  }
);
  SetSequence.fromSet(imports).subtract(SetSequence.fromSet(oldImports)).visitAll(new IVisitor<SModelReference>(){
    public void visit(    SModelReference it){
      model.addModelImport(it,false);
    }
  }
);
}
