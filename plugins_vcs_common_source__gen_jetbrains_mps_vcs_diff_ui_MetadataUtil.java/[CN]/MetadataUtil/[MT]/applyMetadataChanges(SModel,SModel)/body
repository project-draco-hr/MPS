{
  if (!(((EditableSModel)metadataModel).isChanged())) {
    return;
  }
  final SModelBase modelBase=(SModelBase)model;
  SNode root=ListSequence.fromList(SModelOperations.getRoots(metadataModel,"jetbrains.mps.ide.vcs.modelmetadata.structure.Model")).first();
  modelBase.setVersion(SPropertyOperations.getInteger(root,MetaAdapterFactory.getProperty(new UUID(7921841224385317272l,-7108959942382919355l),8374934269827354989l,8374934269827355115l,"version")));
  if (model instanceof GeneratableSModel) {
    check_ca1g54_a0a5a8(((GeneratableSModel)model),root);
  }
  Set<SModuleReference> oldImpLang=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),modelBase.importedLanguages());
  Set<SModuleReference> impLang=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),ListSequence.fromList(SLinkOperations.getChildren(root,MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l,-7108959942382919355l),8374934269827354989l,4685150495576720950l,"language"))).select(new ISelector<SNode,SModuleReference>(){
    public SModuleReference select(    SNode it){
      return getModuleReference(it);
    }
  }
));
  SetSequence.fromSet(oldImpLang).subtract(SetSequence.fromSet(impLang)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.deleteLanguage(it);
    }
  }
);
  SetSequence.fromSet(impLang).subtract(SetSequence.fromSet(oldImpLang)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.addLanguage(it);
    }
  }
);
  Set<SModuleReference> oldGenLang=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),modelBase.engagedOnGenerationLanguages());
  Set<SModuleReference> genLang=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),ListSequence.fromList(SLinkOperations.getChildren(root,MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l,-7108959942382919355l),8374934269827354989l,4685150495576720952l,"languageEngagedOnGeneration"))).select(new ISelector<SNode,SModuleReference>(){
    public SModuleReference select(    SNode it){
      return getModuleReference(it);
    }
  }
));
  SetSequence.fromSet(oldGenLang).subtract(SetSequence.fromSet(genLang)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.removeEngagedOnGenerationLanguage(it);
    }
  }
);
  SetSequence.fromSet(genLang).subtract(SetSequence.fromSet(oldGenLang)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.addEngagedOnGenerationLanguage(it);
    }
  }
);
  Set<SModuleReference> oldDevkit=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),modelBase.importedDevkits());
  Set<SModuleReference> devkit=SetSequence.fromSetWithValues(new LinkedHashSet<SModuleReference>(),ListSequence.fromList(SLinkOperations.getChildren(root,MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l,-7108959942382919355l),8374934269827354989l,4685150495576720955l,"devkit"))).select(new ISelector<SNode,SModuleReference>(){
    public SModuleReference select(    SNode it){
      return getModuleReference(it);
    }
  }
));
  SetSequence.fromSet(oldDevkit).subtract(SetSequence.fromSet(devkit)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.deleteDevKit(it);
    }
  }
);
  SetSequence.fromSet(devkit).subtract(SetSequence.fromSet(oldDevkit)).visitAll(new IVisitor<SModuleReference>(){
    public void visit(    SModuleReference it){
      modelBase.addDevKit(it);
    }
  }
);
  Set<SModelReference> oldImports=SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(),Sequence.fromIterable(((Iterable<jetbrains.mps.smodel.SModel.ImportElement>)(modelBase.importedModels()))).select(new ISelector<jetbrains.mps.smodel.SModel.ImportElement,SModelReference>(){
    public SModelReference select(    jetbrains.mps.smodel.SModel.ImportElement it){
      return it.getModelReference();
    }
  }
));
  Set<SModelReference> imports=SetSequence.fromSetWithValues(new LinkedHashSet<SModelReference>(),ListSequence.fromList(SLinkOperations.getChildren(root,MetaAdapterFactory.getContainmentLink(new UUID(7921841224385317272l,-7108959942382919355l),8374934269827354989l,4685150495576720959l,"import"))).select(new ISelector<SNode,SModelReference>(){
    public SModelReference select(    SNode it){
      return getModelReference(it);
    }
  }
));
  SetSequence.fromSet(oldImports).subtract(SetSequence.fromSet(imports)).visitAll(new IVisitor<SModelReference>(){
    public void visit(    SModelReference it){
      modelBase.deleteModelImport(it);
    }
  }
);
  SetSequence.fromSet(imports).subtract(SetSequence.fromSet(oldImports)).visitAll(new IVisitor<SModelReference>(){
    public void visit(    SModelReference it){
      modelBase.addModelImport(it,false);
    }
  }
);
  ((EditableSModel)metadataModel).setChanged(false);
}
