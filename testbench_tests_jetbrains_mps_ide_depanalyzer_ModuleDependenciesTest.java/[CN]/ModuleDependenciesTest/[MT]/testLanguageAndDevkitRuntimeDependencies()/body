{
  final Solution[] solutions=new Solution[8];
  final Language[] languages=new Language[4];
  final DevKit[] devkits=new DevKit[2];
  for (int i=0; i < solutions.length; i++)   solutions[i]=createSolution();
  for (int i=0; i < languages.length; i++)   languages[i]=createLanguage();
  for (int i=0; i < devkits.length; i++)   devkits[i]=createDevKit();
  solutions[0].addDependency(solutions[4].getModuleReference(),false);
  addUsedLanguage(solutions[4],languages[0]);
  languages[0].getModuleDescriptor().getRuntimeModules().add(solutions[1].getModuleReference());
  languages[0].addExtendedLanguage(languages[1].getModuleReference());
  languages[1].getModuleDescriptor().getRuntimeModules().add(solutions[2].getModuleReference());
  addUsedLanguage(languages[0],languages[2]);
  languages[2].getModuleDescriptor().getRuntimeModules().add(solutions[3].getModuleReference());
  addUsedDevKit(solutions[4],devkits[0]);
  devkits[0].getModuleDescriptor().getExportedLanguages().add(languages[3].getModuleReference());
  languages[3].getModuleDescriptor().getRuntimeModules().add(solutions[7].getModuleReference());
  devkits[0].getModuleDescriptor().getExtendedDevkits().add(devkits[1].getModuleReference());
  devkits[1].getModuleDescriptor().getExportedSolutions().add(solutions[5].getModuleReference());
  solutions[5].addDependency(solutions[6].getModuleReference(),false);
  testDependency(solutions[0],solutions[1],false,0);
  testDependency(solutions[0],solutions[1],true,1);
  testDependency(solutions[0],solutions[1],true,1);
  testDependency(solutions[0],solutions[2],true,1);
  testDependency(solutions[0],solutions[3],true,0);
  testDependency(solutions[0],solutions[5],true,1);
  testDependency(solutions[0],solutions[6],true,1);
  testDependency(solutions[0],solutions[7],true,1);
  testDependency(solutions[0],languages[3],true,0);
}
