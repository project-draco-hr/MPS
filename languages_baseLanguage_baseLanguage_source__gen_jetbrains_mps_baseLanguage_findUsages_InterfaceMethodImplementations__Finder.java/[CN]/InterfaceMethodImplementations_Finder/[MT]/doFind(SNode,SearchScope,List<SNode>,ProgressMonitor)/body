{
  monitor.start(getDescription(),1);
  try {
    List<SNode> implementorsAndAncestorsList=new ArrayList<SNode>();
    for (    SNode implementor : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder",SNodeOperations.getParent(node),scope,monitor.subTask(1)))) {
      ListSequence.fromList(implementorsAndAncestorsList).addElement(implementor);
    }
    for (    SNode classNode : ListSequence.fromList(implementorsAndAncestorsList).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
      }
    }
)) {
      for (      SNode sMethod : Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(classNode))) {
        if (BaseMethodDeclaration__BehaviorDescriptor.hasSameSignature_idhEwIB0z.invoke(sMethod,node)) {
          ListSequence.fromList(_results).addElement(sMethod);
        }
      }
    }
  }
  finally {
    monitor.done();
  }
}
