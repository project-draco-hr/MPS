{
  checkAdjacentFaces(embeddedGraph);
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    if (!(CheckFace.check(face)) || (isRegularFaces && ListSequence.<Dart>fromList(face.getDarts()).count() < 3)) {
      throw new RuntimeException("bad face: " + face);
    }
    for (    Dart dart : ListSequence.<Dart>fromList(face.getDarts())) {
      if (embeddedGraph.getFace(dart) != face) {
        throw new RuntimeException("bad dart: " + dart);
      }
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(embeddedGraph.getGraph().getEdges())) {
    List<Dart> darts=embeddedGraph.getDarts(edge);
    if (darts != null) {
      Assert.assertTrue(ListSequence.<Dart>fromList(darts).count() == 2);
      Set<Node> sources=SetSequence.<Node>fromSet(new HashSet<Node>());
      SetSequence.fromSet(sources).addSequence(ListSequence.<Dart>fromList(darts).<Node>select(new ISelector<Dart,Node>(){
        public Node select(        Dart it){
          return it.getSource();
        }
      }
));
      Assert.assertTrue(SetSequence.<Node>fromSet(sources).contains(edge.getSource()));
      Assert.assertTrue(SetSequence.<Node>fromSet(sources).contains(edge.getTarget()));
    }
  }
}
