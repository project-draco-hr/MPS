{
  Set<ModelOwner> owners=SModelRepository.getInstance().getOwners(modelDescriptor);
  for (  ModelOwner modelOwner : owners) {
    if (modelOwner instanceof Language) {
      Language language=(Language)modelOwner;
      if (modelDescriptor == language.getStructureModelDescriptor()) {
        return new LanguageAspectStatus(language,LanguageAspectStatus.AspectKind.STRUCTURE);
      }
      if (modelDescriptor == language.getTypesystemModelDescriptor()) {
        return new LanguageAspectStatus(language,LanguageAspectStatus.AspectKind.TYPESYSTEM);
      }
      if (modelDescriptor == language.getActionsModelDescriptor()) {
        return new LanguageAspectStatus(language,LanguageAspectStatus.AspectKind.ACTIONS);
      }
      Set<SModelDescriptor> editorDescriptors=language.getEditorDescriptors();
      if (editorDescriptors.contains(modelDescriptor)) {
        return new LanguageAspectStatus(language,LanguageAspectStatus.AspectKind.EDITOR);
      }
      Set<Generator> generators=language.getGenerators();
      for (      Generator generator : generators) {
        SModelUID templatesModelUID=generator.getTemplatesModelUID();
        if (modelDescriptor.getModelUID().equals(templatesModelUID)) {
          return new LanguageAspectStatus(language,LanguageAspectStatus.AspectKind.GENERATOR_TEMPLATES);
        }
      }
      return new LanguageAspectStatus(null,LanguageAspectStatus.AspectKind.NONE);
    }
  }
  return new LanguageAspectStatus(null,LanguageAspectStatus.AspectKind.NONE);
}
