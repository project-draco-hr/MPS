{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return Collections.<ConceptEditor>singletonList(new ExpressionSwitchBranch_Editor());
case 1:
  return Collections.<ConceptEditor>singletonList(new MqlArithmetic_Editor());
case 2:
return Collections.<ConceptEditor>singletonList(new MqlAssignment_Editor());
case 3:
return Collections.<ConceptEditor>singletonList(new MqlBoolLiteral_Editor());
case 4:
return Collections.<ConceptEditor>singletonList(new MqlBoolType_Editor());
case 5:
return Collections.<ConceptEditor>singletonList(new MqlClosure_Editor());
case 6:
return Collections.<ConceptEditor>singletonList(new MqlCollectionOneArgOp_Editor());
case 7:
return Collections.<ConceptEditor>singletonList(new MqlCollectionProperty_Editor());
case 8:
return Collections.<ConceptEditor>singletonList(new MqlCollectionSelector_Editor());
case 9:
return Collections.<ConceptEditor>singletonList(new MqlCollectionSelectorVar_Editor());
case 10:
return Collections.<ConceptEditor>singletonList(new MqlCollectionSelectorVarRef_Editor());
case 11:
return Collections.<ConceptEditor>singletonList(new MqlCollectionType_Editor());
case 12:
return Collections.<ConceptEditor>singletonList(new MqlCondition_Editor());
case 13:
return Collections.<ConceptEditor>singletonList(new MqlDotExpression_Editor());
case 14:
return Collections.<ConceptEditor>singletonList(new MqlEmptyCollection_Editor());
case 15:
return Collections.<ConceptEditor>singletonList(new MqlExpression_Editor());
case 16:
return Collections.<ConceptEditor>singletonList(new MqlFunctionType_Editor());
case 17:
return Collections.<ConceptEditor>singletonList(new MqlImport_Editor());
case 18:
return Collections.<ConceptEditor>singletonList(new MqlIntLiteral_Editor());
case 19:
return Collections.<ConceptEditor>singletonList(new MqlIntType_Editor());
case 20:
return Collections.<ConceptEditor>singletonList(new MqlLet_Editor());
case 21:
return Collections.<ConceptEditor>singletonList(new MqlListLiteral_Editor());
case 22:
return Collections.<ConceptEditor>singletonList(new MqlListType_Editor());
case 23:
return Collections.<ConceptEditor>singletonList(new MqlNoContextQueryCall_Editor());
case 24:
return Collections.<ConceptEditor>singletonList(new MqlNullLiteral_Editor());
case 25:
return Collections.<ConceptEditor>singletonList(new MqlNullType_Editor());
case 26:
return Collections.<ConceptEditor>singletonList(new MqlPackage_Editor());
case 27:
return Collections.<ConceptEditor>singletonList(new MqlParameter_Editor());
case 28:
return Collections.<ConceptEditor>singletonList(new MqlParameterReference_Editor());
case 29:
return Collections.<ConceptEditor>singletonList(new MqlParentheses_Editor());
case 30:
return Collections.<ConceptEditor>singletonList(new MqlQuery_Editor());
case 31:
return Collections.<ConceptEditor>singletonList(new MqlSelector_Editor());
case 32:
return Collections.<ConceptEditor>singletonList(new MqlSetLiteral_Editor());
case 33:
return Collections.<ConceptEditor>singletonList(new MqlStringIndexOp_Editor());
case 34:
return Collections.<ConceptEditor>singletonList(new MqlStringLiteral_Editor());
case 35:
return Collections.<ConceptEditor>singletonList(new MqlStringProperty_Editor());
case 36:
return Collections.<ConceptEditor>singletonList(new MqlStringType_Editor());
case 37:
return Collections.<ConceptEditor>singletonList(new MqlSubstring_Editor());
case 38:
return Collections.<ConceptEditor>singletonList(new MqlThis_Editor());
case 39:
return Collections.<ConceptEditor>singletonList(new MqlTriplex_Editor());
case 40:
return Collections.<ConceptEditor>singletonList(new MqlType_Editor());
case 41:
return Collections.<ConceptEditor>singletonList(new MqlUnary_Editor());
case 42:
return Collections.<ConceptEditor>singletonList(new MqlVariable_Editor());
case 43:
return Collections.<ConceptEditor>singletonList(new MqlVariableReference_Editor());
case 44:
return Collections.<ConceptEditor>singletonList(new SwitchExpression_Editor());
default :
}
return Collections.emptyList();
}
