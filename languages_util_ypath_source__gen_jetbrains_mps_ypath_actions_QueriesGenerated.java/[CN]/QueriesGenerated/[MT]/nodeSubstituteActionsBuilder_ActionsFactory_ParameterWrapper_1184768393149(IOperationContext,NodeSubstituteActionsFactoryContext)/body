{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.ParameterWrapper");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          SNode op=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.ypath.structure.IterateOperation");
          SNode tpoe=SNodeOperations.cast(SNodeOperations.getParent(_context.getParentNode()),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
          return FeatureUtil.getParameterObjects(SLinkOperations.getTarget(op,"usedFeature",false),SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe,"operand",true)),"jetbrains.mps.ypath.structure.TreePathType"),"nodeType",true));
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              return (item);
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
