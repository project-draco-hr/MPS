{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<Pair> parameterObjects=new Computable<Iterable<Pair>>(){
      public Iterable<Pair> compute(){
        List<Pair> res=ListSequence.fromList(new ArrayList<Pair>());
        final SNode srcNode=_context.getSourceNode();
        final boolean isGeneric=SNodeOperations.isInstanceOf(srcNode,"jetbrains.mps.ypath.structure.IGenericFeature");
        for (        SNode fe : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(srcNode),"jetbrains.mps.ypath.structure.TreePathAspect"),"features",true)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return it != srcNode && ((isGeneric ? SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature") : !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.IGenericFeature"))));
          }
        }
)) {
          ListSequence.fromList(res).addElement(new Pair<SNode,Boolean>(fe,Boolean.TRUE));
          ListSequence.fromList(res).addElement(new Pair<SNode,Boolean>(fe,Boolean.FALSE));
        }
        return res;
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final Pair item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.IFeature"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode fe=(SNode)(item).o1;
            Boolean mu=(Boolean)(item).o2;
            IFeature_Behavior.call_setOpposite_1213877499629(_context.getSourceNode(),fe,mu);
            return _context.getSourceNode();
          }
          public String getMatchingText(          String pattern){
            SNode fe=(SNode)(item).o1;
            Boolean mu=(Boolean)(item).o2;
            return (mu ? "<-> " + SPropertyOperations.getString(fe,"name") : "<-  " + SPropertyOperations.getString(fe,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            SNode fe=(SNode)(item).o1;
            Boolean mu=(Boolean)(item).o2;
            return (mu ? "set mutual opposite feature" : "set opposite feature");
          }
        }
);
      }
    }
  }
  return result;
}
