{
  final TestModelFactory m1f=new TestModelFactory();
  org.jetbrains.mps.openapi.model.SModel m1=m1f.createModel(10,25,15,5,4);
  final int actualNodes=m1f.countModelNodes();
  final long baselineMillis=200;
  ourStats.report("singleThreadBaselineMillis",baselineMillis);
  final int testRuns=10;
  long elapsed=0;
  for (int i=0; i < testRuns; i++) {
    final long start=System.nanoTime();
    ModelListenerTest.readTreeNodes(m1.getRootNodes());
    elapsed+=System.nanoTime() - start;
    if (i == 0) {
      ourStats.report("singleThreadFirstRunMillis",elapsed);
    }
  }
  long averageMillis=elapsed / 1000000 / testRuns;
  ourStats.report("singleThreadAvgMillis",averageMillis);
  if (averageMillis > baselineMillis) {
    final String fmt="Walking model of %d nodes was expected to take less than %d ms. Actual average time for %d runs was %d ms";
    Assert.fail(String.format(fmt,actualNodes,baselineMillis,testRuns,averageMillis));
  }
  if (averageMillis < baselineMillis / 10) {
    final String fmt="Walking model of %d nodes took less than 10%% of baseline. Actual average time for %d runs was %d ms, while baseline is %d ms. Re-consider baseline value";
    Assert.fail(String.format(fmt,actualNodes,testRuns,averageMillis,baselineMillis));
  }
}
