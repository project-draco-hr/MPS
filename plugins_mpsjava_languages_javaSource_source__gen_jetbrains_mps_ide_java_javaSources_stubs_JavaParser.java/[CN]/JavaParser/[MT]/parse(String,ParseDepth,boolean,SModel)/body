{
  char[] source=code.toCharArray();
  Map<String,String> settings=new HashMap<String,String>();
  settings.put(CompilerOptions.OPTION_Source,CompilerOptions.VERSION_1_5);
  boolean ignoreMethodBodies;
  if (ParseDepth.TOPLEVEL.equals(depth)) {
    ignoreMethodBodies=true;
  }
 else {
    throw new IllegalArgumentException("Parsing depth other than top-level is not supported yet ");
  }
  CodeSnippetParsingUtil util=new CodeSnippetParsingUtil(ignoreMethodBodies);
  CompilationUnitDeclaration compRes=util.parseCompilationUnit(source,settings,true);
  if (compRes == null || compRes.types == null && compRes.compilationResult.problems != null) {
    throw new JavaParseException("Could not parse anything");
  }
  ASTNode[] roots=compRes.types;
  TypeNameResolver classResolver=new TypeNameResolver(mdl);
  classResolver.addImports(extractImports(compRes));
  ASTConverter converter=new ASTConverter(mdl,classResolver);
  List<SNode> res=new ArrayList<SNode>();
  if (compRes.types != null) {
    for (    ASTNode root : roots) {
      ListSequence.fromList(res).addElement(converter.convertRoot(root));
    }
  }
  return res;
}
