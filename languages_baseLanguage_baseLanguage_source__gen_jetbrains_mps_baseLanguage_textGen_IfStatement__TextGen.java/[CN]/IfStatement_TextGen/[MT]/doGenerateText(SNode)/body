{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  this.appendNewLine();
  this.indentBuffer();
  this.append("if (");
  appendNode(SLinkOperations.getTarget(node,"condition",true));
  this.append(") {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,"ifTrue",true));
  this.decreaseDepth();
{
    this.appendNewLine();
    this.appendWithIndent("}");
    Iterable<SNode> collection=SLinkOperations.getTargets(node,"elsifClauses",true);
    for (    SNode item : collection) {
      appendNode(item);
    }
  }
  if ((SLinkOperations.getTarget(node,"ifFalseStatement",true) != null)) {
    this.append(" else");
    appendNode(SLinkOperations.getTarget(node,"ifFalseStatement",true));
  }
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
