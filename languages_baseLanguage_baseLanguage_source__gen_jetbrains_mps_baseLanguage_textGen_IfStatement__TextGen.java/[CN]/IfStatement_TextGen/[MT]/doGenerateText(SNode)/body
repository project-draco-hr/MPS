{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  this.appendNewLine();
  this.indentBuffer();
  this.append("if (");
  TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"condition",true),this.getSNode());
  this.append(") {");
  this.increaseDepth();
  TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"ifTrue",true),this.getSNode());
  this.decreaseDepth();
  this.appendNewLine();
  this.appendWithIndent("}");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"elsifClauses",true)).isNotEmpty()) {
    for (    SNode item : SLinkOperations.getTargets(node,"elsifClauses",true)) {
      TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),item,this.getSNode());
    }
  }
  if ((SLinkOperations.getTarget(node,"ifFalseStatement",true) != null)) {
    this.append(" else");
    TextGenManager.instance().appendNodeText(this.getContext(),this.getBuffer(),SLinkOperations.getTarget(node,"ifFalseStatement",true),this.getSNode());
  }
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
