{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_2qnle6_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new BuildMpsAspect_Constraints();
      }
    break;
case 1:
  if (true) {
    return new BuildMpsLayout_ModuleJars_Constraints();
  }
break;
case 2:
if (true) {
return new BuildMpsLayout_ModuleSources_Constraints();
}
break;
case 3:
if (true) {
return new BuildMpsLayout_ModuleXml_Constraints();
}
break;
case 4:
if (true) {
return new BuildMpsLayout_Plugin_Constraints();
}
break;
case 5:
if (true) {
return new BuildMpsLayout_PluginDescriptor_Constraints();
}
break;
case 6:
if (true) {
return new BuildMps_Branding_Constraints();
}
break;
case 7:
if (true) {
return new BuildMps_DevKit_Constraints();
}
break;
case 8:
if (true) {
return new BuildMps_DevKitExportLanguage_Constraints();
}
break;
case 9:
if (true) {
return new BuildMps_DevKitExportSolution_Constraints();
}
break;
case 10:
if (true) {
return new BuildMps_DevKitRef_Constraints();
}
break;
case 11:
if (true) {
return new BuildMps_Generator_Constraints();
}
break;
case 12:
if (true) {
return new BuildMps_Group_Constraints();
}
break;
case 13:
if (true) {
return new BuildMps_IdeaPlugin_Constraints();
}
break;
case 14:
if (true) {
return new BuildMps_IdeaPluginDependency_Constraints();
}
break;
case 15:
if (true) {
return new BuildMps_IdeaPluginGroup_Constraints();
}
break;
case 16:
if (true) {
return new BuildMps_IdeaPluginGroupCustomModule_Constraints();
}
break;
case 17:
if (true) {
return new BuildMps_IdeaPluginModule_Constraints();
}
break;
case 18:
if (true) {
return new BuildMps_Language_Constraints();
}
break;
case 19:
if (true) {
return new BuildMps_ModuleDependencyExtendLanguage_Constraints();
}
break;
case 20:
if (true) {
return new BuildMps_ModuleDependencyOnDevKit_Constraints();
}
break;
case 21:
if (true) {
return new BuildMps_ModuleDependencyOnJavaModule_Constraints();
}
break;
case 22:
if (true) {
return new BuildMps_ModuleDependencyOnModule_Constraints();
}
break;
case 23:
if (true) {
return new BuildMps_ModuleDependencyUseLanguage_Constraints();
}
break;
case 24:
if (true) {
return new BuildMps_ModuleSolutionRuntime_Constraints();
}
break;
case 25:
if (true) {
return new BuildMps_Solution_Constraints();
}
break;
default :
}
}
return new BaseConstraintsDescriptor(concept);
}
