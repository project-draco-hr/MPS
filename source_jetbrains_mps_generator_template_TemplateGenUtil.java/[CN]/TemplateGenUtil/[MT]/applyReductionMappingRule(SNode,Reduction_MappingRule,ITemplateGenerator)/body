{
  RuleConsequence ruleConsequence=rule.getRuleConsequence();
  if (ruleConsequence != null) {
    if (ruleConsequence instanceof DismissTopMappingRule) {
      showGeneratorMessage(((DismissTopMappingRule)ruleConsequence).getGeneratorMessage(),inputNode,BaseAdapter.fromAdapter(rule),generator);
      throw new ReductionNotNeededException();
    }
 else     if (ruleConsequence instanceof TemplateDeclarationReference) {
      TemplateDeclaration template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
      return applyReductionRuleTemplate(inputNode,template,BaseAdapter.fromAdapter(rule),generator);
    }
 else     if (ruleConsequence instanceof InlineTemplate_RuleConsequence) {
      BaseConcept templateNode=((InlineTemplate_RuleConsequence)ruleConsequence).getTemplateNode();
      if (templateNode != null) {
        return applyReductionRuleTemplateNode(inputNode,templateNode.getNode(),rule.getName(),rule.getNode(),generator);
      }
    }
 else {
      generator.showErrorMessage(inputNode,null,BaseAdapter.fromAdapter(rule),"unsapported rule consequence");
    }
  }
 else {
    TemplateDeclaration template=rule.getTemplate();
    return applyReductionRuleTemplate(inputNode,template,BaseAdapter.fromAdapter(rule),generator);
  }
  generator.showErrorMessage(inputNode,null,BaseAdapter.fromAdapter(rule),"couldn't apply reduction rule");
  return new Void_NodeBuilder(inputNode,BaseAdapter.fromAdapter(rule),null,generator);
}
