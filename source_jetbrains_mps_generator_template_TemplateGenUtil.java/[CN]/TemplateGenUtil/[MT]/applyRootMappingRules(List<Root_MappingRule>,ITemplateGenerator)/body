{
  final List<INodeBuilder> builders=new LinkedList<INodeBuilder>();
  if (rules.isEmpty())   return builders;
  for (  Root_MappingRule rule : rules) {
    ConceptDeclaration applicableConcept=rule.getApplicableConcept();
    if (applicableConcept == null) {
      generator.showErrorMessage(null,null,rule,"rule has no applicable concept defined");
      continue;
    }
    boolean includeInheritors=rule.getApplyToConceptInheritors();
    List<SNode> nodes=generator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
    for (    SNode node : nodes) {
      if (checkConditionForBaseMappingRule(node,rule,generator)) {
        NamedConcept template=rule.getTemplate();
        if (template == null) {
          generator.showErrorMessage(node,null,rule,"rule has no template");
          break;
        }
        String mappingName=rule.getName();
        INodeBuilder nodeBuilder=createNodeBuilder(node,template,mappingName,0,generator);
        nodeBuilder.setRuleNode(rule);
        builders.add(nodeBuilder);
      }
    }
  }
  return builders;
}
