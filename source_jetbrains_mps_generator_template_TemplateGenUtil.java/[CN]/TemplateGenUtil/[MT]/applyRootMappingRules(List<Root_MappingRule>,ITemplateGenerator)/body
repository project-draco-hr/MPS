{
  final List<INodeBuilder> builders=new LinkedList<INodeBuilder>();
  if (mappingRules.isEmpty())   return builders;
  for (  final Root_MappingRule mappingRule : mappingRules) {
    Condition<SNode> condition=new Condition<SNode>(){
      public boolean met(      SNode sourceNode){
        ConceptDeclaration nodeConcept=sourceNode.getConceptDeclaration(generator.getScope());
        if (checkPremiseForBaseMappingRule(sourceNode,nodeConcept,mappingRule,generator)) {
          NamedConcept template=mappingRule.getTemplate();
          if (template == null) {
            generator.showErrorMessage(sourceNode,null,mappingRule,"root mapping rule has no template");
            return false;
          }
          String mappingName=mappingRule.getName();
          INodeBuilder nodeBuilder=createNodeBuilder(sourceNode,template,mappingName,0,generator);
          nodeBuilder.setRuleNode(mappingRule);
          builders.add(nodeBuilder);
        }
        return false;
      }
    }
;
    if (mappingRule.getSearchImportedModels()) {
      generator.getSourceModel().allNodesIncludingImported(generator.getScope(),condition);
    }
 else {
      generator.getSourceModel().allNodes(condition);
    }
  }
  return builders;
}
