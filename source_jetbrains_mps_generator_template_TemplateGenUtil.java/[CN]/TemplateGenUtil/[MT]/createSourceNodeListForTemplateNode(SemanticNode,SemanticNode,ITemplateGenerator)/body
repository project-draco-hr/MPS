{
  NodeMacro nodeMacro=(NodeMacro)templateNode.getChild(ITemplateGenerator.ROLE_NODE_MAKRO);
  if (nodeMacro instanceof CopySrcNodeMacro) {
    CopySrcNodeMacro copySrcNodeMacro=((CopySrcNodeMacro)nodeMacro);
    String sourceNodeQueryId=copySrcNodeMacro.getSourceNodeQueryId();
    String methodName="templateSourceNodeQuery_" + sourceNodeQueryId;
    Object[] args=new Object[]{parentSourceNode,generator};
    SemanticNode srcNodeToCopy=(SemanticNode)AspectMethod.invoke(methodName,args,nodeMacro.getModel());
    List<SemanticNode> list=new LinkedList<SemanticNode>();
    if (srcNodeToCopy != null) {
      list.add(srcNodeToCopy);
    }
    return list;
  }
 else   if (nodeMacro instanceof IfMacro) {
    IfMacro ifMacro=(IfMacro)nodeMacro;
    String conditionAspectId=ifMacro.getConditionAspectId();
    if (conditionAspectId == null) {
      generator.showErrorMessage(nodeMacro,"Condition is not defined");
    }
 else {
      String methodName="semanticNodeCondition_" + conditionAspectId;
      Object[] args=new Object[]{parentSourceNode};
      Boolean conditionStatus=(Boolean)AspectMethod.invoke(methodName,args,nodeMacro.getModel());
      List<SemanticNode> sourceNodes=new LinkedList<SemanticNode>();
      if (conditionStatus) {
        sourceNodes.add(parentSourceNode);
      }
      return sourceNodes;
    }
  }
  if (nodeMacro != null) {
    String sourceQueryAspectMethodName=nodeMacro.getSourceQueryAspectMethodName();
    if (sourceQueryAspectMethodName != null) {
      String methodName="templateSourceQuery_" + sourceQueryAspectMethodName;
      Object[] args=new Object[]{parentSourceNode,generator};
      List<SemanticNode> sourceNodes=(List<SemanticNode>)AspectMethod.invoke(methodName,args,nodeMacro.getModel());
      return sourceNodes;
    }
  }
  List<SemanticNode> list=new LinkedList<SemanticNode>();
  list.add(parentSourceNode);
  return list;
}
