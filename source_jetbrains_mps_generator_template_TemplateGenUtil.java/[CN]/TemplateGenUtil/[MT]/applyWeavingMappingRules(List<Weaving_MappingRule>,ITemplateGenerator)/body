{
  if (rules.isEmpty())   return;
  List<Weaving_MappingRule> slowRules=new LinkedList<Weaving_MappingRule>();
  for (  Weaving_MappingRule rule : rules) {
    if (rule.getSearchImportedModels()) {
      slowRules.add(rule);
      continue;
    }
    ConceptDeclaration applicableConcept=rule.getApplicableConcept();
    if (applicableConcept == null) {
      generator.showErrorMessage(null,rule,"rule has no applicable concept defined");
      continue;
    }
    boolean includeInheritors=rule.getApplyToConceptInheritors();
    List<SNode> nodes=generator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
    for (    SNode node : nodes) {
      if (checkConditionForBaseMappingRule(node,rule,generator)) {
        TemplateDeclaration template=rule.getTemplate();
        if (template == null) {
          generator.showErrorMessage(node,rule,"rule has no template");
          break;
        }
        List<INodeBuilder> contextBuilders=getContextNodeBuilderForWeavingingRule(node,rule,generator);
        if (contextBuilders == null) {
          generator.showErrorMessage(node,rule,"couldn't create context node builder");
          continue;
        }
        for (        INodeBuilder builder : contextBuilders) {
          weaveTemplateDeclaration(node,template,builder,generator,rule);
        }
      }
    }
  }
  for (  final Weaving_MappingRule rule : slowRules) {
    Condition<SNode> condition=new Condition<SNode>(){
      public boolean met(      SNode sourceNode){
        ConceptDeclaration nodeConcept=sourceNode.getConceptDeclaration(generator.getScope());
        if (checkPremiseForBaseMappingRule(sourceNode,nodeConcept,rule,generator)) {
          TemplateDeclaration template=rule.getTemplate();
          if (template == null) {
            generator.showErrorMessage(sourceNode,rule,"rule has no template");
            return false;
          }
          List<INodeBuilder> contextBuilders=getContextNodeBuilderForWeavingingRule(sourceNode,rule,generator);
          if (contextBuilders == null) {
            generator.showErrorMessage(sourceNode,rule,"couldn't create context node builder");
            return false;
          }
          for (          INodeBuilder builder : contextBuilders) {
            weaveTemplateDeclaration(sourceNode,template,builder,generator,rule);
          }
        }
        return false;
      }
    }
;
    generator.getSourceModel().allNodesIncludingImported(generator.getScope(),condition);
  }
}
