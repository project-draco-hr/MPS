{
  if (rules.isEmpty())   return;
  List<Weaving_MappingRule> slowRules=new LinkedList<Weaving_MappingRule>();
  for (  Weaving_MappingRule rule : rules) {
    if (rule.getSearchImportedModels()) {
      slowRules.add(rule);
      continue;
    }
    ConceptDeclaration applicableConcept=rule.getApplicableConcept();
    if (applicableConcept == null) {
      generator.showErrorMessage(null,rule,"rule has no applicable concept defined");
      continue;
    }
    boolean includeInheritors=rule.getApplyToConceptInheritors();
    List<SNode> nodes=generator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
    for (    SNode applicableNode : nodes) {
      if (checkConditionForBaseMappingRule(applicableNode,rule,generator)) {
        List<INodeBuilder> contextBuilders=getContextNodeBuilderForWeavingingRule(applicableNode,rule,generator);
        if (contextBuilders == null) {
          generator.showErrorMessage(applicableNode,rule,"couldn't create context node builder");
          continue;
        }
        TemplateDeclaration template=rule.getTemplate();
        if (template != null) {
          for (          INodeBuilder builder : contextBuilders) {
            weaveTemplateDeclaration(applicableNode,template,builder,generator,rule);
          }
        }
 else {
          RuleConsequence ruleConsequence=rule.getRuleConsequence();
          if (ruleConsequence instanceof DismissTopMappingRule) {
            throw new ReductionNotNeededException();
          }
 else           if (ruleConsequence instanceof TemplateDeclarationReference) {
            template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
            if (template == null) {
              generator.showErrorMessage(applicableNode,rule,"rule has no template");
              break;
            }
            for (            INodeBuilder builder : contextBuilders) {
              weaveTemplateDeclaration(applicableNode,template,builder,generator,rule);
            }
          }
 else           if (ruleConsequence instanceof WeaveEach_RuleConsequence) {
            WeaveEach_RuleConsequence weaveEach=(WeaveEach_RuleConsequence)ruleConsequence;
            template=weaveEach.getTemplate();
            if (template == null) {
              generator.showErrorMessage(applicableNode,rule,"rule has no template");
              break;
            }
            SourceSubstituteMacro_SourceNodesQuery nodesQuery=weaveEach.getSourceNodesQuery();
            if (nodesQuery == null) {
              generator.showErrorMessage(applicableNode,rule,"couldn't create list of source nodes");
              break;
            }
            List<SNode> queryNodes=evaluateSourceNodesQuery(applicableNode,nodesQuery,ruleConsequence,generator);
            for (            SNode queryNode : queryNodes) {
              for (              INodeBuilder builder : contextBuilders) {
                weaveTemplateDeclaration(queryNode,template,builder,generator,rule);
              }
            }
          }
        }
      }
    }
  }
  for (  final Weaving_MappingRule rule : slowRules) {
    Condition<SNode> condition=new Condition<SNode>(){
      public boolean met(      SNode sourceNode){
        ConceptDeclaration nodeConcept=sourceNode.getConceptDeclaration(generator.getScope());
        if (checkPremiseForBaseMappingRule(sourceNode,nodeConcept,rule,generator)) {
          TemplateDeclaration template=rule.getTemplate();
          if (template == null) {
            generator.showErrorMessage(sourceNode,rule,"rule has no template");
            return false;
          }
          List<INodeBuilder> contextBuilders=getContextNodeBuilderForWeavingingRule(sourceNode,rule,generator);
          if (contextBuilders == null) {
            generator.showErrorMessage(sourceNode,rule,"couldn't create context node builder");
            return false;
          }
          for (          INodeBuilder builder : contextBuilders) {
            weaveTemplateDeclaration(sourceNode,template,builder,generator,rule);
          }
        }
        return false;
      }
    }
;
    generator.getSourceModel().allNodesIncludingImported(generator.getScope(),condition);
  }
}
