{
  Map<SNode,List<Reduction_MappingRule>> node2ruleMap=(Map<SNode,List<Reduction_MappingRule>>)generator.getGeneratorSessionContext().getUserObject(REDUCTION_RULES_CACHE);
  if (node2ruleMap == null) {
    node2ruleMap=new HashMap<SNode,List<Reduction_MappingRule>>();
    generator.getGeneratorSessionContext().putUserObject(REDUCTION_RULES_CACHE,node2ruleMap);
    for (    Reduction_MappingRule rule : rules) {
      ConceptDeclaration applicableConcept=rule.getApplicableConcept();
      if (applicableConcept == null)       applicableConcept=SModelUtil.getBaseConcept();
      boolean includeInheritors=rule.getApplyToConceptInheritors();
      List<SNode> nodesForRule=generator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
      for (      SNode node : nodesForRule) {
        List<Reduction_MappingRule> list=node2ruleMap.get(node);
        if (list == null) {
          list=new LinkedList<Reduction_MappingRule>();
          node2ruleMap.put(node,list);
        }
        list.add(rule);
      }
    }
  }
  List<Reduction_MappingRule> rulesForNode=node2ruleMap.get(sourceNode);
  if (rulesForNode != null) {
    for (    Reduction_MappingRule rule : rulesForNode) {
      if (checkConditionForBaseMappingRule(sourceNode,rule,generator)) {
        return rule;
      }
    }
  }
  return null;
}
