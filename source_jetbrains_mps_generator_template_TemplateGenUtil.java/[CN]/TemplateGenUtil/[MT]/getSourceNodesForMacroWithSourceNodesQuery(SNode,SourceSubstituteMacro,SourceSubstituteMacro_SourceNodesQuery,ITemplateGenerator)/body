{
  if (query != null) {
    String methodName=TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodesQuery(query);
    Object[] args=new Object[]{sourceNode,generator.getSourceModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
    try {
      List<SNode> sourceNodes=(List<SNode>)QueryMethodGenerated.invoke(methodName,args,macro.getModel());
      checkNodesFromQuery(sourceNodes,macro,generator);
      return sourceNodes;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,macro,"couldn't evaluate query - try to generate template models");
      LOG.error(e);
      return new LinkedList<SNode>();
    }
  }
  String sourceQueryAspectMethodName=macro.getSourceQueryAspectMethodName();
  if (sourceQueryAspectMethodName != null) {
    String methodName="templateSourceQuery_" + sourceQueryAspectMethodName;
    Object[] args=new Object[]{sourceNode,generator};
    try {
      List<SNode> sourceNodes=(List<SNode>)QueryMethod.invoke(methodName,args,macro.getModel());
      checkNodesFromQuery(sourceNodes,macro,generator);
      return sourceNodes;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,macro,"couldn't evaluate macro query: " + NameUtil.shortNameFromLongName(e.getClass().getName()) + " : "+ e.getMessage());
      LOG.error(e);
      return new LinkedList<SNode>();
    }
  }
  throw new GenerationFailedException(new GenerationFailueInfo("couldn't evaluate macro query",sourceNode,macro,null,generator.getGeneratorSessionContext()));
}
