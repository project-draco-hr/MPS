{
  NodeMacro nodeMacro=(NodeMacro)templateNode.getChild(ITemplateGenerator.ROLE_NODE_MAKRO);
  if (nodeMacro == null || nodeMacro.getSourceQueryAspectMethodName() == null) {
    List<SemanticNode> list=new LinkedList<SemanticNode>();
    list.add(parentSourceNode);
    return list;
  }
  try {
    String sourceQueryAspectMethodName=nodeMacro.getSourceQueryAspectMethodName();
    String methodName="templateSourceQuery_" + sourceQueryAspectMethodName;
    Object[] args=new Object[]{parentSourceNode,generator};
    List<SemanticNode> sourceNodes=(List<SemanticNode>)invokeAspectMethod(methodName,args,nodeMacro.getModel());
    return sourceNodes;
  }
 catch (  Exception e) {
    System.err.println("ERROR computing source nodes for template: " + templateNode.getDebugText());
    System.err.println("parent source: : " + parentSourceNode.getDebugText());
    SModelUtil.dumpNodePath(parentSourceNode,0,System.err);
    throw new RuntimeException(e);
  }
}
