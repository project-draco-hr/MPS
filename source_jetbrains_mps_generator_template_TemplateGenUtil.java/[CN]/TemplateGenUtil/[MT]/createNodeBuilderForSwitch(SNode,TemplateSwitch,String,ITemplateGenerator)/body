{
  SNode templateNodeForCase=null;
  RuleConsequence consequenceForCase=generator.getConsequenceForSwitchCase(sourceNode,templateSwitch);
  if (consequenceForCase != null) {
    if (consequenceForCase instanceof DismissTopMappingRule) {
      TemplateGenUtil.showGeneratorMessage((GeneratorMessage)((DismissTopMappingRule)consequenceForCase).getGeneratorMessage(),sourceNode,consequenceForCase.getNode(),generator);
      throw new ReductionNotNeededException();
    }
 else     if (consequenceForCase instanceof TemplateDeclarationReference) {
      TemplateDeclaration templateForSwitchCase=((TemplateDeclarationReference)consequenceForCase).getTemplate();
      templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(sourceNode,templateForSwitchCase,templateSwitch,generator);
    }
 else     if (consequenceForCase instanceof InlineTemplate_RuleConsequence) {
      templateNodeForCase=BaseAdapter.fromAdapter(((InlineTemplate_RuleConsequence)consequenceForCase).getTemplateNode());
    }
 else {
      generator.showErrorMessage(sourceNode,null,consequenceForCase.getNode(),"unsapported rule consequence");
    }
  }
 else {
    TemplateDeclaration templateForSwitchCase=generator.getTemplateForSwitchCase_deprecated(sourceNode,templateSwitch);
    if (templateForSwitchCase != null) {
      templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(sourceNode,templateForSwitchCase,templateSwitch,generator);
    }
 else {
      return null;
    }
  }
  if (templateNodeForCase == null) {
    generator.showErrorMessage(sourceNode,null,BaseAdapter.fromAdapter(templateSwitch),"failed to process switch");
    return null;
  }
  List<SNode> sourceNodes2=createSourceNodeListForTemplateNode(sourceNode,templateNodeForCase,0,generator);
  if (sourceNodes2.size() == 0) {
    return new Void_NodeBuilder(sourceNode,templateNodeForCase,null,generator);
  }
  if (sourceNodes2.size() == 1) {
    return createNodeBuilder(sourceNodes2.get(0),templateNodeForCase,mappingName,0,generator);
  }
  generator.showErrorMessage(sourceNode,templateNodeForCase,BaseAdapter.fromAdapter(templateSwitch),"couldn't create builder for switch case: can't map more than one (" + sourceNodes2.size() + ") input nodes");
  return null;
}
