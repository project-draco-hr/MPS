{
  List<SNode> sourceNodes=new LinkedList<SNode>();
  SourceSubstituteMacro_SourceNodeQuery function=copySrcNodeMacro.getSourceNodeQuery();
  if (function != null) {
    String methodName=TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(function);
    Object[] args=new Object[]{sourceNode,generator.getSourceModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
    try {
      SNode outputSourceNode=(SNode)QueryMethodGenerated.invoke(methodName,args,copySrcNodeMacro.getModel());
      if (outputSourceNode != null) {
        sourceNodes.add(outputSourceNode);
        checkNodesFromQuery(sourceNodes,copySrcNodeMacro,generator);
      }
      return sourceNodes;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,copySrcNodeMacro,"couldn't evaluate copy-src-macro query - try to generate template models");
      e.printStackTrace();
      return new LinkedList<SNode>();
    }
  }
  String sourceQueryAspectMethodName=copySrcNodeMacro.getSourceNodeQueryId();
  if (sourceQueryAspectMethodName != null) {
    String methodName="templateSourceNodeQuery_" + sourceQueryAspectMethodName;
    Object[] args=new Object[]{sourceNode,generator};
    try {
      SNode outputSourceNode=(SNode)QueryMethod.invoke(methodName,args,copySrcNodeMacro.getModel());
      if (outputSourceNode != null) {
        sourceNodes.add(outputSourceNode);
        checkNodesFromQuery(sourceNodes,copySrcNodeMacro,generator);
      }
      return sourceNodes;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,copySrcNodeMacro,"couldn't evaluate loop-macro query: " + NameUtil.shortNameFromLongName(e.getClass().getName()) + " : "+ e.getMessage());
      e.printStackTrace();
      return new LinkedList<SNode>();
    }
  }
  throw new GenerationFailedException(new GenerationFailueInfo("couldn't evaluate loop-macro query",sourceNode,copySrcNodeMacro,null,generator.getGeneratorSessionContext()));
}
