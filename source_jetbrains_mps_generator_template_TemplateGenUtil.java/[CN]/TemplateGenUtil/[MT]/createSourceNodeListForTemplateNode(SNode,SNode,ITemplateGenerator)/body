{
  try {
    List<NodeMacro> nodeMacros=NodeMacro_AnnotationLink.getNodeMacros((BaseConcept)templateNode);
    NodeMacro nodeMacro=nodeMacros.isEmpty() ? null : nodeMacros.get(0);
    List<SNode> result=new LinkedList<SNode>();
    if (nodeMacro instanceof CopySrcNodeMacro) {
      CopySrcNodeMacro copySrcNodeMacro=((CopySrcNodeMacro)nodeMacro);
      String sourceNodeQueryId=copySrcNodeMacro.getSourceNodeQueryId();
      if (sourceNodeQueryId == null) {
        throw new GenerationFailedException(new GenerationFailueInfo("Source query is not defined",parentSourceNode,nodeMacro,null,generator.getGeneratorSessionContext()));
      }
 else {
        String methodName="templateSourceNodeQuery_" + sourceNodeQueryId;
        Object[] args=new Object[]{parentSourceNode,generator};
        SNode srcNodeToCopy=(SNode)QueryMethod.invoke(methodName,args,nodeMacro.getModel());
        if (srcNodeToCopy != null) {
          result.add(srcNodeToCopy);
        }
        checkNodesFromQuery(result,copySrcNodeMacro,generator);
        return result;
      }
    }
 else     if (nodeMacro instanceof MapSrcNodeMacro) {
      MapSrcNodeMacro mapSrcNodeMacro=((MapSrcNodeMacro)nodeMacro);
      String sourceNodeQueryId=mapSrcNodeMacro.getSourceNodeQueryId();
      if (sourceNodeQueryId != null) {
        String methodName="templateSourceNodeQuery_" + sourceNodeQueryId;
        Object[] args=new Object[]{parentSourceNode,generator};
        SNode srcNodeToCopy=(SNode)QueryMethod.invoke(methodName,args,nodeMacro.getModel());
        if (srcNodeToCopy != null) {
          result.add(srcNodeToCopy);
        }
        checkNodesFromQuery(result,mapSrcNodeMacro,generator);
        return result;
      }
    }
 else     if (nodeMacro instanceof IfMacro) {
      IfMacro ifMacro=(IfMacro)nodeMacro;
      String conditionAspectId=ifMacro.getConditionAspectId();
      if (conditionAspectId == null) {
        throw new GenerationFailedException(new GenerationFailueInfo("Source query is not defined",parentSourceNode,nodeMacro,null,generator.getGeneratorSessionContext()));
      }
 else {
        String methodName="semanticNodeCondition_" + conditionAspectId;
        Object[] args=new Object[]{parentSourceNode};
        Boolean conditionStatus=(Boolean)QueryMethod.invokeWithOptionalArg(methodName,args,nodeMacro.getModel(),generator.getGeneratorSessionContext());
        List<SNode> sourceNodes=new LinkedList<SNode>();
        if (conditionStatus) {
          sourceNodes.add(parentSourceNode);
        }
        return sourceNodes;
      }
    }
 else     if (nodeMacro instanceof LoopMacro || nodeMacro instanceof CopySrcListMacro || nodeMacro instanceof MapSrcListMacro) {
    }
    if (nodeMacro != null) {
      String sourceQueryAspectMethodName=nodeMacro.getSourceQueryAspectMethodName();
      if (sourceQueryAspectMethodName != null) {
        String methodName="templateSourceQuery_" + sourceQueryAspectMethodName;
        Object[] args=new Object[]{parentSourceNode,generator};
        List<SNode> sourceNodes=(List<SNode>)QueryMethod.invoke(methodName,args,nodeMacro.getModel());
        checkNodesFromQuery(sourceNodes,nodeMacro,generator);
        return sourceNodes;
      }
    }
    List<SNode> list=new LinkedList<SNode>();
    list.add(parentSourceNode);
    return list;
  }
 catch (  GenerationFailedException gfe) {
    throw gfe;
  }
catch (  Throwable t) {
    throw new GenerationFailedException(new GenerationFailueInfo(t.toString(),parentSourceNode,templateNode,null,generator.getGeneratorSessionContext()),t);
  }
}
