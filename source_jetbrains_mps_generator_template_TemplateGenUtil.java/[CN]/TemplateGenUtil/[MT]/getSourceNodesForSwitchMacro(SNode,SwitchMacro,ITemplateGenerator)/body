{
  List<SNode> sourceNodes=new ArrayList<SNode>(1);
  String sourceQueryAspectMethodName=macro.getSourceQueryAspectMethodName();
  SourceSubstituteMacro_SourceNodeQuery query=macro.getSourceNodeQuery();
  if (query == null && sourceQueryAspectMethodName == null) {
    sourceNodes.add(sourceNode);
    return sourceNodes;
  }
  if (query != null) {
    String methodName=TemplateFunctionMethodName.sourceSubstituteMacro_SourceNodeQuery(query.getNode());
    Object[] args=new Object[]{sourceNode,generator.getSourceModel(),generator,generator.getScope(),generator.getGeneratorSessionContext()};
    long t1=System.currentTimeMillis();
    try {
      SNode outputSourceNode=(SNode)QueryMethodGenerated.invoke(methodName,args,macro.getModel());
      if (outputSourceNode != null) {
        sourceNodes.add(outputSourceNode);
      }
      return sourceNodes;
    }
 catch (    Exception e) {
      generator.showErrorMessage(sourceNode,null,BaseAdapter.fromAdapter(macro),"couldn't evaluate macro query");
      LOG.error(e);
      return new LinkedList<SNode>();
    }
 finally {
      Statistics.getStatistic(Statistics.TPL).add(macro.getModel().getLongName() + "." + methodName,System.currentTimeMillis() - t1,true);
    }
  }
  String methodName="templateSourceQuery_" + sourceQueryAspectMethodName;
  Object[] args=new Object[]{sourceNode,generator};
  long t1=System.currentTimeMillis();
  try {
    sourceNodes=(List<SNode>)QueryMethod.invoke(methodName,args,macro.getModel());
    return sourceNodes;
  }
 catch (  Exception e) {
    generator.showErrorMessage(sourceNode,null,BaseAdapter.fromAdapter(macro),"couldn't evaluate macro query: " + NameUtil.shortNameFromLongName(e.getClass().getName()) + " : "+ e.getMessage());
    LOG.error(e);
    return new LinkedList<SNode>();
  }
 finally {
    Statistics.getStatistic(Statistics.TPL).add(macro.getModel().getLongName() + "." + methodName,System.currentTimeMillis() - t1,true);
  }
}
