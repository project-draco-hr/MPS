{
  if (templateDeclaration == null) {
    generator.showErrorMessage(sourceNode,null,reductionRule,"couldn't apply reduction: no template declaration");
    throw new RuntimeException("no template declaration");
  }
  List<TemplateFragment> templateFragments=getTemplateFragments(templateDeclaration);
  if (templateFragments.size() == 0) {
    generator.showErrorMessage(sourceNode,templateDeclaration,reductionRule,"template declaration has no template fragments");
    throw new RuntimeException("template declaration has no template fragments");
  }
  SNode p1=templateFragments.get(0).getParent();
  SNode enclosingNode=p1.getParent();
  List<INodeBuilder> buildersForRule=new LinkedList<INodeBuilder>();
  for (  TemplateFragment fragment : templateFragments) {
    SNode fragmentNode=fragment.getParent();
    if (fragmentNode.getParent() != enclosingNode) {
      continue;
    }
    String mappingName=fragment.getName();
    if (mappingName == null) {
      mappingName=reductionRule.getName();
    }
    buildersForRule.addAll(createNodeBuildersForTemplateNode(sourceNode,fragmentNode,mappingName,0,generator));
  }
  INodeBuilder builderForRule;
  if (buildersForRule.size() == 1) {
    builderForRule=buildersForRule.get(0);
  }
 else   if (buildersForRule.size() > 1) {
    builderForRule=new DefaultNodeBuilderList(buildersForRule);
  }
 else {
    return null;
  }
  builderForRule.setRuleNode(reductionRule);
  return builderForRule;
}
