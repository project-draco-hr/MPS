{
  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
  final List<String> errors=new ArrayList<String>();
  final List<String> warnings=new ArrayList<String>();
  final List<String> compilationResults=new ArrayList<String>();
  final List<TestFailure> failedTests=new ArrayList<TestFailure>();
  final List<String> diffReports=new ArrayList<String>();
  final IMessageHandler handler=new MyIMessageHandler(errors,warnings);
  final ILoggingHandler loggingHandler=new MyILoggingHandler(errors,warnings);
  try {
    Logger.addLoggingHandler(loggingHandler);
    final TesterGenerationType generationType=new TesterGenerationType(true);
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        List<BaseTestConfiguration> configurations=new ArrayList<BaseTestConfiguration>(myProject.getProjectDescriptor().getTestConfigurations());
        if (configurations.isEmpty()) {
          throw new RuntimeException("tested project has no test configurations");
        }
        for (        BaseTestConfiguration t : configurations) {
          System.out.println("completed : " + configurations.indexOf(t) + " / "+ configurations.size());
          if (configurationsGiven.length > 0) {
            boolean exists=false;
            for (            String confName : configurationsGiven) {
              if (confName.equals(t.getName())) {
                exists=true;
                break;
              }
            }
            if (!exists) {
              continue;
            }
          }
          GenParameters parms;
          try {
            parms=t.getGenParams(myProject,true);
          }
 catch (          IllegalGeneratorConfigurationException e) {
            errors.add("Can't create a generator configuration : " + e.getMessage());
            return;
          }
          int numErrorsBeforeGeneration=errors.size();
          GeneratorManager gm=myProject.getComponentSafe(GeneratorManager.class);
          gm.generateModels(parms.getModelDescriptors(),new ModuleContext(parms.getModule(),myProject),generationType,new EmptyProgressIndicator(),handler);
          if (myIsRunnable) {
            diffReports.addAll(DiffReporter.createDiffReports(generationType));
          }
          if (errors.size() > numErrorsBeforeGeneration) {
            System.out.println("There were generation errors, cancelling compilation");
          }
 else {
            long start=System.currentTimeMillis();
            List<CompilationResult> compilationResultList=generationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
            System.out.println("Compiled " + compilationResultList.size() + " compilation units in "+ (System.currentTimeMillis() - start));
            compilationResults.addAll(createCompilationProblemsList(compilationResultList));
            if (compilationResults.isEmpty()) {
              System.out.println("Compilation ok");
            }
          }
          failedTests.addAll(createTestFailures(generationType,parms));
          System.out.println("");
          System.out.println("");
          System.out.println("");
        }
      }
    }
);
  }
  finally {
    Logger.removeLoggingHandler(loggingHandler);
  }
  return new TestResult(errors,warnings,compilationResults,failedTests,diffReports);
}
