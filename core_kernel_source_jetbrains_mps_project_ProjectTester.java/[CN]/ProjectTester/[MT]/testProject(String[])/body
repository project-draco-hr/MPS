{
  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
  final List<String> errors=new ArrayList<String>();
  final List<String> warnings=new ArrayList<String>();
  final List<String> compilationResults=new ArrayList<String>();
  final IMessageHandler handler=new IMessageHandler(){
    public void handle(    Message msg){
switch (msg.getKind()) {
case ERROR:
        System.out.println("error: " + msg.getText());
      errors.add(msg.getText());
    break;
case WARNING:
  System.out.println("warn:  " + msg.getText());
warnings.add(msg.getText());
break;
case INFORMATION:
System.out.println("info:  " + msg.getText());
break;
}
}
}
;
final ILoggingHandler loggingHandler=new ILoggingHandler(){
public void info(LogEntry e){
}
public void warning(LogEntry e){
warnings.add(e.getMessage());
}
public void debug(LogEntry e){
}
public void error(LogEntry e){
errors.add(e.getMessage());
}
public void fatal(LogEntry e){
errors.add(e.getMessage());
}
}
;
try {
Logger.addLoggingHandler(loggingHandler);
final GenerateFilesAndClassesGenerationType generationType=new GenerateFilesAndClassesGenerationType(false){
public boolean requiresReloading(){
return false;
}
public boolean requiresCompilationBeforeGeneration(){
return false;
}
public boolean requiresCompilationAfterGeneration(){
return false;
}
protected boolean isPutClassesOnTheDisk(){
return false;
}
}
;
ModelAccess.instance().runWriteAction(new Runnable(){
public void run(){
List<BaseTestConfiguration> configurations=new ArrayList<BaseTestConfiguration>(myProject.getProjectDescriptor().getTestConfigurations());
if (configurations.isEmpty()) {
throw new RuntimeException("tested project has no test configurations");
}
for (BaseTestConfiguration t : configurations) {
System.out.println("completed : " + configurations.indexOf(t) + " / "+ configurations.size());
if (configurationsGiven.length > 0) {
boolean exists=false;
for (String confName : configurationsGiven) {
if (confName.equals(t.getName())) {
exists=true;
break;
}
}
if (!exists) {
continue;
}
}
GenParameters parms;
try {
parms=t.getGenParams(myProject,true);
}
 catch (IllegalGeneratorConfigurationException e) {
errors.add("Can't create a generator configuration : " + e.getMessage());
return;
}
GeneratorManager gm=myProject.getComponentSafe(GeneratorManager.class);
gm.generateModels(parms.getModelDescriptors(),new ModuleContext(parms.getModule(),myProject),generationType,new EmptyProgressIndicator(),handler);
compilationResults.addAll(createCompilationProblemsList(generationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR)));
System.out.println("");
System.out.println("");
System.out.println("");
}
}
}
);
}
  finally {
Logger.removeLoggingHandler(loggingHandler);
}
return new TestResult(errors,warnings,compilationResults);
}
