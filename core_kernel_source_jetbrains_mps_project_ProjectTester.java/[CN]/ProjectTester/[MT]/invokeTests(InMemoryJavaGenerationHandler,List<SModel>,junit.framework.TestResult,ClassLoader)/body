{
  for (  final SModel model : outputModels) {
    for (    final SNode outputRoot : model.getRoots()) {
      if (baseClassLoader == null) {
        baseClassLoader=model.getClass().getClassLoader();
      }
      ClassLoader classLoader=generationHandler.getCompiler().getClassLoader(baseClassLoader);
      Boolean isClassConcept=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return !outputRoot.isInstanceOfConcept(ClassConcept.concept);
        }
      }
);
      if (isClassConcept) {
        continue;
      }
      try {
        String className=ModelAccess.instance().runReadAction(new Computable<String>(){
          @Override public String compute(){
            return model.getLongName() + "." + outputRoot.getName();
          }
        }
);
        final Class testClass=Class.forName(className,true,classLoader);
        if (Modifier.isAbstract(testClass.getModifiers()) || Modifier.isInterface(testClass.getModifiers()))         continue;
        if (Modifier.isPrivate(testClass.getModifiers()))         continue;
        if (testClass.getAnnotation(classLoader.loadClass(MPSLaunch.class.getName())) != null)         continue;
        List<Method> testMethods=new ArrayList<Method>();
        Class<TestCase> testCaseClass=(Class<TestCase>)classLoader.loadClass(TestCase.class.getName());
        boolean isTestCase=testCaseClass.isAssignableFrom(testClass);
        for (        Method method : testClass.getMethods()) {
          if (method.getAnnotation((Class<Annotation>)classLoader.loadClass(org.junit.Test.class.getName())) != null || (method.getName().startsWith("test") && isTestCase)) {
            testMethods.add(method);
          }
        }
        for (        Method testMethod : testMethods) {
          try {
            final Object instance=testClass.newInstance();
            Method setName=testCaseClass.getMethod("setName",String.class);
            setName.invoke(instance,testMethod.getName());
            Method runMethod=testCaseClass.getMethod("run",classLoader.loadClass(junit.framework.TestResult.class.getName()));
            runMethod.invoke(instance,testResult);
          }
 catch (          Throwable ignored) {
            System.err.println(testClass.getCanonicalName() + ":");
            ignored.printStackTrace();
          }
        }
      }
 catch (      Throwable ignored) {
        ignored.printStackTrace();
      }
    }
  }
}
