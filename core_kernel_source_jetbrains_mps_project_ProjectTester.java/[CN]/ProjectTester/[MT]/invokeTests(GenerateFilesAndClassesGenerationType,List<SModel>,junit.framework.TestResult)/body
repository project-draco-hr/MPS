{
  for (  final SModel model : outputModels) {
    ClassLoader classLoader=genType.getCompiler().getClassLoader(model.getClass().getClassLoader());
    for (    final SNode outputRoot : model.getRoots()) {
      if (ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return !outputRoot.isInstanceOfConcept(ClassConcept.concept);
        }
      }
)) {
        continue;
      }
      try {
        String className=ModelAccess.instance().runReadAction(new Computable<String>(){
          @Override public String compute(){
            return model.getLongName() + "." + outputRoot.getName();
          }
        }
);
        final Class testClass=Class.forName(className,true,classLoader);
        Annotation[] annotations=testClass.getAnnotations();
        if (!findAnnotationOfClass(annotations,MPSLaunch.class))         continue;
        List<Method> testMethods=new ArrayList<Method>();
        boolean isTestCase=TestCase.class.isAssignableFrom(testClass);
        for (        Method method : testClass.getMethods()) {
          if (findAnnotationOfClass(method.getAnnotations(),org.junit.Test.class) || (method.getName().startsWith("test") && isTestCase)) {
            testMethods.add(method);
          }
        }
        for (        Method testMethod : testMethods) {
          final Object instance=testClass.newInstance();
          Method setName=TestCase.class.getMethod("setName",String.class);
          setName.invoke(instance,testMethod.getName());
          ((TestCase)instance).run(testResult);
        }
      }
 catch (      Throwable ignored) {
        ignored.printStackTrace();
      }
    }
  }
}
