{
  Edge.Direction dir;
  if (orderDir == TOP_TO_BOTTOM) {
    dir=Edge.Direction.BACK;
  }
 else {
    dir=Edge.Direction.FRONT;
  }
  Map<Node,Node> roots=computeBlocks(getOrderIterator(myOrder,orderDir),dir,layerDir);
  Graph blockGraph=createBlockGraph(getOrderIterator(myOrder,orderDir),roots,layerDir);
  Map<Node,Integer> layers=new BlockGraphProcessor().process(blockGraph);
  Map<Node,Integer> curCoords=new NodeMap<Integer>(myGraph);
  if (layerDir == LEFTMOST) {
    for (    Node node : ListSequence.fromList(myGraph.getNodes())) {
      MapSequence.fromMap(curCoords).put(node,MapSequence.fromMap(layers).get(MapSequence.fromMap(myBlocks).get(MapSequence.fromMap(roots).get(node))));
    }
  }
 else {
    int maxCoord=0;
    for (    Node block : ListSequence.fromList(blockGraph.getNodes())) {
      maxCoord=Math.max(maxCoord,MapSequence.fromMap(layers).get(block));
    }
    for (    Node node : ListSequence.fromList(myGraph.getNodes())) {
      MapSequence.fromMap(curCoords).put(node,maxCoord - MapSequence.fromMap(layers).get(MapSequence.fromMap(myBlocks).get(MapSequence.fromMap(roots).get(node))));
    }
  }
  return curCoords;
}
