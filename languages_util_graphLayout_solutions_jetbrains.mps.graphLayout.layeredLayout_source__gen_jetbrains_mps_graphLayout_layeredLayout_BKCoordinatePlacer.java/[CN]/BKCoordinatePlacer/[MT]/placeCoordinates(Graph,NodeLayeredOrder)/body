{
  this.myGraph=graph;
  this.myOrder=order;
  this.init();
  List<Map<Node,Integer>> xCoords=ListSequence.fromList(new ArrayList<Map<Node,Integer>>());
  ListSequence.fromList(xCoords).addElement(computeCoords(TOP_TO_BOTTOM,LEFTMOST));
  ListSequence.fromList(xCoords).addElement(computeCoords(TOP_TO_BOTTOM,RIGHTMOST));
  ListSequence.fromList(xCoords).addElement(computeCoords(BOTTOM_TO_TOP,LEFTMOST));
  ListSequence.fromList(xCoords).addElement(computeCoords(BOTTOM_TO_TOP,RIGHTMOST));
  List<Integer> maxCoord=ListSequence.fromList(new ArrayList<Integer>());
  int minMaxCoord=Integer.MAX_VALUE;
  List<Node> nodes=graph.getNodes();
  for (  Map<Node,Integer> coords : ListSequence.fromList(xCoords)) {
    int curMaxCoord=0;
    for (    Node node : ListSequence.fromList(nodes)) {
      curMaxCoord=Math.max(curMaxCoord,MapSequence.fromMap(coords).get(node));
    }
    minMaxCoord=Math.min(minMaxCoord,curMaxCoord);
    ListSequence.fromList(maxCoord).addElement(curMaxCoord);
  }
  List<Integer> shifts=ListSequence.fromList(new ArrayList<Integer>());
  for (int i=0; i < ListSequence.fromList(xCoords).count(); i++) {
    if (i % 2 == 0) {
      ListSequence.fromList(shifts).addElement(0);
    }
 else {
      ListSequence.fromList(shifts).addElement(minMaxCoord - ListSequence.fromList(maxCoord).getElement(i));
    }
  }
  Map<Node,Integer> finalXCoord=new NodeMap<Integer>(graph);
  for (  Node node : ListSequence.fromList(nodes)) {
    List<Integer> nodeXCoords=ListSequence.fromList(new ArrayList<Integer>());
    for (int i=0; i < ListSequence.fromList(xCoords).count(); i++) {
      ListSequence.fromList(nodeXCoords).addElement(MapSequence.fromMap(ListSequence.fromList(xCoords).getElement(i)).get(node) + ListSequence.fromList(shifts).getElement(i));
    }
    nodeXCoords=ListSequence.fromList(nodeXCoords).sort(new ISelector<Integer,Comparable<?>>(){
      public Comparable<?> select(      Integer it){
        return it;
      }
    }
,true).toListSequence();
    MapSequence.fromMap(finalXCoord).put(node,ListSequence.fromList(nodeXCoords).getElement(1) + ListSequence.fromList(nodeXCoords).getElement(2));
  }
  int minXCoord=Integer.MAX_VALUE;
  for (  Node node : ListSequence.fromList(nodes)) {
    minXCoord=Math.min(minXCoord,MapSequence.fromMap(finalXCoord).get(node));
  }
  for (  Node node : ListSequence.fromList(nodes)) {
    MapSequence.fromMap(finalXCoord).put(node,MapSequence.fromMap(finalXCoord).get(node) - minXCoord);
  }
  Map<Node,Point> coord=new NodeMap<Point>(graph);
  for (  Node node : ListSequence.fromList(nodes)) {
    MapSequence.fromMap(coord).put(node,new Point(MapSequence.fromMap(finalXCoord).get(node),MapSequence.fromMap(myNumLayer).get(node)));
  }
  return coord;
}
