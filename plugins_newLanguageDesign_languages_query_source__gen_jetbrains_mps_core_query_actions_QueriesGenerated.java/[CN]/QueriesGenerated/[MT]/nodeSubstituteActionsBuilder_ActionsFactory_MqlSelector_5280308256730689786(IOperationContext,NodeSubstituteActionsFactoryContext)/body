{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionSelector");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlCollectionSelectorKind"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode nn=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlCollectionSelector",null);
              SPropertyOperations.set(nn,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
              SPropertyOperations.set(SLinkOperations.getTarget(nn,"var",true),"name","it");
              return nn;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","5280308256730467483"),"member",true)).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }
),"externalValue");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionConcatOp");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlCollectionConcatOpKind"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode nn=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlCollectionConcatOp",null);
              SPropertyOperations.set(nn,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
              return nn;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","5272233748012107008"),"member",true)).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }
),"externalValue");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionElementOp");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlCollectionElementOpKind"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode nn=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlCollectionElementOp",null);
              SPropertyOperations.set(nn,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
              return nn;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","5272233748012107398"),"member",true)).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }
),"externalValue");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCollectionProperty");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlCollectionPropertyKind"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode nn=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlCollectionProperty",null);
              SPropertyOperations.set(nn,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
              return nn;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","5280308256730609807"),"member",true)).findFirst(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
                }
              }
),"externalValue");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
