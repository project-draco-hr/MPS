{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlArithmeticKind"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode result=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.query.structure.MqlArithmetic",_context.getSourceNode());
            SPropertyOperations.set(result,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
            SNode nodeToProcess=PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode(),result);
            SNodeOperations.replaceWithAnother(nodeToProcess,result);
            SLinkOperations.setTarget(result,"left",nodeToProcess,true);
            return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","6762883159245048041"),"member",true)).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
              }
            }
),"externalValue");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SEnumOperations.getEnumMemberName((item)).toLowerCase() + " operator";
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlArithmetic"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","MqlConditionKind"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode result=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.query.structure.MqlCondition",_context.getSourceNode());
            SPropertyOperations.set(result,"kind","" + (SEnumOperations.getEnumMemberValue((item))));
            SNode nodeToProcess=PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode(),result);
            SNodeOperations.replaceWithAnother(nodeToProcess,result);
            SLinkOperations.setTarget(result,"left",nodeToProcess,true);
            return PrecedenceUtil.parenthesiseAndRotateIfNecessary(result);
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","6762883159245048026"),"member",true)).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
              }
            }
),"externalValue");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:f9198ffd-e084-425c-aa82-f2db8289f5eb(jetbrains.mps.core.query.structure)","6762883159245048026"),"member",true)).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SPropertyOperations.getString(it,"internalValue").equals(SEnumOperations.getEnumMemberValue((item)));
              }
            }
),"externalValue") + " operator";
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlCondition"),null));
          }
        }
);
      }
    }
  }
  return result;
}
