{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode var=SNodeFactoryOperations.createNewNode("jetbrains.mps.core.query.structure.MqlSwitchAliasVar",null);
      SPropertyOperations.set(var,"name","it");
      SNode node=SConceptOperations.createNewNode("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee",null);
      SLinkOperations.setTarget(node,"expression",SLinkOperations.getTarget(_context.getSourceNode(),"expression",true),true);
      SLinkOperations.setTarget(node,"aliasVar",var,true);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),node);
      return node;
    }
    public String getMatchingText(    String pattern){
      return "as";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlSwitchAliasedScrutinee"),null));
    }
  }
);
  return result;
}
