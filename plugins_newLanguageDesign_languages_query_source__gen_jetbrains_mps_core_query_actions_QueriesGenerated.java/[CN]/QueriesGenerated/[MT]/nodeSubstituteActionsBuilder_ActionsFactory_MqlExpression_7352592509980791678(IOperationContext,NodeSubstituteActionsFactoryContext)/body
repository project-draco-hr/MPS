{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode mqlUnary=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlUnary",null);
          SPropertyOperations.set(mqlUnary,"kind","2");
          return mqlUnary;
        }
        public String getDescriptionText(        String pattern){
          return "unary minus";
        }
        public String getMatchingText(        String pattern){
          return "-";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlUnary");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode mqlUnary=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.query.structure.MqlUnary",null);
          SPropertyOperations.set(mqlUnary,"kind","1");
          return mqlUnary;
        }
        public String getDescriptionText(        String pattern){
          return "logical negation";
        }
        public String getMatchingText(        String pattern){
          return "!";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
