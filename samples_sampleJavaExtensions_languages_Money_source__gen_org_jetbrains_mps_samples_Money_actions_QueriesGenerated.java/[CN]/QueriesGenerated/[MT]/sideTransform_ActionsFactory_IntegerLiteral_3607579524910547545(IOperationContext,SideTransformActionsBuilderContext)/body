{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.Money.structure.MoneyLiteral"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    final String pattern){
      Iterable<SNode> units=ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(_context.getSourceNode()),"org.jetbrains.mps.samples.Money.structure.CurrencyDefTable")).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SLinkOperations.getTargets(it,"units",true);
        }
      }
);
      SNode unit=Sequence.fromIterable(units).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(it,"name").equals(pattern);
        }
      }
);
      if (unit != null) {
        SNode ml=SConceptOperations.createNewNode("org.jetbrains.mps.samples.Money.structure.MoneyLiteral",null);
        SLinkOperations.setTarget(ml,"unit",unit,false);
        SPropertyOperations.set(ml,"amount","" + (SPropertyOperations.getInteger(SNodeOperations.cast(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.IntegerConstant"),"value")));
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),ml);
        return SLinkOperations.getTarget(ml,"unit",false);
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      Iterable<SNode> units=ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(_context.getSourceNode()),"org.jetbrains.mps.samples.Money.structure.CurrencyDefTable")).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SLinkOperations.getTargets(it,"units",true);
        }
      }
);
      for (      SNode u : Sequence.fromIterable(units)) {
        if (SPropertyOperations.getString(u,"name").startsWith(pattern)) {
          return SPropertyOperations.getString(u,"name");
        }
      }
      return null;
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
