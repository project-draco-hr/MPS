{
  aboutToStart();
  pi.pushState();
  final int clsize=Sequence.fromIterable(this.myClInput).count();
  if (clsize == 0) {
    return;
  }
  final double clfrac=(1.0 / clsize);
  final int[] idx=new int[]{0};
  useProgressIndicator(new ProgressIndicatorDelegate(pi){
    @Override public void setFraction(    double d){
      getDelegate().setFraction((idx[0] + d) * clfrac);
    }
    @Override public void setText2(    String string){
    }
  }
);
  Iterator<IScript> scit=Sequence.<IScript>fromIterable(myScripts).iterator();
  Iterator<? extends Iterable<IResource>> clit=Sequence.fromIterable(myClInput).iterator();
  while (scit.hasNext() && clit.hasNext()) {
    Iterable<IResource> cl=clit.next();
    IScript scr=scit.next();
    if (!(scr.isValid())) {
      String msg=myScrName + " failed";
      myMessageHandler.handle(new Message(MessageKind.ERROR,msg + ". Invalid script."));
      displayInfo(msg);
      this.myResult=new IResult.FAILURE(null);
      break;
    }
    if (InternalFlag.isInternalMode()) {
      myMessageHandler.handle(new Message(MessageKind.INFORMATION,"Modules cluster " + (idx[0] + 1) + "/"+ clsize+ " ["+ IterableUtils.join(Sequence.<IResource>fromIterable(cl).<String>select(new ISelector<IResource,String>(){
        public String select(        IResource r){
          return ((IResource)r).describe();
        }
      }
),", ")+ "]"));
    }
    pi.setText2((idx[0] + 1) + "/" + clsize+ " "+ IterableUtils.join(Sequence.<IResource>fromIterable(cl).<String>select(new ISelector<IResource,String>(){
      public String select(      IResource r){
        return ((IResource)r).describe();
      }
    }
),","));
    this.myResult=scr.execute(this.myController,cl);
    if (!(this.myResult.isSucessful()) || pi.isCanceled()) {
      break;
    }
    idx[0]++;
  }
  pi.popState();
  this.myState.set(MakeTask.TaskState.INDETERMINATE);
}
