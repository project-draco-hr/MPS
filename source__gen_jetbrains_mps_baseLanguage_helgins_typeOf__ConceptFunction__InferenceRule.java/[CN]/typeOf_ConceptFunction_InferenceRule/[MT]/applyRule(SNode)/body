{
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument,"body",true));
  SNode expectedRetType=BehaviorManager.getInstance().invoke(SNode.class,argument,"virtual_getExpectedReturnType_1178571276073");
  boolean noReturnExpected=TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType,new QuotationClass_74().createNode());
  SNode leastCommonSupertype=null;
  Iterable<SNode> returnStatements=RulesFunctions.collectReturnStatements(SLinkOperations.getTarget(argument,"body",true));
  boolean somethingReturned=!(SequenceOperations.isEmpty(returnStatements));
  if (noReturnExpected) {
{
      ICursor<SNode> _zCursor1=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor1.moveToNext()) {
          SNode returnStatement=_zCursor1.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) != null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"no return value expected");
          }
        }
      }
  finally {
        _zCursor1.release();
      }
    }
  }
 else {
{
      ICursor<SNode> _zCursor2=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor2.moveToNext()) {
          SNode returnStatement=_zCursor2.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) == null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"should return value");
          }
 else {
            leastCommonSupertype=RulesFunctions.computeLeastCommonSupertype(SLinkOperations.getTarget(returnStatement,"expression",true),leastCommonSupertype,expectedRetType);
          }
        }
      }
  finally {
        _zCursor2.release();
      }
    }
    if (leastCommonSupertype == null) {
      leastCommonSupertype=expectedRetType;
    }
  }
  if (!(noReturnExpected)) {
    SNode lastStatement=SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument,"body",true),"statement",true));
    if (SNodeOperations.isInstanceOf(lastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      SNode expression=SLinkOperations.getTarget(lastStatement,"expression",true);
      leastCommonSupertype=RulesFunctions.computeLeastCommonSupertype(expression,leastCommonSupertype,expectedRetType);
      somethingReturned=true;
    }
    if (!(somethingReturned)) {
      String whatExpected=((expectedRetType == null) ? "some value" : "" + expectedRetType);
      TypeChecker.getInstance().reportTypeError(argument,"function should return " + whatExpected);
    }
    TypeChecker.getInstance().getRuntimeSupport().givetype(leastCommonSupertype,argument);
  }
}
