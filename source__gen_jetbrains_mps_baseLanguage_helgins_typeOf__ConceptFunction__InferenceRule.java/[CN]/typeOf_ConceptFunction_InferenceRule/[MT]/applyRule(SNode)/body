{
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument,"body",true));
  SNode funcType_typevar_1178587480938=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
  SNode expectedRetType=BehaviorManager.getInstance().invoke(SNode.class,argument,"virtual_getExpectedReturnType_1178571276073");
  boolean noReturnExpected=TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType,new QuotationClass_74().createNode());
  Iterable<SNode> returnStatements=RulesFunctions.collectReturnStatements(SLinkOperations.getTarget(argument,"body",true));
  boolean somethingReturned=!(SequenceOperations.isEmpty(returnStatements));
  if ((expectedRetType == null)) {
{
      ICursor<SNode> _zCursor=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor.moveToNext()) {
          SNode returnStatement=_zCursor.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) == null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"should return value");
          }
 else {
            TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(funcType_typevar_1178587480938,TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(returnStatement,"expression",true)),SLinkOperations.getTarget(returnStatement,"expression",true));
          }
        }
      }
  finally {
        _zCursor.release();
      }
    }
  }
 else   if (noReturnExpected) {
{
      ICursor<SNode> _zCursor1=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor1.moveToNext()) {
          SNode returnStatement=_zCursor1.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) != null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"no return value expected");
          }
        }
      }
  finally {
        _zCursor1.release();
      }
    }
  }
 else {
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(funcType_typevar_1178587480938,expectedRetType,argument);
{
      ICursor<SNode> _zCursor2=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor2.moveToNext()) {
          SNode returnStatement=_zCursor2.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) == null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"should return value");
          }
 else {
            TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(funcType_typevar_1178587480938,TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(returnStatement,"expression",true)),SLinkOperations.getTarget(returnStatement,"expression",true));
          }
        }
      }
  finally {
        _zCursor2.release();
      }
    }
  }
  if (!(noReturnExpected)) {
    SNode lastStatement=SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument,"body",true),"statement",true));
    if (SNodeOperations.isInstanceOf(lastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(funcType_typevar_1178587480938,TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(lastStatement,"expression",true)),SLinkOperations.getTarget(lastStatement,"expression",true));
      somethingReturned=true;
    }
    if (somethingReturned) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(funcType_typevar_1178587480938,argument);
    }
 else {
      String whatExpected=((expectedRetType == null) ? "some value" : "" + expectedRetType);
      TypeChecker.getInstance().reportTypeError(argument,"function should return " + whatExpected);
      TypeChecker.getInstance().getRuntimeSupport().givetype(expectedRetType,argument);
    }
  }
}
