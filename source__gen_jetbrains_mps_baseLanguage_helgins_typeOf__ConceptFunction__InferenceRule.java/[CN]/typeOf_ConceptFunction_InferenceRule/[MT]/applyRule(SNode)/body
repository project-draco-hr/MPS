{
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument,"body",true),"jetbrains.mps.baseLanguage.helgins","1178655253666");
  SNode expectedRetType=ConceptFunction_Behavior.call_getExpectedReturnType_1178571276073(argument);
  boolean noReturnExpected=((expectedRetType == null) || TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType,new QuotationClass_76().createNode()));
  if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(expectedRetType),"jetbrains.mps.baseLanguage.structure.WildCardType")) {
    expectedRetType=null;
  }
  SNode leastCommonSupertype=null;
  Iterable<SNode> returnStatements=RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument,"body",true));
  boolean somethingReturned=!(SequenceOperations.isEmpty(returnStatements));
  if (noReturnExpected) {
{
      ICursor<SNode> _zCursor3=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor3.moveToNext()) {
          SNode returnStatement=_zCursor3.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) != null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"no return value expected","jetbrains.mps.baseLanguage.helgins","1178645658195");
          }
        }
      }
  finally {
        _zCursor3.release();
      }
    }
  }
 else {
{
      ICursor<SNode> _zCursor4=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor4.moveToNext()) {
          SNode returnStatement=_zCursor4.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) == null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"should return value","jetbrains.mps.baseLanguage.helgins","1178645688864");
          }
 else {
            leastCommonSupertype=RulesFunctions_BaseLanguage.computeLeastCommonSupertype(SLinkOperations.getTarget(returnStatement,"expression",true),leastCommonSupertype,expectedRetType);
          }
        }
      }
  finally {
        _zCursor4.release();
      }
    }
  }
  if (noReturnExpected) {
    TypeChecker.getInstance().getRuntimeSupport().givetype(null,argument,"jetbrains.mps.baseLanguage.helgins","1179436909754");
  }
 else {
    SNode lastStatement=SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument,"body",true),"statement",true));
    if (SNodeOperations.isInstanceOf(lastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      SNode expression=SLinkOperations.getTarget(lastStatement,"expression",true);
      leastCommonSupertype=RulesFunctions_BaseLanguage.computeLeastCommonSupertype(expression,leastCommonSupertype,expectedRetType);
      somethingReturned=true;
    }
    if (!(somethingReturned)) {
      String whatExpected=((expectedRetType == null) ? "some value" : "" + expectedRetType);
      TypeChecker.getInstance().reportTypeError(argument,"function should return " + whatExpected,"jetbrains.mps.baseLanguage.helgins","1179436928064");
    }
    if (leastCommonSupertype == null) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(expectedRetType,argument,"jetbrains.mps.baseLanguage.helgins","1179436928073");
    }
 else {
      TypeChecker.getInstance().getRuntimeSupport().givetype(leastCommonSupertype,argument,"jetbrains.mps.baseLanguage.helgins","1179436928081");
    }
  }
}
