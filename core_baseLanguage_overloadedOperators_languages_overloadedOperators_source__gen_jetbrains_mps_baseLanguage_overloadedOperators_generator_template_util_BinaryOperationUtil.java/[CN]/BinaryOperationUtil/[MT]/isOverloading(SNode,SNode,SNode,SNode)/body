{
  if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,SLinkOperations.getTarget(operator,"leftType",true)) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,SLinkOperations.getTarget(operator,"rightType",true)))) {
    return false;
  }
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operator,"operator",true),"jetbrains.mps.baseLanguage.overloadedOperators.structure.BinaryOperationReference")) {
    if (SNodeOperations.isInstanceOf(node,NameUtil.nodeFQName(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(operator,"operator",true),"jetbrains.mps.baseLanguage.overloadedOperators.structure.BinaryOperationReference"),"binaryOperation",false)))) {
      return true;
    }
  }
 else   if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(operator,"operator",true),"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperator") && SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage")) {
    if (SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage"),"operator",false) == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(operator,"operator",true),"jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperator"),"declaration",false)) {
      return true;
    }
  }
  return false;
}
