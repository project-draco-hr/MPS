{
  List<Edge> edges=modification.getModifiedEdges();
  Edge firstEdge=ListSequence.<Edge>fromList(edges).first();
  List<Point> path=layout.getEdgeLayout(firstEdge);
  Node node=modification.getSource();
  Direction2D dartsDir;
  if (firstEdge.getSource() == node) {
    dartsDir=OrthogonalUtil.getDirection(ListSequence.<Point>fromList(path).getElement(0),ListSequence.<Point>fromList(path).getElement(1));
  }
 else {
    int last=ListSequence.<Point>fromList(path).count() - 1;
    dartsDir=OrthogonalUtil.getDirection(ListSequence.<Point>fromList(path).getElement(last),ListSequence.<Point>fromList(path).getElement(last - 1));
  }
  Direction2D shiftDir=dartsDir.turnClockwise(3);
  int dx=shiftDir.dx();
  int dy=shiftDir.dy();
  int nodeLenght;
  if (dx != 0) {
    nodeLenght=layout.getNodeLayout(node).width;
  }
 else {
    nodeLenght=layout.getNodeLayout(node).height;
  }
  int unitShift=nodeLenght / (2 * ListSequence.<Edge>fromList(edges).count());
  int curShift=0;
  for (  Edge edge : ListSequence.<Edge>fromList(edges)) {
    if (edge != ListSequence.<Edge>fromList(edges).first()) {
      layout.removeStraightBends(edge);
      List<Point> edgeLayout=layout.getEdgeLayout(edge);
      List<Point> pointsToShift;
      if (edge.getSource() == node) {
        pointsToShift=ListSequence.<Point>fromListAndArray(new ArrayList<Point>(),ListSequence.<Point>fromList(edgeLayout).getElement(0),ListSequence.<Point>fromList(edgeLayout).getElement(1));
      }
 else {
        int last=ListSequence.<Point>fromList(edgeLayout).count() - 1;
        pointsToShift=ListSequence.<Point>fromListAndArray(new ArrayList<Point>(),ListSequence.<Point>fromList(edgeLayout).getElement(last),ListSequence.<Point>fromList(edgeLayout).getElement(last - 1));
      }
      for (      Point point : ListSequence.<Point>fromList(pointsToShift)) {
        point.translate(dx * curShift,dy * curShift);
      }
    }
    curShift+=unitShift;
  }
}
