{
  VirtualFile attributesFile=vcsRootPath.findChild(ATTRIBUTES_FILE);
  if (attributesFile != null && attributesFile.isDirectory()) {
    return AbstractInstaller.State.NOT_INSTALLED;
  }
  try {
    if (attributesFile == null || !(attributesFile.exists())) {
      if (dryRun) {
        return AbstractInstaller.State.NOT_INSTALLED;
      }
      attributesFile=vcsRootPath.createChildData(GitRepositoriesInstaller.class,ATTRIBUTES_FILE);
    }
    final List<String> lines=StringsIO.readLines(attributesFile.getInputStream());
    if (ListSequence.<String>fromList(PATTERNS).all(new IWhereFilter<String>(){
      public boolean accept(      final String pat){
        return ListSequence.<String>fromList(lines).any(new IWhereFilter<String>(){
          public boolean accept(          String line){
            return line.matches("\\s*" + pat.replace("*","\\*") + ".+merge=mps\\s*");
          }
        }
);
      }
    }
)) {
      return AbstractInstaller.State.INSTALLED;
    }
    for (    String pat : ListSequence.<String>fromList(PATTERNS)) {
      boolean addNew=true;
      for (int i=0; i < ListSequence.<String>fromList(lines).count(); i++) {
        if (ListSequence.<String>fromList(lines).getElement(i).matches("\\s*" + pat.replace("*","\\*") + ".*")) {
          if (ListSequence.<String>fromList(lines).getElement(i).contains("merge=mps")) {
            if (dryRun) {
              return AbstractInstaller.State.OUTDATED;
            }
          }
 else {
            ListSequence.<String>fromList(lines).setElement(i,ListSequence.<String>fromList(lines).getElement(i) + " merge=mps");
          }
          addNew=false;
        }
      }
      if (addNew) {
        ListSequence.<String>fromList(lines).addElement(pat + " merge=mps");
      }
    }
    if (dryRun) {
      return AbstractInstaller.State.NOT_INSTALLED;
    }
    StringsIO.writeLines(attributesFile.getOutputStream(GitRepositoriesInstaller.class),lines);
    return AbstractInstaller.State.INSTALLED;
  }
 catch (  IOException e) {
    return AbstractInstaller.State.NOT_INSTALLED;
  }
}
