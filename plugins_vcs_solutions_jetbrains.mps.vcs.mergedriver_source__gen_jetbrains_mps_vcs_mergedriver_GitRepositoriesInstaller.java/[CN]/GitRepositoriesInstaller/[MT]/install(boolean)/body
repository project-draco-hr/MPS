{
  VcsRoot[] allRoots=myProject.getComponent(ProjectLevelVcsManager.class).getAllVcsRoots();
  Iterable<VcsRoot> gitRoots=Sequence.fromIterable(Sequence.fromArray(allRoots)).where(new IWhereFilter<VcsRoot>(){
    public boolean accept(    VcsRoot root){
      return "Git".equals(root.vcs.getName());
    }
  }
);
  if (Sequence.fromIterable(gitRoots).isEmpty()) {
    return AbstractInstaller.State.INSTALLED;
  }
 else {
    List<AbstractInstaller.State> states=Sequence.fromIterable(gitRoots).<AbstractInstaller.State>select(new ISelector<VcsRoot,AbstractInstaller.State>(){
      public AbstractInstaller.State select(      VcsRoot r){
        return installForRoot(r.path,true);
      }
    }
).toListSequence();
    if (ListSequence.fromList(states).all(new IWhereFilter<AbstractInstaller.State>(){
      public boolean accept(      AbstractInstaller.State s){
        return s == AbstractInstaller.State.INSTALLED;
      }
    }
)) {
      return AbstractInstaller.State.INSTALLED;
    }
 else     if (ListSequence.fromList(states).any(new IWhereFilter<AbstractInstaller.State>(){
      public boolean accept(      AbstractInstaller.State s){
        return s == AbstractInstaller.State.OUTDATED;
      }
    }
)) {
      if (dryRun) {
        return AbstractInstaller.State.OUTDATED;
      }
    }
 else {
      if (dryRun) {
        return AbstractInstaller.State.NOT_INSTALLED;
      }
    }
    return installForRoots(gitRoots);
  }
}
