{
  final Wrappers._T<SModel> model=new Wrappers._T<SModel>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      myRefactoringModel=SNodeOperations.getModel(ListSequence.fromList(ExtractMethodDialog.this.myParameters.getNodesToRefactor()).first());
      model.value=myRefactoringModel;
    }
  }
);
  final BaseChooseNodeDialog dialog=new BaseChooseNodeDialog(myProject,myContext.getOperationContext(),model.value,"Choose class"){
    @Override protected boolean isAcceptable(    SNode node){
      return SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")) || SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l,-6610165693999523818l),1222174328436l,"jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods"));
    }
  }
;
  dialog.show();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      myStaticTarget=(dialog.getResult() != null ? ((SNodePointer)dialog.getResult()).resolve(MPSModuleRepository.getInstance()) : null);
    }
  }
);
  if (myStaticTarget == null) {
    myRefactoringModel=null;
  }
}
