{
  List<SearchResult<SNode>> results=new ArrayList<SearchResult<SNode>>();
  Iterable<SModel> ownTemplateModels=myGenerator.getOwnTemplateModels();
  Iterable<SNode> mappingConfigs=Sequence.fromIterable(ownTemplateModels).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel it){
      return SModelOperations.roots(it,MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0xff0bea0475L,"jetbrains.mps.lang.generator.structure.MappingConfiguration"));
    }
  }
);
  List<SNode> nodesToCheck=new ArrayList<SNode>();
  for (  SNode mappingConfig : mappingConfigs) {
    for (    SNode rule : ListSequence.fromList(SNodeOperations.getChildren(mappingConfig)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xb401a68083254110L,0x8fd384331ff25befL,0x10fc0b64647L,"jetbrains.mps.lang.generator.structure.BaseMappingRule"));
      }
    }
)) {
      nodesToCheck.add(rule);
      collectChildrenThatMayHaveReferenceOnTemplate(rule,nodesToCheck);
    }
    nodesToCheck.addAll(SLinkOperations.getChildren(mappingConfig,MetaAdapterFactory.getContainmentLink(0xb401a68083254110L,0x8fd384331ff25befL,0xff0bea0475L,0x10fbbe00519L,"createRootRule")));
  }
  for (  SNode node : nodesToCheck) {
    for (    SReference reference : node.getReferences()) {
      if (myNodeToFindUsages.getNodeId().equals(reference.getTargetNodeId())) {
        SearchResult<SNode> result=new SearchResult<SNode>(node,"");
        results.add(result);
        break;
      }
    }
  }
  return new SearchResults<SNode>(CollectionUtil.set(myNodeToFindUsages),results);
}
