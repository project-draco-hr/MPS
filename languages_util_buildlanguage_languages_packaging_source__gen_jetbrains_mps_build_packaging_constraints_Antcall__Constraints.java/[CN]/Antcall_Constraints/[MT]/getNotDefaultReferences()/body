{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("targetDeclaration",new BaseReferenceConstraintsDescriptor("targetDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if ((SLinkOperations.getTarget(_context.getReferenceNode(),"project",false) == null)) {
            return new SimpleSearchScope(new ArrayList<SNode>());
          }
          return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getReferenceNode(),"project",false),"target",true);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_adydoe_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  references.put("project",new BaseReferenceConstraintsDescriptor("project",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode,    final IScope scope){
      if (oldReferentNode != newReferentNode) {
        SLinkOperations.setTarget(referenceNode,"targetDeclaration",null,false);
      }
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider();
    }
  }
);
  return references;
}
