{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.migration.structure.ConceptFunc");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<String> queryResult=new Computable<Iterable<String>>(){
        public Iterable<String> compute(){
          return MapSequence.fromMap(BehaviorReflection.invokeVirtual((Class<Map<String,ConceptFuncInfo>>)((Class)Object.class),SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.lang.migration.structure.ConceptFuncContainter"),"virtual_getConceptFuncs_7794917369458191914",new Object[]{})).keySet();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.migration.structure.ConceptFunc",null);
              SLinkOperations.setTarget(result,"body",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null),true);
              SPropertyOperations.set(result,"name",(item));
              ConceptFunc_Behavior.call_fillParametersFromInfo_8214201644239063140(result,MapSequence.fromMap(BehaviorReflection.invokeVirtual((Class<Map<String,ConceptFuncInfo>>)((Class)Object.class),SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.lang.migration.structure.ConceptFuncContainter"),"virtual_getConceptFuncs_7794917369458191914",new Object[]{})).get((item)).parameters());
              return result;
            }
            public String getDescriptionText(            String pattern){
              return "concept function";
            }
          }
);
        }
      }
    }
  }
  return result;
}
