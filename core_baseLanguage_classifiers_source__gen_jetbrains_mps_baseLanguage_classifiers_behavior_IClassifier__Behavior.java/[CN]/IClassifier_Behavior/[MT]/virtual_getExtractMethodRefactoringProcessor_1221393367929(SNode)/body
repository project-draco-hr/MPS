{
  return new ExtractMethodRefactoringProcessor(thisNode){
    public SNode createNewMethod(    SNode returntType,    List<SNode> params,    SNode body){
      SNode methodDeclaration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration",null);
      SLinkOperations.setTarget(methodDeclaration,"visibility",this.myParamteres.getVisibilityLevel().getNode(),true);
      SLinkOperations.setTarget(methodDeclaration,"returnType",returntType,true);
      SPropertyOperations.set(methodDeclaration,"name",this.myParamteres.getMethodName());
      SLinkOperations.addAll(methodDeclaration,"parameter",params);
      SLinkOperations.setTarget(methodDeclaration,"body",body,true);
      return methodDeclaration;
    }
    public SNode createMethodCall(    SNode methodDeclaration,    List<SNode> parameteres){
      SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation",null);
      SLinkOperations.setTarget(call,"member",((SNode)methodDeclaration),false);
      SLinkOperations.addAll(call,"actualArgument",parameteres);
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
      SLinkOperations.setTarget(result,"operand",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpresson",null),true);
      SLinkOperations.setTarget(result,"operation",call,true);
      return result;
    }
  }
;
}
