{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.CellActionMapItem");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c8959029e(jetbrains.mps.lang.editor.structure)","1139535328871"),"member",true);
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          result.add(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.lang.editor.structure.CellActionMapItem",_context.getCurrentTargetNode());
              SPropertyOperations.set(newNode,"actionId",SPropertyOperations.getString((item),"internalValue"));
              return newNode;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"externalValue");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "";
            }
            public Icon getIconFor(            String pattern){
              return null;
            }
          }
);
        }
      }
    }
  }
  return result;
}
