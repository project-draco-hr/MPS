{
  Language targetLanguage=Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference)refactoringContext.getParameter("targetModel"))));
  Map<LanguageAspect,List<SNode>> aspectNodes=ConceptMoveUtil.getAspectNodes(((Language)refactoringContext.getParameter("sourceLanguage")),refactoringContext.getSelectedNodes());
  Iterable<SNode> targExtends=ListSequence.fromList(refactoringContext.getSelectedNodes()).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SConceptOperations.getDirectSuperConcepts(it,false);
    }
  }
).subtract(ListSequence.fromList(refactoringContext.getSelectedNodes()));
  List<ModuleReference> targetExtends=Sequence.fromIterable(targExtends).select(new ISelector<SNode,SModelInternal>(){
    public SModelInternal select(    SNode it){
      return check_u6ijv2_a0a0a0a0a0a7a0(SNodeOperations.getModel(it));
    }
  }
).distinct().select(new ISelector<SModelInternal,ModuleReference>(){
    public ModuleReference select(    SModelInternal it){
      return check_u6ijv2_a0a0a0a0a7a0(Language.getLanguageFor(it));
    }
  }
).where(new IWhereFilter<ModuleReference>(){
    public boolean accept(    ModuleReference it){
      return it != null;
    }
  }
).toListSequence();
  SModel srcModel=((SModel)refactoringContext.getParameter("sourceModel")).getSModel();
  boolean isSourceExtends=ListSequence.fromList(SModelOperations.getRoots(srcModel,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")).subtract(ListSequence.fromList(refactoringContext.getSelectedNodes())).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SConceptOperations.getDirectSuperConcepts(it,false);
    }
  }
).intersect(ListSequence.fromList(refactoringContext.getSelectedNodes())).isNotEmpty();
  for (  SNode node : refactoringContext.getSelectedNodes()) {
    refactoringContext.changeFeatureName(node,((SModelReference)refactoringContext.getParameter("targetModel")).getSModelFqName().toString() + "." + SPropertyOperations.getString(node,"name"),SPropertyOperations.getString(node,"name"));
  }
  refactoringContext.moveNodesToModel(refactoringContext.getSelectedNodes(),SModelRepository.getInstance().getModelDescriptor(((SModelReference)refactoringContext.getParameter("targetModel"))).getSModel());
  for (  LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectNodes).keySet())) {
    SModel fromModel=aspect.get(((Language)refactoringContext.getParameter("sourceLanguage"))).getSModel();
    SModel toModel=aspect.getOrCreate(targetLanguage).getSModel();
    refactoringContext.updateByDefault(fromModel);
    refactoringContext.moveNodesToModel(MapSequence.fromMap(aspectNodes).get(aspect),toModel);
    refactoringContext.updateByDefault(toModel);
  }
  if (isSourceExtends) {
    ((Language)refactoringContext.getParameter("sourceLanguage")).addExtendedLanguage(targetLanguage.getModuleReference());
  }
  for (  ModuleReference ext : ListSequence.fromList(targetExtends)) {
    targetLanguage.addExtendedLanguage(ext);
  }
}
