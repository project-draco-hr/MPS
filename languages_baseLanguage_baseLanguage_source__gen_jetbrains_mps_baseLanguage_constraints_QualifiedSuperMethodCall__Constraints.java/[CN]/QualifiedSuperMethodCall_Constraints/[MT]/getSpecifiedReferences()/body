{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x37f722a7ce38076aL,0x37f722a7ce38077dL,"classifier"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x37f722a7ce38076aL,0x37f722a7ce38077dL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_4xi9kq_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            List<SNode> ancestors=SNodeOperations.getNodeAncestors(_context.getReferenceNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false);
            List<SNode> result=new ArrayList<SNode>();
            for (            SNode clazz : ancestors) {
              if (!(SNodeOperations.isInstanceOf(clazz,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")))) {
                ListSequence.fromList(result).addElement(clazz);
                if ((boolean)ClassifierMember__BehaviorDescriptor.isStatic_id7MS72Gc8avw.invoke(clazz)) {
                  break;
                }
              }
            }
            System.out.println("AAAAAAAAAAAA " + result);
            return new ListScope(result){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
              }
            }
;
          }
        }
      }
;
    }
  }
);
  references.put(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_4xi9kq_a0a0a0a0a1a0b0a2a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode superClassifier=SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x37f722a7ce38076aL,0x37f722a7ce38077dL,"classifier"));
            if (superClassifier == null) {
              return new EmptyScope();
            }
            SNode extendedClassifierType=ListSequence.fromList(Classifier__BehaviorDescriptor.getExtendedClassifierTypes_id1UeCwxlWKny.invoke(superClassifier)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
              }
            }
).first();
            MethodsScope scope=new MethodsScope(extendedClassifierType,Sequence.fromIterable(Members.visibleInstanceMethods(extendedClassifierType,_context.getContextNode())).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return !((boolean)BaseMethodDeclaration__BehaviorDescriptor.isAbstract_idhWjv7RO.invoke(it));
              }
            }
));
            return scope;
          }
        }
      }
;
    }
  }
);
  return references;
}
