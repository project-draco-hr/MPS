{
  VisibleArtifacts artifacts=new VisibleArtifacts(project,genContext);
  artifacts.collect();
  UnpackHelper helper=new UnpackHelper(artifacts,genContext);
  for (  SNode dep : SNodeOperations.getDescendants(project,"jetbrains.mps.build.structure.BuildExternalDependency",false,new String[]{})) {
    BuildExternalDependency_Behavior.call_fetchDependencies_5908258303322131137(dep,artifacts,new FetchDependenciesProcessor.RequiredDependenciesBuilderImpl(artifacts,dep,helper));
  }
  helper.eval();
  List<SNode> statements=helper.getStatements();
  if (!(ListSequence.fromList(statements).isEmpty())) {
    SNode wf=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.build.structure.BuildCustomWorkflow",null);
    SNode taskpart=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.build.workflow.structure.BwfTaskPart",null);
    SLinkOperations.setTarget(taskpart,"task",SLinkOperations.getTarget(new FetchDependenciesProcessor.QuotationClass_t02zqv_a0a0c0h0a().createNode(),"target",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(wf,"parts",true)).addElement(taskpart);
    SNode stask=SModelOperations.createNewNode(SNodeOperations.getModel(project),"jetbrains.mps.build.workflow.structure.BwfSubTask",null);
    SPropertyOperations.set(stask,"name","fetch");
    ListSequence.fromList(SLinkOperations.getTargets(taskpart,"subTasks",true)).addElement(stask);
    ListSequence.fromList(SLinkOperations.getTargets(stask,"statements",true)).addSequence(ListSequence.fromList(statements));
    ListSequence.fromList(SLinkOperations.getTargets(project,"aspects",true)).addElement(wf);
  }
}
