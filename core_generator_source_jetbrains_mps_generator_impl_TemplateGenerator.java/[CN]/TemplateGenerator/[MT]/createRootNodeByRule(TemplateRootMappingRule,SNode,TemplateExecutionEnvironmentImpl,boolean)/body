{
  try {
    final DefaultTemplateContext templateContext=new DefaultTemplateContext(env,inputNode,null);
    Collection<SNode> outputNodes=env.getQueryExecutor().applyRule(rule,templateContext);
    if (outputNodes == null) {
      return;
    }
    copyNodeAttributes(templateContext,outputNodes,env);
    recordTransformInputTrace(inputNode,outputNodes);
    env.getTrace().trace(inputNode.getNodeId(),GenerationTracerUtil.translateOutput(outputNodes),rule.getRuleNode());
    final boolean inputIsRoot=inputNode.getParent() == null;
    final boolean inputPersists=!inputIsRoot || rule.keepSourceRoot();
    for (    SNode outputNode : outputNodes) {
      registerRoot(new GeneratedRootDescriptor(outputNode,inputNode,inputPersists,rule.getRuleNode()));
      setChanged();
      if (!inputPersists) {
        addCopiedOutputNodeForInputNode(inputNode,outputNode);
      }
      CopyUtil.copyUserObjects(inputNode,outputNode);
    }
  }
 catch (  DismissTopMappingRuleException e) {
    reportDismissRuleException(e,rule);
    if (copyRootOnFailure && inputNode.getModel() != null && inputNode.getParent() == null) {
      final FullCopyFacility copyFacility=new FullCopyFacility(env);
      copyFacility.copyRootInputNode(inputNode);
      if (copyFacility.hasChanges()) {
        setChanged();
      }
    }
  }
catch (  TemplateProcessingFailureException ex) {
    getLogger().error(rule.getRuleNode(),String.format("couldn't create root node: %s",ex.getMessage()),ex.asProblemDescription());
  }
catch (  GenerationException e) {
    if (e instanceof GenerationCanceledException)     throw (GenerationCanceledException)e;
    if (e instanceof GenerationFailureException)     throw (GenerationFailureException)e;
    getLogger().error(rule.getRuleNode(),"internal error: " + e.toString(),GeneratorUtil.describe(inputNode,"input node"));
  }
}
