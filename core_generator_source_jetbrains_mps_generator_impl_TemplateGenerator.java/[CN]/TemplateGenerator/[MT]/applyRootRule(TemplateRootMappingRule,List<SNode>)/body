{
  String applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    getLogger().error(rule.getRuleNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.applyToInheritors();
  Iterable<SNode> inputNodes=FastNodeFinderManager.get(myInputModel).getNodes(applicableConcept,includeInheritors);
  for (  SNode inputNode : inputNodes) {
    if (getGeneratorSessionContext().isCopiedRoot(inputNode))     continue;
    final QueryExecutionContext executionContext=getExecutionContext(inputNode);
    if (executionContext != null) {
      TemplateExecutionEnvironmentImpl environment=new TemplateExecutionEnvironmentImpl(myTemplateProcessor,executionContext,new ReductionTrack(getBlockedReductionsData()));
      final DefaultTemplateContext templateContext=new DefaultTemplateContext(environment,inputNode,null);
      if (!executionContext.isApplicable(rule,templateContext)) {
        continue;
      }
      boolean copyRootOnFailure=false;
      if (inputNode.getModel() != null && inputNode.getParent() == null && !rule.keepSourceRoot()) {
        rootsConsumed.add(inputNode);
        copyRootOnFailure=true;
      }
      createRootNodeByRule(rule,inputNode,environment,copyRootOnFailure);
    }
  }
}
