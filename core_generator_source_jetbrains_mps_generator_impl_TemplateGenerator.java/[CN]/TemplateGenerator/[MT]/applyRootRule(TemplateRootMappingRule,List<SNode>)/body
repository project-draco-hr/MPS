{
  String applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    getLogger().error(rule.getRuleNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.applyToInheritors();
  Iterable<SNode> inputNodes=((jetbrains.mps.smodel.SModelInternal)myInputModel).getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode inputNode : inputNodes) {
    if (getGeneratorSessionContext().isCopiedRoot(inputNode))     continue;
    final QueryExecutionContext executionContext=getExecutionContext(inputNode);
    if (executionContext != null) {
      TemplateExecutionEnvironment environment=new TemplateExecutionEnvironmentImpl(myTemplateProcessor,executionContext);
      final DefaultTemplateContext templateContext=new DefaultTemplateContext(environment,inputNode,null);
      if (executionContext.isApplicable(rule,templateContext)) {
        myGenerationTracer.pushInputNode(GenerationTracerUtil.getSNodePointer(inputNode));
        myGenerationTracer.pushRule(rule.getRuleNode());
        try {
          boolean copyRootOnFailure=false;
          if (inputNode.getModel() != null && inputNode.getParent() == null && !rule.keepSourceRoot()) {
            rootsConsumed.add(inputNode);
            copyRootOnFailure=true;
          }
          createRootNodeByRule(rule,templateContext,copyRootOnFailure);
        }
  finally {
          myGenerationTracer.closeInputNode(GenerationTracerUtil.getSNodePointer(inputNode));
        }
      }
    }
  }
}
