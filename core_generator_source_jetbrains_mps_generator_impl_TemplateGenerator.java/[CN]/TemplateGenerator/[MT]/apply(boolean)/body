{
  checkMonitorCanceled();
  myAreMappingsReady=false;
  if (hasPostponedReference(myInputModel.getRootNodes())) {
    System.out.println("PostponedReference in the input!!!");
  }
  ttrace.push("weavings",false);
  myWeavingProcessor=new WeavingProcessor(this);
  myWeavingProcessor.prepareWeavingRules(getInputModel(),myRuleManager.getWeaving_MappingRules());
  ttrace.pop();
  ttrace.push("reductions",false);
  applyReductions(isPrimary);
  ttrace.pop();
  if (myDeltaBuilder != null) {
    myInplaceModelChange=true;
    if (myDeltaBuilder.hasChanges()) {
      myDeltaBuilder.applyInplace(getInputModel(),this);
    }
    myOutputRoots.clear();
    myDeltaBuilder=null;
  }
  myAreMappingsReady=true;
  myChanged|=myDependenciesBuilder.isStepRequired();
  if (!isPrimary && !myChanged && myDelayedChanges.isEmpty()&& !myRuleManager.hasWeavings()) {
    return false;
  }
  if (!myInplaceModelChange) {
    for (    SNode outputRoot : myOutputRoots) {
      myOutputModel.addRootNode(outputRoot);
    }
    ttrace.push("reloading roots from cache",false);
    myDependenciesBuilder.reloadRequired(getMappings());
    ttrace.pop();
  }
  ttrace.push("weavings",false);
  myWeavingProcessor.apply();
  myWeavingProcessor=null;
  ttrace.pop();
  if (!isPrimary && !myChanged && myDelayedChanges.isEmpty()) {
    return false;
  }
  ttrace.push("delayed mappings",false);
  myDelayedChanges.doAllChanges();
  ttrace.pop();
  if (myChanged || isPrimary) {
    ttrace.push("restoring references",false);
    revalidateAllReferences();
    ttrace.pop();
    checkMonitorCanceled();
    getBlockedReductionsData().advanceStep();
  }
  if (hasPostponedReference(getOutputModel().getRootNodes())) {
    System.out.println("PostponedReference in the output model!!!");
  }
  return myChanged;
}
