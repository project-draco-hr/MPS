{
  checkMonitorCanceled();
  final IPerformanceTracer ttrace=getGeneratorSessionContext().getPerformanceTracer();
  myAreMappingsReady=false;
  ttrace.push("weavings",false);
  myWeavingProcessor=new WeavingProcessor(this);
  myWeavingProcessor.prepareWeavingRules(getInputModel(),myRuleManager.getWeaving_MappingRules());
  ttrace.pop();
  ttrace.push("reductions",false);
  applyReductions(isPrimary);
  ttrace.pop();
  myInplaceModelChange=myDeltaBuilder != null;
  myAreMappingsReady=true;
  myChanged|=myDependenciesBuilder.isStepRequired();
  if (myDeltaBuilder == null) {
    for (    SNode outputRoot : myOutputRoots) {
      myOutputModel.addRootNode(outputRoot);
    }
    ttrace.push("reloading roots from cache",false);
    myDependenciesBuilder.reloadRequired(getMappings());
    ttrace.pop();
  }
  if (myWeavingProcessor.hasWeavingRulesToApply()) {
    checkMonitorCanceled();
    ttrace.push("weavings",false);
    myWeavingProcessor.apply();
    myWeavingProcessor=null;
    ttrace.pop();
  }
  if (!myDelayedChanges.isEmpty()) {
    checkMonitorCanceled();
    ttrace.push("delayed mappings",false);
    myDelayedChanges.doAllChanges(this);
    ttrace.pop();
  }
  if (myDeltaBuilder != null) {
    ttrace.push("apply delta changes",false);
    if (myDeltaBuilder.hasChanges()) {
      myDeltaBuilder.prepareReferences(getInputModel(),this);
      myDeltaBuilder.applyInplace(getInputModel());
    }
    myOutputRoots.clear();
    myDeltaBuilder=null;
    ttrace.pop();
  }
  if (!myPostponedRefs.isEmpty()) {
    ttrace.push("restoring references",false);
    myPostponedRefs.prepare();
    myPostponedRefs.replace();
    ttrace.pop();
  }
  if (myChanged || isPrimary) {
    getBlockedReductionsData().advanceStep();
    checkMonitorCanceled();
  }
  return myChanged;
}
