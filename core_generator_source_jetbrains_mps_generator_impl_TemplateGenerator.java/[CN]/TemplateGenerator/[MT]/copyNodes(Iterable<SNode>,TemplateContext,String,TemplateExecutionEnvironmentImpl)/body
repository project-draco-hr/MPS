{
  final Iterator<SNode> it=inputNodes.iterator();
  if (!it.hasNext()) {
    return Collections.emptyList();
  }
  ArrayList<SNode> outputNodes=new ArrayList<SNode>();
  while (it.hasNext()) {
    SNode newInputNode=it.next();
    trackIfForeign(newInputNode);
    if (myDeltaBuilder != null) {
      myDeltaBuilder.enterNestedCopySrc(newInputNode);
    }
    try {
      final String mappingName=outerContext.getInputName();
      Collection<SNode> _outputNodes=env.tryToReduce(newInputNode);
      if (_outputNodes != null) {
        if (mappingName != null && _outputNodes.size() == 1) {
          registerMappingLabel(newInputNode,mappingName,_outputNodes.iterator().next());
        }
        outputNodes.addAll(_outputNodes);
      }
 else {
        FullCopyFacility copyFacility=new FullCopyFacility(env,new HashSet<SNode>(getForeignNodes()));
        SNode copiedNode=copyFacility.copyInputNode(newInputNode);
        addOutputNodeByInputAndTemplateNode(newInputNode,templateId,copiedNode);
        if (mappingName != null) {
          registerMappingLabel(newInputNode,mappingName,copiedNode);
        }
        outputNodes.add(copiedNode);
      }
    }
  finally {
      if (myDeltaBuilder != null) {
        myDeltaBuilder.leaveNestedCopySrc(newInputNode);
      }
    }
  }
  return outputNodes;
}
