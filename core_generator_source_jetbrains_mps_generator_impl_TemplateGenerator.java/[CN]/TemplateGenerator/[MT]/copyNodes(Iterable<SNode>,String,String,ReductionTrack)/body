{
  final Iterator<SNode> it=inputNodes.iterator();
  if (!it.hasNext()) {
    return Collections.emptyList();
  }
  ArrayList<SNode> outputNodes=new ArrayList<SNode>();
  while (it.hasNext()) {
    SNode newInputNode=adoptIfForeign(it.next());
    if (myDeltaBuilder != null) {
      myDeltaBuilder.enterNestedCopySrc(newInputNode);
    }
    final SNodeReference newNodePtr=GenerationTracerUtil.getSNodePointer(newInputNode);
    myGenerationTracer.pushInputNode(newNodePtr);
    try {
      Collection<SNode> _outputNodes=tryToReduce(newInputNode,rtrack);
      if (_outputNodes != null) {
        if (mappingName != null && _outputNodes.size() == 1) {
          registerMappingLabel(newInputNode,mappingName,_outputNodes.iterator().next());
        }
        outputNodes.addAll(_outputNodes);
      }
 else {
        FullCopyFacility copyFacility=new FullCopyFacility(this,rtrack,new HashSet<SNode>(myAdditionalInputNodes.keySet()));
        SNode copiedNode=copyFacility.copyInputNode(newInputNode);
        addOutputNodeByInputAndTemplateNode(newInputNode,templateId,copiedNode);
        if (mappingName != null) {
          registerMappingLabel(newInputNode,mappingName,copiedNode);
        }
        outputNodes.add(copiedNode);
      }
    }
  finally {
      myGenerationTracer.closeInputNode(newNodePtr);
      if (myDeltaBuilder != null) {
        myDeltaBuilder.leaveNestedCopySrc(newInputNode);
      }
    }
  }
  return outputNodes;
}
