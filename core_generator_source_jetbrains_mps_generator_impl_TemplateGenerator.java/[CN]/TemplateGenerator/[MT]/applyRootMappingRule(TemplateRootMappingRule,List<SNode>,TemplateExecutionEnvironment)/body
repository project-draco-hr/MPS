{
  String applicableConcept=rule1.getApplicableConcept();
  if (applicableConcept == null) {
    showErrorMessage(null,null,rule1.getRuleNode().getNode(),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule1.applyToInheritors();
  Iterable<SNode> inputNodes=myInputModel.getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode inputNode : inputNodes) {
    if (getGeneratorSessionContext().isCopiedRoot(inputNode))     continue;
    final QueryExecutionContext executionContext=getExecutionContext(inputNode);
    Root_MappingRule rule=((TemplateRootMappingRuleInterpreted)rule1).getNode();
    if (executionContext != null && executionContext.checkCondition(rule.getConditionFunction(),false,inputNode,rule.getNode())) {
      myGenerationTracer.pushInputNode(inputNode);
      myGenerationTracer.pushRule(rule1.getRuleNode());
      try {
        SNode templateNode=BaseAdapter.fromAdapter(rule.getTemplate());
        if (templateNode != null) {
          boolean copyRootOnFailure=false;
          if (inputNode.isRoot() && !rule1.keepSourceRoot()) {
            rootsToCopy.remove(inputNode);
            copyRootOnFailure=true;
          }
          createRootNodeFromTemplate(GeneratorUtil.getMappingName(rule,null),templateNode,inputNode,copyRootOnFailure,executionContext);
        }
 else {
          myLogger.error(BaseAdapter.fromAdapter(rule),"no template is defined for the rule");
        }
      }
  finally {
        myGenerationTracer.closeInputNode(inputNode);
      }
    }
  }
}
