{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("action",new BaseReferenceConstraintsDescriptor("action",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> ownActions=SModelOperations.getRoots(SNodeOperations.getModel(_context.getEnclosingNode()),"jetbrains.mps.lang.plugin.structure.ActionDeclaration");
          List<SNode> abstractImported=ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getEnclosingNode()),GlobalScope.getInstance(),"jetbrains.mps.lang.plugin.structure.ActionDeclaration")).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return ListSequence.fromList(SLinkOperations.getTargets(it,"constructionParameter",true)).isNotEmpty();
            }
          }
).toListSequence();
          return ListSequence.fromList(ownActions).union(ListSequence.fromList(abstractImported));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_m7euep_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
