{
  Iterable<AbstractInstaller> installers=Arrays.asList(new GitGlobalInstaller(project),new GitRepositoriesInstaller(project),new SvnInstaller(project,false),new SvnInstaller(project,true));
  if (!(allVcses)) {
    final List<VcsDirectoryMapping> directoryMappings=ProjectLevelVcsManager.getInstance(project).getDirectoryMappings();
    installers=Sequence.fromIterable(installers).where(new IWhereFilter<AbstractInstaller>(){
      public boolean accept(      final AbstractInstaller i){
        return ListSequence.fromList(directoryMappings).any(new IWhereFilter<VcsDirectoryMapping>(){
          public boolean accept(          VcsDirectoryMapping dm){
            return dm.getVcs().equals(i.getAffectedVcsName());
          }
        }
);
      }
    }
);
  }
  if (Sequence.fromIterable(installers).any(new IWhereFilter<AbstractInstaller>(){
    public boolean accept(    AbstractInstaller i){
      return i.getCurrentState() == AbstractInstaller.State.NOT_INSTALLED;
    }
  }
)) {
    return AbstractInstaller.State.NOT_INSTALLED;
  }
 else   if (Sequence.fromIterable(installers).any(new IWhereFilter<AbstractInstaller>(){
    public boolean accept(    AbstractInstaller i){
      return i.getCurrentState() == AbstractInstaller.State.OUTDATED;
    }
  }
)) {
    return AbstractInstaller.State.OUTDATED;
  }
 else {
    return AbstractInstaller.State.INSTALLED;
  }
}
