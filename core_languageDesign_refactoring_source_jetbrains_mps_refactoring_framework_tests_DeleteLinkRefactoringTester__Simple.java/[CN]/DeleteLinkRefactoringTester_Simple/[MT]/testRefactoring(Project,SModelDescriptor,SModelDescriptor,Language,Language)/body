{
  System.err.println("preparing arguments for refactoring");
  SafeDeleteLink safeDeleteLink=new SafeDeleteLink();
  final RefactoringContext refactoringContext=new RefactoringContext(OldRefactoringAdapter.createAdapterFor(safeDeleteLink));
  refactoringContext.setCurrentOperationContext(ProjectOperationContext.get(project));
  final String[] linkName=new String[]{null};
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModelDescriptor structureModelDescriptor=testRefactoringLanguage.getStructureModelDescriptor();
      SNode node=structureModelDescriptor.getSModel().getRootByName("MyVeryGoodConcept1");
      ConceptDeclaration concept=(ConceptDeclaration)BaseAdapter.fromNode(node);
      SNode link=concept.getLinkDeclarations().get(0).getNode();
      linkName[0]=link.getProperty("role");
      refactoringContext.setSelectedProject(project);
      refactoringContext.setSelectedNode(link);
      refactoringContext.setSelectedModel(structureModelDescriptor);
    }
  }
);
  System.err.println("executing a refactoring");
  new RefactoringTestFacade().doExecuteInTest(refactoringContext);
  final boolean[] result=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          try {
            System.err.println("checking a model");
            if (sandbox1.getLoadingState() != ModelLoadingState.NOT_LOADED) {
              System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
              result[0]=false;
              return;
            }
            SModel sModel=sandbox1.getSModel();
            SNode root=sModel.getRoots().get(0);
            SReference reference=root.getReference(linkName[0]);
            result[0]=(reference == null);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            result[0]=false;
            return;
          }
        }
      }
);
    }
  }
);
  return result[0];
}
