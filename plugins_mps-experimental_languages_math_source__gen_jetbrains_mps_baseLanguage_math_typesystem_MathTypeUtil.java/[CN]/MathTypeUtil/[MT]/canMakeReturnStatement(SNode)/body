{
  SNode returnType=null;
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.StatementList")) {
      SNode statementList=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.StatementList");
      SNode parent=SNodeOperations.getParent(statementList);
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(statementList),"jetbrains.mps.baseLanguage.structure.BlockStatement")) {
        SNode blockStatement=SNodeOperations.cast(SNodeOperations.getParent(statementList),"jetbrains.mps.baseLanguage.structure.BlockStatement");
        parent=SNodeOperations.getParent(blockStatement);
        if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.StatementList")) {
          SNode bsStatementList=SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.StatementList");
          List<SNode> statements=SLinkOperations.getTargets(bsStatementList,"statement",true);
          if (ListSequence.fromList(statements).last() == blockStatement) {
            parent=SNodeOperations.getParent(bsStatementList);
          }
        }
      }
      if (!(SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.Statement")) && !(SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) && !(SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.CatchClause"))&& !(SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.SwitchCase"))) {
        if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
          returnType=SLinkOperations.getTarget(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"returnType",true);
        }
 else         if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
          returnType=SNodeOperations.cast(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.ConceptFunction"),"virtual_getExpectedReturnType_1213877374441",new Object[]{}),"jetbrains.mps.baseLanguage.structure.Type");
        }
      }
    }
  }
  return returnType;
}
