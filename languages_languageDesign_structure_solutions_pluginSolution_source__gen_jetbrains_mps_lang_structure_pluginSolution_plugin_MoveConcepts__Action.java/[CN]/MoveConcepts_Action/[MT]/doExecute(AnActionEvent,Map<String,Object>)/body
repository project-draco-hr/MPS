{
  try {
    if (!(MoveConcepts_Action.this.init(_params))) {
      return;
    }
    final SModelReference targetModel;
    List<SModelReference> myModels;
    myModels=ListSequence.fromList(((List<SModelDescriptor>)(SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModelDescriptor,SModelReference>(){
      public SModelReference select(      SModelDescriptor it){
        return it.getSModelReference();
      }
    }
).where(new IWhereFilter<org.jetbrains.mps.openapi.model.SModelReference>(){
      public boolean accept(      org.jetbrains.mps.openapi.model.SModelReference it){
        return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
      }
    }
).toListSequence();
    targetModel=SModelReferenceDialog.getSelectedModel(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),myModels);
    if (targetModel == null) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      public void run(){
        for (        SNode node : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target")))) {
          if (!(jetbrains.mps.util.SNodeOperations.isRegistered(((SNode)node))) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)node))) {
            return;
          }
        }
        if (!(SModelRepository.getInstance().getModelDescriptor(targetModel).isRegistered())) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.structure.refactorings.MoveConcepts",Arrays.asList("targetModel"),Arrays.asList(targetModel),((List<SNode>)MapSequence.fromMap(_params).get("target")),((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "MoveConcepts",t);
    }
  }
}
