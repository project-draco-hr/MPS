{
  SNode rule=SNodeOperations.getAncestor(((SNode)_context.getNode().getReferent("leaf")),"jetbrains.mps.lang.typesystem.structure.InferenceRule",false,false);
  SNode conceptDeclaration;
  if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference")) {
    SNode conceptReference=SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference");
    conceptDeclaration=SLinkOperations.getTarget(conceptReference,"concept",false);
  }
 else {
    SNode patternCondition=SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.PatternCondition");
    conceptDeclaration=SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SLinkOperations.getTarget(patternCondition,"pattern",true),"patternNode",true));
  }
  return SNodeOperations.getModel(conceptDeclaration).toString() + "." + SPropertyOperations.getString(conceptDeclaration,"name");
}
