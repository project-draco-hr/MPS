{
  DependenciesCollector dependenciesCollector=new DependenciesCollector();
  Map<SNode,Pair<SNode,SNode>> dependencies=MapSequence.fromMap(new HashMap<SNode,Pair<SNode,SNode>>());
  Set<SNode> leaves=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode inferenceRule : SModelOperations.getRoots(_context.getInputModel(),"jetbrains.mps.lang.typesystem.structure.InferenceRule")) {
    dependenciesCollector.collectDependencies(inferenceRule,dependencies,leaves);
  }
  List<SNode> result=new ArrayList<SNode>();
  SModel targetModel=_context.getOutputModel();
  for (  SNode leaf : leaves) {
    SNode composite=SModelOperations.createNewNode(targetModel,"jetbrains.mps.lang.core.structure.BaseConcept",null);
    composite.setReferent("leaf",leaf);
    SNode current=leaf;
    while (MapSequence.fromMap(dependencies).get(current) != null) {
      Pair<SNode,SNode> pair=MapSequence.fromMap(dependencies).get(current);
      current=pair.o1;
      SNode method=pair.o2;
      composite.addChild("method",method);
    }
    ListSequence.fromList(result).addElement(composite);
  }
  return result;
}
