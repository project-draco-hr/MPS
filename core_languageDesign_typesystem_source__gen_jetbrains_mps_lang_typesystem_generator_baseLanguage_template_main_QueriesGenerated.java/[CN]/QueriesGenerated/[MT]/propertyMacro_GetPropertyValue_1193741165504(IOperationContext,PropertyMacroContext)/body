{
  SNode conceptDeclaration;
  if ((SLinkOperations.getTarget(_context.getNode(),"sourceConcept",false) != null)) {
    conceptDeclaration=SLinkOperations.getTarget(_context.getNode(),"sourceConcept",false);
  }
 else {
    SNode rule=SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()),"jetbrains.mps.lang.typesystem.structure.InferenceRule");
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference")) {
      SNode conceptReference=SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference");
      conceptDeclaration=SLinkOperations.getTarget(conceptReference,"concept",false);
    }
 else {
      SNode patternCondition=SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.PatternCondition");
      conceptDeclaration=SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SLinkOperations.getTarget(patternCondition,"pattern",true),"patternNode",true));
    }
  }
  return SNodeOperations.getModel(conceptDeclaration).getSModelFqName() + "." + SPropertyOperations.getString(conceptDeclaration,"name");
}
