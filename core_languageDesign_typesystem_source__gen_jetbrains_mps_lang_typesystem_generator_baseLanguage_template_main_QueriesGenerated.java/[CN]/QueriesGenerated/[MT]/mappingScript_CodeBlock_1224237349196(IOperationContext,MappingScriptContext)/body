{
  for (  SNode instanceMethodCall : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
    SNode baseMethodDeclaration=SNodeOperations.getAncestor(instanceMethodCall,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
    SNode oldBMD=null;
    while (baseMethodDeclaration != null) {
      oldBMD=baseMethodDeclaration;
      baseMethodDeclaration=SNodeOperations.getAncestor(oldBMD,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
    }
    baseMethodDeclaration=oldBMD;
    if ((baseMethodDeclaration != null)) {
      SNode instanceMethodDeclaration=SLinkOperations.getTarget(instanceMethodCall,"baseMethodDeclaration",false);
      if (!(SPropertyOperations.getString(instanceMethodDeclaration,"name").equals("coerce_"))) {
        continue;
      }
      SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(instanceMethodCall),"jetbrains.mps.baseLanguage.structure.DotExpression");
      do {
        SNode matchedNode_8=SLinkOperations.getTarget(dotExpression,"operand",true);
{
          boolean matches_9=false;
          _Patterns.Pattern_3 matchingPattern=new _Patterns.Pattern_3();
          matches_9=matchingPattern.match(matchedNode_8);
          if (matches_9) {
            break;
          }
        }
        continue;
      }
 while (false);
      parametersLoop:       for (      SNode parameterDeclaration : SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true)) {
        SNode lastParameterType=SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(instanceMethodDeclaration,"parameter",true)).last(),"type",true);
        if (SPropertyOperations.getString(parameterDeclaration,"name").equals("typeCheckingContext") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(parameterDeclaration,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(parameterDeclaration,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SLinkOperations.getTarget(new _Quotations.QuotationClass_35().createNode(),"classifier",false)) {
          boolean alreadyProcessed=SNodeOperations.isInstanceOf(lastParameterType,"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(lastParameterType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SLinkOperations.getTarget(new _Quotations.QuotationClass_33().createNode(),"classifier",false);
          if (!(alreadyProcessed)) {
            SLinkOperations.addChild(instanceMethodCall,"actualArgument",new _Quotations.QuotationClass_34().createNode());
          }
          break parametersLoop;
        }
      }
    }
  }
}
