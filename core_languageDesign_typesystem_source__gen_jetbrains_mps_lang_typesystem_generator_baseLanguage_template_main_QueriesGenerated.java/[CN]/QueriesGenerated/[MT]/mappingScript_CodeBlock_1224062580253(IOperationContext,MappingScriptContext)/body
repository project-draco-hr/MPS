{
  for (  SNode instanceMethodCall : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
    SNode baseMethodDeclaration=SNodeOperations.getAncestor(instanceMethodCall,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
    SNode oldBMD=null;
    while (baseMethodDeclaration != null) {
      oldBMD=baseMethodDeclaration;
      baseMethodDeclaration=SNodeOperations.getAncestor(oldBMD,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
    }
    baseMethodDeclaration=oldBMD;
    if ((baseMethodDeclaration != null)) {
      SNode instanceMethodDeclaration=SLinkOperations.getTarget(instanceMethodCall,"baseMethodDeclaration",false);
      if (!(SPropertyOperations.getString(instanceMethodDeclaration,"name").equals("createNode"))) {
        continue;
      }
      SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(instanceMethodCall),"jetbrains.mps.baseLanguage.structure.DotExpression");
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.GenericNewExpression"))) {
        continue;
      }
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.GenericNewExpression"),"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"))) {
        continue;
      }
      SNode classConcept=SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operand",true),"jetbrains.mps.baseLanguage.structure.GenericNewExpression"),"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept");
      if (!(SPropertyOperations.getString(classConcept,"name").startsWith("QuotationClass_"))) {
        continue;
      }
      parametersLoop:       for (      SNode parameterDeclaration : SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true)) {
        if (SPropertyOperations.getString(parameterDeclaration,"name").equals("typeCheckingContext") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(parameterDeclaration,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(parameterDeclaration,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_8087_23().createNode(),"classifier",false)) {
          SNode lastParameterType=SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(instanceMethodDeclaration,"parameter",true)).last(),"type",true);
          boolean alreadyProcessed=SNodeOperations.isInstanceOf(lastParameterType,"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(lastParameterType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_8087_22().createNode(),"classifier",false);
          if (!(alreadyProcessed)) {
            ListSequence.fromList(SLinkOperations.getTargets(instanceMethodCall,"actualArgument",true)).addElement(new QueriesGenerated.QuotationClass_8087_30().createNode());
            ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(instanceMethodDeclaration),"jetbrains.mps.baseLanguage.structure.ClassConcept"),"method",true)).addElement(SNodeOperations.copyNode(instanceMethodDeclaration));
            ListSequence.fromList(SLinkOperations.getTargets(instanceMethodDeclaration,"parameter",true)).addElement(new QueriesGenerated.QuotationClass_8087_31().createNode());
            for (            SNode mc : SNodeOperations.getDescendants(instanceMethodDeclaration,"jetbrains.mps.baseLanguage.structure.IMethodCall",false,new String[]{})) {
              do {
                SNode matchedNode_7=mc;
{
                  boolean matches_8=false;
                  GeneratedMatchingPattern matchingPattern=new QueriesGenerated.Pattern_8087_2();
                  matches_8=matchingPattern.match(matchedNode_7);
                  if (matches_8) {
                    ListSequence.fromList(SLinkOperations.getTargets(matchedNode_7,"actualArgument",true)).addElement(new QueriesGenerated.QuotationClass_8087_32().createNode());
                    break;
                  }
                }
              }
 while (false);
            }
          }
          break parametersLoop;
        }
      }
    }
  }
}
