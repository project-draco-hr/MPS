{
  for (  SNode methodCall : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.IMethodCall")) {
    SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getTargets(baseMethodDeclaration,"annotation",true);
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,"annotation",false);
      if (annotation == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a1a3a0a574_0().createNode(),"classifier",false) || annotation == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a1a3a0a574().createNode(),"classifier",false)) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)).insertElement(0,new QueriesGenerated.QuotationClass_x583g4_a1a0a0e0a0hs().createNode());
    }
  }
  for (  SNode baseMethodDeclaration : SModelOperations.getNodes(_context.getModel(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
    boolean toProcess=false;
    List<SNode> annotationInstances=SLinkOperations.getTargets(baseMethodDeclaration,"annotation",true);
    for (    SNode annotationInstance : annotationInstances) {
      SNode annotation=SLinkOperations.getTarget(annotationInstance,"annotation",false);
      if (annotation == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a1a2a1a574_0().createNode(),"classifier",false) || annotation == SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a1a2a1a574().createNode(),"classifier",false)) {
        toProcess=true;
        break;
      }
    }
    if (toProcess) {
      ListSequence.fromList(SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true)).insertElement(0,new QueriesGenerated.QuotationClass_x583g4_a1a0a0d0b0hs().createNode());
    }
  }
}
