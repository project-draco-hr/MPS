{
  Map<String,SNode> generatedNameToConceptMethodDeclaration=MapSequence.fromMap(new HashMap<String,SNode>());
  List<SNode> methods=ConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386338(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(),"concept",false),"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
  SNode extendsNode=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(),"concept",false),"jetbrains.mps.lang.structure.structure.ConceptDeclaration"),"extends",false);
  extendsNode=((extendsNode != null) ? extendsNode : SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626"));
  if (extendsNode != SLinkOperations.getTarget(_context.getNode(),"concept",false)) {
    ListSequence.fromList(methods).removeSequence(ListSequence.fromList(ConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386338(extendsNode)));
  }
  for (  SNode method : methods) {
    if (!(MapSequence.fromMap(generatedNameToConceptMethodDeclaration).containsKey(BehaviorMethodNames.getDeclarationName(method)))) {
      MapSequence.fromMap(generatedNameToConceptMethodDeclaration).put(BehaviorMethodNames.getDeclarationName(method),method);
    }
  }
  for (  SNode behavior : SModelOperations.getNodes(_context.getInputModel(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior")) {
    if (SLinkOperations.getTarget(behavior,"concept",false) == SLinkOperations.getTarget(_context.getNode(),"concept",false)) {
      for (      SNode method : SLinkOperations.getTargets(behavior,"method",true)) {
        if (MapSequence.fromMap(generatedNameToConceptMethodDeclaration).containsKey(BehaviorMethodNames.getDeclarationName(method))) {
          MapSequence.fromMap(generatedNameToConceptMethodDeclaration).put(BehaviorMethodNames.getDeclarationName(method),method);
        }
      }
    }
  }
  return Sequence.fromIterable(MapSequence.fromMap(generatedNameToConceptMethodDeclaration).values()).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,"isAbstract")) && BehaviorMethodNames.getDeclarationName(it).startsWith("virtual");
    }
  }
).sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return BehaviorMethodNames.getDeclarationName(it);
    }
  }
,true);
}
