{
  return new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
    @Override public void handle(    View view,    MouseEvent event){
      if (!(diagramCell.hasConnectionDragFeedback())) {
        View sourceView=view.viewAt(event.location());
        if (sourceView == null || !(check_y3ke3n_a0a1a0a0a0b0a0a0a01(sourceView.prop(JetpadUtils.CONNECTION_SOURCE).get()))) {
          return;
        }
        diagramCell.showConnectionDragFeedback(sourceView);
      }
      diagramCell.updateConnectionDragFeedback(event.location());
    }
  }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
    @Override public void handle(    View view,    MouseEvent event){
      if (!(diagramCell.hasConnectionDragFeedback())) {
        return;
      }
      diagramCell.hideConnectionDragFeedback();
      final boolean[] result=new boolean[]{false};
      myEditorContext.getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          result[0]=mySubstituteAction.canSubstitute("");
          DiagramCell.ConnectionInfo connectionInfo=diagramCell.getConnectionInfo();
          result[0]&=(connectionInfo.isValid() && myCanCreateConnectorCallback.invoke(connectionInfo.getFromNode(),connectionInfo.getFromId(),connectionInfo.getToNode(),connectionInfo.getToId()));
        }
      }
);
      if (!(result[0])) {
        return;
      }
      ModelAccess.instance().executeCommand(new Runnable(){
        public void run(){
          SNode result=mySubstituteAction.substitute(myEditorContext,"");
          DiagramCell.ConnectionInfo connectionInfo=diagramCell.getConnectionInfo();
          mySetConnectorCallBack.invoke(result,connectionInfo.getFromNode(),connectionInfo.getFromId(),connectionInfo.getToNode(),connectionInfo.getToId());
        }
      }
,myEditorContext.getOperationContext().getProject());
      event.consume();
    }
  }
).build();
}
