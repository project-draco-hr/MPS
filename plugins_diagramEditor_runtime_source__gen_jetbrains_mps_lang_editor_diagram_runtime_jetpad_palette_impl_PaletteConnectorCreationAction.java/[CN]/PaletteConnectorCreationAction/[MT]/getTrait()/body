{
  if (myTrait == null) {
    myTrait=new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
      @Override public void handle(      View view,      MouseEvent event){
        if (!(myDiagramCell.hasConnectionDragFeedback())) {
          View sourceView=view.viewAt(event.location());
          if (sourceView == null || !(check_y3ke3n_a0a1a0a0a0b0a0a0a0a0h(sourceView.prop(JetpadUtils.CONNECTION_SOURCE).get()))) {
            return;
          }
          myDiagramCell.showConnectionDragFeedback(sourceView);
        }
        myDiagramCell.updateConnectionDragFeedback(event.location());
      }
    }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
      @Override public void handle(      View view,      MouseEvent event){
        if (!(myDiagramCell.hasConnectionDragFeedback())) {
          return;
        }
        myDiagramCell.hideConnectionDragFeedback();
        final boolean[] result=new boolean[]{false};
        myEditorContext.getRepository().getModelAccess().runReadAction(new Runnable(){
          public void run(){
            result[0]=mySubstituteAction.canSubstitute("");
          }
        }
);
        if (!(result[0])) {
          return;
        }
        ModelAccess.instance().executeCommand(new Runnable(){
          public void run(){
            mySubstituteAction.substitute(myEditorContext,"");
          }
        }
,myEditorContext.getOperationContext().getProject());
        event.consume();
      }
    }
).build();
  }
  return myTrait;
}
