{
  mySettings=settings;
  JPanel panel=new JPanel(new GridLayoutManager(4,1,new JBInsets(5,5,5,5),10,10));
  ButtonGroup group=new ButtonGroup();
  JPanel editorTabsRB=new JPanel(new GridLayout(4,1));
  editorTabsRB.setBorder(IdeBorderFactory.createTitledBorder("Aspect Tabs",true));
  myDontShow=new JBRadioButton("Do not show tabs");
  editorTabsRB.add(myDontShow);
  group.add(myDontShow);
  myTabPerAspect=new JBRadioButton("Show 1 tab for each aspect");
  editorTabsRB.add(myTabPerAspect);
  group.add(myTabPerAspect);
  myTabPerNode=new JBRadioButton("Each aspect node in a separate tab");
  editorTabsRB.add(myTabPerNode);
  group.add(myTabPerNode);
  myAllTabs=new JBRadioButton("Each aspect node in a separate tab, tabs for non-existing aspects");
  editorTabsRB.add(myAllTabs);
  group.add(myAllTabs);
  myFirstSelection=myTabPerAspect;
  myFirstSelection.setSelected(true);
  panel.add(editorTabsRB,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  JPanel fontPropertiesPanel=new JPanel(new GridLayoutManager(5,2,JBInsets.NONE,2,2));
  fontPropertiesPanel.add(new JBLabel("Font Name : "),getLabelConstraint(0,0));
  myFontsComboBox=new JComboBox(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames());
  fontPropertiesPanel.add(myFontsComboBox,getEditorConstraint(0,1));
  fontPropertiesPanel.add(new JLabel("Font Size : "),getLabelConstraint(1,0));
  List<String> fontSizes=new ArrayList<String>(50);
  for (int i=1; i <= 50; i++)   fontSizes.add(String.valueOf(i));
  myFontSizesComboBox=new JComboBox(fontSizes.toArray());
  fontPropertiesPanel.add(myFontSizesComboBox,getEditorConstraint(1,1));
  fontPropertiesPanel.add(new JLabel("Line Spacing : "),getLabelConstraint(2,0));
  myLineSpacingField=new JTextField();
  fontPropertiesPanel.add(myLineSpacingField,getEditorConstraint(2,1));
  fontPropertiesPanel.add(new JLabel("Text Width : "),getLabelConstraint(3,0));
  List<String> textWidthValues=new ArrayList<String>(13);
  for (int i=60; i <= 300; i+=20)   textWidthValues.add(String.valueOf(i));
  myVerticalBoundComboBox=new JComboBox(textWidthValues.toArray());
  fontPropertiesPanel.add(myVerticalBoundComboBox,getEditorConstraint(3,1));
  fontPropertiesPanel.add(new JLabel("Indent Size : "),getLabelConstraint(4,0));
  List<String> indents=new ArrayList<String>(5);
  for (int i=2; i <= 10; i+=2)   indents.add(String.valueOf(i));
  myIndentSizeComboBox=new JComboBox(indents.toArray());
  fontPropertiesPanel.add(myIndentSizeComboBox,getEditorConstraint(4,1));
  panel.add(fontPropertiesPanel,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  JPanel checkboxes=new JPanel(new GridLayout(3,1));
  myUseBraces=new JCheckBox("Use Braces");
  checkboxes.add(myUseBraces);
  myAntialiasingCheckBox=new JCheckBox("Use Antialiasing");
  checkboxes.add(myAntialiasingCheckBox);
  myPowerSaveModeCheckBox=new JCheckBox("Power Save Mode");
  checkboxes.add(myPowerSaveModeCheckBox);
  myAutoQuickFixCheckBox=new JCheckBox("Automatically run reference resolve quick fixes");
  checkboxes.add(myAutoQuickFixCheckBox);
  panel.add(checkboxes,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  JPanel colorSettingsPanel=new JPanel();
  Border border=BorderFactory.createEmptyBorder(5,5,0,0);
  colorSettingsPanel.setBorder(border);
  colorSettingsPanel.setLayout(new BoxLayout(colorSettingsPanel,BoxLayout.Y_AXIS));
  colorSettingsPanel.add(new JLabel(" "));
  colorSettingsPanel.add(new JLabel("Caret Blinking Rate : "));
  myBlinkingRateSlider=new JSlider(1,10,5);
  colorSettingsPanel.add(myBlinkingRateSlider);
  myBlinkingDemo=createBlinkingDemo();
  colorSettingsPanel.add(myBlinkingDemo);
  for (  Component c : colorSettingsPanel.getComponents()) {
    if (c instanceof JComponent) {
      ((JComponent)c).setAlignmentX(Component.LEFT_ALIGNMENT);
    }
  }
  MouseAdapter adapter=new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      myBlinkingDemo.getSelectionManager().clearSelection();
    }
  }
;
  panel.addMouseListener(adapter);
  panel.add(colorSettingsPanel,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  myBlinkingDemo.setBackground(fontPropertiesPanel.getBackground());
  for (  Component c : panel.getComponents()) {
    if (c instanceof JComponent) {
      ((JComponent)c).setAlignmentX(Component.LEFT_ALIGNMENT);
    }
  }
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myBlinkingDemo.repaint();
      EditorCell rootCell=myBlinkingDemo.getRootCell();
      if (rootCell != null) {
        rootCell.switchCaretVisible();
        myTimer.setDelay(getBlinkingPeriod());
      }
    }
  }
;
  myTimer=new Timer(CaretBlinker.getInstance().getCaretBlinkingRateTimeMillis(),listener);
  myEditorSettingsPanel=new JPanel(new BorderLayout());
  myEditorSettingsPanel.add(panel,BorderLayout.NORTH);
  myEditorSettingsPanel.addMouseListener(adapter);
  myTimer.start();
  validate();
}
