{
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      if (classFqName == null || methodName == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      SNode cls=findClassByName(classFqName);
      if (cls == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a class " + classFqName);
        return;
      }
      Iterable<SNode> allMethods=(Iterable<SNode>)ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getChildren(cls)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
        }
      }
);
      SNode method=Sequence.fromIterable(allMethods).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return methodName.equals(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))) && ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))).count() == parameterCount;
        }
      }
);
      if (method == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      FrameUtil.activateFrame(getMainFrame());
      IResultProvider provider=FindUtils.makeProvider(FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.ConstructorUsages_Finder"),FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder"));
      findUsages(method,GlobalScope.getInstance(),provider);
    }
  }
);
}
