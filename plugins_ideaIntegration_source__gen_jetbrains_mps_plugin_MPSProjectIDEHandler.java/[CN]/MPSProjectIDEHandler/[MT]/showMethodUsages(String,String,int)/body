{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (classFqName == null || methodName == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      SNode cls=SNodeOperations.as(SModelUtil.findNodeByFQName(classFqName,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),GlobalScope.getInstance()),"jetbrains.mps.baseLanguage.structure.Classifier");
      if (cls == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a class " + classFqName);
        return;
      }
      Iterable<SNode> allMethods=(Iterable<SNode>)ListSequence.fromList(SNodeOperations.getChildren(cls)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
        }
      }
);
      SNode method=Sequence.fromIterable(allMethods).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return methodName.equals(SPropertyOperations.getString(it,"name")) && ListSequence.fromList(SLinkOperations.getTargets(it,"parameter",true)).count() == parameterCount;
        }
      }
);
      if (method == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      FrameUtil.activateFrame(getMainFrame());
      IResultProvider provider=FindUtils.makeProvider(FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.ConstructorUsages_Finder"),FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder"));
      findUsages(method,GlobalScope.getInstance(),provider);
    }
  }
);
}
