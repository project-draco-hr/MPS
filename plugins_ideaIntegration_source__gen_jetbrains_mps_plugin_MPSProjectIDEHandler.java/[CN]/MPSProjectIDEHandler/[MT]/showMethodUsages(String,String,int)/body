{
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      if (classFqName == null || methodName == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      SNode cls=findClassByName(classFqName);
      if (cls == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a class " + classFqName);
        return;
      }
      Iterable<SNode> allMethods=(Iterable<SNode>)ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getChildren(cls)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
        }
      }
);
      SNode method=Sequence.fromIterable(allMethods).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return methodName.equals(SPropertyOperations.getString(it,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"))) && ListSequence.fromList(SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"))).count() == parameterCount;
        }
      }
);
      if (method == null) {
        MPSProjectIDEHandler.LOG.error("Can't find a method " + classFqName + "."+ methodName);
        return;
      }
      FrameUtil.activateFrame(getMainFrame());
      IResultProvider provider=FindUtils.makeProvider(FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.ConstructorUsages_Finder"),FindUtils.getFinderByClassName("jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder"));
      findUsages(method,GlobalScope.getInstance(),provider);
    }
  }
);
}
