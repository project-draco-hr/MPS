{
  if (term == null) {
    return;
  }
  Set<SubtypingRule_Runtime> subtypingRule_runtimes=myTypeChecker.getRulesManager().getSubtypingRules(term,isWeak);
  boolean possiblyBlindAlley=false;
  if (supertypeConceptFQName != null && !(supertypeConceptFQName.equals(term.getConceptFqName()))) {
    possiblyBlindAlley=myTypeChecker.getRulesManager().subtypingRulesByNodeAreAllByConcept(term,isWeak);
  }
  if (subtypingRule_runtimes != null) {
    for (    final SubtypingRule_Runtime subtypingRule : subtypingRule_runtimes) {
      if (possiblyBlindAlley && subtypingRule.surelyKeepsConcept()) {
        continue;
      }
      final TypeCheckingContext tcContext=equationManager == null ? null : equationManager.getTypeCheckingContext();
      List<SNode> supertypes=FreezeUtil.freezeAndCompute(term,new Computable<List<SNode>>(){
        public List<SNode> compute(){
          return UndoUtil.runNonUndoableAction(new Computable<List<SNode>>(){
            @Override public List<SNode> compute(){
              return subtypingRule.getSubOrSuperTypes(term,tcContext);
            }
          }
);
        }
      }
);
      result.addAll(supertypes);
    }
  }
}
