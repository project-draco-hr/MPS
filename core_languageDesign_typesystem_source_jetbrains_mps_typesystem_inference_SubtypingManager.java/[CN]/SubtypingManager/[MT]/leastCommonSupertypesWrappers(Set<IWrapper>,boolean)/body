{
  if (types.size() == 1)   return new HashSet<IWrapper>(types);
  StructuralWrapperMap<?> allTypes=new StructuralWrapperMap();
  StructuralWrapperMap<?> result=new StructuralWrapperMap(types);
  allTypes.addCollectionStructurally((Set<IWrapper>)types);
  StructuralWrapperMap<StructuralWrapperMap<Integer>> subTypesToSupertypes=new StructuralWrapperMap<StructuralWrapperMap<Integer>>();
  Set<IWrapper> frontier=new HashSet<IWrapper>(types);
  Set<IWrapper> newFrontier=new HashSet<IWrapper>();
  StructuralWrapperMap subTypesToSupertypesKeySet=new StructuralWrapperMap(subTypesToSupertypes.keySet());
  while (!frontier.isEmpty()) {
    for (    IWrapper type : frontier) {
      if (subTypesToSupertypesKeySet.containsKey(type)) {
        continue;
      }
      StructuralWrapperMap superTypes=collectImmediateSupertypes(type,isWeak);
      superTypes.setAllValues(1);
      subTypesToSupertypes.put(type,superTypes);
      subTypesToSupertypesKeySet.addStructurally(type);
      newFrontier.addAll(superTypes.keySet());
      allTypes.addAllStructurally(superTypes);
      superTypes.put(type,0);
    }
    frontier=newFrontier;
    newFrontier=new HashSet<IWrapper>();
  }
  for (  IWrapper node2 : allTypes.keySet()) {
    for (    IWrapper node1 : allTypes.keySet()) {
      for (      IWrapper node3 : allTypes.keySet()) {
        StructuralWrapperMap<Integer> supertypes1=subTypesToSupertypes.get(node1);
        if (supertypes1 == null)         continue;
        StructuralWrapperMap<Integer> supertypes2=subTypesToSupertypes.get(node2);
        if (supertypes2 == null)         continue;
        if (supertypes1.containsKey(node2) && supertypes2.containsKey(node3)) {
          Integer dist1_2=supertypes1.get(node2);
          Integer dist2_3=supertypes2.get(node3);
          Integer sum=0;
          sum=dist1_2 + dist2_3;
          Integer dist1_3=supertypes1.get(node3);
          if (dist1_3 == null || dist1_3 > sum) {
            supertypes1.put(node3,sum);
          }
        }
      }
    }
  }
  while (result.size() >= 2) {
    Iterator<? extends IWrapper> iterator=result.keySet().iterator();
    IWrapper a=iterator.next();
    IWrapper b=iterator.next();
    result.remove(a);
    result.remove(b);
    result.addAllStructurally(leastCommonSupertypes(a,b,subTypesToSupertypes,isWeak));
  }
  return result.keySet();
}
