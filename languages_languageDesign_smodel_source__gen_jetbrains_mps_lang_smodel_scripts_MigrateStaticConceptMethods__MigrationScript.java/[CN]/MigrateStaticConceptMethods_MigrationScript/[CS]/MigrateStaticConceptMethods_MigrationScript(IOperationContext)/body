{
  super("Migrate Static ConceptMethods");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "migrate static concept methods";
    }
    public String getAdditionalInfo(){
      return "migrate static concept methods";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true)).addElement(_quotation_createNode_df5nox_a0a0a0a(SLinkOperations.getTarget(node,"returnType",true),SLinkOperations.getTargets(SLinkOperations.getTarget(node,"body",true),"statement",true),SLinkOperations.getTarget(node,"visibility",true),SLinkOperations.getTargets(node,"parameter",true),SPropertyOperations.getString(node,"name")));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "migrate static concept methods calls";
    }
    public String getAdditionalInfo(){
      return "migrate static concept methods calls";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    final SNode node){
      SNodeOperations.replaceWithAnother(node,_quotation_createNode_df5nox_a0a0a0b(SLinkOperations.getTarget(node,"concept",false),SLinkOperations.getTargets(node,"actualArgument",true),Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true),"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(it,"name").equals(SPropertyOperations.getString(SLinkOperations.getTarget(node,"baseMethodDeclaration",false),"name"));
        }
      }
)));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "remove old static concept methods";
    }
    public String getAdditionalInfo(){
      return "remove old static concept methods";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.deleteNode(node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
