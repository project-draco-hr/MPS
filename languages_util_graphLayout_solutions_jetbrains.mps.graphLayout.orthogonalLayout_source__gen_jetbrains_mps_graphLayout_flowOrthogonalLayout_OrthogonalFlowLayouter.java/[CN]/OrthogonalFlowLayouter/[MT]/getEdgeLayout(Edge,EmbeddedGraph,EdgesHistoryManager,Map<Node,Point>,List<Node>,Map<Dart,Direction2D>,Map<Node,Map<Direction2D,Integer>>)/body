{
  Node source=edge.getSource();
  Node target=edge.getTarget();
  List<Edge> history=manager.getHistory(edge);
  List<Point> edgeLayout=ListSequence.<Point>fromList(new LinkedList<Point>());
  Node cur=source;
  ListSequence.<Point>fromList(edgeLayout).addElement(new Point(MapSequence.<Node,Point>fromMap(coordinates).get(cur)));
  for (  Edge historyEdge : ListSequence.<Edge>fromList(history)) {
    Node next=historyEdge.getOpposite(cur);
    ListSequence.<Point>fromList(edgeLayout).addElement(new Point(MapSequence.<Node,Point>fromMap(coordinates).get(next)));
    cur=next;
  }
  if (ListSequence.<Node>fromList(initialNodes).contains(source)) {
    Direction2D dir=MapSequence.<Dart,Direction2D>fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.<Edge>fromList(history).first(),source));
    int size=MapSequence.<Direction2D,Integer>fromMap(MapSequence.<Node,Map<Direction2D,Integer>>fromMap(nodeDirectionSizes).get(source)).get(dir);
    Point first=ListSequence.<Point>fromList(edgeLayout).removeElementAt(0);
    first.translate(size * dir.dx(),size * dir.dy());
    ListSequence.<Point>fromList(edgeLayout).removeElementAt(0);
    ListSequence.<Point>fromList(edgeLayout).insertElement(0,first);
  }
  if (ListSequence.<Node>fromList(initialNodes).contains(edge.getTarget())) {
    Direction2D dir=MapSequence.<Dart,Direction2D>fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.<Edge>fromList(history).last(),target));
    int size=MapSequence.<Direction2D,Integer>fromMap(MapSequence.<Node,Map<Direction2D,Integer>>fromMap(nodeDirectionSizes).get(target)).get(dir);
    Point last=ListSequence.<Point>fromList(edgeLayout).removeLastElement();
    last.translate(size * dir.dx(),size * dir.dy());
    ListSequence.<Point>fromList(edgeLayout).removeLastElement();
    ListSequence.<Point>fromList(edgeLayout).addElement(last);
  }
  return edgeLayout;
}
