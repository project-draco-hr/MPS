{
  if (SHOW_INFO > 0) {
    System.out.println("initial graph: " + embeddedGraph);
  }
  Map<Node,Dimension> nodeSizes=MapSequence.<Node,Dimension>fromMap(new LinkedHashMap<Node,Dimension>(16,(float)0.75,false));
  for (  Node node : SetSequence.<Node>fromSet(layoutInfo.getNodesWithSize())) {
    MapSequence.<Node,Dimension>fromMap(nodeSizes).put(node,layoutInfo.getNodeSize(node));
  }
  Map<Edge,Dimension> edgeSizes=MapSequence.<Edge,Dimension>fromMap(new LinkedHashMap<Edge,Dimension>(16,(float)0.75,false));
  for (  Edge edge : SetSequence.<Edge>fromSet(layoutInfo.getLabeledEdges())) {
    MapSequence.<Edge,Dimension>fromMap(edgeSizes).put(edge,layoutInfo.getLabelSize(edge));
  }
  Graph graph=embeddedGraph.getGraph();
  EdgesHistoryManager historyManager=new EdgesHistoryManager(graph);
  List<Edge> initialEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(initialEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  List<Node> initialNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  ListSequence.<Node>fromList(initialNodes).addSequence(SetSequence.<Node>fromSet(MapSequence.fromMap(nodeSizes).keySet()));
  Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    if (ListSequence.<Dart>fromList(embeddedGraph.getDarts(edge)).count() != 2) {
      throw new RuntimeException("botva!!!");
    }
  }
  QuasiOrthogonalRepresentation orthogonalRepresentation=new QuasiOrthogonalRepresentation();
  if (getUseRepresentationOptimizations()) {
    orthogonalRepresentation.setRealEdges(myRealEdges);
    orthogonalRepresentation.setRealNodes(myRealNodes);
    orthogonalRepresentation.setStraightEdges(myStraightEdges);
  }
  Tuples._2<Map<Dart,Integer>,Map<Dart,Integer>> pair=orthogonalRepresentation.getRepresentation(embeddedGraph);
  bends=pair._0();
  angles=pair._1();
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    for (    Dart dart : ListSequence.<Dart>fromList(embeddedGraph.getDarts(edge))) {
      if (MapSequence.<Dart,Integer>fromMap(angles).get(dart) < 0 || MapSequence.<Dart,Integer>fromMap(angles).get(dart) > 3) {
        throw new RuntimeException("botva!!!");
      }
    }
  }
  QuasiRepresentationModifier quasiModifier=new QuasiRepresentationModifier(embeddedGraph,bends,angles);
  quasiModifier.reduceToOrthogonalRepresentation();
  List<QuasiRepresentationModifier.Modification> modifications=quasiModifier.getModifications();
  Set<Edge> modifiedEdges=SetSequence.<Edge>fromSet(new HashSet<Edge>());
  Set<Edge> newEdges=SetSequence.<Edge>fromSet(new HashSet<Edge>());
  for (  QuasiRepresentationModifier.Modification modification : ListSequence.<QuasiRepresentationModifier.Modification>fromList(modifications)) {
    SetSequence.fromSet(modifiedEdges).addSequence(ListSequence.<Edge>fromList(modification.getModifiedEdges()));
    SetSequence.fromSet(newEdges).addSequence(ListSequence.<Edge>fromList(modification.getNewEdges()));
  }
  Map<Edge,Edge> labeledEdges=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    List<Edge> history=historyManager.getHistory(edge);
    if (SetSequence.<Edge>fromSet(modifiedEdges).contains(edge)) {
      for (      Edge historyEdge : ListSequence.<Edge>fromList(history)) {
        if (SetSequence.<Edge>fromSet(newEdges).contains(historyEdge)) {
          MapSequence.<Edge,Edge>fromMap(labeledEdges).put(edge,historyEdge);
        }
      }
    }
 else {
      MapSequence.<Edge,Edge>fromMap(labeledEdges).put(edge,edge);
    }
  }
  if (SHOW_INFO > 0) {
    System.out.println("modifications: ");
    for (    QuasiRepresentationModifier.Modification modification : ListSequence.<QuasiRepresentationModifier.Modification>fromList(modifications)) {
      System.out.println(modification);
    }
  }
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    Edge labeledEdge=getLabeledEdge(historyManager.getHistory(MapSequence.<Edge,Edge>fromMap(labeledEdges).get(edge)));
    MapSequence.<Edge,Edge>fromMap(labeledEdges).put(edge,labeledEdge);
  }
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  if (SHOW_INFO > 0) {
    System.out.println("modified graph: " + embeddedGraph);
  }
  Map<Node,Map<Direction2D,Integer>> nodeDirectionSizes=this.getNodeDirectionSizes(initialNodes,nodeSizes);
  Map<Edge,Integer> edgeShifts=getEdgesShifts(modifications,directions,nodeSizes);
  NodeBoxesMaker boxesMaker=new NodeBoxesMaker(embeddedGraph,directions);
  boxesMaker.makeBoxes(nodeSizes);
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    Edge labeledEdge=MapSequence.<Edge,Edge>fromMap(labeledEdges).get(edge);
    List<Edge> history=historyManager.getHistory(labeledEdge);
    int pos=0;
    if (ListSequence.<Node>fromList(initialNodes).contains(labeledEdge.getSource())) {
      pos=1;
    }
    MapSequence.<Edge,Edge>fromMap(labeledEdges).put(edge,ListSequence.<Edge>fromList(history).getElement(pos));
  }
  Map<Edge,Direction2D> labelDir=MapSequence.<Edge,Direction2D>fromMap(new HashMap<Edge,Direction2D>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    Edge labeledEdge=MapSequence.<Edge,Edge>fromMap(labeledEdges).get(edge);
    if (MapSequence.<Dart,Direction2D>fromMap(directions).get(ListSequence.<Dart>fromList(embeddedGraph.getDarts(labeledEdge)).first()).isHorizontal()) {
      MapSequence.<Edge,Direction2D>fromMap(labelDir).put(edge,Direction2D.UP);
    }
 else {
      MapSequence.<Edge,Direction2D>fromMap(labelDir).put(edge,Direction2D.RIGHT);
    }
  }
  Map<Edge,Node> labelCenters=MapSequence.<Edge,Node>fromMap(new HashMap<Edge,Node>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    MapSequence.<Edge,Node>fromMap(labelCenters).put(edge,splitEdge(MapSequence.<Edge,Edge>fromMap(labeledEdges).get(edge),embeddedGraph,directions));
  }
  Set<Face> boxFaces=boxesMaker.getBoxFaces();
  Map<Edge,Integer> edgeLengths=boxesMaker.getBoxEdgeLengths();
  for (  Node node : ListSequence.<Node>fromList(initialNodes)) {
    for (    Edge edge : ListSequence.<Edge>fromList(node.getEdges())) {
      Dart dart=embeddedGraph.getSourceDart(edge,node);
      MapSequence.<Edge,Integer>fromMap(edgeLengths).put(edge,MapSequence.<Direction2D,Integer>fromMap(MapSequence.<Node,Map<Direction2D,Integer>>fromMap(nodeDirectionSizes).get(node)).get(MapSequence.<Dart,Direction2D>fromMap(directions).get(dart)));
    }
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    Dimension size=MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(edge);
    int length;
    if (MapSequence.<Edge,Direction2D>fromMap(labelDir).get(edge).isHorizontal()) {
      length=size.height;
    }
 else {
      length=size.width;
    }
    for (    Edge nodeEdge : ListSequence.<Edge>fromList(MapSequence.<Edge,Node>fromMap(labelCenters).get(edge).getEdges())) {
      MapSequence.<Edge,Integer>fromMap(edgeLengths).put(nodeEdge,length / 2 + getUnitLength());
    }
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeShifts).keySet())) {
    Edge firstEdge=ListSequence.<Edge>fromList(historyManager.getHistory(edge)).first();
    if (MapSequence.fromMap(edgeLengths).containsKey(firstEdge)) {
      MapSequence.<Edge,Integer>fromMap(edgeLengths).put(firstEdge,MapSequence.<Edge,Integer>fromMap(edgeLengths).get(firstEdge) + MapSequence.<Edge,Integer>fromMap(edgeShifts).get(edge));
    }
 else {
      MapSequence.<Edge,Integer>fromMap(edgeLengths).put(firstEdge,MapSequence.<Edge,Integer>fromMap(edgeShifts).get(edge) + 2 * getUnitLength());
    }
  }
  ConstraintsGraph constraintsGraph=new ConstraintsGraph(embeddedGraph,directions);
  constraintsGraph.constructGraph(boxFaces);
  constraintsGraph.setUnitLength(getUnitLength());
  Map<Node,Point> coordinates=constraintsGraph.getCoordinates(edgeLengths,null);
  Map<Edge,Rectangle> labelRects=MapSequence.<Edge,Rectangle>fromMap(new HashMap<Edge,Rectangle>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    MapSequence.<Edge,Rectangle>fromMap(labelRects).put(edge,getLabelLayout(labelCenters,edge,coordinates,embeddedGraph,edgeSizes,directions));
  }
  Map<Edge,Integer> constraintEdgeLengths=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(labelRects).keySet())) {
    Node center=MapSequence.<Edge,Node>fromMap(labelCenters).get(edge);
    boolean isHorizontal=MapSequence.<Edge,Direction2D>fromMap(labelDir).get(edge).isVertical();
    Rectangle labelRect=MapSequence.<Edge,Rectangle>fromMap(labelRects).get(edge);
    Rectangle rect;
    int width=labelRect.width + getUnitLength();
    int height=labelRect.height + getUnitLength();
    if (isHorizontal) {
      rect=new Rectangle(labelRect.x - getUnitLength() / 2,labelRect.y,width,height);
    }
 else {
      rect=new Rectangle(labelRect.x,labelRect.y - getUnitLength() / 2,width,height);
    }
    for (    Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      if (node == center) {
        continue;
      }
      Point point=MapSequence.<Node,Point>fromMap(coordinates).get(node);
      if (rect.contains(point)) {
        if (isHorizontal) {
          Edge constraintEdge=constraintsGraph.addConstraintEdge(center,node,Direction2D.UP);
          MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,rect.height);
        }
 else {
          Edge constraintEdge=constraintsGraph.addConstraintEdge(center,node,Direction2D.RIGHT);
          MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,rect.width);
        }
      }
    }
    if (getAvoidLabelCrossings()) {
      for (      Edge graphEdge : ListSequence.<Edge>fromList(graph.getEdges())) {
        if (ListSequence.<Edge>fromList(center.getEdges()).contains(graphEdge)) {
          continue;
        }
        if (MapSequence.<Dart,Direction2D>fromMap(directions).get(ListSequence.<Dart>fromList(embeddedGraph.getDarts(graphEdge)).first()).isHorizontal() != isHorizontal) {
          continue;
        }
        Point sourcePoint=MapSequence.<Node,Point>fromMap(coordinates).get(graphEdge.getSource());
        Point targetPoint=MapSequence.<Node,Point>fromMap(coordinates).get(graphEdge.getTarget());
        if (isHorizontal) {
          boolean isIntersecting=Util1D.insideClosedSegment(sourcePoint.x,targetPoint.x,rect.x) && Util1D.insideClosedSegment(sourcePoint.x,targetPoint.x,rect.x + rect.width);
          int dist=rect.y + rect.height - sourcePoint.y;
          if (isIntersecting && dist < rect.height) {
            Edge constraintEdge=constraintsGraph.addConstraintEdge(center,graphEdge.getSource(),Direction2D.UP);
            MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,rect.height);
          }
        }
 else {
          boolean isIntersecting=Util1D.insideClosedSegment(sourcePoint.y,targetPoint.y,rect.y) && Util1D.insideClosedSegment(sourcePoint.y,targetPoint.y,rect.y + rect.height);
          int dist=rect.x + rect.width - sourcePoint.x;
          if (isIntersecting && dist < rect.width) {
            Edge constraintEdge=constraintsGraph.addConstraintEdge(center,graphEdge.getSource(),Direction2D.RIGHT);
            MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,rect.width);
          }
        }
      }
    }
  }
  coordinates=constraintsGraph.getCoordinates(edgeLengths,constraintEdgeLengths);
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    MapSequence.<Edge,Rectangle>fromMap(labelRects).put(edge,getLabelLayout(labelCenters,edge,coordinates,embeddedGraph,edgeSizes,directions));
  }
  List<Edge> edgeList=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(edgeList).addSequence(SetSequence.<Edge>fromSet(MapSequence.fromMap(labelRects).keySet()));
  for (int i=0; i < ListSequence.<Edge>fromList(edgeList).count(); i++) {
    Edge edgeI=ListSequence.<Edge>fromList(edgeList).getElement(i);
    Direction2D dirI=MapSequence.<Edge,Direction2D>fromMap(labelDir).get(edgeI);
    Rectangle rectI=MapSequence.<Edge,Rectangle>fromMap(labelRects).get(edgeI);
    for (int j=i + 1; j < ListSequence.<Edge>fromList(edgeList).count(); j++) {
      Edge edgeJ=ListSequence.<Edge>fromList(edgeList).getElement(j);
      Direction2D dirJ=MapSequence.<Edge,Direction2D>fromMap(labelDir).get(edgeJ);
      Rectangle rectJ=MapSequence.<Edge,Rectangle>fromMap(labelRects).get(edgeJ);
      if (rectI.intersects(rectJ)) {
        int shiftByDirI=rectJ.size(dirI) + rectI.size(dirI);
        int shiftByDirJ=rectJ.size(dirJ) + rectI.size(dirJ);
        if (shiftByDirJ < shiftByDirI) {
          Edge constraintEdge=constraintsGraph.addConstraintEdge(MapSequence.<Edge,Node>fromMap(labelCenters).get(edgeJ),MapSequence.<Edge,Node>fromMap(labelCenters).get(edgeI),dirJ);
          MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,shiftByDirJ - rectI.size(dirJ) / 2 + LABEL_DIST);
        }
 else {
          Edge constraintEdge=constraintsGraph.addConstraintEdge(MapSequence.<Edge,Node>fromMap(labelCenters).get(edgeI),MapSequence.<Edge,Node>fromMap(labelCenters).get(edgeJ),dirI);
          MapSequence.<Edge,Integer>fromMap(constraintEdgeLengths).put(constraintEdge,shiftByDirI - rectJ.size(dirI) / 2 + LABEL_DIST);
        }
      }
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Point sourcePoint=MapSequence.<Node,Point>fromMap(coordinates).get(edge.getSource());
    Point targetPoint=MapSequence.<Node,Point>fromMap(coordinates).get(edge.getTarget());
    MapSequence.<Edge,Integer>fromMap(edgeLengths).put(edge,Math.abs(sourcePoint.x - targetPoint.x) + Math.abs(sourcePoint.y - targetPoint.y));
  }
  coordinates=constraintsGraph.getCoordinates(edgeLengths,constraintEdgeLengths);
  GraphLayout graphLayout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(initialNodes)) {
    Rectangle rect=this.getNodeLayout(coordinates,node,nodeDirectionSizes,nodeSizes);
    graphLayout.setLayoutFor(node,rect);
  }
  for (  Edge edge : ListSequence.<Edge>fromList(initialEdges)) {
    List<Point> edgeLayout=this.getEdgeLayout(edge,embeddedGraph,historyManager,coordinates,initialNodes,directions,nodeDirectionSizes);
    graphLayout.setLayoutFor(edge,edgeLayout);
  }
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
    Rectangle rect=this.getLabelLayout(labelCenters,edge,coordinates,embeddedGraph,edgeSizes,directions);
    graphLayout.setLabelLayout(edge,rect);
  }
  for (  QuasiRepresentationModifier.Modification modification : ListSequence.<QuasiRepresentationModifier.Modification>fromList(modifications)) {
    splitEdges(graphLayout,modification,edgeShifts);
  }
  return graphLayout;
}
