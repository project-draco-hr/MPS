{
  ThreadUtils.assertEDT();
  final Collection<SearchResult<SNode>> aliveIncludedResults=new ModelAccessHelper(getMPSProject().getModelAccess()).runReadAction(new Computable<Collection<SearchResult<SNode>>>(){
    public Collection<SearchResult<SNode>> compute(){
      return myController.computeAliveIncludedResults(myUsagesView.getIncludedResultNodes(),getMPSProject().getRepository());
    }
  }
);
  if (aliveIncludedResults.size() == 0) {
    JOptionPane.showMessageDialog(myTool.getComponent(),"No job");
    return;
  }
  updateControls(false,myIndicator.getComponent());
  final TaskInfo task=createTaskInfo();
  final Object cmd=((CommandProcessorEx)CommandProcessor.getInstance()).startCommand(myProject,task.getTitle(),null,UndoConfirmationPolicy.REQUEST_CONFIRMATION);
  final Runnable finishCommand=new Runnable(){
    @Override public void run(){
      ((CommandProcessorEx)CommandProcessor.getInstance()).finishCommand(myProject,cmd,null);
    }
  }
;
  Runnable process=new Runnable(){
    @Override public void run(){
      myController.process(new ProgressMonitorAdapter(myIndicator),aliveIncludedResults);
      getMPSProject().getModelAccess().executeCommandInEDT(finishCommand);
      checkMigrationResults();
    }
  }
;
  ((ApplicationEx)ApplicationManagerEx.getApplicationEx()).runProcessWithProgressSynchronously(process,task.getTitle(),task.isCancellable(),myProject,getComponent(),task.getCancelText());
}
