{
  jetbrains.mps.smodel.SNode newInstance=(jetbrains.mps.smodel.SNode)SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(newConcept));
  newInstance.setId(((jetbrains.mps.smodel.SNode)node).getNodeId());
  for (  SProperty prop : Sequence.fromIterable(node.getProperties())) {
    newInstance.setProperty(prop,node.getProperty(prop));
  }
  for (  SReference ref : Sequence.fromIterable(node.getReferences())) {
    newInstance.setReferenceTarget(ref.getLink(),ref.getTargetNode());
  }
  for (  SNode child : Sequence.fromIterable(node.getChildren())) {
    SContainmentLink containmentLink=child.getContainmentLink();
    node.removeChild(child);
    newInstance.addChild(containmentLink,child);
  }
  if (SNodeOperations.getModel(node) instanceof SModelInternal) {
    if (!(as_7voxfg_a0a0a0a6a7_0(SNodeOperations.getModel(node),SModelInternal.class).importedLanguageIds().contains(newConcept.getLanguage()))) {
      as_7voxfg_a0a0a0a6a7(SNodeOperations.getModel(node),SModelInternal.class).addLanguage(newConcept.getLanguage());
    }
  }
  final SNode result=SNodeOperations.replaceWithAnother(node,newInstance);
  ListSequence.fromList(SNodeOperations.getNodeDescendants(result,null,true,new SAbstractConcept[]{})).translate(new ITranslator2<SNode,SReference>(){
    public Iterable<SReference> translate(    SNode it){
      return SNodeOperations.getReferences(it);
    }
  }
).where(new IWhereFilter<SReference>(){
    public boolean accept(    SReference it){
      return SLinkOperations.getTargetNode(it) == node;
    }
  }
).visitAll(new IVisitor<SReference>(){
    public void visit(    SReference it){
      it.getSourceNode().setReferenceTarget(it.getLink(),result);
    }
  }
);
  return result;
}
