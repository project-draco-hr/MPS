{
  final Wrappers._T<SModel> targetModelDescriptor=new Wrappers._T<SModel>();
  final SRepository repository=project.getRepository();
  ModelAccess modelAccess=repository.getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      targetModelDescriptor.value=SNodeOperations.getModel(ListSequence.fromList(target).first());
    }
  }
);
  final Object newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),targetModelDescriptor.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    Object selectedObject,    SModel model){
      return selectedObject instanceof SNode || selectedObject instanceof SModel;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(target)) {
        if (!(SNodeUtil.isAccessible(node,repository))) {
          return;
        }
      }
      if (newLocation instanceof SNode && !(SNodeUtil.isAccessible(((SNode)newLocation),repository))) {
        return;
      }
      if (newLocation instanceof SModel && (((SModel)newLocation).getReference().resolve(repository) != newLocation)) {
        return;
      }
      if (!(canBeInserted(newLocation,target))) {
        return;
      }
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(newLocation),target,project));
    }
  }
);
}
