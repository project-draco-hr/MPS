{
  final Wrappers._T<SModel> targetModelDescriptor=new Wrappers._T<SModel>();
  final SRepository repository=project.getRepository();
  final ModelAccess modelAccess=repository.getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      targetModelDescriptor.value=SNodeOperations.getModel(ListSequence.fromList(target).first());
    }
  }
);
  final Object newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),targetModelDescriptor.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    Object selectedObject,    SModel model){
      return selectedObject instanceof SNode || selectedObject instanceof SModel;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(target)) {
        if (!(SNodeUtil.isAccessible(node,repository))) {
          return;
        }
      }
      if (newLocation instanceof SNode && !(SNodeUtil.isAccessible(((SNode)newLocation),repository))) {
        return;
      }
      if (newLocation instanceof SModel && (((SModel)newLocation).getReference().resolve(repository) != newLocation)) {
        return;
      }
      if (!(canBeInserted(newLocation,target))) {
        return;
      }
      final Map<SNode,List<SReference>> usages=MapSequence.fromMap(new HashMap<SNode,List<SReference>>());
      Set<SReference> allUsages=findUsages(project,target);
      for (      SReference ref : SetSequence.fromSet(allUsages)) {
        if (MapSequence.fromMap(usages).get(ref.getTargetNode()) == null) {
          MapSequence.fromMap(usages).put(ref.getTargetNode(),ListSequence.fromList(new ArrayList<SReference>()));
        }
        ListSequence.fromList(MapSequence.fromMap(usages).get(ref.getTargetNode())).addElement(ref);
      }
      SearchResults<SNode> searchResults=usagesToSearchResults(target,usages);
      RefactoringAccessEx.getInstance().showRefactoringView(ProjectHelper.toIdeaProject(project),new RefactoringViewAction(){
        public void performAction(        RefactoringViewItem refactoringViewItem){
          modelAccess.executeCommand(new Runnable(){
            public void run(){
              moveNodes(newLocation,target);
              for (              SNode node : SetSequence.fromSet(MapSequence.fromMap(usages).keySet())) {
                updateUsages(MapSequence.fromMap(usages).get(node),node);
              }
            }
          }
);
          refactoringViewItem.close();
        }
      }
,searchResults,false,"Move nodes");
    }
  }
);
}
