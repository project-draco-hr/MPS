{
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      IMapping<SNodeReference,NodeLocation> moving : MapSequence.fromMap(moveMap)) {
        SNode node=resolveNode(moving.key(),project);
        if (!(moving.value().canInsert(project.getRepository(),node))) {
          throw new IllegalArgumentException();
        }
      }
    }
  }
);
  final Map<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> changes=MapSequence.fromMap(new HashMap<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>>());
  final Map<SNodeReference,SNodeReference> nodeRoots=MapSequence.fromMap(new HashMap<SNodeReference,SNodeReference>());
  final Wrappers._T<List<RefactoringParticipant.Option>> options=new Wrappers._T<List<RefactoringParticipant.Option>>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNodeReference nodeToMove : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
        for (        SNodeReference descendant : ListSequence.fromList(SNodeOperations.getNodeDescendants(resolveNode(nodeToMove,project),null,true,new SAbstractConcept[]{})).select(new ISelector<SNode,SNodeReference>(){
          public SNodeReference select(          SNode it){
            return it.getReference();
          }
        }
)) {
          MapSequence.fromMap(nodeRoots).put(descendant,nodeToMove);
        }
      }
      for (      MoveNodeRefactoringParticipant<?,?> participant : Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?,?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects()).toListSequence()) {
        Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>> participantStates=MapSequence.fromMap(new HashMap<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>());
        MapSequence.fromMap(changes).put(participant,participantStates);
        for (        SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(nodeRoots).keySet())) {
          MapSequence.fromMap(participantStates).put(nodeRef,RefactoringParticipant.ParticipantState.create(participant,resolveNode(nodeRef,project)));
        }
      }
      options.value=MapSequence.fromMap(changes).translate(new ITranslator2<IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>>,RefactoringParticipant.Option>(){
        public Iterable<RefactoringParticipant.Option> translate(        IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> it){
          return MapSequence.fromMap(it.value()).translate(new ITranslator2<IMapping<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>,RefactoringParticipant.Option>(){
            public Iterable<RefactoringParticipant.Option> translate(            IMapping<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>> it){
              return it.value().getAvaliableOptions(project.getRepository());
            }
          }
);
        }
      }
).distinct().sort(new ISelector<RefactoringParticipant.Option,String>(){
        public String select(        RefactoringParticipant.Option it){
          return it.getDescription();
        }
      }
,true).toListSequence();
    }
  }
);
  List<Integer> selectedOptionIndices;
  if (ListSequence.fromList(options.value).isNotEmpty()) {
    selectedOptionIndices=SelectOptionsDialog.selectOptions(ProjectHelper.toIdeaProject(project),ListSequence.fromList(options.value).select(new ISelector<RefactoringParticipant.Option,String>(){
      public String select(      RefactoringParticipant.Option it){
        return it.getDescription();
      }
    }
).toListSequence(),"Refactoring Options");
  }
 else {
    selectedOptionIndices=ListSequence.fromList(new ArrayList<Integer>());
  }
  if (selectedOptionIndices == null) {
    return;
  }
  final List<RefactoringParticipant.Option> selectedOptions=ListSequence.fromList(selectedOptionIndices).select(new ISelector<Integer,RefactoringParticipant.Option>(){
    public RefactoringParticipant.Option select(    Integer i){
      return ListSequence.fromList(options.value).getElement(i);
    }
  }
).toListSequence();
  final Wrappers._boolean cancelled=new Wrappers._boolean(false);
  ProgressManager.getInstance().run(new Task.Modal(project.getProject(),"Refactoring",true){
    public void run(    @NotNull ProgressIndicator progressIndicator){
      final ProgressMonitorAdapter progressMonitor=new ProgressMonitorAdapter(progressIndicator);
      project.getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          int steps=MapSequence.fromMap(changes).select(new ISelector<IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>>,Integer>(){
            public Integer select(            IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> pss){
              return MapSequence.fromMap(pss.value()).count();
            }
          }
).foldLeft(0,new ILeftCombinator<Integer,Integer>(){
            public Integer combine(            Integer s,            Integer it){
              return it + s;
            }
          }
);
          progressMonitor.start("Searching for usages",steps);
          outer:           for (          IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> participantStates : MapSequence.fromMap(changes)) {
            for (            IMapping<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>> participantState : MapSequence.fromMap(participantStates.value())) {
              if (progressMonitor.isCanceled()) {
                cancelled.value=true;
                break outer;
              }
              participantState.value().findChanges(project.getRepository(),selectedOptions,project.getScope(),progressMonitor.subTask(1,SubProgressKind.AS_COMMENT));
            }
          }
          progressMonitor.done();
        }
      }
);
    }
  }
);
  if (cancelled.value) {
    return;
  }
  SearchResults searchResults=new SearchResults();
  final Map<SNodeReference,Boolean> shouldKeep=MapSequence.fromMap(new HashMap<SNodeReference,Boolean>());
  for (  SNodeReference node : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
    MapSequence.fromMap(shouldKeep).put(node,false);
  }
  for (  IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> participantChanges : MapSequence.fromMap(changes)) {
    for (    IMapping<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
      for (      RefactoringParticipant.Change<?,?> change : ListSequence.fromList(nodeChanges.value().getChanges())) {
        MapSequence.fromMap(shouldKeep).putValue(MapSequence.fromMap(nodeRoots).get(nodeChanges.key()),MapSequence.fromMap(shouldKeep).get(MapSequence.fromMap(nodeRoots).get(nodeChanges.key())) || (change.needsToPreserveOldNode()));
        searchResults.addAll(change.getSearchResults());
      }
    }
  }
  RefactoringAccessEx.getInstance().showRefactoringView(project.getProject(),new RefactoringViewAction(){
    public void performAction(    RefactoringViewItem refactoringViewItem){
      project.getRepository().getModelAccess().executeCommand(new Runnable(){
        public void run(){
          RefactoringSessionImpl refactoringSession=new RefactoringSessionImpl();
          if (initRefactoringSession != null) {
            initRefactoringSession.invoke(refactoringSession);
          }
          Map<SNode,SNode> copyMap=MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession).getCopyMap();
          final Map<SNodeReference,SNode> resolveMap=MapSequence.fromMap(new HashMap<SNodeReference,SNode>());
          List<SNodeReference> nodesToMove=ListSequence.fromList(new ArrayList<SNodeReference>());
          for (          SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(nodeRoots).keySet())) {
            MapSequence.fromMap(resolveMap).put(nodeRef,resolveNode(nodeRef,project));
          }
          for (          SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
            ListSequence.fromList(nodesToMove).addElement(nodeRef);
          }
          MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession).copy(ListSequence.fromList(nodesToMove).select(new ISelector<SNodeReference,SNode>(){
            public SNode select(            SNodeReference it){
              return MapSequence.fromMap(resolveMap).get(it);
            }
          }
).toListSequence(),ListSequence.fromList(nodesToMove).select(new ISelector<SNodeReference,Boolean>(){
            public Boolean select(            SNodeReference it){
              return MapSequence.fromMap(shouldKeep).get(it);
            }
          }
).toListSequence());
{
            Iterator<SNodeReference> oldNode_it=ListSequence.fromList(nodesToMove).iterator();
            SNodeReference oldNode_var;
            while (oldNode_it.hasNext()) {
              oldNode_var=oldNode_it.next();
              MapSequence.fromMap(moveMap).get(oldNode_var).insertNode(project.getRepository(),MapSequence.fromMap(copyMap).get(MapSequence.fromMap(resolveMap).get(oldNode_var)));
            }
          }
          for (          IMapping<RefactoringParticipant,Map<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>>> participantChanges : MapSequence.fromMap(changes)) {
            for (            IMapping<SNodeReference,RefactoringParticipant.ParticipantState<?,?,SNode,SNode>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
              nodeChanges.value().confirm(MapSequence.fromMap(copyMap).get(MapSequence.fromMap(resolveMap).get(nodeChanges.key())),project.getRepository(),refactoringSession);
            }
          }
          try {
            refactoringSession.commit();
          }
 catch (          RuntimeException exception) {
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("Exception during refactoring: ",exception);
            }
          }
        }
      }
);
      refactoringViewItem.close();
    }
  }
,searchResults,false,"Move nodes");
}
