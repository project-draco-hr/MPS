{
  I initialDataObject=participant.getDataCollector().beforeMove(nodeToMove);
  return ListSequence.fromList(participant.getChanges(initialDataObject,project.getRepository(),project.getScope())).select(new ISelector<RefactoringParticipant.Change<F>,MoveNodesDefault.ChangeWrapper<I,F>>(){
    public MoveNodesDefault.ChangeWrapper<I,F> select(    RefactoringParticipant.Change<F> change){
      MoveNodesDefault.ChangeWrapper<I,F> wrapper=new MoveNodesDefault.ChangeWrapper<I,F>();
      wrapper.myChange=change;
      wrapper.myParticipant=participant;
      return wrapper;
    }
  }
).toListSequence();
}
