{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  final Wrappers._T<SContainmentLink> role=new Wrappers._T<SContainmentLink>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
      role.value=ListSequence.fromList(nodesToMove).first().getContainmentLink();
    }
  }
);
  final SContainmentLink finalRole=role.value;
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    final NodeLocation selectedObject,    SModel model){
      if (selectedObject == null) {
        return false;
      }
      if (selectedObject instanceof NodeLocation.NodeLocationChild) {
        if (finalRole == null) {
          return false;
        }
        final Wrappers._T<Collection<SContainmentLink>> containmentLinks=new Wrappers._T<Collection<SContainmentLink>>();
        project.getRepository().getModelAccess().runReadAction(new Runnable(){
          public void run(){
            containmentLinks.value=((NodeLocation.NodeLocationChild)selectedObject).getNode().resolve(project.getRepository()).getConcept().getContainmentLinks();
          }
        }
);
        return CollectionSequence.fromCollection(containmentLinks.value).contains(finalRole);
      }
 else {
        return true;
      }
    }
  }
);
  if (newLocation instanceof NodeLocation.NodeLocationChild) {
    ((NodeLocation.NodeLocationChild)newLocation).setRole(role.value);
  }
  if (newLocation == null) {
    return;
  }
  Map<SNodeReference,MoveNodesDefault.NodeProcessor> moveMap=MapSequence.fromMap(new HashMap<SNodeReference,MoveNodesDefault.NodeProcessor>());
  MoveNodesDefault.NodeProcessor processor=new MoveNodesDefault.CopyingNodeProcessor(newLocation,project);
  for (  SNode node : ListSequence.fromList(nodesToMove)) {
    MapSequence.fromMap(moveMap).put(node.getReference(),processor);
  }
  doMove(project,moveMap,null);
}
