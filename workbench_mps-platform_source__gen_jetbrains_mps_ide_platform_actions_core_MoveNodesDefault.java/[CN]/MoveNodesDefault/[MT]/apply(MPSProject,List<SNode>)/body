{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    NodeLocation selectedObject,    SModel model){
      return true;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      if (!(newLocation.isValid(project,nodesToMove))) {
        return;
      }
      final Iterable<MoveRefactoringContributor> refactoringBuilders=Sequence.fromIterable(new ExtensionPoint<MoveRefactoringContributor.MoveNodesBuilderFactory>("jetbrains.mps.ide.platform.MoveNodesBuilderEP").getObjects()).select(new ISelector<MoveRefactoringContributor.MoveNodesBuilderFactory,MoveRefactoringContributor>(){
        public MoveRefactoringContributor select(        MoveRefactoringContributor.MoveNodesBuilderFactory it){
          return it.createContributor(new MoveContextImpl(project.getScope()));
        }
      }
).where(new IWhereFilter<MoveRefactoringContributor>(){
        public boolean accept(        MoveRefactoringContributor it){
          return it != null;
        }
      }
);
      final List<SNode> nodesToMoveWithDescendants=ListSequence.fromList(nodesToMove).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SNodeOperations.getNodeDescendants(it,null,true,new SAbstractConcept[]{});
        }
      }
).toListSequence();
      for (      MoveRefactoringContributor builder : Sequence.fromIterable(refactoringBuilders)) {
        builder.willBeMoved(nodesToMoveWithDescendants);
      }
      SearchResults<SNode> searchResults=new SearchResults<SNode>();
      for (      MoveRefactoringContributor builder : Sequence.fromIterable(refactoringBuilders)) {
        searchResults.addAll(builder.getAffectedNodes());
      }
      RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
        public void invoke(        Set<SNode> included){
          newLocation.insertNodes(nodesToMove);
          for (          MoveRefactoringContributor builder : Sequence.fromIterable(refactoringBuilders)) {
            builder.isMoved(nodesToMoveWithDescendants);
          }
          for (          MoveRefactoringContributor builder : Sequence.fromIterable(refactoringBuilders)) {
            builder.commit();
          }
        }
      }
,"Move nodes");
    }
  }
);
}
