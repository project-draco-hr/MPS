{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    NodeLocation selectedObject,    SModel model){
      return true;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      if (!(newLocation.isValid(project,nodesToMove))) {
        return;
      }
      Set<SReference> refUsages=findUsages(project,nodesToMove);
      SearchResults<SNode> searchResults=nodesToRefactoringResult(nodesToMove,SetSequence.fromSet(refUsages).select(new ISelector<SReference,SNode>(){
        public SNode select(        SReference it){
          return it.getSourceNode();
        }
      }
),"reference");
      RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
        public void invoke(        Set<SNode> included){
          Iterable<MoveRefactoringContributor> msb=Sequence.fromIterable(new ExtensionPoint<MoveRefactoringContributor.MoveNodesBuilderFactory>("jetbrains.mps.ide.platform.MoveNodesBuilderEP").getObjects()).select(new ISelector<MoveRefactoringContributor.MoveNodesBuilderFactory,MoveRefactoringContributor>(){
            public MoveRefactoringContributor select(            MoveRefactoringContributor.MoveNodesBuilderFactory it){
              return it.createContributor(new MoveContext(){
                public SearchScope getSearchScope(){
                  return project.getScope();
                }
              }
);
            }
          }
).where(new IWhereFilter<MoveRefactoringContributor>(){
            public boolean accept(            MoveRefactoringContributor it){
              return it != null;
            }
          }
);
          final List<SNode> nodesToMoveWithDescendants=ListSequence.fromList(nodesToMove).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode it){
              return SNodeOperations.getNodeDescendants(it,null,true,new SAbstractConcept[]{});
            }
          }
).toListSequence();
          Sequence.fromIterable(msb).visitAll(new IVisitor<MoveRefactoringContributor>(){
            public void visit(            MoveRefactoringContributor it){
              it.willBeMoved(nodesToMoveWithDescendants);
            }
          }
);
          newLocation.insertNodes(nodesToMove);
          Sequence.fromIterable(msb).visitAll(new IVisitor<MoveRefactoringContributor>(){
            public void visit(            MoveRefactoringContributor it){
              it.isMoved(nodesToMoveWithDescendants);
            }
          }
);
          Sequence.fromIterable(msb).visitAll(new IVisitor<MoveRefactoringContributor>(){
            public void visit(            MoveRefactoringContributor it){
              it.commit();
            }
          }
);
        }
      }
,"Move nodes");
    }
  }
);
}
