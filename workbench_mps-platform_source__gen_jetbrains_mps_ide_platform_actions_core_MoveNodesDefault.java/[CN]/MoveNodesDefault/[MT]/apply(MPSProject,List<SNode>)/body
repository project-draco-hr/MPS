{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  final Wrappers._T<SContainmentLink> role=new Wrappers._T<SContainmentLink>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      role.value=ListSequence.fromList(nodesToMove).first().getContainmentLink();
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    NodeLocation selectedObject,    SModel model){
      return true;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      if (!(newLocation.isValid(project.getRepository(),nodesToMove,role.value))) {
        return;
      }
      final List<MoveRefactoringContributor> selectedBuilders=SelectContributorsDialog.selectContributors(ProjectHelper.toIdeaProject(project),Sequence.fromIterable(new ExtensionPoint<MoveRefactoringContributor.MoveNodesBuilderFactory>("jetbrains.mps.ide.platform.MoveNodesBuilderEP").getObjects()).select(new ISelector<MoveRefactoringContributor.MoveNodesBuilderFactory,MoveRefactoringContributor>(){
        public MoveRefactoringContributor select(        MoveRefactoringContributor.MoveNodesBuilderFactory it){
          return it.createContributor(new MoveContextImpl(project.getScope()));
        }
      }
).where(new IWhereFilter<MoveRefactoringContributor>(){
        public boolean accept(        MoveRefactoringContributor it){
          return it != null;
        }
      }
).toListSequence());
      final List<SNode> nodesToMoveWithDescendants=ListSequence.fromList(nodesToMove).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SNodeOperations.getNodeDescendants(it,null,true,new SAbstractConcept[]{});
        }
      }
).toListSequence();
      for (      MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
        builder.willBeMoved(nodesToMoveWithDescendants);
      }
      SearchResults<SNode> searchResults=new SearchResults<SNode>();
      for (      MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
        searchResults.addAll(builder.getAffectedNodes());
      }
      RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
        public void invoke(        Set<SNode> included){
          final Map<SNode,SNode> copyMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
          List<Boolean> shouldKeepOldNodes=ListSequence.fromList(new ArrayList<Boolean>(ListSequence.fromList(nodesToMoveWithDescendants).count()));
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            List<Boolean> builderRequires=builder.shouldKeepOldNodes(ListSequence.fromList(nodesToMoveWithDescendants).select(new ISelector<SNode,Boolean>(){
              public Boolean select(              SNode it){
                return ListSequence.fromList(nodesToMove).contains(it);
              }
            }
).toListSequence());
            for (int i=0; i < ListSequence.fromList(shouldKeepOldNodes).count(); i++) {
              ListSequence.fromList(shouldKeepOldNodes).setElement(i,ListSequence.fromList(shouldKeepOldNodes).getElement(i) || (ListSequence.fromList(builderRequires).getElement(i)));
            }
          }
          List<SNode> copied=CopyUtil.copyAndPreserveId(nodesToMove,copyMap);
{
            Iterator<SNode> oldNode_it=ListSequence.fromList(nodesToMove).iterator();
            Iterator<Boolean> shoudKeep_it=ListSequence.fromList(shouldKeepOldNodes).iterator();
            SNode oldNode_var;
            boolean shoudKeep_var;
            while (oldNode_it.hasNext() && shoudKeep_it.hasNext()) {
              oldNode_var=oldNode_it.next();
              shoudKeep_var=shoudKeep_it.next();
              if (!(shoudKeep_var)) {
                SNodeOperations.detachNode(oldNode_var);
              }
            }
          }
          newLocation.insertNodes(copied,role.value);
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            builder.isMoved(ListSequence.fromList(nodesToMoveWithDescendants).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return MapSequence.fromMap(copyMap).get(it);
              }
            }
).toListSequence());
          }
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            builder.commit();
          }
        }
      }
,"Move nodes");
    }
  }
);
}
