{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  final Wrappers._T<SContainmentLink> role=new Wrappers._T<SContainmentLink>();
  final Wrappers._T<List<SAbstractConcept>> movingNodeConcepts=new Wrappers._T<List<SAbstractConcept>>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
      role.value=ListSequence.fromList(nodesToMove).first().getContainmentLink();
      movingNodeConcepts.value=ListSequence.fromList(nodesToMove).select(new ISelector<SNode,SAbstractConcept>(){
        public SAbstractConcept select(        SNode it){
          return ((SAbstractConcept)SNodeOperations.getConcept(it));
        }
      }
).toListSequence();
    }
  }
);
  final SContainmentLink finalRole=role.value;
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter(){
    public String getErrorMessage(    NodeLocation selectedObject){
      return "Choose model or node that can contain moving nodes";
    }
    public boolean check(    final NodeLocation selectedObject,    SModel model){
      if (selectedObject == null) {
        return false;
      }
      if (selectedObject instanceof NodeLocation.NodeLocationChild) {
        final Wrappers._T<Collection<SContainmentLink>> containmentLinks=new Wrappers._T<Collection<SContainmentLink>>();
        project.getRepository().getModelAccess().runReadAction(new Runnable(){
          public void run(){
            containmentLinks.value=((NodeLocation.NodeLocationChild)selectedObject).getNode().resolve(project.getRepository()).getConcept().getContainmentLinks();
          }
        }
);
        if (finalRole != null && CollectionSequence.fromCollection(containmentLinks.value).contains(finalRole)) {
          ((NodeLocation.NodeLocationChild)selectedObject).setRole(finalRole);
          return true;
        }
        Iterable<SContainmentLink> applicableLinks=CollectionSequence.fromCollection(containmentLinks.value).where(new IWhereFilter<SContainmentLink>(){
          public boolean accept(          final SContainmentLink link){
            return ListSequence.fromList(movingNodeConcepts.value).all(new IWhereFilter<SAbstractConcept>(){
              public boolean accept(              SAbstractConcept cncpt){
                return cncpt.isSubConceptOf(link.getTargetConcept());
              }
            }
);
          }
        }
);
        if (Sequence.fromIterable(applicableLinks).count() == 1) {
          ((NodeLocation.NodeLocationChild)selectedObject).setRole(Sequence.fromIterable(applicableLinks).first());
          return true;
        }
        return false;
      }
 else {
        return true;
      }
    }
  }
);
  if (newLocation == null) {
    return;
  }
  Map<SNode,MoveNodesDefault.NodeProcessor> moveMap=MapSequence.fromMap(new HashMap<SNode,MoveNodesDefault.NodeProcessor>());
  MoveNodesDefault.NodeProcessor processor=new MoveNodesDefault.CopyingNodeProcessor(newLocation,project);
  for (  SNode node : ListSequence.fromList(nodesToMove)) {
    MapSequence.fromMap(moveMap).put(node,processor);
  }
  doMove(project,moveMap,null);
}
