{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    NodeLocation selectedObject,    SModel model){
      return true;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      if (!(newLocation.isValid(project,nodesToMove))) {
        return;
      }
      Set<SReference> refUsages=findUsages(project,nodesToMove);
      SearchResults<SNode> searchResults=nodesToRefactoringResult(nodesToMove,SetSequence.fromSet(refUsages).select(new ISelector<SReference,SNode>(){
        public SNode select(        SReference it){
          return it.getSourceNode();
        }
      }
),"reference");
      RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
        public void invoke(        Set<SNode> included){
          final MoveNodesBuilder moveNodesBuilder=Sequence.fromIterable(new ExtensionPoint<MoveNodesBuilder.MoveNodesBuilderProvider>("jetbrains.mps.ide.platform.MoveNodesBuilder").getObjects()).select(new ISelector<MoveNodesBuilder.MoveNodesBuilderProvider,MoveNodesBuilder>(){
            public MoveNodesBuilder select(            MoveNodesBuilder.MoveNodesBuilderProvider it){
              return it.createMoveNodesBuilder(currentModel.value.getModule(),project);
            }
          }
).where(new IWhereFilter<MoveNodesBuilder>(){
            public boolean accept(            MoveNodesBuilder it){
              return it != null;
            }
          }
).foldLeft((MoveNodesBuilder)null,new ILeftCombinator<MoveNodesBuilder,MoveNodesBuilder>(){
            public MoveNodesBuilder combine(            MoveNodesBuilder s,            MoveNodesBuilder it){
              return MoveNodesBuilder.CompositeBuilder.compose(s,it);
            }
          }
);
          final List<MoveNodesBuilder.IncompleteMoveNode> incompleteMoveNodes=ListSequence.fromList(nodesToMove).select(new ISelector<SNode,MoveNodesBuilder.IncompleteMoveNode>(){
            public MoveNodesBuilder.IncompleteMoveNode select(            SNode it){
              return moveNodesBuilder.moveNode(it);
            }
          }
).toListSequence();
          moveNodesBuilder.commit(new Runnable(){
            public void run(){
              newLocation.insertNodes(nodesToMove);
{
                Iterator<SNode> node_it=ListSequence.fromList(nodesToMove).iterator();
                Iterator<MoveNodesBuilder.IncompleteMoveNode> inc_it=ListSequence.fromList(incompleteMoveNodes).iterator();
                SNode node_var;
                MoveNodesBuilder.IncompleteMoveNode inc_var;
                while (node_it.hasNext() && inc_it.hasNext()) {
                  node_var=node_it.next();
                  inc_var=inc_it.next();
                  inc_var.setTarget(node_var);
                }
              }
            }
          }
);
        }
      }
,"Move nodes");
    }
  }
);
}
