{
  final Wrappers._T<SModel> currentModel=new Wrappers._T<SModel>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      currentModel.value=SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    }
  }
);
  final NodeLocation newLocation=MoveNodesDialog.getSelectedObject(project.getProject(),currentModel.value,new MoveNodesDialog.ModelFilter("Choose Node or Model"){
    @Override public boolean check(    NodeLocation selectedObject,    SModel model){
      return true;
    }
  }
);
  if (newLocation == null) {
    return;
  }
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : ListSequence.fromList(nodesToMove)) {
        if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
          return;
        }
      }
      if (!(newLocation.isValid(project,nodesToMove))) {
        return;
      }
      final Set<SReference> refUsages=findUsages(project,nodesToMove);
      SearchResults<SNode> searchResults=nodesToRefactoringResult(nodesToMove,SetSequence.fromSet(refUsages).select(new ISelector<SReference,SNode>(){
        public SNode select(        SReference it){
          return it.getSourceNode();
        }
      }
),"reference");
      RefactoringViewUtil.refactor(project,searchResults,new _FunctionTypes._void_P1_E0<Set<SNode>>(){
        public void invoke(        final Set<SNode> included){
          Iterable<MoveNodesBuilder> moveNodesBuilders=Sequence.fromIterable(new ExtensionPoint<MoveNodesBuilder.MoveNodesBuilderProvider>("jetbrains.mps.ide.platform.MoveNodesBuilder").getObjects()).select(new ISelector<MoveNodesBuilder.MoveNodesBuilderProvider,MoveNodesBuilder>(){
            public MoveNodesBuilder select(            MoveNodesBuilder.MoveNodesBuilderProvider it){
              return it.createMoveNodesBuilder(currentModel.value.getModule());
            }
          }
).where(new IWhereFilter<MoveNodesBuilder>(){
            public boolean accept(            MoveNodesBuilder it){
              return it != null;
            }
          }
).toListSequence();
          Map<SReference,SNode> usagesMap=classifyUsages(SetSequence.fromSet(refUsages).where(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return SetSequence.fromSet(included).contains(it.getSourceNode());
            }
          }
));
          List<List<MoveNodesBuilder.NodeReference>> oldNodeRefs=ListSequence.fromList(new ArrayList<List<MoveNodesBuilder.NodeReference>>());
          for (          final MoveNodesBuilder builder : Sequence.fromIterable(moveNodesBuilders)) {
            ListSequence.fromList(oldNodeRefs).addElement(ListSequence.fromList(nodesToMove).select(new ISelector<SNode,MoveNodesBuilder.NodeReference>(){
              public MoveNodesBuilder.NodeReference select(              SNode it){
                return builder.createReference(it);
              }
            }
).toListSequence());
          }
          newLocation.insertNodes(nodesToMove);
          List<List<MoveNodesBuilder.NodeReference>> newNodeRefs=ListSequence.fromList(new ArrayList<List<MoveNodesBuilder.NodeReference>>());
          for (          final MoveNodesBuilder builder : Sequence.fromIterable(moveNodesBuilders)) {
            ListSequence.fromList(newNodeRefs).addElement(ListSequence.fromList(nodesToMove).select(new ISelector<SNode,MoveNodesBuilder.NodeReference>(){
              public MoveNodesBuilder.NodeReference select(              SNode it){
                return builder.createReference(it);
              }
            }
).toListSequence());
          }
{
            Iterator<MoveNodesBuilder> builder_it=Sequence.fromIterable(moveNodesBuilders).iterator();
            Iterator<List<MoveNodesBuilder.NodeReference>> oldNR_it=ListSequence.fromList(oldNodeRefs).iterator();
            Iterator<List<MoveNodesBuilder.NodeReference>> newNR_it=ListSequence.fromList(newNodeRefs).iterator();
            MoveNodesBuilder builder_var;
            List<MoveNodesBuilder.NodeReference> oldNR_var;
            List<MoveNodesBuilder.NodeReference> newNR_var;
            while (builder_it.hasNext() && oldNR_it.hasNext() && newNR_it.hasNext()) {
              builder_var=builder_it.next();
              oldNR_var=oldNR_it.next();
              newNR_var=newNR_it.next();
{
                Iterator<MoveNodesBuilder.NodeReference> from_it=ListSequence.fromList(oldNR_var).iterator();
                Iterator<MoveNodesBuilder.NodeReference> to_it=ListSequence.fromList(newNR_var).iterator();
                MoveNodesBuilder.NodeReference from_var;
                MoveNodesBuilder.NodeReference to_var;
                while (from_it.hasNext() && to_it.hasNext()) {
                  from_var=from_it.next();
                  to_var=to_it.next();
                  builder_var.moveNode(from_var,to_var);
                }
              }
            }
          }
          for (          IMapping<SReference,SNode> mapping : MapSequence.fromMap(usagesMap)) {
            updateUsage(mapping.key(),mapping.value());
          }
        }
      }
,"Move nodes");
    }
  }
);
}
