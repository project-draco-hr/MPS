{
  final List<SContainmentLink> roles=ListSequence.fromList(new ArrayList<SContainmentLink>(ListSequence.fromList(toMove).count()));
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      ToMoveItem nodesToMove : ListSequence.fromList(toMove)) {
        for (        SNode node : ListSequence.fromList(nodesToMove.nodes())) {
          if (!(SNodeUtil.isAccessible(node,project.getRepository()))) {
            throw new IllegalArgumentException();
          }
        }
        final SContainmentLink role=ListSequence.fromList(nodesToMove.nodes()).first().getContainmentLink();
        if (!(ListSequence.fromList(nodesToMove.nodes()).all(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return eq_92fyi8_a0a0a0a0a0a2a0a0a0a0a3a41(it.getContainmentLink(),role);
          }
        }
))) {
          throw new IllegalArgumentException();
        }
        ListSequence.fromList(roles).addElement(role);
        if (!(nodesToMove.newLocation().isValid(project.getRepository(),nodesToMove.nodes(),role))) {
          throw new IllegalArgumentException();
        }
      }
    }
  }
);
  final List<MoveRefactoringContributor> selectedBuilders=SelectContributorsDialog.selectContributors(ProjectHelper.toIdeaProject(project),Sequence.fromIterable(new ExtensionPoint<MoveRefactoringContributor.MoveNodesBuilderFactory>("jetbrains.mps.ide.platform.MoveNodesBuilderEP").getObjects()).select(new ISelector<MoveRefactoringContributor.MoveNodesBuilderFactory,MoveRefactoringContributor>(){
    public MoveRefactoringContributor select(    MoveRefactoringContributor.MoveNodesBuilderFactory it){
      return it.createContributor(new MoveContextImpl(project.getScope()));
    }
  }
).where(new IWhereFilter<MoveRefactoringContributor>(){
    public boolean accept(    MoveRefactoringContributor it){
      return it != null;
    }
  }
).toListSequence());
  if (selectedBuilders == null) {
    return;
  }
  final Wrappers._T<List<SNode>> nodesToMoveWithDescendants=new Wrappers._T<List<SNode>>();
  final Wrappers._T<SearchResults<SNode>> searchResults=new Wrappers._T<SearchResults<SNode>>();
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      nodesToMoveWithDescendants.value=ListSequence.fromList(toMove).translate(new ITranslator2<ToMoveItem,SNode>(){
        public Iterable<SNode> translate(        ToMoveItem it){
          return it.nodes();
        }
      }
).translate(new ITranslator2<SNode,SNode>(){
        public Iterable<SNode> translate(        SNode it){
          return SNodeOperations.getNodeDescendants(it,null,true,new SAbstractConcept[]{});
        }
      }
).toListSequence();
      for (      MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
        builder.willBeMoved(nodesToMoveWithDescendants.value);
      }
      searchResults.value=new SearchResults<SNode>();
      for (      MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
        searchResults.value.addAll(builder.getAffectedNodes());
      }
    }
  }
);
  final Runnable refactorAction=new Runnable(){
    public void run(){
      project.getRepository().getModelAccess().executeCommand(new Runnable(){
        public void run(){
          if (callBack != null) {
            callBack.run();
          }
          List<Boolean> shouldKeepOldNodes=ListSequence.fromList(new ArrayList<Boolean>(ListSequence.fromList(nodesToMoveWithDescendants.value).count()));
          for (          SNode i : ListSequence.fromList(nodesToMoveWithDescendants.value)) {
            ListSequence.fromList(shouldKeepOldNodes).addElement(false);
          }
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            List<Boolean> builderRequires=builder.shouldKeepOldNodes(ListSequence.fromList(nodesToMoveWithDescendants.value).select(new ISelector<SNode,Boolean>(){
              public Boolean select(              SNode it){
                return ListSequence.fromList(toMove).translate(new ITranslator2<ToMoveItem,SNode>(){
                  public Iterable<SNode> translate(                  ToMoveItem it){
                    return it.nodes();
                  }
                }
).contains(it);
              }
            }
).toListSequence());
            for (int i=0; i < ListSequence.fromList(nodesToMoveWithDescendants.value).count(); i++) {
              ListSequence.fromList(shouldKeepOldNodes).setElement(i,ListSequence.fromList(shouldKeepOldNodes).getElement(i) || (ListSequence.fromList(builderRequires).getElement(i)));
            }
          }
          final Map<SNode,SNode> copyMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
          List<List<SNode>> copied=ListSequence.fromList(new ArrayList<List<SNode>>(ListSequence.fromList(toMove).count()));
          for (          ToMoveItem nodesToMove : ListSequence.fromList(toMove)) {
            ListSequence.fromList(copied).addElement(CopyUtil.copyAndPreserveId(nodesToMove.nodes(),copyMap));
          }
{
            Iterator<SNode> oldNode_it=ListSequence.fromList(nodesToMoveWithDescendants.value).iterator();
            Iterator<Boolean> shoudKeep_it=ListSequence.fromList(shouldKeepOldNodes).iterator();
            SNode oldNode_var;
            boolean shoudKeep_var;
            while (oldNode_it.hasNext() && shoudKeep_it.hasNext()) {
              oldNode_var=oldNode_it.next();
              shoudKeep_var=shoudKeep_it.next();
              if (!(shoudKeep_var)) {
                SNodeOperations.detachNode(oldNode_var);
              }
            }
          }
{
            Iterator<ToMoveItem> nodesToMove_it=ListSequence.fromList(toMove).iterator();
            Iterator<SContainmentLink> role_it=ListSequence.fromList(roles).iterator();
            Iterator<List<SNode>> copiedGroup_it=ListSequence.fromList(copied).iterator();
            ToMoveItem nodesToMove_var;
            SContainmentLink role_var;
            List<SNode> copiedGroup_var;
            while (nodesToMove_it.hasNext() && role_it.hasNext() && copiedGroup_it.hasNext()) {
              nodesToMove_var=nodesToMove_it.next();
              role_var=role_it.next();
              copiedGroup_var=copiedGroup_it.next();
              nodesToMove_var.newLocation().insertNodes(copiedGroup_var,role_var);
            }
          }
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            builder.isMoved(ListSequence.fromList(nodesToMoveWithDescendants.value).select(new ISelector<SNode,SNode>(){
              public SNode select(              SNode it){
                return MapSequence.fromMap(copyMap).get(it);
              }
            }
).toListSequence());
          }
          for (          MoveRefactoringContributor builder : ListSequence.fromList(selectedBuilders)) {
            builder.commit();
          }
        }
      }
);
    }
  }
;
  if (searchResults.value.getSearchResults().isEmpty()) {
    refactorAction.run();
  }
 else {
    RefactoringAccessEx.getInstance().showRefactoringView(project.getProject(),new RefactoringViewAction(){
      public void performAction(      RefactoringViewItem refactoringViewItem){
        refactorAction.run();
        refactoringViewItem.close();
      }
    }
,searchResults.value,false,"Move nodes");
  }
}
