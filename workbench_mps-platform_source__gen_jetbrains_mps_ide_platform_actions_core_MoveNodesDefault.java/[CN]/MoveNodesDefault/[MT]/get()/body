{
  return new ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>(){
    @Override public Collection<ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>> getOverridden(){
      List<ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>> result=ListSequence.fromList(new ArrayList<ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>>());
      Iterable<ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>> extensions=getAllExtensionObjects();
      return result;
    }
    public Iterable<ExtensionFunction<Tuples._2<List<SNode>,MPSProject>,Void>> getAllExtensionObjects(){
      return ExtensionRegistry.getInstance().getObjects(new ExtensionFunctionPoint<Tuples._2<List<SNode>,MPSProject>,Void>(getExtensionPointId()));
    }
    public boolean applicable(    Tuples._2<List<SNode>,MPSProject> arg){
      return true;
    }
    public Void apply(    Tuples._2<List<SNode>,MPSProject> arg){
      final List<SNode> target=arg._0();
      final MPSProject project=arg._1();
      MoveNodesExecute.execute(project,target,new MoveNodesExecute.ExecuteRefactoring(){
        public void run(        Object newLocation){
          RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.lang.core.refactorings.MoveNodes",Arrays.asList("target"),Arrays.asList(newLocation),target,project));
        }
      }
);
      return null;
    }
  }
;
}
