{
  Element rootElement=new Element(ModelPersistence.MODEL);
  rootElement.setAttribute(ModelPersistence.MODEL_UID,sourceModel.getReference().toString());
  Element persistenceElement=new Element(ModelPersistence.PERSISTENCE);
  persistenceElement.setAttribute(ModelPersistence.PERSISTENCE_VERSION,getModelPersistenceVersion() + "");
  rootElement.addContent(persistenceElement);
  if (sourceModel instanceof DefaultSModel) {
    saveRefactorings(rootElement,(DefaultSModel)sourceModel);
  }
  Set<String> writtenAspects=new HashSet<String>();
  for (  SModuleReference languageNamespace : new SModelLegacy(sourceModel).importedLanguages()) {
    Element languageElem=new Element(ModelPersistence.LANGUAGE);
    languageElem.setAttribute(ModelPersistence.NAMESPACE,languageNamespace.toString());
    rootElement.addContent(languageElem);
  }
  for (  ImportElement aspectElement : sourceModel.getImplicitImportsSupport().getAdditionalModelVersions()) {
    SModelReference modelReference=aspectElement.getModelReference();
    if (modelReference == null)     continue;
    if (!writtenAspects.contains(modelReference.toString())) {
      writtenAspects.add(modelReference.toString());
      writeAspect(sourceModel,rootElement,modelReference);
    }
  }
  for (  SModuleReference languageNamespace : sourceModel.engagedOnGenerationLanguages()) {
    Element languageElem=new Element(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);
    languageElem.setAttribute(ModelPersistence.NAMESPACE,languageNamespace.toString());
    rootElement.addContent(languageElem);
  }
  for (  SModuleReference devkitNamespace : sourceModel.importedDevkits()) {
    Element devkitElem=new Element(ModelPersistence.DEVKIT);
    devkitElem.setAttribute(ModelPersistence.NAMESPACE,devkitNamespace.toString());
    rootElement.addContent(devkitElem);
  }
  Element maxRefID=new Element(ModelPersistence.MAX_IMPORT_INDEX);
  rootElement.addContent(maxRefID);
  int maxImport=0;
  for (  ImportElement importElement : sourceModel.importedModels()) {
    maxImport=Math.max(maxImport,importElement.getReferenceID());
  }
  for (  ImportElement importElement : sourceModel.importedModels()) {
    Element importElem=new Element(ModelPersistence.IMPORT_ELEMENT);
    if (importElement.getReferenceID() < 0) {
      importElement.setReferenceID(++maxImport);
    }
    importElem.setAttribute(ModelPersistence.MODEL_IMPORT_INDEX,"" + importElement.getReferenceID());
    SModelReference modelReference=importElement.getModelReference();
    importElem.setAttribute(ModelPersistence.MODEL_UID,modelReference.toString());
    importElem.setAttribute(ModelPersistence.VERSION,"" + importElement.getUsedVersion());
    org.jetbrains.mps.openapi.model.SModel importedModelDescriptor=SModelRepository.getInstance().getModelDescriptor(modelReference);
    rootElement.addContent(importElem);
  }
  maxRefID.setAttribute(ModelPersistence.VALUE,"" + maxImport);
  VisibleModelElements visibleModelElements=new DOMVisibleModelElements(rootElement);
  for (  SNode root : sourceModel.getRootNodes()) {
    saveNode(rootElement,root,visibleModelElements);
  }
  Document document=new Document();
  document.setRootElement(rootElement);
  return document;
}
