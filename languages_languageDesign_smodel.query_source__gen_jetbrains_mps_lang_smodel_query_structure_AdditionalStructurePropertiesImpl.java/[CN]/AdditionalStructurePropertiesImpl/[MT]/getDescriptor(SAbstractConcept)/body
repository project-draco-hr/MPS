{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0gb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractPrintExpression_old;
      }
    break;
case 1:
  if (true) {
    return props_BLCommand_old;
  }
break;
case 2:
if (true) {
return props_BLExpression_old;
}
break;
case 3:
if (true) {
return props_CustomScope;
}
break;
case 4:
if (true) {
return props_ExpressionHelpProvider;
}
break;
case 5:
if (true) {
return props_GlobalScope_old;
}
break;
case 6:
if (true) {
return props_HelpProvider;
}
break;
case 7:
if (true) {
return props_InstancesExpression;
}
break;
case 8:
if (true) {
return props_ModelScope;
}
break;
case 9:
if (true) {
return props_ModelsExpression;
}
break;
case 10:
if (true) {
return props_ModulesExpression;
}
break;
case 11:
if (true) {
return props_ModulesScope;
}
break;
case 12:
if (true) {
return props_NodesExpression;
}
break;
case 13:
if (true) {
return props_OperationHelpProvider;
}
break;
case 14:
if (true) {
return props_PrintExpression_old;
}
break;
case 15:
if (true) {
return props_PrintNodeExpression_old;
}
break;
case 16:
if (true) {
return props_PrintNodeReferenceExpression_old;
}
break;
case 17:
if (true) {
return props_PrintSequenceExpression_old;
}
break;
case 18:
if (true) {
return props_PrintTextExpression_old;
}
break;
case 19:
if (true) {
return props_ProjectExpression_old;
}
break;
case 20:
if (true) {
return props_ProjectScope_old;
}
break;
case 21:
if (true) {
return props_QueryExpression;
}
break;
case 22:
if (true) {
return props_QueryParameter;
}
break;
case 23:
if (true) {
return props_QueryParameterIncludeReadOnly;
}
break;
case 24:
if (true) {
return props_QueryParameterList;
}
break;
case 25:
if (true) {
return props_QueryParameterScope;
}
break;
case 26:
if (true) {
return props_ReferencesExpression;
}
break;
case 27:
if (true) {
return props_ScopeParameter;
}
break;
case 28:
if (true) {
return props_ShowExpression_old;
}
break;
case 29:
if (true) {
return props_UsagesExpression;
}
break;
case 30:
if (true) {
return props_WithStatement;
}
break;
default :
}
}
throw new IllegalStateException();
}
