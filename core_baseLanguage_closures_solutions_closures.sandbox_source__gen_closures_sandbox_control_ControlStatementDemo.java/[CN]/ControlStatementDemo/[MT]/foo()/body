{
  System.out.println("foo> entering");
{
    _UnrestrictedClosures._void_void_P0_E0 __closure__=new _UnrestrictedClosures._void_void_P0_E0(new _UnrestrictedFunctionTypes._void_void_P0_E0(){
      public Result<Object,Object> invokeUnrestricted(){
{
          _UnrestrictedClosures._void_void_P0_E0 __closure__=new _UnrestrictedClosures._void_void_P0_E0(new _UnrestrictedFunctionTypes._void_void_P0_E0(){
            public Result<Object,Object> invokeUnrestricted(){
{
                _UnrestrictedClosures._void_void_P0_E0 __closure__=new _UnrestrictedClosures._void_void_P0_E0(new _UnrestrictedFunctionTypes._void_void_P0_E0(){
                  public Result<Object,Object> invokeUnrestricted(){
                    System.out.println("async> Owning the monitor");
                    LOCK[0]=true;
                    try {
                      LOCK.wait();
                    }
 catch (                    InterruptedException ie) {
                    }
                    System.out.println("async> Woken up");
                    return Result.TERMINATE_VOID();
                  }
                }
);
                withLock(LOCK,__closure__);
                Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
default :
                  break;
              }
            }
            return Result.TERMINATE_VOID();
          }
        }
);
        async(__closure__);
        Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
default :
          break;
      }
    }
    return Result.TERMINATE_VOID();
  }
}
);
withLock(LOCK,__closure__);
Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
default :
  break;
}
}
label3691_0: while (true) {
{
_UnrestrictedClosures._void_void_P0_E0 __closure__=new _UnrestrictedClosures._void_void_P0_E0(new _UnrestrictedFunctionTypes._void_void_P0_E0(){
  public Result<Object,Object> invokeUnrestricted(){
    if (LOCK[0]) {
      System.out.println("sync> Notifying");
      LOCK.notifyAll();
      System.out.println("sync> Done");
      return Result.BREAK("label3691_0");
    }
    return Result.TERMINATE_VOID();
  }
}
);
withLock(LOCK,__closure__);
Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
case BREAK:
  if ("label3691_0".equals(__result__.getBreakLabel())) {
    break label3691_0;
  }
break;
default :
break;
}
}
}
{
_UnrestrictedClosures._void_terminate_P0_E0<Integer> __closure__=new _UnrestrictedClosures._void_terminate_P0_E0<Integer>(new _UnrestrictedFunctionTypes._return_terminate_P0_E0<Integer,Integer>(){
public Result<Integer,Integer> invokeUnrestricted(){
if (false) {
return Result.RETURN(1);
}
return Result.TERMINATE(42);
}
}
);
bar(1,__closure__);
Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
case RETURN_VALUE:
return __result__.returnInt();
default :
break;
}
}
{
_UnrestrictedClosures._void_terminate_P0_E0<Integer> __closure__=new _UnrestrictedClosures._void_terminate_P0_E0<Integer>(new _UnrestrictedFunctionTypes._return_terminate_P0_E0<Integer,Integer>(){
public Result<Integer,Integer> invokeUnrestricted(){
if (false) {
return Result.RETURN(2);
}
return Result.TERMINATE(2);
}
}
);
bar(1,__closure__);
Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
case RETURN_VALUE:
return __result__.returnInt();
default :
break;
}
}
Map<String,Integer> map=MapSequence.<String,Integer>fromKeysArray("a","b","c").withValues(1,2,3);
{
_UnrestrictedClosures._void_void_P2_E0 __closure__=new _UnrestrictedClosures._void_void_P2_E0(new _UnrestrictedFunctionTypes._void_void_P2_E0<String,Integer>(){
public Result<Object,Object> invokeUnrestricted(String k,Integer v){
System.out.println(k + "=>" + v);
return Result.TERMINATE_VOID();
}
}
);
forEachEntry(map,__closure__);
Result<?,Object> __result__=__closure__.getAndClearLastResult();
switch (__result__.getOutcome()) {
default :
break;
}
}
System.out.println("foo> leaving");
return -1;
}
