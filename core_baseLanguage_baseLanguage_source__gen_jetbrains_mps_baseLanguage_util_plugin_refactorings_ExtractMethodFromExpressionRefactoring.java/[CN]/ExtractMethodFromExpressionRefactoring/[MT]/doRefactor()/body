{
  SNode typeNode=SNodeOperations.copyNode(this.getMethodType());
  SNode body=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null);
  Map<SNode,SNode> mapping=MapSequence.fromMap(new HashMap<SNode,SNode>());
  if (SNodeOperations.isInstanceOf(typeNode,"jetbrains.mps.baseLanguage.structure.VoidType")) {
    SNode expressionStatement=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null);
    SLinkOperations.setTarget(expressionStatement,"expression",SNodeOperations.cast(CopyUtil.copy(this.myExpression,mapping,true),"jetbrains.mps.baseLanguage.structure.Expression"),true);
    SLinkOperations.addChild(body,"statement",expressionStatement);
  }
 else {
    SNode ret=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement",null);
    SLinkOperations.setTarget(ret,"expression",SNodeOperations.cast(CopyUtil.copy(this.myExpression,mapping,true),"jetbrains.mps.baseLanguage.structure.Expression"),true);
    SLinkOperations.addChild(body,"statement",ret);
  }
  List<SNode> params=new ArrayList<SNode>();
  Map<SNode,SNode> inputToParams=this.createInputParameters(body,params);
  this.replaceInputVariablesWithParameters(body,inputToParams,mapping);
  SNode newMethod=this.createNewMethod(typeNode,params,body);
  this.addMethod(newMethod);
  SNode methodCall=this.createMethodCall(newMethod);
  SNodeOperations.replaceWithAnother(this.myExpression,methodCall);
  return newMethod;
}
