{
  this.addNodeById("7793057097608406464");
  this.addNodeById("7793057097608416301");
  ExtractMethodRefactoringParameters params=new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608406470"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement"),SNodeOperations.cast(this.getNodeById("7793057097608406474"),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
  params.setName("printTwo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  SNode res=ref.doRefactor();
  for (  MethodMatch match : ListSequence.fromList(ref.getMatches())) {
    ref.replaceMatch(match,res);
  }
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608406465"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7793057097608416325"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
