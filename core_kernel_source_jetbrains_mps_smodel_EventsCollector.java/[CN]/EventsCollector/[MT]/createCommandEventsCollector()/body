{
  return new SModelListener(){
    @Override public void languageAdded(    SModelLanguageEvent event){
      listenerInvoked(event);
    }
    @Override public void languageRemoved(    SModelLanguageEvent event){
      listenerInvoked(event);
    }
    @Override public void importAdded(    SModelImportEvent event){
      listenerInvoked(event);
    }
    @Override public void importRemoved(    SModelImportEvent event){
      listenerInvoked(event);
    }
    @Override public void devkitAdded(    SModelDevKitEvent event){
      listenerInvoked(event);
    }
    @Override public void devkitRemoved(    SModelDevKitEvent event){
      listenerInvoked(event);
    }
    @Override public void rootAdded(    SModelRootEvent event){
      listenerInvoked(event);
    }
    @Override public void rootRemoved(    SModelRootEvent event){
      listenerInvoked(event);
    }
    @Override public void beforeRootRemoved(    SModelRootEvent event){
      listenerInvoked(event);
    }
    @Override public void beforeModelRenamed(    SModelRenamedEvent event){
      listenerInvoked(event);
    }
    @Override public void modelRenamed(    SModelRenamedEvent event){
      listenerInvoked(event);
    }
    @Override public void beforeModelFileChanged(    SModelFileChangedEvent event){
      listenerInvoked(event);
    }
    @Override public void modelFileChanged(    SModelFileChangedEvent event){
      listenerInvoked(event);
    }
    @Override public void propertyChanged(    SModelPropertyEvent event){
      listenerInvoked(event);
    }
    @Override public void childAdded(    SModelChildEvent event){
      listenerInvoked(event);
    }
    @Override public void childRemoved(    SModelChildEvent event){
      listenerInvoked(event);
    }
    @Override public void beforeChildRemoved(    SModelChildEvent event){
    }
    @Override public void referenceAdded(    SModelReferenceEvent event){
      listenerInvoked(event);
    }
    @Override public void referenceRemoved(    SModelReferenceEvent event){
      listenerInvoked(event);
    }
    @Override public void modelSaved(    SModelDescriptor sm){
    }
    @Override public void modelLoadingStateChanged(    SModelDescriptor sm,    ModelLoadingState oldState,    ModelLoadingState newState){
    }
    @Override public void beforeModelDisposed(    SModel sm){
    }
    @NotNull @Override public SModelListenerPriority getPriority(){
      return SModelListenerPriority.CLIENT;
    }
    private void listenerInvoked(    SModelEvent event){
      checkDisposed();
      if (event != null) {
        if (!myIsInCommand && !(event instanceof SModelFileChangedEvent)) {
          throw new IllegalStateException("Event outside of a command");
        }
        myEvents.add(event);
      }
    }
  }
;
}
