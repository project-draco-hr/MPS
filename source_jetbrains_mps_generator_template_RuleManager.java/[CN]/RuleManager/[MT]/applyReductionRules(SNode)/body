{
  INodeAdapter reductionRule;
  boolean wasChanged=myGenerator.isChanged();
  try {
    reductionRule=findReductionRule(inputNode);
    if (reductionRule != null) {
      myGenerator.setChanged(true);
      List<SNode> outputNodes=GeneratorUtil.applyReductionRule(inputNode,reductionRule,myGenerator);
      SNode oldOutputNode=myGenerator.findOutputNodeById(inputNode.getSNodeId());
      if (outputNodes.size() == 1) {
        myGenerator.addCopiedOutputNodeForInputNode(inputNode,outputNodes.get(0));
      }
      oldOutputNode.getParent().replaceChild(oldOutputNode,outputNodes);
      return;
    }
  }
 catch (  DismissTopMappingRuleException ex) {
    myGenerator.setChanged(wasChanged);
  }
  for (  SNode childNode : inputNode.getChildren()) {
    myGenerator.getGeneratorSessionContext().getGenerationTracer().pushInputNode(childNode);
    applyReductionRules(childNode);
  }
}
