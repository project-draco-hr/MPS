{
  if ("jetbrains.mps.bash.structure.CommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommandList"));
  }
  if ("jetbrains.mps.bash.structure.InputLines".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.InputLines"));
  }
  if ("jetbrains.mps.bash.structure.ShellScript".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ShellScript"));
  }
  if ("jetbrains.mps.bash.structure.SimpleCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new SimpleCommand_Constraints());
  }
  if ("jetbrains.mps.bash.structure.WordList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.WordList"));
  }
  if ("jetbrains.mps.bash.structure.AsyncOperator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AsyncOperator"));
  }
  if ("jetbrains.mps.bash.structure.CommandTerminator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommandTerminator"));
  }
  if ("jetbrains.mps.bash.structure.SemicolonTerminator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SemicolonTerminator"));
  }
  if ("jetbrains.mps.bash.structure.AsyncTerminator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AsyncTerminator"));
  }
  if ("jetbrains.mps.bash.structure.AbstractLoopCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AbstractLoopCommand"));
  }
  if ("jetbrains.mps.bash.structure.UntilLoopCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UntilLoopCommand"));
  }
  if ("jetbrains.mps.bash.structure.AbstractCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AbstractCommand"));
  }
  if ("jetbrains.mps.bash.structure.WhileLoopCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.WhileLoopCommand"));
  }
  if ("jetbrains.mps.bash.structure.ForeachCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ForeachCommand"));
  }
  if ("jetbrains.mps.bash.structure.VariableNameDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new VariableNameDeclaration_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ForCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ForCommand"));
  }
  if ("jetbrains.mps.bash.structure.ArithmeticExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ArithmeticExpression"));
  }
  if ("jetbrains.mps.bash.structure.IfCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IfCommand"));
  }
  if ("jetbrains.mps.bash.structure.ElifCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ElifCommand"));
  }
  if ("jetbrains.mps.bash.structure.CaseClause".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CaseClause"));
  }
  if ("jetbrains.mps.bash.structure.CaseCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CaseCommand"));
  }
  if ("jetbrains.mps.bash.structure.DoubleSemicolon".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DoubleSemicolon"));
  }
  if ("jetbrains.mps.bash.structure.CaseTerminator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CaseTerminator"));
  }
  if ("jetbrains.mps.bash.structure.SemicolonEt".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SemicolonEt"));
  }
  if ("jetbrains.mps.bash.structure.DoubleSemicolonEt".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DoubleSemicolonEt"));
  }
  if ("jetbrains.mps.bash.structure.SelectCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SelectCommand"));
  }
  if ("jetbrains.mps.bash.structure.GroupingCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GroupingCommand"));
  }
  if ("jetbrains.mps.bash.structure.BraceGrouping".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BraceGrouping"));
  }
  if ("jetbrains.mps.bash.structure.BracketGrouping".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BracketGrouping"));
  }
  if ("jetbrains.mps.bash.structure.BinaryArithmeticExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BinaryArithmeticExpression"));
  }
  if ("jetbrains.mps.bash.structure.MulExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.MulExpression"));
  }
  if ("jetbrains.mps.bash.structure.DivExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DivExpression"));
  }
  if ("jetbrains.mps.bash.structure.ModExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ModExpression"));
  }
  if ("jetbrains.mps.bash.structure.AddExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AddExpression"));
  }
  if ("jetbrains.mps.bash.structure.SubExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SubExpression"));
  }
  if ("jetbrains.mps.bash.structure.ArithmeticCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ArithmeticCommand"));
  }
  if ("jetbrains.mps.bash.structure.UnaryArithmeticExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UnaryArithmeticExpression"));
  }
  if ("jetbrains.mps.bash.structure.PostVariableExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PostVariableExpression"));
  }
  if ("jetbrains.mps.bash.structure.PreVariableExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PreVariableExpression"));
  }
  if ("jetbrains.mps.bash.structure.PostIncExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PostIncExpression"));
  }
  if ("jetbrains.mps.bash.structure.PostDecExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PostDecExpression"));
  }
  if ("jetbrains.mps.bash.structure.PreIncExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PreIncExpression"));
  }
  if ("jetbrains.mps.bash.structure.PreDecExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PreDecExpression"));
  }
  if ("jetbrains.mps.bash.structure.UnaryPlusExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UnaryPlusExpression"));
  }
  if ("jetbrains.mps.bash.structure.UnaryMinusExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UnaryMinusExpression"));
  }
  if ("jetbrains.mps.bash.structure.LogicalNegationExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LogicalNegationExpression"));
  }
  if ("jetbrains.mps.bash.structure.BitwiseNegationExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BitwiseNegationExpression"));
  }
  if ("jetbrains.mps.bash.structure.ExpExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ExpExpression"));
  }
  if ("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression"));
  }
  if ("jetbrains.mps.bash.structure.RightBitwiseShiftExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.RightBitwiseShiftExpression"));
  }
  if ("jetbrains.mps.bash.structure.EqualityExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EqualityExpression"));
  }
  if ("jetbrains.mps.bash.structure.InequalityExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.InequalityExpression"));
  }
  if ("jetbrains.mps.bash.structure.BitwiseAndExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BitwiseAndExpression"));
  }
  if ("jetbrains.mps.bash.structure.BitwiseOrExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BitwiseOrExpression"));
  }
  if ("jetbrains.mps.bash.structure.BitwiseXorExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BitwiseXorExpression"));
  }
  if ("jetbrains.mps.bash.structure.LogicalAndExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LogicalAndExpression"));
  }
  if ("jetbrains.mps.bash.structure.LogicalOrExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LogicalOrExpression"));
  }
  if ("jetbrains.mps.bash.structure.CommaExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommaExpression"));
  }
  if ("jetbrains.mps.bash.structure.IntegerLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IntegerLiteral"));
  }
  if ("jetbrains.mps.bash.structure.DecimalConstant".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DecimalConstant"));
  }
  if ("jetbrains.mps.bash.structure.HexIntegerLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new HexIntegerLiteral_Constraints());
  }
  if ("jetbrains.mps.bash.structure.BasedIntegerLiteral".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new BasedIntegerLiteral_Constraints());
  }
  if ("jetbrains.mps.bash.structure.BracketExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BracketExpression"));
  }
  if ("jetbrains.mps.bash.structure.GreaterThanExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GreaterThanExpression"));
  }
  if ("jetbrains.mps.bash.structure.LessThanExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LessThanExpression"));
  }
  if ("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression"));
  }
  if ("jetbrains.mps.bash.structure.LessThanOrEqualExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LessThanOrEqualExpression"));
  }
  if ("jetbrains.mps.bash.structure.ConditionalOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ConditionalOperation"));
  }
  if ("jetbrains.mps.bash.structure.BaseAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BaseAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.AssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.PlusAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PlusAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.MinusAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.MinusAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.MusAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.MusAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.DivAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DivAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.ModAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ModAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.RightShiftAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.RightShiftAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.AndAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AndAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.OrAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OrAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.XorAssingmentExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.XorAssingmentExpression"));
  }
  if ("jetbrains.mps.bash.structure.BaseVariableAssingment".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BaseVariableAssingment"));
  }
  if ("jetbrains.mps.bash.structure.VariableAssingment".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.VariableAssingment"));
  }
  if ("jetbrains.mps.bash.structure.BasicParameterExpansion".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new BasicParameterExpansion_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ArithmeticExpansion".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ArithmeticExpansion"));
  }
  if ("jetbrains.mps.bash.structure.TildeExpansion".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.TildeExpansion"));
  }
  if ("jetbrains.mps.bash.structure.GeneralizedWord".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GeneralizedWord"));
  }
  if ("jetbrains.mps.bash.structure.IGeneralizedWordUnit".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IGeneralizedWordUnit"));
  }
  if ("jetbrains.mps.bash.structure.SimpleWord".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new SimpleWord_Constraints());
  }
  if ("jetbrains.mps.bash.structure.BaseCommandSubstitution".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BaseCommandSubstitution"));
  }
  if ("jetbrains.mps.bash.structure.QuotesCommandSubstitution".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.QuotesCommandSubstitution"));
  }
  if ("jetbrains.mps.bash.structure.BuckCommandSubstitution".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BuckCommandSubstitution"));
  }
  if ("jetbrains.mps.bash.structure.RedirectedCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.RedirectedCommand"));
  }
  if ("jetbrains.mps.bash.structure.Redirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.Redirection"));
  }
  if ("jetbrains.mps.bash.structure.InputRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.InputRedirection"));
  }
  if ("jetbrains.mps.bash.structure.OutputRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OutputRedirection"));
  }
  if ("jetbrains.mps.bash.structure.IORedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IORedirection"));
  }
  if ("jetbrains.mps.bash.structure.AppendingOutputRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AppendingOutputRedirection"));
  }
  if ("jetbrains.mps.bash.structure.OutputErrorRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OutputErrorRedirection"));
  }
  if ("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection"));
  }
  if ("jetbrains.mps.bash.structure.IToWordRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IToWordRedirection"));
  }
  if ("jetbrains.mps.bash.structure.HereDocumentRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.HereDocumentRedirection"));
  }
  if ("jetbrains.mps.bash.structure.HereStringRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.HereStringRedirection"));
  }
  if ("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor"));
  }
  if ("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor"));
  }
  if ("jetbrains.mps.bash.structure.ReadingWritingRedirection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ReadingWritingRedirection"));
  }
  if ("jetbrains.mps.bash.structure.FunctionDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.FunctionDeclaration"));
  }
  if ("jetbrains.mps.bash.structure.ICompoundCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ICompoundCommand"));
  }
  if ("jetbrains.mps.bash.structure.FunctionCallCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.FunctionCallCommand"));
  }
  if ("jetbrains.mps.bash.structure.ExternalCommandDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExternalCommandDeclaration_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ExternalCommandCall".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExternalCommandCall_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ExternalOptionReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ExternalOptionReference"));
  }
  if ("jetbrains.mps.bash.structure.OptionSet".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OptionSet"));
  }
  if ("jetbrains.mps.bash.structure.Option".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.Option"));
  }
  if ("jetbrains.mps.bash.structure.OptionWithParam".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OptionWithParam"));
  }
  if ("jetbrains.mps.bash.structure.ISymbolConcept".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ISymbolConcept"));
  }
  if ("jetbrains.mps.bash.structure.IDescribedConcept".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IDescribedConcept"));
  }
  if ("jetbrains.mps.bash.structure.ExternalOptionDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ExternalOptionDeclaration_Constraints());
  }
  if ("jetbrains.mps.bash.structure.OptionSetReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new OptionSetReference_Constraints());
  }
  if ("jetbrains.mps.bash.structure.OptionReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new OptionReference_Constraints());
  }
  if ("jetbrains.mps.bash.structure.OptionWithParamReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new OptionWithParamReference_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ICommandParameter".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ICommandParameter"));
  }
  if ("jetbrains.mps.bash.structure.ArgumentReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ArgumentReference_Constraints());
  }
  if ("jetbrains.mps.bash.structure.Argument".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.Argument"));
  }
  if ("jetbrains.mps.bash.structure.ArgumentList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ArgumentList_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ArgumentListReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ArgumentListReference"));
  }
  if ("jetbrains.mps.bash.structure.ConditionalCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ConditionalCommand"));
  }
  if ("jetbrains.mps.bash.structure.QuotedWord".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.QuotedWord"));
  }
  if ("jetbrains.mps.bash.structure.IConcreteWordUnit".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IConcreteWordUnit"));
  }
  if ("jetbrains.mps.bash.structure.SingleQuote".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SingleQuote"));
  }
  if ("jetbrains.mps.bash.structure.DoubleQuote".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DoubleQuote"));
  }
  if ("jetbrains.mps.bash.structure.IPriorityExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IPriorityExpression"));
  }
  if ("jetbrains.mps.bash.structure.WordExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.WordExpression"));
  }
  if ("jetbrains.mps.bash.structure.InputLine".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new InputLine_Constraints());
  }
  if ("jetbrains.mps.bash.structure.CommentedCommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommentedCommandList"));
  }
  if ("jetbrains.mps.bash.structure.HeadCommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.HeadCommandList"));
  }
  if ("jetbrains.mps.bash.structure.FollowingCommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.FollowingCommandList"));
  }
  if ("jetbrains.mps.bash.structure.AndOperator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AndOperator"));
  }
  if ("jetbrains.mps.bash.structure.OrOperator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OrOperator"));
  }
  if ("jetbrains.mps.bash.structure.CommentedFollowingCommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommentedFollowingCommandList"));
  }
  if ("jetbrains.mps.bash.structure.AbstractFollowingCommandList".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new AbstractFollowingCommandList_Constraints());
  }
  if ("jetbrains.mps.bash.structure.HeadPipeline".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.HeadPipeline"));
  }
  if ("jetbrains.mps.bash.structure.FollowingPipeline".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.FollowingPipeline"));
  }
  if ("jetbrains.mps.bash.structure.PipelineOperatorConnection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PipelineOperatorConnection"));
  }
  if ("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection"));
  }
  if ("jetbrains.mps.bash.structure.CommentedText".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CommentedText"));
  }
  if ("jetbrains.mps.bash.structure.Command".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new Command_Constraints());
  }
  if ("jetbrains.mps.bash.structure.IComment".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IComment"));
  }
  if ("jetbrains.mps.bash.structure.IArithmeticHolder".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.IArithmeticHolder"));
  }
  if ("jetbrains.mps.bash.structure.LValue".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LValue"));
  }
  if ("jetbrains.mps.bash.structure.VariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new VariableReference_Constraints());
  }
  if ("jetbrains.mps.bash.structure.ConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.UnaryConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UnaryConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.ExistConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ExistConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.BlockFileConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BlockFileConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.CharFileConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CharFileConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.DirectoryConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.DirectoryConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.OtherExistConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OtherExistConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.RegularFileConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.RegularFileConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.GroupIdConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GroupIdConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.SymlinkConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SymlinkConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.StickyBitConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.StickyBitConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.PipeConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.PipeConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.ReadTestConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ReadTestConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.SizeConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SizeConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.TerminalConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.TerminalConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.UserIdConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.UserIdConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.WriteTestConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.WriteTestConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.ExecTestConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ExecTestConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.SocketConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SocketConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.LastReadConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LastReadConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.OptnameStringConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OptnameStringConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.ZeroStringConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.ZeroStringConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.StringConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.StringConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.BinaryConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BinaryConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.NewerThan".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.NewerThan"));
  }
  if ("jetbrains.mps.bash.structure.OlderThan".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OlderThan"));
  }
  if ("jetbrains.mps.bash.structure.SameReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SameReference"));
  }
  if ("jetbrains.mps.bash.structure.EqualityStrings".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EqualityStrings"));
  }
  if ("jetbrains.mps.bash.structure.InequalityStrings".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.InequalityStrings"));
  }
  if ("jetbrains.mps.bash.structure.LessThanString".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LessThanString"));
  }
  if ("jetbrains.mps.bash.structure.GreaterThanString".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GreaterThanString"));
  }
  if ("jetbrains.mps.bash.structure.FreeCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.FreeCommand"));
  }
  if ("jetbrains.mps.bash.structure.SemicolonOperator".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.SemicolonOperator"));
  }
  if ("jetbrains.mps.bash.structure.VariableAddAssingment".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.VariableAddAssingment"));
  }
  if ("jetbrains.mps.bash.structure.NotCommand".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.NotCommand"));
  }
  if ("jetbrains.mps.bash.structure.InequalityNumber".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.InequalityNumber"));
  }
  if ("jetbrains.mps.bash.structure.EqualityNumber".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EqualityNumber"));
  }
  if ("jetbrains.mps.bash.structure.LessThanNumber".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LessThanNumber"));
  }
  if ("jetbrains.mps.bash.structure.LessThanOrEqualNumber".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.LessThanOrEqualNumber"));
  }
  if ("jetbrains.mps.bash.structure.GreaterThanNumber".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GreaterThanNumber"));
  }
  if ("jetbrains.mps.bash.structure.GreaterThanOrEqual".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.GreaterThanOrEqual"));
  }
  if ("jetbrains.mps.bash.structure.CombiningConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.CombiningConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.AndCombiningComditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.AndCombiningComditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.OrCombiningConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.OrCombiningConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.BracketConditionalExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.BracketConditionalExpression"));
  }
  if ("jetbrains.mps.bash.structure.EqualityStrings2".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.bash.structure.EqualityStrings2"));
  }
  return null;
}
