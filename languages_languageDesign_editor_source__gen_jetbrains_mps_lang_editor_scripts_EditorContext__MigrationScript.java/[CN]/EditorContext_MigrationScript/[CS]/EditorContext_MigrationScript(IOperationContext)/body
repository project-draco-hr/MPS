{
  super("To Editor API usages");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "EditorContext -> API EditorContext";
    }
    public String getAdditionalInfo(){
      return "EditorContext -> API EditorContext";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"classifier",false) == EditorMigration30.getOldEditorContext();
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"classifier",EditorMigration30.getNewEditorContext(),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "EditorContext.getNodeEditorComponent() -> API EditorContext.getEditorComponet()";
    }
    public String getAdditionalInfo(){
      return "EditorContext.getNodeEditorComponent() -> API EditorContext.getEditorComponet()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"baseMethodDeclaration",false) == EditorMigration30.getOldGetNodeEditorComponent();
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"baseMethodDeclaration",EditorMigration30.getNewGetEditorComponent(),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "EditorComponent -> API EditorComponent";
    }
    public String getAdditionalInfo(){
      return "EditorComponent -> API EditorComponent";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"classifier",false) == EditorMigration30.getOldEditorComponent();
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"classifier",EditorMigration30.getNewEditorComponent(),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "EditorComponent.findNodeCell() -> EditorComponent.findNodeCell()";
    }
    public String getAdditionalInfo(){
      return "EditorComponent.findNodeCell() -> EditorComponent.findNodeCell()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"baseMethodDeclaration",false) == EditorMigration30.getOldFindNodeCell();
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"baseMethodDeclaration",EditorMigration30.getNewFindNodeCell(),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "EditorComponent.changeSelection() -> EditorComponent.changeSelection()";
    }
    public String getAdditionalInfo(){
      return "EditorComponent.changeSelection() -> EditorComponent.changeSelection()";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"baseMethodDeclaration",false) == EditorMigration30.getOldChangeSelection();
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"baseMethodDeclaration",EditorMigration30.getNewChangeSelection(),false);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
