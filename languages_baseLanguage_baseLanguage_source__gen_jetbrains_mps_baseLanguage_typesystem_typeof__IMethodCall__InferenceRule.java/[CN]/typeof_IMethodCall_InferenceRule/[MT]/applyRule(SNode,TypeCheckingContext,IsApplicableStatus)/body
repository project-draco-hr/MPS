{
  SNode mdecl=SLinkOperations.getTarget(mcall,"baseMethodDeclaration",false);
  if (mdecl == null) {
    return;
  }
  final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE,mcall,"virtual_isInTypeInferenceContext_4837286298388660615",new Object[]{}))) {
    for (    SNode tvd : ListSequence.fromList(BaseMethodDeclaration_Behavior.call_getInferrableTypeVars_6848250892784543828(mdecl))) {
      MapSequence.fromMap(subs).put(tvd,_quotation_createNode_2u2uyg_a0b0a0f0b());
    }
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(mcall,"typeArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).isNotEmpty()) {
    for (    SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true))) {
      if (!(MapSequence.fromMap(subs).containsKey(tvd))) {
        final SNode T_typevar_4695112407844173847=typeCheckingContext.createNewRuntimeTypesVariable();
        MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_4695112407844173847));
      }
    }
  }
 else {
{
      Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).iterator();
      Iterator<SNode> targ_it=ListSequence.fromList(SLinkOperations.getTargets(mcall,"typeArgument",true)).iterator();
      SNode tvd_var;
      SNode targ_var;
      while (tvd_it.hasNext() && targ_it.hasNext()) {
        tvd_var=tvd_it.next();
        targ_var=targ_it.next();
        MapSequence.fromMap(subs).put(tvd_var,targ_var);
        if (SNodeOperations.isInstanceOf(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
        }
      }
    }
  }
  List<SNode> argl=SLinkOperations.getTargets(mcall,"actualArgument",true);
  List<SNode> typel=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)(Object.class)),mdecl,"virtual_getTypeApplicationParameters_8277080359323839095",new Object[]{ListSequence.fromList(argl).count()});
  for (  SNode type : ListSequence.fromList(typel)) {
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
      BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
    }
  }
  SNode retType=SLinkOperations.getTarget(mdecl,"returnType",true);
  if (SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
    BehaviorReflection.invokeVirtual(Void.class,SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_collectGenericSubstitutions_4107091686347010321",new Object[]{subs});
    retType=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)(Object.class)),SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_expandGenerics_4107091686347199582",new Object[]{subs});
  }
{
    SNode _nodeToCheck_1029348928467=mcall;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4695112407843789343",0,null);
    typeCheckingContext.createLessThanInequality((SNode)retType,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4660288602099522945",true),false,true,_info_12389875345);
  }
{
    Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
    Iterator<SNode> arg_it=ListSequence.fromList(argl).iterator();
    SNode type_var;
    SNode arg_var;
    while (type_it.hasNext() && arg_it.hasNext()) {
      type_var=type_it.next();
      arg_var=arg_it.next();
      final SNode _type=type_var;
      if (SNodeOperations.isInstanceOf(_type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
{
          final SNode A=typeCheckingContext.typeOf(arg_var,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9033423951295792137",true);
          typeCheckingContext.whenConcrete(A,new Runnable(){
            public void run(){
{
                SNode _nodeToCheck_1029348928467=mcall;
                EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9033423951293505964",0,null);
                typeCheckingContext.createGreaterThanInequality((SNode)BehaviorReflection.invokeVirtual((Class<SNode>)((Class)(Object.class)),SNodeOperations.cast(_type,"jetbrains.mps.baseLanguage.structure.IGenericType"),"virtual_expandGenerics_4107091686347199582",new Object[]{subs}),(SNode)typeCheckingContext.getExpandedNode(A),false,true,_info_12389875345);
              }
            }
          }
,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9033423951293505962",false,false);
        }
      }
 else {
        if (!(typeCheckingContext.isSingleTypeComputation())) {
{
            SNode _nodeToCheck_1029348928467=arg_var;
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9033423951293505984",0,null);
            typeCheckingContext.createGreaterThanInequality((SNode)_type,(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","9033423951293505986",true),true,true,_info_12389875345);
          }
        }
      }
    }
  }
}
