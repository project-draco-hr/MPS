{
  final SNode mdecl=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
  if (mdecl == null) {
    return;
  }
  final Map<SNode,SNode> subs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  if (false && ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).isNotEmpty()) {
    for (    SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true))) {
      final SNode T_typevar_7192154694571241760=typeCheckingContext.createNewRuntimeTypesVariable();
      MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_7192154694571241760));
    }
  }
 else {
{
      Iterator<SNode> tvd_it=ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).iterator();
      Iterator<SNode> targ_it=ListSequence.fromList(SLinkOperations.getTargets(methodCall,"typeArgument",true)).iterator();
      SNode tvd_var;
      SNode targ_var;
      while (tvd_it.hasNext() && targ_it.hasNext()) {
        tvd_var=tvd_it.next();
        targ_var=targ_it.next();
        MapSequence.fromMap(subs).put(tvd_var,targ_var);
        if (SNodeOperations.isInstanceOf(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
          IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(targ_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
        }
      }
    }
  }
  for (  SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(mdecl,"typeVariableDeclaration",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(MapSequence.fromMap(subs).containsKey(it));
    }
  }
)) {
    final SNode T_typevar_6902868426313558920=typeCheckingContext.createNewRuntimeTypesVariable();
    MapSequence.fromMap(subs).put(tvd,typeCheckingContext.getRepresentative(T_typevar_6902868426313558920));
  }
  if (SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.AssignmentExpression"),"rValue",true) != methodCall && SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"initializer",true) != methodCall) {
    List<SNode> inferrable=ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(mdecl,"returnType",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"typeVariableDeclaration",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.getParent(it) == mdecl;
      }
    }
).toListSequence();
    for (    final SNode tvd : ListSequence.fromList(inferrable)) {
      if (!(ListSequence.fromList(SLinkOperations.getTargets(mdecl,"parameter",true)).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode p){
          return ListSequence.fromList(SNodeOperations.getDescendants(p,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).any(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SLinkOperations.getTarget(it,"typeVariableDeclaration",false) == tvd;
            }
          }
);
        }
      }
))) {
        MapSequence.fromMap(subs).put(tvd,new typeof_IMethodCall_InferenceRule.QuotationClass_2u2uyg_a1a0a0a0b0k0a().createNode(typeCheckingContext));
      }
    }
  }
  List<SNode> argl=SLinkOperations.getTargets(methodCall,"actualArgument",true);
  List<SNode> typel=ITypeApplicable_Behavior.call_getTypeApplicationParameters_8277080359323839095(mdecl,ListSequence.fromList(argl).count());
  for (  SNode type : ListSequence.fromList(typel)) {
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
      IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
    }
  }
  SNode retType=SLinkOperations.getTarget(mdecl,"returnType",true);
  if (SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.IGenericType")) {
    IGenericType_Behavior.call_collectGenericSubstitutions_4107091686347010321(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
    retType=IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(retType,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs);
  }
{
    SNode _nodeToCheck_1029348928467=methodCall;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","6902868426313559345",0,null);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","6902868426313559349",true),(SNode)retType,_info_12389875345);
  }
{
    Iterator<SNode> type_it=ListSequence.fromList(typel).iterator();
    Iterator<SNode> arg_it=ListSequence.fromList(argl).iterator();
    SNode type_var;
    SNode arg_var;
    while (type_it.hasNext() && arg_it.hasNext()) {
      type_var=type_it.next();
      arg_var=arg_it.next();
{
        SNode _nodeToCheck_1029348928467=arg_var;
        EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","6902868426313559726",0,null);
        typeCheckingContext.createGreaterThanInequality((SNode)(SNodeOperations.isInstanceOf(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType") ? IGenericType_Behavior.call_expandGenerics_4107091686347199582(SNodeOperations.cast(type_var,"jetbrains.mps.baseLanguage.structure.IGenericType"),subs) : type_var),(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","7192154694571049939",true),false,true,_info_12389875345);
      }
    }
  }
  if (true || true) {
    return;
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,methodCall,SLinkOperations.getTarget(mdecl,"returnType",true),mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithMethodTypeVariables(typeCheckingContext,methodCall,mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
