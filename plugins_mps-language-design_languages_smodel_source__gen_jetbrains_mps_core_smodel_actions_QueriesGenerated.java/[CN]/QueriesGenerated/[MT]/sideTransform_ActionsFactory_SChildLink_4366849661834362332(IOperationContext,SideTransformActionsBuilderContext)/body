{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode query=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.core.smodel.structure.SConceptQuery");
      SLinkOperations.setTarget(query,"type",SConceptOperations.createNewNode("jetbrains.mps.core.smodel.structure.MqlNodeType",null),true);
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(query,"type",true),"jetbrains.mps.core.smodel.structure.MqlNodeType"),"concept",SLinkOperations.getTarget(_context.getSourceNode(),"target",false),false);
      SPropertyOperations.set(query,"name",SPropertyOperations.getString(_context.getSourceNode(),"name"));
      return query;
    }
    public String getMatchingText(    String pattern){
      return "(";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery"),null));
    }
  }
);
  return result;
}
