{
  super("Convert Attributes (smodel)");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert smodel attribute access operations";
    }
    public String getAdditionalInfo(){
      return "Convert smodel attribute access operations";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SConceptOperations.isSubConceptOf(ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node),"jetbrains.mps.lang.core.structure.Attribute");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode target=ILinkAccess_Behavior.call_getTargetConcept_4024382256428848859(node);
      SNode attr=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AttributeAccess",null);
      if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.NodeAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.NodeAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else       if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.PropertyAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyRefQualifier")) {
          SNode prop=SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PropertyRefQualifier");
          SNode propQ=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.PropertyQualifier",null);
          SLinkOperations.setTarget(propQ,"property",SLinkOperations.getTarget(prop,"property",false),false);
          SLinkOperations.setTarget(q,"propertyQualifier",propQ,true);
        }
 else         if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression")) {
          SLinkOperations.setTarget(q,"propertyQualifier",SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"propertyQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression"),true);
        }
 else {
          LOG.error("!!!");
        }
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else       if (SConceptOperations.isSubConceptOf(target,"jetbrains.mps.lang.core.structure.LinkAttribute")) {
        SNode qualifier=SNodeOperations.as(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkAttributeAccessQualifier");
        SNode q=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier",null);
        SLinkOperations.setTarget(q,"attributeConcept",(SNode)target,false);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier")) {
          SNode link=SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier");
          SNode linkQ=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.LinkQualifier",null);
          SLinkOperations.setTarget(linkQ,"link",SLinkOperations.getTarget(link,"link",false),false);
          SLinkOperations.setTarget(q,"linkQualifier",linkQ,true);
        }
 else         if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression")) {
          SLinkOperations.setTarget(q,"linkQualifier",SNodeOperations.cast(SLinkOperations.getTarget(qualifier,"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.PoundExpression"),true);
        }
 else {
          LOG.error("!!!");
        }
        SLinkOperations.setTarget(attr,"qualifier",q,true);
      }
 else {
        LOG.error("!!!");
      }
      SNodeOperations.replaceWithAnother(node,attr);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert smodel @<all> attribute access operation";
    }
    public String getAdditionalInfo(){
      return "Convert smodel @<all> attribute access operation";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.AttributeAccessOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"attributeQualifier",true),"jetbrains.mps.lang.smodel.structure.AllAttributesQualifier");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode attr=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AttributeAccess",null);
      SLinkOperations.setTarget(attr,"qualifier",SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.AllAttributeQualifier",null),true);
      SNodeOperations.replaceWithAnother(node,attr);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
