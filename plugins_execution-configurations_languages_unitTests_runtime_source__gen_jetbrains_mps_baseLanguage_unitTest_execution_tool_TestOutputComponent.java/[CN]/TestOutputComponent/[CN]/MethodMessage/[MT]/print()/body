{
  if (matches(myFilterClass,myFilterMethod)) {
    if (myFile != null) {
      DataInputStream stream=null;
      try {
        stream=new DataInputStream(new FileInputStream(myFile));
        while (stream.available() > 0) {
          final String line=IOUtil.readString(stream);
          if (line == null) {
            break;
          }
          Key contentType=ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<Key>(),ProcessOutputTypes.STDERR,ProcessOutputTypes.SYSTEM,ProcessOutputTypes.STDOUT)).findFirst(new IWhereFilter<Key>(){
            public boolean accept(            Key it){
              return line.startsWith(it.toString());
            }
          }
);
          if (contentType != null) {
            TestOutputComponent.print(myConsoleView,contentType,line.substring(contentType.toString().length()));
          }
 else {
            TestOutputComponent.print(myConsoleView,ProcessOutputTypes.SYSTEM,"Could not parse line:\n" + line + "\n");
          }
        }
      }
 catch (      IOException e) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Cant read messages for test " + myMethod,e);
        }
      }
 finally {
        if (stream != null) {
          try {
            stream.close();
          }
 catch (          IOException ignore) {
          }
        }
      }
    }
    super.print();
  }
}
