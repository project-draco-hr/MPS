{
  BreakpointFactory breakpointFactory=findFactory(myBreakpoint);
  if (breakpointFactory == null) {
    return;
  }
  final BreakpointPropertiesPanel propertiesPanel=breakpointFactory.createBreakpointPropertiesPanel(myBreakpoint.getProject(),true);
  propertiesPanel.initFrom(myBreakpoint,false);
  final JComponent mainPanel=propertiesPanel.getPanel();
  int y=getComponent().getLeftEditorHighlighter().getIconCoordinate(BreakpointIconRenderrer.this);
  int x=getComponent().getLeftEditorHighlighter().getIconRenderersOffset();
  Point whereToShow=new Point(x + getIcon().getIconWidth() / 2,y + getIcon().getIconHeight() / 2);
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          try {
            if (ApplicationInfo.getInstance().getMajorVersion().equals("12")) {
              final Class<?> bpMDPopupFactory=Class.forName("com.intellij.xdebugger.impl.breakpoints.ui.BreakpointsMasterDetailPopupFactory");
              final Object bpMDPopupFactoryInstance=bpMDPopupFactory.getDeclaredMethod("getInstance",Project.class).invoke(null,myBreakpoint.getProject());
              final JBPopup popup=(JBPopup)bpMDPopupFactory.getDeclaredMethod("createPopup",BreakpointWithHighlighter.class).invoke(bpMDPopupFactoryInstance,myBreakpoint);
              if (popup != null) {
                popup.showCenteredInCurrentWindow(myBreakpoint.getProject());
              }
            }
 else {
              Class<?> bpDFactory=Class.forName("com.intellij.xdebugger.impl.breakpoints.ui.BreakpointsDialogFactory");
              final Object bpDFactoryInstance=bpDFactory.getDeclaredMethod("getInstance",Project.class).invoke(null,myBreakpoint.getProject());
              bpDFactory.getDeclaredMethod("showDialog",BreakpointWithHighlighter.class).invoke(bpDFactoryInstance,myBreakpoint);
            }
          }
 catch (          ClassNotFoundException e1) {
          }
catch (          InvocationTargetException e1) {
          }
catch (          NoSuchMethodException e1) {
          }
catch (          IllegalAccessException e1) {
          }
        }
      }
);
    }
  }
;
  Balloon balloon[]=new Balloon[1];
  try {
    final Class<?> debuggerUIUtil=Class.forName("com.intellij.xdebugger.impl.ui.DebuggerUIUtil");
    Method showBreakpointMethod=null;
    if (ApplicationInfo.getInstance().getMajorVersion().equals("12")) {
      showBreakpointMethod=debuggerUIUtil.getDeclaredMethod("showBreakpointEditor",Project.class,JComponent.class,String.class,Point.class,JComponent.class,Runnable.class,Object.class);
    }
 else {
      showBreakpointMethod=debuggerUIUtil.getDeclaredMethod("showBreakpointEditor",Project.class,JComponent.class,Point.class,JComponent.class,Runnable.class,Object.class);
    }
    if (ApplicationInfo.getInstance().getMajorVersion().equals("12")) {
      balloon[0]=(Balloon)showBreakpointMethod.invoke(null,myBreakpoint.getProject(),mainPanel,myBreakpoint.getDisplayName(),whereToShow,getComponent().getLeftEditorHighlighter(),runnable,myBreakpoint);
    }
 else {
      balloon[0]=(Balloon)showBreakpointMethod.invoke(null,myBreakpoint.getProject(),mainPanel,whereToShow,getComponent().getLeftEditorHighlighter(),runnable,myBreakpoint);
    }
  }
 catch (  ClassNotFoundException e1) {
  }
catch (  NoSuchMethodException e1) {
  }
catch (  InvocationTargetException e1) {
  }
catch (  IllegalAccessException e1) {
  }
  balloon[0].addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      propertiesPanel.saveTo(myBreakpoint,new Runnable(){
        @Override public void run(){
        }
      }
);
    }
  }
);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      IdeFocusManager.findInstance().requestFocus(mainPanel,true);
    }
  }
);
}
