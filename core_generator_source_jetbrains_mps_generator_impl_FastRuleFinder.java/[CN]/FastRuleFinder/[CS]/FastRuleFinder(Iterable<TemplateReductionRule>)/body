{
  Map<String,List<TemplateReductionRule>> applicableRules=new HashMap<String,List<TemplateReductionRule>>();
  for (  TemplateReductionRule rule : reductionRules) {
    String applicableConceptFqName=rule.getApplicableConcept();
    List<TemplateReductionRule> rules=applicableRules.get(applicableConceptFqName);
    if (rules == null) {
      rules=new LinkedList<TemplateReductionRule>();
      applicableRules.put(applicableConceptFqName,rules);
    }
    rules.add(rule);
    if (rule.applyToInheritors()) {
      for (      String conceptFqName : LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(applicableConceptFqName)) {
        rules=applicableRules.get(conceptFqName);
        if (rules == null) {
          rules=new LinkedList<TemplateReductionRule>();
          applicableRules.put(conceptFqName,rules);
        }
        rules.add(rule);
      }
    }
  }
  for (  Entry<String,List<TemplateReductionRule>> entry : applicableRules.entrySet()) {
    List<TemplateReductionRule> rules=entry.getValue();
    myApplicableRules.put(entry.getKey(),rules.toArray(new TemplateReductionRule[rules.size()]));
  }
}
