{
  Map<String,List<TemplateReductionRule>> specificRules=new HashMap<String,List<TemplateReductionRule>>();
  Map<String,List<TemplateReductionRule>> inheritedRules=new HashMap<String,List<TemplateReductionRule>>();
  for (  TemplateReductionRule rule : reductionRules) {
    String applicableConceptFqName=rule.getApplicableConcept();
    List<TemplateReductionRule> rules=specificRules.get(applicableConceptFqName);
    if (rules == null) {
      rules=new LinkedList<TemplateReductionRule>();
      specificRules.put(applicableConceptFqName,rules);
    }
    rules.add(rule);
    if (rule.applyToInheritors()) {
      final Set<String> allDescendantConcepts=ConceptDescendantsCache.getInstance().getDescendants(applicableConceptFqName);
      allDescendantConcepts.remove(applicableConceptFqName);
      for (      String conceptFqName : allDescendantConcepts) {
        rules=inheritedRules.get(conceptFqName);
        if (rules == null) {
          rules=new LinkedList<TemplateReductionRule>();
          inheritedRules.put(conceptFqName,rules);
        }
        rules.add(rule);
      }
    }
  }
  for (  Entry<String,List<TemplateReductionRule>> entry : specificRules.entrySet()) {
    List<TemplateReductionRule> exact=entry.getValue();
    List<TemplateReductionRule> inherited=inheritedRules.remove(entry.getKey());
    List<TemplateReductionRule> rules;
    if (inherited == null) {
      rules=exact;
    }
 else {
      ArrayList<TemplateReductionRule> l=new ArrayList<TemplateReductionRule>(exact.size() + inherited.size());
      l.addAll(exact);
      l.addAll(inherited);
      rules=l;
    }
    myApplicableRules.put(entry.getKey(),rules.toArray(new TemplateReductionRule[rules.size()]));
  }
  for (  Entry<String,List<TemplateReductionRule>> entry : inheritedRules.entrySet()) {
    List<TemplateReductionRule> inherited=entry.getValue();
    myApplicableRules.put(entry.getKey(),inherited.toArray(new TemplateReductionRule[inherited.size()]));
  }
}
