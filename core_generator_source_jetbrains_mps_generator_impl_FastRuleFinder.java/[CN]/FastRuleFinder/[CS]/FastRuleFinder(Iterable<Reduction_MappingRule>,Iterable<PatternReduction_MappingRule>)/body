{
  Map<String,List<ReductionRule>> applicableRules=new HashMap<String,List<ReductionRule>>();
  for (  PatternReduction_MappingRule rule : patternRules) {
    String conceptFqName=rule.getPattern().getPatternNode().getConceptFQName();
    List<ReductionRule> rules=applicableRules.get(conceptFqName);
    if (rules == null) {
      rules=new LinkedList<ReductionRule>();
      applicableRules.put(conceptFqName,rules);
    }
    rules.add(rule);
  }
  for (  Reduction_MappingRule rule : reductionRules) {
    Set<String> applicableTo=new LinkedHashSet<String>();
    String applicableConceptFqName=NameUtil.nodeFQName(rule.getApplicableConcept());
    applicableTo.add(applicableConceptFqName);
    if (rule.getApplyToConceptInheritors()) {
      applicableTo.addAll(LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(applicableConceptFqName));
    }
    for (    String conceptFqName : applicableTo) {
      List<ReductionRule> rules=applicableRules.get(conceptFqName);
      if (rules == null) {
        rules=new LinkedList<ReductionRule>();
        applicableRules.put(conceptFqName,rules);
      }
      rules.add(rule);
    }
  }
  for (  Entry<String,List<ReductionRule>> entry : applicableRules.entrySet()) {
    List<ReductionRule> rules=entry.getValue();
    myApplicableRules.put(entry.getKey(),rules.toArray(new ReductionRule[rules.size()]));
  }
}
