{
  Map<SAbstractConcept,List<T>> specificRules=new HashMap<>();
  Map<SAbstractConcept,List<T>> inheritedRules=new HashMap<>();
  for (  T rule : reductionRules) {
    final SAbstractConcept applicableConcept=rule.getApplicableConcept();
    List<T> rules=specificRules.get(applicableConcept);
    if (rules == null) {
      rules=new LinkedList<T>();
      specificRules.put(applicableConcept,rules);
    }
    rules.add(rule);
    if (rule.applyToInheritors()) {
      final Set<SAbstractConcept> allDescendantConcepts=ConceptDescendantsCache.getInstance().getDescendants(applicableConcept);
      allDescendantConcepts.remove(applicableConcept);
      for (      SAbstractConcept descendant : allDescendantConcepts) {
        rules=inheritedRules.get(descendant);
        if (rules == null) {
          rules=new LinkedList<T>();
          inheritedRules.put(descendant,rules);
        }
        rules.add(rule);
      }
    }
  }
  for (  Entry<SAbstractConcept,List<T>> entry : specificRules.entrySet()) {
    List<T> exact=entry.getValue();
    List<T> inherited=inheritedRules.remove(entry.getKey());
    List<T> rules;
    if (inherited == null) {
      rules=new ArrayList<T>(exact);
    }
 else {
      ArrayList<T> l=new ArrayList<T>(exact.size() + inherited.size());
      l.addAll(exact);
      l.addAll(inherited);
      rules=l;
    }
    myApplicableRules.put(entry.getKey(),rules);
  }
  for (  Entry<SAbstractConcept,List<T>> entry : inheritedRules.entrySet()) {
    List<T> inherited=entry.getValue();
    myApplicableRules.put(entry.getKey(),new ArrayList<T>(inherited));
  }
}
