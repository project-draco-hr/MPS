{
class Result {
    boolean aborted=true;
    int errors=-1;
    int warnings=-1;
    String messages="";
  }
  final Result res=new Result();
  final boolean[] compilationFinished=new boolean[]{false};
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      cm.compile(myFacet.getModule(),new CompileStatusNotification(){
        @Override public void finished(        boolean aborted,        int errors,        int warnings,        CompileContext compileContext){
          res.aborted=aborted;
          res.errors=errors;
          res.warnings=warnings;
          compilationFinished[0]=true;
          StringBuilder sb=new StringBuilder();
          for (          CompilerMessage compilerMessage : compileContext.getMessages(CompilerMessageCategory.ERROR)) {
            sb.append("ERR:  " + compilerMessage.getMessage() + "\n");
          }
          for (          CompilerMessage compilerMessage : compileContext.getMessages(CompilerMessageCategory.WARNING)) {
            sb.append("WARN:  " + compilerMessage.getMessage() + "\n");
          }
          res.messages=sb.toString();
        }
      }
);
    }
  }
);
  while (!compilationFinished[0]) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  assertOnTeardown(new Asserter(){
    @Override public void doAssert() throws Exception {
      if (res.aborted || errors != res.errors || warns != res.warnings) {
        System.out.print(res.messages);
      }
      assertFalse(res.aborted);
      assertSame(errors,res.errors);
      assertSame(warns,res.warnings);
    }
  }
);
}
