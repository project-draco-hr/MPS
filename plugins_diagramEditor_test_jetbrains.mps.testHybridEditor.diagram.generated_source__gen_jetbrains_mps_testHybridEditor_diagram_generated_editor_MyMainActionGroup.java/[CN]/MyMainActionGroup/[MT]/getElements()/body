{
  List<PaletteActionGroup> groups=ListSequence.fromList(new ArrayList<PaletteActionGroup>());
  ModelPlusImportedScope scope=new ModelPlusImportedScope(myDiagramCell.getSNode().getModel(),false,NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.testHybridEditor.structure.MetaBlock")));
  for (  SNode node : Sequence.fromIterable(scope.getAvailableElements(null)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.testHybridEditor.structure.MetaBlock");
    }
  }
)) {
    String key=SPropertyOperations.getString(SNodeOperations.cast(node,"jetbrains.mps.testHybridEditor.structure.MetaBlock"),"path");
    if (!(MapSequence.fromMap(tagToGroupMap).containsKey(key))) {
      MapSequence.fromMap(tagToGroupMap).put(key,ListSequence.fromList(new ArrayList<SNode>()));
    }
    ListSequence.fromList(MapSequence.fromMap(tagToGroupMap).get(key)).addElement(node);
  }
  for (  String tag : MapSequence.fromMap(tagToGroupMap).keySet()) {
    ListSequence.fromList(groups).addElement(new MyActionGroup(MapSequence.fromMap(tagToGroupMap).get(tag),myDiagramCell,myDiagramCell.getSNode(),SLinkOperations.findLinkDeclaration("jetbrains.mps.testHybridEditor.structure.Diagram","newBlocks"),tag));
  }
  return ListSequence.fromList(groups).toGenericArray(PaletteActionGroup.class);
}
