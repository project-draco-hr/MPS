{
  myLocation=new StubLocation(path,prefix,module);
  SModelRepository repository=SModelRepository.getInstance();
  Set<BaseStubModelDescriptor> models=new HashSet<BaseStubModelDescriptor>();
  try {
    models=getModelDescriptors(myLocation);
  }
 catch (  Throwable t) {
    LOG.error(t);
  }
  for (  BaseSModelDescriptor descriptor : models) {
    SModelDescriptor oldDescr=repository.getModelDescriptor(descriptor.getSModelReference());
    if (oldDescr == null) {
      repository.registerModelDescriptor(descriptor,module);
      if (repository.getOwners(descriptor).size() > 1) {
        LOG.warning("Loading the same stub package twice : " + descriptor.getLongName() + " from "+ repository.getOwners(descriptor));
      }
    }
 else {
      descriptor=(BaseStubModelDescriptor)oldDescr;
    }
    BaseStubModelDescriptor baseDescriptor=(BaseStubModelDescriptor)descriptor;
    if (baseDescriptor.getModelRootManager().getClass().getName().equals(this.getClass().getName())) {
      baseDescriptor.setModelRootManager(this);
    }
    if (!descriptor.isInitialized()) {
      if (!myDescriptorsWithListener.contains(descriptor)) {
        descriptor.addModelListener(myInitializationListener);
        myDescriptorsWithListener.add(descriptor);
      }
    }
 else {
      updateModelInLoadingState(descriptor,descriptor.getSModel());
    }
  }
}
