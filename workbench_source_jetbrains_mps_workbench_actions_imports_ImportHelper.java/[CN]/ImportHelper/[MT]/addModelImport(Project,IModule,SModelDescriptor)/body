{
  FakePsiElement fakePsiContext=new FakePsiElement(){
    public PsiElement getParent(){
      return null;
    }
  }
;
  BaseModelModel goToModelModel=new BaseModelModel(project){
    public NavigationItem doGetNavigationItem(    final SModelDescriptor modelDescriptor){
      return new AddModelItem(project,model,modelDescriptor,module);
    }
    public SModelDescriptor[] find(    IScope scope){
      List<SModelDescriptor> modelDescriptors=CollectionUtil.filter(scope.getModelDescriptors(),new Condition<SModelDescriptor>(){
        public boolean met(        SModelDescriptor modelDescriptor){
          boolean rightStereotype=SModelStereotype.isUserModel(modelDescriptor) || SModelStereotype.isStubModelStereotype(modelDescriptor.getStereotype());
          boolean hasModule=modelDescriptor.getModule() != null;
          return rightStereotype && hasModule;
        }
      }
);
      return modelDescriptors.toArray(new SModelDescriptor[modelDescriptors.size()]);
    }
    @Nullable public String getPromptText(){
      return "Import model:";
    }
  }
;
  ChooseByNamePopup popup=ChooseByNamePopup.createPopup(project,goToModelModel,fakePsiContext);
  popup.invoke(new ChooseByNamePopupComponent.Callback(){
    public void onClose(){
    }
    public void elementChosen(    final Object element){
      ((NavigationItem)element).navigate(true);
    }
  }
,ModalityState.current(),true);
}
