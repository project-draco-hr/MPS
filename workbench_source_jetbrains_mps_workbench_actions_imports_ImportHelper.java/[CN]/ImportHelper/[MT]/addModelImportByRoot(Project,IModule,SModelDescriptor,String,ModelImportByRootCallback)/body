{
  FakePsiElement fakePsiContext=new FakePsiElement(){
    public PsiElement getParent(){
      return null;
    }
  }
;
  BaseMPSChooseModel goToNodeModel;
  if (!myUseCache) {
    goToNodeModel=new BaseNodeModel(project){
      public NavigationItem doGetNavigationItem(      SNode node){
        return new BaseNodeItem(node){
          public void navigate(          boolean requestFocus){
            new AddModelItem(project,model,getNode().getModel().getSModelReference(),contextModule).navigate(requestFocus);
          }
        }
;
      }
      public SNode[] find(      IScope scope){
        Condition<SModelDescriptor> cond=new Condition<SModelDescriptor>(){
          public boolean met(          SModelDescriptor modelDescriptor){
            boolean rightStereotype=SModelStereotype.isUserModel(modelDescriptor);
            boolean hasModule=modelDescriptor.getModule() != null;
            return rightStereotype && hasModule;
          }
        }
;
        ConditionalIterable<SModelDescriptor> iter=new ConditionalIterable<SModelDescriptor>(scope.getModelDescriptors(),cond);
        final List<SNode> nodes=new ArrayList<SNode>();
        for (        SModelDescriptor modelDescriptor : iter) {
          SModel model=modelDescriptor.getSModel();
          if (model == null)           continue;
          nodes.addAll(IterableUtil.asCollection(model.roots()));
        }
        return nodes.toArray(new SNode[nodes.size()]);
      }
      @Nullable public String getPromptText(){
        return "Import model that contains root:";
      }
      public boolean willOpenEditor(){
        return false;
      }
    }
;
  }
 else {
    goToNodeModel=new MPSChooseSNodeDescriptor(project,new RootNodeNameIndex()){
      public NavigationItem doGetNavigationItem(      final BaseSNodeDescriptor object){
        return new RootNodeElement(object){
          public void navigate(          boolean requestFocus){
            ModelAccess.assertLegalRead();
            SModelDescriptor descriptor=GlobalScope.getInstance().getModelDescriptor(object.getModelReference());
            LOG.assertLog(descriptor != null,"Caches seems to be corrupted or the model was removed: model " + object.getModelReference().getLongName().getLongName() + " does not exist. Please check model existence manually and specify it in bug report");
            SModel modelToImport=descriptor.getSModel();
            LOG.assertLog(object.getNode(modelToImport) != null,"Caches seems to be corrupted or the node was removed: model " + modelToImport.getLongName() + " does not seem to contain node "+ object.getNodeName()+ " (id:"+ object.getId().toString()+ "). Please check node existence manually and specify it in bug report");
            new AddModelItem(project,model,modelToImport.getSModelReference(),contextModule).navigate(requestFocus);
          }
        }
;
      }
      @Nullable public String getPromptText(){
        return "Import model that contains root:";
      }
    }
;
  }
  ChooseByNamePopup popup=MpsPopupFactory.createNodePopup(project,goToNodeModel,initialText);
  popup.invoke(new ChooseByNamePopupComponent.Callback(){
    public void onClose(){
    }
    public void elementChosen(    final Object element){
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          NavigationItem navigationItem=(NavigationItem)element;
          navigationItem.navigate(true);
          callback.importForRootAdded(navigationItem.getPresentation().getPresentableText());
        }
      }
);
    }
  }
,ModalityState.current(),true);
}
