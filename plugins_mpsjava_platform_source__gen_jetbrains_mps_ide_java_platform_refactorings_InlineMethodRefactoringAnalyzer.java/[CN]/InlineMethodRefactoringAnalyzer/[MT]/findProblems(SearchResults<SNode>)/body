{
  final Wrappers._T<List<SNode>> myOverriding=new Wrappers._T<List<SNode>>(new ArrayList<SNode>());
  ProgressManager.getInstance().run(new Task.Modal(ProjectHelper.toIdeaProject(InlineMethodRefactoringAnalyzer.this.myOperationContext.getProject()),"Search for overriding methods",true){
    public void run(    @NotNull final ProgressIndicator indicator){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          myOverriding.value=MethodRefactoringUtils.findOverridingMethods(InlineMethodRefactoringAnalyzer.this.myMethod,InlineMethodRefactoringAnalyzer.this.myOperationContext,new ProgressMonitorAdapter(indicator));
        }
      }
);
    }
  }
);
  final StringBuffer errors=new StringBuffer();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      errors.append(InlineMethodRefactoringAnalyzer.this.getOverridingErrors(myOverriding.value));
      if (ussages != null) {
        for (        SearchResult<SNode> res : ListSequence.fromList(ussages.getSearchResults())) {
          InlineMethodRefactoringAnalyzer.this.appendRefactoringProblems(res.getObject(),errors);
        }
      }
 else {
        InlineMethodRefactoringAnalyzer.this.appendRefactoringProblems(InlineMethodRefactoringAnalyzer.this.myCall,errors);
      }
    }
  }
);
  return errors.toString();
}
