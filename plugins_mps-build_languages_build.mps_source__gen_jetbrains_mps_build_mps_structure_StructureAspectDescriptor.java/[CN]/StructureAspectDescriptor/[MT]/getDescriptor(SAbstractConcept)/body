{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0gc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptBuildLayout_ToBinaryCopyProcessor;
      }
    break;
case 1:
  if (true) {
    return myConceptBuildMPSPlugin;
  }
break;
case 2:
if (true) {
return myConceptBuildMpsAspect;
}
break;
case 3:
if (true) {
return myConceptBuildMpsLayout_FolderWithSources;
}
break;
case 4:
if (true) {
return myConceptBuildMpsLayout_ModuleJarContent;
}
break;
case 5:
if (true) {
return myConceptBuildMpsLayout_ModuleJars;
}
break;
case 6:
if (true) {
return myConceptBuildMpsLayout_ModuleSources;
}
break;
case 7:
if (true) {
return myConceptBuildMpsLayout_ModuleXml;
}
break;
case 8:
if (true) {
return myConceptBuildMpsLayout_ModuleXml_CustomJarLocation;
}
break;
case 9:
if (true) {
return myConceptBuildMpsLayout_Plugin;
}
break;
case 10:
if (true) {
return myConceptBuildMpsLayout_PluginDescriptor;
}
break;
case 11:
if (true) {
return myConceptBuildMps_AbstractModule;
}
break;
case 12:
if (true) {
return myConceptBuildMps_Branding;
}
break;
case 13:
if (true) {
return myConceptBuildMps_BrandingCompany;
}
break;
case 14:
if (true) {
return myConceptBuildMps_BrandingHelp;
}
break;
case 15:
if (true) {
return myConceptBuildMps_BrandingKeymap;
}
break;
case 16:
if (true) {
return myConceptBuildMps_BrandingStats;
}
break;
case 17:
if (true) {
return myConceptBuildMps_BrandingUpdateSite;
}
break;
case 18:
if (true) {
return myConceptBuildMps_DevKit;
}
break;
case 19:
if (true) {
return myConceptBuildMps_DevKitExport;
}
break;
case 20:
if (true) {
return myConceptBuildMps_DevKitExportLanguage;
}
break;
case 21:
if (true) {
return myConceptBuildMps_DevKitExportSolution;
}
break;
case 22:
if (true) {
return myConceptBuildMps_DevKitRef;
}
break;
case 23:
if (true) {
return myConceptBuildMps_ExtractedModuleDependency;
}
break;
case 24:
if (true) {
return myConceptBuildMps_Generator;
}
break;
case 25:
if (true) {
return myConceptBuildMps_GeneratorOptions;
}
break;
case 26:
if (true) {
return myConceptBuildMps_Group;
}
break;
case 27:
if (true) {
return myConceptBuildMps_IdeaPlugin;
}
break;
case 28:
if (true) {
return myConceptBuildMps_IdeaPluginContent;
}
break;
case 29:
if (true) {
return myConceptBuildMps_IdeaPluginDependency;
}
break;
case 30:
if (true) {
return myConceptBuildMps_IdeaPluginGroup;
}
break;
case 31:
if (true) {
return myConceptBuildMps_IdeaPluginGroupCustomModule;
}
break;
case 32:
if (true) {
return myConceptBuildMps_IdeaPluginModule;
}
break;
case 33:
if (true) {
return myConceptBuildMps_IdeaPluginVendor;
}
break;
case 34:
if (true) {
return myConceptBuildMps_Language;
}
break;
case 35:
if (true) {
return myConceptBuildMps_Module;
}
break;
case 36:
if (true) {
return myConceptBuildMps_ModuleDependency;
}
break;
case 37:
if (true) {
return myConceptBuildMps_ModuleDependencyExtendLanguage;
}
break;
case 38:
if (true) {
return myConceptBuildMps_ModuleDependencyJar;
}
break;
case 39:
if (true) {
return myConceptBuildMps_ModuleDependencyOnDevKit;
}
break;
case 40:
if (true) {
return myConceptBuildMps_ModuleDependencyOnJavaModule;
}
break;
case 41:
if (true) {
return myConceptBuildMps_ModuleDependencyOnModule;
}
break;
case 42:
if (true) {
return myConceptBuildMps_ModuleDependencyUseLanguage;
}
break;
case 43:
if (true) {
return myConceptBuildMps_ModuleJarRuntime;
}
break;
case 44:
if (true) {
return myConceptBuildMps_ModuleJavaSource;
}
break;
case 45:
if (true) {
return myConceptBuildMps_ModuleModelRoot;
}
break;
case 46:
if (true) {
return myConceptBuildMps_ModuleRuntime;
}
break;
case 47:
if (true) {
return myConceptBuildMps_ModuleSolutionRuntime;
}
break;
case 48:
if (true) {
return myConceptBuildMps_ModuleSource;
}
break;
case 49:
if (true) {
return myConceptBuildMps_ModuleTestSource;
}
break;
case 50:
if (true) {
return myConceptBuildMps_Solution;
}
break;
case 51:
if (true) {
return myConceptGeneratorInternal_BuildMps_Module;
}
break;
case 52:
if (true) {
return myConceptGeneratorInternal_BuildSourcePath;
}
break;
case 53:
if (true) {
return myConceptGeneratorInternal_String;
}
break;
default :
}
}
return null;
}
