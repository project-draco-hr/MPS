{
  if (ListSequence.fromList(seen).contains(node)) {
    return;
  }
  ListSequence.fromList(seen).addElement(node);
  for (  SNode ref : SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),false,new SAbstractConcept[]{})) {
    if (SLinkOperations.getTarget(ref,MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,0x1117f594636L,"regexp")) != null) {
      collectNamedParenthesesInternal(SLinkOperations.getTarget(ref,MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,0x1117f594636L,"regexp")),seen,found);
    }
  }
  for (  SNode mpe : SNodeOperations.getNodeDescendants(node,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111797946c7L,"jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp"),false,new SAbstractConcept[]{})) {
    ListSequence.fromList(found).addElement(mpe);
  }
}
