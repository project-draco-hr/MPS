{
  List<SNode> matches=new ArrayList<SNode>();
  for (  SNode ruc : SNodeOperations.getNodeAncestors(enclosingNode,MetaAdapterFactory.getInterfaceConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117ecbc07aL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction"),true)) {
    ListSequence.fromList(matches).addSequence(ListSequence.fromList(collectNamedParentheses(ruc)));
  }
  for (  SNode ifst : SNodeOperations.getNodeAncestors(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,"jetbrains.mps.baseLanguage.structure.IfStatement"),true)) {
    SNode toCollect=null;
    if (ListSequence.fromList(SNodeOperations.getNodeAncestors(enclosingNode,null,true)).contains(SLinkOperations.getTarget(ifst,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,0xf8cc56b219L,"ifTrue")))) {
      toCollect=SLinkOperations.getTarget(ifst,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,0xf8cc56b218L,"condition"));
    }
 else {
      for (      SNode elseif : SLinkOperations.getChildren(ifst,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,0x118cecf1287L,"elsifClauses"))) {
        if (ListSequence.fromList(SNodeOperations.getNodeAncestors(enclosingNode,null,true)).contains(SLinkOperations.getTarget(elseif,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118ceceb41aL,0x118ced0f8fdL,"statementList")))) {
          toCollect=SLinkOperations.getTarget(elseif,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118ceceb41aL,0x118ced0983eL,"condition"));
          break;
        }
      }
    }
    if (toCollect != null) {
      for (      SNode expr : SNodeOperations.getNodeDescendants(toCollect,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x550fbf4ebc5de3f5L,"jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"),true,new SAbstractConcept[]{})) {
        ListSequence.fromList(matches).addSequence(ListSequence.fromList(collectNamedParentheses(expr)));
      }
    }
  }
  return matches;
}
