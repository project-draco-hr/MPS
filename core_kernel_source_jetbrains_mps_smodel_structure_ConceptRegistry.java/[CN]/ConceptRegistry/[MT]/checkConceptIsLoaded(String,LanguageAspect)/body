{
  Pair<String,LanguageAspect> currentConceptAndLanguageAspect=new Pair<String,LanguageAspect>(fqName,languageAspect);
  if (conceptsInLoading.contains(currentConceptAndLanguageAspect)) {
    return null;
  }
  T descriptor=null;
switch (languageAspect) {
case STRUCTURE:
    descriptor=(T)structureDescriptors.get(fqName);
  if (descriptor != null) {
    return descriptor;
  }
break;
case BEHAVIOR:
descriptor=(T)behaviorDescriptors.get(fqName);
if (descriptor != null) {
return descriptor;
}
break;
case CONSTRAINTS:
descriptor=(T)constraintsDescriptors.get(fqName);
if (descriptor != null) {
return descriptor;
}
break;
}
synchronized (lock) {
conceptsInLoading.add(currentConceptAndLanguageAspect);
languageToConcepts.putValue(NameUtil.namespaceFromConceptFQName(fqName),fqName);
try {
LanguageRuntime languageRuntime=LanguageRegistry.getInstance().getLanguage(NameUtil.namespaceFromConceptFQName(fqName));
if (languageRuntime != null) {
descriptor=(T)getRuntimeProvider(languageRuntime,languageAspect).getDescriptor(fqName);
}
}
 catch (Exception e) {
LOG.error("Error while descriptor creating from language aspect for concept " + fqName,e);
}
if (descriptor == null) {
descriptor=(T)getDefaultProvider(languageAspect).getDescriptor(fqName);
}
if (descriptor == null) {
LOG.error("Null descriptor after all",new RuntimeException());
}
 else {
switch (languageAspect) {
case STRUCTURE:
structureDescriptors.put(fqName,(StructureDescriptor)descriptor);
break;
case BEHAVIOR:
behaviorDescriptors.put(fqName,(BehaviorDescriptor)descriptor);
break;
case CONSTRAINTS:
constraintsDescriptors.put(fqName,(ConstraintsDescriptor)descriptor);
break;
}
}
conceptsInLoading.remove(currentConceptAndLanguageAspect);
return descriptor;
}
}
