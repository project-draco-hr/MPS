{
  Pair<String,LanguageAspect> currentConceptAndLanguageAspect=new Pair<String,LanguageAspect>(fqName,languageAspect);
  if (conceptsInLoading.contains(currentConceptAndLanguageAspect)) {
    return;
  }
switch (languageAspect) {
case STRUCTURE:
    if (structureDescriptors.containsKey(fqName)) {
      return;
    }
  break;
case BEHAVIOR:
if (behaviorDescriptors.containsKey(fqName)) {
  return;
}
break;
case CONSTRAINTS:
if (constraintsDescriptors.containsKey(fqName)) {
return;
}
break;
}
conceptsInLoading.add(currentConceptAndLanguageAspect);
languageToConcepts.putValue(NameUtil.namespaceFromConceptFQName(fqName),fqName);
LanguageRuntime languageRuntime=LanguageRegistry.getInstance().getLanguage(NameUtil.namespaceFromConceptFQName(fqName));
if (languageRuntime != null) {
switch (languageAspect) {
case STRUCTURE:
structureDescriptors.put(fqName,languageRuntime.getStructureAspect().getDescriptor(fqName));
break;
case BEHAVIOR:
behaviorDescriptors.put(fqName,languageRuntime.getBehaviorAspect().getDescriptor(fqName));
break;
case CONSTRAINTS:
constraintsDescriptors.put(fqName,languageRuntime.getConstraintsAspect().getDescriptor(fqName));
break;
}
}
conceptsInLoading.remove(currentConceptAndLanguageAspect);
}
