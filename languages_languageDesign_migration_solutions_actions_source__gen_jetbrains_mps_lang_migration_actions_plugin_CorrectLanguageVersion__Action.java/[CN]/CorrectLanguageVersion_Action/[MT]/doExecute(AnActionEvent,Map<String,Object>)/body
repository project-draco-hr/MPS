{
  final Language lang=((Language)((SModule)MapSequence.fromMap(_params).get("module")));
  SModel mig=SModuleOperations.getAspect(lang,"migration");
  List<SNode> scripts=check_vsqebj_a0c0g(((SModel)mig));
  if (ListSequence.fromList(scripts).isNotEmpty()) {
    int maxFrom=(int)IMigrationUnit__BehaviorDescriptor.fromVersion_id4uVwhQyFcnl.invoke(ListSequence.fromList(scripts).sort(new ISelector<SNode,Integer>(){
      public Integer select(      SNode it){
        return (int)IMigrationUnit__BehaviorDescriptor.fromVersion_id4uVwhQyFcnl.invoke(it);
      }
    }
,false).first());
    lang.setLanguageVersion(maxFrom + 1);
  }
 else {
    final int v=lang.getLanguageVersion();
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        InputValidator validator=new InputValidator(){
          public boolean checkInput(          String s){
            try {
              return Integer.parseInt(s) >= 0;
            }
 catch (            NumberFormatException e) {
              return false;
            }
          }
          public boolean canClose(          String s){
            return checkInput(s);
          }
        }
;
        final String result=Messages.showInputDialog(((Project)MapSequence.fromMap(_params).get("project")),"No scripts found\n" + "Current language version is " + v + "\n"+ "Please enter new version","Set Language Version",null,"0",validator);
        if (result == null) {
          return;
        }
        ModelAccess.instance().runWriteActionInCommand(new Runnable(){
          public void run(){
            lang.setLanguageVersion(Integer.parseInt(result));
          }
        }
);
      }
    }
);
  }
}
