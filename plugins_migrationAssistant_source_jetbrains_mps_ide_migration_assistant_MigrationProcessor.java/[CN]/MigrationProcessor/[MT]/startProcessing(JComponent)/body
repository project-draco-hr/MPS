{
  if (!myStarted.compareAndSet(false,true))   throw new IllegalStateException("already processing");
  try {
    final ArrayList<BaseAction> actionsCopy=new ArrayList<BaseAction>(mySelectedActions);
    for (    final BaseAction action : actionsCopy) {
      final CountDownLatch latch=new CountDownLatch(1);
      final Runnable cmdRunnable=new MyActionRunnable(action,component,latch);
      final boolean cmd=action.isExecuteOutsideCommand();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          DumbService.getInstance(myProject).runWhenSmart(new Runnable(){
            @Override public void run(){
              if (cmd) {
                cmdRunnable.run();
              }
 else {
                ModelAccess.instance().runWriteActionInCommand(cmdRunnable);
              }
            }
          }
);
        }
      }
);
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
        LOG.error(null,e);
      }
    }
  }
  finally {
    runCommand(new Runnable(){
      @Override public void run(){
        myFinished.set(true);
        fireFinishedAll();
      }
    }
);
  }
}
