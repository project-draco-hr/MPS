{
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IOperation");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        boolean applicableToSequence=false;
        boolean applicableToList=false;
        SNode leftExpression=null;
        if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperationExpression")) {
          leftExpression=SequenceOperationExpression_Behavior.call_getOperand_1203966722225(_context.getParentNode());
        }
 else         if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          leftExpression=SLinkOperations.getTarget(_context.getParentNode(),"operand",true);
        }
        if ((leftExpression != null)) {
          SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
          if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType"),false) != null) {
            applicableToSequence=true;
          }
          if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.ListType"),false) != null) {
            applicableToList=true;
          }
        }
        if (!(applicableToSequence)) {
          return SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperation");
        }
        if (!(applicableToList)) {
          return SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.AbstractListOperation");
        }
        return false;
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
