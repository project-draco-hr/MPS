{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode direction=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",_context.getCurrentTargetNode());
          SPropertyOperations.set(direction,"value","" + (true));
          return direction;
        }
        public String getDescriptionText(        String pattern){
          return "Sort in ascending order";
        }
        public String getMatchingText(        String pattern){
          return "asc";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode direction=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SortDirection",_context.getCurrentTargetNode());
          SPropertyOperations.set(direction,"value","" + (false));
          return direction;
        }
        public String getDescriptionText(        String pattern){
          return "Sort in descending order";
        }
        public String getMatchingText(        String pattern){
          return "desc";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
