{
  super("Migration from List to Collections");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ListMigration";
    }
    public String getAdditionalInfo(){
      return "ListMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~List"),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~ArrayList"),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~LinkedList")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1151688443754l,"jetbrains.mps.baseLanguage.collections.structure.ListType")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1151688443754l,1151688676805l,"elementType"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).first()));
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Size ";
    }
    public String getAdditionalInfo(){
      return "Size ";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"size",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1162935959151l,"jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation"))));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Get";
    }
    public String getAdditionalInfo(){
      return "Get";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"get",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode access=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1225711141656l,"jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression")));
      SLinkOperations.setTarget(access,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225711141656l,1225711182005l,"list"),SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand")));
      SLinkOperations.setTarget(access,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225711141656l,1225711191269l,"index"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),access);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Clear";
    }
    public String getAdditionalInfo(){
      return "Clear";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"clear",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227022210526l,"jetbrains.mps.baseLanguage.collections.structure.ClearAllElementsOperation"))));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to List";
    }
    public String getAdditionalInfo(){
      return "Add element to List";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"add",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.ANY));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1160612413312l,"jetbrains.mps.baseLanguage.collections.structure.AddElementOperation")));
      SLinkOperations.setTarget(opration,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to pos";
    }
    public String getAdditionalInfo(){
      return "Add element to pos";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"add",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.INT,ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1225621920911l,"jetbrains.mps.baseLanguage.collections.structure.InsertElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225621920911l,1225621960341l,"index"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225621920911l,1225621943565l,"element"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).last()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "isEmpty";
    }
    public String getAdditionalInfo(){
      return "isEmpty";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"isEmpty",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1165530316231l,"jetbrains.mps.baseLanguage.collections.structure.IsEmptyOperation"))));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "set";
    }
    public String getAdditionalInfo(){
      return "set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"set",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.INT,ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1225645868993l,"jetbrains.mps.baseLanguage.collections.structure.SetElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225645868993l,1225645893896l,"index"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1225645868993l,1225645893898l,"element"),SNodeOperations.copyNode(ListSequence.fromList(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).toListSequence()).getElement(1)));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "remove";
    }
    public String getAdditionalInfo(){
      return "remove";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"remove",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227022196108l,"jetbrains.mps.baseLanguage.collections.structure.RemoveAtElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1227022196108l,1227022274197l,"index"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "removeObject";
    }
    public String getAdditionalInfo(){
      return "removeObject";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"remove",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1167380149909l,"jetbrains.mps.baseLanguage.collections.structure.RemoveElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "removeAll";
    }
    public String getAdditionalInfo(){
      return "removeAll";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"removeAll",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1173946412755l,"jetbrains.mps.baseLanguage.collections.structure.RemoveAllElementsOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "indexOf";
    }
    public String getAdditionalInfo(){
      return "indexOf";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"indexOf",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1171391069720l,"jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "contains";
    }
    public String getAdditionalInfo(){
      return "contains";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForAll(node,"contains",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1172254888721l,"jetbrains.mps.baseLanguage.collections.structure.ContainsOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "addAll";
    }
    public String getAdditionalInfo(){
      return "addAll";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addAll",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1160666733551l,"jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add First";
    }
    public String getAdditionalInfo(){
      return "Add First";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addFirst",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227022159410l,"jetbrains.mps.baseLanguage.collections.structure.AddFirstElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add Last";
    }
    public String getAdditionalInfo(){
      return "Add Last";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"addLast",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode operation=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227022179634l,"jetbrains.mps.baseLanguage.collections.structure.AddLastElementOperation")));
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),540871147943773365l,540871147943773366l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,operation);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove first";
    }
    public String getAdditionalInfo(){
      return "Remove first";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"removeFirst",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeOperations.replaceWithAnother(node,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227026082377l,"jetbrains.mps.baseLanguage.collections.structure.RemoveFirstElementOperation"))));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "ArrayList";
    }
    public String getAdditionalInfo(){
      return "ArrayList";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return eq_2ocuwj_a0a0a0d0a0a0a0s0a(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"))),MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),"ArrayList") && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).count() == 1 && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).count() <= 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1160600644654l,"jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237721435807l,"elementType"),ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).first());
      if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).isNotEmpty()) {
        SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237731803878l,"copyFrom"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "LinkedList";
    }
    public String getAdditionalInfo(){
      return "LinkedList";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return eq_2ocuwj_a0a0a0d0a0a0a0t0a(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"))),MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),"LinkedList") && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).isEmpty() && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).count() == 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1227008614712l,"jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237721435807l,"elementType"),ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).first());
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "SetMigration";
    }
    public String getAdditionalInfo(){
      return "SetMigration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~Set"),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~HashSet"),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~LinkedHashSet")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226511727824l,"jetbrains.mps.baseLanguage.collections.structure.SetType")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1226511727824l,1226511765987l,"elementType"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).first()));
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add element to Set";
    }
    public String getAdditionalInfo(){
      return "Add element to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"add",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226566855640l,"jetbrains.mps.baseLanguage.collections.structure.AddSetElementOperation")));
      SLinkOperations.setTarget(opration,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1226566855640l,1226567214363l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "AddAll elements to Set";
    }
    public String getAdditionalInfo(){
      return "AddAll elements to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"addAll",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226592602759l,"jetbrains.mps.baseLanguage.collections.structure.AddAllSetElementsOperation")));
      SLinkOperations.setTarget(opration,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1226592602759l,1226592623721l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "RemoveAll elements to Set";
    }
    public String getAdditionalInfo(){
      return "RemoveAll elements to Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"removeAll",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226593880804l,"jetbrains.mps.baseLanguage.collections.structure.RemoveAllSetElementsOperation")));
      SLinkOperations.setTarget(opration,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1226593880804l,1226593903142l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Remove element from Set";
    }
    public String getAdditionalInfo(){
      return "Remove element from Set";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForSet(node,"remove",ListSequence.fromListAndArray(new ArrayList<ParameterType>(),ParameterType.NOT_INT));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226591481394l,"jetbrains.mps.baseLanguage.collections.structure.RemoveSetElementOperation")));
      SLinkOperations.setTarget(opration,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1226591481394l,1226591501988l,"argument"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "HashSet migration";
    }
    public String getAdditionalInfo(){
      return "HashSet migration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return eq_2ocuwj_a0a0a0d0a0a0a0z0a(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"))),MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),"HashSet") && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).count() <= 1 && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).count() == 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1226516258405l,"jetbrains.mps.baseLanguage.collections.structure.HashSetCreator")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237721435807l,"elementType"),ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).first());
      if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).isNotEmpty()) {
        SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237731803878l,"copyFrom"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "LinkedHashSet migration";
    }
    public String getAdditionalInfo(){
      return "LinkedHashSet migration";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassCreator";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return eq_2ocuwj_a0a0a0d0a0a0a0ab0a(SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"))),MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,"jetbrains.mps.lang.core.structure.INamedConcept")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),"LinkedHashSet") && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).count() <= 1 && ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).count() == 1;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1240217271293l,"jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237721435807l,"elementType"),ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1212685548494l,1212687122400l,"typeParameter"))).first());
      if (ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).isNotEmpty()) {
        SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237721394592l,1237731803878l,"copyFrom"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).first()));
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "hasNext";
    }
    public String getAdditionalInfo(){
      return "hasNext";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForIterator(node,"hasNext",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1237470895604l,"jetbrains.mps.baseLanguage.collections.structure.HasNextOperation")));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "next";
    }
    public String getAdditionalInfo(){
      return "next";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForIterator(node,"next",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1237471031357l,"jetbrains.mps.baseLanguage.collections.structure.GetNextOperation")));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "getIterator";
    }
    public String getAdditionalInfo(){
      return "getIterator";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForLists(node,"iterator",ListSequence.fromList(new ArrayList<ParameterType>()));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode opration=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1237467461002l,"jetbrains.mps.baseLanguage.collections.structure.GetIteratorOperation")));
      SNodeOperations.replaceWithAnother(node,opration);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Iterator";
    }
    public String getAdditionalInfo(){
      return "Iterator";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListMigrationUtil.isApplicableForType(node,1,ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)","~Iterator")));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l,-7182180101671965361l),1237467705688l,"jetbrains.mps.baseLanguage.collections.structure.IteratorType")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-8968771020793164004l,-7182180101671965361l),1237467705688l,1237467730343l,"elementType"),SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).first()));
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
