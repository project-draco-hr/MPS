{
  List<DependencyUtil.Link> result=ListSequence.fromList(new ArrayList<DependencyUtil.Link>());
  ModuleDescriptor descr=module.getModuleDescriptor();
  if (descr == null) {
    return result;
  }
switch (role) {
case None:
    addDeps(result,descr.getUsedDevkits(),DependencyUtil.Role.UsedDevkit,DependencyUtil.LinkType.UsesDevkit);
  addDeps(result,descr.getUsedLanguages(),DependencyUtil.Role.UsedLanguage,DependencyUtil.LinkType.UsesLanguage);
addDeps(result,getReexportDeps(descr),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.ReexportsDep);
addDeps(result,getNonreexportDeps(descr),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.Depends);
if (descr instanceof LanguageDescriptor) {
addDeps(result,(as_he47wm_a0a1a0a5a0d0a(descr,LanguageDescriptor.class)).getExtendedLanguages(),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.ExtendsLanguage);
ListSequence.fromList(result).addElement(new DependencyUtil.Link(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("ceab5195-25ea-4f22-9b92-103b95ca8c0c")),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.LangCore));
}
if (descr instanceof GeneratorDescriptor) {
GeneratorDescriptor gen=(GeneratorDescriptor)descr;
addDeps(result,gen.getDepGenerators(),DependencyUtil.Role.DTDependency,DependencyUtil.LinkType.DependsOnGenerator);
ListSequence.fromList(result).addElement(new DependencyUtil.Link((as_he47wm_a0a0a0a0c0g0a3a0(module,Generator.class)).getSourceLanguage(),DependencyUtil.Role.DTDependency,DependencyUtil.LinkType.GeneratorLanguage));
ListSequence.fromList(result).addElement(new DependencyUtil.Link((as_he47wm_a0a0a0a0d0g0a3a0(module,Generator.class)).getSourceLanguage(),DependencyUtil.Role.GeneratorLanguage,DependencyUtil.LinkType.GeneratorLanguage));
}
break;
case UsedDevkit:
DevkitDescriptor devkit=as_he47wm_a0a0a1d0a(descr,DevkitDescriptor.class);
if (devkit == null) {
break;
}
addDeps(result,devkit.getExtendedDevkits(),DependencyUtil.Role.UsedDevkit,DependencyUtil.LinkType.ExtendsDevkit);
addDeps(result,devkit.getExportedLanguages(),DependencyUtil.Role.UsedLanguage,DependencyUtil.LinkType.ExportsLanguage);
addDeps(result,devkit.getExportedSolutions(),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.ExportsSolution);
break;
case UsedExtLanguage:
case UsedLanguage:
LanguageDescriptor lang=as_he47wm_a0a0a3d0a(descr,LanguageDescriptor.class);
if (lang == null) {
break;
}
addDeps(result,lang.getExtendedLanguages(),DependencyUtil.Role.UsedExtLanguage,DependencyUtil.LinkType.ExtendsLanguage);
if (trackRuntime) {
addDeps(result,lang.getRuntimeModules(),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.ExportsRuntime);
}
break;
case DTDependency_:
addDeps(result,getReexportDeps(descr),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.ReexportsDep);
if (descr instanceof LanguageDescriptor) {
addDeps(result,(as_he47wm_a0a1a0a1a4d0a(descr,LanguageDescriptor.class)).getExtendedLanguages(),DependencyUtil.Role.DTDependency_,DependencyUtil.LinkType.ExtendsLanguage);
}
if (trackRuntime) {
addDeps(result,getNonreexportDeps(descr),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.Depends);
}
break;
case DTDependency:
if (trackRuntime) {
addDeps(result,getReexportDeps(descr),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.ReexportsDep);
addDeps(result,getNonreexportDeps(descr),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.Depends);
}
break;
case RTDependency:
addDeps(result,getReexportDeps(descr),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.ReexportsDep);
addDeps(result,getNonreexportDeps(descr),DependencyUtil.Role.RTDependency,DependencyUtil.LinkType.Depends);
break;
case RTLibraries:
break;
case GeneratorLanguage:
addDeps(result,check_he47wm_b0a0i3a0(as_he47wm_a0b0a0i3a0(descr,LanguageDescriptor.class)),DependencyUtil.Role.GeneratorLanguage,DependencyUtil.LinkType.ExtendsLanguage);
addDeps(result,check_he47wm_b0b0i3a0(as_he47wm_a0b0b0i3a0(descr,LanguageDescriptor.class)),DependencyUtil.Role.DTDependency,DependencyUtil.LinkType.ExportsRuntime);
break;
default :
}
return result;
}
