{
  boolean finished=true;
  for (  SNode binaryOperation : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode leftType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true));
    SNode rightType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true));
    if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.EqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new Transformator.QuotationClass_rxfadt_a1a0a0c0b0q().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new Transformator.QuotationClass_rxfadt_a1a0a2a1a61().createNode())) {
      SNodeOperations.replaceWithAnother(binaryOperation,new Transformator.QuotationClass_rxfadt_a0a0a0c0b0q().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
      finished=false;
    }
 else     if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.NotEqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new Transformator.QuotationClass_rxfadt_a1a0a0a2a1a61().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new Transformator.QuotationClass_rxfadt_a1a0a0c0b0q_0().createNode())) {
      SNodeOperations.replaceWithAnother(binaryOperation,new Transformator.QuotationClass_rxfadt_a0a0a0a2a1a61().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
      finished=false;
    }
 else {
      if (TransformationUtil.isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"leftExpression",true))) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.RTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0a0a0c0b0q().createNode()) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.RTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0a0a0a2a1a61().createNode())) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),new Transformator.QuotationClass_rxfadt_a1a0a0a0a0a0c0b0q_0().createNode()))&& !(TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.LTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0a0a2a1a61().createNode()))) {
          SLinkOperations.setTarget(binaryOperation,"leftExpression",new Transformator.QuotationClass_rxfadt_a0a0a0a0a0a2a1a61().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),true);
          finished=false;
        }
 else {
          SLinkOperations.setTarget(binaryOperation,"leftExpression",new Transformator.QuotationClass_rxfadt_a0a0a0a0a0a0c0b0q().createNode(binaryOperation.getChild(LTYPE),SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),true);
          finished=false;
        }
      }
      if (TransformationUtil.isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"rightExpression",true))) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.LTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0a1a0c0b0q().createNode()) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.LTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0a0b0a2a1a61().createNode())) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),new Transformator.QuotationClass_rxfadt_a1a0a0a0a1a0c0b0q_0().createNode()))&& !(TypeChecker.getInstance().getSubtypingManager().isSubtype(binaryOperation.getChild(Transformator.RTYPE),new Transformator.QuotationClass_rxfadt_a1a0a0a0b0a2a1a61().createNode()))) {
          SLinkOperations.setTarget(binaryOperation,"rightExpression",new Transformator.QuotationClass_rxfadt_a0a0a0a0b0a2a1a61().createNode(SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),true);
          finished=false;
        }
 else {
          SLinkOperations.setTarget(binaryOperation,"rightExpression",new Transformator.QuotationClass_rxfadt_a0a0a0a0a1a0c0b0q().createNode(binaryOperation.getChild(RTYPE),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),true);
          finished=false;
        }
      }
    }
  }
  return finished;
}
