{
  PluginId debuggerPlugin=PluginManager.getPluginByClassName("jetbrains.mps.debug.api.BreakpointCreatorsManager");
  if (debuggerPlugin == null) {
    return;
  }
  BreakpointCreatorsManager manager=BreakpointCreatorsManager.getInstance();
  if (manager == null) {
    return;
  }
  for (  BreakpointCreator creator : SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators)) {
  }
{
    BreakpointCreator creator=new BreakpointCreator(null,null);
    creator.canCreate(new _FunctionTypes._return_P2_E0<Boolean,SAbstractConcept,SNode>(){
      public Boolean invoke(      SAbstractConcept concept,      SNode debuggableNode){
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"))) {
          return true;
        }
        return false;
      }
    }
);
    creator.create(new _FunctionTypes._return_P2_E0<ILocationBreakpoint,SNode,Project>(){
      public ILocationBreakpoint invoke(      SNode debuggableNode,      Project project){
        try {
          return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode,"JAVA_LINE_BREAKPOINT",project);
        }
 catch (        DebuggerNotPresentException e) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Exception while creating breakpoint for node" + debuggableNode,e);
          }
          return null;
        }
      }
    }
);
    SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators).addElement(creator);
    manager.addCreator(creator);
  }
{
    BreakpointCreator creator=new BreakpointCreator(null,null);
    creator.canCreate(new _FunctionTypes._return_P2_E0<Boolean,SAbstractConcept,SNode>(){
      public Boolean invoke(      SAbstractConcept concept,      SNode debuggableNode){
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca68L,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"))) {
          return true;
        }
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93c84351fL,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
          return true;
        }
        return false;
      }
    }
);
    creator.create(new _FunctionTypes._return_P2_E0<ILocationBreakpoint,SNode,Project>(){
      public ILocationBreakpoint invoke(      SNode debuggableNode,      Project project){
        try {
          return Debuggers.getInstance().getDebuggerByNameSafe("Java").createBreakpoint(debuggableNode,"JAVA_FIELD_BREAKPOINT",project);
        }
 catch (        DebuggerNotPresentException e) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Exception while creating breakpoint for node" + debuggableNode,e);
          }
          return null;
        }
      }
    }
);
    SetSequence.fromSet(DebugInfoProvider_CustomApplicationPlugin.this.myCreators).addElement(creator);
    manager.addCreator(creator);
  }
}
