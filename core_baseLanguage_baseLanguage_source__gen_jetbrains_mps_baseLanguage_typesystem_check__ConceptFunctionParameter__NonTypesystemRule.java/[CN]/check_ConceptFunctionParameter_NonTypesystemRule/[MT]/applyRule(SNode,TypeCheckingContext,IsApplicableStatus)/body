{
  SNode conceptFunction=SNodeOperations.getAncestor(parameter,"jetbrains.mps.baseLanguage.structure.ConceptFunction",false,false);
  if (SNodeOperations.isInstanceOf(conceptFunction,"jetbrains.mps.baseLanguage.structure.Closure")) {
{
      BaseQuickFixProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"concept function parameter can not be used in closure","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1197313614703",intentionProvider,errorTarget);
    }
  }
 else {
    final SNode parameterConcept=SNodeOperations.getConceptDeclaration(parameter);
    Iterable<SNode> seq=ListSequence.fromList(ConceptFunction_Behavior.call_getParameters_1213877374450(conceptFunction)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SConceptOperations.isSubConceptOf(parameterConcept,NameUtil.nodeFQName(it));
      }
    }
);
    if (Sequence.fromIterable(seq).isEmpty() && ConceptFunctionParameter_Behavior.call_needConceptFunction_1236687728308(parameter)) {
{
        BaseQuickFixProvider intentionProvider=null;
        IErrorTarget errorTarget=new NodeErrorTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"not applicable in this context","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1197313958459",intentionProvider,errorTarget);
      }
    }
  }
}
