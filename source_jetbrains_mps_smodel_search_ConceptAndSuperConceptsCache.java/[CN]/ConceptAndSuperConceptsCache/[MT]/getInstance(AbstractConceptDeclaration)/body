{
  SNode node=topConcept.getNode();
  Object key=keyProducer.createKey(node);
  ConceptAndSuperConceptsCache cache=(ConceptAndSuperConceptsCache)CachesManager.getInstance().getCache(key);
  if (cache == null) {
    cache=new ConceptAndSuperConceptsCache(key,topConcept);
    Set<SModelDescriptor> dependsOnModel=new HashSet<SModelDescriptor>();
    for (    AbstractConceptDeclaration concept : cache.getConcepts()) {
      dependsOnModel.add(concept.getModel().getModelDescriptor());
    }
    CachesManager.getInstance().putCache(key,cache,dependsOnModel);
  }
  return cache;
}
