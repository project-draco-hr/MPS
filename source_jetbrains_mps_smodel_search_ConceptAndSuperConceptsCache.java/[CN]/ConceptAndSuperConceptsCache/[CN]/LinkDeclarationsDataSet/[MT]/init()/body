{
  myLinkDeclarationByRole=new HashMap<String,LinkDeclaration>();
  List<AbstractConceptDeclaration> concepts=((ConceptAndSuperConceptsCache)getOwnerCache()).getConcepts();
  for (  AbstractConceptDeclaration concept : concepts) {
    List<LinkDeclaration> list=concept.getLinkDeclarations();
    for (    LinkDeclaration link : list) {
      String role1=link.getRole();
      if (role1 == null)       continue;
      if (myLinkDeclarationByRole.containsKey(role1))       continue;
      myLinkDeclarationByRole.put(role1,link);
    }
  }
  Collection<LinkDeclaration> links=myLinkDeclarationByRole.values();
  Set<LinkDeclaration> overriddenLinks=new HashSet<LinkDeclaration>();
  for (  LinkDeclaration link : links) {
    if (overriddenLinks.contains(link))     continue;
    LinkDeclaration specializedLink=link.getSpecializedLink();
    while (specializedLink != null) {
      overriddenLinks.add(specializedLink);
      specializedLink=specializedLink.getSpecializedLink();
    }
  }
  myLinkDeclarationsExcludingOverridden=new ArrayList<LinkDeclaration>(5);
  for (  LinkDeclaration link : links) {
    if (!overriddenLinks.contains(link)) {
      myLinkDeclarationsExcludingOverridden.add(link);
    }
  }
  myDependsOnNodes=new HashSet<SNode>();
  for (  AbstractConceptDeclaration concept : concepts) {
    myDependsOnNodes.add(concept.getNode());
  }
  for (  LinkDeclaration link : links) {
    myDependsOnNodes.add(link.getNode());
  }
}
