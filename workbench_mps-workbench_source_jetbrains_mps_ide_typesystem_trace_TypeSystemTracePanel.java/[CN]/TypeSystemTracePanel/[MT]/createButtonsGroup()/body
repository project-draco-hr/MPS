{
  ToggleAction showApplyRuleAction=new ToggleAction("Show Apply Rule","Show apply rule operations in trace",Nodes.Rule){
    private boolean mySelected=TraceSettings.isShowApplyRuleOperations();
    public boolean isSelected(    AnActionEvent e){
      return mySelected;
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelected=state;
      TraceSettings.setShowApplyRuleOperations(state);
      myTraceTree.rebuildNow();
      myTraceTree.expandAll();
    }
  }
;
  ToggleAction showGenerationModeAction=new ToggleAction("Generation Mode","Show trace in generation mode",Nodes.Generator){
    private boolean mySelected=TraceSettings.isGenerationMode();
    public boolean isSelected(    AnActionEvent e){
      return mySelected;
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelected=state;
      TraceSettings.setGenerationMode(state);
      myTraceTree.rebuildNow();
      myTraceTree.expandAll();
    }
  }
;
  ToggleAction showTypesExpansion=new ToggleAction("Show types expansion","Show types expansion",AllIcons.Nodes.Folder){
    private boolean mySelected=TraceSettings.isShowTypesExpansion();
    public boolean isSelected(    AnActionEvent e){
      return mySelected;
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelected=state;
      TraceSettings.setShowTypesExpansion(state);
      myTraceTree.rebuildNow();
      myTraceTree.expandAll();
    }
  }
;
  ToggleAction showTraceForSelectedNode=new ToggleAction("Trace for Selected Node","Show trace for selected node",Nodes.Node){
    private boolean mySelected=TraceSettings.isTraceForSelectedNode();
    public boolean isSelected(    AnActionEvent e){
      return mySelected;
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelected=state;
      TraceSettings.setTraceForSelectedNode(state);
      refresh(false);
    }
  }
;
  ToggleAction showBlockDependencies=new ToggleAction("Show block dependencies","Show block dependencies in trace",MPSIcons.General.Block){
    private boolean mySelected=TraceSettings.isShowBlockDependencies();
    public boolean isSelected(    AnActionEvent e){
      return mySelected;
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelected=state;
      TraceSettings.setShowBlockDependencies(state);
      myTraceTree.rebuildNow();
      myTraceTree.expandAll();
    }
  }
;
  BaseAction refreshAction=new BaseAction("Refresh","Refresh",Actions.Refresh){
    protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      refresh(true);
    }
  }
;
  BaseAction nextErrorAction=new BaseAction("Next error","Navigate to next error in trace",AllIcons.General.Error){
    protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      myTraceTree.goToNextError();
    }
  }
;
  BaseAction closeAction=new BaseAction("Close","Close type system trace tool",Actions.Cancel){
    protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      myTool.setAvailable(false);
    }
  }
;
  return ActionUtils.groupFromActions(closeAction,showApplyRuleAction,showGenerationModeAction,showTraceForSelectedNode,showTypesExpansion,showBlockDependencies,refreshAction,nextErrorAction);
}
