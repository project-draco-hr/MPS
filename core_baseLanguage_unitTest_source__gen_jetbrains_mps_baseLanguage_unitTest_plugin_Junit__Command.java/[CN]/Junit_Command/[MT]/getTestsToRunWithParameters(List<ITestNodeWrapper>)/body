{
  final Wrappers._T<TestRunParameters> runParams=new Wrappers._T<TestRunParameters>();
  final Wrappers._T<List<ITestNodeWrapper>> testsToRun=new Wrappers._T<List<ITestNodeWrapper>>();
  final Wrappers._T<String> skipped=new Wrappers._T<String>();
  if (ListSequence.fromList(tests).isEmpty()) {
    return MultiTuple.<List<ITestNodeWrapper>,TestRunParameters>from(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()),new TestRunParameters());
  }
  ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<String>(){
    public String invoke(){
      runParams.value=ListSequence.fromList(tests).first().getTestRunParameters();
      testsToRun.value=ListSequence.fromList(tests).where(new IWhereFilter<ITestNodeWrapper>(){
        public boolean accept(        ITestNodeWrapper it){
          return eq_yo2c7x_a0a0a0a0a0a0b0a0a0a0a0e0c(check_u7m9j_a0a0a0a0a1a0e0b(it),runParams.value);
        }
      }
).toListSequence();
      return skipped.value=IterableUtils.join(ListSequence.fromList(tests).where(new IWhereFilter<ITestNodeWrapper>(){
        public boolean accept(        ITestNodeWrapper it){
          return it != null && (neq_yo2c7x_a0a0a0a0a0a0a0a2a0a0a0a0a4a2(it.getTestRunParameters(),runParams.value));
        }
      }
).<String>select(new ISelector<ITestNodeWrapper,String>(){
        public String select(        ITestNodeWrapper it){
          return check_u7m9j_a0a0a0a0c0a4a1(it);
        }
      }
)," ");
    }
  }
));
  if (StringUtils.isNotEmpty(skipped.value)) {
    LOG.warning("All tests could not be executed together. Skipped " + skipped.value);
  }
  return MultiTuple.<List<ITestNodeWrapper>,TestRunParameters>from(testsToRun.value,runParams.value);
}
