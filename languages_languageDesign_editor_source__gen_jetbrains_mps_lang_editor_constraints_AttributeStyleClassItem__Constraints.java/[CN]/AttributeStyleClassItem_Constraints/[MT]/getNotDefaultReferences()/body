{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("attribute",new BaseReferenceConstraintsDescriptor("attribute",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ydnl2u_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            List<Language> languages=SModelOperations.getLanguages(_context.getModel());
            List<SModel> models=ListSequence.fromList(new ArrayList<SModel>());
            ListSequence.fromList(models).addSequence(ListSequence.fromList(SModelOperations.allImportedModels(_context.getModel())));
            ListSequence.fromList(models).addSequence(ListSequence.fromList(languages).select(new ISelector<Language,EditableSModelDescriptor>(){
              public EditableSModelDescriptor select(              Language it){
                return LanguageAspect.EDITOR.get(it);
              }
            }
));
            return new ModelsScope(models,false,"jetbrains.mps.lang.editor.structure.StyleAttributeDeclaration");
          }
        }
      }
;
    }
  }
);
  return references;
}
