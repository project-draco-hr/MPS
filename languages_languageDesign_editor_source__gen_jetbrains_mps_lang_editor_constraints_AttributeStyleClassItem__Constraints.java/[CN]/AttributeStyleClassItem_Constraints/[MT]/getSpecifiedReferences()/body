{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x3744c0f9eae0a402L,0x3744c0f9eae0b8d3L,"attribute"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x3744c0f9eae0a402L,0x3744c0f9eae0b8d3L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ydnl2u_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            List<Language> languages=SModelOperations.getLanguages(_context.getModel());
            List<SModel> models=ListSequence.fromList(new ArrayList<SModel>());
            ListSequence.fromList(models).addElement(_context.getModel());
            ListSequence.fromList(models).addSequence(ListSequence.fromList(SModelOperations.allImportedModels(_context.getModel())));
            ListSequence.fromList(models).addSequence(ListSequence.fromList(languages).select(new ISelector<Language,SModel>(){
              public SModel select(              Language it){
                return SModuleOperations.getAspect(it,"editor");
              }
            }
));
            return new ModelsScope(models,false,MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x3744c0f9ea5367ebL,"jetbrains.mps.lang.editor.structure.StyleAttributeDeclaration"));
          }
        }
      }
;
    }
  }
);
  return references;
}
