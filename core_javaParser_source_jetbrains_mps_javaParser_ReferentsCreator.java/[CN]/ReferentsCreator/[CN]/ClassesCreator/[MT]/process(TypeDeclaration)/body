{
  char[][] name=typeDeclaration.binding.compoundName;
  SourceTypeBinding binding=typeDeclaration.binding;
  if (binding instanceof LocalTypeBinding) {
    char[] localName=binding.constantPoolName();
    if (localName == null) {
      return false;
    }
    for (int i=0, c=localName.length; i < c; ++i) {
      if (localName[i] == '/') {
        localName[i]='.';
      }
    }
    name=new char[1][0];
    name[0]=localName;
  }
  SModel model=myReferentsCreator.myCurrentModel;
  Classifier classifier;
  Visibility visibility=getClassVisibility(binding);
  if (binding.isClass()) {
    if (binding.isLocalType()) {
      classifier=AnonymousClass.newInstance(model);
    }
 else {
      ClassConcept classConcept=ClassConcept.newInstance(model);
      classConcept.setAbstractClass(binding.isAbstract());
      classConcept.setIsFinal(binding.isFinal());
      classifier=classConcept;
    }
  }
 else   if (binding.isInterface() && !binding.isAnnotationType()) {
    classifier=Interface.newInstance(model);
  }
 else   if (binding.isAnnotationType()) {
    classifier=jetbrains.mps.baseLanguage.structure.Annotation.newInstance(model);
  }
 else   if (binding.isEnum()) {
    classifier=EnumClass.newInstance(model);
  }
 else {
    return false;
  }
  String shortName=new String(name[name.length - 1]);
  int dollarIndex=shortName.indexOf('$');
  if (dollarIndex != -1) {
    shortName=shortName.substring(dollarIndex + 1);
  }
  classifier.setName(shortName);
  classifier.setVisibility(visibility);
  myReferentsCreator.myBindingMap.put(binding,classifier);
  TypeParameter[] typeParameters=typeDeclaration.typeParameters;
  if (typeParameters != null) {
    for (    TypeParameter typeParameter : typeParameters) {
      TypeVariableDeclaration typeVariableDeclaration=TypeVariableDeclaration.newInstance(model);
      typeVariableDeclaration.setName(new String(typeParameter.name));
      classifier.addTypeVariableDeclaration(typeVariableDeclaration);
    }
  }
  return true;
}
