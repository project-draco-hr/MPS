{
  try {
    MethodBinding b=ctorDecl.binding;
    SModel model=myReferentsCreator.myCurrentModel;
    Classifier enclosingType=(Classifier)myReferentsCreator.myBindingMap.get(scope.enclosingSourceType());
    assert(enclosingType instanceof ClassConcept);
    ClassConcept classConcept=(ClassConcept)enclosingType;
    jetbrains.mps.baseLanguage.structure.ConstructorDeclaration constructorDeclaration=jetbrains.mps.baseLanguage.structure.ConstructorDeclaration.newInstance(model);
    Visibility visibility=getMethodVisibility(b);
    constructorDeclaration.setVisibility(visibility);
    mapParameters(constructorDeclaration,ctorDecl);
    if (!(classConcept instanceof AnonymousClass)) {
      classConcept.addConstructor(constructorDeclaration);
    }
    myReferentsCreator.myBindingMap.put(b,constructorDeclaration);
    return true;
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
}
