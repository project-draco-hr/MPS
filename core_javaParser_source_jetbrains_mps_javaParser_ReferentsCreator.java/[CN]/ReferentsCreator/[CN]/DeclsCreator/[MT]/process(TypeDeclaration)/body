{
  SourceTypeBinding binding=typeDeclaration.binding;
  if (binding.constantPoolName() == null) {
    return false;
  }
  Classifier classifier=(Classifier)myReferentsCreator.myBindingMap.get(binding);
  try {
    boolean isTopLevel=true;
    if (binding instanceof LocalTypeBinding) {
      isTopLevel=false;
      AnonymousClass anonymousClass=(AnonymousClass)classifier;
      anonymousClass.setName("");
      ReferenceBinding superClassBinding=binding.superclass();
      if (superClassBinding != null) {
        ClassifierType superClass=(ClassifierType)createType(superClassBinding);
        anonymousClass.setClassifier(superClass.getClassifier());
        for (        Type t : superClass.getParameters()) {
          anonymousClass.addTypeParameter(CopyUtil.copy(t));
        }
      }
    }
 else {
      ReferenceBinding superClassBinding=binding.superclass();
      if (superClassBinding != null) {
        assert(binding.superclass().isClass() || binding.superclass().isEnum());
        if (classifier instanceof ClassConcept) {
          ClassConcept classConcept=(ClassConcept)classifier;
          ClassifierType superClass=(ClassifierType)createType(superClassBinding);
          classConcept.setSuperclass(superClass);
        }
      }
      ReferenceBinding[] superInterfaces=binding.superInterfaces();
      for (      ReferenceBinding superInterfaceBinding : superInterfaces) {
        assert(superInterfaceBinding.isInterface());
        ClassifierType superInterface=(ClassifierType)createType(superInterfaceBinding);
        if (classifier instanceof ClassConcept) {
          ClassConcept classConcept=(ClassConcept)classifier;
          classConcept.addImplementedInterface(superInterface);
        }
        if (classifier instanceof Interface) {
          Interface intfc=(Interface)classifier;
          intfc.addExtendedInterface(superInterface);
        }
      }
      if (binding instanceof MemberTypeBinding) {
        isTopLevel=false;
        MemberTypeBinding memberTypeBinding=(MemberTypeBinding)binding;
        SourceTypeBinding enclosingClass=memberTypeBinding.enclosingType;
        ClassConcept classConcept=(ClassConcept)myReferentsCreator.myBindingMap.get(enclosingClass);
        classifier.setNonStatic(!memberTypeBinding.isStatic());
        classConcept.addStaticInnerClassifiers(classifier);
      }
    }
    TypeParameter[] typeParameters=typeDeclaration.typeParameters;
    TypeVariableDeclaration[] tvds=classifier.getTypeVariableDeclarations().toArray(new TypeVariableDeclaration[typeParameters.length]);
    if (typeParameters != null) {
      for (int i=0; i < typeParameters.length; i++) {
        TypeParameter typeParameter=typeParameters[i];
        TypeVariableDeclaration typeVar=tvds[i];
        TypeVariableBinding typeVariableBinding=typeParameter.binding;
        if (typeVariableBinding.firstBound != null) {
          typeVar.setBound(createType(typeVariableBinding.firstBound));
        }
        for (        TypeBinding auxBoundBinding : typeVariableBinding.otherUpperBounds()) {
          typeVar.addAuxBounds((ClassifierType)createType(auxBoundBinding));
        }
        boolean isExtends=(typeVariableBinding.superclass != null && typeVariableBinding.firstBound == typeVariableBinding.superclass) || (typeVariableBinding.superInterfaces != null && typeVariableBinding.superInterfaces != Binding.NO_SUPERINTERFACES);
        typeVar.setExtends(isExtends);
      }
    }
    myReferentsCreator.myTypeDecls.add(typeDeclaration);
    if (isTopLevel) {
      myReferentsCreator.myTopLevelTypeDecls.add(typeDeclaration);
    }
    return true;
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
}
