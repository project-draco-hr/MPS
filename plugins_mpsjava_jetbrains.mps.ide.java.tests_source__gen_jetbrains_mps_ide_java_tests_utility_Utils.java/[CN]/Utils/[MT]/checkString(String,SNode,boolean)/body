{
  try {
    JavaParser parser=new JavaParser();
    SModel mdl;
    mdl=SModelRepository.getInstance().getModelDescriptor("jetbrains.mps.ide.java.testMaterial.placeholder");
    FeatureKind howToParse=(onlyStubs ? FeatureKind.CLASS_STUB : FeatureKind.CLASS);
    List<SNode> res=parser.parse(code,howToParse,null,true).getNodes();
    Assert.assertSame(ListSequence.fromList(res).count(),1);
    SNode result=SNodeOperations.cast(res.get(0),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,"jetbrains.mps.baseLanguage.structure.Classifier"));
    SModelOperations.addRootNode(mdl,result);
    if (mdl instanceof SModelBase && SNodeOperations.getModel(expected) instanceof SModelBase) {
      for (      SModuleReference langref : ((SModelBase)SNodeOperations.getModel(expected)).importedLanguages()) {
        ((SModelBase)mdl).addLanguage(langref);
      }
    }
    if (onlyStubs) {
      NodePatcher.removeStatements(expected);
    }
 else {
      JavaParser.tryResolveUnknowns(Sequence.<SNode>singleton(result));
    }
    NodePatcher.fixNonStatic(expected);
    NodePatcher.fixNonStatic(result);
    NodePatcher.copyImportAttrs(result,expected);
    Map<SNode,SNode> nodeMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
    buildClassifierNodeMap(result,expected,nodeMap);
    NodeDifference diff=NodesMatcher.matchNodes(result,expected,nodeMap);
    Assert.assertEquals(null,diff);
  }
 catch (  JavaParseException e) {
    throw new RuntimeException(e);
  }
}
