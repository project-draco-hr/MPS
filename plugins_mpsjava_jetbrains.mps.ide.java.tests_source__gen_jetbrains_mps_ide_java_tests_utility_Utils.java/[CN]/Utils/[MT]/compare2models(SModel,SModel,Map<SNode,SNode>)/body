{
  boolean wereErrors=false;
  List<SNode> binRoots=SModelOperations.roots(left,null);
  List<SNode> srcRoots=SModelOperations.roots(right,null);
  binRoots=ListSequence.fromList(binRoots).sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    }
  }
,true).toListSequence();
  srcRoots=ListSequence.fromList(srcRoots).sort(new ISelector<SNode,String>(){
    public String select(    SNode it){
      return SPropertyOperations.getString(SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    }
  }
,true).toListSequence();
  List<NodeDifference> diff=NodesMatcher.matchNodes(binRoots,srcRoots,nodeMap);
  if (diff != null) {
    wereErrors=true;
    System.out.println("Diff: " + diff);
  }
  return wereErrors;
}
