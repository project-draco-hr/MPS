{
  try {
    if (((EditorCell)MapSequence.<String,Object>fromMap(_params).get("currentCell")) instanceof EditorCell_Collection) {
      EditorCell_Collection collection=(EditorCell_Collection)((EditorCell)MapSequence.<String,Object>fromMap(_params).get("currentCell"));
      Queue<EditorCell_Collection> collections=QueueSequence.<EditorCell_Collection>fromQueue(new LinkedList<EditorCell_Collection>());
      QueueSequence.fromQueue(collections).addLastElement(collection);
      while (QueueSequence.<EditorCell_Collection>fromQueue(collections).isNotEmpty()) {
        EditorCell_Collection nextCollection=QueueSequence.fromQueue(collections).removeFirstElement();
        if (nextCollection.getCellLayout() instanceof CellLayout_Vertical) {
          return;
        }
        for (        EditorCell childCell : Sequence.<EditorCell>fromIterable(nextCollection)) {
          if (childCell instanceof EditorCell_Collection) {
            QueueSequence.fromQueue(collections).addLastElement((EditorCell_Collection)childCell);
          }
        }
      }
    }
    EditorCell current=((EditorCell)MapSequence.<String,Object>fromMap(_params).get("currentCell"));
    List<SNode> nodesToDelete=new ArrayList<SNode>();
    EditorCell cellToSelect=null;
    while (true) {
      if (current.getParent() == null) {
        break;
      }
      CellLayout layout=current.getParent().getCellLayout();
      if (layout instanceof CellLayout_Indent) {
        SNode currentNode=current.getSNode();
        if (SNodeOperations.isInstanceOf(currentNode,"jetbrains.mps.baseLanguage.structure.Statement") || (SNodeOperations.getAncestor(currentNode,"jetbrains.mps.baseLanguage.structure.Statement",false,false) == null)) {
          EditorCell root=current.getRootParent();
          EditorCell[] siblings=current.getParent().getCells();
          for (int i=Arrays.asList(siblings).indexOf(current); i <= siblings.length - 1; i++) {
            EditorCell sibling=siblings[i];
            ListSequence.<SNode>fromList(nodesToDelete).addElement(sibling.getSNode());
            if (CellLayout_Indent.isNewLineAfter(root,sibling)) {
              cellToSelect=sibling.getNextLeaf(CellConditions.SELECTABLE);
              break;
            }
          }
          if (cellToSelect == null) {
            cellToSelect=current.getNextLeaf(CellConditions.SELECTABLE);
          }
          break;
        }
      }
 else       if (layout instanceof CellLayout_Vertical) {
        if (current.isBigCell()) {
          ListSequence.<SNode>fromList(nodesToDelete).addElement(current.getSNode());
          cellToSelect=current.getNextLeaf(CellConditions.SELECTABLE);
          break;
        }
      }
      current=current.getParent();
    }
    for (    SNode nodeToDelete : nodesToDelete) {
      if ((nodeToDelete != null) && SNodeOperations.getParent(nodeToDelete) != null) {
        SNodeOperations.deleteNode(nodeToDelete);
      }
    }
    if (cellToSelect != null) {
      ((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")).changeSelection(cellToSelect);
      cellToSelect.home();
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "DeleteLine",t);
    }
  }
}
