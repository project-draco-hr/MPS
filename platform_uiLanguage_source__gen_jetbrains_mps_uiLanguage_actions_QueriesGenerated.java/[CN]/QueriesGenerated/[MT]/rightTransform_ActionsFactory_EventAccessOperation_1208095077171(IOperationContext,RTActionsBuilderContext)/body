{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.uiLanguage.structure.AddListenerOperation",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode oNode=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.uiLanguage.structure.AddListenerOperation",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),oNode);
        SLinkOperations.setTarget(oNode,"eventOperation",_context.getSourceNode(),true);
        return oNode;
      }
      public String getMatchingText(      String pattern){
        return "+=";
      }
      public String getDescriptionText(      String pattern){
        return "Add listener operation";
      }
    }
);
  }
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.uiLanguage.structure.RemoveListenerOperation",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode oNode=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.uiLanguage.structure.RemoveListenerOperation",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),oNode);
        SLinkOperations.setTarget(oNode,"eventOperation",_context.getSourceNode(),true);
        return oNode;
      }
      public String getMatchingText(      String pattern){
        return "-=";
      }
      public String getDescriptionText(      String pattern){
        return "Remove listener operation";
      }
    }
);
  }
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.uiLanguage.structure.RaiseOperation",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode oNode=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.uiLanguage.structure.RaiseOperation",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),oNode);
        SLinkOperations.setTarget(oNode,"eventOperation",_context.getSourceNode(),true);
        return oNode;
      }
      public String getMatchingText(      String pattern){
        return ".raise";
      }
      public String getDescriptionText(      String pattern){
        return "Raise event";
      }
    }
);
  }
  return result;
}
