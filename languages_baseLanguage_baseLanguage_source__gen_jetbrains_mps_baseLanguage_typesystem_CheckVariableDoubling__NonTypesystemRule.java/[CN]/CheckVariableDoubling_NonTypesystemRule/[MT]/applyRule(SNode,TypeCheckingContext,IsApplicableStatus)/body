{
  Scope paramsScope=Scope.getScope(Scope.parent(iVariableDeclaration),iVariableDeclaration,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
  Scope localsScope=Scope.getScope(Scope.parent(iVariableDeclaration),iVariableDeclaration,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
  List<SNode> vars=new ArrayList<SNode>();
  if (localsScope != null) {
    vars.addAll(Sequence.fromIterable(localsScope.getAvailableElements(null)).toListSequence());
  }
  if (paramsScope != null) {
    vars.addAll(Sequence.fromIterable(paramsScope.getAvailableElements(null)).toListSequence());
  }
  SNode nearestMethod=SNodeOperations.getAncestor(iVariableDeclaration,"jetbrains.mps.baseLanguage.structure.IMethodLike",false,false);
  List<SNode> methodVariables=SNodeOperations.getDescendants(nearestMethod,"jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{});
  List<SNode> intersection=new ArrayList<SNode>();
  for (  SNode var : methodVariables) {
    if (vars.contains(var)) {
      ListSequence.fromList(intersection).addElement(var);
    }
  }
  for (  SNode var : intersection) {
    if (var == null || SPropertyOperations.getString(SNodeOperations.cast(var,"jetbrains.mps.lang.core.structure.INamedConcept"),"name") == null) {
      continue;
    }
    if (SPropertyOperations.getString(SNodeOperations.cast(var,"jetbrains.mps.lang.core.structure.INamedConcept"),"name").equals(SPropertyOperations.getString(iVariableDeclaration,"name")) && !(var == iVariableDeclaration)) {
{
        MessageTarget errorTarget=new NodeMessageTarget();
        errorTarget=new PropertyMessageTarget("name");
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(iVariableDeclaration,"Variable " + SPropertyOperations.getString(iVariableDeclaration,"name") + " is already defined in the scope","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","4164094338984214928",null,errorTarget);
      }
    }
  }
}
