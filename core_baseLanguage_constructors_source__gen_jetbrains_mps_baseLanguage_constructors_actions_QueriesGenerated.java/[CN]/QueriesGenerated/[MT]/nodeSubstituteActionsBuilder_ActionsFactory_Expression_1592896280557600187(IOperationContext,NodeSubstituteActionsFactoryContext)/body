{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          List<SNode> containers=SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorContainer");
          List<SNode> customConstructors=new ArrayList<SNode>();
          for (          SNode container : ListSequence.fromList(containers)) {
            ListSequence.fromList(customConstructors).addSequence(ListSequence.fromList(SLinkOperations.getTargets(container,"constructors",true)));
          }
          return customConstructors;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode usage=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.constructors.structure.CustomConstructorUsage",null);
              SLinkOperations.setTarget(usage,"customConstructor",(item),false);
              return usage;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"leftParenthesis") + "..." + SPropertyOperations.getString((item),"rightParenthesis");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString((item),"description");
            }
          }
);
        }
      }
    }
  }
  return result;
}
