{
  List<Dart> darts=ListSequence.fromList(node.getEdges()).select(new ISelector<Edge,Dart>(){
    public Dart select(    Edge edge){
      return ListSequence.fromList(myEmbeddedGraph.getDarts(edge)).findFirst(new IWhereFilter<Dart>(){
        public boolean accept(        Dart dart){
          return dart.getSource() == node;
        }
      }
);
    }
  }
).toListSequence();
  Dart first=ListSequence.fromList(darts).findFirst(new IWhereFilter<Dart>(){
    public boolean accept(    Dart dart){
      return MapSequence.fromMap(myDirections).containsKey(dart);
    }
  }
);
  List<Dart> orderedDarts=ListSequence.fromList(new ArrayList<Dart>());
  ListSequence.fromList(orderedDarts).addElement(first);
  Dart cur=first;
  do {
    Face face=myEmbeddedGraph.getFace(cur);
    Dart next=null;
    for (    Dart dart : ListSequence.fromList(darts)) {
      if (myEmbeddedGraph.getFace(myEmbeddedGraph.getOpposite(dart)) == face) {
        next=dart;
      }
    }
    MapSequence.fromMap(myDirections).put(next,(MapSequence.fromMap(myDirections).get(cur) + MapSequence.fromMap(myAngles).get(cur)) % 4);
    MapSequence.fromMap(myDirections).put(myEmbeddedGraph.getOpposite(next),(MapSequence.fromMap(myDirections).get(next) + 2) % 4);
    cur=next;
  }
 while (cur != first);
}
