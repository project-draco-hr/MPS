{
  if (pattern == null || pattern.equals("")) {
    return;
  }
  if (cell instanceof EditorManager.EditorCell_RTHint) {
    EditorManager.EditorCell_RTHint rtHintCell=(EditorCell_RTHint)cell;
    INodeSubstituteInfo substituteInfo=rtHintCell.getSubstituteInfo();
    String smallPattern=pattern.substring(0,pattern.length() - 1);
    String tail="" + pattern.charAt(pattern.length() - 1);
    EditorCell nextCell=cell.getNextLeaf();
    if (canCompleteSmallPatternImmediately(substituteInfo,pattern,"")) {
      substituteInfo.getMatchingActions(pattern,true).get(0).substitute(editorContext,pattern);
    }
 else     if (pattern.length() > 0 && canCompleteSmallPatternImmediately(substituteInfo,smallPattern,tail)) {
      List<INodeSubstituteAction> matchingActions=substituteInfo.getMatchingActions(smallPattern,true);
      INodeSubstituteAction item=matchingActions.get(0);
      SNode newNode=item.substitute(editorContext,smallPattern);
      editorContext.flushEvents();
      EditorCell cellForNewNode=editorContext.getNodeEditorComponent().findNodeCell(newNode);
      EditorCell_Label target=null;
      if (EditorUtil.findErrorOrEditableCell(cellForNewNode) instanceof EditorCell_Label) {
        target=(EditorCell_Label)EditorUtil.findErrorOrEditableCell(cellForNewNode);
      }
      if (target != null) {
        target.changeText(tail);
        target.end();
        if (!EditorUtil.isValidCell(target)) {
          EditorUtil.validateCell(target,editorContext,true);
        }
      }
    }
 else     if (substituteInfo.getMatchingActions(pattern,false).isEmpty() && substituteInfo.getMatchingActions(pattern.trim(),false).isEmpty() && nextCell != null && nextCell.isErrorState() && nextCell instanceof EditorCell_Label && ((EditorCell_Label)nextCell).isEditable()) {
      cell.getSNode().removeRightTransformHint();
      EditorCell_Label label=(EditorCell_Label)nextCell;
      editorContext.getNodeEditorComponent().changeSelection(label);
      label.changeText(pattern);
      label.end();
    }
    return;
  }
  String smallPattern=pattern.substring(0,pattern.length() - 1);
  String tail=pattern.substring(pattern.length() - 1,pattern.length());
  processCell(cell,editorContext,smallPattern,tail);
}
