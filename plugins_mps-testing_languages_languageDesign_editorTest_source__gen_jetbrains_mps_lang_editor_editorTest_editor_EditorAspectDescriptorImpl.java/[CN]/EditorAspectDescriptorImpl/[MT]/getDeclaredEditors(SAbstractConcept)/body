{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AttractsFocusBlock_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new BinaryExpression_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new BracesBlock_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new BracesStubBlock_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ClassReference_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new CollapsedByDefault_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new CollapsedConditionally_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new CollapsibleConcept_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new Composition_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new DelTestChildContainer_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new FoldingContainer_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new IBaseTestBlock_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new InitChildWithDirectCycle_card1_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new InitChildWithDirectCycle_card1n_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new InitChildWithTwoSameConceptChildren_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new InitContainer_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new InspectorBlock_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new IntegerLiteral_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new NonEmptyProperty_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new NotEditableVaraileReference_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceAnnotataion_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new SelectionChild_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new SelectionContainer_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new SideTranformWrapper_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimplePropertyAttribute_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimplePropertyContainer_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new StubBlock_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleChild_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new StyleParent_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstTestBooleanPropertyChild_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstTestEnumPropertyChild_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new SubstTestRoot_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new TestBlockList_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableDeclarationBlock_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new VariableDeclarationReference_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new VerticalLayoutBlockList_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
