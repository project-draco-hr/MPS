{
  IModule module=model.getModelDescriptor().getModule();
  JavaCompiler javaCompiler=new JavaCompiler(operationContext,module,(File)null,false,model,ProjectHelper.toIdeaProject(project));
  JavaParser parser=new JavaParser();
  try {
    List<SNode> nodes;
    if (FeatureKind.STATEMENTS.equals(featureKind) || FeatureKind.CLASS.equals(featureKind) || FeatureKind.CLASS_CONTENT.equals(featureKind)) {
      nodes=parser.parse(javaCode,SModelOperations.getModelName(model),featureKind,true).getNodes();
    }
 else {
      nodes=javaCompiler.compileIsolated(javaCode,featureKind);
    }
    if (ListSequence.fromList(nodes).isEmpty()) {
      JOptionPane.showMessageDialog(null,"nothing to paste as Java","ERROR",JOptionPane.ERROR_MESSAGE);
      return;
    }
switch (featureKind) {
case CLASS:
      ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode node){
          SModelOperations.addRootNode(model,node);
        }
      }
);
    break;
case CLASS_CONTENT:
  for (  SNode node : ListSequence.fromList(nodes)) {
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","method"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","staticField"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept","field"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept","staticMethod"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept","constructor"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Annotation"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Annotation","annotationMethod"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Classifier")) {
      pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.Classifier","staticInnerClassifiers"));
    }
  }
break;
case STATEMENTS:
for (SNode node : ListSequence.fromList(nodes)) {
pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"));
}
break;
default :
}
}
 catch (ConversionFailedException ex) {
JOptionPane.showMessageDialog(null,ex.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
}
}
