{
  SModule module=model.getModule();
  JavaParser parser=new JavaParser();
  try {
    SNode context=null;
    if (FeatureKind.CLASS_CONTENT.equals(featureKind)) {
      context=SNodeOperations.getAncestor(anchor,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    }
    List<SNode> nodes=parser.parse(javaCode,featureKind,context,true).getNodes();
    if (ListSequence.fromList(nodes).isEmpty()) {
      JOptionPane.showMessageDialog(null,"nothing to paste as Java","ERROR",JOptionPane.ERROR_MESSAGE);
      return;
    }
switch (featureKind) {
case CLASS:
      ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode node){
          SModelOperations.addRootNode(model,node);
        }
      }
);
    break;
case CLASS_CONTENT:
  for (  SNode node : ListSequence.fromList(nodes)) {
    if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Annotation"));
    }
 else     if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Classifier")) {
      pasteMember(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"),anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"));
    }
  }
break;
case STATEMENTS:
for (SNode node : ListSequence.fromList(nodes)) {
pasteAtAnchorInRole(node,anchor,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"));
}
break;
default :
}
JavaParser.tryResolveUnknowns(nodes);
JavaToMpsConverter mfParser=new JavaToMpsConverter(operationContext.getModule(),operationContext.getProject().getRepository());
mfParser.tryResolveRefs(nodes,featureKind,new EmptyProgressMonitor());
}
 catch (JavaParseException ex) {
JOptionPane.showMessageDialog(null,ex.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
}
}
