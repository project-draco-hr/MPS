{
  monitor.start(getDescription(),2);
  try {
    List<SNode> result=new ArrayList<SNode>();
    List<SNode> classNodes=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",node,scope,monitor.subTask(1));
    ListSequence.fromList(classNodes).addElement(node);
    for (    SNode classNode : ListSequence.fromList(classNodes)) {
      for (      SNode implementedInterface : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classNode,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"implementedInterface",true))) {
        SNode interfaceNode=(SNode)(SLinkOperations.getTarget(implementedInterface,"classifier",false));
        ListSequence.fromList(result).addElement(interfaceNode);
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SNode>)(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder",interfaceNode,scope,monitor.subTask(1)))));
      }
    }
    for (    SNode interfaceNode : ListSequence.fromList(result)) {
      ListSequence.fromList(_results).addElement(interfaceNode);
    }
  }
  finally {
    monitor.done();
  }
}
