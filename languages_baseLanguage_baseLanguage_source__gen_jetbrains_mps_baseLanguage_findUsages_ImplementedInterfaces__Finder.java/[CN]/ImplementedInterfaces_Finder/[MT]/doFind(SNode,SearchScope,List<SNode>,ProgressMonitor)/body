{
  monitor.start(getDescription(),2);
  try {
    List<SNode> result=new ArrayList<SNode>();
    List<SNode> classNodes=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",node,scope,monitor.subTask(1));
    ListSequence.fromList(classNodes).addElement(node);
    for (    SNode classNode : ListSequence.fromList(classNodes)) {
      for (      SNode implementedInterface : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(classNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0xff2ac0b419L,"implementedInterface")))) {
        SNode interfaceNode=(SNode)SLinkOperations.getTarget(implementedInterface,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
        if ((interfaceNode != null)) {
          ListSequence.fromList(result).addElement(interfaceNode);
          ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SNode>)FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder",interfaceNode,scope,monitor.subTask(1))));
        }
      }
    }
    for (    SNode interfaceNode : ListSequence.fromList(result)) {
      ListSequence.fromList(_results).addElement(interfaceNode);
    }
  }
  finally {
    monitor.done();
  }
}
