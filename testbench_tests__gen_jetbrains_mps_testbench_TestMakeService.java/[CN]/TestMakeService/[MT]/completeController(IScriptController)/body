{
  final Wrappers._T<IConfigMonitor> cmon2delegate=new Wrappers._T<IConfigMonitor>(null);
  final IConfigMonitor cmon=new IConfigMonitor.Stub(){
    public <T extends IOption>T relayQuery(    IQuery<T> query){
      T opt=null;
      if (cmon2delegate.value != null) {
        opt=cmon2delegate.value.relayQuery(query);
      }
      return (opt != null ? opt : query.defaultOption());
    }
  }
;
  final IJobMonitor jmon=new IJobMonitor.Stub(){
    @Override public void reportFeedback(    IFeedback fdbk){
      new MessageFeedbackStrategy(messageHandler).reportFeedback(fdbk);
    }
  }
;
  return new IScriptController.Stub(){
    public void runConfigWithMonitor(    final _FunctionTypes._void_P1_E0<? super IConfigMonitor> code){
      if (ctl != null) {
        ctl.runConfigWithMonitor(new _FunctionTypes._void_P1_E0<IConfigMonitor>(){
          public void invoke(          IConfigMonitor c){
            try {
              cmon2delegate.value=c;
              code.invoke(cmon);
            }
  finally {
              cmon2delegate.value=null;
            }
          }
        }
);
      }
 else {
        code.invoke(cmon);
      }
    }
    public void runJobWithMonitor(    _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
      code.invoke(jmon);
    }
    public void setup(    IPropertiesPool pool){
      Tuples._3<Project,IOperationContext,Boolean> vars=(Tuples._3<Project,IOperationContext,Boolean>)pool.properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Object.class);
      vars._0(TestMakeService.this.context.getProject());
      vars._1(TestMakeService.this.context);
      vars._2(true);
      if (ctl != null) {
        ctl.setup(pool);
      }
    }
  }
;
}
