{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptGenerationContextOp_Base;
case 1:
  return myConceptGenerationContextOp_ContextVarRef;
case 2:
return myConceptGenerationContextOp_CopyWithTrace;
case 3:
return myConceptGenerationContextOp_CreateUniqueName;
case 4:
return myConceptGenerationContextOp_DirtyNode;
case 5:
return myConceptGenerationContextOp_GenParameterRef;
case 6:
return myConceptGenerationContextOp_GetCopiedOutputByInput;
case 7:
return myConceptGenerationContextOp_GetExport;
case 8:
return myConceptGenerationContextOp_GetInputModel;
case 9:
return myConceptGenerationContextOp_GetInvocationContext;
case 10:
return myConceptGenerationContextOp_GetOriginalCopiedInputByOutput;
case 11:
return myConceptGenerationContextOp_GetOriginalInputModel;
case 12:
return myConceptGenerationContextOp_GetOutputByLabel;
case 13:
return myConceptGenerationContextOp_GetOutputByLabelAndInput;
case 14:
return myConceptGenerationContextOp_GetOutputByLabelAndInputAndReferenceScope;
case 15:
return myConceptGenerationContextOp_GetOutputListByLabelAndInput;
case 16:
return myConceptGenerationContextOp_GetOutputModel;
case 17:
return myConceptGenerationContextOp_GetPrevInputByLabel;
case 18:
return myConceptGenerationContextOp_GetTemplateNode;
case 19:
return myConceptGenerationContextOp_LinkPatternRef;
case 20:
return myConceptGenerationContextOp_NodePatternRef;
case 21:
return myConceptGenerationContextOp_ParameterRef;
case 22:
return myConceptGenerationContextOp_PatternRef;
case 23:
return myConceptGenerationContextOp_PropertyPatternRef;
case 24:
return myConceptGenerationContextOp_RegisterLabel;
case 25:
return myConceptGenerationContextOp_SessionObjectAccess;
case 26:
return myConceptGenerationContextOp_ShowErrorMessage;
case 27:
return myConceptGenerationContextOp_ShowInfoMessage;
case 28:
return myConceptGenerationContextOp_ShowMessageBase;
case 29:
return myConceptGenerationContextOp_ShowWarningMessage;
case 30:
return myConceptGenerationContextOp_StepObjectAccess;
case 31:
return myConceptGenerationContextOp_TransientObjectAccess;
case 32:
return myConceptGenerationContextOp_UserObjectAccessBase;
case 33:
return myConceptGenerationContextOp_VarRef;
case 34:
return myConceptGenerationContextType;
case 35:
return myConceptTemplateFunctionParameter_generationContext;
default :
throw new IllegalStateException();
}
}
