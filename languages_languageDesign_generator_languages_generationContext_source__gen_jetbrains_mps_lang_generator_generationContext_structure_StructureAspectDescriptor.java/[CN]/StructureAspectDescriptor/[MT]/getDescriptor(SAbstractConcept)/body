{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ob.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptGenerationContextOp_Base;
      }
    break;
case 1:
  if (true) {
    return myConceptGenerationContextOp_ContextVarRef;
  }
break;
case 2:
if (true) {
return myConceptGenerationContextOp_CopyWithTrace;
}
break;
case 3:
if (true) {
return myConceptGenerationContextOp_CreateUniqueName;
}
break;
case 4:
if (true) {
return myConceptGenerationContextOp_DirtyNode;
}
break;
case 5:
if (true) {
return myConceptGenerationContextOp_GenParameterRef;
}
break;
case 6:
if (true) {
return myConceptGenerationContextOp_GetCopiedOutputByInput;
}
break;
case 7:
if (true) {
return myConceptGenerationContextOp_GetExport;
}
break;
case 8:
if (true) {
return myConceptGenerationContextOp_GetInputModel;
}
break;
case 9:
if (true) {
return myConceptGenerationContextOp_GetInvocationContext;
}
break;
case 10:
if (true) {
return myConceptGenerationContextOp_GetOriginalCopiedInputByOutput;
}
break;
case 11:
if (true) {
return myConceptGenerationContextOp_GetOriginalInputModel;
}
break;
case 12:
if (true) {
return myConceptGenerationContextOp_GetOutputByLabel;
}
break;
case 13:
if (true) {
return myConceptGenerationContextOp_GetOutputByLabelAndInput;
}
break;
case 14:
if (true) {
return myConceptGenerationContextOp_GetOutputByLabelAndInputAndReferenceScope;
}
break;
case 15:
if (true) {
return myConceptGenerationContextOp_GetOutputListByLabelAndInput;
}
break;
case 16:
if (true) {
return myConceptGenerationContextOp_GetOutputModel;
}
break;
case 17:
if (true) {
return myConceptGenerationContextOp_GetPrevInputByLabel;
}
break;
case 18:
if (true) {
return myConceptGenerationContextOp_GetTemplateNode;
}
break;
case 19:
if (true) {
return myConceptGenerationContextOp_LinkPatternRef;
}
break;
case 20:
if (true) {
return myConceptGenerationContextOp_NodePatternRef;
}
break;
case 21:
if (true) {
return myConceptGenerationContextOp_ParameterRef;
}
break;
case 22:
if (true) {
return myConceptGenerationContextOp_PatternRef;
}
break;
case 23:
if (true) {
return myConceptGenerationContextOp_PropertyPatternRef;
}
break;
case 24:
if (true) {
return myConceptGenerationContextOp_RegisterLabel;
}
break;
case 25:
if (true) {
return myConceptGenerationContextOp_SessionObjectAccess;
}
break;
case 26:
if (true) {
return myConceptGenerationContextOp_ShowErrorMessage;
}
break;
case 27:
if (true) {
return myConceptGenerationContextOp_ShowInfoMessage;
}
break;
case 28:
if (true) {
return myConceptGenerationContextOp_ShowMessageBase;
}
break;
case 29:
if (true) {
return myConceptGenerationContextOp_ShowWarningMessage;
}
break;
case 30:
if (true) {
return myConceptGenerationContextOp_StepObjectAccess;
}
break;
case 31:
if (true) {
return myConceptGenerationContextOp_TransientObjectAccess;
}
break;
case 32:
if (true) {
return myConceptGenerationContextOp_UserObjectAccessBase;
}
break;
case 33:
if (true) {
return myConceptGenerationContextOp_VarRef;
}
break;
case 34:
if (true) {
return myConceptGenerationContextType;
}
break;
case 35:
if (true) {
return myConceptTemplateFunctionParameter_generationContext;
}
break;
default :
}
}
return null;
}
