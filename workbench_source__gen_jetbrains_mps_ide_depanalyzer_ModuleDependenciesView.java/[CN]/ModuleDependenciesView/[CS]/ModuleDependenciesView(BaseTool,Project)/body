{
  super(new BorderLayout());
  myLeftTree=new DependencyTree(project,this);
  myRightTree=new DependencyPathTree();
  ActionGroup group=ActionUtils.groupFromActions(new CloseAction(tool),new ModuleDependenciesView.MyToggleAction("Show Runtime Dependencies",Icons.DEPENDENCY_ICON,false,new _FunctionTypes._void_P1_E0<Boolean>(){
    public void invoke(    Boolean b){
      setShowRuntime(b);
    }
  }
),new ModuleDependenciesView.MyToggleAction("Show Used Languages",Icons.USED_LANGUAGES_ICON,true,new _FunctionTypes._void_P1_E0<Boolean>(){
    public void invoke(    Boolean b){
      setShowUsedLanguages(b);
    }
  }
),new ModuleDependenciesView.MyToggleAction("Show cycles",Icons.CYCLE_ICON,true,new _FunctionTypes._void_P1_E0<Boolean>(){
    public void invoke(    Boolean b){
      setShowCycles(b);
    }
  }
));
  JComponent toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  add(toolbar,BorderLayout.NORTH);
  Splitter splitter=new Splitter();
  add(splitter,BorderLayout.CENTER);
  splitter.setFirstComponent(new JBScrollPane(myLeftTree));
  splitter.setSecondComponent(new JBScrollPane(myRightTree));
  myLeftTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      resetDependencies();
    }
  }
);
}
