{
  myRightTree.resetDependencies();
  Map<List<IModule>,List<IModule>> dependencies=MapSequence.fromMap(new HashMap<List<IModule>,List<IModule>>());
  Map<List<IModule>,List<IModule>> usedlanguages=MapSequence.fromMap(new HashMap<List<IModule>,List<IModule>>());
  TreePath[] paths=myLeftTree.getSelectionPaths();
  if (paths != null) {
    for (    TreePath path : paths) {
      MPSTreeNode node=(MPSTreeNode)path.getLastPathComponent();
      if (node instanceof ModuleDependencyNode) {
        ModuleDependencyNode n=(ModuleDependencyNode)node;
        List<IModule> from=check_jxc64t_a0b0b0a0g0b(n.getFromNode());
        if (from != null) {
          Map<List<IModule>,List<IModule>> collection=(n.isUsedLanguage() ? usedlanguages : dependencies);
          if (!(MapSequence.fromMap(collection).containsKey(from))) {
            MapSequence.fromMap(collection).put(from,ListSequence.fromList(new ArrayList<IModule>()));
          }
          ListSequence.fromList(MapSequence.fromMap(collection).get(from)).addSequence(ListSequence.fromList(n.getModules()));
        }
      }
    }
  }
  for (  List<IModule> key : SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).union(SetSequence.fromSet(MapSequence.fromMap(usedlanguages).keySet()))) {
    myRightTree.addDependency(key,MapSequence.fromMap(dependencies).get(key),MapSequence.fromMap(usedlanguages).get(key));
  }
  myRightTree.rebuildLater();
}
