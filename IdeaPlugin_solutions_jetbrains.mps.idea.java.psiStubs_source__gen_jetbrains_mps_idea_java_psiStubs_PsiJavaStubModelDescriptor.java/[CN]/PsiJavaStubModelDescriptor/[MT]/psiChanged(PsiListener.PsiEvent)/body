{
  if (myModel == null) {
    return;
  }
  ASTConverter converter=new ASTConverter();
  for (  PsiFileSystemItem file : Sequence.fromIterable(event.getRemoved())) {
    SetSequence.fromSet(MapSequence.fromMap(myRootsPerFile).get((PsiJavaFile)file)).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        SNodeOperations.deleteNode(it);
      }
    }
);
    MapSequence.fromMap(myRootsPerFile).removeKey((PsiJavaFile)file);
  }
  for (  PsiFileSystemItem file : Sequence.fromIterable(event.getCreated())) {
    Set<SNode> roots=SetSequence.fromSet(new HashSet<SNode>());
    for (    PsiClass cls : ((PsiJavaFile)file).getClasses()) {
      SNode node=converter.convertClass(cls);
      SModelOperations.addRootNode(myModel,node);
      SetSequence.fromSet(roots).addElement(node);
    }
    if (SetSequence.fromSet(roots).isNotEmpty()) {
      MapSequence.fromMap(myRootsPerFile).put((PsiJavaFile)file,roots);
    }
  }
  for (  PsiFile file : SetSequence.fromSet(event.getChanged().keySet())) {
    for (    PsiElement elem : SetSequence.fromSet(event.getChanged().get(file))) {
      if (elem instanceof PsiFile) {
        continue;
      }
      PsiElement e=elem;
      do {
        e=e.getParent();
      }
 while (e != null && !(e instanceof PsiClass && e.getParent() instanceof PsiFile));
      if (e != null) {
        SNode node=converter.convertClass((PsiClass)e);
        SNodeId id=node.getNodeId();
        SNode oldNode=myModel.getNodeById(id);
        if ((oldNode != null)) {
          SNodeOperations.replaceWithAnother(oldNode,node);
        }
 else {
          SModelOperations.addRootNode(myModel,node);
        }
      }
    }
  }
}
