{
  Set<IModule> reqModules=SetSequence.fromSet(new HashSet<IModule>());
  Set<IModule> rtModules=SetSequence.fromSet(new HashSet<IModule>());
  Set<Language> usedLanguages=SetSequence.fromSet(new HashSet<Language>());
  DependencyTree tree=(DependencyTree)getTree();
  for (  IModule module : ListSequence.fromList(myModules)) {
    DependenciesManager depManager=module.getDependenciesManager();
    SetSequence.fromSet(reqModules).addSequence(SetSequence.fromSet(depManager.getAllVisibleModules()));
    SetSequence.fromSet(rtModules).addSequence(SetSequence.fromSet(depManager.getAllRequiredModules()));
    SetSequence.fromSet(usedLanguages).addSequence(SetSequence.fromSet(depManager.getAllUsedLanguages()));
  }
  Set<IModule> depLoops=SetSequence.fromSet(new HashSet<IModule>());
  Set<IModule> langLoops=SetSequence.fromSet(new HashSet<IModule>());
  if (tree.getCycles() != null) {
    SetSequence.fromSet(depLoops).addSequence(SetSequence.fromSet(tree.getCycles()).where(new IWhereFilter<Tuples._2<DependencyUtil.Role,IModule>>(){
      public boolean accept(      Tuples._2<DependencyUtil.Role,IModule> it){
        return it._0() == DependencyUtil.Role.DTDependency_ || it._0() == DependencyUtil.Role.RTDependency || it._0() == DependencyUtil.Role.None;
      }
    }
).select(new ISelector<Tuples._2<DependencyUtil.Role,IModule>,IModule>(){
      public IModule select(      Tuples._2<DependencyUtil.Role,IModule> it){
        return it._1();
      }
    }
));
    SetSequence.fromSet(langLoops).addSequence(SetSequence.fromSet(tree.getCycles()).where(new IWhereFilter<Tuples._2<DependencyUtil.Role,IModule>>(){
      public boolean accept(      Tuples._2<DependencyUtil.Role,IModule> it){
        return it._0() == DependencyUtil.Role.UsedLanguage || it._0() == DependencyUtil.Role.None;
      }
    }
).select(new ISelector<Tuples._2<DependencyUtil.Role,IModule>,IModule>(){
      public IModule select(      Tuples._2<DependencyUtil.Role,IModule> it){
        return it._1();
      }
    }
));
  }
  Set<IModule> allModules=(tree.isShowRuntime() ? rtModules : reqModules);
  for (  IModule m : SetSequence.fromSet(allModules).sort(new ISelector<IModule,Comparable<?>>(){
    public Comparable<?> select(    IModule it){
      return it.getModuleFqName();
    }
  }
,true)) {
    add(new ModuleDependencyNode(m,false,!(SetSequence.fromSet(reqModules).contains(m)),SetSequence.fromSet(depLoops).contains(m),getOperationContext()));
  }
  if (tree.isShowUsedLanguage()) {
    MPSTreeNode usedlanguages=new TextMPSTreeNode("Used languages",getOperationContext());
    for (    Language l : SetSequence.fromSet(usedLanguages).sort(new ISelector<Language,Comparable<?>>(){
      public Comparable<?> select(      Language it){
        return it.getModuleFqName();
      }
    }
,true)) {
      usedlanguages.add(new ModuleDependencyNode(l,true,false,SetSequence.fromSet(langLoops).contains(l),getOperationContext()));
    }
    add(usedlanguages);
  }
  myInitialized=true;
}
