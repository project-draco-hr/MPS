{
  boolean result_14532009=true;
{
    if (SLinkOperations.getCount(subtype,"parameterType") != SLinkOperations.getCount(supertype,"parameterType")) {
      result_14532009=false;
      return result_14532009;
    }
    result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(subtype,"resultType",true),SLinkOperations.getTarget(supertype,"resultType",true),true);
{
      SNode paramType1;
      SNode paramType2;
      Iterator<SNode> paramType1_iterator=SLinkOperations.getTargets(subtype,"parameterType",true).iterator();
      Iterator<SNode> paramType2_iterator=SLinkOperations.getTargets(supertype,"parameterType",true).iterator();
      while (true) {
        if (!(paramType1_iterator.hasNext())) {
          break;
        }
        if (!(paramType2_iterator.hasNext())) {
          break;
        }
        paramType1=paramType1_iterator.next();
        paramType2=paramType2_iterator.next();
        result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype(paramType2,paramType1,true);
      }
    }
    SNode join=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
    for (    SNode superThrows : Sequence.fromIterable(SLinkOperations.getTargets(supertype,"throwsType",true))) {
      SLinkOperations.addChild(join,"argument",SNodeOperations.copyNode(superThrows));
    }
    for (    SNode subThrows : Sequence.fromIterable(SLinkOperations.getTargets(subtype,"throwsType",true))) {
      result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype(subThrows,join,true);
    }
  }
  return result_14532009;
}
