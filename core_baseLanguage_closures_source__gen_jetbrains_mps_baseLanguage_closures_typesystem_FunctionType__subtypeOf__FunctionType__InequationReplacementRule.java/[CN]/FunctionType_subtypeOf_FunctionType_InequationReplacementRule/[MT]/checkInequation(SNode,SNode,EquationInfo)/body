{
  boolean result_14532009=true;
{
    if (SNodeOperations.getConceptDeclaration(subtype) != SNodeOperations.getConceptDeclaration(supertype)) {
      result_14532009=false;
      return result_14532009;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() != ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).count()) {
      result_14532009=false;
      return result_14532009;
    }
    result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)new _Quotations.QuotationClass_15().createNode(SLinkOperations.getTarget(subtype,"resultType",true)),(SNode)SLinkOperations.getTarget(supertype,"resultType",true),true);
    if (SNodeOperations.isInstanceOf(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
{
        final SNode superTerminate=SLinkOperations.getTarget(SNodeOperations.cast(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true);
        if (!(SNodeOperations.isInstanceOf(superTerminate,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(SNodeOperations.cast(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true),(SNode)superTerminate,true);
        }
      }
    }
{
      SNode paramType1;
      SNode paramType2;
      Iterator<SNode> paramType1_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
      Iterator<SNode> paramType2_iterator=ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).iterator();
      while (true) {
        if (!(paramType1_iterator.hasNext())) {
          break;
        }
        if (!(paramType2_iterator.hasNext())) {
          break;
        }
        paramType1=paramType1_iterator.next();
        paramType2=paramType2_iterator.next();
        result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)paramType2,(SNode)paramType1,true);
      }
    }
    SNode join=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
    for (    SNode superThrows : ListSequence.fromList(SLinkOperations.getTargets(supertype,"throwsType",true))) {
      ListSequence.fromList(SLinkOperations.getTargets(join,"argument",true)).addElement(SNodeOperations.copyNode(superThrows));
    }
    for (    SNode subThrows : ListSequence.fromList(SLinkOperations.getTargets(subtype,"throwsType",true))) {
      result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)subThrows,(SNode)join,true);
    }
  }
  return result_14532009;
}
