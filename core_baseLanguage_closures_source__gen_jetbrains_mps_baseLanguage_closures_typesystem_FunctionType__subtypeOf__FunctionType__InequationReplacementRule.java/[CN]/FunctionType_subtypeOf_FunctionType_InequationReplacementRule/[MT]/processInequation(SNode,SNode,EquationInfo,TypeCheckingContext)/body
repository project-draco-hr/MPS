{
  if (SNodeOperations.getConceptDeclaration(subtype) != SNodeOperations.getConceptDeclaration(supertype)) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"incompatible types","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1229719015332",intentionProvider,errorTarget);
    }
    return;
  }
  if (SLinkOperations.getCount(subtype,"parameterType") != SLinkOperations.getCount(supertype,"parameterType")) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"different parameter numbers","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201618945543",intentionProvider,errorTarget);
    }
    return;
  }
{
    final SNode superResult=SLinkOperations.getTarget(supertype,"resultType",true);
    typeCheckingContext.whenConcrete(superResult,new Runnable(){
      public void run(){
        if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getEquationManager().getRepresentator(superResult),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
            SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
            BaseIntentionProvider intentionProvider=null;
            typeCheckingContext.createLessThanInequation(SLinkOperations.getTarget(subtype,"resultType",true),typeCheckingContext.getEquationManager().getRepresentator(superResult),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201614892741",false,0,intentionProvider);
          }
        }
      }
    }
,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1237813825558",false,false);
  }
  if (SNodeOperations.isInstanceOf(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
{
      final SNode superTerminate=SLinkOperations.getTarget(SNodeOperations.cast(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true);
      typeCheckingContext.whenConcrete(superTerminate,new Runnable(){
        public void run(){
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getEquationManager().getRepresentator(superTerminate),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
              SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
              BaseIntentionProvider intentionProvider=null;
              typeCheckingContext.createLessThanInequation(SLinkOperations.getTarget(SNodeOperations.cast(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"),"terminateType",true),typeCheckingContext.getEquationManager().getRepresentator(superTerminate),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1237814209725",false,0,intentionProvider);
            }
          }
        }
      }
,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1237814165989",false,false);
    }
  }
{
    SNode paramType1;
    SNode paramType2;
    Iterator<SNode> paramType1_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
    Iterator<SNode> paramType2_iterator=ListSequence.fromList(SLinkOperations.getTargets(supertype,"parameterType",true)).iterator();
    while (true) {
      if (!(paramType1_iterator.hasNext())) {
        break;
      }
      if (!(paramType2_iterator.hasNext())) {
        break;
      }
      paramType1=paramType1_iterator.next();
      paramType2=paramType2_iterator.next();
{
        SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
        BaseIntentionProvider intentionProvider=null;
        typeCheckingContext.createLessThanInequation(paramType2,paramType1,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201614990748",false,0,intentionProvider);
      }
    }
  }
  SNode join=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
  for (  SNode superThrows : ListSequence.fromList(SLinkOperations.getTargets(supertype,"throwsType",true))) {
    SLinkOperations.addChild(join,"argument",SNodeOperations.copyNode(superThrows));
  }
  for (  SNode subThrows : ListSequence.fromList(SLinkOperations.getTargets(subtype,"throwsType",true))) {
{
      SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
      BaseIntentionProvider intentionProvider=null;
      typeCheckingContext.createLessThanInequation(subThrows,join,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1214834519072",false,0,intentionProvider);
    }
  }
}
