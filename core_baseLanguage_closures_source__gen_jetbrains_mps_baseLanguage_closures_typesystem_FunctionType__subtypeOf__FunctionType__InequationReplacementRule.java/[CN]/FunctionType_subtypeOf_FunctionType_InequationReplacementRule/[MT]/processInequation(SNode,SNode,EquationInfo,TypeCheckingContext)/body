{
  if (SNodeOperations.getConceptDeclaration(subtype) != SNodeOperations.getConceptDeclaration(supertype)) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"incompatible types","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1229719015332",intentionProvider,errorTarget);
    }
    return;
  }
  if (SLinkOperations.getCount(subtype,"parameterType") != SLinkOperations.getCount(supertype,"parameterType")) {
{
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),"different parameter numbers","r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201618945543",intentionProvider,errorTarget);
    }
    return;
  }
{
    SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
    BaseIntentionProvider intentionProvider=null;
    typeCheckingContext.createLessThanInequation(new _Quotations.QuotationClass_2().createNode(SLinkOperations.getTarget(subtype,"resultType",true),typeCheckingContext),SLinkOperations.getTarget(supertype,"resultType",true),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1230129782492",false,0,intentionProvider);
  }
  if (SNodeOperations.isInstanceOf(subtype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType") && SNodeOperations.isInstanceOf(supertype,"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
{
      SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
      BaseIntentionProvider intentionProvider=null;
      typeCheckingContext.createLessThanInequation(new _Quotations.QuotationClass_3().createNode(SLinkOperations.getTarget(subtype,"terminateType",true),typeCheckingContext),SLinkOperations.getTarget(supertype,"terminateType",true),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1232130736964",false,0,intentionProvider);
    }
  }
{
    SNode paramType1;
    SNode paramType2;
    Iterator<SNode> paramType1_iterator=SLinkOperations.getTargets(subtype,"parameterType",true).iterator();
    Iterator<SNode> paramType2_iterator=SLinkOperations.getTargets(supertype,"parameterType",true).iterator();
    while (true) {
      if (!(paramType1_iterator.hasNext())) {
        break;
      }
      if (!(paramType2_iterator.hasNext())) {
        break;
      }
      paramType1=paramType1_iterator.next();
      paramType2=paramType2_iterator.next();
{
        SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
        BaseIntentionProvider intentionProvider=null;
        typeCheckingContext.createLessThanInequation(paramType2,paramType1,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1201614990748",false,0,intentionProvider);
      }
    }
  }
  SNode join=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
  for (  SNode superThrows : ListSequence.fromList(SLinkOperations.getTargets(supertype,"throwsType",true))) {
    SLinkOperations.addChild(join,"argument",SNodeOperations.copyNode(superThrows));
  }
  for (  SNode subThrows : ListSequence.fromList(SLinkOperations.getTargets(subtype,"throwsType",true))) {
{
      SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
      BaseIntentionProvider intentionProvider=null;
      typeCheckingContext.createLessThanInequation(subThrows,join,_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1214834519072",false,0,intentionProvider);
    }
  }
}
