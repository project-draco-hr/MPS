{
  myId=id;
  myQualifiedName=qualifiedName;
  NodeReadAccessCasterInEditor.runReadTransparentAction(new Runnable(){
    @Override public void run(){
      isInterface=declaration.getConcept().equals(SNodeUtil.concept_InterfaceConceptDeclaration);
      isFinal=SPropertyOperations.getBoolean(declaration.getProperty(SNodeUtil.property_AbstractConceptDeclaration_final));
      isAbstract=SPropertyOperations.getBoolean(declaration.getProperty(SNodeUtil.property_AbstractConceptDeclaration_abstract));
      helpURL=declaration.getProperty(SNodeUtil.property_AbstractConceptDeclaration_helpURL);
      conceptAlias=declaration.getProperty(SNodeUtil.property_AbstractConceptDeclaration_conceptAlias);
      shortDescription=declaration.getProperty(SNodeUtil.property_AbstractConceptDeclaration_conceptShortDescription);
      if (isInterface) {
        staticScope=StaticScope.GLOBAL;
      }
 else {
        String scopeVal=declaration.getProperty(SNodeUtil.property_ConceptDeclaration_staticScope);
        staticScope="none".equals(scopeVal) ? StaticScope.NONE : ("root".equals(scopeVal) ? StaticScope.ROOT : StaticScope.GLOBAL);
      }
      Set<String> parentsSet=new LinkedHashSet<String>();
      Set<SConceptId> parentsIdsSet=new LinkedHashSet<SConceptId>();
      if (declaration.getConcept().equals(SNodeUtil.concept_ConceptDeclaration)) {
        SNode superConceptNode=declaration.getReferenceTarget(SNodeUtil.link_ConceptDeclaration_extends);
        if (superConceptNode == null && !SNodeUtil.conceptName_BaseConcept.equals(myQualifiedName)) {
          superConcept=SNodeUtil.conceptName_BaseConcept;
          superConceptId=SNodeUtil.conceptId_BaseConcept;
        }
 else {
          superConcept=StructureAspectInterpreted.conceptFQName(superConceptNode);
          superConceptId=superConceptNode == null ? null : MetaIdByDeclaration.getConceptId(superConceptNode);
        }
        parentsSet.add(superConcept);
        parentsIdsSet.add(superConceptId);
        for (        SNode implementsLink : declaration.getChildren(SNodeUtil.link_ConceptDeclaration_implements)) {
          SNode interfaceConcept=implementsLink.getReferenceTarget(SNodeUtil.link_InterfaceConceptReference_intfc);
          if (interfaceConcept == null) {
            LOG.error("Interface concept (implements link) is null, declaration: " + declaration);
            continue;
          }
          parentsSet.add(StructureAspectInterpreted.conceptFQName(interfaceConcept));
          parentsIdsSet.add(MetaIdByDeclaration.getConceptId(interfaceConcept));
        }
      }
 else       if (isInterface) {
        for (        SNode extendsLink : declaration.getChildren(SNodeUtil.link_InterfaceConceptDeclaration_extends)) {
          SNode interfaceConcept=extendsLink.getReferenceTarget(SNodeUtil.link_InterfaceConceptReference_intfc);
          if (interfaceConcept == null) {
            LOG.error("Interface concept (extends link) is null, declaration: " + declaration);
            continue;
          }
          parentsSet.add(StructureAspectInterpreted.conceptFQName(interfaceConcept));
          parentsIdsSet.add(MetaIdByDeclaration.getConceptId(interfaceConcept));
        }
      }
      parentsSet.remove(null);
      parentsIdsSet.remove(null);
      if (superConcept == null && !SNodeUtil.conceptName_BaseConcept.equals(myQualifiedName)) {
        parentsSet.add(SNodeUtil.conceptName_BaseConcept);
        parentsIdsSet.add(SNodeUtil.conceptId_BaseConcept);
      }
      parents=new ArrayList<String>(parentsSet);
      parentsIds=new ArrayList<SConceptId>(parentsIdsSet);
      for (      SNode property : declaration.getChildren(SNodeUtil.link_AbstractConceptDeclaration_propertyDeclaration)) {
        String name=property.getProperty(SNodeUtil.property_INamedConcept_name);
        if (name != null) {
          SPropertyId propId=MetaIdByDeclaration.getPropId(property);
          BasePropertyDescriptor pd=new BasePropertyDescriptor(propId,name);
          directPropertiesByIds.put(propId,pd);
          directPropertiesByName.put(name,pd);
        }
      }
      for (      SNode link : declaration.getChildren(SNodeUtil.link_AbstractConceptDeclaration_linkDeclaration)) {
        if (link.getReference(SNodeUtil.link_LinkDeclaration_specializedLink) != null) {
          continue;
        }
        String role=link.getProperty(SNodeUtil.property_LinkDeclaration_role);
        if (role == null) {
          continue;
        }
        boolean unordered=SPropertyOperations.getBoolean(link.getProperty(SNodeUtil.property_LinkDeclaration_unordered));
        final SConceptId targetConceptId=MetaIdByDeclaration.getConceptId(link.getReferenceTarget(SNodeUtil.link_LinkDeclaration_target));
        final String linkCardinality=link.getProperty(SNodeUtil.property_LinkDeclaration_sourceCardinality);
        final boolean isOptional=!SNodeUtil.isAtLeastOne(linkCardinality);
        if (SNodeUtil.isAssociationLink(link.getProperty(SNodeUtil.property_LinkDeclaration_metaClass))) {
          SReferenceLinkId refId=MetaIdByDeclaration.getRefRoleId(link);
          BaseReferenceDescriptor pd=new BaseReferenceDescriptor(refId,role,targetConceptId,isOptional);
          directReferencesByIds.put(refId,pd);
          directReferencesByName.put(role,pd);
        }
 else {
          final boolean isMultiple=!SNodeUtil.isAtMostOne(linkCardinality);
          SContainmentLinkId linkId=MetaIdByDeclaration.getLinkId(link);
          BaseLinkDescriptor pd=new BaseLinkDescriptor(linkId,role,targetConceptId,isOptional,isMultiple,unordered);
          directLinksByIds.put(linkId,pd);
          directLinksByName.put(role,pd);
        }
      }
    }
  }
);
}
