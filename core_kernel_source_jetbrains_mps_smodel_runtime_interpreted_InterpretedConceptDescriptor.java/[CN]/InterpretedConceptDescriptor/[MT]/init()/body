{
  if (myIsInitialized) {
    return;
  }
synchronized (this) {
    if (myIsInitialized) {
      return;
    }
    List<ConceptDescriptor> parentDescriptors=new ArrayList<ConceptDescriptor>(parents.size());
    for (    SConceptId parent : parentsIds) {
      ConceptDescriptor descriptor=ConceptRegistry.getInstance().getConceptDescriptor(parent);
      if (!(descriptor instanceof IllegalConceptDescriptor)) {
        parentDescriptors.add(descriptor);
      }
    }
    ancestorsIds=new HashSet<SConceptId>(parentsIds);
    ancestorsIds.add(myId);
    for (    ConceptDescriptor parentDescriptor : parentDescriptors) {
      ancestorsIds.addAll(parentDescriptor.getAncestorsIds());
    }
    Map<SPropertyId,PropertyDescriptor> propertiesByIds=new LinkedHashMap<SPropertyId,PropertyDescriptor>();
    Map<String,PropertyDescriptor> propertiesByName=new LinkedHashMap<String,PropertyDescriptor>();
    propertiesByIds.putAll(directPropertiesByIds);
    propertiesByName.putAll(directPropertiesByName);
    for (    ConceptDescriptor parentDescriptor : parentDescriptors) {
      for (      SPropertyId pid : parentDescriptor.getPropertyIds()) {
        final PropertyDescriptor pd=parentDescriptor.getPropertyDescriptor(pid);
        propertiesByIds.put(pid,pd);
        propertiesByName.put(pd.getName(),pd);
      }
    }
    myProperties=Collections.unmodifiableMap(propertiesByIds);
    myPropertiesByName=Collections.unmodifiableMap(propertiesByName);
    Map<SReferenceLinkId,ReferenceDescriptor> referencesByIds=new LinkedHashMap<SReferenceLinkId,ReferenceDescriptor>();
    Map<String,ReferenceDescriptor> referencesByName=new LinkedHashMap<String,ReferenceDescriptor>();
    referencesByIds.putAll(directReferencesByIds);
    referencesByName.putAll(directReferencesByName);
    for (    ConceptDescriptor parentDescriptor : parentDescriptors) {
      for (      SReferenceLinkId rid : parentDescriptor.getReferenceIds()) {
        final ReferenceDescriptor rd=parentDescriptor.getRefDescriptor(rid);
        referencesByIds.put(rid,rd);
        referencesByName.put(rd.getName(),rd);
      }
    }
    myReferences=Collections.unmodifiableMap(referencesByIds);
    myReferencesByName=Collections.unmodifiableMap(referencesByName);
    Map<SContainmentLinkId,LinkDescriptor> linksByIds=new LinkedHashMap<SContainmentLinkId,LinkDescriptor>();
    Map<String,LinkDescriptor> linksByName=new LinkedHashMap<String,LinkDescriptor>();
    linksByIds.putAll(directLinksByIds);
    linksByName.putAll(directLinksByName);
    for (    ConceptDescriptor parentDescriptor : parentDescriptors) {
      for (      SContainmentLinkId lid : parentDescriptor.getLinkIds()) {
        final LinkDescriptor ld=parentDescriptor.getLinkDescriptor(lid);
        linksByIds.put(lid,ld);
        linksByName.put(ld.getName(),ld);
      }
    }
    myLinks=Collections.unmodifiableMap(linksByIds);
    myLinksByName=Collections.unmodifiableMap(linksByName);
    directPropertiesByIds=null;
    directReferencesByIds=null;
    directLinksByIds=null;
    directPropertiesByName=null;
    directReferencesByName=null;
    directLinksByName=null;
    myIsInitialized=true;
  }
}
