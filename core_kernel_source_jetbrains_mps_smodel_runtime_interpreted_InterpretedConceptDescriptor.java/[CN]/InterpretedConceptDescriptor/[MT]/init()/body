{
  if (myIsInitialized) {
    return;
  }
synchronized (this) {
    if (myIsInitialized) {
      return;
    }
    if (isLegal) {
      List<ConceptDescriptor> parentDescriptors=new ArrayList<ConceptDescriptor>(parents.size());
      for (      String parent : parents) {
        ConceptDescriptor descriptor=ConceptRegistry.getInstance().getConceptDescriptor(parent);
        if (!(descriptor instanceof IllegalConceptDescriptor)) {
          parentDescriptors.add(descriptor);
        }
      }
      ancestors=new HashSet<String>(parents);
      ancestors.add(myName);
      for (      ConceptDescriptor parentDescriptor : parentDescriptors) {
        ancestors.addAll(parentDescriptor.getAncestorsNames());
      }
      LinkedHashSet<String> properties=new LinkedHashSet<String>();
      Map<SPropertyId,PropertyDescriptor> propertiesByIds=new HashMap<SPropertyId,PropertyDescriptor>();
      Map<String,PropertyDescriptor> propertiesByName=new HashMap<String,PropertyDescriptor>();
      properties.addAll(directProperties);
      propertiesByIds.putAll(directPropertiesByIds);
      propertiesByName.putAll(directPropertiesByName);
      for (      ConceptDescriptor parentDescriptor : parentDescriptors) {
        properties.addAll(parentDescriptor.getPropertyNames());
        for (        SPropertyId pid : parentDescriptor.getPropertyIds()) {
          propertiesByIds.put(pid,parentDescriptor.getPropertyDescriptor(pid));
        }
        for (        String pname : parentDescriptor.getPropertyNames()) {
          propertiesByName.put(pname,parentDescriptor.getPropertyDescriptor(pname));
        }
      }
      propertyNames=Collections.unmodifiableSet(properties);
      myProperties=Collections.unmodifiableMap(propertiesByIds);
      myPropertiesByName=Collections.unmodifiableMap(propertiesByName);
      LinkedHashSet<String> references=new LinkedHashSet<String>();
      Map<SReferenceLinkId,ReferenceDescriptor> referencesByIds=new HashMap<SReferenceLinkId,ReferenceDescriptor>();
      Map<String,ReferenceDescriptor> referencesByName=new HashMap<String,ReferenceDescriptor>();
      references.addAll(directReferences);
      referencesByIds.putAll(directReferencesByIds);
      referencesByName.putAll(directReferencesByName);
      for (      ConceptDescriptor parentDescriptor : parentDescriptors) {
        references.addAll(parentDescriptor.getReferenceNames());
        for (        SReferenceLinkId rid : parentDescriptor.getReferenceIds()) {
          referencesByIds.put(rid,parentDescriptor.getRefDescriptor(rid));
        }
        for (        String rname : parentDescriptor.getReferenceNames()) {
          referencesByName.put(rname,parentDescriptor.getRefDescriptor(rname));
        }
      }
      referenceNames=Collections.unmodifiableSet(references);
      myReferences=Collections.unmodifiableMap(referencesByIds);
      myReferencesByName=Collections.unmodifiableMap(referencesByName);
      Map<SContainmentLinkId,LinkDescriptor> linksByIds=new HashMap<SContainmentLinkId,LinkDescriptor>();
      Map<String,LinkDescriptor> linksByName=new HashMap<String,LinkDescriptor>();
      linksByIds.putAll(directLinksByIds);
      linksByName.putAll(directLinksByName);
      for (      ConceptDescriptor parentDescriptor : parentDescriptors) {
        for (        String child : parentDescriptor.getChildrenNames()) {
          childrenMap.put(child,parentDescriptor.isMultipleChild(child));
        }
        unorderedChildren.addAll(parentDescriptor.getUnorderedChildrenNames());
        for (        SContainmentLinkId lid : parentDescriptor.getLinkIds()) {
          linksByIds.put(lid,parentDescriptor.getLinkDescriptor(lid));
        }
        for (        String lname : parentDescriptor.getChildrenNames()) {
          linksByName.put(lname,parentDescriptor.getLinkDescriptor(lname));
        }
      }
      unorderedChildren=Collections.unmodifiableSet(unorderedChildren);
      childrenNames=Collections.unmodifiableSet(childrenMap.keySet());
      myLinks=Collections.unmodifiableMap(linksByIds);
      myLinksByName=Collections.unmodifiableMap(linksByName);
    }
    myIsInitialized=true;
    directProperties=null;
    directReferences=null;
    directPropertiesByIds=null;
    directReferencesByIds=null;
    directLinksByIds=null;
    directPropertiesByName=null;
    directReferencesByName=null;
    directLinksByName=null;
  }
}
