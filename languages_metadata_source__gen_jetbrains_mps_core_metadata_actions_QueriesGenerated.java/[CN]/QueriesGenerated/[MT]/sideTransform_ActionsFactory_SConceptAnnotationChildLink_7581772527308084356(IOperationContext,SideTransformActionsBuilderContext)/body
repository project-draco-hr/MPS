{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationChildLink"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"cardinality","jetbrains.mps.core.structure.structure.SCardinality");
      SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isRequired","" + (true));
      return SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true);
    }
    public String getMatchingText(    String pattern){
      return "[1]";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "strictly one element";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationChildLink"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"cardinality","jetbrains.mps.core.structure.structure.SCardinality");
      SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isMultiple","" + (true));
      return SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true);
    }
    public String getMatchingText(    String pattern){
      return "[0..n]";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "a list";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.metadata.structure.SConceptAnnotationChildLink"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"cardinality","jetbrains.mps.core.structure.structure.SCardinality");
      SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isRequired","" + (true));
      SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isMultiple","" + (true));
      return SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true);
    }
    public String getMatchingText(    String pattern){
      return "[1..n]";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "a list with at least one element";
    }
  }
);
  return result;
}
