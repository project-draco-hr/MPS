{
  MergeSessionState stateCopy=new MergeSessionState(state);
  ListSequence.fromList(SModelOperations.getRoots(myResultModel,null)).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode r){
      SNodeOperations.deleteNode(r);
    }
  }
);
  CopyUtil.clearModelProperties(myResultModel);
  UnregisteredNodes.instance().clear();
  Method copyModelProperties=null;
  try {
    for (    Method method : CopyUtil.class.getDeclaredMethods()) {
      if (method.getName().contains("copyModelProperties") && method.getParameterTypes().length == 2) {
        if (method.getParameterTypes()[0].equals(SModel.class) && method.getParameterTypes()[1].equals(SModel.class)) {
          copyModelProperties.invoke(null,stateCopy.myResultModel,myResultModel);
        }
 else         if (method.getParameterTypes()[0].equals(jetbrains.mps.smodel.SModel.class) && method.getParameterTypes()[1].equals(jetbrains.mps.smodel.SModel.class)) {
          copyModelProperties.invoke(null,((SModelDescriptor)stateCopy.myResultModel).getSModel(),((SModelDescriptor)myResultModel).getSModel());
        }
        break;
      }
    }
  }
 catch (  InvocationTargetException e) {
  }
catch (  IllegalAccessException e) {
  }
  ListSequence.fromList(SModelOperations.getRoots(stateCopy.myResultModel,null)).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode r){
      SModelOperations.addRootNode(myResultModel,r);
    }
  }
);
  myResolvedChanges=stateCopy.myResolvedChanges;
  myNodeCopier.setState(stateCopy.myIdReplacementCache,myResultModel);
}
