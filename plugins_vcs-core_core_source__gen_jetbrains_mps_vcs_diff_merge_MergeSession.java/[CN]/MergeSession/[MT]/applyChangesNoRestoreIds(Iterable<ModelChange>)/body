{
  Sequence.fromIterable(changes).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return ch instanceof NodeGroupChange;
    }
  }
).visitAll(new IVisitor<ModelChange>(){
    public void visit(    ModelChange ch){
      ((NodeGroupChange)ch).prepare();
    }
  }
);
  for (  ModelChange c : Sequence.fromIterable(changes).sort(new Comparator<ModelChange>(){
    public int compare(    ModelChange a,    ModelChange b){
      boolean aa=a.isNonConflicting();
      boolean bb=b.isNonConflicting();
      return (aa == bb ? 0 : (aa ? 1 : -1));
    }
  }
,true)) {
    applyChange(c);
  }
}
