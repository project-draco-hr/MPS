{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    final String[] lastPattern=new String[1];
    final SNode targetNode=new Computable<SNode>(){
      public SNode compute(){
        return SNotationActionUtil.getRightOutermostNotation(_context.getSourceNode());
      }
    }
.compute();
    List<INodeSubstituteAction> list=ModelActions.createChildSubstituteActions(targetNode,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationPart"),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      IScope p3){
        return substitute(newChild,targetNode,lastPattern[0]);
      }
      private SNode substitute(      SNode result,      SNode targetNode,      String pattern){
        SNode outer=SNotationActionUtil.getRightOutermostNotation(_context.getSourceNode());
        SNodeOperations.insertNextSiblingChild(outer,result);
        return result;
      }
    }
,operationContext);
    for (    final INodeSubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
