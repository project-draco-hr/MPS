{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationUnorderedGroup");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode container=SNotationActionUtil.getTargetForNewUnorderedGroup(_context.getSourceNode());
        SNode group=SConceptOperations.createNewNode("jetbrains.mps.core.notation.structure.SNotationUnorderedGroup",null);
        SNodeOperations.replaceWithAnother(container,group);
        ListSequence.fromList(SLinkOperations.getTargets(group,"parts",true)).addElement(container);
        ListSequence.fromList(SLinkOperations.getTargets(group,"parts",true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.core.notation.structure.SNotationPart",null));
        return ListSequence.fromList(SLinkOperations.getTargets(group,"parts",true)).last();
      }
      public String getMatchingText(      String pattern){
        return "&";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "unordered group";
      }
    }
);
  }
  return result;
}
