{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode container=SNotationActionUtil.getTargetForNewStyle(_context.getSourceNode());
      SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationStyle",null);
      return SNodeOperations.insertNextSiblingChild(container,q);
    }
    public String getMatchingText(    String pattern){
      return "{";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "style";
    }
  }
);
  return result;
}
