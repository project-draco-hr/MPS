{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode container=SNotationActionUtil.getTargetForNewStyle(_context.getSourceNode());
        SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationStyle",null);
        return SNodeOperations.insertNextSiblingChild(container,q);
      }
      public String getMatchingText(      String pattern){
        return "{";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "style";
      }
    }
);
  }
  return result;
}
