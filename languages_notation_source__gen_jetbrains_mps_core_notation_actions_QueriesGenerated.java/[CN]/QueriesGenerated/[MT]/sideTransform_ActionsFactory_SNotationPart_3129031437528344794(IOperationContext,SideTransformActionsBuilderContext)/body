{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
        SPropertyOperations.set(q,"kind","optional");
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),q);
        return SLinkOperations.setTarget(q,"inner",_context.getSourceNode(),true);
      }
      public String getMatchingText(      String pattern){
        return "?";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "optional";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
        SPropertyOperations.set(q,"kind","list");
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),q);
        return SLinkOperations.setTarget(q,"inner",_context.getSourceNode(),true);
      }
      public String getMatchingText(      String pattern){
        return "*";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "optional";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.notation.structure.SNotationQuantifier");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode q=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationQuantifier",null);
        SPropertyOperations.set(q,"kind","nonempty-list");
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),q);
        return SLinkOperations.setTarget(q,"inner",_context.getSourceNode(),true);
      }
      public String getMatchingText(      String pattern){
        return "+";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "optional";
      }
    }
);
  }
  return result;
}
