{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode node=_context.getSourceNode();
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.core.notation.structure.SNotationQuantifier")) {
          node=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.core.notation.structure.SNotationQuantifier");
        }
        SNode mapping=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.core.notation.structure.SNotationMapping",null);
        SNodeOperations.replaceWithAnother(node,mapping);
        SLinkOperations.setTarget(mapping,"presentation",node,true);
        return mapping;
      }
      public String getMatchingText(      String pattern){
        return "=";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
