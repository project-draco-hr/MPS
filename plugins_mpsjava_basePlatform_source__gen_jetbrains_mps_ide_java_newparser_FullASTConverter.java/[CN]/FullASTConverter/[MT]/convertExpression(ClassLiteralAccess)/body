{
  SNode argType=convertTypeReference(x.type);
  if (SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",null);
    SReference sref=adjustClassReference(SNodeOperations.cast(argType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),result,"classifier");
    result.setReference(sref.getRole(),sref);
    return result;
  }
 else   if (SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayClassExpression",null);
    SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1251851371723515367l,1251851371723515368l,"arrayType"),argType);
    return result;
  }
 else   if (SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression",null);
    SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4564374268190696673l,4564374268190696674l,"primitiveType"),argType);
    return result;
  }
 else {
    throw new JavaParseException("Type in class literal access is expected to be classifier or array type");
  }
}
