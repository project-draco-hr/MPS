{
  SNode argType=convertTypeReference(x.type);
  if (!(SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.ClassifierType") || SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.ArrayType") || SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.PrimitiveType"))) {
    throw new JavaParseException("Type in class literal access is expected to be classifier");
  }
  if (SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
    SNode node=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayClassExpression",null);
    SLinkOperations.setTarget(node,"arrayType",SNodeOperations.cast(argType,"jetbrains.mps.baseLanguage.structure.ArrayType"),true);
    return node;
  }
 else   if (SNodeOperations.isInstanceOf(argType,"jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
    SNode node=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression",null);
    SLinkOperations.setTarget(node,"primitiveType",SNodeOperations.cast(argType,"jetbrains.mps.baseLanguage.structure.PrimitiveType"),true);
    return node;
  }
 else {
    SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",null);
    SReference sref=adjustClassReference(SNodeOperations.cast(argType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),result,"classifier");
    result.setReference(sref.getRole(),sref);
    return result;
  }
}
