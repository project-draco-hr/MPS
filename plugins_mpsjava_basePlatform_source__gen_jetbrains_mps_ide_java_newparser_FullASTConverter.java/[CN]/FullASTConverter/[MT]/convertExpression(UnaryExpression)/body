{
  int operator=((x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT);
switch (operator) {
case OperatorIds.MINUS:
    SNode unaryMinus=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),8064396509828172209l,"jetbrains.mps.baseLanguage.structure.UnaryMinus"));
  SLinkOperations.setTarget(unaryMinus,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1239714755177l,1239714902950l,"expression"),convertExpressionWrap(x.expression));
return unaryMinus;
case OperatorIds.NOT:
SNode notExpression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081516740877l,"jetbrains.mps.baseLanguage.structure.NotExpression"));
SLinkOperations.setTarget(notExpression,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1081516740877l,1081516765348l,"expression"),convertExpressionWrap(x.expression));
return notExpression;
case OperatorIds.PLUS:
return convertExpressionWrap(x.expression);
case OperatorIds.TWIDDLE:
SNode twiddle=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1225894555487l,"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression"));
SLinkOperations.setTarget(twiddle,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1225894555487l,1225894555490l,"expression"),convertExpressionWrap(x.expression));
return twiddle;
default :
throw new JavaParseException("Unexpected operator for unary expression");
}
}
