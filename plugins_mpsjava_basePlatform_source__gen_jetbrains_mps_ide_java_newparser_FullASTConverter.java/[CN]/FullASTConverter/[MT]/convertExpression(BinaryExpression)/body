{
  if (x instanceof AND_AND_Expression) {
    return convertExpression((AND_AND_Expression)x);
  }
 else   if (x instanceof EqualExpression) {
    return convertExpression((EqualExpression)x);
  }
 else   if (x instanceof OR_OR_Expression) {
    return convertExpression((OR_OR_Expression)x);
  }
 else {
    SNode op;
    int binOp=(x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
switch (binOp) {
case OperatorIds.LEFT_SHIFT:
      op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1225892208569l,"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression"));
    break;
case OperatorIds.RIGHT_SHIFT:
  op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1225892319711l,"jetbrains.mps.baseLanguage.structure.ShiftRightExpression"));
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),320030840061144153l,"jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression"));
break;
case OperatorIds.PLUS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242875l,"jetbrains.mps.baseLanguage.structure.PlusExpression"));
break;
case OperatorIds.MINUS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242869l,"jetbrains.mps.baseLanguage.structure.MinusExpression"));
break;
case OperatorIds.REMAINDER:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1153422105332l,"jetbrains.mps.baseLanguage.structure.RemExpression"));
break;
case OperatorIds.XOR:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1224500799915l,"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression"));
break;
case OperatorIds.AND:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1224500764161l,"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression"));
break;
case OperatorIds.MULTIPLY:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1092119917967l,"jetbrains.mps.baseLanguage.structure.MulExpression"));
break;
case OperatorIds.OR:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1224500790866l,"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression"));
break;
case OperatorIds.DIVIDE:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1095950406618l,"jetbrains.mps.baseLanguage.structure.DivExpression"));
break;
case OperatorIds.LESS_EQUAL:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1153422305557l,"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression"));
break;
case OperatorIds.GREATER_EQUAL:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1153417849900l,"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression"));
break;
case OperatorIds.GREATER:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081506762703l,"jetbrains.mps.baseLanguage.structure.GreaterThanExpression"));
break;
case OperatorIds.LESS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081506773034l,"jetbrains.mps.baseLanguage.structure.LessThanExpression"));
break;
default :
throw new JavaParseException("Unsupported operator for BinaryExpression");
}
return convertBinaryOperation(x.left,x.right,op);
}
}
