{
  if (x instanceof PostfixExpression) {
    return convertExpression((PostfixExpression)x);
  }
 else   if (x instanceof PrefixExpression) {
    return convertExpression((PrefixExpression)x);
  }
 else {
    SNode op;
switch (x.operator) {
case OperatorIds.PLUS:
      op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1215695189714l,"jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression")));
    break;
case OperatorIds.MINUS:
  op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1215695201514l,"jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression")));
break;
case OperatorIds.MULTIPLY:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304495340l,"jetbrains.mps.baseLanguage.structure.MulAssignmentExpression")));
break;
case OperatorIds.DIVIDE:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501412l,"jetbrains.mps.baseLanguage.structure.DivAssignmentExpression")));
break;
case OperatorIds.AND:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501418l,"jetbrains.mps.baseLanguage.structure.AndAssignmentExpression")));
break;
case OperatorIds.OR:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501416l,"jetbrains.mps.baseLanguage.structure.OrAssignmentExpression")));
break;
case OperatorIds.XOR:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501420l,"jetbrains.mps.baseLanguage.structure.XorAssignmentExpression")));
break;
case OperatorIds.REMAINDER:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501414l,"jetbrains.mps.baseLanguage.structure.RemAssignmentExpression")));
break;
case OperatorIds.LEFT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501422l,"jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression")));
break;
case OperatorIds.RIGHT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7024111702304501424l,"jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression")));
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),320030840061612167l,"jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression")));
break;
default :
throw new JavaParseException("Unsupported operator for CompoundAssignment");
}
SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1215693861676l,1068498886295l,"lValue"),convertExpressionWrap(x.lhs));
SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1215693861676l,1068498886297l,"rValue"),convertExpressionWrap(x.expression));
return op;
}
}
