{
  String methodName=new String(x.selector);
  SNode result=null;
  SNode call=null;
  if (x.receiver instanceof ThisReference && ((ThisReference)x.receiver).isImplicitThis()) {
    SNode lmc=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),7812454656619025412l,"jetbrains.mps.baseLanguage.structure.LocalMethodCall"));
    org.jetbrains.mps.openapi.model.SReference ref=new DynamicReference("baseMethodDeclaration",lmc,null,methodName);
    lmc.setReference("baseMethodDeclaration",ref);
    result=lmc;
    call=lmc;
  }
 else {
    Expression receiver=x.receiver;
    if (receiver instanceof NameReference) {
      SNode unkDotCall=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),2621000434129553333l,"jetbrains.mps.baseLanguage.structure.UnknownDotCall"));
      SPropertyOperations.set(unkDotCall,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),2621000434129553333l,4872723285943177972l,"callee"),methodName);
      String[] tokens;
      if (x.receiver instanceof SingleNameReference) {
        tokens=new String[1];
        tokens[0]=new String(((SingleNameReference)x.receiver).token);
      }
 else       if (x.receiver instanceof QualifiedNameReference) {
        QualifiedNameReference nameRef=((QualifiedNameReference)x.receiver);
        tokens=new String[nameRef.tokens.length];
        for (int i=0; i < tokens.length; i++) {
          tokens[i]=new String(nameRef.tokens[i]);
        }
      }
 else {
        return null;
      }
      StringBuilder sb=new StringBuilder();
      for (      String tok : tokens) {
        sb.append(tok);
        sb.append('.');
      }
      sb.deleteCharAt(sb.length() - 1);
      SPropertyOperations.set(unkDotCall,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),6528213125912070246l,1843920760191311250l,"tokens"),sb.toString());
      result=unkDotCall;
      call=unkDotCall;
    }
 else     if (x.receiver instanceof SuperReference) {
      SNode smc=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1073063089578l,"jetbrains.mps.baseLanguage.structure.SuperMethodCall"));
      org.jetbrains.mps.openapi.model.SReference ref=new DynamicReference("baseMethodDeclaration",smc,null,methodName);
      smc.setReference(ref.getRole(),ref);
      result=smc;
      call=smc;
    }
 else {
      SNode dotExpr=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression"));
      SLinkOperations.setTarget(dotExpr,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"),convertExpressionWrap(x.receiver));
      SNode instCall=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1202948039474l,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
      SLinkOperations.setTarget(dotExpr,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation"),instCall);
      org.jetbrains.mps.openapi.model.SReference sref=new DynamicReference("baseMethodDeclaration",instCall,null,methodName);
      instCall.setReference(sref.getRole(),sref);
      result=dotExpr;
      call=instCall;
    }
  }
  if ((call != null)) {
    addCallArgs(call,x.arguments);
    addTypeArgs(x.typeArguments,SLinkOperations.getChildren(call,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,4972241301747169160l,"typeArgument")));
  }
  return result;
}
