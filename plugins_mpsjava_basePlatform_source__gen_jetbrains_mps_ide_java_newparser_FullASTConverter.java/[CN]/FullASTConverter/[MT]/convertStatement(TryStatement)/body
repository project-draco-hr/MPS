{
  SNode tryBlock=convertStatement(x.tryBlock);
  List<SNode> catchArgs=new ArrayList<SNode>();
  List<SNode> catchBlocks=new ArrayList<SNode>();
  SNode finallyBlock=convertStatement(x.finallyBlock);
  if (x.catchBlocks != null) {
    for (int i=0, c=x.catchArguments.length; i < c; ++i) {
      SNode local=SLinkOperations.getTarget(SNodeOperations.cast(convertStatement(x.catchArguments[i]),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f0L,0xf8cc67c7f1L,"localVariableDeclaration"));
      ListSequence.fromList(catchArgs).addElement(local);
    }
    for (int i=0, c=x.catchBlocks.length; i < c; ++i) {
      ListSequence.fromList(catchBlocks).addElement(convertStatement(x.catchBlocks[i]));
    }
  }
  if ((finallyBlock != null)) {
    SNode tryStatement=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cacebf556L,"jetbrains.mps.baseLanguage.structure.TryStatement"));
    for (int i=0; i < catchBlocks.size(); i++) {
      SNode catchBlock=ListSequence.fromList(catchBlocks).getElement(i);
      SNode lvd=ListSequence.fromList(catchArgs).getElement(i);
      SNode catchClause=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,"jetbrains.mps.baseLanguage.structure.CatchClause"));
      ListSequence.fromList(SLinkOperations.getChildren(tryStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cacebf556L,0x10f39abd97cL,"catchClause"))).addElement(catchClause);
      SLinkOperations.setTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f2L,"catchBody"),getStatementListFromStatement(catchBlock,x.catchBlocks[i]));
      SLinkOperations.setTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f1L,"throwable"),lvd);
    }
    SLinkOperations.setTarget(tryStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cacebf556L,0x10cacecb713L,"finallyBody"),getStatementListFromStatement(finallyBlock,x.finallyBlock));
    SLinkOperations.setTarget(tryStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10cacebf556L,0x10cacec83aeL,"body"),getStatementListFromStatement(tryBlock,x.tryBlock));
    return tryStatement;
  }
 else {
    SNode tryCatchStatement=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f383e6771L,"jetbrains.mps.baseLanguage.structure.TryCatchStatement"));
    for (int i=0; i < catchBlocks.size(); i++) {
      SNode catchBlock=ListSequence.fromList(catchBlocks).getElement(i);
      SNode lvd=ListSequence.fromList(catchArgs).getElement(i);
      SNode catchClause=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,"jetbrains.mps.baseLanguage.structure.CatchClause"));
      ListSequence.fromList(SLinkOperations.getChildren(tryCatchStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f383e6771L,0x10f39a8ba1fL,"catchClause"))).addElement(catchClause);
      SLinkOperations.setTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f2L,"catchBody"),getStatementListFromStatement(catchBlock,x.catchBlocks[i]));
      SLinkOperations.setTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f1L,"throwable"),lvd);
    }
    SLinkOperations.setTarget(tryCatchStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f383e6771L,0x10f383e83d4L,"body"),getStatementListFromStatement(tryBlock,x.tryBlock));
    return tryCatchStatement;
  }
}
