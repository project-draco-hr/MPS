{
  if (myRules_all.containsKey(inputConcept))   return;
  List<AbstractConceptDeclaration> partialHierarchy=new ArrayList<AbstractConceptDeclaration>(5);
  while (inputConcept != null) {
    partialHierarchy.add(inputConcept);
    if (myRules_all.containsKey(inputConcept)) {
      break;
    }
    inputConcept=getExtendedConcept(inputConcept,baseConcept);
  }
  Collections.reverse(partialHierarchy);
  List<Reduction_MappingRule> rulesForInheritor=new ArrayList(myRules_applicableInheritor.get(partialHierarchy.get(0)));
  for (  AbstractConceptDeclaration hrrConcept : partialHierarchy) {
    if (myRules_all.containsKey(hrrConcept)) {
      continue;
    }
    myRules_all.put(hrrConcept,new ArrayList<Reduction_MappingRule>(5));
    List<Reduction_MappingRule> rulesApplicableExactly=myRules_applicableExactly.get(hrrConcept);
    if (rulesApplicableExactly == null) {
      myRules_all.get(hrrConcept).addAll(rulesForInheritor);
    }
 else {
      myRules_all.get(hrrConcept).addAll(rulesApplicableExactly);
      myRules_all.get(hrrConcept).addAll(rulesForInheritor);
      for (      Reduction_MappingRule rule : rulesApplicableExactly) {
        if (rule.getApplyToConceptInheritors()) {
          rulesForInheritor.add(0,rule);
        }
      }
    }
    List<AbstractConceptDeclaration> implInterfaces=SModelUtil_new.getDirectSuperInterfacesAndTheySupers(hrrConcept);
    for (    AbstractConceptDeclaration implInterface : implInterfaces) {
      List<Reduction_MappingRule> rulesApplicableToInterface=myRules_applicableExactly.get(implInterface);
      if (rulesApplicableToInterface != null) {
        for (        Reduction_MappingRule rule : rulesApplicableToInterface) {
          if (!rulesForInheritor.contains(rule)) {
            myRules_all.get(hrrConcept).add(rule);
            rulesForInheritor.add(rule);
          }
        }
      }
    }
    myRules_applicableInheritor.put(hrrConcept,new ArrayList<Reduction_MappingRule>(rulesForInheritor));
  }
}
