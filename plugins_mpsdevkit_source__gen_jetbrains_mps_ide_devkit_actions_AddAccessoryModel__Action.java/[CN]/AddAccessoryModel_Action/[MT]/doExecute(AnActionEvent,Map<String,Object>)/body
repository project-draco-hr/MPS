{
  final Language language=((Language)((SModule)MapSequence.fromMap(_params).get("module")));
  final List<SModelReference> models=ListSequence.fromList(new ArrayList<SModelReference>());
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      Iterable<SModel> descriptors=new FilteredGlobalScope().getModels();
      ListSequence.fromList(models).addSequence(Sequence.fromIterable(descriptors).select(new ISelector<SModel,SModelReference>(){
        public SModelReference select(        SModel it){
          return it.getReference();
        }
      }
));
    }
  }
);
  final SModelReference result=CommonChoosers.showModelChooser(((MPSProject)MapSequence.fromMap(_params).get("project")),null,models);
  if (result == null) {
    return;
  }
  final Wrappers._boolean visibleFromModule=new Wrappers._boolean(true);
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      SModel md=result.resolve(((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository());
      visibleFromModule.value=VisibilityUtil.isVisible(language,md);
    }
  }
);
  final boolean importModuleDependency;
  if (!(visibleFromModule.value)) {
    int res=JOptionPane.showConfirmDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"<html>Model <b>" + SModelStereotype.withoutStereotype(result.getModelName()) + "</b> is added to accessories</html>\n\n"+ "Do you want to automatically the module add to dependency?","Add Dependency",JOptionPane.YES_NO_OPTION);
    importModuleDependency=res == JOptionPane.YES_OPTION;
  }
 else {
    importModuleDependency=false;
  }
  modelAccess.executeCommand(new Runnable(){
    public void run(){
      MPSModuleRepository.getInstance().saveAll();
      LanguageDescriptor descriptor;
      descriptor=language.getModuleDescriptor();
      descriptor.getAccessoryModels().add(result);
      language.setLanguageDescriptor(descriptor);
      if (importModuleDependency) {
        SModel md=result.resolve(((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository());
        language.addDependency(md.getModule().getModuleReference(),false);
      }
      language.save();
    }
  }
);
}
