{
{
    List<SNode> nodes=(List<SNode>)actionContext.getNodes();
    SModel model=actionContext.getNode().getModel();
    refactoringContext.setParameter("sourceModel",model.getModelDescriptor());
    Language sourceLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("sourceModel")));
    Language targetLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("targetModel")));
    List<SNode> editors=new ArrayList<SNode>();
    List<SNode> behaviors=new ArrayList<SNode>();
    SModelDescriptor editorModelDescriptor=sourceLanguage.getEditorModelDescriptor();
    if (editorModelDescriptor != null) {
      for (      SNode node : nodes) {
        if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration")) {
          ConceptEditorDeclaration conceptEditorDeclaration=SModelUtil_new.findEditorDeclaration(editorModelDescriptor.getSModel(),((AbstractConceptDeclaration)SNodeOperations.getAdapter(node)));
          if (conceptEditorDeclaration != null) {
            SNode editor=(SNode)conceptEditorDeclaration.getNode();
            ListSequence.fromList(editors).addElement(editor);
          }
        }
      }
    }
    SModelDescriptor behaviorModelDescriptor=sourceLanguage.getBehaviorModelDescriptor();
    if (behaviorModelDescriptor != null) {
      for (      SNode node : nodes) {
        ConceptBehavior conceptBehavior=SModelUtil_new.findBehaviorDeclaration(behaviorModelDescriptor.getSModel(),((AbstractConceptDeclaration)SNodeOperations.getAdapter(node)));
        if (conceptBehavior != null) {
          SNode behavior=(SNode)conceptBehavior.getNode();
          ListSequence.fromList(behaviors).addElement(behavior);
        }
      }
    }
    refactoringContext.moveNodesToModel(nodes,((SModelDescriptor)refactoringContext.getParameter("targetModel")).getSModel());
    for (    SNode node : nodes) {
      refactoringContext.changeFeatureName(node,((SModelDescriptor)refactoringContext.getParameter("targetModel")) + "." + SPropertyOperations.getString(node,"name"),SPropertyOperations.getString(node,"name"));
    }
    if (ListSequence.fromList(editors).isNotEmpty()) {
      SModelDescriptor targetEditorModelDescriptor=targetLanguage.getEditorModelDescriptor();
      if (targetEditorModelDescriptor == null) {
        targetEditorModelDescriptor=LanguageAspect.EDITOR.createNew(targetLanguage);
      }
      SModel editorModel=targetEditorModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(editors,editorModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(editorModel);
    }
    if (ListSequence.fromList(behaviors).isNotEmpty()) {
      SModelDescriptor targetConstraintsModelDescriptor=targetLanguage.getConstraintsModelDescriptor();
      if (targetConstraintsModelDescriptor == null) {
        targetConstraintsModelDescriptor=LanguageAspect.CONSTRAINTS.createNew(targetLanguage);
      }
      SModel constraintsModel=targetConstraintsModelDescriptor.getSModel();
      refactoringContext.moveNodesToModel(behaviors,constraintsModel);
      refactoringContext.computeCaches();
      refactoringContext.updateModelWithMaps(constraintsModel);
    }
  }
}
