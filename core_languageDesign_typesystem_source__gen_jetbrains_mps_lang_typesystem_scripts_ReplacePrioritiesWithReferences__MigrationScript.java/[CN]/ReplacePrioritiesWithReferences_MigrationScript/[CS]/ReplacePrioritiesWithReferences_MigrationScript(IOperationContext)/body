{
  super("replace inequation priorities with references");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "replace inequation priorities with references";
    }
    public String getAdditionalInfo(){
      return "replace inequation priorities with references";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return !(SPropertyOperations.hasValue(node,"inequationPriority","0","0"));
    }
    public void doUpdateInstanceNode(    SNode node){
      int priority=SPropertyOperations.getInteger_def(node,"inequationPriority","0");
      if (priority == 500) {
        priority=4;
      }
      SNode group=TypesLanguageScriptsUtil.getPriorityGroupByPriority(priority);
      SNode groupReference=SLinkOperations.setNewChild(node,"inequationGroup","jetbrains.mps.lang.typesystem.structure.InequationsGroupReference");
      SLinkOperations.setTarget(groupReference,"group",group,false);
      if (priority > 1) {
        SNode previousGroup=TypesLanguageScriptsUtil.getPriorityGroupByPriority(priority - 1);
        SNode prevGroupReference=SLinkOperations.addNewChild(node,"beforeGroups","jetbrains.mps.lang.typesystem.structure.InequationsGroupReference");
        SLinkOperations.setTarget(prevGroupReference,"group",previousGroup,false);
      }
 else {
        SLinkOperations.addNewChild(node,"beforeGroups","jetbrains.mps.lang.typesystem.structure.DefaultGroupReference");
      }
      SPropertyOperations.set(node,"inequationPriority","0");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
