{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)(_context.getChildConcept());
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.as(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",null);
          SLinkOperations.setTarget(result,"visibility",((current == null) ? SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PublicVisibility",null) : SLinkOperations.getTarget(current,"visibility",true)),true);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "constructor";
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.as(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (curr != null && (SPropertyOperations.getBoolean(curr,"volatile") || SPropertyOperations.getBoolean(curr,"final") || SPropertyOperations.getBoolean(curr,"transient")|| SPropertyOperations.getBoolean(curr,"abstract")|| SPropertyOperations.getBoolean(curr,"synchronized")|| SPropertyOperations.getBoolean(curr,"static")|| (SLinkOperations.getTarget(curr,"type",true) != null))) {
            return null;
          }
          SNode clNode=SNodeOperations.as(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Classifier");
          if (clNode != null) {
            return SPropertyOperations.getString(clNode,"name") + "()";
          }
          return null;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
