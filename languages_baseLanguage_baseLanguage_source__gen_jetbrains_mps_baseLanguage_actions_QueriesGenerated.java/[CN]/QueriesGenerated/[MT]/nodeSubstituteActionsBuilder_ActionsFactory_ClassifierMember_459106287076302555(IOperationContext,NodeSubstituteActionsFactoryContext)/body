{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.as(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),3609453419506221441l,"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"));
          SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",null);
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility"),((current == null) ? SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PublicVisibility",null) : SLinkOperations.getTarget(current,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility"))));
          return result;
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123140l,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")),"leftParen",-1);
          return null;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          String candidateName=IncompleteMemberHelper.getNameOfConstructor(_context.getCurrentTargetNode());
          if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),3609453419506221441l,"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"))) {
            return IncompleteMemberHelper.canBeConstructor(SNodeOperations.cast(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),3609453419506221441l,"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"))) && (candidateName != null && IncompleteMemberHelper.canSubstitute(strictly,pattern,candidateName) || IncompleteMemberHelper.canSubstitute(strictly,pattern,"constructor"));
          }
 else {
            return candidateName != null && IncompleteMemberHelper.canSubstitute(strictly,pattern,candidateName);
          }
        }
        public String getDescriptionText(        String pattern){
          return "constructor";
        }
        public String getMatchingText(        String pattern){
          String candidate=IncompleteMemberHelper.getNameOfConstructor(_context.getCurrentTargetNode());
          if (candidate == null) {
            candidate="constructor";
          }
          return candidate;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
