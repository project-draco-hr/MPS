{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<INodeSubstituteAction> list=ModelActions.createChildSubstituteActions(_context.getSourceNode(),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      IScope p3){
        return substitute(newChild,lastPattern[0]);
      }
      private SNode substitute(      SNode result,      String pattern){
        SNode source=PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(),result);
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(source),"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression") && SNodeOperations.getContainingLinkDeclaration(source) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression","lValue")) {
          source=SNodeOperations.cast(SNodeOperations.getParent(source),"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression");
        }
        SNodeOperations.replaceWithAnother(source,result);
        SLinkOperations.setTarget(result,"rValue",source,true);
        PrecedenceUtil.parenthesiseIfNecessary(result);
        return result;
      }
    }
,operationContext);
    for (    final INodeSubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
