{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ab8473cc5L,"jetbrains.mps.baseLanguage.structure.GenericNewExpression"));
    }
  }
.compute(),_context.getSide(),_context.getTransformationTag(),operationContext)));
  return result;
}
