{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1145552977093l,"jetbrains.mps.baseLanguage.structure.GenericNewExpression"));
    }
  }
.compute(),_context.getSide(),_context.getTransformationTag(),operationContext)));
  return result;
}
