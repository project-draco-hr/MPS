{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        List<SNode> functions=SNodeOperations.getAncestors(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ConceptFunction",false);
        SNode parentFunction=ListSequence.fromList(functions).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Closure"));
          }
        }
).first();
        if (parentFunction != null) {
          return BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),parentFunction,"virtual_getParameters_1213877374450",new Object[]{});
        }
 else {
          return ListSequence.fromList(new ArrayList<SNode>());
        }
      }
    }
.compute();
    if (queryResult != null) {
      for (      SNode item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
      }
    }
  }
  return result;
}
