{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode notExpr=SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.NotExpression");
          SNode parens=SNodeFactoryOperations.setNewChild(notExpr,"expression","jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
          return parens;
        }
        public String getMatchingText(        String pattern){
          return "!(";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
