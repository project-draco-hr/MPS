{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0xff2ac0b419L,"implementedInterface"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
      return SNodeOperations.getParent(_context.getSourceNode());
    }
    public String getMatchingText(    String pattern){
      return "implements";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept").getDeclarationNode(),null));
    }
  }
);
  return result;
}
