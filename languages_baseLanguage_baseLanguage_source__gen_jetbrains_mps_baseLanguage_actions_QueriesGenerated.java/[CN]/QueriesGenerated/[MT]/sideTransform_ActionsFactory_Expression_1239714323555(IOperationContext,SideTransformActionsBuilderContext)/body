{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression",null);
        SNode targetExpression=PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(),result);
        SNodeOperations.replaceWithAnother(targetExpression,result);
        SLinkOperations.setTarget(result,"expression",targetExpression,true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "++";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "prefix increment";
      }
    }
);
  }
  return result;
}
