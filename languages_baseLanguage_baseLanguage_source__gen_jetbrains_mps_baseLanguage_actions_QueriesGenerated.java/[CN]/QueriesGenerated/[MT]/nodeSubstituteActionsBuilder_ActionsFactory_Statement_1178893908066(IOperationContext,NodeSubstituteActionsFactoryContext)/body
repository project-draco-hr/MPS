{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode thisConcept=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false,false);
          return ClassConcept_Behavior.call_constructors_5292274854859503373(thisConcept);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation",null);
              SLinkOperations.setTarget(newNode,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"),(item));
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1178893518978l,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"))) {
                for (                SNode argument : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1178893518978l,"jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument")))) {
                  ListSequence.fromList(SLinkOperations.getChildren(newNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).addElement(argument);
                }
              }
              return newNode;
            }
            public String getMatchingText(            String pattern){
              return "this" + BaseMethodDeclaration_Behavior.call_getParametersPresentation_1213877350304((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,1156234966388l,"shortDescription"));
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode thisConcept=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false,false);
          SNode superClass=SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(thisConcept,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1165602531693l,"superclass")),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
          if (superClass == null) {
            superClass=SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_8p1vjw_a0a0a0c0a0b0(),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
          }
          return ClassConcept_Behavior.call_constructors_5292274854859503373(superClass);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode newNode=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation",null);
              SLinkOperations.setTarget(newNode,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"),(item));
              if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070475587102l,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"))) {
                for (                SNode argument : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070475587102l,"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument")))) {
                  ListSequence.fromList(SLinkOperations.getChildren(newNode,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141038l,"actualArgument"))).addElement(argument);
                }
              }
              return newNode;
            }
            public String getMatchingText(            String pattern){
              return "super" + BaseMethodDeclaration_Behavior.call_getParametersPresentation_1213877350304((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,1156234966388l,"shortDescription"));
            }
          }
);
        }
      }
    }
  }
  return result;
}
