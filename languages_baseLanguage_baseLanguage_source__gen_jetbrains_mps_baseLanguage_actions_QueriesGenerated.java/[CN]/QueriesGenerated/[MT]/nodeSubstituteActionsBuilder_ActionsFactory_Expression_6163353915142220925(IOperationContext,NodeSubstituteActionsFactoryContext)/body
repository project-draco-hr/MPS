{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
          SModel blStructure=BootstrapLanguages.baseLanguage().getStructureModelDescriptor();
          for (          SNode conceptDeclaration : SModelOperations.getRoots(blStructure,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
            if (SConceptOperations.isSubConceptOf(conceptDeclaration,"jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
              SNode param=(SNode)conceptDeclaration;
              if (isEmpty_x583g4_a0a0b0a0c0a0a0a0a0c0a0b0sc(SPropertyOperations.getString(param,"conceptAlias")) || SConceptOperations.isSubConceptOf(((SNode)param),"jetbrains.mps.lang.core.structure.IDontSubstituteByDefault") || SPropertyOperations.getBoolean(param,"abstract")) {
                continue;
              }
              ListSequence.fromList(result).addElement(param);
            }
          }
          return result;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression",null);
              SLinkOperations.setTarget(result,"primitiveType",SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null),true);
              return result;
            }
            public String getMatchingText(            String pattern){
              String alias=SPropertyOperations.getString((item),"conceptAlias");
              return alias + ".class";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
