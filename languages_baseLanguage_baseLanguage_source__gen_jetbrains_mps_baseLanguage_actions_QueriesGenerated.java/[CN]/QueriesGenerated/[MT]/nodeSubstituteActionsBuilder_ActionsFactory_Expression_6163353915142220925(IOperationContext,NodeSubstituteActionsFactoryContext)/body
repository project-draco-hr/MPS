{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
          SModel blStructure=BootstrapLanguages.baseLanguage().getStructureModelDescriptor();
          for (          SNode conceptDeclaration : SModelOperations.roots(blStructure,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
            if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(conceptDeclaration),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1164118113764l,"jetbrains.mps.baseLanguage.structure.PrimitiveType"))) {
              SNode param=(SNode)conceptDeclaration;
              if (isEmptyString(SPropertyOperations.getString(param,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,5092175715804935370l,"conceptAlias"))) || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(((SNode)param)),MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1835621062190663819l,"jetbrains.mps.lang.core.structure.IDontSubstituteByDefault")) || SPropertyOperations.getBoolean(param,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,4628067390765956802l,"abstract"))) {
                continue;
              }
              ListSequence.fromList(result).addElement(param);
            }
          }
          return result;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),4564374268190696673l,"jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression"),null);
              SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4564374268190696673l,4564374268190696674l,"primitiveType"),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept((item)),null));
              return result;
            }
            public String getMatchingText(            String pattern){
              String alias=SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,5092175715804935370l,"conceptAlias"));
              return alias + ".class";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
