{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SingleLineComment"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode statement=SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(_context.getSourceNode())),"jetbrains.mps.baseLanguage.structure.Statement");
      SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.SingleLineComment",null);
      SNodeOperations.replaceWithAnother(statement,result);
      SNode part=SNodeFactoryOperations.addNewChild(result,"commentPart","jetbrains.mps.baseLanguage.structure.StatementCommentPart");
      SLinkOperations.setTarget(part,"commentedStatement",statement,true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "//";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
