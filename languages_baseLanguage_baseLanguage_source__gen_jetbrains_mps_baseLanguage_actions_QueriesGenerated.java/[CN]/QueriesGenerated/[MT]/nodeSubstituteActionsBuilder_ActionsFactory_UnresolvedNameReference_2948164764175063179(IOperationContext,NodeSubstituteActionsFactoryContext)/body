{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableReference");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        public SNode wrapNode(        SNode nodeToWrap,        SModel model){
          SNode dotExpression=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression");
          SLinkOperations.setTarget(dotExpression,"operand",nodeToWrap,true);
          return SNodeOperations.as(SLinkOperations.getTarget(dotExpression,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc){
          SNode wrappedNode=this.wrapNode(nc,nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          }
 else {
            return wrappedNode;
          }
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterReference");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        public SNode wrapNode(        SNode nodeToWrap,        SModel model){
          SNode dotExpression=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression");
          SLinkOperations.setTarget(dotExpression,"operand",nodeToWrap,true);
          return SNodeOperations.as(SLinkOperations.getTarget(dotExpression,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc){
          SNode wrappedNode=this.wrapNode(nc,nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          }
 else {
            return wrappedNode;
          }
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        public SNode wrapNode(        SNode nodeToWrap,        SModel model){
          SNode dotExpression=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression");
          SNode smc=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
          String role="baseMethodDeclaration";
          SReference sReference=SNodeOperations.cast(SLinkOperations.getTarget(dotExpression,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation").getReference(role);
          smc.setReference(new StaticReference(role,smc,SNodeOperations.getModel(smc).getSModelReference(),null,((jetbrains.mps.smodel.SReference)sReference).getResolveInfo()).getRole(),new StaticReference(role,smc,SNodeOperations.getModel(smc).getSModelReference(),null,((jetbrains.mps.smodel.SReference)sReference).getResolveInfo()));
          SNodeOperations.replaceWithAnother(dotExpression,smc);
          return smc;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc){
          SNode wrappedNode=this.wrapNode(nc,nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          }
 else {
            return wrappedNode;
          }
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
