{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          IClassifiersSearchScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.CLASSIFFIER);
          List<SNode> visibleClassifiers=searchScope.getClassifierNodes();
          List<SNode> classifiers=new ArrayList<SNode>();
          for (          SNode cls : visibleClassifiers) {
            ListSequence.fromList(classifiers).addElement(cls);
          }
          return classifiers;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
              SLinkOperations.setTarget(result,"classifier",(item),false);
              return result;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name") + ".";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "static access ^" + NodePresentationUtil.descriptionText((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
