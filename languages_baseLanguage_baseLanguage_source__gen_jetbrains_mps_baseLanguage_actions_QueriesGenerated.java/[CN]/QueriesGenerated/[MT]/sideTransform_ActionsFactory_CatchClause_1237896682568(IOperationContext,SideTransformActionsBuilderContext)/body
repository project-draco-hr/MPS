{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.TryCatchStatement");
      SNode tryStatement=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.TryStatement",null);
      SNode body=SLinkOperations.getTarget(node,"body",true);
      SLinkOperations.setTarget(tryStatement,"body",body,true);
      for (      SNode catchClause : SLinkOperations.getTargets(node,"catchClause",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(tryStatement,"catchClause",true)).addElement(catchClause);
      }
      SNodeFactoryOperations.setNewChild(tryStatement,"finallyBody","jetbrains.mps.baseLanguage.structure.StatementList");
      SNodeOperations.replaceWithAnother(node,tryStatement);
      return tryStatement;
    }
    public String getMatchingText(    String pattern){
      return "finally";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
