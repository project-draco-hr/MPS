{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1164879751025l,"jetbrains.mps.baseLanguage.structure.TryCatchStatement"));
      SNode tryStatement=SNodeFactoryOperations.createNewNode(_context.getModel(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1153952380246l,"jetbrains.mps.baseLanguage.structure.TryStatement"),null);
      SNode body=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1164879751025l,1164879758292l,"body"));
      SLinkOperations.setTarget(tryStatement,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1153952380246l,1153952416686l,"body"),body);
      for (      SNode catchClause : SLinkOperations.getChildren(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1164879751025l,1164903496223l,"catchClause"))) {
        ListSequence.fromList(SLinkOperations.getChildren(tryStatement,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1153952380246l,1164903700860l,"catchClause"))).addElement(catchClause);
      }
      SNodeFactoryOperations.setNewChild(tryStatement,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1153952380246l,1153952429843l,"finallyBody"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123136l,"jetbrains.mps.baseLanguage.structure.StatementList"));
      SNodeOperations.replaceWithAnother(node,tryStatement);
      return tryStatement;
    }
    public String getMatchingText(    String pattern){
      return "finally";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.TryCatchStatement"),null));
    }
  }
);
  return result;
}
