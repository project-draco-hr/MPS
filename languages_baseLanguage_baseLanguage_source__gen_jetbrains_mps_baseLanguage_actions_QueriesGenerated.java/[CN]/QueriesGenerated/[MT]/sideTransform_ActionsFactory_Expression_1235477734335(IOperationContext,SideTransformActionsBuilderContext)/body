{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=_context.getSourceNode();
      do {
        SNode type=TypeChecker.getInstance().getTypeOf(node);
        if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.BooleanType") || SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType") && SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false) == SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Boolean")) {
          SNode not=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression",null);
          SLinkOperations.setTarget(not,"expression",SNodeOperations.cast(SNodeOperations.copyNode(node),"jetbrains.mps.baseLanguage.structure.Expression"),true);
          SNodeOperations.replaceWithAnother(node,not);
          return not;
        }
        node=SNodeOperations.getParent(node);
      }
 while (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Expression"));
      return null;
    }
    public String getMatchingText(    String pattern){
      return "!";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression"),null));
    }
  }
);
  return result;
}
