{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"else{","else {");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SLinkOperations.setTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,"jetbrains.mps.baseLanguage.structure.IfStatement")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,0xfc092b6b76L,"ifFalseStatement"),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfc092b6b77L,"jetbrains.mps.baseLanguage.structure.BlockStatement")),null));
            return SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,"jetbrains.mps.baseLanguage.structure.IfStatement")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b217L,0xfc092b6b76L,"ifFalseStatement"));
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"else if","elseif");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ElsifClause"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode elseIf=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118ceceb41aL,"jetbrains.mps.baseLanguage.structure.ElsifClause")),null);
            SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),elseIf);
            return elseIf;
          }
          public String getMatchingText(          String pattern){
            return (item);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ElsifClause"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ElsifClause"),null));
          }
        }
);
      }
    }
  }
  return result;
}
