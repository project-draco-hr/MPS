{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AsExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode result=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.AsExpression",null);
        SNode type=ExpectedType_FactoryUtil.createExpectedType(_context.getSourceNode());
        if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
          SLinkOperations.setTarget(result,"classifierType",SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
        }
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"expression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "as";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
