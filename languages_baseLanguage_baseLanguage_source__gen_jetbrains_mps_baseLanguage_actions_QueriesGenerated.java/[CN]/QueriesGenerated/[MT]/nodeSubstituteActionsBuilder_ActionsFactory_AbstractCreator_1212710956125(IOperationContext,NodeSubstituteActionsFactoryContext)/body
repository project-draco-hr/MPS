{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope scope=ClassifierScopes.getVisibleClassifiersScope(_context.getParentNode(),false);
          Iterable<SNode> list=SNodeOperations.ofConcept(scope.getAvailableElements(null),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
          return Sequence.fromIterable(list).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface")) || (SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")) && SPropertyOperations.getBoolean(SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0xfa5cee6dfaL,"abstractClass")));
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              final SNode creator=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator")),null);
              SLinkOperations.setTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls"),SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,"jetbrains.mps.baseLanguage.structure.AnonymousClass")),null));
              SLinkOperations.setTarget(SLinkOperations.getTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x1107e0fd2a0L,"classifier"),(item));
              List<SNode> methodsToImplement=Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639((item))).toListSequence();
              if (SNodeOperations.isInstanceOf((item),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,0x1126a8d157dL,"isAbstract"));
                  }
                }
).toListSequence();
                for (                SNode baseMethodDeclaration : BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast((item),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"virtual_getMethodsToImplement_5418393554803775106",new Object[]{})) {
                  ListSequence.fromList(methodsToImplement).addElement(SNodeOperations.cast(baseMethodDeclaration,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")));
                }
              }
 else               if (SNodeOperations.isInstanceOf((item),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101edd46144L,"jetbrains.mps.baseLanguage.structure.Interface"))) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return !(SNodeOperations.isInstanceOf(it));
                  }
                }
).toListSequence();
              }
              for (              SNode method : ListSequence.fromList(methodsToImplement)) {
                SNode method_copy=SNodeOperations.copyNode(method);
                SPropertyOperations.set(method_copy,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b21dL,0x1126a8d157dL,"isAbstract"),"" + (false));
                SNodeFactoryOperations.setNewChild(method_copy,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList")));
                ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x4a9a46de59132803L,"member"))).addElement(method_copy);
              }
              SNode expectedType=ExpectedType_FactoryUtil.createExpectedType(SNodeOperations.getNodeAncestor(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression"),false,false));
              final List<SNode> expectedTypeParams=ListSequence.fromList(new ArrayList<SNode>());
              if ((expectedType != null) && SNodeOperations.isInstanceOf(expectedType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")) && ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(expectedType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).isNotEmpty()) {
                ListSequence.fromList(expectedTypeParams).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(expectedType,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))));
              }
              ListSequence.fromList(SLinkOperations.getChildren((item),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).visitAll(new IVisitor<SNode>(){
                public void visit(                final SNode originalVar){
                  SNode newTypeParam=null;
                  if (ListSequence.fromList(expectedTypeParams).isNotEmpty()) {
                    newTypeParam=SNodeOperations.copyNode(ListSequence.fromList(expectedTypeParams).removeElementAt(0));
                    if (SNodeOperations.isInstanceOf(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110dae5f4a3L,"jetbrains.mps.baseLanguage.structure.WildCardType"))) {
                      newTypeParam=null;
                    }
 else                     if (SNodeOperations.isInstanceOf(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110dae9d53dL,"jetbrains.mps.baseLanguage.structure.LowerBoundType"))) {
                      newTypeParam=SLinkOperations.getTarget(SNodeOperations.cast(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110dae9d53dL,"jetbrains.mps.baseLanguage.structure.LowerBoundType")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110dae9d53dL,0x110dae9f25bL,"bound"));
                    }
 else                     if (SNodeOperations.isInstanceOf(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110daeaa84aL,"jetbrains.mps.baseLanguage.structure.UpperBoundType"))) {
                      newTypeParam=SLinkOperations.getTarget(SNodeOperations.cast(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110daeaa84aL,"jetbrains.mps.baseLanguage.structure.UpperBoundType")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x110daeaa84aL,0x110daeaa84bL,"bound"));
                    }
                  }
                  if ((newTypeParam != null)) {
                    ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x117ac45a693L,"typeParameter"))).addElement(newTypeParam);
                  }
 else {
                    newTypeParam=SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1107e0cb103L,0x117ac45a693L,"typeParameter"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
                    SLinkOperations.setTarget(SNodeOperations.cast(newTypeParam,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),SNodeOperations.getNode("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object"));
                  }
                  Iterable<SNode> typeVarRefs=ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1133e3b449aL,0x1133e3b8b49L,"cls")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode it){
                      return eq_x583g4_a0a0a0a0a0a4a0a0a0a01a0a0a0a0a0a1a2a0a1a02(SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration")),originalVar);
                    }
                  }
);
                  for (                  SNode typeVar : Sequence.fromIterable(typeVarRefs)) {
                    SNodeOperations.replaceWithAnother(typeVar,SNodeOperations.copyNode(newTypeParam));
                    SLinkOperations.setTarget(typeVar,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"),newTypeParam);
                  }
                }
              }
);
              return creator;
            }
            public String getMatchingText(            String pattern){
              return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880((item),_context.getParentNode()) + " {..}";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4952f12L,"jetbrains.mps.baseLanguage.structure.ArrayCreator").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope scope=ClassifierScopes.getVisibleClassifiersScope(_context.getParentNode(),false);
          Iterable<SNode> list=SNodeOperations.ofConcept(scope.getAvailableElements(null),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
          List<SNode> types=new ArrayList<SNode>();
          for (          SNode classifier : Sequence.fromIterable(list)) {
            SNode type=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),null);
            SLinkOperations.setTarget(type,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),classifier);
            ListSequence.fromList(types).addElement(type);
          }
          for (          SAbstractConcept typeConcept : ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506dL,"jetbrains.mps.baseLanguage.structure.Type"),_context.getModel()))) {
            if (!(typeConcept.isAbstract())) {
              ListSequence.fromList(types).addElement(SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(typeConcept),null));
            }
          }
          return types;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode creator=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4952f12L,"jetbrains.mps.baseLanguage.structure.ArrayCreator")),null);
              SLinkOperations.setTarget(creator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4952f12L,0x113e49578edL,"componentType"),(item));
              return creator;
            }
            public String getMatchingText(            String pattern){
              if (SNodeOperations.isInstanceOf((item),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
                return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SLinkOperations.getTarget(SNodeOperations.cast((item),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),_context.getParentNode()) + "[]";
              }
 else {
                return (item) + "[]";
              }
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "array of " + (item);
            }
          }
);
        }
      }
    }
  }
  return result;
}
