{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          VisibleClassifiersScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.ANYTHING,operationContext.getScope());
          List<SNode> list=(List<SNode>)searchScope.getClassifierNodes();
          return ListSequence.fromList(list).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Interface") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.ClassConcept") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass"));
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode creator=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator",null);
              SLinkOperations.setTarget(creator,"cls",SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClass",null),true);
              SLinkOperations.setTarget(SLinkOperations.getTarget(creator,"cls",true),"classifier",(item),false);
              List<SNode> methodsToImplement=SLinkOperations.getTargets((item),"method",true);
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SPropertyOperations.getBoolean(it,"isAbstract");
                  }
                }
).toListSequence();
                for (                SNode baseMethodDeclaration : BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.ClassConcept"),"virtual_getMethodsToImplement_5418393554803775106",new Object[]{})) {
                  ListSequence.fromList(methodsToImplement).addElement(SNodeOperations.cast(baseMethodDeclaration,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
                }
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.Interface")) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration"));
                  }
                }
).toListSequence();
              }
              for (              SNode method : ListSequence.fromList(methodsToImplement)) {
                SNode method_copy=SNodeOperations.copyNode(method);
                SPropertyOperations.set(method_copy,"isAbstract","" + (false));
                SNodeFactoryOperations.setNewChild(method_copy,"body","jetbrains.mps.baseLanguage.structure.StatementList");
                ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(creator,"cls",true),"method",true)).addElement(method_copy);
              }
              List<SNode> typeVarRefs=SNodeOperations.getDescendants(SLinkOperations.getTarget(creator,"cls",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{});
              for (              SNode typeVar : ListSequence.fromList(typeVarRefs)) {
                SNodeOperations.replaceWithAnother(typeVar,new QueriesGenerated.QuotationClass_x583g4_a1a0a8a0a0a0a0a0a2a2a0a1a49().createNode());
              }
              return creator;
            }
            public String getMatchingText(            String pattern){
              return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880((item),_context.getParentNode()) + " {..}";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          VisibleClassifiersScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.ANYTHING,operationContext.getScope());
          List<SNode> list=(List<SNode>)searchScope.getClassifierNodes();
          List<SNode> types=new ArrayList<SNode>();
          for (          SNode classifier : ListSequence.fromList(list)) {
            SNode type=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
            SLinkOperations.setTarget(type,"classifier",classifier,false);
            ListSequence.fromList(types).addElement(type);
          }
          for (          SNode typeConcept : ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type"),_context.getModel(),operationContext.getScope()))) {
            if (!(SConceptPropertyOperations.getBoolean(typeConcept,"abstract"))) {
              ListSequence.fromList(types).addElement(SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(typeConcept),null));
            }
          }
          return types;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode creator=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayCreator",null);
              SLinkOperations.setTarget(creator,"componentType",(item),true);
              return creator;
            }
            public String getMatchingText(            String pattern){
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
                return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SLinkOperations.getTarget(SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),_context.getParentNode()) + "[]";
              }
 else {
                return (item) + "[]";
              }
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "array of " + (item);
            }
          }
);
        }
      }
    }
  }
  return result;
}
