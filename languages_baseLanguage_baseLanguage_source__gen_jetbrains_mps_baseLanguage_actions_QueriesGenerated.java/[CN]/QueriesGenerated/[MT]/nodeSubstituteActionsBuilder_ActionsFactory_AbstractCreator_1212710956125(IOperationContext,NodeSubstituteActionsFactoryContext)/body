{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          VisibleClassifiersScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.ANYTHING,operationContext.getScope());
          List<SNode> list=(List<SNode>)searchScope.getClassifierNodes();
          return ListSequence.fromList(list).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Interface") || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.ClassConcept") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass"));
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              final SNode creator=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator",null);
              SLinkOperations.setTarget(creator,"cls",SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClass",null),true);
              SLinkOperations.setTarget(SLinkOperations.getTarget(creator,"cls",true),"classifier",(item),false);
              List<SNode> methodsToImplement=Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639((item))).toListSequence();
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return SPropertyOperations.getBoolean(it,"isAbstract");
                  }
                }
).toListSequence();
                for (                SNode baseMethodDeclaration : BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.ClassConcept"),"virtual_getMethodsToImplement_5418393554803775106",new Object[]{})) {
                  ListSequence.fromList(methodsToImplement).addElement(SNodeOperations.cast(baseMethodDeclaration,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
                }
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.Interface")) {
                methodsToImplement=ListSequence.fromList(methodsToImplement).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration"));
                  }
                }
).toListSequence();
              }
              for (              SNode method : ListSequence.fromList(methodsToImplement)) {
                SNode method_copy=SNodeOperations.copyNode(method);
                SPropertyOperations.set(method_copy,"isAbstract","" + (false));
                SNodeFactoryOperations.setNewChild(method_copy,"body","jetbrains.mps.baseLanguage.structure.StatementList");
                ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(creator,"cls",true),"member",true)).addElement(method_copy);
              }
              SNode expectedType=ExpectedType_FactoryUtil.createExpectedType(SNodeOperations.getAncestor(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression",false,false));
              final List<SNode> expectedTypeParams=ListSequence.fromList(new ArrayList<SNode>());
              if ((expectedType != null) && SNodeOperations.isInstanceOf(expectedType,"jetbrains.mps.baseLanguage.structure.ClassifierType") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(expectedType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)).isNotEmpty()) {
                ListSequence.fromList(expectedTypeParams).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(expectedType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)));
              }
              ListSequence.fromList(SLinkOperations.getTargets((item),"typeVariableDeclaration",true)).visitAll(new IVisitor<SNode>(){
                public void visit(                final SNode originalVar){
                  SNode newTypeParam=null;
                  if (ListSequence.fromList(expectedTypeParams).isNotEmpty()) {
                    newTypeParam=SNodeOperations.copyNode(ListSequence.fromList(expectedTypeParams).removeElementAt(0));
                    if (SNodeOperations.isInstanceOf(newTypeParam,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
                      newTypeParam=null;
                    }
 else                     if (SNodeOperations.isInstanceOf(newTypeParam,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
                      newTypeParam=SLinkOperations.getTarget(SNodeOperations.cast(newTypeParam,"jetbrains.mps.baseLanguage.structure.LowerBoundType"),"bound",true);
                    }
 else                     if (SNodeOperations.isInstanceOf(newTypeParam,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
                      newTypeParam=SLinkOperations.getTarget(SNodeOperations.cast(newTypeParam,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true);
                    }
                  }
                  if ((newTypeParam != null)) {
                    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(creator,"cls",true),"typeParameter",true)).addElement(newTypeParam);
                  }
 else {
                    newTypeParam=SNodeFactoryOperations.addNewChild(SLinkOperations.getTarget(creator,"cls",true),"typeParameter","jetbrains.mps.baseLanguage.structure.ClassifierType");
                    SLinkOperations.setTarget(SNodeOperations.cast(newTypeParam,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object"),false);
                  }
                  Iterable<SNode> typeVarRefs=ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(creator,"cls",true),"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
                    public boolean accept(                    SNode it){
                      return eq_x583g4_a0a0a0a0a0a4a0a0a0a01a0a0a0a0a0a1a2a0a1a25(SLinkOperations.getTarget(it,"typeVariableDeclaration",false),originalVar);
                    }
                  }
);
                  for (                  SNode typeVar : Sequence.fromIterable(typeVarRefs)) {
                    SNodeOperations.replaceWithAnother(typeVar,SNodeOperations.copyNode(newTypeParam));
                    SLinkOperations.setTarget(typeVar,"typeVariableDeclaration",newTypeParam,false);
                  }
                }
              }
);
              return creator;
            }
            public String getMatchingText(            String pattern){
              return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880((item),_context.getParentNode()) + " {..}";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreator");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          VisibleClassifiersScope searchScope=new VisibleClassifiersScope(_context.getParentNode(),IClassifiersSearchScope.ANYTHING,operationContext.getScope());
          List<SNode> list=(List<SNode>)searchScope.getClassifierNodes();
          List<SNode> types=new ArrayList<SNode>();
          for (          SNode classifier : ListSequence.fromList(list)) {
            SNode type=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
            SLinkOperations.setTarget(type,"classifier",classifier,false);
            ListSequence.fromList(types).addElement(type);
          }
          for (          SNode typeConcept : ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type"),_context.getModel()))) {
            if (!(SPropertyOperations.getBoolean(typeConcept,"abstract"))) {
              ListSequence.fromList(types).addElement(SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(typeConcept),null));
            }
          }
          return types;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode creator=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayCreator",null);
              SLinkOperations.setTarget(creator,"componentType",(item),true);
              return creator;
            }
            public String getMatchingText(            String pattern){
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
                return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(SLinkOperations.getTarget(SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),_context.getParentNode()) + "[]";
              }
 else {
                return (item) + "[]";
              }
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "array of " + (item);
            }
          }
);
        }
      }
    }
  }
  return result;
}
