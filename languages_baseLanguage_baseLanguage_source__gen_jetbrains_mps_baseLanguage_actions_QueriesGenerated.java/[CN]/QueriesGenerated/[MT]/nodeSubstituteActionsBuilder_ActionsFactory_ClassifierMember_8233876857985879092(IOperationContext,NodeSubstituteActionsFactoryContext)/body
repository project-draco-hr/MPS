{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          String name=IncompleteMemberHelper.buildMethodName(pattern);
          SNode result;
          if (SPropertyOperations.getBoolean(current,"static")) {
            result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",null);
          }
 else {
            SNode decl=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
            SPropertyOperations.set(decl,"isAbstract","" + (SPropertyOperations.getBoolean(current,"abstract")));
            result=decl;
          }
          SPropertyOperations.set(result,"name",name);
          SLinkOperations.setTarget(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",SLinkOperations.getTarget(current,"visibility",true),true);
          SLinkOperations.setTarget(result,"returnType",SLinkOperations.getTarget(current,"type",true),true);
          SPropertyOperations.set(result,"isSynchronized","" + (SPropertyOperations.getBoolean(current,"synchronized")));
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(current,"final")));
          SPropertyOperations.set(result,"isNative","" + (SPropertyOperations.getBoolean(current,"native")));
          return SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          if (SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.MethodDeclaration"),"returnType",true) == null) {
            editorContext.selectWRTFocusPolicy(createdNode);
            return null;
          }
          if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(createdNode),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"leftParen",-1);
          }
 else           if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(createdNode),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),"leftParen",-1);
          }
          return null;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (IncompleteMemberHelper.canBeMethod(curr)) {
            if ((pattern == null || pattern.length() == 0)) {
              return !(strictly);
            }
            String name=IncompleteMemberHelper.buildMethodName(pattern);
            if (IncompleteMemberHelper.isValidCandidateMethodName(curr,name)) {
              if (JavaNameUtil.isJavaIdentifier(name.trim())) {
                return (strictly ? ((pattern.endsWith("()") || pattern.endsWith(" ") ? true : false)) : true);
              }
            }
          }
          return false;
        }
        public String getDescriptionText(        String pattern){
          return (SPropertyOperations.getBoolean(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"),"static") ? "static method" : "method");
        }
        public String getMatchingText(        String pattern){
          return IncompleteMemberHelper.buildMethodName(pattern) + "()";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          String name=IncompleteMemberHelper.buildFieldName(pattern);
          SNode result;
          if (SPropertyOperations.getBoolean(current,"static")) {
            SNode decl=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration",null);
            SPropertyOperations.set(decl,"isVolatile","" + (SPropertyOperations.getBoolean(current,"volatile")));
            SPropertyOperations.set(decl,"isTransient","" + (SPropertyOperations.getBoolean(current,"transient")));
            result=decl;
          }
 else {
            SNode decl=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldDeclaration",null);
            SPropertyOperations.set(decl,"isVolatile","" + (SPropertyOperations.getBoolean(current,"volatile")));
            SPropertyOperations.set(decl,"isTransient","" + (SPropertyOperations.getBoolean(current,"transient")));
            result=decl;
          }
          SLinkOperations.setTarget(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",SLinkOperations.getTarget(current,"visibility",true),true);
          SPropertyOperations.set(result,"name",name);
          SLinkOperations.setTarget(result,"type",SLinkOperations.getTarget(current,"type",true),true);
          if (pattern.endsWith("=")) {
            SNodeFactoryOperations.setNewChild(result,"initializer","jetbrains.mps.baseLanguage.structure.Expression");
          }
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(current,"final")));
          return SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          if (SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"type",true) == null) {
            editorContext.selectWRTFocusPolicy(createdNode);
            return null;
          }
          if ((SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"initializer",true) == null)) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),SelectionManager.LAST_EDITABLE_CELL,-1);
          }
 else {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"initializer",true),SelectionManager.FIRST_EDITABLE_CELL,-1);
          }
          return null;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (IncompleteMemberHelper.canBeField(curr)) {
            if ((pattern == null || pattern.length() == 0)) {
              return !(strictly);
            }
            String name=IncompleteMemberHelper.buildFieldName(pattern);
            if (IncompleteMemberHelper.isValidCandidateFieldName(curr,name)) {
              if (JavaNameUtil.isJavaIdentifier(name.trim())) {
                return (strictly ? pattern.endsWith("=") || pattern.endsWith(";") || pattern.endsWith(" ") : true);
              }
            }
          }
          return false;
        }
        public String getDescriptionText(        String pattern){
          return (SPropertyOperations.getBoolean(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"),"static") ? "static field" : "field");
        }
        public String getMatchingText(        String pattern){
          return IncompleteMemberHelper.buildFieldName(pattern);
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SPropertyOperations.set(result,"isStatic","" + (SPropertyOperations.getBoolean(curr,"static")));
          SPropertyOperations.set(result,"abstractClass","" + (SPropertyOperations.getBoolean(curr,"abstract")));
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(curr,"final")));
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return IncompleteMemberHelper.canBeClass(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration")) && IncompleteMemberHelper.canSubstitute(strictly,pattern,"class");
        }
        public String getDescriptionText(        String pattern){
          return "Class declaration";
        }
        public String getMatchingText(        String pattern){
          return "class";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          SPropertyOperations.set(result,"nonStatic","" + (true));
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return IncompleteMemberHelper.canBeInterface(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration")) && IncompleteMemberHelper.canSubstitute(strictly,pattern,"interface");
        }
        public String getDescriptionText(        String pattern){
          return "Interface declaration";
        }
        public String getMatchingText(        String pattern){
          return "interface";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return IncompleteMemberHelper.canBeEnum(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration")) && IncompleteMemberHelper.canSubstitute(strictly,pattern,"enum");
        }
        public String getDescriptionText(        String pattern){
          return "Enum declaration";
        }
        public String getMatchingText(        String pattern){
          return "enum";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return IncompleteMemberHelper.canBeInterface(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration")) && IncompleteMemberHelper.canSubstitute(strictly,pattern,"@interface");
        }
        public String getDescriptionText(        String pattern){
          return "Annotation declaration";
        }
        public String getMatchingText(        String pattern){
          return "@interface";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
