{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          String name=pattern;
          while (name.endsWith("(") || name.endsWith(")") || name.endsWith(" ")) {
            name=name.substring(0,name.length() - 1);
          }
          name=name.trim();
          SNode result;
          if (SPropertyOperations.getBoolean(current,"static")) {
            result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",null);
          }
 else {
            SNode decl=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
            SPropertyOperations.set(decl,"isAbstract","" + (SPropertyOperations.getBoolean(current,"abstract")));
            result=decl;
          }
          SPropertyOperations.set(result,"name",name);
          SLinkOperations.setTarget(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",SLinkOperations.getTarget(current,"visibility",true),true);
          SLinkOperations.setTarget(result,"returnType",SLinkOperations.getTarget(current,"type",true),true);
          SPropertyOperations.set(result,"isSynchronized","" + (SPropertyOperations.getBoolean(current,"synchronized")));
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(current,"final")));
          return SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(createdNode),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"leftParen",-1);
          }
 else           if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(createdNode),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),"leftParen",-1);
          }
          return null;
        }
        public String getDescriptionText(        String pattern){
          return (SPropertyOperations.getBoolean(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"),"static") ? "static method" : "method");
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"volatile") || SPropertyOperations.getBoolean(curr,"transient")) {
            return null;
          }
          if (!((pattern == null || pattern.length() == 0))) {
            String name=pattern;
            while (name.endsWith("(") || name.endsWith(")")) {
              name=name.substring(0,name.length() - 1);
            }
            SNode clNode=SNodeOperations.as(SNodeOperations.getParent(curr),"jetbrains.mps.baseLanguage.structure.Classifier");
            if (clNode != null && SPropertyOperations.getString(clNode,"name").equals(name.trim())) {
              return null;
            }
            if (JavaNameUtil.isJavaIdentifier(name.trim())) {
              if (SPropertyOperations.getBoolean(curr,"synchronized") || SPropertyOperations.getBoolean(curr,"abstract") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(curr,"type",true),"jetbrains.mps.baseLanguage.structure.VoidType")) {
                return name + ((pattern.endsWith("()") || pattern.endsWith("(") ? "()" : ""));
              }
 else {
                return name + "()";
              }
            }
          }
          return null;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode current=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          String name=pattern;
          if (pattern.endsWith(";") || pattern.endsWith("=")) {
            name=name.substring(0,name.length() - 1).trim();
          }
          name=name.trim();
          SNode result;
          if (SPropertyOperations.getBoolean(current,"static")) {
            SNode decl=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration",null);
            SPropertyOperations.set(decl,"isVolatile","" + (SPropertyOperations.getBoolean(current,"volatile")));
            SPropertyOperations.set(decl,"isTransient","" + (SPropertyOperations.getBoolean(current,"transient")));
            result=decl;
          }
 else {
            SNode decl=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldDeclaration",null);
            SPropertyOperations.set(decl,"isVolatile","" + (SPropertyOperations.getBoolean(current,"volatile")));
            SPropertyOperations.set(decl,"isTransient","" + (SPropertyOperations.getBoolean(current,"transient")));
            result=decl;
          }
          SLinkOperations.setTarget(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",SLinkOperations.getTarget(current,"visibility",true),true);
          SPropertyOperations.set(result,"name",name);
          SLinkOperations.setTarget(result,"type",SLinkOperations.getTarget(current,"type",true),true);
          if (pattern.endsWith("=")) {
            SNodeFactoryOperations.setNewChild(result,"initializer","jetbrains.mps.baseLanguage.structure.Expression");
          }
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(current,"final")));
          return SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.ClassifierMember");
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          if ((SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"initializer",true) == null)) {
            SelectionUtil.selectCell(editorContext,SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),SelectionManager.LAST_EDITABLE_CELL);
          }
 else {
            SelectionUtil.selectCell(editorContext,SLinkOperations.getTarget(SNodeOperations.cast(createdNode,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"initializer",true),SelectionManager.FIRST_EDITABLE_CELL);
          }
          return null;
        }
        public String getDescriptionText(        String pattern){
          return (SPropertyOperations.getBoolean(SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"),"static") ? "static field" : "field");
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"abstract") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(curr,"type",true),"jetbrains.mps.baseLanguage.structure.VoidType") || SPropertyOperations.getBoolean(curr,"synchronized")) {
            if ((pattern != null && pattern.length() > 0) && !(pattern.endsWith("(")) && !(pattern.endsWith("()"))) {
              return pattern + ";";
            }
            return null;
          }
          if (!((pattern == null || pattern.length() == 0))) {
            final Wrappers._T<String> name=new Wrappers._T<String>(pattern);
            if (pattern.endsWith(";") || pattern.endsWith("=")) {
              name.value=name.value.substring(0,name.value.length() - 1);
            }
            if ((SLinkOperations.getTarget(curr,"type",true) == null) && Sequence.fromIterable(ClassifierScopes.getVisibleClassifiersScope(_context.getCurrentTargetNode(),true).getAvailableElements(pattern)).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return eq_x583g4_a0a0a0a0a0a0d0c0d0a0a0a0c0a0c0wc(SPropertyOperations.getString(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Classifier"),"name"),name.value);
              }
            }
).isNotEmpty()) {
              return null;
            }
            if ((SLinkOperations.getTarget(curr,"type",true) == null) && (pattern.equals("string") || pattern.equals("map") || pattern.equals("set")|| pattern.equals("list")|| pattern.equals("sorted_set")|| pattern.equals("sorted_map"))) {
              return null;
            }
            if (JavaNameUtil.isJavaIdentifier(name.value.trim())) {
              return name.value + ((pattern.endsWith("=") ? "=" : ""));
            }
          }
          return null;
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SPropertyOperations.set(result,"isStatic","" + (SPropertyOperations.getBoolean(curr,"static")));
          SPropertyOperations.set(result,"abstractClass","" + (SPropertyOperations.getBoolean(curr,"abstract")));
          SPropertyOperations.set(result,"isFinal","" + (SPropertyOperations.getBoolean(curr,"final")));
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "Class declaration";
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"synchronized") || SPropertyOperations.getBoolean(curr,"transient") || SPropertyOperations.getBoolean(curr,"volatile")|| SLinkOperations.getTarget(curr,"type",true) != null) {
            return null;
          }
          return "class";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          SPropertyOperations.set(result,"nonStatic","" + (true));
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "Interface declaration";
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"abstract") || SPropertyOperations.getBoolean(curr,"synchronized") || SPropertyOperations.getBoolean(curr,"final")|| SPropertyOperations.getBoolean(curr,"volatile")|| SPropertyOperations.getBoolean(curr,"static")|| SLinkOperations.getTarget(curr,"type",true) != null) {
            return null;
          }
          return "interface";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "Enum declaration";
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"abstract") || SPropertyOperations.getBoolean(curr,"synchronized") || SPropertyOperations.getBoolean(curr,"final")|| SPropertyOperations.getBoolean(curr,"volatile")|| SPropertyOperations.getBoolean(curr,"static")|| SLinkOperations.getTarget(curr,"type",true) != null) {
            return null;
          }
          return "enum";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierMember");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation",null);
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          SLinkOperations.setTarget(result,"visibility",SLinkOperations.getTarget(curr,"visibility",true),true);
          return result;
        }
        public String getDescriptionText(        String pattern){
          return "Annotation declaration";
        }
        public String getMatchingText(        String pattern){
          SNode curr=SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration");
          if (SPropertyOperations.getBoolean(curr,"abstract") || SPropertyOperations.getBoolean(curr,"synchronized") || SPropertyOperations.getBoolean(curr,"final")|| SPropertyOperations.getBoolean(curr,"volatile")|| SPropertyOperations.getBoolean(curr,"static")|| SLinkOperations.getTarget(curr,"type",true) != null) {
            return null;
          }
          return "@interface";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
