{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.CastExpression",null);
      SNode targetExpression=PrecedenceUtil.getTargetForLeftTransform(_context.getSourceNode(),result);
      SNodeOperations.replaceWithAnother(targetExpression,result);
      SLinkOperations.setTarget(result,"expression",targetExpression,true);
      PrecedenceUtil.parenthesiseIfNecessary(targetExpression);
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(result),"jetbrains.mps.baseLanguage.structure.Expression")) {
        SNode parens=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
        SNodeOperations.replaceWithAnother(result,parens);
        SLinkOperations.setTarget(parens,"expression",result,true);
      }
      return result;
    }
    public String getMatchingText(    String pattern){
      return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"conceptAlias");
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"shortDescription");
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),null));
    }
  }
);
  return result;
}
