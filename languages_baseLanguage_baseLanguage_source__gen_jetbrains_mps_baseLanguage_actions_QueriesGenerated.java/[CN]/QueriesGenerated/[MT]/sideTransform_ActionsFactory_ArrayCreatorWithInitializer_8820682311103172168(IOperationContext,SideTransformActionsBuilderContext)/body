{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializerAndMultipleDimensions"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode replacing=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializerAndMultipleDimensions");
      SPropertyOperations.set(replacing,"dimensionCount","" + (2));
      SLinkOperations.setTarget(replacing,"componentType",SLinkOperations.getTarget(_context.getSourceNode(),"componentType",true),true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(replacing,"arrayInitializers",true),"initValue",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"initValue",true)));
      editorContext.selectWRTFocusPolicy(SLinkOperations.getTarget(replacing,"arrayInitializers",true));
      return replacing;
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializerAndMultipleDimensions"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializerAndMultipleDimensions"),null));
    }
  }
);
  return result;
}
