{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode type=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type"),null);
      ListSequence.fromList(SLinkOperations.getChildren(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1170345865475l,1201186121363l,"typeParameter"))).addElement(type);
      return type;
    }
    public String getMatchingText(    String pattern){
      return "<";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass"),null));
    }
  }
);
  return result;
}
