{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode type=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Type",null);
      ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"typeParameter",true)).addElement(type);
      return type;
    }
    public String getMatchingText(    String pattern){
      return "<";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
