{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode targetExpression=PrecedenceUtil.getTargetForRightTransform(_context.getSourceNode());
      SNode assertion=SNodeOperations.cast(SNodeOperations.getParent(targetExpression),"jetbrains.mps.baseLanguage.structure.AssertStatement");
      SNodeFactoryOperations.setNewChild(assertion,"message","jetbrains.mps.baseLanguage.structure.Expression");
      return SLinkOperations.getTarget(assertion,"message",true);
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
