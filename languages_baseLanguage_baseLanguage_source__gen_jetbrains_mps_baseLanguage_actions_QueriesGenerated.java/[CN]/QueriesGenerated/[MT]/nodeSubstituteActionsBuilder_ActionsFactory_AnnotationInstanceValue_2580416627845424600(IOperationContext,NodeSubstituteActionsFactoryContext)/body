{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          SNode result=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),2580416627845338977l,"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue"),null);
          SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1188214545140l,1188214607812l,"value"),nodeToWrap);
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188207840427l,"jetbrains.mps.baseLanguage.structure.AnnotationInstance"))) {
            SNode annotationInstance=SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188207840427l,"jetbrains.mps.baseLanguage.structure.AnnotationInstance"));
            List<SNode> annotationMethodDeclarations=SLinkOperations.getChildren(SLinkOperations.getTarget(annotationInstance,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1188207840427l,1188208074048l,"annotation")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,1107880067339l,"method"));
            if (ListSequence.fromList(annotationMethodDeclarations).count() == 1) {
              SLinkOperations.setTarget(result,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1188214545140l,1188214555875l,"key"),ListSequence.fromList(annotationMethodDeclarations).first());
            }
          }
          return result;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,editorContext);
          return (returnSmallPart(nc) ? nc : wrappedNode);
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
