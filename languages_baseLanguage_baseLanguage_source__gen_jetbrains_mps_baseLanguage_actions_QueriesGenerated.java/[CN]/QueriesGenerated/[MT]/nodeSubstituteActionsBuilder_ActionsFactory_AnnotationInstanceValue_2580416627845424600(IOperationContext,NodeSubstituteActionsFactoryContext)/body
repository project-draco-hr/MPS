{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue");
    SNode childConcept=(SNode)(_context.getChildConcept());
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue",null);
          SLinkOperations.setTarget(result,"value",nodeToWrap,true);
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.AnnotationInstance")) {
            SNode annotationInstance=SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.AnnotationInstance");
            List<SNode> annotationMethodDeclarations=SLinkOperations.getTargets(SLinkOperations.getTarget(annotationInstance,"annotation",false),"method",true);
            if ((int)(ListSequence.fromList(annotationMethodDeclarations).count()) == 1) {
              SLinkOperations.setTarget(result,"key",ListSequence.fromList(annotationMethodDeclarations).first(),false);
            }
          }
          return result;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope(),editorContext);
          return (returnSmallPart(nc) ? nc : wrappedNode);
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
