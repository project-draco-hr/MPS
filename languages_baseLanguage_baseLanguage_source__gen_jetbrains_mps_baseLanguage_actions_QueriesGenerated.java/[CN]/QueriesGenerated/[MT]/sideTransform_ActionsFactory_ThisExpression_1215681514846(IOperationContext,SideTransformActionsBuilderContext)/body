{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return ThisExpression_Behavior.call_getPossibleClassifiers_1215682129821(_context.getSourceNode());
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode expr=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
            SLinkOperations.setTarget(expr,"classConcept",(item),false);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),expr);
            return expr;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"name") + ".";
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
        }
);
      }
    }
  }
  return result;
}
