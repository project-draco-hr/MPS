{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode dot=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
      SNode operation=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
      SLinkOperations.setTarget(operation,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1197029447546l,1197029500499l,"fieldDeclaration"),SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,1068581517664l,"variableDeclaration")),"jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
      ListSequence.fromList(SLinkOperations.getChildren(operation,MetaAdapterFactory.getContainmentLink(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,5169995583184591170l,"smodelAttribute"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-3554657779850784990l,-7236703803128771572l),1133920641626l,5169995583184591170l,"smodelAttribute"))));
      SLinkOperations.setTarget(dot,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation"),operation);
      return SNodeOperations.replaceWithAnother(_context.getSourceNode(),dot);
    }
    public String getMatchingText(    String pattern){
      return ".";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression"),null));
    }
  }
);
  return result;
}
