{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode dot=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
        SNode operation=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
        SLinkOperations.setTarget(operation,"fieldDeclaration",SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(operation,"smodelAttribute",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"smodelAttribute",true)));
        SLinkOperations.setTarget(dot,"operation",operation,true);
        return SNodeOperations.replaceWithAnother(_context.getSourceNode(),dot);
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
