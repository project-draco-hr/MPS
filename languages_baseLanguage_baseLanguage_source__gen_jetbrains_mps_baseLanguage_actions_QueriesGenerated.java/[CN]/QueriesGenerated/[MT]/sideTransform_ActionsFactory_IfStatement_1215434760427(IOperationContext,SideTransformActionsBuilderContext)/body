{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<String> parameterObjects=new Computable<Iterable<String>>(){
      public Iterable<String> compute(){
        return ListSequence.fromListAndArray(new ArrayList<String>(),"else{","else {");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"ifFalseStatement","jetbrains.mps.baseLanguage.structure.BlockStatement");
            return SLinkOperations.getTarget(_context.getSourceNode(),"ifFalseStatement",true);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement"),null));
          }
        }
);
      }
    }
  }
  return result;
}
