{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode field=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
      SPropertyOperations.set(field,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,8606350594693632173l,"isTransient"),"" + (true));
      SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")),"transientModifier",-1);
      return null;
    }
    public String getMatchingText(    String pattern){
      return "transient";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode field=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
      SPropertyOperations.set(field,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,1240249534625l,"isVolatile"),"" + (true));
      SelectionUtil.selectLabelCellAnSetCaret(editorContext,SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")),"volatileModifier",-1);
      return null;
    }
    public String getMatchingText(    String pattern){
      return "volatile";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode field=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468200l,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
      SNode staticField=SNodeFactoryOperations.replaceWithNewChild(field,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1070462154015l,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")));
      SelectionUtil.selectLabelCellAnSetCaret(editorContext,staticField,"staticModifier",-1);
      return null;
    }
    public String getMatchingText(    String pattern){
      return "static";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"),null));
    }
  }
);
  return result;
}
