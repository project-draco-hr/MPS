{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)(_context.getChildConcept());
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return _quotation_createNode_peg1jq_a0a0a0a();
        }
        public String getDescriptionText(        String pattern){
          return "Prints a string to System.out";
        }
        public String getMatchingText(        String pattern){
          return "sout";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
        public SNode getIconNode(        String pattern){
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)(_context.getChildConcept());
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return _quotation_createNode_peg1jq_a0a0b0a();
        }
        public String getDescriptionText(        String pattern){
          return "Prints a string to System.err";
        }
        public String getMatchingText(        String pattern){
          return "serr";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
        public SNode getIconNode(        String pattern){
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        }
      }
);
    }
  }
  return result;
}
