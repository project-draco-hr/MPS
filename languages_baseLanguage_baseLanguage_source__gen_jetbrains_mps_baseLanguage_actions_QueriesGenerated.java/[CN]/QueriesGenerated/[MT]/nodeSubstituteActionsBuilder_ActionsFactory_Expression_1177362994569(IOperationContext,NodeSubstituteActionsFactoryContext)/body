{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return Classifier_Behavior.call_getAccessibleMembers_669019847198843527(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"))),_context.getParentNode(),IClassifiersSearchScope.INSTANCE_FIELD);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode operationExpression=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.DotExpression",null);
              if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
                SLinkOperations.setTarget(SNodeFactoryOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),false);
              }
 else               if (SNodeOperations.isInstanceOf((item),"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
                SLinkOperations.setTarget(SNodeFactoryOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"),"fieldDeclaration",SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),false);
              }
              SNode thisExpression=SNodeFactoryOperations.setNewChild(operationExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
              if (!(Sequence.fromIterable(Members.visibleInstanceFields(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),ClassConcept_Behavior.call_getContextClass_8008512149545173402(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept"))),_context.getParentNode()),"virtual_getThisType_7405920559687254782",new Object[]{}),_context.getParentNode())).contains((item)))) {
                SNode concept=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
                while (concept != null && !(Sequence.fromIterable(Members.visibleInstanceFields(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),concept,"virtual_getThisType_7405920559687254782",new Object[]{}),_context.getParentNode())).contains((item)))) {
                  concept=SNodeOperations.getAncestor(concept,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
                }
                SLinkOperations.setTarget(thisExpression,"classConcept",concept,false);
              }
              return operationExpression;
            }
          }
);
        }
      }
    }
  }
  return result;
}
