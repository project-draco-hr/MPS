{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    final String[] lastPattern=new String[1];
    final SNode targetNode=new Computable<SNode>(){
      public SNode compute(){
        return SLinkOperations.getTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11bL,"rightExpression"));
      }
    }
.compute();
    List<SubstituteAction> list=ModelActions.createChildNodeSubstituteActions(targetNode,null,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation").getDeclarationNode(),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      @Nullable EditorContext editorContext){
        return substitute(newChild,targetNode,lastPattern[0],editorContext);
      }
      private SNode substitute(      SNode result,      SNode targetNode,      String pattern,      @Nullable EditorContext editorContext){
        return PrecedenceUtil.processLeftTransform(SNodeOperations.cast(targetNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506fL,"jetbrains.mps.baseLanguage.structure.Expression")),result);
      }
    }
,operationContext);
    for (    final SubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
