{
  return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) && (SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.ExpressionStatement",false,false) != null) && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.Expression",false)).all(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),"jetbrains.mps.baseLanguage.structure.Expression",true,new String[]{})).contains(_context.getSourceNode())) || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.DotExpression") && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),"jetbrains.mps.baseLanguage.structure.Expression",true,new String[]{})).contains(_context.getSourceNode())) || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",true),"jetbrains.mps.baseLanguage.structure.Expression",true,new String[]{})).contains(_context.getSourceNode()));
    }
  }
);
}
