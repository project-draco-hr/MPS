{
  return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) && (SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.ExpressionStatement",false,false) != null) && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),"jetbrains.mps.baseLanguage.structure.Expression",false)).all(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),null,true)).contains(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true))) || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.DotExpression") && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),null,true)).contains(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true))) || (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),null,true)).contains(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),"condition",true)))|| (SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression") && ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(),null,true)).contains(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"),"lValue",true)));
    }
  }
);
}
