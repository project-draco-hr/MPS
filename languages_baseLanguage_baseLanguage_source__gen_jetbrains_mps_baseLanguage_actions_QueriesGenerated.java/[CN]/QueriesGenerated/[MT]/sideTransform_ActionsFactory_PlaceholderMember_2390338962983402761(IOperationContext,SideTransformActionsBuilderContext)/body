{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      AbstractModule module=(AbstractModule)SNodeOperations.getModel(_context.getSourceNode()).getModule();
      SModelInternal model=as_x583g4_a0a1a0a0a0a0a1a352(SNodeOperations.getModel(_context.getSourceNode()),SModelInternal.class);
      SModuleReference javadocLangReference=PersistenceFacade.getInstance().createModuleReference("f2801650-65d5-424e-bb1b-463a8781b786(jetbrains.mps.baseLanguage.javadoc)");
      if (!(model.importedLanguages().contains(javadocLangReference))) {
        module.addUsedLanguage(javadocLangReference);
        model.addLanguage(javadocLangReference);
      }
      SNode nextSibling=SNodeOperations.getNextSibling(_context.getSourceNode());
      while (nextSibling != null && SNodeOperations.isInstanceOf(nextSibling,"jetbrains.mps.baseLanguage.structure.PlaceholderMember")) {
        SNode toBeRemoved=nextSibling;
        nextSibling=SNodeOperations.getNextSibling(nextSibling);
        SNodeOperations.deleteNode(toBeRemoved);
      }
      if (SNodeOperations.isInstanceOf(nextSibling,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
        SNode fieldDeclaration=SNodeOperations.cast(nextSibling,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
        SNodeFactoryOperations.setNewAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"),"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment");
        SNode line=SNodeFactoryOperations.addNewChild(AttributeOperations.getAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment")),"body","jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
        SNodeFactoryOperations.addNewChild(line,"part","jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
        return AttributeOperations.getAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"));
      }
 else       if (SNodeOperations.isInstanceOf(nextSibling,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
        SNode fieldDeclaration=SNodeOperations.cast(nextSibling,"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
        SNodeFactoryOperations.setNewAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"),"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment");
        SNode line=SNodeFactoryOperations.addNewChild(AttributeOperations.getAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment")),"body","jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
        SNodeFactoryOperations.addNewChild(line,"part","jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
        return AttributeOperations.getAttribute(fieldDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"));
      }
 else {
        SNode methodDeclaration=SNodeOperations.cast(nextSibling,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
        SNodeFactoryOperations.setNewAttribute(methodDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"),"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment");
        SNode line=SNodeFactoryOperations.addNewChild(AttributeOperations.getAttribute(methodDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")),"body","jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
        SNodeFactoryOperations.addNewChild(line,"part","jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
        return AttributeOperations.getAttribute(methodDeclaration,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"));
      }
    }
    public String getMatchingText(    String pattern){
      return "/**";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "Add Documentation Comment";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"),null));
    }
  }
);
  return result;
}
