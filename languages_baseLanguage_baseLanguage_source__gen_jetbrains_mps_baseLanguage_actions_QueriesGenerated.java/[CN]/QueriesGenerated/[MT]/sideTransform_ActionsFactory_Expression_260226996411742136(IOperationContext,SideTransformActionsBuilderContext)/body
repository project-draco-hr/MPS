{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SingleLineComment");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode statement=SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.Statement");
        SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.SingleLineComment",null);
        SNodeOperations.replaceWithAnother(statement,result);
        SNode part=SNodeFactoryOperations.addNewChild(result,"commentPart","jetbrains.mps.baseLanguage.structure.StatementCommentPart");
        SLinkOperations.setTarget(part,"commentedStatement",statement,true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "//";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
