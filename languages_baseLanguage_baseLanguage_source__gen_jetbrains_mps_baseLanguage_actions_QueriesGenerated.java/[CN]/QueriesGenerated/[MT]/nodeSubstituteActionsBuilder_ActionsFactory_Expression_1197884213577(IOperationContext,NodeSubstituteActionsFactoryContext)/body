{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode childConcept=(SNode)(_context.getChildConcept());
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          List<SNode> result=new ArrayList<SNode>();
          SNode classifier=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          if (!(Classifier_Behavior.call_isStatic_521412098689998668(classifier))) {
            for (            SNode parentClassifier : SNodeOperations.getAncestors(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false)) {
              if (!(SNodeOperations.isInstanceOf(parentClassifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
                ListSequence.fromList(result).addElement(parentClassifier);
                if (Classifier_Behavior.call_isStatic_521412098689998668(parentClassifier)) {
                  break;
                }
              }
            }
          }
          return result;
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode thisEx=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
              SLinkOperations.setTarget(thisEx,"classConcept",(item),false);
              return thisEx;
            }
            public String getMatchingText(            String pattern){
              return (item) + ".this";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "qualified 'this'";
            }
          }
);
        }
      }
    }
  }
  return result;
}
