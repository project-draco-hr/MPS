{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode dotExpression=SNodeOperations.replaceWithAnother(_context.getSourceNode(),SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.structure.DotExpression",_context.getSourceNode()));
        SLinkOperations.setTarget(dotExpression,"operand",_context.getSourceNode(),true);
        SNodeFactoryOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.AbstractOperation");
        return dotExpression;
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "dot operation";
      }
    }
);
  }
  return result;
}
