{
  SNode currentNode=_context.getSourceNode();
  while ((SNodeOperations.getParent(currentNode) != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(currentNode),"jetbrains.mps.baseLanguage.structure.Expression")) {
    currentNode=SNodeOperations.cast(SNodeOperations.getParent(currentNode),"jetbrains.mps.baseLanguage.structure.Expression");
  }
  return ListSequence.fromList(SNodeOperations.getDescendants(currentNode,"jetbrains.mps.baseLanguage.structure.Expression",true,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (AttributeOperations.getAttribute(it,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null) || (AttributeOperations.getAttribute(it,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null);
    }
  }
).isEmpty();
}
