{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Computable computable=new Computable(){
      public Object compute(){
        return SNodeOperations.getParent(_context.getSourceNode());
      }
    }
;
    SNode node=(SNode)computable.compute();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(node,_context.getSide(),_context.getTransformationTag(),operationContext)));
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DimensionExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DimensionExpression",null);
        SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),result);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
