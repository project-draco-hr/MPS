{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.getParent(_context.getSourceNode());
    }
  }
.compute(),_context.getSide(),_context.getTransformationTag(),operationContext)));
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4b2dfdaL,"jetbrains.mps.baseLanguage.structure.DimensionExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4b2dfdaL,"jetbrains.mps.baseLanguage.structure.DimensionExpression")),null);
      SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),result);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4b2dfdaL,"jetbrains.mps.baseLanguage.structure.DimensionExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x113e4b2dfdaL,"jetbrains.mps.baseLanguage.structure.DimensionExpression").getDeclarationNode(),null));
    }
  }
);
  return result;
}
