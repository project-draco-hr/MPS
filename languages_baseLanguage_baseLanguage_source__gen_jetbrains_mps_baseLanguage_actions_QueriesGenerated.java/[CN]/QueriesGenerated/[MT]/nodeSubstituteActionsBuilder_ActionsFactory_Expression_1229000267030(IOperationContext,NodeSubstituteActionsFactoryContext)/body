{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          if (!(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression"))) {
            return SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.CastExpression",null);
          }
          SNode originalExpression=ExpectedType_FactoryUtil.getOriginalExpression(_context.getParentNode(),SNodeOperations.cast(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression"));
          SNode castType=null;
          if ((originalExpression != null)) {
            castType=ExpectedType_FactoryUtil.createExpectedType(SNodeOperations.cast(originalExpression,"jetbrains.mps.baseLanguage.structure.Expression"));
          }
          if (SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
            return new QueriesGenerated.QuotationClass_x583g4_a0a0e0a0a0a0a0c0a0b0zd().createNode(SNodeOperations.copyNode(castType),SNodeOperations.copyNode(_context.getCurrentTargetNode()));
          }
 else {
            return new QueriesGenerated.QuotationClass_x583g4_a0a0a4a0a0a0a0a2a0a1a301().createNode(SNodeOperations.copyNode(castType),SNodeOperations.copyNode(_context.getCurrentTargetNode()));
          }
        }
        public String getDescriptionText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"shortDescription");
        }
        public String getMatchingText(        String pattern){
          return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression"),"alias");
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode cast=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.CastExpression",null);
          SNode parens=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
          SLinkOperations.setTarget(parens,"expression",cast,true);
          SNode instanceOf=ExpectedType_FactoryUtil.getCorrespondingInstanceOf((_context.getCurrentTargetNode() != null && SNodeOperations.getParent(_context.getCurrentTargetNode()) == _context.getParentNode() ? _context.getCurrentTargetNode() : _context.getParentNode()));
          if ((instanceOf != null)) {
            SLinkOperations.setTarget(cast,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(instanceOf,"classType",true)),true);
            SLinkOperations.setTarget(cast,"expression",(_context.getCurrentTargetNode() == null || SConceptPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(_context.getCurrentTargetNode()),"abstract") ? SNodeOperations.copyNode(SLinkOperations.getTarget(instanceOf,"leftExpression",true)) : null),true);
            if ((SLinkOperations.getTarget(cast,"expression",true) == null) && SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression")) {
              SLinkOperations.setTarget(cast,"expression",SNodeOperations.copyNode(_context.getCurrentTargetNode()),true);
            }
          }
 else           if (SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),"jetbrains.mps.baseLanguage.structure.Expression")) {
            SLinkOperations.setTarget(cast,"expression",SNodeOperations.copyNode(_context.getCurrentTargetNode()),true);
          }
          return parens;
        }
        public String getDescriptionText(        String pattern){
          return "type cast expression";
        }
        public String getMatchingText(        String pattern){
          if (pattern.startsWith("(")) {
            String typeName="type";
            String varName="expr";
            SNode instanceOf=ExpectedType_FactoryUtil.getCorrespondingInstanceOf((_context.getCurrentTargetNode() != null && SNodeOperations.getParent(_context.getCurrentTargetNode()) == _context.getParentNode() ? _context.getCurrentTargetNode() : _context.getParentNode()));
            SNode var;
            if (instanceOf != null) {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(instanceOf,"classType",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
                typeName=BaseConcept_Behavior.call_getPresentation_1213877396640(SNodeOperations.cast(SLinkOperations.getTarget(instanceOf,"classType",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"));
              }
              var=(_context.getCurrentTargetNode() == null || SConceptPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(_context.getCurrentTargetNode()),"abstract") ? SLinkOperations.getTarget(instanceOf,"leftExpression",true) : _context.getCurrentTargetNode());
            }
 else {
              var=_context.getCurrentTargetNode();
            }
            if ((SNodeOperations.isInstanceOf(var,"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(var,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
              varName=SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(var,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"name");
            }
 else             if ((SNodeOperations.isInstanceOf(var,"jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(var,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
              varName=SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(var,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"name");
            }
            return "((" + typeName + ")"+ varName+ ")";
          }
          return "((type)expr)";
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
