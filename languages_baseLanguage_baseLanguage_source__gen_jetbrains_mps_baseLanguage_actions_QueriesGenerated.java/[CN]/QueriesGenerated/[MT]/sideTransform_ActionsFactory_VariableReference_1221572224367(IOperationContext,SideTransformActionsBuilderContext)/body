{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final SNode assignment=new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    }
  }
.compute();
  final SNode type=new Computable<SNode>(){
    public SNode compute(){
      return (SNode)TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(assignment,"rValue",true));
    }
  }
.compute();
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return AssignmentExpression_Behavior.call_convertToLocalVariableDeclaration_1221573391693(assignment,null);
    }
    public String getMatchingText(    String pattern){
      return BehaviorReflection.invokeVirtual(String.class,type,"virtual_getPresentation_1213877396640",new Object[]{});
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
