{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
  final SNode assignment;
  final SNode type;
{
    Computable computable=new Computable(){
      public Object compute(){
        return SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
      }
    }
;
    assignment=(SNode)computable.compute();
  }
{
    Computable computable=new Computable(){
      public Object compute(){
        return (SNode)TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(assignment,"rValue",true));
      }
    }
;
    type=(SNode)computable.compute();
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        return AssignmentExpression_Behavior.call_convertToLocalVariableDeclaration_1221573391693(assignment,null);
      }
      public String getMatchingText(      String pattern){
        return BaseConcept_Behavior.call_getPresentation_1213877396640(type);
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
