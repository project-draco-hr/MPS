{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final SNode assignment=new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    }
  }
.compute();
  final SNode type=new Computable<SNode>(){
    public SNode compute(){
      return (SNode)TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(assignment,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1215693861676l,1068498886297l,"rValue")));
    }
  }
.compute();
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      return AssignmentExpression_Behavior.call_convertToLocalVariableDeclaration_1221573391693(assignment,null);
    }
    public String getMatchingText(    String pattern){
      return BehaviorReflection.invokeVirtual(String.class,type,"virtual_getPresentation_1213877396640",new Object[]{});
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
