{
  SNodeFactoryOperations.setNewChild(_context.getNewNode(),"returnType","jetbrains.mps.baseLanguage.structure.VoidType");
{
    SNode original=_context.getSampleNode();
    if (SNodeOperations.isInstanceOf(original,"jetbrains.mps.baseLanguage.structure.MethodDeclaration")) {
      SLinkOperations.setTarget(_context.getNewNode(),"body",SLinkOperations.getTarget(original,"body",true),true);
      SPropertyOperations.set(_context.getNewNode(),"name",SPropertyOperations.getString(original,"name"));
      SLinkOperations.setTarget(_context.getNewNode(),"returnType",SLinkOperations.getTarget(original,"returnType",true),true);
      ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(),"throwsItem",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(original,"throwsItem",true)));
      SPropertyOperations.set(_context.getNewNode(),"isFinal","" + (SPropertyOperations.getBoolean(original,"isFinal")));
      SPropertyOperations.set(_context.getNewNode(),"isSynchronized","" + (SPropertyOperations.getBoolean(original,"isSynchronized")));
      SPropertyOperations.set(_context.getNewNode(),"isNative","" + (SPropertyOperations.getBoolean(original,"isNative")));
      ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(),"annotation",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(original,"annotation",true)));
      ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(),"parameter",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(original,"parameter",true)));
      ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(),"typeVariableDeclaration",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(original,"typeVariableDeclaration",true)));
      AttributeOperations.setAttribute(_context.getNewNode(),new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"),AttributeOperations.getAttribute(original,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")));
    }
  }
  if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Interface")) {
    SPropertyOperations.set(_context.getNewNode(),"isAbstract","" + (true));
    SNodeFactoryOperations.setNewChild(_context.getNewNode(),"visibility","jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }
 else   if (_context.getEnclosingNode() != null && SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.IVisible")) {
    SLinkOperations.setTarget(_context.getNewNode(),"visibility",SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.IVisible"),"visibility",true)),true);
  }
 else   if (SNodeOperations.isInstanceOf(_context.getSampleNode(),"jetbrains.mps.baseLanguage.structure.IVisible")) {
    SLinkOperations.setTarget(_context.getNewNode(),"visibility",SLinkOperations.getTarget(SNodeOperations.cast(_context.getSampleNode(),"jetbrains.mps.baseLanguage.structure.IVisible"),"visibility",true),true);
  }
 else {
    SNodeFactoryOperations.setNewChild(_context.getNewNode(),"visibility","jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }
}
