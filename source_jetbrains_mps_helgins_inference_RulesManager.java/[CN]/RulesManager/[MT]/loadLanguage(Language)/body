{
  if (myLoadedLanguages.contains(l.getNamespace())) {
    return true;
  }
  SModelDescriptor helginsModelDescriptor=l.getHelginsTypesystemModelDescriptor();
  if (helginsModelDescriptor == null)   return false;
  String packageName=helginsModelDescriptor.getLongName();
  String classname="HelginsDescriptor";
  try {
    IHelginsDescriptor helginsDescriptor;
    ClassLoader loader=ClassLoaderManager.getInstance().getClassLoaderFor(l);
    Class<? extends IHelginsDescriptor> c=(Class<? extends IHelginsDescriptor>)Class.forName(packageName + "." + classname,true,loader);
    helginsDescriptor=c.newInstance();
    myInferenceRules.addRuleSetItem(helginsDescriptor.getInferenceRules());
    mySubtypingRules.addRuleSetItem(helginsDescriptor.getSubtypingRules());
    mySupertypingRules.addRuleSetItem(helginsDescriptor.getSupertypingRules());
    myComparisonRules.addRuleSetItem(helginsDescriptor.getComparisonRules());
    myDependenciesContainer.addDependencies(helginsDescriptor.getDependencies());
    myInferenceRules.makeConsistent();
    mySubtypingRules.makeConsistent();
    mySupertypingRules.makeConsistent();
    myComparisonRules.makeConsistent();
    myDependenciesContainer.makeConsistent();
    myLoadedLanguages.add(l.getNamespace());
    return true;
  }
 catch (  Throwable t) {
    myLoadedLanguages.add(l.getNamespace());
    return false;
  }
}
