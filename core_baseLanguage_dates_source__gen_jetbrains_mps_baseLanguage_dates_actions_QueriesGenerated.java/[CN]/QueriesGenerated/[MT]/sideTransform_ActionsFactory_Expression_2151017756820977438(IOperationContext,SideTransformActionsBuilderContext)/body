{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression");
    Iterable<SNode> concepts;
    concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SConceptOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
{
            SNode sn=DateTypeUtil.getContainingPeriod(_context.getSourceNode());
            SNodeOperations.replaceWithAnother(sn,result);
            if (SNodeOperations.isInstanceOf(sn,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
              SLinkOperations.setTarget(result,"datetime",sn,true);
            }
 else {
              SLinkOperations.setTarget(result,"datetime",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null),true);
              SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(result,"datetime",true),"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"),"expression",sn,true);
            }
            return result;
          }
        }
      }
);
    }
  }
  return result;
}
