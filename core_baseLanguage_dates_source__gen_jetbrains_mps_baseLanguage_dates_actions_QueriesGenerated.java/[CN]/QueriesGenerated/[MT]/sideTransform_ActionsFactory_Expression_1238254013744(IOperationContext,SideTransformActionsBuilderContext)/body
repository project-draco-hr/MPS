{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode period=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.PeriodConstant",null);
        SLinkOperations.setTarget(period,"count",SNodeOperations.copyNode(_context.getSourceNode()),true);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),period);
        return period;
      }
      public String getMatchingText(      String pattern){
        return " ";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
