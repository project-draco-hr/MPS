{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode conceptToAdd=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.DefaultTimeZoneConstant");
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
  }
{
    SNode conceptToAdd=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.UTCTimeZoneConstant");
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          DateTimeZone.getAvailableIDs();
          List<String> result=ListSequence.fromList(new ArrayList<String>());
          for (          Object id : DateTimeZone.getAvailableIDs()) {
            ListSequence.fromList(result).addElement(String.valueOf(id));
          }
          return result;
        }
      }
;
      Iterable<String> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode tz=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression",null);
              SPropertyOperations.set(tz,"timezone_id","" + ((item)));
              return tz;
            }
            public String getMatchingText(            String pattern){
              return (item);
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
