{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode tz=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression",null);
          SPropertyOperations.set(tz,"offsetmillis","" + (0));
          try {
            DateTime dt=DateTimeFormat.forPattern("Z").withOffsetParsed().parseDateTime(pattern);
            if (dt.withZoneRetainFields(DateTimeZone.UTC).getMillis() == 0L) {
              SPropertyOperations.set(tz,"offsetmillis","" + (dt.getZone().getStandardOffset(0L)));
            }
          }
 catch (          RuntimeException ignored) {
          }
          return tz;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          if (strictly) {
            return _PrecompiledPatterns.REGEXP0.matcher(pattern).matches();
          }
 else {
            return _PrecompiledPatterns.REGEXP1.matcher(pattern).matches();
          }
        }
        public String getDescriptionText(        String pattern){
          return "offset time zone";
        }
        public String getMatchingText(        String pattern){
          return pattern;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
