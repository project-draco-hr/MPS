{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode dto=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation",true,false);
        SLinkOperations.setTarget(dto,"datetimeProperty",ListSequence.fromList(SLinkOperations.getConceptLinkTargets(dto,"defaultDatetimeProperty")).first(),false);
        return dto;
      }
      public String getMatchingText(      String pattern){
        return "by";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add compare precision";
      }
    }
);
  }
  return result;
}
