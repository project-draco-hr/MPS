{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"datetime",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "#{";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return SConceptPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression"),"shortDescription");
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.FormatDateTimeExpression");
    Iterable<SNode> concepts;
    concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
    for (    final SNode subconcept : concepts) {
      if (!(SNodeOperations.isInstanceOf(subconcept,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      if (SConceptPropertyOperations.getBoolean(subconcept,"abstract")) {
        continue;
      }
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(subconcept,_context.getSourceNode()){
        public SNode doSubstitute(        String pattern){
          SNode result=SConceptOperations.createNewNode(NameUtil.nodeFQName(subconcept),null);
          SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
          SLinkOperations.setTarget(result,"datetime",_context.getSourceNode(),true);
          return result;
        }
      }
);
    }
  }
  return result;
}
