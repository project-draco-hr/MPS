{
  super(project);
  myFavoritesManager=manager;
  myProjectView=projectView;
  myContext=getMPSProject().createOperationContext();
  myTree=new LogicalViewTree(FavoritesProjectPane.this){
    protected MPSTreeNode rebuild(){
      String subId=getSubId();
      TextTreeNode invisibleRoot=new TextTreeNode(subId == null ? "Favorites" : subId);
      List<Object> objectList=myFavoritesManager.getRoots(subId);
      if (objectList == null)       return invisibleRoot;
      for (      Object o : objectList) {
        FavoritesRoot favoritesRoot=FavoritesRoot.createForValue(o);
        if (favoritesRoot == null)         continue;
        MPSTreeNode newChild=favoritesRoot.getTreeNode(myContext);
        if (newChild == null)         continue;
        invisibleRoot.add(newChild);
      }
      return invisibleRoot;
    }
  }
;
  myFavoritesListener=new MPSFavoritesListener(){
    public void rootsChanged(    String listName){
      refreshMySubIdsAndSelect(listName);
      getTree().rebuildLater();
    }
    public void listAdded(    String listName){
      refreshMySubIdsAndSelect(listName);
    }
    public void listRemoved(    String listName){
      String selectedSubId=getSubId();
      refreshMySubIdsAndSelect(selectedSubId);
    }
    private void refreshMySubIdsAndSelect(    String listName){
      myFavoritesManager.removeListener(myFavoritesListener);
      myProjectView.removeProjectPane(FavoritesProjectPane.this);
      myProjectView.addProjectPane(FavoritesProjectPane.this);
      myFavoritesManager.addListener(myFavoritesListener);
      if (ArrayUtil.find(myFavoritesManager.getFavoriteNames(),listName) == -1) {
        listName=null;
      }
      myProjectView.changeView(ID,listName);
    }
  }
;
  myFavoritesManager.addListener(myFavoritesListener);
  getTree().rebuildLater();
}
