{
  super(project);
  myFavoritesManager=manager;
  myProjectView=projectView;
  myContext=getMPSProject().createOperationContext();
  myTree=new MPSTree(){
    protected MPSTreeNode rebuild(){
      String subId=getSubId();
      TextTreeNode invisibleRoot=new TextTreeNode("",myContext);
      setRootVisible(false);
      List<Object> objectList=myFavoritesManager.getRoots(subId);
      if (objectList == null)       return invisibleRoot;
      for (      Object o : objectList) {
        if (o instanceof SModelReference) {
          SModelReference modelReference=(SModelReference)o;
          SModelDescriptor modelDescriptor=GlobalScope.getInstance().getModelDescriptor(modelReference);
          if (modelDescriptor == null)           continue;
          SModelTreeNode modelTreeNode=new SModelTreeNode(modelDescriptor,null,myContext);
          invisibleRoot.add(modelTreeNode);
        }
 else         if (o instanceof ModuleReference) {
          ModuleReference moduleReference=(ModuleReference)o;
          IModule module=MPSModuleRepository.getInstance().getModule(moduleReference);
          if (module == null)           continue;
          ProjectModuleTreeNode moduleTreeNode=ProjectModuleTreeNode.createFor(getMPSProject(),module);
          SModelsSubtree.create(moduleTreeNode,myContext);
          invisibleRoot.add(moduleTreeNode);
        }
 else         if (o instanceof Pair) {
          Pair<SModelReference,Integer> pair=(Pair<SModelReference,Integer>)o;
          SModelReference modelReference=pair.o1;
          Integer indexInModel=pair.o2;
          SModelDescriptor modelDescriptor=GlobalScope.getInstance().getModelDescriptor(modelReference);
          if (modelDescriptor == null)           continue;
          SNode node=modelDescriptor.getSModel().getRoots().get(indexInModel);
          SNodeTreeNode nodeTreeNode=new SNodeTreeNode(node,myContext);
          invisibleRoot.add(nodeTreeNode);
        }
      }
      return invisibleRoot;
    }
  }
;
  myFavoritesListener=new MPSFavoritesListener(){
    public void rootsChanged(    String listName){
    }
    public void listAdded(    String listName){
      refreshMySubIdsAndSelect(listName);
    }
    public void listRemoved(    String listName){
      String selectedSubId=getSubId();
      refreshMySubIdsAndSelect(selectedSubId);
    }
    private void refreshMySubIdsAndSelect(    String listName){
      myFavoritesManager.removeListener(myFavoritesListener);
      myProjectView.removeProjectPane(FavoritesProjectPane.this);
      myProjectView.addProjectPane(FavoritesProjectPane.this);
      myFavoritesManager.addListener(myFavoritesListener);
      if (ArrayUtil.find(myFavoritesManager.getFavoriteNames(),listName) == -1) {
        listName=null;
      }
      myProjectView.changeView(ID,listName);
    }
  }
;
  myFavoritesManager.addListener(myFavoritesListener);
  getTree().rebuildLater();
}
