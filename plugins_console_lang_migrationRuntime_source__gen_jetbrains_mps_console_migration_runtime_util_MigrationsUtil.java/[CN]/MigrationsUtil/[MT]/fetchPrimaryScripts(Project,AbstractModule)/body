{
  Iterable<? extends Iterable<MigrationScript>> scriptSeqs=Sequence.fromIterable(checkDependenciesVersions(module)).select(new ISelector<Tuples._3<SModule,Integer,Integer>,Iterable<MigrationScript>>(){
    public Iterable<MigrationScript> select(    Tuples._3<SModule,Integer,Integer> dep){
      MigrationDescriptor md=getMigrationDescriptor(dep._0());
      int from=(int)dep._1();
      int to=(int)dep._2();
      return check_7hm1hv_a3a0a0a0a02(md,from,to);
    }
  }
);
  return Sequence.fromIterable(scriptSeqs).select(new ISelector<Iterable<MigrationScript>,Iterable<MigrationScript>>(){
    public Iterable<MigrationScript> select(    Iterable<MigrationScript> scripts){
      while (Sequence.fromIterable(scripts).where(new IWhereFilter<MigrationScript>(){
        public boolean accept(        MigrationScript it){
          return it instanceof SecondaryMigrationScript;
        }
      }
).isNotEmpty()) {
        scripts=Sequence.fromIterable(scripts).translate(new ITranslator2<MigrationScript,MigrationScript>(){
          public Iterable<MigrationScript> translate(          MigrationScript script){
            if (script instanceof SecondaryMigrationScript) {
              SModule parentModule=as_7hm1hv_a0a0a0a0a0a0a0a0a0a0a0a0a0b0u(script,SecondaryMigrationScript.class).getPrimaryScriptModule().resolve(project.getRepository());
              if (parentModule != null) {
                MigrationDescriptor parentDescriptor=getMigrationDescriptor(parentModule);
                int primaryFromVersion=((SecondaryMigrationScript)script).primaryFromVersion();
                int primaryToVersion=((SecondaryMigrationScript)script).primaryToVersion();
                return check_7hm1hv_a3a1a0a0a0a0a0a0a0b0u(parentDescriptor,primaryFromVersion,primaryToVersion);
              }
              return Sequence.fromIterable(Collections.<MigrationScript>emptyList());
            }
 else {
              return Sequence.<MigrationScript>singleton(script);
            }
          }
        }
);
      }
      return scripts;
    }
  }
);
}
