{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  List<SNode> fields=SLinkOperations.getTargets(classConcept,"field",true);
  SNode toStringMethod=SLinkOperations.addChild(classConcept,"method",new _Quotations.QuotationClass_4().createNode());
  SNode returnStatement=SLinkOperations.addNewChild(SLinkOperations.getTarget(toStringMethod,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ReturnStatement");
  SNode returnExpression=SLinkOperations.setNewChild(returnStatement,"expression","jetbrains.mps.baseLanguage.structure.PlusExpression");
  SNode classNameLiteral=SLinkOperations.setNewChild(returnExpression,"leftExpression","jetbrains.mps.baseLanguage.structure.StringLiteral");
  SPropertyOperations.set(classNameLiteral,"value",SPropertyOperations.getString(classConcept,"name") + "{");
  SNode currentPlusExpression=SLinkOperations.setNewChild(returnExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.PlusExpression");
  Iterator<SNode> fieldIterator=ListSequence.fromList(fields).iterator();
  while (fieldIterator.hasNext()) {
    SNode field=fieldIterator.next();
    SNode plusExpression=SLinkOperations.setNewChild(currentPlusExpression,"leftExpression","jetbrains.mps.baseLanguage.structure.PlusExpression");
    SNode fieldLiteral=SLinkOperations.setNewChild(plusExpression,"leftExpression","jetbrains.mps.baseLanguage.structure.StringLiteral");
    SPropertyOperations.set(fieldLiteral,"value",SPropertyOperations.getString(field,"name") + "= ");
    SNode dotExpression;
    if (fieldIterator.hasNext()) {
      SNode extraCommaExpression=SLinkOperations.setNewChild(plusExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.PlusExpression");
      SNode commaLiteral=SLinkOperations.setNewChild(extraCommaExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.StringLiteral");
      SPropertyOperations.set(commaLiteral,"value",", ");
      dotExpression=SLinkOperations.setNewChild(extraCommaExpression,"leftExpression","jetbrains.mps.baseLanguage.structure.DotExpression");
    }
 else {
      dotExpression=SLinkOperations.setNewChild(plusExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.DotExpression");
    }
    SLinkOperations.setNewChild(dotExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode fieldRef=SLinkOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
    SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
    currentPlusExpression=SLinkOperations.setNewChild(currentPlusExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.PlusExpression");
  }
  currentPlusExpression=SNodeOperations.cast(SNodeOperations.getParent(currentPlusExpression),"jetbrains.mps.baseLanguage.structure.PlusExpression");
  SNode closingBracketLiteral=SLinkOperations.setNewChild(currentPlusExpression,"rightExpression","jetbrains.mps.baseLanguage.structure.StringLiteral");
  SPropertyOperations.set(closingBracketLiteral,"value"," }");
}
