{
  final SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  List<SNode> fields=SLinkOperations.getTargets(classConcept,"field",true);
  final SNode rightmostExpression;
  if (ListSequence.fromList(fields).isEmpty()) {
    rightmostExpression=new _Quotations.QuotationClass_5().createNode();
  }
 else {
    SNode firstField=ListSequence.fromList(fields).first();
    SNode currentExpression=null;
    for (    SNode field : fields) {
      SNode fieldRef=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
      SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
      SNode item=new _Quotations.QuotationClass_6().createNode(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null),fieldRef,((field == firstField ? "" : ", ")) + SPropertyOperations.getString(field,"name") + "=");
      if (field == firstField) {
        currentExpression=item;
      }
 else {
        currentExpression=new _Quotations.QuotationClass_7().createNode(item,currentExpression);
      }
    }
    rightmostExpression=new _Quotations.QuotationClass_8().createNode(currentExpression);
  }
  SLinkOperations.addChild(classConcept,"method",new _Quotations.QuotationClass_4().createNode(rightmostExpression,SPropertyOperations.getString(classConcept,"name") + "{"));
}
