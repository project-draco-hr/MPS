{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new BuildLayout_ToBinaryCopyProcessor_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new BuildMPSPlugin_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsAspect_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_ModuleJarContent_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_ModuleJars_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_ModuleSources_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_ModuleXml_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_ModuleXml_CustomJarLocation_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_Plugin_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMpsLayout_PluginDescriptor_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_AbstractModule_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_Branding_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_BrandingCompany_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_BrandingHelp_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_BrandingKeymap_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_BrandingStats_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_BrandingUpdateSite_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_DevKit_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_DevKitExport_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_DevKitExportLanguage_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_DevKitExportSolution_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_DevKitRef_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ExtractedModuleDependency_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_Generator_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_GeneratorOptions_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_Group_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPlugin_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginContent_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginDependency_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginGroup_Editor());
}
break;
case 30:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginGroupCustomModule_Editor());
}
break;
case 31:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginModule_Editor());
}
break;
case 32:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_IdeaPluginVendor_Editor());
}
break;
case 33:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_Language_Editor());
}
break;
case 34:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependency_Editor());
}
break;
case 35:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyExtendLanguage_Editor());
}
break;
case 36:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyJar_Editor());
}
break;
case 37:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyOnDevKit_Editor());
}
break;
case 38:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyOnJavaModule_Editor());
}
break;
case 39:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyOnModule_Editor());
}
break;
case 40:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleDependencyUseLanguage_Editor());
}
break;
case 41:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleJavaSource_Editor());
}
break;
case 42:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleModelRoot_Editor());
}
break;
case 43:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleRuntime_Editor());
}
break;
case 44:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleSolutionRuntime_Editor());
}
break;
case 45:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleSource_Editor());
}
break;
case 46:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_ModuleTestSource_Editor());
}
break;
case 47:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuildMps_Solution_Editor());
}
break;
case 48:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildMps_Module_Editor());
}
break;
case 49:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_BuildSourcePath_Editor());
}
break;
case 50:
if (true) {
return Collections.<ConceptEditor>singletonList(new GeneratorInternal_String_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
