{
  if (SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"))) {
    SNode variable=SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    SNode nodeType=SLinkOperations.getTarget(variable,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type"));
    if (nodeType != null) {
      String name=ListSequence.fromList(((List<String>)BHReflection.invoke(nodeType,SMethodTrimmedId.create("getVariableSuffixes",null,"hEwIzNo")))).first();
      if (IdentifierConstraintsUtil.isJavaReserved(name)) {
        name="a" + NameUtil.capitalize(NameUtil.toValidIdentifier(name));
      }
      if (MapSequence.fromMap(usedNames).containsKey(name)) {
        int i=MapSequence.fromMap(usedNames).get(name);
        i=i + 1;
        MapSequence.fromMap(usedNames).put(name,i);
        name=name + i;
      }
 else {
        MapSequence.fromMap(usedNames).put(name,0);
      }
      String prefix=((String)BHReflection.invoke(variable,SMethodTrimmedId.create("getPrefix",null,"2Bet8mWh2lw"),myProject));
      String suffix=((String)BHReflection.invoke(variable,SMethodTrimmedId.create("getSuffix",null,"2Bet8mWh3pg"),myProject));
      String mainName=((prefix == null || prefix.length() == 0) ? name : NameUtil.capitalize(name));
      SPropertyOperations.set(variable,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"),prefix + mainName + suffix);
    }
  }
  for (  SNode child : SNodeOperations.getChildren(node)) {
    setVariableNames(child,usedNames);
  }
}
