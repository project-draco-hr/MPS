{
  boolean insertion=myContextMethod != null && SNodeOperations.getParent(myContextMethod) == myClassConcept;
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode m : baseMethods) {
    SNode baseMethod=SNodeOperations.cast(m,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SNode method=SNodeOperations.cast(BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),baseMethod,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","call_getMethodToImplement_69709522611978987",new Object[]{myClassConcept}),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SPropertyOperations.set(method,"isAbstract","" + (false));
    SLinkOperations.setTarget(method,"body",SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myClassConcept),"jetbrains.mps.baseLanguage.structure.StatementList",null),true);
    if (insertion) {
      int index=ListSequence.fromList(SLinkOperations.getTargets(myClassConcept,"member",true)).indexOf(myContextMethod);
      if (index == -1) {
        ListSequence.fromList(SLinkOperations.getTargets(myClassConcept,"member",true)).addElement(method);
      }
 else {
        ListSequence.fromList(SLinkOperations.getTargets(myClassConcept,"member",true)).insertElement(index,method);
      }
    }
 else {
      ListSequence.fromList(SLinkOperations.getTargets(myClassConcept,"member",true)).addElement(method);
    }
    update(method,baseMethod);
    ListSequence.fromList(result).addElement(method);
  }
  return result;
}
