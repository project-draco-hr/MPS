{
  if (ApplicationManager.getApplication() == null || ApplicationManager.getApplication().isDisposed()) {
    return;
  }
  if (IMakeService.INSTANCE.isSessionActive()) {
    return;
  }
  final List<SModelEvent> events=new ArrayList<SModelEvent>();
synchronized (EVENTS_LOCK) {
    events.addAll(myLastEvents);
    myLastEvents.clear();
  }
  final Set<BaseEditorChecker> checkers=new LinkedHashSet<BaseEditorChecker>();
  final Set<BaseEditorChecker> checkersToRemove=new LinkedHashSet<BaseEditorChecker>();
synchronized (CHECKERS_LOCK) {
    if (!EditorSettings.getInstance().isPowerSaveMode() || myForceUpdateInPowerSaveModeFlag) {
      checkers.addAll(myCheckers);
      myForceUpdateInPowerSaveModeFlag=false;
    }
    checkersToRemove.addAll(myCheckersToRemove);
    myCheckersToRemove.clear();
  }
  final List<EditorComponent> activeEditors=getActiveEditors();
  runUpdateMessagesAction(new Runnable(){
    @Override public void run(){
      if (EditorSettings.getInstance().isPowerSaveMode()) {
        myCheckedOnceEditors.clear();
        myInspectorMessagesCreated=false;
      }
 else {
        cleanupCheckedOnce(activeEditors);
      }
    }
  }
);
  if (checkers.isEmpty() && checkersToRemove.isEmpty()) {
    return;
  }
  List<Pair<EditorComponent,Boolean>> input=new ArrayList<Pair<EditorComponent,Boolean>>();
  HashSet<SNodePointer> visited=new HashSet<SNodePointer>();
  for (  EditorComponent ecomp : activeEditors) {
    SNodePointer pointer=new SNodePointer(ecomp.getNodeForTypechecking());
    input.add(new Pair<EditorComponent,Boolean>(ecomp,!visited.contains(pointer)));
    visited.add(pointer);
  }
  final boolean[] isUpdated={false};
  for (  Pair<EditorComponent,Boolean> pair : input) {
    final EditorComponent editorComponent=pair.o1;
    final Boolean applyQuickFixes=pair.o2;
    if (myStopThread || myCancellable.isCancelled()) {
      return;
    }
    TypeContextManager.getInstance().runTypecheckingAction(editorComponent.getTypecheckingContextOwner(),new Runnable(){
      @Override public void run(){
        if (updateEditorComponent(editorComponent,events,checkers,checkersToRemove,false,essentialOnly,applyQuickFixes)) {
          isUpdated[0]=true;
        }
      }
    }
);
  }
  if (myStopThread || myCancellable.isCancelled()) {
    return;
  }
  if (myInspectorTool != null && myInspectorTool.getInspector() != null) {
    final EditorComponent finalInspector=myInspectorTool.getInspector();
    TypeContextManager.getInstance().runTypecheckingAction(myInspectorTool.getInspector().getTypecheckingContextOwner(),new Runnable(){
      @Override public void run(){
        updateEditorComponent(finalInspector,events,checkers,checkersToRemove,isUpdated[0],essentialOnly,false);
      }
    }
);
  }
}
