{
  if (myThread != null && myThread.isAlive()) {
    LOG.error("trying to initialize a Highlighter being already initialized",new Throwable());
    return;
  }
  myClassLoaderManager.addClassesHandler(myClassesListener);
  myEventCollector.startListening(myGlobalSModelEventsManager,myMPSProject.getRepository());
  myInspectorTool=myProject.getComponent(InspectorTool.class);
  myMessageBusConnection=myProject.getMessageBus().connect();
  myMessageBusConnection.subscribe(EditorComponentCreateListener.EDITOR_COMPONENT_CREATION,new EditorComponentCreateListener(){
    @Override public void editorComponentCreated(    @NotNull EditorComponent editorComponent){
    }
    @Override public void editorComponentDisposed(    @NotNull final EditorComponent editorComponent){
      if (myEditorTracker.isInspector(editorComponent)) {
        addPendingAction(new Runnable(){
          @Override public void run(){
            myEditorTracker.markInspectorUnchecked();
          }
        }
);
      }
    }
  }
);
  ApplicationManager.getApplication().addApplicationListener(myApplicationListener);
  CommandProcessor.getInstance().addCommandListener(myCommandListener);
  myMPSProject.getModelAccess().addCommandListener(myCommandWatcher);
  myThread=new HighlighterThread();
  myThread.start();
}
