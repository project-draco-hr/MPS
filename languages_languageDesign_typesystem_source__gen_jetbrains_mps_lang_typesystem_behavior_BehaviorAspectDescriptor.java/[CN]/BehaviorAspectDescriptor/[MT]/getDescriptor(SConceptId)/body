{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return myApplicableNodeCondition_BehaviorDescriptor;
case 1:
  return myConceptReference_BehaviorDescriptor;
case 2:
return myPatternCondition_BehaviorDescriptor;
case 3:
return myInferenceRule_BehaviorDescriptor;
case 4:
return myAbstractRule_BehaviorDescriptor;
case 5:
return myApplicableNodeReference_BehaviorDescriptor;
case 6:
return myTypeOfExpression_BehaviorDescriptor;
case 7:
return myTypeVarReference_BehaviorDescriptor;
case 8:
return myAbstractSubtypingRule_BehaviorDescriptor;
case 9:
return mySubtypingRule_BehaviorDescriptor;
case 10:
return myReportErrorStatement_BehaviorDescriptor;
case 11:
return myNode_TypeOperation_BehaviorDescriptor;
case 12:
return myMultipleForeachLoop_BehaviorDescriptor;
case 13:
return myJoinType_BehaviorDescriptor;
case 14:
return myRuntimeErrorType_BehaviorDescriptor;
case 15:
return myRuntimeTypeVariable_BehaviorDescriptor;
case 16:
return myMeetType_BehaviorDescriptor;
case 17:
return myComparisonRule_BehaviorDescriptor;
case 18:
return myNonTypesystemRule_BehaviorDescriptor;
case 19:
return myInequationReplacementRule_BehaviorDescriptor;
case 20:
return myWhenConcreteVariableDeclaration_BehaviorDescriptor;
case 21:
return myWhenConcreteVariableReference_BehaviorDescriptor;
case 22:
return myWarningStatement_BehaviorDescriptor;
case 23:
return myTypesystemIntentionArgument_BehaviorDescriptor;
case 24:
return myAbstractInequationStatement_BehaviorDescriptor;
case 25:
return myQuickFixExecuteBlock_BehaviorDescriptor;
case 26:
return myConceptFunctionParameter_node_BehaviorDescriptor;
case 27:
return myQuickFixDescriptionBlock_BehaviorDescriptor;
case 28:
return myProcessed_BehaviorDescriptor;
case 29:
return myInfoStatement_BehaviorDescriptor;
case 30:
return myMessageStatement_BehaviorDescriptor;
case 31:
return myVariableConverterItem_ApplicableBlock_BehaviorDescriptor;
case 32:
return myConceptFunctionParameter_var_BehaviorDescriptor;
case 33:
return myVariableConverterItem_ConvertBlock_BehaviorDescriptor;
case 34:
return myConceptFunctionParameter_Role_BehaviorDescriptor;
case 35:
return myConceptFunctionParameter_isAggregation_BehaviorDescriptor;
case 36:
return myConceptFunctionParameter_ContextNode_BehaviorDescriptor;
case 37:
return myOverloadedOperatorTypeFunction_BehaviorDescriptor;
case 38:
return myLeftOperandType_parameter_BehaviorDescriptor;
case 39:
return myOperation_parameter_BehaviorDescriptor;
case 40:
return myRightOperandType_parameter_BehaviorDescriptor;
case 41:
return myMeetContainer_BehaviorDescriptor;
case 42:
return myJoinContainer_BehaviorDescriptor;
case 43:
return myDefaultGroupReference_BehaviorDescriptor;
case 44:
return myOverridesConceptFunction_BehaviorDescriptor;
case 45:
return myOriginalNodeId_BehaviorDescriptor;
case 46:
return myIsReplacementRuleApplicable_ConceptFunction_BehaviorDescriptor;
case 47:
return myQuickFixSetSelectionBlock_BehaviorDescriptor;
case 48:
return myConceptFunctionParameter_EditorContext_BehaviorDescriptor;
case 49:
return myIRuleWithTwoNodes_BehaviorDescriptor;
case 50:
return myOverloadedOpIsApplicableFunction_BehaviorDescriptor;
case 51:
return myNode_InferTypeOperation_BehaviorDescriptor;
case 52:
return mySubstituteTypeRule_BehaviorDescriptor;
case 53:
return myConceptFunctionParameter_Selection_BehaviorDescriptor;
case 54:
return mySupersedeConceptFunction_BehaviorDescriptor;
case 55:
return myQuickFixFieldReference_BehaviorDescriptor;
default :
return null;
}
}
