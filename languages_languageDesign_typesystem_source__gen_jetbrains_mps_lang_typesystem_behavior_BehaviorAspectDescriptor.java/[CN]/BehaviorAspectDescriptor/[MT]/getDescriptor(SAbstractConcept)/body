{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0ic.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractInequationStatement__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractRule__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myAbstractSubtypingRule__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myApplicableNodeCondition__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myApplicableNodeReference__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myComparisonRule__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myConceptFunctionParameter_ContextNode__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myConceptFunctionParameter_EditorContext__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myConceptFunctionParameter_Role__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myConceptFunctionParameter_Selection__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myConceptFunctionParameter_isAggregation__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myConceptFunctionParameter_node__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myConceptFunctionParameter_var__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myConceptReference__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myDefaultGroupReference__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myIRuleWithTwoNodes__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myInequationReplacementRule__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myInferenceRule__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myInfoStatement__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myIsApplicableConceptFunction__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myJoinContainer__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myJoinType__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myLeftOperandType_parameter__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myMeetContainer__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myMeetType__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myMessageStatement__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myMultipleForeachLoop__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myNode_InferTypeOperation__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myNode_TypeOperation__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myNonTypesystemRule__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myOperation_parameter__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myOriginalNodeId__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myOverloadedOpIsApplicableFunction__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myOverloadedOperatorTypeFunction__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myOverridesConceptFunction__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myPatternCondition__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myProcessed__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myQuickFixDescriptionBlock__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myQuickFixExecuteBlock__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myQuickFixFieldReference__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myQuickFixSetSelectionBlock__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myReportErrorStatement__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myRightOperandType_parameter__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myRuntimeErrorType__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myRuntimeTypeVariable__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return mySubstituteTypeRule__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return mySubtypingRule__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return mySupersedeConceptFunction__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myTypeOfExpression__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myTypeVarReference__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myTypesystemIntentionArgument__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myVariableConverterItem_ApplicableBlock__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myVariableConverterItem_ConvertBlock__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myWarningStatement__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myWhenConcreteVariableDeclaration__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myWhenConcreteVariableReference__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
