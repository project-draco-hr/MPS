{
{
    SAbstractConcept cncpt=concept;
switch (index_846f5o_a0ic.index(cncpt)) {
case 0:
      return myAbstractInequationStatement__BehaviorDescriptor;
case 1:
    return myAbstractRule__BehaviorDescriptor;
case 2:
  return myAbstractSubtypingRule__BehaviorDescriptor;
case 3:
return myApplicableNodeCondition__BehaviorDescriptor;
case 4:
return myApplicableNodeReference__BehaviorDescriptor;
case 5:
return myComparisonRule__BehaviorDescriptor;
case 6:
return myConceptFunctionParameter_ContextNode__BehaviorDescriptor;
case 7:
return myConceptFunctionParameter_EditorContext__BehaviorDescriptor;
case 8:
return myConceptFunctionParameter_Role__BehaviorDescriptor;
case 9:
return myConceptFunctionParameter_Selection__BehaviorDescriptor;
case 10:
return myConceptFunctionParameter_isAggregation__BehaviorDescriptor;
case 11:
return myConceptFunctionParameter_node__BehaviorDescriptor;
case 12:
return myConceptFunctionParameter_var__BehaviorDescriptor;
case 13:
return myConceptReference__BehaviorDescriptor;
case 14:
return myDefaultGroupReference__BehaviorDescriptor;
case 15:
return myIRuleWithTwoNodes__BehaviorDescriptor;
case 16:
return myInequationReplacementRule__BehaviorDescriptor;
case 17:
return myInferenceRule__BehaviorDescriptor;
case 18:
return myInfoStatement__BehaviorDescriptor;
case 19:
return myIsApplicableConceptFunction__BehaviorDescriptor;
case 20:
return myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor;
case 21:
return myJoinContainer__BehaviorDescriptor;
case 22:
return myJoinType__BehaviorDescriptor;
case 23:
return myLeftOperandType_parameter__BehaviorDescriptor;
case 24:
return myMeetContainer__BehaviorDescriptor;
case 25:
return myMeetType__BehaviorDescriptor;
case 26:
return myMessageStatement__BehaviorDescriptor;
case 27:
return myMultipleForeachLoop__BehaviorDescriptor;
case 28:
return myNode_InferTypeOperation__BehaviorDescriptor;
case 29:
return myNode_TypeOperation__BehaviorDescriptor;
case 30:
return myNonTypesystemRule__BehaviorDescriptor;
case 31:
return myOperation_parameter__BehaviorDescriptor;
case 32:
return myOriginalNodeId__BehaviorDescriptor;
case 33:
return myOverloadedOpIsApplicableFunction__BehaviorDescriptor;
case 34:
return myOverloadedOperatorTypeFunction__BehaviorDescriptor;
case 35:
return myOverridesConceptFunction__BehaviorDescriptor;
case 36:
return myPatternCondition__BehaviorDescriptor;
case 37:
return myProcessed__BehaviorDescriptor;
case 38:
return myQuickFixDescriptionBlock__BehaviorDescriptor;
case 39:
return myQuickFixExecuteBlock__BehaviorDescriptor;
case 40:
return myQuickFixFieldReference__BehaviorDescriptor;
case 41:
return myQuickFixSetSelectionBlock__BehaviorDescriptor;
case 42:
return myReportErrorStatement__BehaviorDescriptor;
case 43:
return myRightOperandType_parameter__BehaviorDescriptor;
case 44:
return myRuntimeErrorType__BehaviorDescriptor;
case 45:
return myRuntimeTypeVariable__BehaviorDescriptor;
case 46:
return mySubstituteTypeRule__BehaviorDescriptor;
case 47:
return mySubtypingRule__BehaviorDescriptor;
case 48:
return mySupersedeConceptFunction__BehaviorDescriptor;
case 49:
return myTypeOfExpression__BehaviorDescriptor;
case 50:
return myTypeVarReference__BehaviorDescriptor;
case 51:
return myTypesystemIntentionArgument__BehaviorDescriptor;
case 52:
return myVariableConverterItem_ApplicableBlock__BehaviorDescriptor;
case 53:
return myVariableConverterItem_ConvertBlock__BehaviorDescriptor;
case 54:
return myWarningStatement__BehaviorDescriptor;
case 55:
return myWhenConcreteVariableDeclaration__BehaviorDescriptor;
case 56:
return myWhenConcreteVariableReference__BehaviorDescriptor;
default :
}
}
return null;
}
