{
  if (SPropertyOperations.getString(linkToCheck,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98052f333L,"role")) != null) {
    if (SPropertyOperations.hasValue(linkToCheck,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference")) {
      SNode concept=SLinkOperations.getTarget(linkToCheck,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98055fef0L,"target"));
      if (ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getNotImplementedConceptMethods_idhEwILIz.invoke(concept)).isNotEmpty()) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(linkToCheck,"The link's target concept has abstract unimplemented methods.\n" + " It is better to have default implementation for every such method since at the present moment\n" + "MPS creates instances of abstract concepts which are contained as a child link in some concept\n "+ "and any method of such concept might be spuriously invoked.\n"+ "That obviously might lead to unnecessary errors in the client's code.","r:00000000-0000-4000-0000-011c8959028f(jetbrains.mps.lang.structure.typesystem)","3021881260572292358",null,errorTarget);
        }
      }
    }
  }
}
