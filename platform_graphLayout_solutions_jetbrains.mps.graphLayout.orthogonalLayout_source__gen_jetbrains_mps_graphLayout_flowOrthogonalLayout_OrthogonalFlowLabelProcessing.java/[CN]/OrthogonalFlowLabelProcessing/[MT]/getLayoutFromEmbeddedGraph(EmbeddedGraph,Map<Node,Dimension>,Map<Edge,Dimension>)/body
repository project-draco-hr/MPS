{
  Graph graph=embeddedGraph.getGraph();
  List<Edge> oldEdges=ListSequence.fromList(new ArrayList<Edge>());
  ListSequence.fromList(oldEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  List<Node> oldNodes=ListSequence.fromList(new ArrayList<Node>());
  ListSequence.fromList(oldNodes).addSequence(SetSequence.fromSet(MapSequence.fromMap(nodeSizes).keySet()));
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  QuasiRepresentationModifier quasiModifier=new QuasiRepresentationModifier(embeddedGraph,bends,angles);
  quasiModifier.reduceToOrthogonalRepresentation();
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  if (OrthogonalFlowLabelProcessing.SHOW_INFO > 0) {
    System.out.println("modified graph: " + embeddedGraph);
  }
  Map<Edge,Edge> labeledEdge=MapSequence.fromMap(new HashMap<Edge,Edge>());
  for (  Edge edge : SetSequence.fromSet(MapSequence.fromMap(initialLabelSizes).keySet())) {
    MapSequence.fromMap(labeledEdge).put(edge,getLabeledEdge(embeddedGraph.findFullHistory(edge)));
  }
  Map<Edge,Dimension> labelSizes=MapSequence.fromMap(new HashMap<Edge,Dimension>());
  for (  Edge edge : SetSequence.fromSet(MapSequence.fromMap(initialLabelSizes).keySet())) {
    MapSequence.fromMap(labelSizes).put(MapSequence.fromMap(labeledEdge).get(edge),MapSequence.fromMap(initialLabelSizes).get(edge));
  }
  ConstraintsGraphProcessor processor=new ConstraintsGraphProcessor(embeddedGraph,directions);
  processor.modifyEmbeddedGraph(oldNodes,nodeSizes,labelSizes);
  Map<Edge,Node> labelNodes=processor.getLabelNodes();
  Map<Node,Dimension> labelNodeSizes=MapSequence.fromMap(new HashMap<Node,Dimension>());
  for (  Edge edge : SetSequence.fromSet(MapSequence.fromMap(labelNodes).keySet())) {
    MapSequence.fromMap(labelNodeSizes).put(MapSequence.fromMap(labelNodes).get(edge),MapSequence.fromMap(labelSizes).get(edge));
  }
  processor.constructGraph();
  Map<Node,Point> coordinates=processor.getCoordinatesInModifiedGraph();
  Map<Node,Map<Direction2D,Integer>> nodeDirectionSizes=MapSequence.fromMap(new HashMap<Node,Map<Direction2D,Integer>>());
  for (  Node node : ListSequence.fromList(oldNodes).concat(Sequence.fromIterable(MapSequence.fromMap(labelNodes).values()))) {
    Map<Direction2D,Integer> directionSizes=MapSequence.fromMap(new HashMap<Direction2D,Integer>());
    Dimension size;
    if (ListSequence.fromList(oldNodes).contains(node)) {
      size=MapSequence.fromMap(nodeSizes).get(node);
    }
 else {
      size=MapSequence.fromMap(labelNodeSizes).get(node);
    }
    int horSize=size.height;
    MapSequence.fromMap(directionSizes).put(Direction2D.UP,horSize / 2);
    MapSequence.fromMap(directionSizes).put(Direction2D.DOWN,horSize - MapSequence.fromMap(directionSizes).get(Direction2D.UP));
    int verSize=size.width;
    MapSequence.fromMap(directionSizes).put(Direction2D.LEFT,verSize / 2);
    MapSequence.fromMap(directionSizes).put(Direction2D.RIGHT,verSize - MapSequence.fromMap(directionSizes).get(Direction2D.LEFT));
    MapSequence.fromMap(nodeDirectionSizes).put(node,directionSizes);
  }
  GraphLayout graphLayout=new GraphLayout(graph);
  for (  Node node : ListSequence.fromList(oldNodes)) {
    Rectangle rect=this.getRectangle(coordinates,node,nodeDirectionSizes,nodeSizes);
    graphLayout.setLayoutFor(node,rect);
  }
  for (  Edge edge : SetSequence.fromSet(MapSequence.fromMap(initialLabelSizes).keySet())) {
    Node labelNode=MapSequence.fromMap(labelNodes).get(MapSequence.fromMap(labeledEdge).get(edge));
    Rectangle rect=getRectangle(coordinates,labelNode,nodeDirectionSizes,labelNodeSizes);
    graphLayout.setLabelLayout(edge,rect);
  }
  for (  Edge edge : ListSequence.fromList(oldEdges)) {
    Node source=edge.getSource();
    Node target=edge.getTarget();
    List<Edge> history=embeddedGraph.findFullHistory(edge);
    List<Point> edgeLayout=ListSequence.fromList(new LinkedList<Point>());
    Node cur=source;
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(cur)));
    for (    Edge historyEdge : ListSequence.fromList(history)) {
      Node next=historyEdge.getOpposite(cur);
      ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(next)));
      cur=next;
    }
    if (ListSequence.fromList(oldNodes).contains(source)) {
      Direction2D dir=MapSequence.fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.fromList(history).first(),source));
      int size=MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(source)).get(dir);
      Point first=ListSequence.fromList(edgeLayout).removeElementAt(0);
      first.translate(size * dir.dx(),size * dir.dy());
      ListSequence.fromList(edgeLayout).removeElementAt(0);
      ListSequence.fromList(edgeLayout).insertElement(0,first);
    }
    if (ListSequence.fromList(oldNodes).contains(target)) {
      Direction2D dir=MapSequence.fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.fromList(history).last(),target));
      int size=MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(target)).get(dir);
      Point last=ListSequence.fromList(edgeLayout).removeLastElement();
      last.translate(size * dir.dx(),size * dir.dy());
      ListSequence.fromList(edgeLayout).removeLastElement();
      ListSequence.fromList(edgeLayout).addElement(last);
    }
    graphLayout.setLayoutFor(edge,edgeLayout);
  }
  return graphLayout;
}
