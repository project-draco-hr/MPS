{
  myListHandler=listHandler;
  if (elementSeparator != null && elementSeparator.length() == 1) {
    KeyMapActionImpl insertAction=new KeyMapActionImpl(){
      @Override public String getDescriptionText(){
        return "insert " + myListHandler.getElementRole();
      }
      @Override public void execute(      EditorContext context){
        SNode anchorNode=getAnchorNode(context);
        SNode nodeToInsert=myListHandler.createNodeToInsert(context);
        SNode parentNode=myListHandler.getOwner();
        parentNode.insertChildBefore(myListHandler.getElementRole(),nodeToInsert,anchorNode);
      }
    }
;
    insertAction.setCaretPolicy(KeyMapAction.CARET_AT_FIRST_POSITION);
    KeyMapActionImpl addAction=new KeyMapActionImpl(){
      @Override public String getDescriptionText(){
        return "add " + myListHandler.getElementRole();
      }
      @Override public void execute(      EditorContext context){
        SNode anchorNode=getAnchorNode(context);
        SNode nodeToInsert=myListHandler.createNodeToInsert(context);
        jetbrains.mps.util.SNodeOperations.insertChild(myListHandler.getOwner(),myListHandler.getElementRole(),nodeToInsert,anchorNode);
      }
    }
;
    addAction.setCaretPolicy(KeyMapAction.CARET_AT_LAST_POSITION);
    if (!" ".equals(elementSeparator)) {
      putAction(KeyMap.KEY_MODIFIERS_ANY,elementSeparator,insertAction);
      putAction(KeyMap.KEY_MODIFIERS_ANY,elementSeparator,addAction);
    }
  }
}
