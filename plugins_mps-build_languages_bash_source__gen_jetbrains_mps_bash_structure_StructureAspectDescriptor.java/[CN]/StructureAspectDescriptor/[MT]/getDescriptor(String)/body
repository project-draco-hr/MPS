{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command",false,new String[]{"jetbrains.mps.bash.structure.Command"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"abstract command","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"commands"},new boolean[]{false},true,false,"","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AddExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+","add operation","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&=","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndCombiningComditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-a","and conditional operation","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&&","and operator","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&>>","appending standard output and standard error","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AppendingOutputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>","appending redirected output","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Argument","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"arg","named argument","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentList","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"args","list of arguments","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentListReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{},new String[]{"words"},new boolean[]{true},false,false,"args","list of arguments","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{"arg"},new String[]{"value"},new boolean[]{false},false,false,"","argument","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"((","arithmetic command","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticExpansion","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"$((","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"=","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AsyncOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&","& operator","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AsyncTerminator","jetbrains.mps.bash.structure.CommandTerminator",false,new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&","async command execution","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseAssingmentExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{"lValue","rValue"},new boolean[]{false,false},true,false,"","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{},new String[]{},new String[]{"command"},new boolean[]{false},true,false,"","command substitution","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseVariableAssingment","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{},new String[]{"lvalue","value"},new boolean[]{false,false},true,false,"","","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BasedIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value","base"},new String[]{},new String[]{},new boolean[]{},false,false,"basedint","integer in XX numeral system","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BasicParameterExpansion","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{},false,false,"${variable}","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{},new String[]{},new String[]{"leftExpression","rightExpression"},new boolean[]{false,false},true,false,"","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{},new String[]{"left","right"},new boolean[]{false,false},true,false,"","","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&","bitwise and operation","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"~","bitwise negation","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|","bitwise or operation","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseXorExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"^","bitwise xor operation","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BlockFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-b","true if file is a block special file","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BraceGrouping","jetbrains.mps.bash.structure.GroupingCommand",false,new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"{ list }","","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"(","( expression )","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"(","( expression )","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketGrouping","jetbrains.mps.bash.structure.GroupingCommand",false,new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"(","bracket grouping","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BuckCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution",false,new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"$(","","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseClause","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"patterns","command","terminator"},new boolean[]{true,false,false},false,false,"","case clause","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"word","clauses"},new boolean[]{false,true},false,false,"case","case command","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseTerminator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CharFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-c","true if file is a character special file","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CombiningConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{},new String[]{"left","right"},new boolean[]{false,false},true,false,"","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommaExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,",","expr1, expt2","");
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Command","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommandList","jetbrains.mps.bash.structure.InputLine",false,new String[]{"jetbrains.mps.bash.structure.InputLine"},new String[]{},new String[]{},new String[]{"head","terminator","comment"},new boolean[]{false,false,false},false,false,"command list","","");
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommandTerminator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedCommandList","jetbrains.mps.bash.structure.InputLine",false,new String[]{"jetbrains.mps.bash.structure.InputLine","jetbrains.mps.bash.structure.IComment"},new String[]{},new String[]{},new String[]{"commandList"},new boolean[]{false},false,false,"commented command","comment with commandlist","");
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedFollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment"},new String[]{},new String[]{},new String[]{"command"},new boolean[]{false},false,false,"commented following command","comment with following commands","");
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedText","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IComment"},new String[]{"comment"},new String[]{},new String[]{},new boolean[]{},false,false,"#","comment","");
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"conditionalExpression"},new boolean[]{false},false,false,"[","conditional command","");
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalOperation","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{"testExpression","ifTrue","ifFalse"},new boolean[]{false,false,false},false,false,"?","(cond)? expr1 : expr2","");
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DecimalConstant","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"int","decimal integer literal","");
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DirectoryConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-d","true if file is a directory","");
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DivAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"/=","","");
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DivExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"/","division","");
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleQuote","jetbrains.mps.bash.structure.QuotedWord",false,new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"\"","","");
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleSemicolon","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,";;","","");
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleSemicolonEt","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,";;&","","");
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<&","duplicating input file descriptors","");
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">&","duplicating output file descriptors","");
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-G","true if file is owned by the effective group id","");
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-O","true if file is owned by the effective user id","");
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ElifCommand","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"testCommand","commands"},new boolean[]{false,false},false,false,"","elif test-command; then","");
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"==","equals operation","");
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-eq","equals numeric operation","");
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"==","equals string operation","");
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityStrings2","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"=","equals string operation","");
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExecTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-x","true if file is executable","");
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-a","true if file exists","");
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExpExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"**","exponent operation","");
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalCommandCall","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{"declaration"},new String[]{"refToOptions"},new boolean[]{true},false,false,"","external command call","");
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalCommandDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"optionDeclaration"},new boolean[]{true},false,false,"","external commmand declaration","");
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalOptionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"},new String[]{},new String[]{},new String[]{"baseCommand"},new boolean[]{false},true,false,"","","");
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FollowingPipeline","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"basePipeline"},new boolean[]{false},true,false,"","","");
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ForCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{},new String[]{"accord","condition","iteration"},new boolean[]{false,false,false},false,false,"for","for ((expr1; expr2; expr3))","");
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ForeachCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{},new String[]{"variable","wordList"},new boolean[]{false,true},false,false,"for","for name [in words]","");
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FreeCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{},new String[]{"translatedWord"},new boolean[]{true},false,false,"words","any command","");
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FunctionCallCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{"function"},new String[]{"params"},new boolean[]{false},false,false,"","function call","");
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FunctionDeclaration","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"command","redirections"},new boolean[]{false,true},false,false,"function","function declaration","");
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GeneralizedWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"units"},new boolean[]{true},false,false,"","word","");
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">","greater than operation","");
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-gt","greater than numeric operation","");
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqual","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-ge","greater than or equals numeric operation","");
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">=","greater than or equals operation","");
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">","greater than string operation","");
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-g","true if set-group-id bit of file is set","");
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GroupingCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"commands"},new boolean[]{false},true,false,"","grouping command","");
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HeadCommandList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"base","following"},new boolean[]{false,false},false,false,"","","");
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HeadPipeline","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"command","following"},new boolean[]{false,false},false,false,"","","");
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HereDocumentRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection"},new String[]{"striptabs"},new String[]{},new String[]{"word","heredocument","delimiter"},new boolean[]{false,false,false},false,false,"<<","here documents","");
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HereStringRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<<<","here strings","");
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HexIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value"},new String[]{},new String[]{},new boolean[]{},false,false,"0x","hexademical integer literal","");
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IArithmeticHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ICommandParameter",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IComment",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ICompoundCommand",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IConcreteWordUnit",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IDescribedConcept",null,true,new String[]{},new String[]{"description"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IGeneralizedWordUnit",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"n"},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IPriorityExpression",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ISymbolConcept",null,true,new String[]{},new String[]{"symbol"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IToWordRedirection",null,true,new String[]{},new String[]{},new String[]{},new String[]{"word"},new boolean[]{false},false,false,"","","");
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IfCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"testCommand","ifTrue","ifFalse","elseIf"},new boolean[]{false,false,false,true},false,false,"if","if test-command; then","");
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"!=","inequals operation","");
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-ne","inequals numeric operation","");
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"!=","inequals string operation","");
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputLine","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputLines","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"lines"},new boolean[]{true},false,false,"","","");
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<","redirecting input","");
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IntegerLiteral","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 114:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LastReadConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-N","true if file has been modified since it was last read","");
case 115:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<<","left bitwise shift operation","");
case 116:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<<=","","");
case 117:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<","less than operation","");
case 118:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-lt","less than numeric operation","");
case 119:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<=","less than or equals operation","");
case 120:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-le","less than or equals numeric operation","");
case 121:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<","less than string operation","");
case 122:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&&","logical and operation","");
case 123:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"!","logical negation","");
case 124:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"||","logical or operation","");
case 125:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MinusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-=","","");
case 126:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ModAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"%=","","");
case 127:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ModExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"%","mod operation","");
case 128:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MulExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*","multiplication","");
case 129:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"*=","","");
case 130:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NewerThan","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"nt","newer than file operation","");
case 131:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-n","true if the length of string is non-zero","");
case 132:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NotCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{},new String[]{"command"},new boolean[]{false},false,false,"!","","");
case 133:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OlderThan","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"ot","older than file operation","");
case 134:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Option","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","option","");
case 135:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"option"},new String[]{},new boolean[]{},false,false,"","option","");
case 136:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionSet","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{},new String[]{},new String[]{"options"},new boolean[]{true},false,false,"opts","options","");
case 137:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionSetReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{},new String[]{"refToOptions"},new boolean[]{true},false,false,"-","","");
case 138:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionWithParam","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"owp","option with parameter","");
case 139:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionWithParamReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{"optionWithParam"},new String[]{"word"},new boolean[]{false},false,false,"","option with parameter","");
case 140:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptnameStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-o","true if shell option optname is enabled","");
case 141:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|=","","");
case 142:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrCombiningConditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-o","or conditional operation","");
case 143:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"||","or operator","");
case 144:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OtherExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-e","true if file exists","");
case 145:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-L","true if file is a symbolic link","");
case 146:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OutputErrorRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"&>","redirecting standard output and standard error","");
case 147:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OutputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"noclobber"},new String[]{},new String[]{},new boolean[]{},false,false,">","redirecting output","");
case 148:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-p","true if file is a named pipe","");
case 149:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipelineOperatorConnection","jetbrains.mps.bash.structure.FollowingPipeline",false,new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|","","");
case 150:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection","jetbrains.mps.bash.structure.FollowingPipeline",false,new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"|&","","");
case 151:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PlusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"+=","","");
case 152:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostDecExpression","jetbrains.mps.bash.structure.PostVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"--","decrement operation","");
case 153:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostIncExpression","jetbrains.mps.bash.structure.PostVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"++","increment operation","");
case 154:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostVariableExpression","jetbrains.mps.bash.structure.WordExpression",false,new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 155:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreDecExpression","jetbrains.mps.bash.structure.PreVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"--","pre decrement operation","");
case 156:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreIncExpression","jetbrains.mps.bash.structure.PreVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"++","pre increment operation","");
case 157:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreVariableExpression","jetbrains.mps.bash.structure.WordExpression",false,new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 158:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.QuotedWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{},new String[]{"word"},new boolean[]{false},true,false,"","","");
case 159:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.QuotesCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution",false,new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"`","","");
case 160:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ReadTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-r","true if file is readable","");
case 161:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ReadingWritingRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"<>","opening file descriptors for reading and writing","");
case 162:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RedirectedCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{},new String[]{"command","redirection"},new boolean[]{false,true},false,false,"redirect","command with redirection","");
case 163:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 164:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RegularFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-f","true if file is a regular file","");
case 165:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RightBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>","right bitwise shift operation","");
case 166:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RightShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,">>=","","");
case 167:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SameReference","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"ef","true if files refer to the same device and inode numbers.","");
case 168:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SelectCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{},new String[]{"variable","words","commands"},new boolean[]{false,false,false},false,false,"select","select command","");
case 169:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonEt","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,";&","","");
case 170:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,";","semicolon operator","");
case 171:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonTerminator","jetbrains.mps.bash.structure.CommandTerminator",false,new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,";","","");
case 172:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ShellScript","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"usedVars","commands"},new boolean[]{true,false},false,false,"","","");
case 173:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SimpleCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{"paramList"},new boolean[]{false},false,false,"command","some command","");
case 174:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SimpleWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"word"},new String[]{},new String[]{},new boolean[]{},false,false,"text","string","");
case 175:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SingleQuote","jetbrains.mps.bash.structure.QuotedWord",false,new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"'","","");
case 176:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SizeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-s","true if file has a size greater than zero","");
case 177:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SocketConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-S","true if file is a socket","");
case 178:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.StickyBitConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-k","true if \"sticky\" bit of file is set","");
case 179:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.StringConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{},new String[]{"string"},new boolean[]{false},false,false,"string","","");
case 180:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SubExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-","substraction","");
case 181:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-h","true if file is a symbolic link","");
case 182:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.TerminalConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-t","true if file descriptor fd is open and refers to a terminal","");
case 183:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.TildeExpansion","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"~","tilde","");
case 184:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},true,false,"","","");
case 185:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{},new String[]{"word"},new boolean[]{false},true,false,"","","");
case 186:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryMinusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","minus","");
case 187:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryPlusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","plus","");
case 188:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UntilLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{},new String[]{"testCommand"},new boolean[]{false},false,false,"until","until test-command; do","");
case 189:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-u","true if set-user-id bit of file is set","");
case 190:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableAddAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment",false,new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"add","'+=' assignment operator","");
case 191:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment",false,new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"def","assingment operator","");
case 192:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableNameDeclaration","jetbrains.mps.bash.structure.LValue",false,new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"VAR","variable name","");
case 193:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableReference","jetbrains.mps.bash.structure.LValue",false,new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{},false,false,"","variable reference","");
case 194:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WhileLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{},new String[]{"testCommand"},new boolean[]{false},false,false,"while","while test-command; do","");
case 195:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WordExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{},new String[]{"word"},new boolean[]{false},false,false,"w","word","");
case 196:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WordList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"words"},new boolean[]{true},false,false,"","list of words","");
case 197:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WriteTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-w","true if file is writable","");
case 198:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.XorAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"^=","","");
case 199:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"-z","true if the length of string is zero","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
