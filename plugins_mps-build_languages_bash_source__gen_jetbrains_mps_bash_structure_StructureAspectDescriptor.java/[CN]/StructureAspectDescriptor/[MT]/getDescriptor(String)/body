{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AbstractCommand").super_("jetbrains.mps.bash.structure.Command").parents("jetbrains.mps.bash.structure.Command").abstract_().alias("abstract command","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AbstractFollowingCommandList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AbstractLoopCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"commands"},new boolean[]{false}).abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AddExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("+","add operation").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AndAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("&=","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AndCombiningComditionalExpression").super_("jetbrains.mps.bash.structure.CombiningConditionalExpression").parents("jetbrains.mps.bash.structure.CombiningConditionalExpression").alias("-a","and conditional operation").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AndOperator").super_("jetbrains.mps.bash.structure.FollowingCommandList").parents("jetbrains.mps.bash.structure.FollowingCommandList").alias("&&","and operator").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection").super_("jetbrains.mps.bash.structure.Redirection").parents("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection").alias("&>>","appending standard output and standard error").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AppendingOutputRedirection").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").alias(">>","appending redirected output").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.Argument").super_("jetbrains.mps.bash.structure.ExternalOptionDeclaration").parents("jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept").alias("arg","named argument").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArgumentList").super_("jetbrains.mps.bash.structure.ExternalOptionDeclaration").parents("jetbrains.mps.bash.structure.ExternalOptionDeclaration").alias("args","list of arguments").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArgumentListReference").super_("jetbrains.mps.bash.structure.ExternalOptionReference").parents("jetbrains.mps.bash.structure.ExternalOptionReference").children(new String[]{"words"},new boolean[]{true}).alias("args","list of arguments").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArgumentReference").super_("jetbrains.mps.bash.structure.ExternalOptionReference").parents("jetbrains.mps.bash.structure.ExternalOptionReference").references("arg").children(new String[]{"value"},new boolean[]{false}).alias("","argument").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArithmeticCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand","jetbrains.mps.bash.structure.IArithmeticHolder").children(new String[]{"expression"},new boolean[]{false}).alias("((","arithmetic command").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArithmeticExpansion").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IArithmeticHolder").children(new String[]{"expression"},new boolean[]{false}).alias("$((","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ArithmeticExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("=","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AsyncOperator").super_("jetbrains.mps.bash.structure.FollowingCommandList").parents("jetbrains.mps.bash.structure.FollowingCommandList").alias("&","& operator").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.AsyncTerminator").super_("jetbrains.mps.bash.structure.CommandTerminator").parents("jetbrains.mps.bash.structure.CommandTerminator").alias("&","async command execution").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BaseAssingmentExpression").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").children(new String[]{"lValue","rValue"},new boolean[]{false,false}).abstract_().create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BaseCommandSubstitution").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit").children(new String[]{"command"},new boolean[]{false}).abstract_().alias("","command substitution").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BaseVariableAssingment").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").children(new String[]{"lvalue","value"},new boolean[]{false,false}).abstract_().create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BasedIntegerLiteral").super_("jetbrains.mps.bash.structure.IntegerLiteral").parents("jetbrains.mps.bash.structure.IntegerLiteral").properties("value","base").alias("basedint","integer in XX numeral system").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BasicParameterExpansion").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit").references("variable").alias("${variable}","").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BinaryArithmeticExpression").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression").children(new String[]{"leftExpression","rightExpression"},new boolean[]{false,false}).abstract_().create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BinaryConditionalExpression").super_("jetbrains.mps.bash.structure.ConditionalExpression").parents("jetbrains.mps.bash.structure.ConditionalExpression").children(new String[]{"left","right"},new boolean[]{false,false}).abstract_().create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BitwiseAndExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("&","bitwise and operation").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BitwiseNegationExpression").super_("jetbrains.mps.bash.structure.UnaryArithmeticExpression").parents("jetbrains.mps.bash.structure.UnaryArithmeticExpression").alias("~","bitwise negation").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BitwiseOrExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("|","bitwise or operation").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BitwiseXorExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("^","bitwise xor operation").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BlockFileConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-b","true if file is a block special file").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BraceGrouping").super_("jetbrains.mps.bash.structure.GroupingCommand").parents("jetbrains.mps.bash.structure.GroupingCommand").alias("{ list }","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BracketConditionalExpression").super_("jetbrains.mps.bash.structure.ConditionalExpression").parents("jetbrains.mps.bash.structure.ConditionalExpression").children(new String[]{"expression"},new boolean[]{false}).alias("(","( expression )").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BracketExpression").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").children(new String[]{"expression"},new boolean[]{false}).alias("(","( expression )").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BracketGrouping").super_("jetbrains.mps.bash.structure.GroupingCommand").parents("jetbrains.mps.bash.structure.GroupingCommand").alias("(","bracket grouping").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.BuckCommandSubstitution").super_("jetbrains.mps.bash.structure.BaseCommandSubstitution").parents("jetbrains.mps.bash.structure.BaseCommandSubstitution").alias("$(","").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CaseClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"patterns","command","terminator"},new boolean[]{true,false,false}).alias("","case clause").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CaseCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"word","clauses"},new boolean[]{false,true}).alias("case","case command").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CaseTerminator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CharFileConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-c","true if file is a character special file").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CombiningConditionalExpression").super_("jetbrains.mps.bash.structure.ConditionalExpression").parents("jetbrains.mps.bash.structure.ConditionalExpression").children(new String[]{"left","right"},new boolean[]{false,false}).abstract_().create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommaExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias(",","expr1, expt2").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.Command").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommandList").super_("jetbrains.mps.bash.structure.InputLine").parents("jetbrains.mps.bash.structure.InputLine").children(new String[]{"head","terminator","comment"},new boolean[]{false,false,false}).alias("command list","").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommandTerminator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommentedCommandList").super_("jetbrains.mps.bash.structure.InputLine").parents("jetbrains.mps.bash.structure.InputLine","jetbrains.mps.bash.structure.IComment").children(new String[]{"commandList"},new boolean[]{false}).alias("commented command","comment with commandlist").create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommentedFollowingCommandList").super_("jetbrains.mps.bash.structure.AbstractFollowingCommandList").parents("jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment").children(new String[]{"command"},new boolean[]{false}).alias("commented following command","comment with following commands").create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.CommentedText").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IComment").properties("comment").alias("#","comment").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ConditionalCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"conditionalExpression"},new boolean[]{false}).alias("[","conditional command").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ConditionalExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ConditionalOperation").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").children(new String[]{"testExpression","ifTrue","ifFalse"},new boolean[]{false,false,false}).alias("?","(cond)? expr1 : expr2").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DecimalConstant").super_("jetbrains.mps.bash.structure.IntegerLiteral").parents("jetbrains.mps.bash.structure.IntegerLiteral").properties("value").alias("int","decimal integer literal").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DirectoryConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-d","true if file is a directory").create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DivAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("/=","").create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DivExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("/","division").create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DoubleQuote").super_("jetbrains.mps.bash.structure.QuotedWord").parents("jetbrains.mps.bash.structure.QuotedWord").alias("\"","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DoubleSemicolon").super_("jetbrains.mps.bash.structure.CaseTerminator").parents("jetbrains.mps.bash.structure.CaseTerminator").alias(";;","").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DoubleSemicolonEt").super_("jetbrains.mps.bash.structure.CaseTerminator").parents("jetbrains.mps.bash.structure.CaseTerminator").alias(";;&","").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").alias("<&","duplicating input file descriptors").create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").alias(">&","duplicating output file descriptors").create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-G","true if file is owned by the effective group id").create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-O","true if file is owned by the effective user id").create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ElifCommand").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"testCommand","commands"},new boolean[]{false,false}).alias("","elif test-command; then").create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EqualityExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("==","equals operation").create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EqualityNumber").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-eq","equals numeric operation").create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EqualityStrings").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("==","equals string operation").create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.EqualityStrings2").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("=","equals string operation").create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExecTestConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-x","true if file is executable").create();
case 68:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExistConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-a","true if file exists").create();
case 69:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExpExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("**","exponent operation").create();
case 70:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExternalCommandCall").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").references("declaration").children(new String[]{"refToOptions"},new boolean[]{true}).alias("","external command call").create();
case 71:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExternalCommandDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"optionDeclaration"},new boolean[]{true}).alias("","external commmand declaration").create();
case 72:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExternalOptionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 73:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ExternalOptionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 74:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.FollowingCommandList").super_("jetbrains.mps.bash.structure.AbstractFollowingCommandList").parents("jetbrains.mps.bash.structure.AbstractFollowingCommandList").children(new String[]{"baseCommand"},new boolean[]{false}).abstract_().create();
case 75:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.FollowingPipeline").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"basePipeline"},new boolean[]{false}).abstract_().create();
case 76:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ForCommand").super_("jetbrains.mps.bash.structure.AbstractLoopCommand").parents("jetbrains.mps.bash.structure.AbstractLoopCommand").children(new String[]{"accord","condition","iteration"},new boolean[]{false,false,false}).alias("for","for ((expr1; expr2; expr3))").create();
case 77:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ForeachCommand").super_("jetbrains.mps.bash.structure.AbstractLoopCommand").parents("jetbrains.mps.bash.structure.AbstractLoopCommand").children(new String[]{"variable","wordList"},new boolean[]{false,true}).alias("for","for name [in words]").create();
case 78:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.FreeCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").children(new String[]{"translatedWord"},new boolean[]{true}).alias("words","any command").create();
case 79:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.FunctionCallCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").references("function").children(new String[]{"params"},new boolean[]{false}).alias("","function call").create();
case 80:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.FunctionDeclaration").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"command","redirections"},new boolean[]{false,true}).alias("function","function declaration").create();
case 81:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GeneralizedWord").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"units"},new boolean[]{true}).alias("","word").create();
case 82:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GreaterThanExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias(">","greater than operation").create();
case 83:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GreaterThanNumber").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-gt","greater than numeric operation").create();
case 84:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GreaterThanOrEqual").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-ge","greater than or equals numeric operation").create();
case 85:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias(">=","greater than or equals operation").create();
case 86:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GreaterThanString").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias(">","greater than string operation").create();
case 87:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GroupIdConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-g","true if set-group-id bit of file is set").create();
case 88:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.GroupingCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"commands"},new boolean[]{false}).abstract_().alias("","grouping command").create();
case 89:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.HeadCommandList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"base","following"},new boolean[]{false,false}).create();
case 90:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.HeadPipeline").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"command","following"},new boolean[]{false,false}).create();
case 91:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.HereDocumentRedirection").super_("jetbrains.mps.bash.structure.Redirection").parents("jetbrains.mps.bash.structure.Redirection").properties("striptabs").children(new String[]{"word","heredocument","delimiter"},new boolean[]{false,false,false}).alias("<<","here documents").create();
case 92:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.HereStringRedirection").super_("jetbrains.mps.bash.structure.Redirection").parents("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection").alias("<<<","here strings").create();
case 93:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.HexIntegerLiteral").super_("jetbrains.mps.bash.structure.IntegerLiteral").parents("jetbrains.mps.bash.structure.IntegerLiteral").properties("value").alias("0x","hexademical integer literal").create();
case 94:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IArithmeticHolder").interface_().create();
case 95:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ICommandParameter").interface_().create();
case 96:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IComment").interface_().create();
case 97:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ICompoundCommand").interface_().create();
case 98:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IConcreteWordUnit").interface_().create();
case 99:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IDescribedConcept").interface_().properties("description").create();
case 100:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IGeneralizedWordUnit").interface_().create();
case 101:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IORedirection").super_("jetbrains.mps.bash.structure.Redirection").parents("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection").properties("n").abstract_().create();
case 102:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IPriorityExpression").interface_().create();
case 103:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ISymbolConcept").interface_().properties("symbol").create();
case 104:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IToWordRedirection").interface_().children(new String[]{"word"},new boolean[]{false}).create();
case 105:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IfCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"testCommand","ifTrue","ifFalse","elseIf"},new boolean[]{false,false,false,true}).alias("if","if test-command; then").create();
case 106:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InequalityExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("!=","inequals operation").create();
case 107:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InequalityNumber").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-ne","inequals numeric operation").create();
case 108:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InequalityStrings").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("!=","inequals string operation").create();
case 109:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InputLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 110:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InputLines").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"lines"},new boolean[]{true}).create();
case 111:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.InputRedirection").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").alias("<","redirecting input").create();
case 112:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.IntegerLiteral").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").abstract_().create();
case 113:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 114:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LastReadConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-N","true if file has been modified since it was last read").create();
case 115:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("<<","left bitwise shift operation").create();
case 116:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("<<=","").create();
case 117:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LessThanExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("<","less than operation").create();
case 118:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LessThanNumber").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-lt","less than numeric operation").create();
case 119:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LessThanOrEqualExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("<=","less than or equals operation").create();
case 120:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LessThanOrEqualNumber").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("-le","less than or equals numeric operation").create();
case 121:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LessThanString").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("<","less than string operation").create();
case 122:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LogicalAndExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("&&","logical and operation").create();
case 123:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LogicalNegationExpression").super_("jetbrains.mps.bash.structure.UnaryArithmeticExpression").parents("jetbrains.mps.bash.structure.UnaryArithmeticExpression").alias("!","logical negation").create();
case 124:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.LogicalOrExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("||","logical or operation").create();
case 125:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.MinusAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("-=","").create();
case 126:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ModAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("%=","").create();
case 127:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ModExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("%","mod operation").create();
case 128:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.MulExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("*","multiplication").create();
case 129:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.MusAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("*=","").create();
case 130:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.NewerThan").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("nt","newer than file operation").create();
case 131:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-n","true if the length of string is non-zero").create();
case 132:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.NotCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").children(new String[]{"command"},new boolean[]{false}).alias("!","").create();
case 133:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OlderThan").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("ot","older than file operation").create();
case 134:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.Option").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.bash.structure.IDescribedConcept").alias("","option").create();
case 135:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("option").alias("","option").create();
case 136:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptionSet").super_("jetbrains.mps.bash.structure.ExternalOptionDeclaration").parents("jetbrains.mps.bash.structure.ExternalOptionDeclaration").children(new String[]{"options"},new boolean[]{true}).alias("opts","options").create();
case 137:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptionSetReference").super_("jetbrains.mps.bash.structure.ExternalOptionReference").parents("jetbrains.mps.bash.structure.ExternalOptionReference").children(new String[]{"refToOptions"},new boolean[]{true}).alias("-","").create();
case 138:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptionWithParam").super_("jetbrains.mps.bash.structure.ExternalOptionDeclaration").parents("jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept").alias("owp","option with parameter").create();
case 139:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptionWithParamReference").super_("jetbrains.mps.bash.structure.ExternalOptionReference").parents("jetbrains.mps.bash.structure.ExternalOptionReference").references("optionWithParam").children(new String[]{"word"},new boolean[]{false}).alias("","option with parameter").create();
case 140:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OptnameStringConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-o","true if shell option optname is enabled").create();
case 141:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OrAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("|=","").create();
case 142:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OrCombiningConditionalExpression").super_("jetbrains.mps.bash.structure.CombiningConditionalExpression").parents("jetbrains.mps.bash.structure.CombiningConditionalExpression").alias("-o","or conditional operation").create();
case 143:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OrOperator").super_("jetbrains.mps.bash.structure.FollowingCommandList").parents("jetbrains.mps.bash.structure.FollowingCommandList").alias("||","or operator").create();
case 144:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OtherExistConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-e","true if file exists").create();
case 145:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-L","true if file is a symbolic link").create();
case 146:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OutputErrorRedirection").super_("jetbrains.mps.bash.structure.Redirection").parents("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection").alias("&>","redirecting standard output and standard error").create();
case 147:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.OutputRedirection").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").properties("noclobber").alias(">","redirecting output").create();
case 148:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PipeConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-p","true if file is a named pipe").create();
case 149:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PipelineOperatorConnection").super_("jetbrains.mps.bash.structure.FollowingPipeline").parents("jetbrains.mps.bash.structure.FollowingPipeline").alias("|","").create();
case 150:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection").super_("jetbrains.mps.bash.structure.FollowingPipeline").parents("jetbrains.mps.bash.structure.FollowingPipeline").alias("|&","").create();
case 151:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PlusAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("+=","").create();
case 152:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PostDecExpression").super_("jetbrains.mps.bash.structure.PostVariableExpression").parents("jetbrains.mps.bash.structure.PostVariableExpression").alias("--","decrement operation").create();
case 153:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PostIncExpression").super_("jetbrains.mps.bash.structure.PostVariableExpression").parents("jetbrains.mps.bash.structure.PostVariableExpression").alias("++","increment operation").create();
case 154:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PostVariableExpression").super_("jetbrains.mps.bash.structure.WordExpression").parents("jetbrains.mps.bash.structure.WordExpression").abstract_().create();
case 155:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PreDecExpression").super_("jetbrains.mps.bash.structure.PreVariableExpression").parents("jetbrains.mps.bash.structure.PreVariableExpression").alias("--","pre decrement operation").create();
case 156:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PreIncExpression").super_("jetbrains.mps.bash.structure.PreVariableExpression").parents("jetbrains.mps.bash.structure.PreVariableExpression").alias("++","pre increment operation").create();
case 157:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.PreVariableExpression").super_("jetbrains.mps.bash.structure.WordExpression").parents("jetbrains.mps.bash.structure.WordExpression").abstract_().create();
case 158:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.QuotedWord").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit").children(new String[]{"word"},new boolean[]{false}).abstract_().create();
case 159:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.QuotesCommandSubstitution").super_("jetbrains.mps.bash.structure.BaseCommandSubstitution").parents("jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit").alias("`","").create();
case 160:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ReadTestConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-r","true if file is readable").create();
case 161:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ReadingWritingRedirection").super_("jetbrains.mps.bash.structure.IORedirection").parents("jetbrains.mps.bash.structure.IORedirection").alias("<>","opening file descriptors for reading and writing").create();
case 162:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.RedirectedCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand").children(new String[]{"command","redirection"},new boolean[]{false,true}).alias("redirect","command with redirection").create();
case 163:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.Redirection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 164:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.RegularFileConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-f","true if file is a regular file").create();
case 165:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.RightBitwiseShiftExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias(">>","right bitwise shift operation").create();
case 166:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.RightShiftAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias(">>=","").create();
case 167:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SameReference").super_("jetbrains.mps.bash.structure.BinaryConditionalExpression").parents("jetbrains.mps.bash.structure.BinaryConditionalExpression").alias("ef","true if files refer to the same device and inode numbers.").create();
case 168:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SelectCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand").children(new String[]{"variable","words","commands"},new boolean[]{false,false,false}).alias("select","select command").create();
case 169:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SemicolonEt").super_("jetbrains.mps.bash.structure.CaseTerminator").parents("jetbrains.mps.bash.structure.CaseTerminator").alias(";&","").create();
case 170:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SemicolonOperator").super_("jetbrains.mps.bash.structure.FollowingCommandList").parents("jetbrains.mps.bash.structure.FollowingCommandList").alias(";","semicolon operator").create();
case 171:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SemicolonTerminator").super_("jetbrains.mps.bash.structure.CommandTerminator").parents("jetbrains.mps.bash.structure.CommandTerminator").alias(";","").create();
case 172:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ShellScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"usedVars","commands"},new boolean[]{true,false}).create();
case 173:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SimpleCommand").super_("jetbrains.mps.bash.structure.AbstractCommand").parents("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"paramList"},new boolean[]{false}).alias("command","some command").create();
case 174:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SimpleWord").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit").properties("word").alias("text","string").create();
case 175:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SingleQuote").super_("jetbrains.mps.bash.structure.QuotedWord").parents("jetbrains.mps.bash.structure.QuotedWord").alias("'","").create();
case 176:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SizeConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-s","true if file has a size greater than zero").create();
case 177:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SocketConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-S","true if file is a socket").create();
case 178:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.StickyBitConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-k","true if \"sticky\" bit of file is set").create();
case 179:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.StringConditionalExpression").super_("jetbrains.mps.bash.structure.ConditionalExpression").parents("jetbrains.mps.bash.structure.ConditionalExpression").children(new String[]{"string"},new boolean[]{false}).alias("string","").create();
case 180:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SubExpression").super_("jetbrains.mps.bash.structure.BinaryArithmeticExpression").parents("jetbrains.mps.bash.structure.BinaryArithmeticExpression").alias("-","substraction").create();
case 181:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.SymlinkConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-h","true if file is a symbolic link").create();
case 182:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.TerminalConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-t","true if file descriptor fd is open and refers to a terminal").create();
case 183:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.TildeExpansion").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit").alias("~","tilde").create();
case 184:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UnaryArithmeticExpression").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").children(new String[]{"expression"},new boolean[]{false}).abstract_().create();
case 185:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UnaryConditionalExpression").super_("jetbrains.mps.bash.structure.ConditionalExpression").parents("jetbrains.mps.bash.structure.ConditionalExpression").children(new String[]{"word"},new boolean[]{false}).abstract_().create();
case 186:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UnaryMinusExpression").super_("jetbrains.mps.bash.structure.UnaryArithmeticExpression").parents("jetbrains.mps.bash.structure.UnaryArithmeticExpression").alias("","minus").create();
case 187:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UnaryPlusExpression").super_("jetbrains.mps.bash.structure.UnaryArithmeticExpression").parents("jetbrains.mps.bash.structure.UnaryArithmeticExpression").alias("","plus").create();
case 188:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UntilLoopCommand").super_("jetbrains.mps.bash.structure.AbstractLoopCommand").parents("jetbrains.mps.bash.structure.AbstractLoopCommand").children(new String[]{"testCommand"},new boolean[]{false}).alias("until","until test-command; do").create();
case 189:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.UserIdConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-u","true if set-user-id bit of file is set").create();
case 190:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.VariableAddAssingment").super_("jetbrains.mps.bash.structure.BaseVariableAssingment").parents("jetbrains.mps.bash.structure.BaseVariableAssingment").alias("add","'+=' assignment operator").create();
case 191:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.VariableAssingment").super_("jetbrains.mps.bash.structure.BaseVariableAssingment").parents("jetbrains.mps.bash.structure.BaseVariableAssingment").alias("def","assingment operator").create();
case 192:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.VariableNameDeclaration").super_("jetbrains.mps.bash.structure.LValue").parents("jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.INamedConcept").alias("VAR","variable name").create();
case 193:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.VariableReference").super_("jetbrains.mps.bash.structure.LValue").parents("jetbrains.mps.bash.structure.LValue","jetbrains.mps.bash.structure.IGeneralizedWordUnit").references("variable").alias("","variable reference").create();
case 194:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.WhileLoopCommand").super_("jetbrains.mps.bash.structure.AbstractLoopCommand").parents("jetbrains.mps.bash.structure.AbstractLoopCommand").children(new String[]{"testCommand"},new boolean[]{false}).alias("while","while test-command; do").create();
case 195:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.WordExpression").super_("jetbrains.mps.bash.structure.ArithmeticExpression").parents("jetbrains.mps.bash.structure.ArithmeticExpression").children(new String[]{"word"},new boolean[]{false}).alias("w","word").create();
case 196:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.WordList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"words"},new boolean[]{true}).alias("","list of words").create();
case 197:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.WriteTestConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-w","true if file is writable").create();
case 198:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.XorAssingmentExpression").super_("jetbrains.mps.bash.structure.BaseAssingmentExpression").parents("jetbrains.mps.bash.structure.BaseAssingmentExpression").alias("^=","").create();
case 199:
return new ConceptDescriptorBuilder("jetbrains.mps.bash.structure.ZeroStringConditionalExpression").super_("jetbrains.mps.bash.structure.UnaryConditionalExpression").parents("jetbrains.mps.bash.structure.UnaryConditionalExpression").alias("-z","true if the length of string is zero").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
