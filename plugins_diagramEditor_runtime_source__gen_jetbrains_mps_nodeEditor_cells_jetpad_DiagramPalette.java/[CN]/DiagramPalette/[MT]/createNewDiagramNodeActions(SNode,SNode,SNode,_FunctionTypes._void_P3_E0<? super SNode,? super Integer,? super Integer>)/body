{
  return new SubstituteInfoPartExt(){
    public List<SubstituteAction> createActions(    CellContext cellContext,    EditorContext editorContext){
      List<SubstituteAction> result=new ArrayList<SubstituteAction>();
      for (      SubstituteAction action : ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(container,null,childNodeConcept,new DefaultChildNodeSetter(containingLink),editorContext.getOperationContext()))) {
        result.add(new DiagramPalette.DiagramSubstituteActionWraper(action,DiagramPalette.ActionType.BLOCK){
          @Override public boolean canSubstitute(          String string){
            if (!(super.canSubstitute(string))) {
              return false;
            }
            return isActionEnabled(this) && !(myDiagramCell.hasConnectionDragFeedback());
          }
          @Override public SNode substitute(          @Nullable EditorContext context,          String string){
            SNode result=super.substitute(context,string);
            setNodePositionCallback.invoke(result,myDiagramCell.getPatternEditorX(),myDiagramCell.getPatternEditorY());
            return result;
          }
        }
);
      }
      return result;
    }
  }
;
}
