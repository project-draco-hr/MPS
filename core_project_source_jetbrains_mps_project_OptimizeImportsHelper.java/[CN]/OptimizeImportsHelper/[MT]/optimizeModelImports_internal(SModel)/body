{
  Result result=collectModelDependencies(modelDescriptor);
  Set<SModelReference> unusedModels=new HashSet<SModelReference>();
  for (  SModelReference model : SModelOperations.getImportedModelUIDs(modelDescriptor)) {
    if (result.myUsedModels.contains(model))     continue;
    SModel md=model.resolve(MPSModuleRepository.getInstance());
    if (md == null)     continue;
    if (result.myUsedModels.contains(md.getReference()))     continue;
    unusedModels.add(model);
  }
  Set<SModuleReference> unusedLanguages=new HashSet<SModuleReference>();
  for (  SModuleReference languageRef : ((jetbrains.mps.smodel.SModelInternal)modelDescriptor).importedLanguages()) {
    SModuleReference ref=getUnusedLanguageRef(result,languageRef);
    if (ref != null)     unusedLanguages.add(ref);
  }
  Set<SModuleReference> unusedDevkits=new HashSet<SModuleReference>();
  for (  SModuleReference devkitRef : ((jetbrains.mps.smodel.SModelInternal)modelDescriptor).importedDevkits()) {
    DevKit dk=((DevKit)devkitRef.resolve(MPSModuleRepository.getInstance()));
    if (dk == null)     return null;
    if (ModelsAutoImportsManager.getAutoImportedDevKits(modelDescriptor.getModule(),modelDescriptor).contains(dk)) {
      continue;
    }
    SModuleReference ref=getUnusedDevkitRef(result,devkitRef);
    if (ref != null)     unusedDevkits.add(devkitRef);
  }
  result.myReport=removeFromImports(modelDescriptor,unusedModels,unusedLanguages,unusedDevkits);
  return result;
}
