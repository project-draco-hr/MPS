{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("whenConcreteVar",new BaseReferenceConstraintsDescriptor("whenConcreteVar",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> whenConcreteStatements=SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement",false);
          List<SNode> declarations=new ArrayList<SNode>();
          for (          SNode whenConcreteStatement : whenConcreteStatements) {
            SNode variableDeclaration=SLinkOperations.getTarget(whenConcreteStatement,"argumentRepresentator",true);
            if (variableDeclaration != null) {
              ListSequence.<SNode>fromList(declarations).addElement(variableDeclaration);
            }
          }
          return declarations;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_acirdv_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
