{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x66302c3c8df72c49L,0x66302c3c8df72d45L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x66302c3c8df72c49L,0x66302c3c8df72d45L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1butsu_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ModelPlusImportedScope(_context.getModel(),true,"jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer");
        }
      }
;
    }
  }
);
  return references;
}
