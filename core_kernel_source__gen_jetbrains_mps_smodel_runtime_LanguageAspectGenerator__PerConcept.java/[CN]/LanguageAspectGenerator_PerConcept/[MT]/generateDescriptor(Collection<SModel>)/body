{
  List<SNode> methods=new ArrayList<SNode>();
  for (  final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>(){
    public boolean accept(    LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it){
      return !(it.isAttached());
    }
  }
)) {
    SNode resultDecl=_quotation_createNode_mxlioj_a0a0b0f(acd.getInterfaceClass());
    List<SNode> addStmts=new ArrayList<SNode>();
    for (    SNode aspect : CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel,SNode>(){
      public Iterable<SNode> translate(      SModel it){
        return SModelOperations.nodes(it,acd.getApplicableConcept());
      }
    }
)) {
      ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a1a5(resultDecl,acd.getGeneratedClassFqName(aspect,aspect.getModel())));
    }
    ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a5a1a5(resultDecl,addStmts,resultDecl,acd.getInterfaceClass(),acd.getGeneratedMethodName()));
  }
  for (  final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>(){
    public boolean accept(    LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it){
      return it.isAttached();
    }
  }
)) {
    SNode conceptParamDecl=_quotation_createNode_mxlioj_a0a0d0f();
    final MultiMap<SNode,SNode> byConcept=new MultiMap();
    CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel,SNode>(){
      public Iterable<SNode> translate(      SModel it){
        return SModelOperations.nodes(it,acd.getApplicableConcept());
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        byConcept.putValue(acd.getAttachedConcept(it),it);
      }
    }
);
    List<SNode> ifStmts=new ArrayList<SNode>();
    for (    SNode c : SetSequence.fromSet(byConcept.keySet())) {
      SNode resultDecl=_quotation_createNode_mxlioj_a0a0g0d0f(acd.getInterfaceClass());
      List<SNode> addStmts=new ArrayList<SNode>();
      for (      SNode aspectItem : CollectionSequence.fromCollection(byConcept.get(c))) {
        ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a6a3a5(resultDecl,acd.getGeneratedClassFqName(aspectItem,SNodeOperations.getModel(aspectItem))));
      }
      ListSequence.fromList(ifStmts).addElement(_quotation_createNode_mxlioj_a0a5a6a3a5(resultDecl,addStmts,resultDecl,conceptParamDecl,c));
    }
    ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a8a3a5(ifStmts,acd.getInterfaceClass(),conceptParamDecl,acd.getGeneratedMethodName()));
  }
  SNode result=_quotation_createNode_mxlioj_a0g0f(getInterfaceClass(),getGeneratedClassShortName(),methods);
  return result;
}
