{
  final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor only=CollectionSequence.fromCollection(getDescriptors()).first();
  SNode resltDecl=_quotation_createNode_mxlioj_a0e0f(only.getInterfaceClass());
  List<SNode> addStmts=new ArrayList<SNode>();
  for (  SNode aspect : CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel it){
      return SModelOperations.nodes(it,only.getApplicableConcept());
    }
  }
)) {
    ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a7a5(resltDecl,only.getGeneratedClassFqName(aspect,aspect.getModel())));
  }
  SNode result=_quotation_createNode_mxlioj_a0j0f(resltDecl,addStmts,resltDecl,only.getInterfaceClass(),"getAll" + NameUtil.pluralize(only.getApplicableConcept().getName()),getInterfaceClass(),getGeneratedClassShortName());
  return result;
}
