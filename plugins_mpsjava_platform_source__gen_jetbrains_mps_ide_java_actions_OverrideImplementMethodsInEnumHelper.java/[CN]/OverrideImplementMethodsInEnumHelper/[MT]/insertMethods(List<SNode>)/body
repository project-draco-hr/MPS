{
  int index=(myContextMember != null && SNodeOperations.isInstanceOf(myContextMember,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SNodeOperations.getParent(myContextMember) == enumConstant ? ListSequence.fromList(SLinkOperations.getChildren(enumConstant,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245299891l,492581319488141108l,"method"))).indexOf(SNodeOperations.cast(myContextMember,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) + 1 : -1);
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode m : baseMethods) {
    SNode baseMethod=SNodeOperations.cast(m,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SNode method=SNodeOperations.cast(BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),baseMethod,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","call_getMethodToImplement_69709522611978987",new Object[]{myClassConcept}),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SPropertyOperations.set(method,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,1178608670077l,"isAbstract"),"" + (false));
    SLinkOperations.setTarget(method,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123135l,"body"),SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myClassConcept),"jetbrains.mps.baseLanguage.structure.StatementList",null));
    if (index != -1) {
      ListSequence.fromList(SLinkOperations.getChildren(enumConstant,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245299891l,492581319488141108l,"method"))).insertElement(index++,method);
    }
 else {
      ListSequence.fromList(SLinkOperations.getChildren(enumConstant,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245299891l,492581319488141108l,"method"))).addElement(method);
    }
    update(method,baseMethod);
    ListSequence.fromList(result).addElement(method);
  }
  return result;
}
