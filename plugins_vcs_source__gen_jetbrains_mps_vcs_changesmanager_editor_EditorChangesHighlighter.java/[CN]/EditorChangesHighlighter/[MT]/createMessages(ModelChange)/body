{
  final Wrappers._T<List<ChangeEditorMessage>> messages=new Wrappers._T<List<ChangeEditorMessage>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModel model;
      SNode editedNode=myEditorComponent.getEditedNode();
      if (editedNode == null || editedNode.isDisposed()) {
        return;
      }
      model=editedNode.getModel();
      if (model == null || model.isDisposed()) {
        return;
      }
      messages.value=ChangeEditorMessage.createMessages(model,change,EditorChangesHighlighter.this,null);
    }
  }
);
synchronized (myChangesMessages) {
    if (MapSequence.fromMap(myChangesMessages).containsKey(change)) {
      return ListSequence.fromList(new ArrayList<ChangeEditorMessage>());
    }
    MapSequence.fromMap(myChangesMessages).put(change,messages.value);
  }
  return messages.value;
}
