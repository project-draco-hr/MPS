{
  try {
    String className=SNodeOperations.getModel(thisNode).getModelName() + "." + ClassLikeDescriptor_Behavior.call_getGeneratedClassName_3384419124890285894(SNodeOperations.getNodeAncestor(thisNode,MetaAdapterFactory.getConcept(new UUID(-4047124328593011742l,-4867279722304451481l),3751132065236767072l,"jetbrains.mps.lang.classLike.structure.ClassLikeDescriptor"),false,false));
    SModule classModule=thisNode.getModel().getModule();
    Method[] methods=ClassLoaderManager.getInstance().getClass(classModule,className).getMethods();
    for (    Method m : methods) {
      if (m.getName().equals(DependentTypeDeclaration_Behavior.call_getGeneratedMethodName_2546325654728395319(thisNode))) {
        m.setAccessible(true);
        return ((SNode)m.invoke(null,node));
      }
    }
    return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type")));
  }
 catch (  Exception e) {
    e.printStackTrace();
    return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431790189l,"jetbrains.mps.baseLanguage.structure.Type")));
  }
}
