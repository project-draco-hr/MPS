{
  boolean result=TestMain.testOnProjectCopy(sourceZip,tempDir,TEST_PROJECT,new ProjectRunnable(){
    @Override public boolean execute(    final Project project){
      final boolean[] res=new boolean[1];
      res[0]=true;
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          SModel testModel=TestMain.getModel(project,TEST_MODEL);
          SModel targetModel=TestMain.getModel(project,TARGET_MODEL);
          assertNotNull("test model is null",testModel);
          assertNotNull("target model is null",targetModel);
          ReferencesFinder finder=new ReferencesFinder();
          DependencyViewerScope testScope=new DependencyViewerScope();
          testScope.add(testModel);
          DependencyViewerScope targetScope=new DependencyViewerScope();
          targetScope.add(targetModel);
          List<SNode> nodes=finder.getNodes(testScope,new EmptyProgressMonitor());
          if (nodes.size() != 50) {
            System.out.println("Nodes size " + nodes.size());
            res[0]=false;
          }
          SearchResults targetSearchResults=finder.getTargetSearchResults(nodes,testScope,new EmptyProgressMonitor());
          int size=targetSearchResults.getSearchResults().size();
          if (size != 11) {
            System.out.println("Targets size " + size);
            res[0]=false;
          }
          SearchResults refSearchResults=finder.getUsagesSearchResults(nodes,testScope,targetScope,new EmptyProgressMonitor());
          size=refSearchResults.getSearchResults().size();
          if (size != 4) {
            System.out.println("Results size " + size);
            res[0]=false;
          }
        }
      }
);
      return res[0];
    }
  }
);
  assertTrue(result);
}
