{
  Deque<Iterator<EditorCell>> iteratorsStack=new LinkedList<Iterator<EditorCell>>();
  if (cell instanceof EditorCell_Collection) {
    iteratorsStack.addLast(((EditorCell_Collection)cell).iterator());
  }
 else {
    iteratorsStack.addLast(Collections.singletonList(cell).iterator());
  }
  List<Region> regions=new ArrayList<Region>();
  while (!iteratorsStack.isEmpty()) {
    Iterator<EditorCell> currentIterator=iteratorsStack.peekLast();
    if (!currentIterator.hasNext()) {
      iteratorsStack.removeLast();
      continue;
    }
    EditorCell nextCell=currentIterator.next();
    if (nextCell.getSNode() != cell.getSNode()) {
      continue;
    }
    if (nextCell instanceof EditorCell_Collection) {
      iteratorsStack.addLast(((EditorCell_Collection)nextCell).iterator());
    }
 else {
      Region nextRegion=new Region(nextCell);
      if (!regions.isEmpty() && regions.get(regions.size() - 1).canMerge(nextRegion)) {
        nextRegion=regions.get(regions.size() - 1).merge(nextRegion);
        regions.set(regions.size() - 1,nextRegion);
      }
 else {
        regions.add(nextRegion);
      }
    }
  }
  return highlightContainingCollection(regions) ? Collections.singletonList(new Region(cell)) : regions;
}
