{
  final Map<Integer,Set<Integer>> graph=MapSequence.fromMap(new HashMap<Integer,Set<Integer>>());
  lCompare:   for (final Wrappers._int i=new Wrappers._int(0); i.value < ListSequence.fromList(list).count(); i.value++) {
    Set<Integer> before=SetSequence.fromSet(new HashSet<Integer>());
    List<Integer> after=ListSequence.fromList(new ArrayList<Integer>());
    for (    int j : MapSequence.fromMap(graph).keySet()) {
      StructureModification.Relation rel=StructureModification.compare(ListSequence.fromList(list).getElement(j),ListSequence.fromList(list).getElement(i.value));
      if (rel == StructureModification.Relation.EQUAL) {
        continue lCompare;
      }
      if (rel == StructureModification.Relation.BEFORE) {
        SetSequence.fromSet(before).addElement(j);
      }
      if (rel == StructureModification.Relation.AFTER) {
        ListSequence.fromList(after).addElement(j);
      }
    }
    MapSequence.fromMap(graph).put(i.value,before);
    ListSequence.fromList(after).visitAll(new IVisitor<Integer>(){
      public void visit(      Integer j){
        SetSequence.fromSet(MapSequence.fromMap(graph).get(j)).addElement(i.value);
      }
    }
);
  }
  List<StructureModification> result=ListSequence.fromList(new ArrayList<StructureModification>());
  lfind:   while (MapSequence.fromMap(graph).isNotEmpty()) {
    for (    final int k : MapSequence.fromMap(graph).keySet()) {
      if (SetSequence.fromSet(MapSequence.fromMap(graph).get(k)).isEmpty()) {
        ListSequence.fromList(result).addElement(ListSequence.fromList(list).getElement(k));
        MapSequence.fromMap(graph).removeKey(k);
        Sequence.fromIterable(MapSequence.fromMap(graph).values()).visitAll(new IVisitor<Set<Integer>>(){
          public void visit(          Set<Integer> it){
            SetSequence.fromSet(it).removeElement(k);
          }
        }
);
        continue lfind;
      }
    }
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("Loop found in applicable refactorings for " + myModel + "");
    }
    break;
  }
  return result;
}
