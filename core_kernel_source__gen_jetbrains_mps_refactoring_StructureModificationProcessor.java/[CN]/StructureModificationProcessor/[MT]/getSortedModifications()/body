{
  List<StructureModification> allData=ListSequence.fromList(new ArrayList<StructureModification>());
  List<StructureModification.Relation[]> res=ListSequence.fromList(new ArrayList<StructureModification.Relation[]>());
  for (  SModel.ImportElement importElement : ListSequence.fromList(SModelOperations.getAllImportElements(myModel))) {
    DefaultSModelDescriptor usedModel=as_etzqsh_a0a0a2a4(SModelRepository.getInstance().getModelDescriptor(importElement.getModelReference()),DefaultSModelDescriptor.class);
    if (usedModel == null) {
      continue;
    }
    lCompare:     for (    StructureModification data : ListSequence.fromList(usedModel.getStructureModificationLog().getHistory())) {
      if (MapSequence.fromMap(data.getDependencies()).get(usedModel.getSModelReference()) < importElement.getUsedVersion()) {
        continue;
      }
      StructureModification.Relation[] comp=new StructureModification.Relation[ListSequence.fromList(allData).count() + 1];
      for (int i=0; i < ListSequence.fromList(allData).count(); ++i) {
        comp[i]=StructureModification.copmare(data,ListSequence.fromList(allData).getElement(i));
        if (comp[i] == StructureModification.Relation.EQUAL) {
          continue lCompare;
        }
      }
      ListSequence.fromList(allData).addElement(data);
      ListSequence.fromList(res).addElement(comp);
    }
  }
  List<StructureModification> result=ListSequence.fromList(new ArrayList<StructureModification>());
  label:   while (ListSequence.fromList(allData).isNotEmpty()) {
    lFind:     for (int i=0; i < ListSequence.fromList(allData).count(); ++i) {
      for (int j=0; j < ListSequence.fromList(allData).count(); ++j) {
        if (i < j && ListSequence.fromList(res).getElement(j)[i] == StructureModification.Relation.BEFORE || i > j && ListSequence.fromList(res).getElement(i)[j] == StructureModification.Relation.AFTER) {
          continue lFind;
        }
      }
      ListSequence.fromList(result).addElement(ListSequence.fromList(allData).removeElementAt(i));
      ListSequence.fromList(res).removeElementAt(i);
      continue label;
    }
    if (log.isErrorEnabled()) {
      log.error("Loop found in applicable refactorings for " + myModel + "");
    }
    break;
  }
  return result;
}
