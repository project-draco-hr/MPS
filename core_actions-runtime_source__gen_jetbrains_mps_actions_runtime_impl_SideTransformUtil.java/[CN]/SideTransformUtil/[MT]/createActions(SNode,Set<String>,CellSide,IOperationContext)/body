{
  Set<SNode> conceptsToRemove=SetSequence.<SNode>fromSet(new HashSet<SNode>());
  List<SNode> removeByConditions=new ArrayList<SNode>();
  List<INodeSubstituteAction> result=ListSequence.<INodeSubstituteAction>fromList(new LinkedList<INodeSubstituteAction>());
  for (  SNode actionBuilder : Sequence.<SNode>fromIterable(getApplicableActionsBuilders(node,stringTags,cellSide,context))) {
    SetSequence.fromSet(conceptsToRemove).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getDescendants(actionBuilder,"jetbrains.mps.lang.actions.structure.RemovePart",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return (SLinkOperations.getTarget(it,"conceptToRemove",false) != null);
      }
    }
).<SNode>select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"conceptToRemove",false);
      }
    }
));
    ListSequence.<SNode>fromList(removeByConditions).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getDescendants(actionBuilder,"jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart",false,new String[]{})));
    ListSequence.<INodeSubstituteAction>fromList(result).addSequence(ListSequence.<INodeSubstituteAction>fromList(invokeActionBuilder(actionBuilder,node,context)));
  }
  for (  SNode removeByCondition : ListSequence.<SNode>fromList(removeByConditions)) {
    invokeRemoveByCondition(removeByCondition,ListSequence.<INodeSubstituteAction>fromList(result).iterator(),node,context);
  }
  for (Iterator<INodeSubstituteAction> it=ListSequence.<INodeSubstituteAction>fromList(result).iterator(); it.hasNext(); ) {
    INodeSubstituteAction action=it.next();
    SNode concept=SNodeOperations.cast(action.getOutputConcept(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
    if (SetSequence.<SNode>fromSet(conceptsToRemove).contains(concept)) {
      it.remove();
    }
 else     if (!(ModelConstraintsManager.canBeAncestor(SNodeOperations.getParent(node),concept,context))) {
      it.remove();
    }
  }
  return result;
}
