{
  Map<String,String> builderParams=getBuilderParams();
  Constructor<IncProjectBuilder> declaredConstructor;
  IncProjectBuilder builder=null;
  try {
    if (IncProjectBuilder.class.getDeclaredConstructors()[0].getParameterTypes().length == 5) {
      declaredConstructor=IncProjectBuilder.class.getDeclaredConstructor(ProjectDescriptor.class,BuilderRegistry.class,Map.class,CanceledStatus.class,ConstantAffectionResolver.class);
      builder=declaredConstructor.newInstance(descriptor,BuilderRegistry.getInstance(),builderParams,CanceledStatus.NULL,null);
    }
 else {
      declaredConstructor=IncProjectBuilder.class.getDeclaredConstructor(ProjectDescriptor.class,BuilderRegistry.class,Map.class,CanceledStatus.class,ConstantAffectionResolver.class,boolean.class);
      builder=declaredConstructor.newInstance(descriptor,BuilderRegistry.getInstance(),builderParams,CanceledStatus.NULL,null,false);
    }
  }
 catch (  NoSuchMethodException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InstantiationException e) {
  }
catch (  InvocationTargetException e) {
  }
  BuildResult result=new BuildResult();
  builder.addMessageHandler(result);
  try {
    builder.build(scopeBuilder.build(),false);
  }
 catch (  RebuildRequestedException e) {
    throw new RuntimeException(e);
  }
  return result;
}
