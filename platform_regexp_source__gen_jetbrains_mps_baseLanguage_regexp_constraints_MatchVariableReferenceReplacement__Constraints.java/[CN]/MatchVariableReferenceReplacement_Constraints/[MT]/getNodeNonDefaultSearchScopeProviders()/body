{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("match",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      return (_context.getSmartReference() ? "\\" + SPropertyOperations.getString(_context.getParameterNode(),"name") : SPropertyOperations.getString(_context.getParameterNode(),"name"));
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> matches=new ArrayList<SNode>();
      SNode top=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation",true,false);
      if ((top != null)) {
        Regexp_Behavior.call_getString_1222432436326(SLinkOperations.getTarget(top,"search",true),matches);
      }
      return matches;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c89590515(jetbrains.mps.baseLanguage.regexp.constraints)","3796137614137558194");
    }
  }
);
  return result;
}
