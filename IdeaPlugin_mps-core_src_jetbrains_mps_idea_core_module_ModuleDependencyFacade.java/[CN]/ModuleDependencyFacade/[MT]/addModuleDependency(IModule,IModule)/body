{
  if (!(dependentModule instanceof SolutionIdea && moduleToDependOn instanceof SolutionIdea)) {
    return;
  }
  final Module ideaDependentModule=((SolutionIdea)dependentModule).getIdeaModule();
  final Module ideaModuleToDependOn=((SolutionIdea)moduleToDependOn).getIdeaModule();
  myProject=ideaDependentModule.getProject();
  final Runnable addDependency=new Runnable(){
    public void run(){
      ModifiableRootModel model=ModuleRootManager.getInstance(ideaDependentModule).getModifiableModel();
      model.addModuleOrderEntry(ideaModuleToDependOn);
      model.commit();
      ModelAccess.instance().runWriteInEDT(new Runnable(){
        public void run(){
          ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
        }
      }
);
    }
  }
;
  Runnable addDependencyInWriteAction=new Runnable(){
    @Override public void run(){
      if (!myProject.isOpen())       return;
      ApplicationManager.getApplication().runWriteAction(addDependency);
    }
  }
;
  final Pair<Module,Module> circularModules=ModuleCompilerUtil.addingDependencyFormsCircularity(ideaDependentModule,ideaModuleToDependOn);
  if (circularModules == null) {
    addDependencyInWriteAction.run();
  }
 else {
    showCircularWarningAndContinue(circularModules,ideaModuleToDependOn.getName(),addDependency);
  }
}
