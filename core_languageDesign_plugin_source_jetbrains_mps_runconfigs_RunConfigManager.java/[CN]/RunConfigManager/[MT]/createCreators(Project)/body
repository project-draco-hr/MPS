{
  final MPSProject mpsProject=myProject.getComponent(MPSProject.class);
  final List<ConfigurationType> conTypes=new ArrayList<ConfigurationType>();
  Set<Language> languages=new HashSet<Language>();
  for (  Solution s : mpsProject.getProjectSolutions()) {
    languages.addAll(s.getScope().getVisibleLanguages());
  }
  for (  Language l : mpsProject.getProjectLanguages()) {
    languages.add(l);
  }
  languages.addAll(MPSModuleRepository.getInstance().getAllLanguages());
  for (  Language language : languages) {
    if (LanguageAspect.PLUGIN.get(language) != null) {
      SModel model=LanguageAspect.PLUGIN.get(language).getSModel();
      addForeignConfigurations(language);
      for (      RunConfigCreator creator : model.getRootsAdapters(RunConfigCreator.class)) {
        String creatorClassName=LanguageAspect.PLUGIN.get(language).getLongName() + "." + creator.getName();
        BaseConfigCreator configCreator=createCreator(language,creatorClassName);
        if (configCreator == null)         continue;
        register(configCreator);
      }
      for (      UniversalRunConfigCreator creator : model.getRootsAdapters(UniversalRunConfigCreator.class)) {
        String creatorClassName=LanguageAspect.PLUGIN.get(language).getLongName() + "." + creator.getName();
        BaseConfigCreator configCreator=createCreator(language,creatorClassName);
        if (configCreator == null)         continue;
        register(configCreator);
      }
    }
  }
  return conTypes;
}
