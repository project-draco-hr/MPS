{
  if (myProject.isDisposed())   return;
  if (myLoaded)   return;
  if (IdeMain.getTestMode() != TestMode.NO_TEST)   return;
  final ExtensionPoint<ConfigurationType> epConfigType=Extensions.getArea(null).getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
synchronized (myConfigsLock) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        mySortedConfigs=createConfigs(myProject);
        for (        ConfigurationType ct : mySortedConfigs) {
          epConfigType.registerExtension(ct);
        }
      }
    }
);
  }
  final ConfigurationType[] configurationTypes=getConfigurationTypes();
  getRunManager().initializeConfigurationTypes(configurationTypes);
  Element newState=new Element("root");
  try {
    getRunManager().writeExternal(newState);
    getRunManager().readExternal(newState);
  }
 catch (  WriteExternalException e1) {
    LOG.error(e1);
  }
catch (  InvalidDataException e11) {
    LOG.error(e11);
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      createCreators(myProject);
    }
  }
);
  if (myState != null) {
    try {
      getRunManager().readExternal(myState);
    }
 catch (    InvalidDataException e) {
      LOG.error(e);
    }
  }
  if (mySharedState != null) {
    try {
      getSharedConfigurationManager().readExternal(mySharedState);
    }
 catch (    InvalidDataException e) {
      LOG.error(e);
    }
  }
  myLoaded=true;
}
