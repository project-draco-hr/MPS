{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          String nameInContext=Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(_context.getParameterNode(),_context.getEnclosingNode());
          if (_context.getSmartReference()) {
            return nameInContext + ".class";
          }
          return nameInContext;
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.CLASSIFFIER,operationContext.getScope());
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_w155fn_a0a3a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
