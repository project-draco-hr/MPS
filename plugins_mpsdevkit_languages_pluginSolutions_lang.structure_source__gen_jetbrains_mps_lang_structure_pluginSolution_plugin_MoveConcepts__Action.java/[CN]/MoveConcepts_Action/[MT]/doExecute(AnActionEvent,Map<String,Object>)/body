{
  try {
    if (!(MoveConcepts_Action.this.init(_params))) {
      return;
    }
    final SModelReference targetModelRef;
    List<SModelReference> myModels;
    myModels=ListSequence.fromList(((List<SModel>)(SModelRepository.getInstance().getModelDescriptors()))).select(new ISelector<SModel,SModelReference>(){
      public SModelReference select(      SModel it){
        return it.getReference();
      }
    }
).where(new IWhereFilter<SModelReference>(){
      public boolean accept(      SModelReference it){
        return Language.getModelAspect(SModelRepository.getInstance().getModelDescriptor(it)) == LanguageAspect.STRUCTURE;
      }
    }
).toListSequence();
    targetModelRef=SModelReferenceDialog.getSelectedModel(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),myModels);
    if (targetModelRef == null) {
      return;
    }
    final SRepository repository=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository();
    repository.getModelAccess().executeCommand(new Runnable(){
      public void run(){
        for (        SNode node : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("target")))) {
          if (!(SNodeUtil.isAccessible(node,repository))) {
            return;
          }
        }
        SModel targetModel=targetModelRef.resolve(repository);
        if (targetModel == null) {
          return;
        }
        MoveConceptUtil.moveConcepts(((List<SNode>)MapSequence.fromMap(_params).get("target")),targetModel);
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "MoveConcepts",t);
    }
  }
}
