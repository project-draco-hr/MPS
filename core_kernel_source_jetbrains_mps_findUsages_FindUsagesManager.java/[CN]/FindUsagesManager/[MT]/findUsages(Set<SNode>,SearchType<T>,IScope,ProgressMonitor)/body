{
  Set<SModelDescriptor> changed=new THashSet<SModelDescriptor>();
  Set<SModelDescriptor> notChanged=new THashSet<SModelDescriptor>();
  for (  SModelDescriptor model : scope.getModelDescriptors()) {
    if (myCacheHandler == null) {
      changed.add(model);
    }
 else     if ((model instanceof EditableSModelDescriptor) && ((EditableSModelDescriptor)model).isChanged()) {
      changed.add(model);
    }
 else {
      notChanged.add(model);
    }
  }
  Set<T> result=new HashSet<T>();
  if (monitor == null)   monitor=new EmptyProgressMonitor();
  monitor.start("Finding usages...",changed.size() + notChanged.size());
  try {
    monitor.step("Finding in cache");
    Computable<Boolean> progressNotifier=new MyProgressNotifier(monitor);
    if (myCacheHandler != null) {
      result.addAll(type.findInUnchanged(nodes,notChanged,myCacheHandler,progressNotifier));
    }
    monitor.advance(nodes.size());
    monitor.step("Finding in changed models");
    result.addAll(type.findInChanged(nodes,changed,progressNotifier));
  }
  finally {
    monitor.done();
  }
  return result;
}
