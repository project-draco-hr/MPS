{
  double time=System.currentTimeMillis();
  curTime=time;
  if (SHOW_TIME > 0) {
    System.out.println("creating layout for graph with " + ListSequence.fromList(graph.getNodes()).count() + " nodes and "+ ListSequence.fromList(graph.getEdges()).count()+ " edges...");
  }
  Graph copy=new Graph();
  Map<Node,Node> nodeMap=MapSequence.fromMap(new HashMap<Node,Node>());
  Map<Edge,Edge> edgeMap=MapSequence.fromMap(new HashMap<Edge,Edge>());
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    MapSequence.fromMap(nodeMap).put(node,copy.addNode());
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    MapSequence.fromMap(edgeMap).put(edge,MapSequence.fromMap(nodeMap).get(edge.getSource()).addEdgeTo(MapSequence.fromMap(nodeMap).get(edge.getTarget())));
  }
  BiconnectAugmentation.smartMakeBiconnected(copy);
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(copy);
  Map<Edge,List<Edge>> history=MapSequence.fromMap(new HashMap<Edge,List<Edge>>());
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    Edge copyEdge=MapSequence.fromMap(edgeMap).get(edge);
    MapSequence.fromMap(history).put(edge,embeddedGraph.findFullHistory(copyEdge));
    if (copyEdge.getSource() != MapSequence.fromMap(nodeMap).get(edge.getSource())) {
      MapSequence.fromMap(history).put(edge,ListSequence.fromList(MapSequence.fromMap(history).get(edge)).reversedList());
    }
  }
  Map<Node,List<Node>> newNodes=MapSequence.fromMap(new HashMap<Node,List<Node>>());
  Map<Edge,Edge> replacedEdges=MapSequence.fromMap(new HashMap<Edge,Edge>());
  Set<Edge> newEdges=new EmbeddedGraphModifier(embeddedGraph).reduceNodesDegree(newNodes,replacedEdges);
  for (  Edge edge : SetSequence.fromSet(MapSequence.fromMap(replacedEdges).keySet())) {
    Edge replacement=MapSequence.fromMap(replacedEdges).get(edge);
    if (MapSequence.fromMap(replacedEdges).containsKey(replacement)) {
      MapSequence.fromMap(replacedEdges).put(edge,MapSequence.fromMap(replacedEdges).get(replacement));
    }
  }
  for (  List<Edge> list : Sequence.fromIterable(MapSequence.fromMap(history).values())) {
    Edge first=ListSequence.fromList(list).first();
    if (MapSequence.fromMap(replacedEdges).containsKey(first)) {
      ListSequence.fromList(list).setElement(0,MapSequence.fromMap(replacedEdges).get(first));
    }
    if (ListSequence.fromList(list).count() > 1) {
      Edge last=ListSequence.fromList(list).last();
      if (MapSequence.fromMap(replacedEdges).containsKey(last)) {
        ListSequence.fromList(list).setElement(ListSequence.fromList(list).count() - 1,MapSequence.fromMap(replacedEdges).get(last));
      }
    }
  }
  if (SHOW_TIME > 0) {
    long newTime=System.currentTimeMillis();
    System.out.println("finding the embedding: " + ((newTime - curTime) / MILLIS));
    System.out.println("graph now has " + ListSequence.fromList(copy.getNodes()).count() + " nodes and "+ ListSequence.fromList(copy.getEdges()).count()+ " edges");
    curTime=newTime;
  }
  Map<Node,List<Node>> nodesToSplit=MapSequence.fromMap(new LinkedHashMap<Node,List<Node>>(16,(float)0.75,false));
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Node copyNode=MapSequence.fromMap(nodeMap).get(node);
    if (!(MapSequence.fromMap(newNodes).containsKey(copyNode))) {
      MapSequence.fromMap(nodesToSplit).put(copyNode,ListSequence.fromList(new ArrayList<Node>()));
    }
 else {
      MapSequence.fromMap(nodesToSplit).put(copyNode,MapSequence.fromMap(newNodes).get(copyNode));
    }
  }
  GraphPointLayout copyLayout=getFlowLayout(embeddedGraph,newEdges,nodesToSplit);
  GraphPointLayout graphLayout=new GraphPointLayout(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    Node copyNode=MapSequence.fromMap(nodeMap).get(node);
    if (MapSequence.fromMap(newNodes).containsKey(copyNode)) {
      int minX=Integer.MAX_VALUE;
      int minY=Integer.MAX_VALUE;
      int maxX=Integer.MIN_VALUE;
      int maxY=Integer.MIN_VALUE;
      for (      Node newNode : ListSequence.fromList(MapSequence.fromMap(newNodes).get(copyNode))) {
        Point point=copyLayout.getLayoutFor(newNode);
        minX=Math.min(point.x,minX);
        minY=Math.min(point.y,minY);
        maxX=Math.max(point.x,maxX);
        maxY=Math.max(point.y,maxY);
      }
      graphLayout.setLayoutFor(node,new Point((minX + maxX) / 2,(minY + maxY) / 2));
    }
 else {
      graphLayout.setLayoutFor(node,copyLayout.getLayoutFor(MapSequence.fromMap(nodeMap).get(node)));
    }
  }
  for (  Edge graphEdge : ListSequence.fromList(graph.getEdges())) {
    List<Point> edgeLayout=ListSequence.fromList(new ArrayList<Point>());
    List<Edge> edgeHistory=MapSequence.fromMap(history).get(graphEdge);
    Node copySource=MapSequence.fromMap(nodeMap).get(graphEdge.getSource());
    Node cur;
    Node firstSource=ListSequence.fromList(edgeHistory).first().getSource();
    if (copySource == firstSource || ListSequence.fromList(MapSequence.fromMap(newNodes).get(copySource)).contains(firstSource)) {
      cur=firstSource;
    }
 else {
      cur=ListSequence.fromList(edgeHistory).first().getTarget();
    }
    for (    Edge edge : ListSequence.fromList(edgeHistory)) {
      if (cur == edge.getSource()) {
        ListSequence.fromList(edgeLayout).addSequence(ListSequence.fromList(copyLayout.getLayoutFor(edge)));
      }
 else {
        ListSequence.fromList(edgeLayout).addSequence(ListSequence.fromList(copyLayout.getLayoutFor(edge)).reversedList());
      }
      cur=edge.getOpposite(cur);
    }
    ListSequence.fromList(edgeLayout).insertElement(0,graphLayout.getLayoutFor(graphEdge.getSource()));
    ListSequence.fromList(edgeLayout).addElement(graphLayout.getLayoutFor(graphEdge.getTarget()));
    graphLayout.setLayoutFor(graphEdge,edgeLayout);
  }
  if (SHOW_TIME > 0) {
    long newTime=System.currentTimeMillis();
    System.out.println("all: " + ((newTime - time) / MILLIS));
  }
  return copyLayout;
}
