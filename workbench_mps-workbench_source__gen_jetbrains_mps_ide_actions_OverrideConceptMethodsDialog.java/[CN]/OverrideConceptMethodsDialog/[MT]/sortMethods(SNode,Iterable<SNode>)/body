{
  final Map<SNode,Integer> containerIndex=MapSequence.fromMap(new HashMap<SNode,Integer>());
  int i=1;
  for (  SNode c : BehaviorReflection.invokeNonVirtual((Class<List<SNode>>)((Class)(Object.class)),baseClass,"jetbrains.mps.lang.behavior.structure.ConceptBehavior","call_getAllSuperBehaviors_1818770337282950280",new Object[]{})) {
    MapSequence.fromMap(containerIndex).put(c,i++);
  }
  return Sequence.fromIterable(methods).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      SNode parentA=SNodeOperations.getParent(a);
      SNode parentB=SNodeOperations.getParent(b);
      if (parentA == parentB) {
        String aRole=SNodeOperations.getContainingLinkRole(a);
        String bRole=SNodeOperations.getContainingLinkRole(b);
        if (neq_6zqknj_a0d0c0a0a0a0d0l(aRole,bRole)) {
          return aRole.compareTo(bRole);
        }
        return new Integer(IterableUtil.asList(parentA.getChildren(aRole)).indexOf(a)).compareTo(IterableUtil.asList(parentB.getChildren(bRole)).indexOf(b));
      }
      int iA=(parentA != null && MapSequence.fromMap(containerIndex).containsKey(parentA) ? MapSequence.fromMap(containerIndex).get(parentA) : 0);
      int iB=(parentB != null && MapSequence.fromMap(containerIndex).containsKey(parentB) ? MapSequence.fromMap(containerIndex).get(parentB) : 0);
      return new Integer(iA).compareTo(iB);
    }
  }
,true);
}
