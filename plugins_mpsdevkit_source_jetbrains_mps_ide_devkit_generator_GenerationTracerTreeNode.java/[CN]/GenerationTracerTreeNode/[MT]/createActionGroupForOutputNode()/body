{
  final GenerationTracer tracer=(GenerationTracer)myProject.getComponent(IGenerationTracer.class);
  DefaultActionGroup group=new DefaultActionGroup();
  final TracerNode tracerNode=this.getTracerNode();
  final boolean enable=tracerNode != null && tracerNode.getNodePointer() != null && tracerNode.getNodePointer().resolve(MPSModuleRepository.getInstance()) != null;
  GenerationTracerTreeNode rootNode=(GenerationTracerTreeNode)getRoot();
  TracerNode rootTracerNode=rootNode.getTracerNode();
  if (rootTracerNode != null && (rootTracerNode.getKind() == Kind.INPUT || rootTracerNode.getKind() == Kind.RULE)) {
    group.add(new BaseAction("Show Traceback"){
      protected void doExecute(      AnActionEvent e,      Map<String,Object> _params){
        tracer.showTracebackData(tracerNode.getNodePointer().resolve(MPSModuleRepository.getInstance()));
      }
      protected void doUpdate(      AnActionEvent e,      Map<String,Object> _params){
        boolean enabled=enable && tracer.hasTracebackData(tracerNode.getNodePointer().getModelReference());
        setEnabledState(e.getPresentation(),enabled);
      }
    }
);
  }
  group.add(new BaseAction("Show Next Step Trace"){
    protected void doExecute(    AnActionEvent e,    Map<String,Object> _params){
      tracer.showTraceInputData(tracerNode.getNodePointer().resolve(MPSModuleRepository.getInstance()));
    }
    protected void doUpdate(    AnActionEvent e,    Map<String,Object> _params){
      boolean enabled=enable && tracer.hasTraceInputData(tracerNode.getNodePointer().getModelReference());
      setEnabledState(e.getPresentation(),enabled);
    }
  }
);
  return group;
}
