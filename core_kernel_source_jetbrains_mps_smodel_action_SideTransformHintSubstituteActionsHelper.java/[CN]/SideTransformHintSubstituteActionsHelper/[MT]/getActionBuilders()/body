{
  List<SideTransformHintSubstituteActionsBuilder> actionsBuilders=new LinkedList<SideTransformHintSubstituteActionsBuilder>();
  IScope scope=myContext.getScope();
  final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
  final SideTransformTag tag=SideTransformTag.parseValue(myTransformTag);
  List<Language> languages=mySourceNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    SModelDescriptor actionsModel=language.getActionsModelDescriptor();
    if (actionsModel != null && actionsModel.getSModel() != null) {
      for (      SideTransformHintSubstituteActionsBuilder builder : actionsModel.getSModel().allAdapters(SideTransformHintSubstituteActionsBuilder.class)) {
        if (isApplicable(builder,tag,sourceConcept)) {
          actionsBuilders.add(builder);
        }
      }
    }
  }
  return actionsBuilders;
}
