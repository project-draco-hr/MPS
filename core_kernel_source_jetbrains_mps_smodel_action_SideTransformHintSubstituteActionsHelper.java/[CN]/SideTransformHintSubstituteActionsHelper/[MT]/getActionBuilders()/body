{
  List<SideTransformHintSubstituteActionsBuilder> actionsBuilders=new LinkedList<SideTransformHintSubstituteActionsBuilder>();
  IScope scope=myContext.getScope();
  final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
  final SideTransformTag tag=SideTransformTag.parseValue(myTransformTag);
  List<Language> languages=mySourceNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    SModelDescriptor actionsModel=language.getActionsModelDescriptor();
    if (actionsModel != null && actionsModel.getSModel() != null) {
      List<SideTransformHintSubstituteActionsBuilder> list=actionsModel.getSModel().allAdapters(SideTransformHintSubstituteActionsBuilder.class,new Condition<SideTransformHintSubstituteActionsBuilder>(){
        public boolean met(        SideTransformHintSubstituteActionsBuilder actionsBuilder){
          if (actionsBuilder.getTransformTag() != tag) {
            return false;
          }
          if (actionsBuilder.getSide() == Side.left && mySide != CellSide.LEFT) {
            return false;
          }
          if (actionsBuilder.getSide() == Side.right && mySide != CellSide.RIGHT) {
            return false;
          }
          return SModelUtil_new.isAssignableConcept(sourceConcept,actionsBuilder.getApplicableConcept()) && satisfiesPrecondition(actionsBuilder);
        }
      }
);
      actionsBuilders.addAll(list);
    }
  }
  return actionsBuilders;
}
