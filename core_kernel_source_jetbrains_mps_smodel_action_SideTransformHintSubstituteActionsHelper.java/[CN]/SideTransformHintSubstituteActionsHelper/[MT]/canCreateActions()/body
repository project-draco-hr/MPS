{
  TypeChecker.getInstance().enableTypesComputingForCompletion();
  try {
    IScope scope=myContext.getScope();
    final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
    List<Language> languages=mySourceNode.getModel().getLanguages(scope);
    for (    Language language : languages) {
      SModelDescriptor actionsModel=language.getActionsModelDescriptor();
      if (actionsModel != null && actionsModel.getSModel() != null) {
        for (        SideTransformHintSubstituteActionsBuilder builder : actionsModel.getSModel().allAdapters(SideTransformHintSubstituteActionsBuilder.class)) {
          for (          SideTransformTag tag : myTransformTags) {
            if (isApplicable(builder,tag,sourceConcept)) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  finally {
    TypeChecker.getInstance().clearTypesComputedForCompletion();
  }
}
