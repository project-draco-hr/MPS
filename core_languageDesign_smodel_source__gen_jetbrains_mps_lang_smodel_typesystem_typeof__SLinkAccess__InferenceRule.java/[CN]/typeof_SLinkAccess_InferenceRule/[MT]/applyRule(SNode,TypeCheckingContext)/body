{
  final SNode linkDecl=SLinkOperations.getTarget(op,"link",false);
  if (linkDecl == null) {
    return;
  }
{
    SNode _nodeToCheck_1029348928467=op;
    BaseIntentionProvider intentionProvider=null;
    typeCheckingContext.createEquation(typeCheckingContext.typeOf(op,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1206103331026",true),new _Quotations.QuotationClass_13().createNode(SLinkOperations.getTarget(linkDecl,"target",false),SPropertyOperations.hasValue(linkDecl,"metaClass","aggregation","reference") + "",typeCheckingContext),_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1206103335045",intentionProvider);
  }
  RulesUtil.checkAppliedCorrectly_generic(typeCheckingContext,op);
  final SNode Concept_typevar_1186062441601=typeCheckingContext.createNewRuntimeTypesVariable();
  RulesUtil.equate_inputNodeConcept(typeCheckingContext,op,typeCheckingContext.getEquationManager().getRepresentator(Concept_typevar_1186062441601));
{
    final SNode C=typeCheckingContext.getEquationManager().getRepresentator(Concept_typevar_1186062441601);
    typeCheckingContext.whenConcrete(C,new Runnable(){
      public void run(){
        SNode inputNodeConcept=typeCheckingContext.getEquationManager().getRepresentator(C);
        List<SNode> declaredLinks=AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(inputNodeConcept);
        if (!(ListSequence.fromList(declaredLinks).contains(linkDecl))) {
          BaseIntentionProvider intentionProvider=null;
          typeCheckingContext.reportTypeError(op,"access to link '" + SPropertyOperations.getString(linkDecl,"role") + "' is not expected here","r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1186062499482",intentionProvider);
        }
      }
    }
,"r:00000000-0000-4000-0000-011c895902fe(jetbrains.mps.lang.smodel.typesystem)","1186062479067");
  }
}
