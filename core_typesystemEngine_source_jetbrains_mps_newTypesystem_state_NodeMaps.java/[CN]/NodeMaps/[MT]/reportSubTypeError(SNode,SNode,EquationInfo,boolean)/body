{
  IErrorReporter errorReporter;
  String errorString=equationInfo.getErrorString();
  String ruleModel=equationInfo.getRuleModel();
  String ruleId=equationInfo.getRuleId();
  SNode nodeWithError=equationInfo.getNodeWithError();
  if (errorString == null) {
    String strongString=isWeak ? "" : " strong";
    errorReporter=new EquationErrorReporterNew(nodeWithError,myState,"type ",subType," is not a" + strongString + " subtype of ",superType,"",ruleModel,ruleId);
  }
 else {
    errorReporter=new SimpleErrorReporter(nodeWithError,errorString,ruleModel,ruleId);
  }
  for (  QuickFixProvider quickFixProvider : equationInfo.getIntentionProviders()) {
    errorReporter.setIntentionProvider(quickFixProvider);
  }
  errorReporter.setAdditionalRulesIds(equationInfo.getAdditionalRulesIds());
  myState.getTypeCheckingContext().reportMessage(nodeWithError,errorReporter);
}
