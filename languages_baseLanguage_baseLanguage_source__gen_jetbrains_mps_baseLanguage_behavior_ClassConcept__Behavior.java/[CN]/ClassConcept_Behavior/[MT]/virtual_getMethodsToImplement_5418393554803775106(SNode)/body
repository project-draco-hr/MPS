{
  List<SNode> methods=new ArrayList<SNode>();
  ClassifierAndSuperClassifiersScope scope=new ClassifierAndSuperClassifiersScope(thisNode,IClassifiersSearchScope.INSTANCE_METHOD);
  for (  SNode method : ((List<SNode>)scope.getNodes())) {
    boolean isOverridden=false;
    List<SNode> overridenMethods=scope.getOverriddenMethods(method);
    for (    SNode overridingMethod : overridenMethods) {
      isOverridden=isOverridden || (SNodeOperations.isInstanceOf(overridingMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(SNodeOperations.cast(overridingMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")),MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,4628067390765956802l,"abstract")));
    }
    if (isOverridden) {
      continue;
    }
    SNode container=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    if (container == thisNode || container == null) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(container,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(method,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,1178608670077l,"isAbstract"))) {
      ListSequence.fromList(methods).addElement(method);
    }
  }
  return methods;
}
