{
  List<SNode> methods=new ArrayList<SNode>();
  for (  SNode method : Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>)(((Class)(Object.class))),thisNode,"virtual_getThisType_7405920559687254782",new Object[]{}))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    }
  }
)) {
    SNode cls=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
    if (cls == thisNode) {
      continue;
    }
    if (!(SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      continue;
    }
    if (SPropertyOperations.getBoolean(method,"isFinal")) {
      continue;
    }
    if (SPropertyOperations.getBoolean(method,"isAbstract")) {
      continue;
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"visibility",true),"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      continue;
    }
    ListSequence.fromList(methods).addElement(method);
  }
  return methods;
}
