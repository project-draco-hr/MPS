{
  SNode superClass=SLinkOperations.getTarget(ClassConcept_Behavior.call_getSuperclass_1240936569950(thisNode),"classifier",false);
  Iterable<SNode> implementedInterfaces=ListSequence.fromList(SLinkOperations.getTargets(thisNode,"implementedInterface",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"classifier",false) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"classifier",false);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (it != null);
    }
  }
);
  if (!(SNodeOperations.isInstanceOf(superClass,"jetbrains.mps.baseLanguage.structure.ClassConcept") || (superClass == null)) || Sequence.fromIterable(implementedInterfaces).any(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Interface"));
    }
  }
)) {
    LOG.warning("Illegal ClassConcept: " + thisNode);
    return new EmptyScope();
  }
  Scope result=MemberScopes.forClass(SNodeOperations.castConcept(kind,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),thisNode,SNodeOperations.cast(superClass,"jetbrains.mps.baseLanguage.structure.ClassConcept"),Sequence.fromIterable(implementedInterfaces).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.Interface");
    }
  }
).toGenericArray(SNode.class));
  if (result != null) {
    return result;
  }
  if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.ThisConstructorKind")) {
    return new NamedElementsScope(SLinkOperations.getTargets(thisNode,"constructor",true));
  }
  if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.SuperConstructorKind") || SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.SuperMethodKind")) {
    if (Classifier_Behavior.call_isSame_4855996797771684010(thisNode,SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object"))) {
      return new EmptyScope();
    }
    if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.SuperConstructorKind")) {
      return MemberScopes.visibleClassifierMembers(superClass,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisConstructorKind"),thisNode);
    }
    if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.SuperMethodKind")) {
      return MemberScopes.nonAbstractMethods(MemberScopes.visibleClassifierMembers(superClass,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),thisNode));
    }
  }
  return Classifier_Behavior.callSuper_getMembers_2201875424515824604(thisNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",kind);
}
