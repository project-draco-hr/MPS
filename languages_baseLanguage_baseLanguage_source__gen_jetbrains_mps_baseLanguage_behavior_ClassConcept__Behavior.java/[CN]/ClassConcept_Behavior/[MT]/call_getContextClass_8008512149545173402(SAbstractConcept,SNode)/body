{
  SNode contextNode=expr;
  SNode parent=SNodeOperations.getAncestor(expr,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
    List<SNode> args=new ArrayList<SNode>();
    ListSequence.fromList(args).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"parameter",true)));
    ListSequence.fromList(args).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"actualArgument",true)));
    for (    SNode param : args) {
      if (ListSequence.fromList(SNodeOperations.getDescendants(param,null,true,new String[]{})).contains(expr)) {
        contextNode=parent;
        break;
      }
    }
  }
  return SNodeOperations.getAncestor(contextNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
}
