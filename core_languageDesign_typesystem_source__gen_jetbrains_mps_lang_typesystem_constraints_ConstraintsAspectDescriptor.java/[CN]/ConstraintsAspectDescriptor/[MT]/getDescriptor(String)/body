{
  if ("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ConceptReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.PatternCondition".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.PatternCondition"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.InferenceRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new InferenceRule_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractRule"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ApplicableNodeReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypeOfExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.TypeOfExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateEquationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateEquationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypeVarReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TypeVarReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.PatternVariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PatternVariableReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.LinkPatternVariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new LinkPatternVariableReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.PropertyPatternVariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PropertyPatternVariableReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.SubtypingRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new SubtypingRule_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.AssertStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AssertStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypeCheckerAccessExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.TypeCheckerAccessExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.Node_TypeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.Node_TypeOperation"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoopVariable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoopVariable"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CoerceStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CoerceStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ImmediateSupertypesExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ImmediateSupertypesExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.IsStrongSubtypeExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.IsStrongSubtypeExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MatchStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MatchStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MatchStatementItem".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MatchStatementItem"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CoerceExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CoerceExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CoerceStrongExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CoerceStrongExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.JoinType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.JoinType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatementStrong".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatementStrong"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.RuntimeErrorType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.RuntimeErrorType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypeClause".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.TypeClause"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.NormalTypeClause".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.NormalTypeClause"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MeetType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MeetType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ComparisonRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ComparisonRule_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.Dependency".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.Dependency"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.FindSourceBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.FindSourceBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.FindSourceBlockParameter".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.FindSourceBlockParameter"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.NonTypesystemRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new NonTypesystemRule_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.InequationReplacementRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new InequationReplacementRule_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.ErrorInfoExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ErrorInfoExpression"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.RuntimeListVariable".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.RuntimeListVariable"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ListVarDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ListVarDeclaration"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableDeclaration".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableDeclaration"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new WhenConcreteVariableReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.WarningStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.WarningStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypesystemIntention".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.TypesystemIntention"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypesystemIntentionArgument".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TypesystemIntentionArgument_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ChildTypeRestriction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ChildTypeRestriction_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.ChildTypeRestrictionReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ChildTypeRestrictionReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new TypesystemQuickFix_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixExecuteBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.QuickFixExecuteBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_node".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_node"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixArgument".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.QuickFixArgument"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixArgumentReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new QuickFixArgumentReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixDescriptionBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.QuickFixDescriptionBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.AddDependencyStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AddDependencyStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.Processed".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.Processed"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.InfoStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.InfoStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MessageTarget".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MessageTarget"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.PropertyMessageTarget".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new PropertyMessageTarget_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.ReferenceMessageTarget".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ReferenceMessageTarget_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.MessageStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new MessageStatement_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.PropertyNameTarget".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.PropertyNameTarget"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ReferenceRoleTarget".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ReferenceRoleTarget"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.VariableConverterItem".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_var".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_var"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.VariableConvertersContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.VariableConvertersContainer"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Role".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Role"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_isAggregation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_isAggregation"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_ContextNode".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_ContextNode"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.RuntimeHoleType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.RuntimeHoleType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.LeftOperandType_parameter".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.LeftOperandType_parameter"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.Operation_parameter".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.Operation_parameter"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.RightOperandType_parameter".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.RightOperandType_parameter"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.GetOperationType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.GetOperationType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.MeetContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.MeetContainer"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.JoinContainer".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.JoinContainer"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptTypeClause".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ConceptTypeClause_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptClauseLinkInfo".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new ConceptClauseLinkInfo_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OperationContextExpression".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new OperationContextExpression_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.IsReplacementRuleApplicable_ConceptFunction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.IsReplacementRuleApplicable_ConceptFunction"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.InequationReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new InequationReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.InequationsGroupsRegistry".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.InequationsGroupsRegistry"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.InequationsGroup".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.InequationsGroup"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.InequationsGroupReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.InequationsGroupReference"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.DefaultGroupReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.DefaultGroupReference"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.Node_InferTypeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.Node_InferTypeOperation"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.NodeInfo".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.NodeInfo"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.DependentComputationItem".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.DependentComputationItem"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_DependentComputationNode".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_DependentComputationNode"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_FindMasterBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_FindMasterBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_ApplicableBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_ApplicableBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_BlockingBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.DependentComputationItem_BlockingBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_BlockingComputationNode".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_BlockingComputationNode"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OriginalNodeId".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OriginalNodeId"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OverloadedOpIsApplicableFunction".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OverloadedOpIsApplicableFunction"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixSetSelectionBlock".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.QuickFixSetSelectionBlock"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_EditorContext".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_EditorContext"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixField".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.QuickFixField"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.QuickFixFieldReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new QuickFixFieldReference_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.SelectionType".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.SelectionType"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Selection".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Selection"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CaretPositionOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new CaretPositionOperation_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.WasSelectedNodeOperation".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new WasSelectedNodeOperation_Constraints());
  }
  if ("jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement"));
  }
  if ("jetbrains.mps.lang.typesystem.structure.OrStatement".equals(fqName)) {
    return new DataHolderConstraintsDescriptor(new EmptyConstraintsDataHolder("jetbrains.mps.lang.typesystem.structure.OrStatement"));
  }
  return null;
}
