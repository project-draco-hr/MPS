{
  if (SHOW_INFO > 0) {
    System.out.println("initial graph: " + embeddedGraph);
  }
  Graph graph=embeddedGraph.getGraph();
  List<Edge> initialEdges=ListSequence.fromList(new ArrayList<Edge>());
  ListSequence.fromList(initialEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  List<Node> initialNodes=ListSequence.fromList(new ArrayList<Node>());
  ListSequence.fromList(initialNodes).addSequence(SetSequence.fromSet(MapSequence.fromMap(nodeSizes).keySet()));
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  QuasiRepresentationModifier quasiModifier=new QuasiRepresentationModifier(embeddedGraph,bends,angles);
  quasiModifier.reduceToOrthogonalRepresentation();
  List<QuasiRepresentationModifier.Modification> modifications=quasiModifier.getModifications();
  if (SHOW_INFO > 0) {
    System.out.println("modifications: ");
    for (    QuasiRepresentationModifier.Modification modification : ListSequence.fromList(modifications)) {
      System.out.println(modification);
    }
  }
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  if (SHOW_INFO > 0) {
    System.out.println("modified graph: " + embeddedGraph);
  }
  Map<Node,Map<Direction2D,Integer>> nodeDirectionSizes=this.getNodeDirectionSizes(initialNodes,nodeSizes);
  Map<Edge,Integer> edgesShifts=getEdgesShifts(modifications,directions,nodeSizes);
  NodeBoxesMaker boxesMaker=new NodeBoxesMaker(embeddedGraph,directions);
  boxesMaker.makeBoxes(nodeSizes);
  Set<Face> boxFaces=boxesMaker.getBoxFaces();
  Map<Edge,Integer> edgeLengths=boxesMaker.getBoxEdgeLengths();
  for (  Node node : ListSequence.fromList(initialNodes)) {
    for (    Edge edge : ListSequence.fromList(node.getEdges())) {
      Dart dart=embeddedGraph.getSourceDart(edge,node);
      MapSequence.fromMap(edgeLengths).put(edge,MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(node)).get(MapSequence.fromMap(directions).get(dart)));
    }
  }
  ConstraintsGraph constraintsGraph=new ConstraintsGraph(embeddedGraph,directions);
  constraintsGraph.constructGraph(boxFaces);
  Map<Node,Point> coordinates=constraintsGraph.getCoordinates(edgeLengths,null);
  GraphLayout graphLayout=new GraphLayout(graph);
  for (  Node node : ListSequence.fromList(initialNodes)) {
    Point center=MapSequence.fromMap(coordinates).get(node);
    Map<Direction2D,Integer> sizes=MapSequence.fromMap(nodeDirectionSizes).get(node);
    Dimension nodeSize=MapSequence.fromMap(nodeSizes).get(node);
    Rectangle rect=new Rectangle(center.x - MapSequence.fromMap(sizes).get(Direction2D.LEFT),center.y - MapSequence.fromMap(sizes).get(Direction2D.DOWN),nodeSize.width,nodeSize.height);
    graphLayout.setLayoutFor(node,rect);
  }
  for (  Edge edge : ListSequence.fromList(initialEdges)) {
    Node source=edge.getSource();
    Node target=edge.getTarget();
    List<Edge> history=embeddedGraph.findFullHistory(edge);
    List<Point> edgeLayout=ListSequence.fromList(new LinkedList<Point>());
    Node cur=source;
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(cur)));
    for (    Edge historyEdge : ListSequence.fromList(history)) {
      Node next=historyEdge.getOpposite(cur);
      ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(next)));
      cur=next;
    }
    if (ListSequence.fromList(initialNodes).contains(source)) {
      Direction2D dir=MapSequence.fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.fromList(history).first(),source));
      int size=MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(source)).get(dir);
      Point first=ListSequence.fromList(edgeLayout).removeElementAt(0);
      first.translate(size * dir.dx(),size * dir.dy());
      ListSequence.fromList(edgeLayout).removeElementAt(0);
      ListSequence.fromList(edgeLayout).insertElement(0,first);
    }
    if (ListSequence.fromList(initialNodes).contains(edge.getTarget())) {
      Direction2D dir=MapSequence.fromMap(directions).get(embeddedGraph.getSourceDart(ListSequence.fromList(history).last(),target));
      int size=MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(target)).get(dir);
      Point last=ListSequence.fromList(edgeLayout).removeLastElement();
      last.translate(size * dir.dx(),size * dir.dy());
      ListSequence.fromList(edgeLayout).removeLastElement();
      ListSequence.fromList(edgeLayout).addElement(last);
    }
    graphLayout.setLayoutFor(edge,edgeLayout);
  }
  for (  QuasiRepresentationModifier.Modification modification : ListSequence.fromList(modifications)) {
    splitEdges(graphLayout,modification,edgesShifts);
  }
  return graphLayout;
}
