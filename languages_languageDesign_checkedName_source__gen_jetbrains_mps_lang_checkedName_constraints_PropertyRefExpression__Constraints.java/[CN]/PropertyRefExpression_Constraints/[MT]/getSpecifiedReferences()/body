{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xfe9d76d7580945c9L,0xae28a40915b4d6ffL,0x433c3c31e7218f39L,0x433c3c31e7218f3bL,"propertyDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xfe9d76d7580945c9L,0xae28a40915b4d6ffL,0x433c3c31e7218f39L,0x433c3c31e7218f3bL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getContainmentLink(0xfe9d76d7580945c9L,0xae28a40915b4d6ffL,0x433c3c31e7218f39L,0x433c3c31e7218f3aL,"nodeExpr"))),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType")))) {
            return new ArrayList<SNode>();
          }
          return AbstractConceptDeclaration__BehaviorDescriptor.getPropertyDeclarations_idhEwILLM.invoke(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getReferenceNode(),MetaAdapterFactory.getContainmentLink(0xfe9d76d7580945c9L,0xae28a40915b4d6ffL,0x433c3c31e7218f39L,0x433c3c31e7218f3aL,"nodeExpr"))),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,0x1090e46ca51L,"concept")));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_e11h12_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
