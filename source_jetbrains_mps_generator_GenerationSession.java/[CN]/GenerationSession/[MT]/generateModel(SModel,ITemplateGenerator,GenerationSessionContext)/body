{
  IModule module=generationContext.getModule();
  String modelsLongName=inputModel.getLongName();
  SModel currentInputModel=inputModel;
  List<MappingScript> preMappingScripts=generationContext.getPreMappingScripts();
  for (  MappingScript preMappingScript : preMappingScripts) {
    if (preMappingScript.getScriptKind() == MappingScriptKind.pre_process_input_model) {
      if (preMappingScript.getModifiesModel()) {
        SModel currentInputModel_clone=createTransientModel(modelsLongName,module);
        addMessage(MessageKind.INFORMATION,"clone model '" + currentInputModel.getUID() + "' --> '"+ currentInputModel_clone.getUID()+ "'");
        CloneUtil.cloneModel(currentInputModel,currentInputModel_clone,generator.getScope());
        recycleWasteModel(currentInputModel);
        currentInputModel=currentInputModel_clone;
        break;
      }
    }
  }
  for (  MappingScript preMappingScript : preMappingScripts) {
    if (preMappingScript.getScriptKind() != MappingScriptKind.pre_process_input_model) {
      addMessage(MessageKind.WARNING,"skip script '" + preMappingScript + "' ("+ preMappingScript.getModel().getUID()+ ") - wrong script kind");
      continue;
    }
    addMessage(MessageKind.INFORMATION,"pre-process '" + preMappingScript + "' ("+ preMappingScript.getModel().getUID()+ ")");
    GeneratorUtil.executeMappingScript(preMappingScript,currentInputModel,generator);
  }
  SModel currentOutputModel=createTransientModel(modelsLongName,module);
  generationContext.getGenerationTracer().startTracing(currentOutputModel);
  currentInputModel.setLoading(false);
  boolean somethingHasBeenGenerated=generator.doPrimaryMapping(currentInputModel,currentOutputModel);
  if (!somethingHasBeenGenerated) {
    currentOutputModel.validateLanguagesAndImports();
    recycleWasteModel(currentInputModel);
    return currentOutputModel;
  }
  int secondaryMappingRepeatCount=1;
  while (true) {
    currentOutputModel.validateLanguagesAndImports();
    addMessage(MessageKind.INFORMATION,"generating model '" + currentOutputModel.getUID() + "'");
    generationContext.replaceInputModel(currentOutputModel);
    SModel transientModel=createTransientModel(modelsLongName,module);
    generationContext.getGenerationTracer().startTracing(transientModel);
    recycleWasteModel(currentInputModel);
    currentInputModel=currentOutputModel;
    currentInputModel.setLoading(false);
    if (!generator.doSecondaryMapping(currentInputModel,transientModel)) {
      addMessage(MessageKind.INFORMATION,"remove empty model '" + transientModel.getUID() + "'");
      SModelRepository.getInstance().removeModelDescriptor(transientModel.getModelDescriptor());
      myTransientModelsCount--;
      break;
    }
    if (++secondaryMappingRepeatCount > 10) {
      generator.showErrorMessage(null,"Failed to generate output after 10 repeated mappings");
      throw new GenerationFailedException("Failed to generate output after 10 repeated mappings");
    }
    currentOutputModel=transientModel;
  }
  currentOutputModel.setLoading(true);
  List<MappingScript> postMappingScripts=generationContext.getPostMappingScripts();
  for (  MappingScript postMappingScript : postMappingScripts) {
    if (postMappingScript.getScriptKind() != MappingScriptKind.post_process_output_model) {
      addMessage(MessageKind.WARNING,"skip script '" + postMappingScript + "' ("+ postMappingScript.getModel().getUID()+ ") - wrong script kind");
      continue;
    }
    addMessage(MessageKind.INFORMATION,"post-process '" + postMappingScript + "' ("+ postMappingScript.getModel().getLongName()+ ")");
    GeneratorUtil.executeMappingScript(postMappingScript,currentOutputModel,generator);
  }
  return currentOutputModel;
}
