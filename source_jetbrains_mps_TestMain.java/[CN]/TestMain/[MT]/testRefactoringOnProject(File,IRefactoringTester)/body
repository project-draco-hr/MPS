{
  IdeMain.setTestMode(true);
  TestMain.configureMPS();
  final boolean[] b=new boolean[]{true};
  final File destination=new File(PathManager.getHomePath(),"TEST_REFACTORING");
  if (destination.exists()) {
    FileUtil.delete(destination);
  }
  FileUtil.copyDir(projectDirectory,destination);
  final MPSProject[] projectArray=new MPSProject[]{null};
  try {
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        File projectFile=new File(destination,"testRefactoring" + MPSExtentions.DOT_MPS_PROJECT);
        projectArray[0]=loadProject(projectFile);
      }
    }
);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return false;
  }
  final MPSProject project=projectArray[0];
  final Runnable continuation=new Runnable(){
    public void run(){
      if (project != null) {
        project.dispose();
      }
      FileUtil.delete(destination);
    }
  }
;
  final SModelDescriptor[] sandbox1=new SModelDescriptor[]{null};
  final SModelDescriptor[] sandbox2=new SModelDescriptor[]{null};
  final Language[] testRefactoringLanguage=new Language[]{null};
  final Language[] testRefactoringTargetLanguage=new Language[]{null};
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      try {
        sandbox1[0]=getSandbox1(project);
        sandbox2[0]=getSandbox2(project);
        testRefactoringLanguage[0]=getTestRefactoringLanguage(project);
        testRefactoringTargetLanguage[0]=getTestRefactoringTargetLanguage(project);
{
          LanguageDescriptor testRefactoringDescriptor=testRefactoringLanguage[0].getLanguageDescriptor();
          LanguageDescriptor testRefactoringTargetDescriptor=testRefactoringTargetLanguage[0].getLanguageDescriptor();
          ClassPathEntry cpEntry1=ClassPathEntry.newInstance(testRefactoringDescriptor.getModel());
          ClassPathEntry cpEntry2=ClassPathEntry.newInstance(testRefactoringTargetDescriptor.getModel());
          String classPath=destination.getAbsolutePath() + "/classes";
          cpEntry1.setPath(classPath);
          cpEntry2.setPath(classPath);
          testRefactoringDescriptor.replaceChild(testRefactoringDescriptor.getClassPathEntries().get(0),cpEntry1);
          testRefactoringTargetDescriptor.replaceChild(testRefactoringTargetDescriptor.getClassPathEntries().get(0),cpEntry2);
          testRefactoringLanguage[0].setLanguageDescriptor(testRefactoringDescriptor);
          testRefactoringTargetLanguage[0].setLanguageDescriptor(testRefactoringTargetDescriptor);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        b[0]=false;
        return;
      }
    }
  }
);
  if (!b[0]) {
    return false;
  }
  try {
    return refactoringTester.testRefactoring(project,sandbox1[0],sandbox2[0],testRefactoringLanguage[0],testRefactoringTargetLanguage[0],null);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return false;
  }
 finally {
    ThreadUtils.runInUIThreadAndWait(continuation);
  }
}
