{
  for (SNode sNode=myQueue.poll(); sNode != null; sNode=myQueue.poll()) {
    if (myFullyCheckedNodes.contains(sNode) || !TypeSystemUtil.shouldApplyTypeSystemRules(sNode)) {
      continue;
    }
    Set<SNode> candidatesForFrontier=new LinkedHashSet<SNode>();
    if (forceChildrenCheck) {
      candidatesForFrontier.addAll(IterableUtil.asCollection(sNode.getChildren()));
    }
    for (    SNode candidate : candidatesForFrontier) {
      if (candidate == null || myFullyCheckedNodes.contains(candidate))       continue;
      myQueue.add(candidate);
    }
    if (isNodeAttribute(sNode)) {
      myQueue.add(sNode.getParent());
    }
 else     if (!myPartlyCheckedNodes.contains(sNode)) {
      applyRulesAndTrackAccess(accessTracking,sNode);
      myPartlyCheckedNodes.add(sNode);
    }
    myFullyCheckedNodes.add(sNode);
    if (typeCalculated(targetNode) != null)     return;
  }
}
