{
  this.myModelQuery=modelQuery;
  this.myProject=context.getProject();
  final Wrappers._T<SModelDescriptor> model=new Wrappers._T<SModelDescriptor>();
  final ModelOwner owner=new ModelOwner(){
  }
;
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      model.value=ProjectModels.createDescriptorFor(owner);
      model.value.getSModel().addRoot(SNodeOperations.copyNode(QueryExecutor.this.myModelQuery));
    }
  }
);
  final EditorGenerationType type=new EditorGenerationType();
  this.myClassName=model.value.getLongName() + this.myClassType;
  GeneratorManager manager=context.getComponent(GeneratorManager.class);
  manager.generateModelsWithProgressWindow(Arrays.asList(model.value),context,type,false);
  SModelRepository.getInstance().unRegisterModelDescriptors(owner);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      IModule lang=GlobalScope.getInstance().getLanguage(QueryExecutor.this.myLanguageFqName);
      ClassLoader parentClassLoader=ClassLoaderManager.getInstance().getClassLoaderFor(lang);
      QueryExecutor.this.myLoader=type.getClassLoader(parentClassLoader);
    }
  }
);
}
