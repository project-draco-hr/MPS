{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case LanguageConceptSwitch.AbstractNodeAssert:
    return props_AbstractNodeAssert;
case LanguageConceptSwitch.AbstractNodeErrorCheckOperation:
  return props_AbstractNodeErrorCheckOperation;
case LanguageConceptSwitch.AbstractNodeRuleCheckOperation:
return props_AbstractNodeRuleCheckOperation;
case LanguageConceptSwitch.AbstractNodeWarningCheckOperation:
return props_AbstractNodeWarningCheckOperation;
case LanguageConceptSwitch.ActionReference:
return props_ActionReference;
case LanguageConceptSwitch.AnonymousCellAnnotation:
return props_AnonymousCellAnnotation;
case LanguageConceptSwitch.AssertMatch:
return props_AssertMatch;
case LanguageConceptSwitch.BootstrapActionReference:
return props_BootstrapActionReference;
case LanguageConceptSwitch.CheckDataFlowOperation:
return props_CheckDataFlowOperation;
case LanguageConceptSwitch.CheckNodeDataflow:
return props_CheckNodeDataflow;
case LanguageConceptSwitch.CheckNodeForErrorMessagesOperation:
return props_CheckNodeForErrorMessagesOperation;
case LanguageConceptSwitch.CheckNodeForErrors:
return props_CheckNodeForErrors;
case LanguageConceptSwitch.DragMouseStatement:
return props_DragMouseStatement;
case LanguageConceptSwitch.EditorComponentExpression:
return props_EditorComponentExpression;
case LanguageConceptSwitch.EditorExpression:
return props_EditorExpression;
case LanguageConceptSwitch.EditorOperation:
return props_EditorOperation;
case LanguageConceptSwitch.EditorTestCase:
return props_EditorTestCase;
case LanguageConceptSwitch.ExpressionContainer:
return props_ExpressionContainer;
case LanguageConceptSwitch.IChecksRules:
return props_IChecksRules;
case LanguageConceptSwitch.INodeAnnotation:
return props_INodeAnnotation;
case LanguageConceptSwitch.INodesTestMethod:
return props_INodesTestMethod;
case LanguageConceptSwitch.IReferenceAttachable:
return props_IReferenceAttachable;
case LanguageConceptSwitch.IRuleReference:
return props_IRuleReference;
case LanguageConceptSwitch.InfoStatementReference:
return props_InfoStatementReference;
case LanguageConceptSwitch.InvokeActionStatement:
return props_InvokeActionStatement;
case LanguageConceptSwitch.InvokeIntentionStatement:
return props_InvokeIntentionStatement;
case LanguageConceptSwitch.IsIntentionApplicableExpression:
return props_IsIntentionApplicableExpression;
case LanguageConceptSwitch.LogEvent:
return props_LogEvent;
case LanguageConceptSwitch.MPSActionReference:
return props_MPSActionReference;
case LanguageConceptSwitch.MockAnnotation:
return props_MockAnnotation;
case LanguageConceptSwitch.MockScopeProvider:
return props_MockScopeProvider;
case LanguageConceptSwitch.ModelExpression:
return props_ModelExpression;
case LanguageConceptSwitch.NamedNodeReference:
return props_NamedNodeReference;
case LanguageConceptSwitch.NodeCheckOperation:
return props_NodeCheckOperation;
case LanguageConceptSwitch.NodeConstraintsErrorCheckOperation:
return props_NodeConstraintsErrorCheckOperation;
case LanguageConceptSwitch.NodeConstraintsWarningCheckOperation:
return props_NodeConstraintsWarningCheckOperation;
case LanguageConceptSwitch.NodeErrorCheckOperation:
return props_NodeErrorCheckOperation;
case LanguageConceptSwitch.NodeExpectedTypeCheckOperation:
return props_NodeExpectedTypeCheckOperation;
case LanguageConceptSwitch.NodeInfoCheckOperation:
return props_NodeInfoCheckOperation;
case LanguageConceptSwitch.NodeOperationsContainer:
return props_NodeOperationsContainer;
case LanguageConceptSwitch.NodePropertiesContainer:
return props_NodePropertiesContainer;
case LanguageConceptSwitch.NodeReachable:
return props_NodeReachable;
case LanguageConceptSwitch.NodeRuleCheckOperation:
return props_NodeRuleCheckOperation;
case LanguageConceptSwitch.NodeTypeCheckOperation:
return props_NodeTypeCheckOperation;
case LanguageConceptSwitch.NodeTypeSetCheckOperation:
return props_NodeTypeSetCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemErrorCheckOperation:
return props_NodeTypeSystemErrorCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemRuleCheckOperation:
return props_NodeTypeSystemRuleCheckOperation;
case LanguageConceptSwitch.NodeTypeSystemWarningCheckOperation:
return props_NodeTypeSystemWarningCheckOperation;
case LanguageConceptSwitch.NodeUnknownErrorCheckOperation:
return props_NodeUnknownErrorCheckOperation;
case LanguageConceptSwitch.NodeUnknownWarningCheckOperation:
return props_NodeUnknownWarningCheckOperation;
case LanguageConceptSwitch.NodeUnreachable:
return props_NodeUnreachable;
case LanguageConceptSwitch.NodeWarningCheckOperation:
return props_NodeWarningCheckOperation;
case LanguageConceptSwitch.NodesTestCase:
return props_NodesTestCase;
case LanguageConceptSwitch.NodesTestMethod:
return props_NodesTestMethod;
case LanguageConceptSwitch.PressKeyStatement:
return props_PressKeyStatement;
case LanguageConceptSwitch.PressMouseStatement:
return props_PressMouseStatement;
case LanguageConceptSwitch.ProjectExpression:
return props_ProjectExpression;
case LanguageConceptSwitch.ReportErrorStatementReference:
return props_ReportErrorStatementReference;
case LanguageConceptSwitch.ScopeEntry:
return props_ScopeEntry;
case LanguageConceptSwitch.ScopesExpectedNode:
return props_ScopesExpectedNode;
case LanguageConceptSwitch.ScopesTest:
return props_ScopesTest;
case LanguageConceptSwitch.SimpleNodeTest:
return props_SimpleNodeTest;
case LanguageConceptSwitch.SwitchToInspector:
return props_SwitchToInspector;
case LanguageConceptSwitch.TestInfo:
return props_TestInfo;
case LanguageConceptSwitch.TestNode:
return props_TestNode;
case LanguageConceptSwitch.TestNodeAnnotation:
return props_TestNodeAnnotation;
case LanguageConceptSwitch.TestNodeReference:
return props_TestNodeReference;
case LanguageConceptSwitch.TypeKeyStatement:
return props_TypeKeyStatement;
case LanguageConceptSwitch.UnknownRuleReference:
return props_UnknownRuleReference;
case LanguageConceptSwitch.UntypedExpression:
return props_UntypedExpression;
case LanguageConceptSwitch.VariableAlive:
return props_VariableAlive;
case LanguageConceptSwitch.VariableInitialized:
return props_VariableInitialized;
case LanguageConceptSwitch.WarningStatementReference:
return props_WarningStatementReference;
}
return null;
}
