{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("8585453e-6bfb-4d80-98de-b16074f1d86c"),"jetbrains.mps.lang.test")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractNodeAssert;
case 1:
  return props_AbstractNodeErrorCheckOperation;
case 2:
return props_AbstractNodeRuleCheckOperation;
case 3:
return props_AbstractNodeWarningCheckOperation;
case 4:
return props_ActionReference;
case 5:
return props_AnonymousCellAnnotation;
case 6:
return props_AssertMatch;
case 7:
return props_BootstrapActionReference;
case 8:
return props_CheckDataFlowOperation;
case 9:
return props_CheckNodeDataflow;
case 10:
return props_CheckNodeForErrorMessagesOperation;
case 11:
return props_CheckNodeForErrors;
case 12:
return props_DragMouseStatement;
case 13:
return props_EditorComponentExpression;
case 14:
return props_EditorExpression;
case 15:
return props_EditorOperation;
case 16:
return props_EditorTestCase;
case 17:
return props_ExpressionContainer;
case 18:
return props_IChecksRules;
case 19:
return props_INodeAnnotation;
case 20:
return props_INodesTestMethod;
case 21:
return props_IReferenceAttachable;
case 22:
return props_IRuleReference;
case 23:
return props_InfoStatementReference;
case 24:
return props_InvokeActionStatement;
case 25:
return props_InvokeIntentionStatement;
case 26:
return props_IsIntentionApplicableExpression;
case 27:
return props_LogEvent;
case 28:
return props_MPSActionReference;
case 29:
return props_MockAnnotation;
case 30:
return props_MockScopeProvider;
case 31:
return props_ModelExpression;
case 32:
return props_NamedNodeReference;
case 33:
return props_NodeCheckOperation;
case 34:
return props_NodeConstraintsErrorCheckOperation;
case 35:
return props_NodeConstraintsWarningCheckOperation;
case 36:
return props_NodeErrorCheckOperation;
case 37:
return props_NodeExpectedTypeCheckOperation;
case 38:
return props_NodeInfoCheckOperation;
case 39:
return props_NodeOperationsContainer;
case 40:
return props_NodePropertiesContainer;
case 41:
return props_NodeReachable;
case 42:
return props_NodeRuleCheckOperation;
case 43:
return props_NodeTypeCheckOperation;
case 44:
return props_NodeTypeSetCheckOperation;
case 45:
return props_NodeTypeSystemErrorCheckOperation;
case 46:
return props_NodeTypeSystemRuleCheckOperation;
case 47:
return props_NodeTypeSystemWarningCheckOperation;
case 48:
return props_NodeUnknownErrorCheckOperation;
case 49:
return props_NodeUnknownWarningCheckOperation;
case 50:
return props_NodeUnreachable;
case 51:
return props_NodeWarningCheckOperation;
case 52:
return props_NodesTestCase;
case 53:
return props_NodesTestMethod;
case 54:
return props_PressKeyStatement;
case 55:
return props_PressMouseStatement;
case 56:
return props_ProjectExpression;
case 57:
return props_ReportErrorStatementReference;
case 58:
return props_ScopeEntry;
case 59:
return props_ScopesExpectedNode;
case 60:
return props_ScopesTest;
case 61:
return props_SimpleNodeTest;
case 62:
return props_SwitchToInspector;
case 63:
return props_TestInfo;
case 64:
return props_TestNode;
case 65:
return props_TestNodeAnnotation;
case 66:
return props_TestNodeReference;
case 67:
return props_TypeKeyStatement;
case 68:
return props_UnknownRuleReference;
case 69:
return props_UntypedExpression;
case 70:
return props_VariableAlive;
case 71:
return props_VariableInitialized;
case 72:
return props_WarningStatementReference;
}
throw new IllegalStateException();
}
