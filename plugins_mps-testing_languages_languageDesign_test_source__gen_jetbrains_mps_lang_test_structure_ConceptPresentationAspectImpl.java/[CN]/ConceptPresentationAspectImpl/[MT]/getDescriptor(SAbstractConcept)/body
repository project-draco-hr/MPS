{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0pc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractNodeAssert;
      }
    break;
case 1:
  if (true) {
    return props_AbstractNodeErrorCheckOperation;
  }
break;
case 2:
if (true) {
return props_AbstractNodeRuleCheckOperation;
}
break;
case 3:
if (true) {
return props_AbstractNodeWarningCheckOperation;
}
break;
case 4:
if (true) {
return props_ActionReference;
}
break;
case 5:
if (true) {
return props_AnonymousCellAnnotation;
}
break;
case 6:
if (true) {
return props_AssertMatch;
}
break;
case 7:
if (true) {
return props_BootstrapActionReference;
}
break;
case 8:
if (true) {
return props_CheckDataFlowOperation;
}
break;
case 9:
if (true) {
return props_CheckNodeDataflow;
}
break;
case 10:
if (true) {
return props_CheckNodeForErrorMessagesOperation;
}
break;
case 11:
if (true) {
return props_CheckNodeForErrors;
}
break;
case 12:
if (true) {
return props_DragMouseStatement;
}
break;
case 13:
if (true) {
return props_EditorComponentExpression;
}
break;
case 14:
if (true) {
return props_EditorExpression;
}
break;
case 15:
if (true) {
return props_EditorOperation;
}
break;
case 16:
if (true) {
return props_EditorTestCase;
}
break;
case 17:
if (true) {
return props_ExpressionContainer;
}
break;
case 18:
if (true) {
return props_IChecksRules;
}
break;
case 19:
if (true) {
return props_INodeAnnotation;
}
break;
case 20:
if (true) {
return props_IReferenceAttachable;
}
break;
case 21:
if (true) {
return props_IRuleReference;
}
break;
case 22:
if (true) {
return props_InvokeActionStatement;
}
break;
case 23:
if (true) {
return props_InvokeIntentionStatement;
}
break;
case 24:
if (true) {
return props_LogEvent;
}
break;
case 25:
if (true) {
return props_MPSActionReference;
}
break;
case 26:
if (true) {
return props_MockAnnotation;
}
break;
case 27:
if (true) {
return props_ModelExpression;
}
break;
case 28:
if (true) {
return props_NodeCheckOperation;
}
break;
case 29:
if (true) {
return props_NodeConstraintsErrorCheckOperation;
}
break;
case 30:
if (true) {
return props_NodeConstraintsWarningCheckOperation;
}
break;
case 31:
if (true) {
return props_NodeErrorCheckOperation;
}
break;
case 32:
if (true) {
return props_NodeExpectedTypeCheckOperation;
}
break;
case 33:
if (true) {
return props_NodeOperationsContainer;
}
break;
case 34:
if (true) {
return props_NodePropertiesContainer;
}
break;
case 35:
if (true) {
return props_NodeReachable;
}
break;
case 36:
if (true) {
return props_NodeRuleCheckOperation;
}
break;
case 37:
if (true) {
return props_NodeTypeCheckOperation;
}
break;
case 38:
if (true) {
return props_NodeTypeSetCheckOperation;
}
break;
case 39:
if (true) {
return props_NodeTypeSystemErrorCheckOperation;
}
break;
case 40:
if (true) {
return props_NodeTypeSystemRuleCheckOperation;
}
break;
case 41:
if (true) {
return props_NodeTypeSystemWarningCheckOperation;
}
break;
case 42:
if (true) {
return props_NodeUnknownErrorCheckOperation;
}
break;
case 43:
if (true) {
return props_NodeUnknownWarningCheckOperation;
}
break;
case 44:
if (true) {
return props_NodeUnreachable;
}
break;
case 45:
if (true) {
return props_NodeWarningCheckOperation;
}
break;
case 46:
if (true) {
return props_NodesTestCase;
}
break;
case 47:
if (true) {
return props_NodesTestMethod;
}
break;
case 48:
if (true) {
return props_PressKeyStatement;
}
break;
case 49:
if (true) {
return props_PressMouseStatement;
}
break;
case 50:
if (true) {
return props_ProjectExpression;
}
break;
case 51:
if (true) {
return props_ReportErrorStatementReference;
}
break;
case 52:
if (true) {
return props_ScopesExpectedNode;
}
break;
case 53:
if (true) {
return props_ScopesTest;
}
break;
case 54:
if (true) {
return props_SimpleNodeTest;
}
break;
case 55:
if (true) {
return props_SwitchToInspector;
}
break;
case 56:
if (true) {
return props_TestInfo;
}
break;
case 57:
if (true) {
return props_TestNode;
}
break;
case 58:
if (true) {
return props_TestNodeAnnotation;
}
break;
case 59:
if (true) {
return props_TestNodeReference;
}
break;
case 60:
if (true) {
return props_TypeKeyStatement;
}
break;
case 61:
if (true) {
return props_UnknownRuleReference;
}
break;
case 62:
if (true) {
return props_UntypedExpression;
}
break;
case 63:
if (true) {
return props_VariableAlive;
}
break;
case 64:
if (true) {
return props_VariableInitialized;
}
break;
case 65:
if (true) {
return props_WarningStatementReference;
}
break;
default :
}
}
throw new IllegalStateException();
}
