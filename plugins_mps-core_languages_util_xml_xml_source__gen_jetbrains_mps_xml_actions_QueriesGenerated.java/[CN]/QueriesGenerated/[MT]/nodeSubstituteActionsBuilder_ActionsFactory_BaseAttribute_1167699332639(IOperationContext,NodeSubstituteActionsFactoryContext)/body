{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.structure.Attribute");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          List<SNode> attributeDeclarations=new ArrayList<SNode>();
          SNode parentlementDeclaration=ElementUtil.getParentElementDeclaration(_context.getParentNode(),operationContext.getScope());
          if ((parentlementDeclaration != null)) {
            ListSequence.fromList(attributeDeclarations).addSequence(ListSequence.fromList(ElementDeclaration_Behavior.call_getAttributeDeclarations_1213877429821(parentlementDeclaration)));
          }
          return attributeDeclarations;
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode attribute=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.xml.structure.Attribute",_context.getCurrentTargetNode());
              SLinkOperations.setTarget(attribute,"attributeDeclaration",(item),false);
              SNodeFactoryOperations.setNewChild(attribute,"value","jetbrains.mps.xml.structure.Text");
              return attribute;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"attributeName");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
