{
  BaseGroup group=new BaseGroup("");
  List<Pair<Intention,SNode>> groupItems=new ArrayList<Pair<Intention,SNode>>();
  groupItems.addAll(getAvailableIntentions());
  Collections.sort(groupItems,new Comparator<Pair<Intention,SNode>>(){
    public int compare(    Pair<Intention,SNode> o1,    Pair<Intention,SNode> o2){
      Intention intention1=o1.getFirst();
      Intention intention2=o2.getFirst();
      IntentionsManager manager=IntentionsManager.getInstance();
      if (manager.intentionIsDisabled(intention1) && !(manager.intentionIsDisabled(intention2))) {
        return 1;
      }
      if (!manager.intentionIsDisabled(intention1) && manager.intentionIsDisabled(intention2)) {
        return -1;
      }
      SNode node1=o1.getSecond();
      SNode node2=o2.getSecond();
      EditorContext context=myEditor.getEditorContext();
      return intention1.getDescription(node1,context).compareTo(intention2.getDescription(node2,context));
    }
  }
);
  for (  final Pair<Intention,SNode> pair : groupItems) {
    BaseAction action=new BaseAction(pair.getFirst().getDescription(pair.getSecond(),myEditor.getEditorContext())){
      protected void doExecute(      AnActionEvent e){
        ModelAccess.instance().runCommandInEDT(new Runnable(){
          public void run(){
            pair.getFirst().execute(pair.getSecond(),myEditor.getEditorContext());
          }
        }
);
      }
    }
;
    Icon icon=IntentionType.getLowestPriorityType().getIcon();
    action.getTemplatePresentation().setIcon(icon);
    action.setExecuteOutsideCommand(true);
    group.add(action);
  }
  return group;
}
