{
  Map<String,ModelTemplate> namesToTemplates=new HashMap<String,ModelTemplate>();
  CreateFromTemplateDialog dialog=new CreateFromTemplateDialog(myProject){
    @Override protected void doOKAction(){
      final ModelTemplate template=namesToTemplates.get(getKindCombo().getSelectedName());
      String shortModelName=getNameField().getText().trim();
      final String modelName=myModelPrefix.isEmpty() ? shortModelName : myModelPrefix + "." + shortModelName;
      if (!isModelNameValid(modelName)) {
        return;
      }
      final SModel newModel=new ModelAccessHelper(ProjectHelper.getModelAccess(myProject)).executeCommand(new Computable<SModel>(){
        @Override public SModel compute(){
          final String path=((PsiDirectory)anActionEvent.getData(LangDataKeys.PSI_ELEMENT)).getVirtualFile().getPath();
          EditableSModel model=null;
          try {
            model=(EditableSModel)myModelRoot.createModel(modelName,myRootForModel,null,PersistenceFacade.getInstance().getModelFactory(MPSExtentions.MODEL));
            model.setChanged(true);
            model.save();
          }
 catch (          IOException e) {
            LOG.error("Can't create per-root model " + modelName + " under "+ path,e);
            return null;
          }
          template.preConfigure(model);
          model.addModelListener(new SModelListener(){
            @Override public void modelLoaded(            SModel sModel,            boolean b){
            }
            @Override public void modelReplaced(            SModel sModel){
            }
            @Override public void modelUnloaded(            SModel sModel){
            }
            @Override public void modelSaved(            SModel sModel){
              ProjectView.getInstance(myProject).refresh();
              sModel.removeModelListener(this);
            }
            @Override public void conflictDetected(            SModel sModel){
            }
            @Override public void problemsDetected(            SModel sModel,            Iterable<Problem> problems){
            }
          }
);
          ModelsAutoImportsManager.doAutoImport(myModelRoot.getModule(),model);
          new MissingDependenciesFixer(model).fixModuleDependencies();
          return model;
        }
      }
);
      if (newModel == null) {
        return;
      }
      processDoNotAskOnOk(OK_EXIT_CODE);
      if (getOKAction().isEnabled()) {
        close(OK_EXIT_CODE);
      }
      ProjectHelper.getModelAccess(myProject).runWriteAction(new Runnable(){
        @Override public void run(){
          ((EditableSModel)newModel).save();
        }
      }
);
    }
    private boolean isModelNameValid(    String modelName){
      if (modelName.length() == 0) {
        showError(MPSBundle.message("create.new.model.dialog.error.empty.name"));
        return false;
      }
      if (SModelRepository.getInstance().getModelDescriptor(modelName) != null) {
        showError(MPSBundle.message("create.new.model.dialog.error.model.exists",modelName));
        return false;
      }
      if (modelName.endsWith(".")) {
        showError(MPSBundle.message("create.new.model.dialog.error.empty.short.name"));
        return false;
      }
      if (!(SourceVersion.isName(SModelStereotype.withoutStereotype(modelName)))) {
        showError(MPSBundle.message("create.new.model.dialog.error.invalid.java",modelName));
        return false;
      }
      return true;
    }
  }
;
  dialog.setTitle(MPSBundle.message("create.new.model.dialog.title"));
  dialog.getKindCombo().addItem(EMPTY_MODEL.getPresentation(),EMPTY_MODEL.getIcon(),EMPTY_MODEL.getName());
  namesToTemplates.put(EMPTY_MODEL.getName(),EMPTY_MODEL);
  for (  ModelTemplateProvider provider : ModelTemplateProvider.EP_NAME.getExtensions()) {
    for (    ModelTemplate template : provider.getTemplates()) {
      dialog.getKindCombo().addItem(template.getPresentation(),template.getIcon(),template.getName());
      dialog.setTemplateKindComponentsVisible(true);
      namesToTemplates.put(template.getName(),template);
    }
  }
  dialog.show();
}
