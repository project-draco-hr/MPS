{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_2qnle6_a0c.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return new CheckedModuleQualifiedName_Constraints();
      }
    break;
case 1:
  if (true) {
    return new CheckedModuleReference_Constraints();
  }
break;
case 2:
if (true) {
return new ChildAttributeQualifier_Constraints();
}
break;
case 3:
if (true) {
return new ChildNodeRefExpression_Constraints();
}
break;
case 4:
if (true) {
return new EnumMemberReference_Constraints();
}
break;
case 5:
if (true) {
return new EnumMemberValueRefExpression_Constraints();
}
break;
case 6:
if (true) {
return new IReferenceOperation_Constraints();
}
break;
case 7:
if (true) {
return new IfInstanceOfVarReference_Constraints();
}
break;
case 8:
if (true) {
return new LinkAttributeQualifier_Constraints();
}
break;
case 9:
if (true) {
return new LinkIdRefExpression_Constraints();
}
break;
case 10:
if (true) {
return new LinkNameRefExpression_Constraints();
}
break;
case 11:
if (true) {
return new LinkQualifier_Constraints();
}
break;
case 12:
if (true) {
return new LinkRefExpression_Constraints();
}
break;
case 13:
if (true) {
return new LinkRefQualifier_Constraints();
}
break;
case 14:
if (true) {
return new ModelReferenceExpression_Constraints();
}
break;
case 15:
if (true) {
return new ModuleReferenceExpression_Constraints();
}
break;
case 16:
if (true) {
return new NodeAttributeQualifier_Constraints();
}
break;
case 17:
if (true) {
return new NodePointerExpression_Constraints();
}
break;
case 18:
if (true) {
return new NodeRefExpression_Constraints();
}
break;
case 19:
if (true) {
return new Node_ConceptMethodCall_Constraints();
}
break;
case 20:
if (true) {
return new Node_GetReferentSearchScopeOperation_Constraints();
}
break;
case 21:
if (true) {
return new Node_IsRoleOperation_Constraints();
}
break;
case 22:
if (true) {
return new PropertyAttributeQualifier_Constraints();
}
break;
case 23:
if (true) {
return new PropertyIdRefExpression_Constraints();
}
break;
case 24:
if (true) {
return new PropertyNameRefExpression_Constraints();
}
break;
case 25:
if (true) {
return new PropertyQualifier_Constraints();
}
break;
case 26:
if (true) {
return new SEnumMemberOperation_Constraints();
}
break;
case 27:
if (true) {
return new SEnumOperation_Constraints();
}
break;
case 28:
if (true) {
return new SEnumOperationInvocation_Constraints();
}
break;
case 29:
if (true) {
return new SEnum_MemberOperation_Constraints();
}
break;
case 30:
if (true) {
return new SLinkAccess_Constraints();
}
break;
case 31:
if (true) {
return new SLinkImplicitSelect_Constraints();
}
break;
case 32:
if (true) {
return new SLinkListAccess_Constraints();
}
break;
case 33:
if (true) {
return new SPropertyAccess_Constraints();
}
break;
case 34:
if (true) {
return new SearchScope_ContainsOperation_Constraints();
}
break;
default :
}
}
return new BaseConstraintsDescriptor(concept);
}
