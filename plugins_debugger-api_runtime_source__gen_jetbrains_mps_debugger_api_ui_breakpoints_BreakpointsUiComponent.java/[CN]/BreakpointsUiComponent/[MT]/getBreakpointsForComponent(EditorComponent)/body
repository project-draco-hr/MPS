{
  final SNode editedNode=editorComponent.getEditedNode();
  if (editedNode == null) {
    return Collections.emptySet();
  }
  if (SNodeOperations.isDisposed(editedNode)) {
    Set<IBreakpoint> allBreakpoints=myBreakpointsManagerComponent.getAllIBreakpoints();
    Set<ILocationBreakpoint> locationBreakpoints=new HashSet<ILocationBreakpoint>();
    for (    IBreakpoint breakpoint : allBreakpoints) {
      if (breakpoint instanceof ILocationBreakpoint) {
        locationBreakpoints.add((ILocationBreakpoint)breakpoint);
      }
    }
    return locationBreakpoints;
  }
  SNodePointer rootPointer=ModelAccess.instance().runReadAction(new Computable<SNodePointer>(){
    @Override public SNodePointer compute(){
      final SNode rootNode=(editedNode.getModel() == null ? null : editedNode.getTopmostAncestor());
      return new SNodePointer(rootNode);
    }
  }
);
  if (rootPointer == null) {
    return Collections.emptySet();
  }
  final Set<ILocationBreakpoint> breakpointsForRoot=myBreakpointsManagerComponent.getBreakpoints(rootPointer);
  if (breakpointsForRoot == null) {
    return Collections.emptySet();
  }
  final Set<ILocationBreakpoint> result=new HashSet<ILocationBreakpoint>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      for (      ILocationBreakpoint locationBreakpoint : breakpointsForRoot) {
        SNode node=locationBreakpoint.getLocation().getSNode();
        if (node != null && EditorComponentUtil.isNodeShownInTheComponent(editorComponent,node)) {
          result.add(locationBreakpoint);
        }
      }
    }
  }
);
  return result;
}
