{
  if (!substituteActionsBuilder.getUseNewActions()) {
    String factoryQueryMethodId=substituteActionsBuilder.getActionsFactoryAspectId();
    if (factoryQueryMethodId == null) {
      return Collections.EMPTY_LIST;
    }
    Object[] args1=new Object[]{sourceNode,null,context};
    Object[] args2=new Object[]{sourceNode,null,context.getScope()};
    String methodName="rightTransformHintSubstituteActionsBuilder_ActionsFactory_" + factoryQueryMethodId;
    SModel model=substituteActionsBuilder.getModel();
    LOG.warning("You are using old query language here which is now obsolete. Please, rewrite your code.",substituteActionsBuilder);
    return (List<INodeSubstituteAction>)QueryMethod.invoke_alternativeArguments(methodName,args1,args2,model);
  }
 else {
    String methodName=ActionQueryMethodName.nodeFactory_RightTransformActionBuilder(substituteActionsBuilder);
    SModel model=substituteActionsBuilder.getModel();
    try {
      return (List<INodeSubstituteAction>)QueryMethodGenerated.invoke(methodName,context,new RTActionsBuilder_ParameterObject(sourceNode,sourceNode.getModel(),null),model);
    }
 catch (    Exception e) {
      return new ArrayList<INodeSubstituteAction>();
    }
  }
}
