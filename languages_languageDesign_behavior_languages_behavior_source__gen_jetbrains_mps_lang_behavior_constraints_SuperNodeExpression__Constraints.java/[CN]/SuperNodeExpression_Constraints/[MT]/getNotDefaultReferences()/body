{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("superConcept",new BaseReferenceConstraintsDescriptor("superConcept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode abstractConceptDeclaration=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.behavior.structure.ConceptBehavior",false,false),"concept",false);
          if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
            SNode cd=(SNode)abstractConceptDeclaration;
            SNode extendsNode=SLinkOperations.getTarget(cd,"extends",false);
            if (extendsNode != null) {
              ListSequence.fromList(result).addElement(extendsNode);
            }
            for (            SNode itfcRef : SLinkOperations.getTargets(cd,"implements",true)) {
              ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,"intfc",false));
            }
          }
          if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
            SNode itfc=(SNode)abstractConceptDeclaration;
            for (            SNode itfcRef : SLinkOperations.getTargets(itfc,"extends",true)) {
              ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,"intfc",false));
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_mmhzfq_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
