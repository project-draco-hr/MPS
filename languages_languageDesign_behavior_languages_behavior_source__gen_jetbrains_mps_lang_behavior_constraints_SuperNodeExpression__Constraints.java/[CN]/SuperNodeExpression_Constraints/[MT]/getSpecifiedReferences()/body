{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d434a6558L,0x498a2c3387127040L,"superConcept"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d434a6558L,0x498a2c3387127040L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode abstractConceptDeclaration=SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getReferenceNode(),MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),false,false),MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d43447b1aL,0x11d43447b1fL,"concept"));
          if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
            SNode cd=(SNode)abstractConceptDeclaration;
            SNode extendsNode=SLinkOperations.getTarget(cd,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0xf979be93cfL,"extends"));
            if (extendsNode != null) {
              ListSequence.fromList(result).addElement(extendsNode);
            }
            for (            SNode itfcRef : SLinkOperations.getChildren(cd,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0x110358d693eL,"implements"))) {
              ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x110356fc618L,0x110356fe029L,"intfc")));
            }
          }
          if (SNodeOperations.isInstanceOf(abstractConceptDeclaration,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103556dcafL,"jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"))) {
            SNode itfc=(SNode)abstractConceptDeclaration;
            for (            SNode itfcRef : SLinkOperations.getChildren(itfc,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103556dcafL,0x110356e9df4L,"extends"))) {
              ListSequence.fromList(result).addElement(SLinkOperations.getTarget(itfcRef,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x110356fc618L,0x110356fe029L,"intfc")));
            }
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_mmhzfq_a0a1a0a0a1a0b0a1a4;
        }
      }
;
    }
  }
);
  return references;
}
