{
  String result="";
  if (Sequence.fromIterable(BehaviorReflection.invokeVirtualStatic((Class<Iterable<SNode>>)((Class)Object.class),SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName()))),"virtual_getSupportedParameters_4307205004146936444",new Object[]{})).contains(SConceptOperations.findConceptDeclaration("jetbrains.mps.console.blCommand.structure.QueryParameterScope"))) {
    result+="Scope can be customized with 'scope' parameter:\n" + SPropertyOperations.getString(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName()),"conceptAlias") + "<scope = ...>\nDefault is project scope\n";
  }
  if (Sequence.fromIterable(BehaviorReflection.invokeVirtualStatic((Class<Iterable<SNode>>)((Class)Object.class),SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName()))),"virtual_getSupportedParameters_4307205004146936444",new Object[]{})).contains(SConceptOperations.findConceptDeclaration("jetbrains.mps.console.blCommand.structure.QueryParameterIncludeReadOnly"))) {
    result+="Read-only models are not included in scope by default.\nThey can be included using r/o+ parameter\n";
  }
  return result;
}
