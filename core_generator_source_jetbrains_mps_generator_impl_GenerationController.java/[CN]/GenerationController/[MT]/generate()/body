{
  myLogger.clear();
  long startJobTime=System.currentTimeMillis();
  myGenerationHandler.startGeneration(myLogger);
  initMaps();
  long totalJob=estimateGenerationTime();
  ITaskProgressHelper progressHelper=new TaskProgressHelper(myProgress,totalJob,startJobTime);
  try {
    boolean generationOK=true;
    try {
      for (      Pair<IModule,List<SModelDescriptor>> moduleAndDescriptors : myModuleSequence) {
        boolean result=generateModelsInModule(moduleAndDescriptors.o1,moduleAndDescriptors.o2,progressHelper);
        generationOK=generationOK && result;
      }
    }
  finally {
      if (myParallelTaskPool != null) {
        myParallelTaskPool.dispose();
        myParallelTaskPool=null;
      }
    }
    if (generationOK) {
      if (myLogger.needsInfo()) {
        myLogger.info("generation completed successfully in " + (System.currentTimeMillis() - startJobTime) + " ms");
      }
      generationOK=myGenerationHandler.compile(myOperationContext,myModuleSequence,true,progressHelper);
    }
 else {
      myLogger.error("generation completed with errors in " + (System.currentTimeMillis() - startJobTime) + " ms");
    }
    return generationOK;
  }
 catch (  GenerationCanceledException gce) {
    myLogger.warning("generation canceled");
    return false;
  }
catch (  GenerationFailureException e) {
    if (e.getMessage() != null && e.getCause() == null) {
      myLogger.error(e.getMessage());
    }
    return false;
  }
catch (  Exception t) {
    myLogger.handleException(t);
    return false;
  }
 finally {
    myGenerationHandler.finishGeneration(progressHelper);
  }
}
