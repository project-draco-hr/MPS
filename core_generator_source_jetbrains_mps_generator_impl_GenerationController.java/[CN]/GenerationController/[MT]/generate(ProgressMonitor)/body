{
  myLogger.clear();
  long startJobTime=System.currentTimeMillis();
  myGenerationHandler.startGeneration(myLogger);
  initMaps();
  try {
    boolean generationOK=true;
    final int compileWork=myGenerationHandler.estimateCompilationMillis();
    int totalWork=compileWork;
    for (    Pair<SModule,List<SModel>> moduleAndDescriptors : myModuleSequence) {
      totalWork+=moduleAndDescriptors.o2 != null ? moduleAndDescriptors.o2.size() : 0;
    }
    monitor.start("",totalWork);
    try {
      for (      Pair<SModule,List<SModel>> moduleAndDescriptors : myModuleSequence) {
        final List<SModel> mlist=moduleAndDescriptors.o2;
        boolean result=generateModelsInModule(moduleAndDescriptors.o1,mlist,monitor.subTask(mlist != null ? mlist.size() : 0));
        monitor.advance(0);
        generationOK=generationOK && result;
      }
    }
  finally {
      if (myParallelTaskPool != null) {
        myParallelTaskPool.dispose();
        myParallelTaskPool=null;
      }
    }
    if (generationOK) {
      if (myLogger.needsInfo()) {
        myLogger.info("generation completed successfully in " + (System.currentTimeMillis() - startJobTime) + " ms");
      }
      generationOK=myGenerationHandler.compile(myOperationContext,myModuleSequence,true,monitor.subTask(compileWork));
      monitor.advance(0);
    }
 else {
      myLogger.error("generation completed with errors in " + (System.currentTimeMillis() - startJobTime) + " ms");
    }
    return generationOK;
  }
 catch (  GenerationCanceledException gce) {
    myLogger.warning("generation canceled");
    return false;
  }
catch (  Exception t) {
    myLogger.handleException(t);
    return false;
  }
catch (  AssertionError e) {
    myLogger.handleException(e);
    throw e;
  }
 finally {
    monitor.done();
    myGenerationHandler.finishGeneration();
  }
}
