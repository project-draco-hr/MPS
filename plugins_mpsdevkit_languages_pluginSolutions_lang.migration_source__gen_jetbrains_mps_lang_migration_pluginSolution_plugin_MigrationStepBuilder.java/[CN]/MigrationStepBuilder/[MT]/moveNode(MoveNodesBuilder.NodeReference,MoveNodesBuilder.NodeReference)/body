{
  SNode fromNode=((NodeReference)from).ref();
  SNode toNode=((NodeReference)to).ref();
  final SRepository repository=((NodeReference)from).repo();
  if (neq_x8stao_a0d0j(repository,((NodeReference)to).repo())) {
    throw new IllegalArgumentException();
  }
  final SNode moveNodeItem=createMoveNode_x8stao_a0e0j(SNodeOperations.cast(HUtil.copyIfNecessary(fromNode),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")),SNodeOperations.cast(HUtil.copyIfNecessary(toNode),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));
  Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>(){
    public void visit(    MoveNodesContributor it){
      it.adjustMoveNodesItem(moveNodeItem,repository);
    }
  }
);
  ListSequence.fromList(SLinkOperations.getChildren(myStep,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x67236d4a5836cabbL,0x67236d4a5836d7f3L,"item"))).addElement(moveNodeItem);
}
