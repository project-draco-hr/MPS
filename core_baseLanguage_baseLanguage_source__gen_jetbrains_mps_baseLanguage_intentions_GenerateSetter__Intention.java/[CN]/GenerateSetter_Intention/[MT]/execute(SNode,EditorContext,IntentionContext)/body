{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  SNode lastAdded=null;
  Project ideaProject=editorContext.getOperationContext().getProject();
  for (  final SNode field : ((List<SNode>)intentionContext.getContextParametersMap().get("selectedFields"))) {
    final String setterName=GenerateGettersAndSettersUtil.getFieldSetterName(field,ideaProject);
    boolean setterIsAbsent=true;
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode method){
        return setterName.equals(SPropertyOperations.getString(method,"name")) && ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count() == 1;
      }
    }
)) {
      setterIsAbsent=false;
    }
    if (!(setterIsAbsent)) {
      continue;
    }
    final SNode thisExpression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
    SNode added=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateSetter_Intention.QuotationClass_2193_0().createNode(thisExpression,field,SLinkOperations.getTarget(field,"type",true),SPropertyOperations.getString(field,"name"),setterName));
    lastAdded=added;
  }
  if (lastAdded != null) {
    editorContext.select(lastAdded);
  }
}
