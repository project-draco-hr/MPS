{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  SNode lastAdded=null;
  Project project=editorContext.getOperationContext().getProject();
  for (  SNodePointer fieldPtr : ((SNodePointer[])intentionContext.getContextParametersMap().get("selectedFields"))) {
    final SNode field=SNodeOperations.cast(fieldPtr.getNode(),"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    final String setterName=GenerateGettersAndSettersUtil.getFieldSetterName(field,project);
    boolean setterIsAbsent=true;
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode method){
        return setterName.equals(SPropertyOperations.getString(method,"name")) && (int)ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count() == 1;
      }
    }
)) {
      setterIsAbsent=false;
    }
    if (!(setterIsAbsent)) {
      continue;
    }
    String parameterName=GenerateGettersAndSettersUtil.getParameterNameForField(field,project);
    SNode fieldReference=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference",null);
    SLinkOperations.setTarget(fieldReference,"variableDeclaration",field,false);
    SNode added=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateSetter_Intention.QuotationClass_hfod7k_a0a0a9a3a7().createNode(fieldReference,SLinkOperations.getTarget(field,"type",true),parameterName,setterName));
    lastAdded=added;
  }
  if (lastAdded != null) {
    editorContext.select(lastAdded);
  }
}
