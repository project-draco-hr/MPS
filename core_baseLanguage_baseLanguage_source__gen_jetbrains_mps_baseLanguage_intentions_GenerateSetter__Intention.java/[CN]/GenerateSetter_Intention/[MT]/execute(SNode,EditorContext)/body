{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  List<SNode> fields=SLinkOperations.getTargets(classConcept,"field",true);
  if (ListSequence.fromList(fields).isEmpty()) {
    return;
  }
  for (  SNode field : fields) {
    final String setterName="set" + NameUtil.capitalize(SPropertyOperations.getString(field,"name"));
    boolean setterIsAbsent=true;
    if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode method){
        return SPropertyOperations.getString(method,"name").equals(setterName) && ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).count() == 1;
      }
    }
)) {
      setterIsAbsent=false;
    }
    if (!(setterIsAbsent)) {
      continue;
    }
    SNode setter=SLinkOperations.addNewChild(classConcept,"method","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    SPropertyOperations.set(setter,"name",setterName);
    SLinkOperations.setNewChild(setter,"returnType","jetbrains.mps.baseLanguage.structure.VoidType");
    SNode parameterDeclaration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
    SLinkOperations.setTarget(parameterDeclaration,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(field,"type",true)),true);
    SPropertyOperations.set(parameterDeclaration,"name",SPropertyOperations.getString(field,"name"));
    SLinkOperations.addChild(setter,"parameter",parameterDeclaration);
    SLinkOperations.setNewChild(setter,"body","jetbrains.mps.baseLanguage.structure.StatementList");
    SNode expressionStatement=SLinkOperations.addNewChild(SLinkOperations.getTarget(setter,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ExpressionStatement");
    SNode assignmentExpression=SLinkOperations.setNewChild(expressionStatement,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    SNode dotExpression=SLinkOperations.setNewChild(assignmentExpression,"lValue","jetbrains.mps.baseLanguage.structure.DotExpression");
    SLinkOperations.setNewChild(dotExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode fieldRef=SLinkOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
    SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
    SNode parameterReference=SLinkOperations.setNewChild(assignmentExpression,"rValue","jetbrains.mps.baseLanguage.structure.ParameterReference");
    SLinkOperations.setTarget(parameterReference,"variableDeclaration",parameterDeclaration,false);
  }
}
