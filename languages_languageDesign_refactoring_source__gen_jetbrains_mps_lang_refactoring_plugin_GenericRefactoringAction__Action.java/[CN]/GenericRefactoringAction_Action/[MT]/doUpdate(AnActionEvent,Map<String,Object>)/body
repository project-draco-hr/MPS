{
  try {
{
      String text=("".equals(GenericRefactoringAction_Action.this.refactoring.getUserFriendlyName()) ? GenericRefactoringAction_Action.this.refactoring.getClass().getName() : GenericRefactoringAction_Action.this.refactoring.getUserFriendlyName());
      event.getPresentation().setText(text);
      IRefactoringTarget refTarget=GenericRefactoringAction_Action.this.refactoring.getRefactoringTarget();
      boolean oneEntity=!(refTarget.allowMultipleTargets());
      List entities;
switch (refTarget.getTarget()) {
case NODE:
        entities=GenericRefactoringHelper.getNodes(event,oneEntity);
      break;
case MODEL:
    entities=GenericRefactoringHelper.getModels(event,oneEntity);
  break;
case MODULE:
entities=GenericRefactoringHelper.getModules(event,oneEntity);
break;
default :
throw new IllegalArgumentException("Wrong refactoring type " + refTarget.getTarget().getClass().getName());
}
boolean disabled=entities.isEmpty() || RefactoringUtil.getApplicability(GenericRefactoringAction_Action.this.refactoring,entities).lessThan(GenericRefactoringHelper.getMinApplicabilityLevel());
GenericRefactoringAction_Action.this.setEnabledState(event.getPresentation(),!(disabled));
}
}
 catch (Throwable t) {
LOG.error("User's action doUpdate method failed. Action:" + "GenericRefactoringAction",t);
this.disable(event.getPresentation());
}
}
