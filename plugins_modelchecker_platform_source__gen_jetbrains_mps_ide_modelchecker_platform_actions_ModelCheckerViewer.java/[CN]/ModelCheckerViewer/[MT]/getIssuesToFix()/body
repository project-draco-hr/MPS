{
  final Set<SNodeReference> includedResultNodes=SetSequence.fromSetWithValues(new HashSet<SNodeReference>(),myUsagesView.getIncludedResultNodes());
  final Set<SModel> includedResultModels=SetSequence.fromSetWithValues(new HashSet<SModel>(),myUsagesView.getIncludedModels());
  return ListSequence.fromList(((List<SearchResult<ModelCheckerIssue>>)getSearchResults().getSearchResults())).select(new ISelector<SearchResult<ModelCheckerIssue>,ModelCheckerIssue>(){
    public ModelCheckerIssue select(    SearchResult<ModelCheckerIssue> sr){
      return sr.getObject();
    }
  }
).where(new IWhereFilter<ModelCheckerIssue>(){
    public boolean accept(    ModelCheckerIssue sr){
      return sr instanceof ModelCheckerIssue.NodeIssue && SetSequence.fromSet(includedResultNodes).contains(((ModelCheckerIssue.NodeIssue)sr).getNode().getReference()) && sr.isFixable() || sr instanceof ModelCheckerIssue.ModelIssue && SetSequence.fromSet(includedResultModels).contains(((ModelCheckerIssue.ModelIssue)sr).getModel()) && sr.isFixable();
    }
  }
).toListSequence();
}
