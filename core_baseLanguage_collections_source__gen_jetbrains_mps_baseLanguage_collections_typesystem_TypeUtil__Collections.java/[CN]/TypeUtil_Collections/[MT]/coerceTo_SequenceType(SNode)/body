{
  SNode sequenceType=TypeChecker.getInstance().getRuntimeSupport().coerce_(type,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),true);
  if (sequenceType != null) {
    return sequenceType;
  }
  if (sequenceType == null) {
    return null;
  }
  if (type == null) {
    return null;
  }
  if ("jetbrains.teamsys.dnq.structure.PListType".equals(type.getConceptFqName())) {
    SNode classifierType=SNodeOperations.cast(type.getChild("classifierType"),"jetbrains.mps.baseLanguage.structure.ClassifierType");
    return new _Quotations.QuotationClass_32().createNode(SNodeOperations.copyNode(classifierType));
  }
  if (type != null) {
    SModel model=TypeChecker.getInstance().getRuntimeTypesModel();
    GlobalScope scope=GlobalScope.getInstance();
    SNode entity=SNodeOperations.cast(SModelUtil.findNodeByFQName("com.jetbrains.teamsys.database.Entity",SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),scope),"jetbrains.mps.baseLanguage.structure.Classifier");
    if (entity == null) {
      return null;
    }
    SNode entityType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(entityType,"classifier",entity,false);
    SNode javaIterable=SNodeOperations.cast(SModelUtil.findNodeByFQName("java.lang.Iterable",SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),scope),"jetbrains.mps.baseLanguage.structure.Classifier");
    SNode javaIterableType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(javaIterableType,"classifier",javaIterable,false);
    SLinkOperations.addChild(javaIterableType,"parameter",entityType);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type,javaIterableType)) {
      return new _Quotations.QuotationClass_33().createNode(SNodeOperations.copyNode(entity));
    }
    SNode entityIterable=SNodeOperations.cast(SModelUtil.findNodeByFQName("com.jetbrains.teamsys.database.EntityIterable",SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"),scope),"jetbrains.mps.baseLanguage.structure.Classifier");
    SNode entityIterableType=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(entityIterableType,"classifier",entityIterable,false);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(type,entityIterableType)) {
      return new _Quotations.QuotationClass_34().createNode(SNodeOperations.copyNode(entity));
    }
  }
  return null;
}
