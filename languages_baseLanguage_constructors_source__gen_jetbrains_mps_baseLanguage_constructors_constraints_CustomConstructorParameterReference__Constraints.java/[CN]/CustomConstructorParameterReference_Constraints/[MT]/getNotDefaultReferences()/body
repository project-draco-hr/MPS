{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("parameter",new BaseReferenceConstraintsDescriptor("parameter",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode args=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.constructors.structure.CustomConstructor",false,false),"arguments",true);
          if (SNodeOperations.isInstanceOf(args,"jetbrains.mps.baseLanguage.constructors.structure.ListArgumentsClause")) {
            List<SNode> result=new ArrayList<SNode>();
            ListSequence.fromList(result).addElement(SLinkOperations.getTarget(SNodeOperations.cast(args,"jetbrains.mps.baseLanguage.constructors.structure.ListArgumentsClause"),"list",true));
            return result;
          }
 else           if (SNodeOperations.isInstanceOf(args,"jetbrains.mps.baseLanguage.constructors.structure.CustomArgumentClause")) {
            return SLinkOperations.getTargets(SNodeOperations.cast(args,"jetbrains.mps.baseLanguage.constructors.structure.CustomArgumentClause"),"parameter",true);
          }
 else {
            return null;
          }
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_3lmvlt_a0a1a0a0a1a0b0a1a5;
        }
      }
;
    }
  }
);
  return references;
}
