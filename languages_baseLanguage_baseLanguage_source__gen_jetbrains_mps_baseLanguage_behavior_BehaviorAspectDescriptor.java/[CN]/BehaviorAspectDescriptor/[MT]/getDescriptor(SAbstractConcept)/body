{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0wh.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractForStatement__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractLoopStatement__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myAbstractUnaryNumberOperation__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myAndExpression__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myAnnotation__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myAnnotationInstance__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myAnnotationInstanceValue__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myAnnotationMethodDeclaration__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myAnonymousClass__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myArrayAccessExpression__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myArrayLengthOperation__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myArrayType__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myAssignmentExpression__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myBaseAssignmentExpression__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myBaseMethodCall__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myBaseMethodDeclaration__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myBaseStringOperation__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myBinaryOperation__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myBitwiseAndExpression__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myBitwiseOrExpression__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myBitwiseXorExpression__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myBlockStatement__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myBooleanConstant__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myBooleanType__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myBreakStatement__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myByteType__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myCastExpression__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myCatchClause__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myCharConstant__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myCharType__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myClassConcept__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myClassCreator__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myClassifier__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myClassifierClassExpression__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myClassifierMember__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myClassifierType__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myClosure__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myClosureParameterReference__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myCommentPart__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myCommentedStatement__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myCommentedStatementsBlock__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myConceptFunction__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myConceptFunctionParameter__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myConstructorDeclaration__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myConstructorInvocationStatement__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myContinueStatement__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myCustomPropertyImplementation__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myCustomSetterPropertyImplementation__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myDefaultPropertyImplementation__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myDefaultSetAccessor__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myDivExpression__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myDoWhileStatement__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myDotExpression__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myDoubleType__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myElsifClause__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myEnumClass__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myEnumConstantDeclaration__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myEnumConstantReference__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myEqualsExpression__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myExpression__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myExpressionStatement__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myFieldDeclaration__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myFieldReferenceOperation__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return myFloatType__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myFloatingPointConstant__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return myFloatingPointFloatConstant__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return myForStatement__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return myForeachStatement__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return myGenericDeclaration__BehaviorDescriptor;
}
break;
case 69:
if (true) {
return myGenericNewExpression__BehaviorDescriptor;
}
break;
case 70:
if (true) {
return myGetAccessor__BehaviorDescriptor;
}
break;
case 71:
if (true) {
return myGreaterThanExpression__BehaviorDescriptor;
}
break;
case 72:
if (true) {
return myGreaterThanOrEqualsExpression__BehaviorDescriptor;
}
break;
case 73:
if (true) {
return myHasAnnotation__BehaviorDescriptor;
}
break;
case 74:
if (true) {
return myHexIntegerLiteral__BehaviorDescriptor;
}
break;
case 75:
if (true) {
return myIBLDeprecatable__BehaviorDescriptor;
}
break;
case 76:
if (true) {
return myIBinaryLike__BehaviorDescriptor;
}
break;
case 77:
if (true) {
return myIClassifier__BehaviorDescriptor;
}
break;
case 78:
if (true) {
return myIClassifierMember__BehaviorDescriptor;
}
break;
case 79:
if (true) {
return myIClassifierType__BehaviorDescriptor;
}
break;
case 80:
if (true) {
return myIConditional__BehaviorDescriptor;
}
break;
case 81:
if (true) {
return myIContainsStatementList__BehaviorDescriptor;
}
break;
case 82:
if (true) {
return myIExtractMethodAvailable__BehaviorDescriptor;
}
break;
case 83:
if (true) {
return myIGenericType__BehaviorDescriptor;
}
break;
case 84:
if (true) {
return myIIncompleteParen__BehaviorDescriptor;
}
break;
case 85:
if (true) {
return myIInternalType__BehaviorDescriptor;
}
break;
case 86:
if (true) {
return myILocalDeclaration__BehaviorDescriptor;
}
break;
case 87:
if (true) {
return myILocalReference__BehaviorDescriptor;
}
break;
case 88:
if (true) {
return myILocalVariableElement__BehaviorDescriptor;
}
break;
case 89:
if (true) {
return myILocalVariableElementList__BehaviorDescriptor;
}
break;
case 90:
if (true) {
return myIMemberContainer__BehaviorDescriptor;
}
break;
case 91:
if (true) {
return myIMethodCall__BehaviorDescriptor;
}
break;
case 92:
if (true) {
return myIMethodLike__BehaviorDescriptor;
}
break;
case 93:
if (true) {
return myIOperation__BehaviorDescriptor;
}
break;
case 94:
if (true) {
return myIParameter__BehaviorDescriptor;
}
break;
case 95:
if (true) {
return myIStatementListContainer__BehaviorDescriptor;
}
break;
case 96:
if (true) {
return myIStaticContainerForMethods__BehaviorDescriptor;
}
break;
case 97:
if (true) {
return myITryCatchStatement__BehaviorDescriptor;
}
break;
case 98:
if (true) {
return myITypeApplicable__BehaviorDescriptor;
}
break;
case 99:
if (true) {
return myIValidIdentifier__BehaviorDescriptor;
}
break;
case 100:
if (true) {
return myIVariableAssignment__BehaviorDescriptor;
}
break;
case 101:
if (true) {
return myIVariableReference__BehaviorDescriptor;
}
break;
case 102:
if (true) {
return myIVisible__BehaviorDescriptor;
}
break;
case 103:
if (true) {
return myIWillBeClassifier__BehaviorDescriptor;
}
break;
case 104:
if (true) {
return myIYetUnresolved__BehaviorDescriptor;
}
break;
case 105:
if (true) {
return myIfStatement__BehaviorDescriptor;
}
break;
case 106:
if (true) {
return myIncompleteMemberDeclaration__BehaviorDescriptor;
}
break;
case 107:
if (true) {
return myInstanceInitializer__BehaviorDescriptor;
}
break;
case 108:
if (true) {
return myInstanceMethodCallOperation__BehaviorDescriptor;
}
break;
case 109:
if (true) {
return myInstanceMethodDeclaration__BehaviorDescriptor;
}
break;
case 110:
if (true) {
return myIntegerConstant__BehaviorDescriptor;
}
break;
case 111:
if (true) {
return myIntegerLiteral__BehaviorDescriptor;
}
break;
case 112:
if (true) {
return myIntegerType__BehaviorDescriptor;
}
break;
case 113:
if (true) {
return myInterface__BehaviorDescriptor;
}
break;
case 114:
if (true) {
return myJavaImports__BehaviorDescriptor;
}
break;
case 115:
if (true) {
return myLessThanExpression__BehaviorDescriptor;
}
break;
case 116:
if (true) {
return myLessThanOrEqualsExpression__BehaviorDescriptor;
}
break;
case 117:
if (true) {
return myLocalInstanceFieldReference__BehaviorDescriptor;
}
break;
case 118:
if (true) {
return myLocalInstanceMethodCall__BehaviorDescriptor;
}
break;
case 119:
if (true) {
return myLocalMethodCall__BehaviorDescriptor;
}
break;
case 120:
if (true) {
return myLocalPropertyReference__BehaviorDescriptor;
}
break;
case 121:
if (true) {
return myLocalStaticFieldReference__BehaviorDescriptor;
}
break;
case 122:
if (true) {
return myLocalStaticMethodCall__BehaviorDescriptor;
}
break;
case 123:
if (true) {
return myLocalVariableDeclaration__BehaviorDescriptor;
}
break;
case 124:
if (true) {
return myLocalVariableDeclarationStatement__BehaviorDescriptor;
}
break;
case 125:
if (true) {
return myLocalVariableReference__BehaviorDescriptor;
}
break;
case 126:
if (true) {
return myLongLiteral__BehaviorDescriptor;
}
break;
case 127:
if (true) {
return myLongType__BehaviorDescriptor;
}
break;
case 128:
if (true) {
return myLowerBoundType__BehaviorDescriptor;
}
break;
case 129:
if (true) {
return myMinusExpression__BehaviorDescriptor;
}
break;
case 130:
if (true) {
return myMulExpression__BehaviorDescriptor;
}
break;
case 131:
if (true) {
return myNPEEqualsExpression__BehaviorDescriptor;
}
break;
case 132:
if (true) {
return myNPENotEqualsExpression__BehaviorDescriptor;
}
break;
case 133:
if (true) {
return myNotEqualsExpression__BehaviorDescriptor;
}
break;
case 134:
if (true) {
return myNotExpression__BehaviorDescriptor;
}
break;
case 135:
if (true) {
return myNullLiteral__BehaviorDescriptor;
}
break;
case 136:
if (true) {
return myOrExpression__BehaviorDescriptor;
}
break;
case 137:
if (true) {
return myParameterDeclaration__BehaviorDescriptor;
}
break;
case 138:
if (true) {
return myParameterReference__BehaviorDescriptor;
}
break;
case 139:
if (true) {
return myParenthesizedExpression__BehaviorDescriptor;
}
break;
case 140:
if (true) {
return myPlaceholderMember__BehaviorDescriptor;
}
break;
case 141:
if (true) {
return myPlusExpression__BehaviorDescriptor;
}
break;
case 142:
if (true) {
return myPostfixDecrementExpression__BehaviorDescriptor;
}
break;
case 143:
if (true) {
return myPostfixIncrementExpression__BehaviorDescriptor;
}
break;
case 144:
if (true) {
return myPrefixDecrementExpression__BehaviorDescriptor;
}
break;
case 145:
if (true) {
return myPrefixIncrementExpression__BehaviorDescriptor;
}
break;
case 146:
if (true) {
return myPrimitiveType__BehaviorDescriptor;
}
break;
case 147:
if (true) {
return myProperty__BehaviorDescriptor;
}
break;
case 148:
if (true) {
return myPropertyImplementation__BehaviorDescriptor;
}
break;
case 149:
if (true) {
return myPropertyReference__BehaviorDescriptor;
}
break;
case 150:
if (true) {
return myPropertyValueReference__BehaviorDescriptor;
}
break;
case 151:
if (true) {
return myRemExpression__BehaviorDescriptor;
}
break;
case 152:
if (true) {
return myRemarkStatement__BehaviorDescriptor;
}
break;
case 153:
if (true) {
return myReturnStatement__BehaviorDescriptor;
}
break;
case 154:
if (true) {
return mySetAccessor__BehaviorDescriptor;
}
break;
case 155:
if (true) {
return myShiftLeftExpression__BehaviorDescriptor;
}
break;
case 156:
if (true) {
return myShiftRightExpression__BehaviorDescriptor;
}
break;
case 157:
if (true) {
return myShiftRightUnsignedExpression__BehaviorDescriptor;
}
break;
case 158:
if (true) {
return myShortType__BehaviorDescriptor;
}
break;
case 159:
if (true) {
return mySingleLineComment__BehaviorDescriptor;
}
break;
case 160:
if (true) {
return myStatement__BehaviorDescriptor;
}
break;
case 161:
if (true) {
return myStatementList__BehaviorDescriptor;
}
break;
case 162:
if (true) {
return myStaticFieldDeclaration__BehaviorDescriptor;
}
break;
case 163:
if (true) {
return myStaticFieldReference__BehaviorDescriptor;
}
break;
case 164:
if (true) {
return myStaticInitializer__BehaviorDescriptor;
}
break;
case 165:
if (true) {
return myStaticMethodCall__BehaviorDescriptor;
}
break;
case 166:
if (true) {
return myStaticMethodDeclaration__BehaviorDescriptor;
}
break;
case 167:
if (true) {
return myStringLiteral__BehaviorDescriptor;
}
break;
case 168:
if (true) {
return myStringType__BehaviorDescriptor;
}
break;
case 169:
if (true) {
return mySuperConstructorInvocation__BehaviorDescriptor;
}
break;
case 170:
if (true) {
return mySuperMethodCall__BehaviorDescriptor;
}
break;
case 171:
if (true) {
return mySwitchCase__BehaviorDescriptor;
}
break;
case 172:
if (true) {
return mySwitchStatement__BehaviorDescriptor;
}
break;
case 173:
if (true) {
return mySynchronizedStatement__BehaviorDescriptor;
}
break;
case 174:
if (true) {
return myTernaryOperatorExpression__BehaviorDescriptor;
}
break;
case 175:
if (true) {
return myTextCommentPart__BehaviorDescriptor;
}
break;
case 176:
if (true) {
return myThisConstructorInvocation__BehaviorDescriptor;
}
break;
case 177:
if (true) {
return myThisExpression__BehaviorDescriptor;
}
break;
case 178:
if (true) {
return myThrowStatement__BehaviorDescriptor;
}
break;
case 179:
if (true) {
return myTokens__BehaviorDescriptor;
}
break;
case 180:
if (true) {
return myTryCatchStatement__BehaviorDescriptor;
}
break;
case 181:
if (true) {
return myTryStatement__BehaviorDescriptor;
}
break;
case 182:
if (true) {
return myType__BehaviorDescriptor;
}
break;
case 183:
if (true) {
return myTypeAnnotable__BehaviorDescriptor;
}
break;
case 184:
if (true) {
return myTypeDerivable__BehaviorDescriptor;
}
break;
case 185:
if (true) {
return myTypeVariableDeclaration__BehaviorDescriptor;
}
break;
case 186:
if (true) {
return myTypeVariableReference__BehaviorDescriptor;
}
break;
case 187:
if (true) {
return myUnaryMinus__BehaviorDescriptor;
}
break;
case 188:
if (true) {
return myUnknownConsCall__BehaviorDescriptor;
}
break;
case 189:
if (true) {
return myUnknownDotCall__BehaviorDescriptor;
}
break;
case 190:
if (true) {
return myUnknownLocalCall__BehaviorDescriptor;
}
break;
case 191:
if (true) {
return myUnknownNameRef__BehaviorDescriptor;
}
break;
case 192:
if (true) {
return myUnknownNew__BehaviorDescriptor;
}
break;
case 193:
if (true) {
return myUpperBoundType__BehaviorDescriptor;
}
break;
case 194:
if (true) {
return myUsingStatement__BehaviorDescriptor;
}
break;
case 195:
if (true) {
return myVariableArityType__BehaviorDescriptor;
}
break;
case 196:
if (true) {
return myVariableDeclaration__BehaviorDescriptor;
}
break;
case 197:
if (true) {
return myVariableReference__BehaviorDescriptor;
}
break;
case 198:
if (true) {
return myVoidType__BehaviorDescriptor;
}
break;
case 199:
if (true) {
return myWhileStatement__BehaviorDescriptor;
}
break;
case 200:
if (true) {
return myWildCardType__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
