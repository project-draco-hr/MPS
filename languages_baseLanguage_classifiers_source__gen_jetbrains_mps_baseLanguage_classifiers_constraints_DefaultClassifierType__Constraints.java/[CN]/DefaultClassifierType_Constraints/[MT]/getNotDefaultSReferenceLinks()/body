{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(4917733117167750838l,-7710007501170303426l),1205752906494l,1205752917136l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(4917733117167750838l,-7710007501170303426l),1205752906494l,1205752917136l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> classifiers=SModelOperations.rootsIncludingImported(_context.getModel(),MetaAdapterFactory.getConcept(new UUID(4917733117167750838l,-7710007501170303426l),1205751982837l,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier"));
          classifiers=ListSequence.fromList(classifiers).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.getConceptDeclaration(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),it,"virtual_createType_1213877527970",new Object[]{})) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType");
            }
          }
).toListSequence();
          return classifiers;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8s7bhl_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
