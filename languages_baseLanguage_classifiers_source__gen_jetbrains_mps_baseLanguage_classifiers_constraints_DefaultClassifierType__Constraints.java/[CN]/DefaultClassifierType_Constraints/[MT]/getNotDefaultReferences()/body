{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> classifiers=SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier");
          classifiers=ListSequence.fromList(classifiers).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.getConceptDeclaration(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),it,"virtual_createType_1213877527970",new Object[]{})) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierType");
            }
          }
).toListSequence();
          return classifiers;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8s7bhl_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
