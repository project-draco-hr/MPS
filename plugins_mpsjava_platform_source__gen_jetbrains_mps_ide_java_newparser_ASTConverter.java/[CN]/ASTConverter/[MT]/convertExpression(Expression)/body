{
  if (exp instanceof TrueLiteral) {
    return _quotation_createNode_rbndtb_a0a0a09();
  }
 else   if (exp instanceof FalseLiteral) {
    return _quotation_createNode_rbndtb_a0a0a0md();
  }
 else   if (exp instanceof StringLiteral) {
    return _quotation_createNode_rbndtb_a0a1a0md(new String(((StringLiteral)exp).source()));
  }
 else   if (exp instanceof ArrayInitializer) {
    SNode arr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayLiteral",null);
    for (    Expression e : ((ArrayInitializer)exp).expressions) {
      ListSequence.fromList(SLinkOperations.getTargets(arr,"item",true)).addElement(convertExpression(e));
    }
    return arr;
  }
 else   if (exp instanceof QualifiedNameReference) {
    SNode enumRef=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference",null);
    char[][] tokens=((QualifiedNameReference)exp).tokens;
    String enumName=new String(tokens[0]);
    for (int i=1; i < tokens.length - 1; i++) {
      enumName=enumName + "." + new String(tokens[i]);
    }
    String enumConstName=new String(tokens[tokens.length - 1]);
    SReference enumClRef;
    if (enumName.contains(".")) {
      enumClRef=myTypeResolver.resolveQualifiedClassName(enumName,enumRef,"enumClass");
    }
 else {
      enumClRef=myTypeResolver.resolveShortClassName(enumName,enumRef,"enumClass");
    }
    SReference enumConstRef=new DynamicReference("enumConstantDeclaration",enumRef,null,enumConstName);
    enumRef.addReference(enumClRef);
    enumRef.addReference(enumConstRef);
    return enumRef;
  }
 else   if (exp instanceof SingleNameReference) {
    return _quotation_createNode_rbndtb_a1a4a0md();
  }
 else {
    throw new RuntimeException("This kind of expression is not supported yet: " + exp.getClass().getName());
  }
}
