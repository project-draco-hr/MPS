{
  String methodName=new String(x.selector);
  SNode result=null;
  SNode callt=null;
  if (x.receiver instanceof ThisReference && ((ThisReference)x.receiver).isImplicitThis()) {
    Scope staticMethodsScope=getScopeAt(pos,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
    Scope instMethodsScope=getScopeAt(pos,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    Iterable<SNode> staticMethods=staticMethodsScope.getAvailableElements(methodName);
    if (Sequence.fromIterable(staticMethods).isNotEmpty()) {
      SNode decl=SNodeOperations.cast(Sequence.fromIterable(staticMethods).iterator().next(),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
      SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
      insertAt(pos,call);
      SLinkOperations.setTarget(call,"baseMethodDeclaration",decl,false);
      callt=call;
      result=call;
    }
 else {
      Iterable<SNode> instMethods=instMethodsScope.getAvailableElements(methodName);
      SNode decl=null;
      if (Sequence.fromIterable(instMethods).isNotEmpty()) {
        decl=SNodeOperations.cast(Sequence.fromIterable(instMethods).iterator().next(),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      }
      SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",null);
      insertAt(pos,call);
      SLinkOperations.setTarget(call,"baseMethodDeclaration",decl,false);
      callt=call;
      result=call;
    }
  }
 else {
    Expression receiver=x.receiver;
    if (receiver instanceof NameReference) {
      StringBuffer sb=new StringBuffer();
      receiver.printExpression(0,sb);
      String name=sb.toString();
      SNode cls=tryGetClassAt(pos,name);
      if ((cls != null) && SNodeOperations.isInstanceOf(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
        insertAt(pos,call);
        SLinkOperations.setTarget(call,"classConcept",SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
        SReference sref=new DynamicReference("staticMethodDeclaration",call,null,methodName);
        call.addReference(sref);
        callt=call;
        result=call;
      }
    }
    if ((result == null)) {
      SNode dotExpr=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
      insertAt(pos,dotExpr);
      ASTConverter.Position oprndPos=new ASTConverter.Position(dotExpr,"operand");
      convertExpressionRefl(oprndPos,x.receiver);
      SNode call=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
      SLinkOperations.setTarget(dotExpr,"operation",call,true);
      SReference sref=new DynamicReference("instanceMethodDeclaration",call,null,methodName);
      call.addReference(sref);
      callt=call;
      result=dotExpr;
    }
  }
  if ((callt != null)) {
    addCallArgs(callt,x.arguments);
  }
  return result;
}
