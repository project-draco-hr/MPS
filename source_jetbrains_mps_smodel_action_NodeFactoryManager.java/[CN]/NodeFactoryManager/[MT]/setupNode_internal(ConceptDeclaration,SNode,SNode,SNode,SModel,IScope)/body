{
  List<NodeFactory> nodeFactories=new ArrayList<NodeFactory>();
  ConceptDeclaration concept=nodeConcept;
  while (concept != null && nodeFactories.isEmpty()) {
    Language language=SModelUtil_new.getDeclaringLanguage(concept,scope);
    if (language == null)     break;
    final ConceptDeclaration conceptF=concept;
    SModelDescriptor actionsModelDescriptor=language.getActionsModelDescriptor();
    if (actionsModelDescriptor != null) {
      nodeFactories=actionsModelDescriptor.getSModel().allAdapters(NodeFactory.class,new Condition<NodeFactory>(){
        public boolean met(        NodeFactory object){
          return object.getApplicableConcept() == conceptF;
        }
      }
);
    }
    concept=concept.getExtends();
  }
  if (nodeFactories.isEmpty())   return false;
  for (  NodeFactory factory : nodeFactories) {
    invokeNodeSetupFunction(factory,newNode,sampleNode,enclosingNode,model);
  }
  return true;
}
