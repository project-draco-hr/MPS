{
  SNode node=SModelUtil.instantiateConceptDeclaration(conceptDeclaration,model);
  String languageNamespace=NameUtil.namespaceFromLongName(node.getClass().getName());
  Class cls;
  try {
    cls=Class.forName(languageNamespace + '.' + CLASS_NAME,true,ClassLoaderManager.getInstance().getClassLoader());
  }
 catch (  Exception e) {
    return node;
  }
  Method method=null;
  Class nodeType=node.getClass();
  while (nodeType != SNode.class) {
    try {
      String methodName=METHOD_PREFIX + NameUtil.shortNameFromLongName(nodeType.getName());
      method=cls.getMethod(methodName,nodeType);
      break;
    }
 catch (    Exception e) {
      nodeType=nodeType.getSuperclass();
    }
  }
  if (method == null)   return node;
  try {
    method.invoke(null,node);
  }
 catch (  Exception e) {
  }
  return node;
}
