{
  final Wrappers._T<List<SNode>> nodesList=new Wrappers._T<List<SNode>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      nodesList.value=ListSequence.fromListWithValues(new ArrayList<SNode>(),FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))),GlobalScope.getInstance(),new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()),false));
    }
  }
);
  if (this.myIsTestMethods) {
    final List<ITestNodeWrapper> methodsList=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        for (        SNode testCase : nodesList.value) {
          ITestNodeWrapper wrapper=TestNodeWrapperFactory.tryToWrap(testCase);
          if (wrapper == null) {
            continue;
          }
          ListSequence.fromList(methodsList).addSequence(Sequence.fromIterable(wrapper.getTestMethods()));
        }
      }
    }
);
    this.myCandidates=methodsList;
  }
 else {
    this.myCandidates=ListSequence.fromList(nodesList.value).select(new ISelector<SNode,ITestNodeWrapper>(){
      public ITestNodeWrapper select(      SNode it){
        return TestNodeWrapperFactory.tryToWrap(it);
      }
    }
).where(new IWhereFilter<ITestNodeWrapper>(){
      public boolean accept(      ITestNodeWrapper it){
        return it != null;
      }
    }
).toListSequence();
  }
}
