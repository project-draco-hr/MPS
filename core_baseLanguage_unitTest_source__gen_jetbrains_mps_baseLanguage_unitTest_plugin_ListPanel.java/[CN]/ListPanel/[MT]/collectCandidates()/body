{
  final List<SNode> nodesList=new ArrayList<SNode>();
  for (  final SNode concept : Sequence.fromIterable(TestNodeWrapperFactory.getWrappedConcepts(!(myIsTestMethods)))) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        ListSequence.fromList(nodesList).addSequence(SetSequence.fromSet(FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration)SNodeOperations.getAdapter(concept)),GlobalScope.getInstance(),new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()),false)));
      }
    }
);
  }
  if (this.myIsTestMethods) {
    final List<ITestNodeWrapper> methodsList=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        for (        SNode testCase : nodesList) {
          ITestNodeWrapper wrapper=TestNodeWrapperFactory.tryToWrap(testCase);
          if (wrapper == null) {
            continue;
          }
          ListSequence.fromList(methodsList).addSequence(Sequence.fromIterable(wrapper.getTestMethods()));
        }
      }
    }
);
    this.myCandidates=methodsList;
  }
 else {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        ListPanel.this.myCandidates=ListSequence.fromList(nodesList).select(new ISelector<SNode,ITestNodeWrapper>(){
          public ITestNodeWrapper select(          SNode it){
            return TestNodeWrapperFactory.tryToWrap(it);
          }
        }
).where(new IWhereFilter<ITestNodeWrapper>(){
          public boolean accept(          ITestNodeWrapper it){
            return it != null;
          }
        }
).toListSequence();
      }
    }
);
  }
}
