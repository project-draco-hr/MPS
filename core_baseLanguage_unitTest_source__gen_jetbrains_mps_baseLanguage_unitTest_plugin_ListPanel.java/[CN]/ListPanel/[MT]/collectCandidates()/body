{
  final Wrappers._T<List<SNode>> nodesList=new Wrappers._T<List<SNode>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      nodesList.value=ListSequence.fromListWithValues(new ArrayList<SNode>(),FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))),GlobalScope.getInstance(),new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()),false));
    }
  }
);
  if (this.isTestMethods) {
    final List<SNode> methodsList=new ArrayList<SNode>();
    for (    final SNode testCase : nodesList.value) {
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          ListSequence.fromList(methodsList).addSequence(ListSequence.fromList(ITestCase_Behavior.call_getTestMethods_2148145109766218395(SNodeOperations.cast(testCase,"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))));
        }
      }
);
    }
    this.candidates=methodsList;
  }
 else {
    this.candidates=nodesList.value;
  }
}
