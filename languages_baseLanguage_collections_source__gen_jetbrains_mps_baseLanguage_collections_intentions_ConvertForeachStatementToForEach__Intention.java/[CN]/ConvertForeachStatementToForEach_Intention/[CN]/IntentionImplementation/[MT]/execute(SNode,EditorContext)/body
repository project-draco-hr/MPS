{
  final SNode oldVariable=SLinkOperations.getTarget(node,"variable",true);
  SNode forEachStatement=SNodeFactoryOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.collections.structure.ForEachStatement");
  SLinkOperations.setTarget(forEachStatement,"body",SLinkOperations.getTarget(node,"body",true),true);
  SLinkOperations.setTarget(forEachStatement,"inputSequence",SLinkOperations.getTarget(node,"iterable",true),true);
  SPropertyOperations.set(forEachStatement,"label",SPropertyOperations.getString(node,"label"));
  SLinkOperations.setTarget(forEachStatement,"loopLabel",SLinkOperations.getTarget(node,"loopLabel",true),true);
  SNode newVariable=SNodeFactoryOperations.setNewChild(forEachStatement,"variable","jetbrains.mps.baseLanguage.collections.structure.ForEachVariable");
  SPropertyOperations.set(newVariable,"name",SPropertyOperations.getString(oldVariable,"name"));
  for (  SNode oldRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(forEachStatement,"body",true),"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,"variableDeclaration",false) == oldVariable;
    }
  }
)) {
    SLinkOperations.setTarget(SNodeFactoryOperations.replaceWithNewChild(oldRef,"jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference"),"variable",newVariable,false);
  }
}
