{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0x2fd7ff1ee43ef592L,"jetbrains.mps.lang.editor.editorTest.structure.Composition").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0x2c59702023f8181eL,"jetbrains.mps.lang.editor.editorTest.structure.SimplePropertyContainer")),null);
      SNodeOperations.insertPrevSiblingChild(_context.getSourceNode(),result);
      return result;
    }
    public String getMatchingText(    String pattern){
      return ",";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0x2fd7ff1ee43ef592L,"jetbrains.mps.lang.editor.editorTest.structure.Composition").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0x2fd7ff1ee43ef592L,"jetbrains.mps.lang.editor.editorTest.structure.Composition").getDeclarationNode(),null));
    }
  }
);
  return result;
}
