{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c35aeL,"jetbrains.mps.lang.editor.editorTest.structure.SubstTestEnumPropertyChild").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:1a7fc406-f263-498c-a126-51036fe6a9da(jetbrains.mps.lang.editor.editorTest.structure)","SubstTestEnum"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode child=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c35aeL,"jetbrains.mps.lang.editor.editorTest.structure.SubstTestEnumPropertyChild")),null);
              SPropertyOperations.set(child,MetaAdapterFactory.getProperty(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c35aeL,0xd4944c0b03fa02eL,"myEnumProperty"),SEnumOperations.getEnumMemberValue((item)));
              return child;
            }
            public String getMatchingText(            String pattern){
              return SEnumOperations.getEnumMemberName((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c352dL,"jetbrains.mps.lang.editor.editorTest.structure.SubstTestBooleanPropertyChild").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<Boolean> queryResult=new Computable<Iterable<Boolean>>(){
        public Iterable<Boolean> compute(){
          return ListSequence.fromListAndArray(new ArrayList<Boolean>(),Boolean.TRUE,Boolean.FALSE);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final Boolean item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode child=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c352dL,"jetbrains.mps.lang.editor.editorTest.structure.SubstTestBooleanPropertyChild")),null);
              SPropertyOperations.set(child,MetaAdapterFactory.getProperty(0x81f0abb8d71e4d13L,0xa0c1d2291fbb28b7L,0xd4944c0b03c352dL,0xd4944c0b03c7179L,"myProperty"),"" + ((item).booleanValue()));
              return child;
            }
            public String getMatchingText(            String pattern){
              return (item).toString();
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
