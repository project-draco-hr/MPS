{
  SNode result=null;
  EquationInfo info=null;
  if (!leftTypes.isEmpty()) {
    result=SubtypingUtil.createLeastCommonSupertype(new LinkedList<SNode>(leftTypes),state.getTypeCheckingContext());
    RelationBlock block=typesToBlocks.get(result);
    info=(block != null) ? block.getEquationInfo() : typesToBlocks.get(leftTypes.iterator().next()).getEquationInfo();
  }
 else   if (!rightTypes.isEmpty()) {
    result=createMeet(rightTypes);
    RelationBlock block=typesToBlocks.get(result);
    info=(block != null) ? block.getEquationInfo() : typesToBlocks.get(rightTypes.iterator().next()).getEquationInfo();
  }
  return result != null && state.addEquation(node,result,info);
}
