{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895ce1L,0x34c8853ae7895ce2L,"singer"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895ce1L,0x34c8853ae7895ce2L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_lq51rn_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode surroundingConcert=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c45L,"jetbrains.mps.samples.languagePatterns.Basic.structure.Concert"),true,false);
            List<SNode> performersAtTheConcert=SLinkOperations.getChildren(surroundingConcert,MetaAdapterFactory.getContainmentLink(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c45L,0x34c8853ae7895c8bL,"performers"));
            return new ListScope(performersAtTheConcert){
              public String getName(              SNode child){
                return SPropertyOperations.getString(SNodeOperations.cast(child,MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL,0x8cc51182671c136eL,0x34c8853ae7895c8dL,"jetbrains.mps.samples.languagePatterns.Basic.structure.Singer")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
