{
  return new BaseReferenceConstraintsDescriptor(role,container){
    private ReferenceScopeProvider referenceScopeProvider;
{
      if (searchScopeProvider != null) {
        referenceScopeProvider=new INodeReferentSearchScopeProviderWrapper(searchScopeProvider);
      }
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      if (referenceScopeProvider != null) {
        return referenceScopeProvider;
      }
 else {
        return super.getScopeProvider();
      }
    }
    @Override public boolean validate(    SNode referenceNode,    SNode oldReferentNode,    SNode newReferentNode,    IScope scope){
      if (referentSetEventHandler != null) {
        if (referentSetEventHandler instanceof INodeReferenceFullSetHandler) {
          return ((INodeReferenceFullSetHandler)referentSetEventHandler).keepsOriginalReference(referenceNode,oldReferentNode,newReferentNode,scope);
        }
 else {
          return true;
        }
      }
 else {
        return super.validate(referenceNode,oldReferentNode,newReferentNode,scope);
      }
    }
    @Override public void onReferenceSet(    SNode referenceNode,    SNode oldReferentNode,    SNode newReferentNode,    IScope scope){
      if (referentSetEventHandler != null) {
        referentSetEventHandler.processReferentSetEvent(referenceNode,oldReferentNode,newReferentNode,scope);
      }
 else {
        super.onReferenceSet(referenceNode,oldReferentNode,newReferentNode,scope);
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return searchScopeProvider != null;
    }
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return referentSetEventHandler != null;
    }
  }
;
}
