{
  Set<SModule> theirModules=SetSequence.fromSetWithValues(new HashSet<SModule>(),event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModules());
  SetSequence.fromSet(theirModules).removeSequence(Sequence.fromIterable(event.getData(MPSCommonDataKeys.MPS_PROJECT).getModulesWithGenerators()));
  final Set<SNode> depLibs=DeprecatedUtil.usagesOfDeprecated(new ModulesScope(theirModules),event.getData(MPSCommonDataKeys.MPS_PROJECT).getScope());
  final Set<SNode> depProj=DeprecatedUtil.usagesOfDeprecated(event.getData(MPSCommonDataKeys.MPS_PROJECT).getScope(),event.getData(MPSCommonDataKeys.MPS_PROJECT).getScope());
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          MigrationOutputUtil.showNodes(event.getData(CommonDataKeys.PROJECT),MultiTuple.<String,Set<SNode>>from("Deprecated library stuff",depLibs),MultiTuple.<String,Set<SNode>>from("Deprecated project stuff",depProj));
        }
      }
);
    }
  }
,ModalityState.NON_MODAL);
}
