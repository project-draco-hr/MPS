{
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.GenericNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator") && TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode constructor=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"baseMethodDeclaration",false);
    SNode fqNameNode=TransformationUtil.createClassFqNameNode(myModel,SNodeOperations.getAncestor(constructor,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false));
    SNode jnSignature=TransformationUtil.createStringLiteral(TransformationUtil.getJniSignature(constructor));
    List<SNode> actualArguments=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"actualArgument",true);
    TransformationUtil.replaceConstructor(newExpression,fqNameNode,jnSignature,actualArguments);
  }
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    TransformationUtil.replaceConstructor(newExpression,TransformationUtil.createStringLiteral(SPropertyOperations.getString(newExpression,"fqClassName")),TransformationUtil.createStringLiteral(TransformationUtil.getJniSignature(ListSequence.fromList(SLinkOperations.getTargets(newExpression,"actualArgument",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it),"jetbrains.mps.baseLanguage.structure.Type");
      }
    }
),new Transformator.QuotationClass_rxfadt_a1a2a0a2a4().createNode())),SLinkOperations.getTargets(newExpression,"actualArgument",true));
  }
}
