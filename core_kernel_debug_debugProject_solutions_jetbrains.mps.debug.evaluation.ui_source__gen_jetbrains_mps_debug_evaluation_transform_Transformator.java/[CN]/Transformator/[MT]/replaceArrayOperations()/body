{
  boolean finished=true;
  for (  SNode arrayAccess : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(arrayAccess,"array",true)),new Transformator.QuotationClass_rxfadt_a1a0a0b0y().createNode())) {
      SNode returnType=new Transformator.QuotationClass_rxfadt_a0a0a0a1a42().createNode();
      if (arrayAccess.getChild(Transformator.LTYPE) != null) {
        returnType=TransformationUtil.getValueProxyTypeFromType(arrayAccess.getChild(Transformator.LTYPE));
      }
      SNodeOperations.replaceWithAnother(arrayAccess,new Transformator.QuotationClass_rxfadt_a0a0c0a0b0y().createNode(returnType,SLinkOperations.getTarget(arrayAccess,"index",true),returnType,SLinkOperations.getTarget(arrayAccess,"array",true)));
      finished=false;
    }
  }
  for (  SNode arrayLength : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(arrayLength),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)),new Transformator.QuotationClass_rxfadt_a1a0a0c0y().createNode())) {
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(arrayLength),new Transformator.QuotationClass_rxfadt_a0a0a0a0c0y().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(arrayLength),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
      finished=false;
    }
  }
  return finished;
}
