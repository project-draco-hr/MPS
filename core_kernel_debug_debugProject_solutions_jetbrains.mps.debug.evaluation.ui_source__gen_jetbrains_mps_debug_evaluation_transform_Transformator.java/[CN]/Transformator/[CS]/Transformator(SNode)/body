{
  myModel=SNodeOperations.getModel(evaluator);
  SNode evaluateMethod=ListSequence.fromList(SNodeOperations.getDescendants(evaluator,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getString(it,"name").equals("evaluate");
    }
  }
);
  myWhatToEvaluate=ListSequence.fromList(SModelOperations.getNodes(myModel,"jetbrains.mps.baseLanguage.structure.ClassConcept")).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode root){
      return ListSequence.fromList(SNodeOperations.getDescendants(root,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode node){
          return (SLinkOperations.getTarget(node,AttributesRolesUtil.childRoleFromAttributeRole("toEvaluateAnnotation"),true) != null);
        }
      }
);
    }
  }
).first();
  if (!(myWhatToEvaluate.isDescendantOf(evaluateMethod,false))) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(evaluateMethod,"body",true),"statement",true)).addElement(SNodeOperations.cast(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.Statement"));
  }
}
