{
  if (matchingActions.size() == 0 && canActivatePopup) {
    return false;
  }
  if (matchingActions.size() != 1) {
    if (canActivatePopup) {
      ((EditorComponent)cell.getEditorComponent()).activateNodeSubstituteChooser(cell,false);
    }
 else {
      return false;
    }
    return true;
  }
  final SubstituteAction action=matchingActions.get(0);
  Boolean canSubstitute=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return action.canSubstitute(pattern);
    }
  }
);
  if (canSubstitute) {
    action.substitute(cell.getContext(),pattern);
    return true;
  }
 else {
    return false;
  }
}
