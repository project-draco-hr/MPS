{
  schedule(modelNode,new Runnable(){
    @Override public void run(){
      if (isTimeToRelax()) {
        return;
      }
      SModel md=modelNode.getModel();
      if (!(md instanceof EditableSModel))       return;
      if (!(md instanceof GeneratableSModel) || !(((GeneratableSModel)md).isGeneratable()))       return;
      if (md.getModule() == null)       return;
      final ProjectModuleTreeNode moduleNode=getContainingModuleNode(modelNode);
      boolean wasChanged=((EditableSModel)md).isChanged();
      if (moduleNode.getModule().isReadOnly()) {
        new StatusUpdate(modelNode).update(GenerationStatus.READONLY);
        new StatusUpdate(moduleNode).update(GenerationStatus.READONLY);
        return;
      }
      if (wasChanged) {
        new StatusUpdate(modelNode).update(GenerationStatus.REQUIRED);
        new StatusUpdate(moduleNode).update(GenerationStatus.REQUIRED);
        if (moduleNode.getModule() instanceof Generator) {
          new StatusUpdate(getContainingModuleNode(moduleNode)).update(GenerationStatus.REQUIRED);
        }
        propagateStatusToNamespaceNodes(moduleNode,GenerationStatus.REQUIRED);
        return;
      }
      new StatusUpdate(modelNode).update();
      GenerationStatus s=new StatusUpdate(moduleNode).update();
      if (moduleNode.getModule() instanceof Generator) {
        new StatusUpdate(getContainingModuleNode(moduleNode)).update();
      }
      propagateStatusToNamespaceNodes(moduleNode,s);
    }
  }
);
}
