{
  List<SModel> models=ListSequence.fromListWithValues(new ArrayList<SModel>(),Sequence.fromIterable(((Iterable<SModule>)event.getData(MPSCommonDataKeys.MPS_PROJECT).getModulesWithGenerators())).translate(new ITranslator2<SModule,SModel>(){
    public Iterable<SModel> translate(    SModule it){
      return it.getModels();
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel md){
      return SModelStereotype.isUserModel(md);
    }
  }
));
  ModelCheckerTool.getInstance(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject()).checkModelsAndShowResult(models,new UnresolvedReferencesChecker(event.getData(MPSCommonDataKeys.MPS_PROJECT)));
}
