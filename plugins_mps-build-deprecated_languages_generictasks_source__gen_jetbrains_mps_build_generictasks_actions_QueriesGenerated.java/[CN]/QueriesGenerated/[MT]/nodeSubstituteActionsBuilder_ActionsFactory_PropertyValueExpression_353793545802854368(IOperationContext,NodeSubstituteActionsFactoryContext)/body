{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildlanguage.structure.StringLiteral");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode decl=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.build.generictasks.structure.Attribute"),"attributeDeclaration",false);
          return SLinkOperations.getTargets(SLinkOperations.getTarget(decl,"enum",true),"constants",true);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode node=SNodeFactoryOperations.createNewNode("jetbrains.mps.buildlanguage.structure.StringLiteral",null);
              SPropertyOperations.set(node,"value",SPropertyOperations.getString((item),"value"));
              return node;
            }
          }
);
        }
      }
    }
  }
  return result;
}
