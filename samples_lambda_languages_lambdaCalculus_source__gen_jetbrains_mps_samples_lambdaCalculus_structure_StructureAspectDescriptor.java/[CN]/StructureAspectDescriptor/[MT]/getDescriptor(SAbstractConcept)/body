{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0gb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractionVarRef;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractionVariable;
  }
break;
case 2:
if (true) {
return myConceptAddOperation;
}
break;
case 3:
if (true) {
return myConceptBinaryNumericOperation;
}
break;
case 4:
if (true) {
return myConceptBinaryOperation;
}
break;
case 5:
if (true) {
return myConceptBinaryStringOperation;
}
break;
case 6:
if (true) {
return myConceptConcatenateOperation;
}
break;
case 7:
if (true) {
return myConceptDivideOperation;
}
break;
case 8:
if (true) {
return myConceptFunctionType;
}
break;
case 9:
if (true) {
return myConceptLambdaAbstraction;
}
break;
case 10:
if (true) {
return myConceptLambdaApplication;
}
break;
case 11:
if (true) {
return myConceptLambdaExpression;
}
break;
case 12:
if (true) {
return myConceptLambdaType;
}
break;
case 13:
if (true) {
return myConceptLetExpression;
}
break;
case 14:
if (true) {
return myConceptLetRef;
}
break;
case 15:
if (true) {
return myConceptLetVariable;
}
break;
case 16:
if (true) {
return myConceptMultipleExpression;
}
break;
case 17:
if (true) {
return myConceptMultiplyOperation;
}
break;
case 18:
if (true) {
return myConceptNumberType;
}
break;
case 19:
if (true) {
return myConceptNumericConstant;
}
break;
case 20:
if (true) {
return myConceptParenthesisExpression;
}
break;
case 21:
if (true) {
return myConceptProgram;
}
break;
case 22:
if (true) {
return myConceptStringConstant;
}
break;
case 23:
if (true) {
return myConceptStringType;
}
break;
case 24:
if (true) {
return myConceptSubtractOperation;
}
break;
case 25:
if (true) {
return myConceptVariable;
}
break;
case 26:
if (true) {
return myConceptVariableOwner;
}
break;
case 27:
if (true) {
return myConceptVariableReference;
}
break;
default :
}
}
return null;
}
