{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef").super_("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").parents("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").references("variable").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable").super_("jetbrains.mps.samples.lambdaCalculus.structure.Variable").parents("jetbrains.mps.samples.lambdaCalculus.structure.Variable","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AddOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("+","").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"left","right"},new boolean[]{false,false}).abstract_().create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").alias("+","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("/","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"domain","range"},new boolean[]{false,false}).create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").children(new String[]{"variable","body"},new boolean[]{true,false}).alias("\\","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"function","argument"},new boolean[]{false,true}).create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").children(new String[]{"value","expression","variable"},new boolean[]{false,false,false}).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetRef").super_("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").parents("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").references("variable").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetVariable").super_("jetbrains.mps.samples.lambdaCalculus.structure.Variable").parents("jetbrains.mps.samples.lambdaCalculus.structure.Variable","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"expressions"},new boolean[]{true}).create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("*","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.NumberType").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").alias("number","").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").properties("value").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"expression"},new boolean[]{false}).create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.Program").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"expression"},new boolean[]{false}).create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.StringConstant").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").properties("value").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.StringType").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").alias("string","").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("-","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.Variable").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.lang.core.structure.INamedConcept").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").interface_().create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").references("variable").abstract_().create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
