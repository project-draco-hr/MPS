{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef","jetbrains.mps.samples.lambdaCalculus.structure.VariableReference",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.VariableReference"},new String[]{},new String[]{"variable"},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable","jetbrains.mps.samples.lambdaCalculus.structure.Variable",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.Variable","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.AddOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation"},new String[]{},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{},new String[]{},new String[]{"left","right"});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation"},new String[]{},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation"},new String[]{},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation"},new String[]{},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"domain","range"});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner"},new String[]{},new String[]{},new String[]{"variable","body"});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{},new String[]{},new String[]{"function","argument"});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LetExpression","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner"},new String[]{},new String[]{},new String[]{"value","expression","variable"});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LetRef","jetbrains.mps.samples.lambdaCalculus.structure.VariableReference",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.VariableReference"},new String[]{},new String[]{"variable"},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.LetVariable","jetbrains.mps.samples.lambdaCalculus.structure.Variable",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.Variable","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{},new String[]{},new String[]{"expressions"});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation"},new String[]{},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.NumberType","jetbrains.mps.samples.lambdaCalculus.structure.LambdaType",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaType"},new String[]{},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{"value"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{},new String[]{},new String[]{"expression"});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.Program","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.execution.util.structure.IMainClass"},new String[]{},new String[]{},new String[]{"expression"});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.StringConstant","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{"value"},new String[]{},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.StringType","jetbrains.mps.samples.lambdaCalculus.structure.LambdaType",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaType"},new String[]{},new String[]{},new String[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation","jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation"},new String[]{},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.Variable","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner",null,true,new String[]{},new String[]{},new String[]{},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference","jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression",false,new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression"},new String[]{},new String[]{"variable"},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
