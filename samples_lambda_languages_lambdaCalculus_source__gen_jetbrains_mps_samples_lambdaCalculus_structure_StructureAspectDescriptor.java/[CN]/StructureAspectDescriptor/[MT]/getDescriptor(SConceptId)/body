{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractionVarRef:
    return myConceptAbstractionVarRef;
case LanguageConceptSwitch.AbstractionVariable:
  return myConceptAbstractionVariable;
case LanguageConceptSwitch.AddOperation:
return myConceptAddOperation;
case LanguageConceptSwitch.BinaryNumericOperation:
return myConceptBinaryNumericOperation;
case LanguageConceptSwitch.BinaryOperation:
return myConceptBinaryOperation;
case LanguageConceptSwitch.BinaryStringOperation:
return myConceptBinaryStringOperation;
case LanguageConceptSwitch.ConcatenateOperation:
return myConceptConcatenateOperation;
case LanguageConceptSwitch.DivideOperation:
return myConceptDivideOperation;
case LanguageConceptSwitch.FunctionType:
return myConceptFunctionType;
case LanguageConceptSwitch.LambdaAbstraction:
return myConceptLambdaAbstraction;
case LanguageConceptSwitch.LambdaApplication:
return myConceptLambdaApplication;
case LanguageConceptSwitch.LambdaExpression:
return myConceptLambdaExpression;
case LanguageConceptSwitch.LambdaType:
return myConceptLambdaType;
case LanguageConceptSwitch.LetExpression:
return myConceptLetExpression;
case LanguageConceptSwitch.LetRef:
return myConceptLetRef;
case LanguageConceptSwitch.LetVariable:
return myConceptLetVariable;
case LanguageConceptSwitch.MultipleExpression:
return myConceptMultipleExpression;
case LanguageConceptSwitch.MultiplyOperation:
return myConceptMultiplyOperation;
case LanguageConceptSwitch.NumberType:
return myConceptNumberType;
case LanguageConceptSwitch.NumericConstant:
return myConceptNumericConstant;
case LanguageConceptSwitch.ParenthesisExpression:
return myConceptParenthesisExpression;
case LanguageConceptSwitch.Program:
return myConceptProgram;
case LanguageConceptSwitch.StringConstant:
return myConceptStringConstant;
case LanguageConceptSwitch.StringType:
return myConceptStringType;
case LanguageConceptSwitch.SubtractOperation:
return myConceptSubtractOperation;
case LanguageConceptSwitch.Variable:
return myConceptVariable;
case LanguageConceptSwitch.VariableOwner:
return myConceptVariableOwner;
case LanguageConceptSwitch.VariableReference:
return myConceptVariableReference;
default :
return null;
}
}
