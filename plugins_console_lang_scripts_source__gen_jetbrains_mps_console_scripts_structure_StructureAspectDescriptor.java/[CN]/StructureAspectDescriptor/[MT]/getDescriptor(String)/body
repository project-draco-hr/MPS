{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.AbstractConsoleScript").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.ConsoleScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.console.scripts.structure.AbstractConsoleScript").children(new String[]{"command"},new boolean[]{true}).create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.Execute").super_("jetbrains.mps.console.base.structure.GeneratedCommand").parents("jetbrains.mps.console.base.structure.GeneratedCommand").references("script").alias("#exec","execute script").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.RefactorOperation").super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation","jetbrains.mps.console.blCommand.structure.ConsoleOperation").children(new String[]{"refactoring"},new boolean[]{false}).alias("refactor","perform changes on selected nodes").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
