{
  JUnitConfigFromClasses.this.setSourceElement(new MPSPsiElement<List>(parameter));
  boolean isCompileInMPS=SNodeOperations.getModel(Sequence.fromIterable(parameter).first()).getModelDescriptor().getModule().isCompileInMPS();
  List<String> nodeNames=ListSequence.fromList(new ArrayList<String>());
  for (  SNode testCase : parameter) {
    ListSequence.fromList(nodeNames).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(testCase));
  }
{
    JUnit_ConfigurationType configType=ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP),JUnit_ConfigurationType.class);
    DefaultJUnit_Configuration _config=new DefaultJUnit_Configuration(JUnitConfigFromClasses.this.getContext().getProject(),configType.getConfigurationFactories()[0],"NewConfig"){
      @Override public String suggestedName(){
        return "Several Test Classes";
      }
    }
;
    _config.setName(SPropertyOperations.getString(SNodeOperations.cast(Sequence.fromIterable(parameter).first(),"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"),"name") + ",...");
    _config.getStateObject().type=JUnitRunTypes.NODE;
    _config.getStateObject().nodes=new ClonableList<String>();
    _config.getStateObject().compileInMPS=isCompileInMPS;
    JUnitConfigFromClasses.this.myConfig=_config;
  }
}
