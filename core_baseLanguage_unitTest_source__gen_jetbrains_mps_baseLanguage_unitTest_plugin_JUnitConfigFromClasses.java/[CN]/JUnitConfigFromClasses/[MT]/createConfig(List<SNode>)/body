{
  boolean containsTest=false;
  for (  SNode testCase : parameter) {
    if (ListSequence.fromList(ITestCase_Behavior.call_getTestMethods_2148145109766218395(testCase)).isNotEmpty()) {
      containsTest=true;
      break;
    }
  }
  if (!(containsTest)) {
    return;
  }
  JUnitConfigFromClasses.this.setSourceElement(new MPSPsiElement(parameter));
  List<String> nodeNames=ListSequence.fromList(new ArrayList<String>());
  for (  SNode testCase : parameter) {
    ListSequence.fromList(nodeNames).addElement(INamedConcept_Behavior.call_getFqName_1213877404258(testCase));
  }
{
    JUnit_ConfigurationType configType=ContainerUtil.findInstance(Extensions.getExtensions(JUnit_ConfigurationType.CONFIGURATION_TYPE_EP),JUnit_ConfigurationType.class);
    DefaultJUnit_Configuration _config=new DefaultJUnit_Configuration(JUnitConfigFromClasses.this.getContext().getProject(),findFactory(configType,"DefaultJUnit"),"NewConfig"){
      @Override public String suggestedName(){
        return "Several Test Classes";
      }
    }
;
    _config.setName(SPropertyOperations.getString(SNodeOperations.cast(Sequence.fromIterable(parameter).first(),"jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"),"name") + ",...");
    _config.getStateObject().type=JUnitRunTypes.NODE;
    _config.getStateObject().nodes=new ClonableList<String>(nodeNames);
    JUnitConfigFromClasses.this.myConfig=_config;
  }
}
