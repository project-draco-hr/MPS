{
  if (ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getParent(it) == classifier;
    }
  }
).isNotEmpty()) {
    return ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.getParent(it) == classifier;
      }
    }
);
  }
  if (ListSequence.fromList(equalSignatureMembers).count() < 2) {
    return equalSignatureMembers;
  }
  if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
    return ListSequence.fromList(new ArrayList<SNode>());
  }
  if (SConceptOperations.isSubConceptOf(kind,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
    Iterable<SNode> nonAbstractMethods=ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return !(((Boolean)BehaviorManager.getInstance().invoke(Boolean.class,SNodeOperations.cast(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"virtual_isAbstract_1232982539764",new Class[]{SNode.class})));
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      }
    }
);
    if (Sequence.fromIterable(nonAbstractMethods).isNotEmpty()) {
      if ((int)Sequence.fromIterable(nonAbstractMethods).count() == 1) {
        return nonAbstractMethods;
      }
 else {
        return Sequence.fromIterable(nonAbstractMethods).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.getParent(it) != SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object");
          }
        }
);
      }
    }
 else {
      return ListSequence.fromList(equalSignatureMembers).take(1);
    }
  }
  return equalSignatureMembers;
}
