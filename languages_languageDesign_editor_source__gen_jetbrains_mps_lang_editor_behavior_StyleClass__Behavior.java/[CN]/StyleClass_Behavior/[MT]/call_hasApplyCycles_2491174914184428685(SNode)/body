{
  List<SNode> dependencies=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> adding=ListSequence.fromListAndArray(new ArrayList<SNode>(),thisNode);
  while (ListSequence.fromList(adding).isNotEmpty()) {
    if (ListSequence.fromList(dependencies).intersect(ListSequence.fromList(adding)).isNotEmpty()) {
      return true;
    }
    ListSequence.fromList(dependencies).addSequence(ListSequence.fromList(adding));
    adding=ListSequence.fromListWithValues(new ArrayList<SNode>(),SNodeOperations.ofConcept(Sequence.fromIterable(SNodeOperations.ofConcept(ListSequence.fromList(adding).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode it){
        return SLinkOperations.getTargets(it,"styleItem",true);
      }
    }
),"jetbrains.mps.lang.editor.structure.ApplyStyleClass")).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(SLinkOperations.getTarget(it,"target",true),"style",false);
      }
    }
),"jetbrains.mps.lang.editor.structure.StyleClass"));
  }
  return false;
}
