{
  if (args.length == 0) {
    System.out.print("Input path to model zip: ");
    String line=new Scanner(System.in).nextLine();
    args=new String[]{((line == null ? null : line.trim()))};
  }
  TestMergeDialog.ENV=IdeaEnvironment.getOrCreate(EnvironmentConfig.defaultConfig());
  IconLoader.activate();
  final String[] models=new String[3];
  String resultFile;
  if (args.length == 2 || args.length == 1) {
    final String[] zipped=MergeBackupUtil.loadZippedModelsAsText(new File(args[0]),new MergeVersion[]{MergeVersion.BASE,MergeVersion.MINE,MergeVersion.REPOSITORY});
    models[0]=zipped[0];
    models[1]=zipped[1];
    models[2]=zipped[2];
    if (args.length == 1) {
      resultFile=File.createTempFile("mpstmd",MPSExtentions.DOT_MODEL).getAbsolutePath();
    }
 else {
      resultFile=args[1];
    }
  }
 else   if (args.length == 4 || args.length == 3) {
    models[0]=FileUtil.loadFile(new File(args[0]));
    models[1]=FileUtil.loadFile(new File(args[1]));
    models[2]=FileUtil.loadFile(new File(args[2]));
    if (args.length == 3) {
      resultFile=File.createTempFile("",MPSExtentions.DOT_MODEL).getAbsolutePath();
    }
 else {
      resultFile=args[3];
    }
  }
 else {
    System.err.println("There must be 1-4 parameters");
    return;
  }
  VirtualFile resFile=VirtualFileUtils.getVirtualFile(resultFile);
  List<String> contents=ListSequence.fromListAndArray(new ArrayList<String>(),models);
  List<String> titles=ListSequence.fromListAndArray(new ArrayList<String>(),"Local Version","Merge Result","Remote Version");
  try {
    MergeRequest request=DiffRequestFactory.getInstance().createMergeRequest(ourProject,MPSFileTypeFactory.MPS_FILE_TYPE,FileDocumentManager.getInstance().getDocument(resFile),contents,"Merge files and save result to " + resultFile,titles,null);
    DiffManager.getInstance().showMerge(ourProject,request);
  }
 catch (  InvalidDiffRequestException e) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("",e);
    }
  }
}
