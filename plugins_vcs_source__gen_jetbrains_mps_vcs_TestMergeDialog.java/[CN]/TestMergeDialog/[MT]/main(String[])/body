{
  if (args.length == 0) {
    System.out.print("Input path to model zip: ");
    String line=new Scanner(System.in).nextLine();
    args=new String[]{((line == null ? null : line.trim()))};
  }
  TestMergeDialog.ENV=new IdeaEnvironment(EnvironmentConfig.defaultEnvironment());
  RuntimeFlags.setTestMode(TestMode.USUAL);
  IconLoader.activate();
  final SModel[] models=new SModel[3];
  String resultFile;
  if (args.length == 2 || args.length == 1) {
    final SModel[] zipped=MergeBackupUtil.loadZippedModels(new File(args[0]),new MergeVersion[]{MergeVersion.BASE,MergeVersion.MINE,MergeVersion.REPOSITORY});
    models[0]=zipped[0];
    models[1]=zipped[1];
    models[2]=zipped[2];
    if (args.length == 1) {
      resultFile=File.createTempFile("mpstmd","").getAbsolutePath();
    }
 else {
      resultFile=args[1];
    }
  }
 else   if (args.length == 4 || args.length == 3) {
    models[0]=VCSPersistenceSupport.readModel(new FileDataSource(FileSystem.getInstance().getFileByPath(args[0])),false);
    models[1]=VCSPersistenceSupport.readModel(new FileDataSource(FileSystem.getInstance().getFileByPath(args[1])),false);
    models[2]=VCSPersistenceSupport.readModel(new FileDataSource(FileSystem.getInstance().getFileByPath(args[2])),false);
    if (args.length == 3) {
      resultFile=File.createTempFile("","").getAbsolutePath();
    }
 else {
      resultFile=args[3];
    }
  }
 else {
    System.err.println("There must be 1-4 parameters");
    return;
  }
  final String finalResultFile=resultFile;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      MergeModelsDialog dialog=ModelAccess.instance().runReadAction(new Computable<MergeModelsDialog>(){
        public MergeModelsDialog compute(){
          return new MergeModelsDialog(new MergeTemporaryModel(models[0],true),new MergeTemporaryModel(models[1],true),new MergeTemporaryModel(models[2],true),new SimpleDiffRequest(TestMergeDialog.ourProject,(SModel[])null,new String[]{"Local Version","Merge Result","Remote Version"}));
        }
      }
);
      try {
        Field field=dialog.getClass().getDeclaredField("myMergeTree");
        field.setAccessible(true);
        IdeaTestApplication.getInstance(null).setDataProvider((DiffModelTree)field.get(dialog));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      ISaveMergedModel saver=new ISaveMergedModel(){
        public boolean save(        MergeModelsDialog dialog,        final org.jetbrains.mps.openapi.model.SModel resultModel){
          if (resultModel != null) {
            ModelAccess.instance().runWriteAction(new Runnable(){
              public void run(){
                IFile iFile=FileSystem.getInstance().getFileByPath(finalResultFile);
                if (!(iFile.exists())) {
                  iFile.createNewFile();
                }
                try {
                  PersistenceFacade.getInstance().getDefaultModelFactory().save(resultModel,new FileDataSource(iFile));
                }
 catch (                Exception ex) {
                  if (LOG.isEnabledFor(Level.ERROR)) {
                    LOG.error("Cannot save model.",ex);
                  }
                }
              }
            }
);
          }
          return true;
        }
      }
;
      dialog.setSaver(saver);
      dialog.show();
      Disposer.dispose(TestMergeDialog.myParentDisposable);
      System.exit(0);
    }
  }
);
}
