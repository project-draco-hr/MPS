{
  SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
  String errorMsg;
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(SNodeOperations.as(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass")) {
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    Iterable<SNode> cands=ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode m){
        return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
      }
    }
);
    Iterator<SNode> it=Sequence.fromIterable(cands).iterator();
    SNode mtd=(it.hasNext() ? it.next() : null);
    if (it.hasNext()) {
      errorMsg=": more than one abstract method";
    }
 else     if (mtd != null) {
      SNode md=ListSequence.fromList(methods).getElement(0);
      if ((int)ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).count()) {
        SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype);
        if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
            SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1858552893540392470",0,null);
            _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
            typeCheckingContext.createGreaterThanInequality((SNode)retType,(SNode)SLinkOperations.getTarget(subtype,"resultType",true),false,true,_info_12389875345);
          }
        }
{
          SNode fpt;
          SNode mpt;
          Iterator<SNode> fpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
          Iterator<SNode> mpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).iterator();
          while (true) {
            if (!(fpt_iterator.hasNext())) {
              break;
            }
            if (!(mpt_iterator.hasNext())) {
              break;
            }
            fpt=fpt_iterator.next();
            mpt=mpt_iterator.next();
{
              SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
              EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202746383183",0,null);
              _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
              typeCheckingContext.createLessThanInequality((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt,"type",true),supertype),(SNode)fpt,false,true,_info_12389875345);
            }
          }
        }
        return;
      }
 else {
        errorMsg=": wrong parameter number";
      }
    }
 else {
      errorMsg=": no abstract method";
    }
  }
 else {
    errorMsg=": not an interface or an abstract class";
  }
{
    MessageTarget errorTarget=new NodeMessageTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype)+ errorMsg,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202742336483",null,errorTarget);
    HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
  }
}
