{
  SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
  String errorMsg="";
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    if (methods != null) {
      if (ListSequence.fromList(methods).count() > 1) {
        errorMsg=": interface must have only one method";
{
          BaseIntentionProvider intentionProvider=null;
          IErrorTarget errorTarget=new NodeErrorTarget();
          typeCheckingContext.reportWarning(equationInfo.getNodeWithError(),BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype)+ errorMsg,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1225908155523",intentionProvider,errorTarget);
        }
      }
      SNode md=ListSequence.fromList(methods).getElement(0);
      if (SLinkOperations.getCount(subtype,"parameterType") == SLinkOperations.getCount(md,"parameter")) {
        SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype);
        if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
            SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
            BaseIntentionProvider intentionProvider=null;
            EquationInfo info=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202742499735",0,intentionProvider);
            info.setInequationGroup("priority_4_1759628044690732301");
            info.addInequationGroupBefore("default");
            typeCheckingContext.createLessThanInequation((SNode)SLinkOperations.getTarget(subtype,"resultType",true),(SNode)retType,false,info);
          }
        }
{
          SNode fpt;
          SNode mpt;
          Iterator<SNode> fpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
          Iterator<SNode> mpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).iterator();
          while (true) {
            if (!(fpt_iterator.hasNext())) {
              break;
            }
            if (!(mpt_iterator.hasNext())) {
              break;
            }
            fpt=fpt_iterator.next();
            mpt=mpt_iterator.next();
{
              SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
              BaseIntentionProvider intentionProvider=null;
              EquationInfo info=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202746383183",0,intentionProvider);
              info.setInequationGroup("priority_4_1759628044690732301");
              info.addInequationGroupBefore("default");
              typeCheckingContext.createLessThanInequation((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt,"type",true),supertype),(SNode)fpt,false,info);
            }
          }
        }
        return;
      }
 else {
        errorMsg=": wrong parameter number";
      }
    }
 else {
      errorMsg=": interface must define a method";
    }
  }
 else {
    errorMsg=": not an interface";
  }
{
    BaseIntentionProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype)+ errorMsg,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202742336483",intentionProvider,errorTarget);
  }
}
