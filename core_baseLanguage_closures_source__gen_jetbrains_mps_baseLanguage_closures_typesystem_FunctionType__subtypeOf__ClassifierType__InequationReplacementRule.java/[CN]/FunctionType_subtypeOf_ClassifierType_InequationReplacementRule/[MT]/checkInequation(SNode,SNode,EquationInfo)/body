{
  boolean result_14532009=true;
{
    SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
    String errorMsg="";
    if ((SLinkOperations.getTarget(subtype,"runtimeIface",false) != null)) {
      SNode ct=null;
      ct=new FunctionType_subtypeOf_ClassifierType_InequationReplacementRule.QuotationClass_cb4elm_a0a1a2a1a1().createNode(SLinkOperations.getTarget(subtype,"runtimeIface",false));
      if ((FunctionType_Behavior.call_getResultType_1230475757059(subtype) != null)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(SNodeOperations.copyNode(FunctionType_Behavior.call_getResultType_1230475757059(subtype)));
      }
      for (      SNode pt : SLinkOperations.getTargets(subtype,"parameterType",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(SNodeOperations.copyNode(pt));
      }
    }
    if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(SNodeOperations.as(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass")) {
      List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
      if (ListSequence.fromList(methods).isNotEmpty()) {
        SNode mtd=null;
        for (        SNode m : methods) {
          if (!("equals".equals(SPropertyOperations.getString(m,"name")) || !(SPropertyOperations.getBoolean(m,"isAbstract")))) {
            mtd=m;
            break;
          }
        }
        if (mtd != null) {
          SNode md=ListSequence.fromList(methods).getElement(0);
          if (ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).count()) {
            SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype);
            if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
              result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(subtype,"resultType",true),(SNode)retType,true);
            }
{
              SNode fpt;
              SNode mpt;
              Iterator<SNode> fpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
              Iterator<SNode> mpt_iterator=ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).iterator();
              while (true) {
                if (!(fpt_iterator.hasNext())) {
                  break;
                }
                if (!(mpt_iterator.hasNext())) {
                  break;
                }
                fpt=fpt_iterator.next();
                mpt=mpt_iterator.next();
                result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt,"type",true),supertype),(SNode)fpt,true);
              }
            }
            return result_14532009;
          }
 else {
            errorMsg=": wrong parameter number";
          }
        }
 else {
          errorMsg=": no abstract method";
        }
      }
 else {
        errorMsg=": must define a method";
      }
    }
 else {
      errorMsg=": not an interface or an abstract class";
    }
    result_14532009=false;
  }
  return result_14532009;
}
