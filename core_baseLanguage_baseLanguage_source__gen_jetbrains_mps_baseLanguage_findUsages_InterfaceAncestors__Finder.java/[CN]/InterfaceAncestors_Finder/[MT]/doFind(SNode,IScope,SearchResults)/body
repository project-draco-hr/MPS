{
  SNode current=node;
  results.getSearchedNodePointers().add(new SNodePointer(current));
{
    ICursor<SNode> _zCursor16=CursorFactory.createCursor(SLinkOperations.getTargets(current,"extendedInterface",true));
    try {
      while (_zCursor16.moveToNext()) {
        SNode ancestor=_zCursor16.getCurrent();
{
          results.getSearchResults().add(new SearchResult(new SNodePointer(ancestor),"Ancestor"));
          List<SearchResult> ancestorAncestors=new ArrayList<SearchResult>();
          try {
            GeneratedFinder _finder=(GeneratedFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder").newInstance();
            SNode _node=ancestor;
            IScope _scope;
            _scope=scope;
            boolean rightConcept=_node.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.Interface");
            if (!(rightConcept)) {
              InterfaceAncestors_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; concept: "+ node.getConceptFqName());
            }
 else {
              boolean isApplicable=_finder.isApplicable(_node);
              if (!(isApplicable)) {
                InterfaceAncestors_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + _finder.getDescription() + "\" ; node: "+ node.toString());
              }
 else {
                SearchResults results_19=_finder.find(new SearchQuery(_node,_scope));
                for (                SearchResult result : results_19.getSearchResults()) {
                  ancestorAncestors.add(result);
                }
              }
            }
          }
 catch (          Throwable t) {
            InterfaceAncestors_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder" + "\"  Message:"+ t.getMessage());
          }
{
            ICursor<SearchResult> _zCursor17=CursorFactory.createCursor(ancestorAncestors);
            try {
              while (_zCursor17.moveToNext()) {
                SearchResult ancestorAncestor=_zCursor17.getCurrent();
                results.getSearchResults().add(new SearchResult(new SNodePointer(ancestorAncestor.getNode()),"Ancestor"));
              }
            }
  finally {
              _zCursor17.release();
            }
          }
        }
      }
    }
  finally {
      _zCursor16.release();
    }
  }
}
