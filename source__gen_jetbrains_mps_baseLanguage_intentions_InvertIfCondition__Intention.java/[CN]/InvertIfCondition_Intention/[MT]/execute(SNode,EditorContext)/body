{
  SNode condition=SLinkOperations.getTarget(node,"condition",true);
  if ((condition != null)) {
    if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.NotExpression")) {
      condition=SLinkOperations.getTarget(condition,"expression",true);
    }
 else {
      SNode notExpression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression",null);
      SLinkOperations.setTarget(notExpression,"expression",condition,true);
      condition=notExpression;
    }
    SLinkOperations.setTarget(node,"condition",condition,true);
  }
  SNode ifTrue=SLinkOperations.getTarget(node,"ifTrue",true);
  SNode ifFalse=SLinkOperations.getTarget(node,"ifFalseStatement",true);
  if (SLinkOperations.getCount(ifTrue,"statement") == 0) {
    SLinkOperations.setTarget(node,"ifFalseStatement",null,true);
  }
 else   if (SLinkOperations.getCount(ifTrue,"statement") == 1) {
    SLinkOperations.setTarget(node,"ifFalseStatement",SequenceOperations.getFirst(SLinkOperations.getTargets(ifTrue,"statement",true)),true);
  }
 else {
    SLinkOperations.setNewChild(node,"ifFalseStatement","jetbrains.mps.baseLanguage.structure.BlockStatement");
  }
  if (SNodeOperations.isInstanceOf(ifFalse,"jetbrains.mps.baseLanguage.structure.BlockStatement")) {
    SLinkOperations.setTarget(node,"ifTrue",SLinkOperations.getTarget(ifFalse,"statements",true),true);
  }
 else {
    SLinkOperations.addChild(SLinkOperations.setNewChild(node,"ifTrue","jetbrains.mps.baseLanguage.structure.StatementList"),"statement",ifFalse);
  }
}
