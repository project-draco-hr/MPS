{
  this.addNodeById("1230052903079");
  this.addNodeById("1230052903110");
  ChangeMethodSignatureParameters params=new ChangeMethodSignatureParameters(SNodeOperations.cast(this.getNodeById("1230052903099"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  SNode p1=ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).first();
  SNode p0=ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).getElement(1);
  ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).clear();
  ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).addElement(p0);
  ListSequence.fromList(SLinkOperations.getTargets(params.getDeclaration(),"parameter",true)).addElement(p1);
  ChangeMethodSignatureRefactoring ref=new ChangeMethodSignatureRefactoring(params,SNodeOperations.cast(this.getNodeById("1230052903099"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  List<SNode> ussages=ListSequence.fromList(new ArrayList<SNode>());
  ListSequence.fromList(ussages).addElement(SNodeOperations.cast(this.getNodeById("1230052903086"),"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall"));
  ListSequence.fromList(ussages).addElement(SNodeOperations.cast(this.getNodeById("1230052903093"),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
  ref.setUsages(ussages);
  ref.doRefactoring();
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903080"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052903111"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
