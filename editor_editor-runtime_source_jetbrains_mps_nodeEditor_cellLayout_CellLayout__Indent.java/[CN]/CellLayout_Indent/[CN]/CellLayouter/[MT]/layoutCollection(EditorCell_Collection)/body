{
  int x0=Integer.MAX_VALUE;
  int y0=Integer.MAX_VALUE;
  int x1=Integer.MIN_VALUE;
  int y1=Integer.MIN_VALUE;
  boolean hasIndent=collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT);
  boolean hasAnchor=collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_INDENT_ANCHOR);
  boolean hasWrapAnchor=collection.getStyle().get(StyleAttributes.INDENT_LAYOUT_WRAP_ANCHOR);
  int indent=hasIndent ? myCurrentIndent + myIndentSize : hasAnchor ? myLineWidth : myCurrentIndent;
  int wrapIndent=hasWrapAnchor ? myLineWidth : (hasAnchor || hasIndent) ? indent + 2 * myIndentSize : myCurrentIndentAfterWrap;
  withIndent(indent,wrapIndent,new Runnable(){
    @Override public void run(){
      for (      EditorCell child : collection) {
        if (child instanceof EditorCell_Collection && isIndentCollection((EditorCell_Collection)child)) {
          layoutCollection((EditorCell_Collection)child);
        }
 else {
          layout(child);
        }
      }
    }
  }
);
  for (  EditorCell child : collection) {
    x0=Math.min(x0,child.getX());
    y0=Math.min(y0,child.getY());
    x1=Math.max(x1,child.getX() + child.getWidth());
    y1=Math.max(y1,child.getY() + child.getHeight());
  }
  collection.setX(x0);
  collection.setY(y0);
  collection.setWidth(x1 - x0);
  collection.setHeight(y1 - y0);
  collection.unrequestLayout();
  if (collection != myCell) {
    int ascent=getAscent(collection);
    int descent=collection.getHeight() - ascent;
    collection.setAscent(ascent);
    collection.setDescent(descent);
  }
}
