{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xdcb5a83a19a844ffL,0xa4cbfc7d324ecc63L,0x1f6c736337b5e2d8L,0x1f6c736337b5e2dcL,"rule"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xdcb5a83a19a844ffL,0xa4cbfc7d324ecc63L,0x1f6c736337b5e2d8L,0x1f6c736337b5e2dcL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(_context.getEnclosingNode()),MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL,0xa4cbfc7d324ecc63L,0x1f6c736337b5e2f2L,"jetbrains.mps.core.xml.sax.structure.XMLSAXNodeRule"),false,new SAbstractConcept[]{});
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1y346m_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
