{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11db4a6a000L,0x11db4a6fbeeL,"propertyDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11db4a6a000L,0x11db4a6fbeeL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode messageStatement=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getInterfaceConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11db4aad802L,"jetbrains.mps.lang.typesystem.structure.MessageStatement"),true,false);
          if (messageStatement == null) {
            return Sequence.fromIterable(Collections.<SNode>emptyList());
          }
          SNode nodetype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(messageStatement,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x11db4aad802L,0x11db4ab45e6L,"nodeToReport")));
{
            IMatchingPattern pattern_hhynfx_d0a0=HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType"));
            SNode coercedNode_hhynfx_d0a0=TypeChecker.getInstance().getRuntimeSupport().coerce_(nodetype,pattern_hhynfx_d0a0);
            if (coercedNode_hhynfx_d0a0 != null) {
              return AbstractConceptDeclaration__BehaviorDescriptor.getPropertyDeclarations_idhEwILLM.invoke(SLinkOperations.getTarget(coercedNode_hhynfx_d0a0,MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,0x1090e46ca51L,"concept")));
            }
 else {
              return Sequence.fromIterable(Collections.<SNode>emptyList());
            }
          }
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hhynfx_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
