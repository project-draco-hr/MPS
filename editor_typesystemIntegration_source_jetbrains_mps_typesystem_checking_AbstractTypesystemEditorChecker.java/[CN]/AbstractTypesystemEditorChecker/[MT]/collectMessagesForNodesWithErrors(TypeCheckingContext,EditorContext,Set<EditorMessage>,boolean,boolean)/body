{
  for (  Pair<SNode,List<IErrorReporter>> errorNode : context.getNodesWithErrors(typesystemErrors)) {
    if (!ErrorReportUtil.shouldReportError(errorNode.o1)) {
      continue;
    }
    List<IErrorReporter> errors=new ArrayList<IErrorReporter>(errorNode.o2);
    Collections.sort(errors,new Comparator<IErrorReporter>(){
      @Override public int compare(      IErrorReporter o1,      IErrorReporter o2){
        return o2.getMessageStatus().compareTo(o1.getMessageStatus());
      }
    }
);
    boolean instantIntentionApplied=false;
    for (    IErrorReporter errorReporter : errors) {
      MessageStatus status=errorReporter.getMessageStatus();
      String errorString=errorReporter.reportError();
      HighlighterMessage message=HighlightUtil.createHighlighterMessage(errorNode.o1,NameUtil.capitalize(status.getPresentation()) + ": " + errorString,errorReporter,AbstractTypesystemEditorChecker.this,editorContext);
      List<QuickFixProvider> intentionProviders=message.getIntentionProviders();
      final SNode quickFixNode=errorNode.o1;
      if (applyQuickFixes && !instantIntentionApplied) {
        if (intentionProviders.size() == 1 && intentionProviders.get(0) != null && intentionProviders.get(0).isExecutedImmediately() && !AbstractTypesystemEditorChecker.IMMEDIATE_QFIX_DISABLED) {
          QuickFixProvider intentionProvider=intentionProviders.get(0);
          instantIntentionApplied=applyInstantIntention(editorContext,quickFixNode,intentionProvider);
          if (instantIntentionApplied) {
            continue;
          }
        }
      }
      messages.add(message);
    }
  }
}
