{
  final QuickFix_Runtime intention=intentionProvider.getQuickFix();
  if (intention != null) {
    if (!myOnceExecutedQuickFixes.contains(intention)) {
      myOnceExecutedQuickFixes.add(intention);
      LaterInvocator.invokeLater(new Runnable(){
        @Override public void run(){
          EditorCell selectedCell=editorContext.getSelectedCell();
          if (selectedCell == null)           return;
          boolean restoreCaretPosition=false;
          int caretX=0;
          int caretY=0;
          Project p=(editorContext != null && editorContext.getOperationContext() != null ? editorContext.getOperationContext().getProject() : null);
          if (p == null) {
            return;
          }
          if (selectedCell instanceof EditorCell_Label) {
            EditorCell_Label cell_label=(EditorCell_Label)selectedCell;
            restoreCaretPosition=jetbrains.mps.util.SNodeOperations.isAncestor(quickFixNode,cell_label.getSNode());
            caretX=cell_label.getCaretX();
            caretY=cell_label.getBaseline();
            boolean last=cell_label.getCaretPosition() == cell_label.getText().length();
            boolean first=cell_label.getCaretPosition() == 0;
            if (last) {
              caretX=caretX - 1;
            }
            if (first) {
              caretY=caretY + 1;
            }
          }
          ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
            @Override public void run(){
              intention.execute(quickFixNode);
            }
          }
,p);
          if (restoreCaretPosition) {
            editorContext.flushEvents();
            EditorCell rootCell=editorContext.getEditorComponent().getRootCell();
            EditorCell leaf=rootCell.findLeaf(caretX,caretY);
            if (leaf != null) {
              editorContext.getEditorComponent().changeSelection(leaf);
              leaf.setCaretX(caretX);
            }
          }
        }
      }
,ModalityState.NON_MODAL);
    }
    return true;
  }
  return false;
}
