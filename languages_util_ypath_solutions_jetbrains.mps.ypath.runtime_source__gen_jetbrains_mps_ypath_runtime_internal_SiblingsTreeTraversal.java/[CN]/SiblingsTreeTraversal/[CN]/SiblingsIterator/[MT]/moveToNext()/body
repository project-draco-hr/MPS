{
  nextNode=null;
  hasNextNode=false;
  do {
    while (!(hasCurrentSource) && sourceIterator.hasNext()) {
      currentSource=sourceIterator.next();
      if (!(getSiblingFilter().accept(currentSource))) {
        continue;
      }
      hasCurrentSource=true;
      currentParentsIterator=null;
      currentSiblingsIterator=null;
      break;
    }
    if (currentParentsIterator == null) {
      currentParentsIterator=getOppositeContents(currentSource).iterator();
    }
    if (currentSiblingsIterator == null || !(currentSiblingsIterator.hasNext())) {
      if (currentParentsIterator.hasNext()) {
        currentSiblingsIterator=getDirectContents(currentParentsIterator.next()).iterator();
      }
 else {
        currentSiblingsIterator=null;
      }
    }
    while (currentSiblingsIterator != null && currentSiblingsIterator.hasNext()) {
      T sibling=currentSiblingsIterator.next();
      if (!(getSiblingFilter().accept(sibling,currentSource))) {
        continue;
      }
      nextNode=sibling;
      hasNextNode=true;
      return;
    }
    hasCurrentSource=false;
  }
 while (sourceIterator.hasNext());
}
