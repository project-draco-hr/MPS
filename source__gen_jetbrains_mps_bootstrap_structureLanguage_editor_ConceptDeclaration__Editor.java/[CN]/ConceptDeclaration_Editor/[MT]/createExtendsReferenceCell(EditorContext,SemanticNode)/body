{
  SemanticNode effectiveNode=null;
  effectiveNode=node.getReferent("extends");
  LinkDeclaration linkDeclaration=SemanticModelUtil.getLinkDeclaration(node,"extends");
  if (effectiveNode == null) {
{
      EditorCell_Constant noRefCell=EditorCell_Constant.create(context,node,null,true);
      noRefCell.setDefaultText("<none>");
      noRefCell.setEditable(true);
      noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION,linkDeclaration);
      noRefCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE,node);
      noRefCell.setAction(EditorCellAction.DELETE,new CellAction_Empty());
      noRefCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node,linkDeclaration));
      return noRefCell;
    }
  }
  AbstractCellProvider inlineComponent=new ConceptDeclaration_Editor_extends_InlineComponent(effectiveNode);
  EditorCell editorCell=inlineComponent.createEditorCell(context);
  EditorUtil.setSemanticNodeToCells(editorCell,node);
  editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION,linkDeclaration);
  editorCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE,node);
  editorCell.setAction(EditorCellAction.DELETE,new CellAction_DeleteReferenceToNode(node,"extends",effectiveNode));
  editorCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node,linkDeclaration));
  return editorCell;
}
