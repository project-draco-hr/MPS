{
  if (!(DiskMemoryConflictsTest.MODEL_FILE.exists())) {
    return null;
  }
  List<String> lines=new ArrayList<String>();
  try {
    Scanner scanner=new Scanner(DiskMemoryConflictsTest.MODEL_FILE);
    boolean fieldFound=false;
    boolean nameFound=false;
    Pattern fieldStartPattern=null;
    try {
      while (scanner.hasNextLine()) {
        String line=scanner.nextLine();
        if (fieldStartPattern == null) {
          fieldStartPattern=parseFieldStartPattern(line);
        }
 else         if (!(fieldFound)) {
          fieldFound=fieldStartPattern.matcher(line).matches();
        }
 else         if (!(nameFound)) {
          Matcher matcher=PROPERTY_VALUE_MATCHING_PATTERN.matcher(line);
          if (matcher.matches()) {
            nameFound=true;
            String fieldName=matcher.group(1);
            if (nameToWrite == null) {
              return fieldName;
            }
            line=line.replace(fieldName,nameToWrite);
          }
        }
        lines.add(line);
      }
    }
  finally {
      scanner.close();
    }
    long lastModifiedBefore=DiskMemoryConflictsTest.MODEL_FILE.lastModified();
    PrintWriter w=new PrintWriter(DiskMemoryConflictsTest.MODEL_FILE);
    for (    String line : lines) {
      w.println(line);
    }
    w.close();
    if (DiskMemoryConflictsTest.MODEL_FILE.lastModified() == lastModifiedBefore) {
      DiskMemoryConflictsTest.setLastModified(lastModifiedBefore + 1000);
    }
    DiskMemoryConflictsTest.setLastModified(lastModifiedBefore + 2000 + (int)(Math.random() * 100000));
  }
 catch (  FileNotFoundException e) {
    Assert.fail();
  }
  return null;
}
