{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("defaultConcreteConcept",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.constraints.structure.ConceptConstraints",true,false),"concept",false);
      List<SNode> concepts=SConceptOperations.getAllSubConcepts(concept,_context.getModel(),operationContext.getScope());
      return concepts;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c89590307(jetbrains.mps.lang.constraints.constraints)","5629249995614139014");
    }
  }
);
  return result;
}
