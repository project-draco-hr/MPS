{
  try {
    Queue<SModuleReference> modules=QueueSequence.fromQueueWithValues(new LinkedList<SModuleReference>(),((Project)MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModuleReferences());
    while (QueueSequence.fromQueue(modules).isNotEmpty()) {
      SModule module=ModuleRepositoryFacade.getInstance().getModule(QueueSequence.fromQueue(modules).removeFirstElement());
      if (module.isPackaged()) {
        continue;
      }
      if (module instanceof Language) {
        Iterable<Generator> generators=((Language)module).getGenerators();
        QueueSequence.fromQueue(modules).addSequence(Sequence.fromIterable(generators).select(new ISelector<Generator,ModuleReference>(){
          public ModuleReference select(          Generator it){
            return it.getModuleReference();
          }
        }
));
      }
      List<SModelReference> modelReferences=ListSequence.fromList(new LinkedList<SModelReference>());
      for (      SModel model : Sequence.fromIterable(module.getModels())) {
        ListSequence.fromList(modelReferences).addElement(model.getReference());
      }
      for (      SModelReference modelReference : ListSequence.fromList(modelReferences)) {
        SModel model=SModelRepository.getInstance().getModelDescriptor(modelReference);
        if (model == null) {
          continue;
        }
        if (!(SModelStereotype.isUserModel(model))) {
          continue;
        }
        if (!(model instanceof EditableSModel)) {
          continue;
        }
        MissingDependenciesFixer.fixDependencies(model);
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "FixMissingImportsInProject",t);
  }
}
