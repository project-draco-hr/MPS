{
  try {
    Queue<ModuleReference> modules=QueueSequence.fromQueueWithValues(new LinkedList<ModuleReference>(),((Project)MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class).getModuleReferences());
    while (QueueSequence.fromQueue(modules).isNotEmpty()) {
      IModule module=ModuleRepositoryFacade.getInstance().getModule(QueueSequence.fromQueue(modules).removeFirstElement());
      if (module.isPackaged()) {
        continue;
      }
      if (module instanceof Language) {
        Iterable<Generator> generators=((Language)module).getGenerators();
        QueueSequence.fromQueue(modules).addSequence(Sequence.fromIterable(generators).select(new ISelector<Generator,ModuleReference>(){
          public ModuleReference select(          Generator it){
            return it.getModuleReference();
          }
        }
));
      }
      for (      SModelDescriptor model : ListSequence.fromList(module.getOwnModelDescriptors())) {
        if (!(SModelStereotype.isUserModel(model))) {
          continue;
        }
        if (!(model instanceof EditableSModelDescriptor)) {
          continue;
        }
        new MissingDependenciesFixer(model).fix(false);
      }
      module.invalidateCaches();
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "FixMissingImportsInProject",t);
    }
  }
}
