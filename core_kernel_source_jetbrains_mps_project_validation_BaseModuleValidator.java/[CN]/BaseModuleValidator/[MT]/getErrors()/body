{
  List<String> errors=new ArrayList<String>();
  for (  Dependency dep : myModule.getDependOn()) {
    ModuleReference moduleRef=dep.getModuleRef();
    if (MPSModuleRepository.getInstance().getModule(moduleRef) == null) {
      errors.add("Can't find dependency: " + moduleRef.getModuleFqName());
    }
  }
  for (  ModuleReference reference : myModule.getUsedLanguagesReferences()) {
    if (MPSModuleRepository.getInstance().getLanguage(reference) == null) {
      errors.add("Can't find used language: " + reference.getModuleFqName());
    }
  }
  for (  ModuleReference reference : myModule.getUsedDevkitReferences()) {
    if (MPSModuleRepository.getInstance().getModule(reference) == null) {
      errors.add("Can't find used devkit: " + reference.getModuleFqName());
    }
  }
  ModuleDescriptor descriptor=myModule.getModuleDescriptor();
  if (descriptor == null)   return errors;
  if (descriptor.getSourcePaths() != null && !myModule.isPackaged()) {
    for (    String sourcePath : descriptor.getSourcePaths()) {
      IFile file=FileSystem.getFile(sourcePath);
      if (file == null || !file.exists()) {
        errors.add("Can't find source path: " + sourcePath);
      }
    }
  }
  if (descriptor.getStubModelEntries() != null) {
    for (    StubModelsEntry stubModelsEntry : descriptor.getStubModelEntries()) {
      IFile file=FileSystem.getFile(stubModelsEntry.getPath());
      if (file == null || !file.exists()) {
        errors.add("Can't find library: " + stubModelsEntry.getPath());
      }
    }
  }
  return errors;
}
