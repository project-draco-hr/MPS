{
  super(provider.getDebugSession(),true);
  myProvider=provider;
  myProvider.addWatchListener(new WatchAdapter(){
    @Override public void watchAdded(    final AbstractEvaluationModel model){
      myTree.addModel(model);
      evaluate(model);
    }
    @Override public void watchUpdated(    AbstractEvaluationModel model){
      evaluate(model);
    }
    @Override public void watchRemoved(    AbstractEvaluationModel model){
      myTree.removeModel(model);
      myTree.rebuildLater();
    }
  }
);
  mySessionStopDisposer=new SessionStopDisposer(myDebugSession){
    @Override public void doDispose(){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          WatchesPanel.this.dispose();
        }
      }
);
    }
  }
;
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,new DefaultActionGroup(new AnAction("Add Watch","Add Watch",Icons.ADD){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(DebugActionsUtil.getDebugSession(e) != null);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractDebugSession debugSession=DebugActionsUtil.getDebugSession(e);
      IEvaluationProvider evaluationProvider=debugSession.getEvaluationProvider();
      if (evaluationProvider != null) {
        ((EvaluationProvider)evaluationProvider).createWatch(myDebugSession.getProject());
      }
    }
  }
,new AnAction("Remove Watch","Remove Watch",Icons.REMOVE){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(EvaluationTree.EVALUATION_MODEL.getData(e.getDataContext()) != null);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      AbstractEvaluationModel model=EvaluationTree.EVALUATION_MODEL.getData(e.getDataContext());
      AbstractDebugSession debugSession=DebugActionsUtil.getDebugSession(e);
      IEvaluationProvider evaluationProvider=debugSession.getEvaluationProvider();
      if (evaluationProvider != null) {
        ((EvaluationProvider)evaluationProvider).removeWatch(model);
      }
    }
  }
),false).getComponent(),BorderLayout.WEST);
  add(new JBScrollPane(myTree),BorderLayout.CENTER);
}
