{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b,fqName)) {
case 86:
    return new ConceptEditorDeclaration_BehaviorDescriptor();
case 66:
  return new CellModel_Collection_BehaviorDescriptor();
case 69:
return new CellModel_Constant_BehaviorDescriptor();
case 78:
return new CellModel_Property_BehaviorDescriptor();
case 81:
return new CellModel_RefNode_BehaviorDescriptor();
case 82:
return new CellModel_RefNodeList_BehaviorDescriptor();
case 76:
return new CellModel_ModelAccess_BehaviorDescriptor();
case 72:
return new CellModel_Error_BehaviorDescriptor();
case 70:
return new CellModel_Custom_BehaviorDescriptor();
case 100:
return new EditorComponentDeclaration_BehaviorDescriptor();
case 67:
return new CellModel_Component_BehaviorDescriptor();
case 3:
return new BaseEditorComponent_BehaviorDescriptor();
case 11:
return new CellKeyMapDeclaration_BehaviorDescriptor();
case 80:
return new CellModel_RefCell_BehaviorDescriptor();
case 115:
return new InlineEditorComponent_BehaviorDescriptor();
case 59:
return new CellModel_Alternation_BehaviorDescriptor();
case 75:
return new CellModel_JComponent_BehaviorDescriptor();
case 20:
return new CellLayout_Horizontal_BehaviorDescriptor();
case 25:
return new CellLayout_Vertical_BehaviorDescriptor();
case 19:
return new CellLayout_Flow_BehaviorDescriptor();
case 62:
return new CellModel_AttributedPropertyCell_BehaviorDescriptor();
case 60:
return new CellModel_AttributedLinkCell_BehaviorDescriptor();
case 12:
return new CellKeyMapItem_BehaviorDescriptor();
case 13:
return new CellKeyMapKeystroke_BehaviorDescriptor();
case 18:
return new CellKeyMap_IsApplicableFunction_BehaviorDescriptor();
case 14:
return new CellKeyMap_ExecuteFunction_BehaviorDescriptor();
case 68:
return new CellModel_ConceptProperty_BehaviorDescriptor();
case 7:
return new CellActionMapDeclaration_BehaviorDescriptor();
case 8:
return new CellActionMapItem_BehaviorDescriptor();
case 9:
return new CellActionMap_ExecuteFunction_BehaviorDescriptor();
case 73:
return new CellModel_Image_BehaviorDescriptor();
case 147:
return new QueryFunction_NodeCondition_BehaviorDescriptor();
case 90:
return new ConceptFunctionParameter_node_BehaviorDescriptor();
case 61:
return new CellModel_AttributedNodeCell_BehaviorDescriptor();
case 44:
return new CellMenuPart_PropertyValues_GetValues_BehaviorDescriptor();
case 89:
return new ConceptFunctionParameter_editorContext_BehaviorDescriptor();
case 54:
return new CellMenuPart_ReplaceChild_currentChild_BehaviorDescriptor();
case 55:
return new CellMenuPart_ReplaceChild_defaultConceptOfChild_BehaviorDescriptor();
case 33:
return new CellMenuPart_AbstractGroup_Query_BehaviorDescriptor();
case 58:
return new CellMenuPart_ReplaceNode_Group_Create_BehaviorDescriptor();
case 34:
return new CellMenuPart_AbstractGroup_parameterObject_BehaviorDescriptor();
case 35:
return new CellMenuPart_Abstract_editedNode_BehaviorDescriptor();
case 32:
return new CellMenuPart_AbstractGroup_MatchingText_BehaviorDescriptor();
case 31:
return new CellMenuPart_AbstractGroup_DescriptionText_BehaviorDescriptor();
case 30:
return new CellMenuDescriptor_BehaviorDescriptor();
case 43:
return new CellMenuPart_PropertyValues_BehaviorDescriptor();
case 56:
return new CellMenuPart_ReplaceNode_CustomNodeConcept_BehaviorDescriptor();
case 45:
return new CellMenuPart_ReferentPrimary_BehaviorDescriptor();
case 57:
return new CellMenuPart_ReplaceNode_Group_BehaviorDescriptor();
case 49:
return new CellMenuPart_ReplaceChild_Group_BehaviorDescriptor();
case 51:
return new CellMenuPart_ReplaceChild_Group_Query_BehaviorDescriptor();
case 50:
return new CellMenuPart_ReplaceChild_Group_Create_BehaviorDescriptor();
case 47:
return new CellMenuPart_ReplaceChild_CustomChildConcept_BehaviorDescriptor();
case 48:
return new CellMenuPart_ReplaceChild_CustomChildConcept_Query_BehaviorDescriptor();
case 52:
return new CellMenuPart_ReplaceChild_Item_BehaviorDescriptor();
case 53:
return new CellMenuPart_ReplaceChild_Item_Create_BehaviorDescriptor();
case 37:
return new CellMenuPart_Generic_Group_BehaviorDescriptor();
case 38:
return new CellMenuPart_Generic_Group_Handler_BehaviorDescriptor();
case 39:
return new CellMenuPart_Generic_Item_BehaviorDescriptor();
case 40:
return new CellMenuPart_Generic_Item_Handler_BehaviorDescriptor();
case 27:
return new CellMenuComponent_BehaviorDescriptor();
case 29:
return new CellMenuComponentFeature_Property_BehaviorDescriptor();
case 28:
return new CellMenuComponentFeature_Link_BehaviorDescriptor();
case 36:
return new CellMenuPart_CellMenuComponent_BehaviorDescriptor();
case 46:
return new CellMenuPart_ReplaceChildPrimary_BehaviorDescriptor();
case 141:
return new QueryFunction_JComponent_BehaviorDescriptor();
case 94:
return new ConceptFunctionParameter_text_BehaviorDescriptor();
case 144:
return new QueryFunction_ModelAccess_Getter_BehaviorDescriptor();
case 145:
return new QueryFunction_ModelAccess_Setter_BehaviorDescriptor();
case 146:
return new QueryFunction_ModelAccess_Validator_BehaviorDescriptor();
case 121:
return new ModelAccessor_BehaviorDescriptor();
case 91:
return new ConceptFunctionParameter_oldText_BehaviorDescriptor();
case 135:
return new QueryFunction_CellProvider_BehaviorDescriptor();
case 136:
return new QueryFunction_Color_BehaviorDescriptor();
case 148:
return new QueryFunction_NodeFactory_BehaviorDescriptor();
case 138:
return new QueryFunction_ImagePath_BehaviorDescriptor();
case 41:
return new CellMenuPart_PropertyPostfixHints_BehaviorDescriptor();
case 42:
return new CellMenuPart_PropertyPostfixHints_GetPostfixes_BehaviorDescriptor();
case 149:
return new QueryFunction_NodeListFilter_BehaviorDescriptor();
case 88:
return new ConceptFunctionParameter_childNode_BehaviorDescriptor();
case 77:
return new CellModel_NonEmptyProperty_BehaviorDescriptor();
case 165:
return new StyleSheet_BehaviorDescriptor();
case 166:
return new StyleSheetClass_BehaviorDescriptor();
case 103:
return new FontStyleStyleClassItem_BehaviorDescriptor();
case 104:
return new ForegroundColorStyleClassItem_BehaviorDescriptor();
case 2:
return new BackgroundColorStyleClassItem_BehaviorDescriptor();
case 5:
return new BracketColorStyleClassItem_BehaviorDescriptor();
case 161:
return new SelectableStyleSheetItem_BehaviorDescriptor();
case 1:
return new AutoDeletableStyleClassItem_BehaviorDescriptor();
case 97:
return new DrawBorderStyleClassItem_BehaviorDescriptor();
case 175:
return new UnderlinedStyleClassItem_BehaviorDescriptor();
case 102:
return new FontSizeStyleClassItem_BehaviorDescriptor();
case 99:
return new EditableStyleClassItem_BehaviorDescriptor();
case 105:
return new ForegroundNullColorStyleClassItem_BehaviorDescriptor();
case 167:
return new StyleSheetClassReference_BehaviorDescriptor();
case 74:
return new CellModel_Indent_BehaviorDescriptor();
case 65:
return new CellModel_BlockStart_BehaviorDescriptor();
case 64:
return new CellModel_BlockEnd_BehaviorDescriptor();
case 63:
return new CellModel_Block_BehaviorDescriptor();
case 159:
return new SelectOperation_BehaviorDescriptor();
case 160:
return new SelectPositionParameter_BehaviorDescriptor();
case 6:
return new CaretPositionParameter_BehaviorDescriptor();
case 118:
return new LayoutConstraintStyleClassItem_BehaviorDescriptor();
case 163:
return new SideTransformAnchorTagStyleClassItem_BehaviorDescriptor();
case 171:
return new TextBackgroundColorStyleClassItem_BehaviorDescriptor();
case 170:
return new TextBackgroundColorSelectedStyleClassItem_BehaviorDescriptor();
case 96:
return new DefaultCaretPositionStyleClassItem_BehaviorDescriptor();
case 125:
return new PaddingLeftStyleClassItem_BehaviorDescriptor();
case 126:
return new PaddingRightStyleClassItem_BehaviorDescriptor();
case 101:
return new FirstPositionAllowedStyleClassItem_BehaviorDescriptor();
case 117:
return new LastPositionAllowedStyleClassItem_BehaviorDescriptor();
case 131:
return new PositionStyleClassItem_BehaviorDescriptor();
case 84:
return new CellModel_TransactionalProperty_BehaviorDescriptor();
case 174:
return new TransactionalPropertyHandler_BehaviorDescriptor();
case 173:
return new TransactionPropertyHandler_oldValue_BehaviorDescriptor();
case 172:
return new TransactionPropertyHandler_newValue_BehaviorDescriptor();
case 130:
return new PositionChildrenStyleClassItem_BehaviorDescriptor();
case 22:
return new CellLayout_Indent_Old_BehaviorDescriptor();
case 98:
return new DrawBracketsStyleClassItem_BehaviorDescriptor();
case 137:
return new QueryFunction_FontStyle_BehaviorDescriptor();
case 139:
return new QueryFunction_Integer_BehaviorDescriptor();
case 154:
return new QueryFunction_Underlined_BehaviorDescriptor();
case 164:
return new StrikeOutStyleSheet_BehaviorDescriptor();
case 134:
return new QueryFunction_Boolean_BehaviorDescriptor();
case 155:
return new RGBColor_BehaviorDescriptor();
case 156:
return new ReadOnlyModelAccessor_BehaviorDescriptor();
case 79:
return new CellModel_ReadOnlyModelAccessor_BehaviorDescriptor();
case 127:
return new PaddingTopStyleClassItem_BehaviorDescriptor();
case 124:
return new PaddingBottomStyleClassItem_BehaviorDescriptor();
case 123:
return new NavigatableReferenceStyleClassItem_BehaviorDescriptor();
case 116:
return new InlineStyleDeclaration_BehaviorDescriptor();
case 132:
return new PunctuationLeftStyleClassItem_BehaviorDescriptor();
case 133:
return new PunctuationRightStyleClassItem_BehaviorDescriptor();
case 107:
return new HorizontalGapStyleClassItem_BehaviorDescriptor();
case 4:
return new BaseLineCell_BehaviorDescriptor();
case 106:
return new HorizontalAlign_BehaviorDescriptor();
case 119:
return new MatchingLabelStyleClassItem_BehaviorDescriptor();
case 142:
return new QueryFunction_MatchingNode_BehaviorDescriptor();
case 153:
return new QueryFunction_String_BehaviorDescriptor();
case 21:
return new CellLayout_Indent_BehaviorDescriptor();
case 109:
return new IndentLayoutIndentStyleClassItem_BehaviorDescriptor();
case 111:
return new IndentLayoutNewLineStyleClassItem_BehaviorDescriptor();
case 110:
return new IndentLayoutNewLineChildrenStyleClassItem_BehaviorDescriptor();
case 113:
return new IndentLayoutOnNewLineStyleClassItem_BehaviorDescriptor();
case 26:
return new CellLayout_VerticalGrid_BehaviorDescriptor();
case 112:
return new IndentLayoutNoWrapClassItem_BehaviorDescriptor();
case 83:
return new CellModel_ReferencePresentation_BehaviorDescriptor();
case 129:
return new ParametersInformationStyleClassItem_BehaviorDescriptor();
case 128:
return new ParametersInformationQuery_BehaviorDescriptor();
case 150:
return new QueryFunction_ParametersList_BehaviorDescriptor();
case 143:
return new QueryFunction_MethodPresentation_BehaviorDescriptor();
case 92:
return new ConceptFunctionParameter_parameterObject_BehaviorDescriptor();
case 140:
return new QueryFunction_IsMethodCurrent_BehaviorDescriptor();
case 87:
return new ConceptFunctionParameter_StyledText_BehaviorDescriptor();
case 0:
return new AppendTextOperation_BehaviorDescriptor();
case 162:
return new SetBoldOperation_BehaviorDescriptor();
case 168:
return new StyledTextType_BehaviorDescriptor();
case 95:
return new DefaultBaseLine_BehaviorDescriptor();
case 23:
return new CellLayout_Superscript_BehaviorDescriptor();
case 158:
return new ScriptKindClassItem_BehaviorDescriptor();
case 93:
return new ConceptFunctionParameter_selectedNode_BehaviorDescriptor();
case 24:
return new CellLayout_Table_BehaviorDescriptor();
case 169:
return new TableComponentStyleClassItem_BehaviorDescriptor();
case 71:
return new CellModel_Empty_BehaviorDescriptor();
case 122:
return new NavigatableNodeStyleClassItem_BehaviorDescriptor();
case 151:
return new QueryFunction_SNode_BehaviorDescriptor();
case 85:
return new CellModel_URL_BehaviorDescriptor();
case 157:
return new RightTransformAnchorTagWrapper_BehaviorDescriptor();
case 152:
return new QueryFunction_SeparatorText_BehaviorDescriptor();
case 120:
return new MaxWidthStyleClassItem_BehaviorDescriptor();
case 114:
return new IndentLayoutWrapAnchorStyleClassItem_BehaviorDescriptor();
case 108:
return new IndentLayoutIndentAnchorStyleClassItem_BehaviorDescriptor();
case 10:
return new CellActionMap_FunctionParm_selectedNode_BehaviorDescriptor();
case 16:
return new CellKeyMap_FunctionParm_selectedNode_BehaviorDescriptor();
case 17:
return new CellKeyMap_FunctionParm_selectedNodes_BehaviorDescriptor();
case 15:
return new CellKeyMap_FunctionParm_keyEvent_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
