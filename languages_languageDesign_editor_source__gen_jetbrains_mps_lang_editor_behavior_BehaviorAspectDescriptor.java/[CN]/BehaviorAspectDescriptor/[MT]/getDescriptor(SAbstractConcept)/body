{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0wf.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractComponent__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractPaddingStyleClassItem__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myAbstractStyledTextOperation__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myAppendTextOperation__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myAutoDeletableStyleClassItem__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myBaseEditorComponent__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myBaseLineCell__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myBooleanStyleSheetItem__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myCellActionMapDeclaration__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myCellActionMap_CanExecuteFunction__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myCellActionMap_ExecuteFunction__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myCellKeyMapDeclaration__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myCellKeyMap_AbstractFunction__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myCellKeyMap_IsApplicableFunction__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myCellMenuComponent__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myCellMenuComponentFeature_Link__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myCellMenuComponentFeature_Property__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myCellMenuDescriptor__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myCellMenuPart_Abstract__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myCellMenuPart_AbstractGroup_DescriptionText__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myCellMenuPart_AbstractGroup_MatchingText__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myCellMenuPart_AbstractGroup_Query__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myCellMenuPart_Generic_Group_Handler__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myCellMenuPart_Generic_Item_Handler__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myCellMenuPart_PropertyPostfixHints_GetPostfixes__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myCellMenuPart_PropertyValues_GetValues__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myCellMenuPart_ReplaceChild_CustomChildConcept_Query__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myCellMenuPart_ReplaceChild_Group_Create__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myCellMenuPart_ReplaceChild_Group_Query__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myCellMenuPart_ReplaceChild_Item_Create__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myCellMenuPart_ReplaceChild_defaultConceptOfChild__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myCellMenuPart_ReplaceNode_CustomNodeConcept__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myCellMenuPart_ReplaceNode_Group_Create__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myCellModel_Alternation__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myCellModel_AttributedLinkCell__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myCellModel_AttributedNodeCell__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myCellModel_AttributedPropertyCell__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myCellModel_Block__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myCellModel_BlockEnd__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myCellModel_BlockStart__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myCellModel_Collection__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myCellModel_Component__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myCellModel_Constant__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myCellModel_Custom__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myCellModel_Empty__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myCellModel_Error__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myCellModel_Indent__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myCellModel_ListWithRole__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myCellModel_ModelAccess__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myCellModel_NextEditor__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myCellModel_NonEmptyProperty__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myCellModel_Property__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myCellModel_ReadOnlyModelAccessor__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myCellModel_RefCell__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myCellModel_RefNode__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myCellModel_RefNodeList__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myCellModel_TransactionalProperty__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myCellModel_URL__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myCellModel_WithRole__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myConceptEditorDeclaration__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myConceptEditorHintDeclaration__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myConceptFunctionParameter_StyledText__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myConceptFunctionParameter_oldText__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return myConceptFunctionParameter_parameterObject__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myConceptFunctionParameter_text__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return myContextAssistantMenu__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return myContextAssistantMenuContribution__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return myContextAssistantMenuReference__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return myContextAssistantMenuReference_Default__BehaviorDescriptor;
}
break;
case 69:
if (true) {
return myContextAssistantMenuReference_Named__BehaviorDescriptor;
}
break;
case 70:
if (true) {
return myContextAssistantMenu_Default__BehaviorDescriptor;
}
break;
case 71:
if (true) {
return myContextExpression_ContextAssistantCondition__BehaviorDescriptor;
}
break;
case 72:
if (true) {
return myDefaultBaseLine__BehaviorDescriptor;
}
break;
case 73:
if (true) {
return myDrawBorderStyleClassItem__BehaviorDescriptor;
}
break;
case 74:
if (true) {
return myDrawBracketsStyleClassItem__BehaviorDescriptor;
}
break;
case 75:
if (true) {
return myEditableStyleClassItem__BehaviorDescriptor;
}
break;
case 76:
if (true) {
return myEditorCellModel__BehaviorDescriptor;
}
break;
case 77:
if (true) {
return myEditorComponentDeclaration__BehaviorDescriptor;
}
break;
case 78:
if (true) {
return myFirstPositionAllowedStyleClassItem__BehaviorDescriptor;
}
break;
case 79:
if (true) {
return myForegroundColorStyleClassItem__BehaviorDescriptor;
}
break;
case 80:
if (true) {
return myForegroundNullColorStyleClassItem__BehaviorDescriptor;
}
break;
case 81:
if (true) {
return myINamedContextAssistantItems__BehaviorDescriptor;
}
break;
case 82:
if (true) {
return myINodeProvider__BehaviorDescriptor;
}
break;
case 83:
if (true) {
return myIQueryFunction_Color__BehaviorDescriptor;
}
break;
case 84:
if (true) {
return myIStyleContainer__BehaviorDescriptor;
}
break;
case 85:
if (true) {
return myIStyleSheetMember__BehaviorDescriptor;
}
break;
case 86:
if (true) {
return myIndentLayoutIndentAnchorStyleClassItem__BehaviorDescriptor;
}
break;
case 87:
if (true) {
return myIndentLayoutIndentStyleClassItem__BehaviorDescriptor;
}
break;
case 88:
if (true) {
return myIndentLayoutNewLineChildrenStyleClassItem__BehaviorDescriptor;
}
break;
case 89:
if (true) {
return myIndentLayoutNewLineStyleClassItem__BehaviorDescriptor;
}
break;
case 90:
if (true) {
return myIndentLayoutNoWrapClassItem__BehaviorDescriptor;
}
break;
case 91:
if (true) {
return myIndentLayoutOnNewLineStyleClassItem__BehaviorDescriptor;
}
break;
case 92:
if (true) {
return myIndentLayoutWrapAnchorStyleClassItem__BehaviorDescriptor;
}
break;
case 93:
if (true) {
return myInlineEditorComponent__BehaviorDescriptor;
}
break;
case 94:
if (true) {
return myLastPositionAllowedStyleClassItem__BehaviorDescriptor;
}
break;
case 95:
if (true) {
return myPaddingBottomStyleClassItem__BehaviorDescriptor;
}
break;
case 96:
if (true) {
return myPaddingLeftStyleClassItem__BehaviorDescriptor;
}
break;
case 97:
if (true) {
return myPaddingRightStyleClassItem__BehaviorDescriptor;
}
break;
case 98:
if (true) {
return myPaddingTopStyleClassItem__BehaviorDescriptor;
}
break;
case 99:
if (true) {
return myPunctuationLeftStyleClassItem__BehaviorDescriptor;
}
break;
case 100:
if (true) {
return myPunctuationRightStyleClassItem__BehaviorDescriptor;
}
break;
case 101:
if (true) {
return myQueryFunction_AttributeStyleParameter__BehaviorDescriptor;
}
break;
case 102:
if (true) {
return myQueryFunction_Boolean__BehaviorDescriptor;
}
break;
case 103:
if (true) {
return myQueryFunction_CellProvider__BehaviorDescriptor;
}
break;
case 104:
if (true) {
return myQueryFunction_Color__BehaviorDescriptor;
}
break;
case 105:
if (true) {
return myQueryFunction_ColorComposit__BehaviorDescriptor;
}
break;
case 106:
if (true) {
return myQueryFunction_ContextAssistant__BehaviorDescriptor;
}
break;
case 107:
if (true) {
return myQueryFunction_ContextAssistantCondition__BehaviorDescriptor;
}
break;
case 108:
if (true) {
return myQueryFunction_ContextAssistantExecuteFunction__BehaviorDescriptor;
}
break;
case 109:
if (true) {
return myQueryFunction_ContextAssistantTargetNode__BehaviorDescriptor;
}
break;
case 110:
if (true) {
return myQueryFunction_ContextAssistantText__BehaviorDescriptor;
}
break;
case 111:
if (true) {
return myQueryFunction_FontStyle__BehaviorDescriptor;
}
break;
case 112:
if (true) {
return myQueryFunction_ImagePath__BehaviorDescriptor;
}
break;
case 113:
if (true) {
return myQueryFunction_Integer__BehaviorDescriptor;
}
break;
case 114:
if (true) {
return myQueryFunction_IsMethodCurrent__BehaviorDescriptor;
}
break;
case 115:
if (true) {
return myQueryFunction_JComponent__BehaviorDescriptor;
}
break;
case 116:
if (true) {
return myQueryFunction_MethodPresentation__BehaviorDescriptor;
}
break;
case 117:
if (true) {
return myQueryFunction_ModelAccess_Getter__BehaviorDescriptor;
}
break;
case 118:
if (true) {
return myQueryFunction_ModelAccess_Setter__BehaviorDescriptor;
}
break;
case 119:
if (true) {
return myQueryFunction_ModelAccess_Validator__BehaviorDescriptor;
}
break;
case 120:
if (true) {
return myQueryFunction_ModuleAndPath__BehaviorDescriptor;
}
break;
case 121:
if (true) {
return myQueryFunction_NodeCondition__BehaviorDescriptor;
}
break;
case 122:
if (true) {
return myQueryFunction_NodeFactory__BehaviorDescriptor;
}
break;
case 123:
if (true) {
return myQueryFunction_NodeListFilter__BehaviorDescriptor;
}
break;
case 124:
if (true) {
return myQueryFunction_ParametersList__BehaviorDescriptor;
}
break;
case 125:
if (true) {
return myQueryFunction_SNode__BehaviorDescriptor;
}
break;
case 126:
if (true) {
return myQueryFunction_SeparatorText__BehaviorDescriptor;
}
break;
case 127:
if (true) {
return myQueryFunction_String__BehaviorDescriptor;
}
break;
case 128:
if (true) {
return myQueryFunction_Style__BehaviorDescriptor;
}
break;
case 129:
if (true) {
return myQueryFunction_StyleParameter__BehaviorDescriptor;
}
break;
case 130:
if (true) {
return myQueryFunction_Underlined__BehaviorDescriptor;
}
break;
case 131:
if (true) {
return myQueryHintsSpecification__BehaviorDescriptor;
}
break;
case 132:
if (true) {
return myRGBColor__BehaviorDescriptor;
}
break;
case 133:
if (true) {
return myReadOnlyStyleClassItem__BehaviorDescriptor;
}
break;
case 134:
if (true) {
return myScriptKindClassItem__BehaviorDescriptor;
}
break;
case 135:
if (true) {
return mySelectInEditorOperation__BehaviorDescriptor;
}
break;
case 136:
if (true) {
return mySelectableStyleSheetItem__BehaviorDescriptor;
}
break;
case 137:
if (true) {
return mySetBoldOperation__BehaviorDescriptor;
}
break;
case 138:
if (true) {
return myStrikeOutStyleSheet__BehaviorDescriptor;
}
break;
case 139:
if (true) {
return myStyleAttributeDeclaration__BehaviorDescriptor;
}
break;
case 140:
if (true) {
return myStyleClass__BehaviorDescriptor;
}
break;
case 141:
if (true) {
return myStyleClassItem__BehaviorDescriptor;
}
break;
case 142:
if (true) {
return myStyleKey__BehaviorDescriptor;
}
break;
case 143:
if (true) {
return myStyleSheet__BehaviorDescriptor;
}
break;
case 144:
if (true) {
return myStyleSheetClass__BehaviorDescriptor;
}
break;
case 145:
if (true) {
return mySynchronizeable__BehaviorDescriptor;
}
break;
case 146:
if (true) {
return myTextBackgroundColorSelectedStyleClassItem__BehaviorDescriptor;
}
break;
case 147:
if (true) {
return myTextBackgroundColorStyleClassItem__BehaviorDescriptor;
}
break;
case 148:
if (true) {
return myTransactionalPropertyHandler__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
