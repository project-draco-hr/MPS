{
  if (!(SNodeOperations.isInstanceOf(((SNode)AddCast_QuickFix.this.getField("expression")[0]),"jetbrains.mps.baseLanguage.structure.Expression"))) {
    return;
  }
  SNode actualType=(SNodeOperations.isInstanceOf(((SNode)AddCast_QuickFix.this.getField("desiredType")[0]),"jetbrains.mps.baseLanguage.structure.Type") ? ((SNode)AddCast_QuickFix.this.getField("desiredType")[0]) : TypeChecker.getInstance().getTypeOf(((SNode)AddCast_QuickFix.this.getField("desiredType")[0])));
  SNode cast=SNodeOperations.replaceWithNewChild(((SNode)AddCast_QuickFix.this.getField("expression")[0]),"jetbrains.mps.baseLanguage.structure.CastExpression");
  SLinkOperations.setTarget(cast,"expression",((SNode)AddCast_QuickFix.this.getField("expression")[0]),true);
  SLinkOperations.setTarget(cast,"type",SNodeOperations.copyNode(actualType),true);
  boolean needsParensAroundCastExpression=PrecedenceUtil.needsParensAroundCastExpression(cast);
  if (needsParensAroundCastExpression) {
    SNode parens=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null);
    SLinkOperations.setTarget(parens,"expression",((SNode)AddCast_QuickFix.this.getField("expression")[0]),true);
    SLinkOperations.setTarget(cast,"expression",parens,true);
  }
}
