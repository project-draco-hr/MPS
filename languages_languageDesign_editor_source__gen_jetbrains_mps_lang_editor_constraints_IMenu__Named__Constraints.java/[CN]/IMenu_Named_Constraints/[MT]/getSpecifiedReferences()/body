{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x169efbc9a9048c53L,0x5b7b4c4d511049b4L,"conceptDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x169efbc9a9048c53L,0x5b7b4c4d511049b4L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ib2924_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SConcept acd=MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
            if (!(SNodeOperations.getModel(_context.getContextNode()).getModule() instanceof Language)) {
              return new ModelPlusImportedScope(SNodeOperations.getModel(_context.getContextNode()),true,acd);
            }
            return Scopes.forLanguageConcepts(_context.getContextNode(),acd);
          }
        }
      }
;
    }
  }
);
  return references;
}
