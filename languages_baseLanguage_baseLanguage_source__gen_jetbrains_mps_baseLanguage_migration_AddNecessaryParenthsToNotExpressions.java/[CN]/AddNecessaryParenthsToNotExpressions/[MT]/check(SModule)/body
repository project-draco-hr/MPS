{
{
    final SearchScope scope=CommandUtil.createScope(m);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null,false,context),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbcf6bd10dL,"jetbrains.mps.baseLanguage.structure.NotExpression"))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.getContainingRoot(it) != SNodeOperations.getNode("r:1dca72a1-44ae-4339-a783-4859610b0285(jetbrains.mps.baseLanguage.migration)","4787009421625770137");
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return PrecedenceUtil.needsParensAroundNotExpression(it);
      }
    }
).select(new ISelector<SNode,Problem>(){
      public Problem select(      SNode it){
        return ((Problem)new NotMigratedNode(it){
          public String getMessage(){
            return "Missing parenths around NotExpression";
          }
        }
);
      }
    }
);
  }
}
