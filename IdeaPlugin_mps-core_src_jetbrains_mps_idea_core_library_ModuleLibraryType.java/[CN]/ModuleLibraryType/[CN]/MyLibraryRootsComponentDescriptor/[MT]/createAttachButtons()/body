{
  return Arrays.asList(new AttachRootButtonDescriptor(ModuleXmlRootDetector.MPS_MODULE_XML,MPSBundle.message("library.attach.mps.solution")){
    @Override public VirtualFile[] selectFiles(    @NotNull JComponent parent,    @Nullable VirtualFile initialSelection,    @Nullable final Module contextModule,    @NotNull final LibraryEditor libraryEditor){
      SRepository repository=ProjectHelper.getProjectRepository(contextModule.getProject());
      List<SModuleReference> visibleModules=calculateVisibleModules(repository,new HashSet<VirtualFile>(Arrays.asList(libraryEditor.getFiles(ModuleXmlRootDetector.MPS_MODULE_XML))));
      ChooseElementsDialog<SModuleReference> chooser=new SModuleReferenceChooserDialog(parent,visibleModules);
      chooser.show();
      final List<SModuleReference> chosenElements=chooser.getChosenElements();
      final Set<VirtualFile> addedDescriptors=new LinkedHashSet<VirtualFile>();
      final Set<VirtualFile> addedJars=new LinkedHashSet<VirtualFile>();
      repository.getModelAccess().runReadAction(new Runnable(){
        @Override public void run(){
          for (          SModuleReference module : chosenElements) {
            AbstractModule chosenModule=(AbstractModule)ModuleRepositoryFacade.getInstance().getModule(module);
            addedDescriptors.add(VirtualFileUtils.getOrCreateVirtualFile(chosenModule.getDescriptorFile()));
            for (            VirtualFile virtualFile : getModuleJars(chosenModule)) {
              addedJars.add(virtualFile);
            }
          }
        }
      }
);
      for (      VirtualFile classesJar : addedJars) {
        libraryEditor.addRoot(classesJar,OrderRootType.CLASSES);
      }
      return addedDescriptors.toArray(new VirtualFile[addedDescriptors.size()]);
    }
  }
);
}
