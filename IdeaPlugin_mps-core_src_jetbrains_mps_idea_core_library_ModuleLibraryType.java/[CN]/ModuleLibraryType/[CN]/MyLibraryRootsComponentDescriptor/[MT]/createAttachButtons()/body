{
  return Arrays.asList(new AttachRootButtonDescriptor(ModuleXmlRootDetector.MPS_MODULE_XML,MPSBundle.message("library.attach.mps.solution")){
    @Override public VirtualFile[] selectFiles(    @NotNull JComponent parent,    @Nullable VirtualFile initialSelection,    @Nullable final Module contextModule,    @NotNull final LibraryEditor libraryEditor){
      List<ModuleReference> visibleModules=calculateVisibleModules(new HashSet<VirtualFile>(Arrays.asList(libraryEditor.getFiles(ModuleXmlRootDetector.MPS_MODULE_XML))));
      ChooseElementsDialog<ModuleReference> chooser=new ModuleReferenceChooserDialog(parent,visibleModules);
      chooser.show();
      final List<ModuleReference> chosenElements=chooser.getChosenElements();
      final Set<VirtualFile> addedDescriptors=new LinkedHashSet<VirtualFile>();
      final Set<VirtualFile> addedJars=new LinkedHashSet<VirtualFile>();
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          for (          ModuleReference module : chosenElements) {
            addedDescriptors.add(VirtualFileUtils.getVirtualFile(ModuleRepositoryFacade.getInstance().getModule(module).getDescriptorFile()));
            for (            VirtualFile virtualFile : getModuleJars((Solution)ModuleRepositoryFacade.getInstance().getModule(module))) {
              addedJars.add(virtualFile);
            }
          }
        }
      }
);
      for (      VirtualFile classesJar : addedJars) {
        libraryEditor.addRoot(classesJar,OrderRootType.CLASSES);
      }
      return addedDescriptors.toArray(new VirtualFile[addedDescriptors.size()]);
    }
  }
);
}
