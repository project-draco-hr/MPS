{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("defaultConcreteConcept",new BaseReferenceConstraintsDescriptor("defaultConcreteConcept",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode concept=SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getReferenceNode(),"jetbrains.mps.lang.constraints.structure.ConceptConstraints",true,false),"concept",false);
          Language currentLanguage=SModelUtil.getDeclaringLanguage(concept);
          Set<String> allDescendants=LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(NameUtil.nodeFQName(concept));
          List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
          for (          String descendant : allDescendants) {
            SNode declaration=SModelUtil.findConceptDeclaration(descendant,GlobalScope.getInstance());
            Language declaringLanguage=SModelUtil.getDeclaringLanguage(declaration);
            if (eq_guz8cy_a0c0h0a0a0a0b0a1a0b0d(currentLanguage,declaringLanguage)) {
              ListSequence.fromList(result).addElement(SNodeOperations.cast(declaringLanguage.findConceptDeclaration(NameUtil.shortNameFromLongName(descendant)),"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
            }
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_guz8cy_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
