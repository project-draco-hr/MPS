{
  if (operation == null) {
    return "????";
  }
  if (StringUtils.isNotEmpty(SConceptPropertyOperations.getString(operation,"alias"))) {
    return SConceptPropertyOperations.getString(operation,"alias");
  }
  if (SNodeOperations.isInstanceOf(operation,"jetbrains.mps.baseLanguage.structure.IMethodCall")) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(operation,"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false),"name") + "(" + ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(operation,"jetbrains.mps.baseLanguage.structure.IMethodCall"),"actualArgument",true)).foldLeft("",new ILeftCombinator<SNode,String>(){
      public String combine(      String s,      SNode it){
        return ((StringUtils.isEmpty(s) ? "" : s + ",")) + EvaluatorConcept_Behavior.call_getPresentation_9172312269976661829(thisNode,it);
      }
    }
)+ ")";
  }
  return ((String)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(operation,"jetbrains.mps.lang.core.structure.BaseConcept"),"virtual_getPresentation_1213877396640",new Class[]{SNode.class}));
}
