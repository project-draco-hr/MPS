{
  boolean left=SNodeOperations.hasRole(expr,"jetbrains.mps.baseLanguage.structure.BinaryOperation","leftExpression");
  boolean right=SNodeOperations.hasRole(expr,"jetbrains.mps.baseLanguage.structure.BinaryOperation","rightExpression");
  if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp),"jetbrains.mps.baseLanguage.structure.Type")) || !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(expr),"jetbrains.mps.baseLanguage.structure.Type"))) {
    return 0;
  }
  SNode opType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(binOp),"jetbrains.mps.baseLanguage.structure.Type");
  SNode exprType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(expr),"jetbrains.mps.baseLanguage.structure.Type");
  SNode oppositeOp=null;
  if (left) {
    oppositeOp=SLinkOperations.getTarget(binOp,"rightExpression",true);
  }
  if (right) {
    oppositeOp=SLinkOperations.getTarget(binOp,"leftExpression",true);
  }
  SNode oppExprType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(oppositeOp),"jetbrains.mps.baseLanguage.structure.Type");
  if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp),"jetbrains.mps.baseLanguage.math.structure.MatrixType") && (SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.MinusExpression"))) {
    return 0;
  }
 else {
    if (SNodeOperations.isInstanceOf(oppExprType,"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType") || SNodeOperations.isInstanceOf(exprType,"jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType")) {
      if (SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.MinusExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.DivExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.MulExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation")) {
        return pickExplicitWidening(exprType,opType);
      }
 else       if (SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.EqualsExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.NotEqualsExpression") || SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.LessThanExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.GreaterThanExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression")|| SNodeOperations.isInstanceOf(binOp,"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
        if (SNodeOperations.isInstanceOf(oppositeOp,"jetbrains.mps.baseLanguage.structure.NullLiteral") || SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.NullLiteral")) {
          return 0;
        }
        return pickExplicitWidening(exprType,join(exprType,oppExprType));
      }
 else {
        return 0;
      }
    }
 else {
      return 0;
    }
  }
}
