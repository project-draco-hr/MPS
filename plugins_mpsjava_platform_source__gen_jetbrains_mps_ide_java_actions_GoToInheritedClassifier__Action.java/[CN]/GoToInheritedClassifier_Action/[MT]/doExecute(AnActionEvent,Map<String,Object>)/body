{
  try {
    final ModelAccess modelAccess=((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess();
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoImplementation");
    final List<String> finderClasses=ListSequence.fromList(new ArrayList<String>());
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("classifierNode")),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
        }
 else {
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder");
        }
      }
    }
);
    final List<SNodeReference> nodes=ListSequence.fromList(new ArrayList<SNodeReference>());
    ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.fromMap(_params).get("project")),"Searching...",true){
      @Override public void run(      @NotNull final ProgressIndicator p){
        modelAccess.runReadAction(new Runnable(){
          public void run(){
            for (            String finderClass : finderClasses) {
              List<SNode> list=FindUtils.executeFinder(finderClass,((SNode)MapSequence.fromMap(_params).get("classifierNode")),GlobalScope.getInstance(),new ProgressMonitorAdapter(p));
              ListSequence.fromList(nodes).addSequence(ListSequence.fromList(list).select(new ISelector<SNode,SNodePointer>(){
                public SNodePointer select(                SNode it){
                  return new SNodePointer(it);
                }
              }
));
              ListSequence.fromList(nodes).addSequence(ListSequence.fromList(list).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.EnumClass");
                }
              }
).translate(new ITranslator2<SNode,SNodePointer>(){
                public Iterable<SNodePointer> translate(                SNode it){
                  return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.EnumClass"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245097125l,1083245396908l,"enumConstant"))).select(new ISelector<SNode,SNodePointer>(){
                    public SNodePointer select(                    SNode e){
                      return new SNodePointer(e);
                    }
                  }
);
                }
              }
));
            }
          }
        }
);
      }
    }
);
    GoToHelper.showInheritedClassesMenu(nodes,GoToHelper.getRelativePoint(((EditorCell)MapSequence.fromMap(_params).get("selectedCell")),event.getInputEvent()),ProjectHelper.toMPSProject(((Project)MapSequence.fromMap(_params).get("project"))));
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "GoToInheritedClassifier",t);
    }
  }
}
