{
  final List<String> additionalLanguages=new ArrayList<String>();
  final List<SModelReference> additionalModels=new ArrayList<SModelReference>();
  final Set<String> necessaryDevKits=new HashSet<String>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      SModelReference modelReference : necessaryImports) {
        if (modelReference != null && !(targetModel.hasImportedModel(modelReference)) && !(targetModel.getSModelReference().equals(modelReference)))         additionalModels.add(modelReference);
      }
      for (      String namespace : necessaryLanguages) {
        if (!targetModel.hasLanguage(namespace))         additionalLanguages.add(namespace);
      }
      necessaryImports.retainAll(additionalModels);
      necessaryLanguages.retainAll(additionalLanguages);
    }
  }
);
  if ((!necessaryImports.isEmpty()) || (!necessaryLanguages.isEmpty()) || (!necessaryDevKits.isEmpty())) {
    AddRequiredModelImportsDialog dialog=ModelAccess.instance().runReadAction(new Computable<AddRequiredModelImportsDialog>(){
      public AddRequiredModelImportsDialog compute(){
        AddRequiredModelImportsDialog dialog=new AddRequiredModelImportsDialog(context.getMainFrame(),targetModel,necessaryImports,necessaryLanguages,necessaryDevKits);
        dialog.setModal(true);
        return dialog;
      }
    }
);
    dialog.showDialog();
    return (!dialog.isCanceled());
  }
  return true;
}
