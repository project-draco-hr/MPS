{
  return new SubstituteInfoPartExt(){
    public List<SubstituteAction> createActions(    CellContext cellContext,    final EditorContext editorContext){
      AbstractNodeSubstituteAction action=new AbstractNodeSubstituteAction(childNodeConcept,childNodeConcept,container){
        @Override public boolean canSubstitute(        String string){
          if (!(hasConnectionDragFeedback()) || !(super.canSubstitute(string))) {
            return false;
          }
          DiagramCell.ConnectionInfo connectionInfo=getConnectionInfo();
          return connectionInfo.isValid() && canCreateConnector.invoke(connectionInfo.getFromNode(),connectionInfo.getFromId(),connectionInfo.getToNode(),connectionInfo.getToId());
        }
        @Override protected SNode doSubstitute(        @Nullable EditorContext context,        String string){
          SNode result=NodeFactoryManager.createNode(childNodeConcept,null,container,SNodeOperations.getModel(container));
          ListSequence.fromList(SNodeOperations.getChildren(container,MetaAdapterByDeclaration.getContainmentLink(containingLink))).addElement(result);
          DiagramCell.ConnectionInfo connectionInfo=getConnectionInfo();
          setConnectorCallback.invoke(result,connectionInfo.getFromNode(),connectionInfo.getFromId(),connectionInfo.getToNode(),connectionInfo.getToId());
          return result;
        }
      }
;
      return Collections.<SubstituteAction>singletonList(new DiagramCell.DiagramSubstituteActionWraper(action));
    }
  }
;
}
