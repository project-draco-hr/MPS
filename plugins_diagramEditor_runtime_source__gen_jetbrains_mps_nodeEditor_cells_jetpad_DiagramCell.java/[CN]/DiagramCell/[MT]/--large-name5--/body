{
  return new SubstituteInfoPartExt(){
    public List<SubstituteAction> createActions(    CellContext cellContext,    EditorContext editorContext){
      List<SubstituteAction> result=new ArrayList<SubstituteAction>();
      for (      SubstituteAction action : ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(container,null,childNodeConcept,new DefaultChildNodeSetter(containingLink),editorContext.getOperationContext()))) {
        result.add(new NodeSubstituteActionWrapper(action){
          @Override public SNode substitute(          @Nullable EditorContext context,          String string){
            SNode result=super.substitute(context,string);
            setConnectorCallback.invoke(result,myCurrentFrom,myCurrentFromId,myCurrentTo,myCurrentToId);
            return result;
          }
          @Override public boolean canSubstitute(          String string){
            return super.canSubstitute(string) && canCreateConnector.invoke(myCurrentFrom,myCurrentFromId,myCurrentTo,myCurrentToId);
          }
        }
);
      }
      return result;
    }
  }
;
}
