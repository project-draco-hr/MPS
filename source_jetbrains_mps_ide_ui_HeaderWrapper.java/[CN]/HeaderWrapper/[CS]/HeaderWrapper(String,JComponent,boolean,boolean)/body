{
  super(new BorderLayout());
  setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,1));
  JPanel labelPanel=new JPanel(new BorderLayout());
  myLabel.setText(text);
  myLabel.setFont(myLabel.getFont().deriveFont(Font.BOLD));
  myLabel.setForeground(Color.WHITE);
  myLabel.setOpaque(true);
  myLabel.setBorder(BorderFactory.createEmptyBorder(1,3,1,3));
  myLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myComponent.requestFocus();
    }
  }
);
  if (showMinimizeButton || showCloseButton) {
    myButtonsPanel=new JPanel(new GridLayout(1,0));
    if (showMinimizeButton) {
      myMinimizeButton=new JButton(new AbstractAction("",Icons.MINIMIZE_ICON){
        public void actionPerformed(        ActionEvent e){
          doMinimize();
        }
      }
);
      setupButton(myMinimizeButton);
      myButtonsPanel.add(myMinimizeButton);
    }
    if (showCloseButton) {
      myCloseButton=new JButton(new AbstractAction("",Icons.CLOSE_ICON){
        public void actionPerformed(        ActionEvent e){
          doClose();
        }
      }
);
      setupButton(myCloseButton);
      myButtonsPanel.add(myCloseButton);
    }
    labelPanel.add(myButtonsPanel,BorderLayout.EAST);
  }
  labelPanel.add(myLabel,BorderLayout.CENTER);
  myComponent=component;
  add(labelPanel,BorderLayout.NORTH);
  add(myComponent,BorderLayout.CENTER);
  updateLabel();
  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      updateLabel();
    }
  }
);
}
