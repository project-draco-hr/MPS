{
  SNode setterVisibility=Property_Behavior.call_getSetterVisibility_1213877383188(thisNode);
  if (SNodeOperations.isInstanceOf(setterVisibility,"jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
    return true;
  }
  if (SNodeOperations.isInstanceOf(setterVisibility,"jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
    return ListSequence.fromList(SNodeOperations.getAncestors(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier",true)).last() == ListSequence.fromList(SNodeOperations.getAncestors(contextClassifier,"jetbrains.mps.baseLanguage.structure.Classifier",true)).last();
  }
  String contextNodePackage=VisibilityUtil.packageName(contextNode);
  String contextClassifierPackage=VisibilityUtil.packageName(contextClassifier);
  if ((setterVisibility == null)) {
    return eq_9xvv7i_a0a0i0i(contextNodePackage,contextClassifierPackage);
  }
  if (SNodeOperations.isInstanceOf(setterVisibility,"jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
    String declarationClassifierPackage=VisibilityUtil.packageName(Classifier_Behavior.call_getContextClassifier_6172562527426750080(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"))),thisNode));
    if (eq_9xvv7i_a0b0k0i(contextNodePackage,declarationClassifierPackage)) {
      return true;
    }
    Iterable<SNode> possibleClassifiers=ListSequence.fromList(SNodeOperations.getAncestors(contextNode,"jetbrains.mps.baseLanguage.structure.Classifier",true)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SetSequence.fromSet(ClassifierScopeUtils.getExtendedClassifiers(it)).contains(contextClassifier);
      }
    }
);
    if (!(SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
      return Sequence.fromIterable(possibleClassifiers).isNotEmpty();
    }
 else {
      SNode leftClassifier=DotExpression_Behavior.call_getClassifier_1213877410697(SNodeOperations.cast(contextNode,"jetbrains.mps.baseLanguage.structure.DotExpression"));
      final Set<SNode> extendedClassifiers=SetSequence.fromSetWithValues(new HashSet<SNode>(),ClassifierScopeUtils.getExtendedClassifiers(leftClassifier));
      return Sequence.fromIterable(possibleClassifiers).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SetSequence.fromSet(extendedClassifiers).contains(it);
        }
      }
);
    }
  }
  return false;
}
