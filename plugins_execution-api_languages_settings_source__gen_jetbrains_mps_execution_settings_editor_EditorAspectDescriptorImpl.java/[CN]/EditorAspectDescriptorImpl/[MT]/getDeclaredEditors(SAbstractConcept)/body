{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new CheckProperitesOperation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new DeprecatedAnnotation_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorExpression_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorOperationCall_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorPropertyDeclaration_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new EditorPropertyReference_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new GetEditorOperation_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new GridBagConstraints_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentConfiguration_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentConfigurationTemplate_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentConfigurationTemplateInitializer_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentConfigurationType_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentPropertyDeclaration_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new PersistentPropertyReferenceOperation_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReportConfigurationErrorStatement_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new SettingsEditor_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new SettingsEditorType_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateParameter_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplateParameterReference_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new TemplatePersistentConfigurationType_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
