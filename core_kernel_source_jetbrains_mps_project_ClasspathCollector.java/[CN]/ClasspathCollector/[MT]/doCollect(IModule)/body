{
  if (myVisited.contains(current)) {
    return;
  }
  myVisited.add(current);
  if (current.isPackaged()) {
    try {
      File parent=current.getBundleHome().getParentFile();
      String name=current.getModuleUID() + ".lib.jar";
      File file=new File(parent,name);
      if (file.exists()) {
        myResult.add(new JarFileClassPathItem(file.getPath()));
      }
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
  myResult.add(current.getClassPathItem());
  for (  IModule dep : current.getDependOnModules()) {
    doCollect(dep);
  }
  for (  Language l : current.getUsedLanguages()) {
    if (l.isPackaged()) {
      try {
        File parent=current.getBundleHome().getParentFile();
        String name=current.getModuleUID() + ".runtime.jar";
        File file=new File(parent,name);
        if (file.exists()) {
          myResult.add(new JarFileClassPathItem(file.getPath()));
        }
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
    myResult.add(l.getLanguageRuntimeClasspath());
    for (    IModule runtimeModule : l.getRuntimeDependOnModules()) {
      doCollect(runtimeModule);
    }
  }
  if (current instanceof Language) {
    Language l=(Language)current;
    for (    Language extended : l.getExtendedLanguages()) {
      doCollect(extended);
    }
  }
}
