{
  Set<IModule> modules=new LinkedHashSet<IModule>();
  for (  IModule m : myStart) {
    m.getDependenciesManager().collectModules(modules,Deptype.COMPILE);
  }
  for (  IModule m : new HashSet<IModule>(modules)) {
    if (m instanceof Language) {
      for (      Generator generator : ((Language)m).getGenerators()) {
        if (!modules.contains(generator)) {
          generator.getDependenciesManager().collectModules(modules,Deptype.COMPILE);
        }
      }
    }
  }
  for (  IModule module : modules) {
    addPart(module.getClassPathItem());
  }
  CompositeClassPathItem result=new CompositeClassPathItem();
  if (includeStubSolutions) {
    result.add(CommonPaths.getJDKClassPath());
    result.add(CommonPaths.getMPSClassPath());
    for (    String s : CommonPaths.getMPSPaths(ClasspathReader.ClassType.TEST)) {
      try {
        result.add(ClassPathFactory.getInstance().createFromPath(s,null));
      }
 catch (      IOException e) {
      }
    }
  }
  for (  IClassPathItem item : myResult) {
    result.add(item);
  }
  return result.optimize();
}
