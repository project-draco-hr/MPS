{
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.TypeVariableReference") || SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
    return type;
  }
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.UpperBoundType",null);
    SLinkOperations.setTarget(res,"bound",SNodeOperations.copyNode(getTypeCoercedToClassifierType(SLinkOperations.getTarget(type,"bound",true))),true);
  }
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
    SNode at=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayType",null);
    SLinkOperations.setTarget(at,"componentType",getTypeCoercedToClassifierType(SNodeOperations.copyNode(SLinkOperations.getTarget(type,"componentType",true))),true);
    return at;
  }
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType",null);
    for (    SNode arg : SLinkOperations.getTargets(type,"argument",true)) {
      if (SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.structure.Type")) {
        SLinkOperations.addChild(res,"argument",getTypeCoercedToClassifierType(arg));
      }
 else {
        Logger.getLogger(ClassifierTypeUtil.class).warning("Argument of an instance of MEET type is not a subconcept of Type");
      }
    }
    return res;
  }
  SNode cType=(SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType") ? (SNode)type : null);
  if ((cType == null)) {
    SNode ctw=TypeChecker.getInstance().getRuntimeSupport().coerce_(type,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
    SNode cts=TypeChecker.getInstance().getRuntimeSupport().coerce_(type,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
    if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.collections.structure.SequenceType") && !("Iterable".equals(SPropertyOperations.getString(SLinkOperations.getTarget(cts,"classifier",false),"name")))) {
      System.err.println("*** Gotcha! *** coerceStrong( " + BaseConcept_Behavior.call_getPresentation_1213877396640(type) + " <: concept = ClassifierType) == "+ BaseConcept_Behavior.call_getPresentation_1213877396640(cts)+ ", coerce( "+ BaseConcept_Behavior.call_getPresentation_1213877396640(type)+ " <: concept = ClassifierType) == "+ BaseConcept_Behavior.call_getPresentation_1213877396640(ctw));
    }
    cType=((cts != null) ? cts : ctw);
  }
  if ((cType != null)) {
    List<SNode> params=SLinkOperations.getTargets(cType,"parameter",true);
    if (params != null && params.size() > 0) {
      SNode res=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      SLinkOperations.setTarget(res,"classifier",SLinkOperations.getTarget(cType,"classifier",false),false);
      for (      SNode p : params) {
        SLinkOperations.addChild(res,"parameter",SNodeOperations.copyNode(getTypeCoercedToClassifierType(p)));
      }
      return res;
    }
    return cType;
  }
  return type;
}
