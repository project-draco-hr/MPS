{
  SNode purified=(SNode)type;
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.TypeVariableReference") || SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
    return purified;
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.UpperBoundType",null);
    SLinkOperations.setTarget(res,"bound",SNodeOperations.copyNode(getTypeCoercedToClassifierType(SLinkOperations.getTarget(SNodeOperations.cast(purified,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true))),true);
    return res;
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
    SNode at=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayType",null);
    SLinkOperations.setTarget(at,"componentType",coerceToClassifierTypeOrPrimitive(SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(purified,"jetbrains.mps.baseLanguage.structure.ArrayType"),"componentType",true))),true);
    return at;
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.NullType")) {
    return new ClassifierTypeUtil.QuotationClass_zgotlq_a0a0f0a().createNode();
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType",null);
    for (    SNode arg : SLinkOperations.getTargets(SNodeOperations.cast(purified,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true)) {
      if (SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.structure.Type")) {
        ListSequence.<SNode>fromList(SLinkOperations.getTargets(res,"argument",true)).addElement(SNodeOperations.copyNode(getTypeCoercedToClassifierType(SNodeOperations.cast(arg,"jetbrains.mps.baseLanguage.structure.Type"))));
      }
 else {
        Logger.getLogger(ClassifierTypeUtil.class).warning("Argument of an instance of MEET type is not a subconcept of Type");
      }
    }
    return res;
  }
  SNode coerced=coerceToClassifierType(purified);
  if (SNodeOperations.isInstanceOf(coerced,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
    SNode classifierType=SNodeOperations.cast(coerced,"jetbrains.mps.baseLanguage.structure.ClassifierType");
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(classifierType,"classifier",false),"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      classifierType=SNodeOperations.copyNode(classifierType);
      SLinkOperations.setTarget(classifierType,"classifier",SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(classifierType,"classifier",false),"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false),false);
      return classifierType;
    }
  }
  return coerced;
}
