{
  SNode purified=(SNode)removeCopiedProviders(type);
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.TypeVariableReference") || SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
    return purified;
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.UpperBoundType",null);
    SLinkOperations.setTarget(res,"bound",SNodeOperations.copyNode(getTypeCoercedToClassifierType(SLinkOperations.getTarget(SNodeOperations.cast(purified,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true))),true);
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
    SNode at=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayType",null);
    SLinkOperations.setTarget(at,"componentType",coerceToClassifierTypeOrPrimitive(SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(purified,"jetbrains.mps.baseLanguage.structure.ArrayType"),"componentType",true))),true);
    return at;
  }
  if (SNodeOperations.isInstanceOf(purified,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    SNode res=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.MeetType",null);
    for (    SNode arg : SLinkOperations.getTargets(SNodeOperations.cast(purified,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true)) {
      if (SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.structure.Type")) {
        ListSequence.fromList(SLinkOperations.getTargets(res,"argument",true)).addElement(getTypeCoercedToClassifierType(SNodeOperations.cast(arg,"jetbrains.mps.baseLanguage.structure.Type")));
      }
 else {
        Logger.getLogger(ClassifierTypeUtil.class).warning("Argument of an instance of MEET type is not a subconcept of Type");
      }
    }
    return res;
  }
  return coerceToClassifierType(purified);
}
