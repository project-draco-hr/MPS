{
  List<SNode> visitedClassifiers=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> concretes=ListSequence.fromList(new LinkedList<SNode>());
  ListSequence.fromList(concretes).addElement(concrete);
  SNode resType=type;
  while (!(ListSequence.fromList(concretes).isEmpty())) {
    SNode ct=SNodeOperations.as(ListSequence.fromList(concretes).removeElementAt(0),"jetbrains.mps.baseLanguage.structure.ClassifierType");
    if (ListSequence.fromList(visitedClassifiers).contains(SLinkOperations.getTarget(ct,"classifier",false)) || ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).count() == 0) {
      continue;
    }
    ListSequence.fromList(visitedClassifiers).addElement(SLinkOperations.getTarget(ct,"classifier",false));
    for (    SNode sup : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(ct)) {
{
        IMatchingPattern pattern_1043_fg67v9wt=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType");
        SNode coercedNode_1043_fg67v9wt=TypeChecker.getInstance().getRuntimeSupport().coerce_(sup,pattern_1043_fg67v9wt);
        if (coercedNode_1043_fg67v9wt != null) {
          ListSequence.fromList(concretes).addElement(coercedNode_1043_fg67v9wt);
        }
 else {
        }
      }
    }
    resType=resolveType(resType,ct);
    if (ListSequence.fromList(SNodeOperations.getDescendants(resType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).isEmpty()) {
      break;
    }
  }
  return resType;
}
