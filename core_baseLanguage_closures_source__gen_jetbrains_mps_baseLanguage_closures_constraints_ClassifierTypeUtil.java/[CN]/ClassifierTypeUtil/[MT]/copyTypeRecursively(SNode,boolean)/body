{
  if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
    SNode copy=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
    SLinkOperations.setTarget(copy,"classifier",SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),false);
    boolean covariantParam=isFunctionTypeClassifierReturningValue(SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false));
    for (    SNode pt : SLinkOperations.getTargets(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)) {
      ListSequence.fromList(SLinkOperations.getTargets(copy,"parameter",true)).addElement((isFunctionTypeClassifier(SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false)) ? copyTypeRecursively(pt,covariantParam) : copyTypeRecursively(pt)));
      covariantParam=false;
    }
    return (covariant || isFunctionTypeClassifier(SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false)) ? new ClassifierTypeUtil.QuotationClass_1043_8().createNode(copy) : new ClassifierTypeUtil.QuotationClass_1043_9().createNode(copy));
  }
 else {
    return (covariant ? new ClassifierTypeUtil.QuotationClass_1043_10().createNode(SNodeOperations.copyNode(type)) : new ClassifierTypeUtil.QuotationClass_1043_11().createNode(SNodeOperations.copyNode(type)));
  }
}
