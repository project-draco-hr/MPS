{
  Enumeration<JarEntry> entries=jarFile.entries();
  if (!(entries.hasMoreElements())) {
    return Collections.EMPTY_SET;
  }
  Set<ClassInfo<? extends T>> taskClasses=new LinkedHashSet<ClassInfo<? extends T>>();
  do {
    JarEntry e=entries.nextElement();
    String name=e.getName();
    if (!(name.endsWith(Scanner.CLASSFILE_EXT))) {
      continue;
    }
    try {
      InputStream stream=jarFile.getInputStream(e);
      ClassReader classReader=new ClassReader(stream);
      name=classReader.getClassName();
      name=Scanner.replaceSlashes(name);
      Class<? extends T> clazz=(Class<? extends T>)loader.loadClass(name).asSubclass(parentClass);
      if (clazz.equals(parentClass)) {
        continue;
      }
      ClassInfo<T> classInfo=new ClassInfo<T>(clazz,classReader);
      taskClasses.add(classInfo);
    }
 catch (    ClassNotFoundException e1) {
      Scanner.LOG.error(e1);
    }
catch (    ClassCastException e1) {
    }
catch (    NoClassDefFoundError e1) {
    }
catch (    IOException e1) {
      Scanner.LOG.error(e1);
    }
  }
 while (entries.hasMoreElements());
  return taskClasses;
}
