{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("nodeKind",new BaseReferenceConstraintsDescriptor("nodeKind",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode tpoe=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",false,false);
          SNode tpa=SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),"jetbrains.mps.ypath.structure.TreePathAspect");
          return ListSequence.fromList(SNodeOperations.getDescendants(tpa,null,false,new String[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.ypath.structure.TreeNodeKind");
            }
          }
).toListSequence();
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8c9v72_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
