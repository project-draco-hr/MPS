{
  this.addNodeById("1300615610528534003");
  this.addNodeById("1300615610528534193");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.<SNode>fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1300615610528534019"),"jetbrains.mps.baseLanguage.structure.IfStatement")));
  params.setName("foo");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  SNode res=ref.doRefactor();
  for (  MethodMatch match : ListSequence.<MethodMatch>fromList(ref.getMatches())) {
    ExtractMethodRefactoring matchRef=ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));
    matchRef.replaceMatch(match,res);
  }
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.<SNode>fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1300615610528534004"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.<SNode>fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1300615610528534194"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
