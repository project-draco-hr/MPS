{
  String conceptFqName=InternUtil.intern(node.getConcept().getId());
  String languageNamespace=NameUtil.namespaceFromConceptFQName(node.getConcept().getId());
  final Language language=ModuleRepositoryFacade.getInstance().getModule(languageNamespace,Language.class);
  List<Method> methodsToCall;
  methodsToCall=myConstructors.get(conceptFqName);
  if (methodsToCall == null) {
    methodsToCall=NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<List<Method>>(){
      @Override public List<Method> compute(){
        return calculateConstructors(((SConceptNodeAdapter)node.getConcept()).getConcept(),language);
      }
    }
);
    myConstructors.putIfAbsent(conceptFqName,methodsToCall);
  }
  for (int i=methodsToCall.size() - 1; i >= 0; i--) {
    try {
      methodsToCall.get(i).invoke(null,node);
    }
 catch (    IllegalAccessException e) {
      LOG.error(e);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}
