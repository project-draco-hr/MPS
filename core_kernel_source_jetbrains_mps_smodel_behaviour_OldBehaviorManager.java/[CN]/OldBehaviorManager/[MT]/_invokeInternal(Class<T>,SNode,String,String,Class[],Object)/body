{
  List<SNode> superConcepts;
  SNode concept;
  if (callerConceptFqName == null) {
    concept=node.getConceptDeclarationNode();
    if (concept == null) {
      concept=SModelUtil.getBaseConcept();
    }
    superConcepts=SModelUtil_new.getConceptAndSuperConcepts(concept);
  }
 else {
    concept=SModelUtil.findConceptDeclaration(callerConceptFqName,GlobalScope.getInstance());
    if (concept == null) {
      concept=SModelUtil.getBaseConcept();
    }
    superConcepts=new ArrayList<SNode>(SModelUtil_new.getConceptAndSuperConcepts(concept));
    superConcepts.remove(concept);
  }
  Method method=null;
  Class[] parameterTypeArray=parametersTypes;
  for (  SNode conceptDeclaration : superConcepts) {
    method=getMethod(conceptDeclaration,methodName,parameterTypeArray);
    if (method != null) {
      break;
    }
  }
  if (method != null) {
    Object[] params=new Object[parameters.length + 1];
    params[0]=node;
    System.arraycopy(parameters,0,params,1,parameters.length);
    try {
      return (T)method.invoke(null,params);
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
  }
  throw new RuntimeException("Can't find a method " + methodName + " in a concept "+ node.getConcept().getId()+ ", conceptNode == null: "+ (concept == null));
}
