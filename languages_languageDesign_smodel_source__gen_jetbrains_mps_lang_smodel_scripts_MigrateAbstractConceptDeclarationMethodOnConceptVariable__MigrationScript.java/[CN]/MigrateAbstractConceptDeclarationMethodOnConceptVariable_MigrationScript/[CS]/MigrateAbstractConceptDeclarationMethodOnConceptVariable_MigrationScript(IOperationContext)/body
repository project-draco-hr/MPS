{
  super("Migration abstract concept declaration methods on concept<>");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Migration abstract concept declaration methods on concept<>";
    }
    public String getAdditionalInfo(){
      return "Migration abstract concept declaration methods on concept<>";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall";
    }
    public boolean isApplicableInstanceNode(    final SNode node){
      if (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node,"baseMethodDeclaration",false),"isStatic")) {
        return false;
      }
      SNode type=TypeContextManager.getInstance().runResolveAction(new Computable<SNode>(){
        public SNode compute(){
          return TypeChecker.getInstance().getTypeOf(SNodeOperation_Behavior.call_getLeftExpression_1213877508894(node));
        }
      }
);
      if (!(SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SConceptType"))) {
        return false;
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
