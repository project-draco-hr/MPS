{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_fi61u2_a0c=null;
switch (0) {
case 0:
        GenerationSettings settings=GenerationSettings.getInstance();
      GenerationStrategy strategy=null;
    if (settings.isIncremental()) {
      strategy=new GenerationStrategy((settings.isIncrementalUseCache() ? GeneratorCacheComponent.getInstance().getCache() : null));
    }
  IGenerationTracer tracer=(pool.parameters(Target_fi61u2_c.this.getName(),Generate_Facet.Target_fi61u2_c.Variables.class).saveTransient() ? pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).project().getComponent(GenerationTracer.class) : new NullGenerationTracer());
pool.parameters(Target_fi61u2_c.this.getName(),Generate_Facet.Target_fi61u2_c.Variables.class).generationOptions(GenerationOptions.getDefaults().saveTransientModels(pool.parameters(Target_fi61u2_c.this.getName(),Generate_Facet.Target_fi61u2_c.Variables.class).saveTransient()).strictMode(settings.isStrictMode()).incremental(strategy).generateInParallel(settings.isParallelGenerator(),settings.getNumberOfParallelThreads()).tracing(settings.getPerformanceTracingLevel(),tracer).reporting(settings.isShowInfo(),settings.isShowWarnings(),settings.isKeepModelsWithWarnings(),settings.getNumberOfModelsToKeep()).rebuildAll(true));
return new IResult.SUCCESS(_output_fi61u2_a0c);
default :
return new IResult.SUCCESS(_output_fi61u2_a0c);
}
}
}
;
}
