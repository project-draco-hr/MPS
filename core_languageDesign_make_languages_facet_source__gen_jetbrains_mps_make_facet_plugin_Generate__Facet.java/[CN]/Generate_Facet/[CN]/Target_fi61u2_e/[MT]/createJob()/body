{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      final Wrappers._T<Iterable<IResource>> _output_fi61u2_a0e=new Wrappers._T<Iterable<IResource>>(null);
switch (0) {
case 0:
        boolean generationOk;
      GeneratorManager gm=pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).project().getComponent(GeneratorManager.class);
    if (!(pool.parameters(new ITarget.Name("configure"),Generate_Facet.Target_fi61u2_c.Variables.class).saveTransient())) {
      IGenerationTracer tracer=pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).project().getComponent(IGenerationTracer.class);
      if (tracer != null) {
        tracer.discardTracing();
      }
    }
  final Map<IModule,Iterable<SModelDescriptor>> retainedModels=MapSequence.fromMap(new HashMap<IModule,Iterable<SModelDescriptor>>());
final Iterable<SModelDescriptor> empty=ListSequence.fromList(new ArrayList<SModelDescriptor>());
Sequence.fromIterable(input).visitAll(new IVisitor<IResource>(){
public void visit(IResource it){
  MResource mres=((MResource)it);
  IModule module=mres.module();
  MapSequence.fromMap(retainedModels).put(module,empty);
  Iterable<SModelDescriptor> modelsToRetain=Sequence.fromIterable(((Iterable<SModelDescriptor>)module.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
    public boolean accept(    SModelDescriptor it2){
      return it2.isGeneratable();
    }
  }
);
  if (module instanceof Language) {
    for (    final Generator gen : ((Language)module).getGenerators()) {
      if (!(MapSequence.fromMap(retainedModels).containsKey(gen))) {
        MapSequence.fromMap(retainedModels).put(gen,Sequence.fromIterable(((Iterable<SModelDescriptor>)gen.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
          public boolean accept(          SModelDescriptor it2){
            return it2.isGeneratable();
          }
        }
));
      }
      modelsToRetain=Sequence.fromIterable(modelsToRetain).concat(Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>(){
        public Iterable<SModelDescriptor> iterable(){
          return MapSequence.fromMap(retainedModels).get(gen);
        }
      }
)));
    }
  }
 else   if (module instanceof Generator) {
    final Language slang=((Generator)module).getSourceLanguage();
    if (!(MapSequence.fromMap(retainedModels).containsKey(slang))) {
      MapSequence.fromMap(retainedModels).put(slang,Sequence.fromIterable(((Iterable<SModelDescriptor>)slang.getOwnModelDescriptors())).subtract(ListSequence.fromList(module.getOwnModelDescriptors())).where(new IWhereFilter<SModelDescriptor>(){
        public boolean accept(        SModelDescriptor it3){
          return it3.isGeneratable();
        }
      }
));
    }
    modelsToRetain=Sequence.fromIterable(modelsToRetain).concat(Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<SModelDescriptor>(){
      public Iterable<SModelDescriptor> iterable(){
        return MapSequence.fromMap(retainedModels).get(slang);
      }
    }
)));
  }
  MapSequence.fromMap(retainedModels).put(mres.module(),Sequence.fromIterable(modelsToRetain).subtract(Sequence.fromIterable(mres.models())).toListSequence());
}
}
);
IGenerationHandler gh=new MakeGenerationHandler(new _FunctionTypes._return_P1_E0<Boolean,GResource>(){
public Boolean invoke(GResource data){
monitor.currentProgress().advanceWork("Generating",1000);
data.retainedModels(MapSequence.fromMap(retainedModels).get(data.module()));
_output_fi61u2_a0e.value=Sequence.fromIterable(_output_fi61u2_a0e.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(data)));
return true;
}
}
);
IMessageHandler mh=new IMessageHandler(){
public void handle(IMessage msg){
monitor.reportFeedback(new IFeedback.MESSAGE(msg));
}
public void clear(){
}
}
;
monitor.currentProgress().beginWork("Generating",Sequence.fromIterable(input).foldLeft(0,new ILeftCombinator<IResource,Integer>(){
public Integer combine(Integer s,IResource it){
return s + Sequence.fromIterable(((MResource)it).models()).count() * 1000;
}
}
) + 1000,monitor.currentProgress().workLeft());
monitor.currentProgress().advanceWork("Generating",1000,"cleaning up");
List<SModelDescriptor> models=Sequence.fromIterable(input).<SModelDescriptor>translate(new ITranslator2<IResource,SModelDescriptor>(){
public Iterable<SModelDescriptor> translate(IResource in){
return ((MResource)in).models();
}
}
).toListSequence();
generationOk=gm.generateModels(models,pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).operationContext(),gh,pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).pindGet().invoke(),mh,pool.parameters(new ITarget.Name("configure"),Generate_Facet.Target_fi61u2_c.Variables.class).generationOptions().create());
monitor.currentProgress().finishWork("Generating");
if (!(generationOk)) {
return new IResult.FAILURE(_output_fi61u2_a0e.value);
}
_output_fi61u2_a0e.value=Sequence.fromIterable(_output_fi61u2_a0e.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(Sequence.<IDelta>singleton(new IInternalDelta(){
public IDelta merge(IDelta toMerge){
return this;
}
public boolean contains(IDelta other){
return false;
}
public boolean reconcile(){
if (!(pool.parameters(new ITarget.Name("configure"),Generate_Facet.Target_fi61u2_c.Variables.class).saveTransient())) {
pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).project().getComponent(TransientModelsComponent.class).removeAllTransient();
}
return true;
}
}
)))));
default :
return new IResult.SUCCESS(_output_fi61u2_a0e.value);
}
}
}
;
}
