{
  Set<SNode> modules=new LinkedHashSet<SNode>();
  Set<SNode> libraries=new LinkedHashSet<SNode>();
  modules.addAll(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"dependencies",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildSource_JavaDependencyModule");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildSource_JavaDependencyModule"),"module",false);
    }
  }
).toListSequence());
  libraries.addAll(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(),"dependencies",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildSource_JavaDependencyLibrary"),"library",false);
    }
  }
).toListSequence());
  new JavaModulesClosure(modules,libraries).closure();
  return MultiTuple.<SNode,Set<SNode>,Set<SNode>>from(_context.getNode(),modules,libraries);
}
