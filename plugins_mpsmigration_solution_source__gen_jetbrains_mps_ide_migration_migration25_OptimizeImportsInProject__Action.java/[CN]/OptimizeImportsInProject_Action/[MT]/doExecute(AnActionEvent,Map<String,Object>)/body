{
  try {
    final Queue<SModule> modules=QueueSequence.fromQueueWithValues(new LinkedList<SModule>(),((MPSProject)MapSequence.fromMap(_params).get("project")).getModules());
    final List<SModel> modelsToFix=ListSequence.fromList(new ArrayList<SModel>());
    final CountDownLatch latch=new CountDownLatch(1);
    ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        try {
          while (QueueSequence.fromQueue(modules).isNotEmpty()) {
            SModule module=QueueSequence.fromQueue(modules).removeFirstElement();
            if (module.isReadOnly()) {
              continue;
            }
            if (module instanceof Language) {
              QueueSequence.fromQueue(modules).addSequence(CollectionSequence.fromCollection(((Language)module).getGenerators()));
            }
            for (            SModel model : Sequence.fromIterable(module.getModels())) {
              if (SModelStereotype.isUserModel(model) && model instanceof EditableSModel) {
                ListSequence.fromList(modelsToFix).addElement(model);
              }
            }
          }
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await();
    }
 catch (    InterruptedException ignore) {
    }
    if (ListSequence.fromList(modelsToFix).isNotEmpty()) {
      modelAccess.executeCommand(new Runnable(){
        public void run(){
          new OptimizeImportsHelper().optimizeModelsImports(modelsToFix);
          SModelRepository.getInstance().saveAll();
        }
      }
);
    }
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "OptimizeImportsInProject",t);
    }
  }
}
