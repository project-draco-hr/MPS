{
  Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());
  EnvironmentConfig config=EnvironmentConfig.emptyEnvironment();
  for (  String jar : myWhatToDo.getLibraryJars()) {
    File jarFile=new File(jar);
    if (!(jarFile.exists())) {
      error("Library " + jar + " does not exist.");
    }
    config=config.addLib(jar,jarFile);
  }
  for (  IMapping<String,String> macro : MapSequence.fromMap(myWhatToDo.getMacro())) {
    config=config.addMacro(macro.key(),new File(macro.value()));
  }
  Environment environment=new GeneratorWorker.MyEnvironment(config);
  setupEnvironment();
  setGenerationProperties();
  boolean doneSomething=false;
  Project project=createDummyProject();
  for (  IMapping<List<String>,Boolean> chunk : MapSequence.fromMap(myWhatToDo.getChunks())) {
    List<String> modulePaths=chunk.key();
    LinkedHashSet<SModule> modules=new LinkedHashSet<SModule>();
    for (    String modulePath : modulePaths) {
      processModuleFile(new File(modulePath),modules);
    }
    Boolean bootstrap=chunk.value();
    if (bootstrap) {
      warning("Found bootstrap chunk " + chunk.key() + ". Generation may be impossible.");
    }
    MpsWorker.ObjectsToProcess go=new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET,modules,Collections.EMPTY_SET);
    if (go.hasAnythingToGenerate()) {
      generate(project,go);
      doneSomething=true;
      ModelAccess.instance().runWriteAction(new Runnable(){
        public void run(){
          ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
        }
      }
);
    }
  }
  if (!(doneSomething)) {
    error("Could not find anything to generate.");
  }
  environment.disposeEnvironment();
  dispose();
  showStatistic();
}
