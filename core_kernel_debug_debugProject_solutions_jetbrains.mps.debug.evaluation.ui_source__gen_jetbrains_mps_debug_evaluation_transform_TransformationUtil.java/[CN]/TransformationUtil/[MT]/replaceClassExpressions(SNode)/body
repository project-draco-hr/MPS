{
  for (  SNode classifierClassExpression : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    SNode classFqNameNode=createClassFqNameNode(SNodeOperations.getModel(whatToEvaluate),SLinkOperations.getTarget(classifierClassExpression,"classifier",false));
    replaceClassExpression(classifierClassExpression,classFqNameNode);
  }
  for (  SNode classExpression : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    replaceClassExpression(classExpression,createClassFqNameNode(SNodeOperations.getModel(whatToEvaluate),SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(classExpression,"type",true),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true),"classifier",false)));
  }
}
