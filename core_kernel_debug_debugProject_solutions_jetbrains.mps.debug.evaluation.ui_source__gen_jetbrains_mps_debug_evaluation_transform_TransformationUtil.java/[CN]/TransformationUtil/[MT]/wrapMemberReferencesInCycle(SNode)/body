{
  boolean finished=false;
  while (!(finished)) {
    finished=true;
    for (    SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      if (TransformationUtil.needsToBeReplacedWithInvoke(methodCall)) {
        SNode originalMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
        replaceMethodCall(SNodeOperations.cast(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.Expression"),SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),methodCall,SPropertyOperations.getString(originalMethodDeclaration,"name"),getJniSignature(originalMethodDeclaration),SLinkOperations.getTarget(originalMethodDeclaration,"returnType",true),SLinkOperations.getTargets(methodCall,"actualArgument",true));
        finished=false;
      }
    }
    for (    SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalPartialInstanceMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      replaceMethodCall(methodCall,SLinkOperations.getTarget(methodCall,"instance",true),methodCall,SPropertyOperations.getString(methodCall,"methodName"),getJniSignature(ListSequence.fromList(SLinkOperations.getTargets(methodCall,"actualArgument",true)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it),"jetbrains.mps.baseLanguage.structure.Type");
        }
      }
),SLinkOperations.getTarget(methodCall,"returnType",true)),SLinkOperations.getTarget(methodCall,"returnType",true),SLinkOperations.getTargets(methodCall,"actualArgument",true));
      finished=false;
    }
    for (    SNode staticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.StaticMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      if (needsToBeReplacedWithInvokeStatic(staticMethodCall)) {
        replaceStaticMethodCall(staticMethodCall,createClassFqNameNode(SNodeOperations.getModel(whatToEvaluate),SLinkOperations.getTarget(staticMethodCall,"classConcept",false)),SPropertyOperations.getString(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"name"),getJniSignature(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false)),SLinkOperations.getTarget(SLinkOperations.getTarget(staticMethodCall,"baseMethodDeclaration",false),"returnType",true),SLinkOperations.getTargets(staticMethodCall,"actualArgument",true));
        finished=false;
      }
    }
    for (    SNode staticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalStaticMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      replaceStaticMethodCall(staticMethodCall,createStringLiteral(SPropertyOperations.getString(staticMethodCall,"fqClassName")),SPropertyOperations.getString(staticMethodCall,"methodName"),getJniSignature(ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it),"jetbrains.mps.baseLanguage.structure.Type");
        }
      }
),SLinkOperations.getTarget(staticMethodCall,"returnType",true)),SLinkOperations.getTarget(staticMethodCall,"returnType",true),SLinkOperations.getTargets(staticMethodCall,"actualArgument",true));
      finished=false;
    }
    if (!(replaceArrayOperations(whatToEvaluate))) {
      finished=false;
    }
    for (    SNode fieldReferenceOperation : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(fieldReferenceOperation,"jetbrains.mps.baseLanguage.structure.DotExpression",false,false),"operand",true)),new TransformationUtil.QuotationClass_crriw5_a1a0a0n0f0k().createNode())) {
        replaceFieldReference(SNodeOperations.getParent(fieldReferenceOperation),SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldReferenceOperation),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),SPropertyOperations.getString(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"name"),SLinkOperations.getTarget(SLinkOperations.getTarget(fieldReferenceOperation,"fieldDeclaration",false),"type",true));
        finished=false;
      }
    }
    for (    SNode fieldReference : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalPartialFieldReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      replaceFieldReference(fieldReference,SLinkOperations.getTarget(fieldReference,"instance",true),SPropertyOperations.getString(fieldReference,"fieldName"),SLinkOperations.getTarget(fieldReference,"fieldType",true));
      finished=false;
    }
    for (    SNode staticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.StaticFieldReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      replaceStaticFieldReference(staticFieldReference,SPropertyOperations.getString(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"name"),SLinkOperations.getTarget(SLinkOperations.getTarget(staticFieldReference,"variableDeclaration",false),"type",true),createClassFqNameNode(SNodeOperations.getModel(whatToEvaluate),SNodeOperations.cast(SLinkOperations.getTarget(staticFieldReference,"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept")));
      finished=false;
    }
    for (    SNode staticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalStaticFieldReference",false,new String[]{}))) {
      replaceStaticFieldReference(staticFieldReference,SPropertyOperations.getString(staticFieldReference,"fieldName"),null,createStringLiteral(SPropertyOperations.getString(staticFieldReference,"fqClassName")));
      finished=false;
    }
    for (    SNode binaryOperation : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.BinaryOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isUnprocessed(it);
      }
    }
)) {
      SNode leftType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"leftExpression",true));
      SNode rightType=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,"rightExpression",true));
      if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.EqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new TransformationUtil.QuotationClass_crriw5_a1a0a0c0v0f0k().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new TransformationUtil.QuotationClass_crriw5_a1a0a2a12a5a01().createNode())) {
        SNodeOperations.replaceWithAnother(binaryOperation,new TransformationUtil.QuotationClass_crriw5_a0a0a0c0v0f0k().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
        finished=false;
      }
 else       if (SNodeOperations.isInstanceOf(binaryOperation,"jetbrains.mps.baseLanguage.structure.NotEqualsExpression") && TypeChecker.getInstance().getSubtypingManager().isSubtype(leftType,new TransformationUtil.QuotationClass_crriw5_a1a0a0a2a12a5a01().createNode()) && TypeChecker.getInstance().getSubtypingManager().isSubtype(rightType,new TransformationUtil.QuotationClass_crriw5_a1a0a0c0v0f0k_0().createNode())) {
        SNodeOperations.replaceWithAnother(binaryOperation,new TransformationUtil.QuotationClass_crriw5_a0a0a0a2a12a5a01().createNode(SLinkOperations.getTarget(binaryOperation,"leftExpression",true),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)));
        finished=false;
      }
 else {
        if (isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"leftExpression",true))) {
          SLinkOperations.setTarget(binaryOperation,"leftExpression",new TransformationUtil.QuotationClass_crriw5_a0a0a0a0a2a12a5a01().createNode(binaryOperation.getChild(LTYPE),SLinkOperations.getTarget(binaryOperation,"leftExpression",true)),true);
          finished=false;
          binaryOperation.removeChild(binaryOperation.getChild(LTYPE));
        }
        if (isNotNullProxy(SLinkOperations.getTarget(binaryOperation,"rightExpression",true))) {
          SLinkOperations.setTarget(binaryOperation,"rightExpression",new TransformationUtil.QuotationClass_crriw5_a0a0a0b0a2a12a5a01().createNode(binaryOperation.getChild(RTYPE),SLinkOperations.getTarget(binaryOperation,"rightExpression",true)),true);
          finished=false;
          binaryOperation.removeChild(binaryOperation.getChild(RTYPE));
        }
      }
    }
{
      SNode notExpression;
      Iterator<SNode> notExpression_iterator=ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.NotExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return isUnprocessed(it);
        }
      }
).iterator();
      while (true) {
        if (!(notExpression_iterator.hasNext())) {
          break;
        }
        notExpression=notExpression_iterator.next();
        if (isNotNullProxy(SLinkOperations.getTarget(notExpression,"expression",true))) {
          SLinkOperations.setTarget(notExpression,"expression",new TransformationUtil.QuotationClass_crriw5_a0a0a0a0c0c0w0f0k().createNode(SLinkOperations.getTarget(notExpression,"expression",true)),true);
          finished=false;
        }
      }
    }
  }
}
