{
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguage.structure.GenericNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator") && isUnprocessed(it);
    }
  }
)) {
    SNode constructor=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"baseMethodDeclaration",false);
    SNode fqNameNode=createClassFqNameNode(SNodeOperations.getModel(whatToEvaluate),SNodeOperations.getAncestor(constructor,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false));
    SNode jnSignature=createStringLiteral(getJniSignature(constructor));
    List<SNode> actualArguments=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"actualArgument",true);
    replaceConstructor(newExpression,fqNameNode,jnSignature,actualArguments);
  }
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(whatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    replaceConstructor(newExpression,createStringLiteral(SPropertyOperations.getString(newExpression,"fqClassName")),createStringLiteral(getJniSignature(ListSequence.fromList(SLinkOperations.getTargets(newExpression,"actualArgument",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it),"jetbrains.mps.baseLanguage.structure.Type");
      }
    }
),new TransformationUtil.QuotationClass_crriw5_a1a2a0a2a3().createNode())),SLinkOperations.getTargets(newExpression,"actualArgument",true));
  }
}
