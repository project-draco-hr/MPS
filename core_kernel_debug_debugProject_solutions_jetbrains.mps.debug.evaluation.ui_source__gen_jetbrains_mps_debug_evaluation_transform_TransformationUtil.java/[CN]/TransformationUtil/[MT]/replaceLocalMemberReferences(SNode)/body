{
  for (  SNode localStaticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    SNode staticMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    SLinkOperations.setTarget(staticMethodCall,"classConcept",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SLinkOperations.setTarget(staticMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localStaticMethodCall,"actualArgument",true)));
    SLinkOperations.setNewChild(staticMethodCall,AttributesRolesUtil.childRoleFromAttributeRole("unprocessedAnnotation"),"jetbrains.mps.debug.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localStaticMethodCall,staticMethodCall);
  }
  for (  SNode localInstanceMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    SNode instanceMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
    SLinkOperations.setTarget(instanceMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localInstanceMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(instanceMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localInstanceMethodCall,"actualArgument",true)));
    SLinkOperations.setNewChild(instanceMethodCall,AttributesRolesUtil.childRoleFromAttributeRole("unprocessedAnnotation"),"jetbrains.mps.debug.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localInstanceMethodCall,new TransformationUtil.QuotationClass_crriw5_a0a0e0d0i().createNode(instanceMethodCall,createThisNodeReplacement()));
  }
  for (  SNode localStaticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    SNode staticFieldReference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
    SLinkOperations.setTarget(staticFieldReference,"variableDeclaration",SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false),false);
    SLinkOperations.setTarget(staticFieldReference,"classifier",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SLinkOperations.setNewChild(staticFieldReference,AttributesRolesUtil.childRoleFromAttributeRole("unprocessedAnnotation"),"jetbrains.mps.debug.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localStaticFieldReference,staticFieldReference);
  }
  for (  SNode localInstanceFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(evaluateMethod,"jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return isUnprocessed(it);
    }
  }
)) {
    SNode fieldReferenceOperation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
    SLinkOperations.setTarget(fieldReferenceOperation,"fieldDeclaration",SLinkOperations.getTarget(localInstanceFieldReference,"variableDeclaration",false),false);
    SLinkOperations.setNewChild(fieldReferenceOperation,AttributesRolesUtil.childRoleFromAttributeRole("unprocessedAnnotation"),"jetbrains.mps.debug.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localInstanceFieldReference,new TransformationUtil.QuotationClass_crriw5_a0a0d0h0i().createNode(fieldReferenceOperation,createThisNodeReplacement()));
  }
}
