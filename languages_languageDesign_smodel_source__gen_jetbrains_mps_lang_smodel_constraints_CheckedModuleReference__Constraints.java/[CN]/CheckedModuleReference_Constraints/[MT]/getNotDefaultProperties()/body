{
  Map<String,PropertyConstraintsDescriptor> properties=new HashMap();
  properties.put("moduleId",new BasePropertyConstraintsDescriptor("moduleId",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="moduleId";
{
        String original=SPropertyOperations.getString(node,"moduleId");
        if ((original == null || original.length() == 0)) {
          return original;
        }
        SModuleReference moduleReference=ModuleReference.fromString(original);
        SModule module=MPSModuleRepository.getInstance().getModule(moduleReference);
        return (module != null ? module.getModuleName() : moduleReference.getModuleName());
      }
    }
    @Override public boolean hasOwnSetter(){
      return true;
    }
    @Override public void setValue(    SNode node,    String propertyValue,    IScope scope){
      String propertyName="moduleId";
{
        SModule module=MPSModuleRepository.getInstance().getModuleByFqName((SPropertyOperations.getString(propertyValue)));
        SPropertyOperations.set(node,"moduleId",module.getModuleReference().toString());
      }
    }
    @Override public boolean hasOwnValidator(){
      return true;
    }
    @Override public boolean validateValue(    SNode node,    String propertyValue,    IScope scope){
      String propertyName="moduleId";
{
        SModule module=MPSModuleRepository.getInstance().getModuleByFqName((SPropertyOperations.getString(propertyValue)));
        return module != null;
      }
    }
  }
);
  return properties;
}
