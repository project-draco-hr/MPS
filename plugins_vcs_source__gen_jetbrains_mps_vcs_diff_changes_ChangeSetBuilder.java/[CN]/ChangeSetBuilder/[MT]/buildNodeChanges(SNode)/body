{
  SNodeId nodeId=oldNode.getSNodeId();
  SNode newNode=myNewModel.getNodeById(nodeId);
  buildPropertyChanges(oldNode,newNode);
  buildReferenceChanges(oldNode,newNode);
  Set<String> roles=SetSequence.fromSetWithValues(new HashSet<String>(),ListSequence.fromList(SNodeOperations.getChildren(oldNode)).concat(ListSequence.fromList(SNodeOperations.getChildren(newNode))).<String>select(new ISelector<SNode,String>(){
    public String select(    SNode ch){
      return SNodeOperations.getContainingLinkRole(ch);
    }
  }
));
  for (  String role : SetSequence.fromSet(roles)) {
    final List<SNode> oldChildren=oldNode.getChildren(role);
    List<SNode> newChildren=newNode.getChildren(role);
    List<SNodeId> oldIds=ListSequence.fromList(oldChildren).<SNodeId>select(new ISelector<SNode,SNodeId>(){
      public SNodeId select(      SNode n){
        return n.getSNodeId();
      }
    }
).toListSequence();
    List<SNodeId> newIds=ListSequence.fromList(newChildren).<SNodeId>select(new ISelector<SNode,SNodeId>(){
      public SNodeId select(      SNode n){
        return n.getSNodeId();
      }
    }
).toListSequence();
    LongestCommonSubsequenceFinder<SNodeId> finder=new LongestCommonSubsequenceFinder<SNodeId>(oldIds,newIds);
    List<Tuples._2<Tuples._2<Integer,Integer>,Tuples._2<Integer,Integer>>> differentIndices=finder.getDifferentIndices();
    for (    Tuples._2<Tuples._2<Integer,Integer>,Tuples._2<Integer,Integer>> indices : ListSequence.fromList(differentIndices)) {
      Tuples._2<Integer,Integer> oldIndices=indices._0();
      Tuples._2<Integer,Integer> newIndices=indices._1();
      if (oldIndices._0() == oldIndices._1()) {
        myChangeSet.add(new InsertNodeGroupChange(myChangeSet,nodeId,role,oldIndices._0(),newIndices._0(),newIndices._1()));
      }
 else       if (newIndices._0() == newIndices._1()) {
        myChangeSet.add(new DeleteNodeGroupChange(myChangeSet,nodeId,role,oldIndices._0(),oldIndices._1(),newIndices._0()));
      }
 else {
        myChangeSet.add(new ReplaceNodeGroupChange(myChangeSet,nodeId,role,oldIndices._0(),oldIndices._1(),newIndices._0(),newIndices._1()));
      }
    }
    List<Tuples._2<Integer,Integer>> commonIndices=finder.getCommonIndices();
    ListSequence.fromList(commonIndices).<SNode>select(new ISelector<Tuples._2<Integer,Integer>,SNode>(){
      public SNode select(      Tuples._2<Integer,Integer> in){
        return ListSequence.fromList(oldChildren).getElement(in._0());
      }
    }
).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode child){
        buildNodeChanges(child);
      }
    }
);
  }
}
