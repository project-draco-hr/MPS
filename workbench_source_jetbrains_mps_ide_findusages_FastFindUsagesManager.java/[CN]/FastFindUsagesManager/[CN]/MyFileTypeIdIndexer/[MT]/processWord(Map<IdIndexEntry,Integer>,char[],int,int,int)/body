{
  if (chars[offset + len] != '=' || chars[offset] != 't') {
    return;
  }
  if (contains(chars,charsLength,offset,TARGET_NODE_ID_PREFIX)) {
    offset+=TARGET_NODE_ID_PREFIX.length();
    int end=indexOfQuoteAndVersionColon(chars,charsLength,offset)[0];
    if (end > offset) {
      int e=offset;
      while (e < end && chars[e] >= '0' && chars[e] <= '9') {
        e++;
      }
      if (e > offset) {
        if (e < end && chars[e] == 'v') {
          e++;
        }
        if (e + 1 < end && chars[e] == '.') {
          offset=e + 1;
        }
      }
      result.put(new IdIndexEntry(unescape(new String(chars,offset,end - offset)),true),offset);
    }
  }
 else   if (contains(chars,charsLength,offset,TYPE_PREFIX)) {
    offset+=TYPE_PREFIX.length();
    int[] indices=indexOfQuoteAndVersionColon(chars,charsLength,offset);
    int end=indices[0];
    int qend=indices[1];
    if (end > offset && contains(chars,charsLength,qend + 1," id=\"")) {
      result.put(new IdIndexEntry(unescape(new String(chars,offset,end - offset)),true),offset);
    }
  }
}
