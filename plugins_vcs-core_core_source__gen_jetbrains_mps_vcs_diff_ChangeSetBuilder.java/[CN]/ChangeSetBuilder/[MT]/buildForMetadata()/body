{
  buildForImports();
  buildForDependencies(ModuleDependencyChange.DependencyType.USED_LANG,new _FunctionTypes._return_P1_E0<List<SModuleReference>,SModelBase>(){
    public List<SModuleReference> invoke(    SModelBase model){
      return model.importedLanguages();
    }
  }
);
  buildForDependencies(ModuleDependencyChange.DependencyType.USED_DEVKIT,new _FunctionTypes._return_P1_E0<List<SModuleReference>,SModelBase>(){
    public List<SModuleReference> invoke(    SModelBase model){
      return model.importedDevkits();
    }
  }
);
  buildForDependencies(ModuleDependencyChange.DependencyType.LANG_ENGAGED_ON_GENERATION,new _FunctionTypes._return_P1_E0<List<SModuleReference>,SModelBase>(){
    public List<SModuleReference> invoke(    SModelBase model){
      return model.engagedOnGenerationLanguages();
    }
  }
);
  if (myNewModel instanceof GeneratableSModel && myOldModel instanceof GeneratableSModel) {
    if (((GeneratableSModel)myNewModel).isDoNotGenerate() != ((GeneratableSModel)myOldModel).isDoNotGenerate()) {
      ListSequence.fromList(myNewChanges).addElement(new DoNotGenerateOptionChange(myChangeSet));
    }
  }
  if (as_nbyrtw_a0a0h0q(myNewModel,SModelBase.class).getVersion() != as_nbyrtw_a0a0h0q_0(myOldModel,SModelBase.class).getVersion()) {
    ListSequence.fromList(myNewChanges).addElement(new ModelVersionChange(myChangeSet));
  }
}
