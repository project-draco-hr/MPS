{
  List<SNodeId> oldIds=ListSequence.fromList(oldChildren).select(new ISelector<SNode,SNodeId>(){
    public SNodeId select(    SNode n){
      return n.getNodeId();
    }
  }
).toListSequence();
  List<SNodeId> newIds=ListSequence.fromList(newChildren).select(new ISelector<SNode,SNodeId>(){
    public SNodeId select(    SNode n){
      return n.getNodeId();
    }
  }
).toListSequence();
  LongestCommonSubsequenceFinder<SNodeId> finder=new LongestCommonSubsequenceFinder<SNodeId>(oldIds,newIds);
  List<Tuples._2<Tuples._2<Integer,Integer>,Tuples._2<Integer,Integer>>> differentIndices=finder.getDifferentIndices();
  for (  Tuples._2<Tuples._2<Integer,Integer>,Tuples._2<Integer,Integer>> indices : ListSequence.fromList(differentIndices)) {
    Tuples._2<Integer,Integer> oldIndices=indices._0();
    Tuples._2<Integer,Integer> newIndices=indices._1();
    ListSequence.fromList(myNewChanges).addElement(new NodeGroupChange(myChangeSet,parentId,role,(int)oldIndices._0(),(int)oldIndices._1(),(int)newIndices._0(),(int)newIndices._1()));
  }
  List<Tuples._2<Integer,Integer>> commonIndices=finder.getCommonIndices();
  ListSequence.fromList(commonIndices).select(new ISelector<Tuples._2<Integer,Integer>,SNode>(){
    public SNode select(    Tuples._2<Integer,Integer> in){
      return ListSequence.fromList(oldChildren).getElement((int)in._0());
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode child){
      buildForNode(child,myNewModel.getNode(child.getNodeId()));
    }
  }
);
}
