{
  Iterable<SNode> reexportedFromModuleDependencies=Sequence.fromIterable(getModules()).concat(Sequence.fromIterable(Sequence.<SNode>singleton(initial))).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode mod){
      return ListSequence.fromList(SLinkOperations.getTargets(mod,"dependencies",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule") && SPropertyOperations.getBoolean(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"reexport");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"module",false);
        }
      }
);
    }
  }
);
  Set<SNode> reexportMods=SetSequence.fromSet(new HashSet<SNode>());
  for (  SNode mod : reexportedFromModuleDependencies) {
    SetSequence.fromSet(reexportMods).addElement(mod);
  }
  Iterable<SNode> directDeps=ListSequence.fromList(SLinkOperations.getTargets(initial,"dependencies",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule"),"module",false);
    }
  }
);
  return new MPSModulesClosure.RequiredJavaModules(Sequence.fromIterable(reexportedFromModuleDependencies).concat(Sequence.fromIterable(directDeps)),reexportMods);
}
