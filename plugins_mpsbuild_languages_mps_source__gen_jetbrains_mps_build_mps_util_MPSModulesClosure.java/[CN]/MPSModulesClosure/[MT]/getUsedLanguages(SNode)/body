{
  Iterable<SNode> usedLangs=Sequence.fromIterable(dependencies(module)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage"),"language",false);
    }
  }
);
  Iterable<SNode> languagesFromDevkits=Sequence.fromIterable(includingExtended(usedDevkits(module))).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return ListSequence.fromList(SLinkOperations.getTargets(it,"exports",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode iit){
          return SNodeOperations.isInstanceOf(iit,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode iit){
          return SLinkOperations.getTarget(SNodeOperations.cast(iit,"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage"),"language",false);
        }
      }
);
    }
  }
);
  return toOriginalLangs(includingExtendedLanguages(IterableUtil.merge(usedLangs,languagesFromDevkits)));
}
