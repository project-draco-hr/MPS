{
  Iterable<SModel> models=ListSequence.fromList(myNodePointers).where(new IWhereFilter<SNodeReference>(){
    public boolean accept(    SNodeReference it){
      return it != null;
    }
  }
).select(new ISelector<SNodeReference,SModel>(){
    public SModel select(    SNodeReference it){
      return (SModel)SNodeOperations.getModelFromNodeReference(((SNodePointer)it));
    }
  }
).distinct().where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return ModelGenerationStatusManager.getInstance().generationRequired(it);
    }
  }
);
  if (Sequence.fromIterable(models).isEmpty()) {
    return true;
  }
  MakeSession session=new MakeSession(new ProjectOperationContext(ProjectHelper.toMPSProject(project)),null,true);
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(new ProjectOperationContext(ProjectHelper.toMPSProject(project)),models).resources(false));
    IResult result=null;
    try {
      result=future.get();
    }
 catch (    CancellationException ignore) {
    }
catch (    InterruptedException ignore) {
    }
catch (    ExecutionException ignore) {
    }
    return result != null && result.isSucessful();
  }
  return true;
}
