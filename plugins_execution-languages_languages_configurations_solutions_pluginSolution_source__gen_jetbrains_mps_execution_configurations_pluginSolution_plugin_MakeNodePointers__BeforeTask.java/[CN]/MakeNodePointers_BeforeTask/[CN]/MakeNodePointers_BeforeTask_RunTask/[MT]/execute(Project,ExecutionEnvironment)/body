{
  final jetbrains.mps.project.Project mpsProject=ProjectHelper.toMPSProject(project);
  Iterable<SModel> models=new ModelAccessHelper(mpsProject.getModelAccess()).runReadAction(new Computable<ISequence<SModel>>(){
    public ISequence<SModel> compute(){
      return ListSequence.fromList(myNodePointers).where(new IWhereFilter<SNodeReference>(){
        public boolean accept(        SNodeReference it){
          return it != null;
        }
      }
).select(new ISelector<SNodeReference,SModel>(){
        public SModel select(        SNodeReference it){
          SNode n=it.resolve(mpsProject.getRepository());
          return (n == null ? null : n.getModel());
        }
      }
).distinct().where(new IWhereFilter<SModel>(){
        public boolean accept(        SModel it){
          return ModelGenerationStatusManager.getInstance().generationRequired(it);
        }
      }
);
    }
  }
);
  if (Sequence.fromIterable(models).isEmpty()) {
    return true;
  }
  MakeSession session=new MakeSession(mpsProject,new DefaultMakeMessageHandler(mpsProject),true);
  if (IMakeService.INSTANCE.get().openNewSession(session)) {
    Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(models).resources(false));
    IResult result=null;
    try {
      result=future.get();
    }
 catch (    CancellationException ignore) {
    }
catch (    InterruptedException ignore) {
    }
catch (    ExecutionException ignore) {
    }
    return result != null && result.isSucessful();
  }
  return true;
}
