{
  this.nextNode=null;
  this.hasNextNode=false;
  do {
    while (!hasCurrentSource && sourceIterator.hasNext()) {
      this.currentSource=sourceIterator.next();
      if (!getSiblingFilter().accept(currentSource)) {
        continue;
      }
      this.hasCurrentSource=true;
      break;
    }
    if (currentSiblingsIterator == null) {
      T parent=getParent(currentSource);
      this.currentSiblingsIterator=getChildren(parent).iterator();
    }
    while (currentSiblingsIterator.hasNext()) {
      T sibling=currentSiblingsIterator.next();
      if (!getSiblingFilter().accept(sibling,currentSource)) {
        continue;
      }
      this.nextNode=sibling;
      this.hasNextNode=true;
      return;
    }
    this.currentSiblingsIterator=null;
    this.hasCurrentSource=false;
  }
 while (sourceIterator.hasNext());
}
