{
  IWrapper subtypeRepresentator=getRepresentatorWrapper(subType);
  IWrapper supertypeRepresentator=getRepresentatorWrapper(supertype);
  if (NodeWrapper.fromWrapper(subtypeRepresentator) == NodeWrapper.fromWrapper(supertypeRepresentator))   return;
  RuntimeTypeVariable varSubtype=subtypeRepresentator == null ? null : subtypeRepresentator.getVariable();
  RuntimeTypeVariable varSupertype=supertypeRepresentator == null ? null : supertypeRepresentator.getVariable();
  Set<SNodePointer> vars=myNonConcreteVars.get(subtypeRepresentator);
  boolean hasNonConcreteVars=vars != null && !vars.isEmpty();
  if (varSubtype != null || hasNonConcreteVars || varSupertype != null) {
    if (isWeak) {
      addSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
 else {
      addStrongSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
    return;
  }
  if (subtypeRepresentator instanceof NodeWrapper) {
    NodeWrapper subtypeNodeWrapper=(NodeWrapper)subtypeRepresentator;
    SModel typesModel=myTypeChecker.getRuntimeTypesModel();
    NodeWrapper representatorCopy=NodeWrapper.createNodeWrapper(CopyUtil.copy(subtypeNodeWrapper.getNode(),typesModel));
    subtypeRepresentator=expandWrapper(null,representatorCopy,typesModel);
  }
  if (supertypeRepresentator instanceof NodeWrapper) {
    NodeWrapper supertypeNodeWrapper=(NodeWrapper)supertypeRepresentator;
    SModel typesModel=myTypeChecker.getRuntimeTypesModel();
    NodeWrapper representatorCopy=NodeWrapper.createNodeWrapper(CopyUtil.copy(supertypeNodeWrapper.getNode(),typesModel));
    supertypeRepresentator=expandWrapper(null,representatorCopy,typesModel);
  }
  if (subtypeRepresentator instanceof NodeWrapper && supertypeRepresentator instanceof NodeWrapper) {
    SNode node1=subtypeRepresentator.getNode();
    SNode node2=supertypeRepresentator.getNode();
    Set<InequationReplacementRule_Runtime> inequationReplacementRules=myTypeChecker.getRulesManager().getReplacementRules(node1,node2);
    for (    InequationReplacementRule_Runtime inequationReplacementRule : inequationReplacementRules) {
      inequationReplacementRule.processInequation(node1,node2,errorInfo);
      return;
    }
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator,supertypeRepresentator,this,errorInfo,isWeak)) {
    return;
  }
  if (errorInfo.getErrorString() != null) {
    myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorInfo.getErrorString());
    return;
  }
  String strongString=isWeak ? "" : " strong";
  IErrorReporter errorReporter=new EquationErrorReporter(this,"type ",subtypeRepresentator," is not a" + strongString + " subtype of ",supertypeRepresentator,"",errorInfo.getRuleModel(),errorInfo.getRuleId());
  myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorReporter);
}
