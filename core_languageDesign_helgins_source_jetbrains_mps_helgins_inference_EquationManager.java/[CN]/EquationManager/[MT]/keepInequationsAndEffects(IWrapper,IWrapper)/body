{
  if (mySubtypesToSupertypesMap.get(var) != null) {
    Map<IWrapper,EquationInfo> supertypes=mySubtypesToSupertypesMap.get(var);
    mySubtypesToSupertypesMap.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMap.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype));
    }
  }
  if (mySupertypesToSubtypesMap.get(var) != null) {
    Map<IWrapper,EquationInfo> subtypes=mySupertypesToSubtypesMap.get(var);
    mySupertypesToSubtypesMap.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMap.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype));
    }
  }
  if (mySubtypesToSupertypesMapStrong.get(var) != null) {
    Map<IWrapper,EquationInfo> supertypes=mySubtypesToSupertypesMapStrong.get(var);
    mySubtypesToSupertypesMapStrong.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMapStrong.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),false);
    }
  }
  if (mySupertypesToSubtypesMapStrong.get(var) != null) {
    Map<IWrapper,EquationInfo> subtypes=mySupertypesToSubtypesMapStrong.get(var);
    mySupertypesToSubtypesMapStrong.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMapStrong.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),false);
    }
  }
  if (mySubtypesToSupertypesMap_check.get(var) != null) {
    Map<IWrapper,EquationInfo> supertypes=mySubtypesToSupertypesMap_check.get(var);
    mySubtypesToSupertypesMap_check.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMap_check.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype));
    }
  }
  if (mySupertypesToSubtypesMap_check.get(var) != null) {
    Map<IWrapper,EquationInfo> subtypes=mySupertypesToSubtypesMap_check.get(var);
    mySupertypesToSubtypesMap_check.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMap_check.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype));
    }
  }
  if (mySubtypesToSupertypesMapStrong_check.get(var) != null) {
    Map<IWrapper,EquationInfo> supertypes=mySubtypesToSupertypesMapStrong_check.get(var);
    mySubtypesToSupertypesMapStrong_check.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMapStrong_check.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),false);
    }
  }
  if (mySupertypesToSubtypesMapStrong_check.get(var) != null) {
    Map<IWrapper,EquationInfo> subtypes=mySupertypesToSubtypesMapStrong_check.get(var);
    mySupertypesToSubtypesMapStrong_check.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMapStrong_check.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),false);
    }
  }
  if (myComparableTypesMap.get(var) != null) {
    Map<IWrapper,EquationInfo> comparables=myComparableTypesMap.get(var);
    myComparableTypesMap.remove(var);
    for (    IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,EquationInfo> map=myComparableTypesMap.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype));
    }
  }
  if (myComparableTypesMapStrong.get(var) != null) {
    Map<IWrapper,EquationInfo> comparables=myComparableTypesMapStrong.get(var);
    myComparableTypesMapStrong.remove(var);
    for (    IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,EquationInfo> map=myComparableTypesMapStrong.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype),false);
    }
  }
}
