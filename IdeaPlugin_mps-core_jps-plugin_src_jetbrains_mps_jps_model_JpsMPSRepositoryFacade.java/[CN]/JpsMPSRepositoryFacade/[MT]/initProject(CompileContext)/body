{
  long start=System.nanoTime();
  myProject=new JpsMPSProject(context.getProjectDescriptor().getProject());
  for (  JpsModule mod : context.getProjectDescriptor().getProject().getModules()) {
    JpsMPSModuleExtension extension=JpsMPSExtensionService.getInstance().getExtension(mod);
    if (extension == null) {
      continue;
    }
    if (MPSCompilerUtil.isTracingMode()) {
      context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Creating solution for " + mod.getName()));
    }
    SolutionDescriptor descriptor=extension.getConfiguration().getSolutionDescriptor();
    descriptor.setNamespace(mod.getName());
    descriptor.setId(ModuleId.foreign(mod.getName()));
    JpsSolutionIdea module=new JpsSolutionIdea(mod,descriptor,context);
    JpsSolutionIdea solutionIdea=MPSModuleRepository.getInstance().registerModule(module,myProject);
    if (module == solutionIdea) {
      solutionIdea.updateModelsSet();
    }
    myProject.addModule(solutionIdea.getModuleReference());
    jpsToMpsModules.put(mod,solutionIdea);
  }
  if (MPSCompilerUtil.isTracingMode()) {
    context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Project modules loaded in " + (System.nanoTime() - start) / 1000000 + " ms"));
  }
}
