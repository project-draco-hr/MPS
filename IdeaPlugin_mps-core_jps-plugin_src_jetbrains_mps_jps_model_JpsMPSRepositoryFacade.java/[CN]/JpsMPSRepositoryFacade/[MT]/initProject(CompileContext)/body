{
  long start=System.nanoTime();
  JpsProject jpsProject=context.getProjectDescriptor().getProject();
  myProject=new JpsMPSProject(jpsProject);
  Set<JpsLibrary> processedSdks=new HashSet<JpsLibrary>();
  JpsLibrary jdk=null;
  for (  JpsModule mod : jpsProject.getModules()) {
    JpsMPSModuleExtension extension=JpsMPSExtensionService.getInstance().getExtension(mod);
    if (extension == null) {
      continue;
    }
    if (MPSCompilerUtil.isTracingMode()) {
      context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Creating solution for " + mod.getName()));
    }
    SolutionDescriptor descriptor=extension.getConfiguration().getSolutionDescriptor();
    descriptor.setNamespace(mod.getName());
    MPSCompilerUtil.debug(context,"UUID " + descriptor.getUUID());
    JpsSolutionIdea module=new JpsSolutionIdea(mod,descriptor,context);
    JpsSolutionIdea solutionIdea=MPSModuleRepository.getInstance().registerModule(module,myProject);
    if (module == solutionIdea) {
      solutionIdea.updateModelsSet();
    }
    myProject.addModule(solutionIdea.getModuleReference());
    jpsToMpsModules.put(mod,solutionIdea);
    for (    JpsLibrary sdk : getModuleSdks(mod,context)) {
      MPSCompilerUtil.debug(context,"SDK name" + sdk.getName() + " type: "+ sdk.getType());
      JpsLibSolution sdkSolution=createLibSolution(sdk,jdk,context);
      JpsLibSolution regSolution=MPSModuleRepository.getInstance().registerModule(sdkSolution,myProject);
      MPSCompilerUtil.debug(context,"SDK " + regSolution.getModuleReference().toString());
      if (sdkSolution == regSolution) {
        MPSCompilerUtil.debug(context,"SDK updating model set for " + sdk.getName());
        sdkSolution.updateModelsSet();
      }
      if (JpsJavaSdkType.INSTANCE.equals(sdk.getType()) && !processedSdks.contains(sdk)) {
        jdk=jdk != null ? jdk : sdk;
        processedSdks.add(sdk);
      }
    }
  }
  if (processedSdks.size() > 1) {
    context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.ERROR,"Different SDKs in modules with MPS facets are not supported"));
  }
  for (  JpsLibrary jpsLib : jpsProject.getLibraryCollection().getLibraries()) {
    JpsLibSolution libSolution=createLibSolution(jpsLib,jdk,context);
    JpsLibSolution regSolution=MPSModuleRepository.getInstance().registerModule(libSolution,myProject);
    MPSCompilerUtil.debug(context,"LIB " + regSolution.getModuleReference().toString());
    if (libSolution == regSolution) {
      MPSCompilerUtil.debug(context,"LIB updating model set for " + jpsLib.getName());
      libSolution.updateModelsSet();
    }
    if (MPSCompilerUtil.isExtraTracingMode()) {
      for (      SModel desc : SModelRepository.getInstance().getModelDescriptors(regSolution)) {
        MPSCompilerUtil.debug(context,"LIB model " + desc.getModelName());
      }
    }
  }
  if (MPSCompilerUtil.isTracingMode()) {
    context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Project modules loaded in " + (System.nanoTime() - start) / 1000000 + " ms"));
    if (MPSCompilerUtil.isExtraTracingMode()) {
      for (      SModule m : MPSModuleRepository.getInstance().getModules(myProject)) {
        context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Debug output: module " + m.getModuleReference().toString()));
        for (        SModel d : SModelRepository.getInstance().getModelDescriptors(m)) {
          context.processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID,Kind.INFO,"Debug output: model " + SNodeOperations.getModelLongName(d) + " / "+ d.getReference().toString()));
        }
      }
    }
  }
}
