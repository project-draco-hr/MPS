{
  try {
    final List<SModel> modelDescriptors=ListSequence.fromListWithValues(new ArrayList<SModel>(),Sequence.fromIterable(((Iterable<SModel>)SModelRepository.getInstance().getModelDescriptors())).where(new IWhereFilter<SModel>(){
      public boolean accept(      SModel md){
        return SModelStereotype.isUserModel(md);
      }
    }
));
    ModelCheckerTool.getInstance(((Project)MapSequence.fromMap(_params).get("project"))).checkModels(modelDescriptors,((IOperationContext)MapSequence.fromMap(_params).get("operationContext")),true,new ModelCheckerIssueFinder(new ReferenceableConceptsChecker()));
    final Wrappers._int total=new Wrappers._int();
    final Wrappers._int referenceable=new Wrappers._int();
    final Map<String,Integer> used=MapSequence.fromMap(new HashMap<String,Integer>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        ListSequence.fromList(modelDescriptors).visitAll(new IVisitor<SModel>(){
          public void visit(          SModel it){
            for (            SNode n : it.getRootNodes()) {
              for (              SNode i : SNodeOperations.getNodeDescendants(n,null,true,new SConcept[]{})) {
                SNode ccp=SNodeOperations.as(((SNode)((jetbrains.mps.smodel.SNode)i).getConceptDeclarationNode()),MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
                if (ccp != null) {
                  total.value++;
                  if (!(SPropertyOperations.hasValue(ccp,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,5404671619616246344l,"staticScope"),"none",null))) {
                    referenceable.value++;
                    String cname=BehaviorReflection.invokeVirtual(String.class,ccp,"virtual_getFqName_1213877404258",new Object[]{});
                    if (MapSequence.fromMap(used).containsKey(cname)) {
                      MapSequence.fromMap(used).put(cname,MapSequence.fromMap(used).get(cname) + 1);
                    }
 else {
                      MapSequence.fromMap(used).put(cname,1);
                    }
                  }
                }
              }
            }
          }
        }
);
      }
    }
);
    String[] usedNames=SetSequence.fromSet(MapSequence.fromMap(used).keySet()).toGenericArray(String.class);
    Arrays.sort(usedNames,new Comparator<String>(){
      public int compare(      String a,      String b){
        return new Integer(MapSequence.fromMap(used).get(a)).compareTo(MapSequence.fromMap(used).get(b));
      }
    }
);
    System.out.println("" + referenceable.value + " out of "+ total.value+ " nodes are referenceable");
    for (    String s : usedNames) {
      System.out.println(MapSequence.fromMap(used).get(s) + "  " + s);
    }
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "FindReferencesToNonReferenceable",t);
    }
  }
}
