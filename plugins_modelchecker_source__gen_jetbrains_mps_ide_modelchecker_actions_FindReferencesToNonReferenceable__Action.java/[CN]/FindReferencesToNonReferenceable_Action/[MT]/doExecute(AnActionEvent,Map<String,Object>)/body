{
  final List<SModel> modelDescriptors=ListSequence.fromListWithValues(new ArrayList<SModel>(),Sequence.fromIterable(((Iterable<SModel>)((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getProjectModels())).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel md){
      return SModelStereotype.isUserModel(md);
    }
  }
));
  ModelCheckerTool.getInstance(((Project)MapSequence.fromMap(_params).get("project"))).checkModelsAndShowResult(modelDescriptors,new ReferenceableConceptsChecker());
  final Wrappers._int total=new Wrappers._int();
  final Wrappers._int referenceable=new Wrappers._int();
  final Map<String,Integer> used=MapSequence.fromMap(new HashMap<String,Integer>());
  ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getModelAccess().runReadAction(new Runnable(){
    public void run(){
      ListSequence.fromList(modelDescriptors).visitAll(new IVisitor<SModel>(){
        public void visit(        SModel it){
          for (          SNode n : it.getRootNodes()) {
            for (            SNode i : SNodeOperations.getNodeDescendants(n,null,true,new SAbstractConcept[]{})) {
              SNode ccp=SNodeOperations.as(SNodeOperations.asNode(SNodeOperations.getConcept(i)),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
              if (ccp != null) {
                total.value++;
                if (!(SPropertyOperations.hasValue(ccp,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0x4b014033eedc8a48L,"staticScope"),"none",null))) {
                  referenceable.value++;
                  String cname=((String)BHReflection.invoke(ccp,SMethodTrimmedId.create("getFqName",null,"hEwIO9y")));
                  if (MapSequence.fromMap(used).containsKey(cname)) {
                    MapSequence.fromMap(used).put(cname,MapSequence.fromMap(used).get(cname) + 1);
                  }
 else {
                    MapSequence.fromMap(used).put(cname,1);
                  }
                }
              }
            }
          }
        }
      }
);
    }
  }
);
  String[] usedNames=SetSequence.fromSet(MapSequence.fromMap(used).keySet()).toGenericArray(String.class);
  Arrays.sort(usedNames,new Comparator<String>(){
    public int compare(    String a,    String b){
      return new Integer(MapSequence.fromMap(used).get(a)).compareTo(MapSequence.fromMap(used).get(b));
    }
  }
);
  System.out.println("" + referenceable.value + " out of "+ total.value+ " nodes are referenceable");
  for (  String s : usedNames) {
    System.out.println(MapSequence.fromMap(used).get(s) + "  " + s);
  }
}
