{
  String langName=NameUtil.namespaceFromConceptFQName(id);
  SModule module=MPSModuleRepository.getInstance().getModuleByFqName(langName);
  if (module instanceof Language) {
    Language lang=(Language)module;
    SModel smd=lang.getStructureModelDescriptor();
    if (smd != null) {
      String modelFqName=SNodeOperations.getModelLongName(smd);
      for (      SNode root : smd.getRootNodes()) {
        String conceptFQName=InternUtil.intern(modelFqName + "." + root.getProperty(SNodeUtil.property_INamedConcept_name));
        if (conceptFQName.equals(SNodeUtil.concept_ConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
        String conceptName=root.getConcept().getQualifiedName();
        if (conceptName.equals(SNodeUtil.concept_ConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
 else         if (conceptName.equals(SNodeUtil.concept_InterfaceConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
      }
      if (myConcepts.containsKey(id))       return;
    }
  }
  id=InternUtil.intern(id);
  myConcepts.putIfAbsent(id,new SConceptNodeAdapter(id));
}
