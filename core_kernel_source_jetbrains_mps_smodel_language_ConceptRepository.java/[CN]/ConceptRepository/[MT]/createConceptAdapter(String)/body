{
  String langName=NameUtil.namespaceFromConceptFQName(id);
  IModule module=MPSModuleRepository.getInstance().getModuleByFqName(langName);
  if (module instanceof Language) {
    Language lang=(Language)module;
    SModel smd=lang.getStructureModelDescriptor();
    if (smd != null) {
      SModel sm=smd;
      String modelFqName=SNodeOperations.getModelLongName(sm);
      for (      SNode root : sm.getRootNodes()) {
        String conceptFQName=modelFqName + "." + root.getProperty(SNodeUtil.property_INamedConcept_name);
        if (conceptFQName.equals(SNodeUtil.concept_ConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
        String conceptId=root.getConcept().getId();
        if (conceptId.equals(SNodeUtil.concept_ConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
 else         if (conceptId.equals(SNodeUtil.concept_InterfaceConceptDeclaration)) {
          myConcepts.putIfAbsent(conceptFQName,new SConceptNodeAdapter(conceptFQName));
        }
      }
      if (myConcepts.containsKey(id))       return;
      LOG.error("Creating a concept descriptor for a concept not yet loaded " + id,new Throwable());
    }
  }
  LOG.error("Creating a concept descriptor for a concept from a language not yet loaded " + id,new Throwable());
  myConcepts.putIfAbsent(id,new SConceptNodeAdapter(id));
}
