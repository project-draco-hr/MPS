{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("concept",new BaseReferenceConstraintsDescriptor("concept",this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      if ((newReferentNode != null) && newReferentNode != oldReferentNode) {
        SPropertyOperations.set(referenceNode,"name",NameUtil.decapitalize(SPropertyOperations.getString(newReferentNode,"name")));
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(referenceNode),"jetbrains.mps.lang.typesystem.structure.InferenceRule")) {
          SPropertyOperations.set(SNodeOperations.cast(SNodeOperations.getParent(referenceNode),"jetbrains.mps.lang.typesystem.structure.InferenceRule"),"name","typeof_" + SPropertyOperations.getString(newReferentNode,"name"));
        }
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_dyivod_a0a0a0a0a4a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ConceptsScope(_context.getContextNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
        }
      }
;
    }
  }
);
  return references;
}
