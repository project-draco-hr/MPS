{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,0x1117e2ab6c9L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,0x1117e2ab6c9L),this){
    @Override public boolean hasOwnOnReferenceSetHandler(){
      return true;
    }
    @Override public boolean validate(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      return true;
    }
    @Override public void onReferenceSet(    final SNode referenceNode,    final SNode oldReferentNode,    final SNode newReferentNode){
      if ((newReferentNode != null) && newReferentNode != oldReferentNode) {
        SPropertyOperations.set(referenceNode,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"),NameUtil.decapitalize(SPropertyOperations.getString(newReferentNode,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))));
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(referenceNode),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2f5efaL,"jetbrains.mps.lang.typesystem.structure.InferenceRule"))) {
          SPropertyOperations.set(SNodeOperations.cast(SNodeOperations.getParent(referenceNode),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2f5efaL,"jetbrains.mps.lang.typesystem.structure.InferenceRule")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"),"typeof_" + SPropertyOperations.getString(newReferentNode,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
        }
      }
    }
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_dyivod_a0a0a0a0a4a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Scopes.forConcepts(_context.getContextNode(),MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
        }
      }
;
    }
  }
);
  return references;
}
