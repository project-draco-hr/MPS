{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8755280088213897754l,-5075149991798053422l),5610619299013057363l,5610619299013057365l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8755280088213897754l,-5075149991798053422l),5610619299013057363l,5610619299013057365l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.build.structure.BuildProject",true,false);
          String target=null;
          if ((contextProject != null)) {
            Scope importedArtifactsScope=ScopeUtil.getVisibleArtifactsScope(contextProject,true);
            if (importedArtifactsScope != null && !(importedArtifactsScope instanceof ModelPlusImportedScope)) {
              target=importedArtifactsScope.getReferenceText(_context.getContextNode(),_context.getParameterNode());
            }
          }
          if (target == null) {
            target=BehaviorReflection.invokeVirtual(String.class,_context.getParameterNode(),"virtual_getPresentation_1213877396640",new Object[]{});
          }
          return (_context.getSmartReference() ? "import " + target : target);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_cl5pbm_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.build.structure.BuildProject",true,false);
            if ((contextProject != null)) {
              return new FilteringScope(ScopeUtil.getVisibleArtifactsScope(contextProject,true)){
                @Override public boolean isExcluded(                SNode node){
                  return !(SNodeOperations.isInstanceOf(node,"jetbrains.mps.build.structure.BuildLayout_Container"));
                }
              }
;
            }
            return new ModelPlusImportedScope(_context.getModel(),false,"jetbrains.mps.build.structure.BuildLayout_Node");
          }
        }
      }
;
    }
  }
);
  return references;
}
