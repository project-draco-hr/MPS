{
  super(defaultOptions);
  myPanel=new JPanel();
  myPanel.setLayout(new BoxLayout(myPanel,BoxLayout.Y_AXIS));
  myPanel.setBorder(IdeBorderFactory.createTitledBorder("Finders",false));
  Set<ReloadableFinder> availableFinders=FindersManager.getInstance().getAvailableFinders(node);
  List<ReloadableFinder> sortedFinders=new ArrayList<ReloadableFinder>(availableFinders);
  Collections.sort(sortedFinders,new Comparator<ReloadableFinder>(){
    @Override public int compare(    ReloadableFinder o1,    ReloadableFinder o2){
      return o1.getDescription().compareToIgnoreCase(o2.getDescription());
    }
  }
);
  List<String> correctEnabledFinders=new ArrayList<String>();
  for (  final ReloadableFinder finder : sortedFinders) {
    boolean isEnabled=false;
    for (    String enabledFinderName : myOptions.getFindersClassNames()) {
      if (enabledFinderName.equals(finder.getFinder().getClass().getName())) {
        isEnabled=true;
      }
    }
    if (finder.isUsedByDefault(node)) {
      correctEnabledFinders.add(finder.getFinder().getClass().getName());
    }
    final JBCheckBox finderCheckBox=new JBCheckBox(finder.getFinder().getDescription(),finder.isUsedByDefault(node));
    finderCheckBox.setBorder(BorderFactory.createEmptyBorder(0,5,5,0));
    finderCheckBox.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        String finderClassName=finder.getFinder().getClass().getName();
        if (((JCheckBox)e.getSource()).isSelected()) {
          if (!myOptions.getFindersClassNames().contains(finderClassName)) {
            myOptions.getFindersClassNames().add(finderClassName);
            findersListChangedByUser();
          }
        }
 else {
          myOptions.getFindersClassNames().remove(finderClassName);
          findersListChangedByUser();
        }
      }
    }
);
    finderCheckBox.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if ((e.getKeyCode() == MenuKeyEvent.VK_B) && (e.getID() == MenuKeyEvent.KEY_PRESSED) && (e.isControlDown())) {
          if (finder.canNavigate()) {
            goToFinder(finder);
            e.consume();
          }
        }
      }
    }
);
    if (!finder.getLongDescription().equals("")) {
      StringBuilder htmlTooltipText=new StringBuilder();
      htmlTooltipText.append("<html>").append(finder.getLongDescription().replaceAll("\n","<br>")).append(")</html>");
      finderCheckBox.setToolTipText(htmlTooltipText.toString());
    }
    JToolBar finderHolder=new JToolBar(JToolBar.HORIZONTAL);
    finderHolder.add(finderCheckBox);
    if (finder.canNavigate()) {
      JBLabel goToFinderLabel=new JBLabel(Nodes.Symlink,JLabel.CENTER);
      goToFinderLabel.setBorder(BorderFactory.createEmptyBorder());
      goToFinderLabel.setFocusable(false);
      goToFinderLabel.setToolTipText("Go to finder declaration");
      goToFinderLabel.addMouseListener(new MouseListener(){
        @Override public void mouseClicked(        MouseEvent e){
          if (finder.canNavigate()) {
            goToFinder(finder);
          }
        }
        @Override public void mousePressed(        MouseEvent e){
        }
        @Override public void mouseReleased(        MouseEvent e){
        }
        @Override public void mouseEntered(        MouseEvent e){
        }
        @Override public void mouseExited(        MouseEvent e){
        }
      }
);
      goToFinderLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      finderHolder.add(goToFinderLabel);
    }
    finderHolder.setBorder(new EmptyBorder(0,0,0,0));
    finderHolder.setFloatable(false);
    finderHolder.setAlignmentX(JToolBar.LEFT_ALIGNMENT);
    finderHolder.setBackground(myPanel.getBackground());
    myPanel.add(finderHolder);
  }
  myOptions.setFindersClassNames(correctEnabledFinders);
}
