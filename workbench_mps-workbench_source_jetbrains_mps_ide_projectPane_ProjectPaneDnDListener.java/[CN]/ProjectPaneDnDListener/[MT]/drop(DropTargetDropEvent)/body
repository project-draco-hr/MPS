{
  final MPSTreeNode target=getTargetTreeNode(dtde);
  final List<Pair<SNodeReference,String>> sourceNodes=getSourceNodes(dtde);
  if (!isDropTargetAcceptable(target,sourceNodes)) {
    dtde.rejectDrop();
    return;
  }
  dtde.acceptDrop(dtde.getDropAction());
  final DataContext dataContext=DataManager.getInstance().getDataContext(myTree);
  final MPSProject project=MPSDataKeys.MPS_PROJECT.getData(dataContext);
  if (project == null) {
    dtde.rejectDrop();
    return;
  }
  Frame frame=MPSDataKeys.FRAME.getData(dataContext);
  final String targetPackage=(getTargetVirtualPackage(target) == null) ? "" : getTargetVirtualPackage(target);
  String text=getConfirmLabel(sourceNodes.size(),targetPackage);
  int result=JOptionPane.showConfirmDialog(frame,text,"Move Nodes",JOptionPane.YES_NO_OPTION);
  if (result != JOptionPane.YES_OPTION)   return;
  project.getModelAccess().executeCommand(new Runnable(){
    @Override public void run(){
      SModel targetModel=getTargetModel(target);
      if (targetModel == null)       return;
      for (      Pair<SNode,String> sourceNode : getNodesToMove(targetModel,targetPackage,sourceNodes)) {
        String fullTargetPack=getFullTargetPack(targetPackage,sourceNode.o2);
        SNodeAccessUtil.setProperty(sourceNode.o1,SNodeUtil.property_BaseConcept_virtualPackage,fullTargetPack);
        if (SNodeOperations.isInstanceOf(sourceNode.o1,SNodeUtil.concept_AbstractConceptDeclaration)) {
          SNode baseNode=sourceNode.o1;
          List<RelationDescriptor> tabs=ProjectPluginManager.getApplicableTabs(project.getProject(),baseNode);
          for (          RelationDescriptor tab : tabs) {
            if (!tab.isApplicable(baseNode))             continue;
            for (            SNode aspect : tab.getNodes(baseNode)) {
              if (tab.getBaseNode(aspect) != baseNode)               continue;
              SNodeAccessUtil.setProperty(aspect,SNodeUtil.property_BaseConcept_virtualPackage,fullTargetPack);
            }
          }
        }
      }
    }
  }
);
}
