{
  Point point=dtde.getLocation();
  final TreePath treePath=myTree.getPathForLocation(point.x,point.y);
  if (treePath == null) {
    dtde.rejectDrop();
    return;
  }
  Object target=treePath.getLastPathComponent();
  if (!(target instanceof MPSTreeNode)) {
    dtde.rejectDrop();
    return;
  }
  Object source=null;
  try {
    source=dtde.getTransferable().getTransferData(myDataFlavor);
    if (!(source instanceof List) || ((List)source).isEmpty()) {
      dtde.rejectDrop();
      return;
    }
  }
 catch (  UnsupportedFlavorException e) {
    LOG.error(e);
    dtde.rejectDrop();
  }
catch (  IOException e) {
    LOG.error(e);
    dtde.rejectDrop();
  }
  dtde.acceptDrop(dtde.getDropAction());
  final List<Pair<SNodePointer,String>> sourceNodes=(List<Pair<SNodePointer,String>>)source;
  Project project=MPSDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext());
  JFrame frame=WindowManager.getInstance().getFrame(project);
  final String targetPackage=(getTargetVirtualPackage(treePath) == null) ? "" : getTargetVirtualPackage(treePath);
  String text=getConfirmLabel(sourceNodes.size(),targetPackage);
  int result=JOptionPane.showConfirmDialog(frame,text,"Move Nodes",JOptionPane.YES_NO_OPTION);
  if (result != JOptionPane.YES_OPTION)   return;
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelDescriptor targetModel=getTargetModel(treePath);
      if (targetModel == null)       return;
      for (      Pair<SNode,String> sourceNode : getNodesToMove(targetModel,targetPackage,sourceNodes)) {
        String fullTargetPack=getFullTargetPack(targetPackage,sourceNode.o2);
        SNodeAccessUtil.setProperty(sourceNode.o1,SModelTreeNode.PACK,fullTargetPack);
        if (SNodeOperations.isInstanceOf(sourceNode.o1,SNodeUtil.concept_AbstractConceptDeclaration)) {
          List<SNode> allAspects=SNodeUtil.findAllAspects(sourceNode.o1);
          for (          SNode aspect : allAspects) {
            SNodeAccessUtil.setProperty(aspect,SModelTreeNode.PACK,fullTargetPack);
          }
        }
      }
    }
  }
);
}
