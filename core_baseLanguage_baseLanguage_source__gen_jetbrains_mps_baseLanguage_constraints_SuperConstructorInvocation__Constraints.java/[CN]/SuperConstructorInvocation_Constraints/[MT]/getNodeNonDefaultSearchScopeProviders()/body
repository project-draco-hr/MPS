{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode thisConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept",true,false);
      SNode superClass=SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(thisConcept,"superclass",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
      if (superClass == null) {
        superClass=SNodeOperations.cast(SLinkOperations.getTarget(new SuperConstructorInvocation_Constraints.QuotationClass_6sxar7_a0a0a0a3a2a0b0a1a8().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
      }
      return SLinkOperations.getTargets(superClass,"constructor",true);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","1213104847241");
    }
  }
);
  return result;
}
