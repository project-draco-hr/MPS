{
  String relativePath=basePath;
  if (relativePath == null) {
    return ListSequence.fromList(new ArrayList<String>());
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode),"jetbrains.mps.build.structure.BuildCompositePath")) {
    relativePath+="/" + BuildCompositePath_Behavior.call_getPathToHead_3968971886499106107(SNodeOperations.cast(SNodeOperations.getParent(thisNode),"jetbrains.mps.build.structure.BuildCompositePath"));
  }
  File file=new File(relativePath);
  if (!(file.exists())) {
    return ListSequence.fromList(new ArrayList<String>());
  }
  return Sequence.fromIterable(Sequence.fromArray(file.listFiles())).select(new ISelector<File,String>(){
    public String select(    File it){
      return it.getName();
    }
  }
).union(Sequence.fromIterable(Sequence.<String>singleton(".."))).sort(new ISelector<String,String>(){
    public String select(    String it){
      return it;
    }
  }
,true).toListSequence();
}
