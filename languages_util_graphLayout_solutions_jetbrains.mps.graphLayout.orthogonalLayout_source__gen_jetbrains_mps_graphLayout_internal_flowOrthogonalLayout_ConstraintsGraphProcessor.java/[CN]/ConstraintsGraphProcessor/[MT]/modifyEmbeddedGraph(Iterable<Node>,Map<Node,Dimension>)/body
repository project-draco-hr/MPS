{
  myNodesWithSize=nodesWithSize;
  myEdgeLengths=MapSequence.fromMap(new HashMap<Edge,Integer>());
  for (  Node node : Sequence.fromIterable(nodesWithSize)) {
    List<Edge> oldEdges=ListSequence.fromList(new ArrayList<Edge>());
    ListSequence.fromList(oldEdges).addSequence(ListSequence.fromList(node.getEdges()));
    for (    Edge oldEdge : ListSequence.fromList(oldEdges)) {
      this.splitEdge(oldEdge);
    }
    Map<Direction2D,List<Edge>> rectEdges=makeRectangleForNode(node);
    for (    Direction2D dir : Direction2D.values()) {
      int length=MapSequence.fromMap(nodeSizes).get(node).width;
      if (dir.isVertical()) {
        length=MapSequence.fromMap(nodeSizes).get(node).height;
      }
      List<Edge> edges=MapSequence.fromMap(rectEdges).get(dir);
      int edgeLength=length / ListSequence.fromList(edges).count();
      for (      Edge edge : ListSequence.fromList(edges)) {
        if (edge == ListSequence.fromList(edges).last()) {
          MapSequence.fromMap(myEdgeLengths).put(edge,length - (edgeLength * (ListSequence.fromList(edges).count() - 1)));
        }
 else {
          MapSequence.fromMap(myEdgeLengths).put(edge,edgeLength);
        }
      }
    }
  }
  if (ConstraintsGraphProcessor.SHOW_INFO > 0) {
    System.out.println("after modification: ");
    this.print();
  }
}
