{
  Map<Node,Node> horNodeMap=MapSequence.fromMap(new HashMap<Node,Node>());
  Graph horConstraintsGraph=getDirectionConstraintsGraph(new _FunctionTypes._return_P1_E0<Boolean,Direction2D>(){
    public Boolean invoke(    Direction2D dir){
      return dir.isHorizontal();
    }
  }
,horNodeMap);
  Map<Node,Node> verNodeMap=MapSequence.fromMap(new HashMap<Node,Node>());
  Graph verConstraintsGraph=getDirectionConstraintsGraph(new _FunctionTypes._return_P1_E0<Boolean,Direction2D>(){
    public Boolean invoke(    Direction2D dir){
      return dir.isVertical();
    }
  }
,verNodeMap);
  Map<Edge,Edge> edgeMap=MapSequence.fromMap(new HashMap<Edge,Edge>());
  for (  Edge edge : ListSequence.fromList(myGraph.getEdges())) {
    Edge newEdge=connect(edge,Direction2D.RIGHT,verNodeMap);
    if (newEdge != null) {
      MapSequence.fromMap(edgeMap).put(edge,newEdge);
    }
 else {
      MapSequence.fromMap(edgeMap).put(edge,connect(edge,Direction2D.UP,horNodeMap));
    }
  }
  myHorConstraintsGraph=horConstraintsGraph;
  myVerConstraintsGraph=verConstraintsGraph;
  myHorNodeMap=horNodeMap;
  myVerNodeMap=verNodeMap;
  myEdgeMap=edgeMap;
  if (ConstraintsGraphProcessor.SHOW_INFO > 0) {
    System.out.println("constaints graph:");
    for (    Node node : ListSequence.fromList(myGraph.getNodes())) {
      System.out.println("node " + node);
      System.out.println("hor = " + MapSequence.fromMap(horNodeMap).get(node) + ", ver = "+ MapSequence.fromMap(verNodeMap).get(node));
    }
    System.out.println("horizontal constraints graph: " + horConstraintsGraph);
    System.out.println("vertical constraints graph: " + verConstraintsGraph);
  }
}
