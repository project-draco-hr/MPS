{
  myFacesToSkip=SetSequence.<Face>fromSet(new HashSet<Face>());
  List<Dart> darts=myEmbeddedGraph.getDartWithSource(node);
  Map<Direction2D,List<Edge>> edgesInDirection=MapSequence.<Direction2D,List<Edge>>fromMap(new HashMap<Direction2D,List<Edge>>());
  for (  Direction2D dir : Direction2D.values()) {
    MapSequence.<Direction2D,List<Edge>>fromMap(edgesInDirection).put(dir,ListSequence.<Edge>fromList(new ArrayList<Edge>()));
  }
  Dart cur=ListSequence.<Dart>fromList(darts).first();
  for (int step=0; step < ListSequence.<Dart>fromList(darts).count(); step++) {
    final Face face=myEmbeddedGraph.getFace(cur);
    Dart next=ListSequence.<Dart>fromList(darts).findFirst(new IWhereFilter<Dart>(){
      public boolean accept(      Dart dart){
        return myEmbeddedGraph.getFace(myEmbeddedGraph.getOpposite(dart)) == face;
      }
    }
);
    int turn=MapSequence.<Dart,Direction2D>fromMap(myDirections).get(cur).getClockwiseTurn(MapSequence.<Dart,Direction2D>fromMap(myDirections).get(next));
    if (turn == 0) {
      turn=4;
    }
    List<Edge> newEdges=ListSequence.<Edge>fromList(new LinkedList<Edge>());
    Node pathSource=cur.getTarget();
    Node pathTarget=next.getTarget();
    Node curNode=pathSource;
    for (int i=0; i <= turn; i++) {
      Node nextNode;
      if (i == turn) {
        nextNode=pathTarget;
      }
 else {
        nextNode=myGraph.createNode();
      }
      ListSequence.<Edge>fromList(newEdges).addElement(myGraph.connect(curNode,nextNode));
      curNode=nextNode;
    }
    boolean isOuter=myEmbeddedGraph.isOuterFace(face);
    List<Face> newFaces=myEmbeddedGraph.splitFace(face,newEdges,pathSource,pathTarget);
    Face newFaceWithNode=null;
    for (    Face newFace : ListSequence.<Face>fromList(newFaces)) {
      Iterable<Node> faceNodes=ListSequence.<Dart>fromList(newFace.getDarts()).<Node>select(new ISelector<Dart,Node>(){
        public Node select(        Dart dart){
          return dart.getSource();
        }
      }
);
      if (Sequence.<Node>fromIterable(faceNodes).contains(node)) {
        newFaceWithNode=newFace;
      }
    }
    SetSequence.fromSet(myFacesToSkip).addElement(newFaceWithNode);
    if (isOuter) {
      Face newOuterFace=ListSequence.<Face>fromList(newFaces).getElement(0);
      if (newOuterFace == newFaceWithNode) {
        newOuterFace=ListSequence.<Face>fromList(newFaces).getElement(1);
      }
      myEmbeddedGraph.setOuterFace(newOuterFace);
    }
    Direction2D curDir=MapSequence.<Dart,Direction2D>fromMap(myDirections).get(cur).turnClockwise(1);
    curNode=pathSource;
    for (    Edge edge : ListSequence.<Edge>fromList(newEdges)) {
      for (      Dart dart : ListSequence.<Dart>fromList(myEmbeddedGraph.getDarts(edge))) {
        if (dart.getSource() == curNode) {
          MapSequence.<Dart,Direction2D>fromMap(myDirections).put(dart,curDir);
          ListSequence.<Edge>fromList(MapSequence.<Direction2D,List<Edge>>fromMap(edgesInDirection).get(curDir)).addElement(edge);
        }
 else {
          MapSequence.<Dart,Direction2D>fromMap(myDirections).put(dart,curDir.opposite());
        }
      }
      curNode=edge.getOpposite(curNode);
      curDir=curDir.turnClockwise(1);
    }
    cur=next;
  }
  return edgesInDirection;
}
