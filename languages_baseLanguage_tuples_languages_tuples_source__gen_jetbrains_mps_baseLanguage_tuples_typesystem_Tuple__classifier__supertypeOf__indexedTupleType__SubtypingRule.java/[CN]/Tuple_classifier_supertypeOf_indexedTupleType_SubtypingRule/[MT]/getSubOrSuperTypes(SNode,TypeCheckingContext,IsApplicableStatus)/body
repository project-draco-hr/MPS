{
  List<SNode> result=new ArrayList<SNode>();
  final String ifcname="_" + ListSequence.fromList(SLinkOperations.getChildren(itt,MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1238852151516l,1238852204892l,"componentType"))).count();
  SNode ifc=Sequence.fromIterable(Classifier_Behavior.call_nestedClassifiers_5292274854859193142(SLinkOperations.getTarget(_quotation_createNode_tm6bn3_a0a0a2a1(),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")))).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode ifc){
      return ifcname.equals(SPropertyOperations.getString(ifc,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
    }
  }
);
  SNode supertype=_quotation_createNode_tm6bn3_a0d0b(ifc);
  ListSequence.fromList(result).addElement(supertype);
  for (  SNode comptype : SLinkOperations.getChildren(itt,MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1238852151516l,1238852204892l,"componentType"))) {
    SNode javatype=ClassifierTypeUtil.getTypeCoercedToClassifierType(comptype);
    ListSequence.fromList(SLinkOperations.getChildren(supertype,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1109201940907l,"parameter"))).addElement(SNodeOperations.copyNode(javatype));
  }
  return result;
}
