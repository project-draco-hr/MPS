{
  if (SConceptOperations.isSubConceptOf(childConcept,"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing")) {
    SNode opnd=SLinkOperations.getTarget(SNodeOperations.as(parentNode,"jetbrains.mps.baseLanguage.structure.DotExpression"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
    if ((opnd != null)) {
      SNode opndtype=TypeChecker.getInstance().getTypeOf(opnd);
      for (      SNode exptype : (IApplicableToNothing_Behavior.call_getAllApplicableTypes_5994574781955687463(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.castConcept(((SNode)childConcept),"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing")))))) {
        if (TypeChecker.getInstance().getSubtypingManager().isSubtype(opndtype,exptype,false)) {
          return true;
        }
      }
    }
    return false;
  }
 else {
    return SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.DotExpression") && (TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(parentNode,"jetbrains.mps.baseLanguage.structure.DotExpression"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"))),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"),false) != null);
  }
}
