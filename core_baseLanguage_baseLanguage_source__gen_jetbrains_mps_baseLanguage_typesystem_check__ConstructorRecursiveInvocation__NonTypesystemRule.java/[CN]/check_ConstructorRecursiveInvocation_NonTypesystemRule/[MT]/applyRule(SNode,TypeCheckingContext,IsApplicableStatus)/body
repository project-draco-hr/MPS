{
  List<SNode> constructors=new ArrayList<SNode>();
  for (  SNode constructor : SLinkOperations.getTargets(classConcept,"constructor",true)) {
    if (SNodeOperations.isInstanceOf(StatementList_Behavior.call_getFirstStatement_5420652334935371934(SLinkOperations.getTarget(constructor,"body",true)),"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement")) {
      constructors.add(constructor);
    }
  }
  List<SNode> nodesWithErrors=new ArrayList<SNode>();
  while (ListSequence.fromList(constructors).isNotEmpty()) {
    SNode current=ListSequence.fromList(constructors).getElement(0);
    List<SNode> passed=new ArrayList<SNode>();
    ListSequence.fromList(passed).addElement(current);
    boolean end=false;
    while (!(end)) {
      SNode calledConstructor=ConstructorDeclaration_Behavior.call_getThisConstructorInvocation_6018737561676809124(current);
      if (calledConstructor != null) {
        if (ListSequence.fromList(passed).contains(calledConstructor)) {
          ListSequence.fromList(nodesWithErrors).addElement(current);
          do {
            current=ConstructorDeclaration_Behavior.call_getThisConstructorInvocation_6018737561676809124(current);
            ListSequence.fromList(nodesWithErrors).addElement(current);
          }
 while (current != calledConstructor);
          end=true;
        }
        ListSequence.fromList(passed).addElement(calledConstructor);
        current=calledConstructor;
      }
 else {
        end=true;
      }
    }
    ListSequence.fromList(constructors).removeSequence(ListSequence.fromList(passed));
    ListSequence.fromList(passed).clear();
  }
  for (  SNode constructor : nodesWithErrors) {
{
      BaseQuickFixProvider intentionProvider=null;
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(constructor,"Recursive constructor invocation","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","698255809162976968",intentionProvider,errorTarget);
    }
  }
}
