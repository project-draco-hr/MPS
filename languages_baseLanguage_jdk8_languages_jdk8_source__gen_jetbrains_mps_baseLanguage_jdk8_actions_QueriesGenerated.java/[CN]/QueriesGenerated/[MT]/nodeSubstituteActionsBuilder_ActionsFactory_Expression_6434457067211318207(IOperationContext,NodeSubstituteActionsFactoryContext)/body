{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.jdk8.structure.SuperInterfaceMethodCall");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope scope=Scope.getScope(_context.getParentNode(),_context.getCurrentTargetNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperInerfaceKind"));
          if (scope == null) {
            return Collections.emptyList();
          }
          return Sequence.fromIterable(scope.getAvailableElements("")).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"));
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfdcdc48fbfd84831L,0xaa765abac2ffa010L,0x17dbb10eeb72e5d9L,"jetbrains.mps.baseLanguage.jdk8.structure.SuperInterfaceMethodCall")),null);
              SLinkOperations.setTarget(result,MetaAdapterFactory.getReferenceLink(0xfdcdc48fbfd84831L,0xaa765abac2ffa010L,0x17dbb10eeb72e5d9L,0x17dbb10eeb7528deL,"classifier"),(item));
              return result;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "." + "super";
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "super method call^" + NodePresentationUtil.descriptionText((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
