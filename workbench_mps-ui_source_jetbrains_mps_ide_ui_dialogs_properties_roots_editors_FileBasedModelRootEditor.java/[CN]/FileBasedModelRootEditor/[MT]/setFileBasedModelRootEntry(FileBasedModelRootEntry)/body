{
  if (myFileBasedModelRootEntry != null && myFileBasedModelRootEntry.equals(fileBasedModelRootEntry)) {
    return;
  }
  if (myFileSystemTree != null) {
    Disposer.dispose(myFileSystemTree);
    myFileSystemTree=null;
  }
  if (myFileBasedModelRootEntry != null) {
    myFileBasedModelRootEntry=null;
  }
  if (fileBasedModelRootEntry == null) {
    ((DefaultTreeModel)myTree.getModel()).setRoot(EMPTY_TREE_ROOT);
    myTreePanel.setVisible(false);
    if (myFileSystemTree != null) {
      Disposer.dispose(myFileSystemTree);
    }
    return;
  }
  myTreePanel.setVisible(true);
  myFileBasedModelRootEntry=fileBasedModelRootEntry;
  String path=((FileBasedModelRoot)myFileBasedModelRootEntry.getModelRoot()).getContentRoot();
  VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(VirtualFileManager.constructUrl("file",path));
  setRoot(file);
  final VirtualFile file2Runnable=file;
  final Runnable init=new Runnable(){
    @Override public void run(){
      myFileSystemTree.updateTree();
      myFileSystemTree.select(file2Runnable,null);
    }
  }
;
  myFileSystemTree=new FileSystemTreeImpl(null,myDescriptor,myTree,getModelRootEntryCellRenderer(),init,null){
    @Override protected AbstractTreeBuilder createTreeBuilder(    JTree tree,    DefaultTreeModel treeModel,    AbstractTreeStructure treeStructure,    Comparator<NodeDescriptor> comparator,    FileChooserDescriptor descriptor,    final Runnable onInitialized){
      return new MyFileTreeBuilder(tree,treeModel,treeStructure,comparator,descriptor,onInitialized);
    }
  }
;
  myFileSystemTree.showHiddens(true);
  Disposer.register(myFileBasedModelRootEntry,myFileSystemTree);
  final NewFolderAction newFolderAction=new MyNewFolderAction();
  final DefaultActionGroup mousePopupGroup=new DefaultActionGroup();
  mousePopupGroup.add(myEditingActionsGroup);
  mousePopupGroup.addSeparator();
  mousePopupGroup.add(newFolderAction);
  mousePopupGroup.add(new ChooseModelRootContentFolder());
  myFileSystemTree.registerMouseListener(mousePopupGroup);
  createEditingActions();
}
