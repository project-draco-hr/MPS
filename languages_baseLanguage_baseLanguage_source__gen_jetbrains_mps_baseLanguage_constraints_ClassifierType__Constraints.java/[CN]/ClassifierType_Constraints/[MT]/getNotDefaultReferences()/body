{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_1zr1bt_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            boolean resolvingSuperClass=SNodeOperations.hasRole(_context.getReferenceNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept","superclass") || SNodeOperations.hasRole(_context.getReferenceNode(),"jetbrains.mps.baseLanguage.structure.ClassConcept","implementedInterface") || SNodeOperations.hasRole(_context.getReferenceNode(),"jetbrains.mps.baseLanguage.structure.Interface","extendedInterface");
            return ClassifierScopes.getVisibleClassifiersScope(_context.getContextNode(),!(resolvingSuperClass),operationContext.getScope());
          }
        }
      }
;
    }
  }
);
  return references;
}
