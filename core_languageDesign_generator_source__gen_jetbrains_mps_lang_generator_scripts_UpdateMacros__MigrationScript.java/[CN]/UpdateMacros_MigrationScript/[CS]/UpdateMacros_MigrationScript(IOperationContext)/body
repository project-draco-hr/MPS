{
  super("Update Generator Macros");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Replace $IF$(true) -> $LABEL$ (when possible)";
    }
    public String getAdditionalInfo(){
      return "Replace $IF$(true) -> $LABEL$ (when possible)";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.generator.structure.IfMacro";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if ((SLinkOperations.getTarget(node,"mappingLabel",false) == null) || StringUtils.isEmpty(SPropertyOperations.getString(SLinkOperations.getTarget(node,"mappingLabel",false),"name"))) {
        return false;
      }
      if ((SLinkOperations.getTarget(node,"alternativeConsequence",true) != null)) {
        return false;
      }
      List<SNode> statements=SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(node,"conditionFunction",true),"body",true),"statement",true);
      if (statements.size() != 1) {
        return false;
      }
      SNode statement=ListSequence.fromList(statements).first();
      if ((statement == null) || !(SNodeOperations.isInstanceOf(statement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"))) {
        return false;
      }
      SNode expr=SLinkOperations.getTarget(SNodeOperations.cast(statement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement"),"expression",true);
      return SNodeOperations.isInstanceOf(expr,"jetbrains.mps.baseLanguage.structure.BooleanConstant") && SPropertyOperations.getBoolean(SNodeOperations.cast(expr,"jetbrains.mps.baseLanguage.structure.BooleanConstant"),"value");
    }
    public void doUpdateInstanceNode(    SNode node){
      SNodeFactoryOperations.replaceWithNewChild(node,"jetbrains.mps.lang.generator.structure.LabelMacro");
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
