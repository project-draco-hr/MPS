{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      ModelCheckerSettings settings=ModelCheckerSettings.getInstance();
      SModel model=modelDescriptor.getSModel();
      for (      SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
        if (!(checkAndUpdateIndicator(progressContext,"Checking " + SModelOperations.getModelName(model) + " for instances of unavailable concepts..."))) {
          return;
        }
        SNode concept=SNodeOperations.getConceptDeclaration(node);
        if (concept == null) {
          addIssue(results,node,"Cannot find concept \"" + INamedConcept_Behavior.call_getFqName_1213877404258(concept) + "\"");
        }
      }
      if (settings.isCheckUnresolvedReferences()) {
        for (        SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
          if (!(checkAndUpdateIndicator(progressContext,"Checking " + SModelOperations.getModelName(model) + " for unresolved references..."))) {
            return;
          }
          for (          SReference ref : ListSequence.fromList(SNodeOperations.getReferences(node))) {
            if ((SLinkOperations.getTargetNode(ref) == null)) {
              addIssue(results,node,"Unresolved reference: " + SLinkOperations.getResolveInfo(ref));
            }
          }
        }
      }
      if (settings.isCheckConstraints()) {
        for (        SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
          if (!(checkAndUpdateIndicator(progressContext,"Checking " + SModelOperations.getModelName(model) + " for cardinalities and properties constraints..."))) {
            return;
          }
          SNode concept=SNodeOperations.getConceptDeclaration(node);
          for (          SNode link : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept))) {
            if (SPropertyOperations.hasValue(link,"sourceCardinality","1","0..1") || SPropertyOperations.hasValue(link,"sourceCardinality","1..n","0..1")) {
              if (SPropertyOperations.hasValue(link,"metaClass","aggregation","reference")) {
                if (ListSequence.fromList(SNodeOperations.getChildren(node,link)).isEmpty()) {
                  addIssue(results,node,"Cardinality constraint violation in role \"" + SPropertyOperations.getString(link,"role") + "\"");
                }
              }
 else {
                if ((SNodeOperations.getReference(node,link) == null)) {
                  addIssue(results,node,"Cardinality constraint violation in role \"" + SPropertyOperations.getString(link,"role") + "\"");
                }
              }
            }
          }
          for (          SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(SNodeOperations.isAttribute(it));
            }
          }
)) {
            if (!(isDeclaredLink(SNodeOperations.getContainingLinkDeclaration(child),true))) {
              addIssue(results,node,"Usage of undeclared child role \"" + SNodeOperations.getContainingLinkRole(child) + "\"",CATEGORY_WARNING,new ModelCheckerFix.UndeclaredChild(node,SNodeOperations.getContainingLinkRole(child)));
            }
          }
          for (          SReference reference : ListSequence.fromList(SNodeOperations.getReferences(node))) {
            if (!(isDeclaredLink(SLinkOperations.findLinkDeclaration(reference),false))) {
              addIssue(results,node,"Usage of undeclared reference role \"" + reference + "\"",CATEGORY_WARNING,new ModelCheckerFix.UndeclaredReference(node,SLinkOperations.getRole(reference)));
            }
          }
          ConceptAndSuperConceptsScope chs=new ConceptAndSuperConceptsScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(concept)));
          List<PropertyDeclaration> props=chs.getAdapters(PropertyDeclaration.class);
          for (          PropertyDeclaration p : ListSequence.fromList(props)) {
            PropertySupport ps=PropertySupport.getPropertySupport(p);
            String value=ps.fromInternalValue(node.getProperty(p.getName()));
            if (!(ps.canSetValue(node,p.getName(),value,operationContext.getScope()))) {
              addIssue(results,node,"Property constraint violation for property \"" + p.getName() + "\"",CATEGORY_WARNING,null);
            }
          }
          for (          String name : SetSequence.fromSet(node.getPropertyNames())) {
            if (node.isRoot() && SModelTreeNode.PACK.equals(name)) {
              continue;
            }
            if (!(isDeclaredProperty(concept,name))) {
              addIssue(results,node,"Usage of undeclared property \"" + name + "\"",CATEGORY_WARNING,new ModelCheckerFix.UndeclaredProperty(node,name));
            }
          }
        }
      }
      if (settings.isCheckScopes()) {
        for (        SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
          if (!(checkAndUpdateIndicator(progressContext,"Checking " + SModelOperations.getModelName(model) + " for valid scopes in references..."))) {
            return;
          }
          SNode concept=SNodeOperations.getConceptDeclaration(node);
          for (          SReference ref : ListSequence.fromList(SNodeOperations.getReferences(node))) {
            if (!(isDeclaredLink(SLinkOperations.findLinkDeclaration(ref),false))) {
              continue;
            }
            SNode targetNode=SLinkOperations.getTargetNode(ref);
            if (targetNode == null) {
              continue;
            }
            try {
              SNode genuineLinkDeclaration=LinkDeclaration_Behavior.call_getGenuineLink_1213877254523(SLinkOperations.findLinkDeclaration(ref));
              IModule thisModelModule=model.getModelDescriptor().getModule();
              if (checkScope(concept,node,targetNode,SPropertyOperations.getString(genuineLinkDeclaration,"role"),operationContext)) {
              }
 else               if (checkScope(concept,node,targetNode,SPropertyOperations.getString(genuineLinkDeclaration,"role"),new ModuleContext(thisModelModule,operationContext.getMPSProject()))) {
              }
 else {
                addIssue(results,node,"Reference in role \"" + SPropertyOperations.getString(genuineLinkDeclaration,"role") + "\" is out of scope",CATEGORY_WARNING,null);
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
              addIssue(results,node,"Exception \"" + e.getMessage() + "\" during scope checking");
            }
          }
        }
      }
      if (settings.isCheckTypesystem()) {
        TypeChecker tc=TypeChecker.getInstance();
        for (        SNode rootNode : ListSequence.fromList(SModelOperations.getRoots(model,null))) {
          if (!(checkAndUpdateIndicator(progressContext,"Checking " + SModelOperations.getModelName(model) + " for typesystem rules..."))) {
            return;
          }
          tc.checkRoot(rootNode);
          TypeCheckingContext typeCheckingContext=NodeTypesComponentsRepository.getInstance().getTypeCheckingContext(rootNode);
          NodeTypesComponent nodeTypesComponent=typeCheckingContext.getBaseNodeTypesComponent();
          for (          Pair<SNode,List<IErrorReporter>> nodeErrorReporters : SetSequence.fromSet(nodeTypesComponent.getNodesWithErrors())) {
            SNode node=nodeErrorReporters.o1;
            for (            IErrorReporter errorReporter : ListSequence.fromList(nodeErrorReporters.o2)) {
              addIssue(results,node,errorReporter.reportError(),getResultCategory(errorReporter.getMessageStatus()),null);
            }
          }
        }
      }
    }
  }
);
  return !(progressContext.getProgressIndicator().isCanceled());
}
