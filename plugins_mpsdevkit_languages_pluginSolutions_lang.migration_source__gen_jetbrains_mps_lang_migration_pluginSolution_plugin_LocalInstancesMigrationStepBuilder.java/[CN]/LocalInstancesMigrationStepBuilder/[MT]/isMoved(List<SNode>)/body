{
  if (myParts == null) {
    throw new IllegalStateException("isMoved() should be called after willBeMoved()");
  }
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SRepository> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SRepository>(){
      public SRepository select(      SNode it){
        return SNodeOperations.getModel(it).getRepository();
      }
    }
);
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>(){
      public boolean accept(      SRepository it){
        return eq_5lvz9m_a0a0a0a0a0a1a2a71(it,myRepository);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same repository.");
    }
  }
  if (ListSequence.fromList(myParts).count() != ListSequence.fromList(nodes).count()) {
    throw new IllegalArgumentException("List size mismatch");
  }
{
    Iterator<SNode> to_it=ListSequence.fromList(nodes).iterator();
    Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it=ListSequence.fromList(myParts).iterator();
    SNode to_var;
    List<MoveNodesContributor.SpecialiazationPart> parts_var;
    while (to_it.hasNext() && parts_it.hasNext()) {
      to_var=to_it.next();
      parts_var=parts_it.next();
      for (      MoveNodesContributor.SpecialiazationPart part : ListSequence.fromList(parts_var)) {
        part.setTo(to_var);
      }
    }
  }
}
