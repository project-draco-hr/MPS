{
  myParts=ListSequence.fromList(new ArrayList<List<MoveNodesContributor.SpecialiazationPart>>(ListSequence.fromList(nodes).count()));
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SRepository> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SRepository>(){
      public SRepository select(      SNode it){
        return SNodeOperations.getModel(it).getRepository();
      }
    }
);
    myRepository=Sequence.fromIterable(seq).first();
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SRepository>(){
      public boolean accept(      SRepository it){
        return eq_5lvz9m_a0a0a0a0a0a2a1a51(it,myRepository);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same repository.");
    }
  }
  myFrom=ListSequence.fromList(nodes).select(new ISelector<SNode,SNodeReference>(){
    public SNodeReference select(    SNode it){
      return it.getReference();
    }
  }
).toListSequence();
  for (  final SNode from : ListSequence.fromList(nodes)) {
    List<MoveNodesContributor.SpecialiazationPart> specialiazations=Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).select(new ISelector<MoveNodesContributor,Iterable<MoveNodesContributor.SpecialiazationPart>>(){
      public Iterable<MoveNodesContributor.SpecialiazationPart> select(      MoveNodesContributor it){
        return it.getLocalSpecializations(from);
      }
    }
).translate(new ITranslator2<Iterable<MoveNodesContributor.SpecialiazationPart>,MoveNodesContributor.SpecialiazationPart>(){
      public Iterable<MoveNodesContributor.SpecialiazationPart> translate(      Iterable<MoveNodesContributor.SpecialiazationPart> it){
        return it;
      }
    }
).toListSequence();
    ListSequence.fromList(specialiazations).visitAll(new IVisitor<MoveNodesContributor.SpecialiazationPart>(){
      public void visit(      MoveNodesContributor.SpecialiazationPart it){
        it.setFrom(from);
      }
    }
);
    ListSequence.fromList(myParts).addElement(specialiazations);
  }
  affectedNodes=ListSequence.fromList(new ArrayList<List<? extends List<SNodeReference>>>());
  for (  List<MoveNodesContributor.SpecialiazationPart> part : ListSequence.fromList(myParts)) {
    List<? extends List<SNodeReference>> nodeGroup=ListSequence.fromList(part).select(new ISelector<MoveNodesContributor.SpecialiazationPart,IListSequence<SNodeReference>>(){
      public IListSequence<SNodeReference> select(      MoveNodesContributor.SpecialiazationPart it){
        return Sequence.fromIterable(it.getAffectedNodes(mySearchScope)).toListSequence();
      }
    }
).toListSequence();
    ListSequence.fromList(affectedNodes).addElement(nodeGroup);
  }
}
