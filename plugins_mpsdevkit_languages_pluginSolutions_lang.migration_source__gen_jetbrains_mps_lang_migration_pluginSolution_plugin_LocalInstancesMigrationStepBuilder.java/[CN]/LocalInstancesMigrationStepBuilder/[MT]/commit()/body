{
  if (myParts == null) {
    throw new IllegalStateException("commit() should be called after willBeMoved() and isMoved()");
  }
  if (ListSequence.fromList(myParts).count() != ListSequence.fromList(affectedNodes).count()) {
    throw new IllegalStateException("affectedNodes is not properly initialized");
  }
  if (ListSequence.fromList(myParts).isEmpty()) {
    return;
  }
  if (myRepository == null) {
    throw new IllegalStateException("repository is null");
  }
{
    Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it=ListSequence.fromList(myParts).iterator();
    Iterator<List<? extends List<SNodeReference>>> affectedGroups_it=ListSequence.fromList(affectedNodes).iterator();
    List<MoveNodesContributor.SpecialiazationPart> parts_var;
    List<? extends List<SNodeReference>> affectedGroups_var;
    while (parts_it.hasNext() && affectedGroups_it.hasNext()) {
      parts_var=parts_it.next();
      affectedGroups_var=affectedGroups_it.next();
{
        Iterator<MoveNodesContributor.SpecialiazationPart> part_it=ListSequence.fromList(parts_var).iterator();
        Iterator<? extends List<SNodeReference>> affected_it=ListSequence.fromList(affectedGroups_var).iterator();
        MoveNodesContributor.SpecialiazationPart part_var;
        List<SNodeReference> affected_var;
        while (part_it.hasNext() && affected_it.hasNext()) {
          part_var=part_it.next();
          affected_var=affected_it.next();
          part_var.execute(ListSequence.fromList(affected_var).select(new ISelector<SNodeReference,SNode>(){
            public SNode select(            SNodeReference it){
              return it.resolve(myRepository);
            }
          }
));
        }
      }
    }
  }
}
