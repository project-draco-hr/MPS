{
  if (affectedNodes == null) {
    throw new IllegalStateException("isMoved() can be called only after willBeMoved()");
  }
  SearchResults<SNode> results=new SearchResults<SNode>();
  results.getSearchedNodes().addAll(ListSequence.fromList(myFrom).select(new ISelector<SNodeReference,SNode>(){
    public SNode select(    SNodeReference it){
      return it.resolve(myRepository);
    }
  }
).toListSequence());
{
    Iterator<List<? extends List<SNodeReference>>> nodeGroups_it=ListSequence.fromList(affectedNodes).iterator();
    Iterator<List<MoveNodesContributor.SpecialiazationPart>> parts_it=ListSequence.fromList(myParts).iterator();
    List<? extends List<SNodeReference>> nodeGroups_var;
    List<MoveNodesContributor.SpecialiazationPart> parts_var;
    while (nodeGroups_it.hasNext() && parts_it.hasNext()) {
      nodeGroups_var=nodeGroups_it.next();
      parts_var=parts_it.next();
{
        Iterator<? extends List<SNodeReference>> nodeGroup_it=ListSequence.fromList(nodeGroups_var).iterator();
        Iterator<MoveNodesContributor.SpecialiazationPart> part_it=ListSequence.fromList(parts_var).iterator();
        List<SNodeReference> nodeGroup_var;
        final Wrappers._T<MoveNodesContributor.SpecialiazationPart> part_var=new Wrappers._T<MoveNodesContributor.SpecialiazationPart>();
        while (nodeGroup_it.hasNext() && part_it.hasNext()) {
          nodeGroup_var=nodeGroup_it.next();
          part_var.value=part_it.next();
          results.getSearchResults().addAll(ListSequence.fromList(nodeGroup_var).select(new ISelector<SNodeReference,SearchResult<SNode>>(){
            public SearchResult<SNode> select(            SNodeReference it){
              return new SearchResult<SNode>(it.resolve(myRepository),part_var.value.getAffectedNodesCategory());
            }
          }
).toListSequence());
        }
      }
    }
  }
  return results;
}
