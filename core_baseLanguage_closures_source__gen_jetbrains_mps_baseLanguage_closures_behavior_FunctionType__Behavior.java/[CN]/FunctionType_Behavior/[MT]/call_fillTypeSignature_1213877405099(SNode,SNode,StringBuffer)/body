{
  buf.append("_");
  if (SNodeOperations.isInstanceOf(t,"jetbrains.mps.baseLanguage.closures.structure.FunctionType")) {
    buf.append(FunctionType_Behavior.call_getSignature_1213877405047(t));
    return;
  }
  SNode ct=TypeChecker.getInstance().getRuntimeSupport().coerce_(t,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true);
  String pres;
  if ((ct != null)) {
    String[] nn=SPropertyOperations.getString(SLinkOperations.getTarget(ct,"classifier",false),"name").split("\\\\.");
    buf.append(nn[nn.length - 1]);
  }
 else   if (SConceptPropertyOperations.getString(t,"alias") != null) {
    buf.append(SConceptPropertyOperations.getString(t,"alias"));
  }
 else   if ((pres=BaseConcept_Behavior.call_getPresentation_1213877396640(t)) != null) {
    buf.append(pres);
  }
 else {
    buf.append(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(t),"name"));
  }
  List<SNode> paramTypes=new ArrayList<SNode>();
  for (  SNode c : SNodeOperations.getChildren(t)) {
    if (SNodeOperations.isInstanceOf(c,"jetbrains.mps.baseLanguage.structure.Type")) {
      paramTypes.add(c);
    }
  }
  String sep="_of";
  for (  SNode pt : paramTypes) {
    buf.append(sep);
    sep="_x";
    FunctionType_Behavior.call_fillTypeSignature_1213877405099(thisNode,pt,buf);
  }
}
