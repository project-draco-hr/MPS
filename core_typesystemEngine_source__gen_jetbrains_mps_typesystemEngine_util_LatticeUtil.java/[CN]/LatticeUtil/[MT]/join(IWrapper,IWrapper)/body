{
  SNode joinType=SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.JoinType",null);
  if (SNodeOperations.isInstanceOf(((SNode)wrapper1.getNode()),"jetbrains.mps.lang.typesystem.structure.JoinType")) {
    SNode joinWrapper1=(SNode)wrapper1.getNode();
    for (    SNode bc : SLinkOperations.getTargets(joinWrapper1,"argument",true)) {
      ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(bc));
    }
    if (SNodeOperations.isInstanceOf(((SNode)wrapper2.getNode()),"jetbrains.mps.lang.typesystem.structure.JoinType")) {
      SNode joinWrapper2=(SNode)wrapper2.getNode();
      for (      SNode bc : SLinkOperations.getTargets(joinWrapper2,"argument",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(bc));
      }
    }
 else {
      ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
    }
  }
 else   if (SNodeOperations.isInstanceOf(((SNode)wrapper2.getNode()),"jetbrains.mps.lang.typesystem.structure.JoinType")) {
    SNode joinWrapper2=(SNode)wrapper2.getNode();
    ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
    for (    SNode bc : SLinkOperations.getTargets(joinWrapper2,"argument",true)) {
      ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(bc));
    }
  }
 else {
    ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(wrapper1.getNode()));
    ListSequence.fromList(SLinkOperations.getTargets(joinType,"argument",true)).addElement(HUtil.copyIfNecessary(wrapper2.getNode()));
  }
  return NodeWrapper.createWrapperFromNode(joinType,null);
}
