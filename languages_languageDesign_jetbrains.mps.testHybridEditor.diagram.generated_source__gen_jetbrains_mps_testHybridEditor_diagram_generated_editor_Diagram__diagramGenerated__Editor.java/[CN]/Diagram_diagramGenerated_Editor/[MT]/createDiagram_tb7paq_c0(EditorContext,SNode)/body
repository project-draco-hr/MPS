{
  DiagramView view=new ConnectionRoutingView(new OrthogonalRouter());
  DiagramViewCell editorCell=DiagramViewCell.createViewCell(editorContext,node,view);
  jetbrains.mps.openapi.editor.cells.EditorCell_Collection blockCollection=EditorCell_Collection.createIndent2(editorContext,node);
  jetbrains.mps.openapi.editor.cells.EditorCell_Collection connectorCollection=EditorCell_Collection.createIndent2(editorContext,node);
  editorCell.addEditorCell(blockCollection);
  editorCell.addEditorCell(connectorCollection);
  List<ConnectorViewCell> connectorCellList=ListSequence.fromList(new ArrayList<ConnectorViewCell>());
  for (  SNode contentNode : ListSequence.fromList(SLinkOperations.getTargets(node,"blocks",true))) {
    EditorCell contentCell=editorContext.createNodeCell(contentNode);
    if (!(contentCell instanceof GenericViewCell)) {
      continue;
    }
    GenericViewCell genericContentCell=(GenericViewCell)contentCell;
    if (genericContentCell instanceof ConnectorViewCell) {
      final ConnectorViewCell connectorCell=(ConnectorViewCell)(genericContentCell);
      connectorCell.removeAllCells();
      ListSequence.fromList(connectorCellList).addElement(connectorCell);
    }
 else {
      View blockView=genericContentCell.getView();
      blockCollection.addEditorCell(genericContentCell);
      View oldParent=blockView.parent();
      if (oldParent != null) {
        oldParent.children().remove(oldParent.children().indexOf(blockView));
      }
      view.itemsView.children().add(blockView);
    }
  }
  for (  SNode contentNode : ListSequence.fromList(SLinkOperations.getTargets(node,"connectors",true))) {
    EditorCell contentCell=editorContext.createNodeCell(contentNode);
    if (!(contentCell instanceof GenericViewCell)) {
      continue;
    }
    GenericViewCell genericContentCell=(GenericViewCell)contentCell;
    if (genericContentCell instanceof ConnectorViewCell) {
      final ConnectorViewCell connectorCell=(ConnectorViewCell)(genericContentCell);
      connectorCell.removeAllCells();
      ListSequence.fromList(connectorCellList).addElement(connectorCell);
    }
 else {
      View blockView=genericContentCell.getView();
      blockCollection.addEditorCell(genericContentCell);
      View oldParent=blockView.parent();
      if (oldParent != null) {
        oldParent.children().remove(oldParent.children().indexOf(blockView));
      }
      view.itemsView.children().add(blockView);
    }
  }
  for (  ConnectorViewCell connectorCell : ListSequence.fromList(connectorCellList)) {
    View connectorView=connectorCell.getView();
    View fromView=connectorCell.getOutputView(editorCell);
    View toView=connectorCell.getInputView(editorCell);
    if (fromView != null && toView != null) {
      PolylineConnection connection=connectorCell.getConnection();
      if (connectorView.parent() != null) {
        connectorView.parent().children().remove(connectorView.parent().children().indexOf(connectorView));
      }
      connection.view().invalidate();
      connection.toView().set(toView);
      connection.fromView().set(fromView);
      view.connections.add(connection);
      connectorCollection.addEditorCell(connectorCell);
    }
  }
  editorCell.setCellId("Diagram_tb7paq_c0");
  return editorCell;
}
