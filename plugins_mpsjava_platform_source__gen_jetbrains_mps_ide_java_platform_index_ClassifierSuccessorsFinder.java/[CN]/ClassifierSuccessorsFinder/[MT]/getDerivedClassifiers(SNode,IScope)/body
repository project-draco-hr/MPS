{
  Set<VirtualFile> unModifiedModelFiles=SetSequence.fromSet(new HashSet<VirtualFile>());
  List<SNode> modifiedClasses=ListSequence.fromList(new ArrayList<SNode>());
  List<SNode> modifiedInterfaces=ListSequence.fromList(new ArrayList<SNode>());
  for (  SModel md : scope.getModels()) {
    if (!((md instanceof EditableSModel))) {
      continue;
    }
    EditableSModel emd=(EditableSModel)md;
    DataSource source=emd.getSource();
    IFile modelFile=(source instanceof FileDataSource ? ((FileDataSource)source).getFile() : null);
    if (modelFile == null) {
      continue;
    }
    if (emd.isChanged()) {
      ListSequence.fromList(modifiedClasses).addSequence(ListSequence.fromList(SModelOperations.getNodes((md),"jetbrains.mps.baseLanguage.structure.ClassConcept")));
      ListSequence.fromList(modifiedInterfaces).addSequence(ListSequence.fromList(SModelOperations.getNodes((md),"jetbrains.mps.baseLanguage.structure.Interface")));
    }
 else {
      SetSequence.fromSet(unModifiedModelFiles).addElement(VirtualFileUtils.getVirtualFile(modelFile));
    }
  }
  List<SNode> result=new ArrayList<SNode>();
  Queue<SNode> queue=QueueSequence.fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(queue).addLastElement(classifier);
  ClassifierSuccessorsFinder.ValueProcessor valueProcessor=new ClassifierSuccessorsFinder.ValueProcessor(result,queue);
  ClassifierSuccessorsFinder.ModifiedsuccessorFinder modifiedSuccessorFinder=new ClassifierSuccessorsFinder.ModifiedsuccessorFinder(modifiedClasses,modifiedInterfaces,result,queue);
  ClassifierSuccessorsFinder.SearchScope unModifiedFilesSearchScope=new ClassifierSuccessorsFinder.SearchScope(unModifiedModelFiles);
  while (!(QueueSequence.fromQueue(queue).isEmpty())) {
    SNode nextClassifier=QueueSequence.fromQueue(queue).removeFirstElement();
    FileBasedIndex.getInstance().processValues(ClassifierSuccessorsIndexer.NAME,new GlobalSNodeId(nextClassifier),null,valueProcessor,unModifiedFilesSearchScope);
    modifiedSuccessorFinder.process(nextClassifier);
  }
  return result;
}
