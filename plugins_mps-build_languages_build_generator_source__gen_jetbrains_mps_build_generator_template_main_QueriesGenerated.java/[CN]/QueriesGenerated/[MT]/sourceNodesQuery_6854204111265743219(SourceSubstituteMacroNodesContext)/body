{
  Map<SNode,SNode> participantForTask=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  List<SNode> list=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode participant : ListSequence.fromList(SNodeOperations.getNodeDescendants(_context.getNode(),MetaAdapterFactory.getInterfaceConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x546bf9ab92fe0b3fL,"jetbrains.mps.build.structure.IWorkflowParticipant"),false,new SAbstractConcept[]{})).reversedList()) {
    SNode targetTask=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),participant,"virtual_getTargetTask_6854204111265837872",new Object[]{});
    if (MapSequence.fromMap(participantForTask).get(targetTask) == null) {
      MapSequence.fromMap(participantForTask).put(targetTask,SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x5f1f0652f6049405L,"jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants"))));
      SLinkOperations.setTarget(MapSequence.fromMap(participantForTask).get(targetTask),MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x5f1f0652f6049405L,0x5f1f0652f6049406L,"for"),targetTask);
      ListSequence.fromList(list).addElement(MapSequence.fromMap(participantForTask).get(targetTask));
    }
    SNode ref=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x5c860be1bc5cc1c8L,"jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference")));
    SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x5c860be1bc5cc1c8L,0x5c860be1bc5cc1c9L,"participant"),participant);
    ListSequence.fromList(SLinkOperations.getChildren(MapSequence.fromMap(participantForTask).get(targetTask),MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x5f1f0652f6049405L,0x5f1f0652f6049407L,"participant"))).addElement(ref);
  }
  return list;
}
