{
  Map<SNode,SNode> participantForTask=MapSequence.fromMap(new LinkedHashMap<SNode,SNode>(16,(float)0.75,false));
  List<SNode> list=ListSequence.fromList(new ArrayList<SNode>());
  for (  SNode participant : ListSequence.fromList(SNodeOperations.getNodeDescendants(_context.getNode(),MetaAdapterFactory.getConcept(new UUID(8755280088213897754l,-5075149991798053422l),6083230236994833215l,"jetbrains.mps.build.structure.IWorkflowParticipant"),false,new SConcept[]{})).reversedList()) {
    SNode targetTask=BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),participant,"virtual_getTargetTask_6854204111265837872",new Object[]{});
    if (MapSequence.fromMap(participantForTask).get(targetTask) == null) {
      MapSequence.fromMap(participantForTask).put(targetTask,SConceptOperations.createNewNode("jetbrains.mps.build.structure.GeneratorInternal_IWorkfowParticipants",null));
      SLinkOperations.setTarget(MapSequence.fromMap(participantForTask).get(targetTask),MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l,-5075149991798053422l),6854204111265764357l,6854204111265764358l,"for"),targetTask);
      ListSequence.fromList(list).addElement(MapSequence.fromMap(participantForTask).get(targetTask));
    }
    SNode ref=SConceptOperations.createNewNode("jetbrains.mps.build.structure.GeneratorInternal_IWorkflowParticipantReference",null);
    SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(new UUID(8755280088213897754l,-5075149991798053422l),6667029362524340680l,6667029362524340681l,"participant"),participant);
    ListSequence.fromList(SLinkOperations.getChildren(MapSequence.fromMap(participantForTask).get(targetTask),MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l,-5075149991798053422l),6854204111265764357l,6854204111265764359l,"participant"))).addElement(ref);
  }
  return list;
}
