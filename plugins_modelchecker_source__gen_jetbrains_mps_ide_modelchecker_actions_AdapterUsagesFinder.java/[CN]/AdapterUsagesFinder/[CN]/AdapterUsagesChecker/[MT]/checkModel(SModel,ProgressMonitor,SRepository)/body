{
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  monitor.start("adapter usages",1);
  for (  SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
    if (monitor.isCanceled()) {
      break;
    }
    for (    SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      SModelReference targetSModelReference=ref.getTargetSModelReference();
      if (targetSModelReference != null && SModelStereotype.getStereotype(targetSModelReference.getModelName()).equals(SModelStereotype.JAVA_STUB)) {
        SNode target=SLinkOperations.getTargetNode(ref);
        if ((target != null) && SNodeOperations.isInstanceOf(target,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
          String qualifiedName=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(target,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"virtual_getFqName_1213877404258",new Object[]{});
          if ("jetbrains.mps.smodel.INodeAdapter".equals(qualifiedName) || "jetbrains.mps.smodel.BaseAdapter".equals(qualifiedName)) {
            SpecificChecker.addIssue(results,node,"Reference to " + qualifiedName + " in role `"+ SLinkOperations.getRole(ref)+ "'",ModelChecker.SEVERITY_ERROR,"adapter class usage",null);
          }
          if (SModelStereotype.withoutStereotype(targetSModelReference.getModelName()).endsWith(".structure") && SModelUtil.findConceptDeclaration(qualifiedName) != null) {
            SpecificChecker.addIssue(results,node,"Using adapter of " + qualifiedName + " concept in role `"+ SLinkOperations.getRole(ref)+ "'",ModelChecker.SEVERITY_ERROR,"adapter class usage",null);
          }
        }
      }
    }
  }
  monitor.done();
  return results;
}
