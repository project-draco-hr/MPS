{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AppendOperation_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AttributedNodePart_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new CollectionAppendPart_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConceptTextGenDeclaration_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new ConstantStringAppendPart_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new EncodingLiteral_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new FoundErrorOperation_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new IndentPart_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new LanguageTextGenDeclaration_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new LayoutPart_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new NewLineAppendPart_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodeAppendPart_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationCall_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationDeclaration_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReferenceAppendPart_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleTextGenOperation_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new StubOperationDeclaration_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new TextUnitLayout_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new UtilityMethodCall_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new UtilityMethodDeclaration_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new WithIndentOperation_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
