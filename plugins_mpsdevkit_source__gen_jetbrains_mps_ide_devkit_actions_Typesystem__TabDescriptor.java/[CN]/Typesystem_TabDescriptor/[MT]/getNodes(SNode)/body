{
  List<SNode> rules=GoToRulesHelper.getRules(node,true);
  return ListSequence.fromList(rules).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      boolean aConceptRef=SNodeOperations.isInstanceOf(SLinkOperations.getTarget(a,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e7b5c73L,0x1117e7b9c40L,"applicableNode")),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,"jetbrains.mps.lang.typesystem.structure.ConceptReference"));
      boolean bConceptRef=SNodeOperations.isInstanceOf(SLinkOperations.getTarget(b,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e7b5c73L,0x1117e7b9c40L,"applicableNode")),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,"jetbrains.mps.lang.typesystem.structure.ConceptReference"));
      if (aConceptRef && !(bConceptRef)) {
        return 1;
      }
      if (!(aConceptRef) && bConceptRef) {
        return -1;
      }
      if (aConceptRef && bConceptRef) {
        SNode aConcept=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(a,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e7b5c73L,0x1117e7b9c40L,"applicableNode")),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,"jetbrains.mps.lang.typesystem.structure.ConceptReference")),MetaAdapterFactory.getReferenceLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,0x1117e2ab6c9L,"concept"));
        SNode bConcept=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(b,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e7b5c73L,0x1117e7b9c40L,"applicableNode")),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,"jetbrains.mps.lang.typesystem.structure.ConceptReference")),MetaAdapterFactory.getReferenceLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x1117e2a88b3L,0x1117e2ab6c9L,"concept"));
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(aConcept),SNodeOperations.asSConcept(bConcept))) {
          return 1;
        }
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(bConcept),SNodeOperations.asSConcept(aConcept))) {
          return -1;
        }
      }
      return 0;
    }
  }
,false).toListSequence();
}
