{
  List<SNode> rules=(List<SNode>)GoToRulesHelper.getRules(node,false);
  return ListSequence.fromList(rules).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      boolean aConceptRef=SNodeOperations.isInstanceOf(SLinkOperations.getTarget(a,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference");
      boolean bConceptRef=SNodeOperations.isInstanceOf(SLinkOperations.getTarget(b,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference");
      if (aConceptRef && !(bConceptRef)) {
        return 1;
      }
      if (!(aConceptRef) && bConceptRef) {
        return -1;
      }
      if (aConceptRef && bConceptRef) {
        SNode aConcept=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(a,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference"),"concept",false);
        SNode bConcept=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(b,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference"),"concept",false);
        if (SConceptOperations.isSubConceptOf(aConcept,NameUtil.nodeFQName(bConcept))) {
          return 1;
        }
        if (SConceptOperations.isSubConceptOf(bConcept,NameUtil.nodeFQName(aConcept))) {
          return -1;
        }
      }
      return 0;
    }
  }
,false).toListSequence();
}
