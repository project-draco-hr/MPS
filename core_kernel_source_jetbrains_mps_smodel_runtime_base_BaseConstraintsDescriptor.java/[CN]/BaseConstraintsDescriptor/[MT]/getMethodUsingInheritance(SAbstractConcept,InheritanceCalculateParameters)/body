{
  Set<SAbstractConcept> parents=new HashSet<SAbstractConcept>();
  if (concept instanceof SConcept) {
    parents.addAll(IterableUtil.asCollection(((SConcept)concept).getSuperInterfaces()));
    parents.add(((SConcept)concept).getSuperConcept());
  }
 else   if (concept instanceof SInterfaceConcept) {
    parents.addAll(IterableUtil.asCollection(((SInterfaceConcept)concept).getSuperInterfaces()));
  }
  for (  SAbstractConcept parent : parents) {
    ConstraintsDescriptor parentDescriptor=ConceptRegistry.getInstance().getConstraintsDescriptor(parent);
    ConstraintsDescriptor parentCalculated;
    if (parentDescriptor instanceof BaseConstraintsDescriptor) {
      parentCalculated=parameters.getParentCalculatedDescriptor((BaseConstraintsDescriptor)parentDescriptor);
    }
 else     if (parentDescriptor instanceof ConstraintsDispatchable) {
      if (parameters.hasOwn((ConstraintsDispatchable)parentDescriptor)) {
        parentCalculated=parentDescriptor;
      }
 else {
        parentCalculated=getMethodUsingInheritance(parent,parameters);
      }
    }
 else {
      parentCalculated=parentDescriptor;
    }
    if (parentCalculated != null) {
      return parentCalculated;
    }
  }
  return null;
}
