{
  if (DISABLED) {
    return new HashSet<EditorMessage>();
  }
  SModel model=SNodeOperations.getModel(rootNode);
  if (!(model instanceof EditableSModel) || model.getModule() instanceof TransientSModule || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
    return new HashSet<EditorMessage>(0);
  }
  final Map<SNode,SNode> reResolvedTargets=new HashMap<SNode,SNode>();
  if (!(wasCheckedOnce) || myCachesCleared) {
    myCachesCleared=false;
    for (    SNode methodCall : SNodeOperations.getNodeDescendants(rootNode,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,"jetbrains.mps.baseLanguage.structure.IMethodCall"),false,new SAbstractConcept[]{})) {
      testAndFixMethodCall(methodCall,reResolvedTargets);
    }
  }
 else {
    SModelEventVisitor visitor=new SModelEventVisitorAdapter(){
      @Override public void visitChildEvent(      SModelChildEvent event){
        SNode child=event.getChild();
        if (event.isAdded() && child.getModel() != null) {
          nodeAdded(child,reResolvedTargets);
        }
 else {
          nodeRemoved(child,event.getParent(),event.getModel(),reResolvedTargets);
        }
      }
      @Override public void visitReferenceEvent(      SModelReferenceEvent event){
        SReference reference=event.getReference();
        SNode sourceNode=reference.getSourceNode();
        if (SNodeOperations.isInstanceOf(sourceNode,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,"jetbrains.mps.baseLanguage.structure.IMethodCall")) && MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration").equals(reference.getLink())) {
          methodCallDeclarationChanged(SNodeOperations.cast(sourceNode,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,"jetbrains.mps.baseLanguage.structure.IMethodCall")),reResolvedTargets);
        }
      }
      @Override public void visitPropertyEvent(      SModelPropertyEvent event){
        SNode node=event.getNode();
        SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
        if (SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) && MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name").getName().equals(event.getPropertyName())) {
          methodDeclarationNameChanged(node,reResolvedTargets);
          methodDeclarationSignatureChanged(node,reResolvedTargets);
        }
      }
      @Override public void visitReplacedEvent(      SModelReplacedEvent event){
        clearCaches();
      }
    }
;
    for (    SModelEvent event : events) {
      if (event.getAffectedRoot() != rootNode) {
        continue;
      }
      event.accept(visitor);
    }
  }
  if (!(reResolvedTargets.isEmpty()) && editorContext != null && editorContext.getRepository() != null) {
    ThreadUtils.runInUIThreadNoWait(new Runnable(){
      public void run(){
        final SRepository repo=editorContext.getRepository();
        repo.getModelAccess().executeUndoTransparentCommand(new Runnable(){
          public void run(){
            for (            SNode methodCall : reResolvedTargets.keySet()) {
              SNode referent=reResolvedTargets.get(methodCall);
              if (referent != null && SNodeUtil.isAccessible(referent,repo)) {
                SLinkOperations.setTarget(methodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"),referent);
              }
            }
          }
        }
);
      }
    }
);
  }
  return new HashSet<EditorMessage>();
}
