{
  SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCallNode,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration"));
  String methodName=getMethodName(methodCallNode);
  Tuples._2<SNode,Boolean> resolveResult=MethodResolveUtil.resolveMethod(methodCallNode,methodName);
  SNode newTarget=resolveResult._0();
  boolean good=(boolean)resolveResult._1();
  if (newTarget != null) {
    if (baseMethodDeclaration == null || (good && newTarget != baseMethodDeclaration)) {
      reResolvedTargets.put(methodCallNode,newTarget);
    }
    SNodeReference methodCallPointer=SNodeOperations.getPointer(methodCallNode);
    SNodeReference newTargetPointer=SNodeOperations.getPointer(newTarget);
    myMethodCallsToSetDecls.put(methodCallPointer,newTargetPointer);
    myCheckedMethodCalls.add(methodCallPointer);
    Set<SNodeReference> nodeSet=myMethodDeclsToCheckedMethodCalls.get(newTargetPointer);
    if (nodeSet == null) {
      nodeSet=new HashSet<SNodeReference>();
      myMethodDeclsToCheckedMethodCalls.put(newTargetPointer,nodeSet);
    }
    nodeSet.add(methodCallPointer);
    Pair<String,String> key=new Pair<String,String>(newTarget.getConcept().getQualifiedName(),methodName);
    Set<SNodeReference> nodesByNameAndConcept=myMethodConceptsAndNamesToCheckedMethodCalls.get(key);
    if (nodesByNameAndConcept == null) {
      nodesByNameAndConcept=new HashSet<SNodeReference>();
      myMethodConceptsAndNamesToCheckedMethodCalls.put(key,nodesByNameAndConcept);
    }
    nodesByNameAndConcept.add(methodCallPointer);
  }
}
