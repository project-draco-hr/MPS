{
  SNode baseMethodDeclaration=SLinkOperations.getTarget(methodCallNode,"baseMethodDeclaration",false);
  String methodName=getMethodName(methodCallNode);
  Tuples._2<SNode,Boolean> resolveResult=resolveMethod(methodCallNode,methodName);
  SNode newTarget=resolveResult._0();
  boolean good=(boolean)resolveResult._1();
  if (newTarget != null) {
    if (baseMethodDeclaration == null || (good && newTarget != baseMethodDeclaration)) {
      reResolvedTargets.put(methodCallNode,newTarget);
    }
    SNodePointer methodCallPointer=new SNodePointer(methodCallNode);
    SNodePointer newTargetPointer=new SNodePointer(newTarget);
    myMethodCallsToSetDecls.put(methodCallPointer,newTargetPointer);
    myCheckedMethodCalls.add(methodCallPointer);
    for (    SNode actualArgument : SLinkOperations.getTargets(methodCallNode,"actualArgument",true)) {
      myParametersToCheckedMethodCalls.put(new SNodePointer(actualArgument),methodCallPointer);
    }
    Set<SNodePointer> nodeSet=myMethodDeclsToCheckedMethodCalls.get(newTargetPointer);
    if (nodeSet == null) {
      nodeSet=new HashSet<SNodePointer>();
      myMethodDeclsToCheckedMethodCalls.put(newTargetPointer,nodeSet);
    }
    nodeSet.add(methodCallPointer);
    Pair<String,String> key=new Pair<String,String>(newTarget.getConcept().getConceptId(),methodName);
    Set<SNodePointer> nodesByNameAndConcept=myMethodConceptsAndNamesToCheckedMethodCalls.get(key);
    if (nodesByNameAndConcept == null) {
      nodesByNameAndConcept=new HashSet<SNodePointer>();
      myMethodConceptsAndNamesToCheckedMethodCalls.put(key,nodesByNameAndConcept);
    }
    nodesByNameAndConcept.add(methodCallPointer);
  }
}
