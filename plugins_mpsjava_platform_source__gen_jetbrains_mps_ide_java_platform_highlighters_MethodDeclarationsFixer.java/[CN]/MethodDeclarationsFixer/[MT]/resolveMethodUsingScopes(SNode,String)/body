{
  if (SNodeOperations.getReference(methodCall,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.IMethodCall","baseMethodDeclaration")) == null) {
    return MultiTuple.<SNode,Boolean>from((SNode)null,false);
  }
  Scope scope=ModelConstraints.getScope(SNodeOperations.getReference(methodCall,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.IMethodCall","baseMethodDeclaration")));
  SNode resolvedMethod=SNodeOperations.cast(scope.resolve(methodCall,name),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
  if ((resolvedMethod != null)) {
    return MultiTuple.<SNode,Boolean>from(resolvedMethod,true);
  }
 else {
    return resolveMethodByCandidatesAndTypes(methodCall,Sequence.fromIterable(((Iterable<SNode>)scope.getAvailableElements(name))).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return eq_vo5uqs_a0a0a0a0a1a0a0e0r(SPropertyOperations.getString(it,"name"),name);
      }
    }
),null);
  }
}
