{
  if (myMpsHome == null) {
    String mpsHomePath=getProject().getProperty("mps.home");
    if (mpsHomePath == null || !new File(mpsHomePath).exists()) {
      throw new BuildException("Path to mps home expected. Specify mps.home property or mpshome attribute.");
    }
    myMpsHome=new File(mpsHomePath);
  }
  File[] pathsToLook;
  if (new File(myMpsHome.getAbsolutePath() + File.separator + "classes").exists()) {
    pathsToLook=new File[]{new File(myMpsHome.getAbsolutePath() + File.separator + "core"),new File(myMpsHome.getAbsolutePath() + File.separator + "lib"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"+ File.separator+ "buildlanguage"),new File(myMpsHome.getAbsolutePath() + File.separator + "workbench"),new File(myMpsHome.getAbsolutePath() + File.separator + "MPSPlugin"+ File.separator+ "MPSSupport")};
  }
 else {
    pathsToLook=new File[]{new File(myMpsHome.getAbsolutePath() + File.separator + "core"),new File(myMpsHome.getAbsolutePath() + File.separator + "lib"),new File(myMpsHome.getAbsolutePath() + File.separator + "platform"),new File(myMpsHome.getAbsolutePath() + File.separator + "workbench"),new File(myMpsHome.getAbsolutePath() + File.separator + "plugin")};
  }
  Set<File> classPaths=new LinkedHashSet<File>();
  for (  File path : pathsToLook) {
    if (!path.exists() || !path.isDirectory()) {
      throw new BuildException(myMpsHome + " is invalid MPS home path.");
    }
    gatherAllClassesAndJarsUnder(path,classPaths);
  }
  List<URL> classPathUrls=new ArrayList<URL>();
  for (  File path : classPaths) {
    try {
      classPathUrls.add(new URL("file://" + path + (path.isDirectory() ? "/" : "")));
    }
 catch (    MalformedURLException e) {
      throw new BuildException(e);
    }
  }
  File mpsClasses=new File(myMpsHome + File.separator + "classes");
  if (mpsClasses.exists()) {
    try {
      classPathUrls.add(new URL("file://" + mpsClasses.getAbsolutePath() + "/"));
    }
 catch (    MalformedURLException e) {
      throw new BuildException(e);
    }
  }
  if (myUsePropertiesAsMacro) {
    Hashtable properties=getProject().getProperties();
    for (    Object name : properties.keySet()) {
      Object value=properties.get(name);
      myWhatToGenerate.addMacro((String)name,(String)value);
    }
  }
  URLClassLoader classLoader=new URLClassLoader(classPathUrls.toArray(new URL[classPathUrls.size()]),ProjectComponent.class.getClassLoader());
  try {
    Class<?> whatToGenerateClass=classLoader.loadClass(WhatToGenerate.class.getCanonicalName());
    Object whatToGenerate=whatToGenerateClass.newInstance();
    myWhatToGenerate.cloneTo(whatToGenerate);
    Class<?> generatorClass=classLoader.loadClass(Generator.class.getCanonicalName());
    Class<?> projectComponentClass=classLoader.loadClass(ProjectComponent.class.getCanonicalName());
    log("this.getClass().getClassLoader() " + this.getClass().getClassLoader());
    log("ProjectComponent.class.getClassLoader() " + ProjectComponent.class.getClassLoader());
    log("whatToGenerateClass.getClassLoader() " + whatToGenerateClass.getClassLoader());
    log("projectComponentClass.getClassLoader() " + projectComponentClass.getClassLoader());
    Constructor<?> constructor=generatorClass.getConstructor(whatToGenerateClass,ProjectComponent.class);
    Object generator=constructor.newInstance(whatToGenerate,this);
    Method method=generatorClass.getMethod("generate");
    method.invoke(generator);
  }
 catch (  ClassNotFoundException e) {
    throw new BuildException(e);
  }
catch (  NoSuchMethodException e) {
    throw new BuildException(e);
  }
catch (  InvocationTargetException e) {
    throw new BuildException(e.getTargetException());
  }
catch (  IllegalAccessException e) {
    throw new BuildException(e);
  }
catch (  InstantiationException e) {
    throw new BuildException(e);
  }
}
