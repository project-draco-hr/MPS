{
  super("Check Root Concepts' Internal Naming Policy");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Fix Root Concepts' Aliases";
    }
    public String getAdditionalInfo(){
      return "Fix Root Concepts' Aliases";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (SConceptPropertyOperations.getBoolean(node,"abstract")) {
        return false;
      }
      if (!(SPropertyOperations.getBoolean(node,"rootable"))) {
        return false;
      }
      if ((SConceptPropertyOperations.getString(node,"alias") == null || SConceptPropertyOperations.getString(node,"alias").length() == 0)) {
        return false;
      }
      return !(SConceptPropertyOperations.getString(node,"alias").equals(NameUtil.multiWordDecapitalize(SConceptPropertyOperations.getString(node,"alias"))));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode aliasProperty=SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node,"conceptProperty",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty") && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"conceptPropertyDeclaration",false),"name").equals("alias");
        }
      }
).first(),"jetbrains.mps.lang.structure.structure.StringConceptProperty");
      SPropertyOperations.set(aliasProperty,"value",NameUtil.multiWordDecapitalize(SConceptPropertyOperations.getString(node,"alias")));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Add Alias to Root Concepts";
    }
    public String getAdditionalInfo(){
      return "Add Alias to Root Concepts";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (SConceptPropertyOperations.getBoolean(node,"abstract")) {
        return false;
      }
      if (!(SPropertyOperations.getBoolean(node,"rootable"))) {
        return false;
      }
      return (SConceptPropertyOperations.getString(node,"alias") == null || SConceptPropertyOperations.getString(node,"alias").length() == 0);
    }
    public void doUpdateInstanceNode(    SNode node){
      StringBuilder sb=new StringBuilder();
      for (      String word : ListSequence.fromList(NameUtil.splitByCamels(SPropertyOperations.getString(node,"name")))) {
        sb.append(NameUtil.decapitalize(word)).append(" ");
      }
      SNode aliasProperty=SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node,"conceptProperty",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty") && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.StringConceptProperty"),"conceptPropertyDeclaration",false),"name").equals("alias");
        }
      }
).first(),"jetbrains.mps.lang.structure.structure.StringConceptProperty");
      SPropertyOperations.set(aliasProperty,"value",sb.toString().trim());
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
