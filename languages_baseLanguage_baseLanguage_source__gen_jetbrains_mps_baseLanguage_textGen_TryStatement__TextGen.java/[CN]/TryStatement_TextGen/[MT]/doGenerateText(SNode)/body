{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
  }
  this.appendNewLine();
  this.indentBuffer();
  this.append("try {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,"body",true));
  this.decreaseDepth();
  this.appendNewLine();
  for (  SNode clause : SLinkOperations.getTargets(node,"catchClause",true)) {
    appendNode(clause);
    this.appendNewLine();
  }
  this.appendWithIndent("} finally {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,"finallyBody",true));
  this.decreaseDepth();
  this.appendNewLine();
  this.appendWithIndent("}");
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
  }
}
