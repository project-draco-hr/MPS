{
  super(mergeModelsDialog,"Merging " + rootName);
  myConflictChecker=new ChangeEditorMessage.ConflictChecker(){
    public boolean isChangeConflicted(    ModelChange ch){
      return Sequence.fromIterable(myMergeContext.getConflictedWith(ch)).isNotEmpty();
    }
  }
;
  myModelsDialog=mergeModelsDialog;
  myOperationContext=mergeModelsDialog.getOperationContext();
  myMergeContext=mergeContext;
  myRootId=rootId;
  myStateToRestore=myMergeContext.getCurrentState();
  myMineEditor=addEditor(0,myMergeContext.getMyModel());
  myResultEditor=addEditor(1,myMergeContext.getResultModel());
  myRepositoryEditor=addEditor(2,myMergeContext.getRepositoryModel());
  linkEditors(true,false);
  linkEditors(false,false);
  linkEditors(true,true);
  linkEditors(false,true);
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,myTopPanel,myBottomPanel);
  splitPane.setResizeWeight(0.7);
  MergeRootsDialog.MyGoToNeighbourRootActions neighbourActions=new MergeRootsDialog.MyGoToNeighbourRootActions();
  DefaultActionGroup actionGroup=ActionUtils.groupFromActions(new ApplyNonConflictsForRoot(this),Separator.getInstance(),neighbourActions.previous(),neighbourActions.next());
  myToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actionGroup,true);
  myToolbar.updateActionsImmediately();
  myContainer.add(myToolbar.getComponent(),BorderLayout.NORTH);
  myContainer.add(splitPane,BorderLayout.CENTER);
  highlightAllChanges();
}
