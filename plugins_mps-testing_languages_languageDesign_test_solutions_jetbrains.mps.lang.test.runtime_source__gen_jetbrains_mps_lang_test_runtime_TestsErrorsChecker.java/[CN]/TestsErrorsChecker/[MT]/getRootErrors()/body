{
  Set<IErrorReporter> cachedErrors=TestsErrorsChecker.modelErrorsHolder.get(myRoot);
  if (cachedErrors != null) {
    return SetSequence.fromSet(cachedErrors).toListSequence();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Collecting errors in the root " + myRoot);
  }
  final Set<IErrorReporter> result=SetSequence.fromSet(new HashSet<IErrorReporter>());
  SetSequence.fromSet(result).addSequence(SetSequence.fromSet(new TypesystemChecker().getErrors(myRoot,null)));
  SetSequence.fromSet(result).addSequence(SetSequence.fromSet(new LanguageChecker().getErrors(myRoot,null)));
  ValidationUtil.validateModelContent(Sequence.<SNode>singleton(myRoot),new Processor<ValidationProblem>(){
    public boolean process(    ValidationProblem vp){
      if (!((vp instanceof NodeValidationProblem))) {
        return true;
      }
      SNode node=((NodeValidationProblem)vp).getNode();
      SetSequence.fromSet(result).addElement(new SimpleErrorReporter(node,vp.getMessage(),null,null));
      return true;
    }
  }
);
  Set<IErrorReporter> res=SetSequence.fromSetWithValues(new HashSet<IErrorReporter>(),SetSequence.fromSet(result).where(new IWhereFilter<IErrorReporter>(){
    public boolean accept(    IErrorReporter it){
      return !(ErrorReportUtil.manuallySuppressed(it.getSNode()));
    }
  }
));
  TestsErrorsChecker.modelErrorsHolder.set(myRoot,res);
  return res;
}
