{
  setCellId(CELL_ID);
  setDefaultText(" ");
  setEditable(true);
  setCellBackgroundColor(LightColors.BLUE);
  getStyle().set(StyleAttributes.PUNCTUATION_LEFT,true);
  getStyle().set(StyleAttributes.PUNCTUATION_RIGHT,true);
  getStyle().set(StyleAttributes.FIRST_POSITION_ALLOWED,true);
  getStyle().set(StyleAttributes.LAST_POSITION_ALLOWED,true);
  RemoveSTHintAction removeSTHintAction=new RemoveSTHintAction();
  setAction(CellActionType.DELETE,removeSTHintAction);
  setAction(CellActionType.RIGHT_TRANSFORM,removeSTHintAction);
  setAction(CellActionType.LEFT_TRANSFORM,removeSTHintAction);
  KeyMap keyMap=new KeyMapImpl();
  keyMap.putAction(KeyMap.KEY_MODIFIERS_NONE,"VK_ESCAPE",new RemoveSTHintKeyMapAction());
  addKeyMap(keyMap);
  setSubstituteInfo(new AbstractNodeSubstituteInfo(getContext()){
    @Override protected List<SubstituteAction> createActions(){
      List<SubstituteAction> list=ModelActions.createSideTransformHintSubstituteActions(getSNode(),mySide,mySideTransformTag,EditorCell_STHint.this.getOperationContext());
      List<SubstituteAction> wrapperList=new ArrayList<SubstituteAction>(list.size());
      for (      final SubstituteAction action : list) {
        wrapperList.add(new NodeSubstituteActionWrapper(action){
          @Override public SNode substitute(          @Nullable EditorContext context,          String pattern){
            ModelAccess.instance().runWriteActionInCommand(new Runnable(){
              @Override public void run(){
                STHintPropertyUtil.removeTransformHints(getSNode());
              }
            }
);
            return super.substitute(context,pattern);
          }
          public String toString(){
            return "RTWrapper for " + action + "("+ action.getClass()+ ")";
          }
        }
);
      }
      return wrapperList;
    }
  }
);
}
