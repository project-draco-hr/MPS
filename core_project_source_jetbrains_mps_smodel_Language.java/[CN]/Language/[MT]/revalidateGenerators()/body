{
  ListIterator<Generator> generators=myGenerators.listIterator();
  Iterator<GeneratorDescriptor> generatorDescriptors=getModuleDescriptor() != null && getModuleDescriptor().getGenerators() != null ? getModuleDescriptor().getGenerators().iterator() : Collections.<GeneratorDescriptor>emptyList().iterator();
  MPSModuleRepository moduleRepository=(MPSModuleRepository)getRepository();
  while (generatorDescriptors.hasNext()) {
    GeneratorDescriptor nextDescriptor=generatorDescriptors.next();
    Generator nextGenerator=null;
    while (generators.hasNext() && nextGenerator == null) {
      Generator nextGeneratorCandidate=generators.next();
      GeneratorDescriptor nextGeneratorCandidateDescriptor=nextGeneratorCandidate.getModuleDescriptor();
      if (nextGeneratorCandidateDescriptor != null && EqualUtil.equals(nextGeneratorCandidateDescriptor.getGeneratorUID(),nextDescriptor.getGeneratorUID()) && EqualUtil.equals(nextGeneratorCandidateDescriptor.getId(),nextDescriptor.getId())) {
        nextGenerator=nextGeneratorCandidate;
      }
 else {
        moduleRepository.unregisterModule(nextGeneratorCandidate,this);
        generators.remove();
      }
    }
    if (nextGenerator != null) {
      nextGenerator.updateGeneratorDescriptor(nextDescriptor);
    }
 else {
      Generator generator=new Generator(this,nextDescriptor);
      moduleRepository.registerModule(generator,this);
      generators.add(generator);
    }
  }
  while (generators.hasNext()) {
    Generator nextGenerator=generators.next();
    moduleRepository.unregisterModule(nextGenerator,this);
    generators.remove();
  }
}
