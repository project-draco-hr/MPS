{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          SNode snodeType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),true);
          ISearchScope searchScope;
          if ((snodeType != null)) {
            SNode concept=SLinkOperations.getTarget(snodeType,"concept",false);
            List<SNode> methods=AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode());
            searchScope=new SimpleSearchScope(methods);
          }
 else {
            searchScope=new EmptySearchScope();
          }
          return searchScope;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_zb7xc_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
