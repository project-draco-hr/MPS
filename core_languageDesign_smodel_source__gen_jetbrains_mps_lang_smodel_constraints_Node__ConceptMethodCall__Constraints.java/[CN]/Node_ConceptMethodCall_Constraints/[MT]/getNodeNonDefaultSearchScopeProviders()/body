{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("baseMethodDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
      SNode snodeType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),true);
      ISearchScope searchScope;
      if ((snodeType != null)) {
        SNode concept=SLinkOperations.getTarget(snodeType,"concept",false);
        List<SNode> methods=AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode());
        searchScope=new SimpleSearchScope(methods);
      }
 else {
        searchScope=new EmptySearchScope();
      }
      return searchScope;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902fb(jetbrains.mps.lang.smodel.constraints)","1213104840562");
    }
  }
);
  return result;
}
