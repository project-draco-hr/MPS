{
  StringBuffer s=new StringBuffer("Generating:");
  for (  MPSProject p : go.getProjects()) {
    s.append("\n    ");
    s.append(p);
  }
  for (  IModule m : go.getModules()) {
    s.append("\n    ");
    s.append(m);
  }
  for (  SModelDescriptor m : go.getModels()) {
    s.append("\n    ");
    s.append(m);
  }
  info(s.toString());
  final ProjectOperationContext ctx=ProjectOperationContext.get(project.getProject());
  final List<IMResource> resources=Sequence.fromIterable(collectResources(ctx,go)).toListSequence();
  final Map<IModule,IMResource> cache=MapSequence.fromMap(new HashMap<IModule,IMResource>());
  ListSequence.fromList(resources).visitAll(new IVisitor<IMResource>(){
    public void visit(    IMResource r){
      MapSequence.fromMap(cache).put(r.module(),r);
    }
  }
);
  final GeneratorWorker.Graph<IMResource> graph=new GeneratorWorker.Graph<IMResource>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      IMResource res : (Iterable<IMResource>)resources) {
        graph.addEdges(res);
        for (        IModule depOn : res.module().getDependenciesManager().getDependOnModules()) {
          if (MapSequence.fromMap(cache).containsKey(depOn)) {
            graph.addEdges(MapSequence.fromMap(cache).get(depOn),res);
          }
        }
        if (res.module() instanceof Language) {
          for (          Generator gen : ((Language)res.module()).getGenerators()) {
            if (MapSequence.fromMap(cache).containsKey(gen)) {
              graph.addEdges(res,MapSequence.fromMap(cache).get(gen));
              graph.addEdges(MapSequence.fromMap(cache).get(gen),res);
            }
          }
        }
      }
    }
  }
);
  GraphAnalyzer<IMResource> ga=graph.getCycleDetector();
  List<List<IMResource>> cycles=ga.findCycles();
  for (  IMResource res : Sequence.fromIterable(ga.topologicalSort()).where(new IWhereFilter<IMResource>(){
    public boolean accept(    IMResource r){
      return MapSequence.fromMap(cache).containsKey(r.module());
    }
  }
)) {
    final List<IMResource> toMake=ListSequence.fromList(new ArrayList<IMResource>());
    for (    List<IMResource> cycle : cycles) {
      if (ListSequence.fromList(cycle).contains(res)) {
        ListSequence.fromList(toMake).addSequence(ListSequence.fromList(cycle));
        ListSequence.fromList(cycle).visitAll(new IVisitor<IMResource>(){
          public void visit(          IMResource r){
            MapSequence.fromMap(cache).removeKey(r.module());
          }
        }
);
        break;
      }
    }
    if (ListSequence.fromList(toMake).isEmpty()) {
      ListSequence.fromList(toMake).addElement(res);
      MapSequence.fromMap(cache).removeKey(res.module());
    }
    IdeEventQueue.getInstance().flushQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable(){
      public void run(){
      }
    }
);
    ThreadUtils.runInUIThreadAndWait(new Runnable(){
      public void run(){
        new BuildMakeService(ctx,myMessageHandler).make(toMake);
      }
    }
);
    IdeEventQueue.getInstance().flushQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable(){
      public void run(){
      }
    }
);
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      public void run(){
      }
    }
,ModalityState.defaultModalityState());
  }
}
