{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("applicableNode",new BaseReferenceConstraintsDescriptor("applicableNode",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode rule=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.analyzers.structure.Rule",true,false);
          if (rule != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"condition",true),"jetbrains.mps.analyzers.structure.ConceptCondition")) {
            ListSequence.fromList(result).addElement(SNodeOperations.cast(SLinkOperations.getTarget(rule,"condition",true),"jetbrains.mps.analyzers.structure.ConceptCondition"));
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_b5wqlc_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
