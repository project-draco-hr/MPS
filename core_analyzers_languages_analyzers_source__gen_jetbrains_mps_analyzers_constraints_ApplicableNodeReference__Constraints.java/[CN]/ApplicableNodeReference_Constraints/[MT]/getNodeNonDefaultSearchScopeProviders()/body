{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("applicableNode",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> result=new ArrayList<SNode>();
      SNode rule=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.analyzers.structure.Rule",true,false);
      if (rule != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"condition",true),"jetbrains.mps.analyzers.structure.ConceptCondition")) {
        ListSequence.fromList(result).addElement(SNodeOperations.cast(SLinkOperations.getTarget(rule,"condition",true),"jetbrains.mps.analyzers.structure.ConceptCondition"));
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:73c9a355-2bf0-4466-8a7d-8b8d8a945cd4(jetbrains.mps.analyzers.constraints)","4943044633102057777");
    }
  }
);
  return result;
}
