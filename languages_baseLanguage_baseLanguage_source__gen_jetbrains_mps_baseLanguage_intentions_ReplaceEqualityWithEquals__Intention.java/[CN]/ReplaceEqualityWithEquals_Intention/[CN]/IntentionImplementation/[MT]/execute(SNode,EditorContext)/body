{
  SNode leftExpr=SLinkOperations.getTarget(node,"leftExpression",true);
  SNode rightExpression=SLinkOperations.getTarget(node,"rightExpression",true);
  SNode equalsExpression=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
  SLinkOperations.setTarget(equalsExpression,"operand",leftExpr,true);
  SNode operation=SNodeFactoryOperations.setNewChild(equalsExpression,"operation","jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
  SLinkOperations.setTarget(operation,"baseMethodDeclaration",SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_1rm795_a0a0a0f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false),false);
  ListSequence.fromList(SLinkOperations.getTargets(operation,"actualArgument",true)).insertElement(0,rightExpression);
  SNodeOperations.replaceWithAnother(node,equalsExpression);
}
