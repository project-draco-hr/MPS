{
  if (!((Boolean)Queries.CustomExpression_check_isAppliedTo_SPropertyAccess_simpleProperty(argument))) {
    TypeChecker.getInstance().reportTypeError(argument,"\"'has value (simple)' is not expected here\"");
  }
  if (!((SLinkOperations.getTarget(argument,"value",true) == null))) {
    TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument,"value",true));
    if ((Boolean)Queries.CustomExpression_check_isAppliedTo_SPropertyAccess_simpleStringProperty(argument)) {
      if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument,"value",true)),new QuotationClass_7().createNode()))) {
        TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(argument,"value",true),"java.lang.String is expected");
      }
    }
    if ((Boolean)Queries.CustomExpression_check_isAppliedTo_SPropertyAccess_simpleIntegerProperty(argument)) {
      if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument,"value",true)),new QuotationClass_8().createNode()))) {
        TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(argument,"value",true),"integer is expected");
      }
    }
    if ((Boolean)Queries.CustomExpression_check_isAppliedTo_SPropertyAccess_simpleBooleanProperty(argument)) {
      if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument,"value",true)),new QuotationClass_9().createNode()))) {
        TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(argument,"value",true),"boolean is expected");
      }
    }
  }
  TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_10().createNode(),argument);
}
