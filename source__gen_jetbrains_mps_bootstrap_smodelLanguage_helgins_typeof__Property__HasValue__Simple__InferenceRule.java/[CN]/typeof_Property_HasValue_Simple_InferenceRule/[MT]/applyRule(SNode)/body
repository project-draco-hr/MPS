{
  if (RulesUtil.checkAppliedCorrectly_generic(argument)) {
    SNode propertyAccessOp=SLinkOperations.getTarget(RulesUtil.leftExpression(argument),"nodeOperation",true);
    SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(propertyAccessOp,"property",false),"dataType",false);
    if (!((dataType != null))) {
      TypeChecker.getInstance().reportTypeError(argument,"couldn't define accessed property datatype");
    }
    SNode value=SLinkOperations.getTarget(argument,"value",true);
    if ((value != null)) {
      if (DataTypeUtil.isSimpleString(((DataTypeDeclaration)SNodeOperations.getAdapter(dataType)))) {
        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(value),new QuotationClass_7().createNode(),value,null);
      }
 else       if (DataTypeUtil.isSimpleInteger(((DataTypeDeclaration)SNodeOperations.getAdapter(dataType)))) {
        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(value),new QuotationClass_8().createNode(),value,null);
      }
 else       if (DataTypeUtil.isSimpleBoolean(((DataTypeDeclaration)SNodeOperations.getAdapter(dataType)))) {
        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(value),new QuotationClass_9().createNode(),value,null);
      }
 else {
        TypeChecker.getInstance().reportTypeError(argument,"unknown property datatype: " + dataType);
      }
    }
  }
  TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_10().createNode(),argument);
}
