{
  IScript scr=new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.core.Generate"),new IFacet.Name("jetbrains.mps.lang.core.TextGen"),new IFacet.Name("Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")).toScript();
  IScriptController ctl=new IScriptController.Stub(new IConfigMonitor.Stub(){
    @Override public <T extends IOption>T relayQuery(    IQuery<T> query){
      return query.defaultOption();
    }
  }
,new IJobMonitor.Stub());
  final Future<IResult> future=IMakeService.INSTANCE.get().make(session,new ModelsToResources(context,Sequence.<SModel>singleton(md)).resources(false),scr,ctl);
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      try {
        IResult result=future.get();
        if (result.isSucessful()) {
          FResource fres=(FResource)Sequence.fromIterable(result.output()).first();
          final TextPreviewFile tfile=new TextPreviewFile(NameUtil.compactNamespace(md.getModelName()) + "/text","Generated text for " + md.getModelName(),fres.contents());
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              Project p=ProjectHelper.toIdeaProject(context.getProject());
              FileEditorManager.getInstance(p).openTextEditor(new OpenFileDescriptor(p,tfile),true);
            }
          }
);
          ProjectPane.getInstance(context.getProject()).rebuild();
        }
      }
 catch (      InterruptedException ignore) {
      }
catch (      ExecutionException ignore) {
      }
    }
  }
);
}
