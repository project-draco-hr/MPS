{
  monitor.start(getDescription(),3);
  try {
    List<SNode> allAncestors=new ArrayList<SNode>();
    SNode method=node;
    boolean isStatic=SNodeOperations.isInstanceOf(method,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    SNode classNode=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
    SNode interfaceNode=SNodeOperations.getAncestor(method,"jetbrains.mps.baseLanguage.structure.Interface",false,false);
    if (classNode != null) {
      ListSequence.fromList(allAncestors).addElement(classNode);
      ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",classNode,scope,monitor.subTask(1))));
      ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementedInterfaces_Finder",classNode,scope,monitor.subTask(1))));
    }
 else     if (interfaceNode != null) {
      ListSequence.fromList(allAncestors).addElement(interfaceNode);
      ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder",interfaceNode,scope,monitor.subTask(1))));
    }
    Set<SNode> results=SetSequence.fromSet(new HashSet<SNode>());
    for (    SNode ancestor : ListSequence.fromList(allAncestors)) {
      List<SNode> classMethods=null;
      if (isStatic) {
        if (SNodeOperations.isInstanceOf(ancestor,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          classMethods=SLinkOperations.getTargets(SNodeOperations.cast(ancestor,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"staticMethod",true);
        }
      }
 else {
        if (SNodeOperations.isInstanceOf(ancestor,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          classMethods=SLinkOperations.getTargets(SNodeOperations.cast(ancestor,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"method",true);
        }
 else {
          classMethods=SLinkOperations.getTargets(SNodeOperations.cast(ancestor,"jetbrains.mps.baseLanguage.structure.Interface"),"method",true);
        }
      }
      for (      SNode classMethod : ListSequence.fromList(classMethods)) {
        if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(classMethod,method)) {
          SetSequence.fromSet(results).addElement(classMethod);
        }
      }
    }
    for (    SNode result : SetSequence.fromSet(results)) {
      ListSequence.fromList(_results).addElement(result);
    }
  }
  finally {
    monitor.done();
  }
}
