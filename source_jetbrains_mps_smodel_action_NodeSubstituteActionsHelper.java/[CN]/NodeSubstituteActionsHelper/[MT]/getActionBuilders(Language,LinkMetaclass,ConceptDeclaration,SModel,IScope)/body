{
  List<NodeSubstituteActionsBuilder> substituteActionsBuilders=new LinkedList<NodeSubstituteActionsBuilder>();
  SModelDescriptor actionsModelDescr=language.getActionsModelDescriptor();
  if (actionsModelDescr != null) {
    List<SNode> roots=actionsModelDescr.getSModel().getRoots();
    for (    SNode root : roots) {
      if (root instanceof NodeSubstituteActions) {
        Iterator<NodeSubstituteActionsBuilder> iterator=((NodeSubstituteActions)root).actionsBuilders();
        while (iterator.hasNext()) {
          NodeSubstituteActionsBuilder substituteActionsBuilder=iterator.next();
          ConceptDeclaration applicableConcept=substituteActionsBuilder.getApplicableConcept();
          if (substituteActionsBuilder.getApplicableLinkMetaclass() == linkMetaclass && SModelUtil.isAssignableConcept(targetConcept,applicableConcept)) {
            boolean skipBuilder=false;
            Iterator<NodeSubstituteActionsBuilder> otherBuilders=substituteActionsBuilders.iterator();
            while (otherBuilders.hasNext()) {
              NodeSubstituteActionsBuilder builder=otherBuilders.next();
              ConceptDeclaration otherApplicableConcept=builder.getApplicableConcept();
              if (SModelUtil.isAssignableConcept(otherApplicableConcept,applicableConcept)) {
                skipBuilder=true;
                break;
              }
 else               if (SModelUtil.isAssignableConcept(applicableConcept,otherApplicableConcept)) {
                otherBuilders.remove();
                break;
              }
            }
            if (!skipBuilder) {
              substituteActionsBuilders.add(substituteActionsBuilder);
            }
          }
        }
      }
    }
  }
  return substituteActionsBuilders;
}
