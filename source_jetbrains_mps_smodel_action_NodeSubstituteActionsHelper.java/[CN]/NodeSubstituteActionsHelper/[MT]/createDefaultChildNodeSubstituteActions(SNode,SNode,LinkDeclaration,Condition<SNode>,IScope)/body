{
  final ConceptDeclaration targetConcept=linkDeclaration.getTarget();
  if (targetConcept == null) {
    return Collections.emptyList();
  }
  List<ConceptDeclaration> nodes=SModelUtil.conceptsFromModelLanguages(sourceNode.getModel(),new Condition<ConceptDeclaration>(){
    public boolean met(    ConceptDeclaration node){
      return ModelActions.isDefaultSubstitutableConcept(node,targetConcept,scope) && filterCondition.met(node);
    }
  }
,scope);
  List<INodeSubstituteAction> actions=new LinkedList<INodeSubstituteAction>();
  for (  SNode node : nodes) {
    actions.add(new DefaultChildNodeSubstituteAction(node,sourceNode,currentTargetNode,linkDeclaration,scope));
  }
  return actions;
}
