{
  SNode buildProject=SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildProject",null);
  SPropertyOperations.set(buildProject,"name",name);
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"plugins",true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.build.structure.BuildJavaPlugin",null));
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"plugins",true)).addElement(SConceptOperations.createNewNode("jetbrains.mps.build.mps.structure.BuildMPSPlugin",null));
  try {
    String relativeToModuleProjectPath=Context.defaultContext().getRelativePathHelper(targetModelDescriptor).makeRelative(myProject.getBasePath());
    SPropertyOperations.set(buildProject,"internalBaseDirectory",relativeToModuleProjectPath);
  }
 catch (  RelativePathHelper.PathException e) {
    if (LOG.isEnabledFor(Priority.WARN)) {
      LOG.warn("Can't calculate project path relative to module " + targetModelDescriptor.getModule(),e);
    }
  }
  Set<String> userMacroNames=new LinkedHashSet<String>(PathMacros.getInstance().getUserMacroNames());
  List<SNode> macros=new ArrayList<SNode>();
  List<SNode> dependencies=new ArrayList<SNode>();
  SNode dateMacro=null;
  SNode buildNumber=null;
  SNode branding=null;
  if (eq_un708i_a0r0n(getDependencyKind(),DependencyStep.DependencyKind.MPS)) {
    SNode macro=_quotation_createNode_un708i_a0a0r0n();
    ListSequence.fromList(macros).addElement(macro);
    ListSequence.fromList(dependencies).addElement(_quotation_createNode_un708i_a0a2a71a31(macro));
    userMacroNames.remove("mps_home");
  }
 else   if (eq_un708i_a0a71a31(getDependencyKind(),DependencyStep.DependencyKind.IDEA)) {
    SNode macro=_quotation_createNode_un708i_a0a0a71a31();
    ListSequence.fromList(macros).addElement(macro);
    userMacroNames.remove("idea_home");
    ListSequence.fromList(dependencies).addElement(_quotation_createNode_un708i_a0a3a0r0n(macro));
    macro=_quotation_createNode_un708i_a0e0a71a31(macro);
    ListSequence.fromList(macros).addElement(macro);
    userMacroNames.remove("plugins_home");
    ListSequence.fromList(dependencies).addElement(_quotation_createNode_un708i_a0a7a0r0n(macro));
  }
 else   if (eq_un708i_a0b71a31(getDependencyKind(),DependencyStep.DependencyKind.STANDALONE)) {
    dateMacro=_quotation_createNode_un708i_a0a0b71a31();
    ListSequence.fromList(macros).addElement(dateMacro);
    buildNumber=_quotation_createNode_un708i_a0c0b71a31(name + "-SNAPSHOT");
    ListSequence.fromList(macros).addElement(buildNumber);
    SNode macro=_quotation_createNode_un708i_a0e0b71a31();
    ListSequence.fromList(macros).addElement(macro);
    ListSequence.fromList(dependencies).addElement(_quotation_createNode_un708i_a0a6a1r0n(macro));
    ListSequence.fromList(dependencies).addElement(_quotation_createNode_un708i_a0a7a1r0n(macro));
    userMacroNames.remove("mps_home");
    userMacroNames.remove("date");
    userMacroNames.remove("build.number");
    branding=_quotation_createNode_un708i_a0l0b71a31(buildNumber,ICONS,name,name,name,ICONS,dateMacro,ICONS,ICONS,ICONS,ICONS,ICONS,ICONS);
    ListSequence.fromList(SLinkOperations.getTargets(buildProject,"parts",true)).addElement(branding);
  }
  for (  String macro : SetSequence.fromSet(userMacroNames)) {
    ListSequence.fromList(macros).addElement(_quotation_createNode_un708i_a0a0a81a31(macro));
  }
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"macros",true)).addSequence(ListSequence.fromList(macros));
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"dependencies",true)).addSequence(ListSequence.fromList(dependencies));
  Set<ModuleData> moduleData=SetSequence.fromSet(new LinkedHashSet<ModuleData>());
  extractModules(selectedData,moduleData);
  SNode group=_quotation_createNode_un708i_a0z0n(SetSequence.fromSet(moduleData).select(new ISelector<ModuleData,SNode>(){
    public SNode select(    ModuleData it){
      return createModuleNode(it);
    }
  }
).toListSequence(),name);
  SNode plugin=_quotation_createNode_un708i_a0ab0n(name,group,name,name);
  SLinkOperations.setNewChild(buildProject,"layout","jetbrains.mps.build.structure.BuildLayout");
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"parts",true)).addElement(plugin);
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"parts",true)).addElement(group);
  if (eq_un708i_a0fb0n(getDependencyKind(),DependencyStep.DependencyKind.STANDALONE)) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(buildProject,"layout",true),"children",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(_quotation_createNode_un708i_a0a0a0fb0n(buildNumber,convertToMacroRelative(_quotation_createNode_un708i_a0a0b2a0a0a0a13a31(),SNodeOperations.cast(ListSequence.fromList(macros).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return eq_un708i_a0a0a0a0a0b1a0a0a0a13a31(SPropertyOperations.getString(it,"name"),"mps_home");
      }
    }
),"jetbrains.mps.build.structure.BuildFolderMacro")),branding,plugin,buildNumber,dateMacro),"children",true)));
  }
 else {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(buildProject,"layout",true),"children",true)).addElement(_quotation_createNode_un708i_a0a0a0fb0n_0(name + ".zip",plugin));
  }
  SModelOperations.addRootNode(targetModelDescriptor,buildProject);
  PathConverter pathConverter=new PathConverter(buildProject);
  VisibleModules visible=new VisibleModules(buildProject,null);
  visible.collect();
  for (  SNode module : ListSequence.fromList(SNodeOperations.getDescendants(buildProject,"jetbrains.mps.build.mps.structure.BuildMps_Module",false,new String[]{}))) {
    try {
      new ModuleLoader(module,visible,pathConverter,null).importRequired();
    }
 catch (    ModuleLoader.ModuleLoaderException ex) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error(ex.getMessage());
      }
    }
  }
  if (eq_un708i_a0pb0n(getDependencyKind(),DependencyStep.DependencyKind.STANDALONE)) {
    SNode buildStandalone=addStandaloneBuild(targetModelDescriptor,buildProject);
    return ListSequence.fromListAndArray(new ArrayList<SNode>(),buildProject,buildStandalone);
  }
  return Sequence.<SNode>singleton(buildProject);
}
