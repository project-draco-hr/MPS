{
  if (isPackAsIdeaPlugin()) {
    Set<ModuleData> moduleData=SetSequence.fromSet(new LinkedHashSet<ModuleData>());
    extractModules(data,moduleData);
    SNode group=new BuildGeneratorImpl.QuotationClass_un708i_a0a2a0a9().createNode(SetSequence.fromSet(moduleData).select(new ISelector<ModuleData,SNode>(){
      public SNode select(      ModuleData it){
        return createModuleNode(it);
      }
    }
).toListSequence(),name);
    SNode plugin=new BuildGeneratorImpl.QuotationClass_un708i_a0a3a0a9().createNode(name,name,name);
    ListSequence.fromList(SLinkOperations.getTargets(plugin,"content",true)).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0e0a0j().createNode(group));
    try {
      SLinkOperations.setTarget(plugin,"pluginXml",createPathFromFullPath(getPathToPluginXml()),true);
    }
 catch (    RelativePathHelper.PathException e) {
      if (log.isWarnEnabled()) {
        log.warn("Can't calculate relative path for specified plugin.xml " + getPathToPluginXml(),e);
      }
    }
    return MultiTuple.<List<SNode>,SNode>from(Sequence.fromIterable(Sequence.fromArray(new SNode[]{plugin,group})).toListSequence(),new BuildGeneratorImpl.QuotationClass_un708i_a1a7a0a9().createNode(name + ".zip",plugin));
  }
 else {
    Set<SNode> modules=SetSequence.fromSet(new LinkedHashSet<SNode>());
    SNode folder=new BuildGeneratorImpl.QuotationClass_un708i_a0a1a0a0j().createNode(name);
    createContent(data,folder,modules,targetSModel);
    return MultiTuple.<List<SNode>,SNode>from(SetSequence.fromSet(modules).toListSequence(),new BuildGeneratorImpl.QuotationClass_un708i_a1a3a0a0j().createNode(name + ".zip",folder));
  }
}
