{
  Set<SNode> modules=SetSequence.fromSet(new LinkedHashSet<SNode>());
  SNode folder=new BuildGeneratorImpl.QuotationClass_un708i_a0a1a4().createNode(name);
  SModel targetSModel=targetModelDescriptor.getSModel();
  createContent(selectedData,folder,modules,targetSModel);
  Set<String> userMacroNames=PathMacros.getInstance().getUserMacroNames();
  List<SNode> macroses=new ArrayList<SNode>();
  List<SNode> dependencies=new ArrayList<SNode>();
  for (  String macro : SetSequence.fromSet(userMacroNames)) {
    ListSequence.fromList(macroses).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0j0e().createNode(macro));
  }
  if (eq_un708i_a0k0e(getDependencyKind(),DependencyStep.DependencyKind.MPS)) {
    ListSequence.fromList(macroses).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0k0e().createNode());
    ListSequence.fromList(dependencies).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0b0k0e().createNode(SNodeOperations.getNode("r:874d959d-e3b4-4d04-b931-ca849af130dd(jetbrains.mps.ide.build)","4301118715654192646")));
  }
 else   if (eq_un708i_a0a01a4(getDependencyKind(),DependencyStep.DependencyKind.IDEA_AND_MPS_PLUGIN)) {
    SNode macro=new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0k0e_0().createNode();
    ListSequence.fromList(macroses).addElement(macro);
    ListSequence.fromList(dependencies).addElement(new BuildGeneratorImpl.QuotationClass_un708i_a0a0c0a01a4().createNode(macro));
  }
  SNode buildProject=new BuildGeneratorImpl.QuotationClass_un708i_a0a21a4().createNode(name + ".zip",folder,name,SetSequence.fromSet(modules).toListSequence(),macroses);
  ListSequence.fromList(SLinkOperations.getTargets(buildProject,"dependencies",true)).addSequence(ListSequence.fromList(dependencies));
  try {
    String relativeToModuleProjectPath=Context.defaultContext().getRelativePathHelper(targetSModel).makeRelative(myProject.getBasePath());
    SPropertyOperations.set(buildProject,"internalBaseDirectory",relativeToModuleProjectPath);
  }
 catch (  RelativePathHelper.PathException e) {
    if (log.isWarnEnabled()) {
      log.warn("Cant calculate project path relative to module " + targetModelDescriptor.getModule(),e);
    }
  }
  SModelOperations.addRootNode(targetSModel,buildProject);
  PathConverter pathConverter=new PathConverter(buildProject);
  VisibleModules visible=new VisibleModules(buildProject,null);
  visible.collect();
  for (  SNode module : SetSequence.fromSet(modules)) {
    try {
      new ModuleLoader(module,visible,pathConverter,null).importRequired();
    }
 catch (    ModuleLoader.ModuleLoaderException ex) {
      if (log.isErrorEnabled()) {
        log.error(ex.getMessage());
      }
    }
  }
  return buildProject;
}
