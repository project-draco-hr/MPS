{
  SNode constructedType=new typeof_AnonymousClass_InferenceRule.QuotationClass_fj2vg7_a0a0a0().createNode(SLinkOperations.getTargets(anonymousClass,"typeParameter",true),anonymousClass,typeCheckingContext);
{
    SNode _nodeToCheck_1029348928467=anonymousClass;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2925336694746296920",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2925336694746296924",true),(SNode)constructedType,_info_12389875345);
  }
  if (SLinkOperations.getTarget(anonymousClass,"baseMethodDeclaration",false) == null || !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(anonymousClass,"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.cast(SLinkOperations.getTarget(anonymousClass,"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
  if (!(ListSequence.fromList(SLinkOperations.getTargets(anonymousClass,"typeParameter",true)).count() == 0 || ListSequence.fromList(SLinkOperations.getTargets(anonymousClass,"typeParameter",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(SLinkOperations.getTarget(anonymousClass,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false),"typeVariableDeclaration",true)).count())) {
{
      BaseQuickFixProvider intentionProvider=null;
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(anonymousClass,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2925336694746296749",intentionProvider,errorTarget);
    }
  }
  for (  SNode parameter : SLinkOperations.getTargets(anonymousClass,"typeParameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(parameter,SLinkOperations.getTarget(new typeof_AnonymousClass_InferenceRule.QuotationClass_fj2vg7_a0b0a0a0f0a().createNode(typeCheckingContext),"descriptor",false),false)))) {
      BaseQuickFixProvider intentionProvider=null;
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(parameter,"primitive type not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2925336694746296785",intentionProvider,errorTarget);
    }
  }
  final SNode instanceType_typevar_2925336694746296814=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=anonymousClass;
    BaseQuickFixProvider intentionProvider=null;
    EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","2925336694746296815",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_2925336694746296814),(SNode)constructedType,_info_12389875345);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,anonymousClass,null,mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_2925336694746296814),mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
