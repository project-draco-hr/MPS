{
{
    SNode _nodeToCheck_1029348928467=op;
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(op,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1221168249378",true),new QuotationClass_100().createNode(),_nodeToCheck_1029348928467,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1221168255365",intentionProvider);
  }
  RulesUtil.checkAppliedCorrectly_generic(op);
{
    SNode _nodeToCheck_1029348928467=op;
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(op,"operationContext",true),"jetbrains.mps.bootstrap.smodelLanguage.helgins","1221167442901",true),new QuotationClass_99().createNode(),_nodeToCheck_1029348928467,null,"jetbrains.mps.bootstrap.smodelLanguage.helgins","1221167466283",false,0,intentionProvider);
  }
  final SNode linkDecl=SLinkOperations.getTarget(op,"referenceLink",false);
  if (linkDecl != null) {
    if (!(SPropertyOperations.hasValue(linkDecl,"metaClass","reference","reference"))) {
      TypeChecker.getInstance().reportTypeError(op,"reference link is expected","jetbrains.mps.bootstrap.smodelLanguage.helgins","1221168677396");
    }
    final SNode Concept_typevar_1221168662799=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
    RulesUtil.equate_inputNodeConcept(op,TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1221168662799));
{
      final SNode C=TypeChecker.getInstance().getEquationManager().getRepresentator(Concept_typevar_1221168662799);
      TypeChecker.getInstance().getRuntimeSupport().whenConcrete(C,new Runnable(){
        public void run(){
          SNode inputNodeConcept=TypeChecker.getInstance().getEquationManager().getRepresentator(C);
          List<SNode> declaredLinks=AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(inputNodeConcept);
          if (!(ListSequence.fromList(declaredLinks).contains(linkDecl))) {
            TypeChecker.getInstance().reportTypeError(op,"access to link '" + SPropertyOperations.getString(linkDecl,"role") + "' is not expected here","jetbrains.mps.bootstrap.smodelLanguage.helgins","1221168662817");
          }
        }
      }
,"jetbrains.mps.bootstrap.smodelLanguage.helgins@3_0","1221169178439");
    }
  }
}
