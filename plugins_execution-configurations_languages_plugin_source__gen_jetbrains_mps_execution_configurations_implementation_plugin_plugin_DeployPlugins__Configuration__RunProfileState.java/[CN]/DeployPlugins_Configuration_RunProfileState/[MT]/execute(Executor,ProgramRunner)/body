{
  Project project=myEnvironment.getProject();
  final DeployScript script=MapSequence.fromMap(ScriptsHolder.EXECUTOR_ID_TO_SCRIPT).get(myEnvironment.getExecutionId());
  if (script == null) {
    throw new ExecutionException("Could not deploy plugins");
  }
  String deployScriptLocation=script.getDeployScriptLocation();
  if ((deployScriptLocation == null || deployScriptLocation.length() == 0)) {
    script.dispose();
    MapSequence.fromMap(ScriptsHolder.EXECUTOR_ID_TO_SCRIPT).removeKey(myEnvironment.getExecutionId());
    throw new ExecutionException("Can not generate deploy script");
  }
  ConsoleView console=ConsoleCreator.createConsoleView(project,false);
  console.addMessageFilter(new StandaloneMPSStackTraceFilter(project));
  ProcessHandler process;
  try {
    process=OutputRedirector.redirect(new Ant_Command().setTargetName_String("buildDependents assemble").createProcess(deployScriptLocation),new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent event){
        if (event.getExitCode() == 0) {
          FileUtil.copyDir(new File(script.getArtifactsPath()),myRunConfiguration.getPluginsPath());
          script.dispose();
          MapSequence.fromMap(ScriptsHolder.EXECUTOR_ID_TO_SCRIPT).removeKey(myEnvironment.getExecutionId());
          if (myRunConfiguration.getDeployClassesOnly()) {
          }
          if (myRunConfiguration.getRestartCurrentInstance()) {
            ApplicationEx application=(ApplicationEx)ApplicationManager.getApplication();
            application.restart(true);
          }
        }
      }
    }
);
  }
 catch (  ExecutionException e) {
    script.dispose();
    MapSequence.fromMap(ScriptsHolder.EXECUTOR_ID_TO_SCRIPT).removeKey(myEnvironment.getExecutionId());
    throw new ExecutionException("Can not deploy plugins",e);
  }
{
    ProcessHandler _processHandler=process;
    final ConsoleView _consoleView=console;
    _processHandler.addProcessListener(new ConsoleProcessListener(_consoleView));
    return new DefaultExecutionResult(_processHandler,new DefaultExecutionConsole(_consoleView.getComponent(),new _FunctionTypes._void_P0_E0(){
      public void invoke(){
        _consoleView.dispose();
      }
    }
));
  }
}
