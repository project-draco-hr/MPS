{
  if (SHOW_INFO > 0) {
    System.out.println("Making boxes for nodes");
    System.out.println("initial graph: ");
    printEmbeddedGraph();
  }
  List<Node> nodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  ListSequence.<Node>fromList(nodes).addSequence(SetSequence.<Node>fromSet(MapSequence.fromMap(nodeSizes).keySet()));
  for (  Node node : ListSequence.<Node>fromList(nodes)) {
    List<Edge> oldEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
    ListSequence.<Edge>fromList(oldEdges).addSequence(ListSequence.<Edge>fromList(node.getEdges()));
    for (    Edge oldEdge : ListSequence.<Edge>fromList(oldEdges)) {
      splitEdge(oldEdge);
    }
    Map<Direction2D,List<Edge>> rectEdges=makeRectangleForNode(node);
    for (    Direction2D dir : Direction2D.values()) {
      int length=MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).width;
      if (dir.isVertical()) {
        length=MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).height;
      }
      List<Edge> edges=MapSequence.<Direction2D,List<Edge>>fromMap(rectEdges).get(dir);
      int edgeLength=length / ListSequence.<Edge>fromList(edges).count();
      for (      Edge edge : ListSequence.<Edge>fromList(edges)) {
        if (edge == ListSequence.<Edge>fromList(edges).last()) {
          MapSequence.<Edge,Integer>fromMap(myBoxEdgeLengths).put(edge,length - (edgeLength * (ListSequence.<Edge>fromList(edges).count() - 1)));
        }
 else {
          MapSequence.<Edge,Integer>fromMap(myBoxEdgeLengths).put(edge,edgeLength);
        }
      }
    }
  }
  if (SHOW_INFO > 0) {
    System.out.println("after modification: ");
    printEmbeddedGraph();
  }
}
