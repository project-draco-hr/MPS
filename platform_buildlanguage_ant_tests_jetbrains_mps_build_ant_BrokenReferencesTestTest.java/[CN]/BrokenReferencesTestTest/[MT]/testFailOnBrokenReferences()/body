{
  String solutionName="brokenSolution";
  URL resource=BrokenReferencesTestTest.class.getResource(solutionName + ".zip");
  File destdir=FileUtil.createTempDirectory(solutionName,"");
  ZipUtil.extract(new File(resource.getFile()),destdir,new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return true;
    }
  }
);
  WhatToDo whatToDo=new WhatToDo();
  whatToDo.addModelFile(new File(destdir.getAbsolutePath() + File.separator + "Broken.sandbox"+ File.separator+ "broken"+ File.separator+ "model.mps"));
  whatToDo.addLibrary(solutionName,destdir);
  whatToDo.updateLogLevel(4);
  final boolean[] brokenReferenceFound=new boolean[1];
  TestBrokenReferencesWorker worker=new TestBrokenReferencesWorker(whatToDo,new SystemOutLogger()){
    @Override protected void output(    CharSequence text){
      TeamCityMessageFormat teamCityMessageFormat=new TeamCityMessageFormat();
      if (teamCityMessageFormat.isBuildServerMessage(text) && teamCityMessageFormat.isTestFailMessage(text)) {
        brokenReferenceFound[0]=true;
      }
      System.out.append(teamCityMessageFormat.escapeBuildMessage(new StringBuffer(text)));
    }
  }
;
  worker.work();
  FileUtil.delete(destdir);
  if (brokenReferenceFound[0])   return;
  fail("Did not find any broken references in solution.");
}
