{
  SNode field;
  if (isStatic(x) || SConceptOperations.isSubConceptOf(parentConcept,"jetbrains.mps.baseLanguage.structure.Interface")) {
    field=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration",null);
  }
 else {
    field=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldDeclaration",null);
    SPropertyOperations.set(SNodeOperations.cast(field,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),"isVolatile","" + (x.hasModifierProperty(PsiModifier.VOLATILE)));
    SPropertyOperations.set(SNodeOperations.cast(field,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),"isTransient","" + (x.hasModifierProperty(PsiModifier.TRANSIENT)));
  }
  SPropertyOperations.set(field,"name",x.getName());
  SLinkOperations.setTarget(SNodeOperations.cast(field,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",getVisibility(x),true);
  SPropertyOperations.set(field,"isFinal","" + (isFinal(x)));
  SLinkOperations.setTarget(field,"type",convertType(x.getType()),true);
  addAnnotations(x,field);
  if (needToSetId() && SPropertyOperations.getString(field,"name") != null) {
    String id=getIdPrefix() + SPropertyOperations.getString(field,"name");
    ((jetbrains.mps.smodel.SNode)field).setId(new jetbrains.mps.smodel.SNodeId.Foreign(id));
  }
  return field;
}
