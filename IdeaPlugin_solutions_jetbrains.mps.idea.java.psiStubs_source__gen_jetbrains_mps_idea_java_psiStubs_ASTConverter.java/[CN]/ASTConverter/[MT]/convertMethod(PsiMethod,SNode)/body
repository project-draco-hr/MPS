{
  SNode method;
  if (x.isConstructor()) {
    method=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",null);
  }
 else   if (x instanceof PsiAnnotationMethod && SConceptOperations.isSubConceptOf(parentConcept,"jetbrains.mps.baseLanguage.structure.Annotation")) {
    method=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration",null);
    if (((PsiAnnotationMethod)x).getDefaultValue() != null) {
      SNode str=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral",null);
      SPropertyOperations.set(str,"value","TODO: SUPPORT EXPRESSIONS IN PSI STUBS?");
      SLinkOperations.setTarget(SNodeOperations.cast(method,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"),"defaultValue",str,true);
    }
  }
 else   if (!(isStatic(x)) || SConceptOperations.isSubConceptOf(parentConcept,"jetbrains.mps.baseLanguage.structure.Interface")) {
    method=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",null);
  }
 else {
    method=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",null);
  }
  SPropertyOperations.set(method,"name","" + (x.getName()));
  SLinkOperations.setTarget(SNodeOperations.cast(method,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",getVisibility(x),true);
  SPropertyOperations.set(method,"isFinal","" + (isFinal(x)));
  SPropertyOperations.set(method,"isSynchronized","" + (x.hasModifierProperty(PsiModifier.SYNCHRONIZED)));
  ListSequence.fromList(SLinkOperations.getTargets(method,"throwsItem",true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getThrowsList().getReferencedTypes())).select(new ISelector<PsiClassType,SNode>(){
    public SNode select(    PsiClassType it){
      SNode typ=resolveClass(it);
      return typ;
    }
  }
));
  final ASTConverter currConverter=addTypeParams(x,method);
  SLinkOperations.setTarget(method,"returnType",currConverter.convertType(x.getReturnTypeNoResolve()),true);
  ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).addSequence(Sequence.fromIterable(Sequence.fromArray(x.getParameterList().getParameters())).select(new ISelector<PsiParameter,SNode>(){
    public SNode select(    PsiParameter it){
      SNode param=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
      SPropertyOperations.set(param,"name","" + (it.getName()));
      SLinkOperations.setTarget(param,"type",currConverter.convertType(it.getType()),true);
      SPropertyOperations.set(param,"isFinal","" + (isFinal(it)));
      currConverter.addAnnotations(it,param);
      return param;
    }
  }
));
  if (1 > 0) {
    SLinkOperations.setTarget(method,"body",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList",null),true);
  }
 else {
    SLinkOperations.setTarget(method,"body",SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null),true);
  }
  if (needToSetId()) {
    SNodeId.Foreign nodeId=JavaForeignIdBuilder.computeNodeId(x);
    if (nodeId != null) {
      ((jetbrains.mps.smodel.SNode)method).setId(nodeId);
    }
  }
  if (myMps2PsiMapper != null) {
    myMps2PsiMapper.consume(new Pair<SNode,PsiElement>(method,x));
  }
  return method;
}
