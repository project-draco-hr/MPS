{
  SNode lCType=(SNodeOperations.isInstanceOf(ltype,"jetbrains.mps.baseLanguage.structure.ClassifierType") ? SNodeOperations.cast(ltype,"jetbrains.mps.baseLanguage.structure.ClassifierType") : null);
  SNode lFType=(SNodeOperations.isInstanceOf(ltype,"jetbrains.mps.baseLanguage.closures.structure.FunctionType") ? SNodeOperations.cast(ltype,"jetbrains.mps.baseLanguage.closures.structure.FunctionType") : null);
  if ((lFType == null) && (lCType == null)) {
    return;
  }
  if ((lCType != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(lCType,"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface"))) {
    return;
  }
  if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
    if (!(SNodeOperations.isInstanceOf(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
      return;
    }
  }
  SNode rtype=TypeChecker.getInstance().getTypeOf(rexpr);
  SNode rFType=(SNodeOperations.isInstanceOf(rtype,"jetbrains.mps.baseLanguage.closures.structure.FunctionType") ? SNodeOperations.cast(rtype,"jetbrains.mps.baseLanguage.closures.structure.FunctionType") : null);
  SNode rCType=(SNodeOperations.isInstanceOf(rtype,"jetbrains.mps.baseLanguage.structure.ClassifierType") ? SNodeOperations.cast(rtype,"jetbrains.mps.baseLanguage.structure.ClassifierType") : null);
  if ((lCType != null) && (rFType != null)) {
    if (SNodeOperations.isInstanceOf(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral") && (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(lCType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.closures.structure.FunctionType"),true),"resultType",true),"jetbrains.mps.baseLanguage.structure.VoidType")) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rFType,"resultType",true),"jetbrains.mps.baseLanguage.structure.VoidType") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"),"body",true),"jetbrains.mps.baseLanguage.structure.ReturnStatement",false,new String[]{})).all(new IWhereFilter<SNode>(){
      public boolean accept(      SNode rs){
        return (SLinkOperations.getTarget(rs,"expression",true) == null);
      }
    }
))) {
      ClosureLiteralUtil.addAdaptableClosureLiteralTarget(genContext,SNodeOperations.cast(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"),lCType);
    }
 else {
      FunctionTypeUtil.addAdaptableClassifierTypeTarget(genContext,FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(rFType),lCType);
      Values.PREP_DATA.set(genContext,rexpr,INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(lCType,"classifier",false)));
    }
  }
 else   if ((lFType != null) && (rCType != null)) {
    FunctionTypeUtil.addAdaptableClassifierTypeTarget(genContext,rCType,FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(lFType));
    Values.PREP_DATA.set(genContext,rexpr,INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(lFType),"classifier",false)));
  }
 else   if ((lFType != null) && (rFType != null)) {
    final SNode adapterAnn=SLinkOperations.getTarget(new FunctionTypeUtil.QuotationClass_2t0coq_a0a0a0a0j0h().createNode(),"annotation",false);
    final SNode annInst=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(rexpr),"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false),"parameter",true)).getElement(SNodeOperations.getIndexInParent(rexpr)),"jetbrains.mps.baseLanguage.structure.HasAnnotation"),"annotation",true)).findFirst(new IWhereFilter<SNode>(){
      public boolean accept(      SNode ann){
        return SLinkOperations.getTarget(ann,"annotation",false) == adapterAnn;
      }
    }
);
    if (SNodeOperations.isInstanceOf(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral") && (annInst != null)) {
      SNode cls=ListSequence.fromList(SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(rexpr),"jetbrains.mps.baseLanguage.structure.IMethodCall"),"baseMethodDeclaration",false)),genContext.getScope(),"jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode cls){
          return SPropertyOperations.getString(cls,"name").equals(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(annInst,"value",true)).first(),"value",true),"jetbrains.mps.baseLanguage.structure.StringLiteral"),"value"));
        }
      }
);
      SNode ct=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
      SLinkOperations.setTarget(ct,"classifier",cls,false);
      for (      SNode pt : SLinkOperations.getTargets(FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(rFType),"parameter",true)) {
        ListSequence.fromList(SLinkOperations.getTargets(ct,"parameter",true)).addElement(SNodeOperations.copyNode(pt));
      }
      ClosureLiteralUtil.addAdaptableClosureLiteralTarget(genContext,SNodeOperations.cast(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"),ct);
    }
 else     if (SNodeOperations.isInstanceOf(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral") && (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(lFType,"resultType",true),"jetbrains.mps.baseLanguage.structure.VoidType")) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rFType,"resultType",true),"jetbrains.mps.baseLanguage.structure.VoidType") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"),"body",true),"jetbrains.mps.baseLanguage.structure.ReturnStatement",false,new String[]{})).all(new IWhereFilter<SNode>(){
      public boolean accept(      SNode rs){
        return (SLinkOperations.getTarget(rs,"expression",true) == null);
      }
    }
))) {
      ClosureLiteralUtil.addAdaptableClosureLiteralTarget(genContext,SNodeOperations.cast(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"),FunctionType_Behavior.call_getDeclarationRuntimeType_811905832257074290(lFType,rFType));
    }
 else     if (SNodeOperations.isInstanceOf(rexpr,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral") || ListSequence.fromList(SLinkOperations.getTargets(lFType,"throwsType",true)).count() != ListSequence.fromList(SLinkOperations.getTargets(rFType,"throwsType",true)).count()) {
      FunctionTypeUtil.addAdaptableClassifierTypeTarget(genContext,FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(rFType),FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(lFType));
      Values.PREP_DATA.set(genContext,rexpr,INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(lFType),"classifier",false)));
    }
  }
}
