{
  SNode res=null;
  List<SNode> q=ListSequence.<SNode>fromListAndArray(new LinkedList<SNode>(),SNodeOperations.copyNode(maybeBound));
  while (!(ListSequence.<SNode>fromList(q).isEmpty())) {
    SNode n=ListSequence.<SNode>fromList(q).removeElementAt(0);
    if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
      n=SNodeOperations.replaceWithAnother(n,SLinkOperations.getTarget(SNodeOperations.cast(n,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true));
    }
    if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
      n=SNodeOperations.replaceWithAnother(n,SLinkOperations.getTarget(SNodeOperations.cast(n,"jetbrains.mps.baseLanguage.structure.LowerBoundType"),"bound",true));
    }
    if ((n != null)) {
      ListSequence.<SNode>fromList(q).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getChildren(n)));
    }
    if ((res == null)) {
      res=n;
    }
    break;
  }
  return res;
}
