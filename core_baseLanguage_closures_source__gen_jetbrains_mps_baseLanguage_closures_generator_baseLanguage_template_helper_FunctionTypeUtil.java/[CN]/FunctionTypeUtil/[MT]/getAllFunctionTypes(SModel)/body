{
  List<SNode> cls=SModelOperations.getNodes(sourceModel,"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
  List<SNode> typesList=ListSequence.<SNode>fromArray();
  for (  SNode cl : cls) {
    ListSequence.fromList(typesList).addElement(TypeChecker.getInstance().getTypeOf(cl));
  }
  List<SNode> funTypes=SModelOperations.getNodes(sourceModel,"jetbrains.mps.baseLanguage.closures.structure.FunctionType");
  ListSequence.fromList(typesList).addSequence(ListSequence.fromList(funTypes));
  Collections.sort(typesList,new FunctionTypeUtil.FunctionTypeComparator());
  SNode prev=null;
  for (Iterator it=typesList.iterator(); it.hasNext(); ) {
    SNode next=((SNode)it.next());
    if (prev != null) {
      if (Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1213877405047(((SNode)prev)),FunctionType_Behavior.call_getSignature_1213877405047(((SNode)next))) == 0) {
        it.remove();
        continue;
      }
    }
    prev=next;
  }
  return typesList;
}
