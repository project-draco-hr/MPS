{
  List<SNode> allAdaptable=getAllAdaptableClassifierTypes(genContext);
  if (allAdaptable == null) {
    allAdaptable=ListSequence.fromList(new ArrayList<SNode>());
    genContext.putStepObject(Keys.ALL_NEEDS_ADAPTED,allAdaptable);
  }
  if (!(ListSequence.fromList(allAdaptable).contains(adaptable))) {
    ListSequence.fromList(allAdaptable).addElement(adaptable);
  }
  List<SNode> trgList=(List<SNode>)genContext.getStepObject(Keys.NEEDS_ADAPTER.compose(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(adaptable,"classifier",false))));
  if (trgList == null) {
    trgList=ListSequence.fromList(new ArrayList<SNode>());
    genContext.putStepObject(Keys.NEEDS_ADAPTER.compose(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(adaptable,"classifier",false))),trgList);
  }
  boolean hasOneAlready=false;
  for (  SNode ct : trgList) {
    if (INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(target,"classifier",false)).equals(INamedConcept_Behavior.call_getFqName_1213877404258(SLinkOperations.getTarget(ct,"classifier",false)))) {
      hasOneAlready=true;
      break;
    }
  }
  if (!(hasOneAlready)) {
    SNode trg=SNodeOperations.copyNode(target);
    ListSequence.fromList(trgList).addElement(trg);
    Values.ADAPTABLE.set(trg,adaptable);
  }
}
