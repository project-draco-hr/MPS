{
  for (  SNode throwsItem : SLinkOperations.getTargets(argument,"throwsItem",true)) {
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(throwsItem,new QuotationClass_32().createNode(),argument,null);
  }
  if (SLinkOperations.getTarget(argument,"body",true) == null) {
    return;
  }
  if (SConceptPropertyOperations.getBoolean(argument,"abstract")) {
    return;
  }
  TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument,"body",true));
  SNode expectedRetType=SLinkOperations.getTarget(argument,"returnType",true);
  if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(expectedRetType),"jetbrains.mps.baseLanguage.structure.Type") || SNodeOperations.isInstanceOf(expectedRetType,"jetbrains.mps.baseLanguage.structure.VoidType")) {
    expectedRetType=null;
  }
  Iterable<SNode> returnStatements=RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument,"body",true));
  boolean somethingReturned=!(SequenceOperations.isEmpty(returnStatements));
  if (expectedRetType == null) {
{
      ICursor<SNode> _zCursor=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor.moveToNext()) {
          SNode returnStatement=_zCursor.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) != null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"no return value expected");
          }
        }
      }
  finally {
        _zCursor.release();
      }
    }
  }
 else {
{
      ICursor<SNode> _zCursor1=CursorFactory.createCursor(returnStatements);
      try {
        while (_zCursor1.moveToNext()) {
          SNode returnStatement=_zCursor1.getCurrent();
          if ((SLinkOperations.getTarget(returnStatement,"expression",true) == null)) {
            TypeChecker.getInstance().reportTypeError(returnStatement,"should return value");
          }
 else {
            SNode returnType=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(returnStatement,"expression",true));
            if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(returnType,expectedRetType))) {
              TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(returnStatement,"expression",true),"" + expectedRetType + " is expected");
            }
          }
        }
      }
  finally {
        _zCursor1.release();
      }
    }
  }
  if (expectedRetType != null) {
    SNode lastStatement=SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument,"body",true),"statement",true));
    if (SNodeOperations.isInstanceOf(lastStatement,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      SNode returnType=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(lastStatement,"expression",true));
      if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(returnType,expectedRetType))) {
        TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(lastStatement,"expression",true),"" + expectedRetType + " is expected");
      }
      somethingReturned=true;
    }
    if (!(somethingReturned)) {
      TypeChecker.getInstance().reportTypeError(argument,"function should return " + expectedRetType);
    }
  }
}
