{
  checkLoaded();
  Computable<Set<Pair<Intention,SNode>>> computable=new Computable<Set<Pair<Intention,SNode>>>(){
    public Set<Pair<Intention,SNode>> compute(){
      Filter filter=new Filter(query.myIntentionClass,query.myEnabledOnly ? getDisabledIntentions() : null);
      Set<Pair<Intention,SNode>> result=new HashSet<Pair<Intention,SNode>>();
      for (      Intention intention : getAvailableIntentionsForExactNode(node,context,false,filter)) {
        result.add(new Pair<Intention,SNode>(intention,node));
      }
      if (!query.isCurrentNodeOnly()) {
        SNode parent=node.getParent();
        while (parent != null) {
          for (          Intention intention : getAvailableIntentionsForExactNode(parent,context,true,filter)) {
            result.add(new Pair<Intention,SNode>(intention,parent));
          }
          parent=parent.getParent();
        }
      }
      return result;
    }
  }
;
  try {
    TypeChecker.getInstance().enableGlobalSubtypingCache();
    return ModelAccess.instance().runReadAction(computable);
  }
  finally {
    TypeChecker.getInstance().clearGlobalSubtypingCache();
  }
}
