{
  ModelAccess.assertLegalRead();
  final GetHighestAvailableIntentionTypeVisitor visitor=new GetHighestAvailableIntentionTypeVisitor();
  checkLoaded();
  TypeContextManager.getInstance().runTypecheckingAction((ITypeContextOwner)editorContext.getEditorComponent(),new Runnable(){
    @Override public void run(){
      Filter filter=new Filter(BaseIntention.class,getDisabledIntentions()){
        @Override boolean accept(        Intention intention){
          return super.accept(intention) && visitor.hasHigherPriority(intention.getType());
        }
        @Override boolean accept(        IntentionFactory intentionFactory){
          return super.accept(intentionFactory) && visitor.hasHigherPriority(intentionFactory.getType());
        }
      }
;
      for (SNode currentNode=node; currentNode != null; currentNode=currentNode.getParent()) {
        if (!visitIntentions(currentNode,visitor,filter,currentNode != node,editorContext)) {
          break;
        }
      }
    }
  }
);
  return visitor.getIntentionType();
}
