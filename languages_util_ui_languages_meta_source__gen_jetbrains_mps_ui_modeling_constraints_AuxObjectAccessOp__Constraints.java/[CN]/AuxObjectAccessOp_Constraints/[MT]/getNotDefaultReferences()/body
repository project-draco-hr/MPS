{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("template",new BaseReferenceConstraintsDescriptor("template",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode uiof=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectFactory",false,false);
          SNode uiot=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate",false,false);
          SNode uio=((uiof != null) ? SLinkOperations.getTarget(SLinkOperations.getTarget(uiof,"context",true),"uiObject",false) : SLinkOperations.getTarget(uiot,"uiObject",false));
          return SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),uio,"virtual_findTemplate_3939571372331676060",new Object[]{_context.getModel(),operationContext.getScope()}),"jetbrains.mps.ui.modeling.structure.UIObjectTemplate"),"auxillary",true),"auxTemplate",true);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_qf6rfz_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
