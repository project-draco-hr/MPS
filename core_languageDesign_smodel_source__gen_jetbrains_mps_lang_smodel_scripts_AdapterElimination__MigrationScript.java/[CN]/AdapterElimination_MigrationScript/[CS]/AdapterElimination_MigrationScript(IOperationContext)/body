{
  super("findAdapters");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find adapter class usages in variable declarations";
    }
    public String getAdditionalInfo(){
      return "find adapter class usages in variable declarations";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
        return false;
      }
      return ClassConcept_Behavior.call_isDescendant_1213877355812(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(SLinkOperations.getTarget(new AdapterElimination_MigrationScript.QuotationClass_7360_0().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find adapter interface usages in variable declarations";
    }
    public String getAdditionalInfo(){
      return "find adapter interface usages in variable declarations";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface"))) {
        return false;
      }
      return Interface_Behavior.call_isDescendant_1238269307226(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface"),SNodeOperations.cast(SLinkOperations.getTarget(new AdapterElimination_MigrationScript.QuotationClass_7360_1().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface"));
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find java util refrences";
    }
    public String getAdditionalInfo(){
      return "find java util refrences";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.BaseConcept";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      for (      SReference ref : node.getReferences()) {
        String targetModelFQName=ref.getTargetSModelReference().getSModelFqName().toString();
        if (targetModelFQName.endsWith(".structure@java_stub")) {
          return true;
        }
      }
      return false;
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find adapter class usages";
    }
    public String getAdditionalInfo(){
      return "find adapter class usages";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.ClassifierType";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if ((SLinkOperations.getTarget(node,"classifier",false) == null)) {
        return false;
      }
      String className=NameUtil.nodeFQName(SLinkOperations.getTarget(node,"classifier",false));
      String namespace=NameUtil.namespaceFromLongName(className);
      return namespace.endsWith(".structure");
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "find .adapter operations";
    }
    public String getAdditionalInfo(){
      return "find .adapter operations";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.smodel.structure.Node_GetAdapterOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
