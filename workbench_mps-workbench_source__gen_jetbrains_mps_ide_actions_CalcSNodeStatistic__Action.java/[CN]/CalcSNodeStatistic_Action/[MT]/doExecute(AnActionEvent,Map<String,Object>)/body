{
  try {
    final Map<Integer,Integer> propertiesStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    final Map<Integer,Integer> childrenStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    final Map<Integer,Integer> refsStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    final Wrappers._int zeros=new Wrappers._int(0);
    InternalActionsUtils.executeActionOnAllNodesInModal("Calculate statistic",((Project)MapSequence.fromMap(_params).get("project")),new _FunctionTypes._void_P1_E0<SNode>(){
      public void invoke(      SNode node){
        int propertiesCount=SNodeOperations.getProperties(node).keySet().size();
        MapSequence.fromMap(propertiesStatistic).put(propertiesCount,(MapSequence.fromMap(propertiesStatistic).containsKey(propertiesCount) ? MapSequence.fromMap(propertiesStatistic).get(propertiesCount) + 1 : 1));
        int refsCount=node.getReferencesArray().length;
        MapSequence.fromMap(refsStatistic).put(refsCount,(MapSequence.fromMap(refsStatistic).containsKey(refsCount) ? MapSequence.fromMap(refsStatistic).get(refsCount) + 1 : 1));
        int childrenCount=node.getChildCount();
        MapSequence.fromMap(childrenStatistic).put(childrenCount,(MapSequence.fromMap(childrenStatistic).containsKey(childrenCount) ? MapSequence.fromMap(childrenStatistic).get(childrenCount) + 1 : 1));
        if (propertiesCount + refsCount + childrenCount == 0) {
          zeros.value++;
        }
      }
    }
);
    if (log.isWarnEnabled()) {
      log.warn("Property size statistic: " + propertiesStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Refs size statistic: " + refsStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Children size statistic: " + childrenStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Zeros statistic: " + zeros.value);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "CalcSNodeStatistic",t);
    }
  }
}
