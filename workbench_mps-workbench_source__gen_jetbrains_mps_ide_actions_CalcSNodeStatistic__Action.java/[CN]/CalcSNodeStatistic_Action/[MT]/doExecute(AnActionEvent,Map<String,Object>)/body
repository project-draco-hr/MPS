{
  try {
    Iterable<IModule> modules=MPSModuleRepository.getInstance().getAllModules();
    if (log.isWarnEnabled()) {
      log.warn("Modules: " + Sequence.fromIterable(modules).count());
    }
    Iterable<SModelDescriptor> models=Sequence.fromIterable(modules).translate(new ITranslator2<IModule,SModelDescriptor>(){
      public Iterable<SModelDescriptor> translate(      IModule it){
        return it.getOwnModelDescriptors();
      }
    }
);
    if (log.isWarnEnabled()) {
      log.warn("Models: " + Sequence.fromIterable(models).count());
    }
    int num=0;
    Map<Integer,Integer> propertiesStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    Map<Integer,Integer> childrenStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    Map<Integer,Integer> refsStatistic=MapSequence.fromMap(new HashMap<Integer,Integer>());
    int zeros=0;
    for (    SModelDescriptor modelDescriptor : models) {
      UnregisteredNodes.instance().clear();
      if (num++ % 100 == 0) {
        if (log.isWarnEnabled()) {
          log.warn("Model num: " + num + ", name: "+ modelDescriptor.getLongName());
        }
      }
      int nodesCount=0;
      for (      SNode node : modelDescriptor.getSModel().nodes()) {
        nodesCount++;
        int propertiesCount=IterableUtil.asCollection(node.getConcept().getProperties()).size();
        MapSequence.fromMap(propertiesStatistic).put(propertiesCount,(MapSequence.fromMap(propertiesStatistic).containsKey(propertiesCount) ? MapSequence.fromMap(propertiesStatistic).get(propertiesCount) + 1 : 1));
        int refsCount=node.getReferencesArray().length;
        MapSequence.fromMap(refsStatistic).put(refsCount,(MapSequence.fromMap(refsStatistic).containsKey(refsCount) ? MapSequence.fromMap(refsStatistic).get(refsCount) + 1 : 1));
        int childrenCount=IterableUtil.asCollection(node.getChildren()).size();
        MapSequence.fromMap(childrenStatistic).put(childrenCount,(MapSequence.fromMap(childrenStatistic).containsKey(childrenCount) ? MapSequence.fromMap(childrenStatistic).get(childrenCount) + 1 : 1));
        if (propertiesCount + refsCount + childrenCount == 0) {
          zeros++;
        }
      }
    }
    if (log.isWarnEnabled()) {
      log.warn("Property size statistic: " + propertiesStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Refs size statistic: " + refsStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Children size statistic: " + childrenStatistic);
    }
    if (log.isWarnEnabled()) {
      log.warn("Zeros statistic: " + zeros);
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "CalcSNodeStatistic",t);
    }
  }
}
