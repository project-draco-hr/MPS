{
  SNode parent=SNodeOperations.getParent(op,null,false,false);
  if (SNodeOperations.isInstanceOf(parent,"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperationExpression")) {
    SNode leftExpression=SLinkOperations.getTarget(parent,"leftExpression",true);
    SNode leftExpressionType=TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(leftExpression);
    SNode listType=TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.ListType"),true);
    if (listType != null) {
      return listType;
    }
 else {
      TypeChecker.getInstance().reportTypeError(leftExpression,"list is expected but was " + leftExpressionType);
    }
  }
 else {
    TypeChecker.getInstance().reportTypeError(op,"not expected here: is only applicable to list");
  }
  return null;
}
