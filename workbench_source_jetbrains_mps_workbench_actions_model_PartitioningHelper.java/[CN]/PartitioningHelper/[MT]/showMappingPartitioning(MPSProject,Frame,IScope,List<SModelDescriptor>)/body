{
  SModel inputModel=models.get(0).getSModel();
  List<Generator> generators=GenerationPartitioningUtil.getAllPossiblyEngagedGenerators(inputModel,scope);
  GenerationPartitioner partitioner=new GenerationPartitioner();
  List<List<MappingConfiguration>> mappingSets=partitioner.createMappingSets(generators);
  Map<MappingPriorityRule,GeneratorDescriptor> myRule2Generator=new HashMap<MappingPriorityRule,GeneratorDescriptor>();
  for (  Generator generator : generators) {
    GeneratorDescriptor generatorDescriptor=generator.getGeneratorDescriptor();
    for (    MappingPriorityRule rule : generatorDescriptor.getPriorityRules()) {
      myRule2Generator.put(rule,generatorDescriptor);
    }
  }
  MessagesViewTool messagesView=project.getComponent(MessagesViewTool.class);
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  for (  Generator generator : generators) {
    List<MappingPriorityRule> rules=((GeneratorDescriptor)generator.getModuleDescriptor()).getPriorityRules();
    List<Pair<MappingPriorityRule,String>> strings=GenerationPartitioningUtil.toStrings(rules,true);
    for (    Pair<MappingPriorityRule,String> string : strings) {
      Message msg=new Message(MessageKind.INFORMATION," " + string.second);
      msg.setHintObject(generator);
      messagesView.add(msg);
    }
  }
  messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
  if (partitioner.hasConflictingPriorityRules()) {
    messagesView.openToolLater(true);
    messagesView.add(new Message(MessageKind.ERROR,PartitioningHelper.class,"Conflicting mapping priority rules encountered:"));
    List<Pair<MappingPriorityRule,String>> messagesFull=GenerationPartitioningUtil.toStrings(partitioner.getConflictingPriorityRules(),true);
    for (    Pair<MappingPriorityRule,String> message : messagesFull) {
      Message msg=new Message(MessageKind.ERROR,PartitioningHelper.class,message.second);
      GeneratorDescriptor generatorDescriptor=myRule2Generator.get(message.first);
      Generator generatorModule=(Generator)MPSModuleRepository.getInstance().getModuleByUID(generatorDescriptor.getGeneratorUID());
      msg.setHintObject(generatorModule);
      messagesView.add(msg);
    }
    messagesView.add(new Message(MessageKind.INFORMATION,"================================="));
    JOptionPane.showMessageDialog(frame,"Conflicting mapping priority rules encountered","Generation plan error",JOptionPane.WARNING_MESSAGE);
  }
  String text="";
  int count=0;
  for (  List<MappingConfiguration> mappingSet : mappingSets) {
    text=text + " [ " + (count++)+ " ]\n";
    List<String> strings=GenerationPartitioningUtil.toStrings(mappingSet);
    for (    String string : strings) {
      text=text + " " + string+ "\n";
    }
    text+="\n";
  }
  OutputViewTool viewTool=OutputViewTool.getOutputViewTool(project);
  viewTool.clear();
  viewTool.append("---------------------  mappings partitioning  -----------------------------------\n\n");
  viewTool.append(text);
  viewTool.append("---------------------------------------------------------------------------------\n");
  viewTool.openToolLater(true);
}
