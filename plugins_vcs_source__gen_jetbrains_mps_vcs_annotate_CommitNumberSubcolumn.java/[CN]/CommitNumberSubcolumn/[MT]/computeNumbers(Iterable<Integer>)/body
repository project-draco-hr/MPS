{
  myRevisionsToNumbers=MapSequence.<VcsRevisionNumber,Integer>fromMap(new HashMap<VcsRevisionNumber,Integer>());
  final Map<VcsRevisionNumber,VcsFileRevision> revisionNumberToRevision=MapSequence.<VcsRevisionNumber,VcsFileRevision>fromMap(new HashMap<VcsRevisionNumber,VcsFileRevision>());
  for (  VcsFileRevision rev : ListSequence.<VcsFileRevision>fromList(myFileAnnotation.getRevisions())) {
    MapSequence.<VcsRevisionNumber,VcsFileRevision>fromMap(revisionNumberToRevision).put(rev.getRevisionNumber(),rev);
  }
  List<VcsRevisionNumber> revisionNumbers=SetSequence.<VcsRevisionNumber>fromSet(SetSequence.<VcsRevisionNumber>fromSetWithValues(new HashSet<VcsRevisionNumber>(),Sequence.<Integer>fromIterable(fileLines).<VcsRevisionNumber>select(new ISelector<Integer,VcsRevisionNumber>(){
    public VcsRevisionNumber select(    Integer fl){
      return myFileAnnotation.getLineRevisionNumber(fl);
    }
  }
))).sort(new ISelector<VcsRevisionNumber,Comparable<?>>(){
    public Comparable<?> select(    VcsRevisionNumber rn){
      return MapSequence.<VcsRevisionNumber,VcsFileRevision>fromMap(revisionNumberToRevision).get(rn).getRevisionDate();
    }
  }
,true).toListSequence();
  revisionNumbers=ListSequence.<VcsRevisionNumber>fromList(revisionNumbers).sort(new ISelector<VcsRevisionNumber,Comparable<?>>(){
    public Comparable<?> select(    VcsRevisionNumber rn){
      return check_efout7_a0a0a0a0f0b(MapSequence.<VcsRevisionNumber,VcsFileRevision>fromMap(revisionNumberToRevision).get(rn));
    }
  }
,true).toListSequence();
  for (int i=0; i < ListSequence.<VcsRevisionNumber>fromList(revisionNumbers).count(); i++) {
    MapSequence.<VcsRevisionNumber,Integer>fromMap(myRevisionsToNumbers).put(ListSequence.<VcsRevisionNumber>fromList(revisionNumbers).getElement(i),i + 1);
  }
}
