{
  List<SNode> initialPlugins=ListSequence.fromList(new ArrayList<SNode>());
  for (  final SNode module : Sequence.fromIterable(closure.getAllModules())) {
    List<SNode> projectPlugins=SNodeOperations.getNodeDescendants(SNodeOperations.cast(SNodeOperations.getContainingRoot(module),MetaAdapterFactory.getConcept(new UUID(8755280088213897754l,-5075149991798053422l),5617550519002745363l,"jetbrains.mps.build.structure.BuildProject")),MetaAdapterFactory.getConcept(new UUID(934837630734519964l,-6831122735637083229l),6592112598314498932l,"jetbrains.mps.build.mps.structure.BuildMps_IdeaPlugin"),false,new SConcept[]{});
    for (    SNode plugin : ListSequence.fromList(projectPlugins)) {
      if (ListSequence.fromList(SLinkOperations.getChildren(plugin,MetaAdapterFactory.getContainmentLink(new UUID(934837630734519964l,-6831122735637083229l),6592112598314498932l,6592112598314499050l,"content"))).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return BehaviorReflection.invokeVirtual(Boolean.TYPE,it,"virtual_exports_6547494638219603457",new Object[]{module});
        }
      }
) != null) {
        ListSequence.fromList(initialPlugins).addElement(plugin);
        break;
      }
    }
  }
  myDependency.addAll(initialPlugins);
  RequiredPlugins requiredPlugins=new RequiredPlugins(myContext,myInitialProject,initialPlugins);
  for (  SNode plugin : Sequence.fromIterable(requiredPlugins.returnDependencies())) {
    myDependency.add(plugin);
  }
}
