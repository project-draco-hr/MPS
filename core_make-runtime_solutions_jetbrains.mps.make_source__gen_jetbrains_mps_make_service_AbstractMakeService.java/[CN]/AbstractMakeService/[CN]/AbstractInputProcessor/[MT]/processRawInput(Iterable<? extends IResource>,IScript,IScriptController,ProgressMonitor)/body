{
  final Wrappers._T<Iterable<? extends Iterable<? extends IResource>>> clInput=new Wrappers._T<Iterable<? extends Iterable<? extends IResource>>>();
  final Wrappers._T<Iterable<? extends Iterable<String>>> usedLangs=new Wrappers._T<Iterable<? extends Iterable<String>>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final ModulesClusterizer mcr=new ModulesClusterizer();
      clInput.value=mcr.clusterize(Sequence.fromIterable(inputRes).select(new ISelector<IResource,IResource>(){
        public IResource select(        IResource r){
          return r;
        }
      }
));
      usedLangs.value=Sequence.fromIterable(clInput.value).select(new ISelector<Iterable<? extends IResource>,Iterable<String>>(){
        public Iterable<String> select(        Iterable<? extends IResource> it){
          return mcr.allUsedLangNamespaces(it);
        }
      }
).toListSequence();
    }
  }
);
  Iterable<ScriptBuilder> scriptBuilders=Sequence.fromIterable(usedLangs.value).select(new ISelector<Iterable<String>,ScriptBuilder>(){
    public ScriptBuilder select(    Iterable<String> langs){
      final ScriptBuilder scb=new ScriptBuilder();
      Sequence.fromIterable(langs).visitAll(new IVisitor<String>(){
        public void visit(        String ns){
          LanguageRuntime lr=LanguageRegistry.getInstance().getLanguage(ns);
          Iterable<IFacet> fcts=lr.getFacetProvider().getDescriptor(null).getManifest().facets();
          scb.withFacetNames(Sequence.fromIterable(fcts).select(new ISelector<IFacet,IFacet.Name>(){
            public IFacet.Name select(            IFacet fct){
              return fct.getName();
            }
          }
));
          scb.withFacetNames(Sequence.fromIterable(FacetRegistry.getInstance().getFacetsForLanguage(ns)).select(new ISelector<IFacet,IFacet.Name>(){
            public IFacet.Name select(            IFacet fct){
              return fct.getName();
            }
          }
));
        }
      }
);
      return scb.withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make"));
    }
  }
).toListSequence();
  Iterable<IScript> scripts=((defaultScript != null ? Sequence.fromIterable(scriptBuilders).select(new ISelector<ScriptBuilder,IScript>(){
    public IScript select(    ScriptBuilder it){
      return defaultScript;
    }
  }
) : Sequence.fromIterable(scriptBuilders).select(new ISelector<ScriptBuilder,IScript>(){
    public IScript select(    ScriptBuilder scb){
      return toScript(scb);
    }
  }
)));
  return processClusteredInput((Iterable<? extends Iterable<IResource>>)(clInput.value),scripts,controller,monitor);
}
