{
  final Set<SNode> tags=SetSequence.fromSetWithValues(new HashSet<SNode>(),SetSequence.fromSet(stringTags).select(new ISelector<String,SNode>(){
    public SNode select(    String it){
      return SEnumOperations.enumMemberForValue(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c895902a8(jetbrains.mps.lang.actions.structure)","SideTransformTag"),it);
    }
  }
));
  if (SetSequence.fromSet(tags).isEmpty()) {
    SetSequence.fromSet(tags).addElement(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c895902a8(jetbrains.mps.lang.actions.structure)","SideTransformTag"),"default_"));
  }
  Iterable<SNode> result=Sequence.fromIterable(Collections.<SNode>emptyList());
  for (  Language language : ListSequence.fromList(SModelOperations.getLanguages(SNodeOperations.getModel(node),context.getScope()))) {
    EditableSModel actionsModelDescriptor=LanguageAspect.ACTIONS.get(language);
    if (actionsModelDescriptor == null) {
      continue;
    }
    SModel model=((SModelInternal)actionsModelDescriptor);
    if (model == null) {
      continue;
    }
    result=Sequence.fromIterable(result).concat(ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getRoots(model,"jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions")).translate(new ITranslator2<SNode,SNode>(){
      public Iterable<SNode> translate(      SNode it){
        return SLinkOperations.getTargets(it,"actionsBuilder",true);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return isApplicable(node,tags,cellSide,it,context);
      }
    }
));
  }
  return result;
}
