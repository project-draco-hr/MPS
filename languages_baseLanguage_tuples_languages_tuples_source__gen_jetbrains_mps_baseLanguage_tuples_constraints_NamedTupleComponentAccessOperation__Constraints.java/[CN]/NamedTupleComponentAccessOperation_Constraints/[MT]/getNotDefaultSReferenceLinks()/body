{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-6753182146401843782l,-5129028327240390294l),1239576519914l,1239576542472l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-6753182146401843782l,-5129028327240390294l),1239576519914l,1239576542472l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode ntt=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"))),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleType"),false);
          return ListSequence.fromList(NamedTupleDeclaration_Behavior.call_allExtends_3142843783245461132(SLinkOperations.getTarget(ntt,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier")))).reversedList().translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode ntd){
              return SLinkOperations.getChildren(ntd,MetaAdapterFactory.getContainmentLink(new UUID(-6753182146401843782l,-5129028327240390294l),1239360506533l,1239529553065l,"component"));
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_snq09y_a0a1a0a0a1a0b0a1a4;
        }
      }
;
    }
  }
);
  return references;
}
