{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildVariableReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.buildScript.structure.BuildVariableReference",null);
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return StringUtils.isEmpty(pattern) || REGEXP_x583g4_a0a0a0c0a0a0a0c0a0b0g.matcher(pattern).matches();
        }
      }
);
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildSimpleName");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode buildText=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.buildScript.structure.BuildSimpleName",null);
          SPropertyOperations.set(buildText,"text",pattern);
          return buildText;
        }
        public boolean hasSubstitute(){
          return true;
        }
        public boolean canSubstitute_internal(        String pattern,        boolean strictly){
          return StringUtils.isEmpty(pattern) || (REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a2a6.matcher(pattern).matches());
        }
        public String getMatchingText(        String pattern){
          if (StringUtils.isEmpty(pattern)) {
            return "text";
          }
{
            Pattern _pattern_0=REGEXP_x583g4_a0a0b0d0a0a0a0c0a0c0g;
            Matcher _matcher_0=_pattern_0.matcher(pattern);
            if (_matcher_0.find()) {
              return pattern;
            }
          }
          return null;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
