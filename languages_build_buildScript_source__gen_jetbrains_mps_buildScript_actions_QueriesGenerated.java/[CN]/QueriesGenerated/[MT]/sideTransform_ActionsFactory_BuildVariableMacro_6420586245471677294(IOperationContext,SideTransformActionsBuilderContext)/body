{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildVariableMacro");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode namePart=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.buildScript.structure.BuildNamePart",null);
        ListSequence.fromList(SLinkOperations.getTargets(_context.getSourceNode(),"value",true)).addElement(namePart);
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "=";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "value";
      }
    }
);
  }
  return result;
}
