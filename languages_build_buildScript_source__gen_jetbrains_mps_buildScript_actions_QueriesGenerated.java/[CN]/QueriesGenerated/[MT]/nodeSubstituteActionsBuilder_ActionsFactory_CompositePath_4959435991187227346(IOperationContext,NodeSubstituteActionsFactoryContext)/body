{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.CompositePath");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return CompositePath_Behavior.call_getHeadSuggestions_4959435991187212109(_context.getCurrentTargetNode(),Context.defaultContext(_context.getCurrentTargetNode()));
        }
      }
;
      Iterable<String> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SPropertyOperations.set(_context.getCurrentTargetNode(),"head",(item));
              return null;
            }
          }
);
        }
      }
    }
  }
  return result;
}
