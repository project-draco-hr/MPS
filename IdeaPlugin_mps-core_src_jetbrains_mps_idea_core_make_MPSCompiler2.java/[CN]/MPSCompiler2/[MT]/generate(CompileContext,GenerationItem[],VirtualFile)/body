{
  final Map<Module,List<VirtualFile>> moduleToFiles=new HashMap<Module,List<VirtualFile>>();
  for (  GenerationItem gi : items) {
    List<VirtualFile> files=moduleToFiles.get(gi.getModule());
    if (files == null)     moduleToFiles.put(gi.getModule(),files=new ArrayList<VirtualFile>());
    if (gi instanceof MyGenerationItem) {
      files.add(((MyGenerationItem)gi).getModelFile());
    }
  }
  context.getProgressIndicator().setText(MPSBundle.message("generating.models"));
  final Map<MPSFacet,List<SModelDescriptor>> facetToModels=new java.util.HashMap<MPSFacet,List<SModelDescriptor>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      for (      Map.Entry<Module,List<VirtualFile>> e : moduleToFiles.entrySet()) {
        MPSFacet facet=FacetManager.getInstance(e.getKey()).getFacetByType(MPSFacetType.ID);
        if (facet == null) {
          continue;
        }
        List<SModelDescriptor> models=new ArrayList<SModelDescriptor>();
        for (        VirtualFile file : e.getValue()) {
          final IFile modelFile=FileSystem.getInstance().getFileByPath(file.getPath());
          SModelDescriptor descr=SModelRepository.getInstance().findModel(modelFile);
          if (descr == null || !GenerationFacade.canGenerate(descr))           return;
          models.add(descr);
        }
        if (models.size() > 0) {
          facetToModels.put(facet,models);
        }
      }
    }
  }
);
  if (facetToModels.isEmpty()) {
    return new MyGenerationItem[0];
  }
  final List<File> generatedModelFiles=new ArrayList<File>();
  final List<File> filesToRefresh=new ArrayList<File>();
  executeMPSMake(context,facetToModels,new File(outputRootDirectory.getPath()),generatedModelFiles,filesToRefresh);
  return items;
}
