{
  MPSMakeConfiguration makeConfiguration=new MPSMakeConfiguration();
  makeConfiguration.addProperty("OUTPUT_ROOT_DIR",outputRootDir.getAbsolutePath());
  makeConfiguration.addProperty("CACHES_OUTPUT_ROOT_DIR",cachesOutputRootDir.getAbsolutePath());
  for (  Map.Entry<MPSFacet,List<SModelDescriptor>> chunk : facetToModels.entrySet()) {
    MPSFacet facet=chunk.getKey();
    String outputFolder=facet.getSolution().getGeneratorOutputPath();
    context.addMessage(CompilerMessageCategory.INFORMATION,"Generating into " + outputFolder,null,0,0);
    final Set<File> modelsToMake=new HashSet<File>();
    for (    final SModelDescriptor model : chunk.getValue()) {
      modelsToMake.add(new File(((EditableSModelDescriptor)model).getModelFile().getPath()));
    }
    generatedModelFiles.addAll(modelsToMake);
    makeConfiguration.addConfiguredModels(modelsToMake);
    makeConfiguration.addConfiguredModules(Collections.singletonList(new File(facet.getModule().getModuleFilePath())));
  }
  final List<File> writtenFiles=new ArrayList<File>();
  MPSMakeLauncher gl=new MPSMakeLauncher(makeConfiguration,myProject);
  gl.validate();
  if (gl.isValid()) {
    gl.launch(new MPSMakeCallback(){
      @Override public void fileWritten(      String path){
        writtenFiles.add(new File(path));
      }
    }
);
  }
 else {
    context.addMessage(CompilerMessageCategory.ERROR,"Invalid MPS make configuration, unable to make models",null,0,0);
  }
  for (  File file : writtenFiles) {
    filesToRefresh.add(file);
  }
}
