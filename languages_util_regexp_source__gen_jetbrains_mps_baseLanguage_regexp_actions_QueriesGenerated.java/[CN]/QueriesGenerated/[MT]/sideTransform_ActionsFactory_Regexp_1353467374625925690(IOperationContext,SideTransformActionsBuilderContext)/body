{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp",null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),node);
      SLinkOperations.setTarget(node,"regexp",_context.getSourceNode(),true);
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0d0a0a0a0a0b0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          SPropertyOperations.set(node,"n","" + (Integer.parseInt(_matcher_0.group(1))));
        }
      }
      return node;
    }
    public String getMatchingText(    String pattern){
      if (!(REGEXP_x583g4_a0a0a0b0a0a0a0b0m.matcher(pattern).matches())) {
        return "{n}";
      }
      String s=pattern;
      if (!(s.endsWith("}"))) {
        s+="}";
      }
      return s;
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp",null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),node);
      SLinkOperations.setTarget(node,"regexp",_context.getSourceNode(),true);
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0d0a0a0a0a0c0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          SPropertyOperations.set(node,"n","" + (Integer.parseInt(_matcher_0.group(1))));
        }
      }
      return node;
    }
    public String getMatchingText(    String pattern){
      if (!(REGEXP_x583g4_a0a0a0b0a0a0a0c0m.matcher(pattern).matches())) {
        return "{n,}";
      }
      String s=pattern;
      if (!(s.endsWith(",}"))) {
        s+=(s.endsWith(",") ? "}" : ",}");
      }
      return s;
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp",null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),node);
      SLinkOperations.setTarget(node,"regexp",_context.getSourceNode(),true);
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0d0a0a0a0a0d0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          SPropertyOperations.set(node,"m","" + (Integer.parseInt(_matcher_0.group(1))));
        }
      }
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0e0a0a0a0a0d0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          SPropertyOperations.set(node,"n","" + (Integer.parseInt(_matcher_0.group(1))));
        }
      }
      return node;
    }
    public String getMatchingText(    String pattern){
      if (!(REGEXP_x583g4_a0a0a0b0a0a0a0d0m.matcher(pattern).matches())) {
        return "{n,m}";
      }
      String left="n";
      String right="m";
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0d0b0a0a0a0d0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          right=_matcher_0.group(1);
        }
      }
{
        Pattern _pattern_0=REGEXP_x583g4_a0a0e0b0a0a0a0d0m;
        Matcher _matcher_0=_pattern_0.matcher(pattern);
        if (_matcher_0.find()) {
          left=_matcher_0.group(1);
        }
      }
      return "{" + left + ","+ right+ "}";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return ListSequence.fromListAndArray(new ArrayList<SNode>(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode newRegexp=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),newRegexp);
            SLinkOperations.setTarget(newRegexp,"regexp",_context.getSourceNode(),true);
            return newRegexp;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"conceptAlias");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
        }
);
      }
    }
  }
  return result;
}
