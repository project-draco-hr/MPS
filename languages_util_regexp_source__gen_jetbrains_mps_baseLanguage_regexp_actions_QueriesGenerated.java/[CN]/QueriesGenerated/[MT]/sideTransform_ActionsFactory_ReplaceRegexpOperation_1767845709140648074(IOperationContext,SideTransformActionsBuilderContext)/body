{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SPropertyOperations.set(_context.getSourceNode(),"globalReplace","" + (true));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "g";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "global replace";
    }
  }
);
  return result;
}
