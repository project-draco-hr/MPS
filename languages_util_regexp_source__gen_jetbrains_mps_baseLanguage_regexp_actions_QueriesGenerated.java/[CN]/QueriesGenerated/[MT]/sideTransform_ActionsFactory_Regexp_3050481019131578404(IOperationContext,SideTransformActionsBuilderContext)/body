{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        Scope refScope=ModelConstraints.getSmartReferenceDescriptor(_context.getSourceNode(),null,0,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp")).getScope();
        return (List<SNode>)refScope.getAvailableElements(null);
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp",null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174909099093l,1174909113141l,"match"),(item));
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485176897l,"left"),_context.getSourceNode());
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485181039l,"right"),ref);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return "\\(" + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + ")";
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "";
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode res=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),res);
            SLinkOperations.setTarget(res,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485176897l,"left"),_context.getSourceNode());
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp",null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174555732504l,1174555843709l,"symbolClass"),(item));
            SLinkOperations.setTarget(res,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485181039l,"right"),ref);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-2688747624584492277l,-5722269945249396544l),1174554386384l,1174554540628l,"description"));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485176897l,"left"),_context.getSourceNode());
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp",null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174662605354l,1174662628918l,"regexp"),(item));
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485181039l,"right"),ref);
            return SLinkOperations.getTarget(seq,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485181039l,"right"));
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(new UUID(-2688747624584492277l,-5722269945249396544l),1174483125581l,1174662978120l,"description"));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
  return result;
}
