{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        Scope refScope=ModelConstraints.getSmartReferenceDescriptor(_context.getSourceNode(),null,0,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp")).getScope();
        return (List<SNode>)refScope.getAvailableElements(null);
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174bc30e7L,"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp")),null);
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp")),null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,0x1118e0a5335L,"match"),(item));
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c59241L,"left"),_context.getSourceNode());
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c5a26fL,"right"),ref);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return "\\(" + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + ")";
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "";
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.nodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178e59fd0L,"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode res=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174bc30e7L,"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp")),null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),res);
            SLinkOperations.setTarget(res,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c59241L,"left"),_context.getSourceNode());
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178fa2a18L,"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp")),null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178fa2a18L,0x11178fbdc7dL,"symbolClass"),(item));
            SLinkOperations.setTarget(res,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c5a26fL,"right"),ref);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178e59fd0L,0x11178e7fa54L,"description"));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.nodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a6454dL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174bc30e7L,"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp")),null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c59241L,"left"),_context.getSourceNode());
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp")),null);
            SLinkOperations.setTarget(ref,MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,0x1117f594636L,"regexp"),(item));
            SLinkOperations.setTarget(seq,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c5a26fL,"right"),ref);
            return SLinkOperations.getTarget(seq,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c5a26fL,"right"));
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a6454dL,0x1117f5e9a48L,"description"));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
  return result;
}
