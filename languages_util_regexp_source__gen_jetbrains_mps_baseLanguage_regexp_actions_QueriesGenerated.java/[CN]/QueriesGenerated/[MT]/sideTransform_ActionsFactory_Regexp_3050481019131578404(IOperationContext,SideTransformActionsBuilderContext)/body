{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        Scope refScope=ModelConstraints.getSmartReferenceDescriptor(_context.getSourceNode(),null,0,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp")).getScope();
        return (List<SNode>)refScope.getAvailableElements(null);
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp",null);
            SLinkOperations.setTarget(ref,"match",(item),false);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,"left",_context.getSourceNode(),true);
            SLinkOperations.setTarget(seq,"right",ref,true);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return "\\(" + SPropertyOperations.getString((item),"name") + ")";
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "";
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode res=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),res);
            SLinkOperations.setTarget(res,"left",_context.getSourceNode(),true);
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp",null);
            SLinkOperations.setTarget(ref,"symbolClass",(item),false);
            SLinkOperations.setTarget(res,"right",ref,true);
            return ref;
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),"description");
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),null));
          }
        }
);
      }
    }
  }
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(_context.getSourceNode()),"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration");
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode seq=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),seq);
            SLinkOperations.setTarget(seq,"left",_context.getSourceNode(),true);
            SNode ref=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp",null);
            SLinkOperations.setTarget(ref,"regexp",(item),false);
            SLinkOperations.setTarget(seq,"right",ref,true);
            return SLinkOperations.getTarget(seq,"right",true);
          }
          public String getMatchingText(          String pattern){
            return SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return SPropertyOperations.getString((item),"description");
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),null));
          }
        }
);
      }
    }
  }
  return result;
}
