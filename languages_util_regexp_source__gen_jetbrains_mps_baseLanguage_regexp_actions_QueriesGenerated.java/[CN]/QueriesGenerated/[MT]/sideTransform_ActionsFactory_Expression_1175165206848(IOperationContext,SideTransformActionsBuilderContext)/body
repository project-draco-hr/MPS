{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode findMatchExpression=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(-2688747624584492277l,-5722269945249396544l),6129327962763158517l,"jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"));
      SLinkOperations.setTarget(findMatchExpression,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),6129327962763158517l,6129327962763255289l,"inputExpression"),_context.getSourceNode());
      return findMatchExpression;
    }
    public String getMatchingText(    String pattern){
      return "=~";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode matchRegexpExpression=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(-2688747624584492277l,-5722269945249396544l),1179357154354l,"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"));
      SLinkOperations.setTarget(matchRegexpExpression,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1179357154354l,1179357286898l,"inputExpression"),_context.getSourceNode());
      return matchRegexpExpression;
    }
    public String getMatchingText(    String pattern){
      return "matches";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(-2688747624584492277l,-5722269945249396544l),1174655989549l,"jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression"));
      SLinkOperations.setTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174655989549l,1174656103019l,"expr"),_context.getSourceNode());
      return node;
    }
    public String getMatchingText(    String pattern){
      return "replace with regexp";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode node=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(-2688747624584492277l,-5722269945249396544l),1175164405556l,"jetbrains.mps.baseLanguage.regexp.structure.SplitExpression"));
      SLinkOperations.setTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1175164405556l,1175164443297l,"expr"),_context.getSourceNode());
      return node;
    }
    public String getMatchingText(    String pattern){
      return "split with";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression"),null));
    }
  }
);
  return result;
}
