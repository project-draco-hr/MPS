{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<SubstituteAction> list=ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(),null,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp").getDeclarationNode(),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      @Nullable EditorContext editorContext){
        return substitute(newChild,lastPattern[0],editorContext);
      }
      private SNode substitute(      SNode result,      String pattern,      @Nullable EditorContext editorContext){
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,0x11174c59241L,"left"),_context.getSourceNode());
        return result;
      }
    }
,operationContext);
    for (    final SubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode pr=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp")));
      SLinkOperations.setTarget(pr,MetaAdapterFactory.getContainmentLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,0x1117521177bL,"expr"),_context.getSourceNode());
      return pr;
    }
    public String getMatchingText(    String pattern){
      return ")";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x111752101b0L,"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp").getDeclarationNode(),null));
    }
  }
);
  return result;
}
