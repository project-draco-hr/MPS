{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<SubstituteAction> list=ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      @Nullable EditorContext editorContext){
        return substitute(newChild,lastPattern[0],editorContext);
      }
      private SNode substitute(      SNode result,      String pattern,      @Nullable EditorContext editorContext){
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174485167097l,1174485176897l,"left"),_context.getSourceNode());
        return result;
      }
    }
,operationContext);
    for (    final SubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode pr=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp");
      SLinkOperations.setTarget(pr,MetaAdapterFactory.getContainmentLink(new UUID(-2688747624584492277l,-5722269945249396544l),1174491169200l,1174491174779l,"expr"),_context.getSourceNode());
      return pr;
    }
    public String getMatchingText(    String pattern){
      return ")";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp"),null));
    }
  }
);
  return result;
}
