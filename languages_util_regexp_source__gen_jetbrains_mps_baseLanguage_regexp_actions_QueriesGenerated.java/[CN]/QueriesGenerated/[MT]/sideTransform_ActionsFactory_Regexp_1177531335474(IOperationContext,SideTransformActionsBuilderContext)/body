{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        final List<SNode> excludeList=ListSequence.fromListAndArray(new ArrayList<SNode>(),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"));
        List<SNode> regexps=SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.Regexp"),_context.getModel(),operationContext.getScope());
        return ListSequence.fromList(regexps).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            for (            SNode exclude : ListSequence.fromList(excludeList)) {
              if (SConceptOperations.isSubConceptOf(it,NameUtil.nodeFQName(exclude))) {
                return false;
              }
            }
            return true;
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.Regexp"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode newRegexp=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)),null);
            SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp",null);
            SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
            SLinkOperations.setTarget(result,"left",_context.getSourceNode(),true);
            SLinkOperations.setTarget(result,"right",newRegexp,true);
            return newRegexp;
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.Regexp"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.Regexp"),null));
          }
        }
);
      }
    }
  }
  return result;
}
