{
  GenerationRootDependencies commonDeps=dependencies.getDependenciesFor(ModelDigestUtil.HEADER);
  if (commonDeps == null) {
    return;
  }
{
    String oldHash=commonDeps.getHash();
    String newHash=myGenerationHashes.get(ModelDigestUtil.HEADER);
    if (oldHash == null || newHash == null || !newHash.equals(oldHash)) {
      return;
    }
  }
  List<SNode> rootsList=myModel.getSModel().getRoots();
  Map<String,SNode> rootById=new HashMap<String,SNode>();
  myUnchangedRoots=new HashSet<SNode>();
  for (  SNode root : rootsList) {
    String id=root.getId();
    GenerationRootDependencies rd=dependencies.getDependenciesFor(id);
    String oldHash;
    if (rd == null || (oldHash=rd.getHash()) == null) {
      continue;
    }
    String newHash=myGenerationHashes.get(id);
    if (newHash == null || !newHash.equals(oldHash)) {
      continue;
    }
    myUnchangedRoots.add(root);
  }
  if (myUnchangedRoots.isEmpty()) {
    return;
  }
  for (  SNode root : rootsList) {
    rootById.put(root.getId(),root);
  }
  myConditionalsUnchanged=true;
  Map<String,Set<String>> savedDep=getDependenciesWithoutOrientation(dependencies,myUnchangedRoots);
  closureUsingSavedDependencies(savedDep);
  if (myUnchangedRoots.isEmpty()) {
    return;
  }
  ConnectedComponentPartitioner partitioner=new ConnectedComponentPartitioner(rootsList);
  List<SNode[]> components=partitioner.partition();
  boolean changed=closureUsingReferences(components,savedDep);
  while (changed) {
    if (myUnchangedRoots.isEmpty() && myConditionalsUnchanged == false) {
      return;
    }
    changed=closureUsingSavedDependencies(savedDep);
    if (changed) {
      changed=closureUsingReferences(components,savedDep);
    }
  }
}
