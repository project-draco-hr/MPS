{
  SNode conceptDeclaration=SNodeOperations.as(((SNode)MapSequence.fromMap(_params).get("selectedNode")),"jetbrains.mps.lang.structure.structure.ConceptDeclaration");
  if (conceptDeclaration == null || SConceptPropertyOperations.getBoolean(conceptDeclaration,"abstract") || SPropertyOperations.getString(conceptDeclaration,"name") == null) {
    return false;
  }
  Queue<SNode> toCheck=QueueSequence.fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(toCheck).addLastElement(conceptDeclaration);
  while (QueueSequence.fromQueue(toCheck).isNotEmpty()) {
    SNode acd=QueueSequence.fromQueue(toCheck).removeFirstElement();
    List<SNode> aspects=((List<SNode>)BehaviorManager.getInstance().invoke(Object.class,acd,"call_findConceptAspectCollection_1567570417158062208",new Class[]{SNode.class,LanguageAspect.class},LanguageAspect.EDITOR));
    if (!(SConceptOperations.isExactly(acd,"jetbrains.mps.lang.core.structure.BaseConcept")) && ListSequence.fromList(aspects).any(new IWhereFilter<SNode>(){
      public boolean accept(      SNode a){
        return SNodeOperations.isInstanceOf(a,"jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration");
      }
    }
)) {
      return false;
    }
    QueueSequence.fromQueue(toCheck).addSequence(ListSequence.fromList(((List<SNode>)BehaviorManager.getInstance().invoke(Object.class,acd,"virtual_getImmediateSuperconcepts_1222430305282",new Class[]{SNode.class}))));
  }
  return true;
}
