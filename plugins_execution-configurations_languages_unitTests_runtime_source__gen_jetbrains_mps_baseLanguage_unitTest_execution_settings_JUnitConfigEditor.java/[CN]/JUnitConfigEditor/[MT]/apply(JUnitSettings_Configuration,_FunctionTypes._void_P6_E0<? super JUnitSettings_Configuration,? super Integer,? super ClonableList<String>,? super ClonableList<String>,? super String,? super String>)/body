{
  final List<ITestNodeWrapper> editorMethodList=myThis.getMethods();
  final List<ITestNodeWrapper> editorTestCasesList=myThis.getNodes();
  final SModel editorModel=myThis.getModel();
  final SModule editorModule=myThis.getModule();
  final int configTypeIndex=Sequence.fromIterable(Sequence.fromArray(myThis.getButtons())).indexOf(Sequence.fromIterable(Sequence.fromArray(myThis.getButtons())).findFirst(new IWhereFilter<JRadioButton>(){
    public boolean accept(    JRadioButton it){
      return it.isSelected();
    }
  }
));
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      final ClonableList<String> testMethods=new ClonableList<String>();
      final ClonableList<String> testCases=new ClonableList<String>();
      final Wrappers._T<String> model=new Wrappers._T<String>();
      final Wrappers._T<String> module=new Wrappers._T<String>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          for (          ITestNodeWrapper testMethod : editorMethodList) {
            testMethods.add(TestUtils.pointerToString(testMethod.getNodePointer()));
          }
          for (          ITestNodeWrapper testCase : editorTestCasesList) {
            testCases.add(TestUtils.pointerToString(testCase.getNodePointer()));
          }
          if (editorModel != null) {
            model.value=editorModel.getModelName();
          }
          if (editorModule != null) {
            module.value=editorModule.getModuleName();
          }
        }
      }
);
      final String modelFinal=model.value;
      final String moduleFinal=module.value;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          applyInternal.invoke(configuration,configTypeIndex,testMethods,testCases,modelFinal,moduleFinal);
        }
      }
);
    }
  }
);
}
