{
  SourceTypeBinding binding=typeDeclaration.binding;
  SNode classifier=SNodeOperations.cast(myReferentsCreator.myBindingMap.get(binding),"jetbrains.mps.baseLanguage.structure.Classifier");
  try {
    boolean isTopLevel=true;
    if (binding instanceof LocalTypeBinding) {
      isTopLevel=false;
      if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.EnumClass")) {
        return true;
      }
      SNode anonymousClass=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass");
      SPropertyOperations.set(anonymousClass,"name","");
      ReferenceBinding superClassBinding;
      if (binding.superInterfaces != null && !((binding.superInterfaces.length == 0))) {
        superClassBinding=binding.superInterfaces[0];
      }
 else {
        superClassBinding=binding.superclass;
      }
      if (superClassBinding != null) {
        SNode superClass=SNodeOperations.cast(createType(superClassBinding),"jetbrains.mps.baseLanguage.structure.ClassifierType");
        SLinkOperations.setTarget(anonymousClass,"classifier",SLinkOperations.getTarget(superClass,"classifier",false),false);
        for (        SNode t : SLinkOperations.getTargets(superClass,"parameter",true)) {
          ListSequence.fromList(SLinkOperations.getTargets(anonymousClass,"typeParameter",true)).addElement(SNodeOperations.copyNode(t));
        }
      }
    }
 else {
      ReferenceBinding superClassBinding=binding.superclass();
      if (superClassBinding != null) {
        assert(binding.superclass().isClass() || binding.superclass().isEnum());
        if ("java.lang.Object".equals(new String(superClassBinding.readableName()))) {
        }
 else         if (binding.isEnum()) {
        }
 else {
          if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
            SNode classConcept=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
            SNode superClass=SNodeOperations.cast(createType(superClassBinding),"jetbrains.mps.baseLanguage.structure.ClassifierType");
            SLinkOperations.setTarget(classConcept,"superclass",superClass,true);
          }
        }
      }
      ReferenceBinding[] superInterfaces=binding.superInterfaces();
      for (      ReferenceBinding superInterfaceBinding : superInterfaces) {
        assert(superInterfaceBinding.isInterface());
        SNode superInterface=SNodeOperations.cast(createType(superInterfaceBinding),"jetbrains.mps.baseLanguage.structure.ClassifierType");
        if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          SNode classConcept=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
          ListSequence.fromList(SLinkOperations.getTargets(classConcept,"implementedInterface",true)).addElement(superInterface);
        }
        if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
          SNode intfc=SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.Interface");
          ListSequence.fromList(SLinkOperations.getTargets(intfc,"extendedInterface",true)).addElement(superInterface);
        }
      }
      if (binding instanceof MemberTypeBinding) {
        isTopLevel=false;
        MemberTypeBinding memberTypeBinding=(MemberTypeBinding)binding;
        SourceTypeBinding enclosingClass=memberTypeBinding.enclosingType;
        SNode enclosingClassifier=SNodeOperations.cast(myReferentsCreator.myBindingMap.get(enclosingClass),"jetbrains.mps.baseLanguage.structure.Classifier");
        SPropertyOperations.set(classifier,"nonStatic","" + !(memberTypeBinding.isStatic()));
        ListSequence.fromList(SLinkOperations.getTargets(enclosingClassifier,"staticInnerClassifiers",true)).addElement(classifier);
      }
    }
    TypeParameter[] typeParameters=typeDeclaration.typeParameters;
    if (typeParameters != null) {
      SNode[] tvds=SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true).toArray(new SNode[typeParameters.length]);
      for (int i=0; i < typeParameters.length; i++) {
        TypeParameter typeParameter=typeParameters[i];
        SNode typeVar=tvds[i];
        setTypeVariableBounds(typeParameter,typeVar);
      }
    }
    myReferentsCreator.myTypeDecls.add(typeDeclaration);
    if (isTopLevel) {
      myReferentsCreator.myTopLevelTypeDecls.add(typeDeclaration);
    }
    return true;
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
}
