{
  try {
    MethodBinding b=ctorDecl.binding;
    SModel model=myReferentsCreator.myCurrentModel;
    SNode enclosingType=SNodeOperations.cast(myReferentsCreator.myBindingMap.get(scope.enclosingSourceType()),"jetbrains.mps.baseLanguage.structure.Classifier");
    assert(SNodeOperations.isInstanceOf(enclosingType,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    SNode classConcept=SNodeOperations.cast(enclosingType,"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SNode constructorDeclaration=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration",null);
    SNode visibility=getMethodVisibility(b);
    SLinkOperations.setTarget(constructorDeclaration,"visibility",visibility,true);
    SLinkOperations.setTarget(constructorDeclaration,"returnType",SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.VoidType",null),true);
    myReferentsCreator.myBindingMap.put(b,constructorDeclaration);
    processMethodTypeParameters(ctorDecl,constructorDeclaration);
    mapParameters(constructorDeclaration,ctorDecl);
    if (!(SNodeOperations.isInstanceOf(classConcept,"jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      ListSequence.fromList(SLinkOperations.getTargets(classConcept,"constructor",true)).addElement(constructorDeclaration);
    }
    return true;
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
}
