{
  char[][] name=typeDeclaration.binding.compoundName;
  SourceTypeBinding binding=typeDeclaration.binding;
  SModel model=myReferentsCreator.myCurrentModel;
  SNode classifier;
  SNode visibility=getClassVisibility(binding);
  if (binding.isClass()) {
    if (binding.isLocalType()) {
      classifier=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.AnonymousClass",null);
    }
 else {
      SNode classConcept=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.ClassConcept",null);
      SPropertyOperations.set(classConcept,"abstractClass","" + binding.isAbstract());
      SPropertyOperations.set(classConcept,"isFinal","" + binding.isFinal());
      classifier=classConcept;
    }
  }
 else   if (binding.isInterface() && !(binding.isAnnotationType())) {
    classifier=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.Interface",null);
  }
 else   if (binding.isAnnotationType()) {
    classifier=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.Annotation",null);
  }
 else   if (binding.isEnum()) {
    classifier=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.EnumClass",null);
  }
 else {
    return false;
  }
  if (!(binding.isLocalType())) {
    String shortName=new String(name[name.length - 1]);
    int dollarIndex=-1;
    do {
      dollarIndex=shortName.indexOf('$');
      if (dollarIndex != -1) {
        shortName=shortName.substring(dollarIndex + 1);
      }
    }
 while (dollarIndex != -1);
    SPropertyOperations.set(classifier,"name",shortName);
  }
  SLinkOperations.setTarget(classifier,"visibility",visibility,true);
  myReferentsCreator.myBindingMap.put(binding,classifier);
  TypeParameter[] typeParameters=typeDeclaration.typeParameters;
  if (typeParameters != null) {
    for (    TypeParameter typeParameter : typeParameters) {
      SNode typeVariableDeclaration=SModelOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration",null);
      SPropertyOperations.set(typeVariableDeclaration,"name",new String(typeParameter.name));
      ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).addElement(typeVariableDeclaration);
    }
  }
  return true;
}
