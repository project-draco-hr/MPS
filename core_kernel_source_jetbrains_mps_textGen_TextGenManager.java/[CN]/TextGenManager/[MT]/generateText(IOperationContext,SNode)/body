{
  myPositions=new HashMap<SNode,PositionInfo>();
  myScopePositions=new HashMap<SNode,ScopePositionInfo>();
  myUnitPositions=new HashMap<SNode,UnitPositionInfo>();
  myClassesCache=new HashMap<String,Class<SNodeTextGen>>();
  TextGenBuffer buffer=new TextGenBuffer();
  buffer.putUserObject(PACKAGE_NAME,node.getModel().getLongName());
  appendNodeText(context,buffer,node,null);
  myClassesCache=null;
  int topLength=buffer.getTopBufferText().split(buffer.getLineSeparator(),-1).length + 2;
  for (  PositionInfo position : myPositions.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  for (  PositionInfo position : myScopePositions.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  for (  PositionInfo position : myUnitPositions.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  List<String> dependencies=getUserObjectCollection(DEPENDENCY,node,buffer,(Set<String>)buffer.getUserObject(EXTENDS));
  List<String> extend=getUserObjectCollection(EXTENDS,node,buffer,null);
  return new TextGenerationResult(buffer.getText(),buffer.hasErrors(),myPositions,myScopePositions,myUnitPositions,dependencies,extend);
}
