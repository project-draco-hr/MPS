{
  myClassesCache=new HashMap<String,Class<SNodeTextGen>>();
  TextGenBuffer buffer=new TextGenBuffer();
  buffer.putUserObject(PACKAGE_NAME,node.getModel().getLongName());
  appendNodeText(context,buffer,node,null);
  myClassesCache=null;
  String topBufferText=buffer.getTopBufferText();
  int topLength=topBufferText.isEmpty() ? 1 : topBufferText.split(buffer.getLineSeparator(),-1).length + 2;
  Map<SNode,TraceablePositionInfo> positionInfo=TraceInfoGenerationUtil.getUserObjects(buffer,TraceInfoGenerationUtil.POSITION_INFO);
  Map<SNode,ScopePositionInfo> scopeInfo=TraceInfoGenerationUtil.getUserObjects(buffer,TraceInfoGenerationUtil.SCOPE_INFO);
  Map<SNode,UnitPositionInfo> unitInfo=TraceInfoGenerationUtil.getUserObjects(buffer,TraceInfoGenerationUtil.UNIT_INFO);
  for (  TraceablePositionInfo position : positionInfo.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  for (  ScopePositionInfo position : scopeInfo.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  for (  UnitPositionInfo position : unitInfo.values()) {
    position.setStartLine(position.getStartLine() + topLength);
    position.setEndLine(position.getEndLine() + topLength);
  }
  List<String> dependencies=getUserObjectCollection(DEPENDENCY,node,buffer,(Set<String>)buffer.getUserObject(EXTENDS));
  List<String> extend=getUserObjectCollection(EXTENDS,node,buffer,null);
  Map<String,List<String>> deps=new HashMap<String,List<String>>(2);
  deps.put(TextGenManager.DEPENDENCY,dependencies);
  deps.put(TextGenManager.EXTENDS,extend);
  Object result=buffer.getText();
  String outputEncoding=(String)buffer.getUserObject(OUTPUT_ENCODING);
  if (outputEncoding != null) {
    if (outputEncoding == "binary") {
      result=new Base64Encoder().decode((String)result);
    }
  }
  return new TextGenerationResult(result,buffer.hasErrors(),positionInfo,scopeInfo,unitInfo,deps);
}
