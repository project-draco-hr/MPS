{
  HighlighterEditorTracker editorTracker=myHighlighter.getEditorTracker();
  final SRepository repository=component.getEditorContext().getRepository();
  boolean needsUpdate=new ModelAccessHelper(repository).runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      final SNode editedNode=component.getEditedNode();
      return editedNode != null && SNodeUtil.isAccessible(editedNode,repository);
    }
  }
);
  if (!needsUpdate)   return false;
  final Set<EditorCheckerWrapper> checkersToRecheck=new LinkedHashSet<>();
  boolean rootWasCheckedOnce=editorTracker.wasCheckedOnce(component);
  if (!rootWasCheckedOnce) {
    checkersToRecheck.addAll(myCheckers);
  }
 else {
    repository.getModelAccess().runReadAction(new Runnable(){
      @Override public void run(){
        if (myHighlighter.isPausedOrStopping())         return;
        for (        EditorCheckerWrapper checker : myCheckers) {
          if (checker.needsUpdate(component)) {
            checkersToRecheck.add(checker);
          }
        }
      }
    }
);
  }
  if (checkersToRecheck.isEmpty() || myHighlighter.isPausedOrStopping())   return false;
  List<EditorCheckerWrapper> checkersToRecheckList=new ArrayList<>(checkersToRecheck);
  checkersToRecheckList.sort(new PriorityComparator());
  boolean recreateInspectorMessages=mainEditorMessagesChanged || !editorTracker.wereInspectorMessagesCreated();
  editorTracker.markCheckedOnce(component);
  return updateEditor(component,rootWasCheckedOnce,checkersToRecheckList,recreateInspectorMessages,applyQuickFixes);
}
