{
  return myHighlighter.runUpdateMessagesAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      boolean needsUpdate=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          final SNode editedNode=component.getEditedNode();
          return editedNode != null && SNodeUtil.isAccessible(editedNode,MPSModuleRepository.getInstance());
        }
      }
);
      if (!needsUpdate)       return false;
      final Set<BaseEditorChecker> checkersToRecheck=new LinkedHashSet<BaseEditorChecker>();
      boolean rootWasCheckedOnce=myHighlighter.wasCheckedOnce(component);
      if (!rootWasCheckedOnce) {
        checkersToRecheck.addAll(myCheckers);
      }
 else {
        ModelAccess.instance().runReadAction(new Runnable(){
          @Override public void run(){
            if (myHighlighter.isPausedOrStopping())             return;
            for (            BaseEditorChecker checker : myCheckers) {
              if (checker.hasDramaticalEventProtected(myEvents) && (!myEssentialOnly || checker.isEssentialProtected())) {
                checkersToRecheck.add(checker);
              }
            }
          }
        }
);
      }
      if ((checkersToRecheck.isEmpty() && myCheckersToRemove.isEmpty()) || myHighlighter.isPausedOrStopping())       return false;
      List<BaseEditorChecker> checkersToRecheckList=new ArrayList<BaseEditorChecker>(checkersToRecheck);
      Collections.sort(checkersToRecheckList,new PriorityComparator());
      boolean recreateInspectorMessages=mainEditorMessagesChanged || !myHighlighter.wereInspectorMessagesCreated();
      myHighlighter.markCheckedOnce(component);
      return updateEditor(component,rootWasCheckedOnce,checkersToRecheckList,recreateInspectorMessages,applyQuickFixes);
    }
  }
);
}
