{
  if (editor == null || editor.getRootCell() == null)   return false;
  final NodeHighlightManager highlightManager=editor.getHighlightManager();
  boolean anyMessageChanged=false;
  for (  final EditorChecker checker : checkersToRecheck) {
    UpdateResult checkResult=runLoPrioRead(new Computable<UpdateResult>(){
      @Override public UpdateResult compute(){
        if (myHighlighter.isPausedOrStopping())         return UpdateResult.CANCELLED;
        SNode node=editor.getEditedNode();
        if (node == null) {
          return UpdateResult.CANCELLED;
        }
        if (!SNodeUtil.isAccessible(node,editor.getEditorContext().getRepository())) {
          return null;
        }
        try {
          return checker.update(editor,wasCheckedOnce,applyQuickFixes,new HighlighterUpdateSessionCancellable(myHighlighter,checker.toString(),editor));
        }
 catch (        IndexNotReadyException ex) {
          highlightManager.clearForOwner(checker.getEditorMessageOwner(),true);
          throw ex;
        }
      }
    }
);
    if (myHighlighter.isStopping())     return false;
    if (checkResult instanceof Completed) {
      Completed completed=(Completed)checkResult;
      if (completed.myMessagesChanged || myHighlighter.getEditorTracker().isInspector(editor) && recreateInspectorMessages) {
        anyMessageChanged=true;
        highlightManager.clearForOwner(checker.getEditorMessageOwner(),false);
        for (        EditorMessage message : completed.myMessages) {
          highlightManager.mark(message);
        }
      }
    }
  }
  if (myHighlighter.isStopping())   return false;
  if (anyMessageChanged) {
    highlightManager.repaintAndRebuildEditorMessages();
    editor.updateStatusBarMessage();
  }
  return anyMessageChanged;
}
