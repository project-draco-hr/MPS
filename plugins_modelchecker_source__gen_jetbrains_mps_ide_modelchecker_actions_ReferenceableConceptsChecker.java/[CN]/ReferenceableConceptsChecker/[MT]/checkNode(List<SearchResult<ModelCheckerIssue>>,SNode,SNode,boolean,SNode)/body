{
  SAbstractConcept cncpt=SNodeOperations.getConcept(node);
  if (!((cncpt.isValid()))) {
    SpecificChecker.addIssue(results,node,"No concept found for " + node.toString(),ModelChecker.SEVERITY_ERROR,"no concept",null);
    return;
  }
  if (cncpt instanceof SInterfaceConcept) {
    SpecificChecker.addIssue(results,node,"Interface instance found! " + node.toString(),ModelChecker.SEVERITY_ERROR,"interface instance",null);
    return;
  }
  if (cncpt.isAbstract()) {
    SpecificChecker.addIssue(results,node,"Abstract concept instance found! " + node.toString(),ModelChecker.SEVERITY_ERROR,"abstract concept instance",null);
    return;
  }
  if (isAncestor) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(cncpt),MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x2ea65c0b397bd5beL,"jetbrains.mps.lang.core.structure.ScopeFacade")) && !(ListSequence.fromList(SNodeOperations.getNodeAncestors(refNode,null,true)).contains(node))) {
      SpecificChecker.addIssue(results,anchor,"Reference from outside to a node under ScopeFacade: facade=" + cncpt.getName(),ModelChecker.SEVERITY_ERROR,"reference to a non-referenceable node",null);
    }
  }
 else {
    ConceptDescriptor cd=((SAbstractConceptAdapter)cncpt).getConceptDescriptor();
    if (cd.getStaticScope() == StaticScope.NONE) {
      SpecificChecker.addIssue(results,anchor,"Reference to a non-referenceable node found: " + cncpt.getName(),ModelChecker.SEVERITY_ERROR,"reference to a non-referenceable node",null);
    }
 else     if (cd.getStaticScope() == StaticScope.NONE && !((SNodeOperations.getContainingRoot(node) == SNodeOperations.getContainingRoot(refNode)))) {
      SpecificChecker.addIssue(results,anchor,"Cross-root reference to a locally referenceable node found: " + cncpt.getName(),ModelChecker.SEVERITY_ERROR,"reference to a locally referenceable node",null);
    }
  }
}
