{
  final List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  if (model == null || model == null || model.getModule() == null) {
    return results;
  }
  if (monitor.isCanceled()) {
    return results;
  }
  monitor.start("illegal references",1);
  if (LanguageAspect.STRUCTURE.is(model)) {
    for (    SNode concept : ListSequence.fromList(SModelOperations.roots(model,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
      for (      SNode ref : ListSequence.fromList(SLinkOperations.getChildren(concept,MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,1071489727083l,"linkDeclaration"))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.hasValue(it,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599937831l,"metaClass"),"reference","reference");
        }
      }
)) {
        SNode target=SLinkOperations.getTarget(ref,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"));
        if (SNodeOperations.isInstanceOf(target,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
          SNode decl=SNodeOperations.cast(target,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
          if (SPropertyOperations.hasValue(decl,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,5404671619616246344l,"staticScope"),"none",null)) {
            SpecificChecker.addIssue(results,ref,"Reference to a non-referenceable concept found: " + SPropertyOperations.getString(target,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")),ModelChecker.SEVERITY_ERROR,"reference to a non-referenceable concept",null);
          }
        }
      }
      if (SNodeOperations.isInstanceOf(concept,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) && SPropertyOperations.hasValue(SNodeOperations.cast(concept,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")),MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489090640l,5404671619616246344l,"staticScope"),"none",null)) {
        SNode c=concept;
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(c),MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,"jetbrains.mps.lang.core.structure.INamedConcept"))) {
          SpecificChecker.addIssue(results,c,"INamedConcept inheritors are usually referenceable",ModelChecker.SEVERITY_WARNING,"non-referenceable named concept",null);
        }
      }
    }
  }
  for (  SNode node : ListSequence.fromList(SModelOperations.nodes(model,null))) {
    if (monitor.isCanceled()) {
      break;
    }
    for (    SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.LinkAttribute("jetbrains.mps.lang.generator.structure.ReferenceMacro",SLinkOperations.getRole(ref))) != null)) {
        continue;
      }
      SNode target=jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref);
      if (target == null) {
        SpecificChecker.addIssue(results,node,"Unresolved reference: " + SLinkOperations.getResolveInfo(ref),ModelChecker.SEVERITY_ERROR,"unresolved reference",null);
        continue;
      }
      checkNode(results,target,node,false,target);
      SNode curr=target;
      while (!(SNodeOperations.isAttribute(curr))) {
        curr=SNodeOperations.getParent(curr);
        if (curr == null) {
          break;
        }
        checkNode(results,curr,node,true,target);
      }
    }
  }
  return results;
}
