{
  return TraceInfoUtilComponent.getInstance().findInTraceInfo(unitName,new _FunctionTypes._return_P2_E0<SNode,DebugInfo,SModelDescriptor>(){
    public SNode invoke(    DebugInfo info,    SModelDescriptor modelDescriptor){
      List<TraceablePositionInfo> resultList=info.getTraceableInfoForPosition(fileName,lineNumber);
      if (resultList == null || ListSequence.fromList(resultList).isEmpty()) {
        return null;
      }
      SModel model=modelDescriptor.getSModel();
      Iterable<TraceablePositionInfo> sorted=ListSequence.fromList(resultList).sort(new ISelector<TraceablePositionInfo,TraceablePositionInfo>(){
        public TraceablePositionInfo select(        TraceablePositionInfo it){
          return it;
        }
      }
,true);
      final TraceablePositionInfo firstPositionInfo=Sequence.fromIterable(sorted).first();
      String nodeId=firstPositionInfo.getNodeId();
      if (Sequence.fromIterable(sorted).count() > 1 && firstPositionInfo.getStartLine() == lineNumber && firstPositionInfo.getLineDistance() > 0) {
        nodeId=ListSequence.fromList(Sequence.fromIterable(sorted).toListSequence()).getElement(1).getNodeId();
      }
      if (Sequence.fromIterable(sorted).count() > 1) {
        Iterable<TraceablePositionInfo> sameSpacePositions=Sequence.fromIterable(sorted).where(new IWhereFilter<TraceablePositionInfo>(){
          public boolean accept(          TraceablePositionInfo it){
            return firstPositionInfo.isOccupyTheSameSpace(it);
          }
        }
);
        if (Sequence.fromIterable(sameSpacePositions).count() > 1) {
          SNode currentNode=model.getNodeById(firstPositionInfo.getNodeId());
          boolean finished=false;
          while (!(finished)) {
            finished=true;
            for (            TraceablePositionInfo otherPos : Sequence.fromIterable(sameSpacePositions)) {
              SNode otherNode=model.getNodeById(otherPos.getNodeId());
              if ((otherNode != null) && otherNode.isDescendantOf(currentNode,false)) {
                currentNode=otherNode;
                finished=false;
                break;
              }
            }
          }
          return currentNode;
        }
      }
      return model.getNodeById(nodeId);
    }
  }
,TraceInfoUtilComponent.DEFAULT_MAPPER);
}
