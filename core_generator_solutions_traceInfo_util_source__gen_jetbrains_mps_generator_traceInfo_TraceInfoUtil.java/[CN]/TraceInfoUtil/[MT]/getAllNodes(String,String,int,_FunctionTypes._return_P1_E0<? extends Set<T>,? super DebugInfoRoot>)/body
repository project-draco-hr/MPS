{
  return findInTraceInfo(unitName,new _FunctionTypes._return_P2_E0<List<SNode>,DebugInfo,SModel>(){
    public List<SNode> invoke(    DebugInfo debugInfo,    SModel descriptor){
      Map<DebugInfoRoot,List<T>> infoForPosition=debugInfo.getRootToInfoForPosition(file,lineNumber,new _FunctionTypes._return_P1_E0<Set<T>,DebugInfoRoot>(){
        public Set<T> invoke(        DebugInfoRoot root){
          return positionsGetter.invoke(root);
        }
      }
);
      List<SNode> nodes=ListSequence.fromList(new ArrayList<SNode>());
      if (MapSequence.fromMap(infoForPosition).isEmpty()) {
        return null;
      }
      for (      IMapping<DebugInfoRoot,List<T>> rootToInfo : MapSequence.fromMap(infoForPosition)) {
        final String model=rootToInfo.key().getNodeRef().getModelReference().toString();
        for (        T info : ListSequence.fromList(rootToInfo.value())) {
          SNode node=new SNodePointer(model,info.getNodeId()).resolve(MPSModuleRepository.getInstance());
          if (node != null) {
            nodes.add(node);
          }
        }
      }
      if (ListSequence.fromList(nodes).isEmpty()) {
        return null;
      }
      return nodes;
    }
  }
);
}
