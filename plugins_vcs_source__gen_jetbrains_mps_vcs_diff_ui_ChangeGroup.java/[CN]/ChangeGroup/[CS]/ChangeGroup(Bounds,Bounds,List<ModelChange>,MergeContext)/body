{
  myLeftBounds=leftBounds;
  myRightBounds=rightBounds;
  myChanges=changes;
  myChangeType=ListSequence.<ModelChange>fromList(changes).<ChangeType>select(new ISelector<ModelChange,ChangeType>(){
    public ChangeType select(    ModelChange ch){
      return ch.getType();
    }
  }
).reduceLeft(new ILeftCombinator<ChangeType,ChangeType>(){
    public ChangeType combine(    ChangeType a,    ChangeType b){
      return (a == b ? a : ChangeType.CHANGE);
    }
  }
);
  if (mergeContext != null && ListSequence.<ModelChange>fromList(changes).any(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return Sequence.<ModelChange>fromIterable(mergeContext.getConflictedWith(ch)).isNotEmpty();
    }
  }
)) {
    myChangeType=ChangeType.CONFLICTED;
  }
}
