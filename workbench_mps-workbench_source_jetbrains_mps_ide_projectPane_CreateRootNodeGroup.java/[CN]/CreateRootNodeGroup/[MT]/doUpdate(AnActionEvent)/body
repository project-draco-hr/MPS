{
  removeAll();
  SModel targetModel=event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
  if (targetModel == null) {
    disable(event.getPresentation());
    return;
  }
  if (!(targetModel instanceof EditableSModel) || targetModel.isReadOnly()) {
    event.getPresentation().setEnabled(false);
    event.getPresentation().setVisible(false);
    return;
  }
  boolean isStubModel=SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(targetModel));
  if (isStubModel) {
    disable(event.getPresentation());
    return;
  }
  boolean inEditor=event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE) == null;
  if (!inEditor) {
    Integer selectedItemsCount=event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE);
    boolean singleItemSelected=selectedItemsCount != null && selectedItemsCount == 1;
    if (!singleItemSelected) {
      disable(event.getPresentation());
      return;
    }
    TreeNode treeNode=event.getData(MPSCommonDataKeys.TREE_NODE);
    if (!(treeNode instanceof PackageNode)) {
      myPackage=null;
    }
 else {
      final PackageNode node=(PackageNode)treeNode;
      myPackage=node.getPackage();
    }
  }
 else {
    SNode node=event.getData(MPSCommonDataKeys.NODE);
    myPackage=null;
    if (node != null) {
      SNode root=node.getContainingRoot();
      myPackage=SNodeAccessUtil.getProperty(root,SNodeUtil.property_BaseConcept_virtualPackage);
    }
  }
  enable(event.getPresentation());
  Collection<SLanguage> mainLanguages=LanguageAspectSupport.getMainLanguages(targetModel);
  for (  SLanguage mainLang : mainLanguages) {
    addActionsForRoots(mainLang,targetModel,this);
  }
  addSeparator();
  Collection<SLanguage> additionalLanguages=LanguageAspectSupport.getAdditionalLanguages(targetModel);
  additionalLanguages.removeAll(mainLanguages);
  for (  SLanguage addLang : additionalLanguages) {
    String name=addLang.getQualifiedName();
    DefaultActionGroup langGroup=new DefaultActionGroup(NameUtil.compactNamespace(name),true);
    addActionsForRoots(addLang,targetModel,langGroup);
    add(langGroup);
  }
  addSeparator();
  List<SLanguage> modelLanguages=new ArrayList<SLanguage>(SModelOperations.getAllLanguageImports(targetModel));
  modelLanguages.removeAll(mainLanguages);
  mainLanguages.removeAll(additionalLanguages);
  Collections.sort(modelLanguages,new ToStringComparator());
  ArrayList<DefaultActionGroup> byLanguage=new ArrayList<DefaultActionGroup>();
  for (  SLanguage language : modelLanguages) {
    String name=language.getQualifiedName();
    DefaultActionGroup langRootsGroup=new DefaultActionGroup(NameUtil.compactNamespace(name),true);
    addActionsForRoots(language,targetModel,langRootsGroup);
    if (langRootsGroup.getChildrenCount() > 0) {
      byLanguage.add(langRootsGroup);
    }
  }
  final boolean plain=byLanguage.size() == 1 && mainLanguages.isEmpty();
  for (  DefaultActionGroup g : byLanguage) {
    if (plain) {
      addSeparator();
      addAll(g.getChildren(null));
    }
 else {
      this.add(g);
    }
  }
  if (getChildrenCount() == 0) {
    add(ActionManager.getInstance().getAction("jetbrains.mps.ide.editor.actions.AddLanguageImport_Action"));
  }
}
