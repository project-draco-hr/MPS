{
  List<SNode> paramTypes=ListOperations.createList(new SNode[]{});
  for (  SNode param : SLinkOperations.getTargets(closure,"parameter",true)) {
    ListOperations.addElement(paramTypes,SLinkOperations.getTarget(param,"type",true));
  }
  List<SNode> allRets=SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(closure,"body",true)),new zPredicate(typeof_ClosureLiteral_InferenceRule.this,null)));
  List<SNode> allStmts=SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getChildren(SLinkOperations.getTarget(closure,"body",true)),new zPredicate1(typeof_ClosureLiteral_InferenceRule.this,null)));
  while (!(SequenceOperations.isEmpty(allStmts))) {
    SNode stmt=SequenceOperations.getFirst(allStmts);
    ListOperations.removeElement(allStmts,stmt);
    ListOperations.addAllElements(allStmts,SequenceOperations.where(SNodeOperations.getChildren(stmt),new zPredicate2(typeof_ClosureLiteral_InferenceRule.this,null)));
    ListOperations.addAllElements(allRets,SequenceOperations.where(SNodeOperations.getChildren(stmt),new zPredicate3(typeof_ClosureLiteral_InferenceRule.this,null)));
  }
  final SNode LCS_typevar_1199621958531=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
  boolean returnsValue=!(SequenceOperations.isEmpty(allRets));
{
    ICursor<SNode> _zCursor=CursorFactory.createCursor(allRets);
    try {
      while (_zCursor.moveToNext()) {
        SNode rs=_zCursor.getCurrent();
        TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1199621958531),TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(rs,"expression",true),"jetbrains.mps.closures.helgins","1199622037643",true),SLinkOperations.getTarget(rs,"expression",true),null,"jetbrains.mps.closures.helgins","1199622013511");
      }
    }
  finally {
      _zCursor.release();
    }
  }
  SNode lastStmt=SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(closure,"body",true),"statement",true));
  if (SNodeOperations.isInstanceOf(lastStmt,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
    TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1199621958531),TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(lastStmt,"expression",true),"jetbrains.mps.closures.helgins","1199622127027",true),SLinkOperations.getTarget(lastStmt,"expression",true),null,"jetbrains.mps.closures.helgins","1199622121009");
    returnsValue=true;
  }
  if (returnsValue) {
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_().createNode(paramTypes,TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1199621958531)),closure,"jetbrains.mps.closures.helgins","1199620910047");
  }
 else {
    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_1().createNode(paramTypes),closure,"jetbrains.mps.closures.helgins","1199622253431");
  }
}
