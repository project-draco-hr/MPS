{
  try {
    final SNode classConcept=GenerateToString_Action.this.getClassConcept(_params);
    final Wrappers._T<SNodePointer[]> fields=new Wrappers._T<SNodePointer[]>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        fields.value=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"field",true)).select(new ISelector<SNode,SNodePointer>(){
          public SNodePointer select(          SNode it){
            return new SNodePointer(it);
          }
        }
).toGenericArray(SNodePointer.class);
      }
    }
);
    SelectFieldsDialog selectFieldsDialog=new SelectFieldsDialog(fields.value,true,((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getOperationContext().getProject());
    selectFieldsDialog.setTitle("Generate toString");
    selectFieldsDialog.show();
    if (!(selectFieldsDialog.isOK())) {
      return;
    }
    SNodePointer[] selectedFields=Sequence.fromIterable(((Iterable<SNodePointer>)selectFieldsDialog.getSelectedElements())).toGenericArray(SNodePointer.class);
    final SNode rightmostExpression;
    SNodePointer firstField=(selectedFields != null && selectedFields.length > 0 ? selectedFields[0] : null);
    SNode currentExpression=null;
    for (    SNodePointer fieldPtr : selectedFields) {
      SNode field=SNodeOperations.cast(fieldPtr.getNode(),"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
      SNode fieldRef=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
      SLinkOperations.setTarget(fieldRef,"variableDeclaration",field,false);
      SNode item=new GenerateToString_Action.QuotationClass_dpuufu_a0a3a51a0a4().createNode(((fieldPtr == firstField ? "" : ", ")) + SPropertyOperations.getString(field,"name") + "=");
      if (fieldPtr == firstField) {
        currentExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a0a4a51a0a4().createNode(SPropertyOperations.getString(classConcept,"name") + "{",item);
        currentExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a1a4a51a0a4().createNode(fieldRef,currentExpression);
      }
 else {
        currentExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a0a0e0p0a0e().createNode(item,currentExpression);
        currentExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a1a0e0p0a0e().createNode(fieldRef,currentExpression);
      }
    }
    if (selectedFields == null || selectedFields.length == 0) {
      rightmostExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a0a61a0a4().createNode(SPropertyOperations.getString(classConcept,"name") + "{}");
    }
 else {
      rightmostExpression=new GenerateToString_Action.QuotationClass_dpuufu_a0a0a0q0a0e().createNode(currentExpression);
    }
    SNode method=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateToString_Action.QuotationClass_dpuufu_a0a0a71a0a4().createNode(rightmostExpression));
    ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).select(method);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GenerateToString",t);
  }
}
