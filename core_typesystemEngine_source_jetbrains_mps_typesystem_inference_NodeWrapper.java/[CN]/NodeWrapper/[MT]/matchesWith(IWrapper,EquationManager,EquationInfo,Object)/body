{
  if (wrapper == null)   return false;
  if (wrapper instanceof NodeWrapper) {
    if (matchParameter instanceof Pair && ((Pair)matchParameter).o1 instanceof SubtypingManager) {
      Pair<SubtypingManager,Map<SNode,Set<SNode>>> pair=(Pair<SubtypingManager,Map<SNode,Set<SNode>>>)matchParameter;
      Map<SNode,Set<SNode>> mapWithVars=pair.o2;
      final Map<SNode,Set<SNode>> candidate=new THashMap<SNode,Set<SNode>>(1);
      IMatchModifier matchModifier=new IMatchModifier(){
        public boolean accept(        SNode node1,        SNode node2){
          return HUtil.isRuntimeTypeVariable(node1);
        }
        public boolean acceptList(        List<SNode> nodes1,        List<SNode> nodes2){
          return false;
        }
        public void performAction(        SNode node1,        SNode node2){
          Set<SNode> nodeSet=candidate.get(node1);
          if (nodeSet == null) {
            nodeSet=new THashSet<SNode>(1);
            candidate.put(node1,nodeSet);
          }
          nodeSet.add(node2);
        }
        public void performGroupAction(        List<SNode> nodes1,        List<SNode> nodes2){
        }
      }
;
      boolean b=MatchingUtil.matchNodes(getNode(),wrapper.getNode(),matchModifier,false);
      if (b) {
        for (        SNode var : candidate.keySet()) {
          Set<SNode> candidateSet=candidate.get(var);
          if (candidateSet == null)           continue;
          Set<SNode> nodeSet=mapWithVars.get(var);
          if (nodeSet == null) {
            nodeSet=new THashSet<SNode>(1);
            mapWithVars.put(var,nodeSet);
          }
          nodeSet.addAll(candidateSet);
        }
      }
      return b;
    }
    final Set<Pair<SNode,SNode>> childEQs=new THashSet<Pair<SNode,SNode>>();
    boolean b=MatchingUtil.matchNodes(getNode(),wrapper.getNode(),new IMatchModifier(){
      public boolean accept(      SNode node1,      SNode node2){
        return HUtil.isRuntimeTypeVariable(node1) || HUtil.isRuntimeTypeVariable(node2);
      }
      public boolean acceptList(      List<SNode> nodes1,      List<SNode> nodes2){
        if (!nodes1.isEmpty()) {
          SNode node1=nodes1.get(0);
          if (HUtil.isRuntimeListVariable(node1)) {
            return true;
          }
        }
        if (!nodes2.isEmpty()) {
          SNode node2=nodes2.get(0);
          if (HUtil.isRuntimeListVariable(node2)) {
            return true;
          }
        }
        return false;
      }
      public void performAction(      SNode node1,      SNode node2){
        childEQs.add(new Pair<SNode,SNode>(node1,node2));
      }
      public void performGroupAction(      List<SNode> nodes1,      List<SNode> nodes2){
        if (equationManager == null)         return;
        if (!nodes1.isEmpty()) {
          SNode node1=nodes1.get(0);
          if (HUtil.isRuntimeListVariable(node1)) {
            SNode var=node1;
            SNode parent=var.getParent();
            String role=var.getRole_();
            if (role == null)             return;
            parent.removeChild(var);
            for (            SNode node : nodes2) {
              SNode runtimeTypesVariable=equationManager.getTypeCheckingContext().createNewRuntimeTypesVariable();
              parent.addChild(role,runtimeTypesVariable);
              childEQs.add(new Pair<SNode,SNode>(runtimeTypesVariable,node));
            }
            return;
          }
        }
        if (!nodes2.isEmpty()) {
          SNode node2=nodes2.get(0);
          if (HUtil.isRuntimeListVariable(node2)) {
            SNode var=node2;
            SNode parent=var.getParent();
            String role=var.getRole_();
            if (role == null)             return;
            parent.removeChild(var);
            for (            SNode node : nodes1) {
              SNode runtimeTypesVariable=equationManager.getTypeCheckingContext().createNewRuntimeTypesVariable();
              parent.addChild(role,runtimeTypesVariable);
              childEQs.add(new Pair<SNode,SNode>(runtimeTypesVariable,node));
            }
          }
        }
      }
    }
,false);
    if (b) {
      if (equationManager != null) {
        equationManager.addChildEquations(childEQs,errorInfo);
      }
    }
    return b;
  }
  return wrapper.matchesWith(this,equationManager,errorInfo);
}
