{
  SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression");
  SNode logger=SLinkOperations.getTarget(dotExpression,"operand",true);
  List<SNode> arguments=SLinkOperations.getTargets(node,"actualArgument",true);
  SNode method=SLinkOperations.getTarget(node,"baseMethodDeclaration",false);
  if (SPropertyOperations.getString(method,"name").equals("debug") || SPropertyOperations.getString(method,"name").equals("info") || SPropertyOperations.getString(method,"name").equals("error")|| SPropertyOperations.getString(method,"name").equals("fatal")) {
    resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
  }
 else   if (SPropertyOperations.getString(method,"name").equals("warning")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0f0b_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a5a1(logger);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a0f0b(logger);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a1f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(node,SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a1f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a2f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(node,SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a2f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a3f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(node,SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a3f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a4f0b(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SLinkOperations.setTarget(node,"baseMethodDeclaration",SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0e5a1(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).addElement(_quotation_createNode_ajmt7s_a0a1a4f0b());
  }
 else {
    resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
  }
}
