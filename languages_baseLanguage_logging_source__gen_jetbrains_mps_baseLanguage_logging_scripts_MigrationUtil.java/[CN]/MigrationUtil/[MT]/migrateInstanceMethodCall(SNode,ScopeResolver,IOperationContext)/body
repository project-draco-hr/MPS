{
  SNode dotExpression=SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.DotExpression");
  SNode logger=SLinkOperations.getTarget(dotExpression,"operand",true);
  List<SNode> arguments=SLinkOperations.getTargets(node,"actualArgument",true);
  SNode method=SLinkOperations.getTarget(node,"baseMethodDeclaration",false);
  if (SPropertyOperations.getString(method,"name").equals("debug")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0f0a();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a5a0_0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
    }
  }
 else   if (SPropertyOperations.getString(method,"name").equals("info")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0f0a_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a5a0_1();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0a5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a0f0a_1();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)).toListSequence());
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
    }
  }
 else   if (SPropertyOperations.getString(method,"name").equals("warning")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a1f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0b5a0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0b5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a1f0a_0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
      resolver.resolve(SNodeOperations.getReference(newNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall","staticMethodDeclaration")),newNode,context);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a1a0b5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0b0a1f0a(logger);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a1f0a_1(logger);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newNode,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
  }
 else   if (SPropertyOperations.getString(method,"name").equals("error")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a2f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0c5a0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0c5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a2f0a_0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
    }
  }
 else   if (SPropertyOperations.getString(method,"name").equals("fatal")) {
    if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a3f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0d5a0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else     if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0d5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
      SNode newNode=_quotation_createNode_ajmt7s_a0a0a0a3f0a_0();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).clear();
      ListSequence.fromList(SLinkOperations.getTargets(newNode,"actualArgument",true)).addSequence(Sequence.fromIterable(Sequence.<SNode>singleton(logger)).union(ListSequence.fromList(arguments)));
      SNodeOperations.replaceWithAnother(dotExpression,newNode);
    }
 else {
      resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
    }
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a4f0a_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(dotExpression,_quotation_createNode_ajmt7s_a0a0a4f0a(logger,ListSequence.fromList(arguments).first()));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a5f0a_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(dotExpression,_quotation_createNode_ajmt7s_a0a0a5f0a(logger));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a6f0a_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(dotExpression,_quotation_createNode_ajmt7s_a0a0a6f0a(logger));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a7f0a_0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SNodeOperations.replaceWithAnother(dotExpression,_quotation_createNode_ajmt7s_a0a0a7f0a(logger));
  }
 else   if (method == SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a8f0a(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false)) {
    SLinkOperations.setTarget(node,"baseMethodDeclaration",SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_ajmt7s_a0a0a0a0i5a0(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).addElement(_quotation_createNode_ajmt7s_a0a1a8f0a());
  }
 else {
    resolver.resolve(SNodeOperations.getReference(node,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")),node,context);
  }
}
