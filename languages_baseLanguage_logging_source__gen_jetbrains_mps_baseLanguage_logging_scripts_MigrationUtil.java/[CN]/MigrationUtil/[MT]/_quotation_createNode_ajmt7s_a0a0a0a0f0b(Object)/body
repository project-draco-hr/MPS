{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_2=null;
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  quotedNode_2=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_3=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null,null,GlobalScope.getInstance(),false);
  quotedNode_3.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_3,facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"),facade.createNodeId("~Category.warn(java.lang.Object,java.lang.Throwable):void")));
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_5,"value","");
  quotedNode_3.addChild("actualArgument",quotedNode_5);
  quotedNode_6=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_8=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral",null,null,GlobalScope.getInstance(),false);
  quotedNode_6.addChild("expression",quotedNode_8);
  quotedNode_9=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType",null,null,GlobalScope.getInstance(),false);
  quotedNode_9.setReference("classifier",SReference.create("classifier",quotedNode_9,facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),facade.createNodeId("~Throwable")));
  quotedNode_6.addChild("type",quotedNode_9);
  quotedNode_3.addChild("actualArgument",quotedNode_6);
  quotedNode_2.addChild("operation",quotedNode_3);
  quotedNode_4=(SNode)parameter_1;
  if (quotedNode_4 != null) {
    quotedNode_2.addChild("operand",HUtil.copyIfNecessary(quotedNode_4));
  }
  return quotedNode_2;
}
