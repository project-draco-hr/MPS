{
  myProcessHandler=gdbProcess;
  myProcessHandler.addProcessListener(new ProcessAdapter(){
    public void onTextAvailable(    ProcessEvent event,    Key outputType){
      String text=event.getText();
      GDBAnswerProducer producer=new GDBAnswerProducer(text);
      GDBAnswer gdbAnswer=producer.getGDBAnswer();
      if (producer.hasError() || gdbAnswer == null) {
        return;
      }
      if (gdbAnswer instanceof AsyncAnswer) {
        AsyncAnswer answer=(AsyncAnswer)gdbAnswer;
        if (answer.isExec() && answer.isStopped()) {
          GDBValue reasonRaw=answer.getResults().getPropertyValue(GDBEventsHandler.REASON);
          String reason=(reasonRaw instanceof StringValue ? ((StringValue)reasonRaw).getString() : null);
          if (GDBEventsHandler.REASON_EXITED_NORMALLY.equals(reason) || GDBEventsHandler.REASON_EXITED.equals(reason)) {
            fireProcessTerminated();
            return;
          }
 else {
            firePaused(answer);
            return;
          }
        }
      }
      if (gdbAnswer instanceof StreamAnswer) {
        StreamAnswer streamAnswer=(StreamAnswer)gdbAnswer;
        myPendingStreamAnswers.add(streamAnswer);
      }
      if (gdbAnswer instanceof ResultAnswer) {
        ResultAnswer resultAnswer=(ResultAnswer)gdbAnswer;
        List<StreamAnswer> receivedStreamAnswers=new ArrayList<StreamAnswer>(myPendingStreamAnswers);
        myPendingStreamAnswers.clear();
        fireResultReceived(resultAnswer,receivedStreamAnswers);
        return;
      }
    }
    public void processTerminated(    ProcessEvent event){
      fireGDBProcessTerminated();
    }
  }
);
}
