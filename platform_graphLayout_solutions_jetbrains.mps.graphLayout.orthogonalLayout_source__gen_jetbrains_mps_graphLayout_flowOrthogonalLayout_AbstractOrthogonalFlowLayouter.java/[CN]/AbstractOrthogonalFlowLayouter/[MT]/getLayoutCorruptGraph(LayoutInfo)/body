{
  Graph graph=layoutInfo.getGraph();
  EdgesHistoryManager historyManager=new EdgesHistoryManager(graph);
  Set<Node> initialNodes=SetSequence.fromSet(new LinkedHashSet<Node>());
  SetSequence.fromSet(initialNodes).addSequence(ListSequence.fromList(graph.getNodes()));
  Set<Edge> initialEdges=SetSequence.fromSet(new LinkedHashSet<Edge>());
  SetSequence.fromSet(initialEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  Set<Edge> loops=SetSequence.fromSet(new LinkedHashSet<Edge>());
  for (  Edge edge : SetSequence.fromSet(initialEdges)) {
    if (edge.getSource() == edge.getTarget()) {
      SetSequence.fromSet(loops).addElement(edge);
      graph.removeEdge(edge);
    }
  }
  EmbeddedGraph embeddedGraph=getEmbedding(graph);
  addLoops(loops,embeddedGraph);
  Set<Edge> newEdges=BiconnectAugmentation.smartMakeBiconnected(graph);
  for (  Edge edge : SetSequence.fromSet(newEdges)) {
    graph.removeEdge(edge);
  }
  for (  Edge edge : SetSequence.fromSet(newEdges)) {
    ShortestPathEmbeddingFinder.restoreEdge(embeddedGraph,edge);
  }
  Map<Edge,List<Edge>> history=MapSequence.fromMap(new HashMap<Edge,List<Edge>>());
  for (  Edge edge : SetSequence.fromSet(initialEdges)) {
    MapSequence.fromMap(history).put(edge,historyManager.getHistory(edge));
  }
  Map<Edge,Edge> labeledEdges=MapSequence.fromMap(new HashMap<Edge,Edge>());
  LayoutInfo newInfo=new LayoutInfo(graph);
  for (  Node node : SetSequence.fromSet(layoutInfo.getNodesWithSize())) {
    Dimension size=layoutInfo.getNodeSize(node);
    if (size != null) {
      newInfo.setNodeSize(node,size);
    }
  }
  for (  Edge edge : SetSequence.fromSet(layoutInfo.getLabeledEdges())) {
    Edge labeledEdge=getLabeledEdge(MapSequence.fromMap(history).get(edge));
    MapSequence.fromMap(labeledEdges).put(edge,labeledEdge);
    newInfo.setLabelSize(labeledEdge,layoutInfo.getLabelSize(edge));
  }
  GraphLayout layout=getLayoutFromEmbeddedGraph(embeddedGraph,newInfo);
  GraphLayout initialLayout=this.refineLayout(graph,initialNodes,layout,initialEdges,history,layoutInfo,labeledEdges);
  return initialLayout;
}
