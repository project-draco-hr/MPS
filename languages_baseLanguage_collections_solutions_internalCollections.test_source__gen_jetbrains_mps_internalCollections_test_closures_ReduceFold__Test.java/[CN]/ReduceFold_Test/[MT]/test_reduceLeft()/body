{
  Iterable<Integer> in=this.input10();
  Assert.assertSame(1 + 2 + 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10,Sequence.fromIterable(in).reduceLeft(new ILeftCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      return a + b;
    }
  }
));
  _FunctionTypes._return_P2_E0<? extends Integer,? super Integer,? super Integer> cl=new _FunctionTypes._return_P2_E0<Integer,Integer,Integer>(){
    public Integer invoke(    Integer a,    Integer b){
      return a + b;
    }
  }
;
  Assert.assertSame(1 + 2 + 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10,Sequence.fromIterable(in).reduceLeft(cl));
  Assert.assertSame(1 - 2 - 3- 4- 5- 6- 7- 8- 9- 10,Sequence.fromIterable(in).reduceLeft(new ILeftCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      return a - b;
    }
  }
));
  Iterable<Integer> single=Sequence.<Integer>singleton(42);
  Assert.assertSame(42,Sequence.fromIterable(single).reduceLeft(new ILeftCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      return a + b;
    }
  }
));
  Iterable<Integer> empty=Sequence.fromIterable(Collections.<Integer>emptyList());
  Assert.assertNull(Sequence.fromIterable(empty).reduceLeft(new ILeftCombinator<Integer,Integer>(){
    public Integer combine(    Integer a,    Integer b){
      int i=0;
      if (i == 0) {
        throw new RuntimeException();
      }
      return i;
    }
  }
));
}
