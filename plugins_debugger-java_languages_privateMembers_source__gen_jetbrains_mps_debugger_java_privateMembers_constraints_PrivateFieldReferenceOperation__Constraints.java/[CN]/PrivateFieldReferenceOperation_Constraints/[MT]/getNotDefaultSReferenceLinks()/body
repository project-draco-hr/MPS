{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1197029447546l,1197029500499l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1197029447546l,1197029500499l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode instance=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
          SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(instance),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
          return new ClassifierVisibleMembersScope(classifierType,((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.INSTANCE_FIELD){
            @Override protected boolean isVisible(            SNode member){
              return !(super.isVisible(member));
            }
          }
;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_cgwyr9_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
