{
  myModel=null;
  myConceptFqNameToNodePointerMap.clear();
  myProject=e.getData(PlatformDataKeys.PROJECT);
  final SModel model=MPSCommonDataKeys.CONTEXT_MODEL.getData(e.getDataContext());
  if (model instanceof EditableSModel) {
    myModel=(EditableSModel)model;
  }
  if (myProject == null || myModel == null) {
    return;
  }
  final jetbrains.mps.project.Project mpsProject=ProjectHelper.toMPSProject(myProject);
  if (mpsProject == null) {
    return;
  }
  final Module module=e.getData(LangDataKeys.MODULE);
  final VirtualFile[] vFiles=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (module == null || vFiles == null || vFiles.length != 1) {
    return;
  }
  final ModuleMPSSupport mpsFacade=module.getProject().getComponent(ModuleMPSSupport.class);
  if (!mpsFacade.isMPSEnabled(module)) {
    return;
  }
  String url=vFiles[0].getUrl();
  if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) {
    return;
  }
  mpsProject.getModelAccess().runReadAction(new Runnable(){
    @Override public void run(){
      Set<SLanguage> modelLanguages=SModelOperations.getAllLanguageImports(model);
      for (      SLanguage language : modelLanguages) {
        for (        SAbstractConcept concept : language.getConcepts()) {
          String conceptFqName=concept.getQualifiedName();
          if (ModelConstraints.canBeRoot(conceptFqName,model,null)) {
            myConceptFqNameToNodePointerMap.put(conceptFqName,concept);
          }
        }
      }
    }
  }
);
}
