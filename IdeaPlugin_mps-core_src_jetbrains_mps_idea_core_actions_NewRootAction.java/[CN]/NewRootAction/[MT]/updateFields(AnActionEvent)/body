{
  myOperationContext=null;
  myModelDescriptor=null;
  myConceptFqNameToNodePointerMap.clear();
  myProject=e.getData(PlatformDataKeys.PROJECT);
  if (myProject == null) {
    return;
  }
  jetbrains.mps.project.Project mpsProject=ProjectHelper.toMPSProject(myProject);
  if (mpsProject == null) {
    return;
  }
  Module module=e.getData(LangDataKeys.MODULE);
  VirtualFile[] vFiles=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (module == null || vFiles == null || vFiles.length != 1 || vFiles[0].isDirectory() || FileTypeRegistry.getInstance().getFileTypeByFile(vFiles[0]) != MPSFileTypeFactory.MODEL_FILE_TYPE) {
    return;
  }
  MPSFacet mpsFacet=FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);
  if (mpsFacet == null || !mpsFacet.wasInitialized()) {
    return;
  }
  String url=vFiles[0].getUrl();
  if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) {
    return;
  }
  String path=VirtualFileManager.extractPath(url);
  for (  ModelRoot modelRoot : mpsFacet.getSolution().getModuleDescriptor().getModelRoots()) {
    if (path.startsWith(modelRoot.getPath())) {
      Solution solution=mpsFacet.getSolution();
      myOperationContext=new ModuleContext(solution,mpsProject);
      myModelDescriptor=SModelRepository.getInstance().findModel(FileSystem.getInstance().getFileByPath(vFiles[0].getPath()));
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          SModel model=myModelDescriptor.getSModel();
          List<Language> modelLanguages=SModelOperations.getLanguages(model,myOperationContext.getScope());
          for (          Language language : modelLanguages) {
            for (            SNode concept : language.getConceptDeclarations()) {
              String conceptFqName=NameUtil.nodeFQName(concept);
              if (ModelConstraintsManager.canBeRoot(myOperationContext,conceptFqName,model)) {
                myConceptFqNameToNodePointerMap.put(conceptFqName,new SNodePointer(concept));
              }
            }
          }
        }
      }
);
      return;
    }
  }
}
