{
  if (myModelDescriptor == null && myNewModel) {
    PsiElement psiElement=e.getData(LangDataKeys.PSI_ELEMENT);
    if (psiElement == null || !(psiElement instanceof PsiDirectory)) {
      return;
    }
    final VirtualFile targetDir=((PsiDirectory)psiElement).getVirtualFile();
    myModelDescriptor=(EditableSModelDescriptor)ModelAccess.instance().runWriteActionInCommand(new Computable<SModel>(){
      @Override public SModel compute(){
        ModelRoot useModelRoot=null;
        String useSourceRoot=null;
        for (        ModelRoot root : myOperationContext.getModule().getModelRoots()) {
          if (!(root instanceof DefaultModelRoot))           continue;
          DefaultModelRoot modelRoot=(DefaultModelRoot)root;
          for (          String sourceRoot : modelRoot.getFiles(DefaultModelRoot.SOURCE_ROOTS)) {
            final String prefix=sourceRoot.endsWith(File.separator) ? sourceRoot : (sourceRoot + File.separator);
            if (targetDir.getPath().startsWith(prefix)) {
              useModelRoot=root;
              useSourceRoot=sourceRoot;
              break;
            }
          }
        }
        if (useModelRoot == null)         return null;
        final String prefix=useSourceRoot.endsWith(File.separator) ? useSourceRoot : (useSourceRoot + File.separator);
        final String modelName=targetDir.getPath().replace(prefix,"").replace("/",".");
        EditableSModel model=null;
        try {
          model=(EditableSModel)((DefaultModelRoot)useModelRoot).createModel(modelName,useSourceRoot,PersistenceRegistry.getInstance().getFolderModelFactory("file-per-root"));
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        model.setChanged(true);
        model.save();
        ModelsAutoImportsManager.doAutoImport(useModelRoot.getModule(),model);
        MissingDependenciesFixer.fixDependencies(model);
        return model;
      }
    }
,ProjectHelper.toMPSProject(myProject));
  }
  if (myModelDescriptor == null)   return;
  if (myConceptFqNameToNodePointerMap.isEmpty()) {
    ImportHelper.addLanguageImport(myProject,myModelDescriptor.getModule(),myModelDescriptor.getModule().getModel(myModelDescriptor.getModelId()),null);
    return;
  }
  final CreateFromTemplateDialog dialog=new CreateFromTemplateDialog(myProject){
    @Override protected void doOKAction(){
      final SNodeReference conceptPointer=myConceptFqNameToNodePointerMap.get(getKindCombo().getSelectedName());
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        @Override public void run(){
          SNode concept=conceptPointer.resolve(MPSModuleRepository.getInstance());
          SModel model=myModelDescriptor;
          SNode newNode=NodeFactoryManager.createNode(concept,null,null,model,myOperationContext.getScope());
          ((jetbrains.mps.smodel.SNode)newNode).setName(getNameField().getText());
          model.addRootNode(newNode);
          myModelDescriptor.save();
        }
      }
,myOperationContext.getProject());
      super.doOKAction();
    }
  }
;
  dialog.setTitle(MPSBundle.message("create.new.root.dialog.title"));
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      for (      Map.Entry<String,SNodeReference> entry : myConceptFqNameToNodePointerMap.entrySet()) {
        String conceptFqName=entry.getKey();
        SNode concept=entry.getValue().resolve(MPSModuleRepository.getInstance());
        dialog.getKindCombo().addItem(NodePresentationUtil.matchingText(concept),IconManager.getIconForConceptFQName(conceptFqName),conceptFqName);
      }
    }
  }
);
  dialog.show();
}
