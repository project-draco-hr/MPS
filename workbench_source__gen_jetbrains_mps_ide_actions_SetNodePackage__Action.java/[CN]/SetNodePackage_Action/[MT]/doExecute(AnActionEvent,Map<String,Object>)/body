{
  try {
    final Wrappers._T<List<String>> packages=new Wrappers._T<List<String>>();
    final Wrappers._T<String> oldPackage=new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        packages.value=SetNodePackage_Action.this.fetchExistingPackages(((List<SNode>)MapSequence.fromMap(_params).get("nodes")),_params);
        oldPackage.value=ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("nodes"))).first().getProperty(SModelTreeNode.PACK);
      }
    }
);
    final SetNodePackageDialog dialog=new SetNodePackageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Set Virtual Package...",packages.value);
    dialog.setPackage(oldPackage.value);
    dialog.showDialog();
    if (dialog.isCancelled()) {
      return;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        for (        SNode node : ListSequence.fromList(((List<SNode>)MapSequence.fromMap(_params).get("nodes")))) {
          node.setProperty(SModelTreeNode.PACK,dialog.getPackage());
          if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) {
            for (            SNode aspect : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findAllAspects_7754459869734028917(SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),((IScope)MapSequence.fromMap(_params).get("scope"))))) {
              aspect.setProperty(SModelTreeNode.PACK,dialog.getPackage());
            }
          }
        }
      }
    }
);
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "SetNodePackage",t);
    }
  }
}
