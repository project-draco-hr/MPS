{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    final String[] lastPattern=new String[1];
    List<SubstituteAction> list=ModelActions.createChildNodeSubstituteActions(_context.getSourceNode(),null,MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x43d1b15d4168a426L,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild").getDeclarationNode(),new AbstractChildNodeSetter(){
      public SNode doExecute(      SNode parentNode,      SNode oldChild,      SNode newChild,      @Nullable EditorContext editorContext){
        return substitute(newChild,lastPattern[0],editorContext);
      }
      private SNode substitute(      SNode result,      String pattern,      @Nullable EditorContext editorContext){
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        return result;
      }
    }
,operationContext);
    for (    final SubstituteAction action : list) {
      ListSequence.fromList(result).addElement(new NodeSubstituteActionWrapper(action){
        @Override public SNode substitute(        @Nullable EditorContext context,        String pattern){
          lastPattern[0]=pattern;
          return super.substitute(context,pattern);
        }
      }
);
    }
  }
  return result;
}
