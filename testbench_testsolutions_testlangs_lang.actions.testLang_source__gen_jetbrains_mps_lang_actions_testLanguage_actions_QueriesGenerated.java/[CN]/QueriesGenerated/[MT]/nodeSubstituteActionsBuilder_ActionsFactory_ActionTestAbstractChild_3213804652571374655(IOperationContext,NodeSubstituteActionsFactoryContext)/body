{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        boolean tmpVar=_context.getParentNode() != null;
        tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
        tmpVar=tmpVar && _context.getChildConcept() != null;
        tmpVar=tmpVar && _context.getModel() != null;
        tmpVar=tmpVar && operationContext != null;
        List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
        ListSequence.fromList(result).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept"));
        return result;
      }
    }
.compute();
    if (queryResult != null) {
      for (      SNode item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
      }
    }
  }
  return result;
}
