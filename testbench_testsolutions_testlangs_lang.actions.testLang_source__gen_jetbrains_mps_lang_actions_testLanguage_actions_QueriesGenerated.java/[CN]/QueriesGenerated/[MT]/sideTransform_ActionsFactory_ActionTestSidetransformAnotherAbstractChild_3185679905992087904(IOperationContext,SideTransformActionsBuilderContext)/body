{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SAbstractConcept> parameterObjects=new Computable<Iterable<SAbstractConcept>>(){
      public Iterable<SAbstractConcept> compute(){
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x2c35cefefcaa0dd0L,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept"),_context.getModel())).where(new IWhereFilter<SAbstractConcept>(){
          public boolean accept(          SAbstractConcept it){
            return !(it.isAbstract());
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SAbstractConcept item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x2c35cefefcaa0dd0L,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            return SNodeOperations.replaceWithAnother(_context.getSourceNode(),SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x2c35cefefcaa0dd0L,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x2c35cefefcaa0dd0L,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
