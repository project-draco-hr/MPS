{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x47ad1fca2ec9ad4dL,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      SNode wrappedConcept=MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x47ad1fca2ee71badL,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").getDeclarationNode();
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          boolean tmpVar=nodeToWrap != null;
          tmpVar=tmpVar && _context.getParentNode() != null;
          tmpVar=tmpVar && _context.getCurrentTargetNode() != null;
          tmpVar=tmpVar && _context.getChildConcept() != null;
          tmpVar=tmpVar && model != null;
          tmpVar=tmpVar && operationContext != null;
          tmpVar=tmpVar && editorContext != null;
          SNode wrapperNode=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x47ad1fca2ec9ad4dL,"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper"));
          SLinkOperations.setTarget(wrapperNode,MetaAdapterFactory.getContainmentLink(0x737ed1fffa634ebcL,0xa834435499b23c64L,0x47ad1fca2ec9ad4dL,0x47ad1fca2ec9ad5fL,"childToWrap"),nodeToWrap);
          return wrapperNode;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,editorContext);
          return (returnSmallPart(nc) ? nc : wrappedNode);
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
