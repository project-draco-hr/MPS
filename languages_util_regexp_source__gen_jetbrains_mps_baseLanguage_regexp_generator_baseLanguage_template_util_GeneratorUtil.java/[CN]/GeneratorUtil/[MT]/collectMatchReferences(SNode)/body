{
  List<SNode> matches=new ArrayList<SNode>();
  for (  SNode ruc : SNodeOperations.getAncestors(enclosingNode,"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",true)) {
    ListSequence.<SNode>fromList(matches).addSequence(ListSequence.<SNode>fromList(collectNamedParentheses(ruc)));
  }
  for (  SNode ifst : SNodeOperations.getAncestors(enclosingNode,"jetbrains.mps.baseLanguage.structure.IfStatement",true)) {
    SNode toCollect=null;
    if (ListSequence.<SNode>fromList(SNodeOperations.getAncestors(enclosingNode,null,true)).contains(SLinkOperations.getTarget(ifst,"ifTrue",true))) {
      toCollect=SLinkOperations.getTarget(ifst,"condition",true);
    }
 else {
      for (      SNode elseif : SLinkOperations.getTargets(ifst,"elsifClauses",true)) {
        if (ListSequence.<SNode>fromList(SNodeOperations.getAncestors(enclosingNode,null,true)).contains(SLinkOperations.getTarget(elseif,"statementList",true))) {
          toCollect=SLinkOperations.getTarget(elseif,"condition",true);
          break;
        }
      }
    }
    if (toCollect != null) {
      for (      SNode expr : SNodeOperations.getDescendants(toCollect,"jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression",true,new String[]{})) {
        ListSequence.<SNode>fromList(matches).addSequence(ListSequence.<SNode>fromList(collectNamedParentheses(expr)));
      }
    }
  }
  return matches;
}
