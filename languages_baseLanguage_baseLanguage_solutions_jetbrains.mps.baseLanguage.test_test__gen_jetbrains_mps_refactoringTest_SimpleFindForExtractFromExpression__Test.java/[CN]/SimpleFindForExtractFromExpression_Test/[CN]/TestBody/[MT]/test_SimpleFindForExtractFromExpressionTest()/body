{
  this.addNodeById("8556882668095192253");
  this.addNodeById("8556882668095202132");
  ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("8556882668095192263"),"jetbrains.mps.baseLanguage.structure.DotExpression")));
  params.setName("print");
  ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
  SNode res=ref.doRefactor();
  for (  MethodMatch match : ListSequence.fromList(ref.getMatches())) {
    ExtractMethodRefactoring matchRef=ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));
    matchRef.replaceMatch(match,res);
  }
  Assert.assertEquals(null,NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("8556882668095192257"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("8556882668095202133"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
