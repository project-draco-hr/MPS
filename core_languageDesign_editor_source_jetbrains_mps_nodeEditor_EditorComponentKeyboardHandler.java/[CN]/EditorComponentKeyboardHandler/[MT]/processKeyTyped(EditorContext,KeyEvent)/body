{
  EditorComponent nodeEditor=editorContext.getNodeEditorComponent();
  nodeEditor.hideMessageToolTip();
  final EditorCell selectedCell=editorContext.getSelectedCell();
  if (selectedCell != null && selectedCell.processKeyTyped(keyEvent,false)) {
    keyEvent.consume();
    return true;
  }
  if (processKeyMaps(editorContext,keyEvent)) {
    return true;
  }
  CellActionType actionType=editorContext.getNodeEditorComponent().getActionType(keyEvent,editorContext);
  if (selectedCell != null) {
    boolean strictMatching=CellActionType.RIGHT_TRANSFORM.equals(actionType) || CellActionType.LEFT_TRANSFORM.equals(actionType);
    if (selectedCell.isErrorState() && strictMatching) {
      if (selectedCell.validate(strictMatching,false)) {
        return true;
      }
    }
    if (actionType != null) {
      if (selectedCell.executeAction(actionType)) {
        return true;
      }
    }
  }
  final boolean[] result=new boolean[1];
  ModelAccess.instance().executeCommand(new Runnable(){
    public void run(){
      result[0]=(selectedCell != null && selectedCell.processKeyTyped(keyEvent,true));
    }
  }
);
  if (result[0]) {
    keyEvent.consume();
    return true;
  }
  return false;
}
