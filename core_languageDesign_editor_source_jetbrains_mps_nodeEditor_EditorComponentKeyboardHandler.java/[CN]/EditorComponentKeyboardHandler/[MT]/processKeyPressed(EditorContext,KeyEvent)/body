{
  EditorComponent nodeEditor=editorContext.getNodeEditorComponent();
  nodeEditor.hideMessageToolTip();
  if (processKeyPressedOnCell(editorContext,keyEvent,false)) {
    return true;
  }
  if (processKeyMaps(editorContext,keyEvent)) {
    return true;
  }
  if (processSideDeletes(editorContext,keyEvent)) {
    return true;
  }
  CellActionType actionType=editorContext.getNodeEditorComponent().getActionType(keyEvent,editorContext);
  EditorCell selectedCell=editorContext.getSelectedCell();
  if (selectedCell != null) {
    if (actionType != null && actionType != CellActionType.DELETE) {
      if (selectedCell.executeAction(actionType)) {
        return true;
      }
    }
    if (!keyEvent.isConsumed()) {
      if (editorContext.getNodeEditorComponent().getNodeRangeSelection().isSelectionKeystroke(keyEvent)) {
        final NodeRangeSelection selection=editorContext.getNodeEditorComponent().getNodeRangeSelection();
        boolean b=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
          public Boolean compute(){
            return selection.activate(keyEvent);
          }
        }
);
        if (b)         return true;
      }
      if (selectedCell.processKeyPressed(keyEvent,true)) {
        return true;
      }
    }
    if (actionType == CellActionType.DELETE) {
      if (selectedCell.executeAction(actionType)) {
        return true;
      }
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_UP && keyEvent.isControlDown() && !keyEvent.isAltDown() && !keyEvent.isShiftDown()) {
    keyEvent.consume();
  }
  return false;
}
