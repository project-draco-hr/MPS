{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AtLeastNTimesRegexp;
case 1:
  return props_BinaryRegexp;
case 2:
return props_CharacterSymbolClassPart;
case 3:
return props_DotRegexp;
case 4:
return props_FindMatchExpression;
case 5:
return props_FindMatchStatement;
case 6:
return props_ForEachMatchStatement;
case 7:
return props_FromNToMTimesRegexp;
case 8:
return props_InlineRegexpExpression;
case 9:
return props_IntersectionSymbolClassPart;
case 10:
return props_IntervalSymbolClassPart;
case 11:
return props_LazyPlusRegexp;
case 12:
return props_LazyQuestionRegexp;
case 13:
return props_LazyStarRegexp;
case 14:
return props_LineEndRegexp;
case 15:
return props_LineStartRegexp;
case 16:
return props_LiteralReplacement;
case 17:
return props_LookRegexp;
case 18:
return props_MatchParensRegexp;
case 19:
return props_MatchRegexpExpression;
case 20:
return props_MatchRegexpOperation;
case 21:
return props_MatchRegexpStatement;
case 22:
return props_MatchVariableReference;
case 23:
return props_MatchVariableReferenceRegexp;
case 24:
return props_MatchVariableReferenceReplacement;
case 25:
return props_NTimesRegexp;
case 26:
return props_NegativeLookAheadRegexp;
case 27:
return props_NegativeLookBehindRegexp;
case 28:
return props_NegativeSymbolClassRegexp;
case 29:
return props_OrRegexp;
case 30:
return props_ParensRegexp;
case 31:
return props_PlusRegexp;
case 32:
return props_PositiveLookAheadRegexp;
case 33:
return props_PositiveLookBehindRegexp;
case 34:
return props_PositiveSymbolClassRegexp;
case 35:
return props_PredefinedSymbolClassDeclaration;
case 36:
return props_PredefinedSymbolClassRegexp;
case 37:
return props_PredefinedSymbolClassSymbolClassPart;
case 38:
return props_PredefinedSymbolClasses;
case 39:
return props_QuestionRegexp;
case 40:
return props_Regexp;
case 41:
return props_RegexpDeclaration;
case 42:
return props_RegexpDeclarationReferenceRegexp;
case 43:
return props_RegexpExpression;
case 44:
return props_RegexpUsingConstruction;
case 45:
return props_Regexps;
case 46:
return props_ReplaceBlock;
case 47:
return props_ReplaceRegexpOperation;
case 48:
return props_ReplaceWithRegexpExpression;
case 49:
return props_ReplaceWithRegexpOperation;
case 50:
return props_Replacement;
case 51:
return props_SeqRegexp;
case 52:
return props_SplitExpression;
case 53:
return props_SplitOperation;
case 54:
return props_StarRegexp;
case 55:
return props_StringLiteralRegexp;
case 56:
return props_SymbolClassPart;
case 57:
return props_SymbolClassRegexp;
case 58:
return props_SymbolClassRegexpAndPart;
case 59:
return props_UnaryRegexp;
case 60:
return props_UnicodeCharacterRegexp;
}
throw new IllegalStateException("Unknown concept " + c);
}
