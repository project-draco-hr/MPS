{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0kc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AtLeastNTimesRegexp;
      }
    break;
case 1:
  if (true) {
    return props_BinaryRegexp;
  }
break;
case 2:
if (true) {
return props_CharacterSymbolClassPart;
}
break;
case 3:
if (true) {
return props_DotRegexp;
}
break;
case 4:
if (true) {
return props_FindMatchExpression;
}
break;
case 5:
if (true) {
return props_FindMatchStatement;
}
break;
case 6:
if (true) {
return props_ForEachMatchStatement;
}
break;
case 7:
if (true) {
return props_FromNToMTimesRegexp;
}
break;
case 8:
if (true) {
return props_InlineRegexpExpression;
}
break;
case 9:
if (true) {
return props_IntersectionSymbolClassPart;
}
break;
case 10:
if (true) {
return props_IntervalSymbolClassPart;
}
break;
case 11:
if (true) {
return props_LazyPlusRegexp;
}
break;
case 12:
if (true) {
return props_LazyQuestionRegexp;
}
break;
case 13:
if (true) {
return props_LazyStarRegexp;
}
break;
case 14:
if (true) {
return props_LineEndRegexp;
}
break;
case 15:
if (true) {
return props_LineStartRegexp;
}
break;
case 16:
if (true) {
return props_LiteralReplacement;
}
break;
case 17:
if (true) {
return props_LookRegexp;
}
break;
case 18:
if (true) {
return props_MatchParensRegexp;
}
break;
case 19:
if (true) {
return props_MatchRegexpExpression;
}
break;
case 20:
if (true) {
return props_MatchRegexpOperation;
}
break;
case 21:
if (true) {
return props_MatchRegexpStatement;
}
break;
case 22:
if (true) {
return props_MatchVariableReference;
}
break;
case 23:
if (true) {
return props_MatchVariableReferenceRegexp;
}
break;
case 24:
if (true) {
return props_MatchVariableReferenceReplacement;
}
break;
case 25:
if (true) {
return props_NTimesRegexp;
}
break;
case 26:
if (true) {
return props_NegativeLookAheadRegexp;
}
break;
case 27:
if (true) {
return props_NegativeLookBehindRegexp;
}
break;
case 28:
if (true) {
return props_NegativeSymbolClassRegexp;
}
break;
case 29:
if (true) {
return props_OrRegexp;
}
break;
case 30:
if (true) {
return props_ParensRegexp;
}
break;
case 31:
if (true) {
return props_PlusRegexp;
}
break;
case 32:
if (true) {
return props_PositiveLookAheadRegexp;
}
break;
case 33:
if (true) {
return props_PositiveLookBehindRegexp;
}
break;
case 34:
if (true) {
return props_PositiveSymbolClassRegexp;
}
break;
case 35:
if (true) {
return props_PredefinedSymbolClassDeclaration;
}
break;
case 36:
if (true) {
return props_PredefinedSymbolClassRegexp;
}
break;
case 37:
if (true) {
return props_PredefinedSymbolClassSymbolClassPart;
}
break;
case 38:
if (true) {
return props_PredefinedSymbolClasses;
}
break;
case 39:
if (true) {
return props_QuestionRegexp;
}
break;
case 40:
if (true) {
return props_Regexp;
}
break;
case 41:
if (true) {
return props_RegexpDeclaration;
}
break;
case 42:
if (true) {
return props_RegexpDeclarationReferenceRegexp;
}
break;
case 43:
if (true) {
return props_RegexpExpression;
}
break;
case 44:
if (true) {
return props_RegexpUsingConstruction;
}
break;
case 45:
if (true) {
return props_Regexps;
}
break;
case 46:
if (true) {
return props_ReplaceBlock;
}
break;
case 47:
if (true) {
return props_ReplaceRegexpOperation;
}
break;
case 48:
if (true) {
return props_ReplaceWithRegexpExpression;
}
break;
case 49:
if (true) {
return props_ReplaceWithRegexpOperation;
}
break;
case 50:
if (true) {
return props_Replacement;
}
break;
case 51:
if (true) {
return props_SeqRegexp;
}
break;
case 52:
if (true) {
return props_SplitExpression;
}
break;
case 53:
if (true) {
return props_SplitOperation;
}
break;
case 54:
if (true) {
return props_StarRegexp;
}
break;
case 55:
if (true) {
return props_StringLiteralRegexp;
}
break;
case 56:
if (true) {
return props_SymbolClassPart;
}
break;
case 57:
if (true) {
return props_SymbolClassRegexp;
}
break;
case 58:
if (true) {
return props_SymbolClassRegexpAndPart;
}
break;
case 59:
if (true) {
return props_UnaryRegexp;
}
break;
case 60:
if (true) {
return props_UnicodeCharacterRegexp;
}
break;
default :
}
}
throw new IllegalStateException();
}
