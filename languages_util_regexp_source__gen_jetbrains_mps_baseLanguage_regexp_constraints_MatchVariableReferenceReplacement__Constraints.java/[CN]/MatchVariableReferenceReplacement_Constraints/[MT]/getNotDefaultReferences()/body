{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("match",new BaseReferenceConstraintsDescriptor("match",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return (_context.getSmartReference() ? "\\" + SPropertyOperations.getString(_context.getParameterNode(),"name") : SPropertyOperations.getString(_context.getParameterNode(),"name"));
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> matches=new ArrayList<SNode>();
          SNode top=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation",true,false);
          if ((top != null)) {
            BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(top,"search",true),"virtual_getString_1222432436326",new Object[]{matches});
          }
          return matches;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_v9mr27_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
