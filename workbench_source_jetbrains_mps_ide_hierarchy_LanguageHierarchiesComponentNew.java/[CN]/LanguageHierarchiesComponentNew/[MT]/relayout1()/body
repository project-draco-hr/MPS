{
  if (myRoots.isEmpty())   return;
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      int y=0;
      int x=0;
      int maxWidth=0;
      int nextLevelsCount=0;
      int curLevel=0;
      ConceptContainer prev=null;
      for (      List<ConceptContainer> list : myLevels) {
        for (        ConceptContainer conceptContainer : list) {
          conceptContainer.updateSize();
          if (!conceptContainer.getChildren().isEmpty()) {
            nextLevelsCount++;
            curLevel++;
          }
          conceptContainer.setLevel(curLevel);
          conceptContainer.setY((int)(y + SPACING * myScale));
          x+=conceptContainer.getWidth() + 2 * SPACING * myScale;
          prev=conceptContainer;
        }
        maxWidth=Math.max(x,maxWidth);
        x=0;
        curLevel=0;
        y+=(nextLevelsCount + 2) * SPACING * myScale + (prev == null ? 0 : prev.getHeight());
        nextLevelsCount=0;
      }
      maxWidth=Math.max(x,maxWidth);
      for (      List<ConceptContainer> containers : myLevels) {
        if (containers != null && !containers.isEmpty()) {
          int size=containers.size();
          float requiredSpace=0;
          for (          ConceptContainer conceptContainer : containers) {
            requiredSpace+=(conceptContainer.getWidth() + 2 * SPACING * myScale);
          }
          float wholeCredit=maxWidth - requiredSpace;
          int credit=(int)Math.round(wholeCredit / size);
          int x1=0;
          int space=Math.round(2 * SPACING * myScale + credit);
          for (          ConceptContainer conceptContainer : containers) {
            conceptContainer.setX(x1 + (space) / 2);
            x1+=(conceptContainer.getWidth() + space);
          }
        }
      }
      myWidth=maxWidth;
      myHeight=y;
    }
  }
);
}
