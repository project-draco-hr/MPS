{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.ReExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "re";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex real part";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.ImExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "im";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex imaginary part";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.AbsExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "abs";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex absolute value";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.ArgExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "arg";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex argument";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.ConjugateComplexExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "conj";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex conjugative";
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,"jetbrains.mps.samples.complex.structure.DegreeComplexExpression");
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
      return result;
    }
    public String getMatchingText(    String pattern){
      return "^";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex degree";
    }
  }
);
  return result;
}
