{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196260743057l,"jetbrains.mps.samples.complex.structure.ReExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "re";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex real part";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196261859224l,"jetbrains.mps.samples.complex.structure.ImExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "im";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex imaginary part";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196264034207l,"jetbrains.mps.samples.complex.structure.AbsExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "abs";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex absolute value";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196263843100l,"jetbrains.mps.samples.complex.structure.ArgExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "arg";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex argument";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196418881524l,"jetbrains.mps.samples.complex.structure.ConjugateComplexExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "conj";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex conjugative";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(new UUID(-61736462980330219l,-7283073916880922380l),1196421957108l,"jetbrains.mps.samples.complex.structure.DegreeComplexExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-61736462980330219l,-7283073916880922380l),1196260832413l,1196260892801l,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "^";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex degree";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression"),null));
    }
  }
);
  return result;
}
