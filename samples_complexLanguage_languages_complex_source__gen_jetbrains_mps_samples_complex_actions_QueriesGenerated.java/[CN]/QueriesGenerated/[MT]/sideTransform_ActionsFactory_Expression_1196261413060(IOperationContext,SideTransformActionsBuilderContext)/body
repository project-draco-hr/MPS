{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.ReExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "re";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex real part";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.ImExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "im";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex imaginary part";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.AbsExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "abs";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex absolute value";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.ArgExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "arg";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex argument";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.ConjugateComplexExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "conj";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex conjugative";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.samples.complex.structure.DegreeComplexExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
        SLinkOperations.setTarget(result,"complexExpression",_context.getSourceNode(),true);
        return result;
      }
      public String getMatchingText(      String pattern){
        return "^";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "complex degree";
      }
    }
);
  }
  return result;
}
