{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "re";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex real part";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686c35f98L,"jetbrains.mps.samples.complex.structure.ImExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "im";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex imaginary part";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686e48f9fL,"jetbrains.mps.samples.complex.structure.AbsExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "abs";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex absolute value";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686e1a51cL,"jetbrains.mps.samples.complex.structure.ArgExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "arg";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex argument";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x116901f57f4L,"jetbrains.mps.samples.complex.structure.ConjugateComplexExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "conj";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex conjugative";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode result=SModelOperations.createNewNode(_context.getModel(),null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x116904e45f4L,"jetbrains.mps.samples.complex.structure.DegreeComplexExpression"));
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),result);
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b3b49dL,0x11686b4a081L,"complexExpression"),_context.getSourceNode());
      return result;
    }
    public String getMatchingText(    String pattern){
      return "^";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "complex degree";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xff24ab03965e4d15L,0x9aed52dc276658f4L,0x11686b25791L,"jetbrains.mps.samples.complex.structure.ReExpression").getDeclarationNode(),null));
    }
  }
);
  return result;
}
