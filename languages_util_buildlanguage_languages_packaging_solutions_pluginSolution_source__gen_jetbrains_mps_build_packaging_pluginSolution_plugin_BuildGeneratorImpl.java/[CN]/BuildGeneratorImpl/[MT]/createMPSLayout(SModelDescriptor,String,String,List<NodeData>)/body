{
  SNode mpsLayout=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Layout",null);
  SModel targetSModel=targetModelDescriptor.getSModel();
  SModelOperations.addRootNode(targetSModel,mpsLayout);
  SPropertyOperations.set(mpsLayout,"name",name);
  SNode basedirPath;
  String result=MacrosFactory.mpsHomeMacros().shrinkPath(basedir,new File("")).replace("\\",File.separator);
  int index=result.lastIndexOf("}");
  if (index > -1) {
    String macro=result.substring(result.indexOf("{") + 1,index);
    basedirPath=PackagingLanguageGenerator.createBasedirPath(macro,result.substring(index + 2));
  }
 else {
    basedirPath=PackagingLanguageGenerator.createBasedirPath("",basedir);
  }
  SLinkOperations.setTarget(mpsLayout,"baseDirectory",basedirPath,true);
  SLinkOperations.setTarget(mpsLayout,"scriptsDirectory",new BuildGeneratorImpl.QuotationClass_un708i_a0a0n0f().createNode(Layout_Behavior.getBasedirName_1226509010730()),true);
  SLinkOperations.setTarget(mpsLayout,"deployDirectory",new BuildGeneratorImpl.QuotationClass_un708i_a0a0o0f().createNode(Layout_Behavior.getBasedirName_1226509010730()),true);
  SPropertyOperations.set(mpsLayout,"compile","" + (true));
  SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getTargets(mpsLayout,"configuration",true)).first(),"name","default");
  SNode zip=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Zip",null);
  SLinkOperations.setTarget(zip,"title",PackagingLanguageGenerator.createSimpleString(name + ".zip"),true);
  ListSequence.fromList(SLinkOperations.getTargets(mpsLayout,"component",true)).addElement(zip);
  SNode folder=PackagingLanguageGenerator.createFolder(name);
  ListSequence.fromList(SLinkOperations.getTargets(zip,"entry",true)).addElement(folder);
  BuildGeneratorImpl.createContent(selectedData,folder,targetSModel);
  return mpsLayout;
}
