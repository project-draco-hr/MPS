{
  Project project=myEnvironment.getProject();
  List<ITestNodeWrapper> nodeWrappers=myRunConfiguration.getJUnitSettings().getTests(ProjectHelper.toMPSProject(project));
  JUnitProcessPack processPack;
  JUnitLightExecutor lightExecutor=new JUnitLightExecutor(nodeWrappers,project);
  if (myRunConfiguration.getJUnitSettings().getLightExec() && lightExecutor.accept()) {
    processPack=lightExecutor.execute();
  }
 else {
    TestRunState runState=new TestRunState(nodeWrappers);
    TestEventsDispatcher eventsDispatcher=new TestEventsDispatcher(runState);
    final int runId=TempRunIdManager.getInstance().acquireId();
    String runIdString="-D" + CachesUtil.PROPERTY_RUN_ID + "=\""+ runId+ "\"";
    JavaRunParameters_Configuration javaRunParams=myRunConfiguration.getJavaRunParameters();
    JavaRunParameters parameters=javaRunParams.getJavaRunParameters().clone();
    parameters.setVmOptions(javaRunParams.getJavaRunParameters().getVmOptions() + " " + runIdString);
    ProcessHandler process=new Junit_Command().createProcess(nodeWrappers,parameters);
    process.addProcessListener(new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent p0){
        TempRunIdManager.getInstance().releaseId(runId);
      }
    }
);
    processPack=new JUnitProcessPacker(project,runState,eventsDispatcher).packProcess(process);
  }
  ProcessHandler process=processPack.getProcess();
  final UnitTestViewComponent testViewComponent=processPack.getTestViewComponent();
  ProcessListener listener=processPack.getListener();
  _FunctionTypes._void_P0_E0 disposeHandler=new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      testViewComponent.dispose();
    }
  }
;
{
    ProcessHandler _processHandler=process;
    _processHandler.addProcessListener(listener);
    return new DefaultExecutionResult(_processHandler,new DefaultExecutionConsole(testViewComponent,disposeHandler));
  }
}
