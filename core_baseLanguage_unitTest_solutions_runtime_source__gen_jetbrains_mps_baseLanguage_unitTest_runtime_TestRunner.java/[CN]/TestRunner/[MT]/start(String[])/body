{
  List<Test> tests=ListSequence.fromList(new ArrayList<Test>());
  for (int i=0; i < argv.length; i++) {
    if ("-c".equals(argv[i])) {
      i++;
      Test test=this.getTest(argv[i]);
      ListSequence.fromList(tests).addElement(test);
    }
 else     if ("-m".equals(argv[i])) {
      i++;
      String s=argv[i];
      int index=s.lastIndexOf('.');
      String testCase=s.substring(0,index);
      String method=s.substring(index + 1);
      Class<? extends TestCase> testClass=(Class<? extends TestCase>)this.loadSuiteClass(testCase);
      Test test=TestSuite.createTest(testClass,method);
      ListSequence.fromList(tests).addElement(test);
    }
  }
  TestResult testResult=new TestResult(){
    protected void run(    TestCase test){
      try {
        Method method=test.getClass().getMethod(test.getName());
        boolean isAbstractClass=Modifier.isAbstract(method.getDeclaringClass().getModifiers());
        boolean isIgnored=method.getAnnotation(Ignore.class) != null;
        if (isAbstractClass || isIgnored) {
          return;
        }
      }
 catch (      NoSuchMethodException e) {
        e.printStackTrace();
        return;
      }
      super.run(test);
    }
  }
;
  CommandOutputStream out=new CommandOutputStream(System.out);
  CommandOutputStream err=new CommandOutputStream(System.err);
  System.setOut(new PrintStream(out));
  System.setErr(new PrintStream(err));
  testResult.addListener(new MyTestListener(out,err));
  for (  Test test : ListSequence.fromList(tests)) {
    if (test == null) {
      System.err.println("Can't run. Test is Null");
      continue;
    }
    if (test.countTestCases() == 0) {
      System.err.println("No tests found in " + test.getClass().getName());
      continue;
    }
    test.run(testResult);
  }
}
