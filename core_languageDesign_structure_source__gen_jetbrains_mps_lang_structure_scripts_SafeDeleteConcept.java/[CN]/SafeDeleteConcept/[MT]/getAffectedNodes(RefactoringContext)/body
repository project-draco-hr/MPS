{
  refactoringContext.setParameter("nodeAspects",AbstractConceptDeclaration_Behavior.call_findAllAspects_7754459869734028917(refactoringContext.getSelectedNode(),GlobalScope.getInstance()));
  SearchResults searchResults=new SearchResults();
  searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressIndicator(),refactoringContext.getSelectedNode(),GlobalScope.getInstance(),"jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder","jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
  for (  SNode aspect : ListSequence.fromList(((List<SNode>)((List)refactoringContext.getParameter("nodeAspects"))))) {
    searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressIndicator(),aspect,GlobalScope.getInstance(),"jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
  }
  List<SearchResult<SNode>> searchResultsList=searchResults.getSearchResults();
  List<SearchResult<SNode>> searchResultsCopy=ListSequence.fromListWithValues(new ArrayList<SearchResult<SNode>>(),searchResultsList);
  for (  SearchResult<SNode> searchResult : searchResultsCopy) {
    SNode containingRoot=searchResult.getObject().getContainingRoot();
    if (((List)refactoringContext.getParameter("nodeAspects")).contains(containingRoot)) {
      searchResults.remove(searchResult);
    }
  }
  return searchResults;
}
