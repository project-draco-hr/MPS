{
  if (SLinkOperations.getTarget(tvr,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration")) == SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(adapterFunType,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4d5371L,"resultType")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"))) {
    SNodeOperations.replaceWithAnother(tvr,ClassifierTypeUtil.getTypeCoercedToClassifierType(SNodeOperations.copyNode(SLinkOperations.getTarget(targetFunType,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4d5371L,"resultType")))));
  }
 else {
    Iterator<SNode> adapterParamIt=ListSequence.fromList(SLinkOperations.getChildren(adapterFunType,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4e013cL,"parameterType"))).iterator();
    Iterator<SNode> targetParamIt=ListSequence.fromList(SLinkOperations.getChildren(targetFunType,MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,0x1174a4e013cL,"parameterType"))).iterator();
    while (adapterParamIt.hasNext() && targetParamIt.hasNext()) {
      SNode targetParam=targetParamIt.next();
      if (SLinkOperations.getTarget(tvr,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration")) == SLinkOperations.getTarget(SNodeOperations.as(adapterParamIt.next(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration"))) {
        SNodeOperations.replaceWithAnother(tvr,ClassifierTypeUtil.getTypeCoercedToClassifierType(SNodeOperations.copyNode(targetParam)));
        break;
      }
    }
  }
}
