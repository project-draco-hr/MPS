{
  myCommandQueue.runTask(new Runnable(){
    public void run(){
      updateModelHighlighting(model.getModelDescriptor());
      final SNodeId affectedNodeId=change.getAffectedNodeId();
      if (affectedNodeId == null) {
        return;
      }
      if (model.isDisposed()) {
        return;
      }
      SNode node=model.getNodeById(affectedNodeId);
      final Wrappers._T<SNode> nodeToDecrement=new Wrappers._T<SNode>(node);
      if (nodeToDecrement.value == null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            nodeToDecrement.value=findNearestBaseAncestor(affectedNodeId,model);
          }
        }
);
      }
      if (nodeToDecrement.value == null && change instanceof NewNodeChange) {
        final SNodeId parentId=((NewNodeChange)change).getNodeParent();
        nodeToDecrement.value=model.getNodeById(parentId);
        if (nodeToDecrement.value == null && parentId != null) {
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              nodeToDecrement.value=findNearestBaseAncestor(parentId,model);
            }
          }
);
        }
      }
      if (nodeToDecrement.value != null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            SNode ancestor : ListSequence.fromList(SNodeOperations.getAncestors(nodeToDecrement.value,null,true))) {
              myChangeCountForNode.decrement(ancestor);
            }
          }
        }
);
      }
      if (node == null) {
        return;
      }
      if (change instanceof SetPropertyChange) {
        myPropertyChangeCountForNode.decrement(node);
      }
 else       if (change instanceof SetReferenceChange) {
        myReferenceChangeCountForNode.decrement(node);
      }
      if (change instanceof NewNodeChange) {
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          unhighlightTreeNode(treeNode);
        }
      }
 else       if (change instanceof SetPropertyChange) {
        String propertyName=((SetPropertyChange)change).getProperty();
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          PropertyTreeNode propertyTreeNode=MPSTreeUtils.findPropertyTreeNode(treeNode,propertyName);
          if (propertyTreeNode != null) {
            unhighlightTreeNode(propertyTreeNode);
          }
        }
      }
 else       if (change instanceof SetReferenceChange) {
        String role=((SetReferenceChange)change).getRole();
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          ReferenceTreeNode referenceTreeNode=MPSTreeUtils.findReferenceTreeNode(treeNode,role);
          if (referenceTreeNode != null) {
            unhighlightTreeNode(referenceTreeNode);
          }
        }
      }
    }
  }
);
}
