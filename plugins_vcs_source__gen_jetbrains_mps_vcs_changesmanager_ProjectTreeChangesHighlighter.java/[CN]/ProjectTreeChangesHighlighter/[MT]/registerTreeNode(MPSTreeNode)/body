{
  if (treeNode instanceof SModelTreeNode) {
    final SModelTreeNode sModelTreeNode=((SModelTreeNode)treeNode);
    final SModelDescriptor modelDescriptor=sModelTreeNode.getSModelDescriptor();
    if (SModelStereotype.isUserModel(modelDescriptor)) {
      myCommandQueue.runTask(new Runnable(){
        public void run(){
          if (!(MapSequence.fromMap(mySModelDescriptorsToTreeNodes).containsKey(modelDescriptor))) {
            MapSequence.fromMap(mySModelDescriptorsToTreeNodes).put(modelDescriptor,ListSequence.fromList(new ArrayList<SModelTreeNode>()));
            ModelChangesManager modelChangesManager=myChangesManager.getModelChangesManager(modelDescriptor);
            for (            OldChange change : ListSequence.fromList(modelChangesManager.getChangeList())) {
              highlightChange(change,sModelTreeNode.getSModel());
            }
            modelChangesManager.addChangeListener(myChangeListener);
          }
          ListSequence.fromList(MapSequence.fromMap(mySModelDescriptorsToTreeNodes).get(modelDescriptor)).addElement(sModelTreeNode);
        }
      }
);
    }
  }
  if (!(treeNode instanceof SNodeTreeNode)) {
    return;
  }
  SNodeTreeNode sNodeTreeNode=((SNodeTreeNode)treeNode);
  final SNode node=sNodeTreeNode.getSNode();
  if (node != null) {
    if (MapSequence.fromMap(mySNodesToTreeNodes).containsKey(node)) {
      ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node)).addElement(sNodeTreeNode);
    }
 else {
      MapSequence.fromMap(mySNodesToTreeNodes).put(node,ListSequence.fromListAndArray(new ArrayList<SNodeTreeNode>(),sNodeTreeNode));
      myCommandQueue.runTask(new Runnable(){
        public void run(){
          if (node.isDisposed()) {
            return;
          }
          final Wrappers._T<SModel> model=new Wrappers._T<SModel>();
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              model.value=SNodeOperations.getModel(node);
            }
          }
);
          if (model.value.getModelDescriptor() == null) {
            return;
          }
          ModelChangesManager modelChangesManager=myChangesManager.getModelChangesManager(model.value);
          if (modelChangesManager != null) {
            modelChangesManager.setEnabled(true);
          }
        }
      }
);
    }
  }
}
