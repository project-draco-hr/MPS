{
  if (EXTRA_CHECKS_ENABLED && treeNode.isRoot()) {
    for (    MPSTreeNode descendant : Sequence.<MPSTreeNode>fromIterable(MPSTreeUtils.getDescendants(treeNode))) {
      if (MapSequence.fromMap(myPrimaryMessageForTreeNode).containsKey(descendant)) {
        MapSequence.fromMap(myPrimaryMessageForTreeNode).removeKey(descendant);
      }
    }
  }
  if (treeNode instanceof SModelTreeNode) {
    final SModelTreeNode sModelTreeNode=((SModelTreeNode)treeNode);
    final SModelDescriptor modelDescriptor=sModelTreeNode.getSModelDescriptor();
    if (modelDescriptor instanceof EditableSModelDescriptor && SModelStereotype.isUserModel(modelDescriptor)) {
      myCommandQueue.runTask(new Runnable(){
        public void run(){
          if (MapSequence.fromMap(mySModelDescriptorsToTreeNodes).containsKey(modelDescriptor)) {
            ListSequence.<SModelTreeNode>fromList(MapSequence.<SModelDescriptor,List<SModelTreeNode>>fromMap(mySModelDescriptorsToTreeNodes).get(modelDescriptor)).removeElement(sModelTreeNode);
            if (ListSequence.<SModelTreeNode>fromList(MapSequence.<SModelDescriptor,List<SModelTreeNode>>fromMap(mySModelDescriptorsToTreeNodes).get(modelDescriptor)).isEmpty()) {
              MapSequence.fromMap(mySModelDescriptorsToTreeNodes).removeKey(modelDescriptor);
              ModelChangesManager modelChangesManager=myChangesManager.getModelChangesManager((EditableSModelDescriptor)modelDescriptor);
              modelChangesManager.removeChangeListener(myChangeListener);
            }
          }
        }
      }
);
    }
  }
  if (!(treeNode instanceof SNodeTreeNode)) {
    return;
  }
  SNodeTreeNode sNodeTreeNode=((SNodeTreeNode)treeNode);
  SNode node=sNodeTreeNode.getSNode();
  if (node != null) {
    if (MapSequence.fromMap(mySNodesToTreeNodes).containsKey(node)) {
      ListSequence.<SNodeTreeNode>fromList(MapSequence.<SNode,List<SNodeTreeNode>>fromMap(mySNodesToTreeNodes).get(node)).removeElement(sNodeTreeNode);
      if (ListSequence.<SNodeTreeNode>fromList(MapSequence.<SNode,List<SNodeTreeNode>>fromMap(mySNodesToTreeNodes).get(node)).isEmpty()) {
        MapSequence.fromMap(mySNodesToTreeNodes).removeKey(node);
      }
    }
  }
}
