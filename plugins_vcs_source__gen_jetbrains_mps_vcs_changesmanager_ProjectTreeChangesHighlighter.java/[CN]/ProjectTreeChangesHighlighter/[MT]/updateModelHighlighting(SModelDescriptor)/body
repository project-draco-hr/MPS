{
  if (!(modelDescriptor instanceof EditableSModelDescriptor) || !(SModelStereotype.isUserModel(modelDescriptor))) {
    return;
  }
  myCommandQueue.runTask(new Runnable(){
    public void run(){
      FileStatus fileStatus=myChangesManager.getModelChangesManager((EditableSModelDescriptor)modelDescriptor).getFileStatus();
      Color color=check_ybywwq_a0b0a0a2a01(fileStatus);
      for (      SModelTreeNode modelTreeNode : ListSequence.fromList(MapSequence.fromMap(mySModelDescriptorsToTreeNodes).get(modelDescriptor))) {
        Set<TreeMessage> wereMessages=modelTreeNode.removeTreeMessages(ProjectTreeChangesHighlighter.this,true);
        if (EXTRA_CHECKS_ENABLED && !(wereMessages.isEmpty()) && fileStatus == FileStatus.NOT_CHANGED) {
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              SModel model=modelDescriptor.getSModel();
              if (model != null && !(model.isDisposed())) {
                final List<SNodeTreeNode> treeNodes=ListSequence.fromList(new ArrayList<SNodeTreeNode>());
                for (                SNode node : Sequence.fromIterable(model.nodes())) {
                  myChangeCountForNode.zeroizeKey(node);
                  myPropertyChangeCountForNode.zeroizeKey(node);
                  myReferenceChangeCountForNode.zeroizeKey(node);
                  ListSequence.fromList(treeNodes).addSequence(ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node)));
                }
                if (ListSequence.fromList(treeNodes).isNotEmpty()) {
                  ThreadUtils.runInUIThreadNoWait(new Runnable(){
                    public void run(){
                      ListSequence.fromList(treeNodes).visitAll(new IVisitor<SNodeTreeNode>(){
                        public void visit(                        SNodeTreeNode tn){
                          tn.removeTreeMessages(ProjectTreeChangesHighlighter.this,true);
                        }
                      }
);
                    }
                  }
);
                }
              }
            }
          }
);
        }
        if (color != null) {
          modelTreeNode.addTreeMessage(new TreeMessage(color,null,ProjectTreeChangesHighlighter.this));
        }
      }
    }
  }
);
}
