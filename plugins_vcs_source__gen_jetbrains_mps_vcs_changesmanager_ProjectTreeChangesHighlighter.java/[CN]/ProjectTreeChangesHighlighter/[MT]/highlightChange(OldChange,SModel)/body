{
  myCommandQueue.runTask(new Runnable(){
    public void run(){
      updateModelHighlighting(model.getModelDescriptor());
      final SNodeId affectedNodeId=change.getAffectedNodeId();
      if (affectedNodeId == null) {
        return;
      }
      SNode node=model.getNodeById(affectedNodeId);
      final Wrappers._T<SNode> nodeToIncrement=new Wrappers._T<SNode>(node);
      if (nodeToIncrement.value == null) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            nodeToIncrement.value=findNearestBaseAncestor(affectedNodeId,model);
          }
        }
);
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          for (          SNode ancestor : ListSequence.fromList(SNodeOperations.getAncestors(nodeToIncrement.value,null,true))) {
            myChangeCountForNode.increment(ancestor);
          }
        }
      }
);
      if (node == null) {
        return;
      }
      if (change instanceof OldSetPropertyChange) {
        myPropertyChangeCountForNode.increment(node);
      }
 else       if (change instanceof OldSetReferenceChange) {
        myReferenceChangeCountForNode.increment(node);
      }
      if (change instanceof NewNodeChange) {
        ModelChangesManager changesManager=myChangesManager.getModelChangesManager(model);
        if (changesManager == null) {
          return;
        }
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          highlightTreeNodeWithMessage(treeNode,new ProjectTreeChangesHighlighter.PrimaryMessage(getColor(change,changesManager.getFileStatus())));
        }
      }
 else       if (change instanceof OldSetPropertyChange) {
        String propertyName=((OldSetPropertyChange)change).getProperty();
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          PropertyTreeNode propertyTreeNode=MPSTreeUtils.findPropertyTreeNode(treeNode,propertyName);
          if (propertyTreeNode != null) {
            highlightTreeNodeWithMessage(propertyTreeNode,new ProjectTreeChangesHighlighter.PrimaryMessage(getColor(change)));
          }
        }
      }
 else       if (change instanceof OldSetReferenceChange) {
        String role=((OldSetReferenceChange)change).getRole();
        for (        SNodeTreeNode treeNode : ListSequence.fromList(MapSequence.fromMap(mySNodesToTreeNodes).get(node))) {
          ReferenceTreeNode referenceTreeNode=MPSTreeUtils.findReferenceTreeNode(treeNode,role);
          if (referenceTreeNode != null) {
            highlightTreeNodeWithMessage(referenceTreeNode,new ProjectTreeChangesHighlighter.PrimaryMessage(getColor(change)));
          }
        }
      }
    }
  }
);
}
