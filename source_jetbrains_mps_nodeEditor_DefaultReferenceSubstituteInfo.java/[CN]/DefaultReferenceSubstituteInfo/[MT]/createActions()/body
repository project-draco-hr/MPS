{
  List<INodeSubstituteItem> list=new LinkedList<INodeSubstituteItem>();
  List<SemanticNode> targetSemanticNodes=createTargetNodesList();
  for (  final SemanticNode targetNode : targetSemanticNodes) {
    list.add(new AbstractNodeSubstituteItem(){
      public String getMatchingText(      String pattern){
        return targetNode.getName();
      }
      public String getDescriptionText(      String pattern){
        if (targetNode instanceof SemanticTypeDeclaration) {
          return EditorUtil.presentableNameForType((SemanticTypeDeclaration)targetNode);
        }
        return JavaNameUtil.shortName(targetNode.getClass().getName());
      }
      public SemanticNode doSubstitute(      String pattern){
        Cardinality sourceCardinality=myLinkDeclaration.getSourceCardinality();
        if (sourceCardinality == Cardinality._1 || sourceCardinality == Cardinality._0_1) {
          mySourceNode.setReferent(myLinkDeclaration.getRole(),targetNode);
        }
        return null;
      }
    }
);
  }
  return list;
}
