{
  List<INodeSubstituteItem> list=new LinkedList<INodeSubstituteItem>();
  List<SemanticNode> targetSemanticNodes=createTargetNodesList();
  for (  final SemanticNode targetNode : targetSemanticNodes) {
    list.add(new AbstractNodeSubstituteItem(){
      public String getMatchingText(      String pattern){
        if (targetNode instanceof LinkDeclaration) {
          return ((LinkDeclaration)targetNode).getRole();
        }
        return targetNode.getName();
      }
      public String getDescriptionText(      String pattern){
        if (targetNode instanceof LinkDeclaration) {
          SemanticNode containingRoot=targetNode.getContainingRoot();
          return containingRoot.getName() + " (" + containingRoot.getModel().getFQName()+ ")";
        }
        return targetNode.getModel().getFQName();
      }
      public SemanticNode doSubstitute(      String pattern){
        mySourceNode.setReferent(myGenuineLinkDeclaration.getRole(),targetNode);
        return null;
      }
    }
);
  }
  return list;
}
