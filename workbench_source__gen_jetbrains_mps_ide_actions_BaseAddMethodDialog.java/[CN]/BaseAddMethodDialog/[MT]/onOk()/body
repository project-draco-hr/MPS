{
  dispose();
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      List<TreePath> paths=new ArrayList<TreePath>(Arrays.asList(myTree.getSelectionPaths()));
      List<BaseAddMethodDialog.MethodTreeNode> methodNodes=ListSequence.<BaseAddMethodDialog.MethodTreeNode>fromList(new ArrayList<BaseAddMethodDialog.MethodTreeNode>());
      for (      TreePath path : paths) {
        if (path.getLastPathComponent() instanceof BaseAddMethodDialog.MethodTreeNode) {
          ListSequence.<BaseAddMethodDialog.MethodTreeNode>fromList(methodNodes).addElement((BaseAddMethodDialog.MethodTreeNode)path.getLastPathComponent());
        }
      }
      Collections.sort(methodNodes,new Comparator<BaseAddMethodDialog.MethodTreeNode>(){
        public int compare(        BaseAddMethodDialog.MethodTreeNode m1,        BaseAddMethodDialog.MethodTreeNode m2){
          return compareMethods(m1.getMethod(),m2.getMethod());
        }
      }
);
      List<SNode> methods=doAddMethods(ListSequence.<BaseAddMethodDialog.MethodTreeNode>fromList(methodNodes).reversedList());
      if (methods.isEmpty()) {
        return;
      }
      if (methods.size() == 1) {
        SNode node=methods.get(0);
        myContext.selectAfter(node);
      }
 else {
        SNode first=methods.get(methods.size() - 1);
        SNode last=methods.get(0);
        myContext.select(first);
        myContext.selectRange(first,last);
      }
    }
  }
);
}
