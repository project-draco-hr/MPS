{
  Map<String,BaseMethodDeclaration> possibleMethods=new LinkedHashMap<String,BaseMethodDeclaration>();
  for (  BaseMethodDeclaration method : this.collectImplementableMethods()) {
    String signature=BaseConcept_Behavior.call_getPresentation_1213877396640(method.getNode());
    if (possibleMethods.containsKey(signature)) {
      possibleMethods.put(signature,method);
    }
 else {
      possibleMethods.put(signature,method);
    }
  }
  MultiMap<INodeAdapter,BaseMethodDeclaration> methodsByContainer=new MultiMap<INodeAdapter,BaseMethodDeclaration>();
  for (  BaseMethodDeclaration method : possibleMethods.values()) {
    methodsByContainer.putValue(this.getContainer(method),method);
  }
  List<INodeAdapter> containers=new ArrayList<INodeAdapter>(methodsByContainer.keySet());
  Collections.sort(containers,new Comparator<INodeAdapter>(){
    public int compare(    INodeAdapter o1,    INodeAdapter o2){
      return BaseAddMethodDialog.this.compareContainers(o1,o2);
    }
  }
);
  TextTreeNode root=new TextTreeNode("Methods");
  for (  INodeAdapter container : containers) {
    BaseAddMethodDialog.NodeTreeNode node=new BaseAddMethodDialog.NodeTreeNode(container);
    List<BaseMethodDeclaration> methods=new ArrayList<BaseMethodDeclaration>(methodsByContainer.get(container));
    Collections.sort(methods,new Comparator<BaseMethodDeclaration>(){
      public int compare(      BaseMethodDeclaration m1,      BaseMethodDeclaration m2){
        return BaseAddMethodDialog.this.compareMethods(m1,m2);
      }
    }
);
    for (    BaseMethodDeclaration method : methods) {
      node.add(new BaseAddMethodDialog.MethodTreeNode(method));
    }
    root.add(node);
  }
  return root;
}
