{
  MultiMap<SNode,SNode> methodsByContainer=new MultiMap<SNode,SNode>();
  for (  SNode method : ListSequence.<SNode>fromList(collectImplementableMethods())) {
    methodsByContainer.putValue(getContainer(method),method);
  }
  List<SNode> containers=new ArrayList<SNode>();
  ListSequence.<SNode>fromList(containers).addSequence(SetSequence.<SNode>fromSet(methodsByContainer.keySet()));
  TextTreeNode root=new TextTreeNode("Methods");
  for (  SNode container : ListSequence.<SNode>fromList(containers).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      return compareContainers(a,b);
    }
  }
,true)) {
    List<SNode> methods=new ArrayList<SNode>();
    ListSequence.<SNode>fromList(methods).addSequence(Sequence.<SNode>fromIterable(methodsByContainer.get(container)));
    BaseAddMethodDialog.NodeTreeNode node=new BaseAddMethodDialog.NodeTreeNode(container);
    for (    SNode method : ListSequence.<SNode>fromList(methods).sort(new Comparator<SNode>(){
      public int compare(      SNode a,      SNode b){
        return compareMethods(a,b);
      }
    }
,true)) {
      node.add(new BaseAddMethodDialog.MethodTreeNode(method));
    }
    root.add(node);
  }
  return root;
}
