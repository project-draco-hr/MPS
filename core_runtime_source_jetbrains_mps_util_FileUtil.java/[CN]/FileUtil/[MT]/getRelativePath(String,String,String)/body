{
  String[] base=basePath.split(Pattern.quote(pathSeparator));
  String[] target=targetPath.split(Pattern.quote(pathSeparator));
  StringBuffer common=new StringBuffer();
  int commonIndex=0;
  while (commonIndex < target.length && commonIndex < base.length && target[commonIndex].equals(base[commonIndex])) {
    common.append(target[commonIndex]).append(pathSeparator);
    commonIndex++;
  }
  if (commonIndex == 0) {
    throw new PathResolutionException("No common path element found for '" + targetPath + "' and '"+ basePath+ "'");
  }
  if (target.length == commonIndex && base.length == target.length) {
    return "";
  }
  boolean baseIsFile=true;
  File baseResource=new File(basePath);
  if (baseResource.exists()) {
    baseIsFile=baseResource.isFile();
  }
 else   if (basePath.endsWith(pathSeparator)) {
    baseIsFile=false;
  }
  StringBuffer relative=new StringBuffer();
  if (base.length != commonIndex) {
    int numDirsUp=baseIsFile ? base.length - commonIndex - 1 : base.length - commonIndex;
    for (int i=0; i < numDirsUp; i++) {
      relative.append("..").append(pathSeparator);
    }
  }
  relative.append(targetPath.substring(common.length()));
  return relative.toString();
}
