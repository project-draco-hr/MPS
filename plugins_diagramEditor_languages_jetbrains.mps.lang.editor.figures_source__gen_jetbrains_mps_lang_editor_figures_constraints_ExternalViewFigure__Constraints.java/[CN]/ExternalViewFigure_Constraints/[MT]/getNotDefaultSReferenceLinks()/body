{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xd7722d504b934c3aL,0xae061903d05f95a7L,0x1e3b9cbb9f7493c2L,0x1e3b9cbb9f7493f7L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xd7722d504b934c3aL,0xae061903d05f95a7L,0x1e3b9cbb9f7493c2L,0x1e3b9cbb9f7493f7L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8qo5s5_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ExternalViewClassifierScope(_context.getModel());
        }
      }
;
    }
  }
);
  return references;
}
