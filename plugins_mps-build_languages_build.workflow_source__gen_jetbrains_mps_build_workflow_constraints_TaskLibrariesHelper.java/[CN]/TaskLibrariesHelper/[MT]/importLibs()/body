{
  Set<SNode> libsSet=new LinkedHashSet<SNode>();
  for (  SNode tldep : SLinkOperations.getChildren(project,MetaAdapterFactory.getContainmentLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6271L,0x6565da114725c6b7L,"imports"))) {
    libsSet.add(SLinkOperations.getTarget(tldep,MetaAdapterFactory.getReferenceLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x6565da1147260537L,0x6565da1147260538L,"target")));
  }
  closure(libsSet);
  List<SNode> libs=new ArrayList<SNode>(libsSet);
  for (  SNode lib : libs) {
    for (    SNode n : SNodeUtil.getDescendants(lib)) {
      for (      SReference ref : SNodeOperations.getReferences(n)) {
        SNode targetNode=SNodeOperations.getTargetNodeSilently(ref);
        if (targetNode == null) {
          genContext.showErrorMessage(n,"cannot import library `" + SPropertyOperations.getString(lib,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "': unresolved reference");
        }
 else         if (!(libsSet.contains(targetNode.getContainingRoot()))) {
          genContext.showErrorMessage(n,"cannot import library `" + SPropertyOperations.getString(lib,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "': broken reference, target is not imported");
        }
      }
    }
  }
  List<SNode> parts=ListSequence.fromList(libs).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x6565da114724ce92L,0x6565da114724ce94L,"parts"));
    }
  }
).toListSequence();
  Map<SNode,SNode> map=new HashMap<SNode,SNode>();
  parts=(List<SNode>)CopyUtil.copy((List<SNode>)parts,map);
  ListSequence.fromList(SLinkOperations.getChildren(project,MetaAdapterFactory.getContainmentLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6271L,0x6565da114725c6b7L,"imports"))).clear();
  for (  SNode n : SNodeUtil.getDescendants(project)) {
    for (    SReference ref : n.getReferences()) {
      SNode targetNode=SNodeOperations.getTargetNodeSilently(ref);
      if (map.containsKey(targetNode)) {
        SNodeAccessUtil.setReferenceTarget(n,ref.getRole(),map.get(targetNode));
      }
 else {
        SNode containingRoot=targetNode.getContainingRoot();
        if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(containingRoot,MetaAdapterFactory.getConcept(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x6565da114724ce92L,"jetbrains.mps.build.workflow.structure.BwfTaskLibrary"))) {
          genContext.showErrorMessage(n,"task library is not imported");
        }
      }
    }
  }
  for (int i=parts.size() - 1; i >= 0; i--) {
    ListSequence.fromList(SLinkOperations.getChildren(project,MetaAdapterFactory.getContainmentLink(0x698a8d22a10447a0L,0xba8d10e3ec237f13L,0x2670d5989d5a6271L,0x2670d5989d5ace60L,"parts"))).insertElement(0,parts.get(i));
  }
}
