{
  SNode nonEmpty=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x113bef3a464L,"jetbrains.mps.lang.editor.structure.CellModel_NonEmptyProperty")),node);
  SLinkOperations.setTarget(nonEmpty,MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10964446123L,0x10973779681L,"relationDeclaration"),SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10964446123L,0x10973779681L,"relationDeclaration")));
  SLinkOperations.setTarget(node,MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10964446123L,0x10973779681L,"relationDeclaration"),null);
  for (  SNode child : ListSequence.fromList(jetbrains.mps.util.SNodeOperations.getChildren(node))) {
    SContainmentLink role=child.getContainmentLink();
    node.removeChild(child);
    nonEmpty.addChild(role,child);
  }
  for (  SProperty p : Sequence.fromIterable(node.getProperties())) {
    SNodeAccessUtil.setProperty(nonEmpty,p,node.getProperty(p));
  }
  for (  SReference reference : Sequence.fromIterable(node.getReferences())) {
    nonEmpty.setReference(reference.getLink(),reference);
  }
  SNodeOperations.replaceWithAnother(node,nonEmpty);
}
