{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-7519561020779575912l,-9128700522494150552l),7985661997283714146l,7985661997283714147l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-7519561020779575912l,-9128700522494150552l),7985661997283714146l,7985661997283714147l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-7519561020779575912l,-9128700522494150552l),6618572076229093257l,"jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer"),false,false),MetaAdapterFactory.getContainmentLink(new UUID(-7519561020779575912l,-9128700522494150552l),6618572076229093257l,3325264799421088056l,"instruction"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_ejw1sa_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
