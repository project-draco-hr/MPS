{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return myRegexp__BehaviorDescriptor;
case 1:
  return myStringLiteralRegexp__BehaviorDescriptor;
case 2:
return myOrRegexp__BehaviorDescriptor;
case 3:
return mySeqRegexp__BehaviorDescriptor;
case 4:
return myUnaryRegexp__BehaviorDescriptor;
case 5:
return myParensRegexp__BehaviorDescriptor;
case 6:
return mySymbolClassRegexp__BehaviorDescriptor;
case 7:
return myPredefinedSymbolClassRegexp__BehaviorDescriptor;
case 8:
return mySymbolClassPart__BehaviorDescriptor;
case 9:
return myCharacterSymbolClassPart__BehaviorDescriptor;
case 10:
return myIntervalSymbolClassPart__BehaviorDescriptor;
case 11:
return myPredefinedSymbolClassSymbolClassPart__BehaviorDescriptor;
case 12:
return myMatchParensRegexp__BehaviorDescriptor;
case 13:
return myReplaceBlock__BehaviorDescriptor;
case 14:
return myRegexpDeclarationReferenceRegexp__BehaviorDescriptor;
case 15:
return myNTimesRegexp__BehaviorDescriptor;
case 16:
return myAtLeastNTimesRegexp__BehaviorDescriptor;
case 17:
return myFromNToMTimesRegexp__BehaviorDescriptor;
case 18:
return myLookRegexp__BehaviorDescriptor;
case 19:
return myMatchVariableReferenceRegexp__BehaviorDescriptor;
case 20:
return myUnicodeCharacterRegexp__BehaviorDescriptor;
case 21:
return myIntersectionSymbolClassPart__BehaviorDescriptor;
case 22:
return mySymbolClassRegexpAndPart__BehaviorDescriptor;
case 23:
return myReplaceRegexpOperation__BehaviorDescriptor;
case 24:
return myLiteralReplacement__BehaviorDescriptor;
case 25:
return myMatchVariableReferenceReplacement__BehaviorDescriptor;
case 26:
return myReplacement__BehaviorDescriptor;
default :
return null;
}
}
