{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return myRegexp_BehaviorDescriptor;
case 1:
  return myStringLiteralRegexp_BehaviorDescriptor;
case 2:
return myOrRegexp_BehaviorDescriptor;
case 3:
return mySeqRegexp_BehaviorDescriptor;
case 4:
return myUnaryRegexp_BehaviorDescriptor;
case 5:
return myParensRegexp_BehaviorDescriptor;
case 6:
return mySymbolClassRegexp_BehaviorDescriptor;
case 7:
return myPredefinedSymbolClassRegexp_BehaviorDescriptor;
case 8:
return mySymbolClassPart_BehaviorDescriptor;
case 9:
return myCharacterSymbolClassPart_BehaviorDescriptor;
case 10:
return myIntervalSymbolClassPart_BehaviorDescriptor;
case 11:
return myPredefinedSymbolClassSymbolClassPart_BehaviorDescriptor;
case 12:
return myMatchParensRegexp_BehaviorDescriptor;
case 13:
return myReplaceBlock_BehaviorDescriptor;
case 14:
return myRegexpDeclarationReferenceRegexp_BehaviorDescriptor;
case 15:
return myNTimesRegexp_BehaviorDescriptor;
case 16:
return myAtLeastNTimesRegexp_BehaviorDescriptor;
case 17:
return myFromNToMTimesRegexp_BehaviorDescriptor;
case 18:
return myLookRegexp_BehaviorDescriptor;
case 19:
return myMatchVariableReferenceRegexp_BehaviorDescriptor;
case 20:
return myUnicodeCharacterRegexp_BehaviorDescriptor;
case 21:
return myIntersectionSymbolClassPart_BehaviorDescriptor;
case 22:
return mySymbolClassRegexpAndPart_BehaviorDescriptor;
case 23:
return myReplaceRegexpOperation_BehaviorDescriptor;
case 24:
return myLiteralReplacement_BehaviorDescriptor;
case 25:
return myMatchVariableReferenceReplacement_BehaviorDescriptor;
case 26:
return myReplacement_BehaviorDescriptor;
default :
return null;
}
}
