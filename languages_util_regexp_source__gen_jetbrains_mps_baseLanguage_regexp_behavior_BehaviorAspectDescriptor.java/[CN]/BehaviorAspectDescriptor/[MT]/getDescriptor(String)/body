{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a,fqName)) {
case 49:
    return new StringLiteralRegexp_BehaviorDescriptor();
case 27:
  return new OrRegexp_BehaviorDescriptor();
case 29:
return new PlusRegexp_BehaviorDescriptor();
case 48:
return new StarRegexp_BehaviorDescriptor();
case 38:
return new RegexpDeclaration_BehaviorDescriptor();
case 45:
return new SeqRegexp_BehaviorDescriptor();
case 28:
return new ParensRegexp_BehaviorDescriptor();
case 7:
return new InlineRegexpExpression_BehaviorDescriptor();
case 19:
return new MatchRegexpStatement_BehaviorDescriptor();
case 37:
return new QuestionRegexp_BehaviorDescriptor();
case 32:
return new PositiveSymbolClassRegexp_BehaviorDescriptor();
case 26:
return new NegativeSymbolClassRegexp_BehaviorDescriptor();
case 33:
return new PredefinedSymbolClassDeclaration_BehaviorDescriptor();
case 36:
return new PredefinedSymbolClasses_BehaviorDescriptor();
case 34:
return new PredefinedSymbolClassRegexp_BehaviorDescriptor();
case 2:
return new DotRegexp_BehaviorDescriptor();
case 1:
return new CharacterSymbolClassPart_BehaviorDescriptor();
case 9:
return new IntervalSymbolClassPart_BehaviorDescriptor();
case 35:
return new PredefinedSymbolClassSymbolClassPart_BehaviorDescriptor();
case 16:
return new MatchParensRegexp_BehaviorDescriptor();
case 20:
return new MatchVariableReference_BehaviorDescriptor();
case 43:
return new ReplaceWithRegexpExpression_BehaviorDescriptor();
case 41:
return new ReplaceBlock_BehaviorDescriptor();
case 12:
return new LazyStarRegexp_BehaviorDescriptor();
case 10:
return new LazyPlusRegexp_BehaviorDescriptor();
case 11:
return new LazyQuestionRegexp_BehaviorDescriptor();
case 40:
return new Regexps_BehaviorDescriptor();
case 39:
return new RegexpDeclarationReferenceRegexp_BehaviorDescriptor();
case 23:
return new NTimesRegexp_BehaviorDescriptor();
case 0:
return new AtLeastNTimesRegexp_BehaviorDescriptor();
case 6:
return new FromNToMTimesRegexp_BehaviorDescriptor();
case 30:
return new PositiveLookAheadRegexp_BehaviorDescriptor();
case 24:
return new NegativeLookAheadRegexp_BehaviorDescriptor();
case 31:
return new PositiveLookBehindRegexp_BehaviorDescriptor();
case 25:
return new NegativeLookBehindRegexp_BehaviorDescriptor();
case 21:
return new MatchVariableReferenceRegexp_BehaviorDescriptor();
case 5:
return new ForEachMatchStatement_BehaviorDescriptor();
case 14:
return new LineStartRegexp_BehaviorDescriptor();
case 13:
return new LineEndRegexp_BehaviorDescriptor();
case 46:
return new SplitExpression_BehaviorDescriptor();
case 4:
return new FindMatchStatement_BehaviorDescriptor();
case 17:
return new MatchRegexpExpression_BehaviorDescriptor();
case 50:
return new UnicodeCharacterRegexp_BehaviorDescriptor();
case 8:
return new IntersectionSymbolClassPart_BehaviorDescriptor();
case 47:
return new SplitOperation_BehaviorDescriptor();
case 18:
return new MatchRegexpOperation_BehaviorDescriptor();
case 44:
return new ReplaceWithRegexpOperation_BehaviorDescriptor();
case 3:
return new FindMatchExpression_BehaviorDescriptor();
case 42:
return new ReplaceRegexpOperation_BehaviorDescriptor();
case 15:
return new LiteralReplacement_BehaviorDescriptor();
case 22:
return new MatchVariableReferenceReplacement_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
