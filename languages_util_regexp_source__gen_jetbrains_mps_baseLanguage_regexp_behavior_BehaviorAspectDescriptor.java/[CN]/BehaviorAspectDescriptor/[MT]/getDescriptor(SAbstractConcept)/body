{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0eb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAtLeastNTimesRegexp__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myCharacterSymbolClassPart__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myFromNToMTimesRegexp__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myIntersectionSymbolClassPart__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myIntervalSymbolClassPart__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myLiteralReplacement__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myLookRegexp__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myMatchParensRegexp__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myMatchVariableReferenceRegexp__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myMatchVariableReferenceReplacement__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myNTimesRegexp__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myOrRegexp__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myParensRegexp__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myPredefinedSymbolClassRegexp__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myPredefinedSymbolClassSymbolClassPart__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myRegexp__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myRegexpDeclarationReferenceRegexp__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myReplaceBlock__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myReplaceRegexpOperation__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myReplacement__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return mySeqRegexp__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myStringLiteralRegexp__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return mySymbolClassPart__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return mySymbolClassRegexp__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return mySymbolClassRegexpAndPart__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myUnaryRegexp__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myUnicodeCharacterRegexp__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
