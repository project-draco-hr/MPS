{
  SLanguage lang=node.getConcept().getLanguage();
  if (((SLanguageAdapter)lang).getLanguageDescriptor() == null) {
    LanguageMissingError error=new LanguageMissingError(node,lang,lang.getSourceModule() == null);
    if (!processor.process(error))     return false;
    return true;
  }
  SConcept concept=node.getConcept();
  if (!concept.isValid()) {
    if (!processor.process(new ConceptMissingError(node,concept)))     return false;
    return true;
  }
  List<SProperty> props=IterableUtil.asList(concept.getProperties());
  for (  SProperty p : node.getProperties()) {
    if (props.contains(p))     continue;
    if (!processor.process(new ConceptFeatureMissingError(node,p)))     return false;
  }
  List<SContainmentLink> links=IterableUtil.asList(concept.getContainmentLinks());
  for (  SNode n : node.getChildren()) {
    SContainmentLink l=n.getContainmentLink();
    if (links.contains(l))     continue;
    if (!processor.process(new ConceptFeatureMissingError(node,l)))     return false;
  }
  List<SReferenceLink> refs=IterableUtil.asList(concept.getReferenceLinks());
  for (  SReference r : node.getReferences()) {
    SReferenceLink l=r.getLink();
    if (refs.contains(l))     continue;
    if (!processor.process(new ConceptFeatureMissingError(node,l)))     return false;
  }
  for (  SContainmentLink link : concept.getContainmentLinks()) {
    Collection<? extends SNode> children=IterableUtil.asCollection(node.getChildren(link));
    if (!link.isOptional() && children.isEmpty()) {
      if (jetbrains.mps.smodel.SNodeUtil.link_ConstructorDeclaration_returnType.equals(link))       continue;
      if (!processor.process(new ConceptFeatureCardinalityError(node,link,false)))       return false;
    }
    if (!link.isMultiple() && children.size() > 1) {
      if (!processor.process(new ConceptFeatureCardinalityError(node,link,true)))       return false;
    }
  }
  for (  SReferenceLink ref : concept.getReferenceLinks()) {
    if (!ref.isOptional()) {
      if (node.getReference(ref) == null) {
        if (!processor.process(new ConceptFeatureCardinalityError(node,ref,false)))         return false;
      }
    }
  }
  return true;
}
