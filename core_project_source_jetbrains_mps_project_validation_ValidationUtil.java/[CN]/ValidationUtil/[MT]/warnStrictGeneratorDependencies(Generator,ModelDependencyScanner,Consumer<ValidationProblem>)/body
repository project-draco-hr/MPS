{
  HashSet<SModule> seen=new HashSet<SModule>();
  for (  SDependency dep : generator.getDeclaredDependencies()) {
    SModule depTarget=dep.getTarget();
    if (depTarget == null || seen.contains(depTarget) || (dep.getScope() != SDependencyScope.EXTENDS && dep.getScope() != SDependencyScope.DEFAULT))     continue;
    if (!(depTarget instanceof Generator))     continue;
    HashSet<SModelReference> otherGeneratorModels=new HashSet<SModelReference>();
    for (    SModel m : depTarget.getModels()) {
      otherGeneratorModels.add(m.getReference());
    }
    final Language otherGenLanguage=((Generator)depTarget).getSourceLanguage();
    for (    SModel m : (otherGenLanguage == null ? Collections.<SModel>emptySet() : otherGenLanguage.getModels())) {
      otherGeneratorModels.add(m.getReference());
    }
    seen.add(depTarget);
    if (CollectionUtil.intersects(dependencies.getCrossModelReferences(),otherGeneratorModels))     continue;
    String msg="Superfluous dependency to generator " + depTarget.getModuleName() + ", no generator template nor its source language's node is in use";
    consumer.consume(new ValidationProblem(Severity.WARNING,msg));
  }
}
