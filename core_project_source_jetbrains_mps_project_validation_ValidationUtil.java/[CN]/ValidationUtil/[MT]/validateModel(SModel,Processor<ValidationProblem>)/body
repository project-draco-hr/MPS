{
  final SRepository repository=model.getRepository();
  if (repository != null) {
    repository.getModelAccess().checkReadAccess();
  }
  if (model instanceof TransientSModel) {
    return;
  }
  if (model instanceof InvalidSModel) {
    Iterable<SModel.Problem> problems=model.getProblems();
    if (!problems.iterator().hasNext()) {
      processor.process(new ValidationProblem(Severity.ERROR,"Couldn't read model"));
      return;
    }
    for (    SModel.Problem m : problems) {
      if (!m.isError()) {
        continue;
      }
      if (!processor.process(new ValidationProblem(Severity.ERROR,m.getText()))) {
        return;
      }
    }
    return;
  }
  if (jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
    processor.process(new ValidationProblem(Severity.ERROR,"Model is disposed, validation aborted"));
    return;
  }
  if (model.getModule() == null) {
    processor.process(new ValidationProblem(Severity.ERROR,"Model is not part of a module, validation aborted"));
    return;
  }
  if (!model.isReadOnly() && model instanceof PersistenceVersionAware) {
    PersistenceVersionAware pvaModel=(PersistenceVersionAware)model;
    ModelFactory pvaModelFactory=pvaModel.getModelFactory();
    ModelFactory xmlModelFactory=PersistenceFacade.getInstance().getDefaultModelFactory();
    if (pvaModelFactory != null && (xmlModelFactory == pvaModelFactory || xmlModelFactory.getFileExtension().equals(pvaModelFactory.getFileExtension()))) {
      int persistenceVersion=pvaModel.getPersistenceVersion();
      if (persistenceVersion < ModelPersistence.LAST_VERSION) {
        String msg;
        if (persistenceVersion == -1) {
          msg="Undefined model persistence version, please check model persistence";
        }
 else {
          msg=String.format("Outdated model persistence is used: %d. Please upgrade model persistence.",persistenceVersion);
        }
        if (!processor.process(new ValidationProblem(Severity.ERROR,msg))) {
          return;
        }
      }
    }
  }
  if (repository == null) {
    processor.process(new ValidationProblem(Severity.WARNING,"Model is detached from a repository, could not process further"));
    return;
  }
  if (model.getReference().resolve(repository) == null) {
    processor.process(new ValidationProblem(Severity.ERROR,"Model's repository could not resolve the model by reference"));
    return;
  }
  SModule module=model.getModule();
  final SModelReference modelToValidateRef=model.getReference();
  for (  final SModelReference reference : SModelOperations.getImportedModelUIDs(model)) {
    if (module.resolveInDependencies(reference.getModelId()) == null) {
      String msg="Can't find model: " + reference.getName();
      if (!processor.process(new MissingModelError(model,msg,reference))) {
        return;
      }
    }
    if (reference.equals(modelToValidateRef)) {
      if (!processor.process(new ImportSelfWarning(model,reference))) {
        return;
      }
    }
  }
  LanguageRegistry languageRegistry=LanguageRegistry.getInstance(repository);
  for (  SLanguage lang : ((SModelInternal)model).importedLanguageIds()) {
    if (languageRegistry.getLanguage(lang) == null) {
      if (!processor.process(new MissingImportedLanguageError(model,lang))) {
        return;
      }
    }
  }
  for (  SLanguage lang : ((SModelInternal)model).getLanguagesEngagedOnGeneration()) {
    if (languageRegistry.getLanguage(lang) == null) {
      if (!processor.process(new MissingImportedLanguageError(model,lang))) {
        return;
      }
    }
  }
  Pair<DevKit,SModelReference> devkitAssociatedPlan=null;
  for (  SModuleReference devKit : ((SModelInternal)model).importedDevkits()) {
    final SModule devkitModule=devKit.resolve(repository);
    if (devkitModule == null) {
      if (!processor.process(new ValidationProblem(Severity.ERROR,"Can't find devkit: " + devKit.getModuleName()))) {
        return;
      }
    }
 else     if (devkitModule instanceof DevKit) {
      final SModelReference plan=((DevKit)devkitModule).getModuleDescriptor().getAssociatedGenPlan();
      if (plan != null) {
        if (devkitAssociatedPlan == null) {
          devkitAssociatedPlan=new Pair<DevKit,SModelReference>((DevKit)devkitModule,plan);
        }
 else {
          String m=String.format("Both devkit %s and %s supply generation plan, ",devkitModule.getModuleName(),devkitAssociatedPlan.o1.getModuleName());
          processor.process(new ValidationProblem(Severity.ERROR,m));
        }
      }
    }
  }
  if (SModelStereotype.isGeneratorModel(model)) {
    checkGeneratorModel(model,null,processor);
  }
}
