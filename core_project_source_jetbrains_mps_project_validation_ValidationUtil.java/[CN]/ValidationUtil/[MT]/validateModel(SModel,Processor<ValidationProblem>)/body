{
  final SRepository repository=model.getRepository();
  if (repository != null) {
    repository.getModelAccess().checkReadAccess();
  }
  if (model instanceof TransientSModel)   return;
  if (model.getModule() == null)   return;
  if (jetbrains.mps.util.SNodeOperations.isModelDisposed(model))   return;
  if (model instanceof InvalidSModel) {
    Iterable<SModel.Problem> problems=model.getProblems();
    if (!problems.iterator().hasNext()) {
      processor.process(new ValidationProblem(Severity.ERROR,"Couldn't read model"));
      return;
    }
    for (    SModel.Problem m : problems) {
      if (!m.isError())       continue;
      if (!processor.process(new ValidationProblem(Severity.ERROR,m.getText())))       return;
    }
    return;
  }
  if (!model.isReadOnly() && (model instanceof PersistenceVersionAware) && ((PersistenceVersionAware)model).getPersistenceVersion() < ModelPersistence.LAST_VERSION) {
    if (!processor.process(new ValidationProblem(Severity.ERROR,"Outdated model persistence is used: " + ((PersistenceVersionAware)model).getPersistenceVersion() + ". Please upgrade model persistence")))     return;
  }
  if (repository == null) {
    processor.process(new ValidationProblem(Severity.WARNING,"Model is detached from a repository, could not process further"));
    return;
  }
  SModule module=model.getModule();
  final SModelReference modelToValidateRef=model.getReference();
  for (  final SModelReference reference : SModelOperations.getImportedModelUIDs(model)) {
    if (module.resolveInDependencies(reference.getModelId()) == null) {
      String msg="Can't find model: " + SModelStereotype.withoutStereotype(reference.getModelName());
      if (!processor.process(new MissingModelError(model,msg,reference))) {
        return;
      }
    }
    if (reference.equals(modelToValidateRef)) {
      if (!processor.process(new ImportSelfWarning(model,reference))) {
        return;
      }
    }
  }
  List<SModuleReference> langsToCheck=new ArrayList<SModuleReference>();
  langsToCheck.addAll(SModelOperations.getAllImportedLanguages(model));
  langsToCheck.addAll(((jetbrains.mps.smodel.SModelInternal)model).engagedOnGenerationLanguages());
  for (  final SModuleReference lang : langsToCheck) {
    if (repository.getModule(lang.getModuleId()) == null) {
      if (!processor.process(new MissingImportedLanguageError(model,lang))) {
        return;
      }
    }
  }
  for (  SModuleReference devKit : ((jetbrains.mps.smodel.SModelInternal)model).importedDevkits()) {
    if (repository.getModule(devKit.getModuleId()) == null) {
      if (!processor.process(new ValidationProblem(Severity.ERROR,"Can't find devkit: " + devKit.getModuleName()))) {
        return;
      }
    }
  }
  if (SModelStereotype.isGeneratorModel(model)) {
    checkGeneratorModel(model,null,processor);
  }
}
