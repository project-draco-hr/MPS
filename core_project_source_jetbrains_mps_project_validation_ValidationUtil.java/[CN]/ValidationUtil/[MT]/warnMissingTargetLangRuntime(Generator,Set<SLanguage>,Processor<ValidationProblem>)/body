{
  Language sourceLanguage=generator.getSourceLanguage();
  usedLanguages.remove(sourceLanguage.getModuleName());
  if (usedLanguages.isEmpty())   return true;
  final HashSet<SModuleReference> compileTimeDeps=new HashSet<SModuleReference>();
  for (  SModule d : new GlobalModuleDependenciesManager(sourceLanguage).getModules(Deptype.COMPILE)) {
    compileTimeDeps.add(d.getModuleReference());
  }
  for (  SLanguage lang : usedLanguages) {
    Collection<SModuleReference> langRuntimes=IterableUtil.asCollection(lang.getLanguageRuntimes());
    if (langRuntimes.isEmpty()) {
      continue;
    }
    if (compileTimeDeps.containsAll(langRuntimes)) {
      continue;
    }
    String m=String.format("%s shall specify language %s as generation target to include its runtime modules into compilation",sourceLanguage,lang);
    if (!processor.process(new ValidationProblem(Severity.WARNING,m))) {
      return false;
    }
  }
  return true;
}
