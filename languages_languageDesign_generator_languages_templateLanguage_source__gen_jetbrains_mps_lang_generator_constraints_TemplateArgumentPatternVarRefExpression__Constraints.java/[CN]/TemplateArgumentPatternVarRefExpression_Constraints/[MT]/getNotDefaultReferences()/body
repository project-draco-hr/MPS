{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("patternVarDecl",new BaseReferenceConstraintsDescriptor("patternVarDecl",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode rule=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule",false,false);
          if ((rule != null) && (SLinkOperations.getTarget(rule,"pattern",true) != null)) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(rule,"pattern",true),"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration",false,new String[]{})));
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_u4q1ju_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
