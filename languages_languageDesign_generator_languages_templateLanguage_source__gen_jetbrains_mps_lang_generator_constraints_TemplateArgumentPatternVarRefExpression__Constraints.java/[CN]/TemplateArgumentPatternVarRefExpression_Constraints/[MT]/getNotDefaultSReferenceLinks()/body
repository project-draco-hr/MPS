{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-5475912601019530992l,-8082971551085732881l),4665309944889425032l,4665309944889425604l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-5475912601019530992l,-8082971551085732881l),4665309944889425032l,4665309944889425604l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          SNode rule=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994416516020l,"jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"),false,false);
          if ((rule != null) && (SLinkOperations.getTarget(rule,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994416516020l,1805153994416556314l,"pattern")) != null)) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(rule,MetaAdapterFactory.getContainmentLink(new UUID(-5475912601019530992l,-8082971551085732881l),1805153994416516020l,1805153994416556314l,"pattern")),MetaAdapterFactory.getConcept(new UUID(-3143127453834064983l,-5836335846783251545l),1136720037779l,"jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration"),false,new SAbstractConcept[]{})));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_u4q1ju_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
