{
  return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.intentions.structure.IntentionDeclaration")){
    @Override public String getName(){
      return "Migrate intentions condition for " + config.getName();
    }
    @Override public boolean isApplicableInstanceNode(    SNode intention){
      return SLinkOperations.getTarget(intention,"forConcept",false) == config.sourceConcept;
    }
    @Override public void doUpdateInstanceNode(    SNode intention){
      SLinkOperations.setTarget(intention,"forConcept",config.targetConcept,false);
      SNode condition=config.createCondition(SConceptOperations.createNewNode("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node",null));
      if ((SLinkOperations.getTarget(intention,"isApplicableFunction",true) == null)) {
        SLinkOperations.setTarget(intention,"isApplicableFunction",_quotation_createNode_b5gojm_a0a0c0c0a0a0c(condition),true);
      }
 else {
        SNode checkingStatement=_quotation_createNode_b5gojm_a0a0a2a2a0a0a2(condition);
        ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(intention,"isApplicableFunction",true),"body",true),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"))).insertElement(0,checkingStatement);
      }
    }
  }
;
}
