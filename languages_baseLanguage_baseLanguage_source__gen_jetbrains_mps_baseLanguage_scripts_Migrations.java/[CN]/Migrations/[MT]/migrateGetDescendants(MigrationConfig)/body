{
  return new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation"),config){
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.smodel.structure.OperationParm_Concept");
        }
      }
).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          SNode conceptArg=SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.lang.smodel.structure.OperationParm_Concept"),"conceptArgument",true);
          return SNodeOperations.isInstanceOf(conceptArg,"jetbrains.mps.lang.smodel.structure.RefConcept_Reference") && SLinkOperations.getTarget(SNodeOperations.cast(conceptArg,"jetbrains.mps.lang.smodel.structure.RefConcept_Reference"),"conceptDeclaration",false) == config.sourceConcept;
        }
      }
);
    }
    public void doUpdateInstanceNode(    SNode node){
      Iterable<SNode> parameters=ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          if (SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.smodel.structure.OperationParm_Concept")) {
            return new Migrations.QuotationClass_b5gojm_a0a0a0a0a0a0a0a1a0a0a4().createNode(config.targetConcept);
          }
 else {
            return it;
          }
        }
      }
);
      SNode result=new Migrations.QuotationClass_b5gojm_a0a3a1a0a0a4().createNode(IOperation_Behavior.call_getOperand_1213877410070(node),Sequence.fromIterable(parameters).toListSequence(),config.targetConcept);
      SNode whereClosure=SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(result,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true),"jetbrains.mps.baseLanguage.collections.structure.WhereOperation"),"closure",true),"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
      SNode condition=createCondition(config,ListSequence.fromList(SNodeOperations.getDescendants(whereClosure,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).first());
      SNodeOperations.replaceWithAnother(ListSequence.fromList(SNodeOperations.getDescendants(whereClosure,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).first(),condition);
      SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node),result);
    }
  }
;
}
