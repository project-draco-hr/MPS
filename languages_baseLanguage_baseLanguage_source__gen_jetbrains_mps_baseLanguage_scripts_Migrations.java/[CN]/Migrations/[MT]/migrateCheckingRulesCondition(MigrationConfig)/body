{
  return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.typesystem.structure.NonTypesystemRule")){
    public String getName(){
      return "Migrate checking rules condition for " + config.getName();
    }
    public boolean isApplicableInstanceNode(    SNode rule){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference"),"concept",false) == config.sourceConcept;
    }
    public void doUpdateInstanceNode(    SNode rule){
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(rule,"applicableNode",true),"jetbrains.mps.lang.typesystem.structure.ConceptReference"),"concept",config.targetConcept,false);
      SNode condition=createCondition(config,new Migrations.QuotationClass_b5gojm_a1a0b0c0a0a0f().createNode(SLinkOperations.getTarget(rule,"applicableNode",true)));
      SNode checkingStatement=new Migrations.QuotationClass_b5gojm_a0a2a2a0a0a5().createNode(condition);
      ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(rule,"body",true),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"))).insertElement(0,checkingStatement);
    }
  }
;
}
