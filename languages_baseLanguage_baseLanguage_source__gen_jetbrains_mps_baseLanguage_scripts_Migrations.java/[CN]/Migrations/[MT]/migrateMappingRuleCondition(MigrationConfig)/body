{
  return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.BaseMappingRule")){
    public String getName(){
      return "Migrate mapping rules condition for " + config.getName();
    }
    public boolean isApplicableInstanceNode(    SNode rule){
      return SLinkOperations.getTarget(rule,"applicableConcept",false) == config.sourceConcept && !(SPropertyOperations.getBoolean(rule,"applyToConceptInheritors"));
    }
    public void doUpdateInstanceNode(    SNode rule){
      SLinkOperations.setTarget(rule,"applicableConcept",config.targetConcept,false);
      SNode condition=config.createCondition(SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode",null));
      if ((SLinkOperations.getTarget(rule,"conditionFunction",true) == null)) {
        SLinkOperations.setTarget(rule,"conditionFunction",SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.BaseMappingRule_Condition",null),true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(rule,"conditionFunction",true),"body",new Migrations.QuotationClass_b5gojm_a0a1a2a2a0a0a31().createNode(condition),true);
      }
 else {
        SNode checkingStatement=new Migrations.QuotationClass_b5gojm_a0a0a0c0c0a0a0n().createNode(condition);
        ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(rule,"conditionFunction",true),"body",true),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"))).insertElement(0,checkingStatement);
      }
    }
  }
;
}
