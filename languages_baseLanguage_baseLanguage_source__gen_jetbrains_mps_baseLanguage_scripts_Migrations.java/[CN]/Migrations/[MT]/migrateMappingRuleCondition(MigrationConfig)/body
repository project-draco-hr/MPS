{
  return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.BaseMappingRule")){
    @Override public String getName(){
      return "Migrate mapping rules condition for " + config.getName();
    }
    @Override public boolean isApplicableInstanceNode(    SNode rule){
      return SLinkOperations.getTarget(rule,"applicableConcept",false) == config.sourceConcept && !(SPropertyOperations.getBoolean(rule,"applyToConceptInheritors"));
    }
    @Override public void doUpdateInstanceNode(    SNode rule){
      SLinkOperations.setTarget(rule,"applicableConcept",config.targetConcept,false);
      SPropertyOperations.set(rule,"applyToConceptInheritors","" + (true));
      SNode condition=config.createCondition(SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode",null));
      if ((SLinkOperations.getTarget(rule,"conditionFunction",true) == null)) {
        SLinkOperations.setTarget(rule,"conditionFunction",SConceptOperations.createNewNode("jetbrains.mps.lang.generator.structure.BaseMappingRule_Condition",null),true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(rule,"conditionFunction",true),"body",_quotation_createNode_b5gojm_a0b0d0c0a0a0o(condition),true);
      }
 else {
        SNode checkingStatement=_quotation_createNode_b5gojm_a0a0a3a2a0a0a41(condition);
        ListSequence.fromList(SNodeOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(rule,"conditionFunction",true),"body",true),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.StatementList","statement"))).insertElement(0,checkingStatement);
      }
    }
  }
;
}
