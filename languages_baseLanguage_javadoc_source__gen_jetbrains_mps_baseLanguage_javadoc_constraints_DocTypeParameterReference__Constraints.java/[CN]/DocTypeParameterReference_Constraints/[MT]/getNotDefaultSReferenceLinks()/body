{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-972752984950357426l,-4964296947050367098l),6832197706140518103l,6832197706140518108l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-972752984950357426l,-4964296947050367098l),6832197706140518103l,6832197706140518108l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1109279851642l,"jetbrains.mps.baseLanguage.structure.GenericDeclaration"),false,false),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1109279851642l,1109279881614l,"typeVariableDeclaration"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_n7zz7p_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
