{
  myChangeGroupBuilders=changeGroupBuilders;
  myLastEditor=firstEditor;
  final SelectionListener selectionListener=new SelectionListener(){
    public void selectionChanged(    EditorComponent editorComponent,    Selection oldSelection,    Selection newSelection){
      myLastEditor=editorComponent;
      updateToolbar();
    }
  }
;
  ListSequence.<ChangeGroupBuilder>fromList(myChangeGroupBuilders).visitAll(new IVisitor<ChangeGroupBuilder>(){
    public void visit(    ChangeGroupBuilder cgb){
      cgb.addInvalidateListener(new ChangeGroupInvalidateListener(){
        public void changeGroupsInvalidated(){
          updateToolbar();
        }
      }
);
    }
  }
);
  SetSequence.<EditorComponent>fromSet(SetSequence.<EditorComponent>fromSetWithValues(new HashSet<EditorComponent>(),ListSequence.<ChangeGroupBuilder>fromList(myChangeGroupBuilders).<EditorComponent>translate(new ITranslator2<ChangeGroupBuilder,EditorComponent>(){
    public Iterable<EditorComponent> translate(    ChangeGroupBuilder b){
      return Arrays.asList(b.getLeftComponent(),b.getRightComponent());
    }
  }
))).visitAll(new IVisitor<EditorComponent>(){
    public void visit(    EditorComponent ec){
      ec.getSelectionManager().addSelectionListener(selectionListener);
    }
  }
);
}
