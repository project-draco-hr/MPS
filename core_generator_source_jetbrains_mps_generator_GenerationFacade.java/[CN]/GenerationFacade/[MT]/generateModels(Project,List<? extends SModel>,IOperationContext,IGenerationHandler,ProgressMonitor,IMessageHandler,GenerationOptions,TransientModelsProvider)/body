{
  final boolean[] result=new boolean[1];
  final TransientModelsProvider transientModelsComponent=tmProvider;
  transientModelsComponent.startGeneration(options.getNumberOfModelsToKeep());
  final GeneratorLoggerAdapter logger=new GeneratorLoggerAdapter(messages,options.isShowInfo(),options.isShowWarnings());
  ModelAccess.instance().requireWrite(new Runnable(){
    @Override public void run(){
      for (      SModel d : inputModels) {
        if (d instanceof EditableSModel && ((EditableSModel)d).needsReloading()) {
          ((EditableSModel)d).reloadFromSource();
          logger.info("Model " + d + " reloaded from disk.");
        }
        transientModelsComponent.createModule(d.getModule());
      }
    }
  }
);
  final GenerationController gc=new GenerationController(inputModels,transientModelsComponent,options,generationHandler,logger,invocationContext);
  ModelAccess.instance().requireRead(new Runnable(){
    @Override public void run(){
      result[0]=UndoHelper.getInstance().runNonUndoableAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return gc.generate(monitor);
        }
      }
);
    }
  }
);
  ModelAccess.instance().requireWrite(new Runnable(){
    @Override public void run(){
      CleanupManager.getInstance().cleanup();
    }
  }
);
  ModelAccess.instance().requireWrite(new Runnable(){
    @Override public void run(){
      transientModelsComponent.publishAll();
      CleanupManager.getInstance().cleanup();
    }
  }
);
  generationHandler.generationCompleted();
  return result[0];
}
