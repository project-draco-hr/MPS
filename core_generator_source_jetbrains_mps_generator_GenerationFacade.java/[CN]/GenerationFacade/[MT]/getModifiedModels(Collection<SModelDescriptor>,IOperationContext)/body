{
  Set<SModelDescriptor> result=new LinkedHashSet<SModelDescriptor>();
  ModelGenerationStatusManager statusManager=ModelGenerationStatusManager.getInstance();
  for (  SModelDescriptor sm : models) {
    if (!sm.isGeneratable())     continue;
    if (statusManager.generationRequired(sm,context)) {
      result.add(sm);
      continue;
    }
    GenerationDependencies oldDependencies=GenerationDependenciesCache.getInstance().get(sm);
    if (oldDependencies == null) {
      continue;
    }
    Map<String,String> externalHashes=oldDependencies.getExternalHashes();
    for (    Entry<String,String> entry : externalHashes.entrySet()) {
      String modelReference=entry.getKey();
      SModelDescriptor rmd=SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(modelReference));
      if (rmd == null) {
        result.add(sm);
        break;
      }
      String oldHash=entry.getValue();
      if (oldHash == null) {
        result.add(sm);
        break;
      }
      String newHash=ModelGenerationStatusManager.getInstance().currentHash(rmd,context);
      if (newHash == null || !oldHash.equals(newHash)) {
        result.add(sm);
        break;
      }
    }
  }
  boolean changed=true;
  while (changed) {
    changed=false;
    for (    SModelDescriptor sm : models) {
      if (!sm.isGeneratable())       continue;
      if (result.contains(sm))       continue;
      GenerationDependencies oldDependencies=GenerationDependenciesCache.getInstance().get(sm);
      if (oldDependencies == null)       continue;
      Map<String,String> externalHashes=oldDependencies.getExternalHashes();
      for (      Entry<String,String> entry : externalHashes.entrySet()) {
        String modelReference=entry.getKey();
        SModelDescriptor rmd=SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(modelReference));
        if (result.contains(rmd)) {
          result.add(sm);
          changed=true;
          break;
        }
      }
    }
  }
  return result;
}
