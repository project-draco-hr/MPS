{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L,"variableDeclaration"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode template=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x756e911c3f1f4a48L,0xbdf5a2ceb91b723cL,0xd244b712f910113L,"jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplate"),false,false);
          if ((template == null)) {
            return Sequence.fromIterable(Collections.<SNode>emptyList());
          }
          return SLinkOperations.getChildren(template,MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L,0xbdf5a2ceb91b723cL,0xd244b712f910113L,0xd244b712f910115L,"templateParameter"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hn11y1_a0a1a0a0a1a0b0a1a4;
        }
      }
;
    }
  }
);
  return references;
}
