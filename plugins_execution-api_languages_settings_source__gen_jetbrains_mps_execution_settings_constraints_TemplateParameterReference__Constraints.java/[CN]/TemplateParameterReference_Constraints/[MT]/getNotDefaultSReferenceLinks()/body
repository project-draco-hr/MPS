{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,1068581517664l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1068498886296l,1068581517664l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode template=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(8461860300379867720l,-4758718422494514628l),946964771156066579l,"jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplate"),false,false);
          if ((template == null)) {
            return Sequence.fromIterable(Collections.<SNode>emptyList());
          }
          return SLinkOperations.getChildren(template,MetaAdapterFactory.getContainmentLink(new UUID(8461860300379867720l,-4758718422494514628l),946964771156066579l,946964771156066581l,"templateParameter"));
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hn11y1_a0a1a0a0a1a0b0a1a3;
        }
      }
;
    }
  }
);
  return references;
}
