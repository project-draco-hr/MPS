{
  final TemplateExecutionEnvironment environment=context.getEnvironment();
  environment.getTracer().pushRuleConsequence(conseq_417xrn_a0a1a1w);
  final SNode tnode1=environment.createOutputNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall");
  try {
    environment.getTracer().pushTemplateNode(templateNode_417xrn_a0a0a3a1w);
    environment.nodeCopied(context,tnode1,"tpl/r:1dfaf07d-c77a-451e-91d3-b6f80f0f8508/1820665478710840043");
    tnode1.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",tnode1,PersistenceFacade.getInstance().createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.generator.runtime(MPS.Core/jetbrains.mps.generator.runtime@java_stub)"),PersistenceFacade.getInstance().createNodeId("~TemplateUtil.createRefSet(jetbrains.mps.generator.runtime.TemplateMappingConfigRef...):jetbrains.mps.generator.runtime.TemplateMappingConfigRef")));
    tnode1.setReference("classConcept",SReference.create("classConcept",tnode1,PersistenceFacade.getInstance().createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.generator.runtime(MPS.Core/jetbrains.mps.generator.runtime@java_stub)"),PersistenceFacade.getInstance().createNodeId("~TemplateUtil")));
{
      final List<SNode> tlist2=new ArrayList<SNode>();
      try {
        environment.getTracer().pushMacro(loopMacroRef_417xrn_a0a0a1a5a3a1w);
        final Iterable<SNode> loopList2=QueriesGenerated.sourceNodesQuery_1820665478710840047(new SourceSubstituteMacroNodesContext(context,loopMacroRef_417xrn_a0a0a1a5a3a1w,environment.getGenerator()));
        for (        SNode itnode2 : loopList2) {
          if (itnode2 == null) {
            continue;
          }
          boolean inputChanged2=context.getInput() != itnode2;
          try {
            if (inputChanged2) {
              environment.getTracer().pushInputNode(GenerationTracerUtil.getSNodePointer(itnode2));
            }
            TemplateContext context2=context.subContext(null,itnode2);
            Collection<SNode> tlist3=null;
            try {
              environment.getTracer().pushMacro(copySrcMacro_417xrn_a0a0a3a2a2a1a5a3a1w);
              final SNode copySrcInput3=context2.getInput();
              tlist3=environment.copyNodes(TemplateUtil.singletonList(copySrcInput3),copySrcMacro_417xrn_a0a0a3a2a2a1a5a3a1w,"tpl/r:1dfaf07d-c77a-451e-91d3-b6f80f0f8508/1820665478710840044",context2);
            }
  finally {
              environment.getTracer().closeMacro(copySrcMacro_417xrn_a0a0a3a2a2a1a5a3a1w);
            }
            if (tlist3 != null) {
              tlist2.addAll(tlist3);
            }
          }
  finally {
            if (inputChanged2) {
              environment.getTracer().closeInputNode(GenerationTracerUtil.getSNodePointer(itnode2));
            }
          }
        }
      }
  finally {
        environment.getTracer().closeMacro(loopMacroRef_417xrn_a0a0a1a5a3a1w);
      }
      for (      SNode child4 : TemplateUtil.asNotNull(tlist2)) {
        tnode1.addChild("actualArgument",child4);
      }
    }
  }
  finally {
    environment.getTracer().pushOutputNode(GenerationTracerUtil.getSNodePointer(environment.getOutputModel(),tnode1));
    environment.getTracer().closeTemplateNode(templateNode_417xrn_a0a0a3a1w);
  }
  return TemplateUtil.singletonList(tnode1);
}
