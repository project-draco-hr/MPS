{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final String sss;
{
    Calculable calculable=new Calculable(){
      public Object calculate(){
        return "abc";
      }
    }
;
    sss=(String)calculable.calculate();
  }
{
    AbstractConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        return null;
      }
      public String getMatchingText(      String pattern){
        return sss;
      }
    }
);
  }
  return result;
}
