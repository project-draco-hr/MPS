{
  List<SNode> result=new ArrayList<SNode>();
  if (constraint == 0) {
    return result;
  }
  if ((constraint ^ IClassifiersSearchScope.ANYTHING) == 0) {
    for (    SNode classifier : classifiers) {
      if (condition.met(classifier)) {
        result.add(classifier);
      }
      result.addAll(classifier.getDescendants(condition));
    }
  }
 else {
    for (    SNode classifier : classifiers) {
      boolean isClassConcept=SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
      if ((constraint & IClassifiersSearchScope.NON_FINAL) == IClassifiersSearchScope.NON_FINAL && isClassConcept && SPropertyOperations.getBoolean(SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"isFinal")) {
        continue;
      }
      if ((constraint & IClassifiersSearchScope.INTERFACE) == IClassifiersSearchScope.INTERFACE && SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface") && !(SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Annotation")) && condition.met(classifier)) {
        result.add(classifier);
      }
      if ((constraint & IClassifiersSearchScope.ANNOTATION) == IClassifiersSearchScope.ANNOTATION && SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(classifier),"jetbrains.mps.baseLanguage.structure.Annotation") && condition.met(classifier)) {
        result.add(classifier);
      }
      if ((constraint & IClassifiersSearchScope.CLASS) == IClassifiersSearchScope.CLASS && isClassConcept && condition.met(classifier)) {
        result.add(classifier);
      }
      if ((constraint & IClassifiersSearchScope.CONSTRUCTOR) == IClassifiersSearchScope.CONSTRUCTOR && isClassConcept) {
        for (        SNode constructorDeclaration : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"constructor",true))) {
          if (condition.met(constructorDeclaration)) {
            result.add(constructorDeclaration);
          }
        }
      }
      if ((constraint & IClassifiersSearchScope.INSTANCE_FIELD) == IClassifiersSearchScope.INSTANCE_FIELD && isClassConcept) {
        for (        SNode member : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"field",true))) {
          if (condition.met(member)) {
            result.add(member);
          }
        }
      }
      if ((constraint & IClassifiersSearchScope.INSTANCE_METHOD) == IClassifiersSearchScope.INSTANCE_METHOD && isClassConcept) {
        for (        SNode member : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"method",true))) {
          if (condition.met(member)) {
            result.add(member);
          }
        }
      }
      if ((constraint & IClassifiersSearchScope.STATIC_FIELD) == IClassifiersSearchScope.STATIC_FIELD && isClassConcept) {
        for (        SNode member : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"staticField",true))) {
          if (condition.met(member)) {
            result.add(member);
          }
        }
      }
      if ((constraint & IClassifiersSearchScope.STATIC_METHOD) == IClassifiersSearchScope.STATIC_METHOD && isClassConcept) {
        for (        SNode member : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")),"staticMethod",true))) {
          if (condition.met(member)) {
            result.add(member);
          }
        }
      }
      if ((constraint & IClassifiersSearchScope.ENUM_CONSTANT) == IClassifiersSearchScope.ENUM_CONSTANT && SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.EnumClass")) {
        for (        SNode member : ListSequence.<SNode>fromList(SLinkOperations.getTargets((SNodeOperations.cast(classifier,"jetbrains.mps.baseLanguage.structure.EnumClass")),"enumConstant",true))) {
          if (condition.met(member)) {
            result.add(member);
          }
        }
      }
    }
  }
  return result;
}
