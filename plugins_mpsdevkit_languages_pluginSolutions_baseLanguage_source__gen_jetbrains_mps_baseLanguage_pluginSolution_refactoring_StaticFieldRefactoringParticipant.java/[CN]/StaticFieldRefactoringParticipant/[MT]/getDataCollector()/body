{
  final UpdateReferencesParticipantBase.MyMoveNodeRefactoringDataCollector fieldDataCollector=new UpdateReferencesParticipantBase.MyMoveNodeRefactoringDataCollector();
  final UpdateReferencesParticipantBase.MyMoveNodeRefactoringDataCollector classifierDataCollector=new UpdateReferencesParticipantBase.MyMoveNodeRefactoringDataCollector();
  return new MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<UpdateReferencesParticipantBase.NodeData<UpdateReferencesParticipantBase.NamedNodeReference>,UpdateReferencesParticipantBase.NodeData<UpdateReferencesParticipantBase.NamedNodeReference>>(){
    @Nullable public UpdateReferencesParticipantBase.NodeData<UpdateReferencesParticipantBase.NamedNodeReference> beforeMove(    SNode nodeToMove){
      SNode classifier=SNodeOperations.getNodeAncestor(nodeToMove,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false,false);
      if (!(SNodeOperations.isInstanceOf(nodeToMove,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93c84351fL,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) || classifier == null) {
        return null;
      }
      return new NodeData<UpdateReferencesParticipantBase.NamedNodeReference>(fieldDataCollector.beforeMove(nodeToMove),classifierDataCollector.beforeMove(classifier));
    }
    @Nullable public UpdateReferencesParticipantBase.NodeData<UpdateReferencesParticipantBase.NamedNodeReference> afterMove(    SNode movedNode){
      SNode classifier=SNodeOperations.getNodeAncestor(movedNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"),false,false);
      UpdateReferencesParticipantBase.NamedNodeReference classifierData=(classifier == null ? null : classifierDataCollector.afterMove(classifier));
      return new NodeData<UpdateReferencesParticipantBase.NamedNodeReference>(fieldDataCollector.afterMove(movedNode),classifierData);
    }
  }
;
}
