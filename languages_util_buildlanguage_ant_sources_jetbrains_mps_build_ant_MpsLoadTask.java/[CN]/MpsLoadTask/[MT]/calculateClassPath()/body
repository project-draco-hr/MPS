{
  String home=myMpsHome.getAbsolutePath();
  List<File> bootstrapPath=new ArrayList<File>();
  bootstrapPath.add(new File(home + File.separator + "languages"+ File.separator+ "generate.ant.task.jar"));
  if (new File(home + File.separator + "MPS.mpr").exists()) {
    bootstrapPath.add(new File(home + File.separator + "startup"+ File.separator+ "classes"));
  }
 else {
    bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "mpsboot.jar"));
  }
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "boot.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "bootstrap.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "util.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "jdom.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "log4j.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "extensions.jar"));
  bootstrapPath.add(new File(home + File.separator + "lib"+ File.separator+ "trove4j.jar"));
  List<File> classPaths=new ArrayList<File>();
  classPaths.addAll(bootstrapPath);
  File[] pathsToLook=new File[]{new File(home + File.separator + "plugin"),new File(home + File.separator + "plugins")};
  for (  File path : pathsToLook) {
    if (!(path.exists()) || (!(path.isDirectory()) && !(path.getAbsolutePath().endsWith(".jar")))) {
      throw new BuildException(myMpsHome + " is invalid MPS home path: path " + path+ " does not exist or is not a directory or a jar file.");
    }
 else     if (!(path.isDirectory())) {
      classPaths.add(path.getAbsoluteFile());
    }
 else {
      gatherAllClassesAndJarsUnder(path,classPaths);
    }
  }
  return classPaths;
}
