{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("elementDeclaration",new BaseReferenceConstraintsDescriptor("elementDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          final SNode complexType=SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)),"jetbrains.mps.xmlQuery.structure.XMLElementType"),"complexType",false);
          if (complexType == null) {
            return new ArrayList<SNode>();
          }
          SNode elementDeclaration=SNodeOperations.getAncestor(complexType,"jetbrains.mps.xmlSchema.structure.ElementDeclaration",false,false);
          if (elementDeclaration == null) {
            elementDeclaration=ListSequence.<SNode>fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(complexType,"jetbrains.mps.xmlSchema.structure.Schema",false,false),"jetbrains.mps.xmlSchema.structure.ElementWithType",false,new String[]{})).findFirst(new IWhereFilter<SNode>(){
              public boolean accept(              SNode ewt){
                return SLinkOperations.getTarget(SLinkOperations.getTarget(ewt,"complexTypeReference",true),"complexType",false) == complexType;
              }
            }
);
          }
          List<SNode> elementDeclarations=ElementUtil.getElementDeclarations(elementDeclaration,_context.getEnclosingNode(),operationContext.getScope());
          return elementDeclarations;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_iuzmb1_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
