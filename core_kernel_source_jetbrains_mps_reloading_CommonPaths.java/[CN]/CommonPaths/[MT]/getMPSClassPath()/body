{
  CompositeClassPathItem result=new CompositeClassPathItem();
  result.add(getBaseMPSClassPath());
  IClassPathItem kernelClassPath=getMPSKernelClassPath();
  if (kernelClassPath != null) {
    result.add(kernelClassPath);
  }
  IClassPathItem generatorClassPath=getGeneratorEngineClasspath();
  if (generatorClassPath != null) {
    result.add(generatorClassPath);
  }
  IClassPathItem makeClassPath=getMakeRuntimeClasspath();
  if (makeClassPath != null) {
    result.add(makeClassPath);
  }
  IClassPathItem typesystemEngineClassPath=getTypesystemEngineClasspath();
  if (typesystemEngineClassPath != null) {
    result.add(typesystemEngineClassPath);
  }
  IClassPathItem typesystemIntegrationClassPath=getTypesystemIntegrationClasspath();
  if (typesystemIntegrationClassPath != null) {
    result.add(typesystemIntegrationClassPath);
  }
  IClassPathItem debugClassPath=getMPSDebugClassPath();
  if (debugClassPath != null) {
    result.add(debugClassPath);
  }
  IClassPathItem debugAPIClassPath=getMPSDebugAPIClassPath();
  if (debugAPIClassPath != null) {
    result.add(debugAPIClassPath);
  }
  IClassPathItem supportClassPath=getMPSSupportClassPath();
  if (supportClassPath != null) {
    result.add(supportClassPath);
  }
  IClassPathItem workbenchClassPath=getWorkbenchClassPath();
  if (workbenchClassPath != null) {
    result.add(getWorkbenchClassPath());
  }
  IClassPathItem javaConverterClassPath=getJavaConverterClasspath();
  if (javaConverterClassPath != null) {
    result.add(javaConverterClassPath);
  }
  addIfExists(result,"/core/runtime/classes");
  addIfExists(result,"/lib/platform-api.jar");
  addIfExists(result,"/lib/platform.jar");
  addIfExists(result,"/lib/annotations.jar");
  addIfExists(result,"/lib/execution-api.jar");
  addIfExists(result,"/lib/util.jar");
  addIfExists(result,"/lib/extensions.jar");
  addIfExists(result,"/lib/junit-4.8.2.jar");
  addIfExists(result,"/lib/log4j.jar");
  addIfExists(result,"/lib/commons-lang-2.4.jar");
  addIfExists(result,"/lib/picocontainer.jar");
  addIfExists(result,"/lib/jdom.jar");
  addIfExists(result,"/lib/ecj.jar");
  return result;
}
