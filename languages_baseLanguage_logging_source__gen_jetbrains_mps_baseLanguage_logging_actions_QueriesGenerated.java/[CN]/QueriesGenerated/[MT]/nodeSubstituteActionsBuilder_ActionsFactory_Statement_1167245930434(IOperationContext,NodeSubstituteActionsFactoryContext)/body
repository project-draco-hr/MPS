{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.logging.structure.LogStatement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SEnumOperations.getEnumMembers(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c8959057f(jetbrains.mps.baseLanguage.logging.structure)","Severity"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode logStatement=SNodeFactoryOperations.createNewNode(model,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x760a0a8ceabb4521L,0x8bfd65db761a9ba3L,0x10fc428b1dfL,"jetbrains.mps.baseLanguage.logging.structure.LogStatement")),null);
              SPropertyOperations.set(logStatement,MetaAdapterFactory.getProperty(0x760a0a8ceabb4521L,0x8bfd65db761a9ba3L,0x10fc428b1dfL,0x10fc541df63L,"severity"),SEnumOperations.getEnumMemberValue((item)));
              SNodeFactoryOperations.setNewChild(logStatement,MetaAdapterFactory.getContainmentLink(0x760a0a8ceabb4521L,0x8bfd65db761a9ba3L,0x10fc428b1dfL,0x10fc42da590L,"logExpression"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf93d565d10L,"jetbrains.mps.baseLanguage.structure.StringLiteral")));
              SNode catchClause=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,"jetbrains.mps.baseLanguage.structure.CatchClause"),true,false);
              if ((catchClause != null) && (SLinkOperations.getTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f1L,"throwable")) != null)) {
                SPropertyOperations.set(logStatement,MetaAdapterFactory.getProperty(0x760a0a8ceabb4521L,0x8bfd65db761a9ba3L,0x10fc428b1dfL,0x10fc43f6f0fL,"hasException"),"" + (true));
                SNode lvr=SLinkOperations.setNewChild(logStatement,MetaAdapterFactory.getContainmentLink(0x760a0a8ceabb4521L,0x8bfd65db761a9ba3L,0x10fc428b1dfL,0x10fc42f25e9L,"exception"),SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,"jetbrains.mps.baseLanguage.structure.VariableReference")));
                SLinkOperations.setTarget(lvr,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L,"variableDeclaration"),SLinkOperations.getTarget(catchClause,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10f39a56e2fL,0x10f39a6a2f1L,"throwable")));
              }
              return logStatement;
            }
            @Override protected SNode selectChildNode(            SNode createdNode,            SModel model,            String pattern,            EditorContext editorContext){
              SelectionUtil.selectCell(editorContext,createdNode,SelectionManager.LAST_EDITABLE_CELL);
              return null;
            }
            public String getMatchingText(            String pattern){
              return SEnumOperations.getEnumMemberValue((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "Log statement";
            }
          }
);
        }
      }
    }
  }
  return result;
}
