{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoOverriden");
  final Wrappers._T<Set<Tuples._2<SNodeReference,SNode>>> overridenMethods=new Wrappers._T<Set<Tuples._2<SNodeReference,SNode>>>();
  final String[] methodName=new String[1];
  ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.fromMap(_params).get("project")),"Searching...",true){
    @Override public void run(    @NotNull ProgressIndicator p0){
      ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          overridenMethods.value=GoToOverridenMethod_Action.this.getOverridenMethod(_params);
          methodName[0]=SPropertyOperations.getString(GoToOverridenMethod_Action.this.getInstanceMethodDeclaration(_params),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        }
      }
);
    }
  }
);
  EditorCell selectedCell=((EditorCell)MapSequence.fromMap(_params).get("selectedCell"));
  InputEvent inputEvent=event.getInputEvent();
  List<SNodeReference> methods=SetSequence.fromSet(overridenMethods.value).select(new ISelector<Tuples._2<SNodeReference,SNode>,SNodeReference>(){
    public SNodeReference select(    Tuples._2<SNodeReference,SNode> it){
      return it._0();
    }
  }
).toListSequence();
  RelativePoint relativePoint=GoToContextMenuUtil.getRelativePoint(selectedCell,inputEvent);
  String title="Choose super method of" + methodName[0] + "()";
  GoToContextMenuUtil.showMenu(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")),title,methods,new DefaultMethodRenderer(),relativePoint);
}
