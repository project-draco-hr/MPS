{
  try {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoOverriden");
    final Wrappers._T<Set<Tuples._2<SNodeReference,SNode>>> overridenMethods=new Wrappers._T<Set<Tuples._2<SNodeReference,SNode>>>();
    final String[] methodName=new String[1];
    ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.fromMap(_params).get("project")),"Searching...",true){
      @Override public void run(      @NotNull ProgressIndicator p0){
        ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess().runReadAction(new Runnable(){
          public void run(){
            overridenMethods.value=GoToOverridenMethod_Action.this.getOverridenMethod(_params);
            methodName[0]=SPropertyOperations.getString(GoToOverridenMethod_Action.this.getInstanceMethodDeclaration(_params),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
          }
        }
);
      }
    }
);
    GoToHelper.showOverridenMethodsMenu(SetSequence.fromSet(overridenMethods.value).select(new ISelector<Tuples._2<SNodeReference,SNode>,SNodeReference>(){
      public SNodeReference select(      Tuples._2<SNodeReference,SNode> it){
        return it._0();
      }
    }
).toListSequence(),GoToHelper.getRelativePoint(((EditorCell)MapSequence.fromMap(_params).get("selectedCell")),event.getInputEvent()),ProjectHelper.toMPSProject(((Project)MapSequence.fromMap(_params).get("project"))),methodName[0]);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "GoToOverridenMethod",t);
    }
  }
}
