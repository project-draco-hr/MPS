{
  try {
    ScriptBuilder scb=new ScriptBuilder();
    final UIQueryRelayStrategy relayStrat=new UIQueryRelayStrategy();
    final LoggingProgressStrategy logStrat=new LoggingProgressStrategy();
    final LoggingFeedbackStrategy feedbackStrat=new LoggingFeedbackStrategy();
    final IJobMonitor jmon=new IJobMonitor(){
      public boolean pleaseStop(){
        return false;
      }
      public IProgress currentProgress(){
        return logStrat.currentProgress();
      }
    }
;
    final IConfigMonitor cmon=new IConfigMonitor(){
      public <T extends IOption>T relayQuery(      IQuery<T> query){
        return relayStrat.relayQuery(query,MakeModel_Action.this.context);
      }
    }
;
    IScript scr=scb.withFacets(new IFacet.Name("Generator"),new IFacet.Name("TextGen"),new IFacet.Name("JavaCompilator"),new IFacet.Name("Make")).withTarget(new ITarget.Name("make")).withInit(new _FunctionTypes._void_P1_E0<IParametersPool>(){
      public void invoke(      IParametersPool pool){
        Tuples._3<Project,IOperationContext,Iterable<SModelDescriptor>> vars=(Tuples._3<Project,IOperationContext,Iterable<SModelDescriptor>>)pool.parameters(new ITarget.Name("Parameters"),Object.class);
        vars._0(MakeModel_Action.this.context.getProject());
        vars._1(MakeModel_Action.this.context);
        vars._2(MakeModel_Action.this.models);
      }
    }
).withMonitors(new IMonitors.Stub(cmon,jmon){
      @Override public void runJobWithMonitor(      final _FunctionTypes._void_P1_E0<? super IJobMonitor> code){
        IdeEventQueue.getInstance().flushQueue();
        ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive(){
          public void run(          ProgressIndicator realInd){
            code.invoke(jmon);
          }
        }
,"Script",true,MakeModel_Action.this.context.getProject());
      }
    }
).toScript();
    IResult res;
    res=scr.execute();
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "MakeModel",t);
  }
}
