{
  String pkg=loc.getPrefix();
  PathItem pi=getPathItem.invoke(loc.getPath());
  for (  String subpkg : ListSequence.fromList(pi.subpackages(pkg))) {
    if (ListSequence.fromList(pi.resources(subpkg)).isNotEmpty()) {
      SModelReference smref=smodelRefWithId(subpkg);
      SModelReference smref2=smodelRefWithFqName(subpkg);
      SModelDescriptor descById=SModelRepository.getInstance().getModelDescriptor(smref);
      SModelDescriptor descByFqName=SModelRepository.getInstance().getModelDescriptor(smref2);
      if (descById != null && descByFqName != null) {
        SModelRepository.getInstance().addOwnerForDescriptor(descByFqName,loc.getModule());
        SetSequence.fromSet(result).addElement(((BaseStubModelDescriptor)descByFqName));
      }
 else {
        BaseStubModelDescriptor desc=new BaseStubModelDescriptor(mrm,null,smref);
        SModelRepository.getInstance().registerModelDescriptor(desc,loc.getModule());
        SetSequence.fromSet(result).addElement(desc);
      }
    }
    collectDescriptors(new StubLocation(stubLoc.getPath(),subpkg,loc.getModule()),getPathItem,result);
  }
}
