{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("checkingReference",new BaseReferenceConstraintsDescriptor("checkingReference",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_jzm89w_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new Scope(){
            public Iterable<SNode> getAvailableElements(            @Nullable String prefix){
              List<SNode> nodes=new ArrayList<SNode>();
              for (              SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.getParent(SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.lang.test.structure.ScopesTest"))))) {
                ListSequence.fromList(nodes).addElement(SLinkOperations.getTargetNode(reference));
              }
              return nodes;
            }
            @Nullable public SNode resolve(            SNode contextNode,            @NotNull String refText){
              return null;
            }
            @Nullable public String getReferenceText(            SNode contextNode,            @NotNull SNode node){
              return null;
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
