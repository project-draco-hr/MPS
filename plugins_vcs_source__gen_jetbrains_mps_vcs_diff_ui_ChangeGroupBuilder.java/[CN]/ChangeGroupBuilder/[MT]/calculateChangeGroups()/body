{
  final Map<ModelChange,Integer> leftStarts=MapSequence.fromMap(new HashMap<ModelChange,Integer>());
  final Map<ModelChange,Integer> leftEnds=MapSequence.fromMap(new HashMap<ModelChange,Integer>());
  final Map<ModelChange,Integer> rightStarts=MapSequence.fromMap(new HashMap<ModelChange,Integer>());
  final Map<ModelChange,Integer> rightEnds=MapSequence.fromMap(new HashMap<ModelChange,Integer>());
  for (  ModelChange change : ListSequence.fromList(myChangeSet.getModelChanges())) {
    ChangeEditorMessage leftMessage=myLeftEditor.getMessageForChange(change);
    ChangeEditorMessage rightMessage=myRightEditor.getMessageForChange(change);
    int leftStart=-1;
    int rightStart=-1;
    int leftHeight=-1;
    int rightHeight=-1;
    if (leftMessage != null) {
      leftStart=leftMessage.getStart(getLeftComponent());
      leftHeight=leftMessage.getHeight(getLeftComponent());
    }
    if (rightMessage != null) {
      rightStart=rightMessage.getStart(getRightComponent());
      rightHeight=rightMessage.getHeight(getRightComponent());
    }
    if (leftHeight == -1 && rightHeight == -1) {
      continue;
    }
    if (leftHeight == -1) {
{
        Tuples._2<Integer,Integer> _tmp_a1l5hi_a0l0e0c=MultiTuple.<Integer,Integer>from(getLeftComponent().getRootCell().getY(),0);
        leftStart=_tmp_a1l5hi_a0l0e0c._0();
        leftHeight=_tmp_a1l5hi_a0l0e0c._1();
      }
    }
    if (rightHeight == -1) {
{
        Tuples._2<Integer,Integer> _tmp_a1l5hi_a0m0e0c=MultiTuple.<Integer,Integer>from(getRightComponent().getRootCell().getY(),0);
        rightStart=_tmp_a1l5hi_a0m0e0c._0();
        rightHeight=_tmp_a1l5hi_a0m0e0c._1();
      }
    }
    MapSequence.fromMap(leftStarts).put(change,leftStart);
    MapSequence.fromMap(leftEnds).put(change,leftStart + leftHeight);
    MapSequence.fromMap(rightStarts).put(change,rightStart);
    MapSequence.fromMap(rightEnds).put(change,rightStart + rightHeight);
  }
  DisjointSets<ModelChange> ds=new DisjointSets<ModelChange>(MapSequence.fromMap(leftStarts).keySet());
  for (  ModelChange a : SetSequence.fromSet(MapSequence.fromMap(leftStarts).keySet())) {
    for (    ModelChange b : SetSequence.fromSet(MapSequence.fromMap(leftStarts).keySet())) {
      if (!(MapSequence.fromMap(leftEnds).get(a) - 1 < MapSequence.fromMap(leftStarts).get(b) || MapSequence.fromMap(leftEnds).get(b) - 1 < MapSequence.fromMap(leftStarts).get(a))) {
        ds.unite(a,b);
      }
      if (!(MapSequence.fromMap(rightEnds).get(a) - 1 < MapSequence.fromMap(rightStarts).get(b) || MapSequence.fromMap(rightEnds).get(b) - 1 < MapSequence.fromMap(rightStarts).get(a))) {
        ds.unite(a,b);
      }
    }
  }
  myChangeGroups=ListSequence.fromListWithValues(new ArrayList<ChangeGroup>(),Sequence.fromIterable(ds.getSets()).<ChangeGroup>select(new ISelector<Set<ModelChange>,ChangeGroup>(){
    public ChangeGroup select(    Set<ModelChange> s){
      return new ChangeGroup(leftStarts,leftEnds,rightStarts,rightEnds,SetSequence.fromSet(s).toListSequence(),myMergeContext);
    }
  }
));
  myChangeGroups=ListSequence.fromList(myChangeGroups).sort(new ISelector<ChangeGroup,Comparable<?>>(){
    public Comparable<?> select(    ChangeGroup g){
      return g.getLeftStart();
    }
  }
,true).toListSequence();
}
