{
{
    InferenceRule_Runtime inferenceRule=new typeof_AbstractContainerCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddAllElementsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddAllSetElementsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddFirstElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddLastElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AddSetElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AllOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AnyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AsSequenceOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_BinaryOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ChunkOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ClearAllElementsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ClearSetOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ComparatorSortOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ContainsAllOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ContainsKeyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ContainsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ContainsValueOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_CustomContainerDeclaration_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_CustomMapCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DistinctOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DowncastExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FindFirstOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FindLastOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FoldLeftOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FoldRightOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ForEachStatement_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ForEachVariable_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ForEachVariableReference_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetCurrentOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetEnumeratorOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetFirstOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetIndexOfOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetIteratorOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetKeysOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetLastIndexOfOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetLastOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetNextOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetSizeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_GetValuesOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_HasNextOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_HashMapCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_HeadListOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_HeadMapOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_HeadSetOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InsertElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_IsEmptyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_IsNotEmptyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_JoinOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_KeyAccessOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ListElementAccessExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MapClearOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MapElement_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MapRemoveOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MappingOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MappingsSetOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MoveNextOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MultiForEachVariable_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MultiForEachVariableReference_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PageOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeekOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PopOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PushOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PutAllOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ReduceLeftOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ReduceRightOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveAllElementsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveAllSetElementsOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveAtElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveFirstElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveLastElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveSetElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RemoveWhereOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ReverseOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SelectOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SequenceCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SetElementOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SingletonSequenceCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SkipOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SmartClosureParameterDeclaration_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SortOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SubListOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SubMapOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_SubSetOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TailListOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TailMapOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TailSetOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TakeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ToArrayOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ToIteratorOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ToListOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TreeMapCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TreeSetCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ValueAccessOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_VisitAllOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_WhereOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    NonTypesystemRule_Runtime nonTypesystemRule=new check_CustomContainerCreator_elementType_NonTypesystemRule();
    this.myNonTypesystemRules.add(nonTypesystemRule);
  }
{
    NonTypesystemRule_Runtime nonTypesystemRule=new check_container_creator_not_primitive_array_NonTypesystemRule();
    this.myNonTypesystemRules.add(nonTypesystemRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new ClassifierType_Set_weakSupertypeOf_set_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new IMapping_interface_supertypeOf_mappingType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SortedMap_comparableTo_sorted_map_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new SortedSet_comparableTo_sorted_set_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new java_util_Map_extends_map_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new map_extends_java_util_Map_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new mappingType_sypertypeOf_IMapping_interface_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new queue_supertypeOf_deque_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sequence_supertypeOf_map_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sequence_supertypeOf_queue_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sequence_supertypeOf_set_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sequence_supertypeOf_stack_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new set_weakSupertypeOf_ClassifierType_Set_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sortedMap_subtypeOf_map_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sorted_map_comparableTo_SortedMap_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sorted_set_comparableTo_SortedSet_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new sorted_set_subtypeOf_set_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new stack_supertypeOf_deque_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ClassifierTypeIterable_SequenceType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ClassifierTypeList_ListType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ClassifierType_Iterator_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ClassifierType_Queue_QueueType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ContainerIteratorType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_DequeType_ClassiType_Deque_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_DequeType_DequeType_withWildcard_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_EnumeratorType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_EnumeratorType_IteratorType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_IEnumerator_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ISequence_class_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_IteratorType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ListType_ClassifierTypeList_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ListType_ListType_withWildcard_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_ListType_SequenceType_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_QueueType_ClassiType_Queue_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_QueueType_QueueType_withWildcard_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_SequenceType_ClassifierTypeIterable_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_StackType_ClassiType_Deque_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_StackType_StackType_withWildcard_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new supertypesOf_linkedlist_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new deque_type_comparableWith_Deque_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new list_type_comparableWith_List_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new map_type_comparableWith_Map_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new queue_type_comparableWith_Queue_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new sequence_type_comparableWith_Iterable_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new set_type_comparableWith_Set_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    ComparisonRule_Runtime comparisonRule=new stack_type_comparableWith_Deque_ComparisonRule();
    this.myComparisonRules.add(comparisonRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new containerIterator_subtrypeOf_containerIterator_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new enumerator_subtypeOf_enumerator_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new iterator_subtypeOf_iterator_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new listSubtypeOfNodeList_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new listType_with_vars_subtypeOf_listType_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new list_covariant_with_extends_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new mapWithTypeVars_subtypeOf_map_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new sequence_subtypeOf_sequence_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new setType_with_vars_subtypeOf_setType_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new set_covariant_with_extends_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    InequationReplacementRule_Runtime eliminationRule=new set_type_equivalent_to_subconcepts_InequationReplacementRule();
    this.myInequationReplacementRules.add(eliminationRule);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement";
      }
      public SNode getSourceNode(      SNode targetNode){
        return SNodeOperations.getParent(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.ToListOperation";
      }
      public SNode getSourceNode(      SNode targetNode){
        return RulesFunctions_Collections.getOutput(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.SkipOperation";
      }
      public SNode getSourceNode(      SNode targetNode){
        return RulesFunctions_Collections.getOutput(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.PageOperation";
      }
      public SNode getSourceNode(      SNode targetNode){
        return RulesFunctions_Collections.getOutput(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.TakeOperation";
      }
      public SNode getSourceNode(      SNode targetNode){
        return RulesFunctions_Collections.getOutput(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
{
    IDependency_Runtime dependency_Runtime=new AbstractDependency_Runtime(){
      public String getSourceConceptFQName(){
        return "jetbrains.mps.baseLanguage.collections.structure.DistinctOperation";
      }
      public SNode getSourceNode(      SNode targetNode){
        return RulesFunctions_Collections.getOutput(targetNode);
      }
      public String getTargetConceptFQName(){
        return "jetbrains.mps.baseLanguage.structure.Expression";
      }
    }
;
    this.myDependencies.add(dependency_Runtime);
  }
}
