{
  this.addNodeById("8655579351371307224");
  this.addNodeById("8655579351371307240");
  IntroduceLocalVariableRefactoring refactoring=new IntroduceLocalVariableRefactoring();
  refactoring.init(SNodeOperations.cast(this.getNodeById("8655579351371348391"),MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x110efd61311L,"jetbrains.mps.baseLanguage.collections.structure.ContainsOperation")),null);
  refactoring.setName("b");
  refactoring.doRefactoring();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("8655579351371307225"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("8655579351371307241"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
