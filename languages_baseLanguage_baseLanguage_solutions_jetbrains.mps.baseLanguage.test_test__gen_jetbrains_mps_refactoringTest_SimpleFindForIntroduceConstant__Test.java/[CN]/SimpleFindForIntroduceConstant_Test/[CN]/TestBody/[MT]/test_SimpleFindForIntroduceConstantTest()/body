{
  this.addNodeById("7568753874916187326");
  this.addNodeById("7568753874916187364");
  IntroduceConstantRefactoring refactoring=new IntroduceConstantRefactoring();
  refactoring.init(SNodeOperations.cast(this.getNodeById("7568753874916187344"),"jetbrains.mps.baseLanguage.structure.StringLiteral"),null);
  refactoring.setName("s");
  refactoring.setReplacingAll(true);
  refactoring.setVisibilityLevel(VisibilityLevel.PRIVATE);
  refactoring.doRefactoring();
  Assert.assertNull("nodes '" + SNodeOperations.cast(this.getNodeById("7568753874916187327"),"jetbrains.mps.baseLanguage.structure.ClassConcept") + "' and '"+ SNodeOperations.cast(this.getNodeById("7568753874916187375"),"jetbrains.mps.baseLanguage.structure.ClassConcept")+ "' do not match!",NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7568753874916187327"),"jetbrains.mps.baseLanguage.structure.ClassConcept")),ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("7568753874916187375"),"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
}
