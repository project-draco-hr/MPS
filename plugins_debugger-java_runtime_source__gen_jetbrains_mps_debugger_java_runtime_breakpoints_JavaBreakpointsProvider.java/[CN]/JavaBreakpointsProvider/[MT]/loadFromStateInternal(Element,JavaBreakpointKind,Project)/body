{
switch (kind) {
case LINE_BREAKPOINT:
{
      final JavaBreakpointInfo breakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
      if (!(breakpointInfo.isInitialized())) {
        return null;
      }
      LineBreakpoint breakpoint=new LineBreakpoint(breakpointInfo.location(),project);
      breakpointInfo.initBreakpoint(breakpoint);
      return breakpoint;
    }
case EXCEPTION_BREAKPOINT:
{
    ExceptionBreakpoint.ExceptionBreakpointInfo exceptionBreakpointInfo=XmlSerializer.deserialize(state,ExceptionBreakpoint.ExceptionBreakpointInfo.class);
    ExceptionBreakpoint exceptionBreakpoint=new ExceptionBreakpoint(exceptionBreakpointInfo.myExceptionName,project);
    exceptionBreakpointInfo.initBreakpoint(exceptionBreakpoint);
    return exceptionBreakpoint;
  }
case METHOD_BREAKPOINT:
{
  final JavaBreakpointInfo lineBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
  if (!(lineBreakpointInfo.isInitialized())) {
    return null;
  }
  LineBreakpoint lineBreakpoint=new LineBreakpoint(lineBreakpointInfo.location(),project);
  lineBreakpointInfo.initBreakpoint(lineBreakpoint);
  return lineBreakpoint;
}
case FIELD_BREAKPOINT:
{
final JavaBreakpointInfo fieldBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
if (!(fieldBreakpointInfo.isInitialized())) {
  return null;
}
SNodeReference pointer=fieldBreakpointInfo.location();
FieldBreakpoint fieldBreakpoint=new FieldBreakpoint(pointer,project);
fieldBreakpointInfo.initBreakpoint(fieldBreakpoint);
return fieldBreakpoint;
}
default :
}
return null;
}
